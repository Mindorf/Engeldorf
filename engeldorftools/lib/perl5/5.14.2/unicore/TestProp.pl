
use strict;
use warnings;

# If run outside the normal test suite on an ASCII platform, you can
# just create a latin1_to_native() function that just returns its
# inputs, because that's the only function used from test.pl
require "test.pl";

# Test qr/\X/ and the \p{} regular expression constructs.  This file is
# constructed by mktables from the tables it generates, so if mktables is
# buggy, this won't necessarily catch those bugs.  Tests are generated for all
# feasible properties; a few aren't currently feasible; see
# is_code_point_usable() in mktables for details.

# Standard test packages are not used because this manipulates SIG_WARN.  It
# exits 0 if every non-skipped test succeeded; -1 if any failed.

my $Tests = 0;
my $Fails = 0;

sub Expect($$$$) {
    my $expected = shift;
    my $ord = shift;
    my $regex  = shift;
    my $warning_type = shift;   # Type of warning message, like 'deprecated'
                                # or empty if none
    my $line   = (caller)[2];
    $ord = ord(latin1_to_native(chr($ord)));

    # Convert the code point to hex form
    my $string = sprintf "\"\\x{%04X}\"", $ord;

    my @tests = "";

    # The first time through, use all warnings.  If the input should generate
    # a warning, add another time through with them turned off
    push @tests, "no warnings '$warning_type';" if $warning_type;

    foreach my $no_warnings (@tests) {

        # Store any warning messages instead of outputting them
        local $SIG{__WARN__} = $SIG{__WARN__};
        my $warning_message;
        $SIG{__WARN__} = sub { $warning_message = $_[0] };

        $Tests++;

        # A string eval is needed because of the 'no warnings'.
        # Assumes no parens in the regular expression
        my $result = eval "$no_warnings
                            my \$RegObj = qr($regex);
                            $string =~ \$RegObj ? 1 : 0";
        if (not defined $result) {
            print "not ok $Tests - couldn't compile /$regex/; line $line: $@\n";
            $Fails++;
        }
        elsif ($result ^ $expected) {
            print "not ok $Tests - expected $expected but got $result for $string =~ qr/$regex/; line $line\n";
            $Fails++;
        }
        elsif ($warning_message) {
            if (! $warning_type || ($warning_type && $no_warnings)) {
                print "not ok $Tests - for qr/$regex/ did not expect warning message '$warning_message'; line $line\n";
                $Fails++;
            }
            else {
                print "ok $Tests - expected and got a warning message for qr/$regex/; line $line\n";
            }
        }
        elsif ($warning_type && ! $no_warnings) {
            print "not ok $Tests - for qr/$regex/ expected a $warning_type warning message, but got none; line $line\n";
            $Fails++;
        }
        else {
            print "ok $Tests - got $result for $string =~ qr/$regex/; line $line\n";
        }
    }
    return;
}

sub Error($) {
    my $regex  = shift;
    $Tests++;
    if (eval { 'x' =~ qr/$regex/; 1 }) {
        $Fails++;
        my $line = (caller)[2];
        print "not ok $Tests - re compiled ok, but expected error for qr/$regex/; line $line: $@\n";
    }
    else {
        my $line = (caller)[2];
        print "ok $Tests - got and expected error for qr/$regex/; line $line\n";
    }
    return;
}

# GCBTest.txt character that separates grapheme clusters
my $breakable_utf8 = my $breakable = chr(0xF7);
utf8::upgrade($breakable_utf8);

# GCBTest.txt character that indicates that the adjoining code points are part
# of the same grapheme cluster
my $nobreak_utf8 = my $nobreak = chr(0xD7);
utf8::upgrade($nobreak_utf8);

sub Test_X($) {
    # Test qr/\X/ matches.  The input is a line from auxiliary/GCBTest.txt
    # Each such line is a sequence of code points given by their hex numbers,
    # separated by the two characters defined just before this subroutine that
    # indicate that either there can or cannot be a break between the adjacent
    # code points.  If there isn't a break, that means the sequence forms an
    # extended grapheme cluster, which means that \X should match the whole
    # thing.  If there is a break, \X should stop there.  This is all
    # converted by this routine into a match:
    #   $string =~ /(\X)/,
    # Each \X should match the next cluster; and that is what is checked.

    my $template = shift;

    my $line   = (caller)[2];

    # The line contains characters above the ASCII range, but in Latin1.  It
    # may or may not be in utf8, and if it is, it may or may not know it.  So,
    # convert these characters to 8 bits.  If knows is in utf8, simply
    # downgrade.
    if (utf8::is_utf8($template)) {
        utf8::downgrade($template);
    } else {

        # Otherwise, if it is in utf8, but doesn't know it, the next lines
        # convert the two problematic characters to their 8-bit equivalents.
        # If it isn't in utf8, they don't harm anything.
        use bytes;
        $template =~ s/$nobreak_utf8/$nobreak/g;
        $template =~ s/$breakable_utf8/$breakable/g;
    }

    # Get rid of the leading and trailing breakables
    $template =~ s/^ \s* $breakable \s* //x;
    $template =~ s/ \s* $breakable \s* $ //x;

    # And no-breaks become just a space.
    $template =~ s/ \s* $nobreak \s* / /xg;

    # Split the input into segments that are breakable between them.
    my @segments = split /\s*$breakable\s*/, $template;

    my $string = "";
    my $display_string = "";
    my @should_match;
    my @should_display;

    # Convert the code point sequence in each segment into a Perl string of
    # characters
    foreach my $segment (@segments) {
        my @code_points = split /\s+/, $segment;
        my $this_string = "";
        my $this_display = "";
        foreach my $code_point (@code_points) {
            $this_string .= latin1_to_native(chr(hex $code_point));
            $this_display .= "\\x{$code_point}";
        }

        # The next cluster should match the string in this segment.
        push @should_match, $this_string;
        push @should_display, $this_display;
        $string .= $this_string;
        $display_string .= $this_display;
    }

    # If a string can be represented in both non-ut8 and utf8, test both cases
    UPGRADE:
    for my $to_upgrade (0 .. 1) {

        if ($to_upgrade) {

            # If already in utf8, would just be a repeat
            next UPGRADE if utf8::is_utf8($string);

            utf8::upgrade($string);
        }

        # Finally, do the \X match.
        my @matches = $string =~ /(\X)/g;

        # Look through each matched cluster to verify that it matches what we
        # expect.
        my $min = (@matches < @should_match) ? @matches : @should_match;
        for my $i (0 .. $min - 1) {
            $Tests++;
            if ($matches[$i] eq $should_match[$i]) {
                print "ok $Tests - ";
                if ($i == 0) {
                    print "In \"$display_string\" =~ /(\\X)/g, \\X #1";
                } else {
                    print "And \\X #", $i + 1,
                }
                print " correctly matched $should_display[$i]; line $line\n";
            } else {
                $matches[$i] = join("", map { sprintf "\\x{%04X}", $_ }
                                                    unpack("U*", $matches[$i]));
                print "not ok $Tests - In \"$display_string\" =~ /(\\X)/g, \\X #",
                    $i + 1,
                    " should have matched $should_display[$i]",
                    " but instead matched $matches[$i]",
                    ".  Abandoning rest of line $line\n";
                next UPGRADE;
            }
        }

        # And the number of matches should equal the number of expected matches.
        $Tests++;
        if (@matches == @should_match) {
            print "ok $Tests - Nothing was left over; line $line\n";
        } else {
            print "not ok $Tests - There were ", scalar @should_match, " \\X matches expected, but got ", scalar @matches, " instead; line $line\n";
        }
    }

    return;
}

sub Finished() {
    print "1..$Tests\n";
    exit($Fails ? -1 : 0);
}

Error('\p{Script=InGreek}');    # Bug #69018
Test_X("1100 $nobreak 1161");  # Bug #70940
Expect(0, 0x2028, '\p{Print}', ""); # Bug # 71722
Expect(0, 0x2029, '\p{Print}', ""); # Bug # 71722
Expect(1, 0xFF10, '\p{XDigit}', ""); # Bug # 71726
Error('\p{Other_Lowercase=:=	Yes}');
Error('\P{Other_Lowercase=:=	Yes}');
Expect(1, 696, '\p{Other_Lowercase=yes}', 'deprecated');
Expect(0, 696, '\p{^Other_Lowercase=yes}', 'deprecated');
Expect(0, 696, '\P{Other_Lowercase=yes}', 'deprecated');
Expect(1, 696, '\P{^Other_Lowercase=yes}', 'deprecated');
Expect(0, 687, '\p{Other_Lowercase=yes}', 'deprecated');
Expect(1, 687, '\p{^Other_Lowercase=yes}', 'deprecated');
Expect(1, 687, '\P{Other_Lowercase=yes}', 'deprecated');
Expect(0, 687, '\P{^Other_Lowercase=yes}', 'deprecated');
Expect(1, 696, '\p{Other_Lowercase=--Yes}', 'deprecated');
Expect(0, 696, '\p{^Other_Lowercase=--Yes}', 'deprecated');
Expect(0, 696, '\P{Other_Lowercase=--Yes}', 'deprecated');
Expect(1, 696, '\P{^Other_Lowercase=--Yes}', 'deprecated');
Expect(0, 687, '\p{Other_Lowercase=--Yes}', 'deprecated');
Expect(1, 687, '\p{^Other_Lowercase=--Yes}', 'deprecated');
Expect(1, 687, '\P{Other_Lowercase=--Yes}', 'deprecated');
Expect(0, 687, '\P{^Other_Lowercase=--Yes}', 'deprecated');
Error('\p{OLower=		Y:=}');
Error('\P{OLower=		Y:=}');
Expect(1, 696, '\p{OLower=y}', 'deprecated');
Expect(0, 696, '\p{^OLower=y}', 'deprecated');
Expect(0, 696, '\P{OLower=y}', 'deprecated');
Expect(1, 696, '\P{^OLower=y}', 'deprecated');
Expect(0, 687, '\p{OLower=y}', 'deprecated');
Expect(1, 687, '\p{^OLower=y}', 'deprecated');
Expect(1, 687, '\P{OLower=y}', 'deprecated');
Expect(0, 687, '\P{^OLower=y}', 'deprecated');
Expect(1, 696, '\p{OLower:	Y}', 'deprecated');
Expect(0, 696, '\p{^OLower:	Y}', 'deprecated');
Expect(0, 696, '\P{OLower:	Y}', 'deprecated');
Expect(1, 696, '\P{^OLower:	Y}', 'deprecated');
Expect(0, 687, '\p{OLower:	Y}', 'deprecated');
Expect(1, 687, '\p{^OLower:	Y}', 'deprecated');
Expect(1, 687, '\P{OLower:	Y}', 'deprecated');
Expect(0, 687, '\P{^OLower:	Y}', 'deprecated');
Error('\p{Is_Other_Lowercase=/a/		T}');
Error('\P{Is_Other_Lowercase=/a/		T}');
Expect(1, 696, '\p{Is_Other_Lowercase=t}', 'deprecated');
Expect(0, 696, '\p{^Is_Other_Lowercase=t}', 'deprecated');
Expect(0, 696, '\P{Is_Other_Lowercase=t}', 'deprecated');
Expect(1, 696, '\P{^Is_Other_Lowercase=t}', 'deprecated');
Expect(0, 687, '\p{Is_Other_Lowercase=t}', 'deprecated');
Expect(1, 687, '\p{^Is_Other_Lowercase=t}', 'deprecated');
Expect(1, 687, '\P{Is_Other_Lowercase=t}', 'deprecated');
Expect(0, 687, '\P{^Is_Other_Lowercase=t}', 'deprecated');
Expect(1, 696, '\p{Is_Other_Lowercase=-T}', 'deprecated');
Expect(0, 696, '\p{^Is_Other_Lowercase=-T}', 'deprecated');
Expect(0, 696, '\P{Is_Other_Lowercase=-T}', 'deprecated');
Expect(1, 696, '\P{^Is_Other_Lowercase=-T}', 'deprecated');
Expect(0, 687, '\p{Is_Other_Lowercase=-T}', 'deprecated');
Expect(1, 687, '\p{^Is_Other_Lowercase=-T}', 'deprecated');
Expect(1, 687, '\P{Is_Other_Lowercase=-T}', 'deprecated');
Expect(0, 687, '\P{^Is_Other_Lowercase=-T}', 'deprecated');
Error('\p{Is_OLower=		True/a/}');
Error('\P{Is_OLower=		True/a/}');
Expect(1, 696, '\p{Is_OLower=true}', 'deprecated');
Expect(0, 696, '\p{^Is_OLower=true}', 'deprecated');
Expect(0, 696, '\P{Is_OLower=true}', 'deprecated');
Expect(1, 696, '\P{^Is_OLower=true}', 'deprecated');
Expect(0, 687, '\p{Is_OLower=true}', 'deprecated');
Expect(1, 687, '\p{^Is_OLower=true}', 'deprecated');
Expect(1, 687, '\P{Is_OLower=true}', 'deprecated');
Expect(0, 687, '\P{^Is_OLower=true}', 'deprecated');
Expect(1, 696, '\p{Is_OLower=_-true}', 'deprecated');
Expect(0, 696, '\p{^Is_OLower=_-true}', 'deprecated');
Expect(0, 696, '\P{Is_OLower=_-true}', 'deprecated');
Expect(1, 696, '\P{^Is_OLower=_-true}', 'deprecated');
Expect(0, 687, '\p{Is_OLower=_-true}', 'deprecated');
Expect(1, 687, '\p{^Is_OLower=_-true}', 'deprecated');
Expect(1, 687, '\P{Is_OLower=_-true}', 'deprecated');
Expect(0, 687, '\P{^Is_OLower=_-true}', 'deprecated');
Error('\p{Other_Lowercase=_ NO:=}');
Error('\P{Other_Lowercase=_ NO:=}');
Expect(1, 687, '\p{Other_Lowercase=no}', 'deprecated');
Expect(0, 687, '\p{^Other_Lowercase=no}', 'deprecated');
Expect(0, 687, '\P{Other_Lowercase=no}', 'deprecated');
Expect(1, 687, '\P{^Other_Lowercase=no}', 'deprecated');
Expect(0, 696, '\p{Other_Lowercase=no}', 'deprecated');
Expect(1, 696, '\p{^Other_Lowercase=no}', 'deprecated');
Expect(1, 696, '\P{Other_Lowercase=no}', 'deprecated');
Expect(0, 696, '\P{^Other_Lowercase=no}', 'deprecated');
Expect(1, 687, '\p{Other_Lowercase=_	no}', 'deprecated');
Expect(0, 687, '\p{^Other_Lowercase=_	no}', 'deprecated');
Expect(0, 687, '\P{Other_Lowercase=_	no}', 'deprecated');
Expect(1, 687, '\P{^Other_Lowercase=_	no}', 'deprecated');
Expect(0, 696, '\p{Other_Lowercase=_	no}', 'deprecated');
Expect(1, 696, '\p{^Other_Lowercase=_	no}', 'deprecated');
Expect(1, 696, '\P{Other_Lowercase=_	no}', 'deprecated');
Expect(0, 696, '\P{^Other_Lowercase=_	no}', 'deprecated');
Error('\p{OLower:   /a/	N}');
Error('\P{OLower:   /a/	N}');
Expect(1, 687, '\p{OLower=n}', 'deprecated');
Expect(0, 687, '\p{^OLower=n}', 'deprecated');
Expect(0, 687, '\P{OLower=n}', 'deprecated');
Expect(1, 687, '\P{^OLower=n}', 'deprecated');
Expect(0, 696, '\p{OLower=n}', 'deprecated');
Expect(1, 696, '\p{^OLower=n}', 'deprecated');
Expect(1, 696, '\P{OLower=n}', 'deprecated');
Expect(0, 696, '\P{^OLower=n}', 'deprecated');
Expect(1, 687, '\p{OLower= n}', 'deprecated');
Expect(0, 687, '\p{^OLower= n}', 'deprecated');
Expect(0, 687, '\P{OLower= n}', 'deprecated');
Expect(1, 687, '\P{^OLower= n}', 'deprecated');
Expect(0, 696, '\p{OLower= n}', 'deprecated');
Expect(1, 696, '\p{^OLower= n}', 'deprecated');
Expect(1, 696, '\P{OLower= n}', 'deprecated');
Expect(0, 696, '\P{^OLower= n}', 'deprecated');
Error('\p{Is_Other_Lowercase::=-	F}');
Error('\P{Is_Other_Lowercase::=-	F}');
Expect(1, 687, '\p{Is_Other_Lowercase=f}', 'deprecated');
Expect(0, 687, '\p{^Is_Other_Lowercase=f}', 'deprecated');
Expect(0, 687, '\P{Is_Other_Lowercase=f}', 'deprecated');
Expect(1, 687, '\P{^Is_Other_Lowercase=f}', 'deprecated');
Expect(0, 696, '\p{Is_Other_Lowercase=f}', 'deprecated');
Expect(1, 696, '\p{^Is_Other_Lowercase=f}', 'deprecated');
Expect(1, 696, '\P{Is_Other_Lowercase=f}', 'deprecated');
Expect(0, 696, '\P{^Is_Other_Lowercase=f}', 'deprecated');
Expect(1, 687, '\p{Is_Other_Lowercase:  F}', 'deprecated');
Expect(0, 687, '\p{^Is_Other_Lowercase:  F}', 'deprecated');
Expect(0, 687, '\P{Is_Other_Lowercase:  F}', 'deprecated');
Expect(1, 687, '\P{^Is_Other_Lowercase:  F}', 'deprecated');
Expect(0, 696, '\p{Is_Other_Lowercase:  F}', 'deprecated');
Expect(1, 696, '\p{^Is_Other_Lowercase:  F}', 'deprecated');
Expect(1, 696, '\P{Is_Other_Lowercase:  F}', 'deprecated');
Expect(0, 696, '\P{^Is_Other_Lowercase:  F}', 'deprecated');
Error('\p{Is_OLower=	:=False}');
Error('\P{Is_OLower=	:=False}');
Expect(1, 687, '\p{Is_OLower=false}', 'deprecated');
Expect(0, 687, '\p{^Is_OLower=false}', 'deprecated');
Expect(0, 687, '\P{Is_OLower=false}', 'deprecated');
Expect(1, 687, '\P{^Is_OLower=false}', 'deprecated');
Expect(0, 696, '\p{Is_OLower=false}', 'deprecated');
Expect(1, 696, '\p{^Is_OLower=false}', 'deprecated');
Expect(1, 696, '\P{Is_OLower=false}', 'deprecated');
Expect(0, 696, '\P{^Is_OLower=false}', 'deprecated');
Expect(1, 687, '\p{Is_OLower=_	False}', 'deprecated');
Expect(0, 687, '\p{^Is_OLower=_	False}', 'deprecated');
Expect(0, 687, '\P{Is_OLower=_	False}', 'deprecated');
Expect(1, 687, '\P{^Is_OLower=_	False}', 'deprecated');
Expect(0, 696, '\p{Is_OLower=_	False}', 'deprecated');
Expect(1, 696, '\p{^Is_OLower=_	False}', 'deprecated');
Expect(1, 696, '\P{Is_OLower=_	False}', 'deprecated');
Expect(0, 696, '\P{^Is_OLower=_	False}', 'deprecated');
Error('\p{Variation_Selector= Yes:=}');
Error('\P{Variation_Selector= Yes:=}');
Expect(1, 6157, '\p{Variation_Selector=yes}', "");
Expect(0, 6157, '\p{^Variation_Selector=yes}', "");
Expect(0, 6157, '\P{Variation_Selector=yes}', "");
Expect(1, 6157, '\P{^Variation_Selector=yes}', "");
Expect(0, 6154, '\p{Variation_Selector=yes}', "");
Expect(1, 6154, '\p{^Variation_Selector=yes}', "");
Expect(1, 6154, '\P{Variation_Selector=yes}', "");
Expect(0, 6154, '\P{^Variation_Selector=yes}', "");
Expect(1, 6157, '\p{Variation_Selector:   -_Yes}', "");
Expect(0, 6157, '\p{^Variation_Selector:   -_Yes}', "");
Expect(0, 6157, '\P{Variation_Selector:   -_Yes}', "");
Expect(1, 6157, '\P{^Variation_Selector:   -_Yes}', "");
Expect(0, 6154, '\p{Variation_Selector:   -_Yes}', "");
Expect(1, 6154, '\p{^Variation_Selector:   -_Yes}', "");
Expect(1, 6154, '\P{Variation_Selector:   -_Yes}', "");
Expect(0, 6154, '\P{^Variation_Selector:   -_Yes}', "");
Error('\p{VS=-_y/a/}');
Error('\P{VS=-_y/a/}');
Expect(1, 6157, '\p{VS=y}', "");
Expect(0, 6157, '\p{^VS=y}', "");
Expect(0, 6157, '\P{VS=y}', "");
Expect(1, 6157, '\P{^VS=y}', "");
Expect(0, 6154, '\p{VS=y}', "");
Expect(1, 6154, '\p{^VS=y}', "");
Expect(1, 6154, '\P{VS=y}', "");
Expect(0, 6154, '\P{^VS=y}', "");
Expect(1, 6157, '\p{VS=	 Y}', "");
Expect(0, 6157, '\p{^VS=	 Y}', "");
Expect(0, 6157, '\P{VS=	 Y}', "");
Expect(1, 6157, '\P{^VS=	 Y}', "");
Expect(0, 6154, '\p{VS=	 Y}', "");
Expect(1, 6154, '\p{^VS=	 Y}', "");
Expect(1, 6154, '\P{VS=	 Y}', "");
Expect(0, 6154, '\P{^VS=	 Y}', "");
Error('\p{Is_Variation_Selector:	:=_T}');
Error('\P{Is_Variation_Selector:	:=_T}');
Expect(1, 6157, '\p{Is_Variation_Selector=t}', "");
Expect(0, 6157, '\p{^Is_Variation_Selector=t}', "");
Expect(0, 6157, '\P{Is_Variation_Selector=t}', "");
Expect(1, 6157, '\P{^Is_Variation_Selector=t}', "");
Expect(0, 6154, '\p{Is_Variation_Selector=t}', "");
Expect(1, 6154, '\p{^Is_Variation_Selector=t}', "");
Expect(1, 6154, '\P{Is_Variation_Selector=t}', "");
Expect(0, 6154, '\P{^Is_Variation_Selector=t}', "");
Expect(1, 6157, '\p{Is_Variation_Selector= T}', "");
Expect(0, 6157, '\p{^Is_Variation_Selector= T}', "");
Expect(0, 6157, '\P{Is_Variation_Selector= T}', "");
Expect(1, 6157, '\P{^Is_Variation_Selector= T}', "");
Expect(0, 6154, '\p{Is_Variation_Selector= T}', "");
Expect(1, 6154, '\p{^Is_Variation_Selector= T}', "");
Expect(1, 6154, '\P{Is_Variation_Selector= T}', "");
Expect(0, 6154, '\P{^Is_Variation_Selector= T}', "");
Error('\p{Is_VS=/a/--true}');
Error('\P{Is_VS=/a/--true}');
Expect(1, 6157, '\p{Is_VS=true}', "");
Expect(0, 6157, '\p{^Is_VS=true}', "");
Expect(0, 6157, '\P{Is_VS=true}', "");
Expect(1, 6157, '\P{^Is_VS=true}', "");
Expect(0, 6154, '\p{Is_VS=true}', "");
Expect(1, 6154, '\p{^Is_VS=true}', "");
Expect(1, 6154, '\P{Is_VS=true}', "");
Expect(0, 6154, '\P{^Is_VS=true}', "");
Expect(1, 6157, '\p{Is_VS: true}', "");
Expect(0, 6157, '\p{^Is_VS: true}', "");
Expect(0, 6157, '\P{Is_VS: true}', "");
Expect(1, 6157, '\P{^Is_VS: true}', "");
Expect(0, 6154, '\p{Is_VS: true}', "");
Expect(1, 6154, '\p{^Is_VS: true}', "");
Expect(1, 6154, '\P{Is_VS: true}', "");
Expect(0, 6154, '\P{^Is_VS: true}', "");
Error('\p{Variation_Selector= No/a/}');
Error('\P{Variation_Selector= No/a/}');
Expect(1, 6154, '\p{Variation_Selector=no}', "");
Expect(0, 6154, '\p{^Variation_Selector=no}', "");
Expect(0, 6154, '\P{Variation_Selector=no}', "");
Expect(1, 6154, '\P{^Variation_Selector=no}', "");
Expect(0, 6157, '\p{Variation_Selector=no}', "");
Expect(1, 6157, '\p{^Variation_Selector=no}', "");
Expect(1, 6157, '\P{Variation_Selector=no}', "");
Expect(0, 6157, '\P{^Variation_Selector=no}', "");
Expect(1, 6154, '\p{Variation_Selector=-	no}', "");
Expect(0, 6154, '\p{^Variation_Selector=-	no}', "");
Expect(0, 6154, '\P{Variation_Selector=-	no}', "");
Expect(1, 6154, '\P{^Variation_Selector=-	no}', "");
Expect(0, 6157, '\p{Variation_Selector=-	no}', "");
Expect(1, 6157, '\p{^Variation_Selector=-	no}', "");
Expect(1, 6157, '\P{Variation_Selector=-	no}', "");
Expect(0, 6157, '\P{^Variation_Selector=-	no}', "");
Error('\p{VS=:=N}');
Error('\P{VS=:=N}');
Expect(1, 6154, '\p{VS=n}', "");
Expect(0, 6154, '\p{^VS=n}', "");
Expect(0, 6154, '\P{VS=n}', "");
Expect(1, 6154, '\P{^VS=n}', "");
Expect(0, 6157, '\p{VS=n}', "");
Expect(1, 6157, '\p{^VS=n}', "");
Expect(1, 6157, '\P{VS=n}', "");
Expect(0, 6157, '\P{^VS=n}', "");
Expect(1, 6154, '\p{VS=__N}', "");
Expect(0, 6154, '\p{^VS=__N}', "");
Expect(0, 6154, '\P{VS=__N}', "");
Expect(1, 6154, '\P{^VS=__N}', "");
Expect(0, 6157, '\p{VS=__N}', "");
Expect(1, 6157, '\p{^VS=__N}', "");
Expect(1, 6157, '\P{VS=__N}', "");
Expect(0, 6157, '\P{^VS=__N}', "");
Error('\p{Is_Variation_Selector=	F/a/}');
Error('\P{Is_Variation_Selector=	F/a/}');
Expect(1, 6154, '\p{Is_Variation_Selector:f}', "");
Expect(0, 6154, '\p{^Is_Variation_Selector:f}', "");
Expect(0, 6154, '\P{Is_Variation_Selector:f}', "");
Expect(1, 6154, '\P{^Is_Variation_Selector:f}', "");
Expect(0, 6157, '\p{Is_Variation_Selector:f}', "");
Expect(1, 6157, '\p{^Is_Variation_Selector:f}', "");
Expect(1, 6157, '\P{Is_Variation_Selector:f}', "");
Expect(0, 6157, '\P{^Is_Variation_Selector:f}', "");
Expect(1, 6154, '\p{Is_Variation_Selector=_-F}', "");
Expect(0, 6154, '\p{^Is_Variation_Selector=_-F}', "");
Expect(0, 6154, '\P{Is_Variation_Selector=_-F}', "");
Expect(1, 6154, '\P{^Is_Variation_Selector=_-F}', "");
Expect(0, 6157, '\p{Is_Variation_Selector=_-F}', "");
Expect(1, 6157, '\p{^Is_Variation_Selector=_-F}', "");
Expect(1, 6157, '\P{Is_Variation_Selector=_-F}', "");
Expect(0, 6157, '\P{^Is_Variation_Selector=_-F}', "");
Error('\p{Is_VS=/a/		False}');
Error('\P{Is_VS=/a/		False}');
Expect(1, 6154, '\p{Is_VS=false}', "");
Expect(0, 6154, '\p{^Is_VS=false}', "");
Expect(0, 6154, '\P{Is_VS=false}', "");
Expect(1, 6154, '\P{^Is_VS=false}', "");
Expect(0, 6157, '\p{Is_VS=false}', "");
Expect(1, 6157, '\p{^Is_VS=false}', "");
Expect(1, 6157, '\P{Is_VS=false}', "");
Expect(0, 6157, '\P{^Is_VS=false}', "");
Expect(1, 6154, '\p{Is_VS=	-FALSE}', "");
Expect(0, 6154, '\p{^Is_VS=	-FALSE}', "");
Expect(0, 6154, '\P{Is_VS=	-FALSE}', "");
Expect(1, 6154, '\P{^Is_VS=	-FALSE}', "");
Expect(0, 6157, '\p{Is_VS=	-FALSE}', "");
Expect(1, 6157, '\p{^Is_VS=	-FALSE}', "");
Expect(1, 6157, '\P{Is_VS=	-FALSE}', "");
Expect(0, 6157, '\P{^Is_VS=	-FALSE}', "");
Error('\p{Full_Composition_Exclusion=-yes:=}');
Error('\P{Full_Composition_Exclusion=-yes:=}');
Expect(1, 833, '\p{Full_Composition_Exclusion=yes}', "");
Expect(0, 833, '\p{^Full_Composition_Exclusion=yes}', "");
Expect(0, 833, '\P{Full_Composition_Exclusion=yes}', "");
Expect(1, 833, '\P{^Full_Composition_Exclusion=yes}', "");
Expect(0, 831, '\p{Full_Composition_Exclusion=yes}', "");
Expect(1, 831, '\p{^Full_Composition_Exclusion=yes}', "");
Expect(1, 831, '\P{Full_Composition_Exclusion=yes}', "");
Expect(0, 831, '\P{^Full_Composition_Exclusion=yes}', "");
Expect(1, 833, '\p{Full_Composition_Exclusion= YES}', "");
Expect(0, 833, '\p{^Full_Composition_Exclusion= YES}', "");
Expect(0, 833, '\P{Full_Composition_Exclusion= YES}', "");
Expect(1, 833, '\P{^Full_Composition_Exclusion= YES}', "");
Expect(0, 831, '\p{Full_Composition_Exclusion= YES}', "");
Expect(1, 831, '\p{^Full_Composition_Exclusion= YES}', "");
Expect(1, 831, '\P{Full_Composition_Exclusion= YES}', "");
Expect(0, 831, '\P{^Full_Composition_Exclusion= YES}', "");
Error('\p{Comp_Ex=/a/	-Y}');
Error('\P{Comp_Ex=/a/	-Y}');
Expect(1, 833, '\p{Comp_Ex=y}', "");
Expect(0, 833, '\p{^Comp_Ex=y}', "");
Expect(0, 833, '\P{Comp_Ex=y}', "");
Expect(1, 833, '\P{^Comp_Ex=y}', "");
Expect(0, 831, '\p{Comp_Ex=y}', "");
Expect(1, 831, '\p{^Comp_Ex=y}', "");
Expect(1, 831, '\P{Comp_Ex=y}', "");
Expect(0, 831, '\P{^Comp_Ex=y}', "");
Expect(1, 833, '\p{Comp_Ex=-y}', "");
Expect(0, 833, '\p{^Comp_Ex=-y}', "");
Expect(0, 833, '\P{Comp_Ex=-y}', "");
Expect(1, 833, '\P{^Comp_Ex=-y}', "");
Expect(0, 831, '\p{Comp_Ex=-y}', "");
Expect(1, 831, '\p{^Comp_Ex=-y}', "");
Expect(1, 831, '\P{Comp_Ex=-y}', "");
Expect(0, 831, '\P{^Comp_Ex=-y}', "");
Error('\p{Is_Full_Composition_Exclusion=	 T:=}');
Error('\P{Is_Full_Composition_Exclusion=	 T:=}');
Expect(1, 833, '\p{Is_Full_Composition_Exclusion=t}', "");
Expect(0, 833, '\p{^Is_Full_Composition_Exclusion=t}', "");
Expect(0, 833, '\P{Is_Full_Composition_Exclusion=t}', "");
Expect(1, 833, '\P{^Is_Full_Composition_Exclusion=t}', "");
Expect(0, 831, '\p{Is_Full_Composition_Exclusion=t}', "");
Expect(1, 831, '\p{^Is_Full_Composition_Exclusion=t}', "");
Expect(1, 831, '\P{Is_Full_Composition_Exclusion=t}', "");
Expect(0, 831, '\P{^Is_Full_Composition_Exclusion=t}', "");
Expect(1, 833, '\p{Is_Full_Composition_Exclusion=  T}', "");
Expect(0, 833, '\p{^Is_Full_Composition_Exclusion=  T}', "");
Expect(0, 833, '\P{Is_Full_Composition_Exclusion=  T}', "");
Expect(1, 833, '\P{^Is_Full_Composition_Exclusion=  T}', "");
Expect(0, 831, '\p{Is_Full_Composition_Exclusion=  T}', "");
Expect(1, 831, '\p{^Is_Full_Composition_Exclusion=  T}', "");
Expect(1, 831, '\P{Is_Full_Composition_Exclusion=  T}', "");
Expect(0, 831, '\P{^Is_Full_Composition_Exclusion=  T}', "");
Error('\p{Is_Comp_Ex=-True/a/}');
Error('\P{Is_Comp_Ex=-True/a/}');
Expect(1, 833, '\p{Is_Comp_Ex=true}', "");
Expect(0, 833, '\p{^Is_Comp_Ex=true}', "");
Expect(0, 833, '\P{Is_Comp_Ex=true}', "");
Expect(1, 833, '\P{^Is_Comp_Ex=true}', "");
Expect(0, 831, '\p{Is_Comp_Ex=true}', "");
Expect(1, 831, '\p{^Is_Comp_Ex=true}', "");
Expect(1, 831, '\P{Is_Comp_Ex=true}', "");
Expect(0, 831, '\P{^Is_Comp_Ex=true}', "");
Expect(1, 833, '\p{Is_Comp_Ex=TRUE}', "");
Expect(0, 833, '\p{^Is_Comp_Ex=TRUE}', "");
Expect(0, 833, '\P{Is_Comp_Ex=TRUE}', "");
Expect(1, 833, '\P{^Is_Comp_Ex=TRUE}', "");
Expect(0, 831, '\p{Is_Comp_Ex=TRUE}', "");
Expect(1, 831, '\p{^Is_Comp_Ex=TRUE}', "");
Expect(1, 831, '\P{Is_Comp_Ex=TRUE}', "");
Expect(0, 831, '\P{^Is_Comp_Ex=TRUE}', "");
Error('\p{Full_Composition_Exclusion=--No/a/}');
Error('\P{Full_Composition_Exclusion=--No/a/}');
Expect(1, 831, '\p{Full_Composition_Exclusion=no}', "");
Expect(0, 831, '\p{^Full_Composition_Exclusion=no}', "");
Expect(0, 831, '\P{Full_Composition_Exclusion=no}', "");
Expect(1, 831, '\P{^Full_Composition_Exclusion=no}', "");
Expect(0, 833, '\p{Full_Composition_Exclusion=no}', "");
Expect(1, 833, '\p{^Full_Composition_Exclusion=no}', "");
Expect(1, 833, '\P{Full_Composition_Exclusion=no}', "");
Expect(0, 833, '\P{^Full_Composition_Exclusion=no}', "");
Expect(1, 831, '\p{Full_Composition_Exclusion=	_No}', "");
Expect(0, 831, '\p{^Full_Composition_Exclusion=	_No}', "");
Expect(0, 831, '\P{Full_Composition_Exclusion=	_No}', "");
Expect(1, 831, '\P{^Full_Composition_Exclusion=	_No}', "");
Expect(0, 833, '\p{Full_Composition_Exclusion=	_No}', "");
Expect(1, 833, '\p{^Full_Composition_Exclusion=	_No}', "");
Expect(1, 833, '\P{Full_Composition_Exclusion=	_No}', "");
Expect(0, 833, '\P{^Full_Composition_Exclusion=	_No}', "");
Error('\p{Comp_Ex=:= _N}');
Error('\P{Comp_Ex=:= _N}');
Expect(1, 831, '\p{Comp_Ex=n}', "");
Expect(0, 831, '\p{^Comp_Ex=n}', "");
Expect(0, 831, '\P{Comp_Ex=n}', "");
Expect(1, 831, '\P{^Comp_Ex=n}', "");
Expect(0, 833, '\p{Comp_Ex=n}', "");
Expect(1, 833, '\p{^Comp_Ex=n}', "");
Expect(1, 833, '\P{Comp_Ex=n}', "");
Expect(0, 833, '\P{^Comp_Ex=n}', "");
Expect(1, 831, '\p{Comp_Ex=_N}', "");
Expect(0, 831, '\p{^Comp_Ex=_N}', "");
Expect(0, 831, '\P{Comp_Ex=_N}', "");
Expect(1, 831, '\P{^Comp_Ex=_N}', "");
Expect(0, 833, '\p{Comp_Ex=_N}', "");
Expect(1, 833, '\p{^Comp_Ex=_N}', "");
Expect(1, 833, '\P{Comp_Ex=_N}', "");
Expect(0, 833, '\P{^Comp_Ex=_N}', "");
Error('\p{Is_Full_Composition_Exclusion= -F/a/}');
Error('\P{Is_Full_Composition_Exclusion= -F/a/}');
Expect(1, 831, '\p{Is_Full_Composition_Exclusion=f}', "");
Expect(0, 831, '\p{^Is_Full_Composition_Exclusion=f}', "");
Expect(0, 831, '\P{Is_Full_Composition_Exclusion=f}', "");
Expect(1, 831, '\P{^Is_Full_Composition_Exclusion=f}', "");
Expect(0, 833, '\p{Is_Full_Composition_Exclusion=f}', "");
Expect(1, 833, '\p{^Is_Full_Composition_Exclusion=f}', "");
Expect(1, 833, '\P{Is_Full_Composition_Exclusion=f}', "");
Expect(0, 833, '\P{^Is_Full_Composition_Exclusion=f}', "");
Expect(1, 831, '\p{Is_Full_Composition_Exclusion= -F}', "");
Expect(0, 831, '\p{^Is_Full_Composition_Exclusion= -F}', "");
Expect(0, 831, '\P{Is_Full_Composition_Exclusion= -F}', "");
Expect(1, 831, '\P{^Is_Full_Composition_Exclusion= -F}', "");
Expect(0, 833, '\p{Is_Full_Composition_Exclusion= -F}', "");
Expect(1, 833, '\p{^Is_Full_Composition_Exclusion= -F}', "");
Expect(1, 833, '\P{Is_Full_Composition_Exclusion= -F}', "");
Expect(0, 833, '\P{^Is_Full_Composition_Exclusion= -F}', "");
Error('\p{Is_Comp_Ex=		FALSE/a/}');
Error('\P{Is_Comp_Ex=		FALSE/a/}');
Expect(1, 831, '\p{Is_Comp_Ex=false}', "");
Expect(0, 831, '\p{^Is_Comp_Ex=false}', "");
Expect(0, 831, '\P{Is_Comp_Ex=false}', "");
Expect(1, 831, '\P{^Is_Comp_Ex=false}', "");
Expect(0, 833, '\p{Is_Comp_Ex=false}', "");
Expect(1, 833, '\p{^Is_Comp_Ex=false}', "");
Expect(1, 833, '\P{Is_Comp_Ex=false}', "");
Expect(0, 833, '\P{^Is_Comp_Ex=false}', "");
Expect(1, 831, '\p{Is_Comp_Ex=  false}', "");
Expect(0, 831, '\p{^Is_Comp_Ex=  false}', "");
Expect(0, 831, '\P{Is_Comp_Ex=  false}', "");
Expect(1, 831, '\P{^Is_Comp_Ex=  false}', "");
Expect(0, 833, '\p{Is_Comp_Ex=  false}', "");
Expect(1, 833, '\p{^Is_Comp_Ex=  false}', "");
Expect(1, 833, '\P{Is_Comp_Ex=  false}', "");
Expect(0, 833, '\P{^Is_Comp_Ex=  false}', "");
Error('\p{Changes_When_NFKC_Casefolded=		Yes:=}');
Error('\P{Changes_When_NFKC_Casefolded=		Yes:=}');
Expect(1, 90, '\p{Changes_When_NFKC_Casefolded=yes}', "");
Expect(0, 90, '\p{^Changes_When_NFKC_Casefolded=yes}', "");
Expect(0, 90, '\P{Changes_When_NFKC_Casefolded=yes}', "");
Expect(1, 90, '\P{^Changes_When_NFKC_Casefolded=yes}', "");
Expect(0, 64, '\p{Changes_When_NFKC_Casefolded=yes}', "");
Expect(1, 64, '\p{^Changes_When_NFKC_Casefolded=yes}', "");
Expect(1, 64, '\P{Changes_When_NFKC_Casefolded=yes}', "");
Expect(0, 64, '\P{^Changes_When_NFKC_Casefolded=yes}', "");
Expect(1, 90, '\p{Changes_When_NFKC_Casefolded=Yes}', "");
Expect(0, 90, '\p{^Changes_When_NFKC_Casefolded=Yes}', "");
Expect(0, 90, '\P{Changes_When_NFKC_Casefolded=Yes}', "");
Expect(1, 90, '\P{^Changes_When_NFKC_Casefolded=Yes}', "");
Expect(0, 64, '\p{Changes_When_NFKC_Casefolded=Yes}', "");
Expect(1, 64, '\p{^Changes_When_NFKC_Casefolded=Yes}', "");
Expect(1, 64, '\P{Changes_When_NFKC_Casefolded=Yes}', "");
Expect(0, 64, '\P{^Changes_When_NFKC_Casefolded=Yes}', "");
Error('\p{CWKCF= :=Y}');
Error('\P{CWKCF= :=Y}');
Expect(1, 90, '\p{CWKCF=y}', "");
Expect(0, 90, '\p{^CWKCF=y}', "");
Expect(0, 90, '\P{CWKCF=y}', "");
Expect(1, 90, '\P{^CWKCF=y}', "");
Expect(0, 64, '\p{CWKCF=y}', "");
Expect(1, 64, '\p{^CWKCF=y}', "");
Expect(1, 64, '\P{CWKCF=y}', "");
Expect(0, 64, '\P{^CWKCF=y}', "");
Expect(1, 90, '\p{CWKCF=  Y}', "");
Expect(0, 90, '\p{^CWKCF=  Y}', "");
Expect(0, 90, '\P{CWKCF=  Y}', "");
Expect(1, 90, '\P{^CWKCF=  Y}', "");
Expect(0, 64, '\p{CWKCF=  Y}', "");
Expect(1, 64, '\p{^CWKCF=  Y}', "");
Expect(1, 64, '\P{CWKCF=  Y}', "");
Expect(0, 64, '\P{^CWKCF=  Y}', "");
Error('\p{Is_Changes_When_NFKC_Casefolded=/a/-T}');
Error('\P{Is_Changes_When_NFKC_Casefolded=/a/-T}');
Expect(1, 90, '\p{Is_Changes_When_NFKC_Casefolded=t}', "");
Expect(0, 90, '\p{^Is_Changes_When_NFKC_Casefolded=t}', "");
Expect(0, 90, '\P{Is_Changes_When_NFKC_Casefolded=t}', "");
Expect(1, 90, '\P{^Is_Changes_When_NFKC_Casefolded=t}', "");
Expect(0, 64, '\p{Is_Changes_When_NFKC_Casefolded=t}', "");
Expect(1, 64, '\p{^Is_Changes_When_NFKC_Casefolded=t}', "");
Expect(1, 64, '\P{Is_Changes_When_NFKC_Casefolded=t}', "");
Expect(0, 64, '\P{^Is_Changes_When_NFKC_Casefolded=t}', "");
Expect(1, 90, '\p{Is_Changes_When_NFKC_Casefolded=	 T}', "");
Expect(0, 90, '\p{^Is_Changes_When_NFKC_Casefolded=	 T}', "");
Expect(0, 90, '\P{Is_Changes_When_NFKC_Casefolded=	 T}', "");
Expect(1, 90, '\P{^Is_Changes_When_NFKC_Casefolded=	 T}', "");
Expect(0, 64, '\p{Is_Changes_When_NFKC_Casefolded=	 T}', "");
Expect(1, 64, '\p{^Is_Changes_When_NFKC_Casefolded=	 T}', "");
Expect(1, 64, '\P{Is_Changes_When_NFKC_Casefolded=	 T}', "");
Expect(0, 64, '\P{^Is_Changes_When_NFKC_Casefolded=	 T}', "");
Error('\p{Is_CWKCF: _-true/a/}');
Error('\P{Is_CWKCF: _-true/a/}');
Expect(1, 90, '\p{Is_CWKCF=true}', "");
Expect(0, 90, '\p{^Is_CWKCF=true}', "");
Expect(0, 90, '\P{Is_CWKCF=true}', "");
Expect(1, 90, '\P{^Is_CWKCF=true}', "");
Expect(0, 64, '\p{Is_CWKCF=true}', "");
Expect(1, 64, '\p{^Is_CWKCF=true}', "");
Expect(1, 64, '\P{Is_CWKCF=true}', "");
Expect(0, 64, '\P{^Is_CWKCF=true}', "");
Expect(1, 90, '\p{Is_CWKCF= 	True}', "");
Expect(0, 90, '\p{^Is_CWKCF= 	True}', "");
Expect(0, 90, '\P{Is_CWKCF= 	True}', "");
Expect(1, 90, '\P{^Is_CWKCF= 	True}', "");
Expect(0, 64, '\p{Is_CWKCF= 	True}', "");
Expect(1, 64, '\p{^Is_CWKCF= 	True}', "");
Expect(1, 64, '\P{Is_CWKCF= 	True}', "");
Expect(0, 64, '\P{^Is_CWKCF= 	True}', "");
Error('\p{Changes_When_NFKC_Casefolded:	/a/	-NO}');
Error('\P{Changes_When_NFKC_Casefolded:	/a/	-NO}');
Expect(1, 64, '\p{Changes_When_NFKC_Casefolded=no}', "");
Expect(0, 64, '\p{^Changes_When_NFKC_Casefolded=no}', "");
Expect(0, 64, '\P{Changes_When_NFKC_Casefolded=no}', "");
Expect(1, 64, '\P{^Changes_When_NFKC_Casefolded=no}', "");
Expect(0, 90, '\p{Changes_When_NFKC_Casefolded=no}', "");
Expect(1, 90, '\p{^Changes_When_NFKC_Casefolded=no}', "");
Expect(1, 90, '\P{Changes_When_NFKC_Casefolded=no}', "");
Expect(0, 90, '\P{^Changes_When_NFKC_Casefolded=no}', "");
Expect(1, 64, '\p{Changes_When_NFKC_Casefolded=  No}', "");
Expect(0, 64, '\p{^Changes_When_NFKC_Casefolded=  No}', "");
Expect(0, 64, '\P{Changes_When_NFKC_Casefolded=  No}', "");
Expect(1, 64, '\P{^Changes_When_NFKC_Casefolded=  No}', "");
Expect(0, 90, '\p{Changes_When_NFKC_Casefolded=  No}', "");
Expect(1, 90, '\p{^Changes_When_NFKC_Casefolded=  No}', "");
Expect(1, 90, '\P{Changes_When_NFKC_Casefolded=  No}', "");
Expect(0, 90, '\P{^Changes_When_NFKC_Casefolded=  No}', "");
Error('\p{CWKCF=-	n:=}');
Error('\P{CWKCF=-	n:=}');
Expect(1, 64, '\p{CWKCF=n}', "");
Expect(0, 64, '\p{^CWKCF=n}', "");
Expect(0, 64, '\P{CWKCF=n}', "");
Expect(1, 64, '\P{^CWKCF=n}', "");
Expect(0, 90, '\p{CWKCF=n}', "");
Expect(1, 90, '\p{^CWKCF=n}', "");
Expect(1, 90, '\P{CWKCF=n}', "");
Expect(0, 90, '\P{^CWKCF=n}', "");
Expect(1, 64, '\p{CWKCF=	_n}', "");
Expect(0, 64, '\p{^CWKCF=	_n}', "");
Expect(0, 64, '\P{CWKCF=	_n}', "");
Expect(1, 64, '\P{^CWKCF=	_n}', "");
Expect(0, 90, '\p{CWKCF=	_n}', "");
Expect(1, 90, '\p{^CWKCF=	_n}', "");
Expect(1, 90, '\P{CWKCF=	_n}', "");
Expect(0, 90, '\P{^CWKCF=	_n}', "");
Error('\p{Is_Changes_When_NFKC_Casefolded=_	F/a/}');
Error('\P{Is_Changes_When_NFKC_Casefolded=_	F/a/}');
Expect(1, 64, '\p{Is_Changes_When_NFKC_Casefolded=f}', "");
Expect(0, 64, '\p{^Is_Changes_When_NFKC_Casefolded=f}', "");
Expect(0, 64, '\P{Is_Changes_When_NFKC_Casefolded=f}', "");
Expect(1, 64, '\P{^Is_Changes_When_NFKC_Casefolded=f}', "");
Expect(0, 90, '\p{Is_Changes_When_NFKC_Casefolded=f}', "");
Expect(1, 90, '\p{^Is_Changes_When_NFKC_Casefolded=f}', "");
Expect(1, 90, '\P{Is_Changes_When_NFKC_Casefolded=f}', "");
Expect(0, 90, '\P{^Is_Changes_When_NFKC_Casefolded=f}', "");
Expect(1, 64, '\p{Is_Changes_When_NFKC_Casefolded=-f}', "");
Expect(0, 64, '\p{^Is_Changes_When_NFKC_Casefolded=-f}', "");
Expect(0, 64, '\P{Is_Changes_When_NFKC_Casefolded=-f}', "");
Expect(1, 64, '\P{^Is_Changes_When_NFKC_Casefolded=-f}', "");
Expect(0, 90, '\p{Is_Changes_When_NFKC_Casefolded=-f}', "");
Expect(1, 90, '\p{^Is_Changes_When_NFKC_Casefolded=-f}', "");
Expect(1, 90, '\P{Is_Changes_When_NFKC_Casefolded=-f}', "");
Expect(0, 90, '\P{^Is_Changes_When_NFKC_Casefolded=-f}', "");
Error('\p{Is_CWKCF=	/a/FALSE}');
Error('\P{Is_CWKCF=	/a/FALSE}');
Expect(1, 64, '\p{Is_CWKCF=false}', "");
Expect(0, 64, '\p{^Is_CWKCF=false}', "");
Expect(0, 64, '\P{Is_CWKCF=false}', "");
Expect(1, 64, '\P{^Is_CWKCF=false}', "");
Expect(0, 90, '\p{Is_CWKCF=false}', "");
Expect(1, 90, '\p{^Is_CWKCF=false}', "");
Expect(1, 90, '\P{Is_CWKCF=false}', "");
Expect(0, 90, '\P{^Is_CWKCF=false}', "");
Expect(1, 64, '\p{Is_CWKCF:	-_False}', "");
Expect(0, 64, '\p{^Is_CWKCF:	-_False}', "");
Expect(0, 64, '\P{Is_CWKCF:	-_False}', "");
Expect(1, 64, '\P{^Is_CWKCF:	-_False}', "");
Expect(0, 90, '\p{Is_CWKCF:	-_False}', "");
Expect(1, 90, '\p{^Is_CWKCF:	-_False}', "");
Expect(1, 90, '\P{Is_CWKCF:	-_False}', "");
Expect(0, 90, '\P{^Is_CWKCF:	-_False}', "");
Error('\p{NFKC_Quick_Check=:=-_YES}');
Error('\P{NFKC_Quick_Check=:=-_YES}');
Expect(1, 159, '\p{NFKC_Quick_Check:yes}', "");
Expect(0, 159, '\p{^NFKC_Quick_Check:yes}', "");
Expect(0, 159, '\P{NFKC_Quick_Check:yes}', "");
Expect(1, 159, '\P{^NFKC_Quick_Check:yes}', "");
Expect(0, 160, '\p{NFKC_Quick_Check:yes}', "");
Expect(1, 160, '\p{^NFKC_Quick_Check:yes}', "");
Expect(1, 160, '\P{NFKC_Quick_Check:yes}', "");
Expect(0, 160, '\P{^NFKC_Quick_Check:yes}', "");
Expect(1, 159, '\p{NFKC_Quick_Check=_	YES}', "");
Expect(0, 159, '\p{^NFKC_Quick_Check=_	YES}', "");
Expect(0, 159, '\P{NFKC_Quick_Check=_	YES}', "");
Expect(1, 159, '\P{^NFKC_Quick_Check=_	YES}', "");
Expect(0, 160, '\p{NFKC_Quick_Check=_	YES}', "");
Expect(1, 160, '\p{^NFKC_Quick_Check=_	YES}', "");
Expect(1, 160, '\P{NFKC_Quick_Check=_	YES}', "");
Expect(0, 160, '\P{^NFKC_Quick_Check=_	YES}', "");
Error('\p{NFKC_QC=_/a/Y}');
Error('\P{NFKC_QC=_/a/Y}');
Expect(1, 159, '\p{NFKC_QC=y}', "");
Expect(0, 159, '\p{^NFKC_QC=y}', "");
Expect(0, 159, '\P{NFKC_QC=y}', "");
Expect(1, 159, '\P{^NFKC_QC=y}', "");
Expect(0, 160, '\p{NFKC_QC=y}', "");
Expect(1, 160, '\p{^NFKC_QC=y}', "");
Expect(1, 160, '\P{NFKC_QC=y}', "");
Expect(0, 160, '\P{^NFKC_QC=y}', "");
Expect(1, 159, '\p{NFKC_QC=Y}', "");
Expect(0, 159, '\p{^NFKC_QC=Y}', "");
Expect(0, 159, '\P{NFKC_QC=Y}', "");
Expect(1, 159, '\P{^NFKC_QC=Y}', "");
Expect(0, 160, '\p{NFKC_QC=Y}', "");
Expect(1, 160, '\p{^NFKC_QC=Y}', "");
Expect(1, 160, '\P{NFKC_QC=Y}', "");
Expect(0, 160, '\P{^NFKC_QC=Y}', "");
Error('\p{Is_NFKC_Quick_Check=__YES:=}');
Error('\P{Is_NFKC_Quick_Check=__YES:=}');
Expect(1, 159, '\p{Is_NFKC_Quick_Check=yes}', "");
Expect(0, 159, '\p{^Is_NFKC_Quick_Check=yes}', "");
Expect(0, 159, '\P{Is_NFKC_Quick_Check=yes}', "");
Expect(1, 159, '\P{^Is_NFKC_Quick_Check=yes}', "");
Expect(0, 160, '\p{Is_NFKC_Quick_Check=yes}', "");
Expect(1, 160, '\p{^Is_NFKC_Quick_Check=yes}', "");
Expect(1, 160, '\P{Is_NFKC_Quick_Check=yes}', "");
Expect(0, 160, '\P{^Is_NFKC_Quick_Check=yes}', "");
Expect(1, 159, '\p{Is_NFKC_Quick_Check=_-Yes}', "");
Expect(0, 159, '\p{^Is_NFKC_Quick_Check=_-Yes}', "");
Expect(0, 159, '\P{Is_NFKC_Quick_Check=_-Yes}', "");
Expect(1, 159, '\P{^Is_NFKC_Quick_Check=_-Yes}', "");
Expect(0, 160, '\p{Is_NFKC_Quick_Check=_-Yes}', "");
Expect(1, 160, '\p{^Is_NFKC_Quick_Check=_-Yes}', "");
Expect(1, 160, '\P{Is_NFKC_Quick_Check=_-Yes}', "");
Expect(0, 160, '\P{^Is_NFKC_Quick_Check=_-Yes}', "");
Error('\p{Is_NFKC_QC=--y/a/}');
Error('\P{Is_NFKC_QC=--y/a/}');
Expect(1, 159, '\p{Is_NFKC_QC=y}', "");
Expect(0, 159, '\p{^Is_NFKC_QC=y}', "");
Expect(0, 159, '\P{Is_NFKC_QC=y}', "");
Expect(1, 159, '\P{^Is_NFKC_QC=y}', "");
Expect(0, 160, '\p{Is_NFKC_QC=y}', "");
Expect(1, 160, '\p{^Is_NFKC_QC=y}', "");
Expect(1, 160, '\P{Is_NFKC_QC=y}', "");
Expect(0, 160, '\P{^Is_NFKC_QC=y}', "");
Expect(1, 159, '\p{Is_NFKC_QC:    y}', "");
Expect(0, 159, '\p{^Is_NFKC_QC:    y}', "");
Expect(0, 159, '\P{Is_NFKC_QC:    y}', "");
Expect(1, 159, '\P{^Is_NFKC_QC:    y}', "");
Expect(0, 160, '\p{Is_NFKC_QC:    y}', "");
Expect(1, 160, '\p{^Is_NFKC_QC:    y}', "");
Expect(1, 160, '\P{Is_NFKC_QC:    y}', "");
Expect(0, 160, '\P{^Is_NFKC_QC:    y}', "");
Error('\p{NFKC_Quick_Check=:=_no}');
Error('\P{NFKC_Quick_Check=:=_no}');
Expect(1, 160, '\p{NFKC_Quick_Check:no}', "");
Expect(0, 160, '\p{^NFKC_Quick_Check:no}', "");
Expect(0, 160, '\P{NFKC_Quick_Check:no}', "");
Expect(1, 160, '\P{^NFKC_Quick_Check:no}', "");
Expect(0, 159, '\p{NFKC_Quick_Check:no}', "");
Expect(1, 159, '\p{^NFKC_Quick_Check:no}', "");
Expect(1, 159, '\P{NFKC_Quick_Check:no}', "");
Expect(0, 159, '\P{^NFKC_Quick_Check:no}', "");
Expect(1, 160, '\p{NFKC_Quick_Check=_	No}', "");
Expect(0, 160, '\p{^NFKC_Quick_Check=_	No}', "");
Expect(0, 160, '\P{NFKC_Quick_Check=_	No}', "");
Expect(1, 160, '\P{^NFKC_Quick_Check=_	No}', "");
Expect(0, 159, '\p{NFKC_Quick_Check=_	No}', "");
Expect(1, 159, '\p{^NFKC_Quick_Check=_	No}', "");
Expect(1, 159, '\P{NFKC_Quick_Check=_	No}', "");
Expect(0, 159, '\P{^NFKC_Quick_Check=_	No}', "");
Error('\p{NFKC_QC=--n:=}');
Error('\P{NFKC_QC=--n:=}');
Expect(1, 160, '\p{NFKC_QC=n}', "");
Expect(0, 160, '\p{^NFKC_QC=n}', "");
Expect(0, 160, '\P{NFKC_QC=n}', "");
Expect(1, 160, '\P{^NFKC_QC=n}', "");
Expect(0, 159, '\p{NFKC_QC=n}', "");
Expect(1, 159, '\p{^NFKC_QC=n}', "");
Expect(1, 159, '\P{NFKC_QC=n}', "");
Expect(0, 159, '\P{^NFKC_QC=n}', "");
Expect(1, 160, '\p{NFKC_QC=__n}', "");
Expect(0, 160, '\p{^NFKC_QC=__n}', "");
Expect(0, 160, '\P{NFKC_QC=__n}', "");
Expect(1, 160, '\P{^NFKC_QC=__n}', "");
Expect(0, 159, '\p{NFKC_QC=__n}', "");
Expect(1, 159, '\p{^NFKC_QC=__n}', "");
Expect(1, 159, '\P{NFKC_QC=__n}', "");
Expect(0, 159, '\P{^NFKC_QC=__n}', "");
Error('\p{Is_NFKC_Quick_Check=:=		No}');
Error('\P{Is_NFKC_Quick_Check=:=		No}');
Expect(1, 160, '\p{Is_NFKC_Quick_Check=no}', "");
Expect(0, 160, '\p{^Is_NFKC_Quick_Check=no}', "");
Expect(0, 160, '\P{Is_NFKC_Quick_Check=no}', "");
Expect(1, 160, '\P{^Is_NFKC_Quick_Check=no}', "");
Expect(0, 159, '\p{Is_NFKC_Quick_Check=no}', "");
Expect(1, 159, '\p{^Is_NFKC_Quick_Check=no}', "");
Expect(1, 159, '\P{Is_NFKC_Quick_Check=no}', "");
Expect(0, 159, '\P{^Is_NFKC_Quick_Check=no}', "");
Expect(1, 160, '\p{Is_NFKC_Quick_Check=__no}', "");
Expect(0, 160, '\p{^Is_NFKC_Quick_Check=__no}', "");
Expect(0, 160, '\P{Is_NFKC_Quick_Check=__no}', "");
Expect(1, 160, '\P{^Is_NFKC_Quick_Check=__no}', "");
Expect(0, 159, '\p{Is_NFKC_Quick_Check=__no}', "");
Expect(1, 159, '\p{^Is_NFKC_Quick_Check=__no}', "");
Expect(1, 159, '\P{Is_NFKC_Quick_Check=__no}', "");
Expect(0, 159, '\P{^Is_NFKC_Quick_Check=__no}', "");
Error('\p{Is_NFKC_QC=_:=n}');
Error('\P{Is_NFKC_QC=_:=n}');
Expect(1, 160, '\p{Is_NFKC_QC=n}', "");
Expect(0, 160, '\p{^Is_NFKC_QC=n}', "");
Expect(0, 160, '\P{Is_NFKC_QC=n}', "");
Expect(1, 160, '\P{^Is_NFKC_QC=n}', "");
Expect(0, 159, '\p{Is_NFKC_QC=n}', "");
Expect(1, 159, '\p{^Is_NFKC_QC=n}', "");
Expect(1, 159, '\P{Is_NFKC_QC=n}', "");
Expect(0, 159, '\P{^Is_NFKC_QC=n}', "");
Expect(1, 160, '\p{Is_NFKC_QC=_n}', "");
Expect(0, 160, '\p{^Is_NFKC_QC=_n}', "");
Expect(0, 160, '\P{Is_NFKC_QC=_n}', "");
Expect(1, 160, '\P{^Is_NFKC_QC=_n}', "");
Expect(0, 159, '\p{Is_NFKC_QC=_n}', "");
Expect(1, 159, '\p{^Is_NFKC_QC=_n}', "");
Expect(1, 159, '\P{Is_NFKC_QC=_n}', "");
Expect(0, 159, '\P{^Is_NFKC_QC=_n}', "");
Error('\p{NFKC_Quick_Check=/a/maybe}');
Error('\P{NFKC_Quick_Check=/a/maybe}');
Expect(1, 772, '\p{NFKC_Quick_Check=maybe}', "");
Expect(0, 772, '\p{^NFKC_Quick_Check=maybe}', "");
Expect(0, 772, '\P{NFKC_Quick_Check=maybe}', "");
Expect(1, 772, '\P{^NFKC_Quick_Check=maybe}', "");
Expect(0, 767, '\p{NFKC_Quick_Check=maybe}', "");
Expect(1, 767, '\p{^NFKC_Quick_Check=maybe}', "");
Expect(1, 767, '\P{NFKC_Quick_Check=maybe}', "");
Expect(0, 767, '\P{^NFKC_Quick_Check=maybe}', "");
Expect(1, 772, '\p{NFKC_Quick_Check=__Maybe}', "");
Expect(0, 772, '\p{^NFKC_Quick_Check=__Maybe}', "");
Expect(0, 772, '\P{NFKC_Quick_Check=__Maybe}', "");
Expect(1, 772, '\P{^NFKC_Quick_Check=__Maybe}', "");
Expect(0, 767, '\p{NFKC_Quick_Check=__Maybe}', "");
Expect(1, 767, '\p{^NFKC_Quick_Check=__Maybe}', "");
Expect(1, 767, '\P{NFKC_Quick_Check=__Maybe}', "");
Expect(0, 767, '\P{^NFKC_Quick_Check=__Maybe}', "");
Error('\p{NFKC_QC:/a/		M}');
Error('\P{NFKC_QC:/a/		M}');
Expect(1, 772, '\p{NFKC_QC=m}', "");
Expect(0, 772, '\p{^NFKC_QC=m}', "");
Expect(0, 772, '\P{NFKC_QC=m}', "");
Expect(1, 772, '\P{^NFKC_QC=m}', "");
Expect(0, 767, '\p{NFKC_QC=m}', "");
Expect(1, 767, '\p{^NFKC_QC=m}', "");
Expect(1, 767, '\P{NFKC_QC=m}', "");
Expect(0, 767, '\P{^NFKC_QC=m}', "");
Expect(1, 772, '\p{NFKC_QC:   _M}', "");
Expect(0, 772, '\p{^NFKC_QC:   _M}', "");
Expect(0, 772, '\P{NFKC_QC:   _M}', "");
Expect(1, 772, '\P{^NFKC_QC:   _M}', "");
Expect(0, 767, '\p{NFKC_QC:   _M}', "");
Expect(1, 767, '\p{^NFKC_QC:   _M}', "");
Expect(1, 767, '\P{NFKC_QC:   _M}', "");
Expect(0, 767, '\P{^NFKC_QC:   _M}', "");
Error('\p{Is_NFKC_Quick_Check=-/a/MAYBE}');
Error('\P{Is_NFKC_Quick_Check=-/a/MAYBE}');
Expect(1, 772, '\p{Is_NFKC_Quick_Check=maybe}', "");
Expect(0, 772, '\p{^Is_NFKC_Quick_Check=maybe}', "");
Expect(0, 772, '\P{Is_NFKC_Quick_Check=maybe}', "");
Expect(1, 772, '\P{^Is_NFKC_Quick_Check=maybe}', "");
Expect(0, 767, '\p{Is_NFKC_Quick_Check=maybe}', "");
Expect(1, 767, '\p{^Is_NFKC_Quick_Check=maybe}', "");
Expect(1, 767, '\P{Is_NFKC_Quick_Check=maybe}', "");
Expect(0, 767, '\P{^Is_NFKC_Quick_Check=maybe}', "");
Expect(1, 772, '\p{Is_NFKC_Quick_Check= -Maybe}', "");
Expect(0, 772, '\p{^Is_NFKC_Quick_Check= -Maybe}', "");
Expect(0, 772, '\P{Is_NFKC_Quick_Check= -Maybe}', "");
Expect(1, 772, '\P{^Is_NFKC_Quick_Check= -Maybe}', "");
Expect(0, 767, '\p{Is_NFKC_Quick_Check= -Maybe}', "");
Expect(1, 767, '\p{^Is_NFKC_Quick_Check= -Maybe}', "");
Expect(1, 767, '\P{Is_NFKC_Quick_Check= -Maybe}', "");
Expect(0, 767, '\P{^Is_NFKC_Quick_Check= -Maybe}', "");
Error('\p{Is_NFKC_QC=	 M/a/}');
Error('\P{Is_NFKC_QC=	 M/a/}');
Expect(1, 772, '\p{Is_NFKC_QC=m}', "");
Expect(0, 772, '\p{^Is_NFKC_QC=m}', "");
Expect(0, 772, '\P{Is_NFKC_QC=m}', "");
Expect(1, 772, '\P{^Is_NFKC_QC=m}', "");
Expect(0, 767, '\p{Is_NFKC_QC=m}', "");
Expect(1, 767, '\p{^Is_NFKC_QC=m}', "");
Expect(1, 767, '\P{Is_NFKC_QC=m}', "");
Expect(0, 767, '\P{^Is_NFKC_QC=m}', "");
Expect(1, 772, '\p{Is_NFKC_QC=- M}', "");
Expect(0, 772, '\p{^Is_NFKC_QC=- M}', "");
Expect(0, 772, '\P{Is_NFKC_QC=- M}', "");
Expect(1, 772, '\P{^Is_NFKC_QC=- M}', "");
Expect(0, 767, '\p{Is_NFKC_QC=- M}', "");
Expect(1, 767, '\p{^Is_NFKC_QC=- M}', "");
Expect(1, 767, '\P{Is_NFKC_QC=- M}', "");
Expect(0, 767, '\P{^Is_NFKC_QC=- M}', "");
Error('\p{Jamo_Short_Name=}');
Error('\P{Jamo_Short_Name=}');
Error('\p{JSN=}');
Error('\P{JSN=}');
Error('\p{Is_Jamo_Short_Name=}');
Error('\P{Is_Jamo_Short_Name=}');
Error('\p{Is_JSN:}');
Error('\P{Is_JSN:}');
Error('\p{Jamo_Short_Name=S}');
Error('\P{Jamo_Short_Name=S}');
Error('\p{JSN:	S}');
Error('\P{JSN:	S}');
Error('\p{Is_Jamo_Short_Name: S}');
Error('\P{Is_Jamo_Short_Name: S}');
Error('\p{Is_JSN=S}');
Error('\P{Is_JSN=S}');
Error('\p{Jamo_Short_Name=GG}');
Error('\P{Jamo_Short_Name=GG}');
Error('\p{JSN=GG}');
Error('\P{JSN=GG}');
Error('\p{Is_Jamo_Short_Name=GG}');
Error('\P{Is_Jamo_Short_Name=GG}');
Error('\p{Is_JSN=GG}');
Error('\P{Is_JSN=GG}');
Error('\p{Jamo_Short_Name=YU}');
Error('\P{Jamo_Short_Name=YU}');
Error('\p{JSN=YU}');
Error('\P{JSN=YU}');
Error('\p{Is_Jamo_Short_Name=YU}');
Error('\P{Is_Jamo_Short_Name=YU}');
Error('\p{Is_JSN=YU}');
Error('\P{Is_JSN=YU}');
Error('\p{Jamo_Short_Name=WE}');
Error('\P{Jamo_Short_Name=WE}');
Error('\p{JSN=WE}');
Error('\P{JSN=WE}');
Error('\p{Is_Jamo_Short_Name=WE}');
Error('\P{Is_Jamo_Short_Name=WE}');
Error('\p{Is_JSN=WE}');
Error('\P{Is_JSN=WE}');
Error('\p{Jamo_Short_Name=LM}');
Error('\P{Jamo_Short_Name=LM}');
Error('\p{JSN=LM}');
Error('\P{JSN=LM}');
Error('\p{Is_Jamo_Short_Name=LM}');
Error('\P{Is_Jamo_Short_Name=LM}');
Error('\p{Is_JSN=LM}');
Error('\P{Is_JSN=LM}');
Error('\p{Jamo_Short_Name=K}');
Error('\P{Jamo_Short_Name=K}');
Error('\p{JSN=K}');
Error('\P{JSN=K}');
Error('\p{Is_Jamo_Short_Name=K}');
Error('\P{Is_Jamo_Short_Name=K}');
Error('\p{Is_JSN=K}');
Error('\P{Is_JSN=K}');
Error('\p{Jamo_Short_Name:   BB}');
Error('\P{Jamo_Short_Name:   BB}');
Error('\p{JSN=BB}');
Error('\P{JSN=BB}');
Error('\p{Is_Jamo_Short_Name=BB}');
Error('\P{Is_Jamo_Short_Name=BB}');
Error('\p{Is_JSN=BB}');
Error('\P{Is_JSN=BB}');
Error('\p{Jamo_Short_Name=D}');
Error('\P{Jamo_Short_Name=D}');
Error('\p{JSN: D}');
Error('\P{JSN: D}');
Error('\p{Is_Jamo_Short_Name=D}');
Error('\P{Is_Jamo_Short_Name=D}');
Error('\p{Is_JSN=D}');
Error('\P{Is_JSN=D}');
Error('\p{Jamo_Short_Name:   E}');
Error('\P{Jamo_Short_Name:   E}');
Error('\p{JSN=E}');
Error('\P{JSN=E}');
Error('\p{Is_Jamo_Short_Name=E}');
Error('\P{Is_Jamo_Short_Name=E}');
Error('\p{Is_JSN=E}');
Error('\P{Is_JSN=E}');
Error('\p{Jamo_Short_Name=JJ}');
Error('\P{Jamo_Short_Name=JJ}');
Error('\p{JSN=JJ}');
Error('\P{JSN=JJ}');
Error('\p{Is_Jamo_Short_Name=JJ}');
Error('\P{Is_Jamo_Short_Name=JJ}');
Error('\p{Is_JSN=JJ}');
Error('\P{Is_JSN=JJ}');
Error('\p{Jamo_Short_Name=G}');
Error('\P{Jamo_Short_Name=G}');
Error('\p{JSN:	G}');
Error('\P{JSN:	G}');
Error('\p{Is_Jamo_Short_Name=G}');
Error('\P{Is_Jamo_Short_Name=G}');
Error('\p{Is_JSN=G}');
Error('\P{Is_JSN=G}');
Error('\p{Jamo_Short_Name=YA}');
Error('\P{Jamo_Short_Name=YA}');
Error('\p{JSN=YA}');
Error('\P{JSN=YA}');
Error('\p{Is_Jamo_Short_Name=YA}');
Error('\P{Is_Jamo_Short_Name=YA}');
Error('\p{Is_JSN=YA}');
Error('\P{Is_JSN=YA}');
Error('\p{Jamo_Short_Name=SS}');
Error('\P{Jamo_Short_Name=SS}');
Error('\p{JSN=SS}');
Error('\P{JSN=SS}');
Error('\p{Is_Jamo_Short_Name=SS}');
Error('\P{Is_Jamo_Short_Name=SS}');
Error('\p{Is_JSN=SS}');
Error('\P{Is_JSN=SS}');
Error('\p{Jamo_Short_Name=LB}');
Error('\P{Jamo_Short_Name=LB}');
Error('\p{JSN=LB}');
Error('\P{JSN=LB}');
Error('\p{Is_Jamo_Short_Name:LB}');
Error('\P{Is_Jamo_Short_Name:LB}');
Error('\p{Is_JSN:   LB}');
Error('\P{Is_JSN:   LB}');
Error('\p{Jamo_Short_Name=J}');
Error('\P{Jamo_Short_Name=J}');
Error('\p{JSN=J}');
Error('\P{JSN=J}');
Error('\p{Is_Jamo_Short_Name=J}');
Error('\P{Is_Jamo_Short_Name=J}');
Error('\p{Is_JSN:	J}');
Error('\P{Is_JSN:	J}');
Error('\p{Jamo_Short_Name=NH}');
Error('\P{Jamo_Short_Name=NH}');
Error('\p{JSN=NH}');
Error('\P{JSN=NH}');
Error('\p{Is_Jamo_Short_Name=NH}');
Error('\P{Is_Jamo_Short_Name=NH}');
Error('\p{Is_JSN=NH}');
Error('\P{Is_JSN=NH}');
Error('\p{Jamo_Short_Name=YEO}');
Error('\P{Jamo_Short_Name=YEO}');
Error('\p{JSN=YEO}');
Error('\P{JSN=YEO}');
Error('\p{Is_Jamo_Short_Name=YEO}');
Error('\P{Is_Jamo_Short_Name=YEO}');
Error('\p{Is_JSN=YEO}');
Error('\P{Is_JSN=YEO}');
Error('\p{Jamo_Short_Name=LP}');
Error('\P{Jamo_Short_Name=LP}');
Error('\p{JSN=LP}');
Error('\P{JSN=LP}');
Error('\p{Is_Jamo_Short_Name=LP}');
Error('\P{Is_Jamo_Short_Name=LP}');
Error('\p{Is_JSN=LP}');
Error('\P{Is_JSN=LP}');
Error('\p{Jamo_Short_Name:   NJ}');
Error('\P{Jamo_Short_Name:   NJ}');
Error('\p{JSN: NJ}');
Error('\P{JSN: NJ}');
Error('\p{Is_Jamo_Short_Name=NJ}');
Error('\P{Is_Jamo_Short_Name=NJ}');
Error('\p{Is_JSN=NJ}');
Error('\P{Is_JSN=NJ}');
Error('\p{Jamo_Short_Name=B}');
Error('\P{Jamo_Short_Name=B}');
Error('\p{JSN=B}');
Error('\P{JSN=B}');
Error('\p{Is_Jamo_Short_Name:B}');
Error('\P{Is_Jamo_Short_Name:B}');
Error('\p{Is_JSN=B}');
Error('\P{Is_JSN=B}');
Error('\p{Jamo_Short_Name=WA}');
Error('\P{Jamo_Short_Name=WA}');
Error('\p{JSN: WA}');
Error('\P{JSN: WA}');
Error('\p{Is_Jamo_Short_Name=WA}');
Error('\P{Is_Jamo_Short_Name=WA}');
Error('\p{Is_JSN=WA}');
Error('\P{Is_JSN=WA}');
Error('\p{Jamo_Short_Name=LH}');
Error('\P{Jamo_Short_Name=LH}');
Error('\p{JSN=LH}');
Error('\P{JSN=LH}');
Error('\p{Is_Jamo_Short_Name=LH}');
Error('\P{Is_Jamo_Short_Name=LH}');
Error('\p{Is_JSN=LH}');
Error('\P{Is_JSN=LH}');
Error('\p{Jamo_Short_Name=YI}');
Error('\P{Jamo_Short_Name=YI}');
Error('\p{JSN=YI}');
Error('\P{JSN=YI}');
Error('\p{Is_Jamo_Short_Name=YI}');
Error('\P{Is_Jamo_Short_Name=YI}');
Error('\p{Is_JSN=YI}');
Error('\P{Is_JSN=YI}');
Error('\p{Jamo_Short_Name=WEO}');
Error('\P{Jamo_Short_Name=WEO}');
Error('\p{JSN=WEO}');
Error('\P{JSN=WEO}');
Error('\p{Is_Jamo_Short_Name=WEO}');
Error('\P{Is_Jamo_Short_Name=WEO}');
Error('\p{Is_JSN=WEO}');
Error('\P{Is_JSN=WEO}');
Error('\p{Jamo_Short_Name=LS}');
Error('\P{Jamo_Short_Name=LS}');
Error('\p{JSN=LS}');
Error('\P{JSN=LS}');
Error('\p{Is_Jamo_Short_Name=LS}');
Error('\P{Is_Jamo_Short_Name=LS}');
Error('\p{Is_JSN=LS}');
Error('\P{Is_JSN=LS}');
Error('\p{Jamo_Short_Name: BS}');
Error('\P{Jamo_Short_Name: BS}');
Error('\p{JSN=BS}');
Error('\P{JSN=BS}');
Error('\p{Is_Jamo_Short_Name=BS}');
Error('\P{Is_Jamo_Short_Name=BS}');
Error('\p{Is_JSN=BS}');
Error('\P{Is_JSN=BS}');
Error('\p{Jamo_Short_Name=YO}');
Error('\P{Jamo_Short_Name=YO}');
Error('\p{JSN=YO}');
Error('\P{JSN=YO}');
Error('\p{Is_Jamo_Short_Name=YO}');
Error('\P{Is_Jamo_Short_Name=YO}');
Error('\p{Is_JSN=YO}');
Error('\P{Is_JSN=YO}');
Error('\p{Jamo_Short_Name: OE}');
Error('\P{Jamo_Short_Name: OE}');
Error('\p{JSN=OE}');
Error('\P{JSN=OE}');
Error('\p{Is_Jamo_Short_Name=OE}');
Error('\P{Is_Jamo_Short_Name=OE}');
Error('\p{Is_JSN=OE}');
Error('\P{Is_JSN=OE}');
Error('\p{Jamo_Short_Name=M}');
Error('\P{Jamo_Short_Name=M}');
Error('\p{JSN=M}');
Error('\P{JSN=M}');
Error('\p{Is_Jamo_Short_Name=M}');
Error('\P{Is_Jamo_Short_Name=M}');
Error('\p{Is_JSN=M}');
Error('\P{Is_JSN=M}');
Error('\p{Jamo_Short_Name=EO}');
Error('\P{Jamo_Short_Name=EO}');
Error('\p{JSN:EO}');
Error('\P{JSN:EO}');
Error('\p{Is_Jamo_Short_Name=EO}');
Error('\P{Is_Jamo_Short_Name=EO}');
Error('\p{Is_JSN=EO}');
Error('\P{Is_JSN=EO}');
Error('\p{Jamo_Short_Name=C}');
Error('\P{Jamo_Short_Name=C}');
Error('\p{JSN=C}');
Error('\P{JSN=C}');
Error('\p{Is_Jamo_Short_Name=C}');
Error('\P{Is_Jamo_Short_Name=C}');
Error('\p{Is_JSN=C}');
Error('\P{Is_JSN=C}');
Error('\p{Jamo_Short_Name=WI}');
Error('\P{Jamo_Short_Name=WI}');
Error('\p{JSN=WI}');
Error('\P{JSN=WI}');
Error('\p{Is_Jamo_Short_Name=WI}');
Error('\P{Is_Jamo_Short_Name=WI}');
Error('\p{Is_JSN=WI}');
Error('\P{Is_JSN=WI}');
Error('\p{Jamo_Short_Name=EU}');
Error('\P{Jamo_Short_Name=EU}');
Error('\p{JSN=EU}');
Error('\P{JSN=EU}');
Error('\p{Is_Jamo_Short_Name=EU}');
Error('\P{Is_Jamo_Short_Name=EU}');
Error('\p{Is_JSN=EU}');
Error('\P{Is_JSN=EU}');
Error('\p{Jamo_Short_Name=LG}');
Error('\P{Jamo_Short_Name=LG}');
Error('\p{JSN=LG}');
Error('\P{JSN=LG}');
Error('\p{Is_Jamo_Short_Name=LG}');
Error('\P{Is_Jamo_Short_Name=LG}');
Error('\p{Is_JSN=LG}');
Error('\P{Is_JSN=LG}');
Error('\p{Jamo_Short_Name=L}');
Error('\P{Jamo_Short_Name=L}');
Error('\p{JSN=L}');
Error('\P{JSN=L}');
Error('\p{Is_Jamo_Short_Name=L}');
Error('\P{Is_Jamo_Short_Name=L}');
Error('\p{Is_JSN:	L}');
Error('\P{Is_JSN:	L}');
Error('\p{Jamo_Short_Name=P}');
Error('\P{Jamo_Short_Name=P}');
Error('\p{JSN=P}');
Error('\P{JSN=P}');
Error('\p{Is_Jamo_Short_Name:	P}');
Error('\P{Is_Jamo_Short_Name:	P}');
Error('\p{Is_JSN=P}');
Error('\P{Is_JSN=P}');
Error('\p{Jamo_Short_Name=DD}');
Error('\P{Jamo_Short_Name=DD}');
Error('\p{JSN=DD}');
Error('\P{JSN=DD}');
Error('\p{Is_Jamo_Short_Name: DD}');
Error('\P{Is_Jamo_Short_Name: DD}');
Error('\p{Is_JSN=DD}');
Error('\P{Is_JSN=DD}');
Error('\p{Jamo_Short_Name:   NG}');
Error('\P{Jamo_Short_Name:   NG}');
Error('\p{JSN=NG}');
Error('\P{JSN=NG}');
Error('\p{Is_Jamo_Short_Name=NG}');
Error('\P{Is_Jamo_Short_Name=NG}');
Error('\p{Is_JSN=NG}');
Error('\P{Is_JSN=NG}');
Error('\p{Jamo_Short_Name=AE}');
Error('\P{Jamo_Short_Name=AE}');
Error('\p{JSN=AE}');
Error('\P{JSN=AE}');
Error('\p{Is_Jamo_Short_Name=AE}');
Error('\P{Is_Jamo_Short_Name=AE}');
Error('\p{Is_JSN=AE}');
Error('\P{Is_JSN=AE}');
Error('\p{Jamo_Short_Name=T}');
Error('\P{Jamo_Short_Name=T}');
Error('\p{JSN=T}');
Error('\P{JSN=T}');
Error('\p{Is_Jamo_Short_Name=T}');
Error('\P{Is_Jamo_Short_Name=T}');
Error('\p{Is_JSN=T}');
Error('\P{Is_JSN=T}');
Error('\p{Jamo_Short_Name=A}');
Error('\P{Jamo_Short_Name=A}');
Error('\p{JSN=A}');
Error('\P{JSN=A}');
Error('\p{Is_Jamo_Short_Name=A}');
Error('\P{Is_Jamo_Short_Name=A}');
Error('\p{Is_JSN=A}');
Error('\P{Is_JSN=A}');
Error('\p{Jamo_Short_Name=N}');
Error('\P{Jamo_Short_Name=N}');
Error('\p{JSN=N}');
Error('\P{JSN=N}');
Error('\p{Is_Jamo_Short_Name=N}');
Error('\P{Is_Jamo_Short_Name=N}');
Error('\p{Is_JSN:	N}');
Error('\P{Is_JSN:	N}');
Error('\p{Jamo_Short_Name=YAE}');
Error('\P{Jamo_Short_Name=YAE}');
Error('\p{JSN=YAE}');
Error('\P{JSN=YAE}');
Error('\p{Is_Jamo_Short_Name=YAE}');
Error('\P{Is_Jamo_Short_Name=YAE}');
Error('\p{Is_JSN=YAE}');
Error('\P{Is_JSN=YAE}');
Error('\p{Jamo_Short_Name=U}');
Error('\P{Jamo_Short_Name=U}');
Error('\p{JSN=U}');
Error('\P{JSN=U}');
Error('\p{Is_Jamo_Short_Name=U}');
Error('\P{Is_Jamo_Short_Name=U}');
Error('\p{Is_JSN=U}');
Error('\P{Is_JSN=U}');
Error('\p{Jamo_Short_Name=WAE}');
Error('\P{Jamo_Short_Name=WAE}');
Error('\p{JSN=WAE}');
Error('\P{JSN=WAE}');
Error('\p{Is_Jamo_Short_Name=WAE}');
Error('\P{Is_Jamo_Short_Name=WAE}');
Error('\p{Is_JSN:	WAE}');
Error('\P{Is_JSN:	WAE}');
Error('\p{Jamo_Short_Name=GS}');
Error('\P{Jamo_Short_Name=GS}');
Error('\p{JSN=GS}');
Error('\P{JSN=GS}');
Error('\p{Is_Jamo_Short_Name=GS}');
Error('\P{Is_Jamo_Short_Name=GS}');
Error('\p{Is_JSN=GS}');
Error('\P{Is_JSN=GS}');
Error('\p{Jamo_Short_Name=H}');
Error('\P{Jamo_Short_Name=H}');
Error('\p{JSN=H}');
Error('\P{JSN=H}');
Error('\p{Is_Jamo_Short_Name=H}');
Error('\P{Is_Jamo_Short_Name=H}');
Error('\p{Is_JSN=H}');
Error('\P{Is_JSN=H}');
Error('\p{Jamo_Short_Name=LT}');
Error('\P{Jamo_Short_Name=LT}');
Error('\p{JSN=LT}');
Error('\P{JSN=LT}');
Error('\p{Is_Jamo_Short_Name=LT}');
Error('\P{Is_Jamo_Short_Name=LT}');
Error('\p{Is_JSN=LT}');
Error('\P{Is_JSN=LT}');
Error('\p{Jamo_Short_Name=YE}');
Error('\P{Jamo_Short_Name=YE}');
Error('\p{JSN=YE}');
Error('\P{JSN=YE}');
Error('\p{Is_Jamo_Short_Name=YE}');
Error('\P{Is_Jamo_Short_Name=YE}');
Error('\p{Is_JSN=YE}');
Error('\P{Is_JSN=YE}');
Error('\p{Jamo_Short_Name=I}');
Error('\P{Jamo_Short_Name=I}');
Error('\p{JSN=I}');
Error('\P{JSN=I}');
Error('\p{Is_Jamo_Short_Name=I}');
Error('\P{Is_Jamo_Short_Name=I}');
Error('\p{Is_JSN=I}');
Error('\P{Is_JSN=I}');
Error('\p{Jamo_Short_Name:   R}');
Error('\P{Jamo_Short_Name:   R}');
Error('\p{JSN=R}');
Error('\P{JSN=R}');
Error('\p{Is_Jamo_Short_Name=R}');
Error('\P{Is_Jamo_Short_Name=R}');
Error('\p{Is_JSN=R}');
Error('\P{Is_JSN=R}');
Error('\p{Jamo_Short_Name=O}');
Error('\P{Jamo_Short_Name=O}');
Error('\p{JSN=O}');
Error('\P{JSN=O}');
Error('\p{Is_Jamo_Short_Name=O}');
Error('\P{Is_Jamo_Short_Name=O}');
Error('\p{Is_JSN=O}');
Error('\P{Is_JSN=O}');
Error('\p{Age=	:=+00003.2}');
Error('\P{Age=	:=+00003.2}');
Expect(1, 544, '\p{Age:0_3.2}', "");
Expect(0, 544, '\p{^Age:0_3.2}', "");
Expect(0, 544, '\P{Age:0_3.2}', "");
Expect(1, 544, '\P{^Age:0_3.2}', "");
Expect(0, 543, '\p{Age:0_3.2}', "");
Expect(1, 543, '\p{^Age:0_3.2}', "");
Expect(1, 543, '\P{Age:0_3.2}', "");
Expect(0, 543, '\P{^Age:0_3.2}', "");
Error('\p{Is_Age=	/a/0_0 03.2}');
Error('\P{Is_Age=	/a/0_0 03.2}');
Expect(1, 544, '\p{Is_Age=+00003.2}', "");
Expect(0, 544, '\p{^Is_Age=+00003.2}', "");
Expect(0, 544, '\P{Is_Age=+00003.2}', "");
Expect(1, 544, '\P{^Is_Age=+00003.2}', "");
Expect(0, 543, '\p{Is_Age=+00003.2}', "");
Expect(1, 543, '\p{^Is_Age=+00003.2}', "");
Expect(1, 543, '\P{Is_Age=+00003.2}', "");
Expect(0, 543, '\P{^Is_Age=+00003.2}', "");
Error('\p{Age=0002.0/a/}');
Error('\P{Age=0002.0/a/}');
Expect(1, 1441, '\p{Age=+00_00_02.0}', "");
Expect(0, 1441, '\p{^Age=+00_00_02.0}', "");
Expect(0, 1441, '\P{Age=+00_00_02.0}', "");
Expect(1, 1441, '\P{^Age=+00_00_02.0}', "");
Expect(0, 1424, '\p{Age=+00_00_02.0}', "");
Expect(1, 1424, '\p{^Age=+00_00_02.0}', "");
Expect(1, 1424, '\P{Age=+00_00_02.0}', "");
Expect(0, 1424, '\P{^Age=+00_00_02.0}', "");
Error('\p{Is_Age=:=  0_0 0-0	0-00002.0}');
Error('\P{Is_Age=:=  0_0 0-0	0-00002.0}');
Expect(1, 1441, '\p{Is_Age=+0_0_0_0_0_002.0}', "");
Expect(0, 1441, '\p{^Is_Age=+0_0_0_0_0_002.0}', "");
Expect(0, 1441, '\P{Is_Age=+0_0_0_0_0_002.0}', "");
Expect(1, 1441, '\P{^Is_Age=+0_0_0_0_0_002.0}', "");
Expect(0, 1424, '\p{Is_Age=+0_0_0_0_0_002.0}', "");
Expect(1, 1424, '\p{^Is_Age=+0_0_0_0_0_002.0}', "");
Expect(1, 1424, '\P{Is_Age=+0_0_0_0_0_002.0}', "");
Expect(0, 1424, '\P{^Is_Age=+0_0_0_0_0_002.0}', "");
Error('\p{Age=_:=000_0001.1}');
Error('\P{Age=_:=000_0001.1}');
Expect(1, 501, '\p{Age=+000_1.1}', "");
Expect(0, 501, '\p{^Age=+000_1.1}', "");
Expect(0, 501, '\P{Age=+000_1.1}', "");
Expect(1, 501, '\P{^Age=+000_1.1}', "");
Expect(0, 505, '\p{Age=+000_1.1}', "");
Expect(1, 505, '\p{^Age=+000_1.1}', "");
Expect(1, 505, '\P{Age=+000_1.1}', "");
Expect(0, 505, '\P{^Age=+000_1.1}', "");
Error('\p{Is_Age= _00000001.1/a/}');
Error('\P{Is_Age= _00000001.1/a/}');
Expect(1, 501, '\p{Is_Age=0000000_1.1}', "");
Expect(0, 501, '\p{^Is_Age=0000000_1.1}', "");
Expect(0, 501, '\P{Is_Age=0000000_1.1}', "");
Expect(1, 501, '\P{^Is_Age=0000000_1.1}', "");
Expect(0, 505, '\p{Is_Age=0000000_1.1}', "");
Expect(1, 505, '\p{^Is_Age=0000000_1.1}', "");
Expect(1, 505, '\P{Is_Age=0000000_1.1}', "");
Expect(0, 505, '\P{^Is_Age=0000000_1.1}', "");
Error('\p{Age=	_+0_5.0:=}');
Error('\P{Age=	_+0_5.0:=}');
Expect(1, 591, '\p{Age=+00000000_5.0}', "");
Expect(0, 591, '\p{^Age=+00000000_5.0}', "");
Expect(0, 591, '\P{Age=+00000000_5.0}', "");
Expect(1, 591, '\P{^Age=+00000000_5.0}', "");
Expect(0, 577, '\p{Age=+00000000_5.0}', "");
Expect(1, 577, '\p{^Age=+00000000_5.0}', "");
Expect(1, 577, '\P{Age=+00000000_5.0}', "");
Expect(0, 577, '\P{^Age=+00000000_5.0}', "");
Error('\p{Is_Age=-005.0:=}');
Error('\P{Is_Age=-005.0:=}');
Expect(1, 591, '\p{Is_Age:	00000005.0}', "");
Expect(0, 591, '\p{^Is_Age:	00000005.0}', "");
Expect(0, 591, '\P{Is_Age:	00000005.0}', "");
Expect(1, 591, '\P{^Is_Age:	00000005.0}', "");
Expect(0, 577, '\p{Is_Age:	00000005.0}', "");
Expect(1, 577, '\p{^Is_Age:	00000005.0}', "");
Expect(1, 577, '\P{Is_Age:	00000005.0}', "");
Expect(0, 577, '\P{^Is_Age:	00000005.0}', "");
Error('\p{Age= -3.0/a/}');
Error('\P{Age= -3.0/a/}');
Expect(1, 505, '\p{Age=+0003.0}', "");
Expect(0, 505, '\p{^Age=+0003.0}', "");
Expect(0, 505, '\P{Age=+0003.0}', "");
Expect(1, 505, '\P{^Age=+0003.0}', "");
Expect(0, 501, '\p{Age=+0003.0}', "");
Expect(1, 501, '\p{^Age=+0003.0}', "");
Expect(1, 501, '\P{Age=+0003.0}', "");
Expect(0, 501, '\P{^Age=+0003.0}', "");
Error('\p{Is_Age=	_003.0/a/}');
Error('\P{Is_Age=	_003.0/a/}');
Expect(1, 505, '\p{Is_Age:   +00003.0}', "");
Expect(0, 505, '\p{^Is_Age:   +00003.0}', "");
Expect(0, 505, '\P{Is_Age:   +00003.0}', "");
Expect(1, 505, '\P{^Is_Age:   +00003.0}', "");
Expect(0, 501, '\p{Is_Age:   +00003.0}', "");
Expect(1, 501, '\p{^Is_Age:   +00003.0}', "");
Expect(1, 501, '\P{Is_Age:   +00003.0}', "");
Expect(0, 501, '\P{^Is_Age:   +00003.0}', "");
Error('\p{Age::= -00000006.0}');
Error('\P{Age::= -00000006.0}');
Expect(1, 1319, '\p{Age=6.0}', "");
Expect(0, 1319, '\p{^Age=6.0}', "");
Expect(0, 1319, '\P{Age=6.0}', "");
Expect(1, 1319, '\P{^Age=6.0}', "");
Expect(0, 1317, '\p{Age=6.0}', "");
Expect(1, 1317, '\p{^Age=6.0}', "");
Expect(1, 1317, '\P{Age=6.0}', "");
Expect(0, 1317, '\P{^Age=6.0}', "");
Error('\p{Is_Age=:=_ 0000006.0}');
Error('\P{Is_Age=:=_ 0000006.0}');
Expect(1, 1319, '\p{Is_Age:	+0_0_0_0_0006.0}', "");
Expect(0, 1319, '\p{^Is_Age:	+0_0_0_0_0006.0}', "");
Expect(0, 1319, '\P{Is_Age:	+0_0_0_0_0006.0}', "");
Expect(1, 1319, '\P{^Is_Age:	+0_0_0_0_0006.0}', "");
Expect(0, 1317, '\p{Is_Age:	+0_0_0_0_0006.0}', "");
Expect(1, 1317, '\p{^Is_Age:	+0_0_0_0_0006.0}', "");
Expect(1, 1317, '\P{Is_Age:	+0_0_0_0_0006.0}', "");
Expect(0, 1317, '\P{^Is_Age:	+0_0_0_0_0006.0}', "");
Error('\p{Age=/a/ 	Unassigned}');
Error('\P{Age=/a/ 	Unassigned}');
Expect(1, 889, '\p{Age:unassigned}', "");
Expect(0, 889, '\p{^Age:unassigned}', "");
Expect(0, 889, '\P{Age:unassigned}', "");
Expect(1, 889, '\P{^Age:unassigned}', "");
Expect(0, 887, '\p{Age:unassigned}', "");
Expect(1, 887, '\p{^Age:unassigned}', "");
Expect(1, 887, '\P{Age:unassigned}', "");
Expect(0, 887, '\P{^Age:unassigned}', "");
Expect(1, 889, '\p{Age=-	UNASSIGNED}', "");
Expect(0, 889, '\p{^Age=-	UNASSIGNED}', "");
Expect(0, 889, '\P{Age=-	UNASSIGNED}', "");
Expect(1, 889, '\P{^Age=-	UNASSIGNED}', "");
Expect(0, 887, '\p{Age=-	UNASSIGNED}', "");
Expect(1, 887, '\p{^Age=-	UNASSIGNED}', "");
Expect(1, 887, '\P{Age=-	UNASSIGNED}', "");
Expect(0, 887, '\P{^Age=-	UNASSIGNED}', "");
Error('\p{Is_Age= /a/Unassigned}');
Error('\P{Is_Age= /a/Unassigned}');
Expect(1, 889, '\p{Is_Age=unassigned}', "");
Expect(0, 889, '\p{^Is_Age=unassigned}', "");
Expect(0, 889, '\P{Is_Age=unassigned}', "");
Expect(1, 889, '\P{^Is_Age=unassigned}', "");
Expect(0, 887, '\p{Is_Age=unassigned}', "");
Expect(1, 887, '\p{^Is_Age=unassigned}', "");
Expect(1, 887, '\P{Is_Age=unassigned}', "");
Expect(0, 887, '\P{^Is_Age=unassigned}', "");
Expect(1, 889, '\p{Is_Age= 	Unassigned}', "");
Expect(0, 889, '\p{^Is_Age= 	Unassigned}', "");
Expect(0, 889, '\P{Is_Age= 	Unassigned}', "");
Expect(1, 889, '\P{^Is_Age= 	Unassigned}', "");
Expect(0, 887, '\p{Is_Age= 	Unassigned}', "");
Expect(1, 887, '\p{^Is_Age= 	Unassigned}', "");
Expect(1, 887, '\P{Is_Age= 	Unassigned}', "");
Expect(0, 887, '\P{^Is_Age= 	Unassigned}', "");
Error('\p{Age=	_005.1/a/}');
Error('\P{Age=	_005.1/a/}');
Expect(1, 883, '\p{Age=+000_5.1}', "");
Expect(0, 883, '\p{^Age=+000_5.1}', "");
Expect(0, 883, '\P{Age=+000_5.1}', "");
Expect(1, 883, '\P{^Age=+000_5.1}', "");
Expect(0, 879, '\p{Age=+000_5.1}', "");
Expect(1, 879, '\p{^Age=+000_5.1}', "");
Expect(1, 879, '\P{Age=+000_5.1}', "");
Expect(0, 879, '\P{^Age=+000_5.1}', "");
Error('\p{Is_Age=		0-00/a/00_00005.1}');
Error('\P{Is_Age=		0-00/a/00_00005.1}');
Expect(1, 883, '\p{Is_Age=+0_0_0_0_0_0_0_0_05.1}', "");
Expect(0, 883, '\p{^Is_Age=+0_0_0_0_0_0_0_0_05.1}', "");
Expect(0, 883, '\P{Is_Age=+0_0_0_0_0_0_0_0_05.1}', "");
Expect(1, 883, '\P{^Is_Age=+0_0_0_0_0_0_0_0_05.1}', "");
Expect(0, 879, '\p{Is_Age=+0_0_0_0_0_0_0_0_05.1}', "");
Expect(1, 879, '\p{^Is_Age=+0_0_0_0_0_0_0_0_05.1}', "");
Expect(1, 879, '\P{Is_Age=+0_0_0_0_0_0_0_0_05.1}', "");
Expect(0, 879, '\P{^Is_Age=+0_0_0_0_0_0_0_0_05.1}', "");
Error('\p{Age:_	+004.0/a/}');
Error('\P{Age:_	+004.0/a/}');
Expect(1, 545, '\p{Age=000000004.0}', "");
Expect(0, 545, '\p{^Age=000000004.0}', "");
Expect(0, 545, '\P{Age=000000004.0}', "");
Expect(1, 545, '\P{^Age=000000004.0}', "");
Expect(0, 544, '\p{Age=000000004.0}', "");
Expect(1, 544, '\p{^Age=000000004.0}', "");
Expect(1, 544, '\P{Age=000000004.0}', "");
Expect(0, 544, '\P{^Age=000000004.0}', "");
Error('\p{Is_Age=/a/  004.0}');
Error('\P{Is_Age=/a/  004.0}');
Expect(1, 545, '\p{Is_Age=0000004.0}', "");
Expect(0, 545, '\p{^Is_Age=0000004.0}', "");
Expect(0, 545, '\P{Is_Age=0000004.0}', "");
Expect(1, 545, '\P{^Is_Age=0000004.0}', "");
Expect(0, 544, '\p{Is_Age=0000004.0}', "");
Expect(1, 544, '\p{^Is_Age=0000004.0}', "");
Expect(1, 544, '\P{Is_Age=0000004.0}', "");
Expect(0, 544, '\P{^Is_Age=0000004.0}', "");
Error('\p{Age=:=_ +0 5.2}');
Error('\P{Age=:=_ +0 5.2}');
Expect(1, 1317, '\p{Age=+0000000005.2}', "");
Expect(0, 1317, '\p{^Age=+0000000005.2}', "");
Expect(0, 1317, '\P{Age=+0000000005.2}', "");
Expect(1, 1317, '\P{^Age=+0000000005.2}', "");
Expect(0, 1315, '\p{Age=+0000000005.2}', "");
Expect(1, 1315, '\p{^Age=+0000000005.2}', "");
Expect(1, 1315, '\P{Age=+0000000005.2}', "");
Expect(0, 1315, '\P{^Age=+0000000005.2}', "");
Error('\p{Is_Age:   _/a/05.2}');
Error('\P{Is_Age:   _/a/05.2}');
Expect(1, 1317, '\p{Is_Age=00000005.2}', "");
Expect(0, 1317, '\p{^Is_Age=00000005.2}', "");
Expect(0, 1317, '\P{Is_Age=00000005.2}', "");
Expect(1, 1317, '\P{^Is_Age=00000005.2}', "");
Expect(0, 1315, '\p{Is_Age=00000005.2}', "");
Expect(1, 1315, '\p{^Is_Age=00000005.2}', "");
Expect(1, 1315, '\P{Is_Age=00000005.2}', "");
Expect(0, 1315, '\P{^Is_Age=00000005.2}', "");
Error('\p{Age=	000003.1:=}');
Error('\P{Age=	000003.1:=}');
Expect(1, 1013, '\p{Age:00_00_00_00_3.1}', "");
Expect(0, 1013, '\p{^Age:00_00_00_00_3.1}', "");
Expect(0, 1013, '\P{Age:00_00_00_00_3.1}', "");
Expect(1, 1013, '\P{^Age:00_00_00_00_3.1}', "");
Expect(0, 1011, '\p{Age:00_00_00_00_3.1}', "");
Expect(1, 1011, '\p{^Age:00_00_00_00_3.1}', "");
Expect(1, 1011, '\P{Age:00_00_00_00_3.1}', "");
Expect(0, 1011, '\P{^Age:00_00_00_00_3.1}', "");
Error('\p{Is_Age=	_+0	00:=03.1}');
Error('\P{Is_Age=	_+0	00:=03.1}');
Expect(1, 1013, '\p{Is_Age=+000003.1}', "");
Expect(0, 1013, '\p{^Is_Age=+000003.1}', "");
Expect(0, 1013, '\P{Is_Age=+000003.1}', "");
Expect(1, 1013, '\P{^Is_Age=+000003.1}', "");
Expect(0, 1011, '\p{Is_Age=+000003.1}', "");
Expect(1, 1011, '\p{^Is_Age=+000003.1}', "");
Expect(1, 1011, '\P{Is_Age=+000003.1}', "");
Expect(0, 1011, '\P{^Is_Age=+000003.1}', "");
Error('\p{Age:    _00000002.1:=}');
Error('\P{Age:    _00000002.1:=}');
Expect(1, 8364, '\p{Age=+0_2.1}', "");
Expect(0, 8364, '\p{^Age=+0_2.1}', "");
Expect(0, 8364, '\P{Age=+0_2.1}', "");
Expect(1, 8364, '\P{^Age=+0_2.1}', "");
Expect(0, 8363, '\p{Age=+0_2.1}', "");
Expect(1, 8363, '\p{^Age=+0_2.1}', "");
Expect(1, 8363, '\P{Age=+0_2.1}', "");
Expect(0, 8363, '\P{^Age=+0_2.1}', "");
Error('\p{Is_Age=_ 0	0:=0_00_02.1}');
Error('\P{Is_Age=_ 0	0:=0_00_02.1}');
Expect(1, 8364, '\p{Is_Age=00_00_00_00_2.1}', "");
Expect(0, 8364, '\p{^Is_Age=00_00_00_00_2.1}', "");
Expect(0, 8364, '\P{Is_Age=00_00_00_00_2.1}', "");
Expect(1, 8364, '\P{^Is_Age=00_00_00_00_2.1}', "");
Expect(0, 8363, '\p{Is_Age=00_00_00_00_2.1}', "");
Expect(1, 8363, '\p{^Is_Age=00_00_00_00_2.1}', "");
Expect(1, 8363, '\P{Is_Age=00_00_00_00_2.1}', "");
Expect(0, 8363, '\P{^Is_Age=00_00_00_00_2.1}', "");
Error('\p{Age=-	04.1:=}');
Error('\P{Age=-	04.1:=}');
Expect(1, 577, '\p{Age=04.1}', "");
Expect(0, 577, '\p{^Age=04.1}', "");
Expect(0, 577, '\P{Age=04.1}', "");
Expect(1, 577, '\P{^Age=04.1}', "");
Expect(0, 566, '\p{Age=04.1}', "");
Expect(1, 566, '\p{^Age=04.1}', "");
Expect(1, 566, '\P{Age=04.1}', "");
Expect(0, 566, '\P{^Age=04.1}', "");
Error('\p{Is_Age= _00/a/00_00_00_04.1}');
Error('\P{Is_Age= _00/a/00_00_00_04.1}');
Expect(1, 577, '\p{Is_Age: 000_4.1}', "");
Expect(0, 577, '\p{^Is_Age: 000_4.1}', "");
Expect(0, 577, '\P{Is_Age: 000_4.1}', "");
Expect(1, 577, '\P{^Is_Age: 000_4.1}', "");
Expect(0, 566, '\p{Is_Age: 000_4.1}', "");
Expect(1, 566, '\p{^Is_Age: 000_4.1}', "");
Expect(1, 566, '\P{Is_Age: 000_4.1}', "");
Expect(0, 566, '\P{^Is_Age: 000_4.1}', "");
Error('\p{Expands_On_NFKD=Yes}');
Error('\P{Expands_On_NFKD=Yes}');
Error('\p{XO_NFKD=Y}');
Error('\P{XO_NFKD=Y}');
Error('\p{Is_Expands_On_NFKD=T}');
Error('\P{Is_Expands_On_NFKD=T}');
Error('\p{Is_XO_NFKD: True}');
Error('\P{Is_XO_NFKD: True}');
Error('\p{Expands_On_NFKD:No}');
Error('\P{Expands_On_NFKD:No}');
Error('\p{XO_NFKD=N}');
Error('\P{XO_NFKD=N}');
Error('\p{Is_Expands_On_NFKD=F}');
Error('\P{Is_Expands_On_NFKD=F}');
Error('\p{Is_XO_NFKD=False}');
Error('\P{Is_XO_NFKD=False}');
Error('\p{Grapheme_Cluster_Break=_/a/spacingmark}');
Error('\P{Grapheme_Cluster_Break=_/a/spacingmark}');
Expect(1, 2307, '\p{Grapheme_Cluster_Break=spacingmark}', "");
Expect(0, 2307, '\p{^Grapheme_Cluster_Break=spacingmark}', "");
Expect(0, 2307, '\P{Grapheme_Cluster_Break=spacingmark}', "");
Expect(1, 2307, '\P{^Grapheme_Cluster_Break=spacingmark}', "");
Expect(0, 2306, '\p{Grapheme_Cluster_Break=spacingmark}', "");
Expect(1, 2306, '\p{^Grapheme_Cluster_Break=spacingmark}', "");
Expect(1, 2306, '\P{Grapheme_Cluster_Break=spacingmark}', "");
Expect(0, 2306, '\P{^Grapheme_Cluster_Break=spacingmark}', "");
Expect(1, 2307, '\p{Grapheme_Cluster_Break=- SpacingMark}', "");
Expect(0, 2307, '\p{^Grapheme_Cluster_Break=- SpacingMark}', "");
Expect(0, 2307, '\P{Grapheme_Cluster_Break=- SpacingMark}', "");
Expect(1, 2307, '\P{^Grapheme_Cluster_Break=- SpacingMark}', "");
Expect(0, 2306, '\p{Grapheme_Cluster_Break=- SpacingMark}', "");
Expect(1, 2306, '\p{^Grapheme_Cluster_Break=- SpacingMark}', "");
Expect(1, 2306, '\P{Grapheme_Cluster_Break=- SpacingMark}', "");
Expect(0, 2306, '\P{^Grapheme_Cluster_Break=- SpacingMark}', "");
Error('\p{GCB=/a/- SM}');
Error('\P{GCB=/a/- SM}');
Expect(1, 2307, '\p{GCB: sm}', "");
Expect(0, 2307, '\p{^GCB: sm}', "");
Expect(0, 2307, '\P{GCB: sm}', "");
Expect(1, 2307, '\P{^GCB: sm}', "");
Expect(0, 2306, '\p{GCB: sm}', "");
Expect(1, 2306, '\p{^GCB: sm}', "");
Expect(1, 2306, '\P{GCB: sm}', "");
Expect(0, 2306, '\P{^GCB: sm}', "");
Expect(1, 2307, '\p{GCB=	_SM}', "");
Expect(0, 2307, '\p{^GCB=	_SM}', "");
Expect(0, 2307, '\P{GCB=	_SM}', "");
Expect(1, 2307, '\P{^GCB=	_SM}', "");
Expect(0, 2306, '\p{GCB=	_SM}', "");
Expect(1, 2306, '\p{^GCB=	_SM}', "");
Expect(1, 2306, '\P{GCB=	_SM}', "");
Expect(0, 2306, '\P{^GCB=	_SM}', "");
Error('\p{Is_Grapheme_Cluster_Break=	-SpacingMark:=}');
Error('\P{Is_Grapheme_Cluster_Break=	-SpacingMark:=}');
Expect(1, 2307, '\p{Is_Grapheme_Cluster_Break=spacingmark}', "");
Expect(0, 2307, '\p{^Is_Grapheme_Cluster_Break=spacingmark}', "");
Expect(0, 2307, '\P{Is_Grapheme_Cluster_Break=spacingmark}', "");
Expect(1, 2307, '\P{^Is_Grapheme_Cluster_Break=spacingmark}', "");
Expect(0, 2306, '\p{Is_Grapheme_Cluster_Break=spacingmark}', "");
Expect(1, 2306, '\p{^Is_Grapheme_Cluster_Break=spacingmark}', "");
Expect(1, 2306, '\P{Is_Grapheme_Cluster_Break=spacingmark}', "");
Expect(0, 2306, '\P{^Is_Grapheme_Cluster_Break=spacingmark}', "");
Expect(1, 2307, '\p{Is_Grapheme_Cluster_Break=- SpacingMark}', "");
Expect(0, 2307, '\p{^Is_Grapheme_Cluster_Break=- SpacingMark}', "");
Expect(0, 2307, '\P{Is_Grapheme_Cluster_Break=- SpacingMark}', "");
Expect(1, 2307, '\P{^Is_Grapheme_Cluster_Break=- SpacingMark}', "");
Expect(0, 2306, '\p{Is_Grapheme_Cluster_Break=- SpacingMark}', "");
Expect(1, 2306, '\p{^Is_Grapheme_Cluster_Break=- SpacingMark}', "");
Expect(1, 2306, '\P{Is_Grapheme_Cluster_Break=- SpacingMark}', "");
Expect(0, 2306, '\P{^Is_Grapheme_Cluster_Break=- SpacingMark}', "");
Error('\p{Is_GCB: /a/-	sm}');
Error('\P{Is_GCB: /a/-	sm}');
Expect(1, 2307, '\p{Is_GCB=sm}', "");
Expect(0, 2307, '\p{^Is_GCB=sm}', "");
Expect(0, 2307, '\P{Is_GCB=sm}', "");
Expect(1, 2307, '\P{^Is_GCB=sm}', "");
Expect(0, 2306, '\p{Is_GCB=sm}', "");
Expect(1, 2306, '\p{^Is_GCB=sm}', "");
Expect(1, 2306, '\P{Is_GCB=sm}', "");
Expect(0, 2306, '\P{^Is_GCB=sm}', "");
Expect(1, 2307, '\p{Is_GCB= 	SM}', "");
Expect(0, 2307, '\p{^Is_GCB= 	SM}', "");
Expect(0, 2307, '\P{Is_GCB= 	SM}', "");
Expect(1, 2307, '\P{^Is_GCB= 	SM}', "");
Expect(0, 2306, '\p{Is_GCB= 	SM}', "");
Expect(1, 2306, '\p{^Is_GCB= 	SM}', "");
Expect(1, 2306, '\P{Is_GCB= 	SM}', "");
Expect(0, 2306, '\P{^Is_GCB= 	SM}', "");
Error('\p{Grapheme_Cluster_Break=/a/- T}');
Error('\P{Grapheme_Cluster_Break=/a/- T}');
Expect(1, 4607, '\p{Grapheme_Cluster_Break:t}', "");
Expect(0, 4607, '\p{^Grapheme_Cluster_Break:t}', "");
Expect(0, 4607, '\P{Grapheme_Cluster_Break:t}', "");
Expect(1, 4607, '\P{^Grapheme_Cluster_Break:t}', "");
Expect(0, 4519, '\p{Grapheme_Cluster_Break:t}', "");
Expect(1, 4519, '\p{^Grapheme_Cluster_Break:t}', "");
Expect(1, 4519, '\P{Grapheme_Cluster_Break:t}', "");
Expect(0, 4519, '\P{^Grapheme_Cluster_Break:t}', "");
Expect(1, 4607, '\p{Grapheme_Cluster_Break=		T}', "");
Expect(0, 4607, '\p{^Grapheme_Cluster_Break=		T}', "");
Expect(0, 4607, '\P{Grapheme_Cluster_Break=		T}', "");
Expect(1, 4607, '\P{^Grapheme_Cluster_Break=		T}', "");
Expect(0, 4519, '\p{Grapheme_Cluster_Break=		T}', "");
Expect(1, 4519, '\p{^Grapheme_Cluster_Break=		T}', "");
Expect(1, 4519, '\P{Grapheme_Cluster_Break=		T}', "");
Expect(0, 4519, '\P{^Grapheme_Cluster_Break=		T}', "");
Error('\p{GCB=-:=T}');
Error('\P{GCB=-:=T}');
Expect(1, 4607, '\p{GCB=t}', "");
Expect(0, 4607, '\p{^GCB=t}', "");
Expect(0, 4607, '\P{GCB=t}', "");
Expect(1, 4607, '\P{^GCB=t}', "");
Expect(0, 4519, '\p{GCB=t}', "");
Expect(1, 4519, '\p{^GCB=t}', "");
Expect(1, 4519, '\P{GCB=t}', "");
Expect(0, 4519, '\P{^GCB=t}', "");
Expect(1, 4607, '\p{GCB= t}', "");
Expect(0, 4607, '\p{^GCB= t}', "");
Expect(0, 4607, '\P{GCB= t}', "");
Expect(1, 4607, '\P{^GCB= t}', "");
Expect(0, 4519, '\p{GCB= t}', "");
Expect(1, 4519, '\p{^GCB= t}', "");
Expect(1, 4519, '\P{GCB= t}', "");
Expect(0, 4519, '\P{^GCB= t}', "");
Error('\p{Is_Grapheme_Cluster_Break=_	T/a/}');
Error('\P{Is_Grapheme_Cluster_Break=_	T/a/}');
Expect(1, 4607, '\p{Is_Grapheme_Cluster_Break=t}', "");
Expect(0, 4607, '\p{^Is_Grapheme_Cluster_Break=t}', "");
Expect(0, 4607, '\P{Is_Grapheme_Cluster_Break=t}', "");
Expect(1, 4607, '\P{^Is_Grapheme_Cluster_Break=t}', "");
Expect(0, 4519, '\p{Is_Grapheme_Cluster_Break=t}', "");
Expect(1, 4519, '\p{^Is_Grapheme_Cluster_Break=t}', "");
Expect(1, 4519, '\P{Is_Grapheme_Cluster_Break=t}', "");
Expect(0, 4519, '\P{^Is_Grapheme_Cluster_Break=t}', "");
Expect(1, 4607, '\p{Is_Grapheme_Cluster_Break=	T}', "");
Expect(0, 4607, '\p{^Is_Grapheme_Cluster_Break=	T}', "");
Expect(0, 4607, '\P{Is_Grapheme_Cluster_Break=	T}', "");
Expect(1, 4607, '\P{^Is_Grapheme_Cluster_Break=	T}', "");
Expect(0, 4519, '\p{Is_Grapheme_Cluster_Break=	T}', "");
Expect(1, 4519, '\p{^Is_Grapheme_Cluster_Break=	T}', "");
Expect(1, 4519, '\P{Is_Grapheme_Cluster_Break=	T}', "");
Expect(0, 4519, '\P{^Is_Grapheme_Cluster_Break=	T}', "");
Error('\p{Is_GCB:--T:=}');
Error('\P{Is_GCB:--T:=}');
Expect(1, 4607, '\p{Is_GCB=t}', "");
Expect(0, 4607, '\p{^Is_GCB=t}', "");
Expect(0, 4607, '\P{Is_GCB=t}', "");
Expect(1, 4607, '\P{^Is_GCB=t}', "");
Expect(0, 4519, '\p{Is_GCB=t}', "");
Expect(1, 4519, '\p{^Is_GCB=t}', "");
Expect(1, 4519, '\P{Is_GCB=t}', "");
Expect(0, 4519, '\P{^Is_GCB=t}', "");
Expect(1, 4607, '\p{Is_GCB= T}', "");
Expect(0, 4607, '\p{^Is_GCB= T}', "");
Expect(0, 4607, '\P{Is_GCB= T}', "");
Expect(1, 4607, '\P{^Is_GCB= T}', "");
Expect(0, 4519, '\p{Is_GCB= T}', "");
Expect(1, 4519, '\p{^Is_GCB= T}', "");
Expect(1, 4519, '\P{Is_GCB= T}', "");
Expect(0, 4519, '\P{^Is_GCB= T}', "");
Error('\p{Grapheme_Cluster_Break=/a/LVT}');
Error('\P{Grapheme_Cluster_Break=/a/LVT}');
Expect(1, 44059, '\p{Grapheme_Cluster_Break:lvt}', "");
Expect(0, 44059, '\p{^Grapheme_Cluster_Break:lvt}', "");
Expect(0, 44059, '\P{Grapheme_Cluster_Break:lvt}', "");
Expect(1, 44059, '\P{^Grapheme_Cluster_Break:lvt}', "");
Expect(0, 44032, '\p{Grapheme_Cluster_Break:lvt}', "");
Expect(1, 44032, '\p{^Grapheme_Cluster_Break:lvt}', "");
Expect(1, 44032, '\P{Grapheme_Cluster_Break:lvt}', "");
Expect(0, 44032, '\P{^Grapheme_Cluster_Break:lvt}', "");
Expect(1, 44059, '\p{Grapheme_Cluster_Break=  lvt}', "");
Expect(0, 44059, '\p{^Grapheme_Cluster_Break=  lvt}', "");
Expect(0, 44059, '\P{Grapheme_Cluster_Break=  lvt}', "");
Expect(1, 44059, '\P{^Grapheme_Cluster_Break=  lvt}', "");
Expect(0, 44032, '\p{Grapheme_Cluster_Break=  lvt}', "");
Expect(1, 44032, '\p{^Grapheme_Cluster_Break=  lvt}', "");
Expect(1, 44032, '\P{Grapheme_Cluster_Break=  lvt}', "");
Expect(0, 44032, '\P{^Grapheme_Cluster_Break=  lvt}', "");
Error('\p{GCB=/a/LVT}');
Error('\P{GCB=/a/LVT}');
Expect(1, 44059, '\p{GCB=lvt}', "");
Expect(0, 44059, '\p{^GCB=lvt}', "");
Expect(0, 44059, '\P{GCB=lvt}', "");
Expect(1, 44059, '\P{^GCB=lvt}', "");
Expect(0, 44032, '\p{GCB=lvt}', "");
Expect(1, 44032, '\p{^GCB=lvt}', "");
Expect(1, 44032, '\P{GCB=lvt}', "");
Expect(0, 44032, '\P{^GCB=lvt}', "");
Expect(1, 44059, '\p{GCB=_	lvt}', "");
Expect(0, 44059, '\p{^GCB=_	lvt}', "");
Expect(0, 44059, '\P{GCB=_	lvt}', "");
Expect(1, 44059, '\P{^GCB=_	lvt}', "");
Expect(0, 44032, '\p{GCB=_	lvt}', "");
Expect(1, 44032, '\p{^GCB=_	lvt}', "");
Expect(1, 44032, '\P{GCB=_	lvt}', "");
Expect(0, 44032, '\P{^GCB=_	lvt}', "");
Error('\p{Is_Grapheme_Cluster_Break: 	LVT/a/}');
Error('\P{Is_Grapheme_Cluster_Break: 	LVT/a/}');
Expect(1, 44059, '\p{Is_Grapheme_Cluster_Break=lvt}', "");
Expect(0, 44059, '\p{^Is_Grapheme_Cluster_Break=lvt}', "");
Expect(0, 44059, '\P{Is_Grapheme_Cluster_Break=lvt}', "");
Expect(1, 44059, '\P{^Is_Grapheme_Cluster_Break=lvt}', "");
Expect(0, 44032, '\p{Is_Grapheme_Cluster_Break=lvt}', "");
Expect(1, 44032, '\p{^Is_Grapheme_Cluster_Break=lvt}', "");
Expect(1, 44032, '\P{Is_Grapheme_Cluster_Break=lvt}', "");
Expect(0, 44032, '\P{^Is_Grapheme_Cluster_Break=lvt}', "");
Expect(1, 44059, '\p{Is_Grapheme_Cluster_Break=_LVT}', "");
Expect(0, 44059, '\p{^Is_Grapheme_Cluster_Break=_LVT}', "");
Expect(0, 44059, '\P{Is_Grapheme_Cluster_Break=_LVT}', "");
Expect(1, 44059, '\P{^Is_Grapheme_Cluster_Break=_LVT}', "");
Expect(0, 44032, '\p{Is_Grapheme_Cluster_Break=_LVT}', "");
Expect(1, 44032, '\p{^Is_Grapheme_Cluster_Break=_LVT}', "");
Expect(1, 44032, '\P{Is_Grapheme_Cluster_Break=_LVT}', "");
Expect(0, 44032, '\P{^Is_Grapheme_Cluster_Break=_LVT}', "");
Error('\p{Is_GCB=/a/_LVT}');
Error('\P{Is_GCB=/a/_LVT}');
Expect(1, 44059, '\p{Is_GCB=lvt}', "");
Expect(0, 44059, '\p{^Is_GCB=lvt}', "");
Expect(0, 44059, '\P{Is_GCB=lvt}', "");
Expect(1, 44059, '\P{^Is_GCB=lvt}', "");
Expect(0, 44032, '\p{Is_GCB=lvt}', "");
Expect(1, 44032, '\p{^Is_GCB=lvt}', "");
Expect(1, 44032, '\P{Is_GCB=lvt}', "");
Expect(0, 44032, '\P{^Is_GCB=lvt}', "");
Expect(1, 44059, '\p{Is_GCB= lvt}', "");
Expect(0, 44059, '\p{^Is_GCB= lvt}', "");
Expect(0, 44059, '\P{Is_GCB= lvt}', "");
Expect(1, 44059, '\P{^Is_GCB= lvt}', "");
Expect(0, 44032, '\p{Is_GCB= lvt}', "");
Expect(1, 44032, '\p{^Is_GCB= lvt}', "");
Expect(1, 44032, '\P{Is_GCB= lvt}', "");
Expect(0, 44032, '\P{^Is_GCB= lvt}', "");
Error('\p{Grapheme_Cluster_Break:   	/a/control}');
Error('\P{Grapheme_Cluster_Break:   	/a/control}');
Expect(1, 9, '\p{Grapheme_Cluster_Break=control}', "");
Expect(0, 9, '\p{^Grapheme_Cluster_Break=control}', "");
Expect(0, 9, '\P{Grapheme_Cluster_Break=control}', "");
Expect(1, 9, '\P{^Grapheme_Cluster_Break=control}', "");
Expect(0, 10, '\p{Grapheme_Cluster_Break=control}', "");
Expect(1, 10, '\p{^Grapheme_Cluster_Break=control}', "");
Expect(1, 10, '\P{Grapheme_Cluster_Break=control}', "");
Expect(0, 10, '\P{^Grapheme_Cluster_Break=control}', "");
Expect(1, 9, '\p{Grapheme_Cluster_Break=--Control}', "");
Expect(0, 9, '\p{^Grapheme_Cluster_Break=--Control}', "");
Expect(0, 9, '\P{Grapheme_Cluster_Break=--Control}', "");
Expect(1, 9, '\P{^Grapheme_Cluster_Break=--Control}', "");
Expect(0, 10, '\p{Grapheme_Cluster_Break=--Control}', "");
Expect(1, 10, '\p{^Grapheme_Cluster_Break=--Control}', "");
Expect(1, 10, '\P{Grapheme_Cluster_Break=--Control}', "");
Expect(0, 10, '\P{^Grapheme_Cluster_Break=--Control}', "");
Error('\p{GCB=CN/a/}');
Error('\P{GCB=CN/a/}');
Expect(1, 9, '\p{GCB=cn}', "");
Expect(0, 9, '\p{^GCB=cn}', "");
Expect(0, 9, '\P{GCB=cn}', "");
Expect(1, 9, '\P{^GCB=cn}', "");
Expect(0, 10, '\p{GCB=cn}', "");
Expect(1, 10, '\p{^GCB=cn}', "");
Expect(1, 10, '\P{GCB=cn}', "");
Expect(0, 10, '\P{^GCB=cn}', "");
Expect(1, 9, '\p{GCB=--CN}', "");
Expect(0, 9, '\p{^GCB=--CN}', "");
Expect(0, 9, '\P{GCB=--CN}', "");
Expect(1, 9, '\P{^GCB=--CN}', "");
Expect(0, 10, '\p{GCB=--CN}', "");
Expect(1, 10, '\p{^GCB=--CN}', "");
Expect(1, 10, '\P{GCB=--CN}', "");
Expect(0, 10, '\P{^GCB=--CN}', "");
Error('\p{Is_Grapheme_Cluster_Break:		/a/CONTROL}');
Error('\P{Is_Grapheme_Cluster_Break:		/a/CONTROL}');
Expect(1, 9, '\p{Is_Grapheme_Cluster_Break=control}', "");
Expect(0, 9, '\p{^Is_Grapheme_Cluster_Break=control}', "");
Expect(0, 9, '\P{Is_Grapheme_Cluster_Break=control}', "");
Expect(1, 9, '\P{^Is_Grapheme_Cluster_Break=control}', "");
Expect(0, 10, '\p{Is_Grapheme_Cluster_Break=control}', "");
Expect(1, 10, '\p{^Is_Grapheme_Cluster_Break=control}', "");
Expect(1, 10, '\P{Is_Grapheme_Cluster_Break=control}', "");
Expect(0, 10, '\P{^Is_Grapheme_Cluster_Break=control}', "");
Expect(1, 9, '\p{Is_Grapheme_Cluster_Break=- CONTROL}', "");
Expect(0, 9, '\p{^Is_Grapheme_Cluster_Break=- CONTROL}', "");
Expect(0, 9, '\P{Is_Grapheme_Cluster_Break=- CONTROL}', "");
Expect(1, 9, '\P{^Is_Grapheme_Cluster_Break=- CONTROL}', "");
Expect(0, 10, '\p{Is_Grapheme_Cluster_Break=- CONTROL}', "");
Expect(1, 10, '\p{^Is_Grapheme_Cluster_Break=- CONTROL}', "");
Expect(1, 10, '\P{Is_Grapheme_Cluster_Break=- CONTROL}', "");
Expect(0, 10, '\P{^Is_Grapheme_Cluster_Break=- CONTROL}', "");
Error('\p{Is_GCB=/a/  CN}');
Error('\P{Is_GCB=/a/  CN}');
Expect(1, 9, '\p{Is_GCB=cn}', "");
Expect(0, 9, '\p{^Is_GCB=cn}', "");
Expect(0, 9, '\P{Is_GCB=cn}', "");
Expect(1, 9, '\P{^Is_GCB=cn}', "");
Expect(0, 10, '\p{Is_GCB=cn}', "");
Expect(1, 10, '\p{^Is_GCB=cn}', "");
Expect(1, 10, '\P{Is_GCB=cn}', "");
Expect(0, 10, '\P{^Is_GCB=cn}', "");
Expect(1, 9, '\p{Is_GCB=-_CN}', "");
Expect(0, 9, '\p{^Is_GCB=-_CN}', "");
Expect(0, 9, '\P{Is_GCB=-_CN}', "");
Expect(1, 9, '\P{^Is_GCB=-_CN}', "");
Expect(0, 10, '\p{Is_GCB=-_CN}', "");
Expect(1, 10, '\p{^Is_GCB=-_CN}', "");
Expect(1, 10, '\P{Is_GCB=-_CN}', "");
Expect(0, 10, '\P{^Is_GCB=-_CN}', "");
Error('\p{Grapheme_Cluster_Break=Prepend:=}');
Error('\P{Grapheme_Cluster_Break=Prepend:=}');
Expect(1, 3652, '\p{Grapheme_Cluster_Break=prepend}', "");
Expect(0, 3652, '\p{^Grapheme_Cluster_Break=prepend}', "");
Expect(0, 3652, '\P{Grapheme_Cluster_Break=prepend}', "");
Expect(1, 3652, '\P{^Grapheme_Cluster_Break=prepend}', "");
Expect(0, 3647, '\p{Grapheme_Cluster_Break=prepend}', "");
Expect(1, 3647, '\p{^Grapheme_Cluster_Break=prepend}', "");
Expect(1, 3647, '\P{Grapheme_Cluster_Break=prepend}', "");
Expect(0, 3647, '\P{^Grapheme_Cluster_Break=prepend}', "");
Expect(1, 3652, '\p{Grapheme_Cluster_Break= 	Prepend}', "");
Expect(0, 3652, '\p{^Grapheme_Cluster_Break= 	Prepend}', "");
Expect(0, 3652, '\P{Grapheme_Cluster_Break= 	Prepend}', "");
Expect(1, 3652, '\P{^Grapheme_Cluster_Break= 	Prepend}', "");
Expect(0, 3647, '\p{Grapheme_Cluster_Break= 	Prepend}', "");
Expect(1, 3647, '\p{^Grapheme_Cluster_Break= 	Prepend}', "");
Expect(1, 3647, '\P{Grapheme_Cluster_Break= 	Prepend}', "");
Expect(0, 3647, '\P{^Grapheme_Cluster_Break= 	Prepend}', "");
Error('\p{GCB= -PP:=}');
Error('\P{GCB= -PP:=}');
Expect(1, 3652, '\p{GCB=pp}', "");
Expect(0, 3652, '\p{^GCB=pp}', "");
Expect(0, 3652, '\P{GCB=pp}', "");
Expect(1, 3652, '\P{^GCB=pp}', "");
Expect(0, 3647, '\p{GCB=pp}', "");
Expect(1, 3647, '\p{^GCB=pp}', "");
Expect(1, 3647, '\P{GCB=pp}', "");
Expect(0, 3647, '\P{^GCB=pp}', "");
Expect(1, 3652, '\p{GCB=- PP}', "");
Expect(0, 3652, '\p{^GCB=- PP}', "");
Expect(0, 3652, '\P{GCB=- PP}', "");
Expect(1, 3652, '\P{^GCB=- PP}', "");
Expect(0, 3647, '\p{GCB=- PP}', "");
Expect(1, 3647, '\p{^GCB=- PP}', "");
Expect(1, 3647, '\P{GCB=- PP}', "");
Expect(0, 3647, '\P{^GCB=- PP}', "");
Error('\p{Is_Grapheme_Cluster_Break=-:=Prepend}');
Error('\P{Is_Grapheme_Cluster_Break=-:=Prepend}');
Expect(1, 3652, '\p{Is_Grapheme_Cluster_Break:	prepend}', "");
Expect(0, 3652, '\p{^Is_Grapheme_Cluster_Break:	prepend}', "");
Expect(0, 3652, '\P{Is_Grapheme_Cluster_Break:	prepend}', "");
Expect(1, 3652, '\P{^Is_Grapheme_Cluster_Break:	prepend}', "");
Expect(0, 3647, '\p{Is_Grapheme_Cluster_Break:	prepend}', "");
Expect(1, 3647, '\p{^Is_Grapheme_Cluster_Break:	prepend}', "");
Expect(1, 3647, '\P{Is_Grapheme_Cluster_Break:	prepend}', "");
Expect(0, 3647, '\P{^Is_Grapheme_Cluster_Break:	prepend}', "");
Expect(1, 3652, '\p{Is_Grapheme_Cluster_Break= 	prepend}', "");
Expect(0, 3652, '\p{^Is_Grapheme_Cluster_Break= 	prepend}', "");
Expect(0, 3652, '\P{Is_Grapheme_Cluster_Break= 	prepend}', "");
Expect(1, 3652, '\P{^Is_Grapheme_Cluster_Break= 	prepend}', "");
Expect(0, 3647, '\p{Is_Grapheme_Cluster_Break= 	prepend}', "");
Expect(1, 3647, '\p{^Is_Grapheme_Cluster_Break= 	prepend}', "");
Expect(1, 3647, '\P{Is_Grapheme_Cluster_Break= 	prepend}', "");
Expect(0, 3647, '\P{^Is_Grapheme_Cluster_Break= 	prepend}', "");
Error('\p{Is_GCB=_:=PP}');
Error('\P{Is_GCB=_:=PP}');
Expect(1, 3652, '\p{Is_GCB=pp}', "");
Expect(0, 3652, '\p{^Is_GCB=pp}', "");
Expect(0, 3652, '\P{Is_GCB=pp}', "");
Expect(1, 3652, '\P{^Is_GCB=pp}', "");
Expect(0, 3647, '\p{Is_GCB=pp}', "");
Expect(1, 3647, '\p{^Is_GCB=pp}', "");
Expect(1, 3647, '\P{Is_GCB=pp}', "");
Expect(0, 3647, '\P{^Is_GCB=pp}', "");
Expect(1, 3652, '\p{Is_GCB=	PP}', "");
Expect(0, 3652, '\p{^Is_GCB=	PP}', "");
Expect(0, 3652, '\P{Is_GCB=	PP}', "");
Expect(1, 3652, '\P{^Is_GCB=	PP}', "");
Expect(0, 3647, '\p{Is_GCB=	PP}', "");
Expect(1, 3647, '\p{^Is_GCB=	PP}', "");
Expect(1, 3647, '\P{Is_GCB=	PP}', "");
Expect(0, 3647, '\P{^Is_GCB=	PP}', "");
Error('\p{Grapheme_Cluster_Break:/a/_LV}');
Error('\P{Grapheme_Cluster_Break:/a/_LV}');
Expect(1, 44032, '\p{Grapheme_Cluster_Break=lv}', "");
Expect(0, 44032, '\p{^Grapheme_Cluster_Break=lv}', "");
Expect(0, 44032, '\P{Grapheme_Cluster_Break=lv}', "");
Expect(1, 44032, '\P{^Grapheme_Cluster_Break=lv}', "");
Expect(0, 44031, '\p{Grapheme_Cluster_Break=lv}', "");
Expect(1, 44031, '\p{^Grapheme_Cluster_Break=lv}', "");
Expect(1, 44031, '\P{Grapheme_Cluster_Break=lv}', "");
Expect(0, 44031, '\P{^Grapheme_Cluster_Break=lv}', "");
Expect(1, 44032, '\p{Grapheme_Cluster_Break=_	LV}', "");
Expect(0, 44032, '\p{^Grapheme_Cluster_Break=_	LV}', "");
Expect(0, 44032, '\P{Grapheme_Cluster_Break=_	LV}', "");
Expect(1, 44032, '\P{^Grapheme_Cluster_Break=_	LV}', "");
Expect(0, 44031, '\p{Grapheme_Cluster_Break=_	LV}', "");
Expect(1, 44031, '\p{^Grapheme_Cluster_Break=_	LV}', "");
Expect(1, 44031, '\P{Grapheme_Cluster_Break=_	LV}', "");
Expect(0, 44031, '\P{^Grapheme_Cluster_Break=_	LV}', "");
Error('\p{GCB=:=_LV}');
Error('\P{GCB=:=_LV}');
Expect(1, 44032, '\p{GCB:   lv}', "");
Expect(0, 44032, '\p{^GCB:   lv}', "");
Expect(0, 44032, '\P{GCB:   lv}', "");
Expect(1, 44032, '\P{^GCB:   lv}', "");
Expect(0, 44031, '\p{GCB:   lv}', "");
Expect(1, 44031, '\p{^GCB:   lv}', "");
Expect(1, 44031, '\P{GCB:   lv}', "");
Expect(0, 44031, '\P{^GCB:   lv}', "");
Expect(1, 44032, '\p{GCB:	-LV}', "");
Expect(0, 44032, '\p{^GCB:	-LV}', "");
Expect(0, 44032, '\P{GCB:	-LV}', "");
Expect(1, 44032, '\P{^GCB:	-LV}', "");
Expect(0, 44031, '\p{GCB:	-LV}', "");
Expect(1, 44031, '\p{^GCB:	-LV}', "");
Expect(1, 44031, '\P{GCB:	-LV}', "");
Expect(0, 44031, '\P{^GCB:	-LV}', "");
Error('\p{Is_Grapheme_Cluster_Break=:= 	lv}');
Error('\P{Is_Grapheme_Cluster_Break=:= 	lv}');
Expect(1, 44032, '\p{Is_Grapheme_Cluster_Break=lv}', "");
Expect(0, 44032, '\p{^Is_Grapheme_Cluster_Break=lv}', "");
Expect(0, 44032, '\P{Is_Grapheme_Cluster_Break=lv}', "");
Expect(1, 44032, '\P{^Is_Grapheme_Cluster_Break=lv}', "");
Expect(0, 44031, '\p{Is_Grapheme_Cluster_Break=lv}', "");
Expect(1, 44031, '\p{^Is_Grapheme_Cluster_Break=lv}', "");
Expect(1, 44031, '\P{Is_Grapheme_Cluster_Break=lv}', "");
Expect(0, 44031, '\P{^Is_Grapheme_Cluster_Break=lv}', "");
Expect(1, 44032, '\p{Is_Grapheme_Cluster_Break= lv}', "");
Expect(0, 44032, '\p{^Is_Grapheme_Cluster_Break= lv}', "");
Expect(0, 44032, '\P{Is_Grapheme_Cluster_Break= lv}', "");
Expect(1, 44032, '\P{^Is_Grapheme_Cluster_Break= lv}', "");
Expect(0, 44031, '\p{Is_Grapheme_Cluster_Break= lv}', "");
Expect(1, 44031, '\p{^Is_Grapheme_Cluster_Break= lv}', "");
Expect(1, 44031, '\P{Is_Grapheme_Cluster_Break= lv}', "");
Expect(0, 44031, '\P{^Is_Grapheme_Cluster_Break= lv}', "");
Error('\p{Is_GCB= /a/LV}');
Error('\P{Is_GCB= /a/LV}');
Expect(1, 44032, '\p{Is_GCB=lv}', "");
Expect(0, 44032, '\p{^Is_GCB=lv}', "");
Expect(0, 44032, '\P{Is_GCB=lv}', "");
Expect(1, 44032, '\P{^Is_GCB=lv}', "");
Expect(0, 44031, '\p{Is_GCB=lv}', "");
Expect(1, 44031, '\p{^Is_GCB=lv}', "");
Expect(1, 44031, '\P{Is_GCB=lv}', "");
Expect(0, 44031, '\P{^Is_GCB=lv}', "");
Expect(1, 44032, '\p{Is_GCB= lv}', "");
Expect(0, 44032, '\p{^Is_GCB= lv}', "");
Expect(0, 44032, '\P{Is_GCB= lv}', "");
Expect(1, 44032, '\P{^Is_GCB= lv}', "");
Expect(0, 44031, '\p{Is_GCB= lv}', "");
Expect(1, 44031, '\p{^Is_GCB= lv}', "");
Expect(1, 44031, '\P{Is_GCB= lv}', "");
Expect(0, 44031, '\P{^Is_GCB= lv}', "");
Error('\p{Grapheme_Cluster_Break=:= _CR}');
Error('\P{Grapheme_Cluster_Break=:= _CR}');
Expect(1, 13, '\p{Grapheme_Cluster_Break=cr}', "");
Expect(0, 13, '\p{^Grapheme_Cluster_Break=cr}', "");
Expect(0, 13, '\P{Grapheme_Cluster_Break=cr}', "");
Expect(1, 13, '\P{^Grapheme_Cluster_Break=cr}', "");
Expect(0, 12, '\p{Grapheme_Cluster_Break=cr}', "");
Expect(1, 12, '\p{^Grapheme_Cluster_Break=cr}', "");
Expect(1, 12, '\P{Grapheme_Cluster_Break=cr}', "");
Expect(0, 12, '\P{^Grapheme_Cluster_Break=cr}', "");
Expect(1, 13, '\p{Grapheme_Cluster_Break=-CR}', "");
Expect(0, 13, '\p{^Grapheme_Cluster_Break=-CR}', "");
Expect(0, 13, '\P{Grapheme_Cluster_Break=-CR}', "");
Expect(1, 13, '\P{^Grapheme_Cluster_Break=-CR}', "");
Expect(0, 12, '\p{Grapheme_Cluster_Break=-CR}', "");
Expect(1, 12, '\p{^Grapheme_Cluster_Break=-CR}', "");
Expect(1, 12, '\P{Grapheme_Cluster_Break=-CR}', "");
Expect(0, 12, '\P{^Grapheme_Cluster_Break=-CR}', "");
Error('\p{GCB=/a/-CR}');
Error('\P{GCB=/a/-CR}');
Expect(1, 13, '\p{GCB=cr}', "");
Expect(0, 13, '\p{^GCB=cr}', "");
Expect(0, 13, '\P{GCB=cr}', "");
Expect(1, 13, '\P{^GCB=cr}', "");
Expect(0, 12, '\p{GCB=cr}', "");
Expect(1, 12, '\p{^GCB=cr}', "");
Expect(1, 12, '\P{GCB=cr}', "");
Expect(0, 12, '\P{^GCB=cr}', "");
Expect(1, 13, '\p{GCB=		CR}', "");
Expect(0, 13, '\p{^GCB=		CR}', "");
Expect(0, 13, '\P{GCB=		CR}', "");
Expect(1, 13, '\P{^GCB=		CR}', "");
Expect(0, 12, '\p{GCB=		CR}', "");
Expect(1, 12, '\p{^GCB=		CR}', "");
Expect(1, 12, '\P{GCB=		CR}', "");
Expect(0, 12, '\P{^GCB=		CR}', "");
Error('\p{Is_Grapheme_Cluster_Break=	 CR:=}');
Error('\P{Is_Grapheme_Cluster_Break=	 CR:=}');
Expect(1, 13, '\p{Is_Grapheme_Cluster_Break=cr}', "");
Expect(0, 13, '\p{^Is_Grapheme_Cluster_Break=cr}', "");
Expect(0, 13, '\P{Is_Grapheme_Cluster_Break=cr}', "");
Expect(1, 13, '\P{^Is_Grapheme_Cluster_Break=cr}', "");
Expect(0, 12, '\p{Is_Grapheme_Cluster_Break=cr}', "");
Expect(1, 12, '\p{^Is_Grapheme_Cluster_Break=cr}', "");
Expect(1, 12, '\P{Is_Grapheme_Cluster_Break=cr}', "");
Expect(0, 12, '\P{^Is_Grapheme_Cluster_Break=cr}', "");
Expect(1, 13, '\p{Is_Grapheme_Cluster_Break= cr}', "");
Expect(0, 13, '\p{^Is_Grapheme_Cluster_Break= cr}', "");
Expect(0, 13, '\P{Is_Grapheme_Cluster_Break= cr}', "");
Expect(1, 13, '\P{^Is_Grapheme_Cluster_Break= cr}', "");
Expect(0, 12, '\p{Is_Grapheme_Cluster_Break= cr}', "");
Expect(1, 12, '\p{^Is_Grapheme_Cluster_Break= cr}', "");
Expect(1, 12, '\P{Is_Grapheme_Cluster_Break= cr}', "");
Expect(0, 12, '\P{^Is_Grapheme_Cluster_Break= cr}', "");
Error('\p{Is_GCB= _CR:=}');
Error('\P{Is_GCB= _CR:=}');
Expect(1, 13, '\p{Is_GCB:   cr}', "");
Expect(0, 13, '\p{^Is_GCB:   cr}', "");
Expect(0, 13, '\P{Is_GCB:   cr}', "");
Expect(1, 13, '\P{^Is_GCB:   cr}', "");
Expect(0, 12, '\p{Is_GCB:   cr}', "");
Expect(1, 12, '\p{^Is_GCB:   cr}', "");
Expect(1, 12, '\P{Is_GCB:   cr}', "");
Expect(0, 12, '\P{^Is_GCB:   cr}', "");
Expect(1, 13, '\p{Is_GCB=	_cr}', "");
Expect(0, 13, '\p{^Is_GCB=	_cr}', "");
Expect(0, 13, '\P{Is_GCB=	_cr}', "");
Expect(1, 13, '\P{^Is_GCB=	_cr}', "");
Expect(0, 12, '\p{Is_GCB=	_cr}', "");
Expect(1, 12, '\p{^Is_GCB=	_cr}', "");
Expect(1, 12, '\P{Is_GCB=	_cr}', "");
Expect(0, 12, '\P{^Is_GCB=	_cr}', "");
Error('\p{Grapheme_Cluster_Break=	:=OTHER}');
Error('\P{Grapheme_Cluster_Break=	:=OTHER}');
Expect(1, 126, '\p{Grapheme_Cluster_Break=other}', "");
Expect(0, 126, '\p{^Grapheme_Cluster_Break=other}', "");
Expect(0, 126, '\P{Grapheme_Cluster_Break=other}', "");
Expect(1, 126, '\P{^Grapheme_Cluster_Break=other}', "");
Expect(0, 31, '\p{Grapheme_Cluster_Break=other}', "");
Expect(1, 31, '\p{^Grapheme_Cluster_Break=other}', "");
Expect(1, 31, '\P{Grapheme_Cluster_Break=other}', "");
Expect(0, 31, '\P{^Grapheme_Cluster_Break=other}', "");
Expect(1, 126, '\p{Grapheme_Cluster_Break= Other}', "");
Expect(0, 126, '\p{^Grapheme_Cluster_Break= Other}', "");
Expect(0, 126, '\P{Grapheme_Cluster_Break= Other}', "");
Expect(1, 126, '\P{^Grapheme_Cluster_Break= Other}', "");
Expect(0, 31, '\p{Grapheme_Cluster_Break= Other}', "");
Expect(1, 31, '\p{^Grapheme_Cluster_Break= Other}', "");
Expect(1, 31, '\P{Grapheme_Cluster_Break= Other}', "");
Expect(0, 31, '\P{^Grapheme_Cluster_Break= Other}', "");
Error('\p{GCB=/a/		XX}');
Error('\P{GCB=/a/		XX}');
Expect(1, 126, '\p{GCB:	xx}', "");
Expect(0, 126, '\p{^GCB:	xx}', "");
Expect(0, 126, '\P{GCB:	xx}', "");
Expect(1, 126, '\P{^GCB:	xx}', "");
Expect(0, 31, '\p{GCB:	xx}', "");
Expect(1, 31, '\p{^GCB:	xx}', "");
Expect(1, 31, '\P{GCB:	xx}', "");
Expect(0, 31, '\P{^GCB:	xx}', "");
Expect(1, 126, '\p{GCB=		xx}', "");
Expect(0, 126, '\p{^GCB=		xx}', "");
Expect(0, 126, '\P{GCB=		xx}', "");
Expect(1, 126, '\P{^GCB=		xx}', "");
Expect(0, 31, '\p{GCB=		xx}', "");
Expect(1, 31, '\p{^GCB=		xx}', "");
Expect(1, 31, '\P{GCB=		xx}', "");
Expect(0, 31, '\P{^GCB=		xx}', "");
Error('\p{Is_Grapheme_Cluster_Break=/a/	-Other}');
Error('\P{Is_Grapheme_Cluster_Break=/a/	-Other}');
Expect(1, 126, '\p{Is_Grapheme_Cluster_Break=other}', "");
Expect(0, 126, '\p{^Is_Grapheme_Cluster_Break=other}', "");
Expect(0, 126, '\P{Is_Grapheme_Cluster_Break=other}', "");
Expect(1, 126, '\P{^Is_Grapheme_Cluster_Break=other}', "");
Expect(0, 31, '\p{Is_Grapheme_Cluster_Break=other}', "");
Expect(1, 31, '\p{^Is_Grapheme_Cluster_Break=other}', "");
Expect(1, 31, '\P{Is_Grapheme_Cluster_Break=other}', "");
Expect(0, 31, '\P{^Is_Grapheme_Cluster_Break=other}', "");
Expect(1, 126, '\p{Is_Grapheme_Cluster_Break=_-OTHER}', "");
Expect(0, 126, '\p{^Is_Grapheme_Cluster_Break=_-OTHER}', "");
Expect(0, 126, '\P{Is_Grapheme_Cluster_Break=_-OTHER}', "");
Expect(1, 126, '\P{^Is_Grapheme_Cluster_Break=_-OTHER}', "");
Expect(0, 31, '\p{Is_Grapheme_Cluster_Break=_-OTHER}', "");
Expect(1, 31, '\p{^Is_Grapheme_Cluster_Break=_-OTHER}', "");
Expect(1, 31, '\P{Is_Grapheme_Cluster_Break=_-OTHER}', "");
Expect(0, 31, '\P{^Is_Grapheme_Cluster_Break=_-OTHER}', "");
Error('\p{Is_GCB=_/a/XX}');
Error('\P{Is_GCB=_/a/XX}');
Expect(1, 126, '\p{Is_GCB:xx}', "");
Expect(0, 126, '\p{^Is_GCB:xx}', "");
Expect(0, 126, '\P{Is_GCB:xx}', "");
Expect(1, 126, '\P{^Is_GCB:xx}', "");
Expect(0, 31, '\p{Is_GCB:xx}', "");
Expect(1, 31, '\p{^Is_GCB:xx}', "");
Expect(1, 31, '\P{Is_GCB:xx}', "");
Expect(0, 31, '\P{^Is_GCB:xx}', "");
Expect(1, 126, '\p{Is_GCB=		XX}', "");
Expect(0, 126, '\p{^Is_GCB=		XX}', "");
Expect(0, 126, '\P{Is_GCB=		XX}', "");
Expect(1, 126, '\P{^Is_GCB=		XX}', "");
Expect(0, 31, '\p{Is_GCB=		XX}', "");
Expect(1, 31, '\p{^Is_GCB=		XX}', "");
Expect(1, 31, '\P{Is_GCB=		XX}', "");
Expect(0, 31, '\P{^Is_GCB=		XX}', "");
Error('\p{Grapheme_Cluster_Break=-/a/Extend}');
Error('\P{Grapheme_Cluster_Break=-/a/Extend}');
Expect(1, 879, '\p{Grapheme_Cluster_Break=extend}', "");
Expect(0, 879, '\p{^Grapheme_Cluster_Break=extend}', "");
Expect(0, 879, '\P{Grapheme_Cluster_Break=extend}', "");
Expect(1, 879, '\P{^Grapheme_Cluster_Break=extend}', "");
Expect(0, 767, '\p{Grapheme_Cluster_Break=extend}', "");
Expect(1, 767, '\p{^Grapheme_Cluster_Break=extend}', "");
Expect(1, 767, '\P{Grapheme_Cluster_Break=extend}', "");
Expect(0, 767, '\P{^Grapheme_Cluster_Break=extend}', "");
Expect(1, 879, '\p{Grapheme_Cluster_Break=	extend}', "");
Expect(0, 879, '\p{^Grapheme_Cluster_Break=	extend}', "");
Expect(0, 879, '\P{Grapheme_Cluster_Break=	extend}', "");
Expect(1, 879, '\P{^Grapheme_Cluster_Break=	extend}', "");
Expect(0, 767, '\p{Grapheme_Cluster_Break=	extend}', "");
Expect(1, 767, '\p{^Grapheme_Cluster_Break=	extend}', "");
Expect(1, 767, '\P{Grapheme_Cluster_Break=	extend}', "");
Expect(0, 767, '\P{^Grapheme_Cluster_Break=	extend}', "");
Error('\p{GCB:	- EX/a/}');
Error('\P{GCB:	- EX/a/}');
Expect(1, 879, '\p{GCB=ex}', "");
Expect(0, 879, '\p{^GCB=ex}', "");
Expect(0, 879, '\P{GCB=ex}', "");
Expect(1, 879, '\P{^GCB=ex}', "");
Expect(0, 767, '\p{GCB=ex}', "");
Expect(1, 767, '\p{^GCB=ex}', "");
Expect(1, 767, '\P{GCB=ex}', "");
Expect(0, 767, '\P{^GCB=ex}', "");
Expect(1, 879, '\p{GCB=	ex}', "");
Expect(0, 879, '\p{^GCB=	ex}', "");
Expect(0, 879, '\P{GCB=	ex}', "");
Expect(1, 879, '\P{^GCB=	ex}', "");
Expect(0, 767, '\p{GCB=	ex}', "");
Expect(1, 767, '\p{^GCB=	ex}', "");
Expect(1, 767, '\P{GCB=	ex}', "");
Expect(0, 767, '\P{^GCB=	ex}', "");
Error('\p{Is_Grapheme_Cluster_Break=/a/ _EXTEND}');
Error('\P{Is_Grapheme_Cluster_Break=/a/ _EXTEND}');
Expect(1, 879, '\p{Is_Grapheme_Cluster_Break=extend}', "");
Expect(0, 879, '\p{^Is_Grapheme_Cluster_Break=extend}', "");
Expect(0, 879, '\P{Is_Grapheme_Cluster_Break=extend}', "");
Expect(1, 879, '\P{^Is_Grapheme_Cluster_Break=extend}', "");
Expect(0, 767, '\p{Is_Grapheme_Cluster_Break=extend}', "");
Expect(1, 767, '\p{^Is_Grapheme_Cluster_Break=extend}', "");
Expect(1, 767, '\P{Is_Grapheme_Cluster_Break=extend}', "");
Expect(0, 767, '\P{^Is_Grapheme_Cluster_Break=extend}', "");
Expect(1, 879, '\p{Is_Grapheme_Cluster_Break= EXTEND}', "");
Expect(0, 879, '\p{^Is_Grapheme_Cluster_Break= EXTEND}', "");
Expect(0, 879, '\P{Is_Grapheme_Cluster_Break= EXTEND}', "");
Expect(1, 879, '\P{^Is_Grapheme_Cluster_Break= EXTEND}', "");
Expect(0, 767, '\p{Is_Grapheme_Cluster_Break= EXTEND}', "");
Expect(1, 767, '\p{^Is_Grapheme_Cluster_Break= EXTEND}', "");
Expect(1, 767, '\P{Is_Grapheme_Cluster_Break= EXTEND}', "");
Expect(0, 767, '\P{^Is_Grapheme_Cluster_Break= EXTEND}', "");
Error('\p{Is_GCB=:=	 EX}');
Error('\P{Is_GCB=:=	 EX}');
Expect(1, 879, '\p{Is_GCB=ex}', "");
Expect(0, 879, '\p{^Is_GCB=ex}', "");
Expect(0, 879, '\P{Is_GCB=ex}', "");
Expect(1, 879, '\P{^Is_GCB=ex}', "");
Expect(0, 767, '\p{Is_GCB=ex}', "");
Expect(1, 767, '\p{^Is_GCB=ex}', "");
Expect(1, 767, '\P{Is_GCB=ex}', "");
Expect(0, 767, '\P{^Is_GCB=ex}', "");
Expect(1, 879, '\p{Is_GCB= 	EX}', "");
Expect(0, 879, '\p{^Is_GCB= 	EX}', "");
Expect(0, 879, '\P{Is_GCB= 	EX}', "");
Expect(1, 879, '\P{^Is_GCB= 	EX}', "");
Expect(0, 767, '\p{Is_GCB= 	EX}', "");
Expect(1, 767, '\p{^Is_GCB= 	EX}', "");
Expect(1, 767, '\P{Is_GCB= 	EX}', "");
Expect(0, 767, '\P{^Is_GCB= 	EX}', "");
Error('\p{Grapheme_Cluster_Break=	-v/a/}');
Error('\P{Grapheme_Cluster_Break=	-v/a/}');
Expect(1, 4519, '\p{Grapheme_Cluster_Break=v}', "");
Expect(0, 4519, '\p{^Grapheme_Cluster_Break=v}', "");
Expect(0, 4519, '\P{Grapheme_Cluster_Break=v}', "");
Expect(1, 4519, '\P{^Grapheme_Cluster_Break=v}', "");
Expect(0, 4447, '\p{Grapheme_Cluster_Break=v}', "");
Expect(1, 4447, '\p{^Grapheme_Cluster_Break=v}', "");
Expect(1, 4447, '\P{Grapheme_Cluster_Break=v}', "");
Expect(0, 4447, '\P{^Grapheme_Cluster_Break=v}', "");
Expect(1, 4519, '\p{Grapheme_Cluster_Break=-V}', "");
Expect(0, 4519, '\p{^Grapheme_Cluster_Break=-V}', "");
Expect(0, 4519, '\P{Grapheme_Cluster_Break=-V}', "");
Expect(1, 4519, '\P{^Grapheme_Cluster_Break=-V}', "");
Expect(0, 4447, '\p{Grapheme_Cluster_Break=-V}', "");
Expect(1, 4447, '\p{^Grapheme_Cluster_Break=-V}', "");
Expect(1, 4447, '\P{Grapheme_Cluster_Break=-V}', "");
Expect(0, 4447, '\P{^Grapheme_Cluster_Break=-V}', "");
Error('\p{GCB= -v/a/}');
Error('\P{GCB= -v/a/}');
Expect(1, 4519, '\p{GCB=v}', "");
Expect(0, 4519, '\p{^GCB=v}', "");
Expect(0, 4519, '\P{GCB=v}', "");
Expect(1, 4519, '\P{^GCB=v}', "");
Expect(0, 4447, '\p{GCB=v}', "");
Expect(1, 4447, '\p{^GCB=v}', "");
Expect(1, 4447, '\P{GCB=v}', "");
Expect(0, 4447, '\P{^GCB=v}', "");
Expect(1, 4519, '\p{GCB= 	v}', "");
Expect(0, 4519, '\p{^GCB= 	v}', "");
Expect(0, 4519, '\P{GCB= 	v}', "");
Expect(1, 4519, '\P{^GCB= 	v}', "");
Expect(0, 4447, '\p{GCB= 	v}', "");
Expect(1, 4447, '\p{^GCB= 	v}', "");
Expect(1, 4447, '\P{GCB= 	v}', "");
Expect(0, 4447, '\P{^GCB= 	v}', "");
Error('\p{Is_Grapheme_Cluster_Break=_v:=}');
Error('\P{Is_Grapheme_Cluster_Break=_v:=}');
Expect(1, 4519, '\p{Is_Grapheme_Cluster_Break:	v}', "");
Expect(0, 4519, '\p{^Is_Grapheme_Cluster_Break:	v}', "");
Expect(0, 4519, '\P{Is_Grapheme_Cluster_Break:	v}', "");
Expect(1, 4519, '\P{^Is_Grapheme_Cluster_Break:	v}', "");
Expect(0, 4447, '\p{Is_Grapheme_Cluster_Break:	v}', "");
Expect(1, 4447, '\p{^Is_Grapheme_Cluster_Break:	v}', "");
Expect(1, 4447, '\P{Is_Grapheme_Cluster_Break:	v}', "");
Expect(0, 4447, '\P{^Is_Grapheme_Cluster_Break:	v}', "");
Expect(1, 4519, '\p{Is_Grapheme_Cluster_Break=  V}', "");
Expect(0, 4519, '\p{^Is_Grapheme_Cluster_Break=  V}', "");
Expect(0, 4519, '\P{Is_Grapheme_Cluster_Break=  V}', "");
Expect(1, 4519, '\P{^Is_Grapheme_Cluster_Break=  V}', "");
Expect(0, 4447, '\p{Is_Grapheme_Cluster_Break=  V}', "");
Expect(1, 4447, '\p{^Is_Grapheme_Cluster_Break=  V}', "");
Expect(1, 4447, '\P{Is_Grapheme_Cluster_Break=  V}', "");
Expect(0, 4447, '\P{^Is_Grapheme_Cluster_Break=  V}', "");
Error('\p{Is_GCB=:= V}');
Error('\P{Is_GCB=:= V}');
Expect(1, 4519, '\p{Is_GCB=v}', "");
Expect(0, 4519, '\p{^Is_GCB=v}', "");
Expect(0, 4519, '\P{Is_GCB=v}', "");
Expect(1, 4519, '\P{^Is_GCB=v}', "");
Expect(0, 4447, '\p{Is_GCB=v}', "");
Expect(1, 4447, '\p{^Is_GCB=v}', "");
Expect(1, 4447, '\P{Is_GCB=v}', "");
Expect(0, 4447, '\P{^Is_GCB=v}', "");
Expect(1, 4519, '\p{Is_GCB:	 V}', "");
Expect(0, 4519, '\p{^Is_GCB:	 V}', "");
Expect(0, 4519, '\P{Is_GCB:	 V}', "");
Expect(1, 4519, '\P{^Is_GCB:	 V}', "");
Expect(0, 4447, '\p{Is_GCB:	 V}', "");
Expect(1, 4447, '\p{^Is_GCB:	 V}', "");
Expect(1, 4447, '\P{Is_GCB:	 V}', "");
Expect(0, 4447, '\P{^Is_GCB:	 V}', "");
Error('\p{Grapheme_Cluster_Break=:=	_lf}');
Error('\P{Grapheme_Cluster_Break=:=	_lf}');
Expect(1, 10, '\p{Grapheme_Cluster_Break:	lf}', "");
Expect(0, 10, '\p{^Grapheme_Cluster_Break:	lf}', "");
Expect(0, 10, '\P{Grapheme_Cluster_Break:	lf}', "");
Expect(1, 10, '\P{^Grapheme_Cluster_Break:	lf}', "");
Expect(0, 9, '\p{Grapheme_Cluster_Break:	lf}', "");
Expect(1, 9, '\p{^Grapheme_Cluster_Break:	lf}', "");
Expect(1, 9, '\P{Grapheme_Cluster_Break:	lf}', "");
Expect(0, 9, '\P{^Grapheme_Cluster_Break:	lf}', "");
Expect(1, 10, '\p{Grapheme_Cluster_Break=	 LF}', "");
Expect(0, 10, '\p{^Grapheme_Cluster_Break=	 LF}', "");
Expect(0, 10, '\P{Grapheme_Cluster_Break=	 LF}', "");
Expect(1, 10, '\P{^Grapheme_Cluster_Break=	 LF}', "");
Expect(0, 9, '\p{Grapheme_Cluster_Break=	 LF}', "");
Expect(1, 9, '\p{^Grapheme_Cluster_Break=	 LF}', "");
Expect(1, 9, '\P{Grapheme_Cluster_Break=	 LF}', "");
Expect(0, 9, '\P{^Grapheme_Cluster_Break=	 LF}', "");
Error('\p{GCB=:= 	LF}');
Error('\P{GCB=:= 	LF}');
Expect(1, 10, '\p{GCB=lf}', "");
Expect(0, 10, '\p{^GCB=lf}', "");
Expect(0, 10, '\P{GCB=lf}', "");
Expect(1, 10, '\P{^GCB=lf}', "");
Expect(0, 9, '\p{GCB=lf}', "");
Expect(1, 9, '\p{^GCB=lf}', "");
Expect(1, 9, '\P{GCB=lf}', "");
Expect(0, 9, '\P{^GCB=lf}', "");
Expect(1, 10, '\p{GCB=- LF}', "");
Expect(0, 10, '\p{^GCB=- LF}', "");
Expect(0, 10, '\P{GCB=- LF}', "");
Expect(1, 10, '\P{^GCB=- LF}', "");
Expect(0, 9, '\p{GCB=- LF}', "");
Expect(1, 9, '\p{^GCB=- LF}', "");
Expect(1, 9, '\P{GCB=- LF}', "");
Expect(0, 9, '\P{^GCB=- LF}', "");
Error('\p{Is_Grapheme_Cluster_Break=	lf/a/}');
Error('\P{Is_Grapheme_Cluster_Break=	lf/a/}');
Expect(1, 10, '\p{Is_Grapheme_Cluster_Break=lf}', "");
Expect(0, 10, '\p{^Is_Grapheme_Cluster_Break=lf}', "");
Expect(0, 10, '\P{Is_Grapheme_Cluster_Break=lf}', "");
Expect(1, 10, '\P{^Is_Grapheme_Cluster_Break=lf}', "");
Expect(0, 9, '\p{Is_Grapheme_Cluster_Break=lf}', "");
Expect(1, 9, '\p{^Is_Grapheme_Cluster_Break=lf}', "");
Expect(1, 9, '\P{Is_Grapheme_Cluster_Break=lf}', "");
Expect(0, 9, '\P{^Is_Grapheme_Cluster_Break=lf}', "");
Expect(1, 10, '\p{Is_Grapheme_Cluster_Break=__LF}', "");
Expect(0, 10, '\p{^Is_Grapheme_Cluster_Break=__LF}', "");
Expect(0, 10, '\P{Is_Grapheme_Cluster_Break=__LF}', "");
Expect(1, 10, '\P{^Is_Grapheme_Cluster_Break=__LF}', "");
Expect(0, 9, '\p{Is_Grapheme_Cluster_Break=__LF}', "");
Expect(1, 9, '\p{^Is_Grapheme_Cluster_Break=__LF}', "");
Expect(1, 9, '\P{Is_Grapheme_Cluster_Break=__LF}', "");
Expect(0, 9, '\P{^Is_Grapheme_Cluster_Break=__LF}', "");
Error('\p{Is_GCB=  LF:=}');
Error('\P{Is_GCB=  LF:=}');
Expect(1, 10, '\p{Is_GCB=lf}', "");
Expect(0, 10, '\p{^Is_GCB=lf}', "");
Expect(0, 10, '\P{Is_GCB=lf}', "");
Expect(1, 10, '\P{^Is_GCB=lf}', "");
Expect(0, 9, '\p{Is_GCB=lf}', "");
Expect(1, 9, '\p{^Is_GCB=lf}', "");
Expect(1, 9, '\P{Is_GCB=lf}', "");
Expect(0, 9, '\P{^Is_GCB=lf}', "");
Expect(1, 10, '\p{Is_GCB= -LF}', "");
Expect(0, 10, '\p{^Is_GCB= -LF}', "");
Expect(0, 10, '\P{Is_GCB= -LF}', "");
Expect(1, 10, '\P{^Is_GCB= -LF}', "");
Expect(0, 9, '\p{Is_GCB= -LF}', "");
Expect(1, 9, '\p{^Is_GCB= -LF}', "");
Expect(1, 9, '\P{Is_GCB= -LF}', "");
Expect(0, 9, '\P{^Is_GCB= -LF}', "");
Error('\p{Grapheme_Cluster_Break:	  l:=}');
Error('\P{Grapheme_Cluster_Break:	  l:=}');
Expect(1, 4447, '\p{Grapheme_Cluster_Break=l}', "");
Expect(0, 4447, '\p{^Grapheme_Cluster_Break=l}', "");
Expect(0, 4447, '\P{Grapheme_Cluster_Break=l}', "");
Expect(1, 4447, '\P{^Grapheme_Cluster_Break=l}', "");
Expect(0, 4351, '\p{Grapheme_Cluster_Break=l}', "");
Expect(1, 4351, '\p{^Grapheme_Cluster_Break=l}', "");
Expect(1, 4351, '\P{Grapheme_Cluster_Break=l}', "");
Expect(0, 4351, '\P{^Grapheme_Cluster_Break=l}', "");
Expect(1, 4447, '\p{Grapheme_Cluster_Break=L}', "");
Expect(0, 4447, '\p{^Grapheme_Cluster_Break=L}', "");
Expect(0, 4447, '\P{Grapheme_Cluster_Break=L}', "");
Expect(1, 4447, '\P{^Grapheme_Cluster_Break=L}', "");
Expect(0, 4351, '\p{Grapheme_Cluster_Break=L}', "");
Expect(1, 4351, '\p{^Grapheme_Cluster_Break=L}', "");
Expect(1, 4351, '\P{Grapheme_Cluster_Break=L}', "");
Expect(0, 4351, '\P{^Grapheme_Cluster_Break=L}', "");
Error('\p{GCB=	_L:=}');
Error('\P{GCB=	_L:=}');
Expect(1, 4447, '\p{GCB=l}', "");
Expect(0, 4447, '\p{^GCB=l}', "");
Expect(0, 4447, '\P{GCB=l}', "");
Expect(1, 4447, '\P{^GCB=l}', "");
Expect(0, 4351, '\p{GCB=l}', "");
Expect(1, 4351, '\p{^GCB=l}', "");
Expect(1, 4351, '\P{GCB=l}', "");
Expect(0, 4351, '\P{^GCB=l}', "");
Expect(1, 4447, '\p{GCB=-_L}', "");
Expect(0, 4447, '\p{^GCB=-_L}', "");
Expect(0, 4447, '\P{GCB=-_L}', "");
Expect(1, 4447, '\P{^GCB=-_L}', "");
Expect(0, 4351, '\p{GCB=-_L}', "");
Expect(1, 4351, '\p{^GCB=-_L}', "");
Expect(1, 4351, '\P{GCB=-_L}', "");
Expect(0, 4351, '\P{^GCB=-_L}', "");
Error('\p{Is_Grapheme_Cluster_Break:  L:=}');
Error('\P{Is_Grapheme_Cluster_Break:  L:=}');
Expect(1, 4447, '\p{Is_Grapheme_Cluster_Break=l}', "");
Expect(0, 4447, '\p{^Is_Grapheme_Cluster_Break=l}', "");
Expect(0, 4447, '\P{Is_Grapheme_Cluster_Break=l}', "");
Expect(1, 4447, '\P{^Is_Grapheme_Cluster_Break=l}', "");
Expect(0, 4351, '\p{Is_Grapheme_Cluster_Break=l}', "");
Expect(1, 4351, '\p{^Is_Grapheme_Cluster_Break=l}', "");
Expect(1, 4351, '\P{Is_Grapheme_Cluster_Break=l}', "");
Expect(0, 4351, '\P{^Is_Grapheme_Cluster_Break=l}', "");
Expect(1, 4447, '\p{Is_Grapheme_Cluster_Break=__L}', "");
Expect(0, 4447, '\p{^Is_Grapheme_Cluster_Break=__L}', "");
Expect(0, 4447, '\P{Is_Grapheme_Cluster_Break=__L}', "");
Expect(1, 4447, '\P{^Is_Grapheme_Cluster_Break=__L}', "");
Expect(0, 4351, '\p{Is_Grapheme_Cluster_Break=__L}', "");
Expect(1, 4351, '\p{^Is_Grapheme_Cluster_Break=__L}', "");
Expect(1, 4351, '\P{Is_Grapheme_Cluster_Break=__L}', "");
Expect(0, 4351, '\P{^Is_Grapheme_Cluster_Break=__L}', "");
Error('\p{Is_GCB= :=l}');
Error('\P{Is_GCB= :=l}');
Expect(1, 4447, '\p{Is_GCB:   l}', "");
Expect(0, 4447, '\p{^Is_GCB:   l}', "");
Expect(0, 4447, '\P{Is_GCB:   l}', "");
Expect(1, 4447, '\P{^Is_GCB:   l}', "");
Expect(0, 4351, '\p{Is_GCB:   l}', "");
Expect(1, 4351, '\p{^Is_GCB:   l}', "");
Expect(1, 4351, '\P{Is_GCB:   l}', "");
Expect(0, 4351, '\P{^Is_GCB:   l}', "");
Expect(1, 4447, '\p{Is_GCB=	_L}', "");
Expect(0, 4447, '\p{^Is_GCB=	_L}', "");
Expect(0, 4447, '\P{Is_GCB=	_L}', "");
Expect(1, 4447, '\P{^Is_GCB=	_L}', "");
Expect(0, 4351, '\p{Is_GCB=	_L}', "");
Expect(1, 4351, '\p{^Is_GCB=	_L}', "");
Expect(1, 4351, '\P{Is_GCB=	_L}', "");
Expect(0, 4351, '\P{^Is_GCB=	_L}', "");
Error('\p{Logical_Order_Exception=	-Yes/a/}');
Error('\P{Logical_Order_Exception=	-Yes/a/}');
Expect(1, 3652, '\p{Logical_Order_Exception=yes}', "");
Expect(0, 3652, '\p{^Logical_Order_Exception=yes}', "");
Expect(0, 3652, '\P{Logical_Order_Exception=yes}', "");
Expect(1, 3652, '\P{^Logical_Order_Exception=yes}', "");
Expect(0, 3647, '\p{Logical_Order_Exception=yes}', "");
Expect(1, 3647, '\p{^Logical_Order_Exception=yes}', "");
Expect(1, 3647, '\P{Logical_Order_Exception=yes}', "");
Expect(0, 3647, '\P{^Logical_Order_Exception=yes}', "");
Expect(1, 3652, '\p{Logical_Order_Exception=	_Yes}', "");
Expect(0, 3652, '\p{^Logical_Order_Exception=	_Yes}', "");
Expect(0, 3652, '\P{Logical_Order_Exception=	_Yes}', "");
Expect(1, 3652, '\P{^Logical_Order_Exception=	_Yes}', "");
Expect(0, 3647, '\p{Logical_Order_Exception=	_Yes}', "");
Expect(1, 3647, '\p{^Logical_Order_Exception=	_Yes}', "");
Expect(1, 3647, '\P{Logical_Order_Exception=	_Yes}', "");
Expect(0, 3647, '\P{^Logical_Order_Exception=	_Yes}', "");
Error('\p{LOE::=	y}');
Error('\P{LOE::=	y}');
Expect(1, 3652, '\p{LOE: y}', "");
Expect(0, 3652, '\p{^LOE: y}', "");
Expect(0, 3652, '\P{LOE: y}', "");
Expect(1, 3652, '\P{^LOE: y}', "");
Expect(0, 3647, '\p{LOE: y}', "");
Expect(1, 3647, '\p{^LOE: y}', "");
Expect(1, 3647, '\P{LOE: y}', "");
Expect(0, 3647, '\P{^LOE: y}', "");
Expect(1, 3652, '\p{LOE= Y}', "");
Expect(0, 3652, '\p{^LOE= Y}', "");
Expect(0, 3652, '\P{LOE= Y}', "");
Expect(1, 3652, '\P{^LOE= Y}', "");
Expect(0, 3647, '\p{LOE= Y}', "");
Expect(1, 3647, '\p{^LOE= Y}', "");
Expect(1, 3647, '\P{LOE= Y}', "");
Expect(0, 3647, '\P{^LOE= Y}', "");
Error('\p{Is_Logical_Order_Exception=  t/a/}');
Error('\P{Is_Logical_Order_Exception=  t/a/}');
Expect(1, 3652, '\p{Is_Logical_Order_Exception=t}', "");
Expect(0, 3652, '\p{^Is_Logical_Order_Exception=t}', "");
Expect(0, 3652, '\P{Is_Logical_Order_Exception=t}', "");
Expect(1, 3652, '\P{^Is_Logical_Order_Exception=t}', "");
Expect(0, 3647, '\p{Is_Logical_Order_Exception=t}', "");
Expect(1, 3647, '\p{^Is_Logical_Order_Exception=t}', "");
Expect(1, 3647, '\P{Is_Logical_Order_Exception=t}', "");
Expect(0, 3647, '\P{^Is_Logical_Order_Exception=t}', "");
Expect(1, 3652, '\p{Is_Logical_Order_Exception:	-T}', "");
Expect(0, 3652, '\p{^Is_Logical_Order_Exception:	-T}', "");
Expect(0, 3652, '\P{Is_Logical_Order_Exception:	-T}', "");
Expect(1, 3652, '\P{^Is_Logical_Order_Exception:	-T}', "");
Expect(0, 3647, '\p{Is_Logical_Order_Exception:	-T}', "");
Expect(1, 3647, '\p{^Is_Logical_Order_Exception:	-T}', "");
Expect(1, 3647, '\P{Is_Logical_Order_Exception:	-T}', "");
Expect(0, 3647, '\P{^Is_Logical_Order_Exception:	-T}', "");
Error('\p{Is_LOE=	True:=}');
Error('\P{Is_LOE=	True:=}');
Expect(1, 3652, '\p{Is_LOE: true}', "");
Expect(0, 3652, '\p{^Is_LOE: true}', "");
Expect(0, 3652, '\P{Is_LOE: true}', "");
Expect(1, 3652, '\P{^Is_LOE: true}', "");
Expect(0, 3647, '\p{Is_LOE: true}', "");
Expect(1, 3647, '\p{^Is_LOE: true}', "");
Expect(1, 3647, '\P{Is_LOE: true}', "");
Expect(0, 3647, '\P{^Is_LOE: true}', "");
Expect(1, 3652, '\p{Is_LOE=_ true}', "");
Expect(0, 3652, '\p{^Is_LOE=_ true}', "");
Expect(0, 3652, '\P{Is_LOE=_ true}', "");
Expect(1, 3652, '\P{^Is_LOE=_ true}', "");
Expect(0, 3647, '\p{Is_LOE=_ true}', "");
Expect(1, 3647, '\p{^Is_LOE=_ true}', "");
Expect(1, 3647, '\P{Is_LOE=_ true}', "");
Expect(0, 3647, '\P{^Is_LOE=_ true}', "");
Error('\p{Logical_Order_Exception=:=- No}');
Error('\P{Logical_Order_Exception=:=- No}');
Expect(1, 3647, '\p{Logical_Order_Exception=no}', "");
Expect(0, 3647, '\p{^Logical_Order_Exception=no}', "");
Expect(0, 3647, '\P{Logical_Order_Exception=no}', "");
Expect(1, 3647, '\P{^Logical_Order_Exception=no}', "");
Expect(0, 3652, '\p{Logical_Order_Exception=no}', "");
Expect(1, 3652, '\p{^Logical_Order_Exception=no}', "");
Expect(1, 3652, '\P{Logical_Order_Exception=no}', "");
Expect(0, 3652, '\P{^Logical_Order_Exception=no}', "");
Expect(1, 3647, '\p{Logical_Order_Exception=-No}', "");
Expect(0, 3647, '\p{^Logical_Order_Exception=-No}', "");
Expect(0, 3647, '\P{Logical_Order_Exception=-No}', "");
Expect(1, 3647, '\P{^Logical_Order_Exception=-No}', "");
Expect(0, 3652, '\p{Logical_Order_Exception=-No}', "");
Expect(1, 3652, '\p{^Logical_Order_Exception=-No}', "");
Expect(1, 3652, '\P{Logical_Order_Exception=-No}', "");
Expect(0, 3652, '\P{^Logical_Order_Exception=-No}', "");
Error('\p{LOE=_	N:=}');
Error('\P{LOE=_	N:=}');
Expect(1, 3647, '\p{LOE=n}', "");
Expect(0, 3647, '\p{^LOE=n}', "");
Expect(0, 3647, '\P{LOE=n}', "");
Expect(1, 3647, '\P{^LOE=n}', "");
Expect(0, 3652, '\p{LOE=n}', "");
Expect(1, 3652, '\p{^LOE=n}', "");
Expect(1, 3652, '\P{LOE=n}', "");
Expect(0, 3652, '\P{^LOE=n}', "");
Expect(1, 3647, '\p{LOE=	_n}', "");
Expect(0, 3647, '\p{^LOE=	_n}', "");
Expect(0, 3647, '\P{LOE=	_n}', "");
Expect(1, 3647, '\P{^LOE=	_n}', "");
Expect(0, 3652, '\p{LOE=	_n}', "");
Expect(1, 3652, '\p{^LOE=	_n}', "");
Expect(1, 3652, '\P{LOE=	_n}', "");
Expect(0, 3652, '\P{^LOE=	_n}', "");
Error('\p{Is_Logical_Order_Exception=__f/a/}');
Error('\P{Is_Logical_Order_Exception=__f/a/}');
Expect(1, 3647, '\p{Is_Logical_Order_Exception=f}', "");
Expect(0, 3647, '\p{^Is_Logical_Order_Exception=f}', "");
Expect(0, 3647, '\P{Is_Logical_Order_Exception=f}', "");
Expect(1, 3647, '\P{^Is_Logical_Order_Exception=f}', "");
Expect(0, 3652, '\p{Is_Logical_Order_Exception=f}', "");
Expect(1, 3652, '\p{^Is_Logical_Order_Exception=f}', "");
Expect(1, 3652, '\P{Is_Logical_Order_Exception=f}', "");
Expect(0, 3652, '\P{^Is_Logical_Order_Exception=f}', "");
Expect(1, 3647, '\p{Is_Logical_Order_Exception=	 f}', "");
Expect(0, 3647, '\p{^Is_Logical_Order_Exception=	 f}', "");
Expect(0, 3647, '\P{Is_Logical_Order_Exception=	 f}', "");
Expect(1, 3647, '\P{^Is_Logical_Order_Exception=	 f}', "");
Expect(0, 3652, '\p{Is_Logical_Order_Exception=	 f}', "");
Expect(1, 3652, '\p{^Is_Logical_Order_Exception=	 f}', "");
Expect(1, 3652, '\P{Is_Logical_Order_Exception=	 f}', "");
Expect(0, 3652, '\P{^Is_Logical_Order_Exception=	 f}', "");
Error('\p{Is_LOE= False/a/}');
Error('\P{Is_LOE= False/a/}');
Expect(1, 3647, '\p{Is_LOE=false}', "");
Expect(0, 3647, '\p{^Is_LOE=false}', "");
Expect(0, 3647, '\P{Is_LOE=false}', "");
Expect(1, 3647, '\P{^Is_LOE=false}', "");
Expect(0, 3652, '\p{Is_LOE=false}', "");
Expect(1, 3652, '\p{^Is_LOE=false}', "");
Expect(1, 3652, '\P{Is_LOE=false}', "");
Expect(0, 3652, '\P{^Is_LOE=false}', "");
Expect(1, 3647, '\p{Is_LOE=_ FALSE}', "");
Expect(0, 3647, '\p{^Is_LOE=_ FALSE}', "");
Expect(0, 3647, '\P{Is_LOE=_ FALSE}', "");
Expect(1, 3647, '\P{^Is_LOE=_ FALSE}', "");
Expect(0, 3652, '\p{Is_LOE=_ FALSE}', "");
Expect(1, 3652, '\p{^Is_LOE=_ FALSE}', "");
Expect(1, 3652, '\P{Is_LOE=_ FALSE}', "");
Expect(0, 3652, '\P{^Is_LOE=_ FALSE}', "");
Error('\p{Bidi_Mirrored=--YES/a/}');
Error('\P{Bidi_Mirrored=--YES/a/}');
Expect(1, 41, '\p{Bidi_Mirrored: yes}', "");
Expect(0, 41, '\p{^Bidi_Mirrored: yes}', "");
Expect(0, 41, '\P{Bidi_Mirrored: yes}', "");
Expect(1, 41, '\P{^Bidi_Mirrored: yes}', "");
Expect(0, 39, '\p{Bidi_Mirrored: yes}', "");
Expect(1, 39, '\p{^Bidi_Mirrored: yes}', "");
Expect(1, 39, '\P{Bidi_Mirrored: yes}', "");
Expect(0, 39, '\P{^Bidi_Mirrored: yes}', "");
Expect(1, 41, '\p{Bidi_Mirrored:   - Yes}', "");
Expect(0, 41, '\p{^Bidi_Mirrored:   - Yes}', "");
Expect(0, 41, '\P{Bidi_Mirrored:   - Yes}', "");
Expect(1, 41, '\P{^Bidi_Mirrored:   - Yes}', "");
Expect(0, 39, '\p{Bidi_Mirrored:   - Yes}', "");
Expect(1, 39, '\p{^Bidi_Mirrored:   - Yes}', "");
Expect(1, 39, '\P{Bidi_Mirrored:   - Yes}', "");
Expect(0, 39, '\P{^Bidi_Mirrored:   - Yes}', "");
Error('\p{Bidi_M=-:=Y}');
Error('\P{Bidi_M=-:=Y}');
Expect(1, 41, '\p{Bidi_M=y}', "");
Expect(0, 41, '\p{^Bidi_M=y}', "");
Expect(0, 41, '\P{Bidi_M=y}', "");
Expect(1, 41, '\P{^Bidi_M=y}', "");
Expect(0, 39, '\p{Bidi_M=y}', "");
Expect(1, 39, '\p{^Bidi_M=y}', "");
Expect(1, 39, '\P{Bidi_M=y}', "");
Expect(0, 39, '\P{^Bidi_M=y}', "");
Expect(1, 41, '\p{Bidi_M=-_y}', "");
Expect(0, 41, '\p{^Bidi_M=-_y}', "");
Expect(0, 41, '\P{Bidi_M=-_y}', "");
Expect(1, 41, '\P{^Bidi_M=-_y}', "");
Expect(0, 39, '\p{Bidi_M=-_y}', "");
Expect(1, 39, '\p{^Bidi_M=-_y}', "");
Expect(1, 39, '\P{Bidi_M=-_y}', "");
Expect(0, 39, '\P{^Bidi_M=-_y}', "");
Error('\p{Is_Bidi_Mirrored=:=_ T}');
Error('\P{Is_Bidi_Mirrored=:=_ T}');
Expect(1, 41, '\p{Is_Bidi_Mirrored=t}', "");
Expect(0, 41, '\p{^Is_Bidi_Mirrored=t}', "");
Expect(0, 41, '\P{Is_Bidi_Mirrored=t}', "");
Expect(1, 41, '\P{^Is_Bidi_Mirrored=t}', "");
Expect(0, 39, '\p{Is_Bidi_Mirrored=t}', "");
Expect(1, 39, '\p{^Is_Bidi_Mirrored=t}', "");
Expect(1, 39, '\P{Is_Bidi_Mirrored=t}', "");
Expect(0, 39, '\P{^Is_Bidi_Mirrored=t}', "");
Expect(1, 41, '\p{Is_Bidi_Mirrored= 	T}', "");
Expect(0, 41, '\p{^Is_Bidi_Mirrored= 	T}', "");
Expect(0, 41, '\P{Is_Bidi_Mirrored= 	T}', "");
Expect(1, 41, '\P{^Is_Bidi_Mirrored= 	T}', "");
Expect(0, 39, '\p{Is_Bidi_Mirrored= 	T}', "");
Expect(1, 39, '\p{^Is_Bidi_Mirrored= 	T}', "");
Expect(1, 39, '\P{Is_Bidi_Mirrored= 	T}', "");
Expect(0, 39, '\P{^Is_Bidi_Mirrored= 	T}', "");
Error('\p{Is_Bidi_M:- TRUE/a/}');
Error('\P{Is_Bidi_M:- TRUE/a/}');
Expect(1, 41, '\p{Is_Bidi_M=true}', "");
Expect(0, 41, '\p{^Is_Bidi_M=true}', "");
Expect(0, 41, '\P{Is_Bidi_M=true}', "");
Expect(1, 41, '\P{^Is_Bidi_M=true}', "");
Expect(0, 39, '\p{Is_Bidi_M=true}', "");
Expect(1, 39, '\p{^Is_Bidi_M=true}', "");
Expect(1, 39, '\P{Is_Bidi_M=true}', "");
Expect(0, 39, '\P{^Is_Bidi_M=true}', "");
Expect(1, 41, '\p{Is_Bidi_M=_True}', "");
Expect(0, 41, '\p{^Is_Bidi_M=_True}', "");
Expect(0, 41, '\P{Is_Bidi_M=_True}', "");
Expect(1, 41, '\P{^Is_Bidi_M=_True}', "");
Expect(0, 39, '\p{Is_Bidi_M=_True}', "");
Expect(1, 39, '\p{^Is_Bidi_M=_True}', "");
Expect(1, 39, '\P{Is_Bidi_M=_True}', "");
Expect(0, 39, '\P{^Is_Bidi_M=_True}', "");
Error('\p{Bidi_Mirrored=:=-_no}');
Error('\P{Bidi_Mirrored=:=-_no}');
Expect(1, 39, '\p{Bidi_Mirrored=no}', "");
Expect(0, 39, '\p{^Bidi_Mirrored=no}', "");
Expect(0, 39, '\P{Bidi_Mirrored=no}', "");
Expect(1, 39, '\P{^Bidi_Mirrored=no}', "");
Expect(0, 41, '\p{Bidi_Mirrored=no}', "");
Expect(1, 41, '\p{^Bidi_Mirrored=no}', "");
Expect(1, 41, '\P{Bidi_Mirrored=no}', "");
Expect(0, 41, '\P{^Bidi_Mirrored=no}', "");
Expect(1, 39, '\p{Bidi_Mirrored=-_No}', "");
Expect(0, 39, '\p{^Bidi_Mirrored=-_No}', "");
Expect(0, 39, '\P{Bidi_Mirrored=-_No}', "");
Expect(1, 39, '\P{^Bidi_Mirrored=-_No}', "");
Expect(0, 41, '\p{Bidi_Mirrored=-_No}', "");
Expect(1, 41, '\p{^Bidi_Mirrored=-_No}', "");
Expect(1, 41, '\P{Bidi_Mirrored=-_No}', "");
Expect(0, 41, '\P{^Bidi_Mirrored=-_No}', "");
Error('\p{Bidi_M=/a/__N}');
Error('\P{Bidi_M=/a/__N}');
Expect(1, 39, '\p{Bidi_M=n}', "");
Expect(0, 39, '\p{^Bidi_M=n}', "");
Expect(0, 39, '\P{Bidi_M=n}', "");
Expect(1, 39, '\P{^Bidi_M=n}', "");
Expect(0, 41, '\p{Bidi_M=n}', "");
Expect(1, 41, '\p{^Bidi_M=n}', "");
Expect(1, 41, '\P{Bidi_M=n}', "");
Expect(0, 41, '\P{^Bidi_M=n}', "");
Expect(1, 39, '\p{Bidi_M=_N}', "");
Expect(0, 39, '\p{^Bidi_M=_N}', "");
Expect(0, 39, '\P{Bidi_M=_N}', "");
Expect(1, 39, '\P{^Bidi_M=_N}', "");
Expect(0, 41, '\p{Bidi_M=_N}', "");
Expect(1, 41, '\p{^Bidi_M=_N}', "");
Expect(1, 41, '\P{Bidi_M=_N}', "");
Expect(0, 41, '\P{^Bidi_M=_N}', "");
Error('\p{Is_Bidi_Mirrored=/a/ f}');
Error('\P{Is_Bidi_Mirrored=/a/ f}');
Expect(1, 39, '\p{Is_Bidi_Mirrored:	f}', "");
Expect(0, 39, '\p{^Is_Bidi_Mirrored:	f}', "");
Expect(0, 39, '\P{Is_Bidi_Mirrored:	f}', "");
Expect(1, 39, '\P{^Is_Bidi_Mirrored:	f}', "");
Expect(0, 41, '\p{Is_Bidi_Mirrored:	f}', "");
Expect(1, 41, '\p{^Is_Bidi_Mirrored:	f}', "");
Expect(1, 41, '\P{Is_Bidi_Mirrored:	f}', "");
Expect(0, 41, '\P{^Is_Bidi_Mirrored:	f}', "");
Expect(1, 39, '\p{Is_Bidi_Mirrored=-f}', "");
Expect(0, 39, '\p{^Is_Bidi_Mirrored=-f}', "");
Expect(0, 39, '\P{Is_Bidi_Mirrored=-f}', "");
Expect(1, 39, '\P{^Is_Bidi_Mirrored=-f}', "");
Expect(0, 41, '\p{Is_Bidi_Mirrored=-f}', "");
Expect(1, 41, '\p{^Is_Bidi_Mirrored=-f}', "");
Expect(1, 41, '\P{Is_Bidi_Mirrored=-f}', "");
Expect(0, 41, '\P{^Is_Bidi_Mirrored=-f}', "");
Error('\p{Is_Bidi_M=_false:=}');
Error('\P{Is_Bidi_M=_false:=}');
Expect(1, 39, '\p{Is_Bidi_M=false}', "");
Expect(0, 39, '\p{^Is_Bidi_M=false}', "");
Expect(0, 39, '\P{Is_Bidi_M=false}', "");
Expect(1, 39, '\P{^Is_Bidi_M=false}', "");
Expect(0, 41, '\p{Is_Bidi_M=false}', "");
Expect(1, 41, '\p{^Is_Bidi_M=false}', "");
Expect(1, 41, '\P{Is_Bidi_M=false}', "");
Expect(0, 41, '\P{^Is_Bidi_M=false}', "");
Expect(1, 39, '\p{Is_Bidi_M= false}', "");
Expect(0, 39, '\p{^Is_Bidi_M= false}', "");
Expect(0, 39, '\P{Is_Bidi_M= false}', "");
Expect(1, 39, '\P{^Is_Bidi_M= false}', "");
Expect(0, 41, '\p{Is_Bidi_M= false}', "");
Expect(1, 41, '\p{^Is_Bidi_M= false}', "");
Expect(1, 41, '\P{Is_Bidi_M= false}', "");
Expect(0, 41, '\P{^Is_Bidi_M= false}', "");
Error('\p{Lowercase:/a/Yes}');
Error('\P{Lowercase:/a/Yes}');
Expect(1, 122, '\p{Lowercase=yes}', "");
Expect(0, 122, '\p{^Lowercase=yes}', "");
Expect(0, 122, '\P{Lowercase=yes}', "");
Expect(1, 122, '\P{^Lowercase=yes}', "");
Expect(0, 96, '\p{Lowercase=yes}', "");
Expect(1, 96, '\p{^Lowercase=yes}', "");
Expect(1, 96, '\P{Lowercase=yes}', "");
Expect(0, 96, '\P{^Lowercase=yes}', "");
Expect(1, 122, '\p{Lowercase=		YES}', "");
Expect(0, 122, '\p{^Lowercase=		YES}', "");
Expect(0, 122, '\P{Lowercase=		YES}', "");
Expect(1, 122, '\P{^Lowercase=		YES}', "");
Expect(0, 96, '\p{Lowercase=		YES}', "");
Expect(1, 96, '\p{^Lowercase=		YES}', "");
Expect(1, 96, '\P{Lowercase=		YES}', "");
Expect(0, 96, '\P{^Lowercase=		YES}', "");
Error('\p{Lower=:=_-Y}');
Error('\P{Lower=:=_-Y}');
Expect(1, 122, '\p{Lower=y}', "");
Expect(0, 122, '\p{^Lower=y}', "");
Expect(0, 122, '\P{Lower=y}', "");
Expect(1, 122, '\P{^Lower=y}', "");
Expect(0, 96, '\p{Lower=y}', "");
Expect(1, 96, '\p{^Lower=y}', "");
Expect(1, 96, '\P{Lower=y}', "");
Expect(0, 96, '\P{^Lower=y}', "");
Expect(1, 122, '\p{Lower:	 -Y}', "");
Expect(0, 122, '\p{^Lower:	 -Y}', "");
Expect(0, 122, '\P{Lower:	 -Y}', "");
Expect(1, 122, '\P{^Lower:	 -Y}', "");
Expect(0, 96, '\p{Lower:	 -Y}', "");
Expect(1, 96, '\p{^Lower:	 -Y}', "");
Expect(1, 96, '\P{Lower:	 -Y}', "");
Expect(0, 96, '\P{^Lower:	 -Y}', "");
Error('\p{Is_Lowercase= 	T/a/}');
Error('\P{Is_Lowercase= 	T/a/}');
Expect(1, 122, '\p{Is_Lowercase=t}', "");
Expect(0, 122, '\p{^Is_Lowercase=t}', "");
Expect(0, 122, '\P{Is_Lowercase=t}', "");
Expect(1, 122, '\P{^Is_Lowercase=t}', "");
Expect(0, 96, '\p{Is_Lowercase=t}', "");
Expect(1, 96, '\p{^Is_Lowercase=t}', "");
Expect(1, 96, '\P{Is_Lowercase=t}', "");
Expect(0, 96, '\P{^Is_Lowercase=t}', "");
Expect(1, 122, '\p{Is_Lowercase=--t}', "");
Expect(0, 122, '\p{^Is_Lowercase=--t}', "");
Expect(0, 122, '\P{Is_Lowercase=--t}', "");
Expect(1, 122, '\P{^Is_Lowercase=--t}', "");
Expect(0, 96, '\p{Is_Lowercase=--t}', "");
Expect(1, 96, '\p{^Is_Lowercase=--t}', "");
Expect(1, 96, '\P{Is_Lowercase=--t}', "");
Expect(0, 96, '\P{^Is_Lowercase=--t}', "");
Error('\p{Is_Lower=TRUE:=}');
Error('\P{Is_Lower=TRUE:=}');
Expect(1, 122, '\p{Is_Lower=true}', "");
Expect(0, 122, '\p{^Is_Lower=true}', "");
Expect(0, 122, '\P{Is_Lower=true}', "");
Expect(1, 122, '\P{^Is_Lower=true}', "");
Expect(0, 96, '\p{Is_Lower=true}', "");
Expect(1, 96, '\p{^Is_Lower=true}', "");
Expect(1, 96, '\P{Is_Lower=true}', "");
Expect(0, 96, '\P{^Is_Lower=true}', "");
Expect(1, 122, '\p{Is_Lower=-TRUE}', "");
Expect(0, 122, '\p{^Is_Lower=-TRUE}', "");
Expect(0, 122, '\P{Is_Lower=-TRUE}', "");
Expect(1, 122, '\P{^Is_Lower=-TRUE}', "");
Expect(0, 96, '\p{Is_Lower=-TRUE}', "");
Expect(1, 96, '\p{^Is_Lower=-TRUE}', "");
Expect(1, 96, '\P{Is_Lower=-TRUE}', "");
Expect(0, 96, '\P{^Is_Lower=-TRUE}', "");
Error('\p{Lowercase=_	NO:=}');
Error('\P{Lowercase=_	NO:=}');
Expect(1, 96, '\p{Lowercase=no}', "");
Expect(0, 96, '\p{^Lowercase=no}', "");
Expect(0, 96, '\P{Lowercase=no}', "");
Expect(1, 96, '\P{^Lowercase=no}', "");
Expect(0, 122, '\p{Lowercase=no}', "");
Expect(1, 122, '\p{^Lowercase=no}', "");
Expect(1, 122, '\P{Lowercase=no}', "");
Expect(0, 122, '\P{^Lowercase=no}', "");
Expect(1, 96, '\p{Lowercase=-NO}', "");
Expect(0, 96, '\p{^Lowercase=-NO}', "");
Expect(0, 96, '\P{Lowercase=-NO}', "");
Expect(1, 96, '\P{^Lowercase=-NO}', "");
Expect(0, 122, '\p{Lowercase=-NO}', "");
Expect(1, 122, '\p{^Lowercase=-NO}', "");
Expect(1, 122, '\P{Lowercase=-NO}', "");
Expect(0, 122, '\P{^Lowercase=-NO}', "");
Error('\p{Lower=_	N:=}');
Error('\P{Lower=_	N:=}');
Expect(1, 96, '\p{Lower=n}', "");
Expect(0, 96, '\p{^Lower=n}', "");
Expect(0, 96, '\P{Lower=n}', "");
Expect(1, 96, '\P{^Lower=n}', "");
Expect(0, 122, '\p{Lower=n}', "");
Expect(1, 122, '\p{^Lower=n}', "");
Expect(1, 122, '\P{Lower=n}', "");
Expect(0, 122, '\P{^Lower=n}', "");
Expect(1, 96, '\p{Lower= N}', "");
Expect(0, 96, '\p{^Lower= N}', "");
Expect(0, 96, '\P{Lower= N}', "");
Expect(1, 96, '\P{^Lower= N}', "");
Expect(0, 122, '\p{Lower= N}', "");
Expect(1, 122, '\p{^Lower= N}', "");
Expect(1, 122, '\P{Lower= N}', "");
Expect(0, 122, '\P{^Lower= N}', "");
Error('\p{Is_Lowercase=-/a/F}');
Error('\P{Is_Lowercase=-/a/F}');
Expect(1, 96, '\p{Is_Lowercase:	f}', "");
Expect(0, 96, '\p{^Is_Lowercase:	f}', "");
Expect(0, 96, '\P{Is_Lowercase:	f}', "");
Expect(1, 96, '\P{^Is_Lowercase:	f}', "");
Expect(0, 122, '\p{Is_Lowercase:	f}', "");
Expect(1, 122, '\p{^Is_Lowercase:	f}', "");
Expect(1, 122, '\P{Is_Lowercase:	f}', "");
Expect(0, 122, '\P{^Is_Lowercase:	f}', "");
Expect(1, 96, '\p{Is_Lowercase=-_F}', "");
Expect(0, 96, '\p{^Is_Lowercase=-_F}', "");
Expect(0, 96, '\P{Is_Lowercase=-_F}', "");
Expect(1, 96, '\P{^Is_Lowercase=-_F}', "");
Expect(0, 122, '\p{Is_Lowercase=-_F}', "");
Expect(1, 122, '\p{^Is_Lowercase=-_F}', "");
Expect(1, 122, '\P{Is_Lowercase=-_F}', "");
Expect(0, 122, '\P{^Is_Lowercase=-_F}', "");
Error('\p{Is_Lower: _:=false}');
Error('\P{Is_Lower: _:=false}');
Expect(1, 96, '\p{Is_Lower=false}', "");
Expect(0, 96, '\p{^Is_Lower=false}', "");
Expect(0, 96, '\P{Is_Lower=false}', "");
Expect(1, 96, '\P{^Is_Lower=false}', "");
Expect(0, 122, '\p{Is_Lower=false}', "");
Expect(1, 122, '\p{^Is_Lower=false}', "");
Expect(1, 122, '\P{Is_Lower=false}', "");
Expect(0, 122, '\P{^Is_Lower=false}', "");
Expect(1, 96, '\p{Is_Lower=_false}', "");
Expect(0, 96, '\p{^Is_Lower=_false}', "");
Expect(0, 96, '\P{Is_Lower=_false}', "");
Expect(1, 96, '\P{^Is_Lower=_false}', "");
Expect(0, 122, '\p{Is_Lower=_false}', "");
Expect(1, 122, '\p{^Is_Lower=_false}', "");
Expect(1, 122, '\P{Is_Lower=_false}', "");
Expect(0, 122, '\P{^Is_Lower=_false}', "");
Error('\p{Uppercase=_-YES/a/}');
Error('\P{Uppercase=_-YES/a/}');
Expect(1, 90, '\p{Uppercase=yes}', "");
Expect(0, 90, '\p{^Uppercase=yes}', "");
Expect(0, 90, '\P{Uppercase=yes}', "");
Expect(1, 90, '\P{^Uppercase=yes}', "");
Expect(0, 64, '\p{Uppercase=yes}', "");
Expect(1, 64, '\p{^Uppercase=yes}', "");
Expect(1, 64, '\P{Uppercase=yes}', "");
Expect(0, 64, '\P{^Uppercase=yes}', "");
Expect(1, 90, '\p{Uppercase= 	YES}', "");
Expect(0, 90, '\p{^Uppercase= 	YES}', "");
Expect(0, 90, '\P{Uppercase= 	YES}', "");
Expect(1, 90, '\P{^Uppercase= 	YES}', "");
Expect(0, 64, '\p{Uppercase= 	YES}', "");
Expect(1, 64, '\p{^Uppercase= 	YES}', "");
Expect(1, 64, '\P{Uppercase= 	YES}', "");
Expect(0, 64, '\P{^Uppercase= 	YES}', "");
Error('\p{Upper=:=_Y}');
Error('\P{Upper=:=_Y}');
Expect(1, 90, '\p{Upper: y}', "");
Expect(0, 90, '\p{^Upper: y}', "");
Expect(0, 90, '\P{Upper: y}', "");
Expect(1, 90, '\P{^Upper: y}', "");
Expect(0, 64, '\p{Upper: y}', "");
Expect(1, 64, '\p{^Upper: y}', "");
Expect(1, 64, '\P{Upper: y}', "");
Expect(0, 64, '\P{^Upper: y}', "");
Expect(1, 90, '\p{Upper=	Y}', "");
Expect(0, 90, '\p{^Upper=	Y}', "");
Expect(0, 90, '\P{Upper=	Y}', "");
Expect(1, 90, '\P{^Upper=	Y}', "");
Expect(0, 64, '\p{Upper=	Y}', "");
Expect(1, 64, '\p{^Upper=	Y}', "");
Expect(1, 64, '\P{Upper=	Y}', "");
Expect(0, 64, '\P{^Upper=	Y}', "");
Error('\p{Is_Uppercase=-t:=}');
Error('\P{Is_Uppercase=-t:=}');
Expect(1, 90, '\p{Is_Uppercase=t}', "");
Expect(0, 90, '\p{^Is_Uppercase=t}', "");
Expect(0, 90, '\P{Is_Uppercase=t}', "");
Expect(1, 90, '\P{^Is_Uppercase=t}', "");
Expect(0, 64, '\p{Is_Uppercase=t}', "");
Expect(1, 64, '\p{^Is_Uppercase=t}', "");
Expect(1, 64, '\P{Is_Uppercase=t}', "");
Expect(0, 64, '\P{^Is_Uppercase=t}', "");
Expect(1, 90, '\p{Is_Uppercase=-T}', "");
Expect(0, 90, '\p{^Is_Uppercase=-T}', "");
Expect(0, 90, '\P{Is_Uppercase=-T}', "");
Expect(1, 90, '\P{^Is_Uppercase=-T}', "");
Expect(0, 64, '\p{Is_Uppercase=-T}', "");
Expect(1, 64, '\p{^Is_Uppercase=-T}', "");
Expect(1, 64, '\P{Is_Uppercase=-T}', "");
Expect(0, 64, '\P{^Is_Uppercase=-T}', "");
Error('\p{Is_Upper=  True:=}');
Error('\P{Is_Upper=  True:=}');
Expect(1, 90, '\p{Is_Upper=true}', "");
Expect(0, 90, '\p{^Is_Upper=true}', "");
Expect(0, 90, '\P{Is_Upper=true}', "");
Expect(1, 90, '\P{^Is_Upper=true}', "");
Expect(0, 64, '\p{Is_Upper=true}', "");
Expect(1, 64, '\p{^Is_Upper=true}', "");
Expect(1, 64, '\P{Is_Upper=true}', "");
Expect(0, 64, '\P{^Is_Upper=true}', "");
Expect(1, 90, '\p{Is_Upper=-TRUE}', "");
Expect(0, 90, '\p{^Is_Upper=-TRUE}', "");
Expect(0, 90, '\P{Is_Upper=-TRUE}', "");
Expect(1, 90, '\P{^Is_Upper=-TRUE}', "");
Expect(0, 64, '\p{Is_Upper=-TRUE}', "");
Expect(1, 64, '\p{^Is_Upper=-TRUE}', "");
Expect(1, 64, '\P{Is_Upper=-TRUE}', "");
Expect(0, 64, '\P{^Is_Upper=-TRUE}', "");
Error('\p{Uppercase=/a/ NO}');
Error('\P{Uppercase=/a/ NO}');
Expect(1, 64, '\p{Uppercase=no}', "");
Expect(0, 64, '\p{^Uppercase=no}', "");
Expect(0, 64, '\P{Uppercase=no}', "");
Expect(1, 64, '\P{^Uppercase=no}', "");
Expect(0, 90, '\p{Uppercase=no}', "");
Expect(1, 90, '\p{^Uppercase=no}', "");
Expect(1, 90, '\P{Uppercase=no}', "");
Expect(0, 90, '\P{^Uppercase=no}', "");
Expect(1, 64, '\p{Uppercase:No}', "");
Expect(0, 64, '\p{^Uppercase:No}', "");
Expect(0, 64, '\P{Uppercase:No}', "");
Expect(1, 64, '\P{^Uppercase:No}', "");
Expect(0, 90, '\p{Uppercase:No}', "");
Expect(1, 90, '\p{^Uppercase:No}', "");
Expect(1, 90, '\P{Uppercase:No}', "");
Expect(0, 90, '\P{^Uppercase:No}', "");
Error('\p{Upper=/a/_N}');
Error('\P{Upper=/a/_N}');
Expect(1, 64, '\p{Upper=n}', "");
Expect(0, 64, '\p{^Upper=n}', "");
Expect(0, 64, '\P{Upper=n}', "");
Expect(1, 64, '\P{^Upper=n}', "");
Expect(0, 90, '\p{Upper=n}', "");
Expect(1, 90, '\p{^Upper=n}', "");
Expect(1, 90, '\P{Upper=n}', "");
Expect(0, 90, '\P{^Upper=n}', "");
Expect(1, 64, '\p{Upper= N}', "");
Expect(0, 64, '\p{^Upper= N}', "");
Expect(0, 64, '\P{Upper= N}', "");
Expect(1, 64, '\P{^Upper= N}', "");
Expect(0, 90, '\p{Upper= N}', "");
Expect(1, 90, '\p{^Upper= N}', "");
Expect(1, 90, '\P{Upper= N}', "");
Expect(0, 90, '\P{^Upper= N}', "");
Error('\p{Is_Uppercase=-F:=}');
Error('\P{Is_Uppercase=-F:=}');
Expect(1, 64, '\p{Is_Uppercase=f}', "");
Expect(0, 64, '\p{^Is_Uppercase=f}', "");
Expect(0, 64, '\P{Is_Uppercase=f}', "");
Expect(1, 64, '\P{^Is_Uppercase=f}', "");
Expect(0, 90, '\p{Is_Uppercase=f}', "");
Expect(1, 90, '\p{^Is_Uppercase=f}', "");
Expect(1, 90, '\P{Is_Uppercase=f}', "");
Expect(0, 90, '\P{^Is_Uppercase=f}', "");
Expect(1, 64, '\p{Is_Uppercase=	F}', "");
Expect(0, 64, '\p{^Is_Uppercase=	F}', "");
Expect(0, 64, '\P{Is_Uppercase=	F}', "");
Expect(1, 64, '\P{^Is_Uppercase=	F}', "");
Expect(0, 90, '\p{Is_Uppercase=	F}', "");
Expect(1, 90, '\p{^Is_Uppercase=	F}', "");
Expect(1, 90, '\P{Is_Uppercase=	F}', "");
Expect(0, 90, '\P{^Is_Uppercase=	F}', "");
Error('\p{Is_Upper=	_False/a/}');
Error('\P{Is_Upper=	_False/a/}');
Expect(1, 64, '\p{Is_Upper=false}', "");
Expect(0, 64, '\p{^Is_Upper=false}', "");
Expect(0, 64, '\P{Is_Upper=false}', "");
Expect(1, 64, '\P{^Is_Upper=false}', "");
Expect(0, 90, '\p{Is_Upper=false}', "");
Expect(1, 90, '\p{^Is_Upper=false}', "");
Expect(1, 90, '\P{Is_Upper=false}', "");
Expect(0, 90, '\P{^Is_Upper=false}', "");
Expect(1, 64, '\p{Is_Upper=  FALSE}', "");
Expect(0, 64, '\p{^Is_Upper=  FALSE}', "");
Expect(0, 64, '\P{Is_Upper=  FALSE}', "");
Expect(1, 64, '\P{^Is_Upper=  FALSE}', "");
Expect(0, 90, '\p{Is_Upper=  FALSE}', "");
Expect(1, 90, '\p{^Is_Upper=  FALSE}', "");
Expect(1, 90, '\P{Is_Upper=  FALSE}', "");
Expect(0, 90, '\P{^Is_Upper=  FALSE}', "");
Error('\p{Expands_On_NFKC:	Yes}');
Error('\P{Expands_On_NFKC:	Yes}');
Error('\p{XO_NFKC=Y}');
Error('\P{XO_NFKC=Y}');
Error('\p{Is_Expands_On_NFKC:	T}');
Error('\P{Is_Expands_On_NFKC:	T}');
Error('\p{Is_XO_NFKC=True}');
Error('\P{Is_XO_NFKC=True}');
Error('\p{Expands_On_NFKC=No}');
Error('\P{Expands_On_NFKC=No}');
Error('\p{XO_NFKC=N}');
Error('\P{XO_NFKC=N}');
Error('\p{Is_Expands_On_NFKC=F}');
Error('\P{Is_Expands_On_NFKC=F}');
Error('\p{Is_XO_NFKC=False}');
Error('\P{Is_XO_NFKC=False}');
Error('\p{NFD_Quick_Check=:=		yes}');
Error('\P{NFD_Quick_Check=:=		yes}');
Expect(1, 191, '\p{NFD_Quick_Check=yes}', "");
Expect(0, 191, '\p{^NFD_Quick_Check=yes}', "");
Expect(0, 191, '\P{NFD_Quick_Check=yes}', "");
Expect(1, 191, '\P{^NFD_Quick_Check=yes}', "");
Expect(0, 197, '\p{NFD_Quick_Check=yes}', "");
Expect(1, 197, '\p{^NFD_Quick_Check=yes}', "");
Expect(1, 197, '\P{NFD_Quick_Check=yes}', "");
Expect(0, 197, '\P{^NFD_Quick_Check=yes}', "");
Expect(1, 191, '\p{NFD_Quick_Check=_	Yes}', "");
Expect(0, 191, '\p{^NFD_Quick_Check=_	Yes}', "");
Expect(0, 191, '\P{NFD_Quick_Check=_	Yes}', "");
Expect(1, 191, '\P{^NFD_Quick_Check=_	Yes}', "");
Expect(0, 197, '\p{NFD_Quick_Check=_	Yes}', "");
Expect(1, 197, '\p{^NFD_Quick_Check=_	Yes}', "");
Expect(1, 197, '\P{NFD_Quick_Check=_	Yes}', "");
Expect(0, 197, '\P{^NFD_Quick_Check=_	Yes}', "");
Error('\p{NFD_QC:/a/		y}');
Error('\P{NFD_QC:/a/		y}');
Expect(1, 191, '\p{NFD_QC:y}', "");
Expect(0, 191, '\p{^NFD_QC:y}', "");
Expect(0, 191, '\P{NFD_QC:y}', "");
Expect(1, 191, '\P{^NFD_QC:y}', "");
Expect(0, 197, '\p{NFD_QC:y}', "");
Expect(1, 197, '\p{^NFD_QC:y}', "");
Expect(1, 197, '\P{NFD_QC:y}', "");
Expect(0, 197, '\P{^NFD_QC:y}', "");
Expect(1, 191, '\p{NFD_QC=__Y}', "");
Expect(0, 191, '\p{^NFD_QC=__Y}', "");
Expect(0, 191, '\P{NFD_QC=__Y}', "");
Expect(1, 191, '\P{^NFD_QC=__Y}', "");
Expect(0, 197, '\p{NFD_QC=__Y}', "");
Expect(1, 197, '\p{^NFD_QC=__Y}', "");
Expect(1, 197, '\P{NFD_QC=__Y}', "");
Expect(0, 197, '\P{^NFD_QC=__Y}', "");
Error('\p{Is_NFD_Quick_Check=:=_ yes}');
Error('\P{Is_NFD_Quick_Check=:=_ yes}');
Expect(1, 191, '\p{Is_NFD_Quick_Check=yes}', "");
Expect(0, 191, '\p{^Is_NFD_Quick_Check=yes}', "");
Expect(0, 191, '\P{Is_NFD_Quick_Check=yes}', "");
Expect(1, 191, '\P{^Is_NFD_Quick_Check=yes}', "");
Expect(0, 197, '\p{Is_NFD_Quick_Check=yes}', "");
Expect(1, 197, '\p{^Is_NFD_Quick_Check=yes}', "");
Expect(1, 197, '\P{Is_NFD_Quick_Check=yes}', "");
Expect(0, 197, '\P{^Is_NFD_Quick_Check=yes}', "");
Expect(1, 191, '\p{Is_NFD_Quick_Check=	_YES}', "");
Expect(0, 191, '\p{^Is_NFD_Quick_Check=	_YES}', "");
Expect(0, 191, '\P{Is_NFD_Quick_Check=	_YES}', "");
Expect(1, 191, '\P{^Is_NFD_Quick_Check=	_YES}', "");
Expect(0, 197, '\p{Is_NFD_Quick_Check=	_YES}', "");
Expect(1, 197, '\p{^Is_NFD_Quick_Check=	_YES}', "");
Expect(1, 197, '\P{Is_NFD_Quick_Check=	_YES}', "");
Expect(0, 197, '\P{^Is_NFD_Quick_Check=	_YES}', "");
Error('\p{Is_NFD_QC:   -	y/a/}');
Error('\P{Is_NFD_QC:   -	y/a/}');
Expect(1, 191, '\p{Is_NFD_QC=y}', "");
Expect(0, 191, '\p{^Is_NFD_QC=y}', "");
Expect(0, 191, '\P{Is_NFD_QC=y}', "");
Expect(1, 191, '\P{^Is_NFD_QC=y}', "");
Expect(0, 197, '\p{Is_NFD_QC=y}', "");
Expect(1, 197, '\p{^Is_NFD_QC=y}', "");
Expect(1, 197, '\P{Is_NFD_QC=y}', "");
Expect(0, 197, '\P{^Is_NFD_QC=y}', "");
Expect(1, 191, '\p{Is_NFD_QC=	y}', "");
Expect(0, 191, '\p{^Is_NFD_QC=	y}', "");
Expect(0, 191, '\P{Is_NFD_QC=	y}', "");
Expect(1, 191, '\P{^Is_NFD_QC=	y}', "");
Expect(0, 197, '\p{Is_NFD_QC=	y}', "");
Expect(1, 197, '\p{^Is_NFD_QC=	y}', "");
Expect(1, 197, '\P{Is_NFD_QC=	y}', "");
Expect(0, 197, '\P{^Is_NFD_QC=	y}', "");
Error('\p{NFD_Quick_Check= _No:=}');
Error('\P{NFD_Quick_Check= _No:=}');
Expect(1, 197, '\p{NFD_Quick_Check=no}', "");
Expect(0, 197, '\p{^NFD_Quick_Check=no}', "");
Expect(0, 197, '\P{NFD_Quick_Check=no}', "");
Expect(1, 197, '\P{^NFD_Quick_Check=no}', "");
Expect(0, 191, '\p{NFD_Quick_Check=no}', "");
Expect(1, 191, '\p{^NFD_Quick_Check=no}', "");
Expect(1, 191, '\P{NFD_Quick_Check=no}', "");
Expect(0, 191, '\P{^NFD_Quick_Check=no}', "");
Expect(1, 197, '\p{NFD_Quick_Check=_-No}', "");
Expect(0, 197, '\p{^NFD_Quick_Check=_-No}', "");
Expect(0, 197, '\P{NFD_Quick_Check=_-No}', "");
Expect(1, 197, '\P{^NFD_Quick_Check=_-No}', "");
Expect(0, 191, '\p{NFD_Quick_Check=_-No}', "");
Expect(1, 191, '\p{^NFD_Quick_Check=_-No}', "");
Expect(1, 191, '\P{NFD_Quick_Check=_-No}', "");
Expect(0, 191, '\P{^NFD_Quick_Check=_-No}', "");
Error('\p{NFD_QC=- N/a/}');
Error('\P{NFD_QC=- N/a/}');
Expect(1, 197, '\p{NFD_QC=n}', "");
Expect(0, 197, '\p{^NFD_QC=n}', "");
Expect(0, 197, '\P{NFD_QC=n}', "");
Expect(1, 197, '\P{^NFD_QC=n}', "");
Expect(0, 191, '\p{NFD_QC=n}', "");
Expect(1, 191, '\p{^NFD_QC=n}', "");
Expect(1, 191, '\P{NFD_QC=n}', "");
Expect(0, 191, '\P{^NFD_QC=n}', "");
Expect(1, 197, '\p{NFD_QC=-N}', "");
Expect(0, 197, '\p{^NFD_QC=-N}', "");
Expect(0, 197, '\P{NFD_QC=-N}', "");
Expect(1, 197, '\P{^NFD_QC=-N}', "");
Expect(0, 191, '\p{NFD_QC=-N}', "");
Expect(1, 191, '\p{^NFD_QC=-N}', "");
Expect(1, 191, '\P{NFD_QC=-N}', "");
Expect(0, 191, '\P{^NFD_QC=-N}', "");
Error('\p{Is_NFD_Quick_Check=-/a/no}');
Error('\P{Is_NFD_Quick_Check=-/a/no}');
Expect(1, 197, '\p{Is_NFD_Quick_Check=no}', "");
Expect(0, 197, '\p{^Is_NFD_Quick_Check=no}', "");
Expect(0, 197, '\P{Is_NFD_Quick_Check=no}', "");
Expect(1, 197, '\P{^Is_NFD_Quick_Check=no}', "");
Expect(0, 191, '\p{Is_NFD_Quick_Check=no}', "");
Expect(1, 191, '\p{^Is_NFD_Quick_Check=no}', "");
Expect(1, 191, '\P{Is_NFD_Quick_Check=no}', "");
Expect(0, 191, '\P{^Is_NFD_Quick_Check=no}', "");
Expect(1, 197, '\p{Is_NFD_Quick_Check= _No}', "");
Expect(0, 197, '\p{^Is_NFD_Quick_Check= _No}', "");
Expect(0, 197, '\P{Is_NFD_Quick_Check= _No}', "");
Expect(1, 197, '\P{^Is_NFD_Quick_Check= _No}', "");
Expect(0, 191, '\p{Is_NFD_Quick_Check= _No}', "");
Expect(1, 191, '\p{^Is_NFD_Quick_Check= _No}', "");
Expect(1, 191, '\P{Is_NFD_Quick_Check= _No}', "");
Expect(0, 191, '\P{^Is_NFD_Quick_Check= _No}', "");
Error('\p{Is_NFD_QC=:=N}');
Error('\P{Is_NFD_QC=:=N}');
Expect(1, 197, '\p{Is_NFD_QC=n}', "");
Expect(0, 197, '\p{^Is_NFD_QC=n}', "");
Expect(0, 197, '\P{Is_NFD_QC=n}', "");
Expect(1, 197, '\P{^Is_NFD_QC=n}', "");
Expect(0, 191, '\p{Is_NFD_QC=n}', "");
Expect(1, 191, '\p{^Is_NFD_QC=n}', "");
Expect(1, 191, '\P{Is_NFD_QC=n}', "");
Expect(0, 191, '\P{^Is_NFD_QC=n}', "");
Expect(1, 197, '\p{Is_NFD_QC:   	_N}', "");
Expect(0, 197, '\p{^Is_NFD_QC:   	_N}', "");
Expect(0, 197, '\P{Is_NFD_QC:   	_N}', "");
Expect(1, 197, '\P{^Is_NFD_QC:   	_N}', "");
Expect(0, 191, '\p{Is_NFD_QC:   	_N}', "");
Expect(1, 191, '\p{^Is_NFD_QC:   	_N}', "");
Expect(1, 191, '\P{Is_NFD_QC:   	_N}', "");
Expect(0, 191, '\P{^Is_NFD_QC:   	_N}', "");
Error('\p{Line_Break=-:=SPACE}');
Error('\P{Line_Break=-:=SPACE}');
Expect(1, 32, '\p{Line_Break=space}', "");
Expect(0, 32, '\p{^Line_Break=space}', "");
Expect(0, 32, '\P{Line_Break=space}', "");
Expect(1, 32, '\P{^Line_Break=space}', "");
Expect(0, 31, '\p{Line_Break=space}', "");
Expect(1, 31, '\p{^Line_Break=space}', "");
Expect(1, 31, '\P{Line_Break=space}', "");
Expect(0, 31, '\P{^Line_Break=space}', "");
Expect(1, 32, '\p{Line_Break=_SPACE}', "");
Expect(0, 32, '\p{^Line_Break=_SPACE}', "");
Expect(0, 32, '\P{Line_Break=_SPACE}', "");
Expect(1, 32, '\P{^Line_Break=_SPACE}', "");
Expect(0, 31, '\p{Line_Break=_SPACE}', "");
Expect(1, 31, '\p{^Line_Break=_SPACE}', "");
Expect(1, 31, '\P{Line_Break=_SPACE}', "");
Expect(0, 31, '\P{^Line_Break=_SPACE}', "");
Error('\p{Lb=-_SP/a/}');
Error('\P{Lb=-_SP/a/}');
Expect(1, 32, '\p{Lb=sp}', "");
Expect(0, 32, '\p{^Lb=sp}', "");
Expect(0, 32, '\P{Lb=sp}', "");
Expect(1, 32, '\P{^Lb=sp}', "");
Expect(0, 31, '\p{Lb=sp}', "");
Expect(1, 31, '\p{^Lb=sp}', "");
Expect(1, 31, '\P{Lb=sp}', "");
Expect(0, 31, '\P{^Lb=sp}', "");
Expect(1, 32, '\p{Lb=	 SP}', "");
Expect(0, 32, '\p{^Lb=	 SP}', "");
Expect(0, 32, '\P{Lb=	 SP}', "");
Expect(1, 32, '\P{^Lb=	 SP}', "");
Expect(0, 31, '\p{Lb=	 SP}', "");
Expect(1, 31, '\p{^Lb=	 SP}', "");
Expect(1, 31, '\P{Lb=	 SP}', "");
Expect(0, 31, '\P{^Lb=	 SP}', "");
Error('\p{Is_Line_Break=_/a/SPACE}');
Error('\P{Is_Line_Break=_/a/SPACE}');
Expect(1, 32, '\p{Is_Line_Break=space}', "");
Expect(0, 32, '\p{^Is_Line_Break=space}', "");
Expect(0, 32, '\P{Is_Line_Break=space}', "");
Expect(1, 32, '\P{^Is_Line_Break=space}', "");
Expect(0, 31, '\p{Is_Line_Break=space}', "");
Expect(1, 31, '\p{^Is_Line_Break=space}', "");
Expect(1, 31, '\P{Is_Line_Break=space}', "");
Expect(0, 31, '\P{^Is_Line_Break=space}', "");
Expect(1, 32, '\p{Is_Line_Break=_-Space}', "");
Expect(0, 32, '\p{^Is_Line_Break=_-Space}', "");
Expect(0, 32, '\P{Is_Line_Break=_-Space}', "");
Expect(1, 32, '\P{^Is_Line_Break=_-Space}', "");
Expect(0, 31, '\p{Is_Line_Break=_-Space}', "");
Expect(1, 31, '\p{^Is_Line_Break=_-Space}', "");
Expect(1, 31, '\P{Is_Line_Break=_-Space}', "");
Expect(0, 31, '\P{^Is_Line_Break=_-Space}', "");
Error('\p{Is_Lb=-:=SP}');
Error('\P{Is_Lb=-:=SP}');
Expect(1, 32, '\p{Is_Lb=sp}', "");
Expect(0, 32, '\p{^Is_Lb=sp}', "");
Expect(0, 32, '\P{Is_Lb=sp}', "");
Expect(1, 32, '\P{^Is_Lb=sp}', "");
Expect(0, 31, '\p{Is_Lb=sp}', "");
Expect(1, 31, '\p{^Is_Lb=sp}', "");
Expect(1, 31, '\P{Is_Lb=sp}', "");
Expect(0, 31, '\P{^Is_Lb=sp}', "");
Expect(1, 32, '\p{Is_Lb=-sp}', "");
Expect(0, 32, '\p{^Is_Lb=-sp}', "");
Expect(0, 32, '\P{Is_Lb=-sp}', "");
Expect(1, 32, '\P{^Is_Lb=-sp}', "");
Expect(0, 31, '\p{Is_Lb=-sp}', "");
Expect(1, 31, '\p{^Is_Lb=-sp}', "");
Expect(1, 31, '\P{Is_Lb=-sp}', "");
Expect(0, 31, '\P{^Is_Lb=-sp}', "");
Error('\p{Line_Break= Glue/a/}');
Error('\P{Line_Break= Glue/a/}');
Expect(1, 160, '\p{Line_Break=glue}', "");
Expect(0, 160, '\p{^Line_Break=glue}', "");
Expect(0, 160, '\P{Line_Break=glue}', "");
Expect(1, 160, '\P{^Line_Break=glue}', "");
Expect(0, 159, '\p{Line_Break=glue}', "");
Expect(1, 159, '\p{^Line_Break=glue}', "");
Expect(1, 159, '\P{Line_Break=glue}', "");
Expect(0, 159, '\P{^Line_Break=glue}', "");
Expect(1, 160, '\p{Line_Break=	 Glue}', "");
Expect(0, 160, '\p{^Line_Break=	 Glue}', "");
Expect(0, 160, '\P{Line_Break=	 Glue}', "");
Expect(1, 160, '\P{^Line_Break=	 Glue}', "");
Expect(0, 159, '\p{Line_Break=	 Glue}', "");
Expect(1, 159, '\p{^Line_Break=	 Glue}', "");
Expect(1, 159, '\P{Line_Break=	 Glue}', "");
Expect(0, 159, '\P{^Line_Break=	 Glue}', "");
Error('\p{Lb= gl/a/}');
Error('\P{Lb= gl/a/}');
Expect(1, 160, '\p{Lb=gl}', "");
Expect(0, 160, '\p{^Lb=gl}', "");
Expect(0, 160, '\P{Lb=gl}', "");
Expect(1, 160, '\P{^Lb=gl}', "");
Expect(0, 159, '\p{Lb=gl}', "");
Expect(1, 159, '\p{^Lb=gl}', "");
Expect(1, 159, '\P{Lb=gl}', "");
Expect(0, 159, '\P{^Lb=gl}', "");
Expect(1, 160, '\p{Lb=--GL}', "");
Expect(0, 160, '\p{^Lb=--GL}', "");
Expect(0, 160, '\P{Lb=--GL}', "");
Expect(1, 160, '\P{^Lb=--GL}', "");
Expect(0, 159, '\p{Lb=--GL}', "");
Expect(1, 159, '\p{^Lb=--GL}', "");
Expect(1, 159, '\P{Lb=--GL}', "");
Expect(0, 159, '\P{^Lb=--GL}', "");
Error('\p{Is_Line_Break=	:=glue}');
Error('\P{Is_Line_Break=	:=glue}');
Expect(1, 160, '\p{Is_Line_Break=glue}', "");
Expect(0, 160, '\p{^Is_Line_Break=glue}', "");
Expect(0, 160, '\P{Is_Line_Break=glue}', "");
Expect(1, 160, '\P{^Is_Line_Break=glue}', "");
Expect(0, 159, '\p{Is_Line_Break=glue}', "");
Expect(1, 159, '\p{^Is_Line_Break=glue}', "");
Expect(1, 159, '\P{Is_Line_Break=glue}', "");
Expect(0, 159, '\P{^Is_Line_Break=glue}', "");
Expect(1, 160, '\p{Is_Line_Break= 	Glue}', "");
Expect(0, 160, '\p{^Is_Line_Break= 	Glue}', "");
Expect(0, 160, '\P{Is_Line_Break= 	Glue}', "");
Expect(1, 160, '\P{^Is_Line_Break= 	Glue}', "");
Expect(0, 159, '\p{Is_Line_Break= 	Glue}', "");
Expect(1, 159, '\p{^Is_Line_Break= 	Glue}', "");
Expect(1, 159, '\P{Is_Line_Break= 	Glue}', "");
Expect(0, 159, '\P{^Is_Line_Break= 	Glue}', "");
Error('\p{Is_Lb: - GL:=}');
Error('\P{Is_Lb: - GL:=}');
Expect(1, 160, '\p{Is_Lb=gl}', "");
Expect(0, 160, '\p{^Is_Lb=gl}', "");
Expect(0, 160, '\P{Is_Lb=gl}', "");
Expect(1, 160, '\P{^Is_Lb=gl}', "");
Expect(0, 159, '\p{Is_Lb=gl}', "");
Expect(1, 159, '\p{^Is_Lb=gl}', "");
Expect(1, 159, '\P{Is_Lb=gl}', "");
Expect(0, 159, '\P{^Is_Lb=gl}', "");
Expect(1, 160, '\p{Is_Lb=--gl}', "");
Expect(0, 160, '\p{^Is_Lb=--gl}', "");
Expect(0, 160, '\P{Is_Lb=--gl}', "");
Expect(1, 160, '\P{^Is_Lb=--gl}', "");
Expect(0, 159, '\p{Is_Lb=--gl}', "");
Expect(1, 159, '\p{^Is_Lb=--gl}', "");
Expect(1, 159, '\P{Is_Lb=--gl}', "");
Expect(0, 159, '\P{^Is_Lb=--gl}', "");
Error('\p{Line_Break=/a/ -SURROGATE}');
Error('\P{Line_Break=/a/ -SURROGATE}');
Expect(1, 57343, '\p{Line_Break=surrogate}', 'deprecated');
Expect(0, 57343, '\p{^Line_Break=surrogate}', 'deprecated');
Expect(0, 57343, '\P{Line_Break=surrogate}', 'deprecated');
Expect(1, 57343, '\P{^Line_Break=surrogate}', 'deprecated');
Expect(0, 55295, '\p{Line_Break=surrogate}', 'deprecated');
Expect(1, 55295, '\p{^Line_Break=surrogate}', 'deprecated');
Expect(1, 55295, '\P{Line_Break=surrogate}', 'deprecated');
Expect(0, 55295, '\P{^Line_Break=surrogate}', 'deprecated');
Expect(1, 57343, '\p{Line_Break=_surrogate}', 'deprecated');
Expect(0, 57343, '\p{^Line_Break=_surrogate}', 'deprecated');
Expect(0, 57343, '\P{Line_Break=_surrogate}', 'deprecated');
Expect(1, 57343, '\P{^Line_Break=_surrogate}', 'deprecated');
Expect(0, 55295, '\p{Line_Break=_surrogate}', 'deprecated');
Expect(1, 55295, '\p{^Line_Break=_surrogate}', 'deprecated');
Expect(1, 55295, '\P{Line_Break=_surrogate}', 'deprecated');
Expect(0, 55295, '\P{^Line_Break=_surrogate}', 'deprecated');
Error('\p{Lb=:=--SG}');
Error('\P{Lb=:=--SG}');
Expect(1, 57343, '\p{Lb=sg}', 'deprecated');
Expect(0, 57343, '\p{^Lb=sg}', 'deprecated');
Expect(0, 57343, '\P{Lb=sg}', 'deprecated');
Expect(1, 57343, '\P{^Lb=sg}', 'deprecated');
Expect(0, 55295, '\p{Lb=sg}', 'deprecated');
Expect(1, 55295, '\p{^Lb=sg}', 'deprecated');
Expect(1, 55295, '\P{Lb=sg}', 'deprecated');
Expect(0, 55295, '\P{^Lb=sg}', 'deprecated');
Expect(1, 57343, '\p{Lb=	_SG}', 'deprecated');
Expect(0, 57343, '\p{^Lb=	_SG}', 'deprecated');
Expect(0, 57343, '\P{Lb=	_SG}', 'deprecated');
Expect(1, 57343, '\P{^Lb=	_SG}', 'deprecated');
Expect(0, 55295, '\p{Lb=	_SG}', 'deprecated');
Expect(1, 55295, '\p{^Lb=	_SG}', 'deprecated');
Expect(1, 55295, '\P{Lb=	_SG}', 'deprecated');
Expect(0, 55295, '\P{^Lb=	_SG}', 'deprecated');
Error('\p{Is_Line_Break=- Surrogate:=}');
Error('\P{Is_Line_Break=- Surrogate:=}');
Expect(1, 57343, '\p{Is_Line_Break:surrogate}', 'deprecated');
Expect(0, 57343, '\p{^Is_Line_Break:surrogate}', 'deprecated');
Expect(0, 57343, '\P{Is_Line_Break:surrogate}', 'deprecated');
Expect(1, 57343, '\P{^Is_Line_Break:surrogate}', 'deprecated');
Expect(0, 55295, '\p{Is_Line_Break:surrogate}', 'deprecated');
Expect(1, 55295, '\p{^Is_Line_Break:surrogate}', 'deprecated');
Expect(1, 55295, '\P{Is_Line_Break:surrogate}', 'deprecated');
Expect(0, 55295, '\P{^Is_Line_Break:surrogate}', 'deprecated');
Expect(1, 57343, '\p{Is_Line_Break=-Surrogate}', 'deprecated');
Expect(0, 57343, '\p{^Is_Line_Break=-Surrogate}', 'deprecated');
Expect(0, 57343, '\P{Is_Line_Break=-Surrogate}', 'deprecated');
Expect(1, 57343, '\P{^Is_Line_Break=-Surrogate}', 'deprecated');
Expect(0, 55295, '\p{Is_Line_Break=-Surrogate}', 'deprecated');
Expect(1, 55295, '\p{^Is_Line_Break=-Surrogate}', 'deprecated');
Expect(1, 55295, '\P{Is_Line_Break=-Surrogate}', 'deprecated');
Expect(0, 55295, '\P{^Is_Line_Break=-Surrogate}', 'deprecated');
Error('\p{Is_Lb= _SG/a/}');
Error('\P{Is_Lb= _SG/a/}');
Expect(1, 57343, '\p{Is_Lb=sg}', 'deprecated');
Expect(0, 57343, '\p{^Is_Lb=sg}', 'deprecated');
Expect(0, 57343, '\P{Is_Lb=sg}', 'deprecated');
Expect(1, 57343, '\P{^Is_Lb=sg}', 'deprecated');
Expect(0, 55295, '\p{Is_Lb=sg}', 'deprecated');
Expect(1, 55295, '\p{^Is_Lb=sg}', 'deprecated');
Expect(1, 55295, '\P{Is_Lb=sg}', 'deprecated');
Expect(0, 55295, '\P{^Is_Lb=sg}', 'deprecated');
Expect(1, 57343, '\p{Is_Lb=		SG}', 'deprecated');
Expect(0, 57343, '\p{^Is_Lb=		SG}', 'deprecated');
Expect(0, 57343, '\P{Is_Lb=		SG}', 'deprecated');
Expect(1, 57343, '\P{^Is_Lb=		SG}', 'deprecated');
Expect(0, 55295, '\p{Is_Lb=		SG}', 'deprecated');
Expect(1, 55295, '\p{^Is_Lb=		SG}', 'deprecated');
Expect(1, 55295, '\P{Is_Lb=		SG}', 'deprecated');
Expect(0, 55295, '\P{^Is_Lb=		SG}', 'deprecated');
Error('\p{Line_Break=_/a/Unknown}');
Error('\P{Line_Break=_/a/Unknown}');
Expect(1, 889, '\p{Line_Break=unknown}', "");
Expect(0, 889, '\p{^Line_Break=unknown}', "");
Expect(0, 889, '\P{Line_Break=unknown}', "");
Expect(1, 889, '\P{^Line_Break=unknown}', "");
Expect(0, 887, '\p{Line_Break=unknown}', "");
Expect(1, 887, '\p{^Line_Break=unknown}', "");
Expect(1, 887, '\P{Line_Break=unknown}', "");
Expect(0, 887, '\P{^Line_Break=unknown}', "");
Expect(1, 889, '\p{Line_Break=	-Unknown}', "");
Expect(0, 889, '\p{^Line_Break=	-Unknown}', "");
Expect(0, 889, '\P{Line_Break=	-Unknown}', "");
Expect(1, 889, '\P{^Line_Break=	-Unknown}', "");
Expect(0, 887, '\p{Line_Break=	-Unknown}', "");
Expect(1, 887, '\p{^Line_Break=	-Unknown}', "");
Expect(1, 887, '\P{Line_Break=	-Unknown}', "");
Expect(0, 887, '\P{^Line_Break=	-Unknown}', "");
Error('\p{Lb=  XX:=}');
Error('\P{Lb=  XX:=}');
Expect(1, 889, '\p{Lb=xx}', "");
Expect(0, 889, '\p{^Lb=xx}', "");
Expect(0, 889, '\P{Lb=xx}', "");
Expect(1, 889, '\P{^Lb=xx}', "");
Expect(0, 887, '\p{Lb=xx}', "");
Expect(1, 887, '\p{^Lb=xx}', "");
Expect(1, 887, '\P{Lb=xx}', "");
Expect(0, 887, '\P{^Lb=xx}', "");
Expect(1, 889, '\p{Lb=	 XX}', "");
Expect(0, 889, '\p{^Lb=	 XX}', "");
Expect(0, 889, '\P{Lb=	 XX}', "");
Expect(1, 889, '\P{^Lb=	 XX}', "");
Expect(0, 887, '\p{Lb=	 XX}', "");
Expect(1, 887, '\p{^Lb=	 XX}', "");
Expect(1, 887, '\P{Lb=	 XX}', "");
Expect(0, 887, '\P{^Lb=	 XX}', "");
Error('\p{Is_Line_Break=/a/-	Unknown}');
Error('\P{Is_Line_Break=/a/-	Unknown}');
Expect(1, 889, '\p{Is_Line_Break=unknown}', "");
Expect(0, 889, '\p{^Is_Line_Break=unknown}', "");
Expect(0, 889, '\P{Is_Line_Break=unknown}', "");
Expect(1, 889, '\P{^Is_Line_Break=unknown}', "");
Expect(0, 887, '\p{Is_Line_Break=unknown}', "");
Expect(1, 887, '\p{^Is_Line_Break=unknown}', "");
Expect(1, 887, '\P{Is_Line_Break=unknown}', "");
Expect(0, 887, '\P{^Is_Line_Break=unknown}', "");
Expect(1, 889, '\p{Is_Line_Break=_UNKNOWN}', "");
Expect(0, 889, '\p{^Is_Line_Break=_UNKNOWN}', "");
Expect(0, 889, '\P{Is_Line_Break=_UNKNOWN}', "");
Expect(1, 889, '\P{^Is_Line_Break=_UNKNOWN}', "");
Expect(0, 887, '\p{Is_Line_Break=_UNKNOWN}', "");
Expect(1, 887, '\p{^Is_Line_Break=_UNKNOWN}', "");
Expect(1, 887, '\P{Is_Line_Break=_UNKNOWN}', "");
Expect(0, 887, '\P{^Is_Line_Break=_UNKNOWN}', "");
Error('\p{Is_Lb=:=xx}');
Error('\P{Is_Lb=:=xx}');
Expect(1, 889, '\p{Is_Lb=xx}', "");
Expect(0, 889, '\p{^Is_Lb=xx}', "");
Expect(0, 889, '\P{Is_Lb=xx}', "");
Expect(1, 889, '\P{^Is_Lb=xx}', "");
Expect(0, 887, '\p{Is_Lb=xx}', "");
Expect(1, 887, '\p{^Is_Lb=xx}', "");
Expect(1, 887, '\P{Is_Lb=xx}', "");
Expect(0, 887, '\P{^Is_Lb=xx}', "");
Expect(1, 889, '\p{Is_Lb=__XX}', "");
Expect(0, 889, '\p{^Is_Lb=__XX}', "");
Expect(0, 889, '\P{Is_Lb=__XX}', "");
Expect(1, 889, '\P{^Is_Lb=__XX}', "");
Expect(0, 887, '\p{Is_Lb=__XX}', "");
Expect(1, 887, '\p{^Is_Lb=__XX}', "");
Expect(1, 887, '\P{Is_Lb=__XX}', "");
Expect(0, 887, '\P{^Is_Lb=__XX}', "");
Error('\p{Line_Break=	:=numeric}');
Error('\P{Line_Break=	:=numeric}');
Expect(1, 57, '\p{Line_Break=numeric}', "");
Expect(0, 57, '\p{^Line_Break=numeric}', "");
Expect(0, 57, '\P{Line_Break=numeric}', "");
Expect(1, 57, '\P{^Line_Break=numeric}', "");
Expect(0, 47, '\p{Line_Break=numeric}', "");
Expect(1, 47, '\p{^Line_Break=numeric}', "");
Expect(1, 47, '\P{Line_Break=numeric}', "");
Expect(0, 47, '\P{^Line_Break=numeric}', "");
Expect(1, 57, '\p{Line_Break=	-numeric}', "");
Expect(0, 57, '\p{^Line_Break=	-numeric}', "");
Expect(0, 57, '\P{Line_Break=	-numeric}', "");
Expect(1, 57, '\P{^Line_Break=	-numeric}', "");
Expect(0, 47, '\p{Line_Break=	-numeric}', "");
Expect(1, 47, '\p{^Line_Break=	-numeric}', "");
Expect(1, 47, '\P{Line_Break=	-numeric}', "");
Expect(0, 47, '\P{^Line_Break=	-numeric}', "");
Error('\p{Lb=		nu:=}');
Error('\P{Lb=		nu:=}');
Expect(1, 57, '\p{Lb=nu}', "");
Expect(0, 57, '\p{^Lb=nu}', "");
Expect(0, 57, '\P{Lb=nu}', "");
Expect(1, 57, '\P{^Lb=nu}', "");
Expect(0, 47, '\p{Lb=nu}', "");
Expect(1, 47, '\p{^Lb=nu}', "");
Expect(1, 47, '\P{Lb=nu}', "");
Expect(0, 47, '\P{^Lb=nu}', "");
Expect(1, 57, '\p{Lb= NU}', "");
Expect(0, 57, '\p{^Lb= NU}', "");
Expect(0, 57, '\P{Lb= NU}', "");
Expect(1, 57, '\P{^Lb= NU}', "");
Expect(0, 47, '\p{Lb= NU}', "");
Expect(1, 47, '\p{^Lb= NU}', "");
Expect(1, 47, '\P{Lb= NU}', "");
Expect(0, 47, '\P{^Lb= NU}', "");
Error('\p{Is_Line_Break=	:=Numeric}');
Error('\P{Is_Line_Break=	:=Numeric}');
Expect(1, 57, '\p{Is_Line_Break=numeric}', "");
Expect(0, 57, '\p{^Is_Line_Break=numeric}', "");
Expect(0, 57, '\P{Is_Line_Break=numeric}', "");
Expect(1, 57, '\P{^Is_Line_Break=numeric}', "");
Expect(0, 47, '\p{Is_Line_Break=numeric}', "");
Expect(1, 47, '\p{^Is_Line_Break=numeric}', "");
Expect(1, 47, '\P{Is_Line_Break=numeric}', "");
Expect(0, 47, '\P{^Is_Line_Break=numeric}', "");
Expect(1, 57, '\p{Is_Line_Break= -NUMERIC}', "");
Expect(0, 57, '\p{^Is_Line_Break= -NUMERIC}', "");
Expect(0, 57, '\P{Is_Line_Break= -NUMERIC}', "");
Expect(1, 57, '\P{^Is_Line_Break= -NUMERIC}', "");
Expect(0, 47, '\p{Is_Line_Break= -NUMERIC}', "");
Expect(1, 47, '\p{^Is_Line_Break= -NUMERIC}', "");
Expect(1, 47, '\P{Is_Line_Break= -NUMERIC}', "");
Expect(0, 47, '\P{^Is_Line_Break= -NUMERIC}', "");
Error('\p{Is_Lb=-:=nu}');
Error('\P{Is_Lb=-:=nu}');
Expect(1, 57, '\p{Is_Lb:	nu}', "");
Expect(0, 57, '\p{^Is_Lb:	nu}', "");
Expect(0, 57, '\P{Is_Lb:	nu}', "");
Expect(1, 57, '\P{^Is_Lb:	nu}', "");
Expect(0, 47, '\p{Is_Lb:	nu}', "");
Expect(1, 47, '\p{^Is_Lb:	nu}', "");
Expect(1, 47, '\P{Is_Lb:	nu}', "");
Expect(0, 47, '\P{^Is_Lb:	nu}', "");
Expect(1, 57, '\p{Is_Lb=-NU}', "");
Expect(0, 57, '\p{^Is_Lb=-NU}', "");
Expect(0, 57, '\P{Is_Lb=-NU}', "");
Expect(1, 57, '\P{^Is_Lb=-NU}', "");
Expect(0, 47, '\p{Is_Lb=-NU}', "");
Expect(1, 47, '\p{^Is_Lb=-NU}', "");
Expect(1, 47, '\P{Is_Lb=-NU}', "");
Expect(0, 47, '\P{^Is_Lb=-NU}', "");
Error('\p{Line_Break=-Break Before/a/}');
Error('\P{Line_Break=-Break Before/a/}');
Expect(1, 180, '\p{Line_Break=breakbefore}', "");
Expect(0, 180, '\p{^Line_Break=breakbefore}', "");
Expect(0, 180, '\P{Line_Break=breakbefore}', "");
Expect(1, 180, '\P{^Line_Break=breakbefore}', "");
Expect(0, 179, '\p{Line_Break=breakbefore}', "");
Expect(1, 179, '\p{^Line_Break=breakbefore}', "");
Expect(1, 179, '\P{Line_Break=breakbefore}', "");
Expect(0, 179, '\P{^Line_Break=breakbefore}', "");
Expect(1, 180, '\p{Line_Break=_-breakBefore}', "");
Expect(0, 180, '\p{^Line_Break=_-breakBefore}', "");
Expect(0, 180, '\P{Line_Break=_-breakBefore}', "");
Expect(1, 180, '\P{^Line_Break=_-breakBefore}', "");
Expect(0, 179, '\p{Line_Break=_-breakBefore}', "");
Expect(1, 179, '\p{^Line_Break=_-breakBefore}', "");
Expect(1, 179, '\P{Line_Break=_-breakBefore}', "");
Expect(0, 179, '\P{^Line_Break=_-breakBefore}', "");
Error('\p{Lb=/a/_BB}');
Error('\P{Lb=/a/_BB}');
Expect(1, 180, '\p{Lb=bb}', "");
Expect(0, 180, '\p{^Lb=bb}', "");
Expect(0, 180, '\P{Lb=bb}', "");
Expect(1, 180, '\P{^Lb=bb}', "");
Expect(0, 179, '\p{Lb=bb}', "");
Expect(1, 179, '\p{^Lb=bb}', "");
Expect(1, 179, '\P{Lb=bb}', "");
Expect(0, 179, '\P{^Lb=bb}', "");
Expect(1, 180, '\p{Lb=-_BB}', "");
Expect(0, 180, '\p{^Lb=-_BB}', "");
Expect(0, 180, '\P{Lb=-_BB}', "");
Expect(1, 180, '\P{^Lb=-_BB}', "");
Expect(0, 179, '\p{Lb=-_BB}', "");
Expect(1, 179, '\p{^Lb=-_BB}', "");
Expect(1, 179, '\P{Lb=-_BB}', "");
Expect(0, 179, '\P{^Lb=-_BB}', "");
Error('\p{Is_Line_Break=/a/	 Break BEFORE}');
Error('\P{Is_Line_Break=/a/	 Break BEFORE}');
Expect(1, 180, '\p{Is_Line_Break=breakbefore}', "");
Expect(0, 180, '\p{^Is_Line_Break=breakbefore}', "");
Expect(0, 180, '\P{Is_Line_Break=breakbefore}', "");
Expect(1, 180, '\P{^Is_Line_Break=breakbefore}', "");
Expect(0, 179, '\p{Is_Line_Break=breakbefore}', "");
Expect(1, 179, '\p{^Is_Line_Break=breakbefore}', "");
Expect(1, 179, '\P{Is_Line_Break=breakbefore}', "");
Expect(0, 179, '\P{^Is_Line_Break=breakbefore}', "");
Expect(1, 180, '\p{Is_Line_Break=- break_Before}', "");
Expect(0, 180, '\p{^Is_Line_Break=- break_Before}', "");
Expect(0, 180, '\P{Is_Line_Break=- break_Before}', "");
Expect(1, 180, '\P{^Is_Line_Break=- break_Before}', "");
Expect(0, 179, '\p{Is_Line_Break=- break_Before}', "");
Expect(1, 179, '\p{^Is_Line_Break=- break_Before}', "");
Expect(1, 179, '\P{Is_Line_Break=- break_Before}', "");
Expect(0, 179, '\P{^Is_Line_Break=- break_Before}', "");
Error('\p{Is_Lb=	BB/a/}');
Error('\P{Is_Lb=	BB/a/}');
Expect(1, 180, '\p{Is_Lb=bb}', "");
Expect(0, 180, '\p{^Is_Lb=bb}', "");
Expect(0, 180, '\P{Is_Lb=bb}', "");
Expect(1, 180, '\P{^Is_Lb=bb}', "");
Expect(0, 179, '\p{Is_Lb=bb}', "");
Expect(1, 179, '\p{^Is_Lb=bb}', "");
Expect(1, 179, '\P{Is_Lb=bb}', "");
Expect(0, 179, '\P{^Is_Lb=bb}', "");
Expect(1, 180, '\p{Is_Lb=-BB}', "");
Expect(0, 180, '\p{^Is_Lb=-BB}', "");
Expect(0, 180, '\P{Is_Lb=-BB}', "");
Expect(1, 180, '\P{^Is_Lb=-BB}', "");
Expect(0, 179, '\p{Is_Lb=-BB}', "");
Expect(1, 179, '\p{^Is_Lb=-BB}', "");
Expect(1, 179, '\P{Is_Lb=-BB}', "");
Expect(0, 179, '\P{^Is_Lb=-BB}', "");
Error('\p{Line_Break=/a/--zwspace}');
Error('\P{Line_Break=/a/--zwspace}');
Expect(1, 8203, '\p{Line_Break=zwspace}', "");
Expect(0, 8203, '\p{^Line_Break=zwspace}', "");
Expect(0, 8203, '\P{Line_Break=zwspace}', "");
Expect(1, 8203, '\P{^Line_Break=zwspace}', "");
Expect(0, 8202, '\p{Line_Break=zwspace}', "");
Expect(1, 8202, '\p{^Line_Break=zwspace}', "");
Expect(1, 8202, '\P{Line_Break=zwspace}', "");
Expect(0, 8202, '\P{^Line_Break=zwspace}', "");
Expect(1, 8203, '\p{Line_Break=__ZWSPACE}', "");
Expect(0, 8203, '\p{^Line_Break=__ZWSPACE}', "");
Expect(0, 8203, '\P{Line_Break=__ZWSPACE}', "");
Expect(1, 8203, '\P{^Line_Break=__ZWSPACE}', "");
Expect(0, 8202, '\p{Line_Break=__ZWSPACE}', "");
Expect(1, 8202, '\p{^Line_Break=__ZWSPACE}', "");
Expect(1, 8202, '\P{Line_Break=__ZWSPACE}', "");
Expect(0, 8202, '\P{^Line_Break=__ZWSPACE}', "");
Error('\p{Lb=	ZW/a/}');
Error('\P{Lb=	ZW/a/}');
Expect(1, 8203, '\p{Lb=zw}', "");
Expect(0, 8203, '\p{^Lb=zw}', "");
Expect(0, 8203, '\P{Lb=zw}', "");
Expect(1, 8203, '\P{^Lb=zw}', "");
Expect(0, 8202, '\p{Lb=zw}', "");
Expect(1, 8202, '\p{^Lb=zw}', "");
Expect(1, 8202, '\P{Lb=zw}', "");
Expect(0, 8202, '\P{^Lb=zw}', "");
Expect(1, 8203, '\p{Lb=	zw}', "");
Expect(0, 8203, '\p{^Lb=	zw}', "");
Expect(0, 8203, '\P{Lb=	zw}', "");
Expect(1, 8203, '\P{^Lb=	zw}', "");
Expect(0, 8202, '\p{Lb=	zw}', "");
Expect(1, 8202, '\p{^Lb=	zw}', "");
Expect(1, 8202, '\P{Lb=	zw}', "");
Expect(0, 8202, '\P{^Lb=	zw}', "");
Error('\p{Is_Line_Break=_/a/zwspace}');
Error('\P{Is_Line_Break=_/a/zwspace}');
Expect(1, 8203, '\p{Is_Line_Break=zwspace}', "");
Expect(0, 8203, '\p{^Is_Line_Break=zwspace}', "");
Expect(0, 8203, '\P{Is_Line_Break=zwspace}', "");
Expect(1, 8203, '\P{^Is_Line_Break=zwspace}', "");
Expect(0, 8202, '\p{Is_Line_Break=zwspace}', "");
Expect(1, 8202, '\p{^Is_Line_Break=zwspace}', "");
Expect(1, 8202, '\P{Is_Line_Break=zwspace}', "");
Expect(0, 8202, '\P{^Is_Line_Break=zwspace}', "");
Expect(1, 8203, '\p{Is_Line_Break=-	ZWSPACE}', "");
Expect(0, 8203, '\p{^Is_Line_Break=-	ZWSPACE}', "");
Expect(0, 8203, '\P{Is_Line_Break=-	ZWSPACE}', "");
Expect(1, 8203, '\P{^Is_Line_Break=-	ZWSPACE}', "");
Expect(0, 8202, '\p{Is_Line_Break=-	ZWSPACE}', "");
Expect(1, 8202, '\p{^Is_Line_Break=-	ZWSPACE}', "");
Expect(1, 8202, '\P{Is_Line_Break=-	ZWSPACE}', "");
Expect(0, 8202, '\P{^Is_Line_Break=-	ZWSPACE}', "");
Error('\p{Is_Lb=-ZW/a/}');
Error('\P{Is_Lb=-ZW/a/}');
Expect(1, 8203, '\p{Is_Lb=zw}', "");
Expect(0, 8203, '\p{^Is_Lb=zw}', "");
Expect(0, 8203, '\P{Is_Lb=zw}', "");
Expect(1, 8203, '\P{^Is_Lb=zw}', "");
Expect(0, 8202, '\p{Is_Lb=zw}', "");
Expect(1, 8202, '\p{^Is_Lb=zw}', "");
Expect(1, 8202, '\P{Is_Lb=zw}', "");
Expect(0, 8202, '\P{^Is_Lb=zw}', "");
Expect(1, 8203, '\p{Is_Lb=	_ZW}', "");
Expect(0, 8203, '\p{^Is_Lb=	_ZW}', "");
Expect(0, 8203, '\P{Is_Lb=	_ZW}', "");
Expect(1, 8203, '\P{^Is_Lb=	_ZW}', "");
Expect(0, 8202, '\p{Is_Lb=	_ZW}', "");
Expect(1, 8202, '\p{^Is_Lb=	_ZW}', "");
Expect(1, 8202, '\P{Is_Lb=	_ZW}', "");
Expect(0, 8202, '\P{^Is_Lb=	_ZW}', "");
Error('\p{Line_Break=/a/-jl}');
Error('\P{Line_Break=/a/-jl}');
Expect(1, 4447, '\p{Line_Break=jl}', "");
Expect(0, 4447, '\p{^Line_Break=jl}', "");
Expect(0, 4447, '\P{Line_Break=jl}', "");
Expect(1, 4447, '\P{^Line_Break=jl}', "");
Expect(0, 4351, '\p{Line_Break=jl}', "");
Expect(1, 4351, '\p{^Line_Break=jl}', "");
Expect(1, 4351, '\P{Line_Break=jl}', "");
Expect(0, 4351, '\P{^Line_Break=jl}', "");
Expect(1, 4447, '\p{Line_Break= -JL}', "");
Expect(0, 4447, '\p{^Line_Break= -JL}', "");
Expect(0, 4447, '\P{Line_Break= -JL}', "");
Expect(1, 4447, '\P{^Line_Break= -JL}', "");
Expect(0, 4351, '\p{Line_Break= -JL}', "");
Expect(1, 4351, '\p{^Line_Break= -JL}', "");
Expect(1, 4351, '\P{Line_Break= -JL}', "");
Expect(0, 4351, '\P{^Line_Break= -JL}', "");
Error('\p{Lb=_:=JL}');
Error('\P{Lb=_:=JL}');
Expect(1, 4447, '\p{Lb=jl}', "");
Expect(0, 4447, '\p{^Lb=jl}', "");
Expect(0, 4447, '\P{Lb=jl}', "");
Expect(1, 4447, '\P{^Lb=jl}', "");
Expect(0, 4351, '\p{Lb=jl}', "");
Expect(1, 4351, '\p{^Lb=jl}', "");
Expect(1, 4351, '\P{Lb=jl}', "");
Expect(0, 4351, '\P{^Lb=jl}', "");
Expect(1, 4447, '\p{Lb=_	JL}', "");
Expect(0, 4447, '\p{^Lb=_	JL}', "");
Expect(0, 4447, '\P{Lb=_	JL}', "");
Expect(1, 4447, '\P{^Lb=_	JL}', "");
Expect(0, 4351, '\p{Lb=_	JL}', "");
Expect(1, 4351, '\p{^Lb=_	JL}', "");
Expect(1, 4351, '\P{Lb=_	JL}', "");
Expect(0, 4351, '\P{^Lb=_	JL}', "");
Error('\p{Is_Line_Break: 	-jl:=}');
Error('\P{Is_Line_Break: 	-jl:=}');
Expect(1, 4447, '\p{Is_Line_Break=jl}', "");
Expect(0, 4447, '\p{^Is_Line_Break=jl}', "");
Expect(0, 4447, '\P{Is_Line_Break=jl}', "");
Expect(1, 4447, '\P{^Is_Line_Break=jl}', "");
Expect(0, 4351, '\p{Is_Line_Break=jl}', "");
Expect(1, 4351, '\p{^Is_Line_Break=jl}', "");
Expect(1, 4351, '\P{Is_Line_Break=jl}', "");
Expect(0, 4351, '\P{^Is_Line_Break=jl}', "");
Expect(1, 4447, '\p{Is_Line_Break=__jl}', "");
Expect(0, 4447, '\p{^Is_Line_Break=__jl}', "");
Expect(0, 4447, '\P{Is_Line_Break=__jl}', "");
Expect(1, 4447, '\P{^Is_Line_Break=__jl}', "");
Expect(0, 4351, '\p{Is_Line_Break=__jl}', "");
Expect(1, 4351, '\p{^Is_Line_Break=__jl}', "");
Expect(1, 4351, '\P{Is_Line_Break=__jl}', "");
Expect(0, 4351, '\P{^Is_Line_Break=__jl}', "");
Error('\p{Is_Lb=:=-_JL}');
Error('\P{Is_Lb=:=-_JL}');
Expect(1, 4447, '\p{Is_Lb=jl}', "");
Expect(0, 4447, '\p{^Is_Lb=jl}', "");
Expect(0, 4447, '\P{Is_Lb=jl}', "");
Expect(1, 4447, '\P{^Is_Lb=jl}', "");
Expect(0, 4351, '\p{Is_Lb=jl}', "");
Expect(1, 4351, '\p{^Is_Lb=jl}', "");
Expect(1, 4351, '\P{Is_Lb=jl}', "");
Expect(0, 4351, '\P{^Is_Lb=jl}', "");
Expect(1, 4447, '\p{Is_Lb=	JL}', "");
Expect(0, 4447, '\p{^Is_Lb=	JL}', "");
Expect(0, 4447, '\P{Is_Lb=	JL}', "");
Expect(1, 4447, '\P{^Is_Lb=	JL}', "");
Expect(0, 4351, '\p{Is_Lb=	JL}', "");
Expect(1, 4351, '\p{^Is_Lb=	JL}', "");
Expect(1, 4351, '\P{Is_Lb=	JL}', "");
Expect(0, 4351, '\P{^Is_Lb=	JL}', "");
Error('\p{Line_Break=_/a/break	Symbols}');
Error('\P{Line_Break=_/a/break	Symbols}');
Expect(1, 47, '\p{Line_Break=breaksymbols}', "");
Expect(0, 47, '\p{^Line_Break=breaksymbols}', "");
Expect(0, 47, '\P{Line_Break=breaksymbols}', "");
Expect(1, 47, '\P{^Line_Break=breaksymbols}', "");
Expect(0, 46, '\p{Line_Break=breaksymbols}', "");
Expect(1, 46, '\p{^Line_Break=breaksymbols}', "");
Expect(1, 46, '\P{Line_Break=breaksymbols}', "");
Expect(0, 46, '\P{^Line_Break=breaksymbols}', "");
Expect(1, 47, '\p{Line_Break=		break-SYMBOLS}', "");
Expect(0, 47, '\p{^Line_Break=		break-SYMBOLS}', "");
Expect(0, 47, '\P{Line_Break=		break-SYMBOLS}', "");
Expect(1, 47, '\P{^Line_Break=		break-SYMBOLS}', "");
Expect(0, 46, '\p{Line_Break=		break-SYMBOLS}', "");
Expect(1, 46, '\p{^Line_Break=		break-SYMBOLS}', "");
Expect(1, 46, '\P{Line_Break=		break-SYMBOLS}', "");
Expect(0, 46, '\P{^Line_Break=		break-SYMBOLS}', "");
Error('\p{Lb=__SY/a/}');
Error('\P{Lb=__SY/a/}');
Expect(1, 47, '\p{Lb=sy}', "");
Expect(0, 47, '\p{^Lb=sy}', "");
Expect(0, 47, '\P{Lb=sy}', "");
Expect(1, 47, '\P{^Lb=sy}', "");
Expect(0, 46, '\p{Lb=sy}', "");
Expect(1, 46, '\p{^Lb=sy}', "");
Expect(1, 46, '\P{Lb=sy}', "");
Expect(0, 46, '\P{^Lb=sy}', "");
Expect(1, 47, '\p{Lb=_SY}', "");
Expect(0, 47, '\p{^Lb=_SY}', "");
Expect(0, 47, '\P{Lb=_SY}', "");
Expect(1, 47, '\P{^Lb=_SY}', "");
Expect(0, 46, '\p{Lb=_SY}', "");
Expect(1, 46, '\p{^Lb=_SY}', "");
Expect(1, 46, '\P{Lb=_SY}', "");
Expect(0, 46, '\P{^Lb=_SY}', "");
Error('\p{Is_Line_Break:   -	Break:=Symbols}');
Error('\P{Is_Line_Break:   -	Break:=Symbols}');
Expect(1, 47, '\p{Is_Line_Break=breaksymbols}', "");
Expect(0, 47, '\p{^Is_Line_Break=breaksymbols}', "");
Expect(0, 47, '\P{Is_Line_Break=breaksymbols}', "");
Expect(1, 47, '\P{^Is_Line_Break=breaksymbols}', "");
Expect(0, 46, '\p{Is_Line_Break=breaksymbols}', "");
Expect(1, 46, '\p{^Is_Line_Break=breaksymbols}', "");
Expect(1, 46, '\P{Is_Line_Break=breaksymbols}', "");
Expect(0, 46, '\P{^Is_Line_Break=breaksymbols}', "");
Expect(1, 47, '\p{Is_Line_Break=_-Break	SYMBOLS}', "");
Expect(0, 47, '\p{^Is_Line_Break=_-Break	SYMBOLS}', "");
Expect(0, 47, '\P{Is_Line_Break=_-Break	SYMBOLS}', "");
Expect(1, 47, '\P{^Is_Line_Break=_-Break	SYMBOLS}', "");
Expect(0, 46, '\p{Is_Line_Break=_-Break	SYMBOLS}', "");
Expect(1, 46, '\p{^Is_Line_Break=_-Break	SYMBOLS}', "");
Expect(1, 46, '\P{Is_Line_Break=_-Break	SYMBOLS}', "");
Expect(0, 46, '\P{^Is_Line_Break=_-Break	SYMBOLS}', "");
Error('\p{Is_Lb=SY/a/}');
Error('\P{Is_Lb=SY/a/}');
Expect(1, 47, '\p{Is_Lb: sy}', "");
Expect(0, 47, '\p{^Is_Lb: sy}', "");
Expect(0, 47, '\P{Is_Lb: sy}', "");
Expect(1, 47, '\P{^Is_Lb: sy}', "");
Expect(0, 46, '\p{Is_Lb: sy}', "");
Expect(1, 46, '\p{^Is_Lb: sy}', "");
Expect(1, 46, '\P{Is_Lb: sy}', "");
Expect(0, 46, '\P{^Is_Lb: sy}', "");
Expect(1, 47, '\p{Is_Lb= _SY}', "");
Expect(0, 47, '\p{^Is_Lb= _SY}', "");
Expect(0, 47, '\P{Is_Lb= _SY}', "");
Expect(1, 47, '\P{^Is_Lb= _SY}', "");
Expect(0, 46, '\p{Is_Lb= _SY}', "");
Expect(1, 46, '\p{^Is_Lb= _SY}', "");
Expect(1, 46, '\P{Is_Lb= _SY}', "");
Expect(0, 46, '\P{^Is_Lb= _SY}', "");
Error('\p{Line_Break=- prefix/a/Numeric}');
Error('\P{Line_Break=- prefix/a/Numeric}');
Expect(1, 36, '\p{Line_Break=prefixnumeric}', "");
Expect(0, 36, '\p{^Line_Break=prefixnumeric}', "");
Expect(0, 36, '\P{Line_Break=prefixnumeric}', "");
Expect(1, 36, '\P{^Line_Break=prefixnumeric}', "");
Expect(0, 35, '\p{Line_Break=prefixnumeric}', "");
Expect(1, 35, '\p{^Line_Break=prefixnumeric}', "");
Expect(1, 35, '\P{Line_Break=prefixnumeric}', "");
Expect(0, 35, '\P{^Line_Break=prefixnumeric}', "");
Expect(1, 36, '\p{Line_Break= PREFIX	NUMERIC}', "");
Expect(0, 36, '\p{^Line_Break= PREFIX	NUMERIC}', "");
Expect(0, 36, '\P{Line_Break= PREFIX	NUMERIC}', "");
Expect(1, 36, '\P{^Line_Break= PREFIX	NUMERIC}', "");
Expect(0, 35, '\p{Line_Break= PREFIX	NUMERIC}', "");
Expect(1, 35, '\p{^Line_Break= PREFIX	NUMERIC}', "");
Expect(1, 35, '\P{Line_Break= PREFIX	NUMERIC}', "");
Expect(0, 35, '\P{^Line_Break= PREFIX	NUMERIC}', "");
Error('\p{Lb= :=PR}');
Error('\P{Lb= :=PR}');
Expect(1, 36, '\p{Lb=pr}', "");
Expect(0, 36, '\p{^Lb=pr}', "");
Expect(0, 36, '\P{Lb=pr}', "");
Expect(1, 36, '\P{^Lb=pr}', "");
Expect(0, 35, '\p{Lb=pr}', "");
Expect(1, 35, '\p{^Lb=pr}', "");
Expect(1, 35, '\P{Lb=pr}', "");
Expect(0, 35, '\P{^Lb=pr}', "");
Expect(1, 36, '\p{Lb=_PR}', "");
Expect(0, 36, '\p{^Lb=_PR}', "");
Expect(0, 36, '\P{Lb=_PR}', "");
Expect(1, 36, '\P{^Lb=_PR}', "");
Expect(0, 35, '\p{Lb=_PR}', "");
Expect(1, 35, '\p{^Lb=_PR}', "");
Expect(1, 35, '\P{Lb=_PR}', "");
Expect(0, 35, '\P{^Lb=_PR}', "");
Error('\p{Is_Line_Break=	-Prefix/a/Numeric}');
Error('\P{Is_Line_Break=	-Prefix/a/Numeric}');
Expect(1, 36, '\p{Is_Line_Break=prefixnumeric}', "");
Expect(0, 36, '\p{^Is_Line_Break=prefixnumeric}', "");
Expect(0, 36, '\P{Is_Line_Break=prefixnumeric}', "");
Expect(1, 36, '\P{^Is_Line_Break=prefixnumeric}', "");
Expect(0, 35, '\p{Is_Line_Break=prefixnumeric}', "");
Expect(1, 35, '\p{^Is_Line_Break=prefixnumeric}', "");
Expect(1, 35, '\P{Is_Line_Break=prefixnumeric}', "");
Expect(0, 35, '\P{^Is_Line_Break=prefixnumeric}', "");
Expect(1, 36, '\p{Is_Line_Break=- Prefix-numeric}', "");
Expect(0, 36, '\p{^Is_Line_Break=- Prefix-numeric}', "");
Expect(0, 36, '\P{Is_Line_Break=- Prefix-numeric}', "");
Expect(1, 36, '\P{^Is_Line_Break=- Prefix-numeric}', "");
Expect(0, 35, '\p{Is_Line_Break=- Prefix-numeric}', "");
Expect(1, 35, '\p{^Is_Line_Break=- Prefix-numeric}', "");
Expect(1, 35, '\P{Is_Line_Break=- Prefix-numeric}', "");
Expect(0, 35, '\P{^Is_Line_Break=- Prefix-numeric}', "");
Error('\p{Is_Lb= /a/pr}');
Error('\P{Is_Lb= /a/pr}');
Expect(1, 36, '\p{Is_Lb=pr}', "");
Expect(0, 36, '\p{^Is_Lb=pr}', "");
Expect(0, 36, '\P{Is_Lb=pr}', "");
Expect(1, 36, '\P{^Is_Lb=pr}', "");
Expect(0, 35, '\p{Is_Lb=pr}', "");
Expect(1, 35, '\p{^Is_Lb=pr}', "");
Expect(1, 35, '\P{Is_Lb=pr}', "");
Expect(0, 35, '\P{^Is_Lb=pr}', "");
Expect(1, 36, '\p{Is_Lb=__PR}', "");
Expect(0, 36, '\p{^Is_Lb=__PR}', "");
Expect(0, 36, '\P{Is_Lb=__PR}', "");
Expect(1, 36, '\P{^Is_Lb=__PR}', "");
Expect(0, 35, '\p{Is_Lb=__PR}', "");
Expect(1, 35, '\p{^Is_Lb=__PR}', "");
Expect(1, 35, '\P{Is_Lb=__PR}', "");
Expect(0, 35, '\P{^Is_Lb=__PR}', "");
Error('\p{Line_Break=Close-Parenthesis/a/}');
Error('\P{Line_Break=Close-Parenthesis/a/}');
Expect(1, 41, '\p{Line_Break=closeparenthesis}', "");
Expect(0, 41, '\p{^Line_Break=closeparenthesis}', "");
Expect(0, 41, '\P{Line_Break=closeparenthesis}', "");
Expect(1, 41, '\P{^Line_Break=closeparenthesis}', "");
Expect(0, 40, '\p{Line_Break=closeparenthesis}', "");
Expect(1, 40, '\p{^Line_Break=closeparenthesis}', "");
Expect(1, 40, '\P{Line_Break=closeparenthesis}', "");
Expect(0, 40, '\P{^Line_Break=closeparenthesis}', "");
Expect(1, 41, '\p{Line_Break=--ClosePARENTHESIS}', "");
Expect(0, 41, '\p{^Line_Break=--ClosePARENTHESIS}', "");
Expect(0, 41, '\P{Line_Break=--ClosePARENTHESIS}', "");
Expect(1, 41, '\P{^Line_Break=--ClosePARENTHESIS}', "");
Expect(0, 40, '\p{Line_Break=--ClosePARENTHESIS}', "");
Expect(1, 40, '\p{^Line_Break=--ClosePARENTHESIS}', "");
Expect(1, 40, '\P{Line_Break=--ClosePARENTHESIS}', "");
Expect(0, 40, '\P{^Line_Break=--ClosePARENTHESIS}', "");
Error('\p{Lb:   --CP/a/}');
Error('\P{Lb:   --CP/a/}');
Expect(1, 41, '\p{Lb:cp}', "");
Expect(0, 41, '\p{^Lb:cp}', "");
Expect(0, 41, '\P{Lb:cp}', "");
Expect(1, 41, '\P{^Lb:cp}', "");
Expect(0, 40, '\p{Lb:cp}', "");
Expect(1, 40, '\p{^Lb:cp}', "");
Expect(1, 40, '\P{Lb:cp}', "");
Expect(0, 40, '\P{^Lb:cp}', "");
Expect(1, 41, '\p{Lb=	-cp}', "");
Expect(0, 41, '\p{^Lb=	-cp}', "");
Expect(0, 41, '\P{Lb=	-cp}', "");
Expect(1, 41, '\P{^Lb=	-cp}', "");
Expect(0, 40, '\p{Lb=	-cp}', "");
Expect(1, 40, '\p{^Lb=	-cp}', "");
Expect(1, 40, '\P{Lb=	-cp}', "");
Expect(0, 40, '\P{^Lb=	-cp}', "");
Error('\p{Is_Line_Break=/a/_-CLOSE_Parenthesis}');
Error('\P{Is_Line_Break=/a/_-CLOSE_Parenthesis}');
Expect(1, 41, '\p{Is_Line_Break=closeparenthesis}', "");
Expect(0, 41, '\p{^Is_Line_Break=closeparenthesis}', "");
Expect(0, 41, '\P{Is_Line_Break=closeparenthesis}', "");
Expect(1, 41, '\P{^Is_Line_Break=closeparenthesis}', "");
Expect(0, 40, '\p{Is_Line_Break=closeparenthesis}', "");
Expect(1, 40, '\p{^Is_Line_Break=closeparenthesis}', "");
Expect(1, 40, '\P{Is_Line_Break=closeparenthesis}', "");
Expect(0, 40, '\P{^Is_Line_Break=closeparenthesis}', "");
Expect(1, 41, '\p{Is_Line_Break=-	Close	Parenthesis}', "");
Expect(0, 41, '\p{^Is_Line_Break=-	Close	Parenthesis}', "");
Expect(0, 41, '\P{Is_Line_Break=-	Close	Parenthesis}', "");
Expect(1, 41, '\P{^Is_Line_Break=-	Close	Parenthesis}', "");
Expect(0, 40, '\p{Is_Line_Break=-	Close	Parenthesis}', "");
Expect(1, 40, '\p{^Is_Line_Break=-	Close	Parenthesis}', "");
Expect(1, 40, '\P{Is_Line_Break=-	Close	Parenthesis}', "");
Expect(0, 40, '\P{^Is_Line_Break=-	Close	Parenthesis}', "");
Error('\p{Is_Lb=-CP/a/}');
Error('\P{Is_Lb=-CP/a/}');
Expect(1, 41, '\p{Is_Lb=cp}', "");
Expect(0, 41, '\p{^Is_Lb=cp}', "");
Expect(0, 41, '\P{Is_Lb=cp}', "");
Expect(1, 41, '\P{^Is_Lb=cp}', "");
Expect(0, 40, '\p{Is_Lb=cp}', "");
Expect(1, 40, '\p{^Is_Lb=cp}', "");
Expect(1, 40, '\P{Is_Lb=cp}', "");
Expect(0, 40, '\P{^Is_Lb=cp}', "");
Expect(1, 41, '\p{Is_Lb= 	CP}', "");
Expect(0, 41, '\p{^Is_Lb= 	CP}', "");
Expect(0, 41, '\P{Is_Lb= 	CP}', "");
Expect(1, 41, '\P{^Is_Lb= 	CP}', "");
Expect(0, 40, '\p{Is_Lb= 	CP}', "");
Expect(1, 40, '\p{^Is_Lb= 	CP}', "");
Expect(1, 40, '\P{Is_Lb= 	CP}', "");
Expect(0, 40, '\P{^Is_Lb= 	CP}', "");
Error('\p{Line_Break=:=-H3}');
Error('\P{Line_Break=:=-H3}');
Expect(1, 44059, '\p{Line_Break=h3}', "");
Expect(0, 44059, '\p{^Line_Break=h3}', "");
Expect(0, 44059, '\P{Line_Break=h3}', "");
Expect(1, 44059, '\P{^Line_Break=h3}', "");
Expect(0, 44032, '\p{Line_Break=h3}', "");
Expect(1, 44032, '\p{^Line_Break=h3}', "");
Expect(1, 44032, '\P{Line_Break=h3}', "");
Expect(0, 44032, '\P{^Line_Break=h3}', "");
Expect(1, 44059, '\p{Line_Break:   -_H3}', "");
Expect(0, 44059, '\p{^Line_Break:   -_H3}', "");
Expect(0, 44059, '\P{Line_Break:   -_H3}', "");
Expect(1, 44059, '\P{^Line_Break:   -_H3}', "");
Expect(0, 44032, '\p{Line_Break:   -_H3}', "");
Expect(1, 44032, '\p{^Line_Break:   -_H3}', "");
Expect(1, 44032, '\P{Line_Break:   -_H3}', "");
Expect(0, 44032, '\P{^Line_Break:   -_H3}', "");
Error('\p{Lb=	h3:=}');
Error('\P{Lb=	h3:=}');
Expect(1, 44059, '\p{Lb=h3}', "");
Expect(0, 44059, '\p{^Lb=h3}', "");
Expect(0, 44059, '\P{Lb=h3}', "");
Expect(1, 44059, '\P{^Lb=h3}', "");
Expect(0, 44032, '\p{Lb=h3}', "");
Expect(1, 44032, '\p{^Lb=h3}', "");
Expect(1, 44032, '\P{Lb=h3}', "");
Expect(0, 44032, '\P{^Lb=h3}', "");
Expect(1, 44059, '\p{Lb= -H3}', "");
Expect(0, 44059, '\p{^Lb= -H3}', "");
Expect(0, 44059, '\P{Lb= -H3}', "");
Expect(1, 44059, '\P{^Lb= -H3}', "");
Expect(0, 44032, '\p{Lb= -H3}', "");
Expect(1, 44032, '\p{^Lb= -H3}', "");
Expect(1, 44032, '\P{Lb= -H3}', "");
Expect(0, 44032, '\P{^Lb= -H3}', "");
Error('\p{Is_Line_Break=-H3:=}');
Error('\P{Is_Line_Break=-H3:=}');
Expect(1, 44059, '\p{Is_Line_Break=h3}', "");
Expect(0, 44059, '\p{^Is_Line_Break=h3}', "");
Expect(0, 44059, '\P{Is_Line_Break=h3}', "");
Expect(1, 44059, '\P{^Is_Line_Break=h3}', "");
Expect(0, 44032, '\p{Is_Line_Break=h3}', "");
Expect(1, 44032, '\p{^Is_Line_Break=h3}', "");
Expect(1, 44032, '\P{Is_Line_Break=h3}', "");
Expect(0, 44032, '\P{^Is_Line_Break=h3}', "");
Expect(1, 44059, '\p{Is_Line_Break= H3}', "");
Expect(0, 44059, '\p{^Is_Line_Break= H3}', "");
Expect(0, 44059, '\P{Is_Line_Break= H3}', "");
Expect(1, 44059, '\P{^Is_Line_Break= H3}', "");
Expect(0, 44032, '\p{Is_Line_Break= H3}', "");
Expect(1, 44032, '\p{^Is_Line_Break= H3}', "");
Expect(1, 44032, '\P{Is_Line_Break= H3}', "");
Expect(0, 44032, '\P{^Is_Line_Break= H3}', "");
Error('\p{Is_Lb=-:=h3}');
Error('\P{Is_Lb=-:=h3}');
Expect(1, 44059, '\p{Is_Lb=h3}', "");
Expect(0, 44059, '\p{^Is_Lb=h3}', "");
Expect(0, 44059, '\P{Is_Lb=h3}', "");
Expect(1, 44059, '\P{^Is_Lb=h3}', "");
Expect(0, 44032, '\p{Is_Lb=h3}', "");
Expect(1, 44032, '\p{^Is_Lb=h3}', "");
Expect(1, 44032, '\P{Is_Lb=h3}', "");
Expect(0, 44032, '\P{^Is_Lb=h3}', "");
Expect(1, 44059, '\p{Is_Lb=	-H3}', "");
Expect(0, 44059, '\p{^Is_Lb=	-H3}', "");
Expect(0, 44059, '\P{Is_Lb=	-H3}', "");
Expect(1, 44059, '\P{^Is_Lb=	-H3}', "");
Expect(0, 44032, '\p{Is_Lb=	-H3}', "");
Expect(1, 44032, '\p{^Is_Lb=	-H3}', "");
Expect(1, 44032, '\P{Is_Lb=	-H3}', "");
Expect(0, 44032, '\P{^Is_Lb=	-H3}', "");
Error('\p{Line_Break= _carriage Return/a/}');
Error('\P{Line_Break= _carriage Return/a/}');
Expect(1, 13, '\p{Line_Break=carriagereturn}', "");
Expect(0, 13, '\p{^Line_Break=carriagereturn}', "");
Expect(0, 13, '\P{Line_Break=carriagereturn}', "");
Expect(1, 13, '\P{^Line_Break=carriagereturn}', "");
Expect(0, 12, '\p{Line_Break=carriagereturn}', "");
Expect(1, 12, '\p{^Line_Break=carriagereturn}', "");
Expect(1, 12, '\P{Line_Break=carriagereturn}', "");
Expect(0, 12, '\P{^Line_Break=carriagereturn}', "");
Expect(1, 13, '\p{Line_Break= _carriage	Return}', "");
Expect(0, 13, '\p{^Line_Break= _carriage	Return}', "");
Expect(0, 13, '\P{Line_Break= _carriage	Return}', "");
Expect(1, 13, '\P{^Line_Break= _carriage	Return}', "");
Expect(0, 12, '\p{Line_Break= _carriage	Return}', "");
Expect(1, 12, '\p{^Line_Break= _carriage	Return}', "");
Expect(1, 12, '\P{Line_Break= _carriage	Return}', "");
Expect(0, 12, '\P{^Line_Break= _carriage	Return}', "");
Error('\p{Lb=-:=CR}');
Error('\P{Lb=-:=CR}');
Expect(1, 13, '\p{Lb=cr}', "");
Expect(0, 13, '\p{^Lb=cr}', "");
Expect(0, 13, '\P{Lb=cr}', "");
Expect(1, 13, '\P{^Lb=cr}', "");
Expect(0, 12, '\p{Lb=cr}', "");
Expect(1, 12, '\p{^Lb=cr}', "");
Expect(1, 12, '\P{Lb=cr}', "");
Expect(0, 12, '\P{^Lb=cr}', "");
Expect(1, 13, '\p{Lb=_CR}', "");
Expect(0, 13, '\p{^Lb=_CR}', "");
Expect(0, 13, '\P{Lb=_CR}', "");
Expect(1, 13, '\P{^Lb=_CR}', "");
Expect(0, 12, '\p{Lb=_CR}', "");
Expect(1, 12, '\p{^Lb=_CR}', "");
Expect(1, 12, '\P{Lb=_CR}', "");
Expect(0, 12, '\P{^Lb=_CR}', "");
Error('\p{Is_Line_Break=-:=Carriage	return}');
Error('\P{Is_Line_Break=-:=Carriage	return}');
Expect(1, 13, '\p{Is_Line_Break:carriagereturn}', "");
Expect(0, 13, '\p{^Is_Line_Break:carriagereturn}', "");
Expect(0, 13, '\P{Is_Line_Break:carriagereturn}', "");
Expect(1, 13, '\P{^Is_Line_Break:carriagereturn}', "");
Expect(0, 12, '\p{Is_Line_Break:carriagereturn}', "");
Expect(1, 12, '\p{^Is_Line_Break:carriagereturn}', "");
Expect(1, 12, '\P{Is_Line_Break:carriagereturn}', "");
Expect(0, 12, '\P{^Is_Line_Break:carriagereturn}', "");
Expect(1, 13, '\p{Is_Line_Break=_Carriage Return}', "");
Expect(0, 13, '\p{^Is_Line_Break=_Carriage Return}', "");
Expect(0, 13, '\P{Is_Line_Break=_Carriage Return}', "");
Expect(1, 13, '\P{^Is_Line_Break=_Carriage Return}', "");
Expect(0, 12, '\p{Is_Line_Break=_Carriage Return}', "");
Expect(1, 12, '\p{^Is_Line_Break=_Carriage Return}', "");
Expect(1, 12, '\P{Is_Line_Break=_Carriage Return}', "");
Expect(0, 12, '\P{^Is_Line_Break=_Carriage Return}', "");
Error('\p{Is_Lb=-:=cr}');
Error('\P{Is_Lb=-:=cr}');
Expect(1, 13, '\p{Is_Lb=cr}', "");
Expect(0, 13, '\p{^Is_Lb=cr}', "");
Expect(0, 13, '\P{Is_Lb=cr}', "");
Expect(1, 13, '\P{^Is_Lb=cr}', "");
Expect(0, 12, '\p{Is_Lb=cr}', "");
Expect(1, 12, '\p{^Is_Lb=cr}', "");
Expect(1, 12, '\P{Is_Lb=cr}', "");
Expect(0, 12, '\P{^Is_Lb=cr}', "");
Expect(1, 13, '\p{Is_Lb=-_CR}', "");
Expect(0, 13, '\p{^Is_Lb=-_CR}', "");
Expect(0, 13, '\P{Is_Lb=-_CR}', "");
Expect(1, 13, '\P{^Is_Lb=-_CR}', "");
Expect(0, 12, '\p{Is_Lb=-_CR}', "");
Expect(1, 12, '\p{^Is_Lb=-_CR}', "");
Expect(1, 12, '\P{Is_Lb=-_CR}', "");
Expect(0, 12, '\P{^Is_Lb=-_CR}', "");
Error('\p{Line_Break= _CLOSE:=punctuation}');
Error('\P{Line_Break= _CLOSE:=punctuation}');
Expect(1, 125, '\p{Line_Break=closepunctuation}', "");
Expect(0, 125, '\p{^Line_Break=closepunctuation}', "");
Expect(0, 125, '\P{Line_Break=closepunctuation}', "");
Expect(1, 125, '\P{^Line_Break=closepunctuation}', "");
Expect(0, 124, '\p{Line_Break=closepunctuation}', "");
Expect(1, 124, '\p{^Line_Break=closepunctuation}', "");
Expect(1, 124, '\P{Line_Break=closepunctuation}', "");
Expect(0, 124, '\P{^Line_Break=closepunctuation}', "");
Expect(1, 125, '\p{Line_Break: 	CLOSE Punctuation}', "");
Expect(0, 125, '\p{^Line_Break: 	CLOSE Punctuation}', "");
Expect(0, 125, '\P{Line_Break: 	CLOSE Punctuation}', "");
Expect(1, 125, '\P{^Line_Break: 	CLOSE Punctuation}', "");
Expect(0, 124, '\p{Line_Break: 	CLOSE Punctuation}', "");
Expect(1, 124, '\p{^Line_Break: 	CLOSE Punctuation}', "");
Expect(1, 124, '\P{Line_Break: 	CLOSE Punctuation}', "");
Expect(0, 124, '\P{^Line_Break: 	CLOSE Punctuation}', "");
Error('\p{Lb=/a/	 CL}');
Error('\P{Lb=/a/	 CL}');
Expect(1, 125, '\p{Lb=cl}', "");
Expect(0, 125, '\p{^Lb=cl}', "");
Expect(0, 125, '\P{Lb=cl}', "");
Expect(1, 125, '\P{^Lb=cl}', "");
Expect(0, 124, '\p{Lb=cl}', "");
Expect(1, 124, '\p{^Lb=cl}', "");
Expect(1, 124, '\P{Lb=cl}', "");
Expect(0, 124, '\P{^Lb=cl}', "");
Expect(1, 125, '\p{Lb=-CL}', "");
Expect(0, 125, '\p{^Lb=-CL}', "");
Expect(0, 125, '\P{Lb=-CL}', "");
Expect(1, 125, '\P{^Lb=-CL}', "");
Expect(0, 124, '\p{Lb=-CL}', "");
Expect(1, 124, '\p{^Lb=-CL}', "");
Expect(1, 124, '\P{Lb=-CL}', "");
Expect(0, 124, '\P{^Lb=-CL}', "");
Error('\p{Is_Line_Break=-close:=PUNCTUATION}');
Error('\P{Is_Line_Break=-close:=PUNCTUATION}');
Expect(1, 125, '\p{Is_Line_Break:   closepunctuation}', "");
Expect(0, 125, '\p{^Is_Line_Break:   closepunctuation}', "");
Expect(0, 125, '\P{Is_Line_Break:   closepunctuation}', "");
Expect(1, 125, '\P{^Is_Line_Break:   closepunctuation}', "");
Expect(0, 124, '\p{Is_Line_Break:   closepunctuation}', "");
Expect(1, 124, '\p{^Is_Line_Break:   closepunctuation}', "");
Expect(1, 124, '\P{Is_Line_Break:   closepunctuation}', "");
Expect(0, 124, '\P{^Is_Line_Break:   closepunctuation}', "");
Expect(1, 125, '\p{Is_Line_Break=--Close	punctuation}', "");
Expect(0, 125, '\p{^Is_Line_Break=--Close	punctuation}', "");
Expect(0, 125, '\P{Is_Line_Break=--Close	punctuation}', "");
Expect(1, 125, '\P{^Is_Line_Break=--Close	punctuation}', "");
Expect(0, 124, '\p{Is_Line_Break=--Close	punctuation}', "");
Expect(1, 124, '\p{^Is_Line_Break=--Close	punctuation}', "");
Expect(1, 124, '\P{Is_Line_Break=--Close	punctuation}', "");
Expect(0, 124, '\P{^Is_Line_Break=--Close	punctuation}', "");
Error('\p{Is_Lb=	:=cl}');
Error('\P{Is_Lb=	:=cl}');
Expect(1, 125, '\p{Is_Lb=cl}', "");
Expect(0, 125, '\p{^Is_Lb=cl}', "");
Expect(0, 125, '\P{Is_Lb=cl}', "");
Expect(1, 125, '\P{^Is_Lb=cl}', "");
Expect(0, 124, '\p{Is_Lb=cl}', "");
Expect(1, 124, '\p{^Is_Lb=cl}', "");
Expect(1, 124, '\P{Is_Lb=cl}', "");
Expect(0, 124, '\P{^Is_Lb=cl}', "");
Expect(1, 125, '\p{Is_Lb=		cl}', "");
Expect(0, 125, '\p{^Is_Lb=		cl}', "");
Expect(0, 125, '\P{Is_Lb=		cl}', "");
Expect(1, 125, '\P{^Is_Lb=		cl}', "");
Expect(0, 124, '\p{Is_Lb=		cl}', "");
Expect(1, 124, '\p{^Is_Lb=		cl}', "");
Expect(1, 124, '\P{Is_Lb=		cl}', "");
Expect(0, 124, '\P{^Is_Lb=		cl}', "");
Error('\p{Line_Break=/a/-CombiningMARK}');
Error('\P{Line_Break=/a/-CombiningMARK}');
Expect(1, 8, '\p{Line_Break=combiningmark}', "");
Expect(0, 8, '\p{^Line_Break=combiningmark}', "");
Expect(0, 8, '\P{Line_Break=combiningmark}', "");
Expect(1, 8, '\P{^Line_Break=combiningmark}', "");
Expect(0, 13, '\p{Line_Break=combiningmark}', "");
Expect(1, 13, '\p{^Line_Break=combiningmark}', "");
Expect(1, 13, '\P{Line_Break=combiningmark}', "");
Expect(0, 13, '\P{^Line_Break=combiningmark}', "");
Expect(1, 8, '\p{Line_Break=-Combining	MARK}', "");
Expect(0, 8, '\p{^Line_Break=-Combining	MARK}', "");
Expect(0, 8, '\P{Line_Break=-Combining	MARK}', "");
Expect(1, 8, '\P{^Line_Break=-Combining	MARK}', "");
Expect(0, 13, '\p{Line_Break=-Combining	MARK}', "");
Expect(1, 13, '\p{^Line_Break=-Combining	MARK}', "");
Expect(1, 13, '\P{Line_Break=-Combining	MARK}', "");
Expect(0, 13, '\P{^Line_Break=-Combining	MARK}', "");
Error('\p{Lb=:=CM}');
Error('\P{Lb=:=CM}');
Expect(1, 8, '\p{Lb=cm}', "");
Expect(0, 8, '\p{^Lb=cm}', "");
Expect(0, 8, '\P{Lb=cm}', "");
Expect(1, 8, '\P{^Lb=cm}', "");
Expect(0, 13, '\p{Lb=cm}', "");
Expect(1, 13, '\p{^Lb=cm}', "");
Expect(1, 13, '\P{Lb=cm}', "");
Expect(0, 13, '\P{^Lb=cm}', "");
Expect(1, 8, '\p{Lb=	CM}', "");
Expect(0, 8, '\p{^Lb=	CM}', "");
Expect(0, 8, '\P{Lb=	CM}', "");
Expect(1, 8, '\P{^Lb=	CM}', "");
Expect(0, 13, '\p{Lb=	CM}', "");
Expect(1, 13, '\p{^Lb=	CM}', "");
Expect(1, 13, '\P{Lb=	CM}', "");
Expect(0, 13, '\P{^Lb=	CM}', "");
Error('\p{Is_Line_Break=/a/ -Combiningmark}');
Error('\P{Is_Line_Break=/a/ -Combiningmark}');
Expect(1, 8, '\p{Is_Line_Break=combiningmark}', "");
Expect(0, 8, '\p{^Is_Line_Break=combiningmark}', "");
Expect(0, 8, '\P{Is_Line_Break=combiningmark}', "");
Expect(1, 8, '\P{^Is_Line_Break=combiningmark}', "");
Expect(0, 13, '\p{Is_Line_Break=combiningmark}', "");
Expect(1, 13, '\p{^Is_Line_Break=combiningmark}', "");
Expect(1, 13, '\P{Is_Line_Break=combiningmark}', "");
Expect(0, 13, '\P{^Is_Line_Break=combiningmark}', "");
Expect(1, 8, '\p{Is_Line_Break=	_Combining_MARK}', "");
Expect(0, 8, '\p{^Is_Line_Break=	_Combining_MARK}', "");
Expect(0, 8, '\P{Is_Line_Break=	_Combining_MARK}', "");
Expect(1, 8, '\P{^Is_Line_Break=	_Combining_MARK}', "");
Expect(0, 13, '\p{Is_Line_Break=	_Combining_MARK}', "");
Expect(1, 13, '\p{^Is_Line_Break=	_Combining_MARK}', "");
Expect(1, 13, '\P{Is_Line_Break=	_Combining_MARK}', "");
Expect(0, 13, '\P{^Is_Line_Break=	_Combining_MARK}', "");
Error('\p{Is_Lb::=_CM}');
Error('\P{Is_Lb::=_CM}');
Expect(1, 8, '\p{Is_Lb=cm}', "");
Expect(0, 8, '\p{^Is_Lb=cm}', "");
Expect(0, 8, '\P{Is_Lb=cm}', "");
Expect(1, 8, '\P{^Is_Lb=cm}', "");
Expect(0, 13, '\p{Is_Lb=cm}', "");
Expect(1, 13, '\p{^Is_Lb=cm}', "");
Expect(1, 13, '\P{Is_Lb=cm}', "");
Expect(0, 13, '\P{^Is_Lb=cm}', "");
Expect(1, 8, '\p{Is_Lb= _CM}', "");
Expect(0, 8, '\p{^Is_Lb= _CM}', "");
Expect(0, 8, '\P{Is_Lb= _CM}', "");
Expect(1, 8, '\P{^Is_Lb= _CM}', "");
Expect(0, 13, '\p{Is_Lb= _CM}', "");
Expect(1, 13, '\p{^Is_Lb= _CM}', "");
Expect(1, 13, '\P{Is_Lb= _CM}', "");
Expect(0, 13, '\P{^Is_Lb= _CM}', "");
Error('\p{Line_Break=-/a/mandatory	Break}');
Error('\P{Line_Break=-/a/mandatory	Break}');
Expect(1, 12, '\p{Line_Break=mandatorybreak}', "");
Expect(0, 12, '\p{^Line_Break=mandatorybreak}', "");
Expect(0, 12, '\P{Line_Break=mandatorybreak}', "");
Expect(1, 12, '\P{^Line_Break=mandatorybreak}', "");
Expect(0, 10, '\p{Line_Break=mandatorybreak}', "");
Expect(1, 10, '\p{^Line_Break=mandatorybreak}', "");
Expect(1, 10, '\P{Line_Break=mandatorybreak}', "");
Expect(0, 10, '\P{^Line_Break=mandatorybreak}', "");
Expect(1, 12, '\p{Line_Break=_	mandatory_BREAK}', "");
Expect(0, 12, '\p{^Line_Break=_	mandatory_BREAK}', "");
Expect(0, 12, '\P{Line_Break=_	mandatory_BREAK}', "");
Expect(1, 12, '\P{^Line_Break=_	mandatory_BREAK}', "");
Expect(0, 10, '\p{Line_Break=_	mandatory_BREAK}', "");
Expect(1, 10, '\p{^Line_Break=_	mandatory_BREAK}', "");
Expect(1, 10, '\P{Line_Break=_	mandatory_BREAK}', "");
Expect(0, 10, '\P{^Line_Break=_	mandatory_BREAK}', "");
Error('\p{Lb=	:=BK}');
Error('\P{Lb=	:=BK}');
Expect(1, 12, '\p{Lb=bk}', "");
Expect(0, 12, '\p{^Lb=bk}', "");
Expect(0, 12, '\P{Lb=bk}', "");
Expect(1, 12, '\P{^Lb=bk}', "");
Expect(0, 10, '\p{Lb=bk}', "");
Expect(1, 10, '\p{^Lb=bk}', "");
Expect(1, 10, '\P{Lb=bk}', "");
Expect(0, 10, '\P{^Lb=bk}', "");
Expect(1, 12, '\p{Lb=_bk}', "");
Expect(0, 12, '\p{^Lb=_bk}', "");
Expect(0, 12, '\P{Lb=_bk}', "");
Expect(1, 12, '\P{^Lb=_bk}', "");
Expect(0, 10, '\p{Lb=_bk}', "");
Expect(1, 10, '\p{^Lb=_bk}', "");
Expect(1, 10, '\P{Lb=_bk}', "");
Expect(0, 10, '\P{^Lb=_bk}', "");
Error('\p{Is_Line_Break=_mandatory:=break}');
Error('\P{Is_Line_Break=_mandatory:=break}');
Expect(1, 12, '\p{Is_Line_Break=mandatorybreak}', "");
Expect(0, 12, '\p{^Is_Line_Break=mandatorybreak}', "");
Expect(0, 12, '\P{Is_Line_Break=mandatorybreak}', "");
Expect(1, 12, '\P{^Is_Line_Break=mandatorybreak}', "");
Expect(0, 10, '\p{Is_Line_Break=mandatorybreak}', "");
Expect(1, 10, '\p{^Is_Line_Break=mandatorybreak}', "");
Expect(1, 10, '\P{Is_Line_Break=mandatorybreak}', "");
Expect(0, 10, '\P{^Is_Line_Break=mandatorybreak}', "");
Expect(1, 12, '\p{Is_Line_Break:   __MandatoryBreak}', "");
Expect(0, 12, '\p{^Is_Line_Break:   __MandatoryBreak}', "");
Expect(0, 12, '\P{Is_Line_Break:   __MandatoryBreak}', "");
Expect(1, 12, '\P{^Is_Line_Break:   __MandatoryBreak}', "");
Expect(0, 10, '\p{Is_Line_Break:   __MandatoryBreak}', "");
Expect(1, 10, '\p{^Is_Line_Break:   __MandatoryBreak}', "");
Expect(1, 10, '\P{Is_Line_Break:   __MandatoryBreak}', "");
Expect(0, 10, '\P{^Is_Line_Break:   __MandatoryBreak}', "");
Error('\p{Is_Lb=--BK:=}');
Error('\P{Is_Lb=--BK:=}');
Expect(1, 12, '\p{Is_Lb=bk}', "");
Expect(0, 12, '\p{^Is_Lb=bk}', "");
Expect(0, 12, '\P{Is_Lb=bk}', "");
Expect(1, 12, '\P{^Is_Lb=bk}', "");
Expect(0, 10, '\p{Is_Lb=bk}', "");
Expect(1, 10, '\p{^Is_Lb=bk}', "");
Expect(1, 10, '\P{Is_Lb=bk}', "");
Expect(0, 10, '\P{^Is_Lb=bk}', "");
Expect(1, 12, '\p{Is_Lb=	BK}', "");
Expect(0, 12, '\p{^Is_Lb=	BK}', "");
Expect(0, 12, '\P{Is_Lb=	BK}', "");
Expect(1, 12, '\P{^Is_Lb=	BK}', "");
Expect(0, 10, '\p{Is_Lb=	BK}', "");
Expect(1, 10, '\p{^Is_Lb=	BK}', "");
Expect(1, 10, '\P{Is_Lb=	BK}', "");
Expect(0, 10, '\P{^Is_Lb=	BK}', "");
Error('\p{Line_Break= /a/NONSTARTER}');
Error('\P{Line_Break= /a/NONSTARTER}');
Expect(1, 6102, '\p{Line_Break=nonstarter}', "");
Expect(0, 6102, '\p{^Line_Break=nonstarter}', "");
Expect(0, 6102, '\P{Line_Break=nonstarter}', "");
Expect(1, 6102, '\P{^Line_Break=nonstarter}', "");
Expect(0, 6101, '\p{Line_Break=nonstarter}', "");
Expect(1, 6101, '\p{^Line_Break=nonstarter}', "");
Expect(1, 6101, '\P{Line_Break=nonstarter}', "");
Expect(0, 6101, '\P{^Line_Break=nonstarter}', "");
Expect(1, 6102, '\p{Line_Break= 	NONSTARTER}', "");
Expect(0, 6102, '\p{^Line_Break= 	NONSTARTER}', "");
Expect(0, 6102, '\P{Line_Break= 	NONSTARTER}', "");
Expect(1, 6102, '\P{^Line_Break= 	NONSTARTER}', "");
Expect(0, 6101, '\p{Line_Break= 	NONSTARTER}', "");
Expect(1, 6101, '\p{^Line_Break= 	NONSTARTER}', "");
Expect(1, 6101, '\P{Line_Break= 	NONSTARTER}', "");
Expect(0, 6101, '\P{^Line_Break= 	NONSTARTER}', "");
Error('\p{Lb: :=NS}');
Error('\P{Lb: :=NS}');
Expect(1, 6102, '\p{Lb=ns}', "");
Expect(0, 6102, '\p{^Lb=ns}', "");
Expect(0, 6102, '\P{Lb=ns}', "");
Expect(1, 6102, '\P{^Lb=ns}', "");
Expect(0, 6101, '\p{Lb=ns}', "");
Expect(1, 6101, '\p{^Lb=ns}', "");
Expect(1, 6101, '\P{Lb=ns}', "");
Expect(0, 6101, '\P{^Lb=ns}', "");
Expect(1, 6102, '\p{Lb=_	NS}', "");
Expect(0, 6102, '\p{^Lb=_	NS}', "");
Expect(0, 6102, '\P{Lb=_	NS}', "");
Expect(1, 6102, '\P{^Lb=_	NS}', "");
Expect(0, 6101, '\p{Lb=_	NS}', "");
Expect(1, 6101, '\p{^Lb=_	NS}', "");
Expect(1, 6101, '\P{Lb=_	NS}', "");
Expect(0, 6101, '\P{^Lb=_	NS}', "");
Error('\p{Is_Line_Break=-:=NONSTARTER}');
Error('\P{Is_Line_Break=-:=NONSTARTER}');
Expect(1, 6102, '\p{Is_Line_Break=nonstarter}', "");
Expect(0, 6102, '\p{^Is_Line_Break=nonstarter}', "");
Expect(0, 6102, '\P{Is_Line_Break=nonstarter}', "");
Expect(1, 6102, '\P{^Is_Line_Break=nonstarter}', "");
Expect(0, 6101, '\p{Is_Line_Break=nonstarter}', "");
Expect(1, 6101, '\p{^Is_Line_Break=nonstarter}', "");
Expect(1, 6101, '\P{Is_Line_Break=nonstarter}', "");
Expect(0, 6101, '\P{^Is_Line_Break=nonstarter}', "");
Expect(1, 6102, '\p{Is_Line_Break=_	Nonstarter}', "");
Expect(0, 6102, '\p{^Is_Line_Break=_	Nonstarter}', "");
Expect(0, 6102, '\P{Is_Line_Break=_	Nonstarter}', "");
Expect(1, 6102, '\P{^Is_Line_Break=_	Nonstarter}', "");
Expect(0, 6101, '\p{Is_Line_Break=_	Nonstarter}', "");
Expect(1, 6101, '\p{^Is_Line_Break=_	Nonstarter}', "");
Expect(1, 6101, '\P{Is_Line_Break=_	Nonstarter}', "");
Expect(0, 6101, '\P{^Is_Line_Break=_	Nonstarter}', "");
Error('\p{Is_Lb=:=-	NS}');
Error('\P{Is_Lb=:=-	NS}');
Expect(1, 6102, '\p{Is_Lb=ns}', "");
Expect(0, 6102, '\p{^Is_Lb=ns}', "");
Expect(0, 6102, '\P{Is_Lb=ns}', "");
Expect(1, 6102, '\P{^Is_Lb=ns}', "");
Expect(0, 6101, '\p{Is_Lb=ns}', "");
Expect(1, 6101, '\p{^Is_Lb=ns}', "");
Expect(1, 6101, '\P{Is_Lb=ns}', "");
Expect(0, 6101, '\P{^Is_Lb=ns}', "");
Expect(1, 6102, '\p{Is_Lb=NS}', "");
Expect(0, 6102, '\p{^Is_Lb=NS}', "");
Expect(0, 6102, '\P{Is_Lb=NS}', "");
Expect(1, 6102, '\P{^Is_Lb=NS}', "");
Expect(0, 6101, '\p{Is_Lb=NS}', "");
Expect(1, 6101, '\p{^Is_Lb=NS}', "");
Expect(1, 6101, '\P{Is_Lb=NS}', "");
Expect(0, 6101, '\P{^Is_Lb=NS}', "");
Error('\p{Line_Break=	/a/JV}');
Error('\P{Line_Break=	/a/JV}');
Expect(1, 4519, '\p{Line_Break=jv}', "");
Expect(0, 4519, '\p{^Line_Break=jv}', "");
Expect(0, 4519, '\P{Line_Break=jv}', "");
Expect(1, 4519, '\P{^Line_Break=jv}', "");
Expect(0, 4447, '\p{Line_Break=jv}', "");
Expect(1, 4447, '\p{^Line_Break=jv}', "");
Expect(1, 4447, '\P{Line_Break=jv}', "");
Expect(0, 4447, '\P{^Line_Break=jv}', "");
Expect(1, 4519, '\p{Line_Break=  JV}', "");
Expect(0, 4519, '\p{^Line_Break=  JV}', "");
Expect(0, 4519, '\P{Line_Break=  JV}', "");
Expect(1, 4519, '\P{^Line_Break=  JV}', "");
Expect(0, 4447, '\p{Line_Break=  JV}', "");
Expect(1, 4447, '\p{^Line_Break=  JV}', "");
Expect(1, 4447, '\P{Line_Break=  JV}', "");
Expect(0, 4447, '\P{^Line_Break=  JV}', "");
Error('\p{Lb:	 JV/a/}');
Error('\P{Lb:	 JV/a/}');
Expect(1, 4519, '\p{Lb=jv}', "");
Expect(0, 4519, '\p{^Lb=jv}', "");
Expect(0, 4519, '\P{Lb=jv}', "");
Expect(1, 4519, '\P{^Lb=jv}', "");
Expect(0, 4447, '\p{Lb=jv}', "");
Expect(1, 4447, '\p{^Lb=jv}', "");
Expect(1, 4447, '\P{Lb=jv}', "");
Expect(0, 4447, '\P{^Lb=jv}', "");
Expect(1, 4519, '\p{Lb=-JV}', "");
Expect(0, 4519, '\p{^Lb=-JV}', "");
Expect(0, 4519, '\P{Lb=-JV}', "");
Expect(1, 4519, '\P{^Lb=-JV}', "");
Expect(0, 4447, '\p{Lb=-JV}', "");
Expect(1, 4447, '\p{^Lb=-JV}', "");
Expect(1, 4447, '\P{Lb=-JV}', "");
Expect(0, 4447, '\P{^Lb=-JV}', "");
Error('\p{Is_Line_Break=_/a/JV}');
Error('\P{Is_Line_Break=_/a/JV}');
Expect(1, 4519, '\p{Is_Line_Break=jv}', "");
Expect(0, 4519, '\p{^Is_Line_Break=jv}', "");
Expect(0, 4519, '\P{Is_Line_Break=jv}', "");
Expect(1, 4519, '\P{^Is_Line_Break=jv}', "");
Expect(0, 4447, '\p{Is_Line_Break=jv}', "");
Expect(1, 4447, '\p{^Is_Line_Break=jv}', "");
Expect(1, 4447, '\P{Is_Line_Break=jv}', "");
Expect(0, 4447, '\P{^Is_Line_Break=jv}', "");
Expect(1, 4519, '\p{Is_Line_Break=-JV}', "");
Expect(0, 4519, '\p{^Is_Line_Break=-JV}', "");
Expect(0, 4519, '\P{Is_Line_Break=-JV}', "");
Expect(1, 4519, '\P{^Is_Line_Break=-JV}', "");
Expect(0, 4447, '\p{Is_Line_Break=-JV}', "");
Expect(1, 4447, '\p{^Is_Line_Break=-JV}', "");
Expect(1, 4447, '\P{Is_Line_Break=-JV}', "");
Expect(0, 4447, '\P{^Is_Line_Break=-JV}', "");
Error('\p{Is_Lb=:=JV}');
Error('\P{Is_Lb=:=JV}');
Expect(1, 4519, '\p{Is_Lb=jv}', "");
Expect(0, 4519, '\p{^Is_Lb=jv}', "");
Expect(0, 4519, '\P{Is_Lb=jv}', "");
Expect(1, 4519, '\P{^Is_Lb=jv}', "");
Expect(0, 4447, '\p{Is_Lb=jv}', "");
Expect(1, 4447, '\p{^Is_Lb=jv}', "");
Expect(1, 4447, '\P{Is_Lb=jv}', "");
Expect(0, 4447, '\P{^Is_Lb=jv}', "");
Expect(1, 4519, '\p{Is_Lb=	JV}', "");
Expect(0, 4519, '\p{^Is_Lb=	JV}', "");
Expect(0, 4519, '\P{Is_Lb=	JV}', "");
Expect(1, 4519, '\P{^Is_Lb=	JV}', "");
Expect(0, 4447, '\p{Is_Lb=	JV}', "");
Expect(1, 4447, '\p{^Is_Lb=	JV}', "");
Expect(1, 4447, '\P{Is_Lb=	JV}', "");
Expect(0, 4447, '\P{^Is_Lb=	JV}', "");
Error('\p{Line_Break: _	QUOTATION/a/}');
Error('\P{Line_Break: _	QUOTATION/a/}');
Expect(1, 34, '\p{Line_Break=quotation}', "");
Expect(0, 34, '\p{^Line_Break=quotation}', "");
Expect(0, 34, '\P{Line_Break=quotation}', "");
Expect(1, 34, '\P{^Line_Break=quotation}', "");
Expect(0, 33, '\p{Line_Break=quotation}', "");
Expect(1, 33, '\p{^Line_Break=quotation}', "");
Expect(1, 33, '\P{Line_Break=quotation}', "");
Expect(0, 33, '\P{^Line_Break=quotation}', "");
Expect(1, 34, '\p{Line_Break= 	quotation}', "");
Expect(0, 34, '\p{^Line_Break= 	quotation}', "");
Expect(0, 34, '\P{Line_Break= 	quotation}', "");
Expect(1, 34, '\P{^Line_Break= 	quotation}', "");
Expect(0, 33, '\p{Line_Break= 	quotation}', "");
Expect(1, 33, '\p{^Line_Break= 	quotation}', "");
Expect(1, 33, '\P{Line_Break= 	quotation}', "");
Expect(0, 33, '\P{^Line_Break= 	quotation}', "");
Error('\p{Lb=	/a/qu}');
Error('\P{Lb=	/a/qu}');
Expect(1, 34, '\p{Lb=qu}', "");
Expect(0, 34, '\p{^Lb=qu}', "");
Expect(0, 34, '\P{Lb=qu}', "");
Expect(1, 34, '\P{^Lb=qu}', "");
Expect(0, 33, '\p{Lb=qu}', "");
Expect(1, 33, '\p{^Lb=qu}', "");
Expect(1, 33, '\P{Lb=qu}', "");
Expect(0, 33, '\P{^Lb=qu}', "");
Expect(1, 34, '\p{Lb=-	qu}', "");
Expect(0, 34, '\p{^Lb=-	qu}', "");
Expect(0, 34, '\P{Lb=-	qu}', "");
Expect(1, 34, '\P{^Lb=-	qu}', "");
Expect(0, 33, '\p{Lb=-	qu}', "");
Expect(1, 33, '\p{^Lb=-	qu}', "");
Expect(1, 33, '\P{Lb=-	qu}', "");
Expect(0, 33, '\P{^Lb=-	qu}', "");
Error('\p{Is_Line_Break: _quotation/a/}');
Error('\P{Is_Line_Break: _quotation/a/}');
Expect(1, 34, '\p{Is_Line_Break=quotation}', "");
Expect(0, 34, '\p{^Is_Line_Break=quotation}', "");
Expect(0, 34, '\P{Is_Line_Break=quotation}', "");
Expect(1, 34, '\P{^Is_Line_Break=quotation}', "");
Expect(0, 33, '\p{Is_Line_Break=quotation}', "");
Expect(1, 33, '\p{^Is_Line_Break=quotation}', "");
Expect(1, 33, '\P{Is_Line_Break=quotation}', "");
Expect(0, 33, '\P{^Is_Line_Break=quotation}', "");
Expect(1, 34, '\p{Is_Line_Break=QUOTATION}', "");
Expect(0, 34, '\p{^Is_Line_Break=QUOTATION}', "");
Expect(0, 34, '\P{Is_Line_Break=QUOTATION}', "");
Expect(1, 34, '\P{^Is_Line_Break=QUOTATION}', "");
Expect(0, 33, '\p{Is_Line_Break=QUOTATION}', "");
Expect(1, 33, '\p{^Is_Line_Break=QUOTATION}', "");
Expect(1, 33, '\P{Is_Line_Break=QUOTATION}', "");
Expect(0, 33, '\P{^Is_Line_Break=QUOTATION}', "");
Error('\p{Is_Lb=_-QU:=}');
Error('\P{Is_Lb=_-QU:=}');
Expect(1, 34, '\p{Is_Lb=qu}', "");
Expect(0, 34, '\p{^Is_Lb=qu}', "");
Expect(0, 34, '\P{Is_Lb=qu}', "");
Expect(1, 34, '\P{^Is_Lb=qu}', "");
Expect(0, 33, '\p{Is_Lb=qu}', "");
Expect(1, 33, '\p{^Is_Lb=qu}', "");
Expect(1, 33, '\P{Is_Lb=qu}', "");
Expect(0, 33, '\P{^Is_Lb=qu}', "");
Expect(1, 34, '\p{Is_Lb= _QU}', "");
Expect(0, 34, '\p{^Is_Lb= _QU}', "");
Expect(0, 34, '\P{Is_Lb= _QU}', "");
Expect(1, 34, '\P{^Is_Lb= _QU}', "");
Expect(0, 33, '\p{Is_Lb= _QU}', "");
Expect(1, 33, '\p{^Is_Lb= _QU}', "");
Expect(1, 33, '\P{Is_Lb= _QU}', "");
Expect(0, 33, '\P{^Is_Lb= _QU}', "");
Error('\p{Line_Break=:= -infix Numeric}');
Error('\P{Line_Break=:= -infix Numeric}');
Expect(1, 44, '\p{Line_Break=infixnumeric}', "");
Expect(0, 44, '\p{^Line_Break=infixnumeric}', "");
Expect(0, 44, '\P{Line_Break=infixnumeric}', "");
Expect(1, 44, '\P{^Line_Break=infixnumeric}', "");
Expect(0, 43, '\p{Line_Break=infixnumeric}', "");
Expect(1, 43, '\p{^Line_Break=infixnumeric}', "");
Expect(1, 43, '\P{Line_Break=infixnumeric}', "");
Expect(0, 43, '\P{^Line_Break=infixnumeric}', "");
Expect(1, 44, '\p{Line_Break=_-Infix_Numeric}', "");
Expect(0, 44, '\p{^Line_Break=_-Infix_Numeric}', "");
Expect(0, 44, '\P{Line_Break=_-Infix_Numeric}', "");
Expect(1, 44, '\P{^Line_Break=_-Infix_Numeric}', "");
Expect(0, 43, '\p{Line_Break=_-Infix_Numeric}', "");
Expect(1, 43, '\p{^Line_Break=_-Infix_Numeric}', "");
Expect(1, 43, '\P{Line_Break=_-Infix_Numeric}', "");
Expect(0, 43, '\P{^Line_Break=_-Infix_Numeric}', "");
Error('\p{Lb=_/a/IS}');
Error('\P{Lb=_/a/IS}');
Expect(1, 44, '\p{Lb=is}', "");
Expect(0, 44, '\p{^Lb=is}', "");
Expect(0, 44, '\P{Lb=is}', "");
Expect(1, 44, '\P{^Lb=is}', "");
Expect(0, 43, '\p{Lb=is}', "");
Expect(1, 43, '\p{^Lb=is}', "");
Expect(1, 43, '\P{Lb=is}', "");
Expect(0, 43, '\P{^Lb=is}', "");
Expect(1, 44, '\p{Lb=	_IS}', "");
Expect(0, 44, '\p{^Lb=	_IS}', "");
Expect(0, 44, '\P{Lb=	_IS}', "");
Expect(1, 44, '\P{^Lb=	_IS}', "");
Expect(0, 43, '\p{Lb=	_IS}', "");
Expect(1, 43, '\p{^Lb=	_IS}', "");
Expect(1, 43, '\P{Lb=	_IS}', "");
Expect(0, 43, '\P{^Lb=	_IS}', "");
Error('\p{Is_Line_Break=- infix/a/numeric}');
Error('\P{Is_Line_Break=- infix/a/numeric}');
Expect(1, 44, '\p{Is_Line_Break: infixnumeric}', "");
Expect(0, 44, '\p{^Is_Line_Break: infixnumeric}', "");
Expect(0, 44, '\P{Is_Line_Break: infixnumeric}', "");
Expect(1, 44, '\P{^Is_Line_Break: infixnumeric}', "");
Expect(0, 43, '\p{Is_Line_Break: infixnumeric}', "");
Expect(1, 43, '\p{^Is_Line_Break: infixnumeric}', "");
Expect(1, 43, '\P{Is_Line_Break: infixnumeric}', "");
Expect(0, 43, '\P{^Is_Line_Break: infixnumeric}', "");
Expect(1, 44, '\p{Is_Line_Break=_	INFIX_Numeric}', "");
Expect(0, 44, '\p{^Is_Line_Break=_	INFIX_Numeric}', "");
Expect(0, 44, '\P{Is_Line_Break=_	INFIX_Numeric}', "");
Expect(1, 44, '\P{^Is_Line_Break=_	INFIX_Numeric}', "");
Expect(0, 43, '\p{Is_Line_Break=_	INFIX_Numeric}', "");
Expect(1, 43, '\p{^Is_Line_Break=_	INFIX_Numeric}', "");
Expect(1, 43, '\P{Is_Line_Break=_	INFIX_Numeric}', "");
Expect(0, 43, '\P{^Is_Line_Break=_	INFIX_Numeric}', "");
Error('\p{Is_Lb=_ is:=}');
Error('\P{Is_Lb=_ is:=}');
Expect(1, 44, '\p{Is_Lb:is}', "");
Expect(0, 44, '\p{^Is_Lb:is}', "");
Expect(0, 44, '\P{Is_Lb:is}', "");
Expect(1, 44, '\P{^Is_Lb:is}', "");
Expect(0, 43, '\p{Is_Lb:is}', "");
Expect(1, 43, '\p{^Is_Lb:is}', "");
Expect(1, 43, '\P{Is_Lb:is}', "");
Expect(0, 43, '\P{^Is_Lb:is}', "");
Expect(1, 44, '\p{Is_Lb=	_IS}', "");
Expect(0, 44, '\p{^Is_Lb=	_IS}', "");
Expect(0, 44, '\P{Is_Lb=	_IS}', "");
Expect(1, 44, '\P{^Is_Lb=	_IS}', "");
Expect(0, 43, '\p{Is_Lb=	_IS}', "");
Expect(1, 43, '\p{^Is_Lb=	_IS}', "");
Expect(1, 43, '\P{Is_Lb=	_IS}', "");
Expect(0, 43, '\P{^Is_Lb=	_IS}', "");
Error('\p{Line_Break= _Inseparable:=}');
Error('\P{Line_Break= _Inseparable:=}');
Expect(1, 8230, '\p{Line_Break:   inseparable}', "");
Expect(0, 8230, '\p{^Line_Break:   inseparable}', "");
Expect(0, 8230, '\P{Line_Break:   inseparable}', "");
Expect(1, 8230, '\P{^Line_Break:   inseparable}', "");
Expect(0, 8227, '\p{Line_Break:   inseparable}', "");
Expect(1, 8227, '\p{^Line_Break:   inseparable}', "");
Expect(1, 8227, '\P{Line_Break:   inseparable}', "");
Expect(0, 8227, '\P{^Line_Break:   inseparable}', "");
Expect(1, 8230, '\p{Line_Break=- inseparable}', "");
Expect(0, 8230, '\p{^Line_Break=- inseparable}', "");
Expect(0, 8230, '\P{Line_Break=- inseparable}', "");
Expect(1, 8230, '\P{^Line_Break=- inseparable}', "");
Expect(0, 8227, '\p{Line_Break=- inseparable}', "");
Expect(1, 8227, '\p{^Line_Break=- inseparable}', "");
Expect(1, 8227, '\P{Line_Break=- inseparable}', "");
Expect(0, 8227, '\P{^Line_Break=- inseparable}', "");
Error('\p{Lb=:= IN}');
Error('\P{Lb=:= IN}');
Expect(1, 8230, '\p{Lb=in}', "");
Expect(0, 8230, '\p{^Lb=in}', "");
Expect(0, 8230, '\P{Lb=in}', "");
Expect(1, 8230, '\P{^Lb=in}', "");
Expect(0, 8227, '\p{Lb=in}', "");
Expect(1, 8227, '\p{^Lb=in}', "");
Expect(1, 8227, '\P{Lb=in}', "");
Expect(0, 8227, '\P{^Lb=in}', "");
Expect(1, 8230, '\p{Lb:   -IN}', "");
Expect(0, 8230, '\p{^Lb:   -IN}', "");
Expect(0, 8230, '\P{Lb:   -IN}', "");
Expect(1, 8230, '\P{^Lb:   -IN}', "");
Expect(0, 8227, '\p{Lb:   -IN}', "");
Expect(1, 8227, '\p{^Lb:   -IN}', "");
Expect(1, 8227, '\P{Lb:   -IN}', "");
Expect(0, 8227, '\P{^Lb:   -IN}', "");
Error('\p{Is_Line_Break=:=_Inseperable}');
Error('\P{Is_Line_Break=:=_Inseperable}');
Expect(1, 8230, '\p{Is_Line_Break=inseperable}', "");
Expect(0, 8230, '\p{^Is_Line_Break=inseperable}', "");
Expect(0, 8230, '\P{Is_Line_Break=inseperable}', "");
Expect(1, 8230, '\P{^Is_Line_Break=inseperable}', "");
Expect(0, 8227, '\p{Is_Line_Break=inseperable}', "");
Expect(1, 8227, '\p{^Is_Line_Break=inseperable}', "");
Expect(1, 8227, '\P{Is_Line_Break=inseperable}', "");
Expect(0, 8227, '\P{^Is_Line_Break=inseperable}', "");
Expect(1, 8230, '\p{Is_Line_Break=  Inseperable}', "");
Expect(0, 8230, '\p{^Is_Line_Break=  Inseperable}', "");
Expect(0, 8230, '\P{Is_Line_Break=  Inseperable}', "");
Expect(1, 8230, '\P{^Is_Line_Break=  Inseperable}', "");
Expect(0, 8227, '\p{Is_Line_Break=  Inseperable}', "");
Expect(1, 8227, '\p{^Is_Line_Break=  Inseperable}', "");
Expect(1, 8227, '\P{Is_Line_Break=  Inseperable}', "");
Expect(0, 8227, '\P{^Is_Line_Break=  Inseperable}', "");
Error('\p{Is_Lb= Inseparable/a/}');
Error('\P{Is_Lb= Inseparable/a/}');
Expect(1, 8230, '\p{Is_Lb:   inseparable}', "");
Expect(0, 8230, '\p{^Is_Lb:   inseparable}', "");
Expect(0, 8230, '\P{Is_Lb:   inseparable}', "");
Expect(1, 8230, '\P{^Is_Lb:   inseparable}', "");
Expect(0, 8227, '\p{Is_Lb:   inseparable}', "");
Expect(1, 8227, '\p{^Is_Lb:   inseparable}', "");
Expect(1, 8227, '\P{Is_Lb:   inseparable}', "");
Expect(0, 8227, '\P{^Is_Lb:   inseparable}', "");
Expect(1, 8230, '\p{Is_Lb=	 INSEPARABLE}', "");
Expect(0, 8230, '\p{^Is_Lb=	 INSEPARABLE}', "");
Expect(0, 8230, '\P{Is_Lb=	 INSEPARABLE}', "");
Expect(1, 8230, '\P{^Is_Lb=	 INSEPARABLE}', "");
Expect(0, 8227, '\p{Is_Lb=	 INSEPARABLE}', "");
Expect(1, 8227, '\p{^Is_Lb=	 INSEPARABLE}', "");
Expect(1, 8227, '\P{Is_Lb=	 INSEPARABLE}', "");
Expect(0, 8227, '\P{^Is_Lb=	 INSEPARABLE}', "");
Error('\p{Line_Break=-:=complex_CONTEXT}');
Error('\P{Line_Break=-:=complex_CONTEXT}');
Expect(1, 3642, '\p{Line_Break=complexcontext}', "");
Expect(0, 3642, '\p{^Line_Break=complexcontext}', "");
Expect(0, 3642, '\P{Line_Break=complexcontext}', "");
Expect(1, 3642, '\P{^Line_Break=complexcontext}', "");
Expect(0, 3584, '\p{Line_Break=complexcontext}', "");
Expect(1, 3584, '\p{^Line_Break=complexcontext}', "");
Expect(1, 3584, '\P{Line_Break=complexcontext}', "");
Expect(0, 3584, '\P{^Line_Break=complexcontext}', "");
Expect(1, 3642, '\p{Line_Break=-	ComplexCONTEXT}', "");
Expect(0, 3642, '\p{^Line_Break=-	ComplexCONTEXT}', "");
Expect(0, 3642, '\P{Line_Break=-	ComplexCONTEXT}', "");
Expect(1, 3642, '\P{^Line_Break=-	ComplexCONTEXT}', "");
Expect(0, 3584, '\p{Line_Break=-	ComplexCONTEXT}', "");
Expect(1, 3584, '\p{^Line_Break=-	ComplexCONTEXT}', "");
Expect(1, 3584, '\P{Line_Break=-	ComplexCONTEXT}', "");
Expect(0, 3584, '\P{^Line_Break=-	ComplexCONTEXT}', "");
Error('\p{Lb=	:=SA}');
Error('\P{Lb=	:=SA}');
Expect(1, 3642, '\p{Lb=sa}', "");
Expect(0, 3642, '\p{^Lb=sa}', "");
Expect(0, 3642, '\P{Lb=sa}', "");
Expect(1, 3642, '\P{^Lb=sa}', "");
Expect(0, 3584, '\p{Lb=sa}', "");
Expect(1, 3584, '\p{^Lb=sa}', "");
Expect(1, 3584, '\P{Lb=sa}', "");
Expect(0, 3584, '\P{^Lb=sa}', "");
Expect(1, 3642, '\p{Lb=-SA}', "");
Expect(0, 3642, '\p{^Lb=-SA}', "");
Expect(0, 3642, '\P{Lb=-SA}', "");
Expect(1, 3642, '\P{^Lb=-SA}', "");
Expect(0, 3584, '\p{Lb=-SA}', "");
Expect(1, 3584, '\p{^Lb=-SA}', "");
Expect(1, 3584, '\P{Lb=-SA}', "");
Expect(0, 3584, '\P{^Lb=-SA}', "");
Error('\p{Is_Line_Break=__ComplexContext/a/}');
Error('\P{Is_Line_Break=__ComplexContext/a/}');
Expect(1, 3642, '\p{Is_Line_Break=complexcontext}', "");
Expect(0, 3642, '\p{^Is_Line_Break=complexcontext}', "");
Expect(0, 3642, '\P{Is_Line_Break=complexcontext}', "");
Expect(1, 3642, '\P{^Is_Line_Break=complexcontext}', "");
Expect(0, 3584, '\p{Is_Line_Break=complexcontext}', "");
Expect(1, 3584, '\p{^Is_Line_Break=complexcontext}', "");
Expect(1, 3584, '\P{Is_Line_Break=complexcontext}', "");
Expect(0, 3584, '\P{^Is_Line_Break=complexcontext}', "");
Expect(1, 3642, '\p{Is_Line_Break=-_ComplexCONTEXT}', "");
Expect(0, 3642, '\p{^Is_Line_Break=-_ComplexCONTEXT}', "");
Expect(0, 3642, '\P{Is_Line_Break=-_ComplexCONTEXT}', "");
Expect(1, 3642, '\P{^Is_Line_Break=-_ComplexCONTEXT}', "");
Expect(0, 3584, '\p{Is_Line_Break=-_ComplexCONTEXT}', "");
Expect(1, 3584, '\p{^Is_Line_Break=-_ComplexCONTEXT}', "");
Expect(1, 3584, '\P{Is_Line_Break=-_ComplexCONTEXT}', "");
Expect(0, 3584, '\P{^Is_Line_Break=-_ComplexCONTEXT}', "");
Error('\p{Is_Lb=- SA:=}');
Error('\P{Is_Lb=- SA:=}');
Expect(1, 3642, '\p{Is_Lb=sa}', "");
Expect(0, 3642, '\p{^Is_Lb=sa}', "");
Expect(0, 3642, '\P{Is_Lb=sa}', "");
Expect(1, 3642, '\P{^Is_Lb=sa}', "");
Expect(0, 3584, '\p{Is_Lb=sa}', "");
Expect(1, 3584, '\p{^Is_Lb=sa}', "");
Expect(1, 3584, '\P{Is_Lb=sa}', "");
Expect(0, 3584, '\P{^Is_Lb=sa}', "");
Expect(1, 3642, '\p{Is_Lb=__SA}', "");
Expect(0, 3642, '\p{^Is_Lb=__SA}', "");
Expect(0, 3642, '\P{Is_Lb=__SA}', "");
Expect(1, 3642, '\P{^Is_Lb=__SA}', "");
Expect(0, 3584, '\p{Is_Lb=__SA}', "");
Expect(1, 3584, '\p{^Is_Lb=__SA}', "");
Expect(1, 3584, '\P{Is_Lb=__SA}', "");
Expect(0, 3584, '\P{^Is_Lb=__SA}', "");
Error('\p{Line_Break=-/a/hyphen}');
Error('\P{Line_Break=-/a/hyphen}');
Expect(1, 45, '\p{Line_Break:   hyphen}', "");
Expect(0, 45, '\p{^Line_Break:   hyphen}', "");
Expect(0, 45, '\P{Line_Break:   hyphen}', "");
Expect(1, 45, '\P{^Line_Break:   hyphen}', "");
Expect(0, 44, '\p{Line_Break:   hyphen}', "");
Expect(1, 44, '\p{^Line_Break:   hyphen}', "");
Expect(1, 44, '\P{Line_Break:   hyphen}', "");
Expect(0, 44, '\P{^Line_Break:   hyphen}', "");
Expect(1, 45, '\p{Line_Break:   	 HYPHEN}', "");
Expect(0, 45, '\p{^Line_Break:   	 HYPHEN}', "");
Expect(0, 45, '\P{Line_Break:   	 HYPHEN}', "");
Expect(1, 45, '\P{^Line_Break:   	 HYPHEN}', "");
Expect(0, 44, '\p{Line_Break:   	 HYPHEN}', "");
Expect(1, 44, '\p{^Line_Break:   	 HYPHEN}', "");
Expect(1, 44, '\P{Line_Break:   	 HYPHEN}', "");
Expect(0, 44, '\P{^Line_Break:   	 HYPHEN}', "");
Error('\p{Lb=:= 	HY}');
Error('\P{Lb=:= 	HY}');
Expect(1, 45, '\p{Lb=hy}', "");
Expect(0, 45, '\p{^Lb=hy}', "");
Expect(0, 45, '\P{Lb=hy}', "");
Expect(1, 45, '\P{^Lb=hy}', "");
Expect(0, 44, '\p{Lb=hy}', "");
Expect(1, 44, '\p{^Lb=hy}', "");
Expect(1, 44, '\P{Lb=hy}', "");
Expect(0, 44, '\P{^Lb=hy}', "");
Expect(1, 45, '\p{Lb:	_HY}', "");
Expect(0, 45, '\p{^Lb:	_HY}', "");
Expect(0, 45, '\P{Lb:	_HY}', "");
Expect(1, 45, '\P{^Lb:	_HY}', "");
Expect(0, 44, '\p{Lb:	_HY}', "");
Expect(1, 44, '\p{^Lb:	_HY}', "");
Expect(1, 44, '\P{Lb:	_HY}', "");
Expect(0, 44, '\P{^Lb:	_HY}', "");
Error('\p{Is_Line_Break=__HYPHEN:=}');
Error('\P{Is_Line_Break=__HYPHEN:=}');
Expect(1, 45, '\p{Is_Line_Break=hyphen}', "");
Expect(0, 45, '\p{^Is_Line_Break=hyphen}', "");
Expect(0, 45, '\P{Is_Line_Break=hyphen}', "");
Expect(1, 45, '\P{^Is_Line_Break=hyphen}', "");
Expect(0, 44, '\p{Is_Line_Break=hyphen}', "");
Expect(1, 44, '\p{^Is_Line_Break=hyphen}', "");
Expect(1, 44, '\P{Is_Line_Break=hyphen}', "");
Expect(0, 44, '\P{^Is_Line_Break=hyphen}', "");
Expect(1, 45, '\p{Is_Line_Break=_-Hyphen}', "");
Expect(0, 45, '\p{^Is_Line_Break=_-Hyphen}', "");
Expect(0, 45, '\P{Is_Line_Break=_-Hyphen}', "");
Expect(1, 45, '\P{^Is_Line_Break=_-Hyphen}', "");
Expect(0, 44, '\p{Is_Line_Break=_-Hyphen}', "");
Expect(1, 44, '\p{^Is_Line_Break=_-Hyphen}', "");
Expect(1, 44, '\P{Is_Line_Break=_-Hyphen}', "");
Expect(0, 44, '\P{^Is_Line_Break=_-Hyphen}', "");
Error('\p{Is_Lb=-/a/HY}');
Error('\P{Is_Lb=-/a/HY}');
Expect(1, 45, '\p{Is_Lb:hy}', "");
Expect(0, 45, '\p{^Is_Lb:hy}', "");
Expect(0, 45, '\P{Is_Lb:hy}', "");
Expect(1, 45, '\P{^Is_Lb:hy}', "");
Expect(0, 44, '\p{Is_Lb:hy}', "");
Expect(1, 44, '\p{^Is_Lb:hy}', "");
Expect(1, 44, '\P{Is_Lb:hy}', "");
Expect(0, 44, '\P{^Is_Lb:hy}', "");
Expect(1, 45, '\p{Is_Lb=__HY}', "");
Expect(0, 45, '\p{^Is_Lb=__HY}', "");
Expect(0, 45, '\P{Is_Lb=__HY}', "");
Expect(1, 45, '\P{^Is_Lb=__HY}', "");
Expect(0, 44, '\p{Is_Lb=__HY}', "");
Expect(1, 44, '\p{^Is_Lb=__HY}', "");
Expect(1, 44, '\P{Is_Lb=__HY}', "");
Expect(0, 44, '\P{^Is_Lb=__HY}', "");
Error('\p{Line_Break=_-Break/a/after}');
Error('\P{Line_Break=_-Break/a/after}');
Expect(1, 9, '\p{Line_Break:   breakafter}', "");
Expect(0, 9, '\p{^Line_Break:   breakafter}', "");
Expect(0, 9, '\P{Line_Break:   breakafter}', "");
Expect(1, 9, '\P{^Line_Break:   breakafter}', "");
Expect(0, 8, '\p{Line_Break:   breakafter}', "");
Expect(1, 8, '\p{^Line_Break:   breakafter}', "");
Expect(1, 8, '\P{Line_Break:   breakafter}', "");
Expect(0, 8, '\P{^Line_Break:   breakafter}', "");
Expect(1, 9, '\p{Line_Break: -_BREAK After}', "");
Expect(0, 9, '\p{^Line_Break: -_BREAK After}', "");
Expect(0, 9, '\P{Line_Break: -_BREAK After}', "");
Expect(1, 9, '\P{^Line_Break: -_BREAK After}', "");
Expect(0, 8, '\p{Line_Break: -_BREAK After}', "");
Expect(1, 8, '\p{^Line_Break: -_BREAK After}', "");
Expect(1, 8, '\P{Line_Break: -_BREAK After}', "");
Expect(0, 8, '\P{^Line_Break: -_BREAK After}', "");
Error('\p{Lb=	/a/BA}');
Error('\P{Lb=	/a/BA}');
Expect(1, 9, '\p{Lb:   ba}', "");
Expect(0, 9, '\p{^Lb:   ba}', "");
Expect(0, 9, '\P{Lb:   ba}', "");
Expect(1, 9, '\P{^Lb:   ba}', "");
Expect(0, 8, '\p{Lb:   ba}', "");
Expect(1, 8, '\p{^Lb:   ba}', "");
Expect(1, 8, '\P{Lb:   ba}', "");
Expect(0, 8, '\P{^Lb:   ba}', "");
Expect(1, 9, '\p{Lb:    	BA}', "");
Expect(0, 9, '\p{^Lb:    	BA}', "");
Expect(0, 9, '\P{Lb:    	BA}', "");
Expect(1, 9, '\P{^Lb:    	BA}', "");
Expect(0, 8, '\p{Lb:    	BA}', "");
Expect(1, 8, '\p{^Lb:    	BA}', "");
Expect(1, 8, '\P{Lb:    	BA}', "");
Expect(0, 8, '\P{^Lb:    	BA}', "");
Error('\p{Is_Line_Break:	-_BreakAFTER:=}');
Error('\P{Is_Line_Break:	-_BreakAFTER:=}');
Expect(1, 9, '\p{Is_Line_Break=breakafter}', "");
Expect(0, 9, '\p{^Is_Line_Break=breakafter}', "");
Expect(0, 9, '\P{Is_Line_Break=breakafter}', "");
Expect(1, 9, '\P{^Is_Line_Break=breakafter}', "");
Expect(0, 8, '\p{Is_Line_Break=breakafter}', "");
Expect(1, 8, '\p{^Is_Line_Break=breakafter}', "");
Expect(1, 8, '\P{Is_Line_Break=breakafter}', "");
Expect(0, 8, '\P{^Is_Line_Break=breakafter}', "");
Expect(1, 9, '\p{Is_Line_Break=__Break-After}', "");
Expect(0, 9, '\p{^Is_Line_Break=__Break-After}', "");
Expect(0, 9, '\P{Is_Line_Break=__Break-After}', "");
Expect(1, 9, '\P{^Is_Line_Break=__Break-After}', "");
Expect(0, 8, '\p{Is_Line_Break=__Break-After}', "");
Expect(1, 8, '\p{^Is_Line_Break=__Break-After}', "");
Expect(1, 8, '\P{Is_Line_Break=__Break-After}', "");
Expect(0, 8, '\P{^Is_Line_Break=__Break-After}', "");
Error('\p{Is_Lb=:= -ba}');
Error('\P{Is_Lb=:= -ba}');
Expect(1, 9, '\p{Is_Lb=ba}', "");
Expect(0, 9, '\p{^Is_Lb=ba}', "");
Expect(0, 9, '\P{Is_Lb=ba}', "");
Expect(1, 9, '\P{^Is_Lb=ba}', "");
Expect(0, 8, '\p{Is_Lb=ba}', "");
Expect(1, 8, '\p{^Is_Lb=ba}', "");
Expect(1, 8, '\P{Is_Lb=ba}', "");
Expect(0, 8, '\P{^Is_Lb=ba}', "");
Expect(1, 9, '\p{Is_Lb=-_BA}', "");
Expect(0, 9, '\p{^Is_Lb=-_BA}', "");
Expect(0, 9, '\P{Is_Lb=-_BA}', "");
Expect(1, 9, '\P{^Is_Lb=-_BA}', "");
Expect(0, 8, '\p{Is_Lb=-_BA}', "");
Expect(1, 8, '\p{^Is_Lb=-_BA}', "");
Expect(1, 8, '\P{Is_Lb=-_BA}', "");
Expect(0, 8, '\P{^Is_Lb=-_BA}', "");
Error('\p{Line_Break=-LINE_feed:=}');
Error('\P{Line_Break=-LINE_feed:=}');
Expect(1, 10, '\p{Line_Break=linefeed}', "");
Expect(0, 10, '\p{^Line_Break=linefeed}', "");
Expect(0, 10, '\P{Line_Break=linefeed}', "");
Expect(1, 10, '\P{^Line_Break=linefeed}', "");
Expect(0, 9, '\p{Line_Break=linefeed}', "");
Expect(1, 9, '\p{^Line_Break=linefeed}', "");
Expect(1, 9, '\P{Line_Break=linefeed}', "");
Expect(0, 9, '\P{^Line_Break=linefeed}', "");
Expect(1, 10, '\p{Line_Break:	_-lineFeed}', "");
Expect(0, 10, '\p{^Line_Break:	_-lineFeed}', "");
Expect(0, 10, '\P{Line_Break:	_-lineFeed}', "");
Expect(1, 10, '\P{^Line_Break:	_-lineFeed}', "");
Expect(0, 9, '\p{Line_Break:	_-lineFeed}', "");
Expect(1, 9, '\p{^Line_Break:	_-lineFeed}', "");
Expect(1, 9, '\P{Line_Break:	_-lineFeed}', "");
Expect(0, 9, '\P{^Line_Break:	_-lineFeed}', "");
Error('\p{Lb=-LF/a/}');
Error('\P{Lb=-LF/a/}');
Expect(1, 10, '\p{Lb=lf}', "");
Expect(0, 10, '\p{^Lb=lf}', "");
Expect(0, 10, '\P{Lb=lf}', "");
Expect(1, 10, '\P{^Lb=lf}', "");
Expect(0, 9, '\p{Lb=lf}', "");
Expect(1, 9, '\p{^Lb=lf}', "");
Expect(1, 9, '\P{Lb=lf}', "");
Expect(0, 9, '\P{^Lb=lf}', "");
Expect(1, 10, '\p{Lb= -LF}', "");
Expect(0, 10, '\p{^Lb= -LF}', "");
Expect(0, 10, '\P{Lb= -LF}', "");
Expect(1, 10, '\P{^Lb= -LF}', "");
Expect(0, 9, '\p{Lb= -LF}', "");
Expect(1, 9, '\p{^Lb= -LF}', "");
Expect(1, 9, '\P{Lb= -LF}', "");
Expect(0, 9, '\P{^Lb= -LF}', "");
Error('\p{Is_Line_Break=/a/	-Line	Feed}');
Error('\P{Is_Line_Break=/a/	-Line	Feed}');
Expect(1, 10, '\p{Is_Line_Break=linefeed}', "");
Expect(0, 10, '\p{^Is_Line_Break=linefeed}', "");
Expect(0, 10, '\P{Is_Line_Break=linefeed}', "");
Expect(1, 10, '\P{^Is_Line_Break=linefeed}', "");
Expect(0, 9, '\p{Is_Line_Break=linefeed}', "");
Expect(1, 9, '\p{^Is_Line_Break=linefeed}', "");
Expect(1, 9, '\P{Is_Line_Break=linefeed}', "");
Expect(0, 9, '\P{^Is_Line_Break=linefeed}', "");
Expect(1, 10, '\p{Is_Line_Break= lineFeed}', "");
Expect(0, 10, '\p{^Is_Line_Break= lineFeed}', "");
Expect(0, 10, '\P{Is_Line_Break= lineFeed}', "");
Expect(1, 10, '\P{^Is_Line_Break= lineFeed}', "");
Expect(0, 9, '\p{Is_Line_Break= lineFeed}', "");
Expect(1, 9, '\p{^Is_Line_Break= lineFeed}', "");
Expect(1, 9, '\P{Is_Line_Break= lineFeed}', "");
Expect(0, 9, '\P{^Is_Line_Break= lineFeed}', "");
Error('\p{Is_Lb= :=LF}');
Error('\P{Is_Lb= :=LF}');
Expect(1, 10, '\p{Is_Lb=lf}', "");
Expect(0, 10, '\p{^Is_Lb=lf}', "");
Expect(0, 10, '\P{Is_Lb=lf}', "");
Expect(1, 10, '\P{^Is_Lb=lf}', "");
Expect(0, 9, '\p{Is_Lb=lf}', "");
Expect(1, 9, '\p{^Is_Lb=lf}', "");
Expect(1, 9, '\P{Is_Lb=lf}', "");
Expect(0, 9, '\P{^Is_Lb=lf}', "");
Expect(1, 10, '\p{Is_Lb= _LF}', "");
Expect(0, 10, '\p{^Is_Lb= _LF}', "");
Expect(0, 10, '\P{Is_Lb= _LF}', "");
Expect(1, 10, '\P{^Is_Lb= _LF}', "");
Expect(0, 9, '\p{Is_Lb= _LF}', "");
Expect(1, 9, '\p{^Is_Lb= _LF}', "");
Expect(1, 9, '\P{Is_Lb= _LF}', "");
Expect(0, 9, '\P{^Is_Lb= _LF}', "");
Error('\p{Line_Break:	 AMBIGUOUS:=}');
Error('\P{Line_Break:	 AMBIGUOUS:=}');
Expect(1, 168, '\p{Line_Break=ambiguous}', "");
Expect(0, 168, '\p{^Line_Break=ambiguous}', "");
Expect(0, 168, '\P{Line_Break=ambiguous}', "");
Expect(1, 168, '\P{^Line_Break=ambiguous}', "");
Expect(0, 166, '\p{Line_Break=ambiguous}', "");
Expect(1, 166, '\p{^Line_Break=ambiguous}', "");
Expect(1, 166, '\P{Line_Break=ambiguous}', "");
Expect(0, 166, '\P{^Line_Break=ambiguous}', "");
Expect(1, 168, '\p{Line_Break=--Ambiguous}', "");
Expect(0, 168, '\p{^Line_Break=--Ambiguous}', "");
Expect(0, 168, '\P{Line_Break=--Ambiguous}', "");
Expect(1, 168, '\P{^Line_Break=--Ambiguous}', "");
Expect(0, 166, '\p{Line_Break=--Ambiguous}', "");
Expect(1, 166, '\p{^Line_Break=--Ambiguous}', "");
Expect(1, 166, '\P{Line_Break=--Ambiguous}', "");
Expect(0, 166, '\P{^Line_Break=--Ambiguous}', "");
Error('\p{Lb=/a/_AI}');
Error('\P{Lb=/a/_AI}');
Expect(1, 168, '\p{Lb=ai}', "");
Expect(0, 168, '\p{^Lb=ai}', "");
Expect(0, 168, '\P{Lb=ai}', "");
Expect(1, 168, '\P{^Lb=ai}', "");
Expect(0, 166, '\p{Lb=ai}', "");
Expect(1, 166, '\p{^Lb=ai}', "");
Expect(1, 166, '\P{Lb=ai}', "");
Expect(0, 166, '\P{^Lb=ai}', "");
Expect(1, 168, '\p{Lb=		AI}', "");
Expect(0, 168, '\p{^Lb=		AI}', "");
Expect(0, 168, '\P{Lb=		AI}', "");
Expect(1, 168, '\P{^Lb=		AI}', "");
Expect(0, 166, '\p{Lb=		AI}', "");
Expect(1, 166, '\p{^Lb=		AI}', "");
Expect(1, 166, '\P{Lb=		AI}', "");
Expect(0, 166, '\P{^Lb=		AI}', "");
Error('\p{Is_Line_Break=_:=Ambiguous}');
Error('\P{Is_Line_Break=_:=Ambiguous}');
Expect(1, 168, '\p{Is_Line_Break=ambiguous}', "");
Expect(0, 168, '\p{^Is_Line_Break=ambiguous}', "");
Expect(0, 168, '\P{Is_Line_Break=ambiguous}', "");
Expect(1, 168, '\P{^Is_Line_Break=ambiguous}', "");
Expect(0, 166, '\p{Is_Line_Break=ambiguous}', "");
Expect(1, 166, '\p{^Is_Line_Break=ambiguous}', "");
Expect(1, 166, '\P{Is_Line_Break=ambiguous}', "");
Expect(0, 166, '\P{^Is_Line_Break=ambiguous}', "");
Expect(1, 168, '\p{Is_Line_Break=__AMBIGUOUS}', "");
Expect(0, 168, '\p{^Is_Line_Break=__AMBIGUOUS}', "");
Expect(0, 168, '\P{Is_Line_Break=__AMBIGUOUS}', "");
Expect(1, 168, '\P{^Is_Line_Break=__AMBIGUOUS}', "");
Expect(0, 166, '\p{Is_Line_Break=__AMBIGUOUS}', "");
Expect(1, 166, '\p{^Is_Line_Break=__AMBIGUOUS}', "");
Expect(1, 166, '\P{Is_Line_Break=__AMBIGUOUS}', "");
Expect(0, 166, '\P{^Is_Line_Break=__AMBIGUOUS}', "");
Error('\p{Is_Lb: _ ai/a/}');
Error('\P{Is_Lb: _ ai/a/}');
Expect(1, 168, '\p{Is_Lb=ai}', "");
Expect(0, 168, '\p{^Is_Lb=ai}', "");
Expect(0, 168, '\P{Is_Lb=ai}', "");
Expect(1, 168, '\P{^Is_Lb=ai}', "");
Expect(0, 166, '\p{Is_Lb=ai}', "");
Expect(1, 166, '\p{^Is_Lb=ai}', "");
Expect(1, 166, '\P{Is_Lb=ai}', "");
Expect(0, 166, '\P{^Is_Lb=ai}', "");
Expect(1, 168, '\p{Is_Lb=  ai}', "");
Expect(0, 168, '\p{^Is_Lb=  ai}', "");
Expect(0, 168, '\P{Is_Lb=  ai}', "");
Expect(1, 168, '\P{^Is_Lb=  ai}', "");
Expect(0, 166, '\p{Is_Lb=  ai}', "");
Expect(1, 166, '\p{^Is_Lb=  ai}', "");
Expect(1, 166, '\P{Is_Lb=  ai}', "");
Expect(0, 166, '\P{^Is_Lb=  ai}', "");
Error('\p{Line_Break=/a/contingent_Break}');
Error('\P{Line_Break=/a/contingent_Break}');
Expect(1, 65532, '\p{Line_Break=contingentbreak}', "");
Expect(0, 65532, '\p{^Line_Break=contingentbreak}', "");
Expect(0, 65532, '\P{Line_Break=contingentbreak}', "");
Expect(1, 65532, '\P{^Line_Break=contingentbreak}', "");
Expect(0, 65531, '\p{Line_Break=contingentbreak}', "");
Expect(1, 65531, '\p{^Line_Break=contingentbreak}', "");
Expect(1, 65531, '\P{Line_Break=contingentbreak}', "");
Expect(0, 65531, '\P{^Line_Break=contingentbreak}', "");
Expect(1, 65532, '\p{Line_Break=-Contingent	Break}', "");
Expect(0, 65532, '\p{^Line_Break=-Contingent	Break}', "");
Expect(0, 65532, '\P{Line_Break=-Contingent	Break}', "");
Expect(1, 65532, '\P{^Line_Break=-Contingent	Break}', "");
Expect(0, 65531, '\p{Line_Break=-Contingent	Break}', "");
Expect(1, 65531, '\p{^Line_Break=-Contingent	Break}', "");
Expect(1, 65531, '\P{Line_Break=-Contingent	Break}', "");
Expect(0, 65531, '\P{^Line_Break=-Contingent	Break}', "");
Error('\p{Lb= 	CB/a/}');
Error('\P{Lb= 	CB/a/}');
Expect(1, 65532, '\p{Lb=cb}', "");
Expect(0, 65532, '\p{^Lb=cb}', "");
Expect(0, 65532, '\P{Lb=cb}', "");
Expect(1, 65532, '\P{^Lb=cb}', "");
Expect(0, 65531, '\p{Lb=cb}', "");
Expect(1, 65531, '\p{^Lb=cb}', "");
Expect(1, 65531, '\P{Lb=cb}', "");
Expect(0, 65531, '\P{^Lb=cb}', "");
Expect(1, 65532, '\p{Lb=	 CB}', "");
Expect(0, 65532, '\p{^Lb=	 CB}', "");
Expect(0, 65532, '\P{Lb=	 CB}', "");
Expect(1, 65532, '\P{^Lb=	 CB}', "");
Expect(0, 65531, '\p{Lb=	 CB}', "");
Expect(1, 65531, '\p{^Lb=	 CB}', "");
Expect(1, 65531, '\P{Lb=	 CB}', "");
Expect(0, 65531, '\P{^Lb=	 CB}', "");
Error('\p{Is_Line_Break=- Contingent:=Break}');
Error('\P{Is_Line_Break=- Contingent:=Break}');
Expect(1, 65532, '\p{Is_Line_Break=contingentbreak}', "");
Expect(0, 65532, '\p{^Is_Line_Break=contingentbreak}', "");
Expect(0, 65532, '\P{Is_Line_Break=contingentbreak}', "");
Expect(1, 65532, '\P{^Is_Line_Break=contingentbreak}', "");
Expect(0, 65531, '\p{Is_Line_Break=contingentbreak}', "");
Expect(1, 65531, '\p{^Is_Line_Break=contingentbreak}', "");
Expect(1, 65531, '\P{Is_Line_Break=contingentbreak}', "");
Expect(0, 65531, '\P{^Is_Line_Break=contingentbreak}', "");
Expect(1, 65532, '\p{Is_Line_Break=	_Contingent	break}', "");
Expect(0, 65532, '\p{^Is_Line_Break=	_Contingent	break}', "");
Expect(0, 65532, '\P{Is_Line_Break=	_Contingent	break}', "");
Expect(1, 65532, '\P{^Is_Line_Break=	_Contingent	break}', "");
Expect(0, 65531, '\p{Is_Line_Break=	_Contingent	break}', "");
Expect(1, 65531, '\p{^Is_Line_Break=	_Contingent	break}', "");
Expect(1, 65531, '\P{Is_Line_Break=	_Contingent	break}', "");
Expect(0, 65531, '\P{^Is_Line_Break=	_Contingent	break}', "");
Error('\p{Is_Lb=:=	-cb}');
Error('\P{Is_Lb=:=	-cb}');
Expect(1, 65532, '\p{Is_Lb=cb}', "");
Expect(0, 65532, '\p{^Is_Lb=cb}', "");
Expect(0, 65532, '\P{Is_Lb=cb}', "");
Expect(1, 65532, '\P{^Is_Lb=cb}', "");
Expect(0, 65531, '\p{Is_Lb=cb}', "");
Expect(1, 65531, '\p{^Is_Lb=cb}', "");
Expect(1, 65531, '\P{Is_Lb=cb}', "");
Expect(0, 65531, '\P{^Is_Lb=cb}', "");
Expect(1, 65532, '\p{Is_Lb=-	CB}', "");
Expect(0, 65532, '\p{^Is_Lb=-	CB}', "");
Expect(0, 65532, '\P{Is_Lb=-	CB}', "");
Expect(1, 65532, '\P{^Is_Lb=-	CB}', "");
Expect(0, 65531, '\p{Is_Lb=-	CB}', "");
Expect(1, 65531, '\p{^Is_Lb=-	CB}', "");
Expect(1, 65531, '\P{Is_Lb=-	CB}', "");
Expect(0, 65531, '\P{^Is_Lb=-	CB}', "");
Error('\p{Line_Break:   -/a/Exclamation}');
Error('\P{Line_Break:   -/a/Exclamation}');
Expect(1, 33, '\p{Line_Break=exclamation}', "");
Expect(0, 33, '\p{^Line_Break=exclamation}', "");
Expect(0, 33, '\P{Line_Break=exclamation}', "");
Expect(1, 33, '\P{^Line_Break=exclamation}', "");
Expect(0, 32, '\p{Line_Break=exclamation}', "");
Expect(1, 32, '\p{^Line_Break=exclamation}', "");
Expect(1, 32, '\P{Line_Break=exclamation}', "");
Expect(0, 32, '\P{^Line_Break=exclamation}', "");
Expect(1, 33, '\p{Line_Break= -EXCLAMATION}', "");
Expect(0, 33, '\p{^Line_Break= -EXCLAMATION}', "");
Expect(0, 33, '\P{Line_Break= -EXCLAMATION}', "");
Expect(1, 33, '\P{^Line_Break= -EXCLAMATION}', "");
Expect(0, 32, '\p{Line_Break= -EXCLAMATION}', "");
Expect(1, 32, '\p{^Line_Break= -EXCLAMATION}', "");
Expect(1, 32, '\P{Line_Break= -EXCLAMATION}', "");
Expect(0, 32, '\P{^Line_Break= -EXCLAMATION}', "");
Error('\p{Lb=/a/	EX}');
Error('\P{Lb=/a/	EX}');
Expect(1, 33, '\p{Lb=ex}', "");
Expect(0, 33, '\p{^Lb=ex}', "");
Expect(0, 33, '\P{Lb=ex}', "");
Expect(1, 33, '\P{^Lb=ex}', "");
Expect(0, 32, '\p{Lb=ex}', "");
Expect(1, 32, '\p{^Lb=ex}', "");
Expect(1, 32, '\P{Lb=ex}', "");
Expect(0, 32, '\P{^Lb=ex}', "");
Expect(1, 33, '\p{Lb=__EX}', "");
Expect(0, 33, '\p{^Lb=__EX}', "");
Expect(0, 33, '\P{Lb=__EX}', "");
Expect(1, 33, '\P{^Lb=__EX}', "");
Expect(0, 32, '\p{Lb=__EX}', "");
Expect(1, 32, '\p{^Lb=__EX}', "");
Expect(1, 32, '\P{Lb=__EX}', "");
Expect(0, 32, '\P{^Lb=__EX}', "");
Error('\p{Is_Line_Break= /a/Exclamation}');
Error('\P{Is_Line_Break= /a/Exclamation}');
Expect(1, 33, '\p{Is_Line_Break:exclamation}', "");
Expect(0, 33, '\p{^Is_Line_Break:exclamation}', "");
Expect(0, 33, '\P{Is_Line_Break:exclamation}', "");
Expect(1, 33, '\P{^Is_Line_Break:exclamation}', "");
Expect(0, 32, '\p{Is_Line_Break:exclamation}', "");
Expect(1, 32, '\p{^Is_Line_Break:exclamation}', "");
Expect(1, 32, '\P{Is_Line_Break:exclamation}', "");
Expect(0, 32, '\P{^Is_Line_Break:exclamation}', "");
Expect(1, 33, '\p{Is_Line_Break=-EXCLAMATION}', "");
Expect(0, 33, '\p{^Is_Line_Break=-EXCLAMATION}', "");
Expect(0, 33, '\P{Is_Line_Break=-EXCLAMATION}', "");
Expect(1, 33, '\P{^Is_Line_Break=-EXCLAMATION}', "");
Expect(0, 32, '\p{Is_Line_Break=-EXCLAMATION}', "");
Expect(1, 32, '\p{^Is_Line_Break=-EXCLAMATION}', "");
Expect(1, 32, '\P{Is_Line_Break=-EXCLAMATION}', "");
Expect(0, 32, '\P{^Is_Line_Break=-EXCLAMATION}', "");
Error('\p{Is_Lb=		ex/a/}');
Error('\P{Is_Lb=		ex/a/}');
Expect(1, 33, '\p{Is_Lb=ex}', "");
Expect(0, 33, '\p{^Is_Lb=ex}', "");
Expect(0, 33, '\P{Is_Lb=ex}', "");
Expect(1, 33, '\P{^Is_Lb=ex}', "");
Expect(0, 32, '\p{Is_Lb=ex}', "");
Expect(1, 32, '\p{^Is_Lb=ex}', "");
Expect(1, 32, '\P{Is_Lb=ex}', "");
Expect(0, 32, '\P{^Is_Lb=ex}', "");
Expect(1, 33, '\p{Is_Lb=_EX}', "");
Expect(0, 33, '\p{^Is_Lb=_EX}', "");
Expect(0, 33, '\P{Is_Lb=_EX}', "");
Expect(1, 33, '\P{^Is_Lb=_EX}', "");
Expect(0, 32, '\p{Is_Lb=_EX}', "");
Expect(1, 32, '\p{^Is_Lb=_EX}', "");
Expect(1, 32, '\P{Is_Lb=_EX}', "");
Expect(0, 32, '\P{^Is_Lb=_EX}', "");
Error('\p{Line_Break=/a/--Ideographic}');
Error('\P{Line_Break=/a/--Ideographic}');
Expect(1, 11929, '\p{Line_Break=ideographic}', "");
Expect(0, 11929, '\p{^Line_Break=ideographic}', "");
Expect(0, 11929, '\P{Line_Break=ideographic}', "");
Expect(1, 11929, '\P{^Line_Break=ideographic}', "");
Expect(0, 11903, '\p{Line_Break=ideographic}', "");
Expect(1, 11903, '\p{^Line_Break=ideographic}', "");
Expect(1, 11903, '\P{Line_Break=ideographic}', "");
Expect(0, 11903, '\P{^Line_Break=ideographic}', "");
Expect(1, 11929, '\p{Line_Break=	Ideographic}', "");
Expect(0, 11929, '\p{^Line_Break=	Ideographic}', "");
Expect(0, 11929, '\P{Line_Break=	Ideographic}', "");
Expect(1, 11929, '\P{^Line_Break=	Ideographic}', "");
Expect(0, 11903, '\p{Line_Break=	Ideographic}', "");
Expect(1, 11903, '\p{^Line_Break=	Ideographic}', "");
Expect(1, 11903, '\P{Line_Break=	Ideographic}', "");
Expect(0, 11903, '\P{^Line_Break=	Ideographic}', "");
Error('\p{Lb= _id/a/}');
Error('\P{Lb= _id/a/}');
Expect(1, 11929, '\p{Lb:	id}', "");
Expect(0, 11929, '\p{^Lb:	id}', "");
Expect(0, 11929, '\P{Lb:	id}', "");
Expect(1, 11929, '\P{^Lb:	id}', "");
Expect(0, 11903, '\p{Lb:	id}', "");
Expect(1, 11903, '\p{^Lb:	id}', "");
Expect(1, 11903, '\P{Lb:	id}', "");
Expect(0, 11903, '\P{^Lb:	id}', "");
Expect(1, 11929, '\p{Lb= 	ID}', "");
Expect(0, 11929, '\p{^Lb= 	ID}', "");
Expect(0, 11929, '\P{Lb= 	ID}', "");
Expect(1, 11929, '\P{^Lb= 	ID}', "");
Expect(0, 11903, '\p{Lb= 	ID}', "");
Expect(1, 11903, '\p{^Lb= 	ID}', "");
Expect(1, 11903, '\P{Lb= 	ID}', "");
Expect(0, 11903, '\P{^Lb= 	ID}', "");
Error('\p{Is_Line_Break=-Ideographic:=}');
Error('\P{Is_Line_Break=-Ideographic:=}');
Expect(1, 11929, '\p{Is_Line_Break=ideographic}', "");
Expect(0, 11929, '\p{^Is_Line_Break=ideographic}', "");
Expect(0, 11929, '\P{Is_Line_Break=ideographic}', "");
Expect(1, 11929, '\P{^Is_Line_Break=ideographic}', "");
Expect(0, 11903, '\p{Is_Line_Break=ideographic}', "");
Expect(1, 11903, '\p{^Is_Line_Break=ideographic}', "");
Expect(1, 11903, '\P{Is_Line_Break=ideographic}', "");
Expect(0, 11903, '\P{^Is_Line_Break=ideographic}', "");
Expect(1, 11929, '\p{Is_Line_Break=_Ideographic}', "");
Expect(0, 11929, '\p{^Is_Line_Break=_Ideographic}', "");
Expect(0, 11929, '\P{Is_Line_Break=_Ideographic}', "");
Expect(1, 11929, '\P{^Is_Line_Break=_Ideographic}', "");
Expect(0, 11903, '\p{Is_Line_Break=_Ideographic}', "");
Expect(1, 11903, '\p{^Is_Line_Break=_Ideographic}', "");
Expect(1, 11903, '\P{Is_Line_Break=_Ideographic}', "");
Expect(0, 11903, '\P{^Is_Line_Break=_Ideographic}', "");
Error('\p{Is_Lb=-:=ID}');
Error('\P{Is_Lb=-:=ID}');
Expect(1, 11929, '\p{Is_Lb=id}', "");
Expect(0, 11929, '\p{^Is_Lb=id}', "");
Expect(0, 11929, '\P{Is_Lb=id}', "");
Expect(1, 11929, '\P{^Is_Lb=id}', "");
Expect(0, 11903, '\p{Is_Lb=id}', "");
Expect(1, 11903, '\p{^Is_Lb=id}', "");
Expect(1, 11903, '\P{Is_Lb=id}', "");
Expect(0, 11903, '\P{^Is_Lb=id}', "");
Expect(1, 11929, '\p{Is_Lb=-ID}', "");
Expect(0, 11929, '\p{^Is_Lb=-ID}', "");
Expect(0, 11929, '\P{Is_Lb=-ID}', "");
Expect(1, 11929, '\P{^Is_Lb=-ID}', "");
Expect(0, 11903, '\p{Is_Lb=-ID}', "");
Expect(1, 11903, '\p{^Is_Lb=-ID}', "");
Expect(1, 11903, '\P{Is_Lb=-ID}', "");
Expect(0, 11903, '\P{^Is_Lb=-ID}', "");
Error('\p{Line_Break=	-WORD:=Joiner}');
Error('\P{Line_Break=	-WORD:=Joiner}');
Expect(1, 8288, '\p{Line_Break=wordjoiner}', "");
Expect(0, 8288, '\p{^Line_Break=wordjoiner}', "");
Expect(0, 8288, '\P{Line_Break=wordjoiner}', "");
Expect(1, 8288, '\P{^Line_Break=wordjoiner}', "");
Expect(0, 8287, '\p{Line_Break=wordjoiner}', "");
Expect(1, 8287, '\p{^Line_Break=wordjoiner}', "");
Expect(1, 8287, '\P{Line_Break=wordjoiner}', "");
Expect(0, 8287, '\P{^Line_Break=wordjoiner}', "");
Expect(1, 8288, '\p{Line_Break:	 Word Joiner}', "");
Expect(0, 8288, '\p{^Line_Break:	 Word Joiner}', "");
Expect(0, 8288, '\P{Line_Break:	 Word Joiner}', "");
Expect(1, 8288, '\P{^Line_Break:	 Word Joiner}', "");
Expect(0, 8287, '\p{Line_Break:	 Word Joiner}', "");
Expect(1, 8287, '\p{^Line_Break:	 Word Joiner}', "");
Expect(1, 8287, '\P{Line_Break:	 Word Joiner}', "");
Expect(0, 8287, '\P{^Line_Break:	 Word Joiner}', "");
Error('\p{Lb=_WJ:=}');
Error('\P{Lb=_WJ:=}');
Expect(1, 8288, '\p{Lb=wj}', "");
Expect(0, 8288, '\p{^Lb=wj}', "");
Expect(0, 8288, '\P{Lb=wj}', "");
Expect(1, 8288, '\P{^Lb=wj}', "");
Expect(0, 8287, '\p{Lb=wj}', "");
Expect(1, 8287, '\p{^Lb=wj}', "");
Expect(1, 8287, '\P{Lb=wj}', "");
Expect(0, 8287, '\P{^Lb=wj}', "");
Expect(1, 8288, '\p{Lb=-wj}', "");
Expect(0, 8288, '\p{^Lb=-wj}', "");
Expect(0, 8288, '\P{Lb=-wj}', "");
Expect(1, 8288, '\P{^Lb=-wj}', "");
Expect(0, 8287, '\p{Lb=-wj}', "");
Expect(1, 8287, '\p{^Lb=-wj}', "");
Expect(1, 8287, '\P{Lb=-wj}', "");
Expect(0, 8287, '\P{^Lb=-wj}', "");
Error('\p{Is_Line_Break=-/a/Word	Joiner}');
Error('\P{Is_Line_Break=-/a/Word	Joiner}');
Expect(1, 8288, '\p{Is_Line_Break=wordjoiner}', "");
Expect(0, 8288, '\p{^Is_Line_Break=wordjoiner}', "");
Expect(0, 8288, '\P{Is_Line_Break=wordjoiner}', "");
Expect(1, 8288, '\P{^Is_Line_Break=wordjoiner}', "");
Expect(0, 8287, '\p{Is_Line_Break=wordjoiner}', "");
Expect(1, 8287, '\p{^Is_Line_Break=wordjoiner}', "");
Expect(1, 8287, '\P{Is_Line_Break=wordjoiner}', "");
Expect(0, 8287, '\P{^Is_Line_Break=wordjoiner}', "");
Expect(1, 8288, '\p{Is_Line_Break=--word_Joiner}', "");
Expect(0, 8288, '\p{^Is_Line_Break=--word_Joiner}', "");
Expect(0, 8288, '\P{Is_Line_Break=--word_Joiner}', "");
Expect(1, 8288, '\P{^Is_Line_Break=--word_Joiner}', "");
Expect(0, 8287, '\p{Is_Line_Break=--word_Joiner}', "");
Expect(1, 8287, '\p{^Is_Line_Break=--word_Joiner}', "");
Expect(1, 8287, '\P{Is_Line_Break=--word_Joiner}', "");
Expect(0, 8287, '\P{^Is_Line_Break=--word_Joiner}', "");
Error('\p{Is_Lb=:=_	WJ}');
Error('\P{Is_Lb=:=_	WJ}');
Expect(1, 8288, '\p{Is_Lb=wj}', "");
Expect(0, 8288, '\p{^Is_Lb=wj}', "");
Expect(0, 8288, '\P{Is_Lb=wj}', "");
Expect(1, 8288, '\P{^Is_Lb=wj}', "");
Expect(0, 8287, '\p{Is_Lb=wj}', "");
Expect(1, 8287, '\p{^Is_Lb=wj}', "");
Expect(1, 8287, '\P{Is_Lb=wj}', "");
Expect(0, 8287, '\P{^Is_Lb=wj}', "");
Expect(1, 8288, '\p{Is_Lb:	 _WJ}', "");
Expect(0, 8288, '\p{^Is_Lb:	 _WJ}', "");
Expect(0, 8288, '\P{Is_Lb:	 _WJ}', "");
Expect(1, 8288, '\P{^Is_Lb:	 _WJ}', "");
Expect(0, 8287, '\p{Is_Lb:	 _WJ}', "");
Expect(1, 8287, '\p{^Is_Lb:	 _WJ}', "");
Expect(1, 8287, '\P{Is_Lb:	 _WJ}', "");
Expect(0, 8287, '\P{^Is_Lb:	 _WJ}', "");
Error('\p{Line_Break=/a/_h2}');
Error('\P{Line_Break=/a/_h2}');
Expect(1, 44032, '\p{Line_Break:	h2}', "");
Expect(0, 44032, '\p{^Line_Break:	h2}', "");
Expect(0, 44032, '\P{Line_Break:	h2}', "");
Expect(1, 44032, '\P{^Line_Break:	h2}', "");
Expect(0, 44031, '\p{Line_Break:	h2}', "");
Expect(1, 44031, '\p{^Line_Break:	h2}', "");
Expect(1, 44031, '\P{Line_Break:	h2}', "");
Expect(0, 44031, '\P{^Line_Break:	h2}', "");
Expect(1, 44032, '\p{Line_Break= -H2}', "");
Expect(0, 44032, '\p{^Line_Break= -H2}', "");
Expect(0, 44032, '\P{Line_Break= -H2}', "");
Expect(1, 44032, '\P{^Line_Break= -H2}', "");
Expect(0, 44031, '\p{Line_Break= -H2}', "");
Expect(1, 44031, '\p{^Line_Break= -H2}', "");
Expect(1, 44031, '\P{Line_Break= -H2}', "");
Expect(0, 44031, '\P{^Line_Break= -H2}', "");
Error('\p{Lb=/a/	-H2}');
Error('\P{Lb=/a/	-H2}');
Expect(1, 44032, '\p{Lb=h2}', "");
Expect(0, 44032, '\p{^Lb=h2}', "");
Expect(0, 44032, '\P{Lb=h2}', "");
Expect(1, 44032, '\P{^Lb=h2}', "");
Expect(0, 44031, '\p{Lb=h2}', "");
Expect(1, 44031, '\p{^Lb=h2}', "");
Expect(1, 44031, '\P{Lb=h2}', "");
Expect(0, 44031, '\P{^Lb=h2}', "");
Expect(1, 44032, '\p{Lb= 	H2}', "");
Expect(0, 44032, '\p{^Lb= 	H2}', "");
Expect(0, 44032, '\P{Lb= 	H2}', "");
Expect(1, 44032, '\P{^Lb= 	H2}', "");
Expect(0, 44031, '\p{Lb= 	H2}', "");
Expect(1, 44031, '\p{^Lb= 	H2}', "");
Expect(1, 44031, '\P{Lb= 	H2}', "");
Expect(0, 44031, '\P{^Lb= 	H2}', "");
Error('\p{Is_Line_Break=-h2/a/}');
Error('\P{Is_Line_Break=-h2/a/}');
Expect(1, 44032, '\p{Is_Line_Break=h2}', "");
Expect(0, 44032, '\p{^Is_Line_Break=h2}', "");
Expect(0, 44032, '\P{Is_Line_Break=h2}', "");
Expect(1, 44032, '\P{^Is_Line_Break=h2}', "");
Expect(0, 44031, '\p{Is_Line_Break=h2}', "");
Expect(1, 44031, '\p{^Is_Line_Break=h2}', "");
Expect(1, 44031, '\P{Is_Line_Break=h2}', "");
Expect(0, 44031, '\P{^Is_Line_Break=h2}', "");
Expect(1, 44032, '\p{Is_Line_Break=--H2}', "");
Expect(0, 44032, '\p{^Is_Line_Break=--H2}', "");
Expect(0, 44032, '\P{Is_Line_Break=--H2}', "");
Expect(1, 44032, '\P{^Is_Line_Break=--H2}', "");
Expect(0, 44031, '\p{Is_Line_Break=--H2}', "");
Expect(1, 44031, '\p{^Is_Line_Break=--H2}', "");
Expect(1, 44031, '\P{Is_Line_Break=--H2}', "");
Expect(0, 44031, '\P{^Is_Line_Break=--H2}', "");
Error('\p{Is_Lb=-:=H2}');
Error('\P{Is_Lb=-:=H2}');
Expect(1, 44032, '\p{Is_Lb=h2}', "");
Expect(0, 44032, '\p{^Is_Lb=h2}', "");
Expect(0, 44032, '\P{Is_Lb=h2}', "");
Expect(1, 44032, '\P{^Is_Lb=h2}', "");
Expect(0, 44031, '\p{Is_Lb=h2}', "");
Expect(1, 44031, '\p{^Is_Lb=h2}', "");
Expect(1, 44031, '\P{Is_Lb=h2}', "");
Expect(0, 44031, '\P{^Is_Lb=h2}', "");
Expect(1, 44032, '\p{Is_Lb=	-H2}', "");
Expect(0, 44032, '\p{^Is_Lb=	-H2}', "");
Expect(0, 44032, '\P{Is_Lb=	-H2}', "");
Expect(1, 44032, '\P{^Is_Lb=	-H2}', "");
Expect(0, 44031, '\p{Is_Lb=	-H2}', "");
Expect(1, 44031, '\p{^Is_Lb=	-H2}', "");
Expect(1, 44031, '\P{Is_Lb=	-H2}', "");
Expect(0, 44031, '\P{^Is_Lb=	-H2}', "");
Error('\p{Line_Break=-:=Break_BOTH}');
Error('\P{Line_Break=-:=Break_BOTH}');
Expect(1, 8212, '\p{Line_Break=breakboth}', "");
Expect(0, 8212, '\p{^Line_Break=breakboth}', "");
Expect(0, 8212, '\P{Line_Break=breakboth}', "");
Expect(1, 8212, '\P{^Line_Break=breakboth}', "");
Expect(0, 8211, '\p{Line_Break=breakboth}', "");
Expect(1, 8211, '\p{^Line_Break=breakboth}', "");
Expect(1, 8211, '\P{Line_Break=breakboth}', "");
Expect(0, 8211, '\P{^Line_Break=breakboth}', "");
Expect(1, 8212, '\p{Line_Break=_ Break BOTH}', "");
Expect(0, 8212, '\p{^Line_Break=_ Break BOTH}', "");
Expect(0, 8212, '\P{Line_Break=_ Break BOTH}', "");
Expect(1, 8212, '\P{^Line_Break=_ Break BOTH}', "");
Expect(0, 8211, '\p{Line_Break=_ Break BOTH}', "");
Expect(1, 8211, '\p{^Line_Break=_ Break BOTH}', "");
Expect(1, 8211, '\P{Line_Break=_ Break BOTH}', "");
Expect(0, 8211, '\P{^Line_Break=_ Break BOTH}', "");
Error('\p{Lb=:=-B2}');
Error('\P{Lb=:=-B2}');
Expect(1, 8212, '\p{Lb=b2}', "");
Expect(0, 8212, '\p{^Lb=b2}', "");
Expect(0, 8212, '\P{Lb=b2}', "");
Expect(1, 8212, '\P{^Lb=b2}', "");
Expect(0, 8211, '\p{Lb=b2}', "");
Expect(1, 8211, '\p{^Lb=b2}', "");
Expect(1, 8211, '\P{Lb=b2}', "");
Expect(0, 8211, '\P{^Lb=b2}', "");
Expect(1, 8212, '\p{Lb:	 B2}', "");
Expect(0, 8212, '\p{^Lb:	 B2}', "");
Expect(0, 8212, '\P{Lb:	 B2}', "");
Expect(1, 8212, '\P{^Lb:	 B2}', "");
Expect(0, 8211, '\p{Lb:	 B2}', "");
Expect(1, 8211, '\p{^Lb:	 B2}', "");
Expect(1, 8211, '\P{Lb:	 B2}', "");
Expect(0, 8211, '\P{^Lb:	 B2}', "");
Error('\p{Is_Line_Break=--break/a/both}');
Error('\P{Is_Line_Break=--break/a/both}');
Expect(1, 8212, '\p{Is_Line_Break:	breakboth}', "");
Expect(0, 8212, '\p{^Is_Line_Break:	breakboth}', "");
Expect(0, 8212, '\P{Is_Line_Break:	breakboth}', "");
Expect(1, 8212, '\P{^Is_Line_Break:	breakboth}', "");
Expect(0, 8211, '\p{Is_Line_Break:	breakboth}', "");
Expect(1, 8211, '\p{^Is_Line_Break:	breakboth}', "");
Expect(1, 8211, '\P{Is_Line_Break:	breakboth}', "");
Expect(0, 8211, '\P{^Is_Line_Break:	breakboth}', "");
Expect(1, 8212, '\p{Is_Line_Break=_	Break-BOTH}', "");
Expect(0, 8212, '\p{^Is_Line_Break=_	Break-BOTH}', "");
Expect(0, 8212, '\P{Is_Line_Break=_	Break-BOTH}', "");
Expect(1, 8212, '\P{^Is_Line_Break=_	Break-BOTH}', "");
Expect(0, 8211, '\p{Is_Line_Break=_	Break-BOTH}', "");
Expect(1, 8211, '\p{^Is_Line_Break=_	Break-BOTH}', "");
Expect(1, 8211, '\P{Is_Line_Break=_	Break-BOTH}', "");
Expect(0, 8211, '\P{^Is_Line_Break=_	Break-BOTH}', "");
Error('\p{Is_Lb=_/a/B2}');
Error('\P{Is_Lb=_/a/B2}');
Expect(1, 8212, '\p{Is_Lb=b2}', "");
Expect(0, 8212, '\p{^Is_Lb=b2}', "");
Expect(0, 8212, '\P{Is_Lb=b2}', "");
Expect(1, 8212, '\P{^Is_Lb=b2}', "");
Expect(0, 8211, '\p{Is_Lb=b2}', "");
Expect(1, 8211, '\p{^Is_Lb=b2}', "");
Expect(1, 8211, '\P{Is_Lb=b2}', "");
Expect(0, 8211, '\P{^Is_Lb=b2}', "");
Expect(1, 8212, '\p{Is_Lb=	_B2}', "");
Expect(0, 8212, '\p{^Is_Lb=	_B2}', "");
Expect(0, 8212, '\P{Is_Lb=	_B2}', "");
Expect(1, 8212, '\P{^Is_Lb=	_B2}', "");
Expect(0, 8211, '\p{Is_Lb=	_B2}', "");
Expect(1, 8211, '\p{^Is_Lb=	_B2}', "");
Expect(1, 8211, '\P{Is_Lb=	_B2}', "");
Expect(0, 8211, '\P{^Is_Lb=	_B2}', "");
Error('\p{Line_Break=/a/-Alphabetic}');
Error('\P{Line_Break=/a/-Alphabetic}');
Expect(1, 35, '\p{Line_Break=alphabetic}', "");
Expect(0, 35, '\p{^Line_Break=alphabetic}', "");
Expect(0, 35, '\P{Line_Break=alphabetic}', "");
Expect(1, 35, '\P{^Line_Break=alphabetic}', "");
Expect(0, 34, '\p{Line_Break=alphabetic}', "");
Expect(1, 34, '\p{^Line_Break=alphabetic}', "");
Expect(1, 34, '\P{Line_Break=alphabetic}', "");
Expect(0, 34, '\P{^Line_Break=alphabetic}', "");
Expect(1, 35, '\p{Line_Break=	alphabetic}', "");
Expect(0, 35, '\p{^Line_Break=	alphabetic}', "");
Expect(0, 35, '\P{Line_Break=	alphabetic}', "");
Expect(1, 35, '\P{^Line_Break=	alphabetic}', "");
Expect(0, 34, '\p{Line_Break=	alphabetic}', "");
Expect(1, 34, '\p{^Line_Break=	alphabetic}', "");
Expect(1, 34, '\P{Line_Break=	alphabetic}', "");
Expect(0, 34, '\P{^Line_Break=	alphabetic}', "");
Error('\p{Lb=_:=AL}');
Error('\P{Lb=_:=AL}');
Expect(1, 35, '\p{Lb=al}', "");
Expect(0, 35, '\p{^Lb=al}', "");
Expect(0, 35, '\P{Lb=al}', "");
Expect(1, 35, '\P{^Lb=al}', "");
Expect(0, 34, '\p{Lb=al}', "");
Expect(1, 34, '\p{^Lb=al}', "");
Expect(1, 34, '\P{Lb=al}', "");
Expect(0, 34, '\P{^Lb=al}', "");
Expect(1, 35, '\p{Lb: _ AL}', "");
Expect(0, 35, '\p{^Lb: _ AL}', "");
Expect(0, 35, '\P{Lb: _ AL}', "");
Expect(1, 35, '\P{^Lb: _ AL}', "");
Expect(0, 34, '\p{Lb: _ AL}', "");
Expect(1, 34, '\p{^Lb: _ AL}', "");
Expect(1, 34, '\P{Lb: _ AL}', "");
Expect(0, 34, '\P{^Lb: _ AL}', "");
Error('\p{Is_Line_Break=:=_-Alphabetic}');
Error('\P{Is_Line_Break=:=_-Alphabetic}');
Expect(1, 35, '\p{Is_Line_Break=alphabetic}', "");
Expect(0, 35, '\p{^Is_Line_Break=alphabetic}', "");
Expect(0, 35, '\P{Is_Line_Break=alphabetic}', "");
Expect(1, 35, '\P{^Is_Line_Break=alphabetic}', "");
Expect(0, 34, '\p{Is_Line_Break=alphabetic}', "");
Expect(1, 34, '\p{^Is_Line_Break=alphabetic}', "");
Expect(1, 34, '\P{Is_Line_Break=alphabetic}', "");
Expect(0, 34, '\P{^Is_Line_Break=alphabetic}', "");
Expect(1, 35, '\p{Is_Line_Break=- Alphabetic}', "");
Expect(0, 35, '\p{^Is_Line_Break=- Alphabetic}', "");
Expect(0, 35, '\P{Is_Line_Break=- Alphabetic}', "");
Expect(1, 35, '\P{^Is_Line_Break=- Alphabetic}', "");
Expect(0, 34, '\p{Is_Line_Break=- Alphabetic}', "");
Expect(1, 34, '\p{^Is_Line_Break=- Alphabetic}', "");
Expect(1, 34, '\P{Is_Line_Break=- Alphabetic}', "");
Expect(0, 34, '\P{^Is_Line_Break=- Alphabetic}', "");
Error('\p{Is_Lb: _ al/a/}');
Error('\P{Is_Lb: _ al/a/}');
Expect(1, 35, '\p{Is_Lb=al}', "");
Expect(0, 35, '\p{^Is_Lb=al}', "");
Expect(0, 35, '\P{Is_Lb=al}', "");
Expect(1, 35, '\P{^Is_Lb=al}', "");
Expect(0, 34, '\p{Is_Lb=al}', "");
Expect(1, 34, '\p{^Is_Lb=al}', "");
Expect(1, 34, '\P{Is_Lb=al}', "");
Expect(0, 34, '\P{^Is_Lb=al}', "");
Expect(1, 35, '\p{Is_Lb=-	al}', "");
Expect(0, 35, '\p{^Is_Lb=-	al}', "");
Expect(0, 35, '\P{Is_Lb=-	al}', "");
Expect(1, 35, '\P{^Is_Lb=-	al}', "");
Expect(0, 34, '\p{Is_Lb=-	al}', "");
Expect(1, 34, '\p{^Is_Lb=-	al}', "");
Expect(1, 34, '\P{Is_Lb=-	al}', "");
Expect(0, 34, '\P{^Is_Lb=-	al}', "");
Error('\p{Line_Break=	 postfix numeric/a/}');
Error('\P{Line_Break=	 postfix numeric/a/}');
Expect(1, 37, '\p{Line_Break=postfixnumeric}', "");
Expect(0, 37, '\p{^Line_Break=postfixnumeric}', "");
Expect(0, 37, '\P{Line_Break=postfixnumeric}', "");
Expect(1, 37, '\P{^Line_Break=postfixnumeric}', "");
Expect(0, 36, '\p{Line_Break=postfixnumeric}', "");
Expect(1, 36, '\p{^Line_Break=postfixnumeric}', "");
Expect(1, 36, '\P{Line_Break=postfixnumeric}', "");
Expect(0, 36, '\P{^Line_Break=postfixnumeric}', "");
Expect(1, 37, '\p{Line_Break= _POSTFIX	NUMERIC}', "");
Expect(0, 37, '\p{^Line_Break= _POSTFIX	NUMERIC}', "");
Expect(0, 37, '\P{Line_Break= _POSTFIX	NUMERIC}', "");
Expect(1, 37, '\P{^Line_Break= _POSTFIX	NUMERIC}', "");
Expect(0, 36, '\p{Line_Break= _POSTFIX	NUMERIC}', "");
Expect(1, 36, '\p{^Line_Break= _POSTFIX	NUMERIC}', "");
Expect(1, 36, '\P{Line_Break= _POSTFIX	NUMERIC}', "");
Expect(0, 36, '\P{^Line_Break= _POSTFIX	NUMERIC}', "");
Error('\p{Lb=_/a/po}');
Error('\P{Lb=_/a/po}');
Expect(1, 37, '\p{Lb=po}', "");
Expect(0, 37, '\p{^Lb=po}', "");
Expect(0, 37, '\P{Lb=po}', "");
Expect(1, 37, '\P{^Lb=po}', "");
Expect(0, 36, '\p{Lb=po}', "");
Expect(1, 36, '\p{^Lb=po}', "");
Expect(1, 36, '\P{Lb=po}', "");
Expect(0, 36, '\P{^Lb=po}', "");
Expect(1, 37, '\p{Lb:	_PO}', "");
Expect(0, 37, '\p{^Lb:	_PO}', "");
Expect(0, 37, '\P{Lb:	_PO}', "");
Expect(1, 37, '\P{^Lb:	_PO}', "");
Expect(0, 36, '\p{Lb:	_PO}', "");
Expect(1, 36, '\p{^Lb:	_PO}', "");
Expect(1, 36, '\P{Lb:	_PO}', "");
Expect(0, 36, '\P{^Lb:	_PO}', "");
Error('\p{Is_Line_Break=-postfix Numeric/a/}');
Error('\P{Is_Line_Break=-postfix Numeric/a/}');
Expect(1, 37, '\p{Is_Line_Break=postfixnumeric}', "");
Expect(0, 37, '\p{^Is_Line_Break=postfixnumeric}', "");
Expect(0, 37, '\P{Is_Line_Break=postfixnumeric}', "");
Expect(1, 37, '\P{^Is_Line_Break=postfixnumeric}', "");
Expect(0, 36, '\p{Is_Line_Break=postfixnumeric}', "");
Expect(1, 36, '\p{^Is_Line_Break=postfixnumeric}', "");
Expect(1, 36, '\P{Is_Line_Break=postfixnumeric}', "");
Expect(0, 36, '\P{^Is_Line_Break=postfixnumeric}', "");
Expect(1, 37, '\p{Is_Line_Break=_ Postfix Numeric}', "");
Expect(0, 37, '\p{^Is_Line_Break=_ Postfix Numeric}', "");
Expect(0, 37, '\P{Is_Line_Break=_ Postfix Numeric}', "");
Expect(1, 37, '\P{^Is_Line_Break=_ Postfix Numeric}', "");
Expect(0, 36, '\p{Is_Line_Break=_ Postfix Numeric}', "");
Expect(1, 36, '\p{^Is_Line_Break=_ Postfix Numeric}', "");
Expect(1, 36, '\P{Is_Line_Break=_ Postfix Numeric}', "");
Expect(0, 36, '\P{^Is_Line_Break=_ Postfix Numeric}', "");
Error('\p{Is_Lb=	:=PO}');
Error('\P{Is_Lb=	:=PO}');
Expect(1, 37, '\p{Is_Lb=po}', "");
Expect(0, 37, '\p{^Is_Lb=po}', "");
Expect(0, 37, '\P{Is_Lb=po}', "");
Expect(1, 37, '\P{^Is_Lb=po}', "");
Expect(0, 36, '\p{Is_Lb=po}', "");
Expect(1, 36, '\p{^Is_Lb=po}', "");
Expect(1, 36, '\P{Is_Lb=po}', "");
Expect(0, 36, '\P{^Is_Lb=po}', "");
Expect(1, 37, '\p{Is_Lb=-_PO}', "");
Expect(0, 37, '\p{^Is_Lb=-_PO}', "");
Expect(0, 37, '\P{Is_Lb=-_PO}', "");
Expect(1, 37, '\P{^Is_Lb=-_PO}', "");
Expect(0, 36, '\p{Is_Lb=-_PO}', "");
Expect(1, 36, '\p{^Is_Lb=-_PO}', "");
Expect(1, 36, '\P{Is_Lb=-_PO}', "");
Expect(0, 36, '\P{^Is_Lb=-_PO}', "");
Error('\p{Line_Break=/a/-Open	Punctuation}');
Error('\P{Line_Break=/a/-Open	Punctuation}');
Expect(1, 40, '\p{Line_Break=openpunctuation}', "");
Expect(0, 40, '\p{^Line_Break=openpunctuation}', "");
Expect(0, 40, '\P{Line_Break=openpunctuation}', "");
Expect(1, 40, '\P{^Line_Break=openpunctuation}', "");
Expect(0, 39, '\p{Line_Break=openpunctuation}', "");
Expect(1, 39, '\p{^Line_Break=openpunctuation}', "");
Expect(1, 39, '\P{Line_Break=openpunctuation}', "");
Expect(0, 39, '\P{^Line_Break=openpunctuation}', "");
Expect(1, 40, '\p{Line_Break=-open_Punctuation}', "");
Expect(0, 40, '\p{^Line_Break=-open_Punctuation}', "");
Expect(0, 40, '\P{Line_Break=-open_Punctuation}', "");
Expect(1, 40, '\P{^Line_Break=-open_Punctuation}', "");
Expect(0, 39, '\p{Line_Break=-open_Punctuation}', "");
Expect(1, 39, '\p{^Line_Break=-open_Punctuation}', "");
Expect(1, 39, '\P{Line_Break=-open_Punctuation}', "");
Expect(0, 39, '\P{^Line_Break=-open_Punctuation}', "");
Error('\p{Lb=--OP/a/}');
Error('\P{Lb=--OP/a/}');
Expect(1, 40, '\p{Lb=op}', "");
Expect(0, 40, '\p{^Lb=op}', "");
Expect(0, 40, '\P{Lb=op}', "");
Expect(1, 40, '\P{^Lb=op}', "");
Expect(0, 39, '\p{Lb=op}', "");
Expect(1, 39, '\p{^Lb=op}', "");
Expect(1, 39, '\P{Lb=op}', "");
Expect(0, 39, '\P{^Lb=op}', "");
Expect(1, 40, '\p{Lb=_op}', "");
Expect(0, 40, '\p{^Lb=_op}', "");
Expect(0, 40, '\P{Lb=_op}', "");
Expect(1, 40, '\P{^Lb=_op}', "");
Expect(0, 39, '\p{Lb=_op}', "");
Expect(1, 39, '\p{^Lb=_op}', "");
Expect(1, 39, '\P{Lb=_op}', "");
Expect(0, 39, '\P{^Lb=_op}', "");
Error('\p{Is_Line_Break= :=Open-Punctuation}');
Error('\P{Is_Line_Break= :=Open-Punctuation}');
Expect(1, 40, '\p{Is_Line_Break=openpunctuation}', "");
Expect(0, 40, '\p{^Is_Line_Break=openpunctuation}', "");
Expect(0, 40, '\P{Is_Line_Break=openpunctuation}', "");
Expect(1, 40, '\P{^Is_Line_Break=openpunctuation}', "");
Expect(0, 39, '\p{Is_Line_Break=openpunctuation}', "");
Expect(1, 39, '\p{^Is_Line_Break=openpunctuation}', "");
Expect(1, 39, '\P{Is_Line_Break=openpunctuation}', "");
Expect(0, 39, '\P{^Is_Line_Break=openpunctuation}', "");
Expect(1, 40, '\p{Is_Line_Break=		OPEN	Punctuation}', "");
Expect(0, 40, '\p{^Is_Line_Break=		OPEN	Punctuation}', "");
Expect(0, 40, '\P{Is_Line_Break=		OPEN	Punctuation}', "");
Expect(1, 40, '\P{^Is_Line_Break=		OPEN	Punctuation}', "");
Expect(0, 39, '\p{Is_Line_Break=		OPEN	Punctuation}', "");
Expect(1, 39, '\p{^Is_Line_Break=		OPEN	Punctuation}', "");
Expect(1, 39, '\P{Is_Line_Break=		OPEN	Punctuation}', "");
Expect(0, 39, '\P{^Is_Line_Break=		OPEN	Punctuation}', "");
Error('\p{Is_Lb=/a/op}');
Error('\P{Is_Lb=/a/op}');
Expect(1, 40, '\p{Is_Lb: op}', "");
Expect(0, 40, '\p{^Is_Lb: op}', "");
Expect(0, 40, '\P{Is_Lb: op}', "");
Expect(1, 40, '\P{^Is_Lb: op}', "");
Expect(0, 39, '\p{Is_Lb: op}', "");
Expect(1, 39, '\p{^Is_Lb: op}', "");
Expect(1, 39, '\P{Is_Lb: op}', "");
Expect(0, 39, '\P{^Is_Lb: op}', "");
Expect(1, 40, '\p{Is_Lb= -OP}', "");
Expect(0, 40, '\p{^Is_Lb= -OP}', "");
Expect(0, 40, '\P{Is_Lb= -OP}', "");
Expect(1, 40, '\P{^Is_Lb= -OP}', "");
Expect(0, 39, '\p{Is_Lb= -OP}', "");
Expect(1, 39, '\p{^Is_Lb= -OP}', "");
Expect(1, 39, '\P{Is_Lb= -OP}', "");
Expect(0, 39, '\P{^Is_Lb= -OP}', "");
Error('\p{Line_Break=:=-Next Line}');
Error('\P{Line_Break=:=-Next Line}');
Expect(1, 133, '\p{Line_Break=nextline}', "");
Expect(0, 133, '\p{^Line_Break=nextline}', "");
Expect(0, 133, '\P{Line_Break=nextline}', "");
Expect(1, 133, '\P{^Line_Break=nextline}', "");
Expect(0, 132, '\p{Line_Break=nextline}', "");
Expect(1, 132, '\p{^Line_Break=nextline}', "");
Expect(1, 132, '\P{Line_Break=nextline}', "");
Expect(0, 132, '\P{^Line_Break=nextline}', "");
Expect(1, 133, '\p{Line_Break= _Next-LINE}', "");
Expect(0, 133, '\p{^Line_Break= _Next-LINE}', "");
Expect(0, 133, '\P{Line_Break= _Next-LINE}', "");
Expect(1, 133, '\P{^Line_Break= _Next-LINE}', "");
Expect(0, 132, '\p{Line_Break= _Next-LINE}', "");
Expect(1, 132, '\p{^Line_Break= _Next-LINE}', "");
Expect(1, 132, '\P{Line_Break= _Next-LINE}', "");
Expect(0, 132, '\P{^Line_Break= _Next-LINE}', "");
Error('\p{Lb= NL/a/}');
Error('\P{Lb= NL/a/}');
Expect(1, 133, '\p{Lb=nl}', "");
Expect(0, 133, '\p{^Lb=nl}', "");
Expect(0, 133, '\P{Lb=nl}', "");
Expect(1, 133, '\P{^Lb=nl}', "");
Expect(0, 132, '\p{Lb=nl}', "");
Expect(1, 132, '\p{^Lb=nl}', "");
Expect(1, 132, '\P{Lb=nl}', "");
Expect(0, 132, '\P{^Lb=nl}', "");
Expect(1, 133, '\p{Lb:	 NL}', "");
Expect(0, 133, '\p{^Lb:	 NL}', "");
Expect(0, 133, '\P{Lb:	 NL}', "");
Expect(1, 133, '\P{^Lb:	 NL}', "");
Expect(0, 132, '\p{Lb:	 NL}', "");
Expect(1, 132, '\p{^Lb:	 NL}', "");
Expect(1, 132, '\P{Lb:	 NL}', "");
Expect(0, 132, '\P{^Lb:	 NL}', "");
Error('\p{Is_Line_Break=- Next Line/a/}');
Error('\P{Is_Line_Break=- Next Line/a/}');
Expect(1, 133, '\p{Is_Line_Break:nextline}', "");
Expect(0, 133, '\p{^Is_Line_Break:nextline}', "");
Expect(0, 133, '\P{Is_Line_Break:nextline}', "");
Expect(1, 133, '\P{^Is_Line_Break:nextline}', "");
Expect(0, 132, '\p{Is_Line_Break:nextline}', "");
Expect(1, 132, '\p{^Is_Line_Break:nextline}', "");
Expect(1, 132, '\P{Is_Line_Break:nextline}', "");
Expect(0, 132, '\P{^Is_Line_Break:nextline}', "");
Expect(1, 133, '\p{Is_Line_Break=_	NextLine}', "");
Expect(0, 133, '\p{^Is_Line_Break=_	NextLine}', "");
Expect(0, 133, '\P{Is_Line_Break=_	NextLine}', "");
Expect(1, 133, '\P{^Is_Line_Break=_	NextLine}', "");
Expect(0, 132, '\p{Is_Line_Break=_	NextLine}', "");
Expect(1, 132, '\p{^Is_Line_Break=_	NextLine}', "");
Expect(1, 132, '\P{Is_Line_Break=_	NextLine}', "");
Expect(0, 132, '\P{^Is_Line_Break=_	NextLine}', "");
Error('\p{Is_Lb=-nl/a/}');
Error('\P{Is_Lb=-nl/a/}');
Expect(1, 133, '\p{Is_Lb=nl}', "");
Expect(0, 133, '\p{^Is_Lb=nl}', "");
Expect(0, 133, '\P{Is_Lb=nl}', "");
Expect(1, 133, '\P{^Is_Lb=nl}', "");
Expect(0, 132, '\p{Is_Lb=nl}', "");
Expect(1, 132, '\p{^Is_Lb=nl}', "");
Expect(1, 132, '\P{Is_Lb=nl}', "");
Expect(0, 132, '\P{^Is_Lb=nl}', "");
Expect(1, 133, '\p{Is_Lb=	-nl}', "");
Expect(0, 133, '\p{^Is_Lb=	-nl}', "");
Expect(0, 133, '\P{Is_Lb=	-nl}', "");
Expect(1, 133, '\P{^Is_Lb=	-nl}', "");
Expect(0, 132, '\p{Is_Lb=	-nl}', "");
Expect(1, 132, '\p{^Is_Lb=	-nl}', "");
Expect(1, 132, '\P{Is_Lb=	-nl}', "");
Expect(0, 132, '\P{^Is_Lb=	-nl}', "");
Error('\p{Line_Break:	:=-	JT}');
Error('\P{Line_Break:	:=-	JT}');
Expect(1, 4607, '\p{Line_Break=jt}', "");
Expect(0, 4607, '\p{^Line_Break=jt}', "");
Expect(0, 4607, '\P{Line_Break=jt}', "");
Expect(1, 4607, '\P{^Line_Break=jt}', "");
Expect(0, 4519, '\p{Line_Break=jt}', "");
Expect(1, 4519, '\p{^Line_Break=jt}', "");
Expect(1, 4519, '\P{Line_Break=jt}', "");
Expect(0, 4519, '\P{^Line_Break=jt}', "");
Expect(1, 4607, '\p{Line_Break=	-JT}', "");
Expect(0, 4607, '\p{^Line_Break=	-JT}', "");
Expect(0, 4607, '\P{Line_Break=	-JT}', "");
Expect(1, 4607, '\P{^Line_Break=	-JT}', "");
Expect(0, 4519, '\p{Line_Break=	-JT}', "");
Expect(1, 4519, '\p{^Line_Break=	-JT}', "");
Expect(1, 4519, '\P{Line_Break=	-JT}', "");
Expect(0, 4519, '\P{^Line_Break=	-JT}', "");
Error('\p{Lb=/a/		JT}');
Error('\P{Lb=/a/		JT}');
Expect(1, 4607, '\p{Lb=jt}', "");
Expect(0, 4607, '\p{^Lb=jt}', "");
Expect(0, 4607, '\P{Lb=jt}', "");
Expect(1, 4607, '\P{^Lb=jt}', "");
Expect(0, 4519, '\p{Lb=jt}', "");
Expect(1, 4519, '\p{^Lb=jt}', "");
Expect(1, 4519, '\P{Lb=jt}', "");
Expect(0, 4519, '\P{^Lb=jt}', "");
Expect(1, 4607, '\p{Lb= JT}', "");
Expect(0, 4607, '\p{^Lb= JT}', "");
Expect(0, 4607, '\P{Lb= JT}', "");
Expect(1, 4607, '\P{^Lb= JT}', "");
Expect(0, 4519, '\p{Lb= JT}', "");
Expect(1, 4519, '\p{^Lb= JT}', "");
Expect(1, 4519, '\P{Lb= JT}', "");
Expect(0, 4519, '\P{^Lb= JT}', "");
Error('\p{Is_Line_Break=_jt:=}');
Error('\P{Is_Line_Break=_jt:=}');
Expect(1, 4607, '\p{Is_Line_Break=jt}', "");
Expect(0, 4607, '\p{^Is_Line_Break=jt}', "");
Expect(0, 4607, '\P{Is_Line_Break=jt}', "");
Expect(1, 4607, '\P{^Is_Line_Break=jt}', "");
Expect(0, 4519, '\p{Is_Line_Break=jt}', "");
Expect(1, 4519, '\p{^Is_Line_Break=jt}', "");
Expect(1, 4519, '\P{Is_Line_Break=jt}', "");
Expect(0, 4519, '\P{^Is_Line_Break=jt}', "");
Expect(1, 4607, '\p{Is_Line_Break=JT}', "");
Expect(0, 4607, '\p{^Is_Line_Break=JT}', "");
Expect(0, 4607, '\P{Is_Line_Break=JT}', "");
Expect(1, 4607, '\P{^Is_Line_Break=JT}', "");
Expect(0, 4519, '\p{Is_Line_Break=JT}', "");
Expect(1, 4519, '\p{^Is_Line_Break=JT}', "");
Expect(1, 4519, '\P{Is_Line_Break=JT}', "");
Expect(0, 4519, '\P{^Is_Line_Break=JT}', "");
Error('\p{Is_Lb=/a/ -JT}');
Error('\P{Is_Lb=/a/ -JT}');
Expect(1, 4607, '\p{Is_Lb=jt}', "");
Expect(0, 4607, '\p{^Is_Lb=jt}', "");
Expect(0, 4607, '\P{Is_Lb=jt}', "");
Expect(1, 4607, '\P{^Is_Lb=jt}', "");
Expect(0, 4519, '\p{Is_Lb=jt}', "");
Expect(1, 4519, '\p{^Is_Lb=jt}', "");
Expect(1, 4519, '\P{Is_Lb=jt}', "");
Expect(0, 4519, '\P{^Is_Lb=jt}', "");
Expect(1, 4607, '\p{Is_Lb=  JT}', "");
Expect(0, 4607, '\p{^Is_Lb=  JT}', "");
Expect(0, 4607, '\P{Is_Lb=  JT}', "");
Expect(1, 4607, '\P{^Is_Lb=  JT}', "");
Expect(0, 4519, '\p{Is_Lb=  JT}', "");
Expect(1, 4519, '\p{^Is_Lb=  JT}', "");
Expect(1, 4519, '\P{Is_Lb=  JT}', "");
Expect(0, 4519, '\P{^Is_Lb=  JT}', "");
Error('\p{Block=/a/_ New_Tai_Lue}');
Error('\P{Block=/a/_ New_Tai_Lue}');
Expect(1, 6623, '\p{Block=newtailue}', "");
Expect(0, 6623, '\p{^Block=newtailue}', "");
Expect(0, 6623, '\P{Block=newtailue}', "");
Expect(1, 6623, '\P{^Block=newtailue}', "");
Expect(0, 6527, '\p{Block=newtailue}', "");
Expect(1, 6527, '\p{^Block=newtailue}', "");
Expect(1, 6527, '\P{Block=newtailue}', "");
Expect(0, 6527, '\P{^Block=newtailue}', "");
Expect(1, 6623, '\p{Block:-New Tai_Lue}', "");
Expect(0, 6623, '\p{^Block:-New Tai_Lue}', "");
Expect(0, 6623, '\P{Block:-New Tai_Lue}', "");
Expect(1, 6623, '\P{^Block:-New Tai_Lue}', "");
Expect(0, 6527, '\p{Block:-New Tai_Lue}', "");
Expect(1, 6527, '\p{^Block:-New Tai_Lue}', "");
Expect(1, 6527, '\P{Block:-New Tai_Lue}', "");
Expect(0, 6527, '\P{^Block:-New Tai_Lue}', "");
Error('\p{Blk=_:=NEW-Tai Lue}');
Error('\P{Blk=_:=NEW-Tai Lue}');
Expect(1, 6623, '\p{Blk=newtailue}', "");
Expect(0, 6623, '\p{^Blk=newtailue}', "");
Expect(0, 6623, '\P{Blk=newtailue}', "");
Expect(1, 6623, '\P{^Blk=newtailue}', "");
Expect(0, 6527, '\p{Blk=newtailue}', "");
Expect(1, 6527, '\p{^Blk=newtailue}', "");
Expect(1, 6527, '\P{Blk=newtailue}', "");
Expect(0, 6527, '\P{^Blk=newtailue}', "");
Expect(1, 6623, '\p{Blk=	-new Tai Lue}', "");
Expect(0, 6623, '\p{^Blk=	-new Tai Lue}', "");
Expect(0, 6623, '\P{Blk=	-new Tai Lue}', "");
Expect(1, 6623, '\P{^Blk=	-new Tai Lue}', "");
Expect(0, 6527, '\p{Blk=	-new Tai Lue}', "");
Expect(1, 6527, '\p{^Blk=	-new Tai Lue}', "");
Expect(1, 6527, '\P{Blk=	-new Tai Lue}', "");
Expect(0, 6527, '\P{^Blk=	-new Tai Lue}', "");
Error('\p{Is_Block: -:=NewTAI	lue}');
Error('\P{Is_Block: -:=NewTAI	lue}');
Expect(1, 6623, '\p{Is_Block=newtailue}', "");
Expect(0, 6623, '\p{^Is_Block=newtailue}', "");
Expect(0, 6623, '\P{Is_Block=newtailue}', "");
Expect(1, 6623, '\P{^Is_Block=newtailue}', "");
Expect(0, 6527, '\p{Is_Block=newtailue}', "");
Expect(1, 6527, '\p{^Is_Block=newtailue}', "");
Expect(1, 6527, '\P{Is_Block=newtailue}', "");
Expect(0, 6527, '\P{^Is_Block=newtailue}', "");
Expect(1, 6623, '\p{Is_Block=_	New	Tai	Lue}', "");
Expect(0, 6623, '\p{^Is_Block=_	New	Tai	Lue}', "");
Expect(0, 6623, '\P{Is_Block=_	New	Tai	Lue}', "");
Expect(1, 6623, '\P{^Is_Block=_	New	Tai	Lue}', "");
Expect(0, 6527, '\p{Is_Block=_	New	Tai	Lue}', "");
Expect(1, 6527, '\p{^Is_Block=_	New	Tai	Lue}', "");
Expect(1, 6527, '\P{Is_Block=_	New	Tai	Lue}', "");
Expect(0, 6527, '\P{^Is_Block=_	New	Tai	Lue}', "");
Error('\p{Is_Blk:	 :=New-TAI-Lue}');
Error('\P{Is_Blk:	 :=New-TAI-Lue}');
Expect(1, 6623, '\p{Is_Blk=newtailue}', "");
Expect(0, 6623, '\p{^Is_Blk=newtailue}', "");
Expect(0, 6623, '\P{Is_Blk=newtailue}', "");
Expect(1, 6623, '\P{^Is_Blk=newtailue}', "");
Expect(0, 6527, '\p{Is_Blk=newtailue}', "");
Expect(1, 6527, '\p{^Is_Blk=newtailue}', "");
Expect(1, 6527, '\P{Is_Blk=newtailue}', "");
Expect(0, 6527, '\P{^Is_Blk=newtailue}', "");
Expect(1, 6623, '\p{Is_Blk=-new_tai_LUE}', "");
Expect(0, 6623, '\p{^Is_Blk=-new_tai_LUE}', "");
Expect(0, 6623, '\P{Is_Blk=-new_tai_LUE}', "");
Expect(1, 6623, '\P{^Is_Blk=-new_tai_LUE}', "");
Expect(0, 6527, '\p{Is_Blk=-new_tai_LUE}', "");
Expect(1, 6527, '\p{^Is_Blk=-new_tai_LUE}', "");
Expect(1, 6527, '\P{Is_Blk=-new_tai_LUE}', "");
Expect(0, 6527, '\P{^Is_Blk=-new_tai_LUE}', "");
Error('\p{Block= :=CJKUnified Ideographs EXTENSION-A}');
Error('\P{Block= :=CJKUnified Ideographs EXTENSION-A}');
Expect(1, 19903, '\p{Block=cjkunifiedideographsextensiona}', "");
Expect(0, 19903, '\p{^Block=cjkunifiedideographsextensiona}', "");
Expect(0, 19903, '\P{Block=cjkunifiedideographsextensiona}', "");
Expect(1, 19903, '\P{^Block=cjkunifiedideographsextensiona}', "");
Expect(0, 13311, '\p{Block=cjkunifiedideographsextensiona}', "");
Expect(1, 13311, '\p{^Block=cjkunifiedideographsextensiona}', "");
Expect(1, 13311, '\P{Block=cjkunifiedideographsextensiona}', "");
Expect(0, 13311, '\P{^Block=cjkunifiedideographsextensiona}', "");
Expect(1, 19903, '\p{Block=-_cjk-Unified	IdeographsEXTENSION a}', "");
Expect(0, 19903, '\p{^Block=-_cjk-Unified	IdeographsEXTENSION a}', "");
Expect(0, 19903, '\P{Block=-_cjk-Unified	IdeographsEXTENSION a}', "");
Expect(1, 19903, '\P{^Block=-_cjk-Unified	IdeographsEXTENSION a}', "");
Expect(0, 13311, '\p{Block=-_cjk-Unified	IdeographsEXTENSION a}', "");
Expect(1, 13311, '\p{^Block=-_cjk-Unified	IdeographsEXTENSION a}', "");
Expect(1, 13311, '\P{Block=-_cjk-Unified	IdeographsEXTENSION a}', "");
Expect(0, 13311, '\P{^Block=-_cjk-Unified	IdeographsEXTENSION a}', "");
Error('\p{Blk=-CJK_UNIFIEDIDEOGRAPHS:=EXTENSION A}');
Error('\P{Blk=-CJK_UNIFIEDIDEOGRAPHS:=EXTENSION A}');
Expect(1, 19903, '\p{Blk=cjkunifiedideographsextensiona}', "");
Expect(0, 19903, '\p{^Blk=cjkunifiedideographsextensiona}', "");
Expect(0, 19903, '\P{Blk=cjkunifiedideographsextensiona}', "");
Expect(1, 19903, '\P{^Blk=cjkunifiedideographsextensiona}', "");
Expect(0, 13311, '\p{Blk=cjkunifiedideographsextensiona}', "");
Expect(1, 13311, '\p{^Blk=cjkunifiedideographsextensiona}', "");
Expect(1, 13311, '\P{Blk=cjkunifiedideographsextensiona}', "");
Expect(0, 13311, '\P{^Blk=cjkunifiedideographsextensiona}', "");
Expect(1, 19903, '\p{Blk=-	CJK-unified IDEOGRAPHS	EXTENSION	A}', "");
Expect(0, 19903, '\p{^Blk=-	CJK-unified IDEOGRAPHS	EXTENSION	A}', "");
Expect(0, 19903, '\P{Blk=-	CJK-unified IDEOGRAPHS	EXTENSION	A}', "");
Expect(1, 19903, '\P{^Blk=-	CJK-unified IDEOGRAPHS	EXTENSION	A}', "");
Expect(0, 13311, '\p{Blk=-	CJK-unified IDEOGRAPHS	EXTENSION	A}', "");
Expect(1, 13311, '\p{^Blk=-	CJK-unified IDEOGRAPHS	EXTENSION	A}', "");
Expect(1, 13311, '\P{Blk=-	CJK-unified IDEOGRAPHS	EXTENSION	A}', "");
Expect(0, 13311, '\P{^Blk=-	CJK-unified IDEOGRAPHS	EXTENSION	A}', "");
Error('\p{Is_Block=_	CJK-unified:=ideographs_Extension A}');
Error('\P{Is_Block=_	CJK-unified:=ideographs_Extension A}');
Expect(1, 19903, '\p{Is_Block=cjkunifiedideographsextensiona}', "");
Expect(0, 19903, '\p{^Is_Block=cjkunifiedideographsextensiona}', "");
Expect(0, 19903, '\P{Is_Block=cjkunifiedideographsextensiona}', "");
Expect(1, 19903, '\P{^Is_Block=cjkunifiedideographsextensiona}', "");
Expect(0, 13311, '\p{Is_Block=cjkunifiedideographsextensiona}', "");
Expect(1, 13311, '\p{^Is_Block=cjkunifiedideographsextensiona}', "");
Expect(1, 13311, '\P{Is_Block=cjkunifiedideographsextensiona}', "");
Expect(0, 13311, '\P{^Is_Block=cjkunifiedideographsextensiona}', "");
Expect(1, 19903, '\p{Is_Block=- CJK-unifiedIdeographs_Extension A}', "");
Expect(0, 19903, '\p{^Is_Block=- CJK-unifiedIdeographs_Extension A}', "");
Expect(0, 19903, '\P{Is_Block=- CJK-unifiedIdeographs_Extension A}', "");
Expect(1, 19903, '\P{^Is_Block=- CJK-unifiedIdeographs_Extension A}', "");
Expect(0, 13311, '\p{Is_Block=- CJK-unifiedIdeographs_Extension A}', "");
Expect(1, 13311, '\p{^Is_Block=- CJK-unifiedIdeographs_Extension A}', "");
Expect(1, 13311, '\P{Is_Block=- CJK-unifiedIdeographs_Extension A}', "");
Expect(0, 13311, '\P{^Is_Block=- CJK-unifiedIdeographs_Extension A}', "");
Error('\p{Is_Blk=	:=CJK-unified-Ideographs-EXTENSION_a}');
Error('\P{Is_Blk=	:=CJK-unified-Ideographs-EXTENSION_a}');
Expect(1, 19903, '\p{Is_Blk=cjkunifiedideographsextensiona}', "");
Expect(0, 19903, '\p{^Is_Blk=cjkunifiedideographsextensiona}', "");
Expect(0, 19903, '\P{Is_Blk=cjkunifiedideographsextensiona}', "");
Expect(1, 19903, '\P{^Is_Blk=cjkunifiedideographsextensiona}', "");
Expect(0, 13311, '\p{Is_Blk=cjkunifiedideographsextensiona}', "");
Expect(1, 13311, '\p{^Is_Blk=cjkunifiedideographsextensiona}', "");
Expect(1, 13311, '\P{Is_Blk=cjkunifiedideographsextensiona}', "");
Expect(0, 13311, '\P{^Is_Blk=cjkunifiedideographsextensiona}', "");
Expect(1, 19903, '\p{Is_Blk= cjkUNIFIED Ideographs Extension-a}', "");
Expect(0, 19903, '\p{^Is_Blk= cjkUNIFIED Ideographs Extension-a}', "");
Expect(0, 19903, '\P{Is_Blk= cjkUNIFIED Ideographs Extension-a}', "");
Expect(1, 19903, '\P{^Is_Blk= cjkUNIFIED Ideographs Extension-a}', "");
Expect(0, 13311, '\p{Is_Blk= cjkUNIFIED Ideographs Extension-a}', "");
Expect(1, 13311, '\p{^Is_Blk= cjkUNIFIED Ideographs Extension-a}', "");
Expect(1, 13311, '\P{Is_Blk= cjkUNIFIED Ideographs Extension-a}', "");
Expect(0, 13311, '\P{^Is_Blk= cjkUNIFIED Ideographs Extension-a}', "");
Error('\p{Block:   :=		Hangul jamo}');
Error('\P{Block:   :=		Hangul jamo}');
Expect(1, 4607, '\p{Block=hanguljamo}', "");
Expect(0, 4607, '\p{^Block=hanguljamo}', "");
Expect(0, 4607, '\P{Block=hanguljamo}', "");
Expect(1, 4607, '\P{^Block=hanguljamo}', "");
Expect(0, 4351, '\p{Block=hanguljamo}', "");
Expect(1, 4351, '\p{^Block=hanguljamo}', "");
Expect(1, 4351, '\P{Block=hanguljamo}', "");
Expect(0, 4351, '\P{^Block=hanguljamo}', "");
Expect(1, 4607, '\p{Block=_Hangul_Jamo}', "");
Expect(0, 4607, '\p{^Block=_Hangul_Jamo}', "");
Expect(0, 4607, '\P{Block=_Hangul_Jamo}', "");
Expect(1, 4607, '\P{^Block=_Hangul_Jamo}', "");
Expect(0, 4351, '\p{Block=_Hangul_Jamo}', "");
Expect(1, 4351, '\p{^Block=_Hangul_Jamo}', "");
Expect(1, 4351, '\P{Block=_Hangul_Jamo}', "");
Expect(0, 4351, '\P{^Block=_Hangul_Jamo}', "");
Error('\p{Blk=-hangul/a/jamo}');
Error('\P{Blk=-hangul/a/jamo}');
Expect(1, 4607, '\p{Blk=hanguljamo}', "");
Expect(0, 4607, '\p{^Blk=hanguljamo}', "");
Expect(0, 4607, '\P{Blk=hanguljamo}', "");
Expect(1, 4607, '\P{^Blk=hanguljamo}', "");
Expect(0, 4351, '\p{Blk=hanguljamo}', "");
Expect(1, 4351, '\p{^Blk=hanguljamo}', "");
Expect(1, 4351, '\P{Blk=hanguljamo}', "");
Expect(0, 4351, '\P{^Blk=hanguljamo}', "");
Expect(1, 4607, '\p{Blk=_hangul_JAMO}', "");
Expect(0, 4607, '\p{^Blk=_hangul_JAMO}', "");
Expect(0, 4607, '\P{Blk=_hangul_JAMO}', "");
Expect(1, 4607, '\P{^Blk=_hangul_JAMO}', "");
Expect(0, 4351, '\p{Blk=_hangul_JAMO}', "");
Expect(1, 4351, '\p{^Blk=_hangul_JAMO}', "");
Expect(1, 4351, '\P{Blk=_hangul_JAMO}', "");
Expect(0, 4351, '\P{^Blk=_hangul_JAMO}', "");
Error('\p{Is_Block=-/a/Hangul-Jamo}');
Error('\P{Is_Block=-/a/Hangul-Jamo}');
Expect(1, 4607, '\p{Is_Block=hanguljamo}', "");
Expect(0, 4607, '\p{^Is_Block=hanguljamo}', "");
Expect(0, 4607, '\P{Is_Block=hanguljamo}', "");
Expect(1, 4607, '\P{^Is_Block=hanguljamo}', "");
Expect(0, 4351, '\p{Is_Block=hanguljamo}', "");
Expect(1, 4351, '\p{^Is_Block=hanguljamo}', "");
Expect(1, 4351, '\P{Is_Block=hanguljamo}', "");
Expect(0, 4351, '\P{^Is_Block=hanguljamo}', "");
Expect(1, 4607, '\p{Is_Block=- HANGUL_Jamo}', "");
Expect(0, 4607, '\p{^Is_Block=- HANGUL_Jamo}', "");
Expect(0, 4607, '\P{Is_Block=- HANGUL_Jamo}', "");
Expect(1, 4607, '\P{^Is_Block=- HANGUL_Jamo}', "");
Expect(0, 4351, '\p{Is_Block=- HANGUL_Jamo}', "");
Expect(1, 4351, '\p{^Is_Block=- HANGUL_Jamo}', "");
Expect(1, 4351, '\P{Is_Block=- HANGUL_Jamo}', "");
Expect(0, 4351, '\P{^Is_Block=- HANGUL_Jamo}', "");
Error('\p{Is_Blk=-/a/Hangul	jamo}');
Error('\P{Is_Blk=-/a/Hangul	jamo}');
Expect(1, 4607, '\p{Is_Blk=hanguljamo}', "");
Expect(0, 4607, '\p{^Is_Blk=hanguljamo}', "");
Expect(0, 4607, '\P{Is_Blk=hanguljamo}', "");
Expect(1, 4607, '\P{^Is_Blk=hanguljamo}', "");
Expect(0, 4351, '\p{Is_Blk=hanguljamo}', "");
Expect(1, 4351, '\p{^Is_Blk=hanguljamo}', "");
Expect(1, 4351, '\P{Is_Blk=hanguljamo}', "");
Expect(0, 4351, '\P{^Is_Blk=hanguljamo}', "");
Expect(1, 4607, '\p{Is_Blk=-_hangul_Jamo}', "");
Expect(0, 4607, '\p{^Is_Blk=-_hangul_Jamo}', "");
Expect(0, 4607, '\P{Is_Blk=-_hangul_Jamo}', "");
Expect(1, 4607, '\P{^Is_Blk=-_hangul_Jamo}', "");
Expect(0, 4351, '\p{Is_Blk=-_hangul_Jamo}', "");
Expect(1, 4351, '\p{^Is_Blk=-_hangul_Jamo}', "");
Expect(1, 4351, '\P{Is_Blk=-_hangul_Jamo}', "");
Expect(0, 4351, '\P{^Is_Blk=-_hangul_Jamo}', "");
Error('\p{Block= _dingbats/a/}');
Error('\P{Block= _dingbats/a/}');
Expect(1, 10175, '\p{Block=dingbats}', "");
Expect(0, 10175, '\p{^Block=dingbats}', "");
Expect(0, 10175, '\P{Block=dingbats}', "");
Expect(1, 10175, '\P{^Block=dingbats}', "");
Expect(0, 9983, '\p{Block=dingbats}', "");
Expect(1, 9983, '\p{^Block=dingbats}', "");
Expect(1, 9983, '\P{Block=dingbats}', "");
Expect(0, 9983, '\P{^Block=dingbats}', "");
Expect(1, 10175, '\p{Block=_Dingbats}', "");
Expect(0, 10175, '\p{^Block=_Dingbats}', "");
Expect(0, 10175, '\P{Block=_Dingbats}', "");
Expect(1, 10175, '\P{^Block=_Dingbats}', "");
Expect(0, 9983, '\p{Block=_Dingbats}', "");
Expect(1, 9983, '\p{^Block=_Dingbats}', "");
Expect(1, 9983, '\P{Block=_Dingbats}', "");
Expect(0, 9983, '\P{^Block=_Dingbats}', "");
Error('\p{Blk=  dingbats/a/}');
Error('\P{Blk=  dingbats/a/}');
Expect(1, 10175, '\p{Blk=dingbats}', "");
Expect(0, 10175, '\p{^Blk=dingbats}', "");
Expect(0, 10175, '\P{Blk=dingbats}', "");
Expect(1, 10175, '\P{^Blk=dingbats}', "");
Expect(0, 9983, '\p{Blk=dingbats}', "");
Expect(1, 9983, '\p{^Blk=dingbats}', "");
Expect(1, 9983, '\P{Blk=dingbats}', "");
Expect(0, 9983, '\P{^Blk=dingbats}', "");
Expect(1, 10175, '\p{Blk=Dingbats}', "");
Expect(0, 10175, '\p{^Blk=Dingbats}', "");
Expect(0, 10175, '\P{Blk=Dingbats}', "");
Expect(1, 10175, '\P{^Blk=Dingbats}', "");
Expect(0, 9983, '\p{Blk=Dingbats}', "");
Expect(1, 9983, '\p{^Blk=Dingbats}', "");
Expect(1, 9983, '\P{Blk=Dingbats}', "");
Expect(0, 9983, '\P{^Blk=Dingbats}', "");
Error('\p{Is_Block=/a/_	Dingbats}');
Error('\P{Is_Block=/a/_	Dingbats}');
Expect(1, 10175, '\p{Is_Block:dingbats}', "");
Expect(0, 10175, '\p{^Is_Block:dingbats}', "");
Expect(0, 10175, '\P{Is_Block:dingbats}', "");
Expect(1, 10175, '\P{^Is_Block:dingbats}', "");
Expect(0, 9983, '\p{Is_Block:dingbats}', "");
Expect(1, 9983, '\p{^Is_Block:dingbats}', "");
Expect(1, 9983, '\P{Is_Block:dingbats}', "");
Expect(0, 9983, '\P{^Is_Block:dingbats}', "");
Expect(1, 10175, '\p{Is_Block=	-Dingbats}', "");
Expect(0, 10175, '\p{^Is_Block=	-Dingbats}', "");
Expect(0, 10175, '\P{Is_Block=	-Dingbats}', "");
Expect(1, 10175, '\P{^Is_Block=	-Dingbats}', "");
Expect(0, 9983, '\p{Is_Block=	-Dingbats}', "");
Expect(1, 9983, '\p{^Is_Block=	-Dingbats}', "");
Expect(1, 9983, '\P{Is_Block=	-Dingbats}', "");
Expect(0, 9983, '\P{^Is_Block=	-Dingbats}', "");
Error('\p{Is_Blk=:=_-DINGBATS}');
Error('\P{Is_Blk=:=_-DINGBATS}');
Expect(1, 10175, '\p{Is_Blk=dingbats}', "");
Expect(0, 10175, '\p{^Is_Blk=dingbats}', "");
Expect(0, 10175, '\P{Is_Blk=dingbats}', "");
Expect(1, 10175, '\P{^Is_Blk=dingbats}', "");
Expect(0, 9983, '\p{Is_Blk=dingbats}', "");
Expect(1, 9983, '\p{^Is_Blk=dingbats}', "");
Expect(1, 9983, '\P{Is_Blk=dingbats}', "");
Expect(0, 9983, '\P{^Is_Blk=dingbats}', "");
Expect(1, 10175, '\p{Is_Blk=-DINGBATS}', "");
Expect(0, 10175, '\p{^Is_Blk=-DINGBATS}', "");
Expect(0, 10175, '\P{Is_Blk=-DINGBATS}', "");
Expect(1, 10175, '\P{^Is_Blk=-DINGBATS}', "");
Expect(0, 9983, '\p{Is_Blk=-DINGBATS}', "");
Expect(1, 9983, '\p{^Is_Blk=-DINGBATS}', "");
Expect(1, 9983, '\P{Is_Blk=-DINGBATS}', "");
Expect(0, 9983, '\P{^Is_Blk=-DINGBATS}', "");
Error('\p{Block=- Bamum:=}');
Error('\P{Block=- Bamum:=}');
Expect(1, 42751, '\p{Block=bamum}', "");
Expect(0, 42751, '\p{^Block=bamum}', "");
Expect(0, 42751, '\P{Block=bamum}', "");
Expect(1, 42751, '\P{^Block=bamum}', "");
Expect(0, 42655, '\p{Block=bamum}', "");
Expect(1, 42655, '\p{^Block=bamum}', "");
Expect(1, 42655, '\P{Block=bamum}', "");
Expect(0, 42655, '\P{^Block=bamum}', "");
Expect(1, 42751, '\p{Block:   _-Bamum}', "");
Expect(0, 42751, '\p{^Block:   _-Bamum}', "");
Expect(0, 42751, '\P{Block:   _-Bamum}', "");
Expect(1, 42751, '\P{^Block:   _-Bamum}', "");
Expect(0, 42655, '\p{Block:   _-Bamum}', "");
Expect(1, 42655, '\p{^Block:   _-Bamum}', "");
Expect(1, 42655, '\P{Block:   _-Bamum}', "");
Expect(0, 42655, '\P{^Block:   _-Bamum}', "");
Error('\p{Blk=	:=BAMUM}');
Error('\P{Blk=	:=BAMUM}');
Expect(1, 42751, '\p{Blk=bamum}', "");
Expect(0, 42751, '\p{^Blk=bamum}', "");
Expect(0, 42751, '\P{Blk=bamum}', "");
Expect(1, 42751, '\P{^Blk=bamum}', "");
Expect(0, 42655, '\p{Blk=bamum}', "");
Expect(1, 42655, '\p{^Blk=bamum}', "");
Expect(1, 42655, '\P{Blk=bamum}', "");
Expect(0, 42655, '\P{^Blk=bamum}', "");
Expect(1, 42751, '\p{Blk=-_bamum}', "");
Expect(0, 42751, '\p{^Blk=-_bamum}', "");
Expect(0, 42751, '\P{Blk=-_bamum}', "");
Expect(1, 42751, '\P{^Blk=-_bamum}', "");
Expect(0, 42655, '\p{Blk=-_bamum}', "");
Expect(1, 42655, '\p{^Blk=-_bamum}', "");
Expect(1, 42655, '\P{Blk=-_bamum}', "");
Expect(0, 42655, '\P{^Blk=-_bamum}', "");
Error('\p{Is_Block=	/a/Bamum}');
Error('\P{Is_Block=	/a/Bamum}');
Expect(1, 42751, '\p{Is_Block=bamum}', "");
Expect(0, 42751, '\p{^Is_Block=bamum}', "");
Expect(0, 42751, '\P{Is_Block=bamum}', "");
Expect(1, 42751, '\P{^Is_Block=bamum}', "");
Expect(0, 42655, '\p{Is_Block=bamum}', "");
Expect(1, 42655, '\p{^Is_Block=bamum}', "");
Expect(1, 42655, '\P{Is_Block=bamum}', "");
Expect(0, 42655, '\P{^Is_Block=bamum}', "");
Expect(1, 42751, '\p{Is_Block:	-Bamum}', "");
Expect(0, 42751, '\p{^Is_Block:	-Bamum}', "");
Expect(0, 42751, '\P{Is_Block:	-Bamum}', "");
Expect(1, 42751, '\P{^Is_Block:	-Bamum}', "");
Expect(0, 42655, '\p{Is_Block:	-Bamum}', "");
Expect(1, 42655, '\p{^Is_Block:	-Bamum}', "");
Expect(1, 42655, '\P{Is_Block:	-Bamum}', "");
Expect(0, 42655, '\P{^Is_Block:	-Bamum}', "");
Error('\p{Is_Blk=:=		BAMUM}');
Error('\P{Is_Blk=:=		BAMUM}');
Expect(1, 42751, '\p{Is_Blk=bamum}', "");
Expect(0, 42751, '\p{^Is_Blk=bamum}', "");
Expect(0, 42751, '\P{Is_Blk=bamum}', "");
Expect(1, 42751, '\P{^Is_Blk=bamum}', "");
Expect(0, 42655, '\p{Is_Blk=bamum}', "");
Expect(1, 42655, '\p{^Is_Blk=bamum}', "");
Expect(1, 42655, '\P{Is_Blk=bamum}', "");
Expect(0, 42655, '\P{^Is_Blk=bamum}', "");
Expect(1, 42751, '\p{Is_Blk:	__bamum}', "");
Expect(0, 42751, '\p{^Is_Blk:	__bamum}', "");
Expect(0, 42751, '\P{Is_Blk:	__bamum}', "");
Expect(1, 42751, '\P{^Is_Blk:	__bamum}', "");
Expect(0, 42655, '\p{Is_Blk:	__bamum}', "");
Expect(1, 42655, '\p{^Is_Blk:	__bamum}', "");
Expect(1, 42655, '\P{Is_Blk:	__bamum}', "");
Expect(0, 42655, '\P{^Is_Blk:	__bamum}', "");
Error('\p{Block=	 Inscriptional	parthian:=}');
Error('\P{Block=	 Inscriptional	parthian:=}');
Expect(1, 68447, '\p{Block: inscriptionalparthian}', "");
Expect(0, 68447, '\p{^Block: inscriptionalparthian}', "");
Expect(0, 68447, '\P{Block: inscriptionalparthian}', "");
Expect(1, 68447, '\P{^Block: inscriptionalparthian}', "");
Expect(0, 68415, '\p{Block: inscriptionalparthian}', "");
Expect(1, 68415, '\p{^Block: inscriptionalparthian}', "");
Expect(1, 68415, '\P{Block: inscriptionalparthian}', "");
Expect(0, 68415, '\P{^Block: inscriptionalparthian}', "");
Expect(1, 68447, '\p{Block=		INSCRIPTIONAL	PARTHIAN}', "");
Expect(0, 68447, '\p{^Block=		INSCRIPTIONAL	PARTHIAN}', "");
Expect(0, 68447, '\P{Block=		INSCRIPTIONAL	PARTHIAN}', "");
Expect(1, 68447, '\P{^Block=		INSCRIPTIONAL	PARTHIAN}', "");
Expect(0, 68415, '\p{Block=		INSCRIPTIONAL	PARTHIAN}', "");
Expect(1, 68415, '\p{^Block=		INSCRIPTIONAL	PARTHIAN}', "");
Expect(1, 68415, '\P{Block=		INSCRIPTIONAL	PARTHIAN}', "");
Expect(0, 68415, '\P{^Block=		INSCRIPTIONAL	PARTHIAN}', "");
Error('\p{Blk=	_inscriptional/a/Parthian}');
Error('\P{Blk=	_inscriptional/a/Parthian}');
Expect(1, 68447, '\p{Blk=inscriptionalparthian}', "");
Expect(0, 68447, '\p{^Blk=inscriptionalparthian}', "");
Expect(0, 68447, '\P{Blk=inscriptionalparthian}', "");
Expect(1, 68447, '\P{^Blk=inscriptionalparthian}', "");
Expect(0, 68415, '\p{Blk=inscriptionalparthian}', "");
Expect(1, 68415, '\p{^Blk=inscriptionalparthian}', "");
Expect(1, 68415, '\P{Blk=inscriptionalparthian}', "");
Expect(0, 68415, '\P{^Blk=inscriptionalparthian}', "");
Expect(1, 68447, '\p{Blk=--inscriptional-Parthian}', "");
Expect(0, 68447, '\p{^Blk=--inscriptional-Parthian}', "");
Expect(0, 68447, '\P{Blk=--inscriptional-Parthian}', "");
Expect(1, 68447, '\P{^Blk=--inscriptional-Parthian}', "");
Expect(0, 68415, '\p{Blk=--inscriptional-Parthian}', "");
Expect(1, 68415, '\p{^Blk=--inscriptional-Parthian}', "");
Expect(1, 68415, '\P{Blk=--inscriptional-Parthian}', "");
Expect(0, 68415, '\P{^Blk=--inscriptional-Parthian}', "");
Error('\p{Is_Block=/a/inscriptional-PARTHIAN}');
Error('\P{Is_Block=/a/inscriptional-PARTHIAN}');
Expect(1, 68447, '\p{Is_Block=inscriptionalparthian}', "");
Expect(0, 68447, '\p{^Is_Block=inscriptionalparthian}', "");
Expect(0, 68447, '\P{Is_Block=inscriptionalparthian}', "");
Expect(1, 68447, '\P{^Is_Block=inscriptionalparthian}', "");
Expect(0, 68415, '\p{Is_Block=inscriptionalparthian}', "");
Expect(1, 68415, '\p{^Is_Block=inscriptionalparthian}', "");
Expect(1, 68415, '\P{Is_Block=inscriptionalparthian}', "");
Expect(0, 68415, '\P{^Is_Block=inscriptionalparthian}', "");
Expect(1, 68447, '\p{Is_Block=_	Inscriptional	Parthian}', "");
Expect(0, 68447, '\p{^Is_Block=_	Inscriptional	Parthian}', "");
Expect(0, 68447, '\P{Is_Block=_	Inscriptional	Parthian}', "");
Expect(1, 68447, '\P{^Is_Block=_	Inscriptional	Parthian}', "");
Expect(0, 68415, '\p{Is_Block=_	Inscriptional	Parthian}', "");
Expect(1, 68415, '\p{^Is_Block=_	Inscriptional	Parthian}', "");
Expect(1, 68415, '\P{Is_Block=_	Inscriptional	Parthian}', "");
Expect(0, 68415, '\P{^Is_Block=_	Inscriptional	Parthian}', "");
Error('\p{Is_Blk=_Inscriptional	parthian:=}');
Error('\P{Is_Blk=_Inscriptional	parthian:=}');
Expect(1, 68447, '\p{Is_Blk=inscriptionalparthian}', "");
Expect(0, 68447, '\p{^Is_Blk=inscriptionalparthian}', "");
Expect(0, 68447, '\P{Is_Blk=inscriptionalparthian}', "");
Expect(1, 68447, '\P{^Is_Blk=inscriptionalparthian}', "");
Expect(0, 68415, '\p{Is_Blk=inscriptionalparthian}', "");
Expect(1, 68415, '\p{^Is_Blk=inscriptionalparthian}', "");
Expect(1, 68415, '\P{Is_Blk=inscriptionalparthian}', "");
Expect(0, 68415, '\P{^Is_Blk=inscriptionalparthian}', "");
Expect(1, 68447, '\p{Is_Blk=-Inscriptionalparthian}', "");
Expect(0, 68447, '\p{^Is_Blk=-Inscriptionalparthian}', "");
Expect(0, 68447, '\P{Is_Blk=-Inscriptionalparthian}', "");
Expect(1, 68447, '\P{^Is_Blk=-Inscriptionalparthian}', "");
Expect(0, 68415, '\p{Is_Blk=-Inscriptionalparthian}', "");
Expect(1, 68415, '\p{^Is_Blk=-Inscriptionalparthian}', "");
Expect(1, 68415, '\P{Is_Blk=-Inscriptionalparthian}', "");
Expect(0, 68415, '\P{^Is_Blk=-Inscriptionalparthian}', "");
Error('\p{Block=:=UnifiedCANADIAN Aboriginal	syllabics}');
Error('\P{Block=:=UnifiedCANADIAN Aboriginal	syllabics}');
Expect(1, 5759, '\p{Block=unifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5759, '\p{^Block=unifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5759, '\P{Block=unifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5759, '\P{^Block=unifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5119, '\p{Block=unifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5119, '\p{^Block=unifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5119, '\P{Block=unifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5119, '\P{^Block=unifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5759, '\p{Block:  Unified	canadian-Aboriginal_SYLLABICS}', "");
Expect(0, 5759, '\p{^Block:  Unified	canadian-Aboriginal_SYLLABICS}', "");
Expect(0, 5759, '\P{Block:  Unified	canadian-Aboriginal_SYLLABICS}', "");
Expect(1, 5759, '\P{^Block:  Unified	canadian-Aboriginal_SYLLABICS}', "");
Expect(0, 5119, '\p{Block:  Unified	canadian-Aboriginal_SYLLABICS}', "");
Expect(1, 5119, '\p{^Block:  Unified	canadian-Aboriginal_SYLLABICS}', "");
Expect(1, 5119, '\P{Block:  Unified	canadian-Aboriginal_SYLLABICS}', "");
Expect(0, 5119, '\P{^Block:  Unified	canadian-Aboriginal_SYLLABICS}', "");
Error('\p{Blk::= _canadian-Syllabics}');
Error('\P{Blk::= _canadian-Syllabics}');
Expect(1, 5759, '\p{Blk=canadiansyllabics}', "");
Expect(0, 5759, '\p{^Blk=canadiansyllabics}', "");
Expect(0, 5759, '\P{Blk=canadiansyllabics}', "");
Expect(1, 5759, '\P{^Blk=canadiansyllabics}', "");
Expect(0, 5119, '\p{Blk=canadiansyllabics}', "");
Expect(1, 5119, '\p{^Blk=canadiansyllabics}', "");
Expect(1, 5119, '\P{Blk=canadiansyllabics}', "");
Expect(0, 5119, '\P{^Blk=canadiansyllabics}', "");
Expect(1, 5759, '\p{Blk:--CANADIAN_Syllabics}', "");
Expect(0, 5759, '\p{^Blk:--CANADIAN_Syllabics}', "");
Expect(0, 5759, '\P{Blk:--CANADIAN_Syllabics}', "");
Expect(1, 5759, '\P{^Blk:--CANADIAN_Syllabics}', "");
Expect(0, 5119, '\p{Blk:--CANADIAN_Syllabics}', "");
Expect(1, 5119, '\p{^Blk:--CANADIAN_Syllabics}', "");
Expect(1, 5119, '\P{Blk:--CANADIAN_Syllabics}', "");
Expect(0, 5119, '\P{^Blk:--CANADIAN_Syllabics}', "");
Error('\p{Is_Block=/a/UNIFIED_Canadian_ABORIGINAL syllabics}');
Error('\P{Is_Block=/a/UNIFIED_Canadian_ABORIGINAL syllabics}');
Expect(1, 5759, '\p{Is_Block=unifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5759, '\p{^Is_Block=unifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5759, '\P{Is_Block=unifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5759, '\P{^Is_Block=unifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5119, '\p{Is_Block=unifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5119, '\p{^Is_Block=unifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5119, '\P{Is_Block=unifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5119, '\P{^Is_Block=unifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5759, '\p{Is_Block= -Unified CANADIAN	ABORIGINAL_syllabics}', "");
Expect(0, 5759, '\p{^Is_Block= -Unified CANADIAN	ABORIGINAL_syllabics}', "");
Expect(0, 5759, '\P{Is_Block= -Unified CANADIAN	ABORIGINAL_syllabics}', "");
Expect(1, 5759, '\P{^Is_Block= -Unified CANADIAN	ABORIGINAL_syllabics}', "");
Expect(0, 5119, '\p{Is_Block= -Unified CANADIAN	ABORIGINAL_syllabics}', "");
Expect(1, 5119, '\p{^Is_Block= -Unified CANADIAN	ABORIGINAL_syllabics}', "");
Expect(1, 5119, '\P{Is_Block= -Unified CANADIAN	ABORIGINAL_syllabics}', "");
Expect(0, 5119, '\P{^Is_Block= -Unified CANADIAN	ABORIGINAL_syllabics}', "");
Error('\p{Is_Blk=_:=Canadian-Syllabics}');
Error('\P{Is_Blk=_:=Canadian-Syllabics}');
Expect(1, 5759, '\p{Is_Blk=canadiansyllabics}', "");
Expect(0, 5759, '\p{^Is_Blk=canadiansyllabics}', "");
Expect(0, 5759, '\P{Is_Blk=canadiansyllabics}', "");
Expect(1, 5759, '\P{^Is_Blk=canadiansyllabics}', "");
Expect(0, 5119, '\p{Is_Blk=canadiansyllabics}', "");
Expect(1, 5119, '\p{^Is_Blk=canadiansyllabics}', "");
Expect(1, 5119, '\P{Is_Blk=canadiansyllabics}', "");
Expect(0, 5119, '\P{^Is_Blk=canadiansyllabics}', "");
Expect(1, 5759, '\p{Is_Blk:   	-canadiansyllabics}', "");
Expect(0, 5759, '\p{^Is_Blk:   	-canadiansyllabics}', "");
Expect(0, 5759, '\P{Is_Blk:   	-canadiansyllabics}', "");
Expect(1, 5759, '\P{^Is_Blk:   	-canadiansyllabics}', "");
Expect(0, 5119, '\p{Is_Blk:   	-canadiansyllabics}', "");
Expect(1, 5119, '\p{^Is_Blk:   	-canadiansyllabics}', "");
Expect(1, 5119, '\P{Is_Blk:   	-canadiansyllabics}', "");
Expect(0, 5119, '\P{^Is_Blk:   	-canadiansyllabics}', "");
Error('\p{Block=	_Variation:=Selectors}');
Error('\P{Block=	_Variation:=Selectors}');
Expect(1, 65039, '\p{Block:variationselectors}', "");
Expect(0, 65039, '\p{^Block:variationselectors}', "");
Expect(0, 65039, '\P{Block:variationselectors}', "");
Expect(1, 65039, '\P{^Block:variationselectors}', "");
Expect(0, 65023, '\p{Block:variationselectors}', "");
Expect(1, 65023, '\p{^Block:variationselectors}', "");
Expect(1, 65023, '\P{Block:variationselectors}', "");
Expect(0, 65023, '\P{^Block:variationselectors}', "");
Expect(1, 65039, '\p{Block= _variation SELECTORS}', "");
Expect(0, 65039, '\p{^Block= _variation SELECTORS}', "");
Expect(0, 65039, '\P{Block= _variation SELECTORS}', "");
Expect(1, 65039, '\P{^Block= _variation SELECTORS}', "");
Expect(0, 65023, '\p{Block= _variation SELECTORS}', "");
Expect(1, 65023, '\p{^Block= _variation SELECTORS}', "");
Expect(1, 65023, '\P{Block= _variation SELECTORS}', "");
Expect(0, 65023, '\P{^Block= _variation SELECTORS}', "");
Error('\p{Blk= 	Variation/a/SELECTORS}');
Error('\P{Blk= 	Variation/a/SELECTORS}');
Expect(1, 65039, '\p{Blk:variationselectors}', "");
Expect(0, 65039, '\p{^Blk:variationselectors}', "");
Expect(0, 65039, '\P{Blk:variationselectors}', "");
Expect(1, 65039, '\P{^Blk:variationselectors}', "");
Expect(0, 65023, '\p{Blk:variationselectors}', "");
Expect(1, 65023, '\p{^Blk:variationselectors}', "");
Expect(1, 65023, '\P{Blk:variationselectors}', "");
Expect(0, 65023, '\P{^Blk:variationselectors}', "");
Expect(1, 65039, '\p{Blk= _variation_Selectors}', "");
Expect(0, 65039, '\p{^Blk= _variation_Selectors}', "");
Expect(0, 65039, '\P{Blk= _variation_Selectors}', "");
Expect(1, 65039, '\P{^Blk= _variation_Selectors}', "");
Expect(0, 65023, '\p{Blk= _variation_Selectors}', "");
Expect(1, 65023, '\p{^Blk= _variation_Selectors}', "");
Expect(1, 65023, '\P{Blk= _variation_Selectors}', "");
Expect(0, 65023, '\P{^Blk= _variation_Selectors}', "");
Error('\p{Is_Block=:=_	VARIATION-Selectors}');
Error('\P{Is_Block=:=_	VARIATION-Selectors}');
Expect(1, 65039, '\p{Is_Block=variationselectors}', "");
Expect(0, 65039, '\p{^Is_Block=variationselectors}', "");
Expect(0, 65039, '\P{Is_Block=variationselectors}', "");
Expect(1, 65039, '\P{^Is_Block=variationselectors}', "");
Expect(0, 65023, '\p{Is_Block=variationselectors}', "");
Expect(1, 65023, '\p{^Is_Block=variationselectors}', "");
Expect(1, 65023, '\P{Is_Block=variationselectors}', "");
Expect(0, 65023, '\P{^Is_Block=variationselectors}', "");
Expect(1, 65039, '\p{Is_Block=	VARIATIONSelectors}', "");
Expect(0, 65039, '\p{^Is_Block=	VARIATIONSelectors}', "");
Expect(0, 65039, '\P{Is_Block=	VARIATIONSelectors}', "");
Expect(1, 65039, '\P{^Is_Block=	VARIATIONSelectors}', "");
Expect(0, 65023, '\p{Is_Block=	VARIATIONSelectors}', "");
Expect(1, 65023, '\p{^Is_Block=	VARIATIONSelectors}', "");
Expect(1, 65023, '\P{Is_Block=	VARIATIONSelectors}', "");
Expect(0, 65023, '\P{^Is_Block=	VARIATIONSelectors}', "");
Error('\p{Is_Blk=/a/-	VARIATION	SELECTORS}');
Error('\P{Is_Blk=/a/-	VARIATION	SELECTORS}');
Expect(1, 65039, '\p{Is_Blk=variationselectors}', "");
Expect(0, 65039, '\p{^Is_Blk=variationselectors}', "");
Expect(0, 65039, '\P{Is_Blk=variationselectors}', "");
Expect(1, 65039, '\P{^Is_Blk=variationselectors}', "");
Expect(0, 65023, '\p{Is_Blk=variationselectors}', "");
Expect(1, 65023, '\p{^Is_Blk=variationselectors}', "");
Expect(1, 65023, '\P{Is_Blk=variationselectors}', "");
Expect(0, 65023, '\P{^Is_Blk=variationselectors}', "");
Expect(1, 65039, '\p{Is_Blk= Variation-Selectors}', "");
Expect(0, 65039, '\p{^Is_Blk= Variation-Selectors}', "");
Expect(0, 65039, '\P{Is_Blk= Variation-Selectors}', "");
Expect(1, 65039, '\P{^Is_Blk= Variation-Selectors}', "");
Expect(0, 65023, '\p{Is_Blk= Variation-Selectors}', "");
Expect(1, 65023, '\p{^Is_Blk= Variation-Selectors}', "");
Expect(1, 65023, '\P{Is_Blk= Variation-Selectors}', "");
Expect(0, 65023, '\P{^Is_Blk= Variation-Selectors}', "");
Error('\p{Block=	 number:=forms}');
Error('\P{Block=	 number:=forms}');
Expect(1, 8591, '\p{Block=numberforms}', "");
Expect(0, 8591, '\p{^Block=numberforms}', "");
Expect(0, 8591, '\P{Block=numberforms}', "");
Expect(1, 8591, '\P{^Block=numberforms}', "");
Expect(0, 8527, '\p{Block=numberforms}', "");
Expect(1, 8527, '\p{^Block=numberforms}', "");
Expect(1, 8527, '\P{Block=numberforms}', "");
Expect(0, 8527, '\P{^Block=numberforms}', "");
Expect(1, 8591, '\p{Block=- number	Forms}', "");
Expect(0, 8591, '\p{^Block=- number	Forms}', "");
Expect(0, 8591, '\P{Block=- number	Forms}', "");
Expect(1, 8591, '\P{^Block=- number	Forms}', "");
Expect(0, 8527, '\p{Block=- number	Forms}', "");
Expect(1, 8527, '\p{^Block=- number	Forms}', "");
Expect(1, 8527, '\P{Block=- number	Forms}', "");
Expect(0, 8527, '\P{^Block=- number	Forms}', "");
Error('\p{Blk=/a/	-NUMBER	Forms}');
Error('\P{Blk=/a/	-NUMBER	Forms}');
Expect(1, 8591, '\p{Blk=numberforms}', "");
Expect(0, 8591, '\p{^Blk=numberforms}', "");
Expect(0, 8591, '\P{Blk=numberforms}', "");
Expect(1, 8591, '\P{^Blk=numberforms}', "");
Expect(0, 8527, '\p{Blk=numberforms}', "");
Expect(1, 8527, '\p{^Blk=numberforms}', "");
Expect(1, 8527, '\P{Blk=numberforms}', "");
Expect(0, 8527, '\P{^Blk=numberforms}', "");
Expect(1, 8591, '\p{Blk= 	NUMBERForms}', "");
Expect(0, 8591, '\p{^Blk= 	NUMBERForms}', "");
Expect(0, 8591, '\P{Blk= 	NUMBERForms}', "");
Expect(1, 8591, '\P{^Blk= 	NUMBERForms}', "");
Expect(0, 8527, '\p{Blk= 	NUMBERForms}', "");
Expect(1, 8527, '\p{^Blk= 	NUMBERForms}', "");
Expect(1, 8527, '\P{Blk= 	NUMBERForms}', "");
Expect(0, 8527, '\P{^Blk= 	NUMBERForms}', "");
Error('\p{Is_Block=-NUMBER/a/Forms}');
Error('\P{Is_Block=-NUMBER/a/Forms}');
Expect(1, 8591, '\p{Is_Block=numberforms}', "");
Expect(0, 8591, '\p{^Is_Block=numberforms}', "");
Expect(0, 8591, '\P{Is_Block=numberforms}', "");
Expect(1, 8591, '\P{^Is_Block=numberforms}', "");
Expect(0, 8527, '\p{Is_Block=numberforms}', "");
Expect(1, 8527, '\p{^Is_Block=numberforms}', "");
Expect(1, 8527, '\P{Is_Block=numberforms}', "");
Expect(0, 8527, '\P{^Is_Block=numberforms}', "");
Expect(1, 8591, '\p{Is_Block=	NUMBER_Forms}', "");
Expect(0, 8591, '\p{^Is_Block=	NUMBER_Forms}', "");
Expect(0, 8591, '\P{Is_Block=	NUMBER_Forms}', "");
Expect(1, 8591, '\P{^Is_Block=	NUMBER_Forms}', "");
Expect(0, 8527, '\p{Is_Block=	NUMBER_Forms}', "");
Expect(1, 8527, '\p{^Is_Block=	NUMBER_Forms}', "");
Expect(1, 8527, '\P{Is_Block=	NUMBER_Forms}', "");
Expect(0, 8527, '\P{^Is_Block=	NUMBER_Forms}', "");
Error('\p{Is_Blk=_/a/Number	FORMS}');
Error('\P{Is_Blk=_/a/Number	FORMS}');
Expect(1, 8591, '\p{Is_Blk=numberforms}', "");
Expect(0, 8591, '\p{^Is_Blk=numberforms}', "");
Expect(0, 8591, '\P{Is_Blk=numberforms}', "");
Expect(1, 8591, '\P{^Is_Blk=numberforms}', "");
Expect(0, 8527, '\p{Is_Blk=numberforms}', "");
Expect(1, 8527, '\p{^Is_Blk=numberforms}', "");
Expect(1, 8527, '\P{Is_Blk=numberforms}', "");
Expect(0, 8527, '\P{^Is_Blk=numberforms}', "");
Expect(1, 8591, '\p{Is_Blk=-_NUMBERForms}', "");
Expect(0, 8591, '\p{^Is_Blk=-_NUMBERForms}', "");
Expect(0, 8591, '\P{Is_Blk=-_NUMBERForms}', "");
Expect(1, 8591, '\P{^Is_Blk=-_NUMBERForms}', "");
Expect(0, 8527, '\p{Is_Blk=-_NUMBERForms}', "");
Expect(1, 8527, '\p{^Is_Blk=-_NUMBERForms}', "");
Expect(1, 8527, '\P{Is_Blk=-_NUMBERForms}', "");
Expect(0, 8527, '\P{^Is_Blk=-_NUMBERForms}', "");
Error('\p{Block=_Control_PICTURES:=}');
Error('\P{Block=_Control_PICTURES:=}');
Expect(1, 9279, '\p{Block=controlpictures}', "");
Expect(0, 9279, '\p{^Block=controlpictures}', "");
Expect(0, 9279, '\P{Block=controlpictures}', "");
Expect(1, 9279, '\P{^Block=controlpictures}', "");
Expect(0, 9215, '\p{Block=controlpictures}', "");
Expect(1, 9215, '\p{^Block=controlpictures}', "");
Expect(1, 9215, '\P{Block=controlpictures}', "");
Expect(0, 9215, '\P{^Block=controlpictures}', "");
Expect(1, 9279, '\p{Block:   	CONTROL-Pictures}', "");
Expect(0, 9279, '\p{^Block:   	CONTROL-Pictures}', "");
Expect(0, 9279, '\P{Block:   	CONTROL-Pictures}', "");
Expect(1, 9279, '\P{^Block:   	CONTROL-Pictures}', "");
Expect(0, 9215, '\p{Block:   	CONTROL-Pictures}', "");
Expect(1, 9215, '\p{^Block:   	CONTROL-Pictures}', "");
Expect(1, 9215, '\P{Block:   	CONTROL-Pictures}', "");
Expect(0, 9215, '\P{^Block:   	CONTROL-Pictures}', "");
Error('\p{Blk=	-control:=pictures}');
Error('\P{Blk=	-control:=pictures}');
Expect(1, 9279, '\p{Blk=controlpictures}', "");
Expect(0, 9279, '\p{^Blk=controlpictures}', "");
Expect(0, 9279, '\P{Blk=controlpictures}', "");
Expect(1, 9279, '\P{^Blk=controlpictures}', "");
Expect(0, 9215, '\p{Blk=controlpictures}', "");
Expect(1, 9215, '\p{^Blk=controlpictures}', "");
Expect(1, 9215, '\P{Blk=controlpictures}', "");
Expect(0, 9215, '\P{^Blk=controlpictures}', "");
Expect(1, 9279, '\p{Blk:-Control	Pictures}', "");
Expect(0, 9279, '\p{^Blk:-Control	Pictures}', "");
Expect(0, 9279, '\P{Blk:-Control	Pictures}', "");
Expect(1, 9279, '\P{^Blk:-Control	Pictures}', "");
Expect(0, 9215, '\p{Blk:-Control	Pictures}', "");
Expect(1, 9215, '\p{^Blk:-Control	Pictures}', "");
Expect(1, 9215, '\P{Blk:-Control	Pictures}', "");
Expect(0, 9215, '\P{^Blk:-Control	Pictures}', "");
Error('\p{Is_Block= -ControlPictures:=}');
Error('\P{Is_Block= -ControlPictures:=}');
Expect(1, 9279, '\p{Is_Block=controlpictures}', "");
Expect(0, 9279, '\p{^Is_Block=controlpictures}', "");
Expect(0, 9279, '\P{Is_Block=controlpictures}', "");
Expect(1, 9279, '\P{^Is_Block=controlpictures}', "");
Expect(0, 9215, '\p{Is_Block=controlpictures}', "");
Expect(1, 9215, '\p{^Is_Block=controlpictures}', "");
Expect(1, 9215, '\P{Is_Block=controlpictures}', "");
Expect(0, 9215, '\P{^Is_Block=controlpictures}', "");
Expect(1, 9279, '\p{Is_Block=-	CONTROL	PICTURES}', "");
Expect(0, 9279, '\p{^Is_Block=-	CONTROL	PICTURES}', "");
Expect(0, 9279, '\P{Is_Block=-	CONTROL	PICTURES}', "");
Expect(1, 9279, '\P{^Is_Block=-	CONTROL	PICTURES}', "");
Expect(0, 9215, '\p{Is_Block=-	CONTROL	PICTURES}', "");
Expect(1, 9215, '\p{^Is_Block=-	CONTROL	PICTURES}', "");
Expect(1, 9215, '\P{Is_Block=-	CONTROL	PICTURES}', "");
Expect(0, 9215, '\P{^Is_Block=-	CONTROL	PICTURES}', "");
Error('\p{Is_Blk=	_CONTROL-Pictures:=}');
Error('\P{Is_Blk=	_CONTROL-Pictures:=}');
Expect(1, 9279, '\p{Is_Blk=controlpictures}', "");
Expect(0, 9279, '\p{^Is_Blk=controlpictures}', "");
Expect(0, 9279, '\P{Is_Blk=controlpictures}', "");
Expect(1, 9279, '\P{^Is_Blk=controlpictures}', "");
Expect(0, 9215, '\p{Is_Blk=controlpictures}', "");
Expect(1, 9215, '\p{^Is_Blk=controlpictures}', "");
Expect(1, 9215, '\P{Is_Blk=controlpictures}', "");
Expect(0, 9215, '\P{^Is_Blk=controlpictures}', "");
Expect(1, 9279, '\p{Is_Blk=  Control	PICTURES}', "");
Expect(0, 9279, '\p{^Is_Blk=  Control	PICTURES}', "");
Expect(0, 9279, '\P{Is_Blk=  Control	PICTURES}', "");
Expect(1, 9279, '\P{^Is_Blk=  Control	PICTURES}', "");
Expect(0, 9215, '\p{Is_Blk=  Control	PICTURES}', "");
Expect(1, 9215, '\p{^Is_Blk=  Control	PICTURES}', "");
Expect(1, 9215, '\P{Is_Blk=  Control	PICTURES}', "");
Expect(0, 9215, '\P{^Is_Blk=  Control	PICTURES}', "");
Error('\p{Block=		High-Private Use-surrogates/a/}');
Error('\P{Block=		High-Private Use-surrogates/a/}');
Expect(1, 56319, '\p{Block=highprivateusesurrogates}', "");
Expect(0, 56319, '\p{^Block=highprivateusesurrogates}', "");
Expect(0, 56319, '\P{Block=highprivateusesurrogates}', "");
Expect(1, 56319, '\P{^Block=highprivateusesurrogates}', "");
Expect(0, 1, '\p{Block=highprivateusesurrogates}', "");
Expect(1, 1, '\p{^Block=highprivateusesurrogates}', "");
Expect(1, 1, '\P{Block=highprivateusesurrogates}', "");
Expect(0, 1, '\P{^Block=highprivateusesurrogates}', "");
Expect(1, 56319, '\p{Block=  High-private-Use	Surrogates}', "");
Expect(0, 56319, '\p{^Block=  High-private-Use	Surrogates}', "");
Expect(0, 56319, '\P{Block=  High-private-Use	Surrogates}', "");
Expect(1, 56319, '\P{^Block=  High-private-Use	Surrogates}', "");
Expect(0, 1, '\p{Block=  High-private-Use	Surrogates}', "");
Expect(1, 1, '\p{^Block=  High-private-Use	Surrogates}', "");
Expect(1, 1, '\P{Block=  High-private-Use	Surrogates}', "");
Expect(0, 1, '\P{^Block=  High-private-Use	Surrogates}', "");
Error('\p{Blk=	/a/High_privateUse-Surrogates}');
Error('\P{Blk=	/a/High_privateUse-Surrogates}');
Expect(1, 56319, '\p{Blk=highprivateusesurrogates}', "");
Expect(0, 56319, '\p{^Blk=highprivateusesurrogates}', "");
Expect(0, 56319, '\P{Blk=highprivateusesurrogates}', "");
Expect(1, 56319, '\P{^Blk=highprivateusesurrogates}', "");
Expect(0, 1, '\p{Blk=highprivateusesurrogates}', "");
Expect(1, 1, '\p{^Blk=highprivateusesurrogates}', "");
Expect(1, 1, '\P{Blk=highprivateusesurrogates}', "");
Expect(0, 1, '\P{^Blk=highprivateusesurrogates}', "");
Expect(1, 56319, '\p{Blk=-high_PrivateUse_SURROGATES}', "");
Expect(0, 56319, '\p{^Blk=-high_PrivateUse_SURROGATES}', "");
Expect(0, 56319, '\P{Blk=-high_PrivateUse_SURROGATES}', "");
Expect(1, 56319, '\P{^Blk=-high_PrivateUse_SURROGATES}', "");
Expect(0, 1, '\p{Blk=-high_PrivateUse_SURROGATES}', "");
Expect(1, 1, '\p{^Blk=-high_PrivateUse_SURROGATES}', "");
Expect(1, 1, '\P{Blk=-high_PrivateUse_SURROGATES}', "");
Expect(0, 1, '\P{^Blk=-high_PrivateUse_SURROGATES}', "");
Error('\p{Is_Block=_:=HIGH-PRIVATE-USE surrogates}');
Error('\P{Is_Block=_:=HIGH-PRIVATE-USE surrogates}');
Expect(1, 56319, '\p{Is_Block=highprivateusesurrogates}', "");
Expect(0, 56319, '\p{^Is_Block=highprivateusesurrogates}', "");
Expect(0, 56319, '\P{Is_Block=highprivateusesurrogates}', "");
Expect(1, 56319, '\P{^Is_Block=highprivateusesurrogates}', "");
Expect(0, 1, '\p{Is_Block=highprivateusesurrogates}', "");
Expect(1, 1, '\p{^Is_Block=highprivateusesurrogates}', "");
Expect(1, 1, '\P{Is_Block=highprivateusesurrogates}', "");
Expect(0, 1, '\P{^Is_Block=highprivateusesurrogates}', "");
Expect(1, 56319, '\p{Is_Block=- High-Private	Use SURROGATES}', "");
Expect(0, 56319, '\p{^Is_Block=- High-Private	Use SURROGATES}', "");
Expect(0, 56319, '\P{Is_Block=- High-Private	Use SURROGATES}', "");
Expect(1, 56319, '\P{^Is_Block=- High-Private	Use SURROGATES}', "");
Expect(0, 1, '\p{Is_Block=- High-Private	Use SURROGATES}', "");
Expect(1, 1, '\p{^Is_Block=- High-Private	Use SURROGATES}', "");
Expect(1, 1, '\P{Is_Block=- High-Private	Use SURROGATES}', "");
Expect(0, 1, '\P{^Is_Block=- High-Private	Use SURROGATES}', "");
Error('\p{Is_Blk=_-HIGH/a/Private Use	surrogates}');
Error('\P{Is_Blk=_-HIGH/a/Private Use	surrogates}');
Expect(1, 56319, '\p{Is_Blk=highprivateusesurrogates}', "");
Expect(0, 56319, '\p{^Is_Blk=highprivateusesurrogates}', "");
Expect(0, 56319, '\P{Is_Blk=highprivateusesurrogates}', "");
Expect(1, 56319, '\P{^Is_Blk=highprivateusesurrogates}', "");
Expect(0, 1, '\p{Is_Blk=highprivateusesurrogates}', "");
Expect(1, 1, '\p{^Is_Blk=highprivateusesurrogates}', "");
Expect(1, 1, '\P{Is_Blk=highprivateusesurrogates}', "");
Expect(0, 1, '\P{^Is_Blk=highprivateusesurrogates}', "");
Expect(1, 56319, '\p{Is_Blk= high-PRIVATE-use surrogates}', "");
Expect(0, 56319, '\p{^Is_Blk= high-PRIVATE-use surrogates}', "");
Expect(0, 56319, '\P{Is_Blk= high-PRIVATE-use surrogates}', "");
Expect(1, 56319, '\P{^Is_Blk= high-PRIVATE-use surrogates}', "");
Expect(0, 1, '\p{Is_Blk= high-PRIVATE-use surrogates}', "");
Expect(1, 1, '\p{^Is_Blk= high-PRIVATE-use surrogates}', "");
Expect(1, 1, '\P{Is_Blk= high-PRIVATE-use surrogates}', "");
Expect(0, 1, '\P{^Is_Blk= high-PRIVATE-use surrogates}', "");
Error('\p{Block:   :=ugaritic}');
Error('\P{Block:   :=ugaritic}');
Expect(1, 66463, '\p{Block=ugaritic}', "");
Expect(0, 66463, '\p{^Block=ugaritic}', "");
Expect(0, 66463, '\P{Block=ugaritic}', "");
Expect(1, 66463, '\P{^Block=ugaritic}', "");
Expect(0, 66431, '\p{Block=ugaritic}', "");
Expect(1, 66431, '\p{^Block=ugaritic}', "");
Expect(1, 66431, '\P{Block=ugaritic}', "");
Expect(0, 66431, '\P{^Block=ugaritic}', "");
Expect(1, 66463, '\p{Block=-	UGARITIC}', "");
Expect(0, 66463, '\p{^Block=-	UGARITIC}', "");
Expect(0, 66463, '\P{Block=-	UGARITIC}', "");
Expect(1, 66463, '\P{^Block=-	UGARITIC}', "");
Expect(0, 66431, '\p{Block=-	UGARITIC}', "");
Expect(1, 66431, '\p{^Block=-	UGARITIC}', "");
Expect(1, 66431, '\P{Block=-	UGARITIC}', "");
Expect(0, 66431, '\P{^Block=-	UGARITIC}', "");
Error('\p{Blk=  UGARITIC/a/}');
Error('\P{Blk=  UGARITIC/a/}');
Expect(1, 66463, '\p{Blk=ugaritic}', "");
Expect(0, 66463, '\p{^Blk=ugaritic}', "");
Expect(0, 66463, '\P{Blk=ugaritic}', "");
Expect(1, 66463, '\P{^Blk=ugaritic}', "");
Expect(0, 66431, '\p{Blk=ugaritic}', "");
Expect(1, 66431, '\p{^Blk=ugaritic}', "");
Expect(1, 66431, '\P{Blk=ugaritic}', "");
Expect(0, 66431, '\P{^Blk=ugaritic}', "");
Expect(1, 66463, '\p{Blk=  ugaritic}', "");
Expect(0, 66463, '\p{^Blk=  ugaritic}', "");
Expect(0, 66463, '\P{Blk=  ugaritic}', "");
Expect(1, 66463, '\P{^Blk=  ugaritic}', "");
Expect(0, 66431, '\p{Blk=  ugaritic}', "");
Expect(1, 66431, '\p{^Blk=  ugaritic}', "");
Expect(1, 66431, '\P{Blk=  ugaritic}', "");
Expect(0, 66431, '\P{^Blk=  ugaritic}', "");
Error('\p{Is_Block= :=UGARITIC}');
Error('\P{Is_Block= :=UGARITIC}');
Expect(1, 66463, '\p{Is_Block=ugaritic}', "");
Expect(0, 66463, '\p{^Is_Block=ugaritic}', "");
Expect(0, 66463, '\P{Is_Block=ugaritic}', "");
Expect(1, 66463, '\P{^Is_Block=ugaritic}', "");
Expect(0, 66431, '\p{Is_Block=ugaritic}', "");
Expect(1, 66431, '\p{^Is_Block=ugaritic}', "");
Expect(1, 66431, '\P{Is_Block=ugaritic}', "");
Expect(0, 66431, '\P{^Is_Block=ugaritic}', "");
Expect(1, 66463, '\p{Is_Block=_-UGARITIC}', "");
Expect(0, 66463, '\p{^Is_Block=_-UGARITIC}', "");
Expect(0, 66463, '\P{Is_Block=_-UGARITIC}', "");
Expect(1, 66463, '\P{^Is_Block=_-UGARITIC}', "");
Expect(0, 66431, '\p{Is_Block=_-UGARITIC}', "");
Expect(1, 66431, '\p{^Is_Block=_-UGARITIC}', "");
Expect(1, 66431, '\P{Is_Block=_-UGARITIC}', "");
Expect(0, 66431, '\P{^Is_Block=_-UGARITIC}', "");
Error('\p{Is_Blk=/a/	_Ugaritic}');
Error('\P{Is_Blk=/a/	_Ugaritic}');
Expect(1, 66463, '\p{Is_Blk=ugaritic}', "");
Expect(0, 66463, '\p{^Is_Blk=ugaritic}', "");
Expect(0, 66463, '\P{Is_Blk=ugaritic}', "");
Expect(1, 66463, '\P{^Is_Blk=ugaritic}', "");
Expect(0, 66431, '\p{Is_Blk=ugaritic}', "");
Expect(1, 66431, '\p{^Is_Blk=ugaritic}', "");
Expect(1, 66431, '\P{Is_Blk=ugaritic}', "");
Expect(0, 66431, '\P{^Is_Blk=ugaritic}', "");
Expect(1, 66463, '\p{Is_Blk=_ Ugaritic}', "");
Expect(0, 66463, '\p{^Is_Blk=_ Ugaritic}', "");
Expect(0, 66463, '\P{Is_Blk=_ Ugaritic}', "");
Expect(1, 66463, '\P{^Is_Blk=_ Ugaritic}', "");
Expect(0, 66431, '\p{Is_Blk=_ Ugaritic}', "");
Expect(1, 66431, '\p{^Is_Blk=_ Ugaritic}', "");
Expect(1, 66431, '\P{Is_Blk=_ Ugaritic}', "");
Expect(0, 66431, '\P{^Is_Blk=_ Ugaritic}', "");
Error('\p{Block=:=  ARMENIAN}');
Error('\P{Block=:=  ARMENIAN}');
Expect(1, 1423, '\p{Block=armenian}', "");
Expect(0, 1423, '\p{^Block=armenian}', "");
Expect(0, 1423, '\P{Block=armenian}', "");
Expect(1, 1423, '\P{^Block=armenian}', "");
Expect(0, 1327, '\p{Block=armenian}', "");
Expect(1, 1327, '\p{^Block=armenian}', "");
Expect(1, 1327, '\P{Block=armenian}', "");
Expect(0, 1327, '\P{^Block=armenian}', "");
Expect(1, 1423, '\p{Block=  Armenian}', "");
Expect(0, 1423, '\p{^Block=  Armenian}', "");
Expect(0, 1423, '\P{Block=  Armenian}', "");
Expect(1, 1423, '\P{^Block=  Armenian}', "");
Expect(0, 1327, '\p{Block=  Armenian}', "");
Expect(1, 1327, '\p{^Block=  Armenian}', "");
Expect(1, 1327, '\P{Block=  Armenian}', "");
Expect(0, 1327, '\P{^Block=  Armenian}', "");
Error('\p{Blk=/a/_-ARMENIAN}');
Error('\P{Blk=/a/_-ARMENIAN}');
Expect(1, 1423, '\p{Blk=armenian}', "");
Expect(0, 1423, '\p{^Blk=armenian}', "");
Expect(0, 1423, '\P{Blk=armenian}', "");
Expect(1, 1423, '\P{^Blk=armenian}', "");
Expect(0, 1327, '\p{Blk=armenian}', "");
Expect(1, 1327, '\p{^Blk=armenian}', "");
Expect(1, 1327, '\P{Blk=armenian}', "");
Expect(0, 1327, '\P{^Blk=armenian}', "");
Expect(1, 1423, '\p{Blk:  ARMENIAN}', "");
Expect(0, 1423, '\p{^Blk:  ARMENIAN}', "");
Expect(0, 1423, '\P{Blk:  ARMENIAN}', "");
Expect(1, 1423, '\P{^Blk:  ARMENIAN}', "");
Expect(0, 1327, '\p{Blk:  ARMENIAN}', "");
Expect(1, 1327, '\p{^Blk:  ARMENIAN}', "");
Expect(1, 1327, '\P{Blk:  ARMENIAN}', "");
Expect(0, 1327, '\P{^Blk:  ARMENIAN}', "");
Error('\p{Is_Block=/a/ ARMENIAN}');
Error('\P{Is_Block=/a/ ARMENIAN}');
Expect(1, 1423, '\p{Is_Block=armenian}', "");
Expect(0, 1423, '\p{^Is_Block=armenian}', "");
Expect(0, 1423, '\P{Is_Block=armenian}', "");
Expect(1, 1423, '\P{^Is_Block=armenian}', "");
Expect(0, 1327, '\p{Is_Block=armenian}', "");
Expect(1, 1327, '\p{^Is_Block=armenian}', "");
Expect(1, 1327, '\P{Is_Block=armenian}', "");
Expect(0, 1327, '\P{^Is_Block=armenian}', "");
Expect(1, 1423, '\p{Is_Block=	-Armenian}', "");
Expect(0, 1423, '\p{^Is_Block=	-Armenian}', "");
Expect(0, 1423, '\P{Is_Block=	-Armenian}', "");
Expect(1, 1423, '\P{^Is_Block=	-Armenian}', "");
Expect(0, 1327, '\p{Is_Block=	-Armenian}', "");
Expect(1, 1327, '\p{^Is_Block=	-Armenian}', "");
Expect(1, 1327, '\P{Is_Block=	-Armenian}', "");
Expect(0, 1327, '\P{^Is_Block=	-Armenian}', "");
Error('\p{Is_Blk=/a/	 Armenian}');
Error('\P{Is_Blk=/a/	 Armenian}');
Expect(1, 1423, '\p{Is_Blk=armenian}', "");
Expect(0, 1423, '\p{^Is_Blk=armenian}', "");
Expect(0, 1423, '\P{Is_Blk=armenian}', "");
Expect(1, 1423, '\P{^Is_Blk=armenian}', "");
Expect(0, 1327, '\p{Is_Blk=armenian}', "");
Expect(1, 1327, '\p{^Is_Blk=armenian}', "");
Expect(1, 1327, '\P{Is_Blk=armenian}', "");
Expect(0, 1327, '\P{^Is_Blk=armenian}', "");
Expect(1, 1423, '\p{Is_Blk=-ARMENIAN}', "");
Expect(0, 1423, '\p{^Is_Blk=-ARMENIAN}', "");
Expect(0, 1423, '\P{Is_Blk=-ARMENIAN}', "");
Expect(1, 1423, '\P{^Is_Blk=-ARMENIAN}', "");
Expect(0, 1327, '\p{Is_Blk=-ARMENIAN}', "");
Expect(1, 1327, '\p{^Is_Blk=-ARMENIAN}', "");
Expect(1, 1327, '\P{Is_Blk=-ARMENIAN}', "");
Expect(0, 1327, '\P{^Is_Blk=-ARMENIAN}', "");
Error('\p{Block= 	private	use	Area/a/}');
Error('\P{Block= 	private	use	Area/a/}');
Expect(1, 63743, '\p{Block=privateusearea}', "");
Expect(0, 63743, '\p{^Block=privateusearea}', "");
Expect(0, 63743, '\P{Block=privateusearea}', "");
Expect(1, 63743, '\P{^Block=privateusearea}', "");
Expect(0, 1, '\p{Block=privateusearea}', "");
Expect(1, 1, '\p{^Block=privateusearea}', "");
Expect(1, 1, '\P{Block=privateusearea}', "");
Expect(0, 1, '\P{^Block=privateusearea}', "");
Expect(1, 63743, '\p{Block:	-Private Use-AREA}', "");
Expect(0, 63743, '\p{^Block:	-Private Use-AREA}', "");
Expect(0, 63743, '\P{Block:	-Private Use-AREA}', "");
Expect(1, 63743, '\P{^Block:	-Private Use-AREA}', "");
Expect(0, 1, '\p{Block:	-Private Use-AREA}', "");
Expect(1, 1, '\p{^Block:	-Private Use-AREA}', "");
Expect(1, 1, '\P{Block:	-Private Use-AREA}', "");
Expect(0, 1, '\P{^Block:	-Private Use-AREA}', "");
Error('\p{Blk=	private:=Use}');
Error('\P{Blk=	private:=Use}');
Expect(1, 63743, '\p{Blk=privateuse}', "");
Expect(0, 63743, '\p{^Blk=privateuse}', "");
Expect(0, 63743, '\P{Blk=privateuse}', "");
Expect(1, 63743, '\P{^Blk=privateuse}', "");
Expect(0, 1, '\p{Blk=privateuse}', "");
Expect(1, 1, '\p{^Blk=privateuse}', "");
Expect(1, 1, '\P{Blk=privateuse}', "");
Expect(0, 1, '\P{^Blk=privateuse}', "");
Expect(1, 63743, '\p{Blk=-_Private-Use}', "");
Expect(0, 63743, '\p{^Blk=-_Private-Use}', "");
Expect(0, 63743, '\P{Blk=-_Private-Use}', "");
Expect(1, 63743, '\P{^Blk=-_Private-Use}', "");
Expect(0, 1, '\p{Blk=-_Private-Use}', "");
Expect(1, 1, '\p{^Blk=-_Private-Use}', "");
Expect(1, 1, '\P{Blk=-_Private-Use}', "");
Expect(0, 1, '\P{^Blk=-_Private-Use}', "");
Error('\p{Is_Block=_:=PRIVATE-Use area}');
Error('\P{Is_Block=_:=PRIVATE-Use area}');
Expect(1, 63743, '\p{Is_Block=privateusearea}', "");
Expect(0, 63743, '\p{^Is_Block=privateusearea}', "");
Expect(0, 63743, '\P{Is_Block=privateusearea}', "");
Expect(1, 63743, '\P{^Is_Block=privateusearea}', "");
Expect(0, 1, '\p{Is_Block=privateusearea}', "");
Expect(1, 1, '\p{^Is_Block=privateusearea}', "");
Expect(1, 1, '\P{Is_Block=privateusearea}', "");
Expect(0, 1, '\P{^Is_Block=privateusearea}', "");
Expect(1, 63743, '\p{Is_Block=	-private-useArea}', "");
Expect(0, 63743, '\p{^Is_Block=	-private-useArea}', "");
Expect(0, 63743, '\P{Is_Block=	-private-useArea}', "");
Expect(1, 63743, '\P{^Is_Block=	-private-useArea}', "");
Expect(0, 1, '\p{Is_Block=	-private-useArea}', "");
Expect(1, 1, '\p{^Is_Block=	-private-useArea}', "");
Expect(1, 1, '\P{Is_Block=	-private-useArea}', "");
Expect(0, 1, '\P{^Is_Block=	-private-useArea}', "");
Error('\p{Is_Blk=/a/  Private	Use}');
Error('\P{Is_Blk=/a/  Private	Use}');
Expect(1, 63743, '\p{Is_Blk=privateuse}', "");
Expect(0, 63743, '\p{^Is_Blk=privateuse}', "");
Expect(0, 63743, '\P{Is_Blk=privateuse}', "");
Expect(1, 63743, '\P{^Is_Blk=privateuse}', "");
Expect(0, 1, '\p{Is_Blk=privateuse}', "");
Expect(1, 1, '\p{^Is_Blk=privateuse}', "");
Expect(1, 1, '\P{Is_Blk=privateuse}', "");
Expect(0, 1, '\P{^Is_Blk=privateuse}', "");
Expect(1, 63743, '\p{Is_Blk=__privateuse}', "");
Expect(0, 63743, '\p{^Is_Blk=__privateuse}', "");
Expect(0, 63743, '\P{Is_Blk=__privateuse}', "");
Expect(1, 63743, '\P{^Is_Blk=__privateuse}', "");
Expect(0, 1, '\p{Is_Blk=__privateuse}', "");
Expect(1, 1, '\p{^Is_Blk=__privateuse}', "");
Expect(1, 1, '\P{Is_Blk=__privateuse}', "");
Expect(0, 1, '\P{^Is_Blk=__privateuse}', "");
Error('\p{Block=/a/_ Syriac}');
Error('\P{Block=/a/_ Syriac}');
Expect(1, 1871, '\p{Block=syriac}', "");
Expect(0, 1871, '\p{^Block=syriac}', "");
Expect(0, 1871, '\P{Block=syriac}', "");
Expect(1, 1871, '\P{^Block=syriac}', "");
Expect(0, 1791, '\p{Block=syriac}', "");
Expect(1, 1791, '\p{^Block=syriac}', "");
Expect(1, 1791, '\P{Block=syriac}', "");
Expect(0, 1791, '\P{^Block=syriac}', "");
Expect(1, 1871, '\p{Block= 	Syriac}', "");
Expect(0, 1871, '\p{^Block= 	Syriac}', "");
Expect(0, 1871, '\P{Block= 	Syriac}', "");
Expect(1, 1871, '\P{^Block= 	Syriac}', "");
Expect(0, 1791, '\p{Block= 	Syriac}', "");
Expect(1, 1791, '\p{^Block= 	Syriac}', "");
Expect(1, 1791, '\P{Block= 	Syriac}', "");
Expect(0, 1791, '\P{^Block= 	Syriac}', "");
Error('\p{Blk=:=_ Syriac}');
Error('\P{Blk=:=_ Syriac}');
Expect(1, 1871, '\p{Blk=syriac}', "");
Expect(0, 1871, '\p{^Blk=syriac}', "");
Expect(0, 1871, '\P{Blk=syriac}', "");
Expect(1, 1871, '\P{^Blk=syriac}', "");
Expect(0, 1791, '\p{Blk=syriac}', "");
Expect(1, 1791, '\p{^Blk=syriac}', "");
Expect(1, 1791, '\P{Blk=syriac}', "");
Expect(0, 1791, '\P{^Blk=syriac}', "");
Expect(1, 1871, '\p{Blk:	Syriac}', "");
Expect(0, 1871, '\p{^Blk:	Syriac}', "");
Expect(0, 1871, '\P{Blk:	Syriac}', "");
Expect(1, 1871, '\P{^Blk:	Syriac}', "");
Expect(0, 1791, '\p{Blk:	Syriac}', "");
Expect(1, 1791, '\p{^Blk:	Syriac}', "");
Expect(1, 1791, '\P{Blk:	Syriac}', "");
Expect(0, 1791, '\P{^Blk:	Syriac}', "");
Error('\p{Is_Block=/a/ 	Syriac}');
Error('\P{Is_Block=/a/ 	Syriac}');
Expect(1, 1871, '\p{Is_Block=syriac}', "");
Expect(0, 1871, '\p{^Is_Block=syriac}', "");
Expect(0, 1871, '\P{Is_Block=syriac}', "");
Expect(1, 1871, '\P{^Is_Block=syriac}', "");
Expect(0, 1791, '\p{Is_Block=syriac}', "");
Expect(1, 1791, '\p{^Is_Block=syriac}', "");
Expect(1, 1791, '\P{Is_Block=syriac}', "");
Expect(0, 1791, '\P{^Is_Block=syriac}', "");
Expect(1, 1871, '\p{Is_Block=	 Syriac}', "");
Expect(0, 1871, '\p{^Is_Block=	 Syriac}', "");
Expect(0, 1871, '\P{Is_Block=	 Syriac}', "");
Expect(1, 1871, '\P{^Is_Block=	 Syriac}', "");
Expect(0, 1791, '\p{Is_Block=	 Syriac}', "");
Expect(1, 1791, '\p{^Is_Block=	 Syriac}', "");
Expect(1, 1791, '\P{Is_Block=	 Syriac}', "");
Expect(0, 1791, '\P{^Is_Block=	 Syriac}', "");
Error('\p{Is_Blk: _syriac:=}');
Error('\P{Is_Blk: _syriac:=}');
Expect(1, 1871, '\p{Is_Blk=syriac}', "");
Expect(0, 1871, '\p{^Is_Blk=syriac}', "");
Expect(0, 1871, '\P{Is_Blk=syriac}', "");
Expect(1, 1871, '\P{^Is_Blk=syriac}', "");
Expect(0, 1791, '\p{Is_Blk=syriac}', "");
Expect(1, 1791, '\p{^Is_Blk=syriac}', "");
Expect(1, 1791, '\P{Is_Blk=syriac}', "");
Expect(0, 1791, '\P{^Is_Blk=syriac}', "");
Expect(1, 1871, '\p{Is_Blk=	_SYRIAC}', "");
Expect(0, 1871, '\p{^Is_Blk=	_SYRIAC}', "");
Expect(0, 1871, '\P{Is_Blk=	_SYRIAC}', "");
Expect(1, 1871, '\P{^Is_Blk=	_SYRIAC}', "");
Expect(0, 1791, '\p{Is_Blk=	_SYRIAC}', "");
Expect(1, 1791, '\p{^Is_Blk=	_SYRIAC}', "");
Expect(1, 1791, '\P{Is_Blk=	_SYRIAC}', "");
Expect(0, 1791, '\P{^Is_Blk=	_SYRIAC}', "");
Error('\p{Block= -Ancient-Greek_Musical:=NOTATION}');
Error('\P{Block= -Ancient-Greek_Musical:=NOTATION}');
Expect(1, 119375, '\p{Block=ancientgreekmusicalnotation}', "");
Expect(0, 119375, '\p{^Block=ancientgreekmusicalnotation}', "");
Expect(0, 119375, '\P{Block=ancientgreekmusicalnotation}', "");
Expect(1, 119375, '\P{^Block=ancientgreekmusicalnotation}', "");
Expect(0, 119295, '\p{Block=ancientgreekmusicalnotation}', "");
Expect(1, 119295, '\p{^Block=ancientgreekmusicalnotation}', "");
Expect(1, 119295, '\P{Block=ancientgreekmusicalnotation}', "");
Expect(0, 119295, '\P{^Block=ancientgreekmusicalnotation}', "");
Expect(1, 119375, '\p{Block=  ANCIENT	greek	MUSICAL	notation}', "");
Expect(0, 119375, '\p{^Block=  ANCIENT	greek	MUSICAL	notation}', "");
Expect(0, 119375, '\P{Block=  ANCIENT	greek	MUSICAL	notation}', "");
Expect(1, 119375, '\P{^Block=  ANCIENT	greek	MUSICAL	notation}', "");
Expect(0, 119295, '\p{Block=  ANCIENT	greek	MUSICAL	notation}', "");
Expect(1, 119295, '\p{^Block=  ANCIENT	greek	MUSICAL	notation}', "");
Expect(1, 119295, '\P{Block=  ANCIENT	greek	MUSICAL	notation}', "");
Expect(0, 119295, '\P{^Block=  ANCIENT	greek	MUSICAL	notation}', "");
Error('\p{Blk=	ANCIENTGREEK-Musical	notation/a/}');
Error('\P{Blk=	ANCIENTGREEK-Musical	notation/a/}');
Expect(1, 119375, '\p{Blk:ancientgreekmusicalnotation}', "");
Expect(0, 119375, '\p{^Blk:ancientgreekmusicalnotation}', "");
Expect(0, 119375, '\P{Blk:ancientgreekmusicalnotation}', "");
Expect(1, 119375, '\P{^Blk:ancientgreekmusicalnotation}', "");
Expect(0, 119295, '\p{Blk:ancientgreekmusicalnotation}', "");
Expect(1, 119295, '\p{^Blk:ancientgreekmusicalnotation}', "");
Expect(1, 119295, '\P{Blk:ancientgreekmusicalnotation}', "");
Expect(0, 119295, '\P{^Blk:ancientgreekmusicalnotation}', "");
Expect(1, 119375, '\p{Blk=--Ancient_GREEK-Musical Notation}', "");
Expect(0, 119375, '\p{^Blk=--Ancient_GREEK-Musical Notation}', "");
Expect(0, 119375, '\P{Blk=--Ancient_GREEK-Musical Notation}', "");
Expect(1, 119375, '\P{^Blk=--Ancient_GREEK-Musical Notation}', "");
Expect(0, 119295, '\p{Blk=--Ancient_GREEK-Musical Notation}', "");
Expect(1, 119295, '\p{^Blk=--Ancient_GREEK-Musical Notation}', "");
Expect(1, 119295, '\P{Blk=--Ancient_GREEK-Musical Notation}', "");
Expect(0, 119295, '\P{^Blk=--Ancient_GREEK-Musical Notation}', "");
Error('\p{Is_Block=ANCIENT Greek Musical:=NOTATION}');
Error('\P{Is_Block=ANCIENT Greek Musical:=NOTATION}');
Expect(1, 119375, '\p{Is_Block=ancientgreekmusicalnotation}', "");
Expect(0, 119375, '\p{^Is_Block=ancientgreekmusicalnotation}', "");
Expect(0, 119375, '\P{Is_Block=ancientgreekmusicalnotation}', "");
Expect(1, 119375, '\P{^Is_Block=ancientgreekmusicalnotation}', "");
Expect(0, 119295, '\p{Is_Block=ancientgreekmusicalnotation}', "");
Expect(1, 119295, '\p{^Is_Block=ancientgreekmusicalnotation}', "");
Expect(1, 119295, '\P{Is_Block=ancientgreekmusicalnotation}', "");
Expect(0, 119295, '\P{^Is_Block=ancientgreekmusicalnotation}', "");
Expect(1, 119375, '\p{Is_Block=  Ancient-GREEK_musical-notation}', "");
Expect(0, 119375, '\p{^Is_Block=  Ancient-GREEK_musical-notation}', "");
Expect(0, 119375, '\P{Is_Block=  Ancient-GREEK_musical-notation}', "");
Expect(1, 119375, '\P{^Is_Block=  Ancient-GREEK_musical-notation}', "");
Expect(0, 119295, '\p{Is_Block=  Ancient-GREEK_musical-notation}', "");
Expect(1, 119295, '\p{^Is_Block=  Ancient-GREEK_musical-notation}', "");
Expect(1, 119295, '\P{Is_Block=  Ancient-GREEK_musical-notation}', "");
Expect(0, 119295, '\P{^Is_Block=  Ancient-GREEK_musical-notation}', "");
Error('\p{Is_Blk:	 _ancientGreek/a/musical-Notation}');
Error('\P{Is_Blk:	 _ancientGreek/a/musical-Notation}');
Expect(1, 119375, '\p{Is_Blk=ancientgreekmusicalnotation}', "");
Expect(0, 119375, '\p{^Is_Blk=ancientgreekmusicalnotation}', "");
Expect(0, 119375, '\P{Is_Blk=ancientgreekmusicalnotation}', "");
Expect(1, 119375, '\P{^Is_Blk=ancientgreekmusicalnotation}', "");
Expect(0, 119295, '\p{Is_Blk=ancientgreekmusicalnotation}', "");
Expect(1, 119295, '\p{^Is_Blk=ancientgreekmusicalnotation}', "");
Expect(1, 119295, '\P{Is_Blk=ancientgreekmusicalnotation}', "");
Expect(0, 119295, '\P{^Is_Blk=ancientgreekmusicalnotation}', "");
Expect(1, 119375, '\p{Is_Blk:    	Ancient Greek Musical_Notation}', "");
Expect(0, 119375, '\p{^Is_Blk:    	Ancient Greek Musical_Notation}', "");
Expect(0, 119375, '\P{Is_Blk:    	Ancient Greek Musical_Notation}', "");
Expect(1, 119375, '\P{^Is_Blk:    	Ancient Greek Musical_Notation}', "");
Expect(0, 119295, '\p{Is_Blk:    	Ancient Greek Musical_Notation}', "");
Expect(1, 119295, '\p{^Is_Blk:    	Ancient Greek Musical_Notation}', "");
Expect(1, 119295, '\P{Is_Blk:    	Ancient Greek Musical_Notation}', "");
Expect(0, 119295, '\P{^Is_Blk:    	Ancient Greek Musical_Notation}', "");
Error('\p{Block=/a/_ phags	pa}');
Error('\P{Block=/a/_ phags	pa}');
Expect(1, 43135, '\p{Block=phagspa}', "");
Expect(0, 43135, '\p{^Block=phagspa}', "");
Expect(0, 43135, '\P{Block=phagspa}', "");
Expect(1, 43135, '\P{^Block=phagspa}', "");
Expect(0, 43071, '\p{Block=phagspa}', "");
Expect(1, 43071, '\p{^Block=phagspa}', "");
Expect(1, 43071, '\P{Block=phagspa}', "");
Expect(0, 43071, '\P{^Block=phagspa}', "");
Expect(1, 43135, '\p{Block=-phags_Pa}', "");
Expect(0, 43135, '\p{^Block=-phags_Pa}', "");
Expect(0, 43135, '\P{Block=-phags_Pa}', "");
Expect(1, 43135, '\P{^Block=-phags_Pa}', "");
Expect(0, 43071, '\p{Block=-phags_Pa}', "");
Expect(1, 43071, '\p{^Block=-phags_Pa}', "");
Expect(1, 43071, '\P{Block=-phags_Pa}', "");
Expect(0, 43071, '\P{^Block=-phags_Pa}', "");
Error('\p{Blk=	:=PHAGS_Pa}');
Error('\P{Blk=	:=PHAGS_Pa}');
Expect(1, 43135, '\p{Blk:phagspa}', "");
Expect(0, 43135, '\p{^Blk:phagspa}', "");
Expect(0, 43135, '\P{Blk:phagspa}', "");
Expect(1, 43135, '\P{^Blk:phagspa}', "");
Expect(0, 43071, '\p{Blk:phagspa}', "");
Expect(1, 43071, '\p{^Blk:phagspa}', "");
Expect(1, 43071, '\P{Blk:phagspa}', "");
Expect(0, 43071, '\P{^Blk:phagspa}', "");
Expect(1, 43135, '\p{Blk=_ PHAGS-Pa}', "");
Expect(0, 43135, '\p{^Blk=_ PHAGS-Pa}', "");
Expect(0, 43135, '\P{Blk=_ PHAGS-Pa}', "");
Expect(1, 43135, '\P{^Blk=_ PHAGS-Pa}', "");
Expect(0, 43071, '\p{Blk=_ PHAGS-Pa}', "");
Expect(1, 43071, '\p{^Blk=_ PHAGS-Pa}', "");
Expect(1, 43071, '\P{Blk=_ PHAGS-Pa}', "");
Expect(0, 43071, '\P{^Blk=_ PHAGS-Pa}', "");
Error('\p{Is_Block=/a/_Phags Pa}');
Error('\P{Is_Block=/a/_Phags Pa}');
Expect(1, 43135, '\p{Is_Block=phagspa}', "");
Expect(0, 43135, '\p{^Is_Block=phagspa}', "");
Expect(0, 43135, '\P{Is_Block=phagspa}', "");
Expect(1, 43135, '\P{^Is_Block=phagspa}', "");
Expect(0, 43071, '\p{Is_Block=phagspa}', "");
Expect(1, 43071, '\p{^Is_Block=phagspa}', "");
Expect(1, 43071, '\P{Is_Block=phagspa}', "");
Expect(0, 43071, '\P{^Is_Block=phagspa}', "");
Expect(1, 43135, '\p{Is_Block=		PHAGSPA}', "");
Expect(0, 43135, '\p{^Is_Block=		PHAGSPA}', "");
Expect(0, 43135, '\P{Is_Block=		PHAGSPA}', "");
Expect(1, 43135, '\P{^Is_Block=		PHAGSPA}', "");
Expect(0, 43071, '\p{Is_Block=		PHAGSPA}', "");
Expect(1, 43071, '\p{^Is_Block=		PHAGSPA}', "");
Expect(1, 43071, '\P{Is_Block=		PHAGSPA}', "");
Expect(0, 43071, '\P{^Is_Block=		PHAGSPA}', "");
Error('\p{Is_Blk=:=__Phags	pa}');
Error('\P{Is_Blk=:=__Phags	pa}');
Expect(1, 43135, '\p{Is_Blk=phagspa}', "");
Expect(0, 43135, '\p{^Is_Blk=phagspa}', "");
Expect(0, 43135, '\P{Is_Blk=phagspa}', "");
Expect(1, 43135, '\P{^Is_Blk=phagspa}', "");
Expect(0, 43071, '\p{Is_Blk=phagspa}', "");
Expect(1, 43071, '\p{^Is_Blk=phagspa}', "");
Expect(1, 43071, '\P{Is_Blk=phagspa}', "");
Expect(0, 43071, '\P{^Is_Blk=phagspa}', "");
Expect(1, 43135, '\p{Is_Blk=		PHAGSPa}', "");
Expect(0, 43135, '\p{^Is_Blk=		PHAGSPa}', "");
Expect(0, 43135, '\P{Is_Blk=		PHAGSPa}', "");
Expect(1, 43135, '\P{^Is_Blk=		PHAGSPa}', "");
Expect(0, 43071, '\p{Is_Blk=		PHAGSPa}', "");
Expect(1, 43071, '\p{^Is_Blk=		PHAGSPa}', "");
Expect(1, 43071, '\P{Is_Blk=		PHAGSPa}', "");
Expect(0, 43071, '\P{^Is_Blk=		PHAGSPa}', "");
Error('\p{Block=	/a/CJK compatibility Ideographs}');
Error('\P{Block=	/a/CJK compatibility Ideographs}');
Expect(1, 64255, '\p{Block=cjkcompatibilityideographs}', "");
Expect(0, 64255, '\p{^Block=cjkcompatibilityideographs}', "");
Expect(0, 64255, '\P{Block=cjkcompatibilityideographs}', "");
Expect(1, 64255, '\P{^Block=cjkcompatibilityideographs}', "");
Expect(0, 63743, '\p{Block=cjkcompatibilityideographs}', "");
Expect(1, 63743, '\p{^Block=cjkcompatibilityideographs}', "");
Expect(1, 63743, '\P{Block=cjkcompatibilityideographs}', "");
Expect(0, 63743, '\P{^Block=cjkcompatibilityideographs}', "");
Expect(1, 64255, '\p{Block:   _ cjk_CompatibilityIdeographs}', "");
Expect(0, 64255, '\p{^Block:   _ cjk_CompatibilityIdeographs}', "");
Expect(0, 64255, '\P{Block:   _ cjk_CompatibilityIdeographs}', "");
Expect(1, 64255, '\P{^Block:   _ cjk_CompatibilityIdeographs}', "");
Expect(0, 63743, '\p{Block:   _ cjk_CompatibilityIdeographs}', "");
Expect(1, 63743, '\p{^Block:   _ cjk_CompatibilityIdeographs}', "");
Expect(1, 63743, '\P{Block:   _ cjk_CompatibilityIdeographs}', "");
Expect(0, 63743, '\P{^Block:   _ cjk_CompatibilityIdeographs}', "");
Error('\p{Blk=/a/ _cjk_CompatibilityIdeographs}');
Error('\P{Blk=/a/ _cjk_CompatibilityIdeographs}');
Expect(1, 64255, '\p{Blk=cjkcompatibilityideographs}', "");
Expect(0, 64255, '\p{^Blk=cjkcompatibilityideographs}', "");
Expect(0, 64255, '\P{Blk=cjkcompatibilityideographs}', "");
Expect(1, 64255, '\P{^Blk=cjkcompatibilityideographs}', "");
Expect(0, 63743, '\p{Blk=cjkcompatibilityideographs}', "");
Expect(1, 63743, '\p{^Blk=cjkcompatibilityideographs}', "");
Expect(1, 63743, '\P{Blk=cjkcompatibilityideographs}', "");
Expect(0, 63743, '\P{^Blk=cjkcompatibilityideographs}', "");
Expect(1, 64255, '\p{Blk=_	CJK_compatibilityIDEOGRAPHS}', "");
Expect(0, 64255, '\p{^Blk=_	CJK_compatibilityIDEOGRAPHS}', "");
Expect(0, 64255, '\P{Blk=_	CJK_compatibilityIDEOGRAPHS}', "");
Expect(1, 64255, '\P{^Blk=_	CJK_compatibilityIDEOGRAPHS}', "");
Expect(0, 63743, '\p{Blk=_	CJK_compatibilityIDEOGRAPHS}', "");
Expect(1, 63743, '\p{^Blk=_	CJK_compatibilityIDEOGRAPHS}', "");
Expect(1, 63743, '\P{Blk=_	CJK_compatibilityIDEOGRAPHS}', "");
Expect(0, 63743, '\P{^Blk=_	CJK_compatibilityIDEOGRAPHS}', "");
Error('\p{Is_Block=  CJK COMPATIBILITY/a/ideographs}');
Error('\P{Is_Block=  CJK COMPATIBILITY/a/ideographs}');
Expect(1, 64255, '\p{Is_Block=cjkcompatibilityideographs}', "");
Expect(0, 64255, '\p{^Is_Block=cjkcompatibilityideographs}', "");
Expect(0, 64255, '\P{Is_Block=cjkcompatibilityideographs}', "");
Expect(1, 64255, '\P{^Is_Block=cjkcompatibilityideographs}', "");
Expect(0, 63743, '\p{Is_Block=cjkcompatibilityideographs}', "");
Expect(1, 63743, '\p{^Is_Block=cjkcompatibilityideographs}', "");
Expect(1, 63743, '\P{Is_Block=cjkcompatibilityideographs}', "");
Expect(0, 63743, '\P{^Is_Block=cjkcompatibilityideographs}', "");
Expect(1, 64255, '\p{Is_Block=cjkCompatibilityIDEOGRAPHS}', "");
Expect(0, 64255, '\p{^Is_Block=cjkCompatibilityIDEOGRAPHS}', "");
Expect(0, 64255, '\P{Is_Block=cjkCompatibilityIDEOGRAPHS}', "");
Expect(1, 64255, '\P{^Is_Block=cjkCompatibilityIDEOGRAPHS}', "");
Expect(0, 63743, '\p{Is_Block=cjkCompatibilityIDEOGRAPHS}', "");
Expect(1, 63743, '\p{^Is_Block=cjkCompatibilityIDEOGRAPHS}', "");
Expect(1, 63743, '\P{Is_Block=cjkCompatibilityIDEOGRAPHS}', "");
Expect(0, 63743, '\P{^Is_Block=cjkCompatibilityIDEOGRAPHS}', "");
Error('\p{Is_Blk=/a/-	CJK-Compatibility ideographs}');
Error('\P{Is_Blk=/a/-	CJK-Compatibility ideographs}');
Expect(1, 64255, '\p{Is_Blk=cjkcompatibilityideographs}', "");
Expect(0, 64255, '\p{^Is_Blk=cjkcompatibilityideographs}', "");
Expect(0, 64255, '\P{Is_Blk=cjkcompatibilityideographs}', "");
Expect(1, 64255, '\P{^Is_Blk=cjkcompatibilityideographs}', "");
Expect(0, 63743, '\p{Is_Blk=cjkcompatibilityideographs}', "");
Expect(1, 63743, '\p{^Is_Blk=cjkcompatibilityideographs}', "");
Expect(1, 63743, '\P{Is_Blk=cjkcompatibilityideographs}', "");
Expect(0, 63743, '\P{^Is_Blk=cjkcompatibilityideographs}', "");
Expect(1, 64255, '\p{Is_Blk=--CJKcompatibility Ideographs}', "");
Expect(0, 64255, '\p{^Is_Blk=--CJKcompatibility Ideographs}', "");
Expect(0, 64255, '\P{Is_Blk=--CJKcompatibility Ideographs}', "");
Expect(1, 64255, '\P{^Is_Blk=--CJKcompatibility Ideographs}', "");
Expect(0, 63743, '\p{Is_Blk=--CJKcompatibility Ideographs}', "");
Expect(1, 63743, '\p{^Is_Blk=--CJKcompatibility Ideographs}', "");
Expect(1, 63743, '\P{Is_Blk=--CJKcompatibility Ideographs}', "");
Expect(0, 63743, '\P{^Is_Blk=--CJKcompatibility Ideographs}', "");
Error('\p{Block=:=_	Thaana}');
Error('\P{Block=:=_	Thaana}');
Expect(1, 1983, '\p{Block=thaana}', "");
Expect(0, 1983, '\p{^Block=thaana}', "");
Expect(0, 1983, '\P{Block=thaana}', "");
Expect(1, 1983, '\P{^Block=thaana}', "");
Expect(0, 1919, '\p{Block=thaana}', "");
Expect(1, 1919, '\p{^Block=thaana}', "");
Expect(1, 1919, '\P{Block=thaana}', "");
Expect(0, 1919, '\P{^Block=thaana}', "");
Expect(1, 1983, '\p{Block=	-Thaana}', "");
Expect(0, 1983, '\p{^Block=	-Thaana}', "");
Expect(0, 1983, '\P{Block=	-Thaana}', "");
Expect(1, 1983, '\P{^Block=	-Thaana}', "");
Expect(0, 1919, '\p{Block=	-Thaana}', "");
Expect(1, 1919, '\p{^Block=	-Thaana}', "");
Expect(1, 1919, '\P{Block=	-Thaana}', "");
Expect(0, 1919, '\P{^Block=	-Thaana}', "");
Error('\p{Blk=-	THAANA:=}');
Error('\P{Blk=-	THAANA:=}');
Expect(1, 1983, '\p{Blk=thaana}', "");
Expect(0, 1983, '\p{^Blk=thaana}', "");
Expect(0, 1983, '\P{Blk=thaana}', "");
Expect(1, 1983, '\P{^Blk=thaana}', "");
Expect(0, 1919, '\p{Blk=thaana}', "");
Expect(1, 1919, '\p{^Blk=thaana}', "");
Expect(1, 1919, '\P{Blk=thaana}', "");
Expect(0, 1919, '\P{^Blk=thaana}', "");
Expect(1, 1983, '\p{Blk=- thaana}', "");
Expect(0, 1983, '\p{^Blk=- thaana}', "");
Expect(0, 1983, '\P{Blk=- thaana}', "");
Expect(1, 1983, '\P{^Blk=- thaana}', "");
Expect(0, 1919, '\p{Blk=- thaana}', "");
Expect(1, 1919, '\p{^Blk=- thaana}', "");
Expect(1, 1919, '\P{Blk=- thaana}', "");
Expect(0, 1919, '\P{^Blk=- thaana}', "");
Error('\p{Is_Block: :=	thaana}');
Error('\P{Is_Block: :=	thaana}');
Expect(1, 1983, '\p{Is_Block:   thaana}', "");
Expect(0, 1983, '\p{^Is_Block:   thaana}', "");
Expect(0, 1983, '\P{Is_Block:   thaana}', "");
Expect(1, 1983, '\P{^Is_Block:   thaana}', "");
Expect(0, 1919, '\p{Is_Block:   thaana}', "");
Expect(1, 1919, '\p{^Is_Block:   thaana}', "");
Expect(1, 1919, '\P{Is_Block:   thaana}', "");
Expect(0, 1919, '\P{^Is_Block:   thaana}', "");
Expect(1, 1983, '\p{Is_Block=-THAANA}', "");
Expect(0, 1983, '\p{^Is_Block=-THAANA}', "");
Expect(0, 1983, '\P{Is_Block=-THAANA}', "");
Expect(1, 1983, '\P{^Is_Block=-THAANA}', "");
Expect(0, 1919, '\p{Is_Block=-THAANA}', "");
Expect(1, 1919, '\p{^Is_Block=-THAANA}', "");
Expect(1, 1919, '\P{Is_Block=-THAANA}', "");
Expect(0, 1919, '\P{^Is_Block=-THAANA}', "");
Error('\p{Is_Blk=_ thaana:=}');
Error('\P{Is_Blk=_ thaana:=}');
Expect(1, 1983, '\p{Is_Blk=thaana}', "");
Expect(0, 1983, '\p{^Is_Blk=thaana}', "");
Expect(0, 1983, '\P{Is_Blk=thaana}', "");
Expect(1, 1983, '\P{^Is_Blk=thaana}', "");
Expect(0, 1919, '\p{Is_Blk=thaana}', "");
Expect(1, 1919, '\p{^Is_Blk=thaana}', "");
Expect(1, 1919, '\P{Is_Blk=thaana}', "");
Expect(0, 1919, '\P{^Is_Blk=thaana}', "");
Expect(1, 1983, '\p{Is_Blk=	thaana}', "");
Expect(0, 1983, '\p{^Is_Blk=	thaana}', "");
Expect(0, 1983, '\P{Is_Blk=	thaana}', "");
Expect(1, 1983, '\P{^Is_Blk=	thaana}', "");
Expect(0, 1919, '\p{Is_Blk=	thaana}', "");
Expect(1, 1919, '\p{^Is_Blk=	thaana}', "");
Expect(1, 1919, '\P{Is_Blk=	thaana}', "");
Expect(0, 1919, '\P{^Is_Blk=	thaana}', "");
Error('\p{Block=_-Enclosed Alphanumeric:=Supplement}');
Error('\P{Block=_-Enclosed Alphanumeric:=Supplement}');
Expect(1, 127487, '\p{Block:enclosedalphanumericsupplement}', "");
Expect(0, 127487, '\p{^Block:enclosedalphanumericsupplement}', "");
Expect(0, 127487, '\P{Block:enclosedalphanumericsupplement}', "");
Expect(1, 127487, '\P{^Block:enclosedalphanumericsupplement}', "");
Expect(0, 127231, '\p{Block:enclosedalphanumericsupplement}', "");
Expect(1, 127231, '\p{^Block:enclosedalphanumericsupplement}', "");
Expect(1, 127231, '\P{Block:enclosedalphanumericsupplement}', "");
Expect(0, 127231, '\P{^Block:enclosedalphanumericsupplement}', "");
Expect(1, 127487, '\p{Block=_enclosed_alphanumeric	supplement}', "");
Expect(0, 127487, '\p{^Block=_enclosed_alphanumeric	supplement}', "");
Expect(0, 127487, '\P{Block=_enclosed_alphanumeric	supplement}', "");
Expect(1, 127487, '\P{^Block=_enclosed_alphanumeric	supplement}', "");
Expect(0, 127231, '\p{Block=_enclosed_alphanumeric	supplement}', "");
Expect(1, 127231, '\p{^Block=_enclosed_alphanumeric	supplement}', "");
Expect(1, 127231, '\P{Block=_enclosed_alphanumeric	supplement}', "");
Expect(0, 127231, '\P{^Block=_enclosed_alphanumeric	supplement}', "");
Error('\p{Blk=:=-enclosed Alphanumeric-Supplement}');
Error('\P{Blk=:=-enclosed Alphanumeric-Supplement}');
Expect(1, 127487, '\p{Blk=enclosedalphanumericsupplement}', "");
Expect(0, 127487, '\p{^Blk=enclosedalphanumericsupplement}', "");
Expect(0, 127487, '\P{Blk=enclosedalphanumericsupplement}', "");
Expect(1, 127487, '\P{^Blk=enclosedalphanumericsupplement}', "");
Expect(0, 127231, '\p{Blk=enclosedalphanumericsupplement}', "");
Expect(1, 127231, '\p{^Blk=enclosedalphanumericsupplement}', "");
Expect(1, 127231, '\P{Blk=enclosedalphanumericsupplement}', "");
Expect(0, 127231, '\P{^Blk=enclosedalphanumericsupplement}', "");
Expect(1, 127487, '\p{Blk=--Enclosed	Alphanumeric supplement}', "");
Expect(0, 127487, '\p{^Blk=--Enclosed	Alphanumeric supplement}', "");
Expect(0, 127487, '\P{Blk=--Enclosed	Alphanumeric supplement}', "");
Expect(1, 127487, '\P{^Blk=--Enclosed	Alphanumeric supplement}', "");
Expect(0, 127231, '\p{Blk=--Enclosed	Alphanumeric supplement}', "");
Expect(1, 127231, '\p{^Blk=--Enclosed	Alphanumeric supplement}', "");
Expect(1, 127231, '\P{Blk=--Enclosed	Alphanumeric supplement}', "");
Expect(0, 127231, '\P{^Blk=--Enclosed	Alphanumeric supplement}', "");
Error('\p{Is_Block=--Enclosed-Alphanumeric_Supplement/a/}');
Error('\P{Is_Block=--Enclosed-Alphanumeric_Supplement/a/}');
Expect(1, 127487, '\p{Is_Block=enclosedalphanumericsupplement}', "");
Expect(0, 127487, '\p{^Is_Block=enclosedalphanumericsupplement}', "");
Expect(0, 127487, '\P{Is_Block=enclosedalphanumericsupplement}', "");
Expect(1, 127487, '\P{^Is_Block=enclosedalphanumericsupplement}', "");
Expect(0, 127231, '\p{Is_Block=enclosedalphanumericsupplement}', "");
Expect(1, 127231, '\p{^Is_Block=enclosedalphanumericsupplement}', "");
Expect(1, 127231, '\P{Is_Block=enclosedalphanumericsupplement}', "");
Expect(0, 127231, '\P{^Is_Block=enclosedalphanumericsupplement}', "");
Expect(1, 127487, '\p{Is_Block:  EnclosedAlphanumeric	Supplement}', "");
Expect(0, 127487, '\p{^Is_Block:  EnclosedAlphanumeric	Supplement}', "");
Expect(0, 127487, '\P{Is_Block:  EnclosedAlphanumeric	Supplement}', "");
Expect(1, 127487, '\P{^Is_Block:  EnclosedAlphanumeric	Supplement}', "");
Expect(0, 127231, '\p{Is_Block:  EnclosedAlphanumeric	Supplement}', "");
Expect(1, 127231, '\p{^Is_Block:  EnclosedAlphanumeric	Supplement}', "");
Expect(1, 127231, '\P{Is_Block:  EnclosedAlphanumeric	Supplement}', "");
Expect(0, 127231, '\P{^Is_Block:  EnclosedAlphanumeric	Supplement}', "");
Error('\p{Is_Blk=	Enclosed/a/alphanumericSUPPLEMENT}');
Error('\P{Is_Blk=	Enclosed/a/alphanumericSUPPLEMENT}');
Expect(1, 127487, '\p{Is_Blk=enclosedalphanumericsupplement}', "");
Expect(0, 127487, '\p{^Is_Blk=enclosedalphanumericsupplement}', "");
Expect(0, 127487, '\P{Is_Blk=enclosedalphanumericsupplement}', "");
Expect(1, 127487, '\P{^Is_Blk=enclosedalphanumericsupplement}', "");
Expect(0, 127231, '\p{Is_Blk=enclosedalphanumericsupplement}', "");
Expect(1, 127231, '\p{^Is_Blk=enclosedalphanumericsupplement}', "");
Expect(1, 127231, '\P{Is_Blk=enclosedalphanumericsupplement}', "");
Expect(0, 127231, '\P{^Is_Blk=enclosedalphanumericsupplement}', "");
Expect(1, 127487, '\p{Is_Blk=_-EnclosedAlphanumeric	SUPPLEMENT}', "");
Expect(0, 127487, '\p{^Is_Blk=_-EnclosedAlphanumeric	SUPPLEMENT}', "");
Expect(0, 127487, '\P{Is_Blk=_-EnclosedAlphanumeric	SUPPLEMENT}', "");
Expect(1, 127487, '\P{^Is_Blk=_-EnclosedAlphanumeric	SUPPLEMENT}', "");
Expect(0, 127231, '\p{Is_Blk=_-EnclosedAlphanumeric	SUPPLEMENT}', "");
Expect(1, 127231, '\p{^Is_Blk=_-EnclosedAlphanumeric	SUPPLEMENT}', "");
Expect(1, 127231, '\P{Is_Blk=_-EnclosedAlphanumeric	SUPPLEMENT}', "");
Expect(0, 127231, '\P{^Is_Blk=_-EnclosedAlphanumeric	SUPPLEMENT}', "");
Error('\p{Block=	:=ethiopic	EXTENDED}');
Error('\P{Block=	:=ethiopic	EXTENDED}');
Expect(1, 11743, '\p{Block=ethiopicextended}', "");
Expect(0, 11743, '\p{^Block=ethiopicextended}', "");
Expect(0, 11743, '\P{Block=ethiopicextended}', "");
Expect(1, 11743, '\P{^Block=ethiopicextended}', "");
Expect(0, 11647, '\p{Block=ethiopicextended}', "");
Expect(1, 11647, '\p{^Block=ethiopicextended}', "");
Expect(1, 11647, '\P{Block=ethiopicextended}', "");
Expect(0, 11647, '\P{^Block=ethiopicextended}', "");
Expect(1, 11743, '\p{Block=	-ethiopic extended}', "");
Expect(0, 11743, '\p{^Block=	-ethiopic extended}', "");
Expect(0, 11743, '\P{Block=	-ethiopic extended}', "");
Expect(1, 11743, '\P{^Block=	-ethiopic extended}', "");
Expect(0, 11647, '\p{Block=	-ethiopic extended}', "");
Expect(1, 11647, '\p{^Block=	-ethiopic extended}', "");
Expect(1, 11647, '\P{Block=	-ethiopic extended}', "");
Expect(0, 11647, '\P{^Block=	-ethiopic extended}', "");
Error('\p{Blk=	Ethiopic/a/EXTENDED}');
Error('\P{Blk=	Ethiopic/a/EXTENDED}');
Expect(1, 11743, '\p{Blk:	ethiopicextended}', "");
Expect(0, 11743, '\p{^Blk:	ethiopicextended}', "");
Expect(0, 11743, '\P{Blk:	ethiopicextended}', "");
Expect(1, 11743, '\P{^Blk:	ethiopicextended}', "");
Expect(0, 11647, '\p{Blk:	ethiopicextended}', "");
Expect(1, 11647, '\p{^Blk:	ethiopicextended}', "");
Expect(1, 11647, '\P{Blk:	ethiopicextended}', "");
Expect(0, 11647, '\P{^Blk:	ethiopicextended}', "");
Expect(1, 11743, '\p{Blk:   - Ethiopic-EXTENDED}', "");
Expect(0, 11743, '\p{^Blk:   - Ethiopic-EXTENDED}', "");
Expect(0, 11743, '\P{Blk:   - Ethiopic-EXTENDED}', "");
Expect(1, 11743, '\P{^Blk:   - Ethiopic-EXTENDED}', "");
Expect(0, 11647, '\p{Blk:   - Ethiopic-EXTENDED}', "");
Expect(1, 11647, '\p{^Blk:   - Ethiopic-EXTENDED}', "");
Expect(1, 11647, '\P{Blk:   - Ethiopic-EXTENDED}', "");
Expect(0, 11647, '\P{^Blk:   - Ethiopic-EXTENDED}', "");
Error('\p{Is_Block=/a/_ethiopic_extended}');
Error('\P{Is_Block=/a/_ethiopic_extended}');
Expect(1, 11743, '\p{Is_Block=ethiopicextended}', "");
Expect(0, 11743, '\p{^Is_Block=ethiopicextended}', "");
Expect(0, 11743, '\P{Is_Block=ethiopicextended}', "");
Expect(1, 11743, '\P{^Is_Block=ethiopicextended}', "");
Expect(0, 11647, '\p{Is_Block=ethiopicextended}', "");
Expect(1, 11647, '\p{^Is_Block=ethiopicextended}', "");
Expect(1, 11647, '\P{Is_Block=ethiopicextended}', "");
Expect(0, 11647, '\P{^Is_Block=ethiopicextended}', "");
Expect(1, 11743, '\p{Is_Block= EthiopicExtended}', "");
Expect(0, 11743, '\p{^Is_Block= EthiopicExtended}', "");
Expect(0, 11743, '\P{Is_Block= EthiopicExtended}', "");
Expect(1, 11743, '\P{^Is_Block= EthiopicExtended}', "");
Expect(0, 11647, '\p{Is_Block= EthiopicExtended}', "");
Expect(1, 11647, '\p{^Is_Block= EthiopicExtended}', "");
Expect(1, 11647, '\P{Is_Block= EthiopicExtended}', "");
Expect(0, 11647, '\P{^Is_Block= EthiopicExtended}', "");
Error('\p{Is_Blk=-:=ethiopicExtended}');
Error('\P{Is_Blk=-:=ethiopicExtended}');
Expect(1, 11743, '\p{Is_Blk=ethiopicextended}', "");
Expect(0, 11743, '\p{^Is_Blk=ethiopicextended}', "");
Expect(0, 11743, '\P{Is_Blk=ethiopicextended}', "");
Expect(1, 11743, '\P{^Is_Blk=ethiopicextended}', "");
Expect(0, 11647, '\p{Is_Blk=ethiopicextended}', "");
Expect(1, 11647, '\p{^Is_Blk=ethiopicextended}', "");
Expect(1, 11647, '\P{Is_Blk=ethiopicextended}', "");
Expect(0, 11647, '\P{^Is_Blk=ethiopicextended}', "");
Expect(1, 11743, '\p{Is_Blk=_EthiopicExtended}', "");
Expect(0, 11743, '\p{^Is_Blk=_EthiopicExtended}', "");
Expect(0, 11743, '\P{Is_Blk=_EthiopicExtended}', "");
Expect(1, 11743, '\P{^Is_Blk=_EthiopicExtended}', "");
Expect(0, 11647, '\p{Is_Blk=_EthiopicExtended}', "");
Expect(1, 11647, '\p{^Is_Blk=_EthiopicExtended}', "");
Expect(1, 11647, '\P{Is_Blk=_EthiopicExtended}', "");
Expect(0, 11647, '\P{^Is_Blk=_EthiopicExtended}', "");
Error('\p{Block= 	phoenician/a/}');
Error('\P{Block= 	phoenician/a/}');
Expect(1, 67871, '\p{Block=phoenician}', "");
Expect(0, 67871, '\p{^Block=phoenician}', "");
Expect(0, 67871, '\P{Block=phoenician}', "");
Expect(1, 67871, '\P{^Block=phoenician}', "");
Expect(0, 67839, '\p{Block=phoenician}', "");
Expect(1, 67839, '\p{^Block=phoenician}', "");
Expect(1, 67839, '\P{Block=phoenician}', "");
Expect(0, 67839, '\P{^Block=phoenician}', "");
Expect(1, 67871, '\p{Block= 	PHOENICIAN}', "");
Expect(0, 67871, '\p{^Block= 	PHOENICIAN}', "");
Expect(0, 67871, '\P{Block= 	PHOENICIAN}', "");
Expect(1, 67871, '\P{^Block= 	PHOENICIAN}', "");
Expect(0, 67839, '\p{Block= 	PHOENICIAN}', "");
Expect(1, 67839, '\p{^Block= 	PHOENICIAN}', "");
Expect(1, 67839, '\P{Block= 	PHOENICIAN}', "");
Expect(0, 67839, '\P{^Block= 	PHOENICIAN}', "");
Error('\p{Blk=-Phoenician/a/}');
Error('\P{Blk=-Phoenician/a/}');
Expect(1, 67871, '\p{Blk=phoenician}', "");
Expect(0, 67871, '\p{^Blk=phoenician}', "");
Expect(0, 67871, '\P{Blk=phoenician}', "");
Expect(1, 67871, '\P{^Blk=phoenician}', "");
Expect(0, 67839, '\p{Blk=phoenician}', "");
Expect(1, 67839, '\p{^Blk=phoenician}', "");
Expect(1, 67839, '\P{Blk=phoenician}', "");
Expect(0, 67839, '\P{^Blk=phoenician}', "");
Expect(1, 67871, '\p{Blk= 	PHOENICIAN}', "");
Expect(0, 67871, '\p{^Blk= 	PHOENICIAN}', "");
Expect(0, 67871, '\P{Blk= 	PHOENICIAN}', "");
Expect(1, 67871, '\P{^Blk= 	PHOENICIAN}', "");
Expect(0, 67839, '\p{Blk= 	PHOENICIAN}', "");
Expect(1, 67839, '\p{^Blk= 	PHOENICIAN}', "");
Expect(1, 67839, '\P{Blk= 	PHOENICIAN}', "");
Expect(0, 67839, '\P{^Blk= 	PHOENICIAN}', "");
Error('\p{Is_Block=/a/	_Phoenician}');
Error('\P{Is_Block=/a/	_Phoenician}');
Expect(1, 67871, '\p{Is_Block=phoenician}', "");
Expect(0, 67871, '\p{^Is_Block=phoenician}', "");
Expect(0, 67871, '\P{Is_Block=phoenician}', "");
Expect(1, 67871, '\P{^Is_Block=phoenician}', "");
Expect(0, 67839, '\p{Is_Block=phoenician}', "");
Expect(1, 67839, '\p{^Is_Block=phoenician}', "");
Expect(1, 67839, '\P{Is_Block=phoenician}', "");
Expect(0, 67839, '\P{^Is_Block=phoenician}', "");
Expect(1, 67871, '\p{Is_Block=	_Phoenician}', "");
Expect(0, 67871, '\p{^Is_Block=	_Phoenician}', "");
Expect(0, 67871, '\P{Is_Block=	_Phoenician}', "");
Expect(1, 67871, '\P{^Is_Block=	_Phoenician}', "");
Expect(0, 67839, '\p{Is_Block=	_Phoenician}', "");
Expect(1, 67839, '\p{^Is_Block=	_Phoenician}', "");
Expect(1, 67839, '\P{Is_Block=	_Phoenician}', "");
Expect(0, 67839, '\P{^Is_Block=	_Phoenician}', "");
Error('\p{Is_Blk=:= Phoenician}');
Error('\P{Is_Blk=:= Phoenician}');
Expect(1, 67871, '\p{Is_Blk=phoenician}', "");
Expect(0, 67871, '\p{^Is_Blk=phoenician}', "");
Expect(0, 67871, '\P{Is_Blk=phoenician}', "");
Expect(1, 67871, '\P{^Is_Blk=phoenician}', "");
Expect(0, 67839, '\p{Is_Blk=phoenician}', "");
Expect(1, 67839, '\p{^Is_Blk=phoenician}', "");
Expect(1, 67839, '\P{Is_Blk=phoenician}', "");
Expect(0, 67839, '\P{^Is_Blk=phoenician}', "");
Expect(1, 67871, '\p{Is_Blk=_Phoenician}', "");
Expect(0, 67871, '\p{^Is_Blk=_Phoenician}', "");
Expect(0, 67871, '\P{Is_Blk=_Phoenician}', "");
Expect(1, 67871, '\P{^Is_Blk=_Phoenician}', "");
Expect(0, 67839, '\p{Is_Blk=_Phoenician}', "");
Expect(1, 67839, '\p{^Is_Blk=_Phoenician}', "");
Expect(1, 67839, '\P{Is_Blk=_Phoenician}', "");
Expect(0, 67839, '\P{^Is_Blk=_Phoenician}', "");
Error('\p{Block=-/a/Latin	1-SUPPLEMENT}');
Error('\P{Block=-/a/Latin	1-SUPPLEMENT}');
Expect(1, 255, '\p{Block=latin1supplement}', "");
Expect(0, 255, '\p{^Block=latin1supplement}', "");
Expect(0, 255, '\P{Block=latin1supplement}', "");
Expect(1, 255, '\P{^Block=latin1supplement}', "");
Expect(0, 127, '\p{Block=latin1supplement}', "");
Expect(1, 127, '\p{^Block=latin1supplement}', "");
Expect(1, 127, '\P{Block=latin1supplement}', "");
Expect(0, 127, '\P{^Block=latin1supplement}', "");
Expect(1, 255, '\p{Block=-	Latin 1-supplement}', "");
Expect(0, 255, '\p{^Block=-	Latin 1-supplement}', "");
Expect(0, 255, '\P{Block=-	Latin 1-supplement}', "");
Expect(1, 255, '\P{^Block=-	Latin 1-supplement}', "");
Expect(0, 127, '\p{Block=-	Latin 1-supplement}', "");
Expect(1, 127, '\p{^Block=-	Latin 1-supplement}', "");
Expect(1, 127, '\P{Block=-	Latin 1-supplement}', "");
Expect(0, 127, '\P{^Block=-	Latin 1-supplement}', "");
Error('\p{Blk= latin/a/1}');
Error('\P{Blk= latin/a/1}');
Expect(1, 255, '\p{Blk=latin1}', "");
Expect(0, 255, '\p{^Blk=latin1}', "");
Expect(0, 255, '\P{Blk=latin1}', "");
Expect(1, 255, '\P{^Blk=latin1}', "");
Expect(0, 127, '\p{Blk=latin1}', "");
Expect(1, 127, '\p{^Blk=latin1}', "");
Expect(1, 127, '\P{Blk=latin1}', "");
Expect(0, 127, '\P{^Blk=latin1}', "");
Expect(1, 255, '\p{Blk=LATIN-1}', "");
Expect(0, 255, '\p{^Blk=LATIN-1}', "");
Expect(0, 255, '\P{Blk=LATIN-1}', "");
Expect(1, 255, '\P{^Blk=LATIN-1}', "");
Expect(0, 127, '\p{Blk=LATIN-1}', "");
Expect(1, 127, '\p{^Blk=LATIN-1}', "");
Expect(1, 127, '\P{Blk=LATIN-1}', "");
Expect(0, 127, '\P{^Blk=LATIN-1}', "");
Error('\p{Is_Block=_-Latin-1:=SUPPLEMENT}');
Error('\P{Is_Block=_-Latin-1:=SUPPLEMENT}');
Expect(1, 255, '\p{Is_Block=latin1supplement}', "");
Expect(0, 255, '\p{^Is_Block=latin1supplement}', "");
Expect(0, 255, '\P{Is_Block=latin1supplement}', "");
Expect(1, 255, '\P{^Is_Block=latin1supplement}', "");
Expect(0, 127, '\p{Is_Block=latin1supplement}', "");
Expect(1, 127, '\p{^Is_Block=latin1supplement}', "");
Expect(1, 127, '\P{Is_Block=latin1supplement}', "");
Expect(0, 127, '\P{^Is_Block=latin1supplement}', "");
Expect(1, 255, '\p{Is_Block=	 Latin-1-supplement}', "");
Expect(0, 255, '\p{^Is_Block=	 Latin-1-supplement}', "");
Expect(0, 255, '\P{Is_Block=	 Latin-1-supplement}', "");
Expect(1, 255, '\P{^Is_Block=	 Latin-1-supplement}', "");
Expect(0, 127, '\p{Is_Block=	 Latin-1-supplement}', "");
Expect(1, 127, '\p{^Is_Block=	 Latin-1-supplement}', "");
Expect(1, 127, '\P{Is_Block=	 Latin-1-supplement}', "");
Expect(0, 127, '\P{^Is_Block=	 Latin-1-supplement}', "");
Error('\p{Is_Blk=_	Latin:=1}');
Error('\P{Is_Blk=_	Latin:=1}');
Expect(1, 255, '\p{Is_Blk=latin1}', "");
Expect(0, 255, '\p{^Is_Blk=latin1}', "");
Expect(0, 255, '\P{Is_Blk=latin1}', "");
Expect(1, 255, '\P{^Is_Blk=latin1}', "");
Expect(0, 127, '\p{Is_Blk=latin1}', "");
Expect(1, 127, '\p{^Is_Blk=latin1}', "");
Expect(1, 127, '\P{Is_Blk=latin1}', "");
Expect(0, 127, '\P{^Is_Blk=latin1}', "");
Expect(1, 255, '\p{Is_Blk=_Latin	1}', "");
Expect(0, 255, '\p{^Is_Blk=_Latin	1}', "");
Expect(0, 255, '\P{Is_Blk=_Latin	1}', "");
Expect(1, 255, '\P{^Is_Blk=_Latin	1}', "");
Expect(0, 127, '\p{Is_Blk=_Latin	1}', "");
Expect(1, 127, '\p{^Is_Blk=_Latin	1}', "");
Expect(1, 127, '\P{Is_Blk=_Latin	1}', "");
Expect(0, 127, '\P{^Is_Blk=_Latin	1}', "");
Error('\p{Block= _devanagari/a/}');
Error('\P{Block= _devanagari/a/}');
Expect(1, 2431, '\p{Block=devanagari}', "");
Expect(0, 2431, '\p{^Block=devanagari}', "");
Expect(0, 2431, '\P{Block=devanagari}', "");
Expect(1, 2431, '\P{^Block=devanagari}', "");
Expect(0, 2303, '\p{Block=devanagari}', "");
Expect(1, 2303, '\p{^Block=devanagari}', "");
Expect(1, 2303, '\P{Block=devanagari}', "");
Expect(0, 2303, '\P{^Block=devanagari}', "");
Expect(1, 2431, '\p{Block=_-Devanagari}', "");
Expect(0, 2431, '\p{^Block=_-Devanagari}', "");
Expect(0, 2431, '\P{Block=_-Devanagari}', "");
Expect(1, 2431, '\P{^Block=_-Devanagari}', "");
Expect(0, 2303, '\p{Block=_-Devanagari}', "");
Expect(1, 2303, '\p{^Block=_-Devanagari}', "");
Expect(1, 2303, '\P{Block=_-Devanagari}', "");
Expect(0, 2303, '\P{^Block=_-Devanagari}', "");
Error('\p{Blk:	/a/_	DEVANAGARI}');
Error('\P{Blk:	/a/_	DEVANAGARI}');
Expect(1, 2431, '\p{Blk=devanagari}', "");
Expect(0, 2431, '\p{^Blk=devanagari}', "");
Expect(0, 2431, '\P{Blk=devanagari}', "");
Expect(1, 2431, '\P{^Blk=devanagari}', "");
Expect(0, 2303, '\p{Blk=devanagari}', "");
Expect(1, 2303, '\p{^Blk=devanagari}', "");
Expect(1, 2303, '\P{Blk=devanagari}', "");
Expect(0, 2303, '\P{^Blk=devanagari}', "");
Expect(1, 2431, '\p{Blk=		devanagari}', "");
Expect(0, 2431, '\p{^Blk=		devanagari}', "");
Expect(0, 2431, '\P{Blk=		devanagari}', "");
Expect(1, 2431, '\P{^Blk=		devanagari}', "");
Expect(0, 2303, '\p{Blk=		devanagari}', "");
Expect(1, 2303, '\p{^Blk=		devanagari}', "");
Expect(1, 2303, '\P{Blk=		devanagari}', "");
Expect(0, 2303, '\P{^Blk=		devanagari}', "");
Error('\p{Is_Block=__Devanagari:=}');
Error('\P{Is_Block=__Devanagari:=}');
Expect(1, 2431, '\p{Is_Block=devanagari}', "");
Expect(0, 2431, '\p{^Is_Block=devanagari}', "");
Expect(0, 2431, '\P{Is_Block=devanagari}', "");
Expect(1, 2431, '\P{^Is_Block=devanagari}', "");
Expect(0, 2303, '\p{Is_Block=devanagari}', "");
Expect(1, 2303, '\p{^Is_Block=devanagari}', "");
Expect(1, 2303, '\P{Is_Block=devanagari}', "");
Expect(0, 2303, '\P{^Is_Block=devanagari}', "");
Expect(1, 2431, '\p{Is_Block=__Devanagari}', "");
Expect(0, 2431, '\p{^Is_Block=__Devanagari}', "");
Expect(0, 2431, '\P{Is_Block=__Devanagari}', "");
Expect(1, 2431, '\P{^Is_Block=__Devanagari}', "");
Expect(0, 2303, '\p{Is_Block=__Devanagari}', "");
Expect(1, 2303, '\p{^Is_Block=__Devanagari}', "");
Expect(1, 2303, '\P{Is_Block=__Devanagari}', "");
Expect(0, 2303, '\P{^Is_Block=__Devanagari}', "");
Error('\p{Is_Blk=-_devanagari:=}');
Error('\P{Is_Blk=-_devanagari:=}');
Expect(1, 2431, '\p{Is_Blk=devanagari}', "");
Expect(0, 2431, '\p{^Is_Blk=devanagari}', "");
Expect(0, 2431, '\P{Is_Blk=devanagari}', "");
Expect(1, 2431, '\P{^Is_Blk=devanagari}', "");
Expect(0, 2303, '\p{Is_Blk=devanagari}', "");
Expect(1, 2303, '\p{^Is_Blk=devanagari}', "");
Expect(1, 2303, '\P{Is_Blk=devanagari}', "");
Expect(0, 2303, '\P{^Is_Blk=devanagari}', "");
Expect(1, 2431, '\p{Is_Blk= Devanagari}', "");
Expect(0, 2431, '\p{^Is_Blk= Devanagari}', "");
Expect(0, 2431, '\P{Is_Blk= Devanagari}', "");
Expect(1, 2431, '\P{^Is_Blk= Devanagari}', "");
Expect(0, 2303, '\p{Is_Blk= Devanagari}', "");
Expect(1, 2303, '\p{^Is_Blk= Devanagari}', "");
Expect(1, 2303, '\P{Is_Blk= Devanagari}', "");
Expect(0, 2303, '\P{^Is_Blk= Devanagari}', "");
Error('\p{Block=_-hanguljamo_Extended-A/a/}');
Error('\P{Block=_-hanguljamo_Extended-A/a/}');
Expect(1, 43391, '\p{Block=hanguljamoextendeda}', "");
Expect(0, 43391, '\p{^Block=hanguljamoextendeda}', "");
Expect(0, 43391, '\P{Block=hanguljamoextendeda}', "");
Expect(1, 43391, '\P{^Block=hanguljamoextendeda}', "");
Expect(0, 43359, '\p{Block=hanguljamoextendeda}', "");
Expect(1, 43359, '\p{^Block=hanguljamoextendeda}', "");
Expect(1, 43359, '\P{Block=hanguljamoextendeda}', "");
Expect(0, 43359, '\P{^Block=hanguljamoextendeda}', "");
Expect(1, 43391, '\p{Block=--Hangul Jamo Extended A}', "");
Expect(0, 43391, '\p{^Block=--Hangul Jamo Extended A}', "");
Expect(0, 43391, '\P{Block=--Hangul Jamo Extended A}', "");
Expect(1, 43391, '\P{^Block=--Hangul Jamo Extended A}', "");
Expect(0, 43359, '\p{Block=--Hangul Jamo Extended A}', "");
Expect(1, 43359, '\p{^Block=--Hangul Jamo Extended A}', "");
Expect(1, 43359, '\P{Block=--Hangul Jamo Extended A}', "");
Expect(0, 43359, '\P{^Block=--Hangul Jamo Extended A}', "");
Error('\p{Blk=Hangul:=Jamo_Extended	A}');
Error('\P{Blk=Hangul:=Jamo_Extended	A}');
Expect(1, 43391, '\p{Blk=hanguljamoextendeda}', "");
Expect(0, 43391, '\p{^Blk=hanguljamoextendeda}', "");
Expect(0, 43391, '\P{Blk=hanguljamoextendeda}', "");
Expect(1, 43391, '\P{^Blk=hanguljamoextendeda}', "");
Expect(0, 43359, '\p{Blk=hanguljamoextendeda}', "");
Expect(1, 43359, '\p{^Blk=hanguljamoextendeda}', "");
Expect(1, 43359, '\P{Blk=hanguljamoextendeda}', "");
Expect(0, 43359, '\P{^Blk=hanguljamoextendeda}', "");
Expect(1, 43391, '\p{Blk:     Hangul-JAMO	ExtendedA}', "");
Expect(0, 43391, '\p{^Blk:     Hangul-JAMO	ExtendedA}', "");
Expect(0, 43391, '\P{Blk:     Hangul-JAMO	ExtendedA}', "");
Expect(1, 43391, '\P{^Blk:     Hangul-JAMO	ExtendedA}', "");
Expect(0, 43359, '\p{Blk:     Hangul-JAMO	ExtendedA}', "");
Expect(1, 43359, '\p{^Blk:     Hangul-JAMO	ExtendedA}', "");
Expect(1, 43359, '\P{Blk:     Hangul-JAMO	ExtendedA}', "");
Expect(0, 43359, '\P{^Blk:     Hangul-JAMO	ExtendedA}', "");
Error('\p{Is_Block=_	Hangul	JAMO_Extended:=a}');
Error('\P{Is_Block=_	Hangul	JAMO_Extended:=a}');
Expect(1, 43391, '\p{Is_Block:   hanguljamoextendeda}', "");
Expect(0, 43391, '\p{^Is_Block:   hanguljamoextendeda}', "");
Expect(0, 43391, '\P{Is_Block:   hanguljamoextendeda}', "");
Expect(1, 43391, '\P{^Is_Block:   hanguljamoextendeda}', "");
Expect(0, 43359, '\p{Is_Block:   hanguljamoextendeda}', "");
Expect(1, 43359, '\p{^Is_Block:   hanguljamoextendeda}', "");
Expect(1, 43359, '\P{Is_Block:   hanguljamoextendeda}', "");
Expect(0, 43359, '\P{^Is_Block:   hanguljamoextendeda}', "");
Expect(1, 43391, '\p{Is_Block: - Hangul	JAMO	extended_a}', "");
Expect(0, 43391, '\p{^Is_Block: - Hangul	JAMO	extended_a}', "");
Expect(0, 43391, '\P{Is_Block: - Hangul	JAMO	extended_a}', "");
Expect(1, 43391, '\P{^Is_Block: - Hangul	JAMO	extended_a}', "");
Expect(0, 43359, '\p{Is_Block: - Hangul	JAMO	extended_a}', "");
Expect(1, 43359, '\p{^Is_Block: - Hangul	JAMO	extended_a}', "");
Expect(1, 43359, '\P{Is_Block: - Hangul	JAMO	extended_a}', "");
Expect(0, 43359, '\P{^Is_Block: - Hangul	JAMO	extended_a}', "");
Error('\p{Is_Blk=-:=hangul_jamo_Extended_A}');
Error('\P{Is_Blk=-:=hangul_jamo_Extended_A}');
Expect(1, 43391, '\p{Is_Blk=hanguljamoextendeda}', "");
Expect(0, 43391, '\p{^Is_Blk=hanguljamoextendeda}', "");
Expect(0, 43391, '\P{Is_Blk=hanguljamoextendeda}', "");
Expect(1, 43391, '\P{^Is_Blk=hanguljamoextendeda}', "");
Expect(0, 43359, '\p{Is_Blk=hanguljamoextendeda}', "");
Expect(1, 43359, '\p{^Is_Blk=hanguljamoextendeda}', "");
Expect(1, 43359, '\P{Is_Blk=hanguljamoextendeda}', "");
Expect(0, 43359, '\P{^Is_Blk=hanguljamoextendeda}', "");
Expect(1, 43391, '\p{Is_Blk= Hangul-jamo Extended A}', "");
Expect(0, 43391, '\p{^Is_Blk= Hangul-jamo Extended A}', "");
Expect(0, 43391, '\P{Is_Blk= Hangul-jamo Extended A}', "");
Expect(1, 43391, '\P{^Is_Blk= Hangul-jamo Extended A}', "");
Expect(0, 43359, '\p{Is_Blk= Hangul-jamo Extended A}', "");
Expect(1, 43359, '\p{^Is_Blk= Hangul-jamo Extended A}', "");
Expect(1, 43359, '\P{Is_Blk= Hangul-jamo Extended A}', "");
Expect(0, 43359, '\P{^Is_Blk= Hangul-jamo Extended A}', "");
Error('\p{Block=/a/	Carian}');
Error('\P{Block=/a/	Carian}');
Expect(1, 66271, '\p{Block=carian}', "");
Expect(0, 66271, '\p{^Block=carian}', "");
Expect(0, 66271, '\P{Block=carian}', "");
Expect(1, 66271, '\P{^Block=carian}', "");
Expect(0, 66207, '\p{Block=carian}', "");
Expect(1, 66207, '\p{^Block=carian}', "");
Expect(1, 66207, '\P{Block=carian}', "");
Expect(0, 66207, '\P{^Block=carian}', "");
Expect(1, 66271, '\p{Block= _carian}', "");
Expect(0, 66271, '\p{^Block= _carian}', "");
Expect(0, 66271, '\P{Block= _carian}', "");
Expect(1, 66271, '\P{^Block= _carian}', "");
Expect(0, 66207, '\p{Block= _carian}', "");
Expect(1, 66207, '\p{^Block= _carian}', "");
Expect(1, 66207, '\P{Block= _carian}', "");
Expect(0, 66207, '\P{^Block= _carian}', "");
Error('\p{Blk=_ Carian:=}');
Error('\P{Blk=_ Carian:=}');
Expect(1, 66271, '\p{Blk=carian}', "");
Expect(0, 66271, '\p{^Blk=carian}', "");
Expect(0, 66271, '\P{Blk=carian}', "");
Expect(1, 66271, '\P{^Blk=carian}', "");
Expect(0, 66207, '\p{Blk=carian}', "");
Expect(1, 66207, '\p{^Blk=carian}', "");
Expect(1, 66207, '\P{Blk=carian}', "");
Expect(0, 66207, '\P{^Blk=carian}', "");
Expect(1, 66271, '\p{Blk=- Carian}', "");
Expect(0, 66271, '\p{^Blk=- Carian}', "");
Expect(0, 66271, '\P{Blk=- Carian}', "");
Expect(1, 66271, '\P{^Blk=- Carian}', "");
Expect(0, 66207, '\p{Blk=- Carian}', "");
Expect(1, 66207, '\p{^Blk=- Carian}', "");
Expect(1, 66207, '\P{Blk=- Carian}', "");
Expect(0, 66207, '\P{^Blk=- Carian}', "");
Error('\p{Is_Block=/a/Carian}');
Error('\P{Is_Block=/a/Carian}');
Expect(1, 66271, '\p{Is_Block=carian}', "");
Expect(0, 66271, '\p{^Is_Block=carian}', "");
Expect(0, 66271, '\P{Is_Block=carian}', "");
Expect(1, 66271, '\P{^Is_Block=carian}', "");
Expect(0, 66207, '\p{Is_Block=carian}', "");
Expect(1, 66207, '\p{^Is_Block=carian}', "");
Expect(1, 66207, '\P{Is_Block=carian}', "");
Expect(0, 66207, '\P{^Is_Block=carian}', "");
Expect(1, 66271, '\p{Is_Block= 	carian}', "");
Expect(0, 66271, '\p{^Is_Block= 	carian}', "");
Expect(0, 66271, '\P{Is_Block= 	carian}', "");
Expect(1, 66271, '\P{^Is_Block= 	carian}', "");
Expect(0, 66207, '\p{Is_Block= 	carian}', "");
Expect(1, 66207, '\p{^Is_Block= 	carian}', "");
Expect(1, 66207, '\P{Is_Block= 	carian}', "");
Expect(0, 66207, '\P{^Is_Block= 	carian}', "");
Error('\p{Is_Blk=-:=CARIAN}');
Error('\P{Is_Blk=-:=CARIAN}');
Expect(1, 66271, '\p{Is_Blk=carian}', "");
Expect(0, 66271, '\p{^Is_Blk=carian}', "");
Expect(0, 66271, '\P{Is_Blk=carian}', "");
Expect(1, 66271, '\P{^Is_Blk=carian}', "");
Expect(0, 66207, '\p{Is_Blk=carian}', "");
Expect(1, 66207, '\p{^Is_Blk=carian}', "");
Expect(1, 66207, '\P{Is_Blk=carian}', "");
Expect(0, 66207, '\P{^Is_Blk=carian}', "");
Expect(1, 66271, '\p{Is_Blk=	Carian}', "");
Expect(0, 66271, '\p{^Is_Blk=	Carian}', "");
Expect(0, 66271, '\P{Is_Blk=	Carian}', "");
Expect(1, 66271, '\P{^Is_Blk=	Carian}', "");
Expect(0, 66207, '\p{Is_Blk=	Carian}', "");
Expect(1, 66207, '\p{^Is_Blk=	Carian}', "");
Expect(1, 66207, '\P{Is_Blk=	Carian}', "");
Expect(0, 66207, '\P{^Is_Blk=	Carian}', "");
Error('\p{Block=-/a/buhid}');
Error('\P{Block=-/a/buhid}');
Expect(1, 5983, '\p{Block=buhid}', "");
Expect(0, 5983, '\p{^Block=buhid}', "");
Expect(0, 5983, '\P{Block=buhid}', "");
Expect(1, 5983, '\P{^Block=buhid}', "");
Expect(0, 5951, '\p{Block=buhid}', "");
Expect(1, 5951, '\p{^Block=buhid}', "");
Expect(1, 5951, '\P{Block=buhid}', "");
Expect(0, 5951, '\P{^Block=buhid}', "");
Expect(1, 5983, '\p{Block=-buhid}', "");
Expect(0, 5983, '\p{^Block=-buhid}', "");
Expect(0, 5983, '\P{Block=-buhid}', "");
Expect(1, 5983, '\P{^Block=-buhid}', "");
Expect(0, 5951, '\p{Block=-buhid}', "");
Expect(1, 5951, '\p{^Block=-buhid}', "");
Expect(1, 5951, '\P{Block=-buhid}', "");
Expect(0, 5951, '\P{^Block=-buhid}', "");
Error('\p{Blk=	buhid:=}');
Error('\P{Blk=	buhid:=}');
Expect(1, 5983, '\p{Blk=buhid}', "");
Expect(0, 5983, '\p{^Blk=buhid}', "");
Expect(0, 5983, '\P{Blk=buhid}', "");
Expect(1, 5983, '\P{^Blk=buhid}', "");
Expect(0, 5951, '\p{Blk=buhid}', "");
Expect(1, 5951, '\p{^Blk=buhid}', "");
Expect(1, 5951, '\P{Blk=buhid}', "");
Expect(0, 5951, '\P{^Blk=buhid}', "");
Expect(1, 5983, '\p{Blk=	-BUHID}', "");
Expect(0, 5983, '\p{^Blk=	-BUHID}', "");
Expect(0, 5983, '\P{Blk=	-BUHID}', "");
Expect(1, 5983, '\P{^Blk=	-BUHID}', "");
Expect(0, 5951, '\p{Blk=	-BUHID}', "");
Expect(1, 5951, '\p{^Blk=	-BUHID}', "");
Expect(1, 5951, '\P{Blk=	-BUHID}', "");
Expect(0, 5951, '\P{^Blk=	-BUHID}', "");
Error('\p{Is_Block:	/a/buhid}');
Error('\P{Is_Block:	/a/buhid}');
Expect(1, 5983, '\p{Is_Block=buhid}', "");
Expect(0, 5983, '\p{^Is_Block=buhid}', "");
Expect(0, 5983, '\P{Is_Block=buhid}', "");
Expect(1, 5983, '\P{^Is_Block=buhid}', "");
Expect(0, 5951, '\p{Is_Block=buhid}', "");
Expect(1, 5951, '\p{^Is_Block=buhid}', "");
Expect(1, 5951, '\P{Is_Block=buhid}', "");
Expect(0, 5951, '\P{^Is_Block=buhid}', "");
Expect(1, 5983, '\p{Is_Block: _ Buhid}', "");
Expect(0, 5983, '\p{^Is_Block: _ Buhid}', "");
Expect(0, 5983, '\P{Is_Block: _ Buhid}', "");
Expect(1, 5983, '\P{^Is_Block: _ Buhid}', "");
Expect(0, 5951, '\p{Is_Block: _ Buhid}', "");
Expect(1, 5951, '\p{^Is_Block: _ Buhid}', "");
Expect(1, 5951, '\P{Is_Block: _ Buhid}', "");
Expect(0, 5951, '\P{^Is_Block: _ Buhid}', "");
Error('\p{Is_Blk=/a/ 	buhid}');
Error('\P{Is_Blk=/a/ 	buhid}');
Expect(1, 5983, '\p{Is_Blk=buhid}', "");
Expect(0, 5983, '\p{^Is_Blk=buhid}', "");
Expect(0, 5983, '\P{Is_Blk=buhid}', "");
Expect(1, 5983, '\P{^Is_Blk=buhid}', "");
Expect(0, 5951, '\p{Is_Blk=buhid}', "");
Expect(1, 5951, '\p{^Is_Blk=buhid}', "");
Expect(1, 5951, '\P{Is_Blk=buhid}', "");
Expect(0, 5951, '\P{^Is_Blk=buhid}', "");
Expect(1, 5983, '\p{Is_Blk:   _Buhid}', "");
Expect(0, 5983, '\p{^Is_Blk:   _Buhid}', "");
Expect(0, 5983, '\P{Is_Blk:   _Buhid}', "");
Expect(1, 5983, '\P{^Is_Blk:   _Buhid}', "");
Expect(0, 5951, '\p{Is_Blk:   _Buhid}', "");
Expect(1, 5951, '\p{^Is_Blk:   _Buhid}', "");
Expect(1, 5951, '\P{Is_Blk:   _Buhid}', "");
Expect(0, 5951, '\P{^Is_Blk:   _Buhid}', "");
Error('\p{Block=	 Ideographic/a/DESCRIPTION_characters}');
Error('\P{Block=	 Ideographic/a/DESCRIPTION_characters}');
Expect(1, 12287, '\p{Block=ideographicdescriptioncharacters}', "");
Expect(0, 12287, '\p{^Block=ideographicdescriptioncharacters}', "");
Expect(0, 12287, '\P{Block=ideographicdescriptioncharacters}', "");
Expect(1, 12287, '\P{^Block=ideographicdescriptioncharacters}', "");
Expect(0, 12271, '\p{Block=ideographicdescriptioncharacters}', "");
Expect(1, 12271, '\p{^Block=ideographicdescriptioncharacters}', "");
Expect(1, 12271, '\P{Block=ideographicdescriptioncharacters}', "");
Expect(0, 12271, '\P{^Block=ideographicdescriptioncharacters}', "");
Expect(1, 12287, '\p{Block= 	Ideographic	DESCRIPTION Characters}', "");
Expect(0, 12287, '\p{^Block= 	Ideographic	DESCRIPTION Characters}', "");
Expect(0, 12287, '\P{Block= 	Ideographic	DESCRIPTION Characters}', "");
Expect(1, 12287, '\P{^Block= 	Ideographic	DESCRIPTION Characters}', "");
Expect(0, 12271, '\p{Block= 	Ideographic	DESCRIPTION Characters}', "");
Expect(1, 12271, '\p{^Block= 	Ideographic	DESCRIPTION Characters}', "");
Expect(1, 12271, '\P{Block= 	Ideographic	DESCRIPTION Characters}', "");
Expect(0, 12271, '\P{^Block= 	Ideographic	DESCRIPTION Characters}', "");
Error('\p{Blk=-	ideographic DESCRIPTION	Characters/a/}');
Error('\P{Blk=-	ideographic DESCRIPTION	Characters/a/}');
Expect(1, 12287, '\p{Blk=ideographicdescriptioncharacters}', "");
Expect(0, 12287, '\p{^Blk=ideographicdescriptioncharacters}', "");
Expect(0, 12287, '\P{Blk=ideographicdescriptioncharacters}', "");
Expect(1, 12287, '\P{^Blk=ideographicdescriptioncharacters}', "");
Expect(0, 12271, '\p{Blk=ideographicdescriptioncharacters}', "");
Expect(1, 12271, '\p{^Blk=ideographicdescriptioncharacters}', "");
Expect(1, 12271, '\P{Blk=ideographicdescriptioncharacters}', "");
Expect(0, 12271, '\P{^Blk=ideographicdescriptioncharacters}', "");
Expect(1, 12287, '\p{Blk=-Ideographic	Description_Characters}', "");
Expect(0, 12287, '\p{^Blk=-Ideographic	Description_Characters}', "");
Expect(0, 12287, '\P{Blk=-Ideographic	Description_Characters}', "");
Expect(1, 12287, '\P{^Blk=-Ideographic	Description_Characters}', "");
Expect(0, 12271, '\p{Blk=-Ideographic	Description_Characters}', "");
Expect(1, 12271, '\p{^Blk=-Ideographic	Description_Characters}', "");
Expect(1, 12271, '\P{Blk=-Ideographic	Description_Characters}', "");
Expect(0, 12271, '\P{^Blk=-Ideographic	Description_Characters}', "");
Error('\p{Is_Block= :=IDEOGRAPHIC-Description	Characters}');
Error('\P{Is_Block= :=IDEOGRAPHIC-Description	Characters}');
Expect(1, 12287, '\p{Is_Block=ideographicdescriptioncharacters}', "");
Expect(0, 12287, '\p{^Is_Block=ideographicdescriptioncharacters}', "");
Expect(0, 12287, '\P{Is_Block=ideographicdescriptioncharacters}', "");
Expect(1, 12287, '\P{^Is_Block=ideographicdescriptioncharacters}', "");
Expect(0, 12271, '\p{Is_Block=ideographicdescriptioncharacters}', "");
Expect(1, 12271, '\p{^Is_Block=ideographicdescriptioncharacters}', "");
Expect(1, 12271, '\P{Is_Block=ideographicdescriptioncharacters}', "");
Expect(0, 12271, '\P{^Is_Block=ideographicdescriptioncharacters}', "");
Expect(1, 12287, '\p{Is_Block=-ideographicdescription_characters}', "");
Expect(0, 12287, '\p{^Is_Block=-ideographicdescription_characters}', "");
Expect(0, 12287, '\P{Is_Block=-ideographicdescription_characters}', "");
Expect(1, 12287, '\P{^Is_Block=-ideographicdescription_characters}', "");
Expect(0, 12271, '\p{Is_Block=-ideographicdescription_characters}', "");
Expect(1, 12271, '\p{^Is_Block=-ideographicdescription_characters}', "");
Expect(1, 12271, '\P{Is_Block=-ideographicdescription_characters}', "");
Expect(0, 12271, '\P{^Is_Block=-ideographicdescription_characters}', "");
Error('\p{Is_Blk=/a/- ideographic-Description	Characters}');
Error('\P{Is_Blk=/a/- ideographic-Description	Characters}');
Expect(1, 12287, '\p{Is_Blk=ideographicdescriptioncharacters}', "");
Expect(0, 12287, '\p{^Is_Blk=ideographicdescriptioncharacters}', "");
Expect(0, 12287, '\P{Is_Blk=ideographicdescriptioncharacters}', "");
Expect(1, 12287, '\P{^Is_Blk=ideographicdescriptioncharacters}', "");
Expect(0, 12271, '\p{Is_Blk=ideographicdescriptioncharacters}', "");
Expect(1, 12271, '\p{^Is_Blk=ideographicdescriptioncharacters}', "");
Expect(1, 12271, '\P{Is_Blk=ideographicdescriptioncharacters}', "");
Expect(0, 12271, '\P{^Is_Blk=ideographicdescriptioncharacters}', "");
Expect(1, 12287, '\p{Is_Blk=--ideographic-description_characters}', "");
Expect(0, 12287, '\p{^Is_Blk=--ideographic-description_characters}', "");
Expect(0, 12287, '\P{Is_Blk=--ideographic-description_characters}', "");
Expect(1, 12287, '\P{^Is_Blk=--ideographic-description_characters}', "");
Expect(0, 12271, '\p{Is_Blk=--ideographic-description_characters}', "");
Expect(1, 12271, '\p{^Is_Blk=--ideographic-description_characters}', "");
Expect(1, 12271, '\P{Is_Blk=--ideographic-description_characters}', "");
Expect(0, 12271, '\P{^Is_Blk=--ideographic-description_characters}', "");
Error('\p{Block=__Miscellaneous/a/Symbols And-Pictographs}');
Error('\P{Block=__Miscellaneous/a/Symbols And-Pictographs}');
Expect(1, 128511, '\p{Block=miscellaneoussymbolsandpictographs}', "");
Expect(0, 128511, '\p{^Block=miscellaneoussymbolsandpictographs}', "");
Expect(0, 128511, '\P{Block=miscellaneoussymbolsandpictographs}', "");
Expect(1, 128511, '\P{^Block=miscellaneoussymbolsandpictographs}', "");
Expect(0, 127743, '\p{Block=miscellaneoussymbolsandpictographs}', "");
Expect(1, 127743, '\p{^Block=miscellaneoussymbolsandpictographs}', "");
Expect(1, 127743, '\P{Block=miscellaneoussymbolsandpictographs}', "");
Expect(0, 127743, '\P{^Block=miscellaneoussymbolsandpictographs}', "");
Expect(1, 128511, '\p{Block=_miscellaneous symbols_AND-Pictographs}', "");
Expect(0, 128511, '\p{^Block=_miscellaneous symbols_AND-Pictographs}', "");
Expect(0, 128511, '\P{Block=_miscellaneous symbols_AND-Pictographs}', "");
Expect(1, 128511, '\P{^Block=_miscellaneous symbols_AND-Pictographs}', "");
Expect(0, 127743, '\p{Block=_miscellaneous symbols_AND-Pictographs}', "");
Expect(1, 127743, '\p{^Block=_miscellaneous symbols_AND-Pictographs}', "");
Expect(1, 127743, '\P{Block=_miscellaneous symbols_AND-Pictographs}', "");
Expect(0, 127743, '\P{^Block=_miscellaneous symbols_AND-Pictographs}', "");
Error('\p{Blk=__Miscellaneous/a/symbols-And	PICTOGRAPHS}');
Error('\P{Blk=__Miscellaneous/a/symbols-And	PICTOGRAPHS}');
Expect(1, 128511, '\p{Blk=miscellaneoussymbolsandpictographs}', "");
Expect(0, 128511, '\p{^Blk=miscellaneoussymbolsandpictographs}', "");
Expect(0, 128511, '\P{Blk=miscellaneoussymbolsandpictographs}', "");
Expect(1, 128511, '\P{^Blk=miscellaneoussymbolsandpictographs}', "");
Expect(0, 127743, '\p{Blk=miscellaneoussymbolsandpictographs}', "");
Expect(1, 127743, '\p{^Blk=miscellaneoussymbolsandpictographs}', "");
Expect(1, 127743, '\P{Blk=miscellaneoussymbolsandpictographs}', "");
Expect(0, 127743, '\P{^Blk=miscellaneoussymbolsandpictographs}', "");
Expect(1, 128511, '\p{Blk: 	 Miscellaneous SYMBOLS And PICTOGRAPHS}', "");
Expect(0, 128511, '\p{^Blk: 	 Miscellaneous SYMBOLS And PICTOGRAPHS}', "");
Expect(0, 128511, '\P{Blk: 	 Miscellaneous SYMBOLS And PICTOGRAPHS}', "");
Expect(1, 128511, '\P{^Blk: 	 Miscellaneous SYMBOLS And PICTOGRAPHS}', "");
Expect(0, 127743, '\p{Blk: 	 Miscellaneous SYMBOLS And PICTOGRAPHS}', "");
Expect(1, 127743, '\p{^Blk: 	 Miscellaneous SYMBOLS And PICTOGRAPHS}', "");
Expect(1, 127743, '\P{Blk: 	 Miscellaneous SYMBOLS And PICTOGRAPHS}', "");
Expect(0, 127743, '\P{^Blk: 	 Miscellaneous SYMBOLS And PICTOGRAPHS}', "");
Error('\p{Is_Block=	 MISCELLANEOUSsymbols_AND/a/Pictographs}');
Error('\P{Is_Block=	 MISCELLANEOUSsymbols_AND/a/Pictographs}');
Expect(1, 128511, '\p{Is_Block=miscellaneoussymbolsandpictographs}', "");
Expect(0, 128511, '\p{^Is_Block=miscellaneoussymbolsandpictographs}', "");
Expect(0, 128511, '\P{Is_Block=miscellaneoussymbolsandpictographs}', "");
Expect(1, 128511, '\P{^Is_Block=miscellaneoussymbolsandpictographs}', "");
Expect(0, 127743, '\p{Is_Block=miscellaneoussymbolsandpictographs}', "");
Expect(1, 127743, '\p{^Is_Block=miscellaneoussymbolsandpictographs}', "");
Expect(1, 127743, '\P{Is_Block=miscellaneoussymbolsandpictographs}', "");
Expect(0, 127743, '\P{^Is_Block=miscellaneoussymbolsandpictographs}', "");
Expect(1, 128511, '\p{Is_Block=-_Miscellaneous	SYMBOLS-AndPictographs}', "");
Expect(0, 128511, '\p{^Is_Block=-_Miscellaneous	SYMBOLS-AndPictographs}', "");
Expect(0, 128511, '\P{Is_Block=-_Miscellaneous	SYMBOLS-AndPictographs}', "");
Expect(1, 128511, '\P{^Is_Block=-_Miscellaneous	SYMBOLS-AndPictographs}', "");
Expect(0, 127743, '\p{Is_Block=-_Miscellaneous	SYMBOLS-AndPictographs}', "");
Expect(1, 127743, '\p{^Is_Block=-_Miscellaneous	SYMBOLS-AndPictographs}', "");
Expect(1, 127743, '\P{Is_Block=-_Miscellaneous	SYMBOLS-AndPictographs}', "");
Expect(0, 127743, '\P{^Is_Block=-_Miscellaneous	SYMBOLS-AndPictographs}', "");
Error('\p{Is_Blk= :=Miscellaneous	SYMBOLSAnd	pictographs}');
Error('\P{Is_Blk= :=Miscellaneous	SYMBOLSAnd	pictographs}');
Expect(1, 128511, '\p{Is_Blk=miscellaneoussymbolsandpictographs}', "");
Expect(0, 128511, '\p{^Is_Blk=miscellaneoussymbolsandpictographs}', "");
Expect(0, 128511, '\P{Is_Blk=miscellaneoussymbolsandpictographs}', "");
Expect(1, 128511, '\P{^Is_Blk=miscellaneoussymbolsandpictographs}', "");
Expect(0, 127743, '\p{Is_Blk=miscellaneoussymbolsandpictographs}', "");
Expect(1, 127743, '\p{^Is_Blk=miscellaneoussymbolsandpictographs}', "");
Expect(1, 127743, '\P{Is_Blk=miscellaneoussymbolsandpictographs}', "");
Expect(0, 127743, '\P{^Is_Blk=miscellaneoussymbolsandpictographs}', "");
Expect(1, 128511, '\p{Is_Blk=--Miscellaneous-symbols-ANDPICTOGRAPHS}', "");
Expect(0, 128511, '\p{^Is_Blk=--Miscellaneous-symbols-ANDPICTOGRAPHS}', "");
Expect(0, 128511, '\P{Is_Blk=--Miscellaneous-symbols-ANDPICTOGRAPHS}', "");
Expect(1, 128511, '\P{^Is_Blk=--Miscellaneous-symbols-ANDPICTOGRAPHS}', "");
Expect(0, 127743, '\p{Is_Blk=--Miscellaneous-symbols-ANDPICTOGRAPHS}', "");
Expect(1, 127743, '\p{^Is_Blk=--Miscellaneous-symbols-ANDPICTOGRAPHS}', "");
Expect(1, 127743, '\P{Is_Blk=--Miscellaneous-symbols-ANDPICTOGRAPHS}', "");
Expect(0, 127743, '\P{^Is_Blk=--Miscellaneous-symbols-ANDPICTOGRAPHS}', "");
Error('\p{Block=	/a/cjk_unified-Ideographs extension b}');
Error('\P{Block=	/a/cjk_unified-Ideographs extension b}');
Expect(1, 173791, '\p{Block=cjkunifiedideographsextensionb}', "");
Expect(0, 173791, '\p{^Block=cjkunifiedideographsextensionb}', "");
Expect(0, 173791, '\P{Block=cjkunifiedideographsextensionb}', "");
Expect(1, 173791, '\P{^Block=cjkunifiedideographsextensionb}', "");
Expect(0, 1, '\p{Block=cjkunifiedideographsextensionb}', "");
Expect(1, 1, '\p{^Block=cjkunifiedideographsextensionb}', "");
Expect(1, 1, '\P{Block=cjkunifiedideographsextensionb}', "");
Expect(0, 1, '\P{^Block=cjkunifiedideographsextensionb}', "");
Expect(1, 173791, '\p{Block=	 CJK unified_ideographs extension_B}', "");
Expect(0, 173791, '\p{^Block=	 CJK unified_ideographs extension_B}', "");
Expect(0, 173791, '\P{Block=	 CJK unified_ideographs extension_B}', "");
Expect(1, 173791, '\P{^Block=	 CJK unified_ideographs extension_B}', "");
Expect(0, 1, '\p{Block=	 CJK unified_ideographs extension_B}', "");
Expect(1, 1, '\p{^Block=	 CJK unified_ideographs extension_B}', "");
Expect(1, 1, '\P{Block=	 CJK unified_ideographs extension_B}', "");
Expect(0, 1, '\P{^Block=	 CJK unified_ideographs extension_B}', "");
Error('\p{Blk= :=cjk UNIFIED	Ideographs extensionB}');
Error('\P{Blk= :=cjk UNIFIED	Ideographs extensionB}');
Expect(1, 173791, '\p{Blk=cjkunifiedideographsextensionb}', "");
Expect(0, 173791, '\p{^Blk=cjkunifiedideographsextensionb}', "");
Expect(0, 173791, '\P{Blk=cjkunifiedideographsextensionb}', "");
Expect(1, 173791, '\P{^Blk=cjkunifiedideographsextensionb}', "");
Expect(0, 1, '\p{Blk=cjkunifiedideographsextensionb}', "");
Expect(1, 1, '\p{^Blk=cjkunifiedideographsextensionb}', "");
Expect(1, 1, '\P{Blk=cjkunifiedideographsextensionb}', "");
Expect(0, 1, '\P{^Blk=cjkunifiedideographsextensionb}', "");
Expect(1, 173791, '\p{Blk=_-CJK unifiedIdeographs_ExtensionB}', "");
Expect(0, 173791, '\p{^Blk=_-CJK unifiedIdeographs_ExtensionB}', "");
Expect(0, 173791, '\P{Blk=_-CJK unifiedIdeographs_ExtensionB}', "");
Expect(1, 173791, '\P{^Blk=_-CJK unifiedIdeographs_ExtensionB}', "");
Expect(0, 1, '\p{Blk=_-CJK unifiedIdeographs_ExtensionB}', "");
Expect(1, 1, '\p{^Blk=_-CJK unifiedIdeographs_ExtensionB}', "");
Expect(1, 1, '\P{Blk=_-CJK unifiedIdeographs_ExtensionB}', "");
Expect(0, 1, '\P{^Blk=_-CJK unifiedIdeographs_ExtensionB}', "");
Error('\p{Is_Block=-/a/CJK_Unified Ideographs_Extension_b}');
Error('\P{Is_Block=-/a/CJK_Unified Ideographs_Extension_b}');
Expect(1, 173791, '\p{Is_Block=cjkunifiedideographsextensionb}', "");
Expect(0, 173791, '\p{^Is_Block=cjkunifiedideographsextensionb}', "");
Expect(0, 173791, '\P{Is_Block=cjkunifiedideographsextensionb}', "");
Expect(1, 173791, '\P{^Is_Block=cjkunifiedideographsextensionb}', "");
Expect(0, 1, '\p{Is_Block=cjkunifiedideographsextensionb}', "");
Expect(1, 1, '\p{^Is_Block=cjkunifiedideographsextensionb}', "");
Expect(1, 1, '\P{Is_Block=cjkunifiedideographsextensionb}', "");
Expect(0, 1, '\P{^Is_Block=cjkunifiedideographsextensionb}', "");
Expect(1, 173791, '\p{Is_Block=_ CJK-Unified-Ideographs-extension	b}', "");
Expect(0, 173791, '\p{^Is_Block=_ CJK-Unified-Ideographs-extension	b}', "");
Expect(0, 173791, '\P{Is_Block=_ CJK-Unified-Ideographs-extension	b}', "");
Expect(1, 173791, '\P{^Is_Block=_ CJK-Unified-Ideographs-extension	b}', "");
Expect(0, 1, '\p{Is_Block=_ CJK-Unified-Ideographs-extension	b}', "");
Expect(1, 1, '\p{^Is_Block=_ CJK-Unified-Ideographs-extension	b}', "");
Expect(1, 1, '\P{Is_Block=_ CJK-Unified-Ideographs-extension	b}', "");
Expect(0, 1, '\P{^Is_Block=_ CJK-Unified-Ideographs-extension	b}', "");
Error('\p{Is_Blk=:=CJK_UNIFIED	IDEOGRAPHS_extension B}');
Error('\P{Is_Blk=:=CJK_UNIFIED	IDEOGRAPHS_extension B}');
Expect(1, 173791, '\p{Is_Blk:   cjkunifiedideographsextensionb}', "");
Expect(0, 173791, '\p{^Is_Blk:   cjkunifiedideographsextensionb}', "");
Expect(0, 173791, '\P{Is_Blk:   cjkunifiedideographsextensionb}', "");
Expect(1, 173791, '\P{^Is_Blk:   cjkunifiedideographsextensionb}', "");
Expect(0, 1, '\p{Is_Blk:   cjkunifiedideographsextensionb}', "");
Expect(1, 1, '\p{^Is_Blk:   cjkunifiedideographsextensionb}', "");
Expect(1, 1, '\P{Is_Blk:   cjkunifiedideographsextensionb}', "");
Expect(0, 1, '\P{^Is_Blk:   cjkunifiedideographsextensionb}', "");
Expect(1, 173791, '\p{Is_Blk:  cjkUNIFIEDIdeographs_Extension	B}', "");
Expect(0, 173791, '\p{^Is_Blk:  cjkUNIFIEDIdeographs_Extension	B}', "");
Expect(0, 173791, '\P{Is_Blk:  cjkUNIFIEDIdeographs_Extension	B}', "");
Expect(1, 173791, '\P{^Is_Blk:  cjkUNIFIEDIdeographs_Extension	B}', "");
Expect(0, 1, '\p{Is_Blk:  cjkUNIFIEDIdeographs_Extension	B}', "");
Expect(1, 1, '\p{^Is_Blk:  cjkUNIFIEDIdeographs_Extension	B}', "");
Expect(1, 1, '\P{Is_Blk:  cjkUNIFIEDIdeographs_Extension	B}', "");
Expect(0, 1, '\P{^Is_Blk:  cjkUNIFIEDIdeographs_Extension	B}', "");
Error('\p{Block=/a/		Old_Italic}');
Error('\P{Block=/a/		Old_Italic}');
Expect(1, 66351, '\p{Block=olditalic}', "");
Expect(0, 66351, '\p{^Block=olditalic}', "");
Expect(0, 66351, '\P{Block=olditalic}', "");
Expect(1, 66351, '\P{^Block=olditalic}', "");
Expect(0, 66303, '\p{Block=olditalic}', "");
Expect(1, 66303, '\p{^Block=olditalic}', "");
Expect(1, 66303, '\P{Block=olditalic}', "");
Expect(0, 66303, '\P{^Block=olditalic}', "");
Expect(1, 66351, '\p{Block=- OLD	Italic}', "");
Expect(0, 66351, '\p{^Block=- OLD	Italic}', "");
Expect(0, 66351, '\P{Block=- OLD	Italic}', "");
Expect(1, 66351, '\P{^Block=- OLD	Italic}', "");
Expect(0, 66303, '\p{Block=- OLD	Italic}', "");
Expect(1, 66303, '\p{^Block=- OLD	Italic}', "");
Expect(1, 66303, '\P{Block=- OLD	Italic}', "");
Expect(0, 66303, '\P{^Block=- OLD	Italic}', "");
Error('\p{Blk=:= 	old Italic}');
Error('\P{Blk=:= 	old Italic}');
Expect(1, 66351, '\p{Blk=olditalic}', "");
Expect(0, 66351, '\p{^Blk=olditalic}', "");
Expect(0, 66351, '\P{Blk=olditalic}', "");
Expect(1, 66351, '\P{^Blk=olditalic}', "");
Expect(0, 66303, '\p{Blk=olditalic}', "");
Expect(1, 66303, '\p{^Blk=olditalic}', "");
Expect(1, 66303, '\P{Blk=olditalic}', "");
Expect(0, 66303, '\P{^Blk=olditalic}', "");
Expect(1, 66351, '\p{Blk=	 old Italic}', "");
Expect(0, 66351, '\p{^Blk=	 old Italic}', "");
Expect(0, 66351, '\P{Blk=	 old Italic}', "");
Expect(1, 66351, '\P{^Blk=	 old Italic}', "");
Expect(0, 66303, '\p{Blk=	 old Italic}', "");
Expect(1, 66303, '\p{^Blk=	 old Italic}', "");
Expect(1, 66303, '\P{Blk=	 old Italic}', "");
Expect(0, 66303, '\P{^Blk=	 old Italic}', "");
Error('\p{Is_Block=:= OldITALIC}');
Error('\P{Is_Block=:= OldITALIC}');
Expect(1, 66351, '\p{Is_Block=olditalic}', "");
Expect(0, 66351, '\p{^Is_Block=olditalic}', "");
Expect(0, 66351, '\P{Is_Block=olditalic}', "");
Expect(1, 66351, '\P{^Is_Block=olditalic}', "");
Expect(0, 66303, '\p{Is_Block=olditalic}', "");
Expect(1, 66303, '\p{^Is_Block=olditalic}', "");
Expect(1, 66303, '\P{Is_Block=olditalic}', "");
Expect(0, 66303, '\P{^Is_Block=olditalic}', "");
Expect(1, 66351, '\p{Is_Block=	_OLD Italic}', "");
Expect(0, 66351, '\p{^Is_Block=	_OLD Italic}', "");
Expect(0, 66351, '\P{Is_Block=	_OLD Italic}', "");
Expect(1, 66351, '\P{^Is_Block=	_OLD Italic}', "");
Expect(0, 66303, '\p{Is_Block=	_OLD Italic}', "");
Expect(1, 66303, '\p{^Is_Block=	_OLD Italic}', "");
Expect(1, 66303, '\P{Is_Block=	_OLD Italic}', "");
Expect(0, 66303, '\P{^Is_Block=	_OLD Italic}', "");
Error('\p{Is_Blk= OLD	ITALIC/a/}');
Error('\P{Is_Blk= OLD	ITALIC/a/}');
Expect(1, 66351, '\p{Is_Blk=olditalic}', "");
Expect(0, 66351, '\p{^Is_Blk=olditalic}', "");
Expect(0, 66351, '\P{Is_Blk=olditalic}', "");
Expect(1, 66351, '\P{^Is_Blk=olditalic}', "");
Expect(0, 66303, '\p{Is_Blk=olditalic}', "");
Expect(1, 66303, '\p{^Is_Blk=olditalic}', "");
Expect(1, 66303, '\P{Is_Blk=olditalic}', "");
Expect(0, 66303, '\P{^Is_Blk=olditalic}', "");
Expect(1, 66351, '\p{Is_Blk= 	old	italic}', "");
Expect(0, 66351, '\p{^Is_Blk= 	old	italic}', "");
Expect(0, 66351, '\P{Is_Blk= 	old	italic}', "");
Expect(1, 66351, '\P{^Is_Blk= 	old	italic}', "");
Expect(0, 66303, '\p{Is_Blk= 	old	italic}', "");
Expect(1, 66303, '\p{^Is_Blk= 	old	italic}', "");
Expect(1, 66303, '\P{Is_Blk= 	old	italic}', "");
Expect(0, 66303, '\P{^Is_Blk= 	old	italic}', "");
Error('\p{Block=-hangul/a/syllables}');
Error('\P{Block=-hangul/a/syllables}');
Expect(1, 55215, '\p{Block=hangulsyllables}', "");
Expect(0, 55215, '\p{^Block=hangulsyllables}', "");
Expect(0, 55215, '\P{Block=hangulsyllables}', "");
Expect(1, 55215, '\P{^Block=hangulsyllables}', "");
Expect(0, 44031, '\p{Block=hangulsyllables}', "");
Expect(1, 44031, '\p{^Block=hangulsyllables}', "");
Expect(1, 44031, '\P{Block=hangulsyllables}', "");
Expect(0, 44031, '\P{^Block=hangulsyllables}', "");
Expect(1, 55215, '\p{Block= Hangul-Syllables}', "");
Expect(0, 55215, '\p{^Block= Hangul-Syllables}', "");
Expect(0, 55215, '\P{Block= Hangul-Syllables}', "");
Expect(1, 55215, '\P{^Block= Hangul-Syllables}', "");
Expect(0, 44031, '\p{Block= Hangul-Syllables}', "");
Expect(1, 44031, '\p{^Block= Hangul-Syllables}', "");
Expect(1, 44031, '\P{Block= Hangul-Syllables}', "");
Expect(0, 44031, '\P{^Block= Hangul-Syllables}', "");
Error('\p{Blk=	:=hangulSyllables}');
Error('\P{Blk=	:=hangulSyllables}');
Expect(1, 55215, '\p{Blk=hangulsyllables}', "");
Expect(0, 55215, '\p{^Blk=hangulsyllables}', "");
Expect(0, 55215, '\P{Blk=hangulsyllables}', "");
Expect(1, 55215, '\P{^Blk=hangulsyllables}', "");
Expect(0, 44031, '\p{Blk=hangulsyllables}', "");
Expect(1, 44031, '\p{^Blk=hangulsyllables}', "");
Expect(1, 44031, '\P{Blk=hangulsyllables}', "");
Expect(0, 44031, '\P{^Blk=hangulsyllables}', "");
Expect(1, 55215, '\p{Blk=	_HANGULSYLLABLES}', "");
Expect(0, 55215, '\p{^Blk=	_HANGULSYLLABLES}', "");
Expect(0, 55215, '\P{Blk=	_HANGULSYLLABLES}', "");
Expect(1, 55215, '\P{^Blk=	_HANGULSYLLABLES}', "");
Expect(0, 44031, '\p{Blk=	_HANGULSYLLABLES}', "");
Expect(1, 44031, '\p{^Blk=	_HANGULSYLLABLES}', "");
Expect(1, 44031, '\P{Blk=	_HANGULSYLLABLES}', "");
Expect(0, 44031, '\P{^Blk=	_HANGULSYLLABLES}', "");
Error('\p{Is_Block=/a/-Hangul_Syllables}');
Error('\P{Is_Block=/a/-Hangul_Syllables}');
Expect(1, 55215, '\p{Is_Block: hangulsyllables}', "");
Expect(0, 55215, '\p{^Is_Block: hangulsyllables}', "");
Expect(0, 55215, '\P{Is_Block: hangulsyllables}', "");
Expect(1, 55215, '\P{^Is_Block: hangulsyllables}', "");
Expect(0, 44031, '\p{Is_Block: hangulsyllables}', "");
Expect(1, 44031, '\p{^Is_Block: hangulsyllables}', "");
Expect(1, 44031, '\P{Is_Block: hangulsyllables}', "");
Expect(0, 44031, '\P{^Is_Block: hangulsyllables}', "");
Expect(1, 55215, '\p{Is_Block=	-Hangul-Syllables}', "");
Expect(0, 55215, '\p{^Is_Block=	-Hangul-Syllables}', "");
Expect(0, 55215, '\P{Is_Block=	-Hangul-Syllables}', "");
Expect(1, 55215, '\P{^Is_Block=	-Hangul-Syllables}', "");
Expect(0, 44031, '\p{Is_Block=	-Hangul-Syllables}', "");
Expect(1, 44031, '\p{^Is_Block=	-Hangul-Syllables}', "");
Expect(1, 44031, '\P{Is_Block=	-Hangul-Syllables}', "");
Expect(0, 44031, '\P{^Is_Block=	-Hangul-Syllables}', "");
Error('\p{Is_Blk=:=	HANGUL	syllables}');
Error('\P{Is_Blk=:=	HANGUL	syllables}');
Expect(1, 55215, '\p{Is_Blk=hangulsyllables}', "");
Expect(0, 55215, '\p{^Is_Blk=hangulsyllables}', "");
Expect(0, 55215, '\P{Is_Blk=hangulsyllables}', "");
Expect(1, 55215, '\P{^Is_Blk=hangulsyllables}', "");
Expect(0, 44031, '\p{Is_Blk=hangulsyllables}', "");
Expect(1, 44031, '\p{^Is_Blk=hangulsyllables}', "");
Expect(1, 44031, '\P{Is_Blk=hangulsyllables}', "");
Expect(0, 44031, '\P{^Is_Blk=hangulsyllables}', "");
Expect(1, 55215, '\p{Is_Blk= HANGUL Syllables}', "");
Expect(0, 55215, '\p{^Is_Blk= HANGUL Syllables}', "");
Expect(0, 55215, '\P{Is_Blk= HANGUL Syllables}', "");
Expect(1, 55215, '\P{^Is_Blk= HANGUL Syllables}', "");
Expect(0, 44031, '\p{Is_Blk= HANGUL Syllables}', "");
Expect(1, 44031, '\p{^Is_Blk= HANGUL Syllables}', "");
Expect(1, 44031, '\P{Is_Blk= HANGUL Syllables}', "");
Expect(0, 44031, '\P{^Is_Blk= HANGUL Syllables}', "");
Error('\p{Block=		Kana	Supplement:=}');
Error('\P{Block=		Kana	Supplement:=}');
Expect(1, 110847, '\p{Block=kanasupplement}', "");
Expect(0, 110847, '\p{^Block=kanasupplement}', "");
Expect(0, 110847, '\P{Block=kanasupplement}', "");
Expect(1, 110847, '\P{^Block=kanasupplement}', "");
Expect(0, 110591, '\p{Block=kanasupplement}', "");
Expect(1, 110591, '\p{^Block=kanasupplement}', "");
Expect(1, 110591, '\P{Block=kanasupplement}', "");
Expect(0, 110591, '\P{^Block=kanasupplement}', "");
Expect(1, 110847, '\p{Block= _KANASupplement}', "");
Expect(0, 110847, '\p{^Block= _KANASupplement}', "");
Expect(0, 110847, '\P{Block= _KANASupplement}', "");
Expect(1, 110847, '\P{^Block= _KANASupplement}', "");
Expect(0, 110591, '\p{Block= _KANASupplement}', "");
Expect(1, 110591, '\p{^Block= _KANASupplement}', "");
Expect(1, 110591, '\P{Block= _KANASupplement}', "");
Expect(0, 110591, '\P{^Block= _KANASupplement}', "");
Error('\p{Blk=:=kana-SUPPLEMENT}');
Error('\P{Blk=:=kana-SUPPLEMENT}');
Expect(1, 110847, '\p{Blk=kanasupplement}', "");
Expect(0, 110847, '\p{^Blk=kanasupplement}', "");
Expect(0, 110847, '\P{Blk=kanasupplement}', "");
Expect(1, 110847, '\P{^Blk=kanasupplement}', "");
Expect(0, 110591, '\p{Blk=kanasupplement}', "");
Expect(1, 110591, '\p{^Blk=kanasupplement}', "");
Expect(1, 110591, '\P{Blk=kanasupplement}', "");
Expect(0, 110591, '\P{^Blk=kanasupplement}', "");
Expect(1, 110847, '\p{Blk= 	KANA	supplement}', "");
Expect(0, 110847, '\p{^Blk= 	KANA	supplement}', "");
Expect(0, 110847, '\P{Blk= 	KANA	supplement}', "");
Expect(1, 110847, '\P{^Blk= 	KANA	supplement}', "");
Expect(0, 110591, '\p{Blk= 	KANA	supplement}', "");
Expect(1, 110591, '\p{^Blk= 	KANA	supplement}', "");
Expect(1, 110591, '\P{Blk= 	KANA	supplement}', "");
Expect(0, 110591, '\P{^Blk= 	KANA	supplement}', "");
Error('\p{Is_Block=  kana	SUPPLEMENT/a/}');
Error('\P{Is_Block=  kana	SUPPLEMENT/a/}');
Expect(1, 110847, '\p{Is_Block:	kanasupplement}', "");
Expect(0, 110847, '\p{^Is_Block:	kanasupplement}', "");
Expect(0, 110847, '\P{Is_Block:	kanasupplement}', "");
Expect(1, 110847, '\P{^Is_Block:	kanasupplement}', "");
Expect(0, 110591, '\p{Is_Block:	kanasupplement}', "");
Expect(1, 110591, '\p{^Is_Block:	kanasupplement}', "");
Expect(1, 110591, '\P{Is_Block:	kanasupplement}', "");
Expect(0, 110591, '\P{^Is_Block:	kanasupplement}', "");
Expect(1, 110847, '\p{Is_Block=- KANA-Supplement}', "");
Expect(0, 110847, '\p{^Is_Block=- KANA-Supplement}', "");
Expect(0, 110847, '\P{Is_Block=- KANA-Supplement}', "");
Expect(1, 110847, '\P{^Is_Block=- KANA-Supplement}', "");
Expect(0, 110591, '\p{Is_Block=- KANA-Supplement}', "");
Expect(1, 110591, '\p{^Is_Block=- KANA-Supplement}', "");
Expect(1, 110591, '\P{Is_Block=- KANA-Supplement}', "");
Expect(0, 110591, '\P{^Is_Block=- KANA-Supplement}', "");
Error('\p{Is_Blk:-_kana/a/Supplement}');
Error('\P{Is_Blk:-_kana/a/Supplement}');
Expect(1, 110847, '\p{Is_Blk=kanasupplement}', "");
Expect(0, 110847, '\p{^Is_Blk=kanasupplement}', "");
Expect(0, 110847, '\P{Is_Blk=kanasupplement}', "");
Expect(1, 110847, '\P{^Is_Blk=kanasupplement}', "");
Expect(0, 110591, '\p{Is_Blk=kanasupplement}', "");
Expect(1, 110591, '\p{^Is_Blk=kanasupplement}', "");
Expect(1, 110591, '\P{Is_Blk=kanasupplement}', "");
Expect(0, 110591, '\P{^Is_Blk=kanasupplement}', "");
Expect(1, 110847, '\p{Is_Blk=	Kana-supplement}', "");
Expect(0, 110847, '\p{^Is_Blk=	Kana-supplement}', "");
Expect(0, 110847, '\P{Is_Blk=	Kana-supplement}', "");
Expect(1, 110847, '\P{^Is_Blk=	Kana-supplement}', "");
Expect(0, 110591, '\p{Is_Blk=	Kana-supplement}', "");
Expect(1, 110591, '\p{^Is_Blk=	Kana-supplement}', "");
Expect(1, 110591, '\P{Is_Blk=	Kana-supplement}', "");
Expect(0, 110591, '\P{^Is_Blk=	Kana-supplement}', "");
Error('\p{Block=:=Yijing-HEXAGRAM	symbols}');
Error('\P{Block=:=Yijing-HEXAGRAM	symbols}');
Expect(1, 19967, '\p{Block=yijinghexagramsymbols}', "");
Expect(0, 19967, '\p{^Block=yijinghexagramsymbols}', "");
Expect(0, 19967, '\P{Block=yijinghexagramsymbols}', "");
Expect(1, 19967, '\P{^Block=yijinghexagramsymbols}', "");
Expect(0, 19903, '\p{Block=yijinghexagramsymbols}', "");
Expect(1, 19903, '\p{^Block=yijinghexagramsymbols}', "");
Expect(1, 19903, '\P{Block=yijinghexagramsymbols}', "");
Expect(0, 19903, '\P{^Block=yijinghexagramsymbols}', "");
Expect(1, 19967, '\p{Block=-_Yijing_hexagram	symbols}', "");
Expect(0, 19967, '\p{^Block=-_Yijing_hexagram	symbols}', "");
Expect(0, 19967, '\P{Block=-_Yijing_hexagram	symbols}', "");
Expect(1, 19967, '\P{^Block=-_Yijing_hexagram	symbols}', "");
Expect(0, 19903, '\p{Block=-_Yijing_hexagram	symbols}', "");
Expect(1, 19903, '\p{^Block=-_Yijing_hexagram	symbols}', "");
Expect(1, 19903, '\P{Block=-_Yijing_hexagram	symbols}', "");
Expect(0, 19903, '\P{^Block=-_Yijing_hexagram	symbols}', "");
Error('\p{Blk=	 yijing:=Hexagram_SYMBOLS}');
Error('\P{Blk=	 yijing:=Hexagram_SYMBOLS}');
Expect(1, 19967, '\p{Blk=yijinghexagramsymbols}', "");
Expect(0, 19967, '\p{^Blk=yijinghexagramsymbols}', "");
Expect(0, 19967, '\P{Blk=yijinghexagramsymbols}', "");
Expect(1, 19967, '\P{^Blk=yijinghexagramsymbols}', "");
Expect(0, 19903, '\p{Blk=yijinghexagramsymbols}', "");
Expect(1, 19903, '\p{^Blk=yijinghexagramsymbols}', "");
Expect(1, 19903, '\P{Blk=yijinghexagramsymbols}', "");
Expect(0, 19903, '\P{^Blk=yijinghexagramsymbols}', "");
Expect(1, 19967, '\p{Blk=-	yijing Hexagram SYMBOLS}', "");
Expect(0, 19967, '\p{^Blk=-	yijing Hexagram SYMBOLS}', "");
Expect(0, 19967, '\P{Blk=-	yijing Hexagram SYMBOLS}', "");
Expect(1, 19967, '\P{^Blk=-	yijing Hexagram SYMBOLS}', "");
Expect(0, 19903, '\p{Blk=-	yijing Hexagram SYMBOLS}', "");
Expect(1, 19903, '\p{^Blk=-	yijing Hexagram SYMBOLS}', "");
Expect(1, 19903, '\P{Blk=-	yijing Hexagram SYMBOLS}', "");
Expect(0, 19903, '\P{^Blk=-	yijing Hexagram SYMBOLS}', "");
Error('\p{Is_Block=_yijing	hexagram-SYMBOLS:=}');
Error('\P{Is_Block=_yijing	hexagram-SYMBOLS:=}');
Expect(1, 19967, '\p{Is_Block=yijinghexagramsymbols}', "");
Expect(0, 19967, '\p{^Is_Block=yijinghexagramsymbols}', "");
Expect(0, 19967, '\P{Is_Block=yijinghexagramsymbols}', "");
Expect(1, 19967, '\P{^Is_Block=yijinghexagramsymbols}', "");
Expect(0, 19903, '\p{Is_Block=yijinghexagramsymbols}', "");
Expect(1, 19903, '\p{^Is_Block=yijinghexagramsymbols}', "");
Expect(1, 19903, '\P{Is_Block=yijinghexagramsymbols}', "");
Expect(0, 19903, '\P{^Is_Block=yijinghexagramsymbols}', "");
Expect(1, 19967, '\p{Is_Block=- YIJINGhexagram-SYMBOLS}', "");
Expect(0, 19967, '\p{^Is_Block=- YIJINGhexagram-SYMBOLS}', "");
Expect(0, 19967, '\P{Is_Block=- YIJINGhexagram-SYMBOLS}', "");
Expect(1, 19967, '\P{^Is_Block=- YIJINGhexagram-SYMBOLS}', "");
Expect(0, 19903, '\p{Is_Block=- YIJINGhexagram-SYMBOLS}', "");
Expect(1, 19903, '\p{^Is_Block=- YIJINGhexagram-SYMBOLS}', "");
Expect(1, 19903, '\P{Is_Block=- YIJINGhexagram-SYMBOLS}', "");
Expect(0, 19903, '\P{^Is_Block=- YIJINGhexagram-SYMBOLS}', "");
Error('\p{Is_Blk= _Yijing hexagram:=Symbols}');
Error('\P{Is_Blk= _Yijing hexagram:=Symbols}');
Expect(1, 19967, '\p{Is_Blk:   yijinghexagramsymbols}', "");
Expect(0, 19967, '\p{^Is_Blk:   yijinghexagramsymbols}', "");
Expect(0, 19967, '\P{Is_Blk:   yijinghexagramsymbols}', "");
Expect(1, 19967, '\P{^Is_Blk:   yijinghexagramsymbols}', "");
Expect(0, 19903, '\p{Is_Blk:   yijinghexagramsymbols}', "");
Expect(1, 19903, '\p{^Is_Blk:   yijinghexagramsymbols}', "");
Expect(1, 19903, '\P{Is_Blk:   yijinghexagramsymbols}', "");
Expect(0, 19903, '\P{^Is_Blk:   yijinghexagramsymbols}', "");
Expect(1, 19967, '\p{Is_Blk=		yijing hexagram-symbols}', "");
Expect(0, 19967, '\p{^Is_Blk=		yijing hexagram-symbols}', "");
Expect(0, 19967, '\P{Is_Blk=		yijing hexagram-symbols}', "");
Expect(1, 19967, '\P{^Is_Blk=		yijing hexagram-symbols}', "");
Expect(0, 19903, '\p{Is_Blk=		yijing hexagram-symbols}', "");
Expect(1, 19903, '\p{^Is_Blk=		yijing hexagram-symbols}', "");
Expect(1, 19903, '\P{Is_Blk=		yijing hexagram-symbols}', "");
Expect(0, 19903, '\P{^Is_Blk=		yijing hexagram-symbols}', "");
Error('\p{Block=_:=PHAISTOSDISC}');
Error('\P{Block=_:=PHAISTOSDISC}');
Expect(1, 66047, '\p{Block=phaistosdisc}', "");
Expect(0, 66047, '\p{^Block=phaistosdisc}', "");
Expect(0, 66047, '\P{Block=phaistosdisc}', "");
Expect(1, 66047, '\P{^Block=phaistosdisc}', "");
Expect(0, 65999, '\p{Block=phaistosdisc}', "");
Expect(1, 65999, '\p{^Block=phaistosdisc}', "");
Expect(1, 65999, '\P{Block=phaistosdisc}', "");
Expect(0, 65999, '\P{^Block=phaistosdisc}', "");
Expect(1, 66047, '\p{Block=-PHAISTOS_DISC}', "");
Expect(0, 66047, '\p{^Block=-PHAISTOS_DISC}', "");
Expect(0, 66047, '\P{Block=-PHAISTOS_DISC}', "");
Expect(1, 66047, '\P{^Block=-PHAISTOS_DISC}', "");
Expect(0, 65999, '\p{Block=-PHAISTOS_DISC}', "");
Expect(1, 65999, '\p{^Block=-PHAISTOS_DISC}', "");
Expect(1, 65999, '\P{Block=-PHAISTOS_DISC}', "");
Expect(0, 65999, '\P{^Block=-PHAISTOS_DISC}', "");
Error('\p{Blk:    /a/Phaistos Disc}');
Error('\P{Blk:    /a/Phaistos Disc}');
Expect(1, 66047, '\p{Blk=phaistosdisc}', "");
Expect(0, 66047, '\p{^Blk=phaistosdisc}', "");
Expect(0, 66047, '\P{Blk=phaistosdisc}', "");
Expect(1, 66047, '\P{^Blk=phaistosdisc}', "");
Expect(0, 65999, '\p{Blk=phaistosdisc}', "");
Expect(1, 65999, '\p{^Blk=phaistosdisc}', "");
Expect(1, 65999, '\P{Blk=phaistosdisc}', "");
Expect(0, 65999, '\P{^Blk=phaistosdisc}', "");
Expect(1, 66047, '\p{Blk:-_Phaistos	Disc}', "");
Expect(0, 66047, '\p{^Blk:-_Phaistos	Disc}', "");
Expect(0, 66047, '\P{Blk:-_Phaistos	Disc}', "");
Expect(1, 66047, '\P{^Blk:-_Phaistos	Disc}', "");
Expect(0, 65999, '\p{Blk:-_Phaistos	Disc}', "");
Expect(1, 65999, '\p{^Blk:-_Phaistos	Disc}', "");
Expect(1, 65999, '\P{Blk:-_Phaistos	Disc}', "");
Expect(0, 65999, '\P{^Blk:-_Phaistos	Disc}', "");
Error('\p{Is_Block=_/a/phaistos-Disc}');
Error('\P{Is_Block=_/a/phaistos-Disc}');
Expect(1, 66047, '\p{Is_Block=phaistosdisc}', "");
Expect(0, 66047, '\p{^Is_Block=phaistosdisc}', "");
Expect(0, 66047, '\P{Is_Block=phaistosdisc}', "");
Expect(1, 66047, '\P{^Is_Block=phaistosdisc}', "");
Expect(0, 65999, '\p{Is_Block=phaistosdisc}', "");
Expect(1, 65999, '\p{^Is_Block=phaistosdisc}', "");
Expect(1, 65999, '\P{Is_Block=phaistosdisc}', "");
Expect(0, 65999, '\P{^Is_Block=phaistosdisc}', "");
Expect(1, 66047, '\p{Is_Block= PHAISTOS_Disc}', "");
Expect(0, 66047, '\p{^Is_Block= PHAISTOS_Disc}', "");
Expect(0, 66047, '\P{Is_Block= PHAISTOS_Disc}', "");
Expect(1, 66047, '\P{^Is_Block= PHAISTOS_Disc}', "");
Expect(0, 65999, '\p{Is_Block= PHAISTOS_Disc}', "");
Expect(1, 65999, '\p{^Is_Block= PHAISTOS_Disc}', "");
Expect(1, 65999, '\P{Is_Block= PHAISTOS_Disc}', "");
Expect(0, 65999, '\P{^Is_Block= PHAISTOS_Disc}', "");
Error('\p{Is_Blk=/a/phaistos_Disc}');
Error('\P{Is_Blk=/a/phaistos_Disc}');
Expect(1, 66047, '\p{Is_Blk=phaistosdisc}', "");
Expect(0, 66047, '\p{^Is_Blk=phaistosdisc}', "");
Expect(0, 66047, '\P{Is_Blk=phaistosdisc}', "");
Expect(1, 66047, '\P{^Is_Blk=phaistosdisc}', "");
Expect(0, 65999, '\p{Is_Blk=phaistosdisc}', "");
Expect(1, 65999, '\p{^Is_Blk=phaistosdisc}', "");
Expect(1, 65999, '\P{Is_Blk=phaistosdisc}', "");
Expect(0, 65999, '\P{^Is_Blk=phaistosdisc}', "");
Expect(1, 66047, '\p{Is_Blk=__PhaistosDisc}', "");
Expect(0, 66047, '\p{^Is_Blk=__PhaistosDisc}', "");
Expect(0, 66047, '\P{Is_Blk=__PhaistosDisc}', "");
Expect(1, 66047, '\P{^Is_Blk=__PhaistosDisc}', "");
Expect(0, 65999, '\p{Is_Blk=__PhaistosDisc}', "");
Expect(1, 65999, '\p{^Is_Blk=__PhaistosDisc}', "");
Expect(1, 65999, '\P{Is_Blk=__PhaistosDisc}', "");
Expect(0, 65999, '\P{^Is_Blk=__PhaistosDisc}', "");
Error('\p{Block=/a/-_SMALL	Form	variants}');
Error('\P{Block=/a/-_SMALL	Form	variants}');
Expect(1, 65135, '\p{Block=smallformvariants}', "");
Expect(0, 65135, '\p{^Block=smallformvariants}', "");
Expect(0, 65135, '\P{Block=smallformvariants}', "");
Expect(1, 65135, '\P{^Block=smallformvariants}', "");
Expect(0, 65103, '\p{Block=smallformvariants}', "");
Expect(1, 65103, '\p{^Block=smallformvariants}', "");
Expect(1, 65103, '\P{Block=smallformvariants}', "");
Expect(0, 65103, '\P{^Block=smallformvariants}', "");
Expect(1, 65135, '\p{Block:	 SMALL-formVariants}', "");
Expect(0, 65135, '\p{^Block:	 SMALL-formVariants}', "");
Expect(0, 65135, '\P{Block:	 SMALL-formVariants}', "");
Expect(1, 65135, '\P{^Block:	 SMALL-formVariants}', "");
Expect(0, 65103, '\p{Block:	 SMALL-formVariants}', "");
Expect(1, 65103, '\p{^Block:	 SMALL-formVariants}', "");
Expect(1, 65103, '\P{Block:	 SMALL-formVariants}', "");
Expect(0, 65103, '\P{^Block:	 SMALL-formVariants}', "");
Error('\p{Blk=_/a/small_Form VARIANTS}');
Error('\P{Blk=_/a/small_Form VARIANTS}');
Expect(1, 65135, '\p{Blk=smallformvariants}', "");
Expect(0, 65135, '\p{^Blk=smallformvariants}', "");
Expect(0, 65135, '\P{Blk=smallformvariants}', "");
Expect(1, 65135, '\P{^Blk=smallformvariants}', "");
Expect(0, 65103, '\p{Blk=smallformvariants}', "");
Expect(1, 65103, '\p{^Blk=smallformvariants}', "");
Expect(1, 65103, '\P{Blk=smallformvariants}', "");
Expect(0, 65103, '\P{^Blk=smallformvariants}', "");
Expect(1, 65135, '\p{Blk=--Small	FORM-Variants}', "");
Expect(0, 65135, '\p{^Blk=--Small	FORM-Variants}', "");
Expect(0, 65135, '\P{Blk=--Small	FORM-Variants}', "");
Expect(1, 65135, '\P{^Blk=--Small	FORM-Variants}', "");
Expect(0, 65103, '\p{Blk=--Small	FORM-Variants}', "");
Expect(1, 65103, '\p{^Blk=--Small	FORM-Variants}', "");
Expect(1, 65103, '\P{Blk=--Small	FORM-Variants}', "");
Expect(0, 65103, '\P{^Blk=--Small	FORM-Variants}', "");
Error('\p{Is_Block=_Small-form:=variants}');
Error('\P{Is_Block=_Small-form:=variants}');
Expect(1, 65135, '\p{Is_Block=smallformvariants}', "");
Expect(0, 65135, '\p{^Is_Block=smallformvariants}', "");
Expect(0, 65135, '\P{Is_Block=smallformvariants}', "");
Expect(1, 65135, '\P{^Is_Block=smallformvariants}', "");
Expect(0, 65103, '\p{Is_Block=smallformvariants}', "");
Expect(1, 65103, '\p{^Is_Block=smallformvariants}', "");
Expect(1, 65103, '\P{Is_Block=smallformvariants}', "");
Expect(0, 65103, '\P{^Is_Block=smallformvariants}', "");
Expect(1, 65135, '\p{Is_Block=_Small_Formvariants}', "");
Expect(0, 65135, '\p{^Is_Block=_Small_Formvariants}', "");
Expect(0, 65135, '\P{Is_Block=_Small_Formvariants}', "");
Expect(1, 65135, '\P{^Is_Block=_Small_Formvariants}', "");
Expect(0, 65103, '\p{Is_Block=_Small_Formvariants}', "");
Expect(1, 65103, '\p{^Is_Block=_Small_Formvariants}', "");
Expect(1, 65103, '\P{Is_Block=_Small_Formvariants}', "");
Expect(0, 65103, '\P{^Is_Block=_Small_Formvariants}', "");
Error('\p{Is_Blk= -SMALL Form-Variants/a/}');
Error('\P{Is_Blk= -SMALL Form-Variants/a/}');
Expect(1, 65135, '\p{Is_Blk=smallformvariants}', "");
Expect(0, 65135, '\p{^Is_Blk=smallformvariants}', "");
Expect(0, 65135, '\P{Is_Blk=smallformvariants}', "");
Expect(1, 65135, '\P{^Is_Blk=smallformvariants}', "");
Expect(0, 65103, '\p{Is_Blk=smallformvariants}', "");
Expect(1, 65103, '\p{^Is_Blk=smallformvariants}', "");
Expect(1, 65103, '\P{Is_Blk=smallformvariants}', "");
Expect(0, 65103, '\P{^Is_Blk=smallformvariants}', "");
Expect(1, 65135, '\p{Is_Blk=	SMALL_form Variants}', "");
Expect(0, 65135, '\p{^Is_Blk=	SMALL_form Variants}', "");
Expect(0, 65135, '\P{Is_Blk=	SMALL_form Variants}', "");
Expect(1, 65135, '\P{^Is_Blk=	SMALL_form Variants}', "");
Expect(0, 65103, '\p{Is_Blk=	SMALL_form Variants}', "");
Expect(1, 65103, '\p{^Is_Blk=	SMALL_form Variants}', "");
Expect(1, 65103, '\P{Is_Blk=	SMALL_form Variants}', "");
Expect(0, 65103, '\P{^Is_Blk=	SMALL_form Variants}', "");
Error('\p{Block=	:=egyptian-HIEROGLYPHS}');
Error('\P{Block=	:=egyptian-HIEROGLYPHS}');
Expect(1, 78895, '\p{Block=egyptianhieroglyphs}', "");
Expect(0, 78895, '\p{^Block=egyptianhieroglyphs}', "");
Expect(0, 78895, '\P{Block=egyptianhieroglyphs}', "");
Expect(1, 78895, '\P{^Block=egyptianhieroglyphs}', "");
Expect(0, 77823, '\p{Block=egyptianhieroglyphs}', "");
Expect(1, 77823, '\p{^Block=egyptianhieroglyphs}', "");
Expect(1, 77823, '\P{Block=egyptianhieroglyphs}', "");
Expect(0, 77823, '\P{^Block=egyptianhieroglyphs}', "");
Expect(1, 78895, '\p{Block=-egyptian Hieroglyphs}', "");
Expect(0, 78895, '\p{^Block=-egyptian Hieroglyphs}', "");
Expect(0, 78895, '\P{Block=-egyptian Hieroglyphs}', "");
Expect(1, 78895, '\P{^Block=-egyptian Hieroglyphs}', "");
Expect(0, 77823, '\p{Block=-egyptian Hieroglyphs}', "");
Expect(1, 77823, '\p{^Block=-egyptian Hieroglyphs}', "");
Expect(1, 77823, '\P{Block=-egyptian Hieroglyphs}', "");
Expect(0, 77823, '\P{^Block=-egyptian Hieroglyphs}', "");
Error('\p{Blk=/a/_	Egyptian-Hieroglyphs}');
Error('\P{Blk=/a/_	Egyptian-Hieroglyphs}');
Expect(1, 78895, '\p{Blk=egyptianhieroglyphs}', "");
Expect(0, 78895, '\p{^Blk=egyptianhieroglyphs}', "");
Expect(0, 78895, '\P{Blk=egyptianhieroglyphs}', "");
Expect(1, 78895, '\P{^Blk=egyptianhieroglyphs}', "");
Expect(0, 77823, '\p{Blk=egyptianhieroglyphs}', "");
Expect(1, 77823, '\p{^Blk=egyptianhieroglyphs}', "");
Expect(1, 77823, '\P{Blk=egyptianhieroglyphs}', "");
Expect(0, 77823, '\P{^Blk=egyptianhieroglyphs}', "");
Expect(1, 78895, '\p{Blk:	_	EGYPTIAN	HIEROGLYPHS}', "");
Expect(0, 78895, '\p{^Blk:	_	EGYPTIAN	HIEROGLYPHS}', "");
Expect(0, 78895, '\P{Blk:	_	EGYPTIAN	HIEROGLYPHS}', "");
Expect(1, 78895, '\P{^Blk:	_	EGYPTIAN	HIEROGLYPHS}', "");
Expect(0, 77823, '\p{Blk:	_	EGYPTIAN	HIEROGLYPHS}', "");
Expect(1, 77823, '\p{^Blk:	_	EGYPTIAN	HIEROGLYPHS}', "");
Expect(1, 77823, '\P{Blk:	_	EGYPTIAN	HIEROGLYPHS}', "");
Expect(0, 77823, '\P{^Blk:	_	EGYPTIAN	HIEROGLYPHS}', "");
Error('\p{Is_Block=	:=Egyptian_HIEROGLYPHS}');
Error('\P{Is_Block=	:=Egyptian_HIEROGLYPHS}');
Expect(1, 78895, '\p{Is_Block=egyptianhieroglyphs}', "");
Expect(0, 78895, '\p{^Is_Block=egyptianhieroglyphs}', "");
Expect(0, 78895, '\P{Is_Block=egyptianhieroglyphs}', "");
Expect(1, 78895, '\P{^Is_Block=egyptianhieroglyphs}', "");
Expect(0, 77823, '\p{Is_Block=egyptianhieroglyphs}', "");
Expect(1, 77823, '\p{^Is_Block=egyptianhieroglyphs}', "");
Expect(1, 77823, '\P{Is_Block=egyptianhieroglyphs}', "");
Expect(0, 77823, '\P{^Is_Block=egyptianhieroglyphs}', "");
Expect(1, 78895, '\p{Is_Block=-	EGYPTIAN HIEROGLYPHS}', "");
Expect(0, 78895, '\p{^Is_Block=-	EGYPTIAN HIEROGLYPHS}', "");
Expect(0, 78895, '\P{Is_Block=-	EGYPTIAN HIEROGLYPHS}', "");
Expect(1, 78895, '\P{^Is_Block=-	EGYPTIAN HIEROGLYPHS}', "");
Expect(0, 77823, '\p{Is_Block=-	EGYPTIAN HIEROGLYPHS}', "");
Expect(1, 77823, '\p{^Is_Block=-	EGYPTIAN HIEROGLYPHS}', "");
Expect(1, 77823, '\P{Is_Block=-	EGYPTIAN HIEROGLYPHS}', "");
Expect(0, 77823, '\P{^Is_Block=-	EGYPTIAN HIEROGLYPHS}', "");
Error('\p{Is_Blk=/a/	 Egyptianhieroglyphs}');
Error('\P{Is_Blk=/a/	 Egyptianhieroglyphs}');
Expect(1, 78895, '\p{Is_Blk=egyptianhieroglyphs}', "");
Expect(0, 78895, '\p{^Is_Blk=egyptianhieroglyphs}', "");
Expect(0, 78895, '\P{Is_Blk=egyptianhieroglyphs}', "");
Expect(1, 78895, '\P{^Is_Blk=egyptianhieroglyphs}', "");
Expect(0, 77823, '\p{Is_Blk=egyptianhieroglyphs}', "");
Expect(1, 77823, '\p{^Is_Blk=egyptianhieroglyphs}', "");
Expect(1, 77823, '\P{Is_Blk=egyptianhieroglyphs}', "");
Expect(0, 77823, '\P{^Is_Blk=egyptianhieroglyphs}', "");
Expect(1, 78895, '\p{Is_Blk:_-EGYPTIAN-hieroglyphs}', "");
Expect(0, 78895, '\p{^Is_Blk:_-EGYPTIAN-hieroglyphs}', "");
Expect(0, 78895, '\P{Is_Blk:_-EGYPTIAN-hieroglyphs}', "");
Expect(1, 78895, '\P{^Is_Blk:_-EGYPTIAN-hieroglyphs}', "");
Expect(0, 77823, '\p{Is_Blk:_-EGYPTIAN-hieroglyphs}', "");
Expect(1, 77823, '\p{^Is_Blk:_-EGYPTIAN-hieroglyphs}', "");
Expect(1, 77823, '\P{Is_Blk:_-EGYPTIAN-hieroglyphs}', "");
Expect(0, 77823, '\P{^Is_Blk:_-EGYPTIAN-hieroglyphs}', "");
Error('\p{Block=_/a/Latin_EXTENDED-D}');
Error('\P{Block=_/a/Latin_EXTENDED-D}');
Expect(1, 43007, '\p{Block=latinextendedd}', "");
Expect(0, 43007, '\p{^Block=latinextendedd}', "");
Expect(0, 43007, '\P{Block=latinextendedd}', "");
Expect(1, 43007, '\P{^Block=latinextendedd}', "");
Expect(0, 42783, '\p{Block=latinextendedd}', "");
Expect(1, 42783, '\p{^Block=latinextendedd}', "");
Expect(1, 42783, '\P{Block=latinextendedd}', "");
Expect(0, 42783, '\P{^Block=latinextendedd}', "");
Expect(1, 43007, '\p{Block=		latin-EXTENDEDD}', "");
Expect(0, 43007, '\p{^Block=		latin-EXTENDEDD}', "");
Expect(0, 43007, '\P{Block=		latin-EXTENDEDD}', "");
Expect(1, 43007, '\P{^Block=		latin-EXTENDEDD}', "");
Expect(0, 42783, '\p{Block=		latin-EXTENDEDD}', "");
Expect(1, 42783, '\p{^Block=		latin-EXTENDEDD}', "");
Expect(1, 42783, '\P{Block=		latin-EXTENDEDD}', "");
Expect(0, 42783, '\P{^Block=		latin-EXTENDEDD}', "");
Error('\p{Blk=- Latin:=EXTENDED-D}');
Error('\P{Blk=- Latin:=EXTENDED-D}');
Expect(1, 43007, '\p{Blk=latinextendedd}', "");
Expect(0, 43007, '\p{^Blk=latinextendedd}', "");
Expect(0, 43007, '\P{Blk=latinextendedd}', "");
Expect(1, 43007, '\P{^Blk=latinextendedd}', "");
Expect(0, 42783, '\p{Blk=latinextendedd}', "");
Expect(1, 42783, '\p{^Blk=latinextendedd}', "");
Expect(1, 42783, '\P{Blk=latinextendedd}', "");
Expect(0, 42783, '\P{^Blk=latinextendedd}', "");
Expect(1, 43007, '\p{Blk=	latin-Extended	d}', "");
Expect(0, 43007, '\p{^Blk=	latin-Extended	d}', "");
Expect(0, 43007, '\P{Blk=	latin-Extended	d}', "");
Expect(1, 43007, '\P{^Blk=	latin-Extended	d}', "");
Expect(0, 42783, '\p{Blk=	latin-Extended	d}', "");
Expect(1, 42783, '\p{^Blk=	latin-Extended	d}', "");
Expect(1, 42783, '\P{Blk=	latin-Extended	d}', "");
Expect(0, 42783, '\P{^Blk=	latin-Extended	d}', "");
Error('\p{Is_Block= :=LATIN	ExtendedD}');
Error('\P{Is_Block= :=LATIN	ExtendedD}');
Expect(1, 43007, '\p{Is_Block=latinextendedd}', "");
Expect(0, 43007, '\p{^Is_Block=latinextendedd}', "");
Expect(0, 43007, '\P{Is_Block=latinextendedd}', "");
Expect(1, 43007, '\P{^Is_Block=latinextendedd}', "");
Expect(0, 42783, '\p{Is_Block=latinextendedd}', "");
Expect(1, 42783, '\p{^Is_Block=latinextendedd}', "");
Expect(1, 42783, '\P{Is_Block=latinextendedd}', "");
Expect(0, 42783, '\P{^Is_Block=latinextendedd}', "");
Expect(1, 43007, '\p{Is_Block=	-LATIN Extended_D}', "");
Expect(0, 43007, '\p{^Is_Block=	-LATIN Extended_D}', "");
Expect(0, 43007, '\P{Is_Block=	-LATIN Extended_D}', "");
Expect(1, 43007, '\P{^Is_Block=	-LATIN Extended_D}', "");
Expect(0, 42783, '\p{Is_Block=	-LATIN Extended_D}', "");
Expect(1, 42783, '\p{^Is_Block=	-LATIN Extended_D}', "");
Expect(1, 42783, '\P{Is_Block=	-LATIN Extended_D}', "");
Expect(0, 42783, '\P{^Is_Block=	-LATIN Extended_D}', "");
Error('\p{Is_Blk=_/a/Latin EXTENDED D}');
Error('\P{Is_Blk=_/a/Latin EXTENDED D}');
Expect(1, 43007, '\p{Is_Blk=latinextendedd}', "");
Expect(0, 43007, '\p{^Is_Blk=latinextendedd}', "");
Expect(0, 43007, '\P{Is_Blk=latinextendedd}', "");
Expect(1, 43007, '\P{^Is_Blk=latinextendedd}', "");
Expect(0, 42783, '\p{Is_Blk=latinextendedd}', "");
Expect(1, 42783, '\p{^Is_Blk=latinextendedd}', "");
Expect(1, 42783, '\P{Is_Blk=latinextendedd}', "");
Expect(0, 42783, '\P{^Is_Blk=latinextendedd}', "");
Expect(1, 43007, '\p{Is_Blk=-	LATINExtendedD}', "");
Expect(0, 43007, '\p{^Is_Blk=-	LATINExtendedD}', "");
Expect(0, 43007, '\P{Is_Blk=-	LATINExtendedD}', "");
Expect(1, 43007, '\P{^Is_Blk=-	LATINExtendedD}', "");
Expect(0, 42783, '\p{Is_Blk=-	LATINExtendedD}', "");
Expect(1, 42783, '\p{^Is_Blk=-	LATINExtendedD}', "");
Expect(1, 42783, '\P{Is_Blk=-	LATINExtendedD}', "");
Expect(0, 42783, '\P{^Is_Blk=-	LATINExtendedD}', "");
Error('\p{Block=	Alphabetic-Presentation_FORMS:=}');
Error('\P{Block=	Alphabetic-Presentation_FORMS:=}');
Expect(1, 64335, '\p{Block:alphabeticpresentationforms}', "");
Expect(0, 64335, '\p{^Block:alphabeticpresentationforms}', "");
Expect(0, 64335, '\P{Block:alphabeticpresentationforms}', "");
Expect(1, 64335, '\P{^Block:alphabeticpresentationforms}', "");
Expect(0, 64255, '\p{Block:alphabeticpresentationforms}', "");
Expect(1, 64255, '\p{^Block:alphabeticpresentationforms}', "");
Expect(1, 64255, '\P{Block:alphabeticpresentationforms}', "");
Expect(0, 64255, '\P{^Block:alphabeticpresentationforms}', "");
Expect(1, 64335, '\p{Block:	-Alphabetic PRESENTATION-forms}', "");
Expect(0, 64335, '\p{^Block:	-Alphabetic PRESENTATION-forms}', "");
Expect(0, 64335, '\P{Block:	-Alphabetic PRESENTATION-forms}', "");
Expect(1, 64335, '\P{^Block:	-Alphabetic PRESENTATION-forms}', "");
Expect(0, 64255, '\p{Block:	-Alphabetic PRESENTATION-forms}', "");
Expect(1, 64255, '\p{^Block:	-Alphabetic PRESENTATION-forms}', "");
Expect(1, 64255, '\P{Block:	-Alphabetic PRESENTATION-forms}', "");
Expect(0, 64255, '\P{^Block:	-Alphabetic PRESENTATION-forms}', "");
Error('\p{Blk=__alphabetic:=PRESENTATIONFORMS}');
Error('\P{Blk=__alphabetic:=PRESENTATIONFORMS}');
Expect(1, 64335, '\p{Blk=alphabeticpresentationforms}', "");
Expect(0, 64335, '\p{^Blk=alphabeticpresentationforms}', "");
Expect(0, 64335, '\P{Blk=alphabeticpresentationforms}', "");
Expect(1, 64335, '\P{^Blk=alphabeticpresentationforms}', "");
Expect(0, 64255, '\p{Blk=alphabeticpresentationforms}', "");
Expect(1, 64255, '\p{^Blk=alphabeticpresentationforms}', "");
Expect(1, 64255, '\P{Blk=alphabeticpresentationforms}', "");
Expect(0, 64255, '\P{^Blk=alphabeticpresentationforms}', "");
Expect(1, 64335, '\p{Blk= _alphabetic	PRESENTATION	Forms}', "");
Expect(0, 64335, '\p{^Blk= _alphabetic	PRESENTATION	Forms}', "");
Expect(0, 64335, '\P{Blk= _alphabetic	PRESENTATION	Forms}', "");
Expect(1, 64335, '\P{^Blk= _alphabetic	PRESENTATION	Forms}', "");
Expect(0, 64255, '\p{Blk= _alphabetic	PRESENTATION	Forms}', "");
Expect(1, 64255, '\p{^Blk= _alphabetic	PRESENTATION	Forms}', "");
Expect(1, 64255, '\P{Blk= _alphabetic	PRESENTATION	Forms}', "");
Expect(0, 64255, '\P{^Blk= _alphabetic	PRESENTATION	Forms}', "");
Error('\p{Is_Block= :=Alphabetic	presentation Forms}');
Error('\P{Is_Block= :=Alphabetic	presentation Forms}');
Expect(1, 64335, '\p{Is_Block=alphabeticpresentationforms}', "");
Expect(0, 64335, '\p{^Is_Block=alphabeticpresentationforms}', "");
Expect(0, 64335, '\P{Is_Block=alphabeticpresentationforms}', "");
Expect(1, 64335, '\P{^Is_Block=alphabeticpresentationforms}', "");
Expect(0, 64255, '\p{Is_Block=alphabeticpresentationforms}', "");
Expect(1, 64255, '\p{^Is_Block=alphabeticpresentationforms}', "");
Expect(1, 64255, '\P{Is_Block=alphabeticpresentationforms}', "");
Expect(0, 64255, '\P{^Is_Block=alphabeticpresentationforms}', "");
Expect(1, 64335, '\p{Is_Block=_	Alphabetic-PRESENTATION_Forms}', "");
Expect(0, 64335, '\p{^Is_Block=_	Alphabetic-PRESENTATION_Forms}', "");
Expect(0, 64335, '\P{Is_Block=_	Alphabetic-PRESENTATION_Forms}', "");
Expect(1, 64335, '\P{^Is_Block=_	Alphabetic-PRESENTATION_Forms}', "");
Expect(0, 64255, '\p{Is_Block=_	Alphabetic-PRESENTATION_Forms}', "");
Expect(1, 64255, '\p{^Is_Block=_	Alphabetic-PRESENTATION_Forms}', "");
Expect(1, 64255, '\P{Is_Block=_	Alphabetic-PRESENTATION_Forms}', "");
Expect(0, 64255, '\P{^Is_Block=_	Alphabetic-PRESENTATION_Forms}', "");
Error('\p{Is_Blk:    /a/AlphabeticPRESENTATION-FORMS}');
Error('\P{Is_Blk:    /a/AlphabeticPRESENTATION-FORMS}');
Expect(1, 64335, '\p{Is_Blk=alphabeticpresentationforms}', "");
Expect(0, 64335, '\p{^Is_Blk=alphabeticpresentationforms}', "");
Expect(0, 64335, '\P{Is_Blk=alphabeticpresentationforms}', "");
Expect(1, 64335, '\P{^Is_Blk=alphabeticpresentationforms}', "");
Expect(0, 64255, '\p{Is_Blk=alphabeticpresentationforms}', "");
Expect(1, 64255, '\p{^Is_Blk=alphabeticpresentationforms}', "");
Expect(1, 64255, '\P{Is_Blk=alphabeticpresentationforms}', "");
Expect(0, 64255, '\P{^Is_Blk=alphabeticpresentationforms}', "");
Expect(1, 64335, '\p{Is_Blk:   _alphabetic	Presentation Forms}', "");
Expect(0, 64335, '\p{^Is_Blk:   _alphabetic	Presentation Forms}', "");
Expect(0, 64335, '\P{Is_Blk:   _alphabetic	Presentation Forms}', "");
Expect(1, 64335, '\P{^Is_Blk:   _alphabetic	Presentation Forms}', "");
Expect(0, 64255, '\p{Is_Blk:   _alphabetic	Presentation Forms}', "");
Expect(1, 64255, '\p{^Is_Blk:   _alphabetic	Presentation Forms}', "");
Expect(1, 64255, '\P{Is_Blk:   _alphabetic	Presentation Forms}', "");
Expect(0, 64255, '\P{^Is_Blk:   _alphabetic	Presentation Forms}', "");
Error('\p{Block=-:=optical	CHARACTER recognition}');
Error('\P{Block=-:=optical	CHARACTER recognition}');
Expect(1, 9311, '\p{Block=opticalcharacterrecognition}', "");
Expect(0, 9311, '\p{^Block=opticalcharacterrecognition}', "");
Expect(0, 9311, '\P{Block=opticalcharacterrecognition}', "");
Expect(1, 9311, '\P{^Block=opticalcharacterrecognition}', "");
Expect(0, 9279, '\p{Block=opticalcharacterrecognition}', "");
Expect(1, 9279, '\p{^Block=opticalcharacterrecognition}', "");
Expect(1, 9279, '\P{Block=opticalcharacterrecognition}', "");
Expect(0, 9279, '\P{^Block=opticalcharacterrecognition}', "");
Expect(1, 9311, '\p{Block=-opticalCharacterRecognition}', "");
Expect(0, 9311, '\p{^Block=-opticalCharacterRecognition}', "");
Expect(0, 9311, '\P{Block=-opticalCharacterRecognition}', "");
Expect(1, 9311, '\P{^Block=-opticalCharacterRecognition}', "");
Expect(0, 9279, '\p{Block=-opticalCharacterRecognition}', "");
Expect(1, 9279, '\p{^Block=-opticalCharacterRecognition}', "");
Expect(1, 9279, '\P{Block=-opticalCharacterRecognition}', "");
Expect(0, 9279, '\P{^Block=-opticalCharacterRecognition}', "");
Error('\p{Blk=/a/ _Optical-CHARACTERRECOGNITION}');
Error('\P{Blk=/a/ _Optical-CHARACTERRECOGNITION}');
Expect(1, 9311, '\p{Blk=opticalcharacterrecognition}', "");
Expect(0, 9311, '\p{^Blk=opticalcharacterrecognition}', "");
Expect(0, 9311, '\P{Blk=opticalcharacterrecognition}', "");
Expect(1, 9311, '\P{^Blk=opticalcharacterrecognition}', "");
Expect(0, 9279, '\p{Blk=opticalcharacterrecognition}', "");
Expect(1, 9279, '\p{^Blk=opticalcharacterrecognition}', "");
Expect(1, 9279, '\P{Blk=opticalcharacterrecognition}', "");
Expect(0, 9279, '\P{^Blk=opticalcharacterrecognition}', "");
Expect(1, 9311, '\p{Blk=-OPTICAL character	RECOGNITION}', "");
Expect(0, 9311, '\p{^Blk=-OPTICAL character	RECOGNITION}', "");
Expect(0, 9311, '\P{Blk=-OPTICAL character	RECOGNITION}', "");
Expect(1, 9311, '\P{^Blk=-OPTICAL character	RECOGNITION}', "");
Expect(0, 9279, '\p{Blk=-OPTICAL character	RECOGNITION}', "");
Expect(1, 9279, '\p{^Blk=-OPTICAL character	RECOGNITION}', "");
Expect(1, 9279, '\P{Blk=-OPTICAL character	RECOGNITION}', "");
Expect(0, 9279, '\P{^Blk=-OPTICAL character	RECOGNITION}', "");
Error('\p{Is_Block=:=	Opticalcharacter_Recognition}');
Error('\P{Is_Block=:=	Opticalcharacter_Recognition}');
Expect(1, 9311, '\p{Is_Block=opticalcharacterrecognition}', "");
Expect(0, 9311, '\p{^Is_Block=opticalcharacterrecognition}', "");
Expect(0, 9311, '\P{Is_Block=opticalcharacterrecognition}', "");
Expect(1, 9311, '\P{^Is_Block=opticalcharacterrecognition}', "");
Expect(0, 9279, '\p{Is_Block=opticalcharacterrecognition}', "");
Expect(1, 9279, '\p{^Is_Block=opticalcharacterrecognition}', "");
Expect(1, 9279, '\P{Is_Block=opticalcharacterrecognition}', "");
Expect(0, 9279, '\P{^Is_Block=opticalcharacterrecognition}', "");
Expect(1, 9311, '\p{Is_Block=- OpticalCHARACTER	RECOGNITION}', "");
Expect(0, 9311, '\p{^Is_Block=- OpticalCHARACTER	RECOGNITION}', "");
Expect(0, 9311, '\P{Is_Block=- OpticalCHARACTER	RECOGNITION}', "");
Expect(1, 9311, '\P{^Is_Block=- OpticalCHARACTER	RECOGNITION}', "");
Expect(0, 9279, '\p{Is_Block=- OpticalCHARACTER	RECOGNITION}', "");
Expect(1, 9279, '\p{^Is_Block=- OpticalCHARACTER	RECOGNITION}', "");
Expect(1, 9279, '\P{Is_Block=- OpticalCHARACTER	RECOGNITION}', "");
Expect(0, 9279, '\P{^Is_Block=- OpticalCHARACTER	RECOGNITION}', "");
Error('\p{Is_Blk:    _Optical:=CharacterRecognition}');
Error('\P{Is_Blk:    _Optical:=CharacterRecognition}');
Expect(1, 9311, '\p{Is_Blk=opticalcharacterrecognition}', "");
Expect(0, 9311, '\p{^Is_Blk=opticalcharacterrecognition}', "");
Expect(0, 9311, '\P{Is_Blk=opticalcharacterrecognition}', "");
Expect(1, 9311, '\P{^Is_Blk=opticalcharacterrecognition}', "");
Expect(0, 9279, '\p{Is_Blk=opticalcharacterrecognition}', "");
Expect(1, 9279, '\p{^Is_Blk=opticalcharacterrecognition}', "");
Expect(1, 9279, '\P{Is_Blk=opticalcharacterrecognition}', "");
Expect(0, 9279, '\P{^Is_Blk=opticalcharacterrecognition}', "");
Expect(1, 9311, '\p{Is_Blk:   	optical	character Recognition}', "");
Expect(0, 9311, '\p{^Is_Blk:   	optical	character Recognition}', "");
Expect(0, 9311, '\P{Is_Blk:   	optical	character Recognition}', "");
Expect(1, 9311, '\P{^Is_Blk:   	optical	character Recognition}', "");
Expect(0, 9279, '\p{Is_Blk:   	optical	character Recognition}', "");
Expect(1, 9279, '\p{^Is_Blk:   	optical	character Recognition}', "");
Expect(1, 9279, '\P{Is_Blk:   	optical	character Recognition}', "");
Expect(0, 9279, '\P{^Is_Blk:   	optical	character Recognition}', "");
Error('\p{Block=CJK:=Unified_Ideographs}');
Error('\P{Block=CJK:=Unified_Ideographs}');
Expect(1, 40959, '\p{Block=cjkunifiedideographs}', "");
Expect(0, 40959, '\p{^Block=cjkunifiedideographs}', "");
Expect(0, 40959, '\P{Block=cjkunifiedideographs}', "");
Expect(1, 40959, '\P{^Block=cjkunifiedideographs}', "");
Expect(0, 19967, '\p{Block=cjkunifiedideographs}', "");
Expect(1, 19967, '\p{^Block=cjkunifiedideographs}', "");
Expect(1, 19967, '\P{Block=cjkunifiedideographs}', "");
Expect(0, 19967, '\P{^Block=cjkunifiedideographs}', "");
Expect(1, 40959, '\p{Block=--CJK_unified Ideographs}', "");
Expect(0, 40959, '\p{^Block=--CJK_unified Ideographs}', "");
Expect(0, 40959, '\P{Block=--CJK_unified Ideographs}', "");
Expect(1, 40959, '\P{^Block=--CJK_unified Ideographs}', "");
Expect(0, 19967, '\p{Block=--CJK_unified Ideographs}', "");
Expect(1, 19967, '\p{^Block=--CJK_unified Ideographs}', "");
Expect(1, 19967, '\P{Block=--CJK_unified Ideographs}', "");
Expect(0, 19967, '\P{^Block=--CJK_unified Ideographs}', "");
Error('\p{Blk:	 	CJK_Unified/a/IDEOGRAPHS}');
Error('\P{Blk:	 	CJK_Unified/a/IDEOGRAPHS}');
Expect(1, 40959, '\p{Blk=cjkunifiedideographs}', "");
Expect(0, 40959, '\p{^Blk=cjkunifiedideographs}', "");
Expect(0, 40959, '\P{Blk=cjkunifiedideographs}', "");
Expect(1, 40959, '\P{^Blk=cjkunifiedideographs}', "");
Expect(0, 19967, '\p{Blk=cjkunifiedideographs}', "");
Expect(1, 19967, '\p{^Blk=cjkunifiedideographs}', "");
Expect(1, 19967, '\P{Blk=cjkunifiedideographs}', "");
Expect(0, 19967, '\P{^Blk=cjkunifiedideographs}', "");
Expect(1, 40959, '\p{Blk= 	CJK_UNIFIED-ideographs}', "");
Expect(0, 40959, '\p{^Blk= 	CJK_UNIFIED-ideographs}', "");
Expect(0, 40959, '\P{Blk= 	CJK_UNIFIED-ideographs}', "");
Expect(1, 40959, '\P{^Blk= 	CJK_UNIFIED-ideographs}', "");
Expect(0, 19967, '\p{Blk= 	CJK_UNIFIED-ideographs}', "");
Expect(1, 19967, '\p{^Blk= 	CJK_UNIFIED-ideographs}', "");
Expect(1, 19967, '\P{Blk= 	CJK_UNIFIED-ideographs}', "");
Expect(0, 19967, '\P{^Blk= 	CJK_UNIFIED-ideographs}', "");
Error('\p{Is_Block: _	cjk/a/unified-IDEOGRAPHS}');
Error('\P{Is_Block: _	cjk/a/unified-IDEOGRAPHS}');
Expect(1, 40959, '\p{Is_Block=cjkunifiedideographs}', "");
Expect(0, 40959, '\p{^Is_Block=cjkunifiedideographs}', "");
Expect(0, 40959, '\P{Is_Block=cjkunifiedideographs}', "");
Expect(1, 40959, '\P{^Is_Block=cjkunifiedideographs}', "");
Expect(0, 19967, '\p{Is_Block=cjkunifiedideographs}', "");
Expect(1, 19967, '\p{^Is_Block=cjkunifiedideographs}', "");
Expect(1, 19967, '\P{Is_Block=cjkunifiedideographs}', "");
Expect(0, 19967, '\P{^Is_Block=cjkunifiedideographs}', "");
Expect(1, 40959, '\p{Is_Block=	cjk-Unified ideographs}', "");
Expect(0, 40959, '\p{^Is_Block=	cjk-Unified ideographs}', "");
Expect(0, 40959, '\P{Is_Block=	cjk-Unified ideographs}', "");
Expect(1, 40959, '\P{^Is_Block=	cjk-Unified ideographs}', "");
Expect(0, 19967, '\p{Is_Block=	cjk-Unified ideographs}', "");
Expect(1, 19967, '\p{^Is_Block=	cjk-Unified ideographs}', "");
Expect(1, 19967, '\P{Is_Block=	cjk-Unified ideographs}', "");
Expect(0, 19967, '\P{^Is_Block=	cjk-Unified ideographs}', "");
Error('\p{Is_Blk:   -CJK/a/UnifiedIdeographs}');
Error('\P{Is_Blk:   -CJK/a/UnifiedIdeographs}');
Expect(1, 40959, '\p{Is_Blk=cjkunifiedideographs}', "");
Expect(0, 40959, '\p{^Is_Blk=cjkunifiedideographs}', "");
Expect(0, 40959, '\P{Is_Blk=cjkunifiedideographs}', "");
Expect(1, 40959, '\P{^Is_Blk=cjkunifiedideographs}', "");
Expect(0, 19967, '\p{Is_Blk=cjkunifiedideographs}', "");
Expect(1, 19967, '\p{^Is_Blk=cjkunifiedideographs}', "");
Expect(1, 19967, '\P{Is_Blk=cjkunifiedideographs}', "");
Expect(0, 19967, '\P{^Is_Blk=cjkunifiedideographs}', "");
Expect(1, 40959, '\p{Is_Blk=		cjk UNIFIED ideographs}', "");
Expect(0, 40959, '\p{^Is_Blk=		cjk UNIFIED ideographs}', "");
Expect(0, 40959, '\P{Is_Blk=		cjk UNIFIED ideographs}', "");
Expect(1, 40959, '\P{^Is_Blk=		cjk UNIFIED ideographs}', "");
Expect(0, 19967, '\p{Is_Blk=		cjk UNIFIED ideographs}', "");
Expect(1, 19967, '\p{^Is_Blk=		cjk UNIFIED ideographs}', "");
Expect(1, 19967, '\P{Is_Blk=		cjk UNIFIED ideographs}', "");
Expect(0, 19967, '\P{^Is_Blk=		cjk UNIFIED ideographs}', "");
Error('\p{Block=_/a/Ancient Symbols}');
Error('\P{Block=_/a/Ancient Symbols}');
Expect(1, 65999, '\p{Block=ancientsymbols}', "");
Expect(0, 65999, '\p{^Block=ancientsymbols}', "");
Expect(0, 65999, '\P{Block=ancientsymbols}', "");
Expect(1, 65999, '\P{^Block=ancientsymbols}', "");
Expect(0, 65935, '\p{Block=ancientsymbols}', "");
Expect(1, 65935, '\p{^Block=ancientsymbols}', "");
Expect(1, 65935, '\P{Block=ancientsymbols}', "");
Expect(0, 65935, '\P{^Block=ancientsymbols}', "");
Expect(1, 65999, '\p{Block=  ancient_symbols}', "");
Expect(0, 65999, '\p{^Block=  ancient_symbols}', "");
Expect(0, 65999, '\P{Block=  ancient_symbols}', "");
Expect(1, 65999, '\P{^Block=  ancient_symbols}', "");
Expect(0, 65935, '\p{Block=  ancient_symbols}', "");
Expect(1, 65935, '\p{^Block=  ancient_symbols}', "");
Expect(1, 65935, '\P{Block=  ancient_symbols}', "");
Expect(0, 65935, '\P{^Block=  ancient_symbols}', "");
Error('\p{Blk=/a/-ancient_Symbols}');
Error('\P{Blk=/a/-ancient_Symbols}');
Expect(1, 65999, '\p{Blk: ancientsymbols}', "");
Expect(0, 65999, '\p{^Blk: ancientsymbols}', "");
Expect(0, 65999, '\P{Blk: ancientsymbols}', "");
Expect(1, 65999, '\P{^Blk: ancientsymbols}', "");
Expect(0, 65935, '\p{Blk: ancientsymbols}', "");
Expect(1, 65935, '\p{^Blk: ancientsymbols}', "");
Expect(1, 65935, '\P{Blk: ancientsymbols}', "");
Expect(0, 65935, '\P{^Blk: ancientsymbols}', "");
Expect(1, 65999, '\p{Blk=Ancient_Symbols}', "");
Expect(0, 65999, '\p{^Blk=Ancient_Symbols}', "");
Expect(0, 65999, '\P{Blk=Ancient_Symbols}', "");
Expect(1, 65999, '\P{^Blk=Ancient_Symbols}', "");
Expect(0, 65935, '\p{Blk=Ancient_Symbols}', "");
Expect(1, 65935, '\p{^Blk=Ancient_Symbols}', "");
Expect(1, 65935, '\P{Blk=Ancient_Symbols}', "");
Expect(0, 65935, '\P{^Blk=Ancient_Symbols}', "");
Error('\p{Is_Block=:=_ANCIENT-Symbols}');
Error('\P{Is_Block=:=_ANCIENT-Symbols}');
Expect(1, 65999, '\p{Is_Block: ancientsymbols}', "");
Expect(0, 65999, '\p{^Is_Block: ancientsymbols}', "");
Expect(0, 65999, '\P{Is_Block: ancientsymbols}', "");
Expect(1, 65999, '\P{^Is_Block: ancientsymbols}', "");
Expect(0, 65935, '\p{Is_Block: ancientsymbols}', "");
Expect(1, 65935, '\p{^Is_Block: ancientsymbols}', "");
Expect(1, 65935, '\P{Is_Block: ancientsymbols}', "");
Expect(0, 65935, '\P{^Is_Block: ancientsymbols}', "");
Expect(1, 65999, '\p{Is_Block= _ANCIENTSYMBOLS}', "");
Expect(0, 65999, '\p{^Is_Block= _ANCIENTSYMBOLS}', "");
Expect(0, 65999, '\P{Is_Block= _ANCIENTSYMBOLS}', "");
Expect(1, 65999, '\P{^Is_Block= _ANCIENTSYMBOLS}', "");
Expect(0, 65935, '\p{Is_Block= _ANCIENTSYMBOLS}', "");
Expect(1, 65935, '\p{^Is_Block= _ANCIENTSYMBOLS}', "");
Expect(1, 65935, '\P{Is_Block= _ANCIENTSYMBOLS}', "");
Expect(0, 65935, '\P{^Is_Block= _ANCIENTSYMBOLS}', "");
Error('\p{Is_Blk=/a/ Ancientsymbols}');
Error('\P{Is_Blk=/a/ Ancientsymbols}');
Expect(1, 65999, '\p{Is_Blk=ancientsymbols}', "");
Expect(0, 65999, '\p{^Is_Blk=ancientsymbols}', "");
Expect(0, 65999, '\P{Is_Blk=ancientsymbols}', "");
Expect(1, 65999, '\P{^Is_Blk=ancientsymbols}', "");
Expect(0, 65935, '\p{Is_Blk=ancientsymbols}', "");
Expect(1, 65935, '\p{^Is_Blk=ancientsymbols}', "");
Expect(1, 65935, '\P{Is_Blk=ancientsymbols}', "");
Expect(0, 65935, '\P{^Is_Blk=ancientsymbols}', "");
Expect(1, 65999, '\p{Is_Blk=	_ancient-SYMBOLS}', "");
Expect(0, 65999, '\p{^Is_Blk=	_ancient-SYMBOLS}', "");
Expect(0, 65999, '\P{Is_Blk=	_ancient-SYMBOLS}', "");
Expect(1, 65999, '\P{^Is_Blk=	_ancient-SYMBOLS}', "");
Expect(0, 65935, '\p{Is_Blk=	_ancient-SYMBOLS}', "");
Expect(1, 65935, '\p{^Is_Blk=	_ancient-SYMBOLS}', "");
Expect(1, 65935, '\P{Is_Blk=	_ancient-SYMBOLS}', "");
Expect(0, 65935, '\P{^Is_Blk=	_ancient-SYMBOLS}', "");
Error('\p{Block=_-Gothic/a/}');
Error('\P{Block=_-Gothic/a/}');
Expect(1, 66383, '\p{Block=gothic}', "");
Expect(0, 66383, '\p{^Block=gothic}', "");
Expect(0, 66383, '\P{Block=gothic}', "");
Expect(1, 66383, '\P{^Block=gothic}', "");
Expect(0, 66351, '\p{Block=gothic}', "");
Expect(1, 66351, '\p{^Block=gothic}', "");
Expect(1, 66351, '\P{Block=gothic}', "");
Expect(0, 66351, '\P{^Block=gothic}', "");
Expect(1, 66383, '\p{Block=-gothic}', "");
Expect(0, 66383, '\p{^Block=-gothic}', "");
Expect(0, 66383, '\P{Block=-gothic}', "");
Expect(1, 66383, '\P{^Block=-gothic}', "");
Expect(0, 66351, '\p{Block=-gothic}', "");
Expect(1, 66351, '\p{^Block=-gothic}', "");
Expect(1, 66351, '\P{Block=-gothic}', "");
Expect(0, 66351, '\P{^Block=-gothic}', "");
Error('\p{Blk=:=--GOTHIC}');
Error('\P{Blk=:=--GOTHIC}');
Expect(1, 66383, '\p{Blk=gothic}', "");
Expect(0, 66383, '\p{^Blk=gothic}', "");
Expect(0, 66383, '\P{Blk=gothic}', "");
Expect(1, 66383, '\P{^Blk=gothic}', "");
Expect(0, 66351, '\p{Blk=gothic}', "");
Expect(1, 66351, '\p{^Blk=gothic}', "");
Expect(1, 66351, '\P{Blk=gothic}', "");
Expect(0, 66351, '\P{^Blk=gothic}', "");
Expect(1, 66383, '\p{Blk: _Gothic}', "");
Expect(0, 66383, '\p{^Blk: _Gothic}', "");
Expect(0, 66383, '\P{Blk: _Gothic}', "");
Expect(1, 66383, '\P{^Blk: _Gothic}', "");
Expect(0, 66351, '\p{Blk: _Gothic}', "");
Expect(1, 66351, '\p{^Blk: _Gothic}', "");
Expect(1, 66351, '\P{Blk: _Gothic}', "");
Expect(0, 66351, '\P{^Blk: _Gothic}', "");
Error('\p{Is_Block=-/a/gothic}');
Error('\P{Is_Block=-/a/gothic}');
Expect(1, 66383, '\p{Is_Block=gothic}', "");
Expect(0, 66383, '\p{^Is_Block=gothic}', "");
Expect(0, 66383, '\P{Is_Block=gothic}', "");
Expect(1, 66383, '\P{^Is_Block=gothic}', "");
Expect(0, 66351, '\p{Is_Block=gothic}', "");
Expect(1, 66351, '\p{^Is_Block=gothic}', "");
Expect(1, 66351, '\P{Is_Block=gothic}', "");
Expect(0, 66351, '\P{^Is_Block=gothic}', "");
Expect(1, 66383, '\p{Is_Block=-_Gothic}', "");
Expect(0, 66383, '\p{^Is_Block=-_Gothic}', "");
Expect(0, 66383, '\P{Is_Block=-_Gothic}', "");
Expect(1, 66383, '\P{^Is_Block=-_Gothic}', "");
Expect(0, 66351, '\p{Is_Block=-_Gothic}', "");
Expect(1, 66351, '\p{^Is_Block=-_Gothic}', "");
Expect(1, 66351, '\P{Is_Block=-_Gothic}', "");
Expect(0, 66351, '\P{^Is_Block=-_Gothic}', "");
Error('\p{Is_Blk=	/a/GOTHIC}');
Error('\P{Is_Blk=	/a/GOTHIC}');
Expect(1, 66383, '\p{Is_Blk=gothic}', "");
Expect(0, 66383, '\p{^Is_Blk=gothic}', "");
Expect(0, 66383, '\P{Is_Blk=gothic}', "");
Expect(1, 66383, '\P{^Is_Blk=gothic}', "");
Expect(0, 66351, '\p{Is_Blk=gothic}', "");
Expect(1, 66351, '\p{^Is_Blk=gothic}', "");
Expect(1, 66351, '\P{Is_Blk=gothic}', "");
Expect(0, 66351, '\P{^Is_Blk=gothic}', "");
Expect(1, 66383, '\p{Is_Blk=-Gothic}', "");
Expect(0, 66383, '\p{^Is_Blk=-Gothic}', "");
Expect(0, 66383, '\P{Is_Blk=-Gothic}', "");
Expect(1, 66383, '\P{^Is_Blk=-Gothic}', "");
Expect(0, 66351, '\p{Is_Blk=-Gothic}', "");
Expect(1, 66351, '\p{^Is_Blk=-Gothic}', "");
Expect(1, 66351, '\P{Is_Blk=-Gothic}', "");
Expect(0, 66351, '\P{^Is_Blk=-Gothic}', "");
Error('\p{Block:	/a/ETHIOPIC}');
Error('\P{Block:	/a/ETHIOPIC}');
Expect(1, 4991, '\p{Block=ethiopic}', "");
Expect(0, 4991, '\p{^Block=ethiopic}', "");
Expect(0, 4991, '\P{Block=ethiopic}', "");
Expect(1, 4991, '\P{^Block=ethiopic}', "");
Expect(0, 4607, '\p{Block=ethiopic}', "");
Expect(1, 4607, '\p{^Block=ethiopic}', "");
Expect(1, 4607, '\P{Block=ethiopic}', "");
Expect(0, 4607, '\P{^Block=ethiopic}', "");
Expect(1, 4991, '\p{Block= Ethiopic}', "");
Expect(0, 4991, '\p{^Block= Ethiopic}', "");
Expect(0, 4991, '\P{Block= Ethiopic}', "");
Expect(1, 4991, '\P{^Block= Ethiopic}', "");
Expect(0, 4607, '\p{Block= Ethiopic}', "");
Expect(1, 4607, '\p{^Block= Ethiopic}', "");
Expect(1, 4607, '\P{Block= Ethiopic}', "");
Expect(0, 4607, '\P{^Block= Ethiopic}', "");
Error('\p{Blk=/a/ -Ethiopic}');
Error('\P{Blk=/a/ -Ethiopic}');
Expect(1, 4991, '\p{Blk=ethiopic}', "");
Expect(0, 4991, '\p{^Blk=ethiopic}', "");
Expect(0, 4991, '\P{Blk=ethiopic}', "");
Expect(1, 4991, '\P{^Blk=ethiopic}', "");
Expect(0, 4607, '\p{Blk=ethiopic}', "");
Expect(1, 4607, '\p{^Blk=ethiopic}', "");
Expect(1, 4607, '\P{Blk=ethiopic}', "");
Expect(0, 4607, '\P{^Blk=ethiopic}', "");
Expect(1, 4991, '\p{Blk=_ethiopic}', "");
Expect(0, 4991, '\p{^Blk=_ethiopic}', "");
Expect(0, 4991, '\P{Blk=_ethiopic}', "");
Expect(1, 4991, '\P{^Blk=_ethiopic}', "");
Expect(0, 4607, '\p{Blk=_ethiopic}', "");
Expect(1, 4607, '\p{^Blk=_ethiopic}', "");
Expect(1, 4607, '\P{Blk=_ethiopic}', "");
Expect(0, 4607, '\P{^Blk=_ethiopic}', "");
Error('\p{Is_Block=	:=ethiopic}');
Error('\P{Is_Block=	:=ethiopic}');
Expect(1, 4991, '\p{Is_Block=ethiopic}', "");
Expect(0, 4991, '\p{^Is_Block=ethiopic}', "");
Expect(0, 4991, '\P{Is_Block=ethiopic}', "");
Expect(1, 4991, '\P{^Is_Block=ethiopic}', "");
Expect(0, 4607, '\p{Is_Block=ethiopic}', "");
Expect(1, 4607, '\p{^Is_Block=ethiopic}', "");
Expect(1, 4607, '\P{Is_Block=ethiopic}', "");
Expect(0, 4607, '\P{^Is_Block=ethiopic}', "");
Expect(1, 4991, '\p{Is_Block: 	 ETHIOPIC}', "");
Expect(0, 4991, '\p{^Is_Block: 	 ETHIOPIC}', "");
Expect(0, 4991, '\P{Is_Block: 	 ETHIOPIC}', "");
Expect(1, 4991, '\P{^Is_Block: 	 ETHIOPIC}', "");
Expect(0, 4607, '\p{Is_Block: 	 ETHIOPIC}', "");
Expect(1, 4607, '\p{^Is_Block: 	 ETHIOPIC}', "");
Expect(1, 4607, '\P{Is_Block: 	 ETHIOPIC}', "");
Expect(0, 4607, '\P{^Is_Block: 	 ETHIOPIC}', "");
Error('\p{Is_Blk= 	ethiopic:=}');
Error('\P{Is_Blk= 	ethiopic:=}');
Expect(1, 4991, '\p{Is_Blk=ethiopic}', "");
Expect(0, 4991, '\p{^Is_Blk=ethiopic}', "");
Expect(0, 4991, '\P{Is_Blk=ethiopic}', "");
Expect(1, 4991, '\P{^Is_Blk=ethiopic}', "");
Expect(0, 4607, '\p{Is_Blk=ethiopic}', "");
Expect(1, 4607, '\p{^Is_Blk=ethiopic}', "");
Expect(1, 4607, '\P{Is_Blk=ethiopic}', "");
Expect(0, 4607, '\P{^Is_Blk=ethiopic}', "");
Expect(1, 4991, '\p{Is_Blk=	-ethiopic}', "");
Expect(0, 4991, '\p{^Is_Blk=	-ethiopic}', "");
Expect(0, 4991, '\P{Is_Blk=	-ethiopic}', "");
Expect(1, 4991, '\P{^Is_Blk=	-ethiopic}', "");
Expect(0, 4607, '\p{Is_Blk=	-ethiopic}', "");
Expect(1, 4607, '\p{^Is_Blk=	-ethiopic}', "");
Expect(1, 4607, '\P{Is_Blk=	-ethiopic}', "");
Expect(0, 4607, '\P{^Is_Blk=	-ethiopic}', "");
Error('\p{Block=_:=Buginese}');
Error('\P{Block=_:=Buginese}');
Expect(1, 6687, '\p{Block=buginese}', "");
Expect(0, 6687, '\p{^Block=buginese}', "");
Expect(0, 6687, '\P{Block=buginese}', "");
Expect(1, 6687, '\P{^Block=buginese}', "");
Expect(0, 6655, '\p{Block=buginese}', "");
Expect(1, 6655, '\p{^Block=buginese}', "");
Expect(1, 6655, '\P{Block=buginese}', "");
Expect(0, 6655, '\P{^Block=buginese}', "");
Expect(1, 6687, '\p{Block= _Buginese}', "");
Expect(0, 6687, '\p{^Block= _Buginese}', "");
Expect(0, 6687, '\P{Block= _Buginese}', "");
Expect(1, 6687, '\P{^Block= _Buginese}', "");
Expect(0, 6655, '\p{Block= _Buginese}', "");
Expect(1, 6655, '\p{^Block= _Buginese}', "");
Expect(1, 6655, '\P{Block= _Buginese}', "");
Expect(0, 6655, '\P{^Block= _Buginese}', "");
Error('\p{Blk:		_Buginese/a/}');
Error('\P{Blk:		_Buginese/a/}');
Expect(1, 6687, '\p{Blk=buginese}', "");
Expect(0, 6687, '\p{^Blk=buginese}', "");
Expect(0, 6687, '\P{Blk=buginese}', "");
Expect(1, 6687, '\P{^Blk=buginese}', "");
Expect(0, 6655, '\p{Blk=buginese}', "");
Expect(1, 6655, '\p{^Blk=buginese}', "");
Expect(1, 6655, '\P{Blk=buginese}', "");
Expect(0, 6655, '\P{^Blk=buginese}', "");
Expect(1, 6687, '\p{Blk=	_Buginese}', "");
Expect(0, 6687, '\p{^Blk=	_Buginese}', "");
Expect(0, 6687, '\P{Blk=	_Buginese}', "");
Expect(1, 6687, '\P{^Blk=	_Buginese}', "");
Expect(0, 6655, '\p{Blk=	_Buginese}', "");
Expect(1, 6655, '\p{^Blk=	_Buginese}', "");
Expect(1, 6655, '\P{Blk=	_Buginese}', "");
Expect(0, 6655, '\P{^Blk=	_Buginese}', "");
Error('\p{Is_Block=:=	_BUGINESE}');
Error('\P{Is_Block=:=	_BUGINESE}');
Expect(1, 6687, '\p{Is_Block=buginese}', "");
Expect(0, 6687, '\p{^Is_Block=buginese}', "");
Expect(0, 6687, '\P{Is_Block=buginese}', "");
Expect(1, 6687, '\P{^Is_Block=buginese}', "");
Expect(0, 6655, '\p{Is_Block=buginese}', "");
Expect(1, 6655, '\p{^Is_Block=buginese}', "");
Expect(1, 6655, '\P{Is_Block=buginese}', "");
Expect(0, 6655, '\P{^Is_Block=buginese}', "");
Expect(1, 6687, '\p{Is_Block=	_BUGINESE}', "");
Expect(0, 6687, '\p{^Is_Block=	_BUGINESE}', "");
Expect(0, 6687, '\P{Is_Block=	_BUGINESE}', "");
Expect(1, 6687, '\P{^Is_Block=	_BUGINESE}', "");
Expect(0, 6655, '\p{Is_Block=	_BUGINESE}', "");
Expect(1, 6655, '\p{^Is_Block=	_BUGINESE}', "");
Expect(1, 6655, '\P{Is_Block=	_BUGINESE}', "");
Expect(0, 6655, '\P{^Is_Block=	_BUGINESE}', "");
Error('\p{Is_Blk=__buginese:=}');
Error('\P{Is_Blk=__buginese:=}');
Expect(1, 6687, '\p{Is_Blk=buginese}', "");
Expect(0, 6687, '\p{^Is_Blk=buginese}', "");
Expect(0, 6687, '\P{Is_Blk=buginese}', "");
Expect(1, 6687, '\P{^Is_Blk=buginese}', "");
Expect(0, 6655, '\p{Is_Blk=buginese}', "");
Expect(1, 6655, '\p{^Is_Blk=buginese}', "");
Expect(1, 6655, '\P{Is_Blk=buginese}', "");
Expect(0, 6655, '\P{^Is_Blk=buginese}', "");
Expect(1, 6687, '\p{Is_Blk=  Buginese}', "");
Expect(0, 6687, '\p{^Is_Blk=  Buginese}', "");
Expect(0, 6687, '\P{Is_Blk=  Buginese}', "");
Expect(1, 6687, '\P{^Is_Blk=  Buginese}', "");
Expect(0, 6655, '\p{Is_Blk=  Buginese}', "");
Expect(1, 6655, '\p{^Is_Blk=  Buginese}', "");
Expect(1, 6655, '\P{Is_Blk=  Buginese}', "");
Expect(0, 6655, '\P{^Is_Blk=  Buginese}', "");
Error('\p{Block=:= Mathematical	Alphanumeric-symbols}');
Error('\P{Block=:= Mathematical	Alphanumeric-symbols}');
Expect(1, 120831, '\p{Block: mathematicalalphanumericsymbols}', "");
Expect(0, 120831, '\p{^Block: mathematicalalphanumericsymbols}', "");
Expect(0, 120831, '\P{Block: mathematicalalphanumericsymbols}', "");
Expect(1, 120831, '\P{^Block: mathematicalalphanumericsymbols}', "");
Expect(0, 119807, '\p{Block: mathematicalalphanumericsymbols}', "");
Expect(1, 119807, '\p{^Block: mathematicalalphanumericsymbols}', "");
Expect(1, 119807, '\P{Block: mathematicalalphanumericsymbols}', "");
Expect(0, 119807, '\P{^Block: mathematicalalphanumericsymbols}', "");
Expect(1, 120831, '\p{Block=- Mathematical	Alphanumeric-Symbols}', "");
Expect(0, 120831, '\p{^Block=- Mathematical	Alphanumeric-Symbols}', "");
Expect(0, 120831, '\P{Block=- Mathematical	Alphanumeric-Symbols}', "");
Expect(1, 120831, '\P{^Block=- Mathematical	Alphanumeric-Symbols}', "");
Expect(0, 119807, '\p{Block=- Mathematical	Alphanumeric-Symbols}', "");
Expect(1, 119807, '\p{^Block=- Mathematical	Alphanumeric-Symbols}', "");
Expect(1, 119807, '\P{Block=- Mathematical	Alphanumeric-Symbols}', "");
Expect(0, 119807, '\P{^Block=- Mathematical	Alphanumeric-Symbols}', "");
Error('\p{Blk=	-mathematicalALPHANUMERICSymbols:=}');
Error('\P{Blk=	-mathematicalALPHANUMERICSymbols:=}');
Expect(1, 120831, '\p{Blk=mathematicalalphanumericsymbols}', "");
Expect(0, 120831, '\p{^Blk=mathematicalalphanumericsymbols}', "");
Expect(0, 120831, '\P{Blk=mathematicalalphanumericsymbols}', "");
Expect(1, 120831, '\P{^Blk=mathematicalalphanumericsymbols}', "");
Expect(0, 119807, '\p{Blk=mathematicalalphanumericsymbols}', "");
Expect(1, 119807, '\p{^Blk=mathematicalalphanumericsymbols}', "");
Expect(1, 119807, '\P{Blk=mathematicalalphanumericsymbols}', "");
Expect(0, 119807, '\P{^Blk=mathematicalalphanumericsymbols}', "");
Expect(1, 120831, '\p{Blk= -Mathematical	AlphanumericSymbols}', "");
Expect(0, 120831, '\p{^Blk= -Mathematical	AlphanumericSymbols}', "");
Expect(0, 120831, '\P{Blk= -Mathematical	AlphanumericSymbols}', "");
Expect(1, 120831, '\P{^Blk= -Mathematical	AlphanumericSymbols}', "");
Expect(0, 119807, '\p{Blk= -Mathematical	AlphanumericSymbols}', "");
Expect(1, 119807, '\p{^Blk= -Mathematical	AlphanumericSymbols}', "");
Expect(1, 119807, '\P{Blk= -Mathematical	AlphanumericSymbols}', "");
Expect(0, 119807, '\P{^Blk= -Mathematical	AlphanumericSymbols}', "");
Error('\p{Is_Block=_	mathematical alphanumeric:=Symbols}');
Error('\P{Is_Block=_	mathematical alphanumeric:=Symbols}');
Expect(1, 120831, '\p{Is_Block=mathematicalalphanumericsymbols}', "");
Expect(0, 120831, '\p{^Is_Block=mathematicalalphanumericsymbols}', "");
Expect(0, 120831, '\P{Is_Block=mathematicalalphanumericsymbols}', "");
Expect(1, 120831, '\P{^Is_Block=mathematicalalphanumericsymbols}', "");
Expect(0, 119807, '\p{Is_Block=mathematicalalphanumericsymbols}', "");
Expect(1, 119807, '\p{^Is_Block=mathematicalalphanumericsymbols}', "");
Expect(1, 119807, '\P{Is_Block=mathematicalalphanumericsymbols}', "");
Expect(0, 119807, '\P{^Is_Block=mathematicalalphanumericsymbols}', "");
Expect(1, 120831, '\p{Is_Block=-Mathematical	alphanumeric-symbols}', "");
Expect(0, 120831, '\p{^Is_Block=-Mathematical	alphanumeric-symbols}', "");
Expect(0, 120831, '\P{Is_Block=-Mathematical	alphanumeric-symbols}', "");
Expect(1, 120831, '\P{^Is_Block=-Mathematical	alphanumeric-symbols}', "");
Expect(0, 119807, '\p{Is_Block=-Mathematical	alphanumeric-symbols}', "");
Expect(1, 119807, '\p{^Is_Block=-Mathematical	alphanumeric-symbols}', "");
Expect(1, 119807, '\P{Is_Block=-Mathematical	alphanumeric-symbols}', "");
Expect(0, 119807, '\P{^Is_Block=-Mathematical	alphanumeric-symbols}', "");
Error('\p{Is_Blk= :=Mathematical alphanumericSYMBOLS}');
Error('\P{Is_Blk= :=Mathematical alphanumericSYMBOLS}');
Expect(1, 120831, '\p{Is_Blk: mathematicalalphanumericsymbols}', "");
Expect(0, 120831, '\p{^Is_Blk: mathematicalalphanumericsymbols}', "");
Expect(0, 120831, '\P{Is_Blk: mathematicalalphanumericsymbols}', "");
Expect(1, 120831, '\P{^Is_Blk: mathematicalalphanumericsymbols}', "");
Expect(0, 119807, '\p{Is_Blk: mathematicalalphanumericsymbols}', "");
Expect(1, 119807, '\p{^Is_Blk: mathematicalalphanumericsymbols}', "");
Expect(1, 119807, '\P{Is_Blk: mathematicalalphanumericsymbols}', "");
Expect(0, 119807, '\P{^Is_Blk: mathematicalalphanumericsymbols}', "");
Expect(1, 120831, '\p{Is_Blk:		mathematical	AlphanumericSymbols}', "");
Expect(0, 120831, '\p{^Is_Blk:		mathematical	AlphanumericSymbols}', "");
Expect(0, 120831, '\P{Is_Blk:		mathematical	AlphanumericSymbols}', "");
Expect(1, 120831, '\P{^Is_Blk:		mathematical	AlphanumericSymbols}', "");
Expect(0, 119807, '\p{Is_Blk:		mathematical	AlphanumericSymbols}', "");
Expect(1, 119807, '\p{^Is_Blk:		mathematical	AlphanumericSymbols}', "");
Expect(1, 119807, '\P{Is_Blk:		mathematical	AlphanumericSymbols}', "");
Expect(0, 119807, '\P{^Is_Blk:		mathematical	AlphanumericSymbols}', "");
Error('\p{Block=-	Inscriptional-Pahlavi:=}');
Error('\P{Block=-	Inscriptional-Pahlavi:=}');
Expect(1, 68479, '\p{Block=inscriptionalpahlavi}', "");
Expect(0, 68479, '\p{^Block=inscriptionalpahlavi}', "");
Expect(0, 68479, '\P{Block=inscriptionalpahlavi}', "");
Expect(1, 68479, '\P{^Block=inscriptionalpahlavi}', "");
Expect(0, 68447, '\p{Block=inscriptionalpahlavi}', "");
Expect(1, 68447, '\p{^Block=inscriptionalpahlavi}', "");
Expect(1, 68447, '\P{Block=inscriptionalpahlavi}', "");
Expect(0, 68447, '\P{^Block=inscriptionalpahlavi}', "");
Expect(1, 68479, '\p{Block=__INSCRIPTIONAL_Pahlavi}', "");
Expect(0, 68479, '\p{^Block=__INSCRIPTIONAL_Pahlavi}', "");
Expect(0, 68479, '\P{Block=__INSCRIPTIONAL_Pahlavi}', "");
Expect(1, 68479, '\P{^Block=__INSCRIPTIONAL_Pahlavi}', "");
Expect(0, 68447, '\p{Block=__INSCRIPTIONAL_Pahlavi}', "");
Expect(1, 68447, '\p{^Block=__INSCRIPTIONAL_Pahlavi}', "");
Expect(1, 68447, '\P{Block=__INSCRIPTIONAL_Pahlavi}', "");
Expect(0, 68447, '\P{^Block=__INSCRIPTIONAL_Pahlavi}', "");
Error('\p{Blk=INSCRIPTIONAL/a/PAHLAVI}');
Error('\P{Blk=INSCRIPTIONAL/a/PAHLAVI}');
Expect(1, 68479, '\p{Blk=inscriptionalpahlavi}', "");
Expect(0, 68479, '\p{^Blk=inscriptionalpahlavi}', "");
Expect(0, 68479, '\P{Blk=inscriptionalpahlavi}', "");
Expect(1, 68479, '\P{^Blk=inscriptionalpahlavi}', "");
Expect(0, 68447, '\p{Blk=inscriptionalpahlavi}', "");
Expect(1, 68447, '\p{^Blk=inscriptionalpahlavi}', "");
Expect(1, 68447, '\P{Blk=inscriptionalpahlavi}', "");
Expect(0, 68447, '\P{^Blk=inscriptionalpahlavi}', "");
Expect(1, 68479, '\p{Blk= _Inscriptional PAHLAVI}', "");
Expect(0, 68479, '\p{^Blk= _Inscriptional PAHLAVI}', "");
Expect(0, 68479, '\P{Blk= _Inscriptional PAHLAVI}', "");
Expect(1, 68479, '\P{^Blk= _Inscriptional PAHLAVI}', "");
Expect(0, 68447, '\p{Blk= _Inscriptional PAHLAVI}', "");
Expect(1, 68447, '\p{^Blk= _Inscriptional PAHLAVI}', "");
Expect(1, 68447, '\P{Blk= _Inscriptional PAHLAVI}', "");
Expect(0, 68447, '\P{^Blk= _Inscriptional PAHLAVI}', "");
Error('\p{Is_Block=:= INSCRIPTIONAL_Pahlavi}');
Error('\P{Is_Block=:= INSCRIPTIONAL_Pahlavi}');
Expect(1, 68479, '\p{Is_Block=inscriptionalpahlavi}', "");
Expect(0, 68479, '\p{^Is_Block=inscriptionalpahlavi}', "");
Expect(0, 68479, '\P{Is_Block=inscriptionalpahlavi}', "");
Expect(1, 68479, '\P{^Is_Block=inscriptionalpahlavi}', "");
Expect(0, 68447, '\p{Is_Block=inscriptionalpahlavi}', "");
Expect(1, 68447, '\p{^Is_Block=inscriptionalpahlavi}', "");
Expect(1, 68447, '\P{Is_Block=inscriptionalpahlavi}', "");
Expect(0, 68447, '\P{^Is_Block=inscriptionalpahlavi}', "");
Expect(1, 68479, '\p{Is_Block=-inscriptional	PAHLAVI}', "");
Expect(0, 68479, '\p{^Is_Block=-inscriptional	PAHLAVI}', "");
Expect(0, 68479, '\P{Is_Block=-inscriptional	PAHLAVI}', "");
Expect(1, 68479, '\P{^Is_Block=-inscriptional	PAHLAVI}', "");
Expect(0, 68447, '\p{Is_Block=-inscriptional	PAHLAVI}', "");
Expect(1, 68447, '\p{^Is_Block=-inscriptional	PAHLAVI}', "");
Expect(1, 68447, '\P{Is_Block=-inscriptional	PAHLAVI}', "");
Expect(0, 68447, '\P{^Is_Block=-inscriptional	PAHLAVI}', "");
Error('\p{Is_Blk:-Inscriptional-Pahlavi:=}');
Error('\P{Is_Blk:-Inscriptional-Pahlavi:=}');
Expect(1, 68479, '\p{Is_Blk=inscriptionalpahlavi}', "");
Expect(0, 68479, '\p{^Is_Blk=inscriptionalpahlavi}', "");
Expect(0, 68479, '\P{Is_Blk=inscriptionalpahlavi}', "");
Expect(1, 68479, '\P{^Is_Blk=inscriptionalpahlavi}', "");
Expect(0, 68447, '\p{Is_Blk=inscriptionalpahlavi}', "");
Expect(1, 68447, '\p{^Is_Blk=inscriptionalpahlavi}', "");
Expect(1, 68447, '\P{Is_Blk=inscriptionalpahlavi}', "");
Expect(0, 68447, '\P{^Is_Blk=inscriptionalpahlavi}', "");
Expect(1, 68479, '\p{Is_Blk=-inscriptional PAHLAVI}', "");
Expect(0, 68479, '\p{^Is_Blk=-inscriptional PAHLAVI}', "");
Expect(0, 68479, '\P{Is_Blk=-inscriptional PAHLAVI}', "");
Expect(1, 68479, '\P{^Is_Blk=-inscriptional PAHLAVI}', "");
Expect(0, 68447, '\p{Is_Blk=-inscriptional PAHLAVI}', "");
Expect(1, 68447, '\p{^Is_Blk=-inscriptional PAHLAVI}', "");
Expect(1, 68447, '\P{Is_Blk=-inscriptional PAHLAVI}', "");
Expect(0, 68447, '\P{^Is_Blk=-inscriptional PAHLAVI}', "");
Error('\p{Block:  Unified/a/Canadian	aboriginalSyllabics EXTENDED}');
Error('\P{Block:  Unified/a/Canadian	aboriginalSyllabics EXTENDED}');
Expect(1, 6399, '\p{Block=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6399, '\p{^Block=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6399, '\P{Block=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6399, '\P{^Block=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6319, '\p{Block=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6319, '\p{^Block=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6319, '\P{Block=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6319, '\P{^Block=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6399, '\p{Block= -Unified-canadian-aboriginalsyllabics-Extended}', "");
Expect(0, 6399, '\p{^Block= -Unified-canadian-aboriginalsyllabics-Extended}', "");
Expect(0, 6399, '\P{Block= -Unified-canadian-aboriginalsyllabics-Extended}', "");
Expect(1, 6399, '\P{^Block= -Unified-canadian-aboriginalsyllabics-Extended}', "");
Expect(0, 6319, '\p{Block= -Unified-canadian-aboriginalsyllabics-Extended}', "");
Expect(1, 6319, '\p{^Block= -Unified-canadian-aboriginalsyllabics-Extended}', "");
Expect(1, 6319, '\P{Block= -Unified-canadian-aboriginalsyllabics-Extended}', "");
Expect(0, 6319, '\P{^Block= -Unified-canadian-aboriginalsyllabics-Extended}', "");
Error('\p{Blk=/a/UNIFIEDCanadian-Aboriginal_Syllabics-extended}');
Error('\P{Blk=/a/UNIFIEDCanadian-Aboriginal_Syllabics-extended}');
Expect(1, 6399, '\p{Blk=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6399, '\p{^Blk=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6399, '\P{Blk=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6399, '\P{^Blk=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6319, '\p{Blk=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6319, '\p{^Blk=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6319, '\P{Blk=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6319, '\P{^Blk=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6399, '\p{Blk=_-Unified-Canadian	Aboriginal Syllabics-EXTENDED}', "");
Expect(0, 6399, '\p{^Blk=_-Unified-Canadian	Aboriginal Syllabics-EXTENDED}', "");
Expect(0, 6399, '\P{Blk=_-Unified-Canadian	Aboriginal Syllabics-EXTENDED}', "");
Expect(1, 6399, '\P{^Blk=_-Unified-Canadian	Aboriginal Syllabics-EXTENDED}', "");
Expect(0, 6319, '\p{Blk=_-Unified-Canadian	Aboriginal Syllabics-EXTENDED}', "");
Expect(1, 6319, '\p{^Blk=_-Unified-Canadian	Aboriginal Syllabics-EXTENDED}', "");
Expect(1, 6319, '\P{Blk=_-Unified-Canadian	Aboriginal Syllabics-EXTENDED}', "");
Expect(0, 6319, '\P{^Blk=_-Unified-Canadian	Aboriginal Syllabics-EXTENDED}', "");
Error('\p{Is_Block=	 unified-CANADIAN	Aboriginal_syllabics:=Extended}');
Error('\P{Is_Block=	 unified-CANADIAN	Aboriginal_syllabics:=Extended}');
Expect(1, 6399, '\p{Is_Block=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6399, '\p{^Is_Block=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6399, '\P{Is_Block=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6399, '\P{^Is_Block=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6319, '\p{Is_Block=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6319, '\p{^Is_Block=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6319, '\P{Is_Block=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6319, '\P{^Is_Block=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6399, '\p{Is_Block=	 unified	CANADIAN	AboriginalSyllabics	Extended}', "");
Expect(0, 6399, '\p{^Is_Block=	 unified	CANADIAN	AboriginalSyllabics	Extended}', "");
Expect(0, 6399, '\P{Is_Block=	 unified	CANADIAN	AboriginalSyllabics	Extended}', "");
Expect(1, 6399, '\P{^Is_Block=	 unified	CANADIAN	AboriginalSyllabics	Extended}', "");
Expect(0, 6319, '\p{Is_Block=	 unified	CANADIAN	AboriginalSyllabics	Extended}', "");
Expect(1, 6319, '\p{^Is_Block=	 unified	CANADIAN	AboriginalSyllabics	Extended}', "");
Expect(1, 6319, '\P{Is_Block=	 unified	CANADIAN	AboriginalSyllabics	Extended}', "");
Expect(0, 6319, '\P{^Is_Block=	 unified	CANADIAN	AboriginalSyllabics	Extended}', "");
Error('\p{Is_Blk= Unified	Canadian/a/ABORIGINAL SyllabicsExtended}');
Error('\P{Is_Blk= Unified	Canadian/a/ABORIGINAL SyllabicsExtended}');
Expect(1, 6399, '\p{Is_Blk=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6399, '\p{^Is_Blk=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6399, '\P{Is_Blk=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6399, '\P{^Is_Blk=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6319, '\p{Is_Blk=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6319, '\p{^Is_Blk=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6319, '\P{Is_Blk=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6319, '\P{^Is_Blk=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6399, '\p{Is_Blk= _Unified-canadian-Aboriginal_syllabics EXTENDED}', "");
Expect(0, 6399, '\p{^Is_Blk= _Unified-canadian-Aboriginal_syllabics EXTENDED}', "");
Expect(0, 6399, '\P{Is_Blk= _Unified-canadian-Aboriginal_syllabics EXTENDED}', "");
Expect(1, 6399, '\P{^Is_Blk= _Unified-canadian-Aboriginal_syllabics EXTENDED}', "");
Expect(0, 6319, '\p{Is_Blk= _Unified-canadian-Aboriginal_syllabics EXTENDED}', "");
Expect(1, 6319, '\p{^Is_Blk= _Unified-canadian-Aboriginal_syllabics EXTENDED}', "");
Expect(1, 6319, '\P{Is_Blk= _Unified-canadian-Aboriginal_syllabics EXTENDED}', "");
Expect(0, 6319, '\P{^Is_Blk= _Unified-canadian-Aboriginal_syllabics EXTENDED}', "");
Error('\p{Block=		MANDAIC/a/}');
Error('\P{Block=		MANDAIC/a/}');
Expect(1, 2143, '\p{Block=mandaic}', "");
Expect(0, 2143, '\p{^Block=mandaic}', "");
Expect(0, 2143, '\P{Block=mandaic}', "");
Expect(1, 2143, '\P{^Block=mandaic}', "");
Expect(0, 2111, '\p{Block=mandaic}', "");
Expect(1, 2111, '\p{^Block=mandaic}', "");
Expect(1, 2111, '\P{Block=mandaic}', "");
Expect(0, 2111, '\P{^Block=mandaic}', "");
Expect(1, 2143, '\p{Block=-_Mandaic}', "");
Expect(0, 2143, '\p{^Block=-_Mandaic}', "");
Expect(0, 2143, '\P{Block=-_Mandaic}', "");
Expect(1, 2143, '\P{^Block=-_Mandaic}', "");
Expect(0, 2111, '\p{Block=-_Mandaic}', "");
Expect(1, 2111, '\p{^Block=-_Mandaic}', "");
Expect(1, 2111, '\P{Block=-_Mandaic}', "");
Expect(0, 2111, '\P{^Block=-_Mandaic}', "");
Error('\p{Blk=/a/	-mandaic}');
Error('\P{Blk=/a/	-mandaic}');
Expect(1, 2143, '\p{Blk=mandaic}', "");
Expect(0, 2143, '\p{^Blk=mandaic}', "");
Expect(0, 2143, '\P{Blk=mandaic}', "");
Expect(1, 2143, '\P{^Blk=mandaic}', "");
Expect(0, 2111, '\p{Blk=mandaic}', "");
Expect(1, 2111, '\p{^Blk=mandaic}', "");
Expect(1, 2111, '\P{Blk=mandaic}', "");
Expect(0, 2111, '\P{^Blk=mandaic}', "");
Expect(1, 2143, '\p{Blk=	 MANDAIC}', "");
Expect(0, 2143, '\p{^Blk=	 MANDAIC}', "");
Expect(0, 2143, '\P{Blk=	 MANDAIC}', "");
Expect(1, 2143, '\P{^Blk=	 MANDAIC}', "");
Expect(0, 2111, '\p{Blk=	 MANDAIC}', "");
Expect(1, 2111, '\p{^Blk=	 MANDAIC}', "");
Expect(1, 2111, '\P{Blk=	 MANDAIC}', "");
Expect(0, 2111, '\P{^Blk=	 MANDAIC}', "");
Error('\p{Is_Block=:=-_Mandaic}');
Error('\P{Is_Block=:=-_Mandaic}');
Expect(1, 2143, '\p{Is_Block=mandaic}', "");
Expect(0, 2143, '\p{^Is_Block=mandaic}', "");
Expect(0, 2143, '\P{Is_Block=mandaic}', "");
Expect(1, 2143, '\P{^Is_Block=mandaic}', "");
Expect(0, 2111, '\p{Is_Block=mandaic}', "");
Expect(1, 2111, '\p{^Is_Block=mandaic}', "");
Expect(1, 2111, '\P{Is_Block=mandaic}', "");
Expect(0, 2111, '\P{^Is_Block=mandaic}', "");
Expect(1, 2143, '\p{Is_Block=		Mandaic}', "");
Expect(0, 2143, '\p{^Is_Block=		Mandaic}', "");
Expect(0, 2143, '\P{Is_Block=		Mandaic}', "");
Expect(1, 2143, '\P{^Is_Block=		Mandaic}', "");
Expect(0, 2111, '\p{Is_Block=		Mandaic}', "");
Expect(1, 2111, '\p{^Is_Block=		Mandaic}', "");
Expect(1, 2111, '\P{Is_Block=		Mandaic}', "");
Expect(0, 2111, '\P{^Is_Block=		Mandaic}', "");
Error('\p{Is_Blk: -/a/Mandaic}');
Error('\P{Is_Blk: -/a/Mandaic}');
Expect(1, 2143, '\p{Is_Blk=mandaic}', "");
Expect(0, 2143, '\p{^Is_Blk=mandaic}', "");
Expect(0, 2143, '\P{Is_Blk=mandaic}', "");
Expect(1, 2143, '\P{^Is_Blk=mandaic}', "");
Expect(0, 2111, '\p{Is_Blk=mandaic}', "");
Expect(1, 2111, '\p{^Is_Blk=mandaic}', "");
Expect(1, 2111, '\P{Is_Blk=mandaic}', "");
Expect(0, 2111, '\P{^Is_Blk=mandaic}', "");
Expect(1, 2143, '\p{Is_Blk: -	mandaic}', "");
Expect(0, 2143, '\p{^Is_Blk: -	mandaic}', "");
Expect(0, 2143, '\P{Is_Blk: -	mandaic}', "");
Expect(1, 2143, '\P{^Is_Blk: -	mandaic}', "");
Expect(0, 2111, '\p{Is_Blk: -	mandaic}', "");
Expect(1, 2111, '\p{^Is_Blk: -	mandaic}', "");
Expect(1, 2111, '\P{Is_Blk: -	mandaic}', "");
Expect(0, 2111, '\P{^Is_Blk: -	mandaic}', "");
Error('\p{Block=	:=Kangxi radicals}');
Error('\P{Block=	:=Kangxi radicals}');
Expect(1, 12255, '\p{Block:   kangxiradicals}', "");
Expect(0, 12255, '\p{^Block:   kangxiradicals}', "");
Expect(0, 12255, '\P{Block:   kangxiradicals}', "");
Expect(1, 12255, '\P{^Block:   kangxiradicals}', "");
Expect(0, 12031, '\p{Block:   kangxiradicals}', "");
Expect(1, 12031, '\p{^Block:   kangxiradicals}', "");
Expect(1, 12031, '\P{Block:   kangxiradicals}', "");
Expect(0, 12031, '\P{^Block:   kangxiradicals}', "");
Expect(1, 12255, '\p{Block= KANGXI Radicals}', "");
Expect(0, 12255, '\p{^Block= KANGXI Radicals}', "");
Expect(0, 12255, '\P{Block= KANGXI Radicals}', "");
Expect(1, 12255, '\P{^Block= KANGXI Radicals}', "");
Expect(0, 12031, '\p{Block= KANGXI Radicals}', "");
Expect(1, 12031, '\p{^Block= KANGXI Radicals}', "");
Expect(1, 12031, '\P{Block= KANGXI Radicals}', "");
Expect(0, 12031, '\P{^Block= KANGXI Radicals}', "");
Error('\p{Blk=Kangxi/a/radicals}');
Error('\P{Blk=Kangxi/a/radicals}');
Expect(1, 12255, '\p{Blk:	kangxiradicals}', "");
Expect(0, 12255, '\p{^Blk:	kangxiradicals}', "");
Expect(0, 12255, '\P{Blk:	kangxiradicals}', "");
Expect(1, 12255, '\P{^Blk:	kangxiradicals}', "");
Expect(0, 12031, '\p{Blk:	kangxiradicals}', "");
Expect(1, 12031, '\p{^Blk:	kangxiradicals}', "");
Expect(1, 12031, '\P{Blk:	kangxiradicals}', "");
Expect(0, 12031, '\P{^Blk:	kangxiradicals}', "");
Expect(1, 12255, '\p{Blk=	-kangxi RADICALS}', "");
Expect(0, 12255, '\p{^Blk=	-kangxi RADICALS}', "");
Expect(0, 12255, '\P{Blk=	-kangxi RADICALS}', "");
Expect(1, 12255, '\P{^Blk=	-kangxi RADICALS}', "");
Expect(0, 12031, '\p{Blk=	-kangxi RADICALS}', "");
Expect(1, 12031, '\p{^Blk=	-kangxi RADICALS}', "");
Expect(1, 12031, '\P{Blk=	-kangxi RADICALS}', "");
Expect(0, 12031, '\P{^Blk=	-kangxi RADICALS}', "");
Error('\p{Is_Block=	:=Kangxi_Radicals}');
Error('\P{Is_Block=	:=Kangxi_Radicals}');
Expect(1, 12255, '\p{Is_Block=kangxiradicals}', "");
Expect(0, 12255, '\p{^Is_Block=kangxiradicals}', "");
Expect(0, 12255, '\P{Is_Block=kangxiradicals}', "");
Expect(1, 12255, '\P{^Is_Block=kangxiradicals}', "");
Expect(0, 12031, '\p{Is_Block=kangxiradicals}', "");
Expect(1, 12031, '\p{^Is_Block=kangxiradicals}', "");
Expect(1, 12031, '\P{Is_Block=kangxiradicals}', "");
Expect(0, 12031, '\P{^Is_Block=kangxiradicals}', "");
Expect(1, 12255, '\p{Is_Block=KangxiRadicals}', "");
Expect(0, 12255, '\p{^Is_Block=KangxiRadicals}', "");
Expect(0, 12255, '\P{Is_Block=KangxiRadicals}', "");
Expect(1, 12255, '\P{^Is_Block=KangxiRadicals}', "");
Expect(0, 12031, '\p{Is_Block=KangxiRadicals}', "");
Expect(1, 12031, '\p{^Is_Block=KangxiRadicals}', "");
Expect(1, 12031, '\P{Is_Block=KangxiRadicals}', "");
Expect(0, 12031, '\P{^Is_Block=KangxiRadicals}', "");
Error('\p{Is_Blk=:= 	Kangxi-radicals}');
Error('\P{Is_Blk=:= 	Kangxi-radicals}');
Expect(1, 12255, '\p{Is_Blk=kangxiradicals}', "");
Expect(0, 12255, '\p{^Is_Blk=kangxiradicals}', "");
Expect(0, 12255, '\P{Is_Blk=kangxiradicals}', "");
Expect(1, 12255, '\P{^Is_Blk=kangxiradicals}', "");
Expect(0, 12031, '\p{Is_Blk=kangxiradicals}', "");
Expect(1, 12031, '\p{^Is_Blk=kangxiradicals}', "");
Expect(1, 12031, '\P{Is_Blk=kangxiradicals}', "");
Expect(0, 12031, '\P{^Is_Blk=kangxiradicals}', "");
Expect(1, 12255, '\p{Is_Blk=__Kangxi_RADICALS}', "");
Expect(0, 12255, '\p{^Is_Blk=__Kangxi_RADICALS}', "");
Expect(0, 12255, '\P{Is_Blk=__Kangxi_RADICALS}', "");
Expect(1, 12255, '\P{^Is_Blk=__Kangxi_RADICALS}', "");
Expect(0, 12031, '\p{Is_Blk=__Kangxi_RADICALS}', "");
Expect(1, 12031, '\p{^Is_Blk=__Kangxi_RADICALS}', "");
Expect(1, 12031, '\P{Is_Blk=__Kangxi_RADICALS}', "");
Expect(0, 12031, '\P{^Is_Blk=__Kangxi_RADICALS}', "");
Error('\p{Block: -ARABICpresentation	Forms	B/a/}');
Error('\P{Block: -ARABICpresentation	Forms	B/a/}');
Expect(1, 65279, '\p{Block=arabicpresentationformsb}', "");
Expect(0, 65279, '\p{^Block=arabicpresentationformsb}', "");
Expect(0, 65279, '\P{Block=arabicpresentationformsb}', "");
Expect(1, 65279, '\P{^Block=arabicpresentationformsb}', "");
Expect(0, 65135, '\p{Block=arabicpresentationformsb}', "");
Expect(1, 65135, '\p{^Block=arabicpresentationformsb}', "");
Expect(1, 65135, '\P{Block=arabicpresentationformsb}', "");
Expect(0, 65135, '\P{^Block=arabicpresentationformsb}', "");
Expect(1, 65279, '\p{Block= arabicpresentation_forms	B}', "");
Expect(0, 65279, '\p{^Block= arabicpresentation_forms	B}', "");
Expect(0, 65279, '\P{Block= arabicpresentation_forms	B}', "");
Expect(1, 65279, '\P{^Block= arabicpresentation_forms	B}', "");
Expect(0, 65135, '\p{Block= arabicpresentation_forms	B}', "");
Expect(1, 65135, '\p{^Block= arabicpresentation_forms	B}', "");
Expect(1, 65135, '\P{Block= arabicpresentation_forms	B}', "");
Expect(0, 65135, '\P{^Block= arabicpresentation_forms	B}', "");
Error('\p{Blk= /a/ARABICpresentation forms_B}');
Error('\P{Blk= /a/ARABICpresentation forms_B}');
Expect(1, 65279, '\p{Blk=arabicpresentationformsb}', "");
Expect(0, 65279, '\p{^Blk=arabicpresentationformsb}', "");
Expect(0, 65279, '\P{Blk=arabicpresentationformsb}', "");
Expect(1, 65279, '\P{^Blk=arabicpresentationformsb}', "");
Expect(0, 65135, '\p{Blk=arabicpresentationformsb}', "");
Expect(1, 65135, '\p{^Blk=arabicpresentationformsb}', "");
Expect(1, 65135, '\P{Blk=arabicpresentationformsb}', "");
Expect(0, 65135, '\P{^Blk=arabicpresentationformsb}', "");
Expect(1, 65279, '\p{Blk=	-Arabic	Presentation-FORMS B}', "");
Expect(0, 65279, '\p{^Blk=	-Arabic	Presentation-FORMS B}', "");
Expect(0, 65279, '\P{Blk=	-Arabic	Presentation-FORMS B}', "");
Expect(1, 65279, '\P{^Blk=	-Arabic	Presentation-FORMS B}', "");
Expect(0, 65135, '\p{Blk=	-Arabic	Presentation-FORMS B}', "");
Expect(1, 65135, '\p{^Blk=	-Arabic	Presentation-FORMS B}', "");
Expect(1, 65135, '\P{Blk=	-Arabic	Presentation-FORMS B}', "");
Expect(0, 65135, '\P{^Blk=	-Arabic	Presentation-FORMS B}', "");
Error('\p{Is_Block=	 Arabic_PRESENTATIONforms_B/a/}');
Error('\P{Is_Block=	 Arabic_PRESENTATIONforms_B/a/}');
Expect(1, 65279, '\p{Is_Block:arabicpresentationformsb}', "");
Expect(0, 65279, '\p{^Is_Block:arabicpresentationformsb}', "");
Expect(0, 65279, '\P{Is_Block:arabicpresentationformsb}', "");
Expect(1, 65279, '\P{^Is_Block:arabicpresentationformsb}', "");
Expect(0, 65135, '\p{Is_Block:arabicpresentationformsb}', "");
Expect(1, 65135, '\p{^Is_Block:arabicpresentationformsb}', "");
Expect(1, 65135, '\P{Is_Block:arabicpresentationformsb}', "");
Expect(0, 65135, '\P{^Is_Block:arabicpresentationformsb}', "");
Expect(1, 65279, '\p{Is_Block= ARABIC presentation	Forms	B}', "");
Expect(0, 65279, '\p{^Is_Block= ARABIC presentation	Forms	B}', "");
Expect(0, 65279, '\P{Is_Block= ARABIC presentation	Forms	B}', "");
Expect(1, 65279, '\P{^Is_Block= ARABIC presentation	Forms	B}', "");
Expect(0, 65135, '\p{Is_Block= ARABIC presentation	Forms	B}', "");
Expect(1, 65135, '\p{^Is_Block= ARABIC presentation	Forms	B}', "");
Expect(1, 65135, '\P{Is_Block= ARABIC presentation	Forms	B}', "");
Expect(0, 65135, '\P{^Is_Block= ARABIC presentation	Forms	B}', "");
Error('\p{Is_Blk=_-Arabic:=Presentation FORMSB}');
Error('\P{Is_Blk=_-Arabic:=Presentation FORMSB}');
Expect(1, 65279, '\p{Is_Blk=arabicpresentationformsb}', "");
Expect(0, 65279, '\p{^Is_Blk=arabicpresentationformsb}', "");
Expect(0, 65279, '\P{Is_Blk=arabicpresentationformsb}', "");
Expect(1, 65279, '\P{^Is_Blk=arabicpresentationformsb}', "");
Expect(0, 65135, '\p{Is_Blk=arabicpresentationformsb}', "");
Expect(1, 65135, '\p{^Is_Blk=arabicpresentationformsb}', "");
Expect(1, 65135, '\P{Is_Blk=arabicpresentationformsb}', "");
Expect(0, 65135, '\P{^Is_Blk=arabicpresentationformsb}', "");
Expect(1, 65279, '\p{Is_Blk=- arabic_PRESENTATIONForms B}', "");
Expect(0, 65279, '\p{^Is_Blk=- arabic_PRESENTATIONForms B}', "");
Expect(0, 65279, '\P{Is_Blk=- arabic_PRESENTATIONForms B}', "");
Expect(1, 65279, '\P{^Is_Blk=- arabic_PRESENTATIONForms B}', "");
Expect(0, 65135, '\p{Is_Blk=- arabic_PRESENTATIONForms B}', "");
Expect(1, 65135, '\p{^Is_Blk=- arabic_PRESENTATIONForms B}', "");
Expect(1, 65135, '\P{Is_Blk=- arabic_PRESENTATIONForms B}', "");
Expect(0, 65135, '\P{^Is_Blk=- arabic_PRESENTATIONForms B}', "");
Error('\p{Block=/a/GURMUKHI}');
Error('\P{Block=/a/GURMUKHI}');
Expect(1, 2687, '\p{Block=gurmukhi}', "");
Expect(0, 2687, '\p{^Block=gurmukhi}', "");
Expect(0, 2687, '\P{Block=gurmukhi}', "");
Expect(1, 2687, '\P{^Block=gurmukhi}', "");
Expect(0, 2559, '\p{Block=gurmukhi}', "");
Expect(1, 2559, '\p{^Block=gurmukhi}', "");
Expect(1, 2559, '\P{Block=gurmukhi}', "");
Expect(0, 2559, '\P{^Block=gurmukhi}', "");
Expect(1, 2687, '\p{Block=_gurmukhi}', "");
Expect(0, 2687, '\p{^Block=_gurmukhi}', "");
Expect(0, 2687, '\P{Block=_gurmukhi}', "");
Expect(1, 2687, '\P{^Block=_gurmukhi}', "");
Expect(0, 2559, '\p{Block=_gurmukhi}', "");
Expect(1, 2559, '\p{^Block=_gurmukhi}', "");
Expect(1, 2559, '\P{Block=_gurmukhi}', "");
Expect(0, 2559, '\P{^Block=_gurmukhi}', "");
Error('\p{Blk=-:=Gurmukhi}');
Error('\P{Blk=-:=Gurmukhi}');
Expect(1, 2687, '\p{Blk=gurmukhi}', "");
Expect(0, 2687, '\p{^Blk=gurmukhi}', "");
Expect(0, 2687, '\P{Blk=gurmukhi}', "");
Expect(1, 2687, '\P{^Blk=gurmukhi}', "");
Expect(0, 2559, '\p{Blk=gurmukhi}', "");
Expect(1, 2559, '\p{^Blk=gurmukhi}', "");
Expect(1, 2559, '\P{Blk=gurmukhi}', "");
Expect(0, 2559, '\P{^Blk=gurmukhi}', "");
Expect(1, 2687, '\p{Blk:   	Gurmukhi}', "");
Expect(0, 2687, '\p{^Blk:   	Gurmukhi}', "");
Expect(0, 2687, '\P{Blk:   	Gurmukhi}', "");
Expect(1, 2687, '\P{^Blk:   	Gurmukhi}', "");
Expect(0, 2559, '\p{Blk:   	Gurmukhi}', "");
Expect(1, 2559, '\p{^Blk:   	Gurmukhi}', "");
Expect(1, 2559, '\P{Blk:   	Gurmukhi}', "");
Expect(0, 2559, '\P{^Blk:   	Gurmukhi}', "");
Error('\p{Is_Block=	_Gurmukhi:=}');
Error('\P{Is_Block=	_Gurmukhi:=}');
Expect(1, 2687, '\p{Is_Block=gurmukhi}', "");
Expect(0, 2687, '\p{^Is_Block=gurmukhi}', "");
Expect(0, 2687, '\P{Is_Block=gurmukhi}', "");
Expect(1, 2687, '\P{^Is_Block=gurmukhi}', "");
Expect(0, 2559, '\p{Is_Block=gurmukhi}', "");
Expect(1, 2559, '\p{^Is_Block=gurmukhi}', "");
Expect(1, 2559, '\P{Is_Block=gurmukhi}', "");
Expect(0, 2559, '\P{^Is_Block=gurmukhi}', "");
Expect(1, 2687, '\p{Is_Block=		gurmukhi}', "");
Expect(0, 2687, '\p{^Is_Block=		gurmukhi}', "");
Expect(0, 2687, '\P{Is_Block=		gurmukhi}', "");
Expect(1, 2687, '\P{^Is_Block=		gurmukhi}', "");
Expect(0, 2559, '\p{Is_Block=		gurmukhi}', "");
Expect(1, 2559, '\p{^Is_Block=		gurmukhi}', "");
Expect(1, 2559, '\P{Is_Block=		gurmukhi}', "");
Expect(0, 2559, '\P{^Is_Block=		gurmukhi}', "");
Error('\p{Is_Blk=	:=Gurmukhi}');
Error('\P{Is_Blk=	:=Gurmukhi}');
Expect(1, 2687, '\p{Is_Blk=gurmukhi}', "");
Expect(0, 2687, '\p{^Is_Blk=gurmukhi}', "");
Expect(0, 2687, '\P{Is_Blk=gurmukhi}', "");
Expect(1, 2687, '\P{^Is_Blk=gurmukhi}', "");
Expect(0, 2559, '\p{Is_Blk=gurmukhi}', "");
Expect(1, 2559, '\p{^Is_Blk=gurmukhi}', "");
Expect(1, 2559, '\P{Is_Blk=gurmukhi}', "");
Expect(0, 2559, '\P{^Is_Blk=gurmukhi}', "");
Expect(1, 2687, '\p{Is_Blk=-gurmukhi}', "");
Expect(0, 2687, '\p{^Is_Blk=-gurmukhi}', "");
Expect(0, 2687, '\P{Is_Blk=-gurmukhi}', "");
Expect(1, 2687, '\P{^Is_Blk=-gurmukhi}', "");
Expect(0, 2559, '\p{Is_Blk=-gurmukhi}', "");
Expect(1, 2559, '\p{^Is_Blk=-gurmukhi}', "");
Expect(1, 2559, '\P{Is_Blk=-gurmukhi}', "");
Expect(0, 2559, '\P{^Is_Blk=-gurmukhi}', "");
Error('\p{Block=  Enclosed:=IDEOGRAPHICSUPPLEMENT}');
Error('\P{Block=  Enclosed:=IDEOGRAPHICSUPPLEMENT}');
Expect(1, 127743, '\p{Block=enclosedideographicsupplement}', "");
Expect(0, 127743, '\p{^Block=enclosedideographicsupplement}', "");
Expect(0, 127743, '\P{Block=enclosedideographicsupplement}', "");
Expect(1, 127743, '\P{^Block=enclosedideographicsupplement}', "");
Expect(0, 127487, '\p{Block=enclosedideographicsupplement}', "");
Expect(1, 127487, '\p{^Block=enclosedideographicsupplement}', "");
Expect(1, 127487, '\P{Block=enclosedideographicsupplement}', "");
Expect(0, 127487, '\P{^Block=enclosedideographicsupplement}', "");
Expect(1, 127743, '\p{Block=-	enclosed-ideographic	SUPPLEMENT}', "");
Expect(0, 127743, '\p{^Block=-	enclosed-ideographic	SUPPLEMENT}', "");
Expect(0, 127743, '\P{Block=-	enclosed-ideographic	SUPPLEMENT}', "");
Expect(1, 127743, '\P{^Block=-	enclosed-ideographic	SUPPLEMENT}', "");
Expect(0, 127487, '\p{Block=-	enclosed-ideographic	SUPPLEMENT}', "");
Expect(1, 127487, '\p{^Block=-	enclosed-ideographic	SUPPLEMENT}', "");
Expect(1, 127487, '\P{Block=-	enclosed-ideographic	SUPPLEMENT}', "");
Expect(0, 127487, '\P{^Block=-	enclosed-ideographic	SUPPLEMENT}', "");
Error('\p{Blk=/a/--enclosed	Ideographic-Supplement}');
Error('\P{Blk=/a/--enclosed	Ideographic-Supplement}');
Expect(1, 127743, '\p{Blk=enclosedideographicsupplement}', "");
Expect(0, 127743, '\p{^Blk=enclosedideographicsupplement}', "");
Expect(0, 127743, '\P{Blk=enclosedideographicsupplement}', "");
Expect(1, 127743, '\P{^Blk=enclosedideographicsupplement}', "");
Expect(0, 127487, '\p{Blk=enclosedideographicsupplement}', "");
Expect(1, 127487, '\p{^Blk=enclosedideographicsupplement}', "");
Expect(1, 127487, '\P{Blk=enclosedideographicsupplement}', "");
Expect(0, 127487, '\P{^Blk=enclosedideographicsupplement}', "");
Expect(1, 127743, '\p{Blk= -Enclosed_Ideographic	SUPPLEMENT}', "");
Expect(0, 127743, '\p{^Blk= -Enclosed_Ideographic	SUPPLEMENT}', "");
Expect(0, 127743, '\P{Blk= -Enclosed_Ideographic	SUPPLEMENT}', "");
Expect(1, 127743, '\P{^Blk= -Enclosed_Ideographic	SUPPLEMENT}', "");
Expect(0, 127487, '\p{Blk= -Enclosed_Ideographic	SUPPLEMENT}', "");
Expect(1, 127487, '\p{^Blk= -Enclosed_Ideographic	SUPPLEMENT}', "");
Expect(1, 127487, '\P{Blk= -Enclosed_Ideographic	SUPPLEMENT}', "");
Expect(0, 127487, '\P{^Blk= -Enclosed_Ideographic	SUPPLEMENT}', "");
Error('\p{Is_Block=-	enclosed:=Ideographic_SUPPLEMENT}');
Error('\P{Is_Block=-	enclosed:=Ideographic_SUPPLEMENT}');
Expect(1, 127743, '\p{Is_Block=enclosedideographicsupplement}', "");
Expect(0, 127743, '\p{^Is_Block=enclosedideographicsupplement}', "");
Expect(0, 127743, '\P{Is_Block=enclosedideographicsupplement}', "");
Expect(1, 127743, '\P{^Is_Block=enclosedideographicsupplement}', "");
Expect(0, 127487, '\p{Is_Block=enclosedideographicsupplement}', "");
Expect(1, 127487, '\p{^Is_Block=enclosedideographicsupplement}', "");
Expect(1, 127487, '\P{Is_Block=enclosedideographicsupplement}', "");
Expect(0, 127487, '\P{^Is_Block=enclosedideographicsupplement}', "");
Expect(1, 127743, '\p{Is_Block=_	Enclosed_Ideographic_SUPPLEMENT}', "");
Expect(0, 127743, '\p{^Is_Block=_	Enclosed_Ideographic_SUPPLEMENT}', "");
Expect(0, 127743, '\P{Is_Block=_	Enclosed_Ideographic_SUPPLEMENT}', "");
Expect(1, 127743, '\P{^Is_Block=_	Enclosed_Ideographic_SUPPLEMENT}', "");
Expect(0, 127487, '\p{Is_Block=_	Enclosed_Ideographic_SUPPLEMENT}', "");
Expect(1, 127487, '\p{^Is_Block=_	Enclosed_Ideographic_SUPPLEMENT}', "");
Expect(1, 127487, '\P{Is_Block=_	Enclosed_Ideographic_SUPPLEMENT}', "");
Expect(0, 127487, '\P{^Is_Block=_	Enclosed_Ideographic_SUPPLEMENT}', "");
Error('\p{Is_Blk= 	Enclosed:=ideographic	SUPPLEMENT}');
Error('\P{Is_Blk= 	Enclosed:=ideographic	SUPPLEMENT}');
Expect(1, 127743, '\p{Is_Blk=enclosedideographicsupplement}', "");
Expect(0, 127743, '\p{^Is_Blk=enclosedideographicsupplement}', "");
Expect(0, 127743, '\P{Is_Blk=enclosedideographicsupplement}', "");
Expect(1, 127743, '\P{^Is_Blk=enclosedideographicsupplement}', "");
Expect(0, 127487, '\p{Is_Blk=enclosedideographicsupplement}', "");
Expect(1, 127487, '\p{^Is_Blk=enclosedideographicsupplement}', "");
Expect(1, 127487, '\P{Is_Blk=enclosedideographicsupplement}', "");
Expect(0, 127487, '\P{^Is_Blk=enclosedideographicsupplement}', "");
Expect(1, 127743, '\p{Is_Blk:	 	enclosed-IDEOGRAPHIC-Supplement}', "");
Expect(0, 127743, '\p{^Is_Blk:	 	enclosed-IDEOGRAPHIC-Supplement}', "");
Expect(0, 127743, '\P{Is_Blk:	 	enclosed-IDEOGRAPHIC-Supplement}', "");
Expect(1, 127743, '\P{^Is_Blk:	 	enclosed-IDEOGRAPHIC-Supplement}', "");
Expect(0, 127487, '\p{Is_Blk:	 	enclosed-IDEOGRAPHIC-Supplement}', "");
Expect(1, 127487, '\p{^Is_Blk:	 	enclosed-IDEOGRAPHIC-Supplement}', "");
Expect(1, 127487, '\P{Is_Blk:	 	enclosed-IDEOGRAPHIC-Supplement}', "");
Expect(0, 127487, '\P{^Is_Blk:	 	enclosed-IDEOGRAPHIC-Supplement}', "");
Error('\p{Block=	_Phonetic:=EXTENSIONS-supplement}');
Error('\P{Block=	_Phonetic:=EXTENSIONS-supplement}');
Expect(1, 7615, '\p{Block=phoneticextensionssupplement}', "");
Expect(0, 7615, '\p{^Block=phoneticextensionssupplement}', "");
Expect(0, 7615, '\P{Block=phoneticextensionssupplement}', "");
Expect(1, 7615, '\P{^Block=phoneticextensionssupplement}', "");
Expect(0, 7551, '\p{Block=phoneticextensionssupplement}', "");
Expect(1, 7551, '\p{^Block=phoneticextensionssupplement}', "");
Expect(1, 7551, '\P{Block=phoneticextensionssupplement}', "");
Expect(0, 7551, '\P{^Block=phoneticextensionssupplement}', "");
Expect(1, 7615, '\p{Block=- Phonetic_extensions_Supplement}', "");
Expect(0, 7615, '\p{^Block=- Phonetic_extensions_Supplement}', "");
Expect(0, 7615, '\P{Block=- Phonetic_extensions_Supplement}', "");
Expect(1, 7615, '\P{^Block=- Phonetic_extensions_Supplement}', "");
Expect(0, 7551, '\p{Block=- Phonetic_extensions_Supplement}', "");
Expect(1, 7551, '\p{^Block=- Phonetic_extensions_Supplement}', "");
Expect(1, 7551, '\P{Block=- Phonetic_extensions_Supplement}', "");
Expect(0, 7551, '\P{^Block=- Phonetic_extensions_Supplement}', "");
Error('\p{Blk= :=Phoneticextensions	Supplement}');
Error('\P{Blk= :=Phoneticextensions	Supplement}');
Expect(1, 7615, '\p{Blk=phoneticextensionssupplement}', "");
Expect(0, 7615, '\p{^Blk=phoneticextensionssupplement}', "");
Expect(0, 7615, '\P{Blk=phoneticextensionssupplement}', "");
Expect(1, 7615, '\P{^Blk=phoneticextensionssupplement}', "");
Expect(0, 7551, '\p{Blk=phoneticextensionssupplement}', "");
Expect(1, 7551, '\p{^Blk=phoneticextensionssupplement}', "");
Expect(1, 7551, '\P{Blk=phoneticextensionssupplement}', "");
Expect(0, 7551, '\P{^Blk=phoneticextensionssupplement}', "");
Expect(1, 7615, '\p{Blk=-_PHONETIC-extensionsSUPPLEMENT}', "");
Expect(0, 7615, '\p{^Blk=-_PHONETIC-extensionsSUPPLEMENT}', "");
Expect(0, 7615, '\P{Blk=-_PHONETIC-extensionsSUPPLEMENT}', "");
Expect(1, 7615, '\P{^Blk=-_PHONETIC-extensionsSUPPLEMENT}', "");
Expect(0, 7551, '\p{Blk=-_PHONETIC-extensionsSUPPLEMENT}', "");
Expect(1, 7551, '\p{^Blk=-_PHONETIC-extensionsSUPPLEMENT}', "");
Expect(1, 7551, '\P{Blk=-_PHONETIC-extensionsSUPPLEMENT}', "");
Expect(0, 7551, '\P{^Blk=-_PHONETIC-extensionsSUPPLEMENT}', "");
Error('\p{Is_Block:   _ phonetic:=Extensions Supplement}');
Error('\P{Is_Block:   _ phonetic:=Extensions Supplement}');
Expect(1, 7615, '\p{Is_Block=phoneticextensionssupplement}', "");
Expect(0, 7615, '\p{^Is_Block=phoneticextensionssupplement}', "");
Expect(0, 7615, '\P{Is_Block=phoneticextensionssupplement}', "");
Expect(1, 7615, '\P{^Is_Block=phoneticextensionssupplement}', "");
Expect(0, 7551, '\p{Is_Block=phoneticextensionssupplement}', "");
Expect(1, 7551, '\p{^Is_Block=phoneticextensionssupplement}', "");
Expect(1, 7551, '\P{Is_Block=phoneticextensionssupplement}', "");
Expect(0, 7551, '\P{^Is_Block=phoneticextensionssupplement}', "");
Expect(1, 7615, '\p{Is_Block=_ PHONETIC-Extensions_SUPPLEMENT}', "");
Expect(0, 7615, '\p{^Is_Block=_ PHONETIC-Extensions_SUPPLEMENT}', "");
Expect(0, 7615, '\P{Is_Block=_ PHONETIC-Extensions_SUPPLEMENT}', "");
Expect(1, 7615, '\P{^Is_Block=_ PHONETIC-Extensions_SUPPLEMENT}', "");
Expect(0, 7551, '\p{Is_Block=_ PHONETIC-Extensions_SUPPLEMENT}', "");
Expect(1, 7551, '\p{^Is_Block=_ PHONETIC-Extensions_SUPPLEMENT}', "");
Expect(1, 7551, '\P{Is_Block=_ PHONETIC-Extensions_SUPPLEMENT}', "");
Expect(0, 7551, '\P{^Is_Block=_ PHONETIC-Extensions_SUPPLEMENT}', "");
Error('\p{Is_Blk=_	Phonetic/a/EXTENSIONS	supplement}');
Error('\P{Is_Blk=_	Phonetic/a/EXTENSIONS	supplement}');
Expect(1, 7615, '\p{Is_Blk=phoneticextensionssupplement}', "");
Expect(0, 7615, '\p{^Is_Blk=phoneticextensionssupplement}', "");
Expect(0, 7615, '\P{Is_Blk=phoneticextensionssupplement}', "");
Expect(1, 7615, '\P{^Is_Blk=phoneticextensionssupplement}', "");
Expect(0, 7551, '\p{Is_Blk=phoneticextensionssupplement}', "");
Expect(1, 7551, '\p{^Is_Blk=phoneticextensionssupplement}', "");
Expect(1, 7551, '\P{Is_Blk=phoneticextensionssupplement}', "");
Expect(0, 7551, '\P{^Is_Blk=phoneticextensionssupplement}', "");
Expect(1, 7615, '\p{Is_Blk=_ Phonetic_EXTENSIONSSupplement}', "");
Expect(0, 7615, '\p{^Is_Blk=_ Phonetic_EXTENSIONSSupplement}', "");
Expect(0, 7615, '\P{Is_Blk=_ Phonetic_EXTENSIONSSupplement}', "");
Expect(1, 7615, '\P{^Is_Blk=_ Phonetic_EXTENSIONSSupplement}', "");
Expect(0, 7551, '\p{Is_Blk=_ Phonetic_EXTENSIONSSupplement}', "");
Expect(1, 7551, '\p{^Is_Blk=_ Phonetic_EXTENSIONSSupplement}', "");
Expect(1, 7551, '\P{Is_Blk=_ Phonetic_EXTENSIONSSupplement}', "");
Expect(0, 7551, '\P{^Is_Blk=_ Phonetic_EXTENSIONSSupplement}', "");
Error('\p{Block=	-BATAK/a/}');
Error('\P{Block=	-BATAK/a/}');
Expect(1, 7167, '\p{Block=batak}', "");
Expect(0, 7167, '\p{^Block=batak}', "");
Expect(0, 7167, '\P{Block=batak}', "");
Expect(1, 7167, '\P{^Block=batak}', "");
Expect(0, 7103, '\p{Block=batak}', "");
Expect(1, 7103, '\p{^Block=batak}', "");
Expect(1, 7103, '\P{Block=batak}', "");
Expect(0, 7103, '\P{^Block=batak}', "");
Expect(1, 7167, '\p{Block= BATAK}', "");
Expect(0, 7167, '\p{^Block= BATAK}', "");
Expect(0, 7167, '\P{Block= BATAK}', "");
Expect(1, 7167, '\P{^Block= BATAK}', "");
Expect(0, 7103, '\p{Block= BATAK}', "");
Expect(1, 7103, '\p{^Block= BATAK}', "");
Expect(1, 7103, '\P{Block= BATAK}', "");
Expect(0, 7103, '\P{^Block= BATAK}', "");
Error('\p{Blk=:=__batak}');
Error('\P{Blk=:=__batak}');
Expect(1, 7167, '\p{Blk=batak}', "");
Expect(0, 7167, '\p{^Blk=batak}', "");
Expect(0, 7167, '\P{Blk=batak}', "");
Expect(1, 7167, '\P{^Blk=batak}', "");
Expect(0, 7103, '\p{Blk=batak}', "");
Expect(1, 7103, '\p{^Blk=batak}', "");
Expect(1, 7103, '\P{Blk=batak}', "");
Expect(0, 7103, '\P{^Blk=batak}', "");
Expect(1, 7167, '\p{Blk=- Batak}', "");
Expect(0, 7167, '\p{^Blk=- Batak}', "");
Expect(0, 7167, '\P{Blk=- Batak}', "");
Expect(1, 7167, '\P{^Blk=- Batak}', "");
Expect(0, 7103, '\p{Blk=- Batak}', "");
Expect(1, 7103, '\p{^Blk=- Batak}', "");
Expect(1, 7103, '\P{Blk=- Batak}', "");
Expect(0, 7103, '\P{^Blk=- Batak}', "");
Error('\p{Is_Block=_Batak/a/}');
Error('\P{Is_Block=_Batak/a/}');
Expect(1, 7167, '\p{Is_Block=batak}', "");
Expect(0, 7167, '\p{^Is_Block=batak}', "");
Expect(0, 7167, '\P{Is_Block=batak}', "");
Expect(1, 7167, '\P{^Is_Block=batak}', "");
Expect(0, 7103, '\p{Is_Block=batak}', "");
Expect(1, 7103, '\p{^Is_Block=batak}', "");
Expect(1, 7103, '\P{Is_Block=batak}', "");
Expect(0, 7103, '\P{^Is_Block=batak}', "");
Expect(1, 7167, '\p{Is_Block= Batak}', "");
Expect(0, 7167, '\p{^Is_Block= Batak}', "");
Expect(0, 7167, '\P{Is_Block= Batak}', "");
Expect(1, 7167, '\P{^Is_Block= Batak}', "");
Expect(0, 7103, '\p{Is_Block= Batak}', "");
Expect(1, 7103, '\p{^Is_Block= Batak}', "");
Expect(1, 7103, '\P{Is_Block= Batak}', "");
Expect(0, 7103, '\P{^Is_Block= Batak}', "");
Error('\p{Is_Blk=	Batak:=}');
Error('\P{Is_Blk=	Batak:=}');
Expect(1, 7167, '\p{Is_Blk=batak}', "");
Expect(0, 7167, '\p{^Is_Blk=batak}', "");
Expect(0, 7167, '\P{Is_Blk=batak}', "");
Expect(1, 7167, '\P{^Is_Blk=batak}', "");
Expect(0, 7103, '\p{Is_Blk=batak}', "");
Expect(1, 7103, '\p{^Is_Blk=batak}', "");
Expect(1, 7103, '\P{Is_Blk=batak}', "");
Expect(0, 7103, '\P{^Is_Blk=batak}', "");
Expect(1, 7167, '\p{Is_Blk=	_Batak}', "");
Expect(0, 7167, '\p{^Is_Blk=	_Batak}', "");
Expect(0, 7167, '\P{Is_Blk=	_Batak}', "");
Expect(1, 7167, '\P{^Is_Blk=	_Batak}', "");
Expect(0, 7103, '\p{Is_Blk=	_Batak}', "");
Expect(1, 7103, '\p{^Is_Blk=	_Batak}', "");
Expect(1, 7103, '\P{Is_Blk=	_Batak}', "");
Expect(0, 7103, '\P{^Is_Blk=	_Batak}', "");
Error('\p{Block=- greek/a/extended}');
Error('\P{Block=- greek/a/extended}');
Expect(1, 8191, '\p{Block=greekextended}', "");
Expect(0, 8191, '\p{^Block=greekextended}', "");
Expect(0, 8191, '\P{Block=greekextended}', "");
Expect(1, 8191, '\P{^Block=greekextended}', "");
Expect(0, 7935, '\p{Block=greekextended}', "");
Expect(1, 7935, '\p{^Block=greekextended}', "");
Expect(1, 7935, '\P{Block=greekextended}', "");
Expect(0, 7935, '\P{^Block=greekextended}', "");
Expect(1, 8191, '\p{Block=-	GREEK-Extended}', "");
Expect(0, 8191, '\p{^Block=-	GREEK-Extended}', "");
Expect(0, 8191, '\P{Block=-	GREEK-Extended}', "");
Expect(1, 8191, '\P{^Block=-	GREEK-Extended}', "");
Expect(0, 7935, '\p{Block=-	GREEK-Extended}', "");
Expect(1, 7935, '\p{^Block=-	GREEK-Extended}', "");
Expect(1, 7935, '\P{Block=-	GREEK-Extended}', "");
Expect(0, 7935, '\P{^Block=-	GREEK-Extended}', "");
Error('\p{Blk= GREEKExtended/a/}');
Error('\P{Blk= GREEKExtended/a/}');
Expect(1, 8191, '\p{Blk:   greekextended}', "");
Expect(0, 8191, '\p{^Blk:   greekextended}', "");
Expect(0, 8191, '\P{Blk:   greekextended}', "");
Expect(1, 8191, '\P{^Blk:   greekextended}', "");
Expect(0, 7935, '\p{Blk:   greekextended}', "");
Expect(1, 7935, '\p{^Blk:   greekextended}', "");
Expect(1, 7935, '\P{Blk:   greekextended}', "");
Expect(0, 7935, '\P{^Blk:   greekextended}', "");
Expect(1, 8191, '\p{Blk= _GreekExtended}', "");
Expect(0, 8191, '\p{^Blk= _GreekExtended}', "");
Expect(0, 8191, '\P{Blk= _GreekExtended}', "");
Expect(1, 8191, '\P{^Blk= _GreekExtended}', "");
Expect(0, 7935, '\p{Blk= _GreekExtended}', "");
Expect(1, 7935, '\p{^Blk= _GreekExtended}', "");
Expect(1, 7935, '\P{Blk= _GreekExtended}', "");
Expect(0, 7935, '\P{^Blk= _GreekExtended}', "");
Error('\p{Is_Block=_/a/greek-EXTENDED}');
Error('\P{Is_Block=_/a/greek-EXTENDED}');
Expect(1, 8191, '\p{Is_Block=greekextended}', "");
Expect(0, 8191, '\p{^Is_Block=greekextended}', "");
Expect(0, 8191, '\P{Is_Block=greekextended}', "");
Expect(1, 8191, '\P{^Is_Block=greekextended}', "");
Expect(0, 7935, '\p{Is_Block=greekextended}', "");
Expect(1, 7935, '\p{^Is_Block=greekextended}', "");
Expect(1, 7935, '\P{Is_Block=greekextended}', "");
Expect(0, 7935, '\P{^Is_Block=greekextended}', "");
Expect(1, 8191, '\p{Is_Block= _Greek-EXTENDED}', "");
Expect(0, 8191, '\p{^Is_Block= _Greek-EXTENDED}', "");
Expect(0, 8191, '\P{Is_Block= _Greek-EXTENDED}', "");
Expect(1, 8191, '\P{^Is_Block= _Greek-EXTENDED}', "");
Expect(0, 7935, '\p{Is_Block= _Greek-EXTENDED}', "");
Expect(1, 7935, '\p{^Is_Block= _Greek-EXTENDED}', "");
Expect(1, 7935, '\P{Is_Block= _Greek-EXTENDED}', "");
Expect(0, 7935, '\P{^Is_Block= _Greek-EXTENDED}', "");
Error('\p{Is_Blk=:=_	greek-Extended}');
Error('\P{Is_Blk=:=_	greek-Extended}');
Expect(1, 8191, '\p{Is_Blk:greekextended}', "");
Expect(0, 8191, '\p{^Is_Blk:greekextended}', "");
Expect(0, 8191, '\P{Is_Blk:greekextended}', "");
Expect(1, 8191, '\P{^Is_Blk:greekextended}', "");
Expect(0, 7935, '\p{Is_Blk:greekextended}', "");
Expect(1, 7935, '\p{^Is_Blk:greekextended}', "");
Expect(1, 7935, '\P{Is_Blk:greekextended}', "");
Expect(0, 7935, '\P{^Is_Blk:greekextended}', "");
Expect(1, 8191, '\p{Is_Blk:	_	GREEK EXTENDED}', "");
Expect(0, 8191, '\p{^Is_Blk:	_	GREEK EXTENDED}', "");
Expect(0, 8191, '\P{Is_Blk:	_	GREEK EXTENDED}', "");
Expect(1, 8191, '\P{^Is_Blk:	_	GREEK EXTENDED}', "");
Expect(0, 7935, '\p{Is_Blk:	_	GREEK EXTENDED}', "");
Expect(1, 7935, '\p{^Is_Blk:	_	GREEK EXTENDED}', "");
Expect(1, 7935, '\P{Is_Blk:	_	GREEK EXTENDED}', "");
Expect(0, 7935, '\P{^Is_Blk:	_	GREEK EXTENDED}', "");
Error('\p{Block=	/a/DESERET}');
Error('\P{Block=	/a/DESERET}');
Expect(1, 66639, '\p{Block=deseret}', "");
Expect(0, 66639, '\p{^Block=deseret}', "");
Expect(0, 66639, '\P{Block=deseret}', "");
Expect(1, 66639, '\P{^Block=deseret}', "");
Expect(0, 66559, '\p{Block=deseret}', "");
Expect(1, 66559, '\p{^Block=deseret}', "");
Expect(1, 66559, '\P{Block=deseret}', "");
Expect(0, 66559, '\P{^Block=deseret}', "");
Expect(1, 66639, '\p{Block=-Deseret}', "");
Expect(0, 66639, '\p{^Block=-Deseret}', "");
Expect(0, 66639, '\P{Block=-Deseret}', "");
Expect(1, 66639, '\P{^Block=-Deseret}', "");
Expect(0, 66559, '\p{Block=-Deseret}', "");
Expect(1, 66559, '\p{^Block=-Deseret}', "");
Expect(1, 66559, '\P{Block=-Deseret}', "");
Expect(0, 66559, '\P{^Block=-Deseret}', "");
Error('\p{Blk=_ DESERET/a/}');
Error('\P{Blk=_ DESERET/a/}');
Expect(1, 66639, '\p{Blk=deseret}', "");
Expect(0, 66639, '\p{^Blk=deseret}', "");
Expect(0, 66639, '\P{Blk=deseret}', "");
Expect(1, 66639, '\P{^Blk=deseret}', "");
Expect(0, 66559, '\p{Blk=deseret}', "");
Expect(1, 66559, '\p{^Blk=deseret}', "");
Expect(1, 66559, '\P{Blk=deseret}', "");
Expect(0, 66559, '\P{^Blk=deseret}', "");
Expect(1, 66639, '\p{Blk= Deseret}', "");
Expect(0, 66639, '\p{^Blk= Deseret}', "");
Expect(0, 66639, '\P{Blk= Deseret}', "");
Expect(1, 66639, '\P{^Blk= Deseret}', "");
Expect(0, 66559, '\p{Blk= Deseret}', "");
Expect(1, 66559, '\p{^Blk= Deseret}', "");
Expect(1, 66559, '\P{Blk= Deseret}', "");
Expect(0, 66559, '\P{^Blk= Deseret}', "");
Error('\p{Is_Block= -deseret:=}');
Error('\P{Is_Block= -deseret:=}');
Expect(1, 66639, '\p{Is_Block=deseret}', "");
Expect(0, 66639, '\p{^Is_Block=deseret}', "");
Expect(0, 66639, '\P{Is_Block=deseret}', "");
Expect(1, 66639, '\P{^Is_Block=deseret}', "");
Expect(0, 66559, '\p{Is_Block=deseret}', "");
Expect(1, 66559, '\p{^Is_Block=deseret}', "");
Expect(1, 66559, '\P{Is_Block=deseret}', "");
Expect(0, 66559, '\P{^Is_Block=deseret}', "");
Expect(1, 66639, '\p{Is_Block= -Deseret}', "");
Expect(0, 66639, '\p{^Is_Block= -Deseret}', "");
Expect(0, 66639, '\P{Is_Block= -Deseret}', "");
Expect(1, 66639, '\P{^Is_Block= -Deseret}', "");
Expect(0, 66559, '\p{Is_Block= -Deseret}', "");
Expect(1, 66559, '\p{^Is_Block= -Deseret}', "");
Expect(1, 66559, '\P{Is_Block= -Deseret}', "");
Expect(0, 66559, '\P{^Is_Block= -Deseret}', "");
Error('\p{Is_Blk=/a/_-DESERET}');
Error('\P{Is_Blk=/a/_-DESERET}');
Expect(1, 66639, '\p{Is_Blk=deseret}', "");
Expect(0, 66639, '\p{^Is_Blk=deseret}', "");
Expect(0, 66639, '\P{Is_Blk=deseret}', "");
Expect(1, 66639, '\P{^Is_Blk=deseret}', "");
Expect(0, 66559, '\p{Is_Blk=deseret}', "");
Expect(1, 66559, '\p{^Is_Blk=deseret}', "");
Expect(1, 66559, '\P{Is_Blk=deseret}', "");
Expect(0, 66559, '\P{^Is_Blk=deseret}', "");
Expect(1, 66639, '\p{Is_Blk=	_Deseret}', "");
Expect(0, 66639, '\p{^Is_Blk=	_Deseret}', "");
Expect(0, 66639, '\P{Is_Blk=	_Deseret}', "");
Expect(1, 66639, '\P{^Is_Blk=	_Deseret}', "");
Expect(0, 66559, '\p{Is_Blk=	_Deseret}', "");
Expect(1, 66559, '\p{^Is_Blk=	_Deseret}', "");
Expect(1, 66559, '\P{Is_Blk=	_Deseret}', "");
Expect(0, 66559, '\P{^Is_Blk=	_Deseret}', "");
Error('\p{Block= _Tai:=Tham}');
Error('\P{Block= _Tai:=Tham}');
Expect(1, 6831, '\p{Block=taitham}', "");
Expect(0, 6831, '\p{^Block=taitham}', "");
Expect(0, 6831, '\P{Block=taitham}', "");
Expect(1, 6831, '\P{^Block=taitham}', "");
Expect(0, 6687, '\p{Block=taitham}', "");
Expect(1, 6687, '\p{^Block=taitham}', "");
Expect(1, 6687, '\P{Block=taitham}', "");
Expect(0, 6687, '\P{^Block=taitham}', "");
Expect(1, 6831, '\p{Block=__Taitham}', "");
Expect(0, 6831, '\p{^Block=__Taitham}', "");
Expect(0, 6831, '\P{Block=__Taitham}', "");
Expect(1, 6831, '\P{^Block=__Taitham}', "");
Expect(0, 6687, '\p{Block=__Taitham}', "");
Expect(1, 6687, '\p{^Block=__Taitham}', "");
Expect(1, 6687, '\P{Block=__Taitham}', "");
Expect(0, 6687, '\P{^Block=__Taitham}', "");
Error('\p{Blk=_TAI:=tham}');
Error('\P{Blk=_TAI:=tham}');
Expect(1, 6831, '\p{Blk=taitham}', "");
Expect(0, 6831, '\p{^Blk=taitham}', "");
Expect(0, 6831, '\P{Blk=taitham}', "");
Expect(1, 6831, '\P{^Blk=taitham}', "");
Expect(0, 6687, '\p{Blk=taitham}', "");
Expect(1, 6687, '\p{^Blk=taitham}', "");
Expect(1, 6687, '\P{Blk=taitham}', "");
Expect(0, 6687, '\P{^Blk=taitham}', "");
Expect(1, 6831, '\p{Blk:   		TAItham}', "");
Expect(0, 6831, '\p{^Blk:   		TAItham}', "");
Expect(0, 6831, '\P{Blk:   		TAItham}', "");
Expect(1, 6831, '\P{^Blk:   		TAItham}', "");
Expect(0, 6687, '\p{Blk:   		TAItham}', "");
Expect(1, 6687, '\p{^Blk:   		TAItham}', "");
Expect(1, 6687, '\P{Blk:   		TAItham}', "");
Expect(0, 6687, '\P{^Blk:   		TAItham}', "");
Error('\p{Is_Block=_-Tai/a/Tham}');
Error('\P{Is_Block=_-Tai/a/Tham}');
Expect(1, 6831, '\p{Is_Block=taitham}', "");
Expect(0, 6831, '\p{^Is_Block=taitham}', "");
Expect(0, 6831, '\P{Is_Block=taitham}', "");
Expect(1, 6831, '\P{^Is_Block=taitham}', "");
Expect(0, 6687, '\p{Is_Block=taitham}', "");
Expect(1, 6687, '\p{^Is_Block=taitham}', "");
Expect(1, 6687, '\P{Is_Block=taitham}', "");
Expect(0, 6687, '\P{^Is_Block=taitham}', "");
Expect(1, 6831, '\p{Is_Block=TAI Tham}', "");
Expect(0, 6831, '\p{^Is_Block=TAI Tham}', "");
Expect(0, 6831, '\P{Is_Block=TAI Tham}', "");
Expect(1, 6831, '\P{^Is_Block=TAI Tham}', "");
Expect(0, 6687, '\p{Is_Block=TAI Tham}', "");
Expect(1, 6687, '\p{^Is_Block=TAI Tham}', "");
Expect(1, 6687, '\P{Is_Block=TAI Tham}', "");
Expect(0, 6687, '\P{^Is_Block=TAI Tham}', "");
Error('\p{Is_Blk=	TAI	Tham:=}');
Error('\P{Is_Blk=	TAI	Tham:=}');
Expect(1, 6831, '\p{Is_Blk=taitham}', "");
Expect(0, 6831, '\p{^Is_Blk=taitham}', "");
Expect(0, 6831, '\P{Is_Blk=taitham}', "");
Expect(1, 6831, '\P{^Is_Blk=taitham}', "");
Expect(0, 6687, '\p{Is_Blk=taitham}', "");
Expect(1, 6687, '\p{^Is_Blk=taitham}', "");
Expect(1, 6687, '\P{Is_Blk=taitham}', "");
Expect(0, 6687, '\P{^Is_Blk=taitham}', "");
Expect(1, 6831, '\p{Is_Blk=-	tai_Tham}', "");
Expect(0, 6831, '\p{^Is_Blk=-	tai_Tham}', "");
Expect(0, 6831, '\P{Is_Blk=-	tai_Tham}', "");
Expect(1, 6831, '\P{^Is_Blk=-	tai_Tham}', "");
Expect(0, 6687, '\p{Is_Blk=-	tai_Tham}', "");
Expect(1, 6687, '\p{^Is_Blk=-	tai_Tham}', "");
Expect(1, 6687, '\P{Is_Blk=-	tai_Tham}', "");
Expect(0, 6687, '\P{^Is_Blk=-	tai_Tham}', "");
Error('\p{Block=	-tagbanwa:=}');
Error('\P{Block=	-tagbanwa:=}');
Expect(1, 6015, '\p{Block=tagbanwa}', "");
Expect(0, 6015, '\p{^Block=tagbanwa}', "");
Expect(0, 6015, '\P{Block=tagbanwa}', "");
Expect(1, 6015, '\P{^Block=tagbanwa}', "");
Expect(0, 5983, '\p{Block=tagbanwa}', "");
Expect(1, 5983, '\p{^Block=tagbanwa}', "");
Expect(1, 5983, '\P{Block=tagbanwa}', "");
Expect(0, 5983, '\P{^Block=tagbanwa}', "");
Expect(1, 6015, '\p{Block=_ Tagbanwa}', "");
Expect(0, 6015, '\p{^Block=_ Tagbanwa}', "");
Expect(0, 6015, '\P{Block=_ Tagbanwa}', "");
Expect(1, 6015, '\P{^Block=_ Tagbanwa}', "");
Expect(0, 5983, '\p{Block=_ Tagbanwa}', "");
Expect(1, 5983, '\p{^Block=_ Tagbanwa}', "");
Expect(1, 5983, '\P{Block=_ Tagbanwa}', "");
Expect(0, 5983, '\P{^Block=_ Tagbanwa}', "");
Error('\p{Blk=	-Tagbanwa:=}');
Error('\P{Blk=	-Tagbanwa:=}');
Expect(1, 6015, '\p{Blk=tagbanwa}', "");
Expect(0, 6015, '\p{^Blk=tagbanwa}', "");
Expect(0, 6015, '\P{Blk=tagbanwa}', "");
Expect(1, 6015, '\P{^Blk=tagbanwa}', "");
Expect(0, 5983, '\p{Blk=tagbanwa}', "");
Expect(1, 5983, '\p{^Blk=tagbanwa}', "");
Expect(1, 5983, '\P{Blk=tagbanwa}', "");
Expect(0, 5983, '\P{^Blk=tagbanwa}', "");
Expect(1, 6015, '\p{Blk=		Tagbanwa}', "");
Expect(0, 6015, '\p{^Blk=		Tagbanwa}', "");
Expect(0, 6015, '\P{Blk=		Tagbanwa}', "");
Expect(1, 6015, '\P{^Blk=		Tagbanwa}', "");
Expect(0, 5983, '\p{Blk=		Tagbanwa}', "");
Expect(1, 5983, '\p{^Blk=		Tagbanwa}', "");
Expect(1, 5983, '\P{Blk=		Tagbanwa}', "");
Expect(0, 5983, '\P{^Blk=		Tagbanwa}', "");
Error('\p{Is_Block=	/a/Tagbanwa}');
Error('\P{Is_Block=	/a/Tagbanwa}');
Expect(1, 6015, '\p{Is_Block=tagbanwa}', "");
Expect(0, 6015, '\p{^Is_Block=tagbanwa}', "");
Expect(0, 6015, '\P{Is_Block=tagbanwa}', "");
Expect(1, 6015, '\P{^Is_Block=tagbanwa}', "");
Expect(0, 5983, '\p{Is_Block=tagbanwa}', "");
Expect(1, 5983, '\p{^Is_Block=tagbanwa}', "");
Expect(1, 5983, '\P{Is_Block=tagbanwa}', "");
Expect(0, 5983, '\P{^Is_Block=tagbanwa}', "");
Expect(1, 6015, '\p{Is_Block=__Tagbanwa}', "");
Expect(0, 6015, '\p{^Is_Block=__Tagbanwa}', "");
Expect(0, 6015, '\P{Is_Block=__Tagbanwa}', "");
Expect(1, 6015, '\P{^Is_Block=__Tagbanwa}', "");
Expect(0, 5983, '\p{Is_Block=__Tagbanwa}', "");
Expect(1, 5983, '\p{^Is_Block=__Tagbanwa}', "");
Expect(1, 5983, '\P{Is_Block=__Tagbanwa}', "");
Expect(0, 5983, '\P{^Is_Block=__Tagbanwa}', "");
Error('\p{Is_Blk= tagbanwa:=}');
Error('\P{Is_Blk= tagbanwa:=}');
Expect(1, 6015, '\p{Is_Blk=tagbanwa}', "");
Expect(0, 6015, '\p{^Is_Blk=tagbanwa}', "");
Expect(0, 6015, '\P{Is_Blk=tagbanwa}', "");
Expect(1, 6015, '\P{^Is_Blk=tagbanwa}', "");
Expect(0, 5983, '\p{Is_Blk=tagbanwa}', "");
Expect(1, 5983, '\p{^Is_Blk=tagbanwa}', "");
Expect(1, 5983, '\P{Is_Blk=tagbanwa}', "");
Expect(0, 5983, '\P{^Is_Blk=tagbanwa}', "");
Expect(1, 6015, '\p{Is_Blk=_TAGBANWA}', "");
Expect(0, 6015, '\p{^Is_Blk=_TAGBANWA}', "");
Expect(0, 6015, '\P{Is_Blk=_TAGBANWA}', "");
Expect(1, 6015, '\P{^Is_Blk=_TAGBANWA}', "");
Expect(0, 5983, '\p{Is_Blk=_TAGBANWA}', "");
Expect(1, 5983, '\p{^Is_Blk=_TAGBANWA}', "");
Expect(1, 5983, '\P{Is_Blk=_TAGBANWA}', "");
Expect(0, 5983, '\P{^Is_Blk=_TAGBANWA}', "");
Error('\p{Block=:=	Arabic}');
Error('\P{Block=:=	Arabic}');
Expect(1, 1791, '\p{Block=arabic}', "");
Expect(0, 1791, '\p{^Block=arabic}', "");
Expect(0, 1791, '\P{Block=arabic}', "");
Expect(1, 1791, '\P{^Block=arabic}', "");
Expect(0, 1535, '\p{Block=arabic}', "");
Expect(1, 1535, '\p{^Block=arabic}', "");
Expect(1, 1535, '\P{Block=arabic}', "");
Expect(0, 1535, '\P{^Block=arabic}', "");
Expect(1, 1791, '\p{Block=-_ARABIC}', "");
Expect(0, 1791, '\p{^Block=-_ARABIC}', "");
Expect(0, 1791, '\P{Block=-_ARABIC}', "");
Expect(1, 1791, '\P{^Block=-_ARABIC}', "");
Expect(0, 1535, '\p{Block=-_ARABIC}', "");
Expect(1, 1535, '\p{^Block=-_ARABIC}', "");
Expect(1, 1535, '\P{Block=-_ARABIC}', "");
Expect(0, 1535, '\P{^Block=-_ARABIC}', "");
Error('\p{Blk= _ARABIC:=}');
Error('\P{Blk= _ARABIC:=}');
Expect(1, 1791, '\p{Blk:   arabic}', "");
Expect(0, 1791, '\p{^Blk:   arabic}', "");
Expect(0, 1791, '\P{Blk:   arabic}', "");
Expect(1, 1791, '\P{^Blk:   arabic}', "");
Expect(0, 1535, '\p{Blk:   arabic}', "");
Expect(1, 1535, '\p{^Blk:   arabic}', "");
Expect(1, 1535, '\P{Blk:   arabic}', "");
Expect(0, 1535, '\P{^Blk:   arabic}', "");
Expect(1, 1791, '\p{Blk=_	ARABIC}', "");
Expect(0, 1791, '\p{^Blk=_	ARABIC}', "");
Expect(0, 1791, '\P{Blk=_	ARABIC}', "");
Expect(1, 1791, '\P{^Blk=_	ARABIC}', "");
Expect(0, 1535, '\p{Blk=_	ARABIC}', "");
Expect(1, 1535, '\p{^Blk=_	ARABIC}', "");
Expect(1, 1535, '\P{Blk=_	ARABIC}', "");
Expect(0, 1535, '\P{^Blk=_	ARABIC}', "");
Error('\p{Is_Block:   /a/-Arabic}');
Error('\P{Is_Block:   /a/-Arabic}');
Expect(1, 1791, '\p{Is_Block=arabic}', "");
Expect(0, 1791, '\p{^Is_Block=arabic}', "");
Expect(0, 1791, '\P{Is_Block=arabic}', "");
Expect(1, 1791, '\P{^Is_Block=arabic}', "");
Expect(0, 1535, '\p{Is_Block=arabic}', "");
Expect(1, 1535, '\p{^Is_Block=arabic}', "");
Expect(1, 1535, '\P{Is_Block=arabic}', "");
Expect(0, 1535, '\P{^Is_Block=arabic}', "");
Expect(1, 1791, '\p{Is_Block= 	Arabic}', "");
Expect(0, 1791, '\p{^Is_Block= 	Arabic}', "");
Expect(0, 1791, '\P{Is_Block= 	Arabic}', "");
Expect(1, 1791, '\P{^Is_Block= 	Arabic}', "");
Expect(0, 1535, '\p{Is_Block= 	Arabic}', "");
Expect(1, 1535, '\p{^Is_Block= 	Arabic}', "");
Expect(1, 1535, '\P{Is_Block= 	Arabic}', "");
Expect(0, 1535, '\P{^Is_Block= 	Arabic}', "");
Error('\p{Is_Blk=/a/		arabic}');
Error('\P{Is_Blk=/a/		arabic}');
Expect(1, 1791, '\p{Is_Blk=arabic}', "");
Expect(0, 1791, '\p{^Is_Blk=arabic}', "");
Expect(0, 1791, '\P{Is_Blk=arabic}', "");
Expect(1, 1791, '\P{^Is_Blk=arabic}', "");
Expect(0, 1535, '\p{Is_Blk=arabic}', "");
Expect(1, 1535, '\p{^Is_Blk=arabic}', "");
Expect(1, 1535, '\P{Is_Blk=arabic}', "");
Expect(0, 1535, '\P{^Is_Blk=arabic}', "");
Expect(1, 1791, '\p{Is_Blk=_-arabic}', "");
Expect(0, 1791, '\p{^Is_Blk=_-arabic}', "");
Expect(0, 1791, '\P{Is_Blk=_-arabic}', "");
Expect(1, 1791, '\P{^Is_Blk=_-arabic}', "");
Expect(0, 1535, '\p{Is_Blk=_-arabic}', "");
Expect(1, 1535, '\p{^Is_Blk=_-arabic}', "");
Expect(1, 1535, '\P{Is_Blk=_-arabic}', "");
Expect(0, 1535, '\P{^Is_Blk=_-arabic}', "");
Error('\p{Block=-_KATAKANA-Phonetic Extensions:=}');
Error('\P{Block=-_KATAKANA-Phonetic Extensions:=}');
Expect(1, 12799, '\p{Block=katakanaphoneticextensions}', "");
Expect(0, 12799, '\p{^Block=katakanaphoneticextensions}', "");
Expect(0, 12799, '\P{Block=katakanaphoneticextensions}', "");
Expect(1, 12799, '\P{^Block=katakanaphoneticextensions}', "");
Expect(0, 12783, '\p{Block=katakanaphoneticextensions}', "");
Expect(1, 12783, '\p{^Block=katakanaphoneticextensions}', "");
Expect(1, 12783, '\P{Block=katakanaphoneticextensions}', "");
Expect(0, 12783, '\P{^Block=katakanaphoneticextensions}', "");
Expect(1, 12799, '\p{Block=	_Katakana_PhoneticExtensions}', "");
Expect(0, 12799, '\p{^Block=	_Katakana_PhoneticExtensions}', "");
Expect(0, 12799, '\P{Block=	_Katakana_PhoneticExtensions}', "");
Expect(1, 12799, '\P{^Block=	_Katakana_PhoneticExtensions}', "");
Expect(0, 12783, '\p{Block=	_Katakana_PhoneticExtensions}', "");
Expect(1, 12783, '\p{^Block=	_Katakana_PhoneticExtensions}', "");
Expect(1, 12783, '\P{Block=	_Katakana_PhoneticExtensions}', "");
Expect(0, 12783, '\P{^Block=	_Katakana_PhoneticExtensions}', "");
Error('\p{Blk=-katakana	phonetic/a/extensions}');
Error('\P{Blk=-katakana	phonetic/a/extensions}');
Expect(1, 12799, '\p{Blk:	katakanaphoneticextensions}', "");
Expect(0, 12799, '\p{^Blk:	katakanaphoneticextensions}', "");
Expect(0, 12799, '\P{Blk:	katakanaphoneticextensions}', "");
Expect(1, 12799, '\P{^Blk:	katakanaphoneticextensions}', "");
Expect(0, 12783, '\p{Blk:	katakanaphoneticextensions}', "");
Expect(1, 12783, '\p{^Blk:	katakanaphoneticextensions}', "");
Expect(1, 12783, '\P{Blk:	katakanaphoneticextensions}', "");
Expect(0, 12783, '\P{^Blk:	katakanaphoneticextensions}', "");
Expect(1, 12799, '\p{Blk=	Katakana_PhoneticEXTENSIONS}', "");
Expect(0, 12799, '\p{^Blk=	Katakana_PhoneticEXTENSIONS}', "");
Expect(0, 12799, '\P{Blk=	Katakana_PhoneticEXTENSIONS}', "");
Expect(1, 12799, '\P{^Blk=	Katakana_PhoneticEXTENSIONS}', "");
Expect(0, 12783, '\p{Blk=	Katakana_PhoneticEXTENSIONS}', "");
Expect(1, 12783, '\p{^Blk=	Katakana_PhoneticEXTENSIONS}', "");
Expect(1, 12783, '\P{Blk=	Katakana_PhoneticEXTENSIONS}', "");
Expect(0, 12783, '\P{^Blk=	Katakana_PhoneticEXTENSIONS}', "");
Error('\p{Is_Block=-:=KatakanaPHONETIC_EXTENSIONS}');
Error('\P{Is_Block=-:=KatakanaPHONETIC_EXTENSIONS}');
Expect(1, 12799, '\p{Is_Block=katakanaphoneticextensions}', "");
Expect(0, 12799, '\p{^Is_Block=katakanaphoneticextensions}', "");
Expect(0, 12799, '\P{Is_Block=katakanaphoneticextensions}', "");
Expect(1, 12799, '\P{^Is_Block=katakanaphoneticextensions}', "");
Expect(0, 12783, '\p{Is_Block=katakanaphoneticextensions}', "");
Expect(1, 12783, '\p{^Is_Block=katakanaphoneticextensions}', "");
Expect(1, 12783, '\P{Is_Block=katakanaphoneticextensions}', "");
Expect(0, 12783, '\P{^Is_Block=katakanaphoneticextensions}', "");
Expect(1, 12799, '\p{Is_Block=_ Katakana phonetic-Extensions}', "");
Expect(0, 12799, '\p{^Is_Block=_ Katakana phonetic-Extensions}', "");
Expect(0, 12799, '\P{Is_Block=_ Katakana phonetic-Extensions}', "");
Expect(1, 12799, '\P{^Is_Block=_ Katakana phonetic-Extensions}', "");
Expect(0, 12783, '\p{Is_Block=_ Katakana phonetic-Extensions}', "");
Expect(1, 12783, '\p{^Is_Block=_ Katakana phonetic-Extensions}', "");
Expect(1, 12783, '\P{Is_Block=_ Katakana phonetic-Extensions}', "");
Expect(0, 12783, '\P{^Is_Block=_ Katakana phonetic-Extensions}', "");
Error('\p{Is_Blk=:=-	KatakanaPhoneticExtensions}');
Error('\P{Is_Blk=:=-	KatakanaPhoneticExtensions}');
Expect(1, 12799, '\p{Is_Blk=katakanaphoneticextensions}', "");
Expect(0, 12799, '\p{^Is_Blk=katakanaphoneticextensions}', "");
Expect(0, 12799, '\P{Is_Blk=katakanaphoneticextensions}', "");
Expect(1, 12799, '\P{^Is_Blk=katakanaphoneticextensions}', "");
Expect(0, 12783, '\p{Is_Blk=katakanaphoneticextensions}', "");
Expect(1, 12783, '\p{^Is_Blk=katakanaphoneticextensions}', "");
Expect(1, 12783, '\P{Is_Blk=katakanaphoneticextensions}', "");
Expect(0, 12783, '\P{^Is_Blk=katakanaphoneticextensions}', "");
Expect(1, 12799, '\p{Is_Blk= 	KATAKANA_Phonetic Extensions}', "");
Expect(0, 12799, '\p{^Is_Blk= 	KATAKANA_Phonetic Extensions}', "");
Expect(0, 12799, '\P{Is_Blk= 	KATAKANA_Phonetic Extensions}', "");
Expect(1, 12799, '\P{^Is_Blk= 	KATAKANA_Phonetic Extensions}', "");
Expect(0, 12783, '\p{Is_Blk= 	KATAKANA_Phonetic Extensions}', "");
Expect(1, 12783, '\p{^Is_Blk= 	KATAKANA_Phonetic Extensions}', "");
Expect(1, 12783, '\P{Is_Blk= 	KATAKANA_Phonetic Extensions}', "");
Expect(0, 12783, '\P{^Is_Blk= 	KATAKANA_Phonetic Extensions}', "");
Error('\p{Block=/a/ -Letterlike_SYMBOLS}');
Error('\P{Block=/a/ -Letterlike_SYMBOLS}');
Expect(1, 8527, '\p{Block=letterlikesymbols}', "");
Expect(0, 8527, '\p{^Block=letterlikesymbols}', "");
Expect(0, 8527, '\P{Block=letterlikesymbols}', "");
Expect(1, 8527, '\P{^Block=letterlikesymbols}', "");
Expect(0, 8447, '\p{Block=letterlikesymbols}', "");
Expect(1, 8447, '\p{^Block=letterlikesymbols}', "");
Expect(1, 8447, '\P{Block=letterlikesymbols}', "");
Expect(0, 8447, '\P{^Block=letterlikesymbols}', "");
Expect(1, 8527, '\p{Block=--LetterlikeSYMBOLS}', "");
Expect(0, 8527, '\p{^Block=--LetterlikeSYMBOLS}', "");
Expect(0, 8527, '\P{Block=--LetterlikeSYMBOLS}', "");
Expect(1, 8527, '\P{^Block=--LetterlikeSYMBOLS}', "");
Expect(0, 8447, '\p{Block=--LetterlikeSYMBOLS}', "");
Expect(1, 8447, '\p{^Block=--LetterlikeSYMBOLS}', "");
Expect(1, 8447, '\P{Block=--LetterlikeSYMBOLS}', "");
Expect(0, 8447, '\P{^Block=--LetterlikeSYMBOLS}', "");
Error('\p{Blk=	letterlike	Symbols/a/}');
Error('\P{Blk=	letterlike	Symbols/a/}');
Expect(1, 8527, '\p{Blk: letterlikesymbols}', "");
Expect(0, 8527, '\p{^Blk: letterlikesymbols}', "");
Expect(0, 8527, '\P{Blk: letterlikesymbols}', "");
Expect(1, 8527, '\P{^Blk: letterlikesymbols}', "");
Expect(0, 8447, '\p{Blk: letterlikesymbols}', "");
Expect(1, 8447, '\p{^Blk: letterlikesymbols}', "");
Expect(1, 8447, '\P{Blk: letterlikesymbols}', "");
Expect(0, 8447, '\P{^Blk: letterlikesymbols}', "");
Expect(1, 8527, '\p{Blk= Letterlike-SYMBOLS}', "");
Expect(0, 8527, '\p{^Blk= Letterlike-SYMBOLS}', "");
Expect(0, 8527, '\P{Blk= Letterlike-SYMBOLS}', "");
Expect(1, 8527, '\P{^Blk= Letterlike-SYMBOLS}', "");
Expect(0, 8447, '\p{Blk= Letterlike-SYMBOLS}', "");
Expect(1, 8447, '\p{^Blk= Letterlike-SYMBOLS}', "");
Expect(1, 8447, '\P{Blk= Letterlike-SYMBOLS}', "");
Expect(0, 8447, '\P{^Blk= Letterlike-SYMBOLS}', "");
Error('\p{Is_Block=_ LETTERLIKE/a/Symbols}');
Error('\P{Is_Block=_ LETTERLIKE/a/Symbols}');
Expect(1, 8527, '\p{Is_Block=letterlikesymbols}', "");
Expect(0, 8527, '\p{^Is_Block=letterlikesymbols}', "");
Expect(0, 8527, '\P{Is_Block=letterlikesymbols}', "");
Expect(1, 8527, '\P{^Is_Block=letterlikesymbols}', "");
Expect(0, 8447, '\p{Is_Block=letterlikesymbols}', "");
Expect(1, 8447, '\p{^Is_Block=letterlikesymbols}', "");
Expect(1, 8447, '\P{Is_Block=letterlikesymbols}', "");
Expect(0, 8447, '\P{^Is_Block=letterlikesymbols}', "");
Expect(1, 8527, '\p{Is_Block=_ Letterlike Symbols}', "");
Expect(0, 8527, '\p{^Is_Block=_ Letterlike Symbols}', "");
Expect(0, 8527, '\P{Is_Block=_ Letterlike Symbols}', "");
Expect(1, 8527, '\P{^Is_Block=_ Letterlike Symbols}', "");
Expect(0, 8447, '\p{Is_Block=_ Letterlike Symbols}', "");
Expect(1, 8447, '\p{^Is_Block=_ Letterlike Symbols}', "");
Expect(1, 8447, '\P{Is_Block=_ Letterlike Symbols}', "");
Expect(0, 8447, '\P{^Is_Block=_ Letterlike Symbols}', "");
Error('\p{Is_Blk=-:=Letterlike-symbols}');
Error('\P{Is_Blk=-:=Letterlike-symbols}');
Expect(1, 8527, '\p{Is_Blk=letterlikesymbols}', "");
Expect(0, 8527, '\p{^Is_Blk=letterlikesymbols}', "");
Expect(0, 8527, '\P{Is_Blk=letterlikesymbols}', "");
Expect(1, 8527, '\P{^Is_Blk=letterlikesymbols}', "");
Expect(0, 8447, '\p{Is_Blk=letterlikesymbols}', "");
Expect(1, 8447, '\p{^Is_Blk=letterlikesymbols}', "");
Expect(1, 8447, '\P{Is_Blk=letterlikesymbols}', "");
Expect(0, 8447, '\P{^Is_Blk=letterlikesymbols}', "");
Expect(1, 8527, '\p{Is_Blk=__Letterlike Symbols}', "");
Expect(0, 8527, '\p{^Is_Blk=__Letterlike Symbols}', "");
Expect(0, 8527, '\P{Is_Blk=__Letterlike Symbols}', "");
Expect(1, 8527, '\P{^Is_Blk=__Letterlike Symbols}', "");
Expect(0, 8447, '\p{Is_Blk=__Letterlike Symbols}', "");
Expect(1, 8447, '\p{^Is_Blk=__Letterlike Symbols}', "");
Expect(1, 8447, '\P{Is_Blk=__Letterlike Symbols}', "");
Expect(0, 8447, '\P{^Is_Blk=__Letterlike Symbols}', "");
Error('\p{Block: /a/LATINextended_C}');
Error('\P{Block: /a/LATINextended_C}');
Expect(1, 11391, '\p{Block=latinextendedc}', "");
Expect(0, 11391, '\p{^Block=latinextendedc}', "");
Expect(0, 11391, '\P{Block=latinextendedc}', "");
Expect(1, 11391, '\P{^Block=latinextendedc}', "");
Expect(0, 11359, '\p{Block=latinextendedc}', "");
Expect(1, 11359, '\p{^Block=latinextendedc}', "");
Expect(1, 11359, '\P{Block=latinextendedc}', "");
Expect(0, 11359, '\P{^Block=latinextendedc}', "");
Expect(1, 11391, '\p{Block=_Latin-EXTENDED C}', "");
Expect(0, 11391, '\p{^Block=_Latin-EXTENDED C}', "");
Expect(0, 11391, '\P{Block=_Latin-EXTENDED C}', "");
Expect(1, 11391, '\P{^Block=_Latin-EXTENDED C}', "");
Expect(0, 11359, '\p{Block=_Latin-EXTENDED C}', "");
Expect(1, 11359, '\p{^Block=_Latin-EXTENDED C}', "");
Expect(1, 11359, '\P{Block=_Latin-EXTENDED C}', "");
Expect(0, 11359, '\P{^Block=_Latin-EXTENDED C}', "");
Error('\p{Blk=:=__Latin	EXTENDED_C}');
Error('\P{Blk=:=__Latin	EXTENDED_C}');
Expect(1, 11391, '\p{Blk=latinextendedc}', "");
Expect(0, 11391, '\p{^Blk=latinextendedc}', "");
Expect(0, 11391, '\P{Blk=latinextendedc}', "");
Expect(1, 11391, '\P{^Blk=latinextendedc}', "");
Expect(0, 11359, '\p{Blk=latinextendedc}', "");
Expect(1, 11359, '\p{^Blk=latinextendedc}', "");
Expect(1, 11359, '\P{Blk=latinextendedc}', "");
Expect(0, 11359, '\P{^Blk=latinextendedc}', "");
Expect(1, 11391, '\p{Blk= latin-EXTENDED_C}', "");
Expect(0, 11391, '\p{^Blk= latin-EXTENDED_C}', "");
Expect(0, 11391, '\P{Blk= latin-EXTENDED_C}', "");
Expect(1, 11391, '\P{^Blk= latin-EXTENDED_C}', "");
Expect(0, 11359, '\p{Blk= latin-EXTENDED_C}', "");
Expect(1, 11359, '\p{^Blk= latin-EXTENDED_C}', "");
Expect(1, 11359, '\P{Blk= latin-EXTENDED_C}', "");
Expect(0, 11359, '\P{^Blk= latin-EXTENDED_C}', "");
Error('\p{Is_Block=- latin-Extended:=c}');
Error('\P{Is_Block=- latin-Extended:=c}');
Expect(1, 11391, '\p{Is_Block=latinextendedc}', "");
Expect(0, 11391, '\p{^Is_Block=latinextendedc}', "");
Expect(0, 11391, '\P{Is_Block=latinextendedc}', "");
Expect(1, 11391, '\P{^Is_Block=latinextendedc}', "");
Expect(0, 11359, '\p{Is_Block=latinextendedc}', "");
Expect(1, 11359, '\p{^Is_Block=latinextendedc}', "");
Expect(1, 11359, '\P{Is_Block=latinextendedc}', "");
Expect(0, 11359, '\P{^Is_Block=latinextendedc}', "");
Expect(1, 11391, '\p{Is_Block=		LatinExtendedC}', "");
Expect(0, 11391, '\p{^Is_Block=		LatinExtendedC}', "");
Expect(0, 11391, '\P{Is_Block=		LatinExtendedC}', "");
Expect(1, 11391, '\P{^Is_Block=		LatinExtendedC}', "");
Expect(0, 11359, '\p{Is_Block=		LatinExtendedC}', "");
Expect(1, 11359, '\p{^Is_Block=		LatinExtendedC}', "");
Expect(1, 11359, '\P{Is_Block=		LatinExtendedC}', "");
Expect(0, 11359, '\P{^Is_Block=		LatinExtendedC}', "");
Error('\p{Is_Blk:		 LATIN-Extended	C:=}');
Error('\P{Is_Blk:		 LATIN-Extended	C:=}');
Expect(1, 11391, '\p{Is_Blk=latinextendedc}', "");
Expect(0, 11391, '\p{^Is_Blk=latinextendedc}', "");
Expect(0, 11391, '\P{Is_Blk=latinextendedc}', "");
Expect(1, 11391, '\P{^Is_Blk=latinextendedc}', "");
Expect(0, 11359, '\p{Is_Blk=latinextendedc}', "");
Expect(1, 11359, '\p{^Is_Blk=latinextendedc}', "");
Expect(1, 11359, '\P{Is_Blk=latinextendedc}', "");
Expect(0, 11359, '\P{^Is_Blk=latinextendedc}', "");
Expect(1, 11391, '\p{Is_Blk=- latin	extendedc}', "");
Expect(0, 11391, '\p{^Is_Blk=- latin	extendedc}', "");
Expect(0, 11391, '\P{Is_Blk=- latin	extendedc}', "");
Expect(1, 11391, '\P{^Is_Blk=- latin	extendedc}', "");
Expect(0, 11359, '\p{Is_Blk=- latin	extendedc}', "");
Expect(1, 11359, '\p{^Is_Blk=- latin	extendedc}', "");
Expect(1, 11359, '\P{Is_Blk=- latin	extendedc}', "");
Expect(0, 11359, '\P{^Is_Blk=- latin	extendedc}', "");
Error('\p{Block=/a/--Common_indic	NumberForms}');
Error('\P{Block=/a/--Common_indic	NumberForms}');
Expect(1, 43071, '\p{Block=commonindicnumberforms}', "");
Expect(0, 43071, '\p{^Block=commonindicnumberforms}', "");
Expect(0, 43071, '\P{Block=commonindicnumberforms}', "");
Expect(1, 43071, '\P{^Block=commonindicnumberforms}', "");
Expect(0, 43055, '\p{Block=commonindicnumberforms}', "");
Expect(1, 43055, '\p{^Block=commonindicnumberforms}', "");
Expect(1, 43055, '\P{Block=commonindicnumberforms}', "");
Expect(0, 43055, '\P{^Block=commonindicnumberforms}', "");
Expect(1, 43071, '\p{Block=_common Indicnumber forms}', "");
Expect(0, 43071, '\p{^Block=_common Indicnumber forms}', "");
Expect(0, 43071, '\P{Block=_common Indicnumber forms}', "");
Expect(1, 43071, '\P{^Block=_common Indicnumber forms}', "");
Expect(0, 43055, '\p{Block=_common Indicnumber forms}', "");
Expect(1, 43055, '\p{^Block=_common Indicnumber forms}', "");
Expect(1, 43055, '\P{Block=_common Indicnumber forms}', "");
Expect(0, 43055, '\P{^Block=_common Indicnumber forms}', "");
Error('\p{Blk= _Common	indic_Number/a/FORMS}');
Error('\P{Blk= _Common	indic_Number/a/FORMS}');
Expect(1, 43071, '\p{Blk=commonindicnumberforms}', "");
Expect(0, 43071, '\p{^Blk=commonindicnumberforms}', "");
Expect(0, 43071, '\P{Blk=commonindicnumberforms}', "");
Expect(1, 43071, '\P{^Blk=commonindicnumberforms}', "");
Expect(0, 43055, '\p{Blk=commonindicnumberforms}', "");
Expect(1, 43055, '\p{^Blk=commonindicnumberforms}', "");
Expect(1, 43055, '\P{Blk=commonindicnumberforms}', "");
Expect(0, 43055, '\P{^Blk=commonindicnumberforms}', "");
Expect(1, 43071, '\p{Blk: _-COMMON	Indic-number_FORMS}', "");
Expect(0, 43071, '\p{^Blk: _-COMMON	Indic-number_FORMS}', "");
Expect(0, 43071, '\P{Blk: _-COMMON	Indic-number_FORMS}', "");
Expect(1, 43071, '\P{^Blk: _-COMMON	Indic-number_FORMS}', "");
Expect(0, 43055, '\p{Blk: _-COMMON	Indic-number_FORMS}', "");
Expect(1, 43055, '\p{^Blk: _-COMMON	Indic-number_FORMS}', "");
Expect(1, 43055, '\P{Blk: _-COMMON	Indic-number_FORMS}', "");
Expect(0, 43055, '\P{^Blk: _-COMMON	Indic-number_FORMS}', "");
Error('\p{Is_Block=	_common INDIC/a/Number Forms}');
Error('\P{Is_Block=	_common INDIC/a/Number Forms}');
Expect(1, 43071, '\p{Is_Block=commonindicnumberforms}', "");
Expect(0, 43071, '\p{^Is_Block=commonindicnumberforms}', "");
Expect(0, 43071, '\P{Is_Block=commonindicnumberforms}', "");
Expect(1, 43071, '\P{^Is_Block=commonindicnumberforms}', "");
Expect(0, 43055, '\p{Is_Block=commonindicnumberforms}', "");
Expect(1, 43055, '\p{^Is_Block=commonindicnumberforms}', "");
Expect(1, 43055, '\P{Is_Block=commonindicnumberforms}', "");
Expect(0, 43055, '\P{^Is_Block=commonindicnumberforms}', "");
Expect(1, 43071, '\p{Is_Block:--Common-Indic Numberforms}', "");
Expect(0, 43071, '\p{^Is_Block:--Common-Indic Numberforms}', "");
Expect(0, 43071, '\P{Is_Block:--Common-Indic Numberforms}', "");
Expect(1, 43071, '\P{^Is_Block:--Common-Indic Numberforms}', "");
Expect(0, 43055, '\p{Is_Block:--Common-Indic Numberforms}', "");
Expect(1, 43055, '\p{^Is_Block:--Common-Indic Numberforms}', "");
Expect(1, 43055, '\P{Is_Block:--Common-Indic Numberforms}', "");
Expect(0, 43055, '\P{^Is_Block:--Common-Indic Numberforms}', "");
Error('\p{Is_Blk=	Common_Indic-Number forms/a/}');
Error('\P{Is_Blk=	Common_Indic-Number forms/a/}');
Expect(1, 43071, '\p{Is_Blk=commonindicnumberforms}', "");
Expect(0, 43071, '\p{^Is_Blk=commonindicnumberforms}', "");
Expect(0, 43071, '\P{Is_Blk=commonindicnumberforms}', "");
Expect(1, 43071, '\P{^Is_Blk=commonindicnumberforms}', "");
Expect(0, 43055, '\p{Is_Blk=commonindicnumberforms}', "");
Expect(1, 43055, '\p{^Is_Blk=commonindicnumberforms}', "");
Expect(1, 43055, '\P{Is_Blk=commonindicnumberforms}', "");
Expect(0, 43055, '\P{^Is_Blk=commonindicnumberforms}', "");
Expect(1, 43071, '\p{Is_Blk:  commonIndic Number	Forms}', "");
Expect(0, 43071, '\p{^Is_Blk:  commonIndic Number	Forms}', "");
Expect(0, 43071, '\P{Is_Blk:  commonIndic Number	Forms}', "");
Expect(1, 43071, '\P{^Is_Blk:  commonIndic Number	Forms}', "");
Expect(0, 43055, '\p{Is_Blk:  commonIndic Number	Forms}', "");
Expect(1, 43055, '\p{^Is_Blk:  commonIndic Number	Forms}', "");
Expect(1, 43055, '\P{Is_Blk:  commonIndic Number	Forms}', "");
Expect(0, 43055, '\P{^Is_Blk:  commonIndic Number	Forms}', "");
Error('\p{Block=:=_meetei	Mayek}');
Error('\P{Block=:=_meetei	Mayek}');
Expect(1, 44031, '\p{Block=meeteimayek}', "");
Expect(0, 44031, '\p{^Block=meeteimayek}', "");
Expect(0, 44031, '\P{Block=meeteimayek}', "");
Expect(1, 44031, '\P{^Block=meeteimayek}', "");
Expect(0, 43967, '\p{Block=meeteimayek}', "");
Expect(1, 43967, '\p{^Block=meeteimayek}', "");
Expect(1, 43967, '\P{Block=meeteimayek}', "");
Expect(0, 43967, '\P{^Block=meeteimayek}', "");
Expect(1, 44031, '\p{Block=_	meetei_Mayek}', "");
Expect(0, 44031, '\p{^Block=_	meetei_Mayek}', "");
Expect(0, 44031, '\P{Block=_	meetei_Mayek}', "");
Expect(1, 44031, '\P{^Block=_	meetei_Mayek}', "");
Expect(0, 43967, '\p{Block=_	meetei_Mayek}', "");
Expect(1, 43967, '\p{^Block=_	meetei_Mayek}', "");
Expect(1, 43967, '\P{Block=_	meetei_Mayek}', "");
Expect(0, 43967, '\P{^Block=_	meetei_Mayek}', "");
Error('\p{Blk=:=_meeteiMayek}');
Error('\P{Blk=:=_meeteiMayek}');
Expect(1, 44031, '\p{Blk: meeteimayek}', "");
Expect(0, 44031, '\p{^Blk: meeteimayek}', "");
Expect(0, 44031, '\P{Blk: meeteimayek}', "");
Expect(1, 44031, '\P{^Blk: meeteimayek}', "");
Expect(0, 43967, '\p{Blk: meeteimayek}', "");
Expect(1, 43967, '\p{^Blk: meeteimayek}', "");
Expect(1, 43967, '\P{Blk: meeteimayek}', "");
Expect(0, 43967, '\P{^Blk: meeteimayek}', "");
Expect(1, 44031, '\p{Blk=_Meetei MAYEK}', "");
Expect(0, 44031, '\p{^Blk=_Meetei MAYEK}', "");
Expect(0, 44031, '\P{Blk=_Meetei MAYEK}', "");
Expect(1, 44031, '\P{^Blk=_Meetei MAYEK}', "");
Expect(0, 43967, '\p{Blk=_Meetei MAYEK}', "");
Expect(1, 43967, '\p{^Blk=_Meetei MAYEK}', "");
Expect(1, 43967, '\P{Blk=_Meetei MAYEK}', "");
Expect(0, 43967, '\P{^Blk=_Meetei MAYEK}', "");
Error('\p{Is_Block=/a/	-Meetei	Mayek}');
Error('\P{Is_Block=/a/	-Meetei	Mayek}');
Expect(1, 44031, '\p{Is_Block=meeteimayek}', "");
Expect(0, 44031, '\p{^Is_Block=meeteimayek}', "");
Expect(0, 44031, '\P{Is_Block=meeteimayek}', "");
Expect(1, 44031, '\P{^Is_Block=meeteimayek}', "");
Expect(0, 43967, '\p{Is_Block=meeteimayek}', "");
Expect(1, 43967, '\p{^Is_Block=meeteimayek}', "");
Expect(1, 43967, '\P{Is_Block=meeteimayek}', "");
Expect(0, 43967, '\P{^Is_Block=meeteimayek}', "");
Expect(1, 44031, '\p{Is_Block:   --meetei-Mayek}', "");
Expect(0, 44031, '\p{^Is_Block:   --meetei-Mayek}', "");
Expect(0, 44031, '\P{Is_Block:   --meetei-Mayek}', "");
Expect(1, 44031, '\P{^Is_Block:   --meetei-Mayek}', "");
Expect(0, 43967, '\p{Is_Block:   --meetei-Mayek}', "");
Expect(1, 43967, '\p{^Is_Block:   --meetei-Mayek}', "");
Expect(1, 43967, '\P{Is_Block:   --meetei-Mayek}', "");
Expect(0, 43967, '\P{^Is_Block:   --meetei-Mayek}', "");
Error('\p{Is_Blk=Meetei/a/Mayek}');
Error('\P{Is_Blk=Meetei/a/Mayek}');
Expect(1, 44031, '\p{Is_Blk=meeteimayek}', "");
Expect(0, 44031, '\p{^Is_Blk=meeteimayek}', "");
Expect(0, 44031, '\P{Is_Blk=meeteimayek}', "");
Expect(1, 44031, '\P{^Is_Blk=meeteimayek}', "");
Expect(0, 43967, '\p{Is_Blk=meeteimayek}', "");
Expect(1, 43967, '\p{^Is_Blk=meeteimayek}', "");
Expect(1, 43967, '\P{Is_Blk=meeteimayek}', "");
Expect(0, 43967, '\P{^Is_Blk=meeteimayek}', "");
Expect(1, 44031, '\p{Is_Blk=	 MEETEIMayek}', "");
Expect(0, 44031, '\p{^Is_Blk=	 MEETEIMayek}', "");
Expect(0, 44031, '\P{Is_Blk=	 MEETEIMayek}', "");
Expect(1, 44031, '\P{^Is_Blk=	 MEETEIMayek}', "");
Expect(0, 43967, '\p{Is_Blk=	 MEETEIMayek}', "");
Expect(1, 43967, '\p{^Is_Blk=	 MEETEIMayek}', "");
Expect(1, 43967, '\P{Is_Blk=	 MEETEIMayek}', "");
Expect(0, 43967, '\P{^Is_Blk=	 MEETEIMayek}', "");
Error('\p{Block= /a/Supplemental	mathematical-operators}');
Error('\P{Block= /a/Supplemental	mathematical-operators}');
Expect(1, 11007, '\p{Block=supplementalmathematicaloperators}', "");
Expect(0, 11007, '\p{^Block=supplementalmathematicaloperators}', "");
Expect(0, 11007, '\P{Block=supplementalmathematicaloperators}', "");
Expect(1, 11007, '\P{^Block=supplementalmathematicaloperators}', "");
Expect(0, 10751, '\p{Block=supplementalmathematicaloperators}', "");
Expect(1, 10751, '\p{^Block=supplementalmathematicaloperators}', "");
Expect(1, 10751, '\P{Block=supplementalmathematicaloperators}', "");
Expect(0, 10751, '\P{^Block=supplementalmathematicaloperators}', "");
Expect(1, 11007, '\p{Block=	Supplemental MathematicalOperators}', "");
Expect(0, 11007, '\p{^Block=	Supplemental MathematicalOperators}', "");
Expect(0, 11007, '\P{Block=	Supplemental MathematicalOperators}', "");
Expect(1, 11007, '\P{^Block=	Supplemental MathematicalOperators}', "");
Expect(0, 10751, '\p{Block=	Supplemental MathematicalOperators}', "");
Expect(1, 10751, '\p{^Block=	Supplemental MathematicalOperators}', "");
Expect(1, 10751, '\P{Block=	Supplemental MathematicalOperators}', "");
Expect(0, 10751, '\P{^Block=	Supplemental MathematicalOperators}', "");
Error('\p{Blk=-_supplemental_Mathematical/a/Operators}');
Error('\P{Blk=-_supplemental_Mathematical/a/Operators}');
Expect(1, 11007, '\p{Blk=supplementalmathematicaloperators}', "");
Expect(0, 11007, '\p{^Blk=supplementalmathematicaloperators}', "");
Expect(0, 11007, '\P{Blk=supplementalmathematicaloperators}', "");
Expect(1, 11007, '\P{^Blk=supplementalmathematicaloperators}', "");
Expect(0, 10751, '\p{Blk=supplementalmathematicaloperators}', "");
Expect(1, 10751, '\p{^Blk=supplementalmathematicaloperators}', "");
Expect(1, 10751, '\P{Blk=supplementalmathematicaloperators}', "");
Expect(0, 10751, '\P{^Blk=supplementalmathematicaloperators}', "");
Expect(1, 11007, '\p{Blk=-	Supplemental-MathematicalOPERATORS}', "");
Expect(0, 11007, '\p{^Blk=-	Supplemental-MathematicalOPERATORS}', "");
Expect(0, 11007, '\P{Blk=-	Supplemental-MathematicalOPERATORS}', "");
Expect(1, 11007, '\P{^Blk=-	Supplemental-MathematicalOPERATORS}', "");
Expect(0, 10751, '\p{Blk=-	Supplemental-MathematicalOPERATORS}', "");
Expect(1, 10751, '\p{^Blk=-	Supplemental-MathematicalOPERATORS}', "");
Expect(1, 10751, '\P{Blk=-	Supplemental-MathematicalOPERATORS}', "");
Expect(0, 10751, '\P{^Blk=-	Supplemental-MathematicalOPERATORS}', "");
Error('\p{Is_Block= SupplementalMATHEMATICAL_OPERATORS/a/}');
Error('\P{Is_Block= SupplementalMATHEMATICAL_OPERATORS/a/}');
Expect(1, 11007, '\p{Is_Block=supplementalmathematicaloperators}', "");
Expect(0, 11007, '\p{^Is_Block=supplementalmathematicaloperators}', "");
Expect(0, 11007, '\P{Is_Block=supplementalmathematicaloperators}', "");
Expect(1, 11007, '\P{^Is_Block=supplementalmathematicaloperators}', "");
Expect(0, 10751, '\p{Is_Block=supplementalmathematicaloperators}', "");
Expect(1, 10751, '\p{^Is_Block=supplementalmathematicaloperators}', "");
Expect(1, 10751, '\P{Is_Block=supplementalmathematicaloperators}', "");
Expect(0, 10751, '\P{^Is_Block=supplementalmathematicaloperators}', "");
Expect(1, 11007, '\p{Is_Block=		supplemental mathematical	Operators}', "");
Expect(0, 11007, '\p{^Is_Block=		supplemental mathematical	Operators}', "");
Expect(0, 11007, '\P{Is_Block=		supplemental mathematical	Operators}', "");
Expect(1, 11007, '\P{^Is_Block=		supplemental mathematical	Operators}', "");
Expect(0, 10751, '\p{Is_Block=		supplemental mathematical	Operators}', "");
Expect(1, 10751, '\p{^Is_Block=		supplemental mathematical	Operators}', "");
Expect(1, 10751, '\P{Is_Block=		supplemental mathematical	Operators}', "");
Expect(0, 10751, '\P{^Is_Block=		supplemental mathematical	Operators}', "");
Error('\p{Is_Blk= /a/supplemental_Mathematical-Operators}');
Error('\P{Is_Blk= /a/supplemental_Mathematical-Operators}');
Expect(1, 11007, '\p{Is_Blk=supplementalmathematicaloperators}', "");
Expect(0, 11007, '\p{^Is_Blk=supplementalmathematicaloperators}', "");
Expect(0, 11007, '\P{Is_Blk=supplementalmathematicaloperators}', "");
Expect(1, 11007, '\P{^Is_Blk=supplementalmathematicaloperators}', "");
Expect(0, 10751, '\p{Is_Blk=supplementalmathematicaloperators}', "");
Expect(1, 10751, '\p{^Is_Blk=supplementalmathematicaloperators}', "");
Expect(1, 10751, '\P{Is_Blk=supplementalmathematicaloperators}', "");
Expect(0, 10751, '\P{^Is_Blk=supplementalmathematicaloperators}', "");
Expect(1, 11007, '\p{Is_Blk= -Supplemental Mathematical Operators}', "");
Expect(0, 11007, '\p{^Is_Blk= -Supplemental Mathematical Operators}', "");
Expect(0, 11007, '\P{Is_Blk= -Supplemental Mathematical Operators}', "");
Expect(1, 11007, '\P{^Is_Blk= -Supplemental Mathematical Operators}', "");
Expect(0, 10751, '\p{Is_Blk= -Supplemental Mathematical Operators}', "");
Expect(1, 10751, '\p{^Is_Blk= -Supplemental Mathematical Operators}', "");
Expect(1, 10751, '\P{Is_Blk= -Supplemental Mathematical Operators}', "");
Expect(0, 10751, '\P{^Is_Blk= -Supplemental Mathematical Operators}', "");
Error('\p{Block=_:=Shavian}');
Error('\P{Block=_:=Shavian}');
Expect(1, 66687, '\p{Block=shavian}', "");
Expect(0, 66687, '\p{^Block=shavian}', "");
Expect(0, 66687, '\P{Block=shavian}', "");
Expect(1, 66687, '\P{^Block=shavian}', "");
Expect(0, 66639, '\p{Block=shavian}', "");
Expect(1, 66639, '\p{^Block=shavian}', "");
Expect(1, 66639, '\P{Block=shavian}', "");
Expect(0, 66639, '\P{^Block=shavian}', "");
Expect(1, 66687, '\p{Block=_-Shavian}', "");
Expect(0, 66687, '\p{^Block=_-Shavian}', "");
Expect(0, 66687, '\P{Block=_-Shavian}', "");
Expect(1, 66687, '\P{^Block=_-Shavian}', "");
Expect(0, 66639, '\p{Block=_-Shavian}', "");
Expect(1, 66639, '\p{^Block=_-Shavian}', "");
Expect(1, 66639, '\P{Block=_-Shavian}', "");
Expect(0, 66639, '\P{^Block=_-Shavian}', "");
Error('\p{Blk= _Shavian:=}');
Error('\P{Blk= _Shavian:=}');
Expect(1, 66687, '\p{Blk: shavian}', "");
Expect(0, 66687, '\p{^Blk: shavian}', "");
Expect(0, 66687, '\P{Blk: shavian}', "");
Expect(1, 66687, '\P{^Blk: shavian}', "");
Expect(0, 66639, '\p{Blk: shavian}', "");
Expect(1, 66639, '\p{^Blk: shavian}', "");
Expect(1, 66639, '\P{Blk: shavian}', "");
Expect(0, 66639, '\P{^Blk: shavian}', "");
Expect(1, 66687, '\p{Blk:	- Shavian}', "");
Expect(0, 66687, '\p{^Blk:	- Shavian}', "");
Expect(0, 66687, '\P{Blk:	- Shavian}', "");
Expect(1, 66687, '\P{^Blk:	- Shavian}', "");
Expect(0, 66639, '\p{Blk:	- Shavian}', "");
Expect(1, 66639, '\p{^Blk:	- Shavian}', "");
Expect(1, 66639, '\P{Blk:	- Shavian}', "");
Expect(0, 66639, '\P{^Blk:	- Shavian}', "");
Error('\p{Is_Block=_-Shavian:=}');
Error('\P{Is_Block=_-Shavian:=}');
Expect(1, 66687, '\p{Is_Block=shavian}', "");
Expect(0, 66687, '\p{^Is_Block=shavian}', "");
Expect(0, 66687, '\P{Is_Block=shavian}', "");
Expect(1, 66687, '\P{^Is_Block=shavian}', "");
Expect(0, 66639, '\p{Is_Block=shavian}', "");
Expect(1, 66639, '\p{^Is_Block=shavian}', "");
Expect(1, 66639, '\P{Is_Block=shavian}', "");
Expect(0, 66639, '\P{^Is_Block=shavian}', "");
Expect(1, 66687, '\p{Is_Block= _Shavian}', "");
Expect(0, 66687, '\p{^Is_Block= _Shavian}', "");
Expect(0, 66687, '\P{Is_Block= _Shavian}', "");
Expect(1, 66687, '\P{^Is_Block= _Shavian}', "");
Expect(0, 66639, '\p{Is_Block= _Shavian}', "");
Expect(1, 66639, '\p{^Is_Block= _Shavian}', "");
Expect(1, 66639, '\P{Is_Block= _Shavian}', "");
Expect(0, 66639, '\P{^Is_Block= _Shavian}', "");
Error('\p{Is_Blk=/a/SHAVIAN}');
Error('\P{Is_Blk=/a/SHAVIAN}');
Expect(1, 66687, '\p{Is_Blk=shavian}', "");
Expect(0, 66687, '\p{^Is_Blk=shavian}', "");
Expect(0, 66687, '\P{Is_Blk=shavian}', "");
Expect(1, 66687, '\P{^Is_Blk=shavian}', "");
Expect(0, 66639, '\p{Is_Blk=shavian}', "");
Expect(1, 66639, '\p{^Is_Blk=shavian}', "");
Expect(1, 66639, '\P{Is_Blk=shavian}', "");
Expect(0, 66639, '\P{^Is_Blk=shavian}', "");
Expect(1, 66687, '\p{Is_Blk=_-Shavian}', "");
Expect(0, 66687, '\p{^Is_Blk=_-Shavian}', "");
Expect(0, 66687, '\P{Is_Blk=_-Shavian}', "");
Expect(1, 66687, '\P{^Is_Blk=_-Shavian}', "");
Expect(0, 66639, '\p{Is_Blk=_-Shavian}', "");
Expect(1, 66639, '\p{^Is_Blk=_-Shavian}', "");
Expect(1, 66639, '\P{Is_Blk=_-Shavian}', "");
Expect(0, 66639, '\P{^Is_Blk=_-Shavian}', "");
Error('\p{Block=:=Lydian}');
Error('\P{Block=:=Lydian}');
Expect(1, 67903, '\p{Block=lydian}', "");
Expect(0, 67903, '\p{^Block=lydian}', "");
Expect(0, 67903, '\P{Block=lydian}', "");
Expect(1, 67903, '\P{^Block=lydian}', "");
Expect(0, 67871, '\p{Block=lydian}', "");
Expect(1, 67871, '\p{^Block=lydian}', "");
Expect(1, 67871, '\P{Block=lydian}', "");
Expect(0, 67871, '\P{^Block=lydian}', "");
Expect(1, 67903, '\p{Block=-Lydian}', "");
Expect(0, 67903, '\p{^Block=-Lydian}', "");
Expect(0, 67903, '\P{Block=-Lydian}', "");
Expect(1, 67903, '\P{^Block=-Lydian}', "");
Expect(0, 67871, '\p{Block=-Lydian}', "");
Expect(1, 67871, '\p{^Block=-Lydian}', "");
Expect(1, 67871, '\P{Block=-Lydian}', "");
Expect(0, 67871, '\P{^Block=-Lydian}', "");
Error('\p{Blk=-/a/Lydian}');
Error('\P{Blk=-/a/Lydian}');
Expect(1, 67903, '\p{Blk=lydian}', "");
Expect(0, 67903, '\p{^Blk=lydian}', "");
Expect(0, 67903, '\P{Blk=lydian}', "");
Expect(1, 67903, '\P{^Blk=lydian}', "");
Expect(0, 67871, '\p{Blk=lydian}', "");
Expect(1, 67871, '\p{^Blk=lydian}', "");
Expect(1, 67871, '\P{Blk=lydian}', "");
Expect(0, 67871, '\P{^Blk=lydian}', "");
Expect(1, 67903, '\p{Blk= -LYDIAN}', "");
Expect(0, 67903, '\p{^Blk= -LYDIAN}', "");
Expect(0, 67903, '\P{Blk= -LYDIAN}', "");
Expect(1, 67903, '\P{^Blk= -LYDIAN}', "");
Expect(0, 67871, '\p{Blk= -LYDIAN}', "");
Expect(1, 67871, '\p{^Blk= -LYDIAN}', "");
Expect(1, 67871, '\P{Blk= -LYDIAN}', "");
Expect(0, 67871, '\P{^Blk= -LYDIAN}', "");
Error('\p{Is_Block=:=-	LYDIAN}');
Error('\P{Is_Block=:=-	LYDIAN}');
Expect(1, 67903, '\p{Is_Block=lydian}', "");
Expect(0, 67903, '\p{^Is_Block=lydian}', "");
Expect(0, 67903, '\P{Is_Block=lydian}', "");
Expect(1, 67903, '\P{^Is_Block=lydian}', "");
Expect(0, 67871, '\p{Is_Block=lydian}', "");
Expect(1, 67871, '\p{^Is_Block=lydian}', "");
Expect(1, 67871, '\P{Is_Block=lydian}', "");
Expect(0, 67871, '\P{^Is_Block=lydian}', "");
Expect(1, 67903, '\p{Is_Block=-LYDIAN}', "");
Expect(0, 67903, '\p{^Is_Block=-LYDIAN}', "");
Expect(0, 67903, '\P{Is_Block=-LYDIAN}', "");
Expect(1, 67903, '\P{^Is_Block=-LYDIAN}', "");
Expect(0, 67871, '\p{Is_Block=-LYDIAN}', "");
Expect(1, 67871, '\p{^Is_Block=-LYDIAN}', "");
Expect(1, 67871, '\P{Is_Block=-LYDIAN}', "");
Expect(0, 67871, '\P{^Is_Block=-LYDIAN}', "");
Error('\p{Is_Blk: :=__Lydian}');
Error('\P{Is_Blk: :=__Lydian}');
Expect(1, 67903, '\p{Is_Blk=lydian}', "");
Expect(0, 67903, '\p{^Is_Blk=lydian}', "");
Expect(0, 67903, '\P{Is_Blk=lydian}', "");
Expect(1, 67903, '\P{^Is_Blk=lydian}', "");
Expect(0, 67871, '\p{Is_Blk=lydian}', "");
Expect(1, 67871, '\p{^Is_Blk=lydian}', "");
Expect(1, 67871, '\P{Is_Blk=lydian}', "");
Expect(0, 67871, '\P{^Is_Blk=lydian}', "");
Expect(1, 67903, '\p{Is_Blk=LYDIAN}', "");
Expect(0, 67903, '\p{^Is_Blk=LYDIAN}', "");
Expect(0, 67903, '\P{Is_Blk=LYDIAN}', "");
Expect(1, 67903, '\P{^Is_Blk=LYDIAN}', "");
Expect(0, 67871, '\p{Is_Blk=LYDIAN}', "");
Expect(1, 67871, '\p{^Is_Blk=LYDIAN}', "");
Expect(1, 67871, '\P{Is_Blk=LYDIAN}', "");
Expect(0, 67871, '\P{^Is_Blk=LYDIAN}', "");
Error('\p{Block=/a/	CJK-Unified_IDEOGRAPHS	Extension-C}');
Error('\P{Block=/a/	CJK-Unified_IDEOGRAPHS	Extension-C}');
Expect(1, 177983, '\p{Block=cjkunifiedideographsextensionc}', "");
Expect(0, 177983, '\p{^Block=cjkunifiedideographsextensionc}', "");
Expect(0, 177983, '\P{Block=cjkunifiedideographsextensionc}', "");
Expect(1, 177983, '\P{^Block=cjkunifiedideographsextensionc}', "");
Expect(0, 173823, '\p{Block=cjkunifiedideographsextensionc}', "");
Expect(1, 173823, '\p{^Block=cjkunifiedideographsextensionc}', "");
Expect(1, 173823, '\P{Block=cjkunifiedideographsextensionc}', "");
Expect(0, 173823, '\P{^Block=cjkunifiedideographsextensionc}', "");
Expect(1, 177983, '\p{Block=__CJK	unified	IDEOGRAPHS extensionC}', "");
Expect(0, 177983, '\p{^Block=__CJK	unified	IDEOGRAPHS extensionC}', "");
Expect(0, 177983, '\P{Block=__CJK	unified	IDEOGRAPHS extensionC}', "");
Expect(1, 177983, '\P{^Block=__CJK	unified	IDEOGRAPHS extensionC}', "");
Expect(0, 173823, '\p{Block=__CJK	unified	IDEOGRAPHS extensionC}', "");
Expect(1, 173823, '\p{^Block=__CJK	unified	IDEOGRAPHS extensionC}', "");
Expect(1, 173823, '\P{Block=__CJK	unified	IDEOGRAPHS extensionC}', "");
Expect(0, 173823, '\P{^Block=__CJK	unified	IDEOGRAPHS extensionC}', "");
Error('\p{Blk=	_CJK-Unified:=IDEOGRAPHS	EXTENSIONC}');
Error('\P{Blk=	_CJK-Unified:=IDEOGRAPHS	EXTENSIONC}');
Expect(1, 177983, '\p{Blk:   cjkunifiedideographsextensionc}', "");
Expect(0, 177983, '\p{^Blk:   cjkunifiedideographsextensionc}', "");
Expect(0, 177983, '\P{Blk:   cjkunifiedideographsextensionc}', "");
Expect(1, 177983, '\P{^Blk:   cjkunifiedideographsextensionc}', "");
Expect(0, 173823, '\p{Blk:   cjkunifiedideographsextensionc}', "");
Expect(1, 173823, '\p{^Blk:   cjkunifiedideographsextensionc}', "");
Expect(1, 173823, '\P{Blk:   cjkunifiedideographsextensionc}', "");
Expect(0, 173823, '\P{^Blk:   cjkunifiedideographsextensionc}', "");
Expect(1, 177983, '\p{Blk:  CJK	UNIFIED_IdeographsExtension C}', "");
Expect(0, 177983, '\p{^Blk:  CJK	UNIFIED_IdeographsExtension C}', "");
Expect(0, 177983, '\P{Blk:  CJK	UNIFIED_IdeographsExtension C}', "");
Expect(1, 177983, '\P{^Blk:  CJK	UNIFIED_IdeographsExtension C}', "");
Expect(0, 173823, '\p{Blk:  CJK	UNIFIED_IdeographsExtension C}', "");
Expect(1, 173823, '\p{^Blk:  CJK	UNIFIED_IdeographsExtension C}', "");
Expect(1, 173823, '\P{Blk:  CJK	UNIFIED_IdeographsExtension C}', "");
Expect(0, 173823, '\P{^Blk:  CJK	UNIFIED_IdeographsExtension C}', "");
Error('\p{Is_Block=	:=CJK-UNIFIED-Ideographs EXTENSIONC}');
Error('\P{Is_Block=	:=CJK-UNIFIED-Ideographs EXTENSIONC}');
Expect(1, 177983, '\p{Is_Block=cjkunifiedideographsextensionc}', "");
Expect(0, 177983, '\p{^Is_Block=cjkunifiedideographsextensionc}', "");
Expect(0, 177983, '\P{Is_Block=cjkunifiedideographsextensionc}', "");
Expect(1, 177983, '\P{^Is_Block=cjkunifiedideographsextensionc}', "");
Expect(0, 173823, '\p{Is_Block=cjkunifiedideographsextensionc}', "");
Expect(1, 173823, '\p{^Is_Block=cjkunifiedideographsextensionc}', "");
Expect(1, 173823, '\P{Is_Block=cjkunifiedideographsextensionc}', "");
Expect(0, 173823, '\P{^Is_Block=cjkunifiedideographsextensionc}', "");
Expect(1, 177983, '\p{Is_Block=	_CJKUnified-IDEOGRAPHS_Extension-C}', "");
Expect(0, 177983, '\p{^Is_Block=	_CJKUnified-IDEOGRAPHS_Extension-C}', "");
Expect(0, 177983, '\P{Is_Block=	_CJKUnified-IDEOGRAPHS_Extension-C}', "");
Expect(1, 177983, '\P{^Is_Block=	_CJKUnified-IDEOGRAPHS_Extension-C}', "");
Expect(0, 173823, '\p{Is_Block=	_CJKUnified-IDEOGRAPHS_Extension-C}', "");
Expect(1, 173823, '\p{^Is_Block=	_CJKUnified-IDEOGRAPHS_Extension-C}', "");
Expect(1, 173823, '\P{Is_Block=	_CJKUnified-IDEOGRAPHS_Extension-C}', "");
Expect(0, 173823, '\P{^Is_Block=	_CJKUnified-IDEOGRAPHS_Extension-C}', "");
Error('\p{Is_Blk: /a/_cjk-unified-Ideographs	extension-C}');
Error('\P{Is_Blk: /a/_cjk-unified-Ideographs	extension-C}');
Expect(1, 177983, '\p{Is_Blk=cjkunifiedideographsextensionc}', "");
Expect(0, 177983, '\p{^Is_Blk=cjkunifiedideographsextensionc}', "");
Expect(0, 177983, '\P{Is_Blk=cjkunifiedideographsextensionc}', "");
Expect(1, 177983, '\P{^Is_Blk=cjkunifiedideographsextensionc}', "");
Expect(0, 173823, '\p{Is_Blk=cjkunifiedideographsextensionc}', "");
Expect(1, 173823, '\p{^Is_Blk=cjkunifiedideographsextensionc}', "");
Expect(1, 173823, '\P{Is_Blk=cjkunifiedideographsextensionc}', "");
Expect(0, 173823, '\P{^Is_Blk=cjkunifiedideographsextensionc}', "");
Expect(1, 177983, '\p{Is_Blk=	 cjk	UNIFIED ideographs-EXTENSION	C}', "");
Expect(0, 177983, '\p{^Is_Blk=	 cjk	UNIFIED ideographs-EXTENSION	C}', "");
Expect(0, 177983, '\P{Is_Blk=	 cjk	UNIFIED ideographs-EXTENSION	C}', "");
Expect(1, 177983, '\P{^Is_Blk=	 cjk	UNIFIED ideographs-EXTENSION	C}', "");
Expect(0, 173823, '\p{Is_Blk=	 cjk	UNIFIED ideographs-EXTENSION	C}', "");
Expect(1, 173823, '\p{^Is_Blk=	 cjk	UNIFIED ideographs-EXTENSION	C}', "");
Expect(1, 173823, '\P{Is_Blk=	 cjk	UNIFIED ideographs-EXTENSION	C}', "");
Expect(0, 173823, '\P{^Is_Blk=	 cjk	UNIFIED ideographs-EXTENSION	C}', "");
Error('\p{Block:_mongolian/a/}');
Error('\P{Block:_mongolian/a/}');
Expect(1, 6319, '\p{Block=mongolian}', "");
Expect(0, 6319, '\p{^Block=mongolian}', "");
Expect(0, 6319, '\P{Block=mongolian}', "");
Expect(1, 6319, '\P{^Block=mongolian}', "");
Expect(0, 6143, '\p{Block=mongolian}', "");
Expect(1, 6143, '\p{^Block=mongolian}', "");
Expect(1, 6143, '\P{Block=mongolian}', "");
Expect(0, 6143, '\P{^Block=mongolian}', "");
Expect(1, 6319, '\p{Block=_-mongolian}', "");
Expect(0, 6319, '\p{^Block=_-mongolian}', "");
Expect(0, 6319, '\P{Block=_-mongolian}', "");
Expect(1, 6319, '\P{^Block=_-mongolian}', "");
Expect(0, 6143, '\p{Block=_-mongolian}', "");
Expect(1, 6143, '\p{^Block=_-mongolian}', "");
Expect(1, 6143, '\P{Block=_-mongolian}', "");
Expect(0, 6143, '\P{^Block=_-mongolian}', "");
Error('\p{Blk=	Mongolian:=}');
Error('\P{Blk=	Mongolian:=}');
Expect(1, 6319, '\p{Blk=mongolian}', "");
Expect(0, 6319, '\p{^Blk=mongolian}', "");
Expect(0, 6319, '\P{Blk=mongolian}', "");
Expect(1, 6319, '\P{^Blk=mongolian}', "");
Expect(0, 6143, '\p{Blk=mongolian}', "");
Expect(1, 6143, '\p{^Blk=mongolian}', "");
Expect(1, 6143, '\P{Blk=mongolian}', "");
Expect(0, 6143, '\P{^Blk=mongolian}', "");
Expect(1, 6319, '\p{Blk=	MONGOLIAN}', "");
Expect(0, 6319, '\p{^Blk=	MONGOLIAN}', "");
Expect(0, 6319, '\P{Blk=	MONGOLIAN}', "");
Expect(1, 6319, '\P{^Blk=	MONGOLIAN}', "");
Expect(0, 6143, '\p{Blk=	MONGOLIAN}', "");
Expect(1, 6143, '\p{^Blk=	MONGOLIAN}', "");
Expect(1, 6143, '\P{Blk=	MONGOLIAN}', "");
Expect(0, 6143, '\P{^Blk=	MONGOLIAN}', "");
Error('\p{Is_Block= /a/Mongolian}');
Error('\P{Is_Block= /a/Mongolian}');
Expect(1, 6319, '\p{Is_Block:	mongolian}', "");
Expect(0, 6319, '\p{^Is_Block:	mongolian}', "");
Expect(0, 6319, '\P{Is_Block:	mongolian}', "");
Expect(1, 6319, '\P{^Is_Block:	mongolian}', "");
Expect(0, 6143, '\p{Is_Block:	mongolian}', "");
Expect(1, 6143, '\p{^Is_Block:	mongolian}', "");
Expect(1, 6143, '\P{Is_Block:	mongolian}', "");
Expect(0, 6143, '\P{^Is_Block:	mongolian}', "");
Expect(1, 6319, '\p{Is_Block= 	MONGOLIAN}', "");
Expect(0, 6319, '\p{^Is_Block= 	MONGOLIAN}', "");
Expect(0, 6319, '\P{Is_Block= 	MONGOLIAN}', "");
Expect(1, 6319, '\P{^Is_Block= 	MONGOLIAN}', "");
Expect(0, 6143, '\p{Is_Block= 	MONGOLIAN}', "");
Expect(1, 6143, '\p{^Is_Block= 	MONGOLIAN}', "");
Expect(1, 6143, '\P{Is_Block= 	MONGOLIAN}', "");
Expect(0, 6143, '\P{^Is_Block= 	MONGOLIAN}', "");
Error('\p{Is_Blk=--MONGOLIAN/a/}');
Error('\P{Is_Blk=--MONGOLIAN/a/}');
Expect(1, 6319, '\p{Is_Blk=mongolian}', "");
Expect(0, 6319, '\p{^Is_Blk=mongolian}', "");
Expect(0, 6319, '\P{Is_Blk=mongolian}', "");
Expect(1, 6319, '\P{^Is_Blk=mongolian}', "");
Expect(0, 6143, '\p{Is_Blk=mongolian}', "");
Expect(1, 6143, '\p{^Is_Blk=mongolian}', "");
Expect(1, 6143, '\P{Is_Blk=mongolian}', "");
Expect(0, 6143, '\P{^Is_Blk=mongolian}', "");
Expect(1, 6319, '\p{Is_Blk=-Mongolian}', "");
Expect(0, 6319, '\p{^Is_Blk=-Mongolian}', "");
Expect(0, 6319, '\P{Is_Blk=-Mongolian}', "");
Expect(1, 6319, '\P{^Is_Blk=-Mongolian}', "");
Expect(0, 6143, '\p{Is_Blk=-Mongolian}', "");
Expect(1, 6143, '\p{^Is_Blk=-Mongolian}', "");
Expect(1, 6143, '\P{Is_Blk=-Mongolian}', "");
Expect(0, 6143, '\P{^Is_Blk=-Mongolian}', "");
Error('\p{Block=:=_Lao}');
Error('\P{Block=:=_Lao}');
Expect(1, 3839, '\p{Block:lao}', "");
Expect(0, 3839, '\p{^Block:lao}', "");
Expect(0, 3839, '\P{Block:lao}', "");
Expect(1, 3839, '\P{^Block:lao}', "");
Expect(0, 3711, '\p{Block:lao}', "");
Expect(1, 3711, '\p{^Block:lao}', "");
Expect(1, 3711, '\P{Block:lao}', "");
Expect(0, 3711, '\P{^Block:lao}', "");
Expect(1, 3839, '\p{Block=_ Lao}', "");
Expect(0, 3839, '\p{^Block=_ Lao}', "");
Expect(0, 3839, '\P{Block=_ Lao}', "");
Expect(1, 3839, '\P{^Block=_ Lao}', "");
Expect(0, 3711, '\p{Block=_ Lao}', "");
Expect(1, 3711, '\p{^Block=_ Lao}', "");
Expect(1, 3711, '\P{Block=_ Lao}', "");
Expect(0, 3711, '\P{^Block=_ Lao}', "");
Error('\p{Blk=_/a/lao}');
Error('\P{Blk=_/a/lao}');
Expect(1, 3839, '\p{Blk=lao}', "");
Expect(0, 3839, '\p{^Blk=lao}', "");
Expect(0, 3839, '\P{Blk=lao}', "");
Expect(1, 3839, '\P{^Blk=lao}', "");
Expect(0, 3711, '\p{Blk=lao}', "");
Expect(1, 3711, '\p{^Blk=lao}', "");
Expect(1, 3711, '\P{Blk=lao}', "");
Expect(0, 3711, '\P{^Blk=lao}', "");
Expect(1, 3839, '\p{Blk=-_LAO}', "");
Expect(0, 3839, '\p{^Blk=-_LAO}', "");
Expect(0, 3839, '\P{Blk=-_LAO}', "");
Expect(1, 3839, '\P{^Blk=-_LAO}', "");
Expect(0, 3711, '\p{Blk=-_LAO}', "");
Expect(1, 3711, '\p{^Blk=-_LAO}', "");
Expect(1, 3711, '\P{Blk=-_LAO}', "");
Expect(0, 3711, '\P{^Blk=-_LAO}', "");
Error('\p{Is_Block=/a/-	Lao}');
Error('\P{Is_Block=/a/-	Lao}');
Expect(1, 3839, '\p{Is_Block=lao}', "");
Expect(0, 3839, '\p{^Is_Block=lao}', "");
Expect(0, 3839, '\P{Is_Block=lao}', "");
Expect(1, 3839, '\P{^Is_Block=lao}', "");
Expect(0, 3711, '\p{Is_Block=lao}', "");
Expect(1, 3711, '\p{^Is_Block=lao}', "");
Expect(1, 3711, '\P{Is_Block=lao}', "");
Expect(0, 3711, '\P{^Is_Block=lao}', "");
Expect(1, 3839, '\p{Is_Block=_Lao}', "");
Expect(0, 3839, '\p{^Is_Block=_Lao}', "");
Expect(0, 3839, '\P{Is_Block=_Lao}', "");
Expect(1, 3839, '\P{^Is_Block=_Lao}', "");
Expect(0, 3711, '\p{Is_Block=_Lao}', "");
Expect(1, 3711, '\p{^Is_Block=_Lao}', "");
Expect(1, 3711, '\P{Is_Block=_Lao}', "");
Expect(0, 3711, '\P{^Is_Block=_Lao}', "");
Error('\p{Is_Blk= _Lao/a/}');
Error('\P{Is_Blk= _Lao/a/}');
Expect(1, 3839, '\p{Is_Blk=lao}', "");
Expect(0, 3839, '\p{^Is_Blk=lao}', "");
Expect(0, 3839, '\P{Is_Blk=lao}', "");
Expect(1, 3839, '\P{^Is_Blk=lao}', "");
Expect(0, 3711, '\p{Is_Blk=lao}', "");
Expect(1, 3711, '\p{^Is_Blk=lao}', "");
Expect(1, 3711, '\P{Is_Blk=lao}', "");
Expect(0, 3711, '\P{^Is_Blk=lao}', "");
Expect(1, 3839, '\p{Is_Blk=	lao}', "");
Expect(0, 3839, '\p{^Is_Blk=	lao}', "");
Expect(0, 3839, '\P{Is_Blk=	lao}', "");
Expect(1, 3839, '\P{^Is_Blk=	lao}', "");
Expect(0, 3711, '\p{Is_Blk=	lao}', "");
Expect(1, 3711, '\p{^Is_Blk=	lao}', "");
Expect(1, 3711, '\P{Is_Blk=	lao}', "");
Expect(0, 3711, '\P{^Is_Blk=	lao}', "");
Error('\p{Block=:= -HIRAGANA}');
Error('\P{Block=:= -HIRAGANA}');
Expect(1, 12447, '\p{Block:	hiragana}', "");
Expect(0, 12447, '\p{^Block:	hiragana}', "");
Expect(0, 12447, '\P{Block:	hiragana}', "");
Expect(1, 12447, '\P{^Block:	hiragana}', "");
Expect(0, 12351, '\p{Block:	hiragana}', "");
Expect(1, 12351, '\p{^Block:	hiragana}', "");
Expect(1, 12351, '\P{Block:	hiragana}', "");
Expect(0, 12351, '\P{^Block:	hiragana}', "");
Expect(1, 12447, '\p{Block=- Hiragana}', "");
Expect(0, 12447, '\p{^Block=- Hiragana}', "");
Expect(0, 12447, '\P{Block=- Hiragana}', "");
Expect(1, 12447, '\P{^Block=- Hiragana}', "");
Expect(0, 12351, '\p{Block=- Hiragana}', "");
Expect(1, 12351, '\p{^Block=- Hiragana}', "");
Expect(1, 12351, '\P{Block=- Hiragana}', "");
Expect(0, 12351, '\P{^Block=- Hiragana}', "");
Error('\p{Blk=-:=Hiragana}');
Error('\P{Blk=-:=Hiragana}');
Expect(1, 12447, '\p{Blk=hiragana}', "");
Expect(0, 12447, '\p{^Blk=hiragana}', "");
Expect(0, 12447, '\P{Blk=hiragana}', "");
Expect(1, 12447, '\P{^Blk=hiragana}', "");
Expect(0, 12351, '\p{Blk=hiragana}', "");
Expect(1, 12351, '\p{^Blk=hiragana}', "");
Expect(1, 12351, '\P{Blk=hiragana}', "");
Expect(0, 12351, '\P{^Blk=hiragana}', "");
Expect(1, 12447, '\p{Blk=-Hiragana}', "");
Expect(0, 12447, '\p{^Blk=-Hiragana}', "");
Expect(0, 12447, '\P{Blk=-Hiragana}', "");
Expect(1, 12447, '\P{^Blk=-Hiragana}', "");
Expect(0, 12351, '\p{Blk=-Hiragana}', "");
Expect(1, 12351, '\p{^Blk=-Hiragana}', "");
Expect(1, 12351, '\P{Blk=-Hiragana}', "");
Expect(0, 12351, '\P{^Blk=-Hiragana}', "");
Error('\p{Is_Block:   /a/-	hiragana}');
Error('\P{Is_Block:   /a/-	hiragana}');
Expect(1, 12447, '\p{Is_Block=hiragana}', "");
Expect(0, 12447, '\p{^Is_Block=hiragana}', "");
Expect(0, 12447, '\P{Is_Block=hiragana}', "");
Expect(1, 12447, '\P{^Is_Block=hiragana}', "");
Expect(0, 12351, '\p{Is_Block=hiragana}', "");
Expect(1, 12351, '\p{^Is_Block=hiragana}', "");
Expect(1, 12351, '\P{Is_Block=hiragana}', "");
Expect(0, 12351, '\P{^Is_Block=hiragana}', "");
Expect(1, 12447, '\p{Is_Block=	 Hiragana}', "");
Expect(0, 12447, '\p{^Is_Block=	 Hiragana}', "");
Expect(0, 12447, '\P{Is_Block=	 Hiragana}', "");
Expect(1, 12447, '\P{^Is_Block=	 Hiragana}', "");
Expect(0, 12351, '\p{Is_Block=	 Hiragana}', "");
Expect(1, 12351, '\p{^Is_Block=	 Hiragana}', "");
Expect(1, 12351, '\P{Is_Block=	 Hiragana}', "");
Expect(0, 12351, '\P{^Is_Block=	 Hiragana}', "");
Error('\p{Is_Blk=__hiragana/a/}');
Error('\P{Is_Blk=__hiragana/a/}');
Expect(1, 12447, '\p{Is_Blk=hiragana}', "");
Expect(0, 12447, '\p{^Is_Blk=hiragana}', "");
Expect(0, 12447, '\P{Is_Blk=hiragana}', "");
Expect(1, 12447, '\P{^Is_Blk=hiragana}', "");
Expect(0, 12351, '\p{Is_Blk=hiragana}', "");
Expect(1, 12351, '\p{^Is_Blk=hiragana}', "");
Expect(1, 12351, '\P{Is_Blk=hiragana}', "");
Expect(0, 12351, '\P{^Is_Blk=hiragana}', "");
Expect(1, 12447, '\p{Is_Blk=--HIRAGANA}', "");
Expect(0, 12447, '\p{^Is_Blk=--HIRAGANA}', "");
Expect(0, 12447, '\P{Is_Blk=--HIRAGANA}', "");
Expect(1, 12447, '\P{^Is_Blk=--HIRAGANA}', "");
Expect(0, 12351, '\p{Is_Blk=--HIRAGANA}', "");
Expect(1, 12351, '\p{^Is_Blk=--HIRAGANA}', "");
Expect(1, 12351, '\P{Is_Blk=--HIRAGANA}', "");
Expect(0, 12351, '\P{^Is_Blk=--HIRAGANA}', "");
Error('\p{Block=	_lepcha/a/}');
Error('\P{Block=	_lepcha/a/}');
Expect(1, 7247, '\p{Block=lepcha}', "");
Expect(0, 7247, '\p{^Block=lepcha}', "");
Expect(0, 7247, '\P{Block=lepcha}', "");
Expect(1, 7247, '\P{^Block=lepcha}', "");
Expect(0, 7167, '\p{Block=lepcha}', "");
Expect(1, 7167, '\p{^Block=lepcha}', "");
Expect(1, 7167, '\P{Block=lepcha}', "");
Expect(0, 7167, '\P{^Block=lepcha}', "");
Expect(1, 7247, '\p{Block=	_Lepcha}', "");
Expect(0, 7247, '\p{^Block=	_Lepcha}', "");
Expect(0, 7247, '\P{Block=	_Lepcha}', "");
Expect(1, 7247, '\P{^Block=	_Lepcha}', "");
Expect(0, 7167, '\p{Block=	_Lepcha}', "");
Expect(1, 7167, '\p{^Block=	_Lepcha}', "");
Expect(1, 7167, '\P{Block=	_Lepcha}', "");
Expect(0, 7167, '\P{^Block=	_Lepcha}', "");
Error('\p{Blk=LEPCHA:=}');
Error('\P{Blk=LEPCHA:=}');
Expect(1, 7247, '\p{Blk=lepcha}', "");
Expect(0, 7247, '\p{^Blk=lepcha}', "");
Expect(0, 7247, '\P{Blk=lepcha}', "");
Expect(1, 7247, '\P{^Blk=lepcha}', "");
Expect(0, 7167, '\p{Blk=lepcha}', "");
Expect(1, 7167, '\p{^Blk=lepcha}', "");
Expect(1, 7167, '\P{Blk=lepcha}', "");
Expect(0, 7167, '\P{^Blk=lepcha}', "");
Expect(1, 7247, '\p{Blk=	_lepcha}', "");
Expect(0, 7247, '\p{^Blk=	_lepcha}', "");
Expect(0, 7247, '\P{Blk=	_lepcha}', "");
Expect(1, 7247, '\P{^Blk=	_lepcha}', "");
Expect(0, 7167, '\p{Blk=	_lepcha}', "");
Expect(1, 7167, '\p{^Blk=	_lepcha}', "");
Expect(1, 7167, '\P{Blk=	_lepcha}', "");
Expect(0, 7167, '\P{^Blk=	_lepcha}', "");
Error('\p{Is_Block=/a/-_Lepcha}');
Error('\P{Is_Block=/a/-_Lepcha}');
Expect(1, 7247, '\p{Is_Block:	lepcha}', "");
Expect(0, 7247, '\p{^Is_Block:	lepcha}', "");
Expect(0, 7247, '\P{Is_Block:	lepcha}', "");
Expect(1, 7247, '\P{^Is_Block:	lepcha}', "");
Expect(0, 7167, '\p{Is_Block:	lepcha}', "");
Expect(1, 7167, '\p{^Is_Block:	lepcha}', "");
Expect(1, 7167, '\P{Is_Block:	lepcha}', "");
Expect(0, 7167, '\P{^Is_Block:	lepcha}', "");
Expect(1, 7247, '\p{Is_Block=-	Lepcha}', "");
Expect(0, 7247, '\p{^Is_Block=-	Lepcha}', "");
Expect(0, 7247, '\P{Is_Block=-	Lepcha}', "");
Expect(1, 7247, '\P{^Is_Block=-	Lepcha}', "");
Expect(0, 7167, '\p{Is_Block=-	Lepcha}', "");
Expect(1, 7167, '\p{^Is_Block=-	Lepcha}', "");
Expect(1, 7167, '\P{Is_Block=-	Lepcha}', "");
Expect(0, 7167, '\P{^Is_Block=-	Lepcha}', "");
Error('\p{Is_Blk=_/a/LEPCHA}');
Error('\P{Is_Blk=_/a/LEPCHA}');
Expect(1, 7247, '\p{Is_Blk=lepcha}', "");
Expect(0, 7247, '\p{^Is_Blk=lepcha}', "");
Expect(0, 7247, '\P{Is_Blk=lepcha}', "");
Expect(1, 7247, '\P{^Is_Blk=lepcha}', "");
Expect(0, 7167, '\p{Is_Blk=lepcha}', "");
Expect(1, 7167, '\p{^Is_Blk=lepcha}', "");
Expect(1, 7167, '\P{Is_Blk=lepcha}', "");
Expect(0, 7167, '\P{^Is_Blk=lepcha}', "");
Expect(1, 7247, '\p{Is_Blk=_-Lepcha}', "");
Expect(0, 7247, '\p{^Is_Blk=_-Lepcha}', "");
Expect(0, 7247, '\P{Is_Blk=_-Lepcha}', "");
Expect(1, 7247, '\P{^Is_Blk=_-Lepcha}', "");
Expect(0, 7167, '\p{Is_Blk=_-Lepcha}', "");
Expect(1, 7167, '\p{^Is_Blk=_-Lepcha}', "");
Expect(1, 7167, '\P{Is_Blk=_-Lepcha}', "");
Expect(0, 7167, '\P{^Is_Blk=_-Lepcha}', "");
Error('\p{Block=/a/_syloti	Nagri}');
Error('\P{Block=/a/_syloti	Nagri}');
Expect(1, 43055, '\p{Block=sylotinagri}', "");
Expect(0, 43055, '\p{^Block=sylotinagri}', "");
Expect(0, 43055, '\P{Block=sylotinagri}', "");
Expect(1, 43055, '\P{^Block=sylotinagri}', "");
Expect(0, 43007, '\p{Block=sylotinagri}', "");
Expect(1, 43007, '\p{^Block=sylotinagri}', "");
Expect(1, 43007, '\P{Block=sylotinagri}', "");
Expect(0, 43007, '\P{^Block=sylotinagri}', "");
Expect(1, 43055, '\p{Block:   --SYLOTI NAGRI}', "");
Expect(0, 43055, '\p{^Block:   --SYLOTI NAGRI}', "");
Expect(0, 43055, '\P{Block:   --SYLOTI NAGRI}', "");
Expect(1, 43055, '\P{^Block:   --SYLOTI NAGRI}', "");
Expect(0, 43007, '\p{Block:   --SYLOTI NAGRI}', "");
Expect(1, 43007, '\p{^Block:   --SYLOTI NAGRI}', "");
Expect(1, 43007, '\P{Block:   --SYLOTI NAGRI}', "");
Expect(0, 43007, '\P{^Block:   --SYLOTI NAGRI}', "");
Error('\p{Blk= 	Syloti	nagri/a/}');
Error('\P{Blk= 	Syloti	nagri/a/}');
Expect(1, 43055, '\p{Blk=sylotinagri}', "");
Expect(0, 43055, '\p{^Blk=sylotinagri}', "");
Expect(0, 43055, '\P{Blk=sylotinagri}', "");
Expect(1, 43055, '\P{^Blk=sylotinagri}', "");
Expect(0, 43007, '\p{Blk=sylotinagri}', "");
Expect(1, 43007, '\p{^Blk=sylotinagri}', "");
Expect(1, 43007, '\P{Blk=sylotinagri}', "");
Expect(0, 43007, '\P{^Blk=sylotinagri}', "");
Expect(1, 43055, '\p{Blk=--Syloti NAGRI}', "");
Expect(0, 43055, '\p{^Blk=--Syloti NAGRI}', "");
Expect(0, 43055, '\P{Blk=--Syloti NAGRI}', "");
Expect(1, 43055, '\P{^Blk=--Syloti NAGRI}', "");
Expect(0, 43007, '\p{Blk=--Syloti NAGRI}', "");
Expect(1, 43007, '\p{^Blk=--Syloti NAGRI}', "");
Expect(1, 43007, '\P{Blk=--Syloti NAGRI}', "");
Expect(0, 43007, '\P{^Blk=--Syloti NAGRI}', "");
Error('\p{Is_Block= /a/Syloti NAGRI}');
Error('\P{Is_Block= /a/Syloti NAGRI}');
Expect(1, 43055, '\p{Is_Block=sylotinagri}', "");
Expect(0, 43055, '\p{^Is_Block=sylotinagri}', "");
Expect(0, 43055, '\P{Is_Block=sylotinagri}', "");
Expect(1, 43055, '\P{^Is_Block=sylotinagri}', "");
Expect(0, 43007, '\p{Is_Block=sylotinagri}', "");
Expect(1, 43007, '\p{^Is_Block=sylotinagri}', "");
Expect(1, 43007, '\P{Is_Block=sylotinagri}', "");
Expect(0, 43007, '\P{^Is_Block=sylotinagri}', "");
Expect(1, 43055, '\p{Is_Block=	syloti Nagri}', "");
Expect(0, 43055, '\p{^Is_Block=	syloti Nagri}', "");
Expect(0, 43055, '\P{Is_Block=	syloti Nagri}', "");
Expect(1, 43055, '\P{^Is_Block=	syloti Nagri}', "");
Expect(0, 43007, '\p{Is_Block=	syloti Nagri}', "");
Expect(1, 43007, '\p{^Is_Block=	syloti Nagri}', "");
Expect(1, 43007, '\P{Is_Block=	syloti Nagri}', "");
Expect(0, 43007, '\P{^Is_Block=	syloti Nagri}', "");
Error('\p{Is_Blk= :=Syloti Nagri}');
Error('\P{Is_Blk= :=Syloti Nagri}');
Expect(1, 43055, '\p{Is_Blk:   sylotinagri}', "");
Expect(0, 43055, '\p{^Is_Blk:   sylotinagri}', "");
Expect(0, 43055, '\P{Is_Blk:   sylotinagri}', "");
Expect(1, 43055, '\P{^Is_Blk:   sylotinagri}', "");
Expect(0, 43007, '\p{Is_Blk:   sylotinagri}', "");
Expect(1, 43007, '\p{^Is_Blk:   sylotinagri}', "");
Expect(1, 43007, '\P{Is_Blk:   sylotinagri}', "");
Expect(0, 43007, '\P{^Is_Blk:   sylotinagri}', "");
Expect(1, 43055, '\p{Is_Blk=	Syloti-Nagri}', "");
Expect(0, 43055, '\p{^Is_Blk=	Syloti-Nagri}', "");
Expect(0, 43055, '\P{Is_Blk=	Syloti-Nagri}', "");
Expect(1, 43055, '\P{^Is_Blk=	Syloti-Nagri}', "");
Expect(0, 43007, '\p{Is_Blk=	Syloti-Nagri}', "");
Expect(1, 43007, '\p{^Is_Blk=	Syloti-Nagri}', "");
Expect(1, 43007, '\P{Is_Blk=	Syloti-Nagri}', "");
Expect(0, 43007, '\P{^Is_Blk=	Syloti-Nagri}', "");
Error('\p{Block=_	Combining:=diacritical Marks ForSymbols}');
Error('\P{Block=_	Combining:=diacritical Marks ForSymbols}');
Expect(1, 8447, '\p{Block=combiningdiacriticalmarksforsymbols}', "");
Expect(0, 8447, '\p{^Block=combiningdiacriticalmarksforsymbols}', "");
Expect(0, 8447, '\P{Block=combiningdiacriticalmarksforsymbols}', "");
Expect(1, 8447, '\P{^Block=combiningdiacriticalmarksforsymbols}', "");
Expect(0, 8399, '\p{Block=combiningdiacriticalmarksforsymbols}', "");
Expect(1, 8399, '\p{^Block=combiningdiacriticalmarksforsymbols}', "");
Expect(1, 8399, '\P{Block=combiningdiacriticalmarksforsymbols}', "");
Expect(0, 8399, '\P{^Block=combiningdiacriticalmarksforsymbols}', "");
Expect(1, 8447, '\p{Block=__combining	Diacritical_marks	For	SYMBOLS}', "");
Expect(0, 8447, '\p{^Block=__combining	Diacritical_marks	For	SYMBOLS}', "");
Expect(0, 8447, '\P{Block=__combining	Diacritical_marks	For	SYMBOLS}', "");
Expect(1, 8447, '\P{^Block=__combining	Diacritical_marks	For	SYMBOLS}', "");
Expect(0, 8399, '\p{Block=__combining	Diacritical_marks	For	SYMBOLS}', "");
Expect(1, 8399, '\p{^Block=__combining	Diacritical_marks	For	SYMBOLS}', "");
Expect(1, 8399, '\P{Block=__combining	Diacritical_marks	For	SYMBOLS}', "");
Expect(0, 8399, '\P{^Block=__combining	Diacritical_marks	For	SYMBOLS}', "");
Error('\p{Blk=-:=Combining marks_For	Symbols}');
Error('\P{Blk=-:=Combining marks_For	Symbols}');
Expect(1, 8447, '\p{Blk=combiningmarksforsymbols}', "");
Expect(0, 8447, '\p{^Blk=combiningmarksforsymbols}', "");
Expect(0, 8447, '\P{Blk=combiningmarksforsymbols}', "");
Expect(1, 8447, '\P{^Blk=combiningmarksforsymbols}', "");
Expect(0, 8399, '\p{Blk=combiningmarksforsymbols}', "");
Expect(1, 8399, '\p{^Blk=combiningmarksforsymbols}', "");
Expect(1, 8399, '\P{Blk=combiningmarksforsymbols}', "");
Expect(0, 8399, '\P{^Blk=combiningmarksforsymbols}', "");
Expect(1, 8447, '\p{Blk:-	Combining_marks-For symbols}', "");
Expect(0, 8447, '\p{^Blk:-	Combining_marks-For symbols}', "");
Expect(0, 8447, '\P{Blk:-	Combining_marks-For symbols}', "");
Expect(1, 8447, '\P{^Blk:-	Combining_marks-For symbols}', "");
Expect(0, 8399, '\p{Blk:-	Combining_marks-For symbols}', "");
Expect(1, 8399, '\p{^Blk:-	Combining_marks-For symbols}', "");
Expect(1, 8399, '\P{Blk:-	Combining_marks-For symbols}', "");
Expect(0, 8399, '\P{^Blk:-	Combining_marks-For symbols}', "");
Error('\p{Is_Block=  Combining_Diacritical/a/Marksforsymbols}');
Error('\P{Is_Block=  Combining_Diacritical/a/Marksforsymbols}');
Expect(1, 8447, '\p{Is_Block=combiningdiacriticalmarksforsymbols}', "");
Expect(0, 8447, '\p{^Is_Block=combiningdiacriticalmarksforsymbols}', "");
Expect(0, 8447, '\P{Is_Block=combiningdiacriticalmarksforsymbols}', "");
Expect(1, 8447, '\P{^Is_Block=combiningdiacriticalmarksforsymbols}', "");
Expect(0, 8399, '\p{Is_Block=combiningdiacriticalmarksforsymbols}', "");
Expect(1, 8399, '\p{^Is_Block=combiningdiacriticalmarksforsymbols}', "");
Expect(1, 8399, '\P{Is_Block=combiningdiacriticalmarksforsymbols}', "");
Expect(0, 8399, '\P{^Is_Block=combiningdiacriticalmarksforsymbols}', "");
Expect(1, 8447, '\p{Is_Block=_combining DIACRITICAL	Marksforsymbols}', "");
Expect(0, 8447, '\p{^Is_Block=_combining DIACRITICAL	Marksforsymbols}', "");
Expect(0, 8447, '\P{Is_Block=_combining DIACRITICAL	Marksforsymbols}', "");
Expect(1, 8447, '\P{^Is_Block=_combining DIACRITICAL	Marksforsymbols}', "");
Expect(0, 8399, '\p{Is_Block=_combining DIACRITICAL	Marksforsymbols}', "");
Expect(1, 8399, '\p{^Is_Block=_combining DIACRITICAL	Marksforsymbols}', "");
Expect(1, 8399, '\P{Is_Block=_combining DIACRITICAL	Marksforsymbols}', "");
Expect(0, 8399, '\P{^Is_Block=_combining DIACRITICAL	Marksforsymbols}', "");
Error('\p{Is_Blk=__COMBINING Marks-for/a/SYMBOLS}');
Error('\P{Is_Blk=__COMBINING Marks-for/a/SYMBOLS}');
Expect(1, 8447, '\p{Is_Blk=combiningmarksforsymbols}', "");
Expect(0, 8447, '\p{^Is_Blk=combiningmarksforsymbols}', "");
Expect(0, 8447, '\P{Is_Blk=combiningmarksforsymbols}', "");
Expect(1, 8447, '\P{^Is_Blk=combiningmarksforsymbols}', "");
Expect(0, 8399, '\p{Is_Blk=combiningmarksforsymbols}', "");
Expect(1, 8399, '\p{^Is_Blk=combiningmarksforsymbols}', "");
Expect(1, 8399, '\P{Is_Blk=combiningmarksforsymbols}', "");
Expect(0, 8399, '\P{^Is_Blk=combiningmarksforsymbols}', "");
Expect(1, 8447, '\p{Is_Blk= _COMBINING MarksFor_symbols}', "");
Expect(0, 8447, '\p{^Is_Blk= _COMBINING MarksFor_symbols}', "");
Expect(0, 8447, '\P{Is_Blk= _COMBINING MarksFor_symbols}', "");
Expect(1, 8447, '\P{^Is_Blk= _COMBINING MarksFor_symbols}', "");
Expect(0, 8399, '\p{Is_Blk= _COMBINING MarksFor_symbols}', "");
Expect(1, 8399, '\p{^Is_Blk= _COMBINING MarksFor_symbols}', "");
Expect(1, 8399, '\P{Is_Blk= _COMBINING MarksFor_symbols}', "");
Expect(0, 8399, '\P{^Is_Blk= _COMBINING MarksFor_symbols}', "");
Error('\p{Block=  Basic/a/latin}');
Error('\P{Block=  Basic/a/latin}');
Expect(1, 127, '\p{Block=basiclatin}', "");
Expect(0, 127, '\p{^Block=basiclatin}', "");
Expect(0, 127, '\P{Block=basiclatin}', "");
Expect(1, 127, '\P{^Block=basiclatin}', "");
Expect(0, 128, '\p{Block=basiclatin}', "");
Expect(1, 128, '\p{^Block=basiclatin}', "");
Expect(1, 128, '\P{Block=basiclatin}', "");
Expect(0, 128, '\P{^Block=basiclatin}', "");
Expect(1, 127, '\p{Block=	basic Latin}', "");
Expect(0, 127, '\p{^Block=	basic Latin}', "");
Expect(0, 127, '\P{Block=	basic Latin}', "");
Expect(1, 127, '\P{^Block=	basic Latin}', "");
Expect(0, 128, '\p{Block=	basic Latin}', "");
Expect(1, 128, '\p{^Block=	basic Latin}', "");
Expect(1, 128, '\P{Block=	basic Latin}', "");
Expect(0, 128, '\P{^Block=	basic Latin}', "");
Error('\p{Blk=:=__ASCII}');
Error('\P{Blk=:=__ASCII}');
Expect(1, 127, '\p{Blk=ascii}', "");
Expect(0, 127, '\p{^Blk=ascii}', "");
Expect(0, 127, '\P{Blk=ascii}', "");
Expect(1, 127, '\P{^Blk=ascii}', "");
Expect(0, 128, '\p{Blk=ascii}', "");
Expect(1, 128, '\p{^Blk=ascii}', "");
Expect(1, 128, '\P{Blk=ascii}', "");
Expect(0, 128, '\P{^Blk=ascii}', "");
Expect(1, 127, '\p{Blk= ASCII}', "");
Expect(0, 127, '\p{^Blk= ASCII}', "");
Expect(0, 127, '\P{Blk= ASCII}', "");
Expect(1, 127, '\P{^Blk= ASCII}', "");
Expect(0, 128, '\p{Blk= ASCII}', "");
Expect(1, 128, '\p{^Blk= ASCII}', "");
Expect(1, 128, '\P{Blk= ASCII}', "");
Expect(0, 128, '\P{^Blk= ASCII}', "");
Error('\p{Is_Block= /a/Basiclatin}');
Error('\P{Is_Block= /a/Basiclatin}');
Expect(1, 127, '\p{Is_Block=basiclatin}', "");
Expect(0, 127, '\p{^Is_Block=basiclatin}', "");
Expect(0, 127, '\P{Is_Block=basiclatin}', "");
Expect(1, 127, '\P{^Is_Block=basiclatin}', "");
Expect(0, 128, '\p{Is_Block=basiclatin}', "");
Expect(1, 128, '\p{^Is_Block=basiclatin}', "");
Expect(1, 128, '\P{Is_Block=basiclatin}', "");
Expect(0, 128, '\P{^Is_Block=basiclatin}', "");
Expect(1, 127, '\p{Is_Block=- Basic	Latin}', "");
Expect(0, 127, '\p{^Is_Block=- Basic	Latin}', "");
Expect(0, 127, '\P{Is_Block=- Basic	Latin}', "");
Expect(1, 127, '\P{^Is_Block=- Basic	Latin}', "");
Expect(0, 128, '\p{Is_Block=- Basic	Latin}', "");
Expect(1, 128, '\p{^Is_Block=- Basic	Latin}', "");
Expect(1, 128, '\P{Is_Block=- Basic	Latin}', "");
Expect(0, 128, '\P{^Is_Block=- Basic	Latin}', "");
Error('\p{Is_Blk=/a/ASCII}');
Error('\P{Is_Blk=/a/ASCII}');
Expect(1, 127, '\p{Is_Blk=ascii}', "");
Expect(0, 127, '\p{^Is_Blk=ascii}', "");
Expect(0, 127, '\P{Is_Blk=ascii}', "");
Expect(1, 127, '\P{^Is_Blk=ascii}', "");
Expect(0, 128, '\p{Is_Blk=ascii}', "");
Expect(1, 128, '\p{^Is_Blk=ascii}', "");
Expect(1, 128, '\P{Is_Blk=ascii}', "");
Expect(0, 128, '\P{^Is_Blk=ascii}', "");
Expect(1, 127, '\p{Is_Blk:	 -ASCII}', "");
Expect(0, 127, '\p{^Is_Blk:	 -ASCII}', "");
Expect(0, 127, '\P{Is_Blk:	 -ASCII}', "");
Expect(1, 127, '\P{^Is_Blk:	 -ASCII}', "");
Expect(0, 128, '\p{Is_Blk:	 -ASCII}', "");
Expect(1, 128, '\p{^Is_Blk:	 -ASCII}', "");
Expect(1, 128, '\P{Is_Blk:	 -ASCII}', "");
Expect(0, 128, '\P{^Is_Blk:	 -ASCII}', "");
Error('\p{Block=/a/_	Limbu}');
Error('\P{Block=/a/_	Limbu}');
Expect(1, 6479, '\p{Block=limbu}', "");
Expect(0, 6479, '\p{^Block=limbu}', "");
Expect(0, 6479, '\P{Block=limbu}', "");
Expect(1, 6479, '\P{^Block=limbu}', "");
Expect(0, 6399, '\p{Block=limbu}', "");
Expect(1, 6399, '\p{^Block=limbu}', "");
Expect(1, 6399, '\P{Block=limbu}', "");
Expect(0, 6399, '\P{^Block=limbu}', "");
Expect(1, 6479, '\p{Block=- LIMBU}', "");
Expect(0, 6479, '\p{^Block=- LIMBU}', "");
Expect(0, 6479, '\P{Block=- LIMBU}', "");
Expect(1, 6479, '\P{^Block=- LIMBU}', "");
Expect(0, 6399, '\p{Block=- LIMBU}', "");
Expect(1, 6399, '\p{^Block=- LIMBU}', "");
Expect(1, 6399, '\P{Block=- LIMBU}', "");
Expect(0, 6399, '\P{^Block=- LIMBU}', "");
Error('\p{Blk=-:=Limbu}');
Error('\P{Blk=-:=Limbu}');
Expect(1, 6479, '\p{Blk=limbu}', "");
Expect(0, 6479, '\p{^Blk=limbu}', "");
Expect(0, 6479, '\P{Blk=limbu}', "");
Expect(1, 6479, '\P{^Blk=limbu}', "");
Expect(0, 6399, '\p{Blk=limbu}', "");
Expect(1, 6399, '\p{^Blk=limbu}', "");
Expect(1, 6399, '\P{Blk=limbu}', "");
Expect(0, 6399, '\P{^Blk=limbu}', "");
Expect(1, 6479, '\p{Blk=		Limbu}', "");
Expect(0, 6479, '\p{^Blk=		Limbu}', "");
Expect(0, 6479, '\P{Blk=		Limbu}', "");
Expect(1, 6479, '\P{^Blk=		Limbu}', "");
Expect(0, 6399, '\p{Blk=		Limbu}', "");
Expect(1, 6399, '\p{^Blk=		Limbu}', "");
Expect(1, 6399, '\P{Blk=		Limbu}', "");
Expect(0, 6399, '\P{^Blk=		Limbu}', "");
Error('\p{Is_Block=Limbu/a/}');
Error('\P{Is_Block=Limbu/a/}');
Expect(1, 6479, '\p{Is_Block=limbu}', "");
Expect(0, 6479, '\p{^Is_Block=limbu}', "");
Expect(0, 6479, '\P{Is_Block=limbu}', "");
Expect(1, 6479, '\P{^Is_Block=limbu}', "");
Expect(0, 6399, '\p{Is_Block=limbu}', "");
Expect(1, 6399, '\p{^Is_Block=limbu}', "");
Expect(1, 6399, '\P{Is_Block=limbu}', "");
Expect(0, 6399, '\P{^Is_Block=limbu}', "");
Expect(1, 6479, '\p{Is_Block= Limbu}', "");
Expect(0, 6479, '\p{^Is_Block= Limbu}', "");
Expect(0, 6479, '\P{Is_Block= Limbu}', "");
Expect(1, 6479, '\P{^Is_Block= Limbu}', "");
Expect(0, 6399, '\p{Is_Block= Limbu}', "");
Expect(1, 6399, '\p{^Is_Block= Limbu}', "");
Expect(1, 6399, '\P{Is_Block= Limbu}', "");
Expect(0, 6399, '\P{^Is_Block= Limbu}', "");
Error('\p{Is_Blk=  limbu:=}');
Error('\P{Is_Blk=  limbu:=}');
Expect(1, 6479, '\p{Is_Blk=limbu}', "");
Expect(0, 6479, '\p{^Is_Blk=limbu}', "");
Expect(0, 6479, '\P{Is_Blk=limbu}', "");
Expect(1, 6479, '\P{^Is_Blk=limbu}', "");
Expect(0, 6399, '\p{Is_Blk=limbu}', "");
Expect(1, 6399, '\p{^Is_Blk=limbu}', "");
Expect(1, 6399, '\P{Is_Blk=limbu}', "");
Expect(0, 6399, '\P{^Is_Blk=limbu}', "");
Expect(1, 6479, '\p{Is_Blk=-Limbu}', "");
Expect(0, 6479, '\p{^Is_Blk=-Limbu}', "");
Expect(0, 6479, '\P{Is_Blk=-Limbu}', "");
Expect(1, 6479, '\P{^Is_Blk=-Limbu}', "");
Expect(0, 6399, '\p{Is_Blk=-Limbu}', "");
Expect(1, 6399, '\p{^Is_Blk=-Limbu}', "");
Expect(1, 6399, '\P{Is_Blk=-Limbu}', "");
Expect(0, 6399, '\P{^Is_Blk=-Limbu}', "");
Error('\p{Block=currency/a/SYMBOLS}');
Error('\P{Block=currency/a/SYMBOLS}');
Expect(1, 8399, '\p{Block=currencysymbols}', "");
Expect(0, 8399, '\p{^Block=currencysymbols}', "");
Expect(0, 8399, '\P{Block=currencysymbols}', "");
Expect(1, 8399, '\P{^Block=currencysymbols}', "");
Expect(0, 8351, '\p{Block=currencysymbols}', "");
Expect(1, 8351, '\p{^Block=currencysymbols}', "");
Expect(1, 8351, '\P{Block=currencysymbols}', "");
Expect(0, 8351, '\P{^Block=currencysymbols}', "");
Expect(1, 8399, '\p{Block=_ CURRENCY	symbols}', "");
Expect(0, 8399, '\p{^Block=_ CURRENCY	symbols}', "");
Expect(0, 8399, '\P{Block=_ CURRENCY	symbols}', "");
Expect(1, 8399, '\P{^Block=_ CURRENCY	symbols}', "");
Expect(0, 8351, '\p{Block=_ CURRENCY	symbols}', "");
Expect(1, 8351, '\p{^Block=_ CURRENCY	symbols}', "");
Expect(1, 8351, '\P{Block=_ CURRENCY	symbols}', "");
Expect(0, 8351, '\P{^Block=_ CURRENCY	symbols}', "");
Error('\p{Blk=/a/	-Currency_symbols}');
Error('\P{Blk=/a/	-Currency_symbols}');
Expect(1, 8399, '\p{Blk=currencysymbols}', "");
Expect(0, 8399, '\p{^Blk=currencysymbols}', "");
Expect(0, 8399, '\P{Blk=currencysymbols}', "");
Expect(1, 8399, '\P{^Blk=currencysymbols}', "");
Expect(0, 8351, '\p{Blk=currencysymbols}', "");
Expect(1, 8351, '\p{^Blk=currencysymbols}', "");
Expect(1, 8351, '\P{Blk=currencysymbols}', "");
Expect(0, 8351, '\P{^Blk=currencysymbols}', "");
Expect(1, 8399, '\p{Blk= -CURRENCY	Symbols}', "");
Expect(0, 8399, '\p{^Blk= -CURRENCY	Symbols}', "");
Expect(0, 8399, '\P{Blk= -CURRENCY	Symbols}', "");
Expect(1, 8399, '\P{^Blk= -CURRENCY	Symbols}', "");
Expect(0, 8351, '\p{Blk= -CURRENCY	Symbols}', "");
Expect(1, 8351, '\p{^Blk= -CURRENCY	Symbols}', "");
Expect(1, 8351, '\P{Blk= -CURRENCY	Symbols}', "");
Expect(0, 8351, '\P{^Blk= -CURRENCY	Symbols}', "");
Error('\p{Is_Block=CURRENCY:=Symbols}');
Error('\P{Is_Block=CURRENCY:=Symbols}');
Expect(1, 8399, '\p{Is_Block=currencysymbols}', "");
Expect(0, 8399, '\p{^Is_Block=currencysymbols}', "");
Expect(0, 8399, '\P{Is_Block=currencysymbols}', "");
Expect(1, 8399, '\P{^Is_Block=currencysymbols}', "");
Expect(0, 8351, '\p{Is_Block=currencysymbols}', "");
Expect(1, 8351, '\p{^Is_Block=currencysymbols}', "");
Expect(1, 8351, '\P{Is_Block=currencysymbols}', "");
Expect(0, 8351, '\P{^Is_Block=currencysymbols}', "");
Expect(1, 8399, '\p{Is_Block: -	Currency-SYMBOLS}', "");
Expect(0, 8399, '\p{^Is_Block: -	Currency-SYMBOLS}', "");
Expect(0, 8399, '\P{Is_Block: -	Currency-SYMBOLS}', "");
Expect(1, 8399, '\P{^Is_Block: -	Currency-SYMBOLS}', "");
Expect(0, 8351, '\p{Is_Block: -	Currency-SYMBOLS}', "");
Expect(1, 8351, '\p{^Is_Block: -	Currency-SYMBOLS}', "");
Expect(1, 8351, '\P{Is_Block: -	Currency-SYMBOLS}', "");
Expect(0, 8351, '\P{^Is_Block: -	Currency-SYMBOLS}', "");
Error('\p{Is_Blk=	/a/currency symbols}');
Error('\P{Is_Blk=	/a/currency symbols}');
Expect(1, 8399, '\p{Is_Blk=currencysymbols}', "");
Expect(0, 8399, '\p{^Is_Blk=currencysymbols}', "");
Expect(0, 8399, '\P{Is_Blk=currencysymbols}', "");
Expect(1, 8399, '\P{^Is_Blk=currencysymbols}', "");
Expect(0, 8351, '\p{Is_Blk=currencysymbols}', "");
Expect(1, 8351, '\p{^Is_Blk=currencysymbols}', "");
Expect(1, 8351, '\P{Is_Blk=currencysymbols}', "");
Expect(0, 8351, '\P{^Is_Blk=currencysymbols}', "");
Expect(1, 8399, '\p{Is_Blk=-	CURRENCY-Symbols}', "");
Expect(0, 8399, '\p{^Is_Blk=-	CURRENCY-Symbols}', "");
Expect(0, 8399, '\P{Is_Blk=-	CURRENCY-Symbols}', "");
Expect(1, 8399, '\P{^Is_Blk=-	CURRENCY-Symbols}', "");
Expect(0, 8351, '\p{Is_Blk=-	CURRENCY-Symbols}', "");
Expect(1, 8351, '\p{^Is_Blk=-	CURRENCY-Symbols}', "");
Expect(1, 8351, '\P{Is_Blk=-	CURRENCY-Symbols}', "");
Expect(0, 8351, '\P{^Is_Blk=-	CURRENCY-Symbols}', "");
Error('\p{Block=/a/_spacing Modifier-Letters}');
Error('\P{Block=/a/_spacing Modifier-Letters}');
Expect(1, 767, '\p{Block=spacingmodifierletters}', "");
Expect(0, 767, '\p{^Block=spacingmodifierletters}', "");
Expect(0, 767, '\P{Block=spacingmodifierletters}', "");
Expect(1, 767, '\P{^Block=spacingmodifierletters}', "");
Expect(0, 687, '\p{Block=spacingmodifierletters}', "");
Expect(1, 687, '\p{^Block=spacingmodifierletters}', "");
Expect(1, 687, '\P{Block=spacingmodifierletters}', "");
Expect(0, 687, '\P{^Block=spacingmodifierletters}', "");
Expect(1, 767, '\p{Block=_SPACING Modifier Letters}', "");
Expect(0, 767, '\p{^Block=_SPACING Modifier Letters}', "");
Expect(0, 767, '\P{Block=_SPACING Modifier Letters}', "");
Expect(1, 767, '\P{^Block=_SPACING Modifier Letters}', "");
Expect(0, 687, '\p{Block=_SPACING Modifier Letters}', "");
Expect(1, 687, '\p{^Block=_SPACING Modifier Letters}', "");
Expect(1, 687, '\P{Block=_SPACING Modifier Letters}', "");
Expect(0, 687, '\P{^Block=_SPACING Modifier Letters}', "");
Error('\p{Blk= :=Spacingmodifier	LETTERS}');
Error('\P{Blk= :=Spacingmodifier	LETTERS}');
Expect(1, 767, '\p{Blk=spacingmodifierletters}', "");
Expect(0, 767, '\p{^Blk=spacingmodifierletters}', "");
Expect(0, 767, '\P{Blk=spacingmodifierletters}', "");
Expect(1, 767, '\P{^Blk=spacingmodifierletters}', "");
Expect(0, 687, '\p{Blk=spacingmodifierletters}', "");
Expect(1, 687, '\p{^Blk=spacingmodifierletters}', "");
Expect(1, 687, '\P{Blk=spacingmodifierletters}', "");
Expect(0, 687, '\P{^Blk=spacingmodifierletters}', "");
Expect(1, 767, '\p{Blk= Spacing_MODIFIER-LETTERS}', "");
Expect(0, 767, '\p{^Blk= Spacing_MODIFIER-LETTERS}', "");
Expect(0, 767, '\P{Blk= Spacing_MODIFIER-LETTERS}', "");
Expect(1, 767, '\P{^Blk= Spacing_MODIFIER-LETTERS}', "");
Expect(0, 687, '\p{Blk= Spacing_MODIFIER-LETTERS}', "");
Expect(1, 687, '\p{^Blk= Spacing_MODIFIER-LETTERS}', "");
Expect(1, 687, '\P{Blk= Spacing_MODIFIER-LETTERS}', "");
Expect(0, 687, '\P{^Blk= Spacing_MODIFIER-LETTERS}', "");
Error('\p{Is_Block=_SPACING-modifier	Letters:=}');
Error('\P{Is_Block=_SPACING-modifier	Letters:=}');
Expect(1, 767, '\p{Is_Block=spacingmodifierletters}', "");
Expect(0, 767, '\p{^Is_Block=spacingmodifierletters}', "");
Expect(0, 767, '\P{Is_Block=spacingmodifierletters}', "");
Expect(1, 767, '\P{^Is_Block=spacingmodifierletters}', "");
Expect(0, 687, '\p{Is_Block=spacingmodifierletters}', "");
Expect(1, 687, '\p{^Is_Block=spacingmodifierletters}', "");
Expect(1, 687, '\P{Is_Block=spacingmodifierletters}', "");
Expect(0, 687, '\P{^Is_Block=spacingmodifierletters}', "");
Expect(1, 767, '\p{Is_Block=-	Spacingmodifier LETTERS}', "");
Expect(0, 767, '\p{^Is_Block=-	Spacingmodifier LETTERS}', "");
Expect(0, 767, '\P{Is_Block=-	Spacingmodifier LETTERS}', "");
Expect(1, 767, '\P{^Is_Block=-	Spacingmodifier LETTERS}', "");
Expect(0, 687, '\p{Is_Block=-	Spacingmodifier LETTERS}', "");
Expect(1, 687, '\p{^Is_Block=-	Spacingmodifier LETTERS}', "");
Expect(1, 687, '\P{Is_Block=-	Spacingmodifier LETTERS}', "");
Expect(0, 687, '\P{^Is_Block=-	Spacingmodifier LETTERS}', "");
Error('\p{Is_Blk: :=Spacing	MODIFIER	LETTERS}');
Error('\P{Is_Blk: :=Spacing	MODIFIER	LETTERS}');
Expect(1, 767, '\p{Is_Blk=spacingmodifierletters}', "");
Expect(0, 767, '\p{^Is_Blk=spacingmodifierletters}', "");
Expect(0, 767, '\P{Is_Blk=spacingmodifierletters}', "");
Expect(1, 767, '\P{^Is_Blk=spacingmodifierletters}', "");
Expect(0, 687, '\p{Is_Blk=spacingmodifierletters}', "");
Expect(1, 687, '\p{^Is_Blk=spacingmodifierletters}', "");
Expect(1, 687, '\P{Is_Blk=spacingmodifierletters}', "");
Expect(0, 687, '\P{^Is_Blk=spacingmodifierletters}', "");
Expect(1, 767, '\p{Is_Blk=  Spacing_modifier Letters}', "");
Expect(0, 767, '\p{^Is_Blk=  Spacing_modifier Letters}', "");
Expect(0, 767, '\P{Is_Blk=  Spacing_modifier Letters}', "");
Expect(1, 767, '\P{^Is_Blk=  Spacing_modifier Letters}', "");
Expect(0, 687, '\p{Is_Blk=  Spacing_modifier Letters}', "");
Expect(1, 687, '\p{^Is_Blk=  Spacing_modifier Letters}', "");
Expect(1, 687, '\P{Is_Blk=  Spacing_modifier Letters}', "");
Expect(0, 687, '\P{^Is_Blk=  Spacing_modifier Letters}', "");
Error('\p{Block=:=	box	DRAWING}');
Error('\P{Block=:=	box	DRAWING}');
Expect(1, 9599, '\p{Block:boxdrawing}', "");
Expect(0, 9599, '\p{^Block:boxdrawing}', "");
Expect(0, 9599, '\P{Block:boxdrawing}', "");
Expect(1, 9599, '\P{^Block:boxdrawing}', "");
Expect(0, 9471, '\p{Block:boxdrawing}', "");
Expect(1, 9471, '\p{^Block:boxdrawing}', "");
Expect(1, 9471, '\P{Block:boxdrawing}', "");
Expect(0, 9471, '\P{^Block:boxdrawing}', "");
Expect(1, 9599, '\p{Block=	 BOX_Drawing}', "");
Expect(0, 9599, '\p{^Block=	 BOX_Drawing}', "");
Expect(0, 9599, '\P{Block=	 BOX_Drawing}', "");
Expect(1, 9599, '\P{^Block=	 BOX_Drawing}', "");
Expect(0, 9471, '\p{Block=	 BOX_Drawing}', "");
Expect(1, 9471, '\p{^Block=	 BOX_Drawing}', "");
Expect(1, 9471, '\P{Block=	 BOX_Drawing}', "");
Expect(0, 9471, '\P{^Block=	 BOX_Drawing}', "");
Error('\p{Blk:	 -Box:=drawing}');
Error('\P{Blk:	 -Box:=drawing}');
Expect(1, 9599, '\p{Blk=boxdrawing}', "");
Expect(0, 9599, '\p{^Blk=boxdrawing}', "");
Expect(0, 9599, '\P{Blk=boxdrawing}', "");
Expect(1, 9599, '\P{^Blk=boxdrawing}', "");
Expect(0, 9471, '\p{Blk=boxdrawing}', "");
Expect(1, 9471, '\p{^Blk=boxdrawing}', "");
Expect(1, 9471, '\P{Blk=boxdrawing}', "");
Expect(0, 9471, '\P{^Blk=boxdrawing}', "");
Expect(1, 9599, '\p{Blk:   _BoxDrawing}', "");
Expect(0, 9599, '\p{^Blk:   _BoxDrawing}', "");
Expect(0, 9599, '\P{Blk:   _BoxDrawing}', "");
Expect(1, 9599, '\P{^Blk:   _BoxDrawing}', "");
Expect(0, 9471, '\p{Blk:   _BoxDrawing}', "");
Expect(1, 9471, '\p{^Blk:   _BoxDrawing}', "");
Expect(1, 9471, '\P{Blk:   _BoxDrawing}', "");
Expect(0, 9471, '\P{^Blk:   _BoxDrawing}', "");
Error('\p{Is_Block:	/a/-	boxDrawing}');
Error('\P{Is_Block:	/a/-	boxDrawing}');
Expect(1, 9599, '\p{Is_Block=boxdrawing}', "");
Expect(0, 9599, '\p{^Is_Block=boxdrawing}', "");
Expect(0, 9599, '\P{Is_Block=boxdrawing}', "");
Expect(1, 9599, '\P{^Is_Block=boxdrawing}', "");
Expect(0, 9471, '\p{Is_Block=boxdrawing}', "");
Expect(1, 9471, '\p{^Is_Block=boxdrawing}', "");
Expect(1, 9471, '\P{Is_Block=boxdrawing}', "");
Expect(0, 9471, '\P{^Is_Block=boxdrawing}', "");
Expect(1, 9599, '\p{Is_Block=_BOX_drawing}', "");
Expect(0, 9599, '\p{^Is_Block=_BOX_drawing}', "");
Expect(0, 9599, '\P{Is_Block=_BOX_drawing}', "");
Expect(1, 9599, '\P{^Is_Block=_BOX_drawing}', "");
Expect(0, 9471, '\p{Is_Block=_BOX_drawing}', "");
Expect(1, 9471, '\p{^Is_Block=_BOX_drawing}', "");
Expect(1, 9471, '\P{Is_Block=_BOX_drawing}', "");
Expect(0, 9471, '\P{^Is_Block=_BOX_drawing}', "");
Error('\p{Is_Blk=_:=Box	Drawing}');
Error('\P{Is_Blk=_:=Box	Drawing}');
Expect(1, 9599, '\p{Is_Blk=boxdrawing}', "");
Expect(0, 9599, '\p{^Is_Blk=boxdrawing}', "");
Expect(0, 9599, '\P{Is_Blk=boxdrawing}', "");
Expect(1, 9599, '\P{^Is_Blk=boxdrawing}', "");
Expect(0, 9471, '\p{Is_Blk=boxdrawing}', "");
Expect(1, 9471, '\p{^Is_Blk=boxdrawing}', "");
Expect(1, 9471, '\P{Is_Blk=boxdrawing}', "");
Expect(0, 9471, '\P{^Is_Blk=boxdrawing}', "");
Expect(1, 9599, '\p{Is_Blk=	BOX Drawing}', "");
Expect(0, 9599, '\p{^Is_Blk=	BOX Drawing}', "");
Expect(0, 9599, '\P{Is_Blk=	BOX Drawing}', "");
Expect(1, 9599, '\P{^Is_Blk=	BOX Drawing}', "");
Expect(0, 9471, '\p{Is_Blk=	BOX Drawing}', "");
Expect(1, 9471, '\p{^Is_Blk=	BOX Drawing}', "");
Expect(1, 9471, '\P{Is_Blk=	BOX Drawing}', "");
Expect(0, 9471, '\P{^Is_Blk=	BOX Drawing}', "");
Error('\p{Block=-Superscripts AND:=Subscripts}');
Error('\P{Block=-Superscripts AND:=Subscripts}');
Expect(1, 8351, '\p{Block=superscriptsandsubscripts}', "");
Expect(0, 8351, '\p{^Block=superscriptsandsubscripts}', "");
Expect(0, 8351, '\P{Block=superscriptsandsubscripts}', "");
Expect(1, 8351, '\P{^Block=superscriptsandsubscripts}', "");
Expect(0, 8303, '\p{Block=superscriptsandsubscripts}', "");
Expect(1, 8303, '\p{^Block=superscriptsandsubscripts}', "");
Expect(1, 8303, '\P{Block=superscriptsandsubscripts}', "");
Expect(0, 8303, '\P{^Block=superscriptsandsubscripts}', "");
Expect(1, 8351, '\p{Block=__Superscripts-And-subscripts}', "");
Expect(0, 8351, '\p{^Block=__Superscripts-And-subscripts}', "");
Expect(0, 8351, '\P{Block=__Superscripts-And-subscripts}', "");
Expect(1, 8351, '\P{^Block=__Superscripts-And-subscripts}', "");
Expect(0, 8303, '\p{Block=__Superscripts-And-subscripts}', "");
Expect(1, 8303, '\p{^Block=__Superscripts-And-subscripts}', "");
Expect(1, 8303, '\P{Block=__Superscripts-And-subscripts}', "");
Expect(0, 8303, '\P{^Block=__Superscripts-And-subscripts}', "");
Error('\p{Blk=-	SUPERSCRIPTSAND:=Subscripts}');
Error('\P{Blk=-	SUPERSCRIPTSAND:=Subscripts}');
Expect(1, 8351, '\p{Blk: superscriptsandsubscripts}', "");
Expect(0, 8351, '\p{^Blk: superscriptsandsubscripts}', "");
Expect(0, 8351, '\P{Blk: superscriptsandsubscripts}', "");
Expect(1, 8351, '\P{^Blk: superscriptsandsubscripts}', "");
Expect(0, 8303, '\p{Blk: superscriptsandsubscripts}', "");
Expect(1, 8303, '\p{^Blk: superscriptsandsubscripts}', "");
Expect(1, 8303, '\P{Blk: superscriptsandsubscripts}', "");
Expect(0, 8303, '\P{^Blk: superscriptsandsubscripts}', "");
Expect(1, 8351, '\p{Blk=-Superscripts	AND	Subscripts}', "");
Expect(0, 8351, '\p{^Blk=-Superscripts	AND	Subscripts}', "");
Expect(0, 8351, '\P{Blk=-Superscripts	AND	Subscripts}', "");
Expect(1, 8351, '\P{^Blk=-Superscripts	AND	Subscripts}', "");
Expect(0, 8303, '\p{Blk=-Superscripts	AND	Subscripts}', "");
Expect(1, 8303, '\p{^Blk=-Superscripts	AND	Subscripts}', "");
Expect(1, 8303, '\P{Blk=-Superscripts	AND	Subscripts}', "");
Expect(0, 8303, '\P{^Blk=-Superscripts	AND	Subscripts}', "");
Error('\p{Is_Block:	 Superscripts	AND	SUBSCRIPTS:=}');
Error('\P{Is_Block:	 Superscripts	AND	SUBSCRIPTS:=}');
Expect(1, 8351, '\p{Is_Block=superscriptsandsubscripts}', "");
Expect(0, 8351, '\p{^Is_Block=superscriptsandsubscripts}', "");
Expect(0, 8351, '\P{Is_Block=superscriptsandsubscripts}', "");
Expect(1, 8351, '\P{^Is_Block=superscriptsandsubscripts}', "");
Expect(0, 8303, '\p{Is_Block=superscriptsandsubscripts}', "");
Expect(1, 8303, '\p{^Is_Block=superscriptsandsubscripts}', "");
Expect(1, 8303, '\P{Is_Block=superscriptsandsubscripts}', "");
Expect(0, 8303, '\P{^Is_Block=superscriptsandsubscripts}', "");
Expect(1, 8351, '\p{Is_Block=- Superscripts	And	SUBSCRIPTS}', "");
Expect(0, 8351, '\p{^Is_Block=- Superscripts	And	SUBSCRIPTS}', "");
Expect(0, 8351, '\P{Is_Block=- Superscripts	And	SUBSCRIPTS}', "");
Expect(1, 8351, '\P{^Is_Block=- Superscripts	And	SUBSCRIPTS}', "");
Expect(0, 8303, '\p{Is_Block=- Superscripts	And	SUBSCRIPTS}', "");
Expect(1, 8303, '\p{^Is_Block=- Superscripts	And	SUBSCRIPTS}', "");
Expect(1, 8303, '\P{Is_Block=- Superscripts	And	SUBSCRIPTS}', "");
Expect(0, 8303, '\P{^Is_Block=- Superscripts	And	SUBSCRIPTS}', "");
Error('\p{Is_Blk=SUPERSCRIPTS/a/AndSubscripts}');
Error('\P{Is_Blk=SUPERSCRIPTS/a/AndSubscripts}');
Expect(1, 8351, '\p{Is_Blk=superscriptsandsubscripts}', "");
Expect(0, 8351, '\p{^Is_Blk=superscriptsandsubscripts}', "");
Expect(0, 8351, '\P{Is_Blk=superscriptsandsubscripts}', "");
Expect(1, 8351, '\P{^Is_Blk=superscriptsandsubscripts}', "");
Expect(0, 8303, '\p{Is_Blk=superscriptsandsubscripts}', "");
Expect(1, 8303, '\p{^Is_Blk=superscriptsandsubscripts}', "");
Expect(1, 8303, '\P{Is_Blk=superscriptsandsubscripts}', "");
Expect(0, 8303, '\P{^Is_Blk=superscriptsandsubscripts}', "");
Expect(1, 8351, '\p{Is_Blk=-_Superscripts	AND	SUBSCRIPTS}', "");
Expect(0, 8351, '\p{^Is_Blk=-_Superscripts	AND	SUBSCRIPTS}', "");
Expect(0, 8351, '\P{Is_Blk=-_Superscripts	AND	SUBSCRIPTS}', "");
Expect(1, 8351, '\P{^Is_Blk=-_Superscripts	AND	SUBSCRIPTS}', "");
Expect(0, 8303, '\p{Is_Blk=-_Superscripts	AND	SUBSCRIPTS}', "");
Expect(1, 8303, '\p{^Is_Blk=-_Superscripts	AND	SUBSCRIPTS}', "");
Expect(1, 8303, '\P{Is_Blk=-_Superscripts	AND	SUBSCRIPTS}', "");
Expect(0, 8303, '\P{^Is_Blk=-_Superscripts	AND	SUBSCRIPTS}', "");
Error('\p{Block:	 -ancient greek Numbers:=}');
Error('\P{Block:	 -ancient greek Numbers:=}');
Expect(1, 65935, '\p{Block=ancientgreeknumbers}', "");
Expect(0, 65935, '\p{^Block=ancientgreeknumbers}', "");
Expect(0, 65935, '\P{Block=ancientgreeknumbers}', "");
Expect(1, 65935, '\P{^Block=ancientgreeknumbers}', "");
Expect(0, 65855, '\p{Block=ancientgreeknumbers}', "");
Expect(1, 65855, '\p{^Block=ancientgreeknumbers}', "");
Expect(1, 65855, '\P{Block=ancientgreeknumbers}', "");
Expect(0, 65855, '\P{^Block=ancientgreeknumbers}', "");
Expect(1, 65935, '\p{Block:- ancientGreek_numbers}', "");
Expect(0, 65935, '\p{^Block:- ancientGreek_numbers}', "");
Expect(0, 65935, '\P{Block:- ancientGreek_numbers}', "");
Expect(1, 65935, '\P{^Block:- ancientGreek_numbers}', "");
Expect(0, 65855, '\p{Block:- ancientGreek_numbers}', "");
Expect(1, 65855, '\p{^Block:- ancientGreek_numbers}', "");
Expect(1, 65855, '\P{Block:- ancientGreek_numbers}', "");
Expect(0, 65855, '\P{^Block:- ancientGreek_numbers}', "");
Error('\p{Blk=__Ancient-GREEK:=Numbers}');
Error('\P{Blk=__Ancient-GREEK:=Numbers}');
Expect(1, 65935, '\p{Blk=ancientgreeknumbers}', "");
Expect(0, 65935, '\p{^Blk=ancientgreeknumbers}', "");
Expect(0, 65935, '\P{Blk=ancientgreeknumbers}', "");
Expect(1, 65935, '\P{^Blk=ancientgreeknumbers}', "");
Expect(0, 65855, '\p{Blk=ancientgreeknumbers}', "");
Expect(1, 65855, '\p{^Blk=ancientgreeknumbers}', "");
Expect(1, 65855, '\P{Blk=ancientgreeknumbers}', "");
Expect(0, 65855, '\P{^Blk=ancientgreeknumbers}', "");
Expect(1, 65935, '\p{Blk=--ANCIENT-GREEK Numbers}', "");
Expect(0, 65935, '\p{^Blk=--ANCIENT-GREEK Numbers}', "");
Expect(0, 65935, '\P{Blk=--ANCIENT-GREEK Numbers}', "");
Expect(1, 65935, '\P{^Blk=--ANCIENT-GREEK Numbers}', "");
Expect(0, 65855, '\p{Blk=--ANCIENT-GREEK Numbers}', "");
Expect(1, 65855, '\p{^Blk=--ANCIENT-GREEK Numbers}', "");
Expect(1, 65855, '\P{Blk=--ANCIENT-GREEK Numbers}', "");
Expect(0, 65855, '\P{^Blk=--ANCIENT-GREEK Numbers}', "");
Error('\p{Is_Block=/a/	Ancient	greekNUMBERS}');
Error('\P{Is_Block=/a/	Ancient	greekNUMBERS}');
Expect(1, 65935, '\p{Is_Block=ancientgreeknumbers}', "");
Expect(0, 65935, '\p{^Is_Block=ancientgreeknumbers}', "");
Expect(0, 65935, '\P{Is_Block=ancientgreeknumbers}', "");
Expect(1, 65935, '\P{^Is_Block=ancientgreeknumbers}', "");
Expect(0, 65855, '\p{Is_Block=ancientgreeknumbers}', "");
Expect(1, 65855, '\p{^Is_Block=ancientgreeknumbers}', "");
Expect(1, 65855, '\P{Is_Block=ancientgreeknumbers}', "");
Expect(0, 65855, '\P{^Is_Block=ancientgreeknumbers}', "");
Expect(1, 65935, '\p{Is_Block:		Ancient_GREEK Numbers}', "");
Expect(0, 65935, '\p{^Is_Block:		Ancient_GREEK Numbers}', "");
Expect(0, 65935, '\P{Is_Block:		Ancient_GREEK Numbers}', "");
Expect(1, 65935, '\P{^Is_Block:		Ancient_GREEK Numbers}', "");
Expect(0, 65855, '\p{Is_Block:		Ancient_GREEK Numbers}', "");
Expect(1, 65855, '\p{^Is_Block:		Ancient_GREEK Numbers}', "");
Expect(1, 65855, '\P{Is_Block:		Ancient_GREEK Numbers}', "");
Expect(0, 65855, '\P{^Is_Block:		Ancient_GREEK Numbers}', "");
Error('\p{Is_Blk= /a/ancient greek-Numbers}');
Error('\P{Is_Blk= /a/ancient greek-Numbers}');
Expect(1, 65935, '\p{Is_Blk=ancientgreeknumbers}', "");
Expect(0, 65935, '\p{^Is_Blk=ancientgreeknumbers}', "");
Expect(0, 65935, '\P{Is_Blk=ancientgreeknumbers}', "");
Expect(1, 65935, '\P{^Is_Blk=ancientgreeknumbers}', "");
Expect(0, 65855, '\p{Is_Blk=ancientgreeknumbers}', "");
Expect(1, 65855, '\p{^Is_Blk=ancientgreeknumbers}', "");
Expect(1, 65855, '\P{Is_Blk=ancientgreeknumbers}', "");
Expect(0, 65855, '\P{^Is_Blk=ancientgreeknumbers}', "");
Expect(1, 65935, '\p{Is_Blk=_Ancient_greek-Numbers}', "");
Expect(0, 65935, '\p{^Is_Blk=_Ancient_greek-Numbers}', "");
Expect(0, 65935, '\P{Is_Blk=_Ancient_greek-Numbers}', "");
Expect(1, 65935, '\P{^Is_Blk=_Ancient_greek-Numbers}', "");
Expect(0, 65855, '\p{Is_Blk=_Ancient_greek-Numbers}', "");
Expect(1, 65855, '\p{^Is_Blk=_Ancient_greek-Numbers}', "");
Expect(1, 65855, '\P{Is_Blk=_Ancient_greek-Numbers}', "");
Expect(0, 65855, '\P{^Is_Blk=_Ancient_greek-Numbers}', "");
Error('\p{Block=	/a/NKO}');
Error('\P{Block=	/a/NKO}');
Expect(1, 2047, '\p{Block=nko}', "");
Expect(0, 2047, '\p{^Block=nko}', "");
Expect(0, 2047, '\P{Block=nko}', "");
Expect(1, 2047, '\P{^Block=nko}', "");
Expect(0, 1983, '\p{Block=nko}', "");
Expect(1, 1983, '\p{^Block=nko}', "");
Expect(1, 1983, '\P{Block=nko}', "");
Expect(0, 1983, '\P{^Block=nko}', "");
Expect(1, 2047, '\p{Block=	 NKo}', "");
Expect(0, 2047, '\p{^Block=	 NKo}', "");
Expect(0, 2047, '\P{Block=	 NKo}', "");
Expect(1, 2047, '\P{^Block=	 NKo}', "");
Expect(0, 1983, '\p{Block=	 NKo}', "");
Expect(1, 1983, '\p{^Block=	 NKo}', "");
Expect(1, 1983, '\P{Block=	 NKo}', "");
Expect(0, 1983, '\P{^Block=	 NKo}', "");
Error('\p{Blk=/a/	_NKO}');
Error('\P{Blk=/a/	_NKO}');
Expect(1, 2047, '\p{Blk=nko}', "");
Expect(0, 2047, '\p{^Blk=nko}', "");
Expect(0, 2047, '\P{Blk=nko}', "");
Expect(1, 2047, '\P{^Blk=nko}', "");
Expect(0, 1983, '\p{Blk=nko}', "");
Expect(1, 1983, '\p{^Blk=nko}', "");
Expect(1, 1983, '\P{Blk=nko}', "");
Expect(0, 1983, '\P{^Blk=nko}', "");
Expect(1, 2047, '\p{Blk= NKo}', "");
Expect(0, 2047, '\p{^Blk= NKo}', "");
Expect(0, 2047, '\P{Blk= NKo}', "");
Expect(1, 2047, '\P{^Blk= NKo}', "");
Expect(0, 1983, '\p{Blk= NKo}', "");
Expect(1, 1983, '\p{^Blk= NKo}', "");
Expect(1, 1983, '\P{Blk= NKo}', "");
Expect(0, 1983, '\P{^Blk= NKo}', "");
Error('\p{Is_Block:   :=  NKo}');
Error('\P{Is_Block:   :=  NKo}');
Expect(1, 2047, '\p{Is_Block=nko}', "");
Expect(0, 2047, '\p{^Is_Block=nko}', "");
Expect(0, 2047, '\P{Is_Block=nko}', "");
Expect(1, 2047, '\P{^Is_Block=nko}', "");
Expect(0, 1983, '\p{Is_Block=nko}', "");
Expect(1, 1983, '\p{^Is_Block=nko}', "");
Expect(1, 1983, '\P{Is_Block=nko}', "");
Expect(0, 1983, '\P{^Is_Block=nko}', "");
Expect(1, 2047, '\p{Is_Block= _NKo}', "");
Expect(0, 2047, '\p{^Is_Block= _NKo}', "");
Expect(0, 2047, '\P{Is_Block= _NKo}', "");
Expect(1, 2047, '\P{^Is_Block= _NKo}', "");
Expect(0, 1983, '\p{Is_Block= _NKo}', "");
Expect(1, 1983, '\p{^Is_Block= _NKo}', "");
Expect(1, 1983, '\P{Is_Block= _NKo}', "");
Expect(0, 1983, '\P{^Is_Block= _NKo}', "");
Error('\p{Is_Blk:   /a/  nko}');
Error('\P{Is_Blk:   /a/  nko}');
Expect(1, 2047, '\p{Is_Blk=nko}', "");
Expect(0, 2047, '\p{^Is_Blk=nko}', "");
Expect(0, 2047, '\P{Is_Blk=nko}', "");
Expect(1, 2047, '\P{^Is_Blk=nko}', "");
Expect(0, 1983, '\p{Is_Blk=nko}', "");
Expect(1, 1983, '\p{^Is_Blk=nko}', "");
Expect(1, 1983, '\P{Is_Blk=nko}', "");
Expect(0, 1983, '\P{^Is_Blk=nko}', "");
Expect(1, 2047, '\p{Is_Blk= -NKo}', "");
Expect(0, 2047, '\p{^Is_Blk= -NKo}', "");
Expect(0, 2047, '\P{Is_Blk= -NKo}', "");
Expect(1, 2047, '\P{^Is_Blk= -NKo}', "");
Expect(0, 1983, '\p{Is_Blk= -NKo}', "");
Expect(1, 1983, '\p{^Is_Blk= -NKo}', "");
Expect(1, 1983, '\P{Is_Blk= -NKo}', "");
Expect(0, 1983, '\P{^Is_Blk= -NKo}', "");
Error('\p{Block=-Musical_Symbols/a/}');
Error('\P{Block=-Musical_Symbols/a/}');
Expect(1, 119295, '\p{Block=musicalsymbols}', "");
Expect(0, 119295, '\p{^Block=musicalsymbols}', "");
Expect(0, 119295, '\P{Block=musicalsymbols}', "");
Expect(1, 119295, '\P{^Block=musicalsymbols}', "");
Expect(0, 119039, '\p{Block=musicalsymbols}', "");
Expect(1, 119039, '\p{^Block=musicalsymbols}', "");
Expect(1, 119039, '\P{Block=musicalsymbols}', "");
Expect(0, 119039, '\P{^Block=musicalsymbols}', "");
Expect(1, 119295, '\p{Block=_ Musical	Symbols}', "");
Expect(0, 119295, '\p{^Block=_ Musical	Symbols}', "");
Expect(0, 119295, '\P{Block=_ Musical	Symbols}', "");
Expect(1, 119295, '\P{^Block=_ Musical	Symbols}', "");
Expect(0, 119039, '\p{Block=_ Musical	Symbols}', "");
Expect(1, 119039, '\p{^Block=_ Musical	Symbols}', "");
Expect(1, 119039, '\P{Block=_ Musical	Symbols}', "");
Expect(0, 119039, '\P{^Block=_ Musical	Symbols}', "");
Error('\p{Blk=:= Musical-SYMBOLS}');
Error('\P{Blk=:= Musical-SYMBOLS}');
Expect(1, 119295, '\p{Blk=musicalsymbols}', "");
Expect(0, 119295, '\p{^Blk=musicalsymbols}', "");
Expect(0, 119295, '\P{Blk=musicalsymbols}', "");
Expect(1, 119295, '\P{^Blk=musicalsymbols}', "");
Expect(0, 119039, '\p{Blk=musicalsymbols}', "");
Expect(1, 119039, '\p{^Blk=musicalsymbols}', "");
Expect(1, 119039, '\P{Blk=musicalsymbols}', "");
Expect(0, 119039, '\P{^Blk=musicalsymbols}', "");
Expect(1, 119295, '\p{Blk=-_MUSICAL Symbols}', "");
Expect(0, 119295, '\p{^Blk=-_MUSICAL Symbols}', "");
Expect(0, 119295, '\P{Blk=-_MUSICAL Symbols}', "");
Expect(1, 119295, '\P{^Blk=-_MUSICAL Symbols}', "");
Expect(0, 119039, '\p{Blk=-_MUSICAL Symbols}', "");
Expect(1, 119039, '\p{^Blk=-_MUSICAL Symbols}', "");
Expect(1, 119039, '\P{Blk=-_MUSICAL Symbols}', "");
Expect(0, 119039, '\P{^Blk=-_MUSICAL Symbols}', "");
Error('\p{Is_Block=/a/-MUSICAL_SYMBOLS}');
Error('\P{Is_Block=/a/-MUSICAL_SYMBOLS}');
Expect(1, 119295, '\p{Is_Block: musicalsymbols}', "");
Expect(0, 119295, '\p{^Is_Block: musicalsymbols}', "");
Expect(0, 119295, '\P{Is_Block: musicalsymbols}', "");
Expect(1, 119295, '\P{^Is_Block: musicalsymbols}', "");
Expect(0, 119039, '\p{Is_Block: musicalsymbols}', "");
Expect(1, 119039, '\p{^Is_Block: musicalsymbols}', "");
Expect(1, 119039, '\P{Is_Block: musicalsymbols}', "");
Expect(0, 119039, '\P{^Is_Block: musicalsymbols}', "");
Expect(1, 119295, '\p{Is_Block:   - musical SYMBOLS}', "");
Expect(0, 119295, '\p{^Is_Block:   - musical SYMBOLS}', "");
Expect(0, 119295, '\P{Is_Block:   - musical SYMBOLS}', "");
Expect(1, 119295, '\P{^Is_Block:   - musical SYMBOLS}', "");
Expect(0, 119039, '\p{Is_Block:   - musical SYMBOLS}', "");
Expect(1, 119039, '\p{^Is_Block:   - musical SYMBOLS}', "");
Expect(1, 119039, '\P{Is_Block:   - musical SYMBOLS}', "");
Expect(0, 119039, '\P{^Is_Block:   - musical SYMBOLS}', "");
Error('\p{Is_Blk=	/a/Musical	symbols}');
Error('\P{Is_Blk=	/a/Musical	symbols}');
Expect(1, 119295, '\p{Is_Blk=musicalsymbols}', "");
Expect(0, 119295, '\p{^Is_Blk=musicalsymbols}', "");
Expect(0, 119295, '\P{Is_Blk=musicalsymbols}', "");
Expect(1, 119295, '\P{^Is_Blk=musicalsymbols}', "");
Expect(0, 119039, '\p{Is_Blk=musicalsymbols}', "");
Expect(1, 119039, '\p{^Is_Blk=musicalsymbols}', "");
Expect(1, 119039, '\P{Is_Blk=musicalsymbols}', "");
Expect(0, 119039, '\P{^Is_Blk=musicalsymbols}', "");
Expect(1, 119295, '\p{Is_Blk=_	musical_symbols}', "");
Expect(0, 119295, '\p{^Is_Blk=_	musical_symbols}', "");
Expect(0, 119295, '\P{Is_Blk=_	musical_symbols}', "");
Expect(1, 119295, '\P{^Is_Blk=_	musical_symbols}', "");
Expect(0, 119039, '\p{Is_Blk=_	musical_symbols}', "");
Expect(1, 119039, '\p{^Is_Blk=_	musical_symbols}', "");
Expect(1, 119039, '\P{Is_Blk=_	musical_symbols}', "");
Expect(0, 119039, '\P{^Is_Blk=_	musical_symbols}', "");
Error('\p{Block: /a/ _Miscellaneous-SYMBOLS}');
Error('\P{Block: /a/ _Miscellaneous-SYMBOLS}');
Expect(1, 9983, '\p{Block=miscellaneoussymbols}', "");
Expect(0, 9983, '\p{^Block=miscellaneoussymbols}', "");
Expect(0, 9983, '\P{Block=miscellaneoussymbols}', "");
Expect(1, 9983, '\P{^Block=miscellaneoussymbols}', "");
Expect(0, 9727, '\p{Block=miscellaneoussymbols}', "");
Expect(1, 9727, '\p{^Block=miscellaneoussymbols}', "");
Expect(1, 9727, '\P{Block=miscellaneoussymbols}', "");
Expect(0, 9727, '\P{^Block=miscellaneoussymbols}', "");
Expect(1, 9983, '\p{Block=_Miscellaneous-Symbols}', "");
Expect(0, 9983, '\p{^Block=_Miscellaneous-Symbols}', "");
Expect(0, 9983, '\P{Block=_Miscellaneous-Symbols}', "");
Expect(1, 9983, '\P{^Block=_Miscellaneous-Symbols}', "");
Expect(0, 9727, '\p{Block=_Miscellaneous-Symbols}', "");
Expect(1, 9727, '\p{^Block=_Miscellaneous-Symbols}', "");
Expect(1, 9727, '\P{Block=_Miscellaneous-Symbols}', "");
Expect(0, 9727, '\P{^Block=_Miscellaneous-Symbols}', "");
Error('\p{Blk=:=- miscellaneous_SYMBOLS}');
Error('\P{Blk=:=- miscellaneous_SYMBOLS}');
Expect(1, 9983, '\p{Blk: miscellaneoussymbols}', "");
Expect(0, 9983, '\p{^Blk: miscellaneoussymbols}', "");
Expect(0, 9983, '\P{Blk: miscellaneoussymbols}', "");
Expect(1, 9983, '\P{^Blk: miscellaneoussymbols}', "");
Expect(0, 9727, '\p{Blk: miscellaneoussymbols}', "");
Expect(1, 9727, '\p{^Blk: miscellaneoussymbols}', "");
Expect(1, 9727, '\P{Blk: miscellaneoussymbols}', "");
Expect(0, 9727, '\P{^Blk: miscellaneoussymbols}', "");
Expect(1, 9983, '\p{Blk=-_miscellaneous	Symbols}', "");
Expect(0, 9983, '\p{^Blk=-_miscellaneous	Symbols}', "");
Expect(0, 9983, '\P{Blk=-_miscellaneous	Symbols}', "");
Expect(1, 9983, '\P{^Blk=-_miscellaneous	Symbols}', "");
Expect(0, 9727, '\p{Blk=-_miscellaneous	Symbols}', "");
Expect(1, 9727, '\p{^Blk=-_miscellaneous	Symbols}', "");
Expect(1, 9727, '\P{Blk=-_miscellaneous	Symbols}', "");
Expect(0, 9727, '\P{^Blk=-_miscellaneous	Symbols}', "");
Error('\p{Is_Block: -_Miscellaneous/a/symbols}');
Error('\P{Is_Block: -_Miscellaneous/a/symbols}');
Expect(1, 9983, '\p{Is_Block=miscellaneoussymbols}', "");
Expect(0, 9983, '\p{^Is_Block=miscellaneoussymbols}', "");
Expect(0, 9983, '\P{Is_Block=miscellaneoussymbols}', "");
Expect(1, 9983, '\P{^Is_Block=miscellaneoussymbols}', "");
Expect(0, 9727, '\p{Is_Block=miscellaneoussymbols}', "");
Expect(1, 9727, '\p{^Is_Block=miscellaneoussymbols}', "");
Expect(1, 9727, '\P{Is_Block=miscellaneoussymbols}', "");
Expect(0, 9727, '\P{^Is_Block=miscellaneoussymbols}', "");
Expect(1, 9983, '\p{Is_Block=  MISCELLANEOUSSYMBOLS}', "");
Expect(0, 9983, '\p{^Is_Block=  MISCELLANEOUSSYMBOLS}', "");
Expect(0, 9983, '\P{Is_Block=  MISCELLANEOUSSYMBOLS}', "");
Expect(1, 9983, '\P{^Is_Block=  MISCELLANEOUSSYMBOLS}', "");
Expect(0, 9727, '\p{Is_Block=  MISCELLANEOUSSYMBOLS}', "");
Expect(1, 9727, '\p{^Is_Block=  MISCELLANEOUSSYMBOLS}', "");
Expect(1, 9727, '\P{Is_Block=  MISCELLANEOUSSYMBOLS}', "");
Expect(0, 9727, '\P{^Is_Block=  MISCELLANEOUSSYMBOLS}', "");
Error('\p{Is_Blk=- Miscellaneoussymbols:=}');
Error('\P{Is_Blk=- Miscellaneoussymbols:=}');
Expect(1, 9983, '\p{Is_Blk:miscellaneoussymbols}', "");
Expect(0, 9983, '\p{^Is_Blk:miscellaneoussymbols}', "");
Expect(0, 9983, '\P{Is_Blk:miscellaneoussymbols}', "");
Expect(1, 9983, '\P{^Is_Blk:miscellaneoussymbols}', "");
Expect(0, 9727, '\p{Is_Blk:miscellaneoussymbols}', "");
Expect(1, 9727, '\p{^Is_Blk:miscellaneoussymbols}', "");
Expect(1, 9727, '\P{Is_Blk:miscellaneoussymbols}', "");
Expect(0, 9727, '\P{^Is_Blk:miscellaneoussymbols}', "");
Expect(1, 9983, '\p{Is_Blk=- MISCELLANEOUS-Symbols}', "");
Expect(0, 9983, '\p{^Is_Blk=- MISCELLANEOUS-Symbols}', "");
Expect(0, 9983, '\P{Is_Blk=- MISCELLANEOUS-Symbols}', "");
Expect(1, 9983, '\P{^Is_Blk=- MISCELLANEOUS-Symbols}', "");
Expect(0, 9727, '\p{Is_Blk=- MISCELLANEOUS-Symbols}', "");
Expect(1, 9727, '\p{^Is_Blk=- MISCELLANEOUS-Symbols}', "");
Expect(1, 9727, '\P{Is_Blk=- MISCELLANEOUS-Symbols}', "");
Expect(0, 9727, '\P{^Is_Blk=- MISCELLANEOUS-Symbols}', "");
Error('\p{Block=/a/	Runic}');
Error('\P{Block=/a/	Runic}');
Expect(1, 5887, '\p{Block=runic}', "");
Expect(0, 5887, '\p{^Block=runic}', "");
Expect(0, 5887, '\P{Block=runic}', "");
Expect(1, 5887, '\P{^Block=runic}', "");
Expect(0, 5791, '\p{Block=runic}', "");
Expect(1, 5791, '\p{^Block=runic}', "");
Expect(1, 5791, '\P{Block=runic}', "");
Expect(0, 5791, '\P{^Block=runic}', "");
Expect(1, 5887, '\p{Block= Runic}', "");
Expect(0, 5887, '\p{^Block= Runic}', "");
Expect(0, 5887, '\P{Block= Runic}', "");
Expect(1, 5887, '\P{^Block= Runic}', "");
Expect(0, 5791, '\p{Block= Runic}', "");
Expect(1, 5791, '\p{^Block= Runic}', "");
Expect(1, 5791, '\P{Block= Runic}', "");
Expect(0, 5791, '\P{^Block= Runic}', "");
Error('\p{Blk: _:=Runic}');
Error('\P{Blk: _:=Runic}');
Expect(1, 5887, '\p{Blk=runic}', "");
Expect(0, 5887, '\p{^Blk=runic}', "");
Expect(0, 5887, '\P{Blk=runic}', "");
Expect(1, 5887, '\P{^Blk=runic}', "");
Expect(0, 5791, '\p{Blk=runic}', "");
Expect(1, 5791, '\p{^Blk=runic}', "");
Expect(1, 5791, '\P{Blk=runic}', "");
Expect(0, 5791, '\P{^Blk=runic}', "");
Expect(1, 5887, '\p{Blk=-Runic}', "");
Expect(0, 5887, '\p{^Blk=-Runic}', "");
Expect(0, 5887, '\P{Blk=-Runic}', "");
Expect(1, 5887, '\P{^Blk=-Runic}', "");
Expect(0, 5791, '\p{Blk=-Runic}', "");
Expect(1, 5791, '\p{^Blk=-Runic}', "");
Expect(1, 5791, '\P{Blk=-Runic}', "");
Expect(0, 5791, '\P{^Blk=-Runic}', "");
Error('\p{Is_Block=- runic/a/}');
Error('\P{Is_Block=- runic/a/}');
Expect(1, 5887, '\p{Is_Block=runic}', "");
Expect(0, 5887, '\p{^Is_Block=runic}', "");
Expect(0, 5887, '\P{Is_Block=runic}', "");
Expect(1, 5887, '\P{^Is_Block=runic}', "");
Expect(0, 5791, '\p{Is_Block=runic}', "");
Expect(1, 5791, '\p{^Is_Block=runic}', "");
Expect(1, 5791, '\P{Is_Block=runic}', "");
Expect(0, 5791, '\P{^Is_Block=runic}', "");
Expect(1, 5887, '\p{Is_Block: 	_Runic}', "");
Expect(0, 5887, '\p{^Is_Block: 	_Runic}', "");
Expect(0, 5887, '\P{Is_Block: 	_Runic}', "");
Expect(1, 5887, '\P{^Is_Block: 	_Runic}', "");
Expect(0, 5791, '\p{Is_Block: 	_Runic}', "");
Expect(1, 5791, '\p{^Is_Block: 	_Runic}', "");
Expect(1, 5791, '\P{Is_Block: 	_Runic}', "");
Expect(0, 5791, '\P{^Is_Block: 	_Runic}', "");
Error('\p{Is_Blk:	/a/runic}');
Error('\P{Is_Blk:	/a/runic}');
Expect(1, 5887, '\p{Is_Blk=runic}', "");
Expect(0, 5887, '\p{^Is_Blk=runic}', "");
Expect(0, 5887, '\P{Is_Blk=runic}', "");
Expect(1, 5887, '\P{^Is_Blk=runic}', "");
Expect(0, 5791, '\p{Is_Blk=runic}', "");
Expect(1, 5791, '\p{^Is_Blk=runic}', "");
Expect(1, 5791, '\P{Is_Blk=runic}', "");
Expect(0, 5791, '\P{^Is_Blk=runic}', "");
Expect(1, 5887, '\p{Is_Blk=-Runic}', "");
Expect(0, 5887, '\p{^Is_Blk=-Runic}', "");
Expect(0, 5887, '\P{Is_Blk=-Runic}', "");
Expect(1, 5887, '\P{^Is_Blk=-Runic}', "");
Expect(0, 5791, '\p{Is_Blk=-Runic}', "");
Expect(1, 5791, '\p{^Is_Blk=-Runic}', "");
Expect(1, 5791, '\P{Is_Blk=-Runic}', "");
Expect(0, 5791, '\P{^Is_Blk=-Runic}', "");
Error('\p{Block=/a/-	lycian}');
Error('\P{Block=/a/-	lycian}');
Expect(1, 66207, '\p{Block=lycian}', "");
Expect(0, 66207, '\p{^Block=lycian}', "");
Expect(0, 66207, '\P{Block=lycian}', "");
Expect(1, 66207, '\P{^Block=lycian}', "");
Expect(0, 66175, '\p{Block=lycian}', "");
Expect(1, 66175, '\p{^Block=lycian}', "");
Expect(1, 66175, '\P{Block=lycian}', "");
Expect(0, 66175, '\P{^Block=lycian}', "");
Expect(1, 66207, '\p{Block= lycian}', "");
Expect(0, 66207, '\p{^Block= lycian}', "");
Expect(0, 66207, '\P{Block= lycian}', "");
Expect(1, 66207, '\P{^Block= lycian}', "");
Expect(0, 66175, '\p{Block= lycian}', "");
Expect(1, 66175, '\p{^Block= lycian}', "");
Expect(1, 66175, '\P{Block= lycian}', "");
Expect(0, 66175, '\P{^Block= lycian}', "");
Error('\p{Blk= :=Lycian}');
Error('\P{Blk= :=Lycian}');
Expect(1, 66207, '\p{Blk=lycian}', "");
Expect(0, 66207, '\p{^Blk=lycian}', "");
Expect(0, 66207, '\P{Blk=lycian}', "");
Expect(1, 66207, '\P{^Blk=lycian}', "");
Expect(0, 66175, '\p{Blk=lycian}', "");
Expect(1, 66175, '\p{^Blk=lycian}', "");
Expect(1, 66175, '\P{Blk=lycian}', "");
Expect(0, 66175, '\P{^Blk=lycian}', "");
Expect(1, 66207, '\p{Blk=-_Lycian}', "");
Expect(0, 66207, '\p{^Blk=-_Lycian}', "");
Expect(0, 66207, '\P{Blk=-_Lycian}', "");
Expect(1, 66207, '\P{^Blk=-_Lycian}', "");
Expect(0, 66175, '\p{Blk=-_Lycian}', "");
Expect(1, 66175, '\p{^Blk=-_Lycian}', "");
Expect(1, 66175, '\P{Blk=-_Lycian}', "");
Expect(0, 66175, '\P{^Blk=-_Lycian}', "");
Error('\p{Is_Block=/a/--Lycian}');
Error('\P{Is_Block=/a/--Lycian}');
Expect(1, 66207, '\p{Is_Block=lycian}', "");
Expect(0, 66207, '\p{^Is_Block=lycian}', "");
Expect(0, 66207, '\P{Is_Block=lycian}', "");
Expect(1, 66207, '\P{^Is_Block=lycian}', "");
Expect(0, 66175, '\p{Is_Block=lycian}', "");
Expect(1, 66175, '\p{^Is_Block=lycian}', "");
Expect(1, 66175, '\P{Is_Block=lycian}', "");
Expect(0, 66175, '\P{^Is_Block=lycian}', "");
Expect(1, 66207, '\p{Is_Block=	LYCIAN}', "");
Expect(0, 66207, '\p{^Is_Block=	LYCIAN}', "");
Expect(0, 66207, '\P{Is_Block=	LYCIAN}', "");
Expect(1, 66207, '\P{^Is_Block=	LYCIAN}', "");
Expect(0, 66175, '\p{Is_Block=	LYCIAN}', "");
Expect(1, 66175, '\p{^Is_Block=	LYCIAN}', "");
Expect(1, 66175, '\P{Is_Block=	LYCIAN}', "");
Expect(0, 66175, '\P{^Is_Block=	LYCIAN}', "");
Error('\p{Is_Blk= -Lycian/a/}');
Error('\P{Is_Blk= -Lycian/a/}');
Expect(1, 66207, '\p{Is_Blk=lycian}', "");
Expect(0, 66207, '\p{^Is_Blk=lycian}', "");
Expect(0, 66207, '\P{Is_Blk=lycian}', "");
Expect(1, 66207, '\P{^Is_Blk=lycian}', "");
Expect(0, 66175, '\p{Is_Blk=lycian}', "");
Expect(1, 66175, '\p{^Is_Blk=lycian}', "");
Expect(1, 66175, '\P{Is_Blk=lycian}', "");
Expect(0, 66175, '\P{^Is_Blk=lycian}', "");
Expect(1, 66207, '\p{Is_Blk=_Lycian}', "");
Expect(0, 66207, '\p{^Is_Blk=_Lycian}', "");
Expect(0, 66207, '\P{Is_Blk=_Lycian}', "");
Expect(1, 66207, '\P{^Is_Blk=_Lycian}', "");
Expect(0, 66175, '\p{Is_Blk=_Lycian}', "");
Expect(1, 66175, '\p{^Is_Blk=_Lycian}', "");
Expect(1, 66175, '\P{Is_Blk=_Lycian}', "");
Expect(0, 66175, '\P{^Is_Blk=_Lycian}', "");
Error('\p{Block: :=_-GEOMETRIC-Shapes}');
Error('\P{Block: :=_-GEOMETRIC-Shapes}');
Expect(1, 9727, '\p{Block=geometricshapes}', "");
Expect(0, 9727, '\p{^Block=geometricshapes}', "");
Expect(0, 9727, '\P{Block=geometricshapes}', "");
Expect(1, 9727, '\P{^Block=geometricshapes}', "");
Expect(0, 9631, '\p{Block=geometricshapes}', "");
Expect(1, 9631, '\p{^Block=geometricshapes}', "");
Expect(1, 9631, '\P{Block=geometricshapes}', "");
Expect(0, 9631, '\P{^Block=geometricshapes}', "");
Expect(1, 9727, '\p{Block=	GeometricShapes}', "");
Expect(0, 9727, '\p{^Block=	GeometricShapes}', "");
Expect(0, 9727, '\P{Block=	GeometricShapes}', "");
Expect(1, 9727, '\P{^Block=	GeometricShapes}', "");
Expect(0, 9631, '\p{Block=	GeometricShapes}', "");
Expect(1, 9631, '\p{^Block=	GeometricShapes}', "");
Expect(1, 9631, '\P{Block=	GeometricShapes}', "");
Expect(0, 9631, '\P{^Block=	GeometricShapes}', "");
Error('\p{Blk=-_Geometric:=SHAPES}');
Error('\P{Blk=-_Geometric:=SHAPES}');
Expect(1, 9727, '\p{Blk=geometricshapes}', "");
Expect(0, 9727, '\p{^Blk=geometricshapes}', "");
Expect(0, 9727, '\P{Blk=geometricshapes}', "");
Expect(1, 9727, '\P{^Blk=geometricshapes}', "");
Expect(0, 9631, '\p{Blk=geometricshapes}', "");
Expect(1, 9631, '\p{^Blk=geometricshapes}', "");
Expect(1, 9631, '\P{Blk=geometricshapes}', "");
Expect(0, 9631, '\P{^Blk=geometricshapes}', "");
Expect(1, 9727, '\p{Blk:			GeometricShapes}', "");
Expect(0, 9727, '\p{^Blk:			GeometricShapes}', "");
Expect(0, 9727, '\P{Blk:			GeometricShapes}', "");
Expect(1, 9727, '\P{^Blk:			GeometricShapes}', "");
Expect(0, 9631, '\p{Blk:			GeometricShapes}', "");
Expect(1, 9631, '\p{^Blk:			GeometricShapes}', "");
Expect(1, 9631, '\P{Blk:			GeometricShapes}', "");
Expect(0, 9631, '\P{^Blk:			GeometricShapes}', "");
Error('\p{Is_Block:   _-GEOMETRIC:=SHAPES}');
Error('\P{Is_Block:   _-GEOMETRIC:=SHAPES}');
Expect(1, 9727, '\p{Is_Block=geometricshapes}', "");
Expect(0, 9727, '\p{^Is_Block=geometricshapes}', "");
Expect(0, 9727, '\P{Is_Block=geometricshapes}', "");
Expect(1, 9727, '\P{^Is_Block=geometricshapes}', "");
Expect(0, 9631, '\p{Is_Block=geometricshapes}', "");
Expect(1, 9631, '\p{^Is_Block=geometricshapes}', "");
Expect(1, 9631, '\P{Is_Block=geometricshapes}', "");
Expect(0, 9631, '\P{^Is_Block=geometricshapes}', "");
Expect(1, 9727, '\p{Is_Block=		GEOMETRIC_shapes}', "");
Expect(0, 9727, '\p{^Is_Block=		GEOMETRIC_shapes}', "");
Expect(0, 9727, '\P{Is_Block=		GEOMETRIC_shapes}', "");
Expect(1, 9727, '\P{^Is_Block=		GEOMETRIC_shapes}', "");
Expect(0, 9631, '\p{Is_Block=		GEOMETRIC_shapes}', "");
Expect(1, 9631, '\p{^Is_Block=		GEOMETRIC_shapes}', "");
Expect(1, 9631, '\P{Is_Block=		GEOMETRIC_shapes}', "");
Expect(0, 9631, '\P{^Is_Block=		GEOMETRIC_shapes}', "");
Error('\p{Is_Blk=-/a/Geometric Shapes}');
Error('\P{Is_Blk=-/a/Geometric Shapes}');
Expect(1, 9727, '\p{Is_Blk=geometricshapes}', "");
Expect(0, 9727, '\p{^Is_Blk=geometricshapes}', "");
Expect(0, 9727, '\P{Is_Blk=geometricshapes}', "");
Expect(1, 9727, '\P{^Is_Blk=geometricshapes}', "");
Expect(0, 9631, '\p{Is_Blk=geometricshapes}', "");
Expect(1, 9631, '\p{^Is_Blk=geometricshapes}', "");
Expect(1, 9631, '\P{Is_Blk=geometricshapes}', "");
Expect(0, 9631, '\P{^Is_Blk=geometricshapes}', "");
Expect(1, 9727, '\p{Is_Blk=_	GEOMETRIC-shapes}', "");
Expect(0, 9727, '\p{^Is_Blk=_	GEOMETRIC-shapes}', "");
Expect(0, 9727, '\P{Is_Blk=_	GEOMETRIC-shapes}', "");
Expect(1, 9727, '\P{^Is_Blk=_	GEOMETRIC-shapes}', "");
Expect(0, 9631, '\p{Is_Blk=_	GEOMETRIC-shapes}', "");
Expect(1, 9631, '\p{^Is_Blk=_	GEOMETRIC-shapes}', "");
Expect(1, 9631, '\P{Is_Blk=_	GEOMETRIC-shapes}', "");
Expect(0, 9631, '\P{^Is_Blk=_	GEOMETRIC-shapes}', "");
Error('\p{Block:  Aegean_Numbers:=}');
Error('\P{Block:  Aegean_Numbers:=}');
Expect(1, 65855, '\p{Block=aegeannumbers}', "");
Expect(0, 65855, '\p{^Block=aegeannumbers}', "");
Expect(0, 65855, '\P{Block=aegeannumbers}', "");
Expect(1, 65855, '\P{^Block=aegeannumbers}', "");
Expect(0, 65791, '\p{Block=aegeannumbers}', "");
Expect(1, 65791, '\p{^Block=aegeannumbers}', "");
Expect(1, 65791, '\P{Block=aegeannumbers}', "");
Expect(0, 65791, '\P{^Block=aegeannumbers}', "");
Expect(1, 65855, '\p{Block=	_aegean	Numbers}', "");
Expect(0, 65855, '\p{^Block=	_aegean	Numbers}', "");
Expect(0, 65855, '\P{Block=	_aegean	Numbers}', "");
Expect(1, 65855, '\P{^Block=	_aegean	Numbers}', "");
Expect(0, 65791, '\p{Block=	_aegean	Numbers}', "");
Expect(1, 65791, '\p{^Block=	_aegean	Numbers}', "");
Expect(1, 65791, '\P{Block=	_aegean	Numbers}', "");
Expect(0, 65791, '\P{^Block=	_aegean	Numbers}', "");
Error('\p{Blk=_:=Aegean-Numbers}');
Error('\P{Blk=_:=Aegean-Numbers}');
Expect(1, 65855, '\p{Blk=aegeannumbers}', "");
Expect(0, 65855, '\p{^Blk=aegeannumbers}', "");
Expect(0, 65855, '\P{Blk=aegeannumbers}', "");
Expect(1, 65855, '\P{^Blk=aegeannumbers}', "");
Expect(0, 65791, '\p{Blk=aegeannumbers}', "");
Expect(1, 65791, '\p{^Blk=aegeannumbers}', "");
Expect(1, 65791, '\P{Blk=aegeannumbers}', "");
Expect(0, 65791, '\P{^Blk=aegeannumbers}', "");
Expect(1, 65855, '\p{Blk=  AEGEAN_Numbers}', "");
Expect(0, 65855, '\p{^Blk=  AEGEAN_Numbers}', "");
Expect(0, 65855, '\P{Blk=  AEGEAN_Numbers}', "");
Expect(1, 65855, '\P{^Blk=  AEGEAN_Numbers}', "");
Expect(0, 65791, '\p{Blk=  AEGEAN_Numbers}', "");
Expect(1, 65791, '\p{^Blk=  AEGEAN_Numbers}', "");
Expect(1, 65791, '\P{Blk=  AEGEAN_Numbers}', "");
Expect(0, 65791, '\P{^Blk=  AEGEAN_Numbers}', "");
Error('\p{Is_Block= /a/AEGEANNumbers}');
Error('\P{Is_Block= /a/AEGEANNumbers}');
Expect(1, 65855, '\p{Is_Block=aegeannumbers}', "");
Expect(0, 65855, '\p{^Is_Block=aegeannumbers}', "");
Expect(0, 65855, '\P{Is_Block=aegeannumbers}', "");
Expect(1, 65855, '\P{^Is_Block=aegeannumbers}', "");
Expect(0, 65791, '\p{Is_Block=aegeannumbers}', "");
Expect(1, 65791, '\p{^Is_Block=aegeannumbers}', "");
Expect(1, 65791, '\P{Is_Block=aegeannumbers}', "");
Expect(0, 65791, '\P{^Is_Block=aegeannumbers}', "");
Expect(1, 65855, '\p{Is_Block=	_Aegean_NUMBERS}', "");
Expect(0, 65855, '\p{^Is_Block=	_Aegean_NUMBERS}', "");
Expect(0, 65855, '\P{Is_Block=	_Aegean_NUMBERS}', "");
Expect(1, 65855, '\P{^Is_Block=	_Aegean_NUMBERS}', "");
Expect(0, 65791, '\p{Is_Block=	_Aegean_NUMBERS}', "");
Expect(1, 65791, '\p{^Is_Block=	_Aegean_NUMBERS}', "");
Expect(1, 65791, '\P{Is_Block=	_Aegean_NUMBERS}', "");
Expect(0, 65791, '\P{^Is_Block=	_Aegean_NUMBERS}', "");
Error('\p{Is_Blk= AEGEAN:=NUMBERS}');
Error('\P{Is_Blk= AEGEAN:=NUMBERS}');
Expect(1, 65855, '\p{Is_Blk=aegeannumbers}', "");
Expect(0, 65855, '\p{^Is_Blk=aegeannumbers}', "");
Expect(0, 65855, '\P{Is_Blk=aegeannumbers}', "");
Expect(1, 65855, '\P{^Is_Blk=aegeannumbers}', "");
Expect(0, 65791, '\p{Is_Blk=aegeannumbers}', "");
Expect(1, 65791, '\p{^Is_Blk=aegeannumbers}', "");
Expect(1, 65791, '\P{Is_Blk=aegeannumbers}', "");
Expect(0, 65791, '\P{^Is_Blk=aegeannumbers}', "");
Expect(1, 65855, '\p{Is_Blk=		Aegean-NUMBERS}', "");
Expect(0, 65855, '\p{^Is_Blk=		Aegean-NUMBERS}', "");
Expect(0, 65855, '\P{Is_Blk=		Aegean-NUMBERS}', "");
Expect(1, 65855, '\P{^Is_Blk=		Aegean-NUMBERS}', "");
Expect(0, 65791, '\p{Is_Blk=		Aegean-NUMBERS}', "");
Expect(1, 65791, '\p{^Is_Blk=		Aegean-NUMBERS}', "");
Expect(1, 65791, '\P{Is_Blk=		Aegean-NUMBERS}', "");
Expect(0, 65791, '\P{^Is_Blk=		Aegean-NUMBERS}', "");
Error('\p{Block:   :=KHMER Symbols}');
Error('\P{Block:   :=KHMER Symbols}');
Expect(1, 6655, '\p{Block:   khmersymbols}', "");
Expect(0, 6655, '\p{^Block:   khmersymbols}', "");
Expect(0, 6655, '\P{Block:   khmersymbols}', "");
Expect(1, 6655, '\P{^Block:   khmersymbols}', "");
Expect(0, 6623, '\p{Block:   khmersymbols}', "");
Expect(1, 6623, '\p{^Block:   khmersymbols}', "");
Expect(1, 6623, '\P{Block:   khmersymbols}', "");
Expect(0, 6623, '\P{^Block:   khmersymbols}', "");
Expect(1, 6655, '\p{Block=	-Khmer SYMBOLS}', "");
Expect(0, 6655, '\p{^Block=	-Khmer SYMBOLS}', "");
Expect(0, 6655, '\P{Block=	-Khmer SYMBOLS}', "");
Expect(1, 6655, '\P{^Block=	-Khmer SYMBOLS}', "");
Expect(0, 6623, '\p{Block=	-Khmer SYMBOLS}', "");
Expect(1, 6623, '\p{^Block=	-Khmer SYMBOLS}', "");
Expect(1, 6623, '\P{Block=	-Khmer SYMBOLS}', "");
Expect(0, 6623, '\P{^Block=	-Khmer SYMBOLS}', "");
Error('\p{Blk=	_khmer:=Symbols}');
Error('\P{Blk=	_khmer:=Symbols}');
Expect(1, 6655, '\p{Blk=khmersymbols}', "");
Expect(0, 6655, '\p{^Blk=khmersymbols}', "");
Expect(0, 6655, '\P{Blk=khmersymbols}', "");
Expect(1, 6655, '\P{^Blk=khmersymbols}', "");
Expect(0, 6623, '\p{Blk=khmersymbols}', "");
Expect(1, 6623, '\p{^Blk=khmersymbols}', "");
Expect(1, 6623, '\P{Blk=khmersymbols}', "");
Expect(0, 6623, '\P{^Blk=khmersymbols}', "");
Expect(1, 6655, '\p{Blk=_	KHMER_Symbols}', "");
Expect(0, 6655, '\p{^Blk=_	KHMER_Symbols}', "");
Expect(0, 6655, '\P{Blk=_	KHMER_Symbols}', "");
Expect(1, 6655, '\P{^Blk=_	KHMER_Symbols}', "");
Expect(0, 6623, '\p{Blk=_	KHMER_Symbols}', "");
Expect(1, 6623, '\p{^Blk=_	KHMER_Symbols}', "");
Expect(1, 6623, '\P{Blk=_	KHMER_Symbols}', "");
Expect(0, 6623, '\P{^Blk=_	KHMER_Symbols}', "");
Error('\p{Is_Block=- Khmer/a/Symbols}');
Error('\P{Is_Block=- Khmer/a/Symbols}');
Expect(1, 6655, '\p{Is_Block=khmersymbols}', "");
Expect(0, 6655, '\p{^Is_Block=khmersymbols}', "");
Expect(0, 6655, '\P{Is_Block=khmersymbols}', "");
Expect(1, 6655, '\P{^Is_Block=khmersymbols}', "");
Expect(0, 6623, '\p{Is_Block=khmersymbols}', "");
Expect(1, 6623, '\p{^Is_Block=khmersymbols}', "");
Expect(1, 6623, '\P{Is_Block=khmersymbols}', "");
Expect(0, 6623, '\P{^Is_Block=khmersymbols}', "");
Expect(1, 6655, '\p{Is_Block=	 KHMER	Symbols}', "");
Expect(0, 6655, '\p{^Is_Block=	 KHMER	Symbols}', "");
Expect(0, 6655, '\P{Is_Block=	 KHMER	Symbols}', "");
Expect(1, 6655, '\P{^Is_Block=	 KHMER	Symbols}', "");
Expect(0, 6623, '\p{Is_Block=	 KHMER	Symbols}', "");
Expect(1, 6623, '\p{^Is_Block=	 KHMER	Symbols}', "");
Expect(1, 6623, '\P{Is_Block=	 KHMER	Symbols}', "");
Expect(0, 6623, '\P{^Is_Block=	 KHMER	Symbols}', "");
Error('\p{Is_Blk=_/a/Khmer_Symbols}');
Error('\P{Is_Blk=_/a/Khmer_Symbols}');
Expect(1, 6655, '\p{Is_Blk=khmersymbols}', "");
Expect(0, 6655, '\p{^Is_Blk=khmersymbols}', "");
Expect(0, 6655, '\P{Is_Blk=khmersymbols}', "");
Expect(1, 6655, '\P{^Is_Blk=khmersymbols}', "");
Expect(0, 6623, '\p{Is_Blk=khmersymbols}', "");
Expect(1, 6623, '\p{^Is_Blk=khmersymbols}', "");
Expect(1, 6623, '\P{Is_Blk=khmersymbols}', "");
Expect(0, 6623, '\P{^Is_Blk=khmersymbols}', "");
Expect(1, 6655, '\p{Is_Blk=	KHMER	Symbols}', "");
Expect(0, 6655, '\p{^Is_Blk=	KHMER	Symbols}', "");
Expect(0, 6655, '\P{Is_Blk=	KHMER	Symbols}', "");
Expect(1, 6655, '\P{^Is_Blk=	KHMER	Symbols}', "");
Expect(0, 6623, '\p{Is_Blk=	KHMER	Symbols}', "");
Expect(1, 6623, '\p{^Is_Blk=	KHMER	Symbols}', "");
Expect(1, 6623, '\P{Is_Blk=	KHMER	Symbols}', "");
Expect(0, 6623, '\P{^Is_Blk=	KHMER	Symbols}', "");
Error('\p{Block=	cjk/a/RADICALS-Supplement}');
Error('\P{Block=	cjk/a/RADICALS-Supplement}');
Expect(1, 12031, '\p{Block=cjkradicalssupplement}', "");
Expect(0, 12031, '\p{^Block=cjkradicalssupplement}', "");
Expect(0, 12031, '\P{Block=cjkradicalssupplement}', "");
Expect(1, 12031, '\P{^Block=cjkradicalssupplement}', "");
Expect(0, 11903, '\p{Block=cjkradicalssupplement}', "");
Expect(1, 11903, '\p{^Block=cjkradicalssupplement}', "");
Expect(1, 11903, '\P{Block=cjkradicalssupplement}', "");
Expect(0, 11903, '\P{^Block=cjkradicalssupplement}', "");
Expect(1, 12031, '\p{Block=_CJK_Radicals SUPPLEMENT}', "");
Expect(0, 12031, '\p{^Block=_CJK_Radicals SUPPLEMENT}', "");
Expect(0, 12031, '\P{Block=_CJK_Radicals SUPPLEMENT}', "");
Expect(1, 12031, '\P{^Block=_CJK_Radicals SUPPLEMENT}', "");
Expect(0, 11903, '\p{Block=_CJK_Radicals SUPPLEMENT}', "");
Expect(1, 11903, '\p{^Block=_CJK_Radicals SUPPLEMENT}', "");
Expect(1, 11903, '\P{Block=_CJK_Radicals SUPPLEMENT}', "");
Expect(0, 11903, '\P{^Block=_CJK_Radicals SUPPLEMENT}', "");
Error('\p{Blk=/a/ 	CJK_radicals	Supplement}');
Error('\P{Blk=/a/ 	CJK_radicals	Supplement}');
Expect(1, 12031, '\p{Blk=cjkradicalssupplement}', "");
Expect(0, 12031, '\p{^Blk=cjkradicalssupplement}', "");
Expect(0, 12031, '\P{Blk=cjkradicalssupplement}', "");
Expect(1, 12031, '\P{^Blk=cjkradicalssupplement}', "");
Expect(0, 11903, '\p{Blk=cjkradicalssupplement}', "");
Expect(1, 11903, '\p{^Blk=cjkradicalssupplement}', "");
Expect(1, 11903, '\P{Blk=cjkradicalssupplement}', "");
Expect(0, 11903, '\P{^Blk=cjkradicalssupplement}', "");
Expect(1, 12031, '\p{Blk=_	cjkradicals	Supplement}', "");
Expect(0, 12031, '\p{^Blk=_	cjkradicals	Supplement}', "");
Expect(0, 12031, '\P{Blk=_	cjkradicals	Supplement}', "");
Expect(1, 12031, '\P{^Blk=_	cjkradicals	Supplement}', "");
Expect(0, 11903, '\p{Blk=_	cjkradicals	Supplement}', "");
Expect(1, 11903, '\p{^Blk=_	cjkradicals	Supplement}', "");
Expect(1, 11903, '\P{Blk=_	cjkradicals	Supplement}', "");
Expect(0, 11903, '\P{^Blk=_	cjkradicals	Supplement}', "");
Error('\p{Is_Block=:= CJK_radicalssupplement}');
Error('\P{Is_Block=:= CJK_radicalssupplement}');
Expect(1, 12031, '\p{Is_Block=cjkradicalssupplement}', "");
Expect(0, 12031, '\p{^Is_Block=cjkradicalssupplement}', "");
Expect(0, 12031, '\P{Is_Block=cjkradicalssupplement}', "");
Expect(1, 12031, '\P{^Is_Block=cjkradicalssupplement}', "");
Expect(0, 11903, '\p{Is_Block=cjkradicalssupplement}', "");
Expect(1, 11903, '\p{^Is_Block=cjkradicalssupplement}', "");
Expect(1, 11903, '\P{Is_Block=cjkradicalssupplement}', "");
Expect(0, 11903, '\P{^Is_Block=cjkradicalssupplement}', "");
Expect(1, 12031, '\p{Is_Block= 	CJK	radicals-SUPPLEMENT}', "");
Expect(0, 12031, '\p{^Is_Block= 	CJK	radicals-SUPPLEMENT}', "");
Expect(0, 12031, '\P{Is_Block= 	CJK	radicals-SUPPLEMENT}', "");
Expect(1, 12031, '\P{^Is_Block= 	CJK	radicals-SUPPLEMENT}', "");
Expect(0, 11903, '\p{Is_Block= 	CJK	radicals-SUPPLEMENT}', "");
Expect(1, 11903, '\p{^Is_Block= 	CJK	radicals-SUPPLEMENT}', "");
Expect(1, 11903, '\P{Is_Block= 	CJK	radicals-SUPPLEMENT}', "");
Expect(0, 11903, '\P{^Is_Block= 	CJK	radicals-SUPPLEMENT}', "");
Error('\p{Is_Blk=:=_CJK Radicals	SUPPLEMENT}');
Error('\P{Is_Blk=:=_CJK Radicals	SUPPLEMENT}');
Expect(1, 12031, '\p{Is_Blk=cjkradicalssupplement}', "");
Expect(0, 12031, '\p{^Is_Blk=cjkradicalssupplement}', "");
Expect(0, 12031, '\P{Is_Blk=cjkradicalssupplement}', "");
Expect(1, 12031, '\P{^Is_Blk=cjkradicalssupplement}', "");
Expect(0, 11903, '\p{Is_Blk=cjkradicalssupplement}', "");
Expect(1, 11903, '\p{^Is_Blk=cjkradicalssupplement}', "");
Expect(1, 11903, '\P{Is_Blk=cjkradicalssupplement}', "");
Expect(0, 11903, '\P{^Is_Blk=cjkradicalssupplement}', "");
Expect(1, 12031, '\p{Is_Blk=_CJK	radicals	Supplement}', "");
Expect(0, 12031, '\p{^Is_Blk=_CJK	radicals	Supplement}', "");
Expect(0, 12031, '\P{Is_Blk=_CJK	radicals	Supplement}', "");
Expect(1, 12031, '\P{^Is_Blk=_CJK	radicals	Supplement}', "");
Expect(0, 11903, '\p{Is_Blk=_CJK	radicals	Supplement}', "");
Expect(1, 11903, '\p{^Is_Blk=_CJK	radicals	Supplement}', "");
Expect(1, 11903, '\P{Is_Blk=_CJK	radicals	Supplement}', "");
Expect(0, 11903, '\P{^Is_Blk=_CJK	radicals	Supplement}', "");
Error('\p{Block=-/a/ALCHEMICAL-SYMBOLS}');
Error('\P{Block=-/a/ALCHEMICAL-SYMBOLS}');
Expect(1, 128895, '\p{Block=alchemicalsymbols}', "");
Expect(0, 128895, '\p{^Block=alchemicalsymbols}', "");
Expect(0, 128895, '\P{Block=alchemicalsymbols}', "");
Expect(1, 128895, '\P{^Block=alchemicalsymbols}', "");
Expect(0, 128767, '\p{Block=alchemicalsymbols}', "");
Expect(1, 128767, '\p{^Block=alchemicalsymbols}', "");
Expect(1, 128767, '\P{Block=alchemicalsymbols}', "");
Expect(0, 128767, '\P{^Block=alchemicalsymbols}', "");
Expect(1, 128895, '\p{Block=	 ALCHEMICAL_Symbols}', "");
Expect(0, 128895, '\p{^Block=	 ALCHEMICAL_Symbols}', "");
Expect(0, 128895, '\P{Block=	 ALCHEMICAL_Symbols}', "");
Expect(1, 128895, '\P{^Block=	 ALCHEMICAL_Symbols}', "");
Expect(0, 128767, '\p{Block=	 ALCHEMICAL_Symbols}', "");
Expect(1, 128767, '\p{^Block=	 ALCHEMICAL_Symbols}', "");
Expect(1, 128767, '\P{Block=	 ALCHEMICAL_Symbols}', "");
Expect(0, 128767, '\P{^Block=	 ALCHEMICAL_Symbols}', "");
Error('\p{Blk=-/a/alchemicalsymbols}');
Error('\P{Blk=-/a/alchemicalsymbols}');
Expect(1, 128895, '\p{Blk=alchemicalsymbols}', "");
Expect(0, 128895, '\p{^Blk=alchemicalsymbols}', "");
Expect(0, 128895, '\P{Blk=alchemicalsymbols}', "");
Expect(1, 128895, '\P{^Blk=alchemicalsymbols}', "");
Expect(0, 128767, '\p{Blk=alchemicalsymbols}', "");
Expect(1, 128767, '\p{^Blk=alchemicalsymbols}', "");
Expect(1, 128767, '\P{Blk=alchemicalsymbols}', "");
Expect(0, 128767, '\P{^Blk=alchemicalsymbols}', "");
Expect(1, 128895, '\p{Blk=-_alchemical-Symbols}', "");
Expect(0, 128895, '\p{^Blk=-_alchemical-Symbols}', "");
Expect(0, 128895, '\P{Blk=-_alchemical-Symbols}', "");
Expect(1, 128895, '\P{^Blk=-_alchemical-Symbols}', "");
Expect(0, 128767, '\p{Blk=-_alchemical-Symbols}', "");
Expect(1, 128767, '\p{^Blk=-_alchemical-Symbols}', "");
Expect(1, 128767, '\P{Blk=-_alchemical-Symbols}', "");
Expect(0, 128767, '\P{^Blk=-_alchemical-Symbols}', "");
Error('\p{Is_Block=-:=alchemical_SYMBOLS}');
Error('\P{Is_Block=-:=alchemical_SYMBOLS}');
Expect(1, 128895, '\p{Is_Block=alchemicalsymbols}', "");
Expect(0, 128895, '\p{^Is_Block=alchemicalsymbols}', "");
Expect(0, 128895, '\P{Is_Block=alchemicalsymbols}', "");
Expect(1, 128895, '\P{^Is_Block=alchemicalsymbols}', "");
Expect(0, 128767, '\p{Is_Block=alchemicalsymbols}', "");
Expect(1, 128767, '\p{^Is_Block=alchemicalsymbols}', "");
Expect(1, 128767, '\P{Is_Block=alchemicalsymbols}', "");
Expect(0, 128767, '\P{^Is_Block=alchemicalsymbols}', "");
Expect(1, 128895, '\p{Is_Block= 	Alchemical_Symbols}', "");
Expect(0, 128895, '\p{^Is_Block= 	Alchemical_Symbols}', "");
Expect(0, 128895, '\P{Is_Block= 	Alchemical_Symbols}', "");
Expect(1, 128895, '\P{^Is_Block= 	Alchemical_Symbols}', "");
Expect(0, 128767, '\p{Is_Block= 	Alchemical_Symbols}', "");
Expect(1, 128767, '\p{^Is_Block= 	Alchemical_Symbols}', "");
Expect(1, 128767, '\P{Is_Block= 	Alchemical_Symbols}', "");
Expect(0, 128767, '\P{^Is_Block= 	Alchemical_Symbols}', "");
Error('\p{Is_Blk=-ALCHEMICAL:=Symbols}');
Error('\P{Is_Blk=-ALCHEMICAL:=Symbols}');
Expect(1, 128895, '\p{Is_Blk=alchemicalsymbols}', "");
Expect(0, 128895, '\p{^Is_Blk=alchemicalsymbols}', "");
Expect(0, 128895, '\P{Is_Blk=alchemicalsymbols}', "");
Expect(1, 128895, '\P{^Is_Blk=alchemicalsymbols}', "");
Expect(0, 128767, '\p{Is_Blk=alchemicalsymbols}', "");
Expect(1, 128767, '\p{^Is_Blk=alchemicalsymbols}', "");
Expect(1, 128767, '\P{Is_Blk=alchemicalsymbols}', "");
Expect(0, 128767, '\P{^Is_Blk=alchemicalsymbols}', "");
Expect(1, 128895, '\p{Is_Blk=_alchemical-SYMBOLS}', "");
Expect(0, 128895, '\p{^Is_Blk=_alchemical-SYMBOLS}', "");
Expect(0, 128895, '\P{Is_Blk=_alchemical-SYMBOLS}', "");
Expect(1, 128895, '\P{^Is_Blk=_alchemical-SYMBOLS}', "");
Expect(0, 128767, '\p{Is_Blk=_alchemical-SYMBOLS}', "");
Expect(1, 128767, '\p{^Is_Blk=_alchemical-SYMBOLS}', "");
Expect(1, 128767, '\P{Is_Blk=_alchemical-SYMBOLS}', "");
Expect(0, 128767, '\P{^Is_Blk=_alchemical-SYMBOLS}', "");
Error('\p{Block=/a/Imperial-Aramaic}');
Error('\P{Block=/a/Imperial-Aramaic}');
Expect(1, 67679, '\p{Block=imperialaramaic}', "");
Expect(0, 67679, '\p{^Block=imperialaramaic}', "");
Expect(0, 67679, '\P{Block=imperialaramaic}', "");
Expect(1, 67679, '\P{^Block=imperialaramaic}', "");
Expect(0, 67647, '\p{Block=imperialaramaic}', "");
Expect(1, 67647, '\p{^Block=imperialaramaic}', "");
Expect(1, 67647, '\P{Block=imperialaramaic}', "");
Expect(0, 67647, '\P{^Block=imperialaramaic}', "");
Expect(1, 67679, '\p{Block=--Imperial	Aramaic}', "");
Expect(0, 67679, '\p{^Block=--Imperial	Aramaic}', "");
Expect(0, 67679, '\P{Block=--Imperial	Aramaic}', "");
Expect(1, 67679, '\P{^Block=--Imperial	Aramaic}', "");
Expect(0, 67647, '\p{Block=--Imperial	Aramaic}', "");
Expect(1, 67647, '\p{^Block=--Imperial	Aramaic}', "");
Expect(1, 67647, '\P{Block=--Imperial	Aramaic}', "");
Expect(0, 67647, '\P{^Block=--Imperial	Aramaic}', "");
Error('\p{Blk=-	Imperial:=ARAMAIC}');
Error('\P{Blk=-	Imperial:=ARAMAIC}');
Expect(1, 67679, '\p{Blk=imperialaramaic}', "");
Expect(0, 67679, '\p{^Blk=imperialaramaic}', "");
Expect(0, 67679, '\P{Blk=imperialaramaic}', "");
Expect(1, 67679, '\P{^Blk=imperialaramaic}', "");
Expect(0, 67647, '\p{Blk=imperialaramaic}', "");
Expect(1, 67647, '\p{^Blk=imperialaramaic}', "");
Expect(1, 67647, '\P{Blk=imperialaramaic}', "");
Expect(0, 67647, '\P{^Blk=imperialaramaic}', "");
Expect(1, 67679, '\p{Blk= _Imperialaramaic}', "");
Expect(0, 67679, '\p{^Blk= _Imperialaramaic}', "");
Expect(0, 67679, '\P{Blk= _Imperialaramaic}', "");
Expect(1, 67679, '\P{^Blk= _Imperialaramaic}', "");
Expect(0, 67647, '\p{Blk= _Imperialaramaic}', "");
Expect(1, 67647, '\p{^Blk= _Imperialaramaic}', "");
Expect(1, 67647, '\P{Blk= _Imperialaramaic}', "");
Expect(0, 67647, '\P{^Blk= _Imperialaramaic}', "");
Error('\p{Is_Block=_IMPERIAL/a/Aramaic}');
Error('\P{Is_Block=_IMPERIAL/a/Aramaic}');
Expect(1, 67679, '\p{Is_Block=imperialaramaic}', "");
Expect(0, 67679, '\p{^Is_Block=imperialaramaic}', "");
Expect(0, 67679, '\P{Is_Block=imperialaramaic}', "");
Expect(1, 67679, '\P{^Is_Block=imperialaramaic}', "");
Expect(0, 67647, '\p{Is_Block=imperialaramaic}', "");
Expect(1, 67647, '\p{^Is_Block=imperialaramaic}', "");
Expect(1, 67647, '\P{Is_Block=imperialaramaic}', "");
Expect(0, 67647, '\P{^Is_Block=imperialaramaic}', "");
Expect(1, 67679, '\p{Is_Block=-IMPERIAL-Aramaic}', "");
Expect(0, 67679, '\p{^Is_Block=-IMPERIAL-Aramaic}', "");
Expect(0, 67679, '\P{Is_Block=-IMPERIAL-Aramaic}', "");
Expect(1, 67679, '\P{^Is_Block=-IMPERIAL-Aramaic}', "");
Expect(0, 67647, '\p{Is_Block=-IMPERIAL-Aramaic}', "");
Expect(1, 67647, '\p{^Is_Block=-IMPERIAL-Aramaic}', "");
Expect(1, 67647, '\P{Is_Block=-IMPERIAL-Aramaic}', "");
Expect(0, 67647, '\P{^Is_Block=-IMPERIAL-Aramaic}', "");
Error('\p{Is_Blk=/a/Imperial_ARAMAIC}');
Error('\P{Is_Blk=/a/Imperial_ARAMAIC}');
Expect(1, 67679, '\p{Is_Blk=imperialaramaic}', "");
Expect(0, 67679, '\p{^Is_Blk=imperialaramaic}', "");
Expect(0, 67679, '\P{Is_Blk=imperialaramaic}', "");
Expect(1, 67679, '\P{^Is_Blk=imperialaramaic}', "");
Expect(0, 67647, '\p{Is_Blk=imperialaramaic}', "");
Expect(1, 67647, '\p{^Is_Blk=imperialaramaic}', "");
Expect(1, 67647, '\P{Is_Blk=imperialaramaic}', "");
Expect(0, 67647, '\P{^Is_Blk=imperialaramaic}', "");
Expect(1, 67679, '\p{Is_Blk= IMPERIAL_Aramaic}', "");
Expect(0, 67679, '\p{^Is_Blk= IMPERIAL_Aramaic}', "");
Expect(0, 67679, '\P{Is_Blk= IMPERIAL_Aramaic}', "");
Expect(1, 67679, '\P{^Is_Blk= IMPERIAL_Aramaic}', "");
Expect(0, 67647, '\p{Is_Blk= IMPERIAL_Aramaic}', "");
Expect(1, 67647, '\p{^Is_Blk= IMPERIAL_Aramaic}', "");
Expect(1, 67647, '\P{Is_Blk= IMPERIAL_Aramaic}', "");
Expect(0, 67647, '\P{^Is_Blk= IMPERIAL_Aramaic}', "");
Error('\p{Block:-Mathematical	OPERATORS/a/}');
Error('\P{Block:-Mathematical	OPERATORS/a/}');
Expect(1, 8959, '\p{Block=mathematicaloperators}', "");
Expect(0, 8959, '\p{^Block=mathematicaloperators}', "");
Expect(0, 8959, '\P{Block=mathematicaloperators}', "");
Expect(1, 8959, '\P{^Block=mathematicaloperators}', "");
Expect(0, 8703, '\p{Block=mathematicaloperators}', "");
Expect(1, 8703, '\p{^Block=mathematicaloperators}', "");
Expect(1, 8703, '\P{Block=mathematicaloperators}', "");
Expect(0, 8703, '\P{^Block=mathematicaloperators}', "");
Expect(1, 8959, '\p{Block: 	 mathematical Operators}', "");
Expect(0, 8959, '\p{^Block: 	 mathematical Operators}', "");
Expect(0, 8959, '\P{Block: 	 mathematical Operators}', "");
Expect(1, 8959, '\P{^Block: 	 mathematical Operators}', "");
Expect(0, 8703, '\p{Block: 	 mathematical Operators}', "");
Expect(1, 8703, '\p{^Block: 	 mathematical Operators}', "");
Expect(1, 8703, '\P{Block: 	 mathematical Operators}', "");
Expect(0, 8703, '\P{^Block: 	 mathematical Operators}', "");
Error('\p{Blk=:=_mathematical-Operators}');
Error('\P{Blk=:=_mathematical-Operators}');
Expect(1, 8959, '\p{Blk=mathematicaloperators}', "");
Expect(0, 8959, '\p{^Blk=mathematicaloperators}', "");
Expect(0, 8959, '\P{Blk=mathematicaloperators}', "");
Expect(1, 8959, '\P{^Blk=mathematicaloperators}', "");
Expect(0, 8703, '\p{Blk=mathematicaloperators}', "");
Expect(1, 8703, '\p{^Blk=mathematicaloperators}', "");
Expect(1, 8703, '\P{Blk=mathematicaloperators}', "");
Expect(0, 8703, '\P{^Blk=mathematicaloperators}', "");
Expect(1, 8959, '\p{Blk=	-mathematicalOperators}', "");
Expect(0, 8959, '\p{^Blk=	-mathematicalOperators}', "");
Expect(0, 8959, '\P{Blk=	-mathematicalOperators}', "");
Expect(1, 8959, '\P{^Blk=	-mathematicalOperators}', "");
Expect(0, 8703, '\p{Blk=	-mathematicalOperators}', "");
Expect(1, 8703, '\p{^Blk=	-mathematicalOperators}', "");
Expect(1, 8703, '\P{Blk=	-mathematicalOperators}', "");
Expect(0, 8703, '\P{^Blk=	-mathematicalOperators}', "");
Error('\p{Is_Block: --MATHEMATICAL:=OPERATORS}');
Error('\P{Is_Block: --MATHEMATICAL:=OPERATORS}');
Expect(1, 8959, '\p{Is_Block: mathematicaloperators}', "");
Expect(0, 8959, '\p{^Is_Block: mathematicaloperators}', "");
Expect(0, 8959, '\P{Is_Block: mathematicaloperators}', "");
Expect(1, 8959, '\P{^Is_Block: mathematicaloperators}', "");
Expect(0, 8703, '\p{Is_Block: mathematicaloperators}', "");
Expect(1, 8703, '\p{^Is_Block: mathematicaloperators}', "");
Expect(1, 8703, '\P{Is_Block: mathematicaloperators}', "");
Expect(0, 8703, '\P{^Is_Block: mathematicaloperators}', "");
Expect(1, 8959, '\p{Is_Block=_-MathematicalOPERATORS}', "");
Expect(0, 8959, '\p{^Is_Block=_-MathematicalOPERATORS}', "");
Expect(0, 8959, '\P{Is_Block=_-MathematicalOPERATORS}', "");
Expect(1, 8959, '\P{^Is_Block=_-MathematicalOPERATORS}', "");
Expect(0, 8703, '\p{Is_Block=_-MathematicalOPERATORS}', "");
Expect(1, 8703, '\p{^Is_Block=_-MathematicalOPERATORS}', "");
Expect(1, 8703, '\P{Is_Block=_-MathematicalOPERATORS}', "");
Expect(0, 8703, '\P{^Is_Block=_-MathematicalOPERATORS}', "");
Error('\p{Is_Blk:		 Mathematical/a/Operators}');
Error('\P{Is_Blk:		 Mathematical/a/Operators}');
Expect(1, 8959, '\p{Is_Blk=mathematicaloperators}', "");
Expect(0, 8959, '\p{^Is_Blk=mathematicaloperators}', "");
Expect(0, 8959, '\P{Is_Blk=mathematicaloperators}', "");
Expect(1, 8959, '\P{^Is_Blk=mathematicaloperators}', "");
Expect(0, 8703, '\p{Is_Blk=mathematicaloperators}', "");
Expect(1, 8703, '\p{^Is_Blk=mathematicaloperators}', "");
Expect(1, 8703, '\P{Is_Blk=mathematicaloperators}', "");
Expect(0, 8703, '\P{^Is_Blk=mathematicaloperators}', "");
Expect(1, 8959, '\p{Is_Blk=-mathematical_Operators}', "");
Expect(0, 8959, '\p{^Is_Blk=-mathematical_Operators}', "");
Expect(0, 8959, '\P{Is_Blk=-mathematical_Operators}', "");
Expect(1, 8959, '\P{^Is_Blk=-mathematical_Operators}', "");
Expect(0, 8703, '\p{Is_Blk=-mathematical_Operators}', "");
Expect(1, 8703, '\p{^Is_Blk=-mathematical_Operators}', "");
Expect(1, 8703, '\P{Is_Blk=-mathematical_Operators}', "");
Expect(0, 8703, '\P{^Is_Blk=-mathematical_Operators}', "");
Error('\p{Block=__CJK/a/Compatibility	Ideographs-supplement}');
Error('\P{Block=__CJK/a/Compatibility	Ideographs-supplement}');
Expect(1, 195103, '\p{Block=cjkcompatibilityideographssupplement}', "");
Expect(0, 195103, '\p{^Block=cjkcompatibilityideographssupplement}', "");
Expect(0, 195103, '\P{Block=cjkcompatibilityideographssupplement}', "");
Expect(1, 195103, '\P{^Block=cjkcompatibilityideographssupplement}', "");
Expect(0, 194559, '\p{Block=cjkcompatibilityideographssupplement}', "");
Expect(1, 194559, '\p{^Block=cjkcompatibilityideographssupplement}', "");
Expect(1, 194559, '\P{Block=cjkcompatibilityideographssupplement}', "");
Expect(0, 194559, '\P{^Block=cjkcompatibilityideographssupplement}', "");
Expect(1, 195103, '\p{Block=  CJK_compatibility_ideographs_supplement}', "");
Expect(0, 195103, '\p{^Block=  CJK_compatibility_ideographs_supplement}', "");
Expect(0, 195103, '\P{Block=  CJK_compatibility_ideographs_supplement}', "");
Expect(1, 195103, '\P{^Block=  CJK_compatibility_ideographs_supplement}', "");
Expect(0, 194559, '\p{Block=  CJK_compatibility_ideographs_supplement}', "");
Expect(1, 194559, '\p{^Block=  CJK_compatibility_ideographs_supplement}', "");
Expect(1, 194559, '\P{Block=  CJK_compatibility_ideographs_supplement}', "");
Expect(0, 194559, '\P{^Block=  CJK_compatibility_ideographs_supplement}', "");
Error('\p{Blk=-	CJK/a/Compatibility	Ideographs-Supplement}');
Error('\P{Blk=-	CJK/a/Compatibility	Ideographs-Supplement}');
Expect(1, 195103, '\p{Blk=cjkcompatibilityideographssupplement}', "");
Expect(0, 195103, '\p{^Blk=cjkcompatibilityideographssupplement}', "");
Expect(0, 195103, '\P{Blk=cjkcompatibilityideographssupplement}', "");
Expect(1, 195103, '\P{^Blk=cjkcompatibilityideographssupplement}', "");
Expect(0, 194559, '\p{Blk=cjkcompatibilityideographssupplement}', "");
Expect(1, 194559, '\p{^Blk=cjkcompatibilityideographssupplement}', "");
Expect(1, 194559, '\P{Blk=cjkcompatibilityideographssupplement}', "");
Expect(0, 194559, '\P{^Blk=cjkcompatibilityideographssupplement}', "");
Expect(1, 195103, '\p{Blk=-	CJK	Compatibility	Ideographs	SUPPLEMENT}', "");
Expect(0, 195103, '\p{^Blk=-	CJK	Compatibility	Ideographs	SUPPLEMENT}', "");
Expect(0, 195103, '\P{Blk=-	CJK	Compatibility	Ideographs	SUPPLEMENT}', "");
Expect(1, 195103, '\P{^Blk=-	CJK	Compatibility	Ideographs	SUPPLEMENT}', "");
Expect(0, 194559, '\p{Blk=-	CJK	Compatibility	Ideographs	SUPPLEMENT}', "");
Expect(1, 194559, '\p{^Blk=-	CJK	Compatibility	Ideographs	SUPPLEMENT}', "");
Expect(1, 194559, '\P{Blk=-	CJK	Compatibility	Ideographs	SUPPLEMENT}', "");
Expect(0, 194559, '\P{^Blk=-	CJK	Compatibility	Ideographs	SUPPLEMENT}', "");
Error('\p{Is_Block=/a/	 CJK_COMPATIBILITYIdeographs Supplement}');
Error('\P{Is_Block=/a/	 CJK_COMPATIBILITYIdeographs Supplement}');
Expect(1, 195103, '\p{Is_Block=cjkcompatibilityideographssupplement}', "");
Expect(0, 195103, '\p{^Is_Block=cjkcompatibilityideographssupplement}', "");
Expect(0, 195103, '\P{Is_Block=cjkcompatibilityideographssupplement}', "");
Expect(1, 195103, '\P{^Is_Block=cjkcompatibilityideographssupplement}', "");
Expect(0, 194559, '\p{Is_Block=cjkcompatibilityideographssupplement}', "");
Expect(1, 194559, '\p{^Is_Block=cjkcompatibilityideographssupplement}', "");
Expect(1, 194559, '\P{Is_Block=cjkcompatibilityideographssupplement}', "");
Expect(0, 194559, '\P{^Is_Block=cjkcompatibilityideographssupplement}', "");
Expect(1, 195103, '\p{Is_Block= CJKcompatibilityIdeographsSupplement}', "");
Expect(0, 195103, '\p{^Is_Block= CJKcompatibilityIdeographsSupplement}', "");
Expect(0, 195103, '\P{Is_Block= CJKcompatibilityIdeographsSupplement}', "");
Expect(1, 195103, '\P{^Is_Block= CJKcompatibilityIdeographsSupplement}', "");
Expect(0, 194559, '\p{Is_Block= CJKcompatibilityIdeographsSupplement}', "");
Expect(1, 194559, '\p{^Is_Block= CJKcompatibilityIdeographsSupplement}', "");
Expect(1, 194559, '\P{Is_Block= CJKcompatibilityIdeographsSupplement}', "");
Expect(0, 194559, '\P{^Is_Block= CJKcompatibilityIdeographsSupplement}', "");
Error('\p{Is_Blk=__CJK_Compatibility Ideographs:=Supplement}');
Error('\P{Is_Blk=__CJK_Compatibility Ideographs:=Supplement}');
Expect(1, 195103, '\p{Is_Blk:cjkcompatibilityideographssupplement}', "");
Expect(0, 195103, '\p{^Is_Blk:cjkcompatibilityideographssupplement}', "");
Expect(0, 195103, '\P{Is_Blk:cjkcompatibilityideographssupplement}', "");
Expect(1, 195103, '\P{^Is_Blk:cjkcompatibilityideographssupplement}', "");
Expect(0, 194559, '\p{Is_Blk:cjkcompatibilityideographssupplement}', "");
Expect(1, 194559, '\p{^Is_Blk:cjkcompatibilityideographssupplement}', "");
Expect(1, 194559, '\P{Is_Blk:cjkcompatibilityideographssupplement}', "");
Expect(0, 194559, '\P{^Is_Blk:cjkcompatibilityideographssupplement}', "");
Expect(1, 195103, '\p{Is_Blk=cjk_Compatibility	IDEOGRAPHS	SUPPLEMENT}', "");
Expect(0, 195103, '\p{^Is_Blk=cjk_Compatibility	IDEOGRAPHS	SUPPLEMENT}', "");
Expect(0, 195103, '\P{Is_Blk=cjk_Compatibility	IDEOGRAPHS	SUPPLEMENT}', "");
Expect(1, 195103, '\P{^Is_Blk=cjk_Compatibility	IDEOGRAPHS	SUPPLEMENT}', "");
Expect(0, 194559, '\p{Is_Blk=cjk_Compatibility	IDEOGRAPHS	SUPPLEMENT}', "");
Expect(1, 194559, '\p{^Is_Blk=cjk_Compatibility	IDEOGRAPHS	SUPPLEMENT}', "");
Expect(1, 194559, '\P{Is_Blk=cjk_Compatibility	IDEOGRAPHS	SUPPLEMENT}', "");
Expect(0, 194559, '\P{^Is_Blk=cjk_Compatibility	IDEOGRAPHS	SUPPLEMENT}', "");
Error('\p{Block= _IPA	EXTENSIONS/a/}');
Error('\P{Block= _IPA	EXTENSIONS/a/}');
Expect(1, 687, '\p{Block=ipaextensions}', "");
Expect(0, 687, '\p{^Block=ipaextensions}', "");
Expect(0, 687, '\P{Block=ipaextensions}', "");
Expect(1, 687, '\P{^Block=ipaextensions}', "");
Expect(0, 591, '\p{Block=ipaextensions}', "");
Expect(1, 591, '\p{^Block=ipaextensions}', "");
Expect(1, 591, '\P{Block=ipaextensions}', "");
Expect(0, 591, '\P{^Block=ipaextensions}', "");
Expect(1, 687, '\p{Block:	- IPA Extensions}', "");
Expect(0, 687, '\p{^Block:	- IPA Extensions}', "");
Expect(0, 687, '\P{Block:	- IPA Extensions}', "");
Expect(1, 687, '\P{^Block:	- IPA Extensions}', "");
Expect(0, 591, '\p{Block:	- IPA Extensions}', "");
Expect(1, 591, '\p{^Block:	- IPA Extensions}', "");
Expect(1, 591, '\P{Block:	- IPA Extensions}', "");
Expect(0, 591, '\P{^Block:	- IPA Extensions}', "");
Error('\p{Blk=--IPA_Extensions/a/}');
Error('\P{Blk=--IPA_Extensions/a/}');
Expect(1, 687, '\p{Blk=ipaextensions}', "");
Expect(0, 687, '\p{^Blk=ipaextensions}', "");
Expect(0, 687, '\P{Blk=ipaextensions}', "");
Expect(1, 687, '\P{^Blk=ipaextensions}', "");
Expect(0, 591, '\p{Blk=ipaextensions}', "");
Expect(1, 591, '\p{^Blk=ipaextensions}', "");
Expect(1, 591, '\P{Blk=ipaextensions}', "");
Expect(0, 591, '\P{^Blk=ipaextensions}', "");
Expect(1, 687, '\p{Blk=	 IPA_EXTENSIONS}', "");
Expect(0, 687, '\p{^Blk=	 IPA_EXTENSIONS}', "");
Expect(0, 687, '\P{Blk=	 IPA_EXTENSIONS}', "");
Expect(1, 687, '\P{^Blk=	 IPA_EXTENSIONS}', "");
Expect(0, 591, '\p{Blk=	 IPA_EXTENSIONS}', "");
Expect(1, 591, '\p{^Blk=	 IPA_EXTENSIONS}', "");
Expect(1, 591, '\P{Blk=	 IPA_EXTENSIONS}', "");
Expect(0, 591, '\P{^Blk=	 IPA_EXTENSIONS}', "");
Error('\p{Is_Block=--ipa extensions:=}');
Error('\P{Is_Block=--ipa extensions:=}');
Expect(1, 687, '\p{Is_Block=ipaextensions}', "");
Expect(0, 687, '\p{^Is_Block=ipaextensions}', "");
Expect(0, 687, '\P{Is_Block=ipaextensions}', "");
Expect(1, 687, '\P{^Is_Block=ipaextensions}', "");
Expect(0, 591, '\p{Is_Block=ipaextensions}', "");
Expect(1, 591, '\p{^Is_Block=ipaextensions}', "");
Expect(1, 591, '\P{Is_Block=ipaextensions}', "");
Expect(0, 591, '\P{^Is_Block=ipaextensions}', "");
Expect(1, 687, '\p{Is_Block:--IPA-Extensions}', "");
Expect(0, 687, '\p{^Is_Block:--IPA-Extensions}', "");
Expect(0, 687, '\P{Is_Block:--IPA-Extensions}', "");
Expect(1, 687, '\P{^Is_Block:--IPA-Extensions}', "");
Expect(0, 591, '\p{Is_Block:--IPA-Extensions}', "");
Expect(1, 591, '\p{^Is_Block:--IPA-Extensions}', "");
Expect(1, 591, '\P{Is_Block:--IPA-Extensions}', "");
Expect(0, 591, '\P{^Is_Block:--IPA-Extensions}', "");
Error('\p{Is_Blk=/a/-IPAextensions}');
Error('\P{Is_Blk=/a/-IPAextensions}');
Expect(1, 687, '\p{Is_Blk=ipaextensions}', "");
Expect(0, 687, '\p{^Is_Blk=ipaextensions}', "");
Expect(0, 687, '\P{Is_Blk=ipaextensions}', "");
Expect(1, 687, '\P{^Is_Blk=ipaextensions}', "");
Expect(0, 591, '\p{Is_Blk=ipaextensions}', "");
Expect(1, 591, '\p{^Is_Blk=ipaextensions}', "");
Expect(1, 591, '\P{Is_Blk=ipaextensions}', "");
Expect(0, 591, '\P{^Is_Blk=ipaextensions}', "");
Expect(1, 687, '\p{Is_Blk= -IPA EXTENSIONS}', "");
Expect(0, 687, '\p{^Is_Blk= -IPA EXTENSIONS}', "");
Expect(0, 687, '\P{Is_Blk= -IPA EXTENSIONS}', "");
Expect(1, 687, '\P{^Is_Blk= -IPA EXTENSIONS}', "");
Expect(0, 591, '\p{Is_Blk= -IPA EXTENSIONS}', "");
Expect(1, 591, '\p{^Is_Blk= -IPA EXTENSIONS}', "");
Expect(1, 591, '\P{Is_Blk= -IPA EXTENSIONS}', "");
Expect(0, 591, '\P{^Is_Blk= -IPA EXTENSIONS}', "");
Error('\p{Block=_Kannada/a/}');
Error('\P{Block=_Kannada/a/}');
Expect(1, 3327, '\p{Block=kannada}', "");
Expect(0, 3327, '\p{^Block=kannada}', "");
Expect(0, 3327, '\P{Block=kannada}', "");
Expect(1, 3327, '\P{^Block=kannada}', "");
Expect(0, 3199, '\p{Block=kannada}', "");
Expect(1, 3199, '\p{^Block=kannada}', "");
Expect(1, 3199, '\P{Block=kannada}', "");
Expect(0, 3199, '\P{^Block=kannada}', "");
Expect(1, 3327, '\p{Block=	kannada}', "");
Expect(0, 3327, '\p{^Block=	kannada}', "");
Expect(0, 3327, '\P{Block=	kannada}', "");
Expect(1, 3327, '\P{^Block=	kannada}', "");
Expect(0, 3199, '\p{Block=	kannada}', "");
Expect(1, 3199, '\p{^Block=	kannada}', "");
Expect(1, 3199, '\P{Block=	kannada}', "");
Expect(0, 3199, '\P{^Block=	kannada}', "");
Error('\p{Blk:	:=Kannada}');
Error('\P{Blk:	:=Kannada}');
Expect(1, 3327, '\p{Blk=kannada}', "");
Expect(0, 3327, '\p{^Blk=kannada}', "");
Expect(0, 3327, '\P{Blk=kannada}', "");
Expect(1, 3327, '\P{^Blk=kannada}', "");
Expect(0, 3199, '\p{Blk=kannada}', "");
Expect(1, 3199, '\p{^Blk=kannada}', "");
Expect(1, 3199, '\P{Blk=kannada}', "");
Expect(0, 3199, '\P{^Blk=kannada}', "");
Expect(1, 3327, '\p{Blk: -kannada}', "");
Expect(0, 3327, '\p{^Blk: -kannada}', "");
Expect(0, 3327, '\P{Blk: -kannada}', "");
Expect(1, 3327, '\P{^Blk: -kannada}', "");
Expect(0, 3199, '\p{Blk: -kannada}', "");
Expect(1, 3199, '\p{^Blk: -kannada}', "");
Expect(1, 3199, '\P{Blk: -kannada}', "");
Expect(0, 3199, '\P{^Blk: -kannada}', "");
Error('\p{Is_Block=:=	Kannada}');
Error('\P{Is_Block=:=	Kannada}');
Expect(1, 3327, '\p{Is_Block=kannada}', "");
Expect(0, 3327, '\p{^Is_Block=kannada}', "");
Expect(0, 3327, '\P{Is_Block=kannada}', "");
Expect(1, 3327, '\P{^Is_Block=kannada}', "");
Expect(0, 3199, '\p{Is_Block=kannada}', "");
Expect(1, 3199, '\p{^Is_Block=kannada}', "");
Expect(1, 3199, '\P{Is_Block=kannada}', "");
Expect(0, 3199, '\P{^Is_Block=kannada}', "");
Expect(1, 3327, '\p{Is_Block=	 KANNADA}', "");
Expect(0, 3327, '\p{^Is_Block=	 KANNADA}', "");
Expect(0, 3327, '\P{Is_Block=	 KANNADA}', "");
Expect(1, 3327, '\P{^Is_Block=	 KANNADA}', "");
Expect(0, 3199, '\p{Is_Block=	 KANNADA}', "");
Expect(1, 3199, '\p{^Is_Block=	 KANNADA}', "");
Expect(1, 3199, '\P{Is_Block=	 KANNADA}', "");
Expect(0, 3199, '\P{^Is_Block=	 KANNADA}', "");
Error('\p{Is_Blk= 	Kannada/a/}');
Error('\P{Is_Blk= 	Kannada/a/}');
Expect(1, 3327, '\p{Is_Blk=kannada}', "");
Expect(0, 3327, '\p{^Is_Blk=kannada}', "");
Expect(0, 3327, '\P{Is_Blk=kannada}', "");
Expect(1, 3327, '\P{^Is_Blk=kannada}', "");
Expect(0, 3199, '\p{Is_Blk=kannada}', "");
Expect(1, 3199, '\p{^Is_Blk=kannada}', "");
Expect(1, 3199, '\P{Is_Blk=kannada}', "");
Expect(0, 3199, '\P{^Is_Blk=kannada}', "");
Expect(1, 3327, '\p{Is_Blk=	_Kannada}', "");
Expect(0, 3327, '\p{^Is_Blk=	_Kannada}', "");
Expect(0, 3327, '\P{Is_Blk=	_Kannada}', "");
Expect(1, 3327, '\P{^Is_Blk=	_Kannada}', "");
Expect(0, 3199, '\p{Is_Blk=	_Kannada}', "");
Expect(1, 3199, '\p{^Is_Blk=	_Kannada}', "");
Expect(1, 3199, '\P{Is_Blk=	_Kannada}', "");
Expect(0, 3199, '\P{^Is_Blk=	_Kannada}', "");
Error('\p{Block=	_LatinExtended/a/ADDITIONAL}');
Error('\P{Block=	_LatinExtended/a/ADDITIONAL}');
Expect(1, 7935, '\p{Block=latinextendedadditional}', "");
Expect(0, 7935, '\p{^Block=latinextendedadditional}', "");
Expect(0, 7935, '\P{Block=latinextendedadditional}', "");
Expect(1, 7935, '\P{^Block=latinextendedadditional}', "");
Expect(0, 7679, '\p{Block=latinextendedadditional}', "");
Expect(1, 7679, '\p{^Block=latinextendedadditional}', "");
Expect(1, 7679, '\P{Block=latinextendedadditional}', "");
Expect(0, 7679, '\P{^Block=latinextendedadditional}', "");
Expect(1, 7935, '\p{Block=-_LATIN_ExtendedADDITIONAL}', "");
Expect(0, 7935, '\p{^Block=-_LATIN_ExtendedADDITIONAL}', "");
Expect(0, 7935, '\P{Block=-_LATIN_ExtendedADDITIONAL}', "");
Expect(1, 7935, '\P{^Block=-_LATIN_ExtendedADDITIONAL}', "");
Expect(0, 7679, '\p{Block=-_LATIN_ExtendedADDITIONAL}', "");
Expect(1, 7679, '\p{^Block=-_LATIN_ExtendedADDITIONAL}', "");
Expect(1, 7679, '\P{Block=-_LATIN_ExtendedADDITIONAL}', "");
Expect(0, 7679, '\P{^Block=-_LATIN_ExtendedADDITIONAL}', "");
Error('\p{Blk=_:=LATIN	EXTENDED_additional}');
Error('\P{Blk=_:=LATIN	EXTENDED_additional}');
Expect(1, 7935, '\p{Blk=latinextendedadditional}', "");
Expect(0, 7935, '\p{^Blk=latinextendedadditional}', "");
Expect(0, 7935, '\P{Blk=latinextendedadditional}', "");
Expect(1, 7935, '\P{^Blk=latinextendedadditional}', "");
Expect(0, 7679, '\p{Blk=latinextendedadditional}', "");
Expect(1, 7679, '\p{^Blk=latinextendedadditional}', "");
Expect(1, 7679, '\P{Blk=latinextendedadditional}', "");
Expect(0, 7679, '\P{^Blk=latinextendedadditional}', "");
Expect(1, 7935, '\p{Blk:   	latinExtended	Additional}', "");
Expect(0, 7935, '\p{^Blk:   	latinExtended	Additional}', "");
Expect(0, 7935, '\P{Blk:   	latinExtended	Additional}', "");
Expect(1, 7935, '\P{^Blk:   	latinExtended	Additional}', "");
Expect(0, 7679, '\p{Blk:   	latinExtended	Additional}', "");
Expect(1, 7679, '\p{^Blk:   	latinExtended	Additional}', "");
Expect(1, 7679, '\P{Blk:   	latinExtended	Additional}', "");
Expect(0, 7679, '\P{^Blk:   	latinExtended	Additional}', "");
Error('\p{Is_Block:   :=LATIN	Extended_Additional}');
Error('\P{Is_Block:   :=LATIN	Extended_Additional}');
Expect(1, 7935, '\p{Is_Block=latinextendedadditional}', "");
Expect(0, 7935, '\p{^Is_Block=latinextendedadditional}', "");
Expect(0, 7935, '\P{Is_Block=latinextendedadditional}', "");
Expect(1, 7935, '\P{^Is_Block=latinextendedadditional}', "");
Expect(0, 7679, '\p{Is_Block=latinextendedadditional}', "");
Expect(1, 7679, '\p{^Is_Block=latinextendedadditional}', "");
Expect(1, 7679, '\P{Is_Block=latinextendedadditional}', "");
Expect(0, 7679, '\P{^Is_Block=latinextendedadditional}', "");
Expect(1, 7935, '\p{Is_Block: 	latinextended Additional}', "");
Expect(0, 7935, '\p{^Is_Block: 	latinextended Additional}', "");
Expect(0, 7935, '\P{Is_Block: 	latinextended Additional}', "");
Expect(1, 7935, '\P{^Is_Block: 	latinextended Additional}', "");
Expect(0, 7679, '\p{Is_Block: 	latinextended Additional}', "");
Expect(1, 7679, '\p{^Is_Block: 	latinextended Additional}', "");
Expect(1, 7679, '\P{Is_Block: 	latinextended Additional}', "");
Expect(0, 7679, '\P{^Is_Block: 	latinextended Additional}', "");
Error('\p{Is_Blk:	LatinEXTENDED/a/Additional}');
Error('\P{Is_Blk:	LatinEXTENDED/a/Additional}');
Expect(1, 7935, '\p{Is_Blk=latinextendedadditional}', "");
Expect(0, 7935, '\p{^Is_Blk=latinextendedadditional}', "");
Expect(0, 7935, '\P{Is_Blk=latinextendedadditional}', "");
Expect(1, 7935, '\P{^Is_Blk=latinextendedadditional}', "");
Expect(0, 7679, '\p{Is_Blk=latinextendedadditional}', "");
Expect(1, 7679, '\p{^Is_Blk=latinextendedadditional}', "");
Expect(1, 7679, '\P{Is_Blk=latinextendedadditional}', "");
Expect(0, 7679, '\P{^Is_Blk=latinextendedadditional}', "");
Expect(1, 7935, '\p{Is_Blk= 	latin	Extended_Additional}', "");
Expect(0, 7935, '\p{^Is_Blk= 	latin	Extended_Additional}', "");
Expect(0, 7935, '\P{Is_Blk= 	latin	Extended_Additional}', "");
Expect(1, 7935, '\P{^Is_Blk= 	latin	Extended_Additional}', "");
Expect(0, 7679, '\p{Is_Blk= 	latin	Extended_Additional}', "");
Expect(1, 7679, '\p{^Is_Blk= 	latin	Extended_Additional}', "");
Expect(1, 7679, '\P{Is_Blk= 	latin	Extended_Additional}', "");
Expect(0, 7679, '\P{^Is_Blk= 	latin	Extended_Additional}', "");
Error('\p{Block=:=- Bamum_supplement}');
Error('\P{Block=:=- Bamum_supplement}');
Expect(1, 92735, '\p{Block=bamumsupplement}', "");
Expect(0, 92735, '\p{^Block=bamumsupplement}', "");
Expect(0, 92735, '\P{Block=bamumsupplement}', "");
Expect(1, 92735, '\P{^Block=bamumsupplement}', "");
Expect(0, 92159, '\p{Block=bamumsupplement}', "");
Expect(1, 92159, '\p{^Block=bamumsupplement}', "");
Expect(1, 92159, '\P{Block=bamumsupplement}', "");
Expect(0, 92159, '\P{^Block=bamumsupplement}', "");
Expect(1, 92735, '\p{Block=__Bamum Supplement}', "");
Expect(0, 92735, '\p{^Block=__Bamum Supplement}', "");
Expect(0, 92735, '\P{Block=__Bamum Supplement}', "");
Expect(1, 92735, '\P{^Block=__Bamum Supplement}', "");
Expect(0, 92159, '\p{Block=__Bamum Supplement}', "");
Expect(1, 92159, '\p{^Block=__Bamum Supplement}', "");
Expect(1, 92159, '\P{Block=__Bamum Supplement}', "");
Expect(0, 92159, '\P{^Block=__Bamum Supplement}', "");
Error('\p{Blk=	-Bamum/a/SUPPLEMENT}');
Error('\P{Blk=	-Bamum/a/SUPPLEMENT}');
Expect(1, 92735, '\p{Blk=bamumsupplement}', "");
Expect(0, 92735, '\p{^Blk=bamumsupplement}', "");
Expect(0, 92735, '\P{Blk=bamumsupplement}', "");
Expect(1, 92735, '\P{^Blk=bamumsupplement}', "");
Expect(0, 92159, '\p{Blk=bamumsupplement}', "");
Expect(1, 92159, '\p{^Blk=bamumsupplement}', "");
Expect(1, 92159, '\P{Blk=bamumsupplement}', "");
Expect(0, 92159, '\P{^Blk=bamumsupplement}', "");
Expect(1, 92735, '\p{Blk=	Bamum Supplement}', "");
Expect(0, 92735, '\p{^Blk=	Bamum Supplement}', "");
Expect(0, 92735, '\P{Blk=	Bamum Supplement}', "");
Expect(1, 92735, '\P{^Blk=	Bamum Supplement}', "");
Expect(0, 92159, '\p{Blk=	Bamum Supplement}', "");
Expect(1, 92159, '\p{^Blk=	Bamum Supplement}', "");
Expect(1, 92159, '\P{Blk=	Bamum Supplement}', "");
Expect(0, 92159, '\P{^Blk=	Bamum Supplement}', "");
Error('\p{Is_Block=:=		Bamum	supplement}');
Error('\P{Is_Block=:=		Bamum	supplement}');
Expect(1, 92735, '\p{Is_Block:bamumsupplement}', "");
Expect(0, 92735, '\p{^Is_Block:bamumsupplement}', "");
Expect(0, 92735, '\P{Is_Block:bamumsupplement}', "");
Expect(1, 92735, '\P{^Is_Block:bamumsupplement}', "");
Expect(0, 92159, '\p{Is_Block:bamumsupplement}', "");
Expect(1, 92159, '\p{^Is_Block:bamumsupplement}', "");
Expect(1, 92159, '\P{Is_Block:bamumsupplement}', "");
Expect(0, 92159, '\P{^Is_Block:bamumsupplement}', "");
Expect(1, 92735, '\p{Is_Block=_bamum-SUPPLEMENT}', "");
Expect(0, 92735, '\p{^Is_Block=_bamum-SUPPLEMENT}', "");
Expect(0, 92735, '\P{Is_Block=_bamum-SUPPLEMENT}', "");
Expect(1, 92735, '\P{^Is_Block=_bamum-SUPPLEMENT}', "");
Expect(0, 92159, '\p{Is_Block=_bamum-SUPPLEMENT}', "");
Expect(1, 92159, '\p{^Is_Block=_bamum-SUPPLEMENT}', "");
Expect(1, 92159, '\P{Is_Block=_bamum-SUPPLEMENT}', "");
Expect(0, 92159, '\P{^Is_Block=_bamum-SUPPLEMENT}', "");
Error('\p{Is_Blk= -Bamum_supplement:=}');
Error('\P{Is_Blk= -Bamum_supplement:=}');
Expect(1, 92735, '\p{Is_Blk=bamumsupplement}', "");
Expect(0, 92735, '\p{^Is_Blk=bamumsupplement}', "");
Expect(0, 92735, '\P{Is_Blk=bamumsupplement}', "");
Expect(1, 92735, '\P{^Is_Blk=bamumsupplement}', "");
Expect(0, 92159, '\p{Is_Blk=bamumsupplement}', "");
Expect(1, 92159, '\p{^Is_Blk=bamumsupplement}', "");
Expect(1, 92159, '\P{Is_Blk=bamumsupplement}', "");
Expect(0, 92159, '\P{^Is_Blk=bamumsupplement}', "");
Expect(1, 92735, '\p{Is_Blk=	BAMUM-SUPPLEMENT}', "");
Expect(0, 92735, '\p{^Is_Blk=	BAMUM-SUPPLEMENT}', "");
Expect(0, 92735, '\P{Is_Blk=	BAMUM-SUPPLEMENT}', "");
Expect(1, 92735, '\P{^Is_Blk=	BAMUM-SUPPLEMENT}', "");
Expect(0, 92159, '\p{Is_Blk=	BAMUM-SUPPLEMENT}', "");
Expect(1, 92159, '\p{^Is_Blk=	BAMUM-SUPPLEMENT}', "");
Expect(1, 92159, '\P{Is_Blk=	BAMUM-SUPPLEMENT}', "");
Expect(0, 92159, '\P{^Is_Blk=	BAMUM-SUPPLEMENT}', "");
Error('\p{Block=-CHAM/a/}');
Error('\P{Block=-CHAM/a/}');
Expect(1, 43615, '\p{Block=cham}', "");
Expect(0, 43615, '\p{^Block=cham}', "");
Expect(0, 43615, '\P{Block=cham}', "");
Expect(1, 43615, '\P{^Block=cham}', "");
Expect(0, 43519, '\p{Block=cham}', "");
Expect(1, 43519, '\p{^Block=cham}', "");
Expect(1, 43519, '\P{Block=cham}', "");
Expect(0, 43519, '\P{^Block=cham}', "");
Expect(1, 43615, '\p{Block=	cham}', "");
Expect(0, 43615, '\p{^Block=	cham}', "");
Expect(0, 43615, '\P{Block=	cham}', "");
Expect(1, 43615, '\P{^Block=	cham}', "");
Expect(0, 43519, '\p{Block=	cham}', "");
Expect(1, 43519, '\p{^Block=	cham}', "");
Expect(1, 43519, '\P{Block=	cham}', "");
Expect(0, 43519, '\P{^Block=	cham}', "");
Error('\p{Blk: _:=Cham}');
Error('\P{Blk: _:=Cham}');
Expect(1, 43615, '\p{Blk=cham}', "");
Expect(0, 43615, '\p{^Blk=cham}', "");
Expect(0, 43615, '\P{Blk=cham}', "");
Expect(1, 43615, '\P{^Blk=cham}', "");
Expect(0, 43519, '\p{Blk=cham}', "");
Expect(1, 43519, '\p{^Blk=cham}', "");
Expect(1, 43519, '\P{Blk=cham}', "");
Expect(0, 43519, '\P{^Blk=cham}', "");
Expect(1, 43615, '\p{Blk= Cham}', "");
Expect(0, 43615, '\p{^Blk= Cham}', "");
Expect(0, 43615, '\P{Blk= Cham}', "");
Expect(1, 43615, '\P{^Blk= Cham}', "");
Expect(0, 43519, '\p{Blk= Cham}', "");
Expect(1, 43519, '\p{^Blk= Cham}', "");
Expect(1, 43519, '\P{Blk= Cham}', "");
Expect(0, 43519, '\P{^Blk= Cham}', "");
Error('\p{Is_Block:   _/a/Cham}');
Error('\P{Is_Block:   _/a/Cham}');
Expect(1, 43615, '\p{Is_Block=cham}', "");
Expect(0, 43615, '\p{^Is_Block=cham}', "");
Expect(0, 43615, '\P{Is_Block=cham}', "");
Expect(1, 43615, '\P{^Is_Block=cham}', "");
Expect(0, 43519, '\p{Is_Block=cham}', "");
Expect(1, 43519, '\p{^Is_Block=cham}', "");
Expect(1, 43519, '\P{Is_Block=cham}', "");
Expect(0, 43519, '\P{^Is_Block=cham}', "");
Expect(1, 43615, '\p{Is_Block=-CHAM}', "");
Expect(0, 43615, '\p{^Is_Block=-CHAM}', "");
Expect(0, 43615, '\P{Is_Block=-CHAM}', "");
Expect(1, 43615, '\P{^Is_Block=-CHAM}', "");
Expect(0, 43519, '\p{Is_Block=-CHAM}', "");
Expect(1, 43519, '\p{^Is_Block=-CHAM}', "");
Expect(1, 43519, '\P{Is_Block=-CHAM}', "");
Expect(0, 43519, '\P{^Is_Block=-CHAM}', "");
Error('\p{Is_Blk=/a/--Cham}');
Error('\P{Is_Blk=/a/--Cham}');
Expect(1, 43615, '\p{Is_Blk=cham}', "");
Expect(0, 43615, '\p{^Is_Blk=cham}', "");
Expect(0, 43615, '\P{Is_Blk=cham}', "");
Expect(1, 43615, '\P{^Is_Blk=cham}', "");
Expect(0, 43519, '\p{Is_Blk=cham}', "");
Expect(1, 43519, '\p{^Is_Blk=cham}', "");
Expect(1, 43519, '\P{Is_Blk=cham}', "");
Expect(0, 43519, '\P{^Is_Blk=cham}', "");
Expect(1, 43615, '\p{Is_Blk=-	CHAM}', "");
Expect(0, 43615, '\p{^Is_Blk=-	CHAM}', "");
Expect(0, 43615, '\P{Is_Blk=-	CHAM}', "");
Expect(1, 43615, '\P{^Is_Blk=-	CHAM}', "");
Expect(0, 43519, '\p{Is_Blk=-	CHAM}', "");
Expect(1, 43519, '\p{^Is_Blk=-	CHAM}', "");
Expect(1, 43519, '\P{Is_Blk=-	CHAM}', "");
Expect(0, 43519, '\P{^Is_Blk=-	CHAM}', "");
Error('\p{Block= Cyrillic supplement/a/}');
Error('\P{Block= Cyrillic supplement/a/}');
Expect(1, 1327, '\p{Block=cyrillicsupplement}', "");
Expect(0, 1327, '\p{^Block=cyrillicsupplement}', "");
Expect(0, 1327, '\P{Block=cyrillicsupplement}', "");
Expect(1, 1327, '\P{^Block=cyrillicsupplement}', "");
Expect(0, 1279, '\p{Block=cyrillicsupplement}', "");
Expect(1, 1279, '\p{^Block=cyrillicsupplement}', "");
Expect(1, 1279, '\P{Block=cyrillicsupplement}', "");
Expect(0, 1279, '\P{^Block=cyrillicsupplement}', "");
Expect(1, 1327, '\p{Block:		_Cyrillic	supplement}', "");
Expect(0, 1327, '\p{^Block:		_Cyrillic	supplement}', "");
Expect(0, 1327, '\P{Block:		_Cyrillic	supplement}', "");
Expect(1, 1327, '\P{^Block:		_Cyrillic	supplement}', "");
Expect(0, 1279, '\p{Block:		_Cyrillic	supplement}', "");
Expect(1, 1279, '\p{^Block:		_Cyrillic	supplement}', "");
Expect(1, 1279, '\P{Block:		_Cyrillic	supplement}', "");
Expect(0, 1279, '\P{^Block:		_Cyrillic	supplement}', "");
Error('\p{Blk=/a/ -Cyrillic SUPPLEMENTARY}');
Error('\P{Blk=/a/ -Cyrillic SUPPLEMENTARY}');
Expect(1, 1327, '\p{Blk:cyrillicsupplementary}', "");
Expect(0, 1327, '\p{^Blk:cyrillicsupplementary}', "");
Expect(0, 1327, '\P{Blk:cyrillicsupplementary}', "");
Expect(1, 1327, '\P{^Blk:cyrillicsupplementary}', "");
Expect(0, 1279, '\p{Blk:cyrillicsupplementary}', "");
Expect(1, 1279, '\p{^Blk:cyrillicsupplementary}', "");
Expect(1, 1279, '\P{Blk:cyrillicsupplementary}', "");
Expect(0, 1279, '\P{^Blk:cyrillicsupplementary}', "");
Expect(1, 1327, '\p{Blk:__CYRILLICSUPPLEMENTARY}', "");
Expect(0, 1327, '\p{^Blk:__CYRILLICSUPPLEMENTARY}', "");
Expect(0, 1327, '\P{Blk:__CYRILLICSUPPLEMENTARY}', "");
Expect(1, 1327, '\P{^Blk:__CYRILLICSUPPLEMENTARY}', "");
Expect(0, 1279, '\p{Blk:__CYRILLICSUPPLEMENTARY}', "");
Expect(1, 1279, '\p{^Blk:__CYRILLICSUPPLEMENTARY}', "");
Expect(1, 1279, '\P{Blk:__CYRILLICSUPPLEMENTARY}', "");
Expect(0, 1279, '\P{^Blk:__CYRILLICSUPPLEMENTARY}', "");
Error('\p{Is_Block=/a/CYRILLIC-supplement}');
Error('\P{Is_Block=/a/CYRILLIC-supplement}');
Expect(1, 1327, '\p{Is_Block=cyrillicsupplement}', "");
Expect(0, 1327, '\p{^Is_Block=cyrillicsupplement}', "");
Expect(0, 1327, '\P{Is_Block=cyrillicsupplement}', "");
Expect(1, 1327, '\P{^Is_Block=cyrillicsupplement}', "");
Expect(0, 1279, '\p{Is_Block=cyrillicsupplement}', "");
Expect(1, 1279, '\p{^Is_Block=cyrillicsupplement}', "");
Expect(1, 1279, '\P{Is_Block=cyrillicsupplement}', "");
Expect(0, 1279, '\P{^Is_Block=cyrillicsupplement}', "");
Expect(1, 1327, '\p{Is_Block=-_CYRILLICSUPPLEMENT}', "");
Expect(0, 1327, '\p{^Is_Block=-_CYRILLICSUPPLEMENT}', "");
Expect(0, 1327, '\P{Is_Block=-_CYRILLICSUPPLEMENT}', "");
Expect(1, 1327, '\P{^Is_Block=-_CYRILLICSUPPLEMENT}', "");
Expect(0, 1279, '\p{Is_Block=-_CYRILLICSUPPLEMENT}', "");
Expect(1, 1279, '\p{^Is_Block=-_CYRILLICSUPPLEMENT}', "");
Expect(1, 1279, '\P{Is_Block=-_CYRILLICSUPPLEMENT}', "");
Expect(0, 1279, '\P{^Is_Block=-_CYRILLICSUPPLEMENT}', "");
Error('\p{Is_Blk=_Cyrillic	supplementary/a/}');
Error('\P{Is_Blk=_Cyrillic	supplementary/a/}');
Expect(1, 1327, '\p{Is_Blk=cyrillicsupplementary}', "");
Expect(0, 1327, '\p{^Is_Blk=cyrillicsupplementary}', "");
Expect(0, 1327, '\P{Is_Blk=cyrillicsupplementary}', "");
Expect(1, 1327, '\P{^Is_Blk=cyrillicsupplementary}', "");
Expect(0, 1279, '\p{Is_Blk=cyrillicsupplementary}', "");
Expect(1, 1279, '\p{^Is_Blk=cyrillicsupplementary}', "");
Expect(1, 1279, '\P{Is_Blk=cyrillicsupplementary}', "");
Expect(0, 1279, '\P{^Is_Blk=cyrillicsupplementary}', "");
Expect(1, 1327, '\p{Is_Blk= cyrillic-supplementary}', "");
Expect(0, 1327, '\p{^Is_Blk= cyrillic-supplementary}', "");
Expect(0, 1327, '\P{Is_Blk= cyrillic-supplementary}', "");
Expect(1, 1327, '\P{^Is_Blk= cyrillic-supplementary}', "");
Expect(0, 1279, '\p{Is_Blk= cyrillic-supplementary}', "");
Expect(1, 1279, '\p{^Is_Blk= cyrillic-supplementary}', "");
Expect(1, 1279, '\P{Is_Blk= cyrillic-supplementary}', "");
Expect(0, 1279, '\P{^Is_Blk= cyrillic-supplementary}', "");
Error('\p{Block=_ greekAND/a/Coptic}');
Error('\P{Block=_ greekAND/a/Coptic}');
Expect(1, 1023, '\p{Block=greekandcoptic}', "");
Expect(0, 1023, '\p{^Block=greekandcoptic}', "");
Expect(0, 1023, '\P{Block=greekandcoptic}', "");
Expect(1, 1023, '\P{^Block=greekandcoptic}', "");
Expect(0, 879, '\p{Block=greekandcoptic}', "");
Expect(1, 879, '\p{^Block=greekandcoptic}', "");
Expect(1, 879, '\P{Block=greekandcoptic}', "");
Expect(0, 879, '\P{^Block=greekandcoptic}', "");
Expect(1, 1023, '\p{Block= Greek And_COPTIC}', "");
Expect(0, 1023, '\p{^Block= Greek And_COPTIC}', "");
Expect(0, 1023, '\P{Block= Greek And_COPTIC}', "");
Expect(1, 1023, '\P{^Block= Greek And_COPTIC}', "");
Expect(0, 879, '\p{Block= Greek And_COPTIC}', "");
Expect(1, 879, '\p{^Block= Greek And_COPTIC}', "");
Expect(1, 879, '\P{Block= Greek And_COPTIC}', "");
Expect(0, 879, '\P{^Block= Greek And_COPTIC}', "");
Error('\p{Blk=:=-	Greek}');
Error('\P{Blk=:=-	Greek}');
Expect(1, 1023, '\p{Blk=greek}', "");
Expect(0, 1023, '\p{^Blk=greek}', "");
Expect(0, 1023, '\P{Blk=greek}', "");
Expect(1, 1023, '\P{^Blk=greek}', "");
Expect(0, 879, '\p{Blk=greek}', "");
Expect(1, 879, '\p{^Blk=greek}', "");
Expect(1, 879, '\P{Blk=greek}', "");
Expect(0, 879, '\P{^Blk=greek}', "");
Expect(1, 1023, '\p{Blk=__greek}', "");
Expect(0, 1023, '\p{^Blk=__greek}', "");
Expect(0, 1023, '\P{Blk=__greek}', "");
Expect(1, 1023, '\P{^Blk=__greek}', "");
Expect(0, 879, '\p{Blk=__greek}', "");
Expect(1, 879, '\p{^Blk=__greek}', "");
Expect(1, 879, '\P{Blk=__greek}', "");
Expect(0, 879, '\P{^Blk=__greek}', "");
Error('\p{Is_Block=	Greek/a/And	Coptic}');
Error('\P{Is_Block=	Greek/a/And	Coptic}');
Expect(1, 1023, '\p{Is_Block=greekandcoptic}', "");
Expect(0, 1023, '\p{^Is_Block=greekandcoptic}', "");
Expect(0, 1023, '\P{Is_Block=greekandcoptic}', "");
Expect(1, 1023, '\P{^Is_Block=greekandcoptic}', "");
Expect(0, 879, '\p{Is_Block=greekandcoptic}', "");
Expect(1, 879, '\p{^Is_Block=greekandcoptic}', "");
Expect(1, 879, '\P{Is_Block=greekandcoptic}', "");
Expect(0, 879, '\P{^Is_Block=greekandcoptic}', "");
Expect(1, 1023, '\p{Is_Block=__GreekandCoptic}', "");
Expect(0, 1023, '\p{^Is_Block=__GreekandCoptic}', "");
Expect(0, 1023, '\P{Is_Block=__GreekandCoptic}', "");
Expect(1, 1023, '\P{^Is_Block=__GreekandCoptic}', "");
Expect(0, 879, '\p{Is_Block=__GreekandCoptic}', "");
Expect(1, 879, '\p{^Is_Block=__GreekandCoptic}', "");
Expect(1, 879, '\P{Is_Block=__GreekandCoptic}', "");
Expect(0, 879, '\P{^Is_Block=__GreekandCoptic}', "");
Error('\p{Is_Blk=-/a/Greek}');
Error('\P{Is_Blk=-/a/Greek}');
Expect(1, 1023, '\p{Is_Blk=greek}', "");
Expect(0, 1023, '\p{^Is_Blk=greek}', "");
Expect(0, 1023, '\P{Is_Blk=greek}', "");
Expect(1, 1023, '\P{^Is_Blk=greek}', "");
Expect(0, 879, '\p{Is_Blk=greek}', "");
Expect(1, 879, '\p{^Is_Blk=greek}', "");
Expect(1, 879, '\P{Is_Blk=greek}', "");
Expect(0, 879, '\P{^Is_Blk=greek}', "");
Expect(1, 1023, '\p{Is_Blk=- GREEK}', "");
Expect(0, 1023, '\p{^Is_Blk=- GREEK}', "");
Expect(0, 1023, '\P{Is_Blk=- GREEK}', "");
Expect(1, 1023, '\P{^Is_Blk=- GREEK}', "");
Expect(0, 879, '\p{Is_Blk=- GREEK}', "");
Expect(1, 879, '\p{^Is_Blk=- GREEK}', "");
Expect(1, 879, '\P{Is_Blk=- GREEK}', "");
Expect(0, 879, '\P{^Is_Blk=- GREEK}', "");
Error('\p{Block: _:=MISCELLANEOUS-MATHEMATICAL	SYMBOLS B}');
Error('\P{Block: _:=MISCELLANEOUS-MATHEMATICAL	SYMBOLS B}');
Expect(1, 10751, '\p{Block=miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10751, '\p{^Block=miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10751, '\P{Block=miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10751, '\P{^Block=miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10623, '\p{Block=miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10623, '\p{^Block=miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10623, '\P{Block=miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10623, '\P{^Block=miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10751, '\p{Block=		miscellaneousMATHEMATICAL	SYMBOLS	B}', "");
Expect(0, 10751, '\p{^Block=		miscellaneousMATHEMATICAL	SYMBOLS	B}', "");
Expect(0, 10751, '\P{Block=		miscellaneousMATHEMATICAL	SYMBOLS	B}', "");
Expect(1, 10751, '\P{^Block=		miscellaneousMATHEMATICAL	SYMBOLS	B}', "");
Expect(0, 10623, '\p{Block=		miscellaneousMATHEMATICAL	SYMBOLS	B}', "");
Expect(1, 10623, '\p{^Block=		miscellaneousMATHEMATICAL	SYMBOLS	B}', "");
Expect(1, 10623, '\P{Block=		miscellaneousMATHEMATICAL	SYMBOLS	B}', "");
Expect(0, 10623, '\P{^Block=		miscellaneousMATHEMATICAL	SYMBOLS	B}', "");
Error('\p{Blk=	-Miscellaneous MATHEMATICAL Symbols	B:=}');
Error('\P{Blk=	-Miscellaneous MATHEMATICAL Symbols	B:=}');
Expect(1, 10751, '\p{Blk=miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10751, '\p{^Blk=miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10751, '\P{Blk=miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10751, '\P{^Blk=miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10623, '\p{Blk=miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10623, '\p{^Blk=miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10623, '\P{Blk=miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10623, '\P{^Blk=miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10751, '\p{Blk= 	MISCELLANEOUS	Mathematical-SYMBOLS B}', "");
Expect(0, 10751, '\p{^Blk= 	MISCELLANEOUS	Mathematical-SYMBOLS B}', "");
Expect(0, 10751, '\P{Blk= 	MISCELLANEOUS	Mathematical-SYMBOLS B}', "");
Expect(1, 10751, '\P{^Blk= 	MISCELLANEOUS	Mathematical-SYMBOLS B}', "");
Expect(0, 10623, '\p{Blk= 	MISCELLANEOUS	Mathematical-SYMBOLS B}', "");
Expect(1, 10623, '\p{^Blk= 	MISCELLANEOUS	Mathematical-SYMBOLS B}', "");
Expect(1, 10623, '\P{Blk= 	MISCELLANEOUS	Mathematical-SYMBOLS B}', "");
Expect(0, 10623, '\P{^Blk= 	MISCELLANEOUS	Mathematical-SYMBOLS B}', "");
Error('\p{Is_Block=:=Miscellaneous_Mathematical_symbols b}');
Error('\P{Is_Block=:=Miscellaneous_Mathematical_symbols b}');
Expect(1, 10751, '\p{Is_Block=miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10751, '\p{^Is_Block=miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10751, '\P{Is_Block=miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10751, '\P{^Is_Block=miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10623, '\p{Is_Block=miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10623, '\p{^Is_Block=miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10623, '\P{Is_Block=miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10623, '\P{^Is_Block=miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10751, '\p{Is_Block= _Miscellaneous	MATHEMATICALsymbols b}', "");
Expect(0, 10751, '\p{^Is_Block= _Miscellaneous	MATHEMATICALsymbols b}', "");
Expect(0, 10751, '\P{Is_Block= _Miscellaneous	MATHEMATICALsymbols b}', "");
Expect(1, 10751, '\P{^Is_Block= _Miscellaneous	MATHEMATICALsymbols b}', "");
Expect(0, 10623, '\p{Is_Block= _Miscellaneous	MATHEMATICALsymbols b}', "");
Expect(1, 10623, '\p{^Is_Block= _Miscellaneous	MATHEMATICALsymbols b}', "");
Expect(1, 10623, '\P{Is_Block= _Miscellaneous	MATHEMATICALsymbols b}', "");
Expect(0, 10623, '\P{^Is_Block= _Miscellaneous	MATHEMATICALsymbols b}', "");
Error('\p{Is_Blk=:=	MISCELLANEOUS mathematical-Symbols_B}');
Error('\P{Is_Blk=:=	MISCELLANEOUS mathematical-Symbols_B}');
Expect(1, 10751, '\p{Is_Blk=miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10751, '\p{^Is_Blk=miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10751, '\P{Is_Blk=miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10751, '\P{^Is_Blk=miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10623, '\p{Is_Blk=miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10623, '\p{^Is_Blk=miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10623, '\P{Is_Blk=miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10623, '\P{^Is_Blk=miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10751, '\p{Is_Blk=	miscellaneousMathematicalSymbols B}', "");
Expect(0, 10751, '\p{^Is_Blk=	miscellaneousMathematicalSymbols B}', "");
Expect(0, 10751, '\P{Is_Blk=	miscellaneousMathematicalSymbols B}', "");
Expect(1, 10751, '\P{^Is_Blk=	miscellaneousMathematicalSymbols B}', "");
Expect(0, 10623, '\p{Is_Blk=	miscellaneousMathematicalSymbols B}', "");
Expect(1, 10623, '\p{^Is_Blk=	miscellaneousMathematicalSymbols B}', "");
Expect(1, 10623, '\P{Is_Blk=	miscellaneousMathematicalSymbols B}', "");
Expect(0, 10623, '\P{^Is_Blk=	miscellaneousMathematicalSymbols B}', "");
Error('\p{Block=:= bengali}');
Error('\P{Block=:= bengali}');
Expect(1, 2559, '\p{Block=bengali}', "");
Expect(0, 2559, '\p{^Block=bengali}', "");
Expect(0, 2559, '\P{Block=bengali}', "");
Expect(1, 2559, '\P{^Block=bengali}', "");
Expect(0, 2431, '\p{Block=bengali}', "");
Expect(1, 2431, '\p{^Block=bengali}', "");
Expect(1, 2431, '\P{Block=bengali}', "");
Expect(0, 2431, '\P{^Block=bengali}', "");
Error('\p{Blk=-/a/Bengali}');
Error('\P{Blk=-/a/Bengali}');
Expect(1, 2559, '\p{Blk=bengali}', "");
Expect(0, 2559, '\p{^Blk=bengali}', "");
Expect(0, 2559, '\P{Blk=bengali}', "");
Expect(1, 2559, '\P{^Blk=bengali}', "");
Expect(0, 2431, '\p{Blk=bengali}', "");
Expect(1, 2431, '\p{^Blk=bengali}', "");
Expect(1, 2431, '\P{Blk=bengali}', "");
Expect(0, 2431, '\P{^Blk=bengali}', "");
Expect(1, 2559, '\p{Blk=- BENGALI}', "");
Expect(0, 2559, '\p{^Blk=- BENGALI}', "");
Expect(0, 2559, '\P{Blk=- BENGALI}', "");
Expect(1, 2559, '\P{^Blk=- BENGALI}', "");
Expect(0, 2431, '\p{Blk=- BENGALI}', "");
Expect(1, 2431, '\p{^Blk=- BENGALI}', "");
Expect(1, 2431, '\P{Blk=- BENGALI}', "");
Expect(0, 2431, '\P{^Blk=- BENGALI}', "");
Error('\p{Is_Block=:= Bengali}');
Error('\P{Is_Block=:= Bengali}');
Expect(1, 2559, '\p{Is_Block=bengali}', "");
Expect(0, 2559, '\p{^Is_Block=bengali}', "");
Expect(0, 2559, '\P{Is_Block=bengali}', "");
Expect(1, 2559, '\P{^Is_Block=bengali}', "");
Expect(0, 2431, '\p{Is_Block=bengali}', "");
Expect(1, 2431, '\p{^Is_Block=bengali}', "");
Expect(1, 2431, '\P{Is_Block=bengali}', "");
Expect(0, 2431, '\P{^Is_Block=bengali}', "");
Expect(1, 2559, '\p{Is_Block=	_BENGALI}', "");
Expect(0, 2559, '\p{^Is_Block=	_BENGALI}', "");
Expect(0, 2559, '\P{Is_Block=	_BENGALI}', "");
Expect(1, 2559, '\P{^Is_Block=	_BENGALI}', "");
Expect(0, 2431, '\p{Is_Block=	_BENGALI}', "");
Expect(1, 2431, '\p{^Is_Block=	_BENGALI}', "");
Expect(1, 2431, '\P{Is_Block=	_BENGALI}', "");
Expect(0, 2431, '\P{^Is_Block=	_BENGALI}', "");
Error('\p{Is_Blk=:=-BENGALI}');
Error('\P{Is_Blk=:=-BENGALI}');
Expect(1, 2559, '\p{Is_Blk=bengali}', "");
Expect(0, 2559, '\p{^Is_Blk=bengali}', "");
Expect(0, 2559, '\P{Is_Blk=bengali}', "");
Expect(1, 2559, '\P{^Is_Blk=bengali}', "");
Expect(0, 2431, '\p{Is_Blk=bengali}', "");
Expect(1, 2431, '\p{^Is_Blk=bengali}', "");
Expect(1, 2431, '\P{Is_Blk=bengali}', "");
Expect(0, 2431, '\P{^Is_Blk=bengali}', "");
Expect(1, 2559, '\p{Is_Blk= 	Bengali}', "");
Expect(0, 2559, '\p{^Is_Blk= 	Bengali}', "");
Expect(0, 2559, '\P{Is_Blk= 	Bengali}', "");
Expect(1, 2559, '\P{^Is_Blk= 	Bengali}', "");
Expect(0, 2431, '\p{Is_Blk= 	Bengali}', "");
Expect(1, 2431, '\p{^Is_Blk= 	Bengali}', "");
Expect(1, 2431, '\P{Is_Blk= 	Bengali}', "");
Expect(0, 2431, '\P{^Is_Blk= 	Bengali}', "");
Error('\p{Block= :=cypriot-SYLLABARY}');
Error('\P{Block= :=cypriot-SYLLABARY}');
Expect(1, 67647, '\p{Block:	cypriotsyllabary}', "");
Expect(0, 67647, '\p{^Block:	cypriotsyllabary}', "");
Expect(0, 67647, '\P{Block:	cypriotsyllabary}', "");
Expect(1, 67647, '\P{^Block:	cypriotsyllabary}', "");
Expect(0, 67583, '\p{Block:	cypriotsyllabary}', "");
Expect(1, 67583, '\p{^Block:	cypriotsyllabary}', "");
Expect(1, 67583, '\P{Block:	cypriotsyllabary}', "");
Expect(0, 67583, '\P{^Block:	cypriotsyllabary}', "");
Expect(1, 67647, '\p{Block=-cypriot	SYLLABARY}', "");
Expect(0, 67647, '\p{^Block=-cypriot	SYLLABARY}', "");
Expect(0, 67647, '\P{Block=-cypriot	SYLLABARY}', "");
Expect(1, 67647, '\P{^Block=-cypriot	SYLLABARY}', "");
Expect(0, 67583, '\p{Block=-cypriot	SYLLABARY}', "");
Expect(1, 67583, '\p{^Block=-cypriot	SYLLABARY}', "");
Expect(1, 67583, '\P{Block=-cypriot	SYLLABARY}', "");
Expect(0, 67583, '\P{^Block=-cypriot	SYLLABARY}', "");
Error('\p{Blk=-Cypriot:=syllabary}');
Error('\P{Blk=-Cypriot:=syllabary}');
Expect(1, 67647, '\p{Blk=cypriotsyllabary}', "");
Expect(0, 67647, '\p{^Blk=cypriotsyllabary}', "");
Expect(0, 67647, '\P{Blk=cypriotsyllabary}', "");
Expect(1, 67647, '\P{^Blk=cypriotsyllabary}', "");
Expect(0, 67583, '\p{Blk=cypriotsyllabary}', "");
Expect(1, 67583, '\p{^Blk=cypriotsyllabary}', "");
Expect(1, 67583, '\P{Blk=cypriotsyllabary}', "");
Expect(0, 67583, '\P{^Blk=cypriotsyllabary}', "");
Expect(1, 67647, '\p{Blk=_Cypriot-SYLLABARY}', "");
Expect(0, 67647, '\p{^Blk=_Cypriot-SYLLABARY}', "");
Expect(0, 67647, '\P{Blk=_Cypriot-SYLLABARY}', "");
Expect(1, 67647, '\P{^Blk=_Cypriot-SYLLABARY}', "");
Expect(0, 67583, '\p{Blk=_Cypriot-SYLLABARY}', "");
Expect(1, 67583, '\p{^Blk=_Cypriot-SYLLABARY}', "");
Expect(1, 67583, '\P{Blk=_Cypriot-SYLLABARY}', "");
Expect(0, 67583, '\P{^Blk=_Cypriot-SYLLABARY}', "");
Error('\p{Is_Block=/a/_	cypriot Syllabary}');
Error('\P{Is_Block=/a/_	cypriot Syllabary}');
Expect(1, 67647, '\p{Is_Block=cypriotsyllabary}', "");
Expect(0, 67647, '\p{^Is_Block=cypriotsyllabary}', "");
Expect(0, 67647, '\P{Is_Block=cypriotsyllabary}', "");
Expect(1, 67647, '\P{^Is_Block=cypriotsyllabary}', "");
Expect(0, 67583, '\p{Is_Block=cypriotsyllabary}', "");
Expect(1, 67583, '\p{^Is_Block=cypriotsyllabary}', "");
Expect(1, 67583, '\P{Is_Block=cypriotsyllabary}', "");
Expect(0, 67583, '\P{^Is_Block=cypriotsyllabary}', "");
Expect(1, 67647, '\p{Is_Block=-CypriotSyllabary}', "");
Expect(0, 67647, '\p{^Is_Block=-CypriotSyllabary}', "");
Expect(0, 67647, '\P{Is_Block=-CypriotSyllabary}', "");
Expect(1, 67647, '\P{^Is_Block=-CypriotSyllabary}', "");
Expect(0, 67583, '\p{Is_Block=-CypriotSyllabary}', "");
Expect(1, 67583, '\p{^Is_Block=-CypriotSyllabary}', "");
Expect(1, 67583, '\P{Is_Block=-CypriotSyllabary}', "");
Expect(0, 67583, '\P{^Is_Block=-CypriotSyllabary}', "");
Error('\p{Is_Blk=	/a/CypriotSYLLABARY}');
Error('\P{Is_Blk=	/a/CypriotSYLLABARY}');
Expect(1, 67647, '\p{Is_Blk=cypriotsyllabary}', "");
Expect(0, 67647, '\p{^Is_Blk=cypriotsyllabary}', "");
Expect(0, 67647, '\P{Is_Blk=cypriotsyllabary}', "");
Expect(1, 67647, '\P{^Is_Blk=cypriotsyllabary}', "");
Expect(0, 67583, '\p{Is_Blk=cypriotsyllabary}', "");
Expect(1, 67583, '\p{^Is_Blk=cypriotsyllabary}', "");
Expect(1, 67583, '\P{Is_Blk=cypriotsyllabary}', "");
Expect(0, 67583, '\P{^Is_Blk=cypriotsyllabary}', "");
Expect(1, 67647, '\p{Is_Blk=--CYPRIOT Syllabary}', "");
Expect(0, 67647, '\p{^Is_Blk=--CYPRIOT Syllabary}', "");
Expect(0, 67647, '\P{Is_Blk=--CYPRIOT Syllabary}', "");
Expect(1, 67647, '\P{^Is_Blk=--CYPRIOT Syllabary}', "");
Expect(0, 67583, '\p{Is_Blk=--CYPRIOT Syllabary}', "");
Expect(1, 67583, '\p{^Is_Blk=--CYPRIOT Syllabary}', "");
Expect(1, 67583, '\P{Is_Blk=--CYPRIOT Syllabary}', "");
Expect(0, 67583, '\P{^Is_Blk=--CYPRIOT Syllabary}', "");
Error('\p{Block=:=	supplemental	punctuation}');
Error('\P{Block=:=	supplemental	punctuation}');
Expect(1, 11903, '\p{Block=supplementalpunctuation}', "");
Expect(0, 11903, '\p{^Block=supplementalpunctuation}', "");
Expect(0, 11903, '\P{Block=supplementalpunctuation}', "");
Expect(1, 11903, '\P{^Block=supplementalpunctuation}', "");
Expect(0, 11775, '\p{Block=supplementalpunctuation}', "");
Expect(1, 11775, '\p{^Block=supplementalpunctuation}', "");
Expect(1, 11775, '\P{Block=supplementalpunctuation}', "");
Expect(0, 11775, '\P{^Block=supplementalpunctuation}', "");
Expect(1, 11903, '\p{Block: -Supplemental_Punctuation}', "");
Expect(0, 11903, '\p{^Block: -Supplemental_Punctuation}', "");
Expect(0, 11903, '\P{Block: -Supplemental_Punctuation}', "");
Expect(1, 11903, '\P{^Block: -Supplemental_Punctuation}', "");
Expect(0, 11775, '\p{Block: -Supplemental_Punctuation}', "");
Expect(1, 11775, '\p{^Block: -Supplemental_Punctuation}', "");
Expect(1, 11775, '\P{Block: -Supplemental_Punctuation}', "");
Expect(0, 11775, '\P{^Block: -Supplemental_Punctuation}', "");
Error('\p{Blk=	Supplemental:=PUNCTUATION}');
Error('\P{Blk=	Supplemental:=PUNCTUATION}');
Expect(1, 11903, '\p{Blk=supplementalpunctuation}', "");
Expect(0, 11903, '\p{^Blk=supplementalpunctuation}', "");
Expect(0, 11903, '\P{Blk=supplementalpunctuation}', "");
Expect(1, 11903, '\P{^Blk=supplementalpunctuation}', "");
Expect(0, 11775, '\p{Blk=supplementalpunctuation}', "");
Expect(1, 11775, '\p{^Blk=supplementalpunctuation}', "");
Expect(1, 11775, '\P{Blk=supplementalpunctuation}', "");
Expect(0, 11775, '\P{^Blk=supplementalpunctuation}', "");
Expect(1, 11903, '\p{Blk= Supplemental_PUNCTUATION}', "");
Expect(0, 11903, '\p{^Blk= Supplemental_PUNCTUATION}', "");
Expect(0, 11903, '\P{Blk= Supplemental_PUNCTUATION}', "");
Expect(1, 11903, '\P{^Blk= Supplemental_PUNCTUATION}', "");
Expect(0, 11775, '\p{Blk= Supplemental_PUNCTUATION}', "");
Expect(1, 11775, '\p{^Blk= Supplemental_PUNCTUATION}', "");
Expect(1, 11775, '\P{Blk= Supplemental_PUNCTUATION}', "");
Expect(0, 11775, '\P{^Blk= Supplemental_PUNCTUATION}', "");
Error('\p{Is_Block= 	supplemental	punctuation/a/}');
Error('\P{Is_Block= 	supplemental	punctuation/a/}');
Expect(1, 11903, '\p{Is_Block=supplementalpunctuation}', "");
Expect(0, 11903, '\p{^Is_Block=supplementalpunctuation}', "");
Expect(0, 11903, '\P{Is_Block=supplementalpunctuation}', "");
Expect(1, 11903, '\P{^Is_Block=supplementalpunctuation}', "");
Expect(0, 11775, '\p{Is_Block=supplementalpunctuation}', "");
Expect(1, 11775, '\p{^Is_Block=supplementalpunctuation}', "");
Expect(1, 11775, '\P{Is_Block=supplementalpunctuation}', "");
Expect(0, 11775, '\P{^Is_Block=supplementalpunctuation}', "");
Expect(1, 11903, '\p{Is_Block=_-SUPPLEMENTALPUNCTUATION}', "");
Expect(0, 11903, '\p{^Is_Block=_-SUPPLEMENTALPUNCTUATION}', "");
Expect(0, 11903, '\P{Is_Block=_-SUPPLEMENTALPUNCTUATION}', "");
Expect(1, 11903, '\P{^Is_Block=_-SUPPLEMENTALPUNCTUATION}', "");
Expect(0, 11775, '\p{Is_Block=_-SUPPLEMENTALPUNCTUATION}', "");
Expect(1, 11775, '\p{^Is_Block=_-SUPPLEMENTALPUNCTUATION}', "");
Expect(1, 11775, '\P{Is_Block=_-SUPPLEMENTALPUNCTUATION}', "");
Expect(0, 11775, '\P{^Is_Block=_-SUPPLEMENTALPUNCTUATION}', "");
Error('\p{Is_Blk=/a/_SUPPLEMENTAL Punctuation}');
Error('\P{Is_Blk=/a/_SUPPLEMENTAL Punctuation}');
Expect(1, 11903, '\p{Is_Blk=supplementalpunctuation}', "");
Expect(0, 11903, '\p{^Is_Blk=supplementalpunctuation}', "");
Expect(0, 11903, '\P{Is_Blk=supplementalpunctuation}', "");
Expect(1, 11903, '\P{^Is_Blk=supplementalpunctuation}', "");
Expect(0, 11775, '\p{Is_Blk=supplementalpunctuation}', "");
Expect(1, 11775, '\p{^Is_Blk=supplementalpunctuation}', "");
Expect(1, 11775, '\P{Is_Blk=supplementalpunctuation}', "");
Expect(0, 11775, '\P{^Is_Blk=supplementalpunctuation}', "");
Expect(1, 11903, '\p{Is_Blk=_	supplemental Punctuation}', "");
Expect(0, 11903, '\p{^Is_Blk=_	supplemental Punctuation}', "");
Expect(0, 11903, '\P{Is_Blk=_	supplemental Punctuation}', "");
Expect(1, 11903, '\P{^Is_Blk=_	supplemental Punctuation}', "");
Expect(0, 11775, '\p{Is_Blk=_	supplemental Punctuation}', "");
Expect(1, 11775, '\p{^Is_Blk=_	supplemental Punctuation}', "");
Expect(1, 11775, '\P{Is_Blk=_	supplemental Punctuation}', "");
Expect(0, 11775, '\P{^Is_Blk=_	supplemental Punctuation}', "");
Error('\p{Block=:=Coptic}');
Error('\P{Block=:=Coptic}');
Expect(1, 11519, '\p{Block=coptic}', "");
Expect(0, 11519, '\p{^Block=coptic}', "");
Expect(0, 11519, '\P{Block=coptic}', "");
Expect(1, 11519, '\P{^Block=coptic}', "");
Expect(0, 11391, '\p{Block=coptic}', "");
Expect(1, 11391, '\p{^Block=coptic}', "");
Expect(1, 11391, '\P{Block=coptic}', "");
Expect(0, 11391, '\P{^Block=coptic}', "");
Expect(1, 11519, '\p{Block=	-Coptic}', "");
Expect(0, 11519, '\p{^Block=	-Coptic}', "");
Expect(0, 11519, '\P{Block=	-Coptic}', "");
Expect(1, 11519, '\P{^Block=	-Coptic}', "");
Expect(0, 11391, '\p{Block=	-Coptic}', "");
Expect(1, 11391, '\p{^Block=	-Coptic}', "");
Expect(1, 11391, '\P{Block=	-Coptic}', "");
Expect(0, 11391, '\P{^Block=	-Coptic}', "");
Error('\p{Blk=:=-_coptic}');
Error('\P{Blk=:=-_coptic}');
Expect(1, 11519, '\p{Blk:	coptic}', "");
Expect(0, 11519, '\p{^Blk:	coptic}', "");
Expect(0, 11519, '\P{Blk:	coptic}', "");
Expect(1, 11519, '\P{^Blk:	coptic}', "");
Expect(0, 11391, '\p{Blk:	coptic}', "");
Expect(1, 11391, '\p{^Blk:	coptic}', "");
Expect(1, 11391, '\P{Blk:	coptic}', "");
Expect(0, 11391, '\P{^Blk:	coptic}', "");
Expect(1, 11519, '\p{Blk=COPTIC}', "");
Expect(0, 11519, '\p{^Blk=COPTIC}', "");
Expect(0, 11519, '\P{Blk=COPTIC}', "");
Expect(1, 11519, '\P{^Blk=COPTIC}', "");
Expect(0, 11391, '\p{Blk=COPTIC}', "");
Expect(1, 11391, '\p{^Blk=COPTIC}', "");
Expect(1, 11391, '\P{Blk=COPTIC}', "");
Expect(0, 11391, '\P{^Blk=COPTIC}', "");
Error('\p{Is_Block=/a/	_COPTIC}');
Error('\P{Is_Block=/a/	_COPTIC}');
Expect(1, 11519, '\p{Is_Block=coptic}', "");
Expect(0, 11519, '\p{^Is_Block=coptic}', "");
Expect(0, 11519, '\P{Is_Block=coptic}', "");
Expect(1, 11519, '\P{^Is_Block=coptic}', "");
Expect(0, 11391, '\p{Is_Block=coptic}', "");
Expect(1, 11391, '\p{^Is_Block=coptic}', "");
Expect(1, 11391, '\P{Is_Block=coptic}', "");
Expect(0, 11391, '\P{^Is_Block=coptic}', "");
Expect(1, 11519, '\p{Is_Block=	coptic}', "");
Expect(0, 11519, '\p{^Is_Block=	coptic}', "");
Expect(0, 11519, '\P{Is_Block=	coptic}', "");
Expect(1, 11519, '\P{^Is_Block=	coptic}', "");
Expect(0, 11391, '\p{Is_Block=	coptic}', "");
Expect(1, 11391, '\p{^Is_Block=	coptic}', "");
Expect(1, 11391, '\P{Is_Block=	coptic}', "");
Expect(0, 11391, '\P{^Is_Block=	coptic}', "");
Error('\p{Is_Blk: __Coptic:=}');
Error('\P{Is_Blk: __Coptic:=}');
Expect(1, 11519, '\p{Is_Blk=coptic}', "");
Expect(0, 11519, '\p{^Is_Blk=coptic}', "");
Expect(0, 11519, '\P{Is_Blk=coptic}', "");
Expect(1, 11519, '\P{^Is_Blk=coptic}', "");
Expect(0, 11391, '\p{Is_Blk=coptic}', "");
Expect(1, 11391, '\p{^Is_Blk=coptic}', "");
Expect(1, 11391, '\P{Is_Blk=coptic}', "");
Expect(0, 11391, '\P{^Is_Blk=coptic}', "");
Expect(1, 11519, '\p{Is_Blk:	-coptic}', "");
Expect(0, 11519, '\p{^Is_Blk:	-coptic}', "");
Expect(0, 11519, '\P{Is_Blk:	-coptic}', "");
Expect(1, 11519, '\P{^Is_Blk:	-coptic}', "");
Expect(0, 11391, '\p{Is_Blk:	-coptic}', "");
Expect(1, 11391, '\p{^Is_Blk:	-coptic}', "");
Expect(1, 11391, '\P{Is_Blk:	-coptic}', "");
Expect(0, 11391, '\P{^Is_Blk:	-coptic}', "");
Error('\p{Block=		Supplemental:=arrows B}');
Error('\P{Block=		Supplemental:=arrows B}');
Expect(1, 10623, '\p{Block=supplementalarrowsb}', "");
Expect(0, 10623, '\p{^Block=supplementalarrowsb}', "");
Expect(0, 10623, '\P{Block=supplementalarrowsb}', "");
Expect(1, 10623, '\P{^Block=supplementalarrowsb}', "");
Expect(0, 10495, '\p{Block=supplementalarrowsb}', "");
Expect(1, 10495, '\p{^Block=supplementalarrowsb}', "");
Expect(1, 10495, '\P{Block=supplementalarrowsb}', "");
Expect(0, 10495, '\P{^Block=supplementalarrowsb}', "");
Expect(1, 10623, '\p{Block=  Supplemental	ArrowsB}', "");
Expect(0, 10623, '\p{^Block=  Supplemental	ArrowsB}', "");
Expect(0, 10623, '\P{Block=  Supplemental	ArrowsB}', "");
Expect(1, 10623, '\P{^Block=  Supplemental	ArrowsB}', "");
Expect(0, 10495, '\p{Block=  Supplemental	ArrowsB}', "");
Expect(1, 10495, '\p{^Block=  Supplemental	ArrowsB}', "");
Expect(1, 10495, '\P{Block=  Supplemental	ArrowsB}', "");
Expect(0, 10495, '\P{^Block=  Supplemental	ArrowsB}', "");
Error('\p{Blk=-SUPPLEMENTAL:=Arrows	B}');
Error('\P{Blk=-SUPPLEMENTAL:=Arrows	B}');
Expect(1, 10623, '\p{Blk=supplementalarrowsb}', "");
Expect(0, 10623, '\p{^Blk=supplementalarrowsb}', "");
Expect(0, 10623, '\P{Blk=supplementalarrowsb}', "");
Expect(1, 10623, '\P{^Blk=supplementalarrowsb}', "");
Expect(0, 10495, '\p{Blk=supplementalarrowsb}', "");
Expect(1, 10495, '\p{^Blk=supplementalarrowsb}', "");
Expect(1, 10495, '\P{Blk=supplementalarrowsb}', "");
Expect(0, 10495, '\P{^Blk=supplementalarrowsb}', "");
Expect(1, 10623, '\p{Blk= Supplemental	arrows	B}', "");
Expect(0, 10623, '\p{^Blk= Supplemental	arrows	B}', "");
Expect(0, 10623, '\P{Blk= Supplemental	arrows	B}', "");
Expect(1, 10623, '\P{^Blk= Supplemental	arrows	B}', "");
Expect(0, 10495, '\p{Blk= Supplemental	arrows	B}', "");
Expect(1, 10495, '\p{^Blk= Supplemental	arrows	B}', "");
Expect(1, 10495, '\P{Blk= Supplemental	arrows	B}', "");
Expect(0, 10495, '\P{^Blk= Supplemental	arrows	B}', "");
Error('\p{Is_Block=_ Supplemental	arrows-B/a/}');
Error('\P{Is_Block=_ Supplemental	arrows-B/a/}');
Expect(1, 10623, '\p{Is_Block=supplementalarrowsb}', "");
Expect(0, 10623, '\p{^Is_Block=supplementalarrowsb}', "");
Expect(0, 10623, '\P{Is_Block=supplementalarrowsb}', "");
Expect(1, 10623, '\P{^Is_Block=supplementalarrowsb}', "");
Expect(0, 10495, '\p{Is_Block=supplementalarrowsb}', "");
Expect(1, 10495, '\p{^Is_Block=supplementalarrowsb}', "");
Expect(1, 10495, '\P{Is_Block=supplementalarrowsb}', "");
Expect(0, 10495, '\P{^Is_Block=supplementalarrowsb}', "");
Expect(1, 10623, '\p{Is_Block=  supplementalarrows-B}', "");
Expect(0, 10623, '\p{^Is_Block=  supplementalarrows-B}', "");
Expect(0, 10623, '\P{Is_Block=  supplementalarrows-B}', "");
Expect(1, 10623, '\P{^Is_Block=  supplementalarrows-B}', "");
Expect(0, 10495, '\p{Is_Block=  supplementalarrows-B}', "");
Expect(1, 10495, '\p{^Is_Block=  supplementalarrows-B}', "");
Expect(1, 10495, '\P{Is_Block=  supplementalarrows-B}', "");
Expect(0, 10495, '\P{^Is_Block=  supplementalarrows-B}', "");
Error('\p{Is_Blk=/a/Supplemental-arrows_B}');
Error('\P{Is_Blk=/a/Supplemental-arrows_B}');
Expect(1, 10623, '\p{Is_Blk: supplementalarrowsb}', "");
Expect(0, 10623, '\p{^Is_Blk: supplementalarrowsb}', "");
Expect(0, 10623, '\P{Is_Blk: supplementalarrowsb}', "");
Expect(1, 10623, '\P{^Is_Blk: supplementalarrowsb}', "");
Expect(0, 10495, '\p{Is_Blk: supplementalarrowsb}', "");
Expect(1, 10495, '\p{^Is_Blk: supplementalarrowsb}', "");
Expect(1, 10495, '\P{Is_Blk: supplementalarrowsb}', "");
Expect(0, 10495, '\P{^Is_Blk: supplementalarrowsb}', "");
Expect(1, 10623, '\p{Is_Blk=-SUPPLEMENTAL-Arrows-b}', "");
Expect(0, 10623, '\p{^Is_Blk=-SUPPLEMENTAL-Arrows-b}', "");
Expect(0, 10623, '\P{Is_Blk=-SUPPLEMENTAL-Arrows-b}', "");
Expect(1, 10623, '\P{^Is_Blk=-SUPPLEMENTAL-Arrows-b}', "");
Expect(0, 10495, '\p{Is_Blk=-SUPPLEMENTAL-Arrows-b}', "");
Expect(1, 10495, '\p{^Is_Blk=-SUPPLEMENTAL-Arrows-b}', "");
Expect(1, 10495, '\P{Is_Blk=-SUPPLEMENTAL-Arrows-b}', "");
Expect(0, 10495, '\P{^Is_Blk=-SUPPLEMENTAL-Arrows-b}', "");
Error('\p{Block:/a/_TIBETAN}');
Error('\P{Block:/a/_TIBETAN}');
Expect(1, 4095, '\p{Block=tibetan}', "");
Expect(0, 4095, '\p{^Block=tibetan}', "");
Expect(0, 4095, '\P{Block=tibetan}', "");
Expect(1, 4095, '\P{^Block=tibetan}', "");
Expect(0, 3839, '\p{Block=tibetan}', "");
Expect(1, 3839, '\p{^Block=tibetan}', "");
Expect(1, 3839, '\P{Block=tibetan}', "");
Expect(0, 3839, '\P{^Block=tibetan}', "");
Error('\p{Blk=	_Tibetan:=}');
Error('\P{Blk=	_Tibetan:=}');
Expect(1, 4095, '\p{Blk=tibetan}', "");
Expect(0, 4095, '\p{^Blk=tibetan}', "");
Expect(0, 4095, '\P{Blk=tibetan}', "");
Expect(1, 4095, '\P{^Blk=tibetan}', "");
Expect(0, 3839, '\p{Blk=tibetan}', "");
Expect(1, 3839, '\p{^Blk=tibetan}', "");
Expect(1, 3839, '\P{Blk=tibetan}', "");
Expect(0, 3839, '\P{^Blk=tibetan}', "");
Expect(1, 4095, '\p{Blk=_Tibetan}', "");
Expect(0, 4095, '\p{^Blk=_Tibetan}', "");
Expect(0, 4095, '\P{Blk=_Tibetan}', "");
Expect(1, 4095, '\P{^Blk=_Tibetan}', "");
Expect(0, 3839, '\p{Blk=_Tibetan}', "");
Expect(1, 3839, '\p{^Blk=_Tibetan}', "");
Expect(1, 3839, '\P{Blk=_Tibetan}', "");
Expect(0, 3839, '\P{^Blk=_Tibetan}', "");
Error('\p{Is_Block=:= -Tibetan}');
Error('\P{Is_Block=:= -Tibetan}');
Expect(1, 4095, '\p{Is_Block:   tibetan}', "");
Expect(0, 4095, '\p{^Is_Block:   tibetan}', "");
Expect(0, 4095, '\P{Is_Block:   tibetan}', "");
Expect(1, 4095, '\P{^Is_Block:   tibetan}', "");
Expect(0, 3839, '\p{Is_Block:   tibetan}', "");
Expect(1, 3839, '\p{^Is_Block:   tibetan}', "");
Expect(1, 3839, '\P{Is_Block:   tibetan}', "");
Expect(0, 3839, '\P{^Is_Block:   tibetan}', "");
Expect(1, 4095, '\p{Is_Block=-TIBETAN}', "");
Expect(0, 4095, '\p{^Is_Block=-TIBETAN}', "");
Expect(0, 4095, '\P{Is_Block=-TIBETAN}', "");
Expect(1, 4095, '\P{^Is_Block=-TIBETAN}', "");
Expect(0, 3839, '\p{Is_Block=-TIBETAN}', "");
Expect(1, 3839, '\p{^Is_Block=-TIBETAN}', "");
Expect(1, 3839, '\P{Is_Block=-TIBETAN}', "");
Expect(0, 3839, '\P{^Is_Block=-TIBETAN}', "");
Error('\p{Is_Blk=/a/Tibetan}');
Error('\P{Is_Blk=/a/Tibetan}');
Expect(1, 4095, '\p{Is_Blk=tibetan}', "");
Expect(0, 4095, '\p{^Is_Blk=tibetan}', "");
Expect(0, 4095, '\P{Is_Blk=tibetan}', "");
Expect(1, 4095, '\P{^Is_Blk=tibetan}', "");
Expect(0, 3839, '\p{Is_Blk=tibetan}', "");
Expect(1, 3839, '\p{^Is_Blk=tibetan}', "");
Expect(1, 3839, '\P{Is_Blk=tibetan}', "");
Expect(0, 3839, '\P{^Is_Blk=tibetan}', "");
Expect(1, 4095, '\p{Is_Blk=	tibetan}', "");
Expect(0, 4095, '\p{^Is_Blk=	tibetan}', "");
Expect(0, 4095, '\P{Is_Blk=	tibetan}', "");
Expect(1, 4095, '\P{^Is_Blk=	tibetan}', "");
Expect(0, 3839, '\p{Is_Blk=	tibetan}', "");
Expect(1, 3839, '\p{^Is_Blk=	tibetan}', "");
Expect(1, 3839, '\P{Is_Blk=	tibetan}', "");
Expect(0, 3839, '\P{^Is_Blk=	tibetan}', "");
Error('\p{Block=-DominoTiles/a/}');
Error('\P{Block=-DominoTiles/a/}');
Expect(1, 127135, '\p{Block=dominotiles}', "");
Expect(0, 127135, '\p{^Block=dominotiles}', "");
Expect(0, 127135, '\P{Block=dominotiles}', "");
Expect(1, 127135, '\P{^Block=dominotiles}', "");
Expect(0, 127023, '\p{Block=dominotiles}', "");
Expect(1, 127023, '\p{^Block=dominotiles}', "");
Expect(1, 127023, '\P{Block=dominotiles}', "");
Expect(0, 127023, '\P{^Block=dominotiles}', "");
Expect(1, 127135, '\p{Block=	-Domino-TILES}', "");
Expect(0, 127135, '\p{^Block=	-Domino-TILES}', "");
Expect(0, 127135, '\P{Block=	-Domino-TILES}', "");
Expect(1, 127135, '\P{^Block=	-Domino-TILES}', "");
Expect(0, 127023, '\p{Block=	-Domino-TILES}', "");
Expect(1, 127023, '\p{^Block=	-Domino-TILES}', "");
Expect(1, 127023, '\P{Block=	-Domino-TILES}', "");
Expect(0, 127023, '\P{^Block=	-Domino-TILES}', "");
Error('\p{Blk= Domino_TILES/a/}');
Error('\P{Blk= Domino_TILES/a/}');
Expect(1, 127135, '\p{Blk: dominotiles}', "");
Expect(0, 127135, '\p{^Blk: dominotiles}', "");
Expect(0, 127135, '\P{Blk: dominotiles}', "");
Expect(1, 127135, '\P{^Blk: dominotiles}', "");
Expect(0, 127023, '\p{Blk: dominotiles}', "");
Expect(1, 127023, '\p{^Blk: dominotiles}', "");
Expect(1, 127023, '\P{Blk: dominotiles}', "");
Expect(0, 127023, '\P{^Blk: dominotiles}', "");
Expect(1, 127135, '\p{Blk=_-DominoTiles}', "");
Expect(0, 127135, '\p{^Blk=_-DominoTiles}', "");
Expect(0, 127135, '\P{Blk=_-DominoTiles}', "");
Expect(1, 127135, '\P{^Blk=_-DominoTiles}', "");
Expect(0, 127023, '\p{Blk=_-DominoTiles}', "");
Expect(1, 127023, '\p{^Blk=_-DominoTiles}', "");
Expect(1, 127023, '\P{Blk=_-DominoTiles}', "");
Expect(0, 127023, '\P{^Blk=_-DominoTiles}', "");
Error('\p{Is_Block=	 Domino_tiles/a/}');
Error('\P{Is_Block=	 Domino_tiles/a/}');
Expect(1, 127135, '\p{Is_Block=dominotiles}', "");
Expect(0, 127135, '\p{^Is_Block=dominotiles}', "");
Expect(0, 127135, '\P{Is_Block=dominotiles}', "");
Expect(1, 127135, '\P{^Is_Block=dominotiles}', "");
Expect(0, 127023, '\p{Is_Block=dominotiles}', "");
Expect(1, 127023, '\p{^Is_Block=dominotiles}', "");
Expect(1, 127023, '\P{Is_Block=dominotiles}', "");
Expect(0, 127023, '\P{^Is_Block=dominotiles}', "");
Expect(1, 127135, '\p{Is_Block=	 Domino	Tiles}', "");
Expect(0, 127135, '\p{^Is_Block=	 Domino	Tiles}', "");
Expect(0, 127135, '\P{Is_Block=	 Domino	Tiles}', "");
Expect(1, 127135, '\P{^Is_Block=	 Domino	Tiles}', "");
Expect(0, 127023, '\p{Is_Block=	 Domino	Tiles}', "");
Expect(1, 127023, '\p{^Is_Block=	 Domino	Tiles}', "");
Expect(1, 127023, '\P{Is_Block=	 Domino	Tiles}', "");
Expect(0, 127023, '\P{^Is_Block=	 Domino	Tiles}', "");
Error('\p{Is_Blk=  Domino/a/tiles}');
Error('\P{Is_Blk=  Domino/a/tiles}');
Expect(1, 127135, '\p{Is_Blk=dominotiles}', "");
Expect(0, 127135, '\p{^Is_Blk=dominotiles}', "");
Expect(0, 127135, '\P{Is_Blk=dominotiles}', "");
Expect(1, 127135, '\P{^Is_Blk=dominotiles}', "");
Expect(0, 127023, '\p{Is_Blk=dominotiles}', "");
Expect(1, 127023, '\p{^Is_Blk=dominotiles}', "");
Expect(1, 127023, '\P{Is_Blk=dominotiles}', "");
Expect(0, 127023, '\P{^Is_Blk=dominotiles}', "");
Expect(1, 127135, '\p{Is_Blk=-	Domino_Tiles}', "");
Expect(0, 127135, '\p{^Is_Blk=-	Domino_Tiles}', "");
Expect(0, 127135, '\P{Is_Blk=-	Domino_Tiles}', "");
Expect(1, 127135, '\P{^Is_Blk=-	Domino_Tiles}', "");
Expect(0, 127023, '\p{Is_Blk=-	Domino_Tiles}', "");
Expect(1, 127023, '\p{^Is_Blk=-	Domino_Tiles}', "");
Expect(1, 127023, '\P{Is_Blk=-	Domino_Tiles}', "");
Expect(0, 127023, '\P{^Is_Blk=-	Domino_Tiles}', "");
Error('\p{Block:	--CJK_Symbols-and/a/Punctuation}');
Error('\P{Block:	--CJK_Symbols-and/a/Punctuation}');
Expect(1, 12351, '\p{Block=cjksymbolsandpunctuation}', "");
Expect(0, 12351, '\p{^Block=cjksymbolsandpunctuation}', "");
Expect(0, 12351, '\P{Block=cjksymbolsandpunctuation}', "");
Expect(1, 12351, '\P{^Block=cjksymbolsandpunctuation}', "");
Expect(0, 12287, '\p{Block=cjksymbolsandpunctuation}', "");
Expect(1, 12287, '\p{^Block=cjksymbolsandpunctuation}', "");
Expect(1, 12287, '\P{Block=cjksymbolsandpunctuation}', "");
Expect(0, 12287, '\P{^Block=cjksymbolsandpunctuation}', "");
Expect(1, 12351, '\p{Block=-_CJK-Symbols AND	Punctuation}', "");
Expect(0, 12351, '\p{^Block=-_CJK-Symbols AND	Punctuation}', "");
Expect(0, 12351, '\P{Block=-_CJK-Symbols AND	Punctuation}', "");
Expect(1, 12351, '\P{^Block=-_CJK-Symbols AND	Punctuation}', "");
Expect(0, 12287, '\p{Block=-_CJK-Symbols AND	Punctuation}', "");
Expect(1, 12287, '\p{^Block=-_CJK-Symbols AND	Punctuation}', "");
Expect(1, 12287, '\P{Block=-_CJK-Symbols AND	Punctuation}', "");
Expect(0, 12287, '\P{^Block=-_CJK-Symbols AND	Punctuation}', "");
Error('\p{Blk=:=-_CJK_Symbols-and Punctuation}');
Error('\P{Blk=:=-_CJK_Symbols-and Punctuation}');
Expect(1, 12351, '\p{Blk=cjksymbolsandpunctuation}', "");
Expect(0, 12351, '\p{^Blk=cjksymbolsandpunctuation}', "");
Expect(0, 12351, '\P{Blk=cjksymbolsandpunctuation}', "");
Expect(1, 12351, '\P{^Blk=cjksymbolsandpunctuation}', "");
Expect(0, 12287, '\p{Blk=cjksymbolsandpunctuation}', "");
Expect(1, 12287, '\p{^Blk=cjksymbolsandpunctuation}', "");
Expect(1, 12287, '\P{Blk=cjksymbolsandpunctuation}', "");
Expect(0, 12287, '\P{^Blk=cjksymbolsandpunctuation}', "");
Expect(1, 12351, '\p{Blk=	CJK_SymbolsAND_Punctuation}', "");
Expect(0, 12351, '\p{^Blk=	CJK_SymbolsAND_Punctuation}', "");
Expect(0, 12351, '\P{Blk=	CJK_SymbolsAND_Punctuation}', "");
Expect(1, 12351, '\P{^Blk=	CJK_SymbolsAND_Punctuation}', "");
Expect(0, 12287, '\p{Blk=	CJK_SymbolsAND_Punctuation}', "");
Expect(1, 12287, '\p{^Blk=	CJK_SymbolsAND_Punctuation}', "");
Expect(1, 12287, '\P{Blk=	CJK_SymbolsAND_Punctuation}', "");
Expect(0, 12287, '\P{^Blk=	CJK_SymbolsAND_Punctuation}', "");
Error('\p{Is_Block:	_ CJK-Symbols and/a/Punctuation}');
Error('\P{Is_Block:	_ CJK-Symbols and/a/Punctuation}');
Expect(1, 12351, '\p{Is_Block=cjksymbolsandpunctuation}', "");
Expect(0, 12351, '\p{^Is_Block=cjksymbolsandpunctuation}', "");
Expect(0, 12351, '\P{Is_Block=cjksymbolsandpunctuation}', "");
Expect(1, 12351, '\P{^Is_Block=cjksymbolsandpunctuation}', "");
Expect(0, 12287, '\p{Is_Block=cjksymbolsandpunctuation}', "");
Expect(1, 12287, '\p{^Is_Block=cjksymbolsandpunctuation}', "");
Expect(1, 12287, '\P{Is_Block=cjksymbolsandpunctuation}', "");
Expect(0, 12287, '\P{^Is_Block=cjksymbolsandpunctuation}', "");
Expect(1, 12351, '\p{Is_Block=cjk	SYMBOLS-and_punctuation}', "");
Expect(0, 12351, '\p{^Is_Block=cjk	SYMBOLS-and_punctuation}', "");
Expect(0, 12351, '\P{Is_Block=cjk	SYMBOLS-and_punctuation}', "");
Expect(1, 12351, '\P{^Is_Block=cjk	SYMBOLS-and_punctuation}', "");
Expect(0, 12287, '\p{Is_Block=cjk	SYMBOLS-and_punctuation}', "");
Expect(1, 12287, '\p{^Is_Block=cjk	SYMBOLS-and_punctuation}', "");
Expect(1, 12287, '\P{Is_Block=cjk	SYMBOLS-and_punctuation}', "");
Expect(0, 12287, '\P{^Is_Block=cjk	SYMBOLS-and_punctuation}', "");
Error('\p{Is_Blk=:=cjk	SYMBOLS	and Punctuation}');
Error('\P{Is_Blk=:=cjk	SYMBOLS	and Punctuation}');
Expect(1, 12351, '\p{Is_Blk=cjksymbolsandpunctuation}', "");
Expect(0, 12351, '\p{^Is_Blk=cjksymbolsandpunctuation}', "");
Expect(0, 12351, '\P{Is_Blk=cjksymbolsandpunctuation}', "");
Expect(1, 12351, '\P{^Is_Blk=cjksymbolsandpunctuation}', "");
Expect(0, 12287, '\p{Is_Blk=cjksymbolsandpunctuation}', "");
Expect(1, 12287, '\p{^Is_Blk=cjksymbolsandpunctuation}', "");
Expect(1, 12287, '\P{Is_Blk=cjksymbolsandpunctuation}', "");
Expect(0, 12287, '\P{^Is_Blk=cjksymbolsandpunctuation}', "");
Expect(1, 12351, '\p{Is_Blk=-	cjk	SYMBOLS And	Punctuation}', "");
Expect(0, 12351, '\p{^Is_Blk=-	cjk	SYMBOLS And	Punctuation}', "");
Expect(0, 12351, '\P{Is_Blk=-	cjk	SYMBOLS And	Punctuation}', "");
Expect(1, 12351, '\P{^Is_Blk=-	cjk	SYMBOLS And	Punctuation}', "");
Expect(0, 12287, '\p{Is_Blk=-	cjk	SYMBOLS And	Punctuation}', "");
Expect(1, 12287, '\p{^Is_Blk=-	cjk	SYMBOLS And	Punctuation}', "");
Expect(1, 12287, '\P{Is_Blk=-	cjk	SYMBOLS And	Punctuation}', "");
Expect(0, 12287, '\P{^Is_Blk=-	cjk	SYMBOLS And	Punctuation}', "");
Error('\p{Block: _/a/Hangul Compatibility JAMO}');
Error('\P{Block: _/a/Hangul Compatibility JAMO}');
Expect(1, 12687, '\p{Block:	hangulcompatibilityjamo}', "");
Expect(0, 12687, '\p{^Block:	hangulcompatibilityjamo}', "");
Expect(0, 12687, '\P{Block:	hangulcompatibilityjamo}', "");
Expect(1, 12687, '\P{^Block:	hangulcompatibilityjamo}', "");
Expect(0, 12591, '\p{Block:	hangulcompatibilityjamo}', "");
Expect(1, 12591, '\p{^Block:	hangulcompatibilityjamo}', "");
Expect(1, 12591, '\P{Block:	hangulcompatibilityjamo}', "");
Expect(0, 12591, '\P{^Block:	hangulcompatibilityjamo}', "");
Expect(1, 12687, '\p{Block=	 HANGUL-COMPATIBILITY	Jamo}', "");
Expect(0, 12687, '\p{^Block=	 HANGUL-COMPATIBILITY	Jamo}', "");
Expect(0, 12687, '\P{Block=	 HANGUL-COMPATIBILITY	Jamo}', "");
Expect(1, 12687, '\P{^Block=	 HANGUL-COMPATIBILITY	Jamo}', "");
Expect(0, 12591, '\p{Block=	 HANGUL-COMPATIBILITY	Jamo}', "");
Expect(1, 12591, '\p{^Block=	 HANGUL-COMPATIBILITY	Jamo}', "");
Expect(1, 12591, '\P{Block=	 HANGUL-COMPATIBILITY	Jamo}', "");
Expect(0, 12591, '\P{^Block=	 HANGUL-COMPATIBILITY	Jamo}', "");
Error('\p{Blk: -Hangul_COMPATIBILITY	jamo:=}');
Error('\P{Blk: -Hangul_COMPATIBILITY	jamo:=}');
Expect(1, 12687, '\p{Blk=hangulcompatibilityjamo}', "");
Expect(0, 12687, '\p{^Blk=hangulcompatibilityjamo}', "");
Expect(0, 12687, '\P{Blk=hangulcompatibilityjamo}', "");
Expect(1, 12687, '\P{^Blk=hangulcompatibilityjamo}', "");
Expect(0, 12591, '\p{Blk=hangulcompatibilityjamo}', "");
Expect(1, 12591, '\p{^Blk=hangulcompatibilityjamo}', "");
Expect(1, 12591, '\P{Blk=hangulcompatibilityjamo}', "");
Expect(0, 12591, '\P{^Blk=hangulcompatibilityjamo}', "");
Expect(1, 12687, '\p{Blk=-_Hangul-Compatibility-jamo}', "");
Expect(0, 12687, '\p{^Blk=-_Hangul-Compatibility-jamo}', "");
Expect(0, 12687, '\P{Blk=-_Hangul-Compatibility-jamo}', "");
Expect(1, 12687, '\P{^Blk=-_Hangul-Compatibility-jamo}', "");
Expect(0, 12591, '\p{Blk=-_Hangul-Compatibility-jamo}', "");
Expect(1, 12591, '\p{^Blk=-_Hangul-Compatibility-jamo}', "");
Expect(1, 12591, '\P{Blk=-_Hangul-Compatibility-jamo}', "");
Expect(0, 12591, '\P{^Blk=-_Hangul-Compatibility-jamo}', "");
Error('\p{Is_Block=-hangul/a/Compatibility-Jamo}');
Error('\P{Is_Block=-hangul/a/Compatibility-Jamo}');
Expect(1, 12687, '\p{Is_Block=hangulcompatibilityjamo}', "");
Expect(0, 12687, '\p{^Is_Block=hangulcompatibilityjamo}', "");
Expect(0, 12687, '\P{Is_Block=hangulcompatibilityjamo}', "");
Expect(1, 12687, '\P{^Is_Block=hangulcompatibilityjamo}', "");
Expect(0, 12591, '\p{Is_Block=hangulcompatibilityjamo}', "");
Expect(1, 12591, '\p{^Is_Block=hangulcompatibilityjamo}', "");
Expect(1, 12591, '\P{Is_Block=hangulcompatibilityjamo}', "");
Expect(0, 12591, '\P{^Is_Block=hangulcompatibilityjamo}', "");
Expect(1, 12687, '\p{Is_Block=_ Hangul COMPATIBILITYJAMO}', "");
Expect(0, 12687, '\p{^Is_Block=_ Hangul COMPATIBILITYJAMO}', "");
Expect(0, 12687, '\P{Is_Block=_ Hangul COMPATIBILITYJAMO}', "");
Expect(1, 12687, '\P{^Is_Block=_ Hangul COMPATIBILITYJAMO}', "");
Expect(0, 12591, '\p{Is_Block=_ Hangul COMPATIBILITYJAMO}', "");
Expect(1, 12591, '\p{^Is_Block=_ Hangul COMPATIBILITYJAMO}', "");
Expect(1, 12591, '\P{Is_Block=_ Hangul COMPATIBILITYJAMO}', "");
Expect(0, 12591, '\P{^Is_Block=_ Hangul COMPATIBILITYJAMO}', "");
Error('\p{Is_Blk:	_:=Hangul	Compatibility_Jamo}');
Error('\P{Is_Blk:	_:=Hangul	Compatibility_Jamo}');
Expect(1, 12687, '\p{Is_Blk=hangulcompatibilityjamo}', "");
Expect(0, 12687, '\p{^Is_Blk=hangulcompatibilityjamo}', "");
Expect(0, 12687, '\P{Is_Blk=hangulcompatibilityjamo}', "");
Expect(1, 12687, '\P{^Is_Blk=hangulcompatibilityjamo}', "");
Expect(0, 12591, '\p{Is_Blk=hangulcompatibilityjamo}', "");
Expect(1, 12591, '\p{^Is_Blk=hangulcompatibilityjamo}', "");
Expect(1, 12591, '\P{Is_Blk=hangulcompatibilityjamo}', "");
Expect(0, 12591, '\P{^Is_Blk=hangulcompatibilityjamo}', "");
Expect(1, 12687, '\p{Is_Blk=_HANGULCompatibility Jamo}', "");
Expect(0, 12687, '\p{^Is_Blk=_HANGULCompatibility Jamo}', "");
Expect(0, 12687, '\P{Is_Blk=_HANGULCompatibility Jamo}', "");
Expect(1, 12687, '\P{^Is_Blk=_HANGULCompatibility Jamo}', "");
Expect(0, 12591, '\p{Is_Blk=_HANGULCompatibility Jamo}', "");
Expect(1, 12591, '\p{^Is_Blk=_HANGULCompatibility Jamo}', "");
Expect(1, 12591, '\P{Is_Blk=_HANGULCompatibility Jamo}', "");
Expect(0, 12591, '\P{^Is_Blk=_HANGULCompatibility Jamo}', "");
Error('\p{Block= 	old Persian:=}');
Error('\P{Block= 	old Persian:=}');
Expect(1, 66527, '\p{Block=oldpersian}', "");
Expect(0, 66527, '\p{^Block=oldpersian}', "");
Expect(0, 66527, '\P{Block=oldpersian}', "");
Expect(1, 66527, '\P{^Block=oldpersian}', "");
Expect(0, 66463, '\p{Block=oldpersian}', "");
Expect(1, 66463, '\p{^Block=oldpersian}', "");
Expect(1, 66463, '\P{Block=oldpersian}', "");
Expect(0, 66463, '\P{^Block=oldpersian}', "");
Expect(1, 66527, '\p{Block=-Old Persian}', "");
Expect(0, 66527, '\p{^Block=-Old Persian}', "");
Expect(0, 66527, '\P{Block=-Old Persian}', "");
Expect(1, 66527, '\P{^Block=-Old Persian}', "");
Expect(0, 66463, '\p{Block=-Old Persian}', "");
Expect(1, 66463, '\p{^Block=-Old Persian}', "");
Expect(1, 66463, '\P{Block=-Old Persian}', "");
Expect(0, 66463, '\P{^Block=-Old Persian}', "");
Error('\p{Blk=:=Oldpersian}');
Error('\P{Blk=:=Oldpersian}');
Expect(1, 66527, '\p{Blk=oldpersian}', "");
Expect(0, 66527, '\p{^Blk=oldpersian}', "");
Expect(0, 66527, '\P{Blk=oldpersian}', "");
Expect(1, 66527, '\P{^Blk=oldpersian}', "");
Expect(0, 66463, '\p{Blk=oldpersian}', "");
Expect(1, 66463, '\p{^Blk=oldpersian}', "");
Expect(1, 66463, '\P{Blk=oldpersian}', "");
Expect(0, 66463, '\P{^Blk=oldpersian}', "");
Expect(1, 66527, '\p{Blk=	 OLD	persian}', "");
Expect(0, 66527, '\p{^Blk=	 OLD	persian}', "");
Expect(0, 66527, '\P{Blk=	 OLD	persian}', "");
Expect(1, 66527, '\P{^Blk=	 OLD	persian}', "");
Expect(0, 66463, '\p{Blk=	 OLD	persian}', "");
Expect(1, 66463, '\p{^Blk=	 OLD	persian}', "");
Expect(1, 66463, '\P{Blk=	 OLD	persian}', "");
Expect(0, 66463, '\P{^Blk=	 OLD	persian}', "");
Error('\p{Is_Block= 	Old-Persian:=}');
Error('\P{Is_Block= 	Old-Persian:=}');
Expect(1, 66527, '\p{Is_Block=oldpersian}', "");
Expect(0, 66527, '\p{^Is_Block=oldpersian}', "");
Expect(0, 66527, '\P{Is_Block=oldpersian}', "");
Expect(1, 66527, '\P{^Is_Block=oldpersian}', "");
Expect(0, 66463, '\p{Is_Block=oldpersian}', "");
Expect(1, 66463, '\p{^Is_Block=oldpersian}', "");
Expect(1, 66463, '\P{Is_Block=oldpersian}', "");
Expect(0, 66463, '\P{^Is_Block=oldpersian}', "");
Expect(1, 66527, '\p{Is_Block=_old_persian}', "");
Expect(0, 66527, '\p{^Is_Block=_old_persian}', "");
Expect(0, 66527, '\P{Is_Block=_old_persian}', "");
Expect(1, 66527, '\P{^Is_Block=_old_persian}', "");
Expect(0, 66463, '\p{Is_Block=_old_persian}', "");
Expect(1, 66463, '\p{^Is_Block=_old_persian}', "");
Expect(1, 66463, '\P{Is_Block=_old_persian}', "");
Expect(0, 66463, '\P{^Is_Block=_old_persian}', "");
Error('\p{Is_Blk= _Old:=persian}');
Error('\P{Is_Blk= _Old:=persian}');
Expect(1, 66527, '\p{Is_Blk=oldpersian}', "");
Expect(0, 66527, '\p{^Is_Blk=oldpersian}', "");
Expect(0, 66527, '\P{Is_Blk=oldpersian}', "");
Expect(1, 66527, '\P{^Is_Blk=oldpersian}', "");
Expect(0, 66463, '\p{Is_Blk=oldpersian}', "");
Expect(1, 66463, '\p{^Is_Blk=oldpersian}', "");
Expect(1, 66463, '\P{Is_Blk=oldpersian}', "");
Expect(0, 66463, '\P{^Is_Blk=oldpersian}', "");
Expect(1, 66527, '\p{Is_Blk=	-OLD-persian}', "");
Expect(0, 66527, '\p{^Is_Blk=	-OLD-persian}', "");
Expect(0, 66527, '\P{Is_Blk=	-OLD-persian}', "");
Expect(1, 66527, '\P{^Is_Blk=	-OLD-persian}', "");
Expect(0, 66463, '\p{Is_Blk=	-OLD-persian}', "");
Expect(1, 66463, '\p{^Is_Blk=	-OLD-persian}', "");
Expect(1, 66463, '\P{Is_Blk=	-OLD-persian}', "");
Expect(0, 66463, '\P{^Is_Blk=	-OLD-persian}', "");
Error('\p{Block=	Modifier/a/Tone-LETTERS}');
Error('\P{Block=	Modifier/a/Tone-LETTERS}');
Expect(1, 42783, '\p{Block=modifiertoneletters}', "");
Expect(0, 42783, '\p{^Block=modifiertoneletters}', "");
Expect(0, 42783, '\P{Block=modifiertoneletters}', "");
Expect(1, 42783, '\P{^Block=modifiertoneletters}', "");
Expect(0, 42751, '\p{Block=modifiertoneletters}', "");
Expect(1, 42751, '\p{^Block=modifiertoneletters}', "");
Expect(1, 42751, '\P{Block=modifiertoneletters}', "");
Expect(0, 42751, '\P{^Block=modifiertoneletters}', "");
Expect(1, 42783, '\p{Block=	Modifier	Tone Letters}', "");
Expect(0, 42783, '\p{^Block=	Modifier	Tone Letters}', "");
Expect(0, 42783, '\P{Block=	Modifier	Tone Letters}', "");
Expect(1, 42783, '\P{^Block=	Modifier	Tone Letters}', "");
Expect(0, 42751, '\p{Block=	Modifier	Tone Letters}', "");
Expect(1, 42751, '\p{^Block=	Modifier	Tone Letters}', "");
Expect(1, 42751, '\P{Block=	Modifier	Tone Letters}', "");
Expect(0, 42751, '\P{^Block=	Modifier	Tone Letters}', "");
Error('\p{Blk= -modifier TONE	LETTERS/a/}');
Error('\P{Blk= -modifier TONE	LETTERS/a/}');
Expect(1, 42783, '\p{Blk=modifiertoneletters}', "");
Expect(0, 42783, '\p{^Blk=modifiertoneletters}', "");
Expect(0, 42783, '\P{Blk=modifiertoneletters}', "");
Expect(1, 42783, '\P{^Blk=modifiertoneletters}', "");
Expect(0, 42751, '\p{Blk=modifiertoneletters}', "");
Expect(1, 42751, '\p{^Blk=modifiertoneletters}', "");
Expect(1, 42751, '\P{Blk=modifiertoneletters}', "");
Expect(0, 42751, '\P{^Blk=modifiertoneletters}', "");
Expect(1, 42783, '\p{Blk=_	Modifier tone_letters}', "");
Expect(0, 42783, '\p{^Blk=_	Modifier tone_letters}', "");
Expect(0, 42783, '\P{Blk=_	Modifier tone_letters}', "");
Expect(1, 42783, '\P{^Blk=_	Modifier tone_letters}', "");
Expect(0, 42751, '\p{Blk=_	Modifier tone_letters}', "");
Expect(1, 42751, '\p{^Blk=_	Modifier tone_letters}', "");
Expect(1, 42751, '\P{Blk=_	Modifier tone_letters}', "");
Expect(0, 42751, '\P{^Blk=_	Modifier tone_letters}', "");
Error('\p{Is_Block=_modifier:=tone letters}');
Error('\P{Is_Block=_modifier:=tone letters}');
Expect(1, 42783, '\p{Is_Block: modifiertoneletters}', "");
Expect(0, 42783, '\p{^Is_Block: modifiertoneletters}', "");
Expect(0, 42783, '\P{Is_Block: modifiertoneletters}', "");
Expect(1, 42783, '\P{^Is_Block: modifiertoneletters}', "");
Expect(0, 42751, '\p{Is_Block: modifiertoneletters}', "");
Expect(1, 42751, '\p{^Is_Block: modifiertoneletters}', "");
Expect(1, 42751, '\P{Is_Block: modifiertoneletters}', "");
Expect(0, 42751, '\P{^Is_Block: modifiertoneletters}', "");
Expect(1, 42783, '\p{Is_Block=__MODIFIERTone-Letters}', "");
Expect(0, 42783, '\p{^Is_Block=__MODIFIERTone-Letters}', "");
Expect(0, 42783, '\P{Is_Block=__MODIFIERTone-Letters}', "");
Expect(1, 42783, '\P{^Is_Block=__MODIFIERTone-Letters}', "");
Expect(0, 42751, '\p{Is_Block=__MODIFIERTone-Letters}', "");
Expect(1, 42751, '\p{^Is_Block=__MODIFIERTone-Letters}', "");
Expect(1, 42751, '\P{Is_Block=__MODIFIERTone-Letters}', "");
Expect(0, 42751, '\P{^Is_Block=__MODIFIERTone-Letters}', "");
Error('\p{Is_Blk=		MODIFIER-TONE	Letters:=}');
Error('\P{Is_Blk=		MODIFIER-TONE	Letters:=}');
Expect(1, 42783, '\p{Is_Blk=modifiertoneletters}', "");
Expect(0, 42783, '\p{^Is_Blk=modifiertoneletters}', "");
Expect(0, 42783, '\P{Is_Blk=modifiertoneletters}', "");
Expect(1, 42783, '\P{^Is_Blk=modifiertoneletters}', "");
Expect(0, 42751, '\p{Is_Blk=modifiertoneletters}', "");
Expect(1, 42751, '\p{^Is_Blk=modifiertoneletters}', "");
Expect(1, 42751, '\P{Is_Blk=modifiertoneletters}', "");
Expect(0, 42751, '\P{^Is_Blk=modifiertoneletters}', "");
Expect(1, 42783, '\p{Is_Blk=		modifier_tone_Letters}', "");
Expect(0, 42783, '\p{^Is_Blk=		modifier_tone_Letters}', "");
Expect(0, 42783, '\P{Is_Blk=		modifier_tone_Letters}', "");
Expect(1, 42783, '\P{^Is_Blk=		modifier_tone_Letters}', "");
Expect(0, 42751, '\p{Is_Blk=		modifier_tone_Letters}', "");
Expect(1, 42751, '\p{^Is_Blk=		modifier_tone_Letters}', "");
Expect(1, 42751, '\P{Is_Blk=		modifier_tone_Letters}', "");
Expect(0, 42751, '\P{^Is_Blk=		modifier_tone_Letters}', "");
Error('\p{Block=/a/__ETHIOPIC_supplement}');
Error('\P{Block=/a/__ETHIOPIC_supplement}');
Expect(1, 5023, '\p{Block=ethiopicsupplement}', "");
Expect(0, 5023, '\p{^Block=ethiopicsupplement}', "");
Expect(0, 5023, '\P{Block=ethiopicsupplement}', "");
Expect(1, 5023, '\P{^Block=ethiopicsupplement}', "");
Expect(0, 4991, '\p{Block=ethiopicsupplement}', "");
Expect(1, 4991, '\p{^Block=ethiopicsupplement}', "");
Expect(1, 4991, '\P{Block=ethiopicsupplement}', "");
Expect(0, 4991, '\P{^Block=ethiopicsupplement}', "");
Expect(1, 5023, '\p{Block:			ethiopic-SUPPLEMENT}', "");
Expect(0, 5023, '\p{^Block:			ethiopic-SUPPLEMENT}', "");
Expect(0, 5023, '\P{Block:			ethiopic-SUPPLEMENT}', "");
Expect(1, 5023, '\P{^Block:			ethiopic-SUPPLEMENT}', "");
Expect(0, 4991, '\p{Block:			ethiopic-SUPPLEMENT}', "");
Expect(1, 4991, '\p{^Block:			ethiopic-SUPPLEMENT}', "");
Expect(1, 4991, '\P{Block:			ethiopic-SUPPLEMENT}', "");
Expect(0, 4991, '\P{^Block:			ethiopic-SUPPLEMENT}', "");
Error('\p{Blk=:=-Ethiopic-Supplement}');
Error('\P{Blk=:=-Ethiopic-Supplement}');
Expect(1, 5023, '\p{Blk=ethiopicsupplement}', "");
Expect(0, 5023, '\p{^Blk=ethiopicsupplement}', "");
Expect(0, 5023, '\P{Blk=ethiopicsupplement}', "");
Expect(1, 5023, '\P{^Blk=ethiopicsupplement}', "");
Expect(0, 4991, '\p{Blk=ethiopicsupplement}', "");
Expect(1, 4991, '\p{^Blk=ethiopicsupplement}', "");
Expect(1, 4991, '\P{Blk=ethiopicsupplement}', "");
Expect(0, 4991, '\P{^Blk=ethiopicsupplement}', "");
Expect(1, 5023, '\p{Blk=_ EthiopicSupplement}', "");
Expect(0, 5023, '\p{^Blk=_ EthiopicSupplement}', "");
Expect(0, 5023, '\P{Blk=_ EthiopicSupplement}', "");
Expect(1, 5023, '\P{^Blk=_ EthiopicSupplement}', "");
Expect(0, 4991, '\p{Blk=_ EthiopicSupplement}', "");
Expect(1, 4991, '\p{^Blk=_ EthiopicSupplement}', "");
Expect(1, 4991, '\P{Blk=_ EthiopicSupplement}', "");
Expect(0, 4991, '\P{^Blk=_ EthiopicSupplement}', "");
Error('\p{Is_Block=	-Ethiopic:=SUPPLEMENT}');
Error('\P{Is_Block=	-Ethiopic:=SUPPLEMENT}');
Expect(1, 5023, '\p{Is_Block=ethiopicsupplement}', "");
Expect(0, 5023, '\p{^Is_Block=ethiopicsupplement}', "");
Expect(0, 5023, '\P{Is_Block=ethiopicsupplement}', "");
Expect(1, 5023, '\P{^Is_Block=ethiopicsupplement}', "");
Expect(0, 4991, '\p{Is_Block=ethiopicsupplement}', "");
Expect(1, 4991, '\p{^Is_Block=ethiopicsupplement}', "");
Expect(1, 4991, '\P{Is_Block=ethiopicsupplement}', "");
Expect(0, 4991, '\P{^Is_Block=ethiopicsupplement}', "");
Expect(1, 5023, '\p{Is_Block:_ethiopic supplement}', "");
Expect(0, 5023, '\p{^Is_Block:_ethiopic supplement}', "");
Expect(0, 5023, '\P{Is_Block:_ethiopic supplement}', "");
Expect(1, 5023, '\P{^Is_Block:_ethiopic supplement}', "");
Expect(0, 4991, '\p{Is_Block:_ethiopic supplement}', "");
Expect(1, 4991, '\p{^Is_Block:_ethiopic supplement}', "");
Expect(1, 4991, '\P{Is_Block:_ethiopic supplement}', "");
Expect(0, 4991, '\P{^Is_Block:_ethiopic supplement}', "");
Error('\p{Is_Blk:	Ethiopic:=SUPPLEMENT}');
Error('\P{Is_Blk:	Ethiopic:=SUPPLEMENT}');
Expect(1, 5023, '\p{Is_Blk=ethiopicsupplement}', "");
Expect(0, 5023, '\p{^Is_Blk=ethiopicsupplement}', "");
Expect(0, 5023, '\P{Is_Blk=ethiopicsupplement}', "");
Expect(1, 5023, '\P{^Is_Blk=ethiopicsupplement}', "");
Expect(0, 4991, '\p{Is_Blk=ethiopicsupplement}', "");
Expect(1, 4991, '\p{^Is_Blk=ethiopicsupplement}', "");
Expect(1, 4991, '\P{Is_Blk=ethiopicsupplement}', "");
Expect(0, 4991, '\P{^Is_Blk=ethiopicsupplement}', "");
Expect(1, 5023, '\p{Is_Blk=_	ethiopic_Supplement}', "");
Expect(0, 5023, '\p{^Is_Blk=_	ethiopic_Supplement}', "");
Expect(0, 5023, '\P{Is_Blk=_	ethiopic_Supplement}', "");
Expect(1, 5023, '\P{^Is_Blk=_	ethiopic_Supplement}', "");
Expect(0, 4991, '\p{Is_Blk=_	ethiopic_Supplement}', "");
Expect(1, 4991, '\p{^Is_Blk=_	ethiopic_Supplement}', "");
Expect(1, 4991, '\P{Is_Blk=_	ethiopic_Supplement}', "");
Expect(0, 4991, '\P{^Is_Blk=_	ethiopic_Supplement}', "");
Error('\p{Block=	 Linear-b Syllabary:=}');
Error('\P{Block=	 Linear-b Syllabary:=}');
Expect(1, 65663, '\p{Block=linearbsyllabary}', "");
Expect(0, 65663, '\p{^Block=linearbsyllabary}', "");
Expect(0, 65663, '\P{Block=linearbsyllabary}', "");
Expect(1, 65663, '\P{^Block=linearbsyllabary}', "");
Expect(0, 1, '\p{Block=linearbsyllabary}', "");
Expect(1, 1, '\p{^Block=linearbsyllabary}', "");
Expect(1, 1, '\P{Block=linearbsyllabary}', "");
Expect(0, 1, '\P{^Block=linearbsyllabary}', "");
Expect(1, 65663, '\p{Block=-Linear-B_Syllabary}', "");
Expect(0, 65663, '\p{^Block=-Linear-B_Syllabary}', "");
Expect(0, 65663, '\P{Block=-Linear-B_Syllabary}', "");
Expect(1, 65663, '\P{^Block=-Linear-B_Syllabary}', "");
Expect(0, 1, '\p{Block=-Linear-B_Syllabary}', "");
Expect(1, 1, '\p{^Block=-Linear-B_Syllabary}', "");
Expect(1, 1, '\P{Block=-Linear-B_Syllabary}', "");
Expect(0, 1, '\P{^Block=-Linear-B_Syllabary}', "");
Error('\p{Blk=-Linear-B:=Syllabary}');
Error('\P{Blk=-Linear-B:=Syllabary}');
Expect(1, 65663, '\p{Blk=linearbsyllabary}', "");
Expect(0, 65663, '\p{^Blk=linearbsyllabary}', "");
Expect(0, 65663, '\P{Blk=linearbsyllabary}', "");
Expect(1, 65663, '\P{^Blk=linearbsyllabary}', "");
Expect(0, 1, '\p{Blk=linearbsyllabary}', "");
Expect(1, 1, '\p{^Blk=linearbsyllabary}', "");
Expect(1, 1, '\P{Blk=linearbsyllabary}', "");
Expect(0, 1, '\P{^Blk=linearbsyllabary}', "");
Expect(1, 65663, '\p{Blk=-Linear-B_syllabary}', "");
Expect(0, 65663, '\p{^Blk=-Linear-B_syllabary}', "");
Expect(0, 65663, '\P{Blk=-Linear-B_syllabary}', "");
Expect(1, 65663, '\P{^Blk=-Linear-B_syllabary}', "");
Expect(0, 1, '\p{Blk=-Linear-B_syllabary}', "");
Expect(1, 1, '\p{^Blk=-Linear-B_syllabary}', "");
Expect(1, 1, '\P{Blk=-Linear-B_syllabary}', "");
Expect(0, 1, '\P{^Blk=-Linear-B_syllabary}', "");
Error('\p{Is_Block=/a/		LinearB	syllabary}');
Error('\P{Is_Block=/a/		LinearB	syllabary}');
Expect(1, 65663, '\p{Is_Block=linearbsyllabary}', "");
Expect(0, 65663, '\p{^Is_Block=linearbsyllabary}', "");
Expect(0, 65663, '\P{Is_Block=linearbsyllabary}', "");
Expect(1, 65663, '\P{^Is_Block=linearbsyllabary}', "");
Expect(0, 1, '\p{Is_Block=linearbsyllabary}', "");
Expect(1, 1, '\p{^Is_Block=linearbsyllabary}', "");
Expect(1, 1, '\P{Is_Block=linearbsyllabary}', "");
Expect(0, 1, '\P{^Is_Block=linearbsyllabary}', "");
Expect(1, 65663, '\p{Is_Block=_ LINEAR B_SYLLABARY}', "");
Expect(0, 65663, '\p{^Is_Block=_ LINEAR B_SYLLABARY}', "");
Expect(0, 65663, '\P{Is_Block=_ LINEAR B_SYLLABARY}', "");
Expect(1, 65663, '\P{^Is_Block=_ LINEAR B_SYLLABARY}', "");
Expect(0, 1, '\p{Is_Block=_ LINEAR B_SYLLABARY}', "");
Expect(1, 1, '\p{^Is_Block=_ LINEAR B_SYLLABARY}', "");
Expect(1, 1, '\P{Is_Block=_ LINEAR B_SYLLABARY}', "");
Expect(0, 1, '\P{^Is_Block=_ LINEAR B_SYLLABARY}', "");
Error('\p{Is_Blk=_Linear-b_Syllabary/a/}');
Error('\P{Is_Blk=_Linear-b_Syllabary/a/}');
Expect(1, 65663, '\p{Is_Blk=linearbsyllabary}', "");
Expect(0, 65663, '\p{^Is_Blk=linearbsyllabary}', "");
Expect(0, 65663, '\P{Is_Blk=linearbsyllabary}', "");
Expect(1, 65663, '\P{^Is_Blk=linearbsyllabary}', "");
Expect(0, 1, '\p{Is_Blk=linearbsyllabary}', "");
Expect(1, 1, '\p{^Is_Blk=linearbsyllabary}', "");
Expect(1, 1, '\P{Is_Blk=linearbsyllabary}', "");
Expect(0, 1, '\P{^Is_Blk=linearbsyllabary}', "");
Expect(1, 65663, '\p{Is_Blk=	linear_BSyllabary}', "");
Expect(0, 65663, '\p{^Is_Blk=	linear_BSyllabary}', "");
Expect(0, 65663, '\P{Is_Blk=	linear_BSyllabary}', "");
Expect(1, 65663, '\P{^Is_Blk=	linear_BSyllabary}', "");
Expect(0, 1, '\p{Is_Blk=	linear_BSyllabary}', "");
Expect(1, 1, '\p{^Is_Blk=	linear_BSyllabary}', "");
Expect(1, 1, '\P{Is_Blk=	linear_BSyllabary}', "");
Expect(0, 1, '\P{^Is_Blk=	linear_BSyllabary}', "");
Error('\p{Block= /a/enclosed-cjk LETTERSAnd_MONTHS}');
Error('\P{Block= /a/enclosed-cjk LETTERSAnd_MONTHS}');
Expect(1, 13055, '\p{Block=enclosedcjklettersandmonths}', "");
Expect(0, 13055, '\p{^Block=enclosedcjklettersandmonths}', "");
Expect(0, 13055, '\P{Block=enclosedcjklettersandmonths}', "");
Expect(1, 13055, '\P{^Block=enclosedcjklettersandmonths}', "");
Expect(0, 12799, '\p{Block=enclosedcjklettersandmonths}', "");
Expect(1, 12799, '\p{^Block=enclosedcjklettersandmonths}', "");
Expect(1, 12799, '\P{Block=enclosedcjklettersandmonths}', "");
Expect(0, 12799, '\P{^Block=enclosedcjklettersandmonths}', "");
Expect(1, 13055, '\p{Block= 	ENCLOSEDCJK	Letters-and	MONTHS}', "");
Expect(0, 13055, '\p{^Block= 	ENCLOSEDCJK	Letters-and	MONTHS}', "");
Expect(0, 13055, '\P{Block= 	ENCLOSEDCJK	Letters-and	MONTHS}', "");
Expect(1, 13055, '\P{^Block= 	ENCLOSEDCJK	Letters-and	MONTHS}', "");
Expect(0, 12799, '\p{Block= 	ENCLOSEDCJK	Letters-and	MONTHS}', "");
Expect(1, 12799, '\p{^Block= 	ENCLOSEDCJK	Letters-and	MONTHS}', "");
Expect(1, 12799, '\P{Block= 	ENCLOSEDCJK	Letters-and	MONTHS}', "");
Expect(0, 12799, '\P{^Block= 	ENCLOSEDCJK	Letters-and	MONTHS}', "");
Error('\p{Blk=	ENCLOSEDCJK_Letters/a/And-MONTHS}');
Error('\P{Blk=	ENCLOSEDCJK_Letters/a/And-MONTHS}');
Expect(1, 13055, '\p{Blk=enclosedcjklettersandmonths}', "");
Expect(0, 13055, '\p{^Blk=enclosedcjklettersandmonths}', "");
Expect(0, 13055, '\P{Blk=enclosedcjklettersandmonths}', "");
Expect(1, 13055, '\P{^Blk=enclosedcjklettersandmonths}', "");
Expect(0, 12799, '\p{Blk=enclosedcjklettersandmonths}', "");
Expect(1, 12799, '\p{^Blk=enclosedcjklettersandmonths}', "");
Expect(1, 12799, '\P{Blk=enclosedcjklettersandmonths}', "");
Expect(0, 12799, '\P{^Blk=enclosedcjklettersandmonths}', "");
Expect(1, 13055, '\p{Blk=_ENCLOSED_CJK-LETTERS ANDmonths}', "");
Expect(0, 13055, '\p{^Blk=_ENCLOSED_CJK-LETTERS ANDmonths}', "");
Expect(0, 13055, '\P{Blk=_ENCLOSED_CJK-LETTERS ANDmonths}', "");
Expect(1, 13055, '\P{^Blk=_ENCLOSED_CJK-LETTERS ANDmonths}', "");
Expect(0, 12799, '\p{Blk=_ENCLOSED_CJK-LETTERS ANDmonths}', "");
Expect(1, 12799, '\p{^Blk=_ENCLOSED_CJK-LETTERS ANDmonths}', "");
Expect(1, 12799, '\P{Blk=_ENCLOSED_CJK-LETTERS ANDmonths}', "");
Expect(0, 12799, '\P{^Blk=_ENCLOSED_CJK-LETTERS ANDmonths}', "");
Error('\p{Is_Block= -ENCLOSED	CJKLETTERS AND:=MONTHS}');
Error('\P{Is_Block= -ENCLOSED	CJKLETTERS AND:=MONTHS}');
Expect(1, 13055, '\p{Is_Block=enclosedcjklettersandmonths}', "");
Expect(0, 13055, '\p{^Is_Block=enclosedcjklettersandmonths}', "");
Expect(0, 13055, '\P{Is_Block=enclosedcjklettersandmonths}', "");
Expect(1, 13055, '\P{^Is_Block=enclosedcjklettersandmonths}', "");
Expect(0, 12799, '\p{Is_Block=enclosedcjklettersandmonths}', "");
Expect(1, 12799, '\p{^Is_Block=enclosedcjklettersandmonths}', "");
Expect(1, 12799, '\P{Is_Block=enclosedcjklettersandmonths}', "");
Expect(0, 12799, '\P{^Is_Block=enclosedcjklettersandmonths}', "");
Expect(1, 13055, '\p{Is_Block=__enclosedCJK_Letters-and-Months}', "");
Expect(0, 13055, '\p{^Is_Block=__enclosedCJK_Letters-and-Months}', "");
Expect(0, 13055, '\P{Is_Block=__enclosedCJK_Letters-and-Months}', "");
Expect(1, 13055, '\P{^Is_Block=__enclosedCJK_Letters-and-Months}', "");
Expect(0, 12799, '\p{Is_Block=__enclosedCJK_Letters-and-Months}', "");
Expect(1, 12799, '\p{^Is_Block=__enclosedCJK_Letters-and-Months}', "");
Expect(1, 12799, '\P{Is_Block=__enclosedCJK_Letters-and-Months}', "");
Expect(0, 12799, '\P{^Is_Block=__enclosedCJK_Letters-and-Months}', "");
Error('\p{Is_Blk=_ENCLOSEDcjk Letters/a/ANDMONTHS}');
Error('\P{Is_Blk=_ENCLOSEDcjk Letters/a/ANDMONTHS}');
Expect(1, 13055, '\p{Is_Blk=enclosedcjklettersandmonths}', "");
Expect(0, 13055, '\p{^Is_Blk=enclosedcjklettersandmonths}', "");
Expect(0, 13055, '\P{Is_Blk=enclosedcjklettersandmonths}', "");
Expect(1, 13055, '\P{^Is_Blk=enclosedcjklettersandmonths}', "");
Expect(0, 12799, '\p{Is_Blk=enclosedcjklettersandmonths}', "");
Expect(1, 12799, '\p{^Is_Blk=enclosedcjklettersandmonths}', "");
Expect(1, 12799, '\P{Is_Blk=enclosedcjklettersandmonths}', "");
Expect(0, 12799, '\P{^Is_Blk=enclosedcjklettersandmonths}', "");
Expect(1, 13055, '\p{Is_Blk= 	ENCLOSED cjk	LETTERS And_Months}', "");
Expect(0, 13055, '\p{^Is_Blk= 	ENCLOSED cjk	LETTERS And_Months}', "");
Expect(0, 13055, '\P{Is_Blk= 	ENCLOSED cjk	LETTERS And_Months}', "");
Expect(1, 13055, '\P{^Is_Blk= 	ENCLOSED cjk	LETTERS And_Months}', "");
Expect(0, 12799, '\p{Is_Blk= 	ENCLOSED cjk	LETTERS And_Months}', "");
Expect(1, 12799, '\p{^Is_Blk= 	ENCLOSED cjk	LETTERS And_Months}', "");
Expect(1, 12799, '\P{Is_Blk= 	ENCLOSED cjk	LETTERS And_Months}', "");
Expect(0, 12799, '\P{^Is_Blk= 	ENCLOSED cjk	LETTERS And_Months}', "");
Error('\p{Block=__Combining:=diacritical_marks-Supplement}');
Error('\P{Block=__Combining:=diacritical_marks-Supplement}');
Expect(1, 7679, '\p{Block=combiningdiacriticalmarkssupplement}', "");
Expect(0, 7679, '\p{^Block=combiningdiacriticalmarkssupplement}', "");
Expect(0, 7679, '\P{Block=combiningdiacriticalmarkssupplement}', "");
Expect(1, 7679, '\P{^Block=combiningdiacriticalmarkssupplement}', "");
Expect(0, 7615, '\p{Block=combiningdiacriticalmarkssupplement}', "");
Expect(1, 7615, '\p{^Block=combiningdiacriticalmarkssupplement}', "");
Expect(1, 7615, '\P{Block=combiningdiacriticalmarkssupplement}', "");
Expect(0, 7615, '\P{^Block=combiningdiacriticalmarkssupplement}', "");
Expect(1, 7679, '\p{Block=-_Combining Diacritical Marks_SUPPLEMENT}', "");
Expect(0, 7679, '\p{^Block=-_Combining Diacritical Marks_SUPPLEMENT}', "");
Expect(0, 7679, '\P{Block=-_Combining Diacritical Marks_SUPPLEMENT}', "");
Expect(1, 7679, '\P{^Block=-_Combining Diacritical Marks_SUPPLEMENT}', "");
Expect(0, 7615, '\p{Block=-_Combining Diacritical Marks_SUPPLEMENT}', "");
Expect(1, 7615, '\p{^Block=-_Combining Diacritical Marks_SUPPLEMENT}', "");
Expect(1, 7615, '\P{Block=-_Combining Diacritical Marks_SUPPLEMENT}', "");
Expect(0, 7615, '\P{^Block=-_Combining Diacritical Marks_SUPPLEMENT}', "");
Error('\p{Blk=_ Combining-Diacritical/a/Marks_Supplement}');
Error('\P{Blk=_ Combining-Diacritical/a/Marks_Supplement}');
Expect(1, 7679, '\p{Blk=combiningdiacriticalmarkssupplement}', "");
Expect(0, 7679, '\p{^Blk=combiningdiacriticalmarkssupplement}', "");
Expect(0, 7679, '\P{Blk=combiningdiacriticalmarkssupplement}', "");
Expect(1, 7679, '\P{^Blk=combiningdiacriticalmarkssupplement}', "");
Expect(0, 7615, '\p{Blk=combiningdiacriticalmarkssupplement}', "");
Expect(1, 7615, '\p{^Blk=combiningdiacriticalmarkssupplement}', "");
Expect(1, 7615, '\P{Blk=combiningdiacriticalmarkssupplement}', "");
Expect(0, 7615, '\P{^Blk=combiningdiacriticalmarkssupplement}', "");
Expect(1, 7679, '\p{Blk=_combiningdiacriticalMARKS Supplement}', "");
Expect(0, 7679, '\p{^Blk=_combiningdiacriticalMARKS Supplement}', "");
Expect(0, 7679, '\P{Blk=_combiningdiacriticalMARKS Supplement}', "");
Expect(1, 7679, '\P{^Blk=_combiningdiacriticalMARKS Supplement}', "");
Expect(0, 7615, '\p{Blk=_combiningdiacriticalMARKS Supplement}', "");
Expect(1, 7615, '\p{^Blk=_combiningdiacriticalMARKS Supplement}', "");
Expect(1, 7615, '\P{Blk=_combiningdiacriticalMARKS Supplement}', "");
Expect(0, 7615, '\P{^Blk=_combiningdiacriticalMARKS Supplement}', "");
Error('\p{Is_Block:	 /a/combining_Diacritical_Marks supplement}');
Error('\P{Is_Block:	 /a/combining_Diacritical_Marks supplement}');
Expect(1, 7679, '\p{Is_Block=combiningdiacriticalmarkssupplement}', "");
Expect(0, 7679, '\p{^Is_Block=combiningdiacriticalmarkssupplement}', "");
Expect(0, 7679, '\P{Is_Block=combiningdiacriticalmarkssupplement}', "");
Expect(1, 7679, '\P{^Is_Block=combiningdiacriticalmarkssupplement}', "");
Expect(0, 7615, '\p{Is_Block=combiningdiacriticalmarkssupplement}', "");
Expect(1, 7615, '\p{^Is_Block=combiningdiacriticalmarkssupplement}', "");
Expect(1, 7615, '\P{Is_Block=combiningdiacriticalmarkssupplement}', "");
Expect(0, 7615, '\P{^Is_Block=combiningdiacriticalmarkssupplement}', "");
Expect(1, 7679, '\p{Is_Block=  Combining-diacriticalMARKS_Supplement}', "");
Expect(0, 7679, '\p{^Is_Block=  Combining-diacriticalMARKS_Supplement}', "");
Expect(0, 7679, '\P{Is_Block=  Combining-diacriticalMARKS_Supplement}', "");
Expect(1, 7679, '\P{^Is_Block=  Combining-diacriticalMARKS_Supplement}', "");
Expect(0, 7615, '\p{Is_Block=  Combining-diacriticalMARKS_Supplement}', "");
Expect(1, 7615, '\p{^Is_Block=  Combining-diacriticalMARKS_Supplement}', "");
Expect(1, 7615, '\P{Is_Block=  Combining-diacriticalMARKS_Supplement}', "");
Expect(0, 7615, '\P{^Is_Block=  Combining-diacriticalMARKS_Supplement}', "");
Error('\p{Is_Blk=_/a/COMBINING-diacritical_MARKS SUPPLEMENT}');
Error('\P{Is_Blk=_/a/COMBINING-diacritical_MARKS SUPPLEMENT}');
Expect(1, 7679, '\p{Is_Blk=combiningdiacriticalmarkssupplement}', "");
Expect(0, 7679, '\p{^Is_Blk=combiningdiacriticalmarkssupplement}', "");
Expect(0, 7679, '\P{Is_Blk=combiningdiacriticalmarkssupplement}', "");
Expect(1, 7679, '\P{^Is_Blk=combiningdiacriticalmarkssupplement}', "");
Expect(0, 7615, '\p{Is_Blk=combiningdiacriticalmarkssupplement}', "");
Expect(1, 7615, '\p{^Is_Blk=combiningdiacriticalmarkssupplement}', "");
Expect(1, 7615, '\P{Is_Blk=combiningdiacriticalmarkssupplement}', "");
Expect(0, 7615, '\P{^Is_Blk=combiningdiacriticalmarkssupplement}', "");
Expect(1, 7679, '\p{Is_Blk=		Combining DIACRITICALmarks supplement}', "");
Expect(0, 7679, '\p{^Is_Blk=		Combining DIACRITICALmarks supplement}', "");
Expect(0, 7679, '\P{Is_Blk=		Combining DIACRITICALmarks supplement}', "");
Expect(1, 7679, '\P{^Is_Blk=		Combining DIACRITICALmarks supplement}', "");
Expect(0, 7615, '\p{Is_Blk=		Combining DIACRITICALmarks supplement}', "");
Expect(1, 7615, '\p{^Is_Blk=		Combining DIACRITICALmarks supplement}', "");
Expect(1, 7615, '\P{Is_Blk=		Combining DIACRITICALmarks supplement}', "");
Expect(0, 7615, '\P{^Is_Blk=		Combining DIACRITICALmarks supplement}', "");
Error('\p{Block=-_Bopomofo:=}');
Error('\P{Block=-_Bopomofo:=}');
Expect(1, 12591, '\p{Block=bopomofo}', "");
Expect(0, 12591, '\p{^Block=bopomofo}', "");
Expect(0, 12591, '\P{Block=bopomofo}', "");
Expect(1, 12591, '\P{^Block=bopomofo}', "");
Expect(0, 12543, '\p{Block=bopomofo}', "");
Expect(1, 12543, '\p{^Block=bopomofo}', "");
Expect(1, 12543, '\P{Block=bopomofo}', "");
Expect(0, 12543, '\P{^Block=bopomofo}', "");
Expect(1, 12591, '\p{Block=	-BOPOMOFO}', "");
Expect(0, 12591, '\p{^Block=	-BOPOMOFO}', "");
Expect(0, 12591, '\P{Block=	-BOPOMOFO}', "");
Expect(1, 12591, '\P{^Block=	-BOPOMOFO}', "");
Expect(0, 12543, '\p{Block=	-BOPOMOFO}', "");
Expect(1, 12543, '\p{^Block=	-BOPOMOFO}', "");
Expect(1, 12543, '\P{Block=	-BOPOMOFO}', "");
Expect(0, 12543, '\P{^Block=	-BOPOMOFO}', "");
Error('\p{Blk=-_Bopomofo:=}');
Error('\P{Blk=-_Bopomofo:=}');
Expect(1, 12591, '\p{Blk=bopomofo}', "");
Expect(0, 12591, '\p{^Blk=bopomofo}', "");
Expect(0, 12591, '\P{Blk=bopomofo}', "");
Expect(1, 12591, '\P{^Blk=bopomofo}', "");
Expect(0, 12543, '\p{Blk=bopomofo}', "");
Expect(1, 12543, '\p{^Blk=bopomofo}', "");
Expect(1, 12543, '\P{Blk=bopomofo}', "");
Expect(0, 12543, '\P{^Blk=bopomofo}', "");
Expect(1, 12591, '\p{Blk=-	Bopomofo}', "");
Expect(0, 12591, '\p{^Blk=-	Bopomofo}', "");
Expect(0, 12591, '\P{Blk=-	Bopomofo}', "");
Expect(1, 12591, '\P{^Blk=-	Bopomofo}', "");
Expect(0, 12543, '\p{Blk=-	Bopomofo}', "");
Expect(1, 12543, '\p{^Blk=-	Bopomofo}', "");
Expect(1, 12543, '\P{Blk=-	Bopomofo}', "");
Expect(0, 12543, '\P{^Blk=-	Bopomofo}', "");
Error('\p{Is_Block:	-Bopomofo:=}');
Error('\P{Is_Block:	-Bopomofo:=}');
Expect(1, 12591, '\p{Is_Block=bopomofo}', "");
Expect(0, 12591, '\p{^Is_Block=bopomofo}', "");
Expect(0, 12591, '\P{Is_Block=bopomofo}', "");
Expect(1, 12591, '\P{^Is_Block=bopomofo}', "");
Expect(0, 12543, '\p{Is_Block=bopomofo}', "");
Expect(1, 12543, '\p{^Is_Block=bopomofo}', "");
Expect(1, 12543, '\P{Is_Block=bopomofo}', "");
Expect(0, 12543, '\P{^Is_Block=bopomofo}', "");
Expect(1, 12591, '\p{Is_Block= _BOPOMOFO}', "");
Expect(0, 12591, '\p{^Is_Block= _BOPOMOFO}', "");
Expect(0, 12591, '\P{Is_Block= _BOPOMOFO}', "");
Expect(1, 12591, '\P{^Is_Block= _BOPOMOFO}', "");
Expect(0, 12543, '\p{Is_Block= _BOPOMOFO}', "");
Expect(1, 12543, '\p{^Is_Block= _BOPOMOFO}', "");
Expect(1, 12543, '\P{Is_Block= _BOPOMOFO}', "");
Expect(0, 12543, '\P{^Is_Block= _BOPOMOFO}', "");
Error('\p{Is_Blk::=- Bopomofo}');
Error('\P{Is_Blk::=- Bopomofo}');
Expect(1, 12591, '\p{Is_Blk=bopomofo}', "");
Expect(0, 12591, '\p{^Is_Blk=bopomofo}', "");
Expect(0, 12591, '\P{Is_Blk=bopomofo}', "");
Expect(1, 12591, '\P{^Is_Blk=bopomofo}', "");
Expect(0, 12543, '\p{Is_Blk=bopomofo}', "");
Expect(1, 12543, '\p{^Is_Blk=bopomofo}', "");
Expect(1, 12543, '\P{Is_Blk=bopomofo}', "");
Expect(0, 12543, '\P{^Is_Blk=bopomofo}', "");
Expect(1, 12591, '\p{Is_Blk=	 BOPOMOFO}', "");
Expect(0, 12591, '\p{^Is_Blk=	 BOPOMOFO}', "");
Expect(0, 12591, '\P{Is_Blk=	 BOPOMOFO}', "");
Expect(1, 12591, '\P{^Is_Blk=	 BOPOMOFO}', "");
Expect(0, 12543, '\p{Is_Blk=	 BOPOMOFO}', "");
Expect(1, 12543, '\p{^Is_Blk=	 BOPOMOFO}', "");
Expect(1, 12543, '\P{Is_Blk=	 BOPOMOFO}', "");
Expect(0, 12543, '\P{^Is_Blk=	 BOPOMOFO}', "");
Error('\p{Block= Miscellaneous:=technical}');
Error('\P{Block= Miscellaneous:=technical}');
Expect(1, 9215, '\p{Block=miscellaneoustechnical}', "");
Expect(0, 9215, '\p{^Block=miscellaneoustechnical}', "");
Expect(0, 9215, '\P{Block=miscellaneoustechnical}', "");
Expect(1, 9215, '\P{^Block=miscellaneoustechnical}', "");
Expect(0, 8959, '\p{Block=miscellaneoustechnical}', "");
Expect(1, 8959, '\p{^Block=miscellaneoustechnical}', "");
Expect(1, 8959, '\P{Block=miscellaneoustechnical}', "");
Expect(0, 8959, '\P{^Block=miscellaneoustechnical}', "");
Expect(1, 9215, '\p{Block= MiscellaneousTechnical}', "");
Expect(0, 9215, '\p{^Block= MiscellaneousTechnical}', "");
Expect(0, 9215, '\P{Block= MiscellaneousTechnical}', "");
Expect(1, 9215, '\P{^Block= MiscellaneousTechnical}', "");
Expect(0, 8959, '\p{Block= MiscellaneousTechnical}', "");
Expect(1, 8959, '\p{^Block= MiscellaneousTechnical}', "");
Expect(1, 8959, '\P{Block= MiscellaneousTechnical}', "");
Expect(0, 8959, '\P{^Block= MiscellaneousTechnical}', "");
Error('\p{Blk= _Miscellaneous_Technical:=}');
Error('\P{Blk= _Miscellaneous_Technical:=}');
Expect(1, 9215, '\p{Blk=miscellaneoustechnical}', "");
Expect(0, 9215, '\p{^Blk=miscellaneoustechnical}', "");
Expect(0, 9215, '\P{Blk=miscellaneoustechnical}', "");
Expect(1, 9215, '\P{^Blk=miscellaneoustechnical}', "");
Expect(0, 8959, '\p{Blk=miscellaneoustechnical}', "");
Expect(1, 8959, '\p{^Blk=miscellaneoustechnical}', "");
Expect(1, 8959, '\P{Blk=miscellaneoustechnical}', "");
Expect(0, 8959, '\P{^Blk=miscellaneoustechnical}', "");
Expect(1, 9215, '\p{Blk=	MISCELLANEOUS_Technical}', "");
Expect(0, 9215, '\p{^Blk=	MISCELLANEOUS_Technical}', "");
Expect(0, 9215, '\P{Blk=	MISCELLANEOUS_Technical}', "");
Expect(1, 9215, '\P{^Blk=	MISCELLANEOUS_Technical}', "");
Expect(0, 8959, '\p{Blk=	MISCELLANEOUS_Technical}', "");
Expect(1, 8959, '\p{^Blk=	MISCELLANEOUS_Technical}', "");
Expect(1, 8959, '\P{Blk=	MISCELLANEOUS_Technical}', "");
Expect(0, 8959, '\P{^Blk=	MISCELLANEOUS_Technical}', "");
Error('\p{Is_Block=		Miscellaneous_TECHNICAL:=}');
Error('\P{Is_Block=		Miscellaneous_TECHNICAL:=}');
Expect(1, 9215, '\p{Is_Block:   miscellaneoustechnical}', "");
Expect(0, 9215, '\p{^Is_Block:   miscellaneoustechnical}', "");
Expect(0, 9215, '\P{Is_Block:   miscellaneoustechnical}', "");
Expect(1, 9215, '\P{^Is_Block:   miscellaneoustechnical}', "");
Expect(0, 8959, '\p{Is_Block:   miscellaneoustechnical}', "");
Expect(1, 8959, '\p{^Is_Block:   miscellaneoustechnical}', "");
Expect(1, 8959, '\P{Is_Block:   miscellaneoustechnical}', "");
Expect(0, 8959, '\P{^Is_Block:   miscellaneoustechnical}', "");
Expect(1, 9215, '\p{Is_Block=_ Miscellaneous	technical}', "");
Expect(0, 9215, '\p{^Is_Block=_ Miscellaneous	technical}', "");
Expect(0, 9215, '\P{Is_Block=_ Miscellaneous	technical}', "");
Expect(1, 9215, '\P{^Is_Block=_ Miscellaneous	technical}', "");
Expect(0, 8959, '\p{Is_Block=_ Miscellaneous	technical}', "");
Expect(1, 8959, '\p{^Is_Block=_ Miscellaneous	technical}', "");
Expect(1, 8959, '\P{Is_Block=_ Miscellaneous	technical}', "");
Expect(0, 8959, '\P{^Is_Block=_ Miscellaneous	technical}', "");
Error('\p{Is_Blk=/a/Miscellaneous-technical}');
Error('\P{Is_Blk=/a/Miscellaneous-technical}');
Expect(1, 9215, '\p{Is_Blk: miscellaneoustechnical}', "");
Expect(0, 9215, '\p{^Is_Blk: miscellaneoustechnical}', "");
Expect(0, 9215, '\P{Is_Blk: miscellaneoustechnical}', "");
Expect(1, 9215, '\P{^Is_Blk: miscellaneoustechnical}', "");
Expect(0, 8959, '\p{Is_Blk: miscellaneoustechnical}', "");
Expect(1, 8959, '\p{^Is_Blk: miscellaneoustechnical}', "");
Expect(1, 8959, '\P{Is_Blk: miscellaneoustechnical}', "");
Expect(0, 8959, '\P{^Is_Blk: miscellaneoustechnical}', "");
Expect(1, 9215, '\p{Is_Blk=_-Miscellaneous Technical}', "");
Expect(0, 9215, '\p{^Is_Blk=_-Miscellaneous Technical}', "");
Expect(0, 9215, '\P{Is_Blk=_-Miscellaneous Technical}', "");
Expect(1, 9215, '\P{^Is_Blk=_-Miscellaneous Technical}', "");
Expect(0, 8959, '\p{Is_Blk=_-Miscellaneous Technical}', "");
Expect(1, 8959, '\p{^Is_Blk=_-Miscellaneous Technical}', "");
Expect(1, 8959, '\P{Is_Blk=_-Miscellaneous Technical}', "");
Expect(0, 8959, '\P{^Is_Blk=_-Miscellaneous Technical}', "");
Error('\p{Block=_:=Osmanya}');
Error('\P{Block=_:=Osmanya}');
Expect(1, 66735, '\p{Block=osmanya}', "");
Expect(0, 66735, '\p{^Block=osmanya}', "");
Expect(0, 66735, '\P{Block=osmanya}', "");
Expect(1, 66735, '\P{^Block=osmanya}', "");
Expect(0, 66687, '\p{Block=osmanya}', "");
Expect(1, 66687, '\p{^Block=osmanya}', "");
Expect(1, 66687, '\P{Block=osmanya}', "");
Expect(0, 66687, '\P{^Block=osmanya}', "");
Expect(1, 66735, '\p{Block= Osmanya}', "");
Expect(0, 66735, '\p{^Block= Osmanya}', "");
Expect(0, 66735, '\P{Block= Osmanya}', "");
Expect(1, 66735, '\P{^Block= Osmanya}', "");
Expect(0, 66687, '\p{Block= Osmanya}', "");
Expect(1, 66687, '\p{^Block= Osmanya}', "");
Expect(1, 66687, '\P{Block= Osmanya}', "");
Expect(0, 66687, '\P{^Block= Osmanya}', "");
Error('\p{Blk:   -_osmanya:=}');
Error('\P{Blk:   -_osmanya:=}');
Expect(1, 66735, '\p{Blk: osmanya}', "");
Expect(0, 66735, '\p{^Blk: osmanya}', "");
Expect(0, 66735, '\P{Blk: osmanya}', "");
Expect(1, 66735, '\P{^Blk: osmanya}', "");
Expect(0, 66687, '\p{Blk: osmanya}', "");
Expect(1, 66687, '\p{^Blk: osmanya}', "");
Expect(1, 66687, '\P{Blk: osmanya}', "");
Expect(0, 66687, '\P{^Blk: osmanya}', "");
Expect(1, 66735, '\p{Blk=_-Osmanya}', "");
Expect(0, 66735, '\p{^Blk=_-Osmanya}', "");
Expect(0, 66735, '\P{Blk=_-Osmanya}', "");
Expect(1, 66735, '\P{^Blk=_-Osmanya}', "");
Expect(0, 66687, '\p{Blk=_-Osmanya}', "");
Expect(1, 66687, '\p{^Blk=_-Osmanya}', "");
Expect(1, 66687, '\P{Blk=_-Osmanya}', "");
Expect(0, 66687, '\P{^Blk=_-Osmanya}', "");
Error('\p{Is_Block=:= _Osmanya}');
Error('\P{Is_Block=:= _Osmanya}');
Expect(1, 66735, '\p{Is_Block=osmanya}', "");
Expect(0, 66735, '\p{^Is_Block=osmanya}', "");
Expect(0, 66735, '\P{Is_Block=osmanya}', "");
Expect(1, 66735, '\P{^Is_Block=osmanya}', "");
Expect(0, 66687, '\p{Is_Block=osmanya}', "");
Expect(1, 66687, '\p{^Is_Block=osmanya}', "");
Expect(1, 66687, '\P{Is_Block=osmanya}', "");
Expect(0, 66687, '\P{^Is_Block=osmanya}', "");
Expect(1, 66735, '\p{Is_Block=_osmanya}', "");
Expect(0, 66735, '\p{^Is_Block=_osmanya}', "");
Expect(0, 66735, '\P{Is_Block=_osmanya}', "");
Expect(1, 66735, '\P{^Is_Block=_osmanya}', "");
Expect(0, 66687, '\p{Is_Block=_osmanya}', "");
Expect(1, 66687, '\p{^Is_Block=_osmanya}', "");
Expect(1, 66687, '\P{Is_Block=_osmanya}', "");
Expect(0, 66687, '\P{^Is_Block=_osmanya}', "");
Error('\p{Is_Blk=OSMANYA/a/}');
Error('\P{Is_Blk=OSMANYA/a/}');
Expect(1, 66735, '\p{Is_Blk=osmanya}', "");
Expect(0, 66735, '\p{^Is_Blk=osmanya}', "");
Expect(0, 66735, '\P{Is_Blk=osmanya}', "");
Expect(1, 66735, '\P{^Is_Blk=osmanya}', "");
Expect(0, 66687, '\p{Is_Blk=osmanya}', "");
Expect(1, 66687, '\p{^Is_Blk=osmanya}', "");
Expect(1, 66687, '\P{Is_Blk=osmanya}', "");
Expect(0, 66687, '\P{^Is_Blk=osmanya}', "");
Expect(1, 66735, '\p{Is_Blk=_	Osmanya}', "");
Expect(0, 66735, '\p{^Is_Blk=_	Osmanya}', "");
Expect(0, 66735, '\P{Is_Blk=_	Osmanya}', "");
Expect(1, 66735, '\P{^Is_Blk=_	Osmanya}', "");
Expect(0, 66687, '\p{Is_Blk=_	Osmanya}', "");
Expect(1, 66687, '\p{^Is_Blk=_	Osmanya}', "");
Expect(1, 66687, '\P{Is_Blk=_	Osmanya}', "");
Expect(0, 66687, '\P{^Is_Blk=_	Osmanya}', "");
Error('\p{Block=-Mahjong Tiles:=}');
Error('\P{Block=-Mahjong Tiles:=}');
Expect(1, 127023, '\p{Block=mahjongtiles}', "");
Expect(0, 127023, '\p{^Block=mahjongtiles}', "");
Expect(0, 127023, '\P{Block=mahjongtiles}', "");
Expect(1, 127023, '\P{^Block=mahjongtiles}', "");
Expect(0, 126975, '\p{Block=mahjongtiles}', "");
Expect(1, 126975, '\p{^Block=mahjongtiles}', "");
Expect(1, 126975, '\P{Block=mahjongtiles}', "");
Expect(0, 126975, '\P{^Block=mahjongtiles}', "");
Expect(1, 127023, '\p{Block=_-Mahjong-tiles}', "");
Expect(0, 127023, '\p{^Block=_-Mahjong-tiles}', "");
Expect(0, 127023, '\P{Block=_-Mahjong-tiles}', "");
Expect(1, 127023, '\P{^Block=_-Mahjong-tiles}', "");
Expect(0, 126975, '\p{Block=_-Mahjong-tiles}', "");
Expect(1, 126975, '\p{^Block=_-Mahjong-tiles}', "");
Expect(1, 126975, '\P{Block=_-Mahjong-tiles}', "");
Expect(0, 126975, '\P{^Block=_-Mahjong-tiles}', "");
Error('\p{Blk=-_MAHJONG:=tiles}');
Error('\P{Blk=-_MAHJONG:=tiles}');
Expect(1, 127023, '\p{Blk=mahjongtiles}', "");
Expect(0, 127023, '\p{^Blk=mahjongtiles}', "");
Expect(0, 127023, '\P{Blk=mahjongtiles}', "");
Expect(1, 127023, '\P{^Blk=mahjongtiles}', "");
Expect(0, 126975, '\p{Blk=mahjongtiles}', "");
Expect(1, 126975, '\p{^Blk=mahjongtiles}', "");
Expect(1, 126975, '\P{Blk=mahjongtiles}', "");
Expect(0, 126975, '\P{^Blk=mahjongtiles}', "");
Expect(1, 127023, '\p{Blk=- mahjongtiles}', "");
Expect(0, 127023, '\p{^Blk=- mahjongtiles}', "");
Expect(0, 127023, '\P{Blk=- mahjongtiles}', "");
Expect(1, 127023, '\P{^Blk=- mahjongtiles}', "");
Expect(0, 126975, '\p{Blk=- mahjongtiles}', "");
Expect(1, 126975, '\p{^Blk=- mahjongtiles}', "");
Expect(1, 126975, '\P{Blk=- mahjongtiles}', "");
Expect(0, 126975, '\P{^Blk=- mahjongtiles}', "");
Error('\p{Is_Block=	/a/mahjong-tiles}');
Error('\P{Is_Block=	/a/mahjong-tiles}');
Expect(1, 127023, '\p{Is_Block:mahjongtiles}', "");
Expect(0, 127023, '\p{^Is_Block:mahjongtiles}', "");
Expect(0, 127023, '\P{Is_Block:mahjongtiles}', "");
Expect(1, 127023, '\P{^Is_Block:mahjongtiles}', "");
Expect(0, 126975, '\p{Is_Block:mahjongtiles}', "");
Expect(1, 126975, '\p{^Is_Block:mahjongtiles}', "");
Expect(1, 126975, '\P{Is_Block:mahjongtiles}', "");
Expect(0, 126975, '\P{^Is_Block:mahjongtiles}', "");
Expect(1, 127023, '\p{Is_Block=	MAHJONGTiles}', "");
Expect(0, 127023, '\p{^Is_Block=	MAHJONGTiles}', "");
Expect(0, 127023, '\P{Is_Block=	MAHJONGTiles}', "");
Expect(1, 127023, '\P{^Is_Block=	MAHJONGTiles}', "");
Expect(0, 126975, '\p{Is_Block=	MAHJONGTiles}', "");
Expect(1, 126975, '\p{^Is_Block=	MAHJONGTiles}', "");
Expect(1, 126975, '\P{Is_Block=	MAHJONGTiles}', "");
Expect(0, 126975, '\P{^Is_Block=	MAHJONGTiles}', "");
Error('\p{Is_Blk=:=_ Mahjong_Tiles}');
Error('\P{Is_Blk=:=_ Mahjong_Tiles}');
Expect(1, 127023, '\p{Is_Blk=mahjongtiles}', "");
Expect(0, 127023, '\p{^Is_Blk=mahjongtiles}', "");
Expect(0, 127023, '\P{Is_Blk=mahjongtiles}', "");
Expect(1, 127023, '\P{^Is_Blk=mahjongtiles}', "");
Expect(0, 126975, '\p{Is_Blk=mahjongtiles}', "");
Expect(1, 126975, '\p{^Is_Blk=mahjongtiles}', "");
Expect(1, 126975, '\P{Is_Blk=mahjongtiles}', "");
Expect(0, 126975, '\P{^Is_Blk=mahjongtiles}', "");
Expect(1, 127023, '\p{Is_Blk= _Mahjong	Tiles}', "");
Expect(0, 127023, '\p{^Is_Blk= _Mahjong	Tiles}', "");
Expect(0, 127023, '\P{Is_Blk= _Mahjong	Tiles}', "");
Expect(1, 127023, '\P{^Is_Blk= _Mahjong	Tiles}', "");
Expect(0, 126975, '\p{Is_Blk= _Mahjong	Tiles}', "");
Expect(1, 126975, '\p{^Is_Blk= _Mahjong	Tiles}', "");
Expect(1, 126975, '\P{Is_Blk= _Mahjong	Tiles}', "");
Expect(0, 126975, '\P{^Is_Blk= _Mahjong	Tiles}', "");
Error('\p{Block=-arrows/a/}');
Error('\P{Block=-arrows/a/}');
Expect(1, 8703, '\p{Block=arrows}', "");
Expect(0, 8703, '\p{^Block=arrows}', "");
Expect(0, 8703, '\P{Block=arrows}', "");
Expect(1, 8703, '\P{^Block=arrows}', "");
Expect(0, 8591, '\p{Block=arrows}', "");
Expect(1, 8591, '\p{^Block=arrows}', "");
Expect(1, 8591, '\P{Block=arrows}', "");
Expect(0, 8591, '\P{^Block=arrows}', "");
Expect(1, 8703, '\p{Block=--Arrows}', "");
Expect(0, 8703, '\p{^Block=--Arrows}', "");
Expect(0, 8703, '\P{Block=--Arrows}', "");
Expect(1, 8703, '\P{^Block=--Arrows}', "");
Expect(0, 8591, '\p{Block=--Arrows}', "");
Expect(1, 8591, '\p{^Block=--Arrows}', "");
Expect(1, 8591, '\P{Block=--Arrows}', "");
Expect(0, 8591, '\P{^Block=--Arrows}', "");
Error('\p{Blk=	 Arrows/a/}');
Error('\P{Blk=	 Arrows/a/}');
Expect(1, 8703, '\p{Blk=arrows}', "");
Expect(0, 8703, '\p{^Blk=arrows}', "");
Expect(0, 8703, '\P{Blk=arrows}', "");
Expect(1, 8703, '\P{^Blk=arrows}', "");
Expect(0, 8591, '\p{Blk=arrows}', "");
Expect(1, 8591, '\p{^Blk=arrows}', "");
Expect(1, 8591, '\P{Blk=arrows}', "");
Expect(0, 8591, '\P{^Blk=arrows}', "");
Expect(1, 8703, '\p{Blk:  Arrows}', "");
Expect(0, 8703, '\p{^Blk:  Arrows}', "");
Expect(0, 8703, '\P{Blk:  Arrows}', "");
Expect(1, 8703, '\P{^Blk:  Arrows}', "");
Expect(0, 8591, '\p{Blk:  Arrows}', "");
Expect(1, 8591, '\p{^Blk:  Arrows}', "");
Expect(1, 8591, '\P{Blk:  Arrows}', "");
Expect(0, 8591, '\P{^Blk:  Arrows}', "");
Error('\p{Is_Block= -arrows/a/}');
Error('\P{Is_Block= -arrows/a/}');
Expect(1, 8703, '\p{Is_Block=arrows}', "");
Expect(0, 8703, '\p{^Is_Block=arrows}', "");
Expect(0, 8703, '\P{Is_Block=arrows}', "");
Expect(1, 8703, '\P{^Is_Block=arrows}', "");
Expect(0, 8591, '\p{Is_Block=arrows}', "");
Expect(1, 8591, '\p{^Is_Block=arrows}', "");
Expect(1, 8591, '\P{Is_Block=arrows}', "");
Expect(0, 8591, '\P{^Is_Block=arrows}', "");
Expect(1, 8703, '\p{Is_Block=	_Arrows}', "");
Expect(0, 8703, '\p{^Is_Block=	_Arrows}', "");
Expect(0, 8703, '\P{Is_Block=	_Arrows}', "");
Expect(1, 8703, '\P{^Is_Block=	_Arrows}', "");
Expect(0, 8591, '\p{Is_Block=	_Arrows}', "");
Expect(1, 8591, '\p{^Is_Block=	_Arrows}', "");
Expect(1, 8591, '\P{Is_Block=	_Arrows}', "");
Expect(0, 8591, '\P{^Is_Block=	_Arrows}', "");
Error('\p{Is_Blk=_:=Arrows}');
Error('\P{Is_Blk=_:=Arrows}');
Expect(1, 8703, '\p{Is_Blk=arrows}', "");
Expect(0, 8703, '\p{^Is_Blk=arrows}', "");
Expect(0, 8703, '\P{Is_Blk=arrows}', "");
Expect(1, 8703, '\P{^Is_Blk=arrows}', "");
Expect(0, 8591, '\p{Is_Blk=arrows}', "");
Expect(1, 8591, '\p{^Is_Blk=arrows}', "");
Expect(1, 8591, '\P{Is_Blk=arrows}', "");
Expect(0, 8591, '\P{^Is_Blk=arrows}', "");
Expect(1, 8703, '\p{Is_Blk=-_ARROWS}', "");
Expect(0, 8703, '\p{^Is_Blk=-_ARROWS}', "");
Expect(0, 8703, '\P{Is_Blk=-_ARROWS}', "");
Expect(1, 8703, '\P{^Is_Blk=-_ARROWS}', "");
Expect(0, 8591, '\p{Is_Blk=-_ARROWS}', "");
Expect(1, 8591, '\p{^Is_Blk=-_ARROWS}', "");
Expect(1, 8591, '\P{Is_Blk=-_ARROWS}', "");
Expect(0, 8591, '\P{^Is_Blk=-_ARROWS}', "");
Error('\p{Block=	:=Block Elements}');
Error('\P{Block=	:=Block Elements}');
Expect(1, 9631, '\p{Block=blockelements}', "");
Expect(0, 9631, '\p{^Block=blockelements}', "");
Expect(0, 9631, '\P{Block=blockelements}', "");
Expect(1, 9631, '\P{^Block=blockelements}', "");
Expect(0, 9599, '\p{Block=blockelements}', "");
Expect(1, 9599, '\p{^Block=blockelements}', "");
Expect(1, 9599, '\P{Block=blockelements}', "");
Expect(0, 9599, '\P{^Block=blockelements}', "");
Expect(1, 9631, '\p{Block=_-Block-Elements}', "");
Expect(0, 9631, '\p{^Block=_-Block-Elements}', "");
Expect(0, 9631, '\P{Block=_-Block-Elements}', "");
Expect(1, 9631, '\P{^Block=_-Block-Elements}', "");
Expect(0, 9599, '\p{Block=_-Block-Elements}', "");
Expect(1, 9599, '\p{^Block=_-Block-Elements}', "");
Expect(1, 9599, '\P{Block=_-Block-Elements}', "");
Expect(0, 9599, '\P{^Block=_-Block-Elements}', "");
Error('\p{Blk=/a/		BLOCK	elements}');
Error('\P{Blk=/a/		BLOCK	elements}');
Expect(1, 9631, '\p{Blk:	blockelements}', "");
Expect(0, 9631, '\p{^Blk:	blockelements}', "");
Expect(0, 9631, '\P{Blk:	blockelements}', "");
Expect(1, 9631, '\P{^Blk:	blockelements}', "");
Expect(0, 9599, '\p{Blk:	blockelements}', "");
Expect(1, 9599, '\p{^Blk:	blockelements}', "");
Expect(1, 9599, '\P{Blk:	blockelements}', "");
Expect(0, 9599, '\P{^Blk:	blockelements}', "");
Expect(1, 9631, '\p{Blk= _Block-Elements}', "");
Expect(0, 9631, '\p{^Blk= _Block-Elements}', "");
Expect(0, 9631, '\P{Blk= _Block-Elements}', "");
Expect(1, 9631, '\P{^Blk= _Block-Elements}', "");
Expect(0, 9599, '\p{Blk= _Block-Elements}', "");
Expect(1, 9599, '\p{^Blk= _Block-Elements}', "");
Expect(1, 9599, '\P{Blk= _Block-Elements}', "");
Expect(0, 9599, '\P{^Blk= _Block-Elements}', "");
Error('\p{Is_Block=/a/_ BLOCK Elements}');
Error('\P{Is_Block=/a/_ BLOCK Elements}');
Expect(1, 9631, '\p{Is_Block=blockelements}', "");
Expect(0, 9631, '\p{^Is_Block=blockelements}', "");
Expect(0, 9631, '\P{Is_Block=blockelements}', "");
Expect(1, 9631, '\P{^Is_Block=blockelements}', "");
Expect(0, 9599, '\p{Is_Block=blockelements}', "");
Expect(1, 9599, '\p{^Is_Block=blockelements}', "");
Expect(1, 9599, '\P{Is_Block=blockelements}', "");
Expect(0, 9599, '\P{^Is_Block=blockelements}', "");
Expect(1, 9631, '\p{Is_Block: -_BLOCKelements}', "");
Expect(0, 9631, '\p{^Is_Block: -_BLOCKelements}', "");
Expect(0, 9631, '\P{Is_Block: -_BLOCKelements}', "");
Expect(1, 9631, '\P{^Is_Block: -_BLOCKelements}', "");
Expect(0, 9599, '\p{Is_Block: -_BLOCKelements}', "");
Expect(1, 9599, '\p{^Is_Block: -_BLOCKelements}', "");
Expect(1, 9599, '\P{Is_Block: -_BLOCKelements}', "");
Expect(0, 9599, '\P{^Is_Block: -_BLOCKelements}', "");
Error('\p{Is_Blk=- block:=elements}');
Error('\P{Is_Blk=- block:=elements}');
Expect(1, 9631, '\p{Is_Blk=blockelements}', "");
Expect(0, 9631, '\p{^Is_Blk=blockelements}', "");
Expect(0, 9631, '\P{Is_Blk=blockelements}', "");
Expect(1, 9631, '\P{^Is_Blk=blockelements}', "");
Expect(0, 9599, '\p{Is_Blk=blockelements}', "");
Expect(1, 9599, '\p{^Is_Blk=blockelements}', "");
Expect(1, 9599, '\P{Is_Blk=blockelements}', "");
Expect(0, 9599, '\P{^Is_Blk=blockelements}', "");
Expect(1, 9631, '\p{Is_Blk=-_block ELEMENTS}', "");
Expect(0, 9631, '\p{^Is_Blk=-_block ELEMENTS}', "");
Expect(0, 9631, '\P{Is_Blk=-_block ELEMENTS}', "");
Expect(1, 9631, '\P{^Is_Blk=-_block ELEMENTS}', "");
Expect(0, 9599, '\p{Is_Blk=-_block ELEMENTS}', "");
Expect(1, 9599, '\p{^Is_Blk=-_block ELEMENTS}', "");
Expect(1, 9599, '\P{Is_Blk=-_block ELEMENTS}', "");
Expect(0, 9599, '\P{^Is_Blk=-_block ELEMENTS}', "");
Error('\p{Block=:=		CJKstrokes}');
Error('\P{Block=:=		CJKstrokes}');
Expect(1, 12783, '\p{Block=cjkstrokes}', "");
Expect(0, 12783, '\p{^Block=cjkstrokes}', "");
Expect(0, 12783, '\P{Block=cjkstrokes}', "");
Expect(1, 12783, '\P{^Block=cjkstrokes}', "");
Expect(0, 12735, '\p{Block=cjkstrokes}', "");
Expect(1, 12735, '\p{^Block=cjkstrokes}', "");
Expect(1, 12735, '\P{Block=cjkstrokes}', "");
Expect(0, 12735, '\P{^Block=cjkstrokes}', "");
Expect(1, 12783, '\p{Block= CJKSTROKES}', "");
Expect(0, 12783, '\p{^Block= CJKSTROKES}', "");
Expect(0, 12783, '\P{Block= CJKSTROKES}', "");
Expect(1, 12783, '\P{^Block= CJKSTROKES}', "");
Expect(0, 12735, '\p{Block= CJKSTROKES}', "");
Expect(1, 12735, '\p{^Block= CJKSTROKES}', "");
Expect(1, 12735, '\P{Block= CJKSTROKES}', "");
Expect(0, 12735, '\P{^Block= CJKSTROKES}', "");
Error('\p{Blk=_CJK:=STROKES}');
Error('\P{Blk=_CJK:=STROKES}');
Expect(1, 12783, '\p{Blk=cjkstrokes}', "");
Expect(0, 12783, '\p{^Blk=cjkstrokes}', "");
Expect(0, 12783, '\P{Blk=cjkstrokes}', "");
Expect(1, 12783, '\P{^Blk=cjkstrokes}', "");
Expect(0, 12735, '\p{Blk=cjkstrokes}', "");
Expect(1, 12735, '\p{^Blk=cjkstrokes}', "");
Expect(1, 12735, '\P{Blk=cjkstrokes}', "");
Expect(0, 12735, '\P{^Blk=cjkstrokes}', "");
Expect(1, 12783, '\p{Blk=	-cjkSTROKES}', "");
Expect(0, 12783, '\p{^Blk=	-cjkSTROKES}', "");
Expect(0, 12783, '\P{Blk=	-cjkSTROKES}', "");
Expect(1, 12783, '\P{^Blk=	-cjkSTROKES}', "");
Expect(0, 12735, '\p{Blk=	-cjkSTROKES}', "");
Expect(1, 12735, '\p{^Blk=	-cjkSTROKES}', "");
Expect(1, 12735, '\P{Blk=	-cjkSTROKES}', "");
Expect(0, 12735, '\P{^Blk=	-cjkSTROKES}', "");
Error('\p{Is_Block=_ CJK_Strokes:=}');
Error('\P{Is_Block=_ CJK_Strokes:=}');
Expect(1, 12783, '\p{Is_Block=cjkstrokes}', "");
Expect(0, 12783, '\p{^Is_Block=cjkstrokes}', "");
Expect(0, 12783, '\P{Is_Block=cjkstrokes}', "");
Expect(1, 12783, '\P{^Is_Block=cjkstrokes}', "");
Expect(0, 12735, '\p{Is_Block=cjkstrokes}', "");
Expect(1, 12735, '\p{^Is_Block=cjkstrokes}', "");
Expect(1, 12735, '\P{Is_Block=cjkstrokes}', "");
Expect(0, 12735, '\P{^Is_Block=cjkstrokes}', "");
Expect(1, 12783, '\p{Is_Block= CJK	Strokes}', "");
Expect(0, 12783, '\p{^Is_Block= CJK	Strokes}', "");
Expect(0, 12783, '\P{Is_Block= CJK	Strokes}', "");
Expect(1, 12783, '\P{^Is_Block= CJK	Strokes}', "");
Expect(0, 12735, '\p{Is_Block= CJK	Strokes}', "");
Expect(1, 12735, '\p{^Is_Block= CJK	Strokes}', "");
Expect(1, 12735, '\P{Is_Block= CJK	Strokes}', "");
Expect(0, 12735, '\P{^Is_Block= CJK	Strokes}', "");
Error('\p{Is_Blk=_/a/CJK_STROKES}');
Error('\P{Is_Blk=_/a/CJK_STROKES}');
Expect(1, 12783, '\p{Is_Blk=cjkstrokes}', "");
Expect(0, 12783, '\p{^Is_Blk=cjkstrokes}', "");
Expect(0, 12783, '\P{Is_Blk=cjkstrokes}', "");
Expect(1, 12783, '\P{^Is_Blk=cjkstrokes}', "");
Expect(0, 12735, '\p{Is_Blk=cjkstrokes}', "");
Expect(1, 12735, '\p{^Is_Blk=cjkstrokes}', "");
Expect(1, 12735, '\P{Is_Blk=cjkstrokes}', "");
Expect(0, 12735, '\P{^Is_Blk=cjkstrokes}', "");
Expect(1, 12783, '\p{Is_Blk=_	CJKstrokes}', "");
Expect(0, 12783, '\p{^Is_Blk=_	CJKstrokes}', "");
Expect(0, 12783, '\P{Is_Blk=_	CJKstrokes}', "");
Expect(1, 12783, '\P{^Is_Blk=_	CJKstrokes}', "");
Expect(0, 12735, '\p{Is_Blk=_	CJKstrokes}', "");
Expect(1, 12735, '\p{^Is_Blk=_	CJKstrokes}', "");
Expect(1, 12735, '\P{Is_Blk=_	CJKstrokes}', "");
Expect(0, 12735, '\P{^Is_Blk=_	CJKstrokes}', "");
Error('\p{Block=- noBlock:=}');
Error('\P{Block=- noBlock:=}');
Expect(1, 2303, '\p{Block=noblock}', "");
Expect(0, 2303, '\p{^Block=noblock}', "");
Expect(0, 2303, '\P{Block=noblock}', "");
Expect(1, 2303, '\P{^Block=noblock}', "");
Expect(0, 2143, '\p{Block=noblock}', "");
Expect(1, 2143, '\p{^Block=noblock}', "");
Expect(1, 2143, '\P{Block=noblock}', "");
Expect(0, 2143, '\P{^Block=noblock}', "");
Expect(1, 2303, '\p{Block= NO	Block}', "");
Expect(0, 2303, '\p{^Block= NO	Block}', "");
Expect(0, 2303, '\P{Block= NO	Block}', "");
Expect(1, 2303, '\P{^Block= NO	Block}', "");
Expect(0, 2143, '\p{Block= NO	Block}', "");
Expect(1, 2143, '\p{^Block= NO	Block}', "");
Expect(1, 2143, '\P{Block= NO	Block}', "");
Expect(0, 2143, '\P{^Block= NO	Block}', "");
Error('\p{Blk= noBlock:=}');
Error('\P{Blk= noBlock:=}');
Expect(1, 2303, '\p{Blk: noblock}', "");
Expect(0, 2303, '\p{^Blk: noblock}', "");
Expect(0, 2303, '\P{Blk: noblock}', "");
Expect(1, 2303, '\P{^Blk: noblock}', "");
Expect(0, 2143, '\p{Blk: noblock}', "");
Expect(1, 2143, '\p{^Blk: noblock}', "");
Expect(1, 2143, '\P{Blk: noblock}', "");
Expect(0, 2143, '\P{^Blk: noblock}', "");
Expect(1, 2303, '\p{Blk=-noBlock}', "");
Expect(0, 2303, '\p{^Blk=-noBlock}', "");
Expect(0, 2303, '\P{Blk=-noBlock}', "");
Expect(1, 2303, '\P{^Blk=-noBlock}', "");
Expect(0, 2143, '\p{Blk=-noBlock}', "");
Expect(1, 2143, '\p{^Blk=-noBlock}', "");
Expect(1, 2143, '\P{Blk=-noBlock}', "");
Expect(0, 2143, '\P{^Blk=-noBlock}', "");
Error('\p{Is_Block:	NO/a/block}');
Error('\P{Is_Block:	NO/a/block}');
Expect(1, 2303, '\p{Is_Block:   noblock}', "");
Expect(0, 2303, '\p{^Is_Block:   noblock}', "");
Expect(0, 2303, '\P{Is_Block:   noblock}', "");
Expect(1, 2303, '\P{^Is_Block:   noblock}', "");
Expect(0, 2143, '\p{Is_Block:   noblock}', "");
Expect(1, 2143, '\p{^Is_Block:   noblock}', "");
Expect(1, 2143, '\P{Is_Block:   noblock}', "");
Expect(0, 2143, '\P{^Is_Block:   noblock}', "");
Expect(1, 2303, '\p{Is_Block=-_NO	Block}', "");
Expect(0, 2303, '\p{^Is_Block=-_NO	Block}', "");
Expect(0, 2303, '\P{Is_Block=-_NO	Block}', "");
Expect(1, 2303, '\P{^Is_Block=-_NO	Block}', "");
Expect(0, 2143, '\p{Is_Block=-_NO	Block}', "");
Expect(1, 2143, '\p{^Is_Block=-_NO	Block}', "");
Expect(1, 2143, '\P{Is_Block=-_NO	Block}', "");
Expect(0, 2143, '\P{^Is_Block=-_NO	Block}', "");
Error('\p{Is_Blk=/a/_No Block}');
Error('\P{Is_Blk=/a/_No Block}');
Expect(1, 2303, '\p{Is_Blk=noblock}', "");
Expect(0, 2303, '\p{^Is_Blk=noblock}', "");
Expect(0, 2303, '\P{Is_Blk=noblock}', "");
Expect(1, 2303, '\P{^Is_Blk=noblock}', "");
Expect(0, 2143, '\p{Is_Blk=noblock}', "");
Expect(1, 2143, '\p{^Is_Blk=noblock}', "");
Expect(1, 2143, '\P{Is_Blk=noblock}', "");
Expect(0, 2143, '\P{^Is_Blk=noblock}', "");
Expect(1, 2303, '\p{Is_Blk=_-NO_BLOCK}', "");
Expect(0, 2303, '\p{^Is_Blk=_-NO_BLOCK}', "");
Expect(0, 2303, '\P{Is_Blk=_-NO_BLOCK}', "");
Expect(1, 2303, '\P{^Is_Blk=_-NO_BLOCK}', "");
Expect(0, 2143, '\p{Is_Blk=_-NO_BLOCK}', "");
Expect(1, 2143, '\p{^Is_Blk=_-NO_BLOCK}', "");
Expect(1, 2143, '\P{Is_Blk=_-NO_BLOCK}', "");
Expect(0, 2143, '\P{^Is_Blk=_-NO_BLOCK}', "");
Error('\p{Block= -cjk	Compatibility/a/}');
Error('\P{Block= -cjk	Compatibility/a/}');
Expect(1, 13311, '\p{Block:cjkcompatibility}', "");
Expect(0, 13311, '\p{^Block:cjkcompatibility}', "");
Expect(0, 13311, '\P{Block:cjkcompatibility}', "");
Expect(1, 13311, '\P{^Block:cjkcompatibility}', "");
Expect(0, 13055, '\p{Block:cjkcompatibility}', "");
Expect(1, 13055, '\p{^Block:cjkcompatibility}', "");
Expect(1, 13055, '\P{Block:cjkcompatibility}', "");
Expect(0, 13055, '\P{^Block:cjkcompatibility}', "");
Expect(1, 13311, '\p{Block=	CJK_compatibility}', "");
Expect(0, 13311, '\p{^Block=	CJK_compatibility}', "");
Expect(0, 13311, '\P{Block=	CJK_compatibility}', "");
Expect(1, 13311, '\P{^Block=	CJK_compatibility}', "");
Expect(0, 13055, '\p{Block=	CJK_compatibility}', "");
Expect(1, 13055, '\p{^Block=	CJK_compatibility}', "");
Expect(1, 13055, '\P{Block=	CJK_compatibility}', "");
Expect(0, 13055, '\P{^Block=	CJK_compatibility}', "");
Error('\p{Blk= :=CJK-COMPATIBILITY}');
Error('\P{Blk= :=CJK-COMPATIBILITY}');
Expect(1, 13311, '\p{Blk=cjkcompatibility}', "");
Expect(0, 13311, '\p{^Blk=cjkcompatibility}', "");
Expect(0, 13311, '\P{Blk=cjkcompatibility}', "");
Expect(1, 13311, '\P{^Blk=cjkcompatibility}', "");
Expect(0, 13055, '\p{Blk=cjkcompatibility}', "");
Expect(1, 13055, '\p{^Blk=cjkcompatibility}', "");
Expect(1, 13055, '\P{Blk=cjkcompatibility}', "");
Expect(0, 13055, '\P{^Blk=cjkcompatibility}', "");
Expect(1, 13311, '\p{Blk=	 CJK-COMPATIBILITY}', "");
Expect(0, 13311, '\p{^Blk=	 CJK-COMPATIBILITY}', "");
Expect(0, 13311, '\P{Blk=	 CJK-COMPATIBILITY}', "");
Expect(1, 13311, '\P{^Blk=	 CJK-COMPATIBILITY}', "");
Expect(0, 13055, '\p{Blk=	 CJK-COMPATIBILITY}', "");
Expect(1, 13055, '\p{^Blk=	 CJK-COMPATIBILITY}', "");
Expect(1, 13055, '\P{Blk=	 CJK-COMPATIBILITY}', "");
Expect(0, 13055, '\P{^Blk=	 CJK-COMPATIBILITY}', "");
Error('\p{Is_Block=-_CJK:=Compatibility}');
Error('\P{Is_Block=-_CJK:=Compatibility}');
Expect(1, 13311, '\p{Is_Block: cjkcompatibility}', "");
Expect(0, 13311, '\p{^Is_Block: cjkcompatibility}', "");
Expect(0, 13311, '\P{Is_Block: cjkcompatibility}', "");
Expect(1, 13311, '\P{^Is_Block: cjkcompatibility}', "");
Expect(0, 13055, '\p{Is_Block: cjkcompatibility}', "");
Expect(1, 13055, '\p{^Is_Block: cjkcompatibility}', "");
Expect(1, 13055, '\P{Is_Block: cjkcompatibility}', "");
Expect(0, 13055, '\P{^Is_Block: cjkcompatibility}', "");
Expect(1, 13311, '\p{Is_Block=__cjkCOMPATIBILITY}', "");
Expect(0, 13311, '\p{^Is_Block=__cjkCOMPATIBILITY}', "");
Expect(0, 13311, '\P{Is_Block=__cjkCOMPATIBILITY}', "");
Expect(1, 13311, '\P{^Is_Block=__cjkCOMPATIBILITY}', "");
Expect(0, 13055, '\p{Is_Block=__cjkCOMPATIBILITY}', "");
Expect(1, 13055, '\p{^Is_Block=__cjkCOMPATIBILITY}', "");
Expect(1, 13055, '\P{Is_Block=__cjkCOMPATIBILITY}', "");
Expect(0, 13055, '\P{^Is_Block=__cjkCOMPATIBILITY}', "");
Error('\p{Is_Blk=	-CJK/a/Compatibility}');
Error('\P{Is_Blk=	-CJK/a/Compatibility}');
Expect(1, 13311, '\p{Is_Blk=cjkcompatibility}', "");
Expect(0, 13311, '\p{^Is_Blk=cjkcompatibility}', "");
Expect(0, 13311, '\P{Is_Blk=cjkcompatibility}', "");
Expect(1, 13311, '\P{^Is_Blk=cjkcompatibility}', "");
Expect(0, 13055, '\p{Is_Blk=cjkcompatibility}', "");
Expect(1, 13055, '\p{^Is_Blk=cjkcompatibility}', "");
Expect(1, 13055, '\P{Is_Blk=cjkcompatibility}', "");
Expect(0, 13055, '\P{^Is_Blk=cjkcompatibility}', "");
Expect(1, 13311, '\p{Is_Blk=__CJK	compatibility}', "");
Expect(0, 13311, '\p{^Is_Blk=__CJK	compatibility}', "");
Expect(0, 13311, '\P{Is_Blk=__CJK	compatibility}', "");
Expect(1, 13311, '\P{^Is_Blk=__CJK	compatibility}', "");
Expect(0, 13055, '\p{Is_Blk=__CJK	compatibility}', "");
Expect(1, 13055, '\p{^Is_Blk=__CJK	compatibility}', "");
Expect(1, 13055, '\P{Is_Blk=__CJK	compatibility}', "");
Expect(0, 13055, '\P{^Is_Blk=__CJK	compatibility}', "");
Error('\p{Block:   	_Vedic:=Extensions}');
Error('\P{Block:   	_Vedic:=Extensions}');
Expect(1, 7423, '\p{Block=vedicextensions}', "");
Expect(0, 7423, '\p{^Block=vedicextensions}', "");
Expect(0, 7423, '\P{Block=vedicextensions}', "");
Expect(1, 7423, '\P{^Block=vedicextensions}', "");
Expect(0, 7375, '\p{Block=vedicextensions}', "");
Expect(1, 7375, '\p{^Block=vedicextensions}', "");
Expect(1, 7375, '\P{Block=vedicextensions}', "");
Expect(0, 7375, '\P{^Block=vedicextensions}', "");
Expect(1, 7423, '\p{Block= Vedic	Extensions}', "");
Expect(0, 7423, '\p{^Block= Vedic	Extensions}', "");
Expect(0, 7423, '\P{Block= Vedic	Extensions}', "");
Expect(1, 7423, '\P{^Block= Vedic	Extensions}', "");
Expect(0, 7375, '\p{Block= Vedic	Extensions}', "");
Expect(1, 7375, '\p{^Block= Vedic	Extensions}', "");
Expect(1, 7375, '\P{Block= Vedic	Extensions}', "");
Expect(0, 7375, '\P{^Block= Vedic	Extensions}', "");
Error('\p{Blk=--VEDIC	EXTENSIONS:=}');
Error('\P{Blk=--VEDIC	EXTENSIONS:=}');
Expect(1, 7423, '\p{Blk=vedicextensions}', "");
Expect(0, 7423, '\p{^Blk=vedicextensions}', "");
Expect(0, 7423, '\P{Blk=vedicextensions}', "");
Expect(1, 7423, '\P{^Blk=vedicextensions}', "");
Expect(0, 7375, '\p{Blk=vedicextensions}', "");
Expect(1, 7375, '\p{^Blk=vedicextensions}', "");
Expect(1, 7375, '\P{Blk=vedicextensions}', "");
Expect(0, 7375, '\P{^Blk=vedicextensions}', "");
Expect(1, 7423, '\p{Blk=	_VEDIC_extensions}', "");
Expect(0, 7423, '\p{^Blk=	_VEDIC_extensions}', "");
Expect(0, 7423, '\P{Blk=	_VEDIC_extensions}', "");
Expect(1, 7423, '\P{^Blk=	_VEDIC_extensions}', "");
Expect(0, 7375, '\p{Blk=	_VEDIC_extensions}', "");
Expect(1, 7375, '\p{^Blk=	_VEDIC_extensions}', "");
Expect(1, 7375, '\P{Blk=	_VEDIC_extensions}', "");
Expect(0, 7375, '\P{^Blk=	_VEDIC_extensions}', "");
Error('\p{Is_Block=	:=VEDICextensions}');
Error('\P{Is_Block=	:=VEDICextensions}');
Expect(1, 7423, '\p{Is_Block=vedicextensions}', "");
Expect(0, 7423, '\p{^Is_Block=vedicextensions}', "");
Expect(0, 7423, '\P{Is_Block=vedicextensions}', "");
Expect(1, 7423, '\P{^Is_Block=vedicextensions}', "");
Expect(0, 7375, '\p{Is_Block=vedicextensions}', "");
Expect(1, 7375, '\p{^Is_Block=vedicextensions}', "");
Expect(1, 7375, '\P{Is_Block=vedicextensions}', "");
Expect(0, 7375, '\P{^Is_Block=vedicextensions}', "");
Expect(1, 7423, '\p{Is_Block=_-Vedic extensions}', "");
Expect(0, 7423, '\p{^Is_Block=_-Vedic extensions}', "");
Expect(0, 7423, '\P{Is_Block=_-Vedic extensions}', "");
Expect(1, 7423, '\P{^Is_Block=_-Vedic extensions}', "");
Expect(0, 7375, '\p{Is_Block=_-Vedic extensions}', "");
Expect(1, 7375, '\p{^Is_Block=_-Vedic extensions}', "");
Expect(1, 7375, '\P{Is_Block=_-Vedic extensions}', "");
Expect(0, 7375, '\P{^Is_Block=_-Vedic extensions}', "");
Error('\p{Is_Blk=--Vedic-EXTENSIONS/a/}');
Error('\P{Is_Blk=--Vedic-EXTENSIONS/a/}');
Expect(1, 7423, '\p{Is_Blk=vedicextensions}', "");
Expect(0, 7423, '\p{^Is_Blk=vedicextensions}', "");
Expect(0, 7423, '\P{Is_Blk=vedicextensions}', "");
Expect(1, 7423, '\P{^Is_Blk=vedicextensions}', "");
Expect(0, 7375, '\p{Is_Blk=vedicextensions}', "");
Expect(1, 7375, '\p{^Is_Blk=vedicextensions}', "");
Expect(1, 7375, '\P{Is_Blk=vedicextensions}', "");
Expect(0, 7375, '\P{^Is_Blk=vedicextensions}', "");
Expect(1, 7423, '\p{Is_Blk=	 VedicEXTENSIONS}', "");
Expect(0, 7423, '\p{^Is_Blk=	 VedicEXTENSIONS}', "");
Expect(0, 7423, '\P{Is_Blk=	 VedicEXTENSIONS}', "");
Expect(1, 7423, '\P{^Is_Blk=	 VedicEXTENSIONS}', "");
Expect(0, 7375, '\p{Is_Blk=	 VedicEXTENSIONS}', "");
Expect(1, 7375, '\p{^Is_Blk=	 VedicEXTENSIONS}', "");
Expect(1, 7375, '\P{Is_Blk=	 VedicEXTENSIONS}', "");
Expect(0, 7375, '\P{^Is_Blk=	 VedicEXTENSIONS}', "");
Error('\p{Block:	/a/ tai viet}');
Error('\P{Block:	/a/ tai viet}');
Expect(1, 43743, '\p{Block=taiviet}', "");
Expect(0, 43743, '\p{^Block=taiviet}', "");
Expect(0, 43743, '\P{Block=taiviet}', "");
Expect(1, 43743, '\P{^Block=taiviet}', "");
Expect(0, 43647, '\p{Block=taiviet}', "");
Expect(1, 43647, '\p{^Block=taiviet}', "");
Expect(1, 43647, '\P{Block=taiviet}', "");
Expect(0, 43647, '\P{^Block=taiviet}', "");
Expect(1, 43743, '\p{Block=_TAI viet}', "");
Expect(0, 43743, '\p{^Block=_TAI viet}', "");
Expect(0, 43743, '\P{Block=_TAI viet}', "");
Expect(1, 43743, '\P{^Block=_TAI viet}', "");
Expect(0, 43647, '\p{Block=_TAI viet}', "");
Expect(1, 43647, '\p{^Block=_TAI viet}', "");
Expect(1, 43647, '\P{Block=_TAI viet}', "");
Expect(0, 43647, '\P{^Block=_TAI viet}', "");
Error('\p{Blk=_	Tai/a/VIET}');
Error('\P{Blk=_	Tai/a/VIET}');
Expect(1, 43743, '\p{Blk=taiviet}', "");
Expect(0, 43743, '\p{^Blk=taiviet}', "");
Expect(0, 43743, '\P{Blk=taiviet}', "");
Expect(1, 43743, '\P{^Blk=taiviet}', "");
Expect(0, 43647, '\p{Blk=taiviet}', "");
Expect(1, 43647, '\p{^Blk=taiviet}', "");
Expect(1, 43647, '\P{Blk=taiviet}', "");
Expect(0, 43647, '\P{^Blk=taiviet}', "");
Expect(1, 43743, '\p{Blk:	-Tai	viet}', "");
Expect(0, 43743, '\p{^Blk:	-Tai	viet}', "");
Expect(0, 43743, '\P{Blk:	-Tai	viet}', "");
Expect(1, 43743, '\P{^Blk:	-Tai	viet}', "");
Expect(0, 43647, '\p{Blk:	-Tai	viet}', "");
Expect(1, 43647, '\p{^Blk:	-Tai	viet}', "");
Expect(1, 43647, '\P{Blk:	-Tai	viet}', "");
Expect(0, 43647, '\P{^Blk:	-Tai	viet}', "");
Error('\p{Is_Block=_ TAI:=Viet}');
Error('\P{Is_Block=_ TAI:=Viet}');
Expect(1, 43743, '\p{Is_Block=taiviet}', "");
Expect(0, 43743, '\p{^Is_Block=taiviet}', "");
Expect(0, 43743, '\P{Is_Block=taiviet}', "");
Expect(1, 43743, '\P{^Is_Block=taiviet}', "");
Expect(0, 43647, '\p{Is_Block=taiviet}', "");
Expect(1, 43647, '\p{^Is_Block=taiviet}', "");
Expect(1, 43647, '\P{Is_Block=taiviet}', "");
Expect(0, 43647, '\P{^Is_Block=taiviet}', "");
Expect(1, 43743, '\p{Is_Block= TAI viet}', "");
Expect(0, 43743, '\p{^Is_Block= TAI viet}', "");
Expect(0, 43743, '\P{Is_Block= TAI viet}', "");
Expect(1, 43743, '\P{^Is_Block= TAI viet}', "");
Expect(0, 43647, '\p{Is_Block= TAI viet}', "");
Expect(1, 43647, '\p{^Is_Block= TAI viet}', "");
Expect(1, 43647, '\P{Is_Block= TAI viet}', "");
Expect(0, 43647, '\P{^Is_Block= TAI viet}', "");
Error('\p{Is_Blk=__TAI Viet:=}');
Error('\P{Is_Blk=__TAI Viet:=}');
Expect(1, 43743, '\p{Is_Blk=taiviet}', "");
Expect(0, 43743, '\p{^Is_Blk=taiviet}', "");
Expect(0, 43743, '\P{Is_Blk=taiviet}', "");
Expect(1, 43743, '\P{^Is_Blk=taiviet}', "");
Expect(0, 43647, '\p{Is_Blk=taiviet}', "");
Expect(1, 43647, '\p{^Is_Blk=taiviet}', "");
Expect(1, 43647, '\P{Is_Blk=taiviet}', "");
Expect(0, 43647, '\P{^Is_Blk=taiviet}', "");
Expect(1, 43743, '\p{Is_Blk=  Tai	viet}', "");
Expect(0, 43743, '\p{^Is_Blk=  Tai	viet}', "");
Expect(0, 43743, '\P{Is_Blk=  Tai	viet}', "");
Expect(1, 43743, '\P{^Is_Blk=  Tai	viet}', "");
Expect(0, 43647, '\p{Is_Blk=  Tai	viet}', "");
Expect(1, 43647, '\p{^Is_Blk=  Tai	viet}', "");
Expect(1, 43647, '\P{Is_Blk=  Tai	viet}', "");
Expect(0, 43647, '\P{^Is_Blk=  Tai	viet}', "");
Error('\p{Block:  /a/CYRILLICextendedB}');
Error('\P{Block:  /a/CYRILLICextendedB}');
Expect(1, 42655, '\p{Block=cyrillicextendedb}', "");
Expect(0, 42655, '\p{^Block=cyrillicextendedb}', "");
Expect(0, 42655, '\P{Block=cyrillicextendedb}', "");
Expect(1, 42655, '\P{^Block=cyrillicextendedb}', "");
Expect(0, 42559, '\p{Block=cyrillicextendedb}', "");
Expect(1, 42559, '\p{^Block=cyrillicextendedb}', "");
Expect(1, 42559, '\P{Block=cyrillicextendedb}', "");
Expect(0, 42559, '\P{^Block=cyrillicextendedb}', "");
Expect(1, 42655, '\p{Block=_CYRILLIC	extended-B}', "");
Expect(0, 42655, '\p{^Block=_CYRILLIC	extended-B}', "");
Expect(0, 42655, '\P{Block=_CYRILLIC	extended-B}', "");
Expect(1, 42655, '\P{^Block=_CYRILLIC	extended-B}', "");
Expect(0, 42559, '\p{Block=_CYRILLIC	extended-B}', "");
Expect(1, 42559, '\p{^Block=_CYRILLIC	extended-B}', "");
Expect(1, 42559, '\P{Block=_CYRILLIC	extended-B}', "");
Expect(0, 42559, '\P{^Block=_CYRILLIC	extended-B}', "");
Error('\p{Blk=/a/ cyrillic Extended-B}');
Error('\P{Blk=/a/ cyrillic Extended-B}');
Expect(1, 42655, '\p{Blk=cyrillicextendedb}', "");
Expect(0, 42655, '\p{^Blk=cyrillicextendedb}', "");
Expect(0, 42655, '\P{Blk=cyrillicextendedb}', "");
Expect(1, 42655, '\P{^Blk=cyrillicextendedb}', "");
Expect(0, 42559, '\p{Blk=cyrillicextendedb}', "");
Expect(1, 42559, '\p{^Blk=cyrillicextendedb}', "");
Expect(1, 42559, '\P{Blk=cyrillicextendedb}', "");
Expect(0, 42559, '\P{^Blk=cyrillicextendedb}', "");
Expect(1, 42655, '\p{Blk=_-CYRILLIC_Extended-B}', "");
Expect(0, 42655, '\p{^Blk=_-CYRILLIC_Extended-B}', "");
Expect(0, 42655, '\P{Blk=_-CYRILLIC_Extended-B}', "");
Expect(1, 42655, '\P{^Blk=_-CYRILLIC_Extended-B}', "");
Expect(0, 42559, '\p{Blk=_-CYRILLIC_Extended-B}', "");
Expect(1, 42559, '\p{^Blk=_-CYRILLIC_Extended-B}', "");
Expect(1, 42559, '\P{Blk=_-CYRILLIC_Extended-B}', "");
Expect(0, 42559, '\P{^Blk=_-CYRILLIC_Extended-B}', "");
Error('\p{Is_Block= 	cyrillicExtended/a/B}');
Error('\P{Is_Block= 	cyrillicExtended/a/B}');
Expect(1, 42655, '\p{Is_Block=cyrillicextendedb}', "");
Expect(0, 42655, '\p{^Is_Block=cyrillicextendedb}', "");
Expect(0, 42655, '\P{Is_Block=cyrillicextendedb}', "");
Expect(1, 42655, '\P{^Is_Block=cyrillicextendedb}', "");
Expect(0, 42559, '\p{Is_Block=cyrillicextendedb}', "");
Expect(1, 42559, '\p{^Is_Block=cyrillicextendedb}', "");
Expect(1, 42559, '\P{Is_Block=cyrillicextendedb}', "");
Expect(0, 42559, '\P{^Is_Block=cyrillicextendedb}', "");
Expect(1, 42655, '\p{Is_Block=	Cyrillic-Extended	B}', "");
Expect(0, 42655, '\p{^Is_Block=	Cyrillic-Extended	B}', "");
Expect(0, 42655, '\P{Is_Block=	Cyrillic-Extended	B}', "");
Expect(1, 42655, '\P{^Is_Block=	Cyrillic-Extended	B}', "");
Expect(0, 42559, '\p{Is_Block=	Cyrillic-Extended	B}', "");
Expect(1, 42559, '\p{^Is_Block=	Cyrillic-Extended	B}', "");
Expect(1, 42559, '\P{Is_Block=	Cyrillic-Extended	B}', "");
Expect(0, 42559, '\P{^Is_Block=	Cyrillic-Extended	B}', "");
Error('\p{Is_Blk=:=CYRILLIC-Extended-B}');
Error('\P{Is_Blk=:=CYRILLIC-Extended-B}');
Expect(1, 42655, '\p{Is_Blk=cyrillicextendedb}', "");
Expect(0, 42655, '\p{^Is_Blk=cyrillicextendedb}', "");
Expect(0, 42655, '\P{Is_Blk=cyrillicextendedb}', "");
Expect(1, 42655, '\P{^Is_Blk=cyrillicextendedb}', "");
Expect(0, 42559, '\p{Is_Blk=cyrillicextendedb}', "");
Expect(1, 42559, '\p{^Is_Blk=cyrillicextendedb}', "");
Expect(1, 42559, '\P{Is_Blk=cyrillicextendedb}', "");
Expect(0, 42559, '\P{^Is_Blk=cyrillicextendedb}', "");
Expect(1, 42655, '\p{Is_Blk=_ Cyrillic_Extended-b}', "");
Expect(0, 42655, '\p{^Is_Blk=_ Cyrillic_Extended-b}', "");
Expect(0, 42655, '\P{Is_Blk=_ Cyrillic_Extended-b}', "");
Expect(1, 42655, '\P{^Is_Blk=_ Cyrillic_Extended-b}', "");
Expect(0, 42559, '\p{Is_Blk=_ Cyrillic_Extended-b}', "");
Expect(1, 42559, '\p{^Is_Blk=_ Cyrillic_Extended-b}', "");
Expect(1, 42559, '\P{Is_Blk=_ Cyrillic_Extended-b}', "");
Expect(0, 42559, '\P{^Is_Blk=_ Cyrillic_Extended-b}', "");
Error('\p{Block=:= Phonetic-EXTENSIONS}');
Error('\P{Block=:= Phonetic-EXTENSIONS}');
Expect(1, 7551, '\p{Block=phoneticextensions}', "");
Expect(0, 7551, '\p{^Block=phoneticextensions}', "");
Expect(0, 7551, '\P{Block=phoneticextensions}', "");
Expect(1, 7551, '\P{^Block=phoneticextensions}', "");
Expect(0, 7423, '\p{Block=phoneticextensions}', "");
Expect(1, 7423, '\p{^Block=phoneticextensions}', "");
Expect(1, 7423, '\P{Block=phoneticextensions}', "");
Expect(0, 7423, '\P{^Block=phoneticextensions}', "");
Expect(1, 7551, '\p{Block=	_Phonetic extensions}', "");
Expect(0, 7551, '\p{^Block=	_Phonetic extensions}', "");
Expect(0, 7551, '\P{Block=	_Phonetic extensions}', "");
Expect(1, 7551, '\P{^Block=	_Phonetic extensions}', "");
Expect(0, 7423, '\p{Block=	_Phonetic extensions}', "");
Expect(1, 7423, '\p{^Block=	_Phonetic extensions}', "");
Expect(1, 7423, '\P{Block=	_Phonetic extensions}', "");
Expect(0, 7423, '\P{^Block=	_Phonetic extensions}', "");
Error('\p{Blk= Phonetic/a/EXTENSIONS}');
Error('\P{Blk= Phonetic/a/EXTENSIONS}');
Expect(1, 7551, '\p{Blk=phoneticextensions}', "");
Expect(0, 7551, '\p{^Blk=phoneticextensions}', "");
Expect(0, 7551, '\P{Blk=phoneticextensions}', "");
Expect(1, 7551, '\P{^Blk=phoneticextensions}', "");
Expect(0, 7423, '\p{Blk=phoneticextensions}', "");
Expect(1, 7423, '\p{^Blk=phoneticextensions}', "");
Expect(1, 7423, '\P{Blk=phoneticextensions}', "");
Expect(0, 7423, '\P{^Blk=phoneticextensions}', "");
Expect(1, 7551, '\p{Blk=-	phonetic	EXTENSIONS}', "");
Expect(0, 7551, '\p{^Blk=-	phonetic	EXTENSIONS}', "");
Expect(0, 7551, '\P{Blk=-	phonetic	EXTENSIONS}', "");
Expect(1, 7551, '\P{^Blk=-	phonetic	EXTENSIONS}', "");
Expect(0, 7423, '\p{Blk=-	phonetic	EXTENSIONS}', "");
Expect(1, 7423, '\p{^Blk=-	phonetic	EXTENSIONS}', "");
Expect(1, 7423, '\P{Blk=-	phonetic	EXTENSIONS}', "");
Expect(0, 7423, '\P{^Blk=-	phonetic	EXTENSIONS}', "");
Error('\p{Is_Block:	:= -phonetic Extensions}');
Error('\P{Is_Block:	:= -phonetic Extensions}');
Expect(1, 7551, '\p{Is_Block=phoneticextensions}', "");
Expect(0, 7551, '\p{^Is_Block=phoneticextensions}', "");
Expect(0, 7551, '\P{Is_Block=phoneticextensions}', "");
Expect(1, 7551, '\P{^Is_Block=phoneticextensions}', "");
Expect(0, 7423, '\p{Is_Block=phoneticextensions}', "");
Expect(1, 7423, '\p{^Is_Block=phoneticextensions}', "");
Expect(1, 7423, '\P{Is_Block=phoneticextensions}', "");
Expect(0, 7423, '\P{^Is_Block=phoneticextensions}', "");
Expect(1, 7551, '\p{Is_Block:   -_PHONETICExtensions}', "");
Expect(0, 7551, '\p{^Is_Block:   -_PHONETICExtensions}', "");
Expect(0, 7551, '\P{Is_Block:   -_PHONETICExtensions}', "");
Expect(1, 7551, '\P{^Is_Block:   -_PHONETICExtensions}', "");
Expect(0, 7423, '\p{Is_Block:   -_PHONETICExtensions}', "");
Expect(1, 7423, '\p{^Is_Block:   -_PHONETICExtensions}', "");
Expect(1, 7423, '\P{Is_Block:   -_PHONETICExtensions}', "");
Expect(0, 7423, '\P{^Is_Block:   -_PHONETICExtensions}', "");
Error('\p{Is_Blk=	:=Phonetic_Extensions}');
Error('\P{Is_Blk=	:=Phonetic_Extensions}');
Expect(1, 7551, '\p{Is_Blk=phoneticextensions}', "");
Expect(0, 7551, '\p{^Is_Blk=phoneticextensions}', "");
Expect(0, 7551, '\P{Is_Blk=phoneticextensions}', "");
Expect(1, 7551, '\P{^Is_Blk=phoneticextensions}', "");
Expect(0, 7423, '\p{Is_Blk=phoneticextensions}', "");
Expect(1, 7423, '\p{^Is_Blk=phoneticextensions}', "");
Expect(1, 7423, '\P{Is_Blk=phoneticextensions}', "");
Expect(0, 7423, '\P{^Is_Blk=phoneticextensions}', "");
Expect(1, 7551, '\p{Is_Blk=	Phonetic	Extensions}', "");
Expect(0, 7551, '\p{^Is_Blk=	Phonetic	Extensions}', "");
Expect(0, 7551, '\P{Is_Blk=	Phonetic	Extensions}', "");
Expect(1, 7551, '\P{^Is_Blk=	Phonetic	Extensions}', "");
Expect(0, 7423, '\p{Is_Blk=	Phonetic	Extensions}', "");
Expect(1, 7423, '\p{^Is_Blk=	Phonetic	Extensions}', "");
Expect(1, 7423, '\P{Is_Blk=	Phonetic	Extensions}', "");
Expect(0, 7423, '\P{^Is_Blk=	Phonetic	Extensions}', "");
Error('\p{Block=	-Tai_XUAN_JING Symbols/a/}');
Error('\P{Block=	-Tai_XUAN_JING Symbols/a/}');
Expect(1, 119647, '\p{Block=taixuanjingsymbols}', "");
Expect(0, 119647, '\p{^Block=taixuanjingsymbols}', "");
Expect(0, 119647, '\P{Block=taixuanjingsymbols}', "");
Expect(1, 119647, '\P{^Block=taixuanjingsymbols}', "");
Expect(0, 119551, '\p{Block=taixuanjingsymbols}', "");
Expect(1, 119551, '\p{^Block=taixuanjingsymbols}', "");
Expect(1, 119551, '\P{Block=taixuanjingsymbols}', "");
Expect(0, 119551, '\P{^Block=taixuanjingsymbols}', "");
Expect(1, 119647, '\p{Block=_-TAI-xuan_Jing symbols}', "");
Expect(0, 119647, '\p{^Block=_-TAI-xuan_Jing symbols}', "");
Expect(0, 119647, '\P{Block=_-TAI-xuan_Jing symbols}', "");
Expect(1, 119647, '\P{^Block=_-TAI-xuan_Jing symbols}', "");
Expect(0, 119551, '\p{Block=_-TAI-xuan_Jing symbols}', "");
Expect(1, 119551, '\p{^Block=_-TAI-xuan_Jing symbols}', "");
Expect(1, 119551, '\P{Block=_-TAI-xuan_Jing symbols}', "");
Expect(0, 119551, '\P{^Block=_-TAI-xuan_Jing symbols}', "");
Error('\p{Blk=- Tai/a/Xuan-Jing-Symbols}');
Error('\P{Blk=- Tai/a/Xuan-Jing-Symbols}');
Expect(1, 119647, '\p{Blk=taixuanjingsymbols}', "");
Expect(0, 119647, '\p{^Blk=taixuanjingsymbols}', "");
Expect(0, 119647, '\P{Blk=taixuanjingsymbols}', "");
Expect(1, 119647, '\P{^Blk=taixuanjingsymbols}', "");
Expect(0, 119551, '\p{Blk=taixuanjingsymbols}', "");
Expect(1, 119551, '\p{^Blk=taixuanjingsymbols}', "");
Expect(1, 119551, '\P{Blk=taixuanjingsymbols}', "");
Expect(0, 119551, '\P{^Blk=taixuanjingsymbols}', "");
Expect(1, 119647, '\p{Blk=Tai Xuan JING SYMBOLS}', "");
Expect(0, 119647, '\p{^Blk=Tai Xuan JING SYMBOLS}', "");
Expect(0, 119647, '\P{Blk=Tai Xuan JING SYMBOLS}', "");
Expect(1, 119647, '\P{^Blk=Tai Xuan JING SYMBOLS}', "");
Expect(0, 119551, '\p{Blk=Tai Xuan JING SYMBOLS}', "");
Expect(1, 119551, '\p{^Blk=Tai Xuan JING SYMBOLS}', "");
Expect(1, 119551, '\P{Blk=Tai Xuan JING SYMBOLS}', "");
Expect(0, 119551, '\P{^Blk=Tai Xuan JING SYMBOLS}', "");
Error('\p{Is_Block=:=	_TAI-XuanJing_Symbols}');
Error('\P{Is_Block=:=	_TAI-XuanJing_Symbols}');
Expect(1, 119647, '\p{Is_Block=taixuanjingsymbols}', "");
Expect(0, 119647, '\p{^Is_Block=taixuanjingsymbols}', "");
Expect(0, 119647, '\P{Is_Block=taixuanjingsymbols}', "");
Expect(1, 119647, '\P{^Is_Block=taixuanjingsymbols}', "");
Expect(0, 119551, '\p{Is_Block=taixuanjingsymbols}', "");
Expect(1, 119551, '\p{^Is_Block=taixuanjingsymbols}', "");
Expect(1, 119551, '\P{Is_Block=taixuanjingsymbols}', "");
Expect(0, 119551, '\P{^Is_Block=taixuanjingsymbols}', "");
Expect(1, 119647, '\p{Is_Block=-Tai-Xuan	jing_Symbols}', "");
Expect(0, 119647, '\p{^Is_Block=-Tai-Xuan	jing_Symbols}', "");
Expect(0, 119647, '\P{Is_Block=-Tai-Xuan	jing_Symbols}', "");
Expect(1, 119647, '\P{^Is_Block=-Tai-Xuan	jing_Symbols}', "");
Expect(0, 119551, '\p{Is_Block=-Tai-Xuan	jing_Symbols}', "");
Expect(1, 119551, '\p{^Is_Block=-Tai-Xuan	jing_Symbols}', "");
Expect(1, 119551, '\P{Is_Block=-Tai-Xuan	jing_Symbols}', "");
Expect(0, 119551, '\P{^Is_Block=-Tai-Xuan	jing_Symbols}', "");
Error('\p{Is_Blk:-	tai-Xuan/a/jingSYMBOLS}');
Error('\P{Is_Blk:-	tai-Xuan/a/jingSYMBOLS}');
Expect(1, 119647, '\p{Is_Blk=taixuanjingsymbols}', "");
Expect(0, 119647, '\p{^Is_Blk=taixuanjingsymbols}', "");
Expect(0, 119647, '\P{Is_Blk=taixuanjingsymbols}', "");
Expect(1, 119647, '\P{^Is_Blk=taixuanjingsymbols}', "");
Expect(0, 119551, '\p{Is_Blk=taixuanjingsymbols}', "");
Expect(1, 119551, '\p{^Is_Blk=taixuanjingsymbols}', "");
Expect(1, 119551, '\P{Is_Blk=taixuanjingsymbols}', "");
Expect(0, 119551, '\P{^Is_Blk=taixuanjingsymbols}', "");
Expect(1, 119647, '\p{Is_Blk=--TAI_XUAN_JING_symbols}', "");
Expect(0, 119647, '\p{^Is_Blk=--TAI_XUAN_JING_symbols}', "");
Expect(0, 119647, '\P{Is_Blk=--TAI_XUAN_JING_symbols}', "");
Expect(1, 119647, '\P{^Is_Blk=--TAI_XUAN_JING_symbols}', "");
Expect(0, 119551, '\p{Is_Blk=--TAI_XUAN_JING_symbols}', "");
Expect(1, 119551, '\p{^Is_Blk=--TAI_XUAN_JING_symbols}', "");
Expect(1, 119551, '\P{Is_Blk=--TAI_XUAN_JING_symbols}', "");
Expect(0, 119551, '\P{^Is_Blk=--TAI_XUAN_JING_symbols}', "");
Error('\p{Block= -MALAYALAM:=}');
Error('\P{Block= -MALAYALAM:=}');
Expect(1, 3455, '\p{Block=malayalam}', "");
Expect(0, 3455, '\p{^Block=malayalam}', "");
Expect(0, 3455, '\P{Block=malayalam}', "");
Expect(1, 3455, '\P{^Block=malayalam}', "");
Expect(0, 3327, '\p{Block=malayalam}', "");
Expect(1, 3327, '\p{^Block=malayalam}', "");
Expect(1, 3327, '\P{Block=malayalam}', "");
Expect(0, 3327, '\P{^Block=malayalam}', "");
Expect(1, 3455, '\p{Block=	_Malayalam}', "");
Expect(0, 3455, '\p{^Block=	_Malayalam}', "");
Expect(0, 3455, '\P{Block=	_Malayalam}', "");
Expect(1, 3455, '\P{^Block=	_Malayalam}', "");
Expect(0, 3327, '\p{Block=	_Malayalam}', "");
Expect(1, 3327, '\p{^Block=	_Malayalam}', "");
Expect(1, 3327, '\P{Block=	_Malayalam}', "");
Expect(0, 3327, '\P{^Block=	_Malayalam}', "");
Error('\p{Blk=:=_ Malayalam}');
Error('\P{Blk=:=_ Malayalam}');
Expect(1, 3455, '\p{Blk=malayalam}', "");
Expect(0, 3455, '\p{^Blk=malayalam}', "");
Expect(0, 3455, '\P{Blk=malayalam}', "");
Expect(1, 3455, '\P{^Blk=malayalam}', "");
Expect(0, 3327, '\p{Blk=malayalam}', "");
Expect(1, 3327, '\p{^Blk=malayalam}', "");
Expect(1, 3327, '\P{Blk=malayalam}', "");
Expect(0, 3327, '\P{^Blk=malayalam}', "");
Expect(1, 3455, '\p{Blk= Malayalam}', "");
Expect(0, 3455, '\p{^Blk= Malayalam}', "");
Expect(0, 3455, '\P{Blk= Malayalam}', "");
Expect(1, 3455, '\P{^Blk= Malayalam}', "");
Expect(0, 3327, '\p{Blk= Malayalam}', "");
Expect(1, 3327, '\p{^Blk= Malayalam}', "");
Expect(1, 3327, '\P{Blk= Malayalam}', "");
Expect(0, 3327, '\P{^Blk= Malayalam}', "");
Error('\p{Is_Block=/a/-Malayalam}');
Error('\P{Is_Block=/a/-Malayalam}');
Expect(1, 3455, '\p{Is_Block=malayalam}', "");
Expect(0, 3455, '\p{^Is_Block=malayalam}', "");
Expect(0, 3455, '\P{Is_Block=malayalam}', "");
Expect(1, 3455, '\P{^Is_Block=malayalam}', "");
Expect(0, 3327, '\p{Is_Block=malayalam}', "");
Expect(1, 3327, '\p{^Is_Block=malayalam}', "");
Expect(1, 3327, '\P{Is_Block=malayalam}', "");
Expect(0, 3327, '\P{^Is_Block=malayalam}', "");
Expect(1, 3455, '\p{Is_Block=__MALAYALAM}', "");
Expect(0, 3455, '\p{^Is_Block=__MALAYALAM}', "");
Expect(0, 3455, '\P{Is_Block=__MALAYALAM}', "");
Expect(1, 3455, '\P{^Is_Block=__MALAYALAM}', "");
Expect(0, 3327, '\p{Is_Block=__MALAYALAM}', "");
Expect(1, 3327, '\p{^Is_Block=__MALAYALAM}', "");
Expect(1, 3327, '\P{Is_Block=__MALAYALAM}', "");
Expect(0, 3327, '\P{^Is_Block=__MALAYALAM}', "");
Error('\p{Is_Blk=--MALAYALAM:=}');
Error('\P{Is_Blk=--MALAYALAM:=}');
Expect(1, 3455, '\p{Is_Blk=malayalam}', "");
Expect(0, 3455, '\p{^Is_Blk=malayalam}', "");
Expect(0, 3455, '\P{Is_Blk=malayalam}', "");
Expect(1, 3455, '\P{^Is_Blk=malayalam}', "");
Expect(0, 3327, '\p{Is_Blk=malayalam}', "");
Expect(1, 3327, '\p{^Is_Blk=malayalam}', "");
Expect(1, 3327, '\P{Is_Blk=malayalam}', "");
Expect(0, 3327, '\P{^Is_Blk=malayalam}', "");
Expect(1, 3455, '\p{Is_Blk=	MALAYALAM}', "");
Expect(0, 3455, '\p{^Is_Blk=	MALAYALAM}', "");
Expect(0, 3455, '\P{Is_Blk=	MALAYALAM}', "");
Expect(1, 3455, '\P{^Is_Blk=	MALAYALAM}', "");
Expect(0, 3327, '\p{Is_Blk=	MALAYALAM}', "");
Expect(1, 3327, '\p{^Is_Blk=	MALAYALAM}', "");
Expect(1, 3327, '\P{Is_Blk=	MALAYALAM}', "");
Expect(0, 3327, '\P{^Is_Blk=	MALAYALAM}', "");
Error('\p{Block=	-Lisu:=}');
Error('\P{Block=	-Lisu:=}');
Expect(1, 42239, '\p{Block:	lisu}', "");
Expect(0, 42239, '\p{^Block:	lisu}', "");
Expect(0, 42239, '\P{Block:	lisu}', "");
Expect(1, 42239, '\P{^Block:	lisu}', "");
Expect(0, 42191, '\p{Block:	lisu}', "");
Expect(1, 42191, '\p{^Block:	lisu}', "");
Expect(1, 42191, '\P{Block:	lisu}', "");
Expect(0, 42191, '\P{^Block:	lisu}', "");
Expect(1, 42239, '\p{Block=	-LISU}', "");
Expect(0, 42239, '\p{^Block=	-LISU}', "");
Expect(0, 42239, '\P{Block=	-LISU}', "");
Expect(1, 42239, '\P{^Block=	-LISU}', "");
Expect(0, 42191, '\p{Block=	-LISU}', "");
Expect(1, 42191, '\p{^Block=	-LISU}', "");
Expect(1, 42191, '\P{Block=	-LISU}', "");
Expect(0, 42191, '\P{^Block=	-LISU}', "");
Error('\p{Blk=:=Lisu}');
Error('\P{Blk=:=Lisu}');
Expect(1, 42239, '\p{Blk=lisu}', "");
Expect(0, 42239, '\p{^Blk=lisu}', "");
Expect(0, 42239, '\P{Blk=lisu}', "");
Expect(1, 42239, '\P{^Blk=lisu}', "");
Expect(0, 42191, '\p{Blk=lisu}', "");
Expect(1, 42191, '\p{^Blk=lisu}', "");
Expect(1, 42191, '\P{Blk=lisu}', "");
Expect(0, 42191, '\P{^Blk=lisu}', "");
Expect(1, 42239, '\p{Blk= Lisu}', "");
Expect(0, 42239, '\p{^Blk= Lisu}', "");
Expect(0, 42239, '\P{Blk= Lisu}', "");
Expect(1, 42239, '\P{^Blk= Lisu}', "");
Expect(0, 42191, '\p{Blk= Lisu}', "");
Expect(1, 42191, '\p{^Blk= Lisu}', "");
Expect(1, 42191, '\P{Blk= Lisu}', "");
Expect(0, 42191, '\P{^Blk= Lisu}', "");
Error('\p{Is_Block=-/a/Lisu}');
Error('\P{Is_Block=-/a/Lisu}');
Expect(1, 42239, '\p{Is_Block=lisu}', "");
Expect(0, 42239, '\p{^Is_Block=lisu}', "");
Expect(0, 42239, '\P{Is_Block=lisu}', "");
Expect(1, 42239, '\P{^Is_Block=lisu}', "");
Expect(0, 42191, '\p{Is_Block=lisu}', "");
Expect(1, 42191, '\p{^Is_Block=lisu}', "");
Expect(1, 42191, '\P{Is_Block=lisu}', "");
Expect(0, 42191, '\P{^Is_Block=lisu}', "");
Expect(1, 42239, '\p{Is_Block= -lisu}', "");
Expect(0, 42239, '\p{^Is_Block= -lisu}', "");
Expect(0, 42239, '\P{Is_Block= -lisu}', "");
Expect(1, 42239, '\P{^Is_Block= -lisu}', "");
Expect(0, 42191, '\p{Is_Block= -lisu}', "");
Expect(1, 42191, '\p{^Is_Block= -lisu}', "");
Expect(1, 42191, '\P{Is_Block= -lisu}', "");
Expect(0, 42191, '\P{^Is_Block= -lisu}', "");
Error('\p{Is_Blk=-/a/Lisu}');
Error('\P{Is_Blk=-/a/Lisu}');
Expect(1, 42239, '\p{Is_Blk=lisu}', "");
Expect(0, 42239, '\p{^Is_Blk=lisu}', "");
Expect(0, 42239, '\P{Is_Blk=lisu}', "");
Expect(1, 42239, '\P{^Is_Blk=lisu}', "");
Expect(0, 42191, '\p{Is_Blk=lisu}', "");
Expect(1, 42191, '\p{^Is_Blk=lisu}', "");
Expect(1, 42191, '\P{Is_Blk=lisu}', "");
Expect(0, 42191, '\P{^Is_Blk=lisu}', "");
Expect(1, 42239, '\p{Is_Blk=__Lisu}', "");
Expect(0, 42239, '\p{^Is_Blk=__Lisu}', "");
Expect(0, 42239, '\P{Is_Blk=__Lisu}', "");
Expect(1, 42239, '\P{^Is_Blk=__Lisu}', "");
Expect(0, 42191, '\p{Is_Blk=__Lisu}', "");
Expect(1, 42191, '\p{^Is_Blk=__Lisu}', "");
Expect(1, 42191, '\P{Is_Blk=__Lisu}', "");
Expect(0, 42191, '\P{^Is_Blk=__Lisu}', "");
Error('\p{Block=		ARABIC	PresentationForms/a/A}');
Error('\P{Block=		ARABIC	PresentationForms/a/A}');
Expect(1, 65023, '\p{Block=arabicpresentationformsa}', "");
Expect(0, 65023, '\p{^Block=arabicpresentationformsa}', "");
Expect(0, 65023, '\P{Block=arabicpresentationformsa}', "");
Expect(1, 65023, '\P{^Block=arabicpresentationformsa}', "");
Expect(0, 64335, '\p{Block=arabicpresentationformsa}', "");
Expect(1, 64335, '\p{^Block=arabicpresentationformsa}', "");
Expect(1, 64335, '\P{Block=arabicpresentationformsa}', "");
Expect(0, 64335, '\P{^Block=arabicpresentationformsa}', "");
Expect(1, 65023, '\p{Block= Arabic_presentation_forms-a}', "");
Expect(0, 65023, '\p{^Block= Arabic_presentation_forms-a}', "");
Expect(0, 65023, '\P{Block= Arabic_presentation_forms-a}', "");
Expect(1, 65023, '\P{^Block= Arabic_presentation_forms-a}', "");
Expect(0, 64335, '\p{Block= Arabic_presentation_forms-a}', "");
Expect(1, 64335, '\p{^Block= Arabic_presentation_forms-a}', "");
Expect(1, 64335, '\P{Block= Arabic_presentation_forms-a}', "");
Expect(0, 64335, '\P{^Block= Arabic_presentation_forms-a}', "");
Error('\p{Blk=- Arabic/a/Presentation_FORMS A}');
Error('\P{Blk=- Arabic/a/Presentation_FORMS A}');
Expect(1, 65023, '\p{Blk=arabicpresentationformsa}', "");
Expect(0, 65023, '\p{^Blk=arabicpresentationformsa}', "");
Expect(0, 65023, '\P{Blk=arabicpresentationformsa}', "");
Expect(1, 65023, '\P{^Blk=arabicpresentationformsa}', "");
Expect(0, 64335, '\p{Blk=arabicpresentationformsa}', "");
Expect(1, 64335, '\p{^Blk=arabicpresentationformsa}', "");
Expect(1, 64335, '\P{Blk=arabicpresentationformsa}', "");
Expect(0, 64335, '\P{^Blk=arabicpresentationformsa}', "");
Expect(1, 65023, '\p{Blk=	_Arabic	presentation Formsa}', "");
Expect(0, 65023, '\p{^Blk=	_Arabic	presentation Formsa}', "");
Expect(0, 65023, '\P{Blk=	_Arabic	presentation Formsa}', "");
Expect(1, 65023, '\P{^Blk=	_Arabic	presentation Formsa}', "");
Expect(0, 64335, '\p{Blk=	_Arabic	presentation Formsa}', "");
Expect(1, 64335, '\p{^Blk=	_Arabic	presentation Formsa}', "");
Expect(1, 64335, '\P{Blk=	_Arabic	presentation Formsa}', "");
Expect(0, 64335, '\P{^Blk=	_Arabic	presentation Formsa}', "");
Error('\p{Is_Block:	_-arabic-Presentation-forms:=A}');
Error('\P{Is_Block:	_-arabic-Presentation-forms:=A}');
Expect(1, 65023, '\p{Is_Block=arabicpresentationformsa}', "");
Expect(0, 65023, '\p{^Is_Block=arabicpresentationformsa}', "");
Expect(0, 65023, '\P{Is_Block=arabicpresentationformsa}', "");
Expect(1, 65023, '\P{^Is_Block=arabicpresentationformsa}', "");
Expect(0, 64335, '\p{Is_Block=arabicpresentationformsa}', "");
Expect(1, 64335, '\p{^Is_Block=arabicpresentationformsa}', "");
Expect(1, 64335, '\P{Is_Block=arabicpresentationformsa}', "");
Expect(0, 64335, '\P{^Is_Block=arabicpresentationformsa}', "");
Expect(1, 65023, '\p{Is_Block=-Arabic PRESENTATION forms A}', "");
Expect(0, 65023, '\p{^Is_Block=-Arabic PRESENTATION forms A}', "");
Expect(0, 65023, '\P{Is_Block=-Arabic PRESENTATION forms A}', "");
Expect(1, 65023, '\P{^Is_Block=-Arabic PRESENTATION forms A}', "");
Expect(0, 64335, '\p{Is_Block=-Arabic PRESENTATION forms A}', "");
Expect(1, 64335, '\p{^Is_Block=-Arabic PRESENTATION forms A}', "");
Expect(1, 64335, '\P{Is_Block=-Arabic PRESENTATION forms A}', "");
Expect(0, 64335, '\P{^Is_Block=-Arabic PRESENTATION forms A}', "");
Error('\p{Is_Blk=-Arabic_Presentation/a/forms A}');
Error('\P{Is_Blk=-Arabic_Presentation/a/forms A}');
Expect(1, 65023, '\p{Is_Blk=arabicpresentationformsa}', "");
Expect(0, 65023, '\p{^Is_Blk=arabicpresentationformsa}', "");
Expect(0, 65023, '\P{Is_Blk=arabicpresentationformsa}', "");
Expect(1, 65023, '\P{^Is_Blk=arabicpresentationformsa}', "");
Expect(0, 64335, '\p{Is_Blk=arabicpresentationformsa}', "");
Expect(1, 64335, '\p{^Is_Blk=arabicpresentationformsa}', "");
Expect(1, 64335, '\P{Is_Blk=arabicpresentationformsa}', "");
Expect(0, 64335, '\P{^Is_Blk=arabicpresentationformsa}', "");
Expect(1, 65023, '\p{Is_Blk=	arabic_PRESENTATION	Forms_A}', "");
Expect(0, 65023, '\p{^Is_Blk=	arabic_PRESENTATION	Forms_A}', "");
Expect(0, 65023, '\P{Is_Blk=	arabic_PRESENTATION	Forms_A}', "");
Expect(1, 65023, '\P{^Is_Blk=	arabic_PRESENTATION	Forms_A}', "");
Expect(0, 64335, '\p{Is_Blk=	arabic_PRESENTATION	Forms_A}', "");
Expect(1, 64335, '\p{^Is_Blk=	arabic_PRESENTATION	Forms_A}', "");
Expect(1, 64335, '\P{Is_Blk=	arabic_PRESENTATION	Forms_A}', "");
Expect(0, 64335, '\P{^Is_Blk=	arabic_PRESENTATION	Forms_A}', "");
Error('\p{Block:--taiLE:=}');
Error('\P{Block:--taiLE:=}');
Expect(1, 6527, '\p{Block=taile}', "");
Expect(0, 6527, '\p{^Block=taile}', "");
Expect(0, 6527, '\P{Block=taile}', "");
Expect(1, 6527, '\P{^Block=taile}', "");
Expect(0, 6479, '\p{Block=taile}', "");
Expect(1, 6479, '\p{^Block=taile}', "");
Expect(1, 6479, '\P{Block=taile}', "");
Expect(0, 6479, '\P{^Block=taile}', "");
Expect(1, 6527, '\p{Block=_tai_LE}', "");
Expect(0, 6527, '\p{^Block=_tai_LE}', "");
Expect(0, 6527, '\P{Block=_tai_LE}', "");
Expect(1, 6527, '\P{^Block=_tai_LE}', "");
Expect(0, 6479, '\p{Block=_tai_LE}', "");
Expect(1, 6479, '\p{^Block=_tai_LE}', "");
Expect(1, 6479, '\P{Block=_tai_LE}', "");
Expect(0, 6479, '\P{^Block=_tai_LE}', "");
Error('\p{Blk=_:=TaiLe}');
Error('\P{Blk=_:=TaiLe}');
Expect(1, 6527, '\p{Blk=taile}', "");
Expect(0, 6527, '\p{^Blk=taile}', "");
Expect(0, 6527, '\P{Blk=taile}', "");
Expect(1, 6527, '\P{^Blk=taile}', "");
Expect(0, 6479, '\p{Blk=taile}', "");
Expect(1, 6479, '\p{^Blk=taile}', "");
Expect(1, 6479, '\P{Blk=taile}', "");
Expect(0, 6479, '\P{^Blk=taile}', "");
Expect(1, 6527, '\p{Blk=	_TAI	le}', "");
Expect(0, 6527, '\p{^Blk=	_TAI	le}', "");
Expect(0, 6527, '\P{Blk=	_TAI	le}', "");
Expect(1, 6527, '\P{^Blk=	_TAI	le}', "");
Expect(0, 6479, '\p{Blk=	_TAI	le}', "");
Expect(1, 6479, '\p{^Blk=	_TAI	le}', "");
Expect(1, 6479, '\P{Blk=	_TAI	le}', "");
Expect(0, 6479, '\P{^Blk=	_TAI	le}', "");
Error('\p{Is_Block=_tai/a/Le}');
Error('\P{Is_Block=_tai/a/Le}');
Expect(1, 6527, '\p{Is_Block=taile}', "");
Expect(0, 6527, '\p{^Is_Block=taile}', "");
Expect(0, 6527, '\P{Is_Block=taile}', "");
Expect(1, 6527, '\P{^Is_Block=taile}', "");
Expect(0, 6479, '\p{Is_Block=taile}', "");
Expect(1, 6479, '\p{^Is_Block=taile}', "");
Expect(1, 6479, '\P{Is_Block=taile}', "");
Expect(0, 6479, '\P{^Is_Block=taile}', "");
Expect(1, 6527, '\p{Is_Block=--TAI	Le}', "");
Expect(0, 6527, '\p{^Is_Block=--TAI	Le}', "");
Expect(0, 6527, '\P{Is_Block=--TAI	Le}', "");
Expect(1, 6527, '\P{^Is_Block=--TAI	Le}', "");
Expect(0, 6479, '\p{Is_Block=--TAI	Le}', "");
Expect(1, 6479, '\p{^Is_Block=--TAI	Le}', "");
Expect(1, 6479, '\P{Is_Block=--TAI	Le}', "");
Expect(0, 6479, '\P{^Is_Block=--TAI	Le}', "");
Error('\p{Is_Blk=	TAIle/a/}');
Error('\P{Is_Blk=	TAIle/a/}');
Expect(1, 6527, '\p{Is_Blk=taile}', "");
Expect(0, 6527, '\p{^Is_Blk=taile}', "");
Expect(0, 6527, '\P{Is_Blk=taile}', "");
Expect(1, 6527, '\P{^Is_Blk=taile}', "");
Expect(0, 6479, '\p{Is_Blk=taile}', "");
Expect(1, 6479, '\p{^Is_Blk=taile}', "");
Expect(1, 6479, '\P{Is_Blk=taile}', "");
Expect(0, 6479, '\P{^Is_Blk=taile}', "");
Expect(1, 6527, '\p{Is_Blk=_-Tai Le}', "");
Expect(0, 6527, '\p{^Is_Blk=_-Tai Le}', "");
Expect(0, 6527, '\P{Is_Blk=_-Tai Le}', "");
Expect(1, 6527, '\P{^Is_Blk=_-Tai Le}', "");
Expect(0, 6479, '\p{Is_Blk=_-Tai Le}', "");
Expect(1, 6479, '\p{^Is_Blk=_-Tai Le}', "");
Expect(1, 6479, '\P{Is_Blk=_-Tai Le}', "");
Expect(0, 6479, '\P{^Is_Blk=_-Tai Le}', "");
Error('\p{Block=_:=Combiningdiacritical_Marks}');
Error('\P{Block=_:=Combiningdiacritical_Marks}');
Expect(1, 879, '\p{Block=combiningdiacriticalmarks}', "");
Expect(0, 879, '\p{^Block=combiningdiacriticalmarks}', "");
Expect(0, 879, '\P{Block=combiningdiacriticalmarks}', "");
Expect(1, 879, '\P{^Block=combiningdiacriticalmarks}', "");
Expect(0, 767, '\p{Block=combiningdiacriticalmarks}', "");
Expect(1, 767, '\p{^Block=combiningdiacriticalmarks}', "");
Expect(1, 767, '\P{Block=combiningdiacriticalmarks}', "");
Expect(0, 767, '\P{^Block=combiningdiacriticalmarks}', "");
Expect(1, 879, '\p{Block=_Combining Diacritical_Marks}', "");
Expect(0, 879, '\p{^Block=_Combining Diacritical_Marks}', "");
Expect(0, 879, '\P{Block=_Combining Diacritical_Marks}', "");
Expect(1, 879, '\P{^Block=_Combining Diacritical_Marks}', "");
Expect(0, 767, '\p{Block=_Combining Diacritical_Marks}', "");
Expect(1, 767, '\p{^Block=_Combining Diacritical_Marks}', "");
Expect(1, 767, '\P{Block=_Combining Diacritical_Marks}', "");
Expect(0, 767, '\P{^Block=_Combining Diacritical_Marks}', "");
Error('\p{Blk=_:=Combining-DIACRITICAL marks}');
Error('\P{Blk=_:=Combining-DIACRITICAL marks}');
Expect(1, 879, '\p{Blk=combiningdiacriticalmarks}', "");
Expect(0, 879, '\p{^Blk=combiningdiacriticalmarks}', "");
Expect(0, 879, '\P{Blk=combiningdiacriticalmarks}', "");
Expect(1, 879, '\P{^Blk=combiningdiacriticalmarks}', "");
Expect(0, 767, '\p{Blk=combiningdiacriticalmarks}', "");
Expect(1, 767, '\p{^Blk=combiningdiacriticalmarks}', "");
Expect(1, 767, '\P{Blk=combiningdiacriticalmarks}', "");
Expect(0, 767, '\P{^Blk=combiningdiacriticalmarks}', "");
Expect(1, 879, '\p{Blk=_ combiningdiacritical	Marks}', "");
Expect(0, 879, '\p{^Blk=_ combiningdiacritical	Marks}', "");
Expect(0, 879, '\P{Blk=_ combiningdiacritical	Marks}', "");
Expect(1, 879, '\P{^Blk=_ combiningdiacritical	Marks}', "");
Expect(0, 767, '\p{Blk=_ combiningdiacritical	Marks}', "");
Expect(1, 767, '\p{^Blk=_ combiningdiacritical	Marks}', "");
Expect(1, 767, '\P{Blk=_ combiningdiacritical	Marks}', "");
Expect(0, 767, '\P{^Blk=_ combiningdiacritical	Marks}', "");
Error('\p{Is_Block=:=_-combining	Diacritical_MARKS}');
Error('\P{Is_Block=:=_-combining	Diacritical_MARKS}');
Expect(1, 879, '\p{Is_Block=combiningdiacriticalmarks}', "");
Expect(0, 879, '\p{^Is_Block=combiningdiacriticalmarks}', "");
Expect(0, 879, '\P{Is_Block=combiningdiacriticalmarks}', "");
Expect(1, 879, '\P{^Is_Block=combiningdiacriticalmarks}', "");
Expect(0, 767, '\p{Is_Block=combiningdiacriticalmarks}', "");
Expect(1, 767, '\p{^Is_Block=combiningdiacriticalmarks}', "");
Expect(1, 767, '\P{Is_Block=combiningdiacriticalmarks}', "");
Expect(0, 767, '\P{^Is_Block=combiningdiacriticalmarks}', "");
Expect(1, 879, '\p{Is_Block:			COMBINING-Diacritical	MARKS}', "");
Expect(0, 879, '\p{^Is_Block:			COMBINING-Diacritical	MARKS}', "");
Expect(0, 879, '\P{Is_Block:			COMBINING-Diacritical	MARKS}', "");
Expect(1, 879, '\P{^Is_Block:			COMBINING-Diacritical	MARKS}', "");
Expect(0, 767, '\p{Is_Block:			COMBINING-Diacritical	MARKS}', "");
Expect(1, 767, '\p{^Is_Block:			COMBINING-Diacritical	MARKS}', "");
Expect(1, 767, '\P{Is_Block:			COMBINING-Diacritical	MARKS}', "");
Expect(0, 767, '\P{^Is_Block:			COMBINING-Diacritical	MARKS}', "");
Error('\p{Is_Blk=:=- Combining DIACRITICAL_MARKS}');
Error('\P{Is_Blk=:=- Combining DIACRITICAL_MARKS}');
Expect(1, 879, '\p{Is_Blk:	combiningdiacriticalmarks}', "");
Expect(0, 879, '\p{^Is_Blk:	combiningdiacriticalmarks}', "");
Expect(0, 879, '\P{Is_Blk:	combiningdiacriticalmarks}', "");
Expect(1, 879, '\P{^Is_Blk:	combiningdiacriticalmarks}', "");
Expect(0, 767, '\p{Is_Blk:	combiningdiacriticalmarks}', "");
Expect(1, 767, '\p{^Is_Blk:	combiningdiacriticalmarks}', "");
Expect(1, 767, '\P{Is_Blk:	combiningdiacriticalmarks}', "");
Expect(0, 767, '\P{^Is_Blk:	combiningdiacriticalmarks}', "");
Expect(1, 879, '\p{Is_Blk=CombiningDiacritical	Marks}', "");
Expect(0, 879, '\p{^Is_Blk=CombiningDiacritical	Marks}', "");
Expect(0, 879, '\P{Is_Blk=CombiningDiacritical	Marks}', "");
Expect(1, 879, '\P{^Is_Blk=CombiningDiacritical	Marks}', "");
Expect(0, 767, '\p{Is_Blk=CombiningDiacritical	Marks}', "");
Expect(1, 767, '\p{^Is_Blk=CombiningDiacritical	Marks}', "");
Expect(1, 767, '\P{Is_Blk=CombiningDiacritical	Marks}', "");
Expect(0, 767, '\P{^Is_Blk=CombiningDiacritical	Marks}', "");
Error('\p{Block: _LATIN/a/Extended b}');
Error('\P{Block: _LATIN/a/Extended b}');
Expect(1, 591, '\p{Block=latinextendedb}', "");
Expect(0, 591, '\p{^Block=latinextendedb}', "");
Expect(0, 591, '\P{Block=latinextendedb}', "");
Expect(1, 591, '\P{^Block=latinextendedb}', "");
Expect(0, 383, '\p{Block=latinextendedb}', "");
Expect(1, 383, '\p{^Block=latinextendedb}', "");
Expect(1, 383, '\P{Block=latinextendedb}', "");
Expect(0, 383, '\P{^Block=latinextendedb}', "");
Expect(1, 591, '\p{Block= 	Latin-EXTENDED_b}', "");
Expect(0, 591, '\p{^Block= 	Latin-EXTENDED_b}', "");
Expect(0, 591, '\P{Block= 	Latin-EXTENDED_b}', "");
Expect(1, 591, '\P{^Block= 	Latin-EXTENDED_b}', "");
Expect(0, 383, '\p{Block= 	Latin-EXTENDED_b}', "");
Expect(1, 383, '\p{^Block= 	Latin-EXTENDED_b}', "");
Expect(1, 383, '\P{Block= 	Latin-EXTENDED_b}', "");
Expect(0, 383, '\P{^Block= 	Latin-EXTENDED_b}', "");
Error('\p{Blk=- Latin_EXTENDED/a/B}');
Error('\P{Blk=- Latin_EXTENDED/a/B}');
Expect(1, 591, '\p{Blk=latinextendedb}', "");
Expect(0, 591, '\p{^Blk=latinextendedb}', "");
Expect(0, 591, '\P{Blk=latinextendedb}', "");
Expect(1, 591, '\P{^Blk=latinextendedb}', "");
Expect(0, 383, '\p{Blk=latinextendedb}', "");
Expect(1, 383, '\p{^Blk=latinextendedb}', "");
Expect(1, 383, '\P{Blk=latinextendedb}', "");
Expect(0, 383, '\P{^Blk=latinextendedb}', "");
Expect(1, 591, '\p{Blk:   LATIN_extended-B}', "");
Expect(0, 591, '\p{^Blk:   LATIN_extended-B}', "");
Expect(0, 591, '\P{Blk:   LATIN_extended-B}', "");
Expect(1, 591, '\P{^Blk:   LATIN_extended-B}', "");
Expect(0, 383, '\p{Blk:   LATIN_extended-B}', "");
Expect(1, 383, '\p{^Blk:   LATIN_extended-B}', "");
Expect(1, 383, '\P{Blk:   LATIN_extended-B}', "");
Expect(0, 383, '\P{^Blk:   LATIN_extended-B}', "");
Error('\p{Is_Block=_Latin/a/Extended-b}');
Error('\P{Is_Block=_Latin/a/Extended-b}');
Expect(1, 591, '\p{Is_Block=latinextendedb}', "");
Expect(0, 591, '\p{^Is_Block=latinextendedb}', "");
Expect(0, 591, '\P{Is_Block=latinextendedb}', "");
Expect(1, 591, '\P{^Is_Block=latinextendedb}', "");
Expect(0, 383, '\p{Is_Block=latinextendedb}', "");
Expect(1, 383, '\p{^Is_Block=latinextendedb}', "");
Expect(1, 383, '\P{Is_Block=latinextendedb}', "");
Expect(0, 383, '\P{^Is_Block=latinextendedb}', "");
Expect(1, 591, '\p{Is_Block:   Latin-extended_b}', "");
Expect(0, 591, '\p{^Is_Block:   Latin-extended_b}', "");
Expect(0, 591, '\P{Is_Block:   Latin-extended_b}', "");
Expect(1, 591, '\P{^Is_Block:   Latin-extended_b}', "");
Expect(0, 383, '\p{Is_Block:   Latin-extended_b}', "");
Expect(1, 383, '\p{^Is_Block:   Latin-extended_b}', "");
Expect(1, 383, '\P{Is_Block:   Latin-extended_b}', "");
Expect(0, 383, '\P{^Is_Block:   Latin-extended_b}', "");
Error('\p{Is_Blk=_:=latin_EXTENDEDB}');
Error('\P{Is_Blk=_:=latin_EXTENDEDB}');
Expect(1, 591, '\p{Is_Blk=latinextendedb}', "");
Expect(0, 591, '\p{^Is_Blk=latinextendedb}', "");
Expect(0, 591, '\P{Is_Blk=latinextendedb}', "");
Expect(1, 591, '\P{^Is_Blk=latinextendedb}', "");
Expect(0, 383, '\p{Is_Blk=latinextendedb}', "");
Expect(1, 383, '\p{^Is_Blk=latinextendedb}', "");
Expect(1, 383, '\P{Is_Blk=latinextendedb}', "");
Expect(0, 383, '\P{^Is_Blk=latinextendedb}', "");
Expect(1, 591, '\p{Is_Blk=	-latin	extendedb}', "");
Expect(0, 591, '\p{^Is_Blk=	-latin	extendedb}', "");
Expect(0, 591, '\P{Is_Blk=	-latin	extendedb}', "");
Expect(1, 591, '\P{^Is_Blk=	-latin	extendedb}', "");
Expect(0, 383, '\p{Is_Blk=	-latin	extendedb}', "");
Expect(1, 383, '\p{^Is_Blk=	-latin	extendedb}', "");
Expect(1, 383, '\P{Is_Blk=	-latin	extendedb}', "");
Expect(0, 383, '\P{^Is_Blk=	-latin	extendedb}', "");
Error('\p{Block=_playing/a/CARDS}');
Error('\P{Block=_playing/a/CARDS}');
Expect(1, 127231, '\p{Block=playingcards}', "");
Expect(0, 127231, '\p{^Block=playingcards}', "");
Expect(0, 127231, '\P{Block=playingcards}', "");
Expect(1, 127231, '\P{^Block=playingcards}', "");
Expect(0, 127135, '\p{Block=playingcards}', "");
Expect(1, 127135, '\p{^Block=playingcards}', "");
Expect(1, 127135, '\P{Block=playingcards}', "");
Expect(0, 127135, '\P{^Block=playingcards}', "");
Expect(1, 127231, '\p{Block= Playing-Cards}', "");
Expect(0, 127231, '\p{^Block= Playing-Cards}', "");
Expect(0, 127231, '\P{Block= Playing-Cards}', "");
Expect(1, 127231, '\P{^Block= Playing-Cards}', "");
Expect(0, 127135, '\p{Block= Playing-Cards}', "");
Expect(1, 127135, '\p{^Block= Playing-Cards}', "");
Expect(1, 127135, '\P{Block= Playing-Cards}', "");
Expect(0, 127135, '\P{^Block= Playing-Cards}', "");
Error('\p{Blk=/a/PLAYINGCARDS}');
Error('\P{Blk=/a/PLAYINGCARDS}');
Expect(1, 127231, '\p{Blk=playingcards}', "");
Expect(0, 127231, '\p{^Blk=playingcards}', "");
Expect(0, 127231, '\P{Blk=playingcards}', "");
Expect(1, 127231, '\P{^Blk=playingcards}', "");
Expect(0, 127135, '\p{Blk=playingcards}', "");
Expect(1, 127135, '\p{^Blk=playingcards}', "");
Expect(1, 127135, '\P{Blk=playingcards}', "");
Expect(0, 127135, '\P{^Blk=playingcards}', "");
Expect(1, 127231, '\p{Blk=	-Playing_Cards}', "");
Expect(0, 127231, '\p{^Blk=	-Playing_Cards}', "");
Expect(0, 127231, '\P{Blk=	-Playing_Cards}', "");
Expect(1, 127231, '\P{^Blk=	-Playing_Cards}', "");
Expect(0, 127135, '\p{Blk=	-Playing_Cards}', "");
Expect(1, 127135, '\p{^Blk=	-Playing_Cards}', "");
Expect(1, 127135, '\P{Blk=	-Playing_Cards}', "");
Expect(0, 127135, '\P{^Blk=	-Playing_Cards}', "");
Error('\p{Is_Block=:=PlayingCARDS}');
Error('\P{Is_Block=:=PlayingCARDS}');
Expect(1, 127231, '\p{Is_Block=playingcards}', "");
Expect(0, 127231, '\p{^Is_Block=playingcards}', "");
Expect(0, 127231, '\P{Is_Block=playingcards}', "");
Expect(1, 127231, '\P{^Is_Block=playingcards}', "");
Expect(0, 127135, '\p{Is_Block=playingcards}', "");
Expect(1, 127135, '\p{^Is_Block=playingcards}', "");
Expect(1, 127135, '\P{Is_Block=playingcards}', "");
Expect(0, 127135, '\P{^Is_Block=playingcards}', "");
Expect(1, 127231, '\p{Is_Block= PLAYING	CARDS}', "");
Expect(0, 127231, '\p{^Is_Block= PLAYING	CARDS}', "");
Expect(0, 127231, '\P{Is_Block= PLAYING	CARDS}', "");
Expect(1, 127231, '\P{^Is_Block= PLAYING	CARDS}', "");
Expect(0, 127135, '\p{Is_Block= PLAYING	CARDS}', "");
Expect(1, 127135, '\p{^Is_Block= PLAYING	CARDS}', "");
Expect(1, 127135, '\P{Is_Block= PLAYING	CARDS}', "");
Expect(0, 127135, '\P{^Is_Block= PLAYING	CARDS}', "");
Error('\p{Is_Blk= /a/Playing-Cards}');
Error('\P{Is_Blk= /a/Playing-Cards}');
Expect(1, 127231, '\p{Is_Blk=playingcards}', "");
Expect(0, 127231, '\p{^Is_Blk=playingcards}', "");
Expect(0, 127231, '\P{Is_Blk=playingcards}', "");
Expect(1, 127231, '\P{^Is_Blk=playingcards}', "");
Expect(0, 127135, '\p{Is_Blk=playingcards}', "");
Expect(1, 127135, '\p{^Is_Blk=playingcards}', "");
Expect(1, 127135, '\P{Is_Blk=playingcards}', "");
Expect(0, 127135, '\P{^Is_Blk=playingcards}', "");
Expect(1, 127231, '\p{Is_Blk=	_playing Cards}', "");
Expect(0, 127231, '\p{^Is_Blk=	_playing Cards}', "");
Expect(0, 127231, '\P{Is_Blk=	_playing Cards}', "");
Expect(1, 127231, '\P{^Is_Blk=	_playing Cards}', "");
Expect(0, 127135, '\p{Is_Blk=	_playing Cards}', "");
Expect(1, 127135, '\p{^Is_Blk=	_playing Cards}', "");
Expect(1, 127135, '\P{Is_Blk=	_playing Cards}', "");
Expect(0, 127135, '\P{^Is_Blk=	_playing Cards}', "");
Error('\p{Block=:= _supplementalArrowsA}');
Error('\P{Block=:= _supplementalArrowsA}');
Expect(1, 10239, '\p{Block=supplementalarrowsa}', "");
Expect(0, 10239, '\p{^Block=supplementalarrowsa}', "");
Expect(0, 10239, '\P{Block=supplementalarrowsa}', "");
Expect(1, 10239, '\P{^Block=supplementalarrowsa}', "");
Expect(0, 10223, '\p{Block=supplementalarrowsa}', "");
Expect(1, 10223, '\p{^Block=supplementalarrowsa}', "");
Expect(1, 10223, '\P{Block=supplementalarrowsa}', "");
Expect(0, 10223, '\P{^Block=supplementalarrowsa}', "");
Expect(1, 10239, '\p{Block=	SupplementalArrows_A}', "");
Expect(0, 10239, '\p{^Block=	SupplementalArrows_A}', "");
Expect(0, 10239, '\P{Block=	SupplementalArrows_A}', "");
Expect(1, 10239, '\P{^Block=	SupplementalArrows_A}', "");
Expect(0, 10223, '\p{Block=	SupplementalArrows_A}', "");
Expect(1, 10223, '\p{^Block=	SupplementalArrows_A}', "");
Expect(1, 10223, '\P{Block=	SupplementalArrows_A}', "");
Expect(0, 10223, '\P{^Block=	SupplementalArrows_A}', "");
Error('\p{Blk=/a/__SUPPLEMENTAL	Arrows	A}');
Error('\P{Blk=/a/__SUPPLEMENTAL	Arrows	A}');
Expect(1, 10239, '\p{Blk=supplementalarrowsa}', "");
Expect(0, 10239, '\p{^Blk=supplementalarrowsa}', "");
Expect(0, 10239, '\P{Blk=supplementalarrowsa}', "");
Expect(1, 10239, '\P{^Blk=supplementalarrowsa}', "");
Expect(0, 10223, '\p{Blk=supplementalarrowsa}', "");
Expect(1, 10223, '\p{^Blk=supplementalarrowsa}', "");
Expect(1, 10223, '\P{Blk=supplementalarrowsa}', "");
Expect(0, 10223, '\P{^Blk=supplementalarrowsa}', "");
Expect(1, 10239, '\p{Blk=-Supplemental arrows A}', "");
Expect(0, 10239, '\p{^Blk=-Supplemental arrows A}', "");
Expect(0, 10239, '\P{Blk=-Supplemental arrows A}', "");
Expect(1, 10239, '\P{^Blk=-Supplemental arrows A}', "");
Expect(0, 10223, '\p{Blk=-Supplemental arrows A}', "");
Expect(1, 10223, '\p{^Blk=-Supplemental arrows A}', "");
Expect(1, 10223, '\P{Blk=-Supplemental arrows A}', "");
Expect(0, 10223, '\P{^Blk=-Supplemental arrows A}', "");
Error('\p{Is_Block=/a/ SUPPLEMENTAL_arrows-A}');
Error('\P{Is_Block=/a/ SUPPLEMENTAL_arrows-A}');
Expect(1, 10239, '\p{Is_Block=supplementalarrowsa}', "");
Expect(0, 10239, '\p{^Is_Block=supplementalarrowsa}', "");
Expect(0, 10239, '\P{Is_Block=supplementalarrowsa}', "");
Expect(1, 10239, '\P{^Is_Block=supplementalarrowsa}', "");
Expect(0, 10223, '\p{Is_Block=supplementalarrowsa}', "");
Expect(1, 10223, '\p{^Is_Block=supplementalarrowsa}', "");
Expect(1, 10223, '\P{Is_Block=supplementalarrowsa}', "");
Expect(0, 10223, '\P{^Is_Block=supplementalarrowsa}', "");
Expect(1, 10239, '\p{Is_Block= _Supplemental Arrows-A}', "");
Expect(0, 10239, '\p{^Is_Block= _Supplemental Arrows-A}', "");
Expect(0, 10239, '\P{Is_Block= _Supplemental Arrows-A}', "");
Expect(1, 10239, '\P{^Is_Block= _Supplemental Arrows-A}', "");
Expect(0, 10223, '\p{Is_Block= _Supplemental Arrows-A}', "");
Expect(1, 10223, '\p{^Is_Block= _Supplemental Arrows-A}', "");
Expect(1, 10223, '\P{Is_Block= _Supplemental Arrows-A}', "");
Expect(0, 10223, '\P{^Is_Block= _Supplemental Arrows-A}', "");
Error('\p{Is_Blk=--supplemental	Arrows:=A}');
Error('\P{Is_Blk=--supplemental	Arrows:=A}');
Expect(1, 10239, '\p{Is_Blk=supplementalarrowsa}', "");
Expect(0, 10239, '\p{^Is_Blk=supplementalarrowsa}', "");
Expect(0, 10239, '\P{Is_Blk=supplementalarrowsa}', "");
Expect(1, 10239, '\P{^Is_Blk=supplementalarrowsa}', "");
Expect(0, 10223, '\p{Is_Blk=supplementalarrowsa}', "");
Expect(1, 10223, '\p{^Is_Blk=supplementalarrowsa}', "");
Expect(1, 10223, '\P{Is_Blk=supplementalarrowsa}', "");
Expect(0, 10223, '\P{^Is_Blk=supplementalarrowsa}', "");
Expect(1, 10239, '\p{Is_Blk=  SUPPLEMENTALarrows-A}', "");
Expect(0, 10239, '\p{^Is_Blk=  SUPPLEMENTALarrows-A}', "");
Expect(0, 10239, '\P{Is_Blk=  SUPPLEMENTALarrows-A}', "");
Expect(1, 10239, '\P{^Is_Blk=  SUPPLEMENTALarrows-A}', "");
Expect(0, 10223, '\p{Is_Blk=  SUPPLEMENTALarrows-A}', "");
Expect(1, 10223, '\p{^Is_Blk=  SUPPLEMENTALarrows-A}', "");
Expect(1, 10223, '\P{Is_Blk=  SUPPLEMENTALarrows-A}', "");
Expect(0, 10223, '\P{^Is_Blk=  SUPPLEMENTALarrows-A}', "");
Error('\p{Block=/a/-	Javanese}');
Error('\P{Block=/a/-	Javanese}');
Expect(1, 43487, '\p{Block=javanese}', "");
Expect(0, 43487, '\p{^Block=javanese}', "");
Expect(0, 43487, '\P{Block=javanese}', "");
Expect(1, 43487, '\P{^Block=javanese}', "");
Expect(0, 43391, '\p{Block=javanese}', "");
Expect(1, 43391, '\p{^Block=javanese}', "");
Expect(1, 43391, '\P{Block=javanese}', "");
Expect(0, 43391, '\P{^Block=javanese}', "");
Expect(1, 43487, '\p{Block=-JAVANESE}', "");
Expect(0, 43487, '\p{^Block=-JAVANESE}', "");
Expect(0, 43487, '\P{Block=-JAVANESE}', "");
Expect(1, 43487, '\P{^Block=-JAVANESE}', "");
Expect(0, 43391, '\p{Block=-JAVANESE}', "");
Expect(1, 43391, '\p{^Block=-JAVANESE}', "");
Expect(1, 43391, '\P{Block=-JAVANESE}', "");
Expect(0, 43391, '\P{^Block=-JAVANESE}', "");
Error('\p{Blk=/a/-	JAVANESE}');
Error('\P{Blk=/a/-	JAVANESE}');
Expect(1, 43487, '\p{Blk=javanese}', "");
Expect(0, 43487, '\p{^Blk=javanese}', "");
Expect(0, 43487, '\P{Blk=javanese}', "");
Expect(1, 43487, '\P{^Blk=javanese}', "");
Expect(0, 43391, '\p{Blk=javanese}', "");
Expect(1, 43391, '\p{^Blk=javanese}', "");
Expect(1, 43391, '\P{Blk=javanese}', "");
Expect(0, 43391, '\P{^Blk=javanese}', "");
Expect(1, 43487, '\p{Blk=-	JAVANESE}', "");
Expect(0, 43487, '\p{^Blk=-	JAVANESE}', "");
Expect(0, 43487, '\P{Blk=-	JAVANESE}', "");
Expect(1, 43487, '\P{^Blk=-	JAVANESE}', "");
Expect(0, 43391, '\p{Blk=-	JAVANESE}', "");
Expect(1, 43391, '\p{^Blk=-	JAVANESE}', "");
Expect(1, 43391, '\P{Blk=-	JAVANESE}', "");
Expect(0, 43391, '\P{^Blk=-	JAVANESE}', "");
Error('\p{Is_Block=-:=javanese}');
Error('\P{Is_Block=-:=javanese}');
Expect(1, 43487, '\p{Is_Block=javanese}', "");
Expect(0, 43487, '\p{^Is_Block=javanese}', "");
Expect(0, 43487, '\P{Is_Block=javanese}', "");
Expect(1, 43487, '\P{^Is_Block=javanese}', "");
Expect(0, 43391, '\p{Is_Block=javanese}', "");
Expect(1, 43391, '\p{^Is_Block=javanese}', "");
Expect(1, 43391, '\P{Is_Block=javanese}', "");
Expect(0, 43391, '\P{^Is_Block=javanese}', "");
Expect(1, 43487, '\p{Is_Block=_javanese}', "");
Expect(0, 43487, '\p{^Is_Block=_javanese}', "");
Expect(0, 43487, '\P{Is_Block=_javanese}', "");
Expect(1, 43487, '\P{^Is_Block=_javanese}', "");
Expect(0, 43391, '\p{Is_Block=_javanese}', "");
Expect(1, 43391, '\p{^Is_Block=_javanese}', "");
Expect(1, 43391, '\P{Is_Block=_javanese}', "");
Expect(0, 43391, '\P{^Is_Block=_javanese}', "");
Error('\p{Is_Blk=	JAVANESE:=}');
Error('\P{Is_Blk=	JAVANESE:=}');
Expect(1, 43487, '\p{Is_Blk=javanese}', "");
Expect(0, 43487, '\p{^Is_Blk=javanese}', "");
Expect(0, 43487, '\P{Is_Blk=javanese}', "");
Expect(1, 43487, '\P{^Is_Blk=javanese}', "");
Expect(0, 43391, '\p{Is_Blk=javanese}', "");
Expect(1, 43391, '\p{^Is_Blk=javanese}', "");
Expect(1, 43391, '\P{Is_Blk=javanese}', "");
Expect(0, 43391, '\P{^Is_Blk=javanese}', "");
Expect(1, 43487, '\p{Is_Blk:  Javanese}', "");
Expect(0, 43487, '\p{^Is_Blk:  Javanese}', "");
Expect(0, 43487, '\P{Is_Blk:  Javanese}', "");
Expect(1, 43487, '\P{^Is_Blk:  Javanese}', "");
Expect(0, 43391, '\p{Is_Blk:  Javanese}', "");
Expect(1, 43391, '\p{^Is_Blk:  Javanese}', "");
Expect(1, 43391, '\P{Is_Blk:  Javanese}', "");
Expect(0, 43391, '\P{^Is_Blk:  Javanese}', "");
Error('\p{Block= :=BRAHMI}');
Error('\P{Block= :=BRAHMI}');
Expect(1, 69759, '\p{Block=brahmi}', "");
Expect(0, 69759, '\p{^Block=brahmi}', "");
Expect(0, 69759, '\P{Block=brahmi}', "");
Expect(1, 69759, '\P{^Block=brahmi}', "");
Expect(0, 69631, '\p{Block=brahmi}', "");
Expect(1, 69631, '\p{^Block=brahmi}', "");
Expect(1, 69631, '\P{Block=brahmi}', "");
Expect(0, 69631, '\P{^Block=brahmi}', "");
Expect(1, 69759, '\p{Block=-BRAHMI}', "");
Expect(0, 69759, '\p{^Block=-BRAHMI}', "");
Expect(0, 69759, '\P{Block=-BRAHMI}', "");
Expect(1, 69759, '\P{^Block=-BRAHMI}', "");
Expect(0, 69631, '\p{Block=-BRAHMI}', "");
Expect(1, 69631, '\p{^Block=-BRAHMI}', "");
Expect(1, 69631, '\P{Block=-BRAHMI}', "");
Expect(0, 69631, '\P{^Block=-BRAHMI}', "");
Error('\p{Blk=/a/__BRAHMI}');
Error('\P{Blk=/a/__BRAHMI}');
Expect(1, 69759, '\p{Blk=brahmi}', "");
Expect(0, 69759, '\p{^Blk=brahmi}', "");
Expect(0, 69759, '\P{Blk=brahmi}', "");
Expect(1, 69759, '\P{^Blk=brahmi}', "");
Expect(0, 69631, '\p{Blk=brahmi}', "");
Expect(1, 69631, '\p{^Blk=brahmi}', "");
Expect(1, 69631, '\P{Blk=brahmi}', "");
Expect(0, 69631, '\P{^Blk=brahmi}', "");
Expect(1, 69759, '\p{Blk=--Brahmi}', "");
Expect(0, 69759, '\p{^Blk=--Brahmi}', "");
Expect(0, 69759, '\P{Blk=--Brahmi}', "");
Expect(1, 69759, '\P{^Blk=--Brahmi}', "");
Expect(0, 69631, '\p{Blk=--Brahmi}', "");
Expect(1, 69631, '\p{^Blk=--Brahmi}', "");
Expect(1, 69631, '\P{Blk=--Brahmi}', "");
Expect(0, 69631, '\P{^Blk=--Brahmi}', "");
Error('\p{Is_Block=--Brahmi/a/}');
Error('\P{Is_Block=--Brahmi/a/}');
Expect(1, 69759, '\p{Is_Block=brahmi}', "");
Expect(0, 69759, '\p{^Is_Block=brahmi}', "");
Expect(0, 69759, '\P{Is_Block=brahmi}', "");
Expect(1, 69759, '\P{^Is_Block=brahmi}', "");
Expect(0, 69631, '\p{Is_Block=brahmi}', "");
Expect(1, 69631, '\p{^Is_Block=brahmi}', "");
Expect(1, 69631, '\P{Is_Block=brahmi}', "");
Expect(0, 69631, '\P{^Is_Block=brahmi}', "");
Error('\p{Is_Blk= Brahmi:=}');
Error('\P{Is_Blk= Brahmi:=}');
Expect(1, 69759, '\p{Is_Blk=brahmi}', "");
Expect(0, 69759, '\p{^Is_Blk=brahmi}', "");
Expect(0, 69759, '\P{Is_Blk=brahmi}', "");
Expect(1, 69759, '\P{^Is_Blk=brahmi}', "");
Expect(0, 69631, '\p{Is_Blk=brahmi}', "");
Expect(1, 69631, '\p{^Is_Blk=brahmi}', "");
Expect(1, 69631, '\P{Is_Blk=brahmi}', "");
Expect(0, 69631, '\P{^Is_Blk=brahmi}', "");
Expect(1, 69759, '\p{Is_Blk= _Brahmi}', "");
Expect(0, 69759, '\p{^Is_Blk= _Brahmi}', "");
Expect(0, 69759, '\P{Is_Blk= _Brahmi}', "");
Expect(1, 69759, '\P{^Is_Blk= _Brahmi}', "");
Expect(0, 69631, '\p{Is_Blk= _Brahmi}', "");
Expect(1, 69631, '\p{^Is_Blk= _Brahmi}', "");
Expect(1, 69631, '\P{Is_Blk= _Brahmi}', "");
Expect(0, 69631, '\P{^Is_Blk= _Brahmi}', "");
Error('\p{Block= SupplementaryPrivate/a/USEArea	a}');
Error('\P{Block= SupplementaryPrivate/a/USEArea	a}');
Expect(1, 983040, '\p{Block=supplementaryprivateuseareaa}', "");
Expect(0, 983040, '\p{^Block=supplementaryprivateuseareaa}', "");
Expect(0, 983040, '\P{Block=supplementaryprivateuseareaa}', "");
Expect(1, 983040, '\P{^Block=supplementaryprivateuseareaa}', "");
Expect(0, 1, '\p{Block=supplementaryprivateuseareaa}', "");
Expect(1, 1, '\p{^Block=supplementaryprivateuseareaa}', "");
Expect(1, 1, '\P{Block=supplementaryprivateuseareaa}', "");
Expect(0, 1, '\P{^Block=supplementaryprivateuseareaa}', "");
Expect(1, 983040, '\p{Block=__SUPPLEMENTARYPRIVATE_Use area-A}', "");
Expect(0, 983040, '\p{^Block=__SUPPLEMENTARYPRIVATE_Use area-A}', "");
Expect(0, 983040, '\P{Block=__SUPPLEMENTARYPRIVATE_Use area-A}', "");
Expect(1, 983040, '\P{^Block=__SUPPLEMENTARYPRIVATE_Use area-A}', "");
Expect(0, 1, '\p{Block=__SUPPLEMENTARYPRIVATE_Use area-A}', "");
Expect(1, 1, '\p{^Block=__SUPPLEMENTARYPRIVATE_Use area-A}', "");
Expect(1, 1, '\P{Block=__SUPPLEMENTARYPRIVATE_Use area-A}', "");
Expect(0, 1, '\P{^Block=__SUPPLEMENTARYPRIVATE_Use area-A}', "");
Error('\p{Blk= 	SUPPLEMENTARY Private:=USE_Area	A}');
Error('\P{Blk= 	SUPPLEMENTARY Private:=USE_Area	A}');
Expect(1, 983040, '\p{Blk=supplementaryprivateuseareaa}', "");
Expect(0, 983040, '\p{^Blk=supplementaryprivateuseareaa}', "");
Expect(0, 983040, '\P{Blk=supplementaryprivateuseareaa}', "");
Expect(1, 983040, '\P{^Blk=supplementaryprivateuseareaa}', "");
Expect(0, 1, '\p{Blk=supplementaryprivateuseareaa}', "");
Expect(1, 1, '\p{^Blk=supplementaryprivateuseareaa}', "");
Expect(1, 1, '\P{Blk=supplementaryprivateuseareaa}', "");
Expect(0, 1, '\P{^Blk=supplementaryprivateuseareaa}', "");
Expect(1, 983040, '\p{Blk=	-supplementary_PRIVATE_Use Area_A}', "");
Expect(0, 983040, '\p{^Blk=	-supplementary_PRIVATE_Use Area_A}', "");
Expect(0, 983040, '\P{Blk=	-supplementary_PRIVATE_Use Area_A}', "");
Expect(1, 983040, '\P{^Blk=	-supplementary_PRIVATE_Use Area_A}', "");
Expect(0, 1, '\p{Blk=	-supplementary_PRIVATE_Use Area_A}', "");
Expect(1, 1, '\p{^Blk=	-supplementary_PRIVATE_Use Area_A}', "");
Expect(1, 1, '\P{Blk=	-supplementary_PRIVATE_Use Area_A}', "");
Expect(0, 1, '\P{^Blk=	-supplementary_PRIVATE_Use Area_A}', "");
Error('\p{Is_Block= 	Supplementary	Private Use-area	A:=}');
Error('\P{Is_Block= 	Supplementary	Private Use-area	A:=}');
Expect(1, 983040, '\p{Is_Block=supplementaryprivateuseareaa}', "");
Expect(0, 983040, '\p{^Is_Block=supplementaryprivateuseareaa}', "");
Expect(0, 983040, '\P{Is_Block=supplementaryprivateuseareaa}', "");
Expect(1, 983040, '\P{^Is_Block=supplementaryprivateuseareaa}', "");
Expect(0, 1, '\p{Is_Block=supplementaryprivateuseareaa}', "");
Expect(1, 1, '\p{^Is_Block=supplementaryprivateuseareaa}', "");
Expect(1, 1, '\P{Is_Block=supplementaryprivateuseareaa}', "");
Expect(0, 1, '\P{^Is_Block=supplementaryprivateuseareaa}', "");
Expect(1, 983040, '\p{Is_Block=	 SUPPLEMENTARY_PRIVATE-Use_Area_A}', "");
Expect(0, 983040, '\p{^Is_Block=	 SUPPLEMENTARY_PRIVATE-Use_Area_A}', "");
Expect(0, 983040, '\P{Is_Block=	 SUPPLEMENTARY_PRIVATE-Use_Area_A}', "");
Expect(1, 983040, '\P{^Is_Block=	 SUPPLEMENTARY_PRIVATE-Use_Area_A}', "");
Expect(0, 1, '\p{Is_Block=	 SUPPLEMENTARY_PRIVATE-Use_Area_A}', "");
Expect(1, 1, '\p{^Is_Block=	 SUPPLEMENTARY_PRIVATE-Use_Area_A}', "");
Expect(1, 1, '\P{Is_Block=	 SUPPLEMENTARY_PRIVATE-Use_Area_A}', "");
Expect(0, 1, '\P{^Is_Block=	 SUPPLEMENTARY_PRIVATE-Use_Area_A}', "");
Error('\p{Is_Blk= SUPPLEMENTARY-Private usearea-A/a/}');
Error('\P{Is_Blk= SUPPLEMENTARY-Private usearea-A/a/}');
Expect(1, 983040, '\p{Is_Blk=supplementaryprivateuseareaa}', "");
Expect(0, 983040, '\p{^Is_Blk=supplementaryprivateuseareaa}', "");
Expect(0, 983040, '\P{Is_Blk=supplementaryprivateuseareaa}', "");
Expect(1, 983040, '\P{^Is_Blk=supplementaryprivateuseareaa}', "");
Expect(0, 1, '\p{Is_Blk=supplementaryprivateuseareaa}', "");
Expect(1, 1, '\p{^Is_Blk=supplementaryprivateuseareaa}', "");
Expect(1, 1, '\P{Is_Blk=supplementaryprivateuseareaa}', "");
Expect(0, 1, '\P{^Is_Blk=supplementaryprivateuseareaa}', "");
Expect(1, 983040, '\p{Is_Blk=  supplementary	private	use-Area-A}', "");
Expect(0, 983040, '\p{^Is_Blk=  supplementary	private	use-Area-A}', "");
Expect(0, 983040, '\P{Is_Blk=  supplementary	private	use-Area-A}', "");
Expect(1, 983040, '\P{^Is_Blk=  supplementary	private	use-Area-A}', "");
Expect(0, 1, '\p{Is_Blk=  supplementary	private	use-Area-A}', "");
Expect(1, 1, '\p{^Is_Blk=  supplementary	private	use-Area-A}', "");
Expect(1, 1, '\P{Is_Blk=  supplementary	private	use-Area-A}', "");
Expect(0, 1, '\P{^Is_Blk=  supplementary	private	use-Area-A}', "");
Error('\p{Block=/a/HANUNOO}');
Error('\P{Block=/a/HANUNOO}');
Expect(1, 5951, '\p{Block=hanunoo}', "");
Expect(0, 5951, '\p{^Block=hanunoo}', "");
Expect(0, 5951, '\P{Block=hanunoo}', "");
Expect(1, 5951, '\P{^Block=hanunoo}', "");
Expect(0, 5919, '\p{Block=hanunoo}', "");
Expect(1, 5919, '\p{^Block=hanunoo}', "");
Expect(1, 5919, '\P{Block=hanunoo}', "");
Expect(0, 5919, '\P{^Block=hanunoo}', "");
Expect(1, 5951, '\p{Block= Hanunoo}', "");
Expect(0, 5951, '\p{^Block= Hanunoo}', "");
Expect(0, 5951, '\P{Block= Hanunoo}', "");
Expect(1, 5951, '\P{^Block= Hanunoo}', "");
Expect(0, 5919, '\p{Block= Hanunoo}', "");
Expect(1, 5919, '\p{^Block= Hanunoo}', "");
Expect(1, 5919, '\P{Block= Hanunoo}', "");
Expect(0, 5919, '\P{^Block= Hanunoo}', "");
Error('\p{Blk=:=hanunoo}');
Error('\P{Blk=:=hanunoo}');
Expect(1, 5951, '\p{Blk=hanunoo}', "");
Expect(0, 5951, '\p{^Blk=hanunoo}', "");
Expect(0, 5951, '\P{Blk=hanunoo}', "");
Expect(1, 5951, '\P{^Blk=hanunoo}', "");
Expect(0, 5919, '\p{Blk=hanunoo}', "");
Expect(1, 5919, '\p{^Blk=hanunoo}', "");
Expect(1, 5919, '\P{Blk=hanunoo}', "");
Expect(0, 5919, '\P{^Blk=hanunoo}', "");
Expect(1, 5951, '\p{Blk=- hanunoo}', "");
Expect(0, 5951, '\p{^Blk=- hanunoo}', "");
Expect(0, 5951, '\P{Blk=- hanunoo}', "");
Expect(1, 5951, '\P{^Blk=- hanunoo}', "");
Expect(0, 5919, '\p{Blk=- hanunoo}', "");
Expect(1, 5919, '\p{^Blk=- hanunoo}', "");
Expect(1, 5919, '\P{Blk=- hanunoo}', "");
Expect(0, 5919, '\P{^Blk=- hanunoo}', "");
Error('\p{Is_Block=	:=Hanunoo}');
Error('\P{Is_Block=	:=Hanunoo}');
Expect(1, 5951, '\p{Is_Block=hanunoo}', "");
Expect(0, 5951, '\p{^Is_Block=hanunoo}', "");
Expect(0, 5951, '\P{Is_Block=hanunoo}', "");
Expect(1, 5951, '\P{^Is_Block=hanunoo}', "");
Expect(0, 5919, '\p{Is_Block=hanunoo}', "");
Expect(1, 5919, '\p{^Is_Block=hanunoo}', "");
Expect(1, 5919, '\P{Is_Block=hanunoo}', "");
Expect(0, 5919, '\P{^Is_Block=hanunoo}', "");
Expect(1, 5951, '\p{Is_Block=_	Hanunoo}', "");
Expect(0, 5951, '\p{^Is_Block=_	Hanunoo}', "");
Expect(0, 5951, '\P{Is_Block=_	Hanunoo}', "");
Expect(1, 5951, '\P{^Is_Block=_	Hanunoo}', "");
Expect(0, 5919, '\p{Is_Block=_	Hanunoo}', "");
Expect(1, 5919, '\p{^Is_Block=_	Hanunoo}', "");
Expect(1, 5919, '\P{Is_Block=_	Hanunoo}', "");
Expect(0, 5919, '\P{^Is_Block=_	Hanunoo}', "");
Error('\p{Is_Blk=- HANUNOO/a/}');
Error('\P{Is_Blk=- HANUNOO/a/}');
Expect(1, 5951, '\p{Is_Blk:hanunoo}', "");
Expect(0, 5951, '\p{^Is_Blk:hanunoo}', "");
Expect(0, 5951, '\P{Is_Blk:hanunoo}', "");
Expect(1, 5951, '\P{^Is_Blk:hanunoo}', "");
Expect(0, 5919, '\p{Is_Blk:hanunoo}', "");
Expect(1, 5919, '\p{^Is_Blk:hanunoo}', "");
Expect(1, 5919, '\P{Is_Blk:hanunoo}', "");
Expect(0, 5919, '\P{^Is_Blk:hanunoo}', "");
Expect(1, 5951, '\p{Is_Blk=-HANUNOO}', "");
Expect(0, 5951, '\p{^Is_Blk=-HANUNOO}', "");
Expect(0, 5951, '\P{Is_Blk=-HANUNOO}', "");
Expect(1, 5951, '\P{^Is_Blk=-HANUNOO}', "");
Expect(0, 5919, '\p{Is_Blk=-HANUNOO}', "");
Expect(1, 5919, '\p{^Is_Blk=-HANUNOO}', "");
Expect(1, 5919, '\P{Is_Blk=-HANUNOO}', "");
Expect(0, 5919, '\P{^Is_Blk=-HANUNOO}', "");
Error('\p{Block:	 -Low:=surrogates}');
Error('\P{Block:	 -Low:=surrogates}');
Expect(1, 57343, '\p{Block=lowsurrogates}', "");
Expect(0, 57343, '\p{^Block=lowsurrogates}', "");
Expect(0, 57343, '\P{Block=lowsurrogates}', "");
Expect(1, 57343, '\P{^Block=lowsurrogates}', "");
Expect(0, 1, '\p{Block=lowsurrogates}', "");
Expect(1, 1, '\p{^Block=lowsurrogates}', "");
Expect(1, 1, '\P{Block=lowsurrogates}', "");
Expect(0, 1, '\P{^Block=lowsurrogates}', "");
Expect(1, 57343, '\p{Block=_	LOW	Surrogates}', "");
Expect(0, 57343, '\p{^Block=_	LOW	Surrogates}', "");
Expect(0, 57343, '\P{Block=_	LOW	Surrogates}', "");
Expect(1, 57343, '\P{^Block=_	LOW	Surrogates}', "");
Expect(0, 1, '\p{Block=_	LOW	Surrogates}', "");
Expect(1, 1, '\p{^Block=_	LOW	Surrogates}', "");
Expect(1, 1, '\P{Block=_	LOW	Surrogates}', "");
Expect(0, 1, '\P{^Block=_	LOW	Surrogates}', "");
Error('\p{Blk=:=-_Low	SURROGATES}');
Error('\P{Blk=:=-_Low	SURROGATES}');
Expect(1, 57343, '\p{Blk=lowsurrogates}', "");
Expect(0, 57343, '\p{^Blk=lowsurrogates}', "");
Expect(0, 57343, '\P{Blk=lowsurrogates}', "");
Expect(1, 57343, '\P{^Blk=lowsurrogates}', "");
Expect(0, 1, '\p{Blk=lowsurrogates}', "");
Expect(1, 1, '\p{^Blk=lowsurrogates}', "");
Expect(1, 1, '\P{Blk=lowsurrogates}', "");
Expect(0, 1, '\P{^Blk=lowsurrogates}', "");
Expect(1, 57343, '\p{Blk=		Low-Surrogates}', "");
Expect(0, 57343, '\p{^Blk=		Low-Surrogates}', "");
Expect(0, 57343, '\P{Blk=		Low-Surrogates}', "");
Expect(1, 57343, '\P{^Blk=		Low-Surrogates}', "");
Expect(0, 1, '\p{Blk=		Low-Surrogates}', "");
Expect(1, 1, '\p{^Blk=		Low-Surrogates}', "");
Expect(1, 1, '\P{Blk=		Low-Surrogates}', "");
Expect(0, 1, '\P{^Blk=		Low-Surrogates}', "");
Error('\p{Is_Block=:= -LowSURROGATES}');
Error('\P{Is_Block=:= -LowSURROGATES}');
Expect(1, 57343, '\p{Is_Block:   lowsurrogates}', "");
Expect(0, 57343, '\p{^Is_Block:   lowsurrogates}', "");
Expect(0, 57343, '\P{Is_Block:   lowsurrogates}', "");
Expect(1, 57343, '\P{^Is_Block:   lowsurrogates}', "");
Expect(0, 1, '\p{Is_Block:   lowsurrogates}', "");
Expect(1, 1, '\p{^Is_Block:   lowsurrogates}', "");
Expect(1, 1, '\P{Is_Block:   lowsurrogates}', "");
Expect(0, 1, '\P{^Is_Block:   lowsurrogates}', "");
Expect(1, 57343, '\p{Is_Block= 	low	Surrogates}', "");
Expect(0, 57343, '\p{^Is_Block= 	low	Surrogates}', "");
Expect(0, 57343, '\P{Is_Block= 	low	Surrogates}', "");
Expect(1, 57343, '\P{^Is_Block= 	low	Surrogates}', "");
Expect(0, 1, '\p{Is_Block= 	low	Surrogates}', "");
Expect(1, 1, '\p{^Is_Block= 	low	Surrogates}', "");
Expect(1, 1, '\P{Is_Block= 	low	Surrogates}', "");
Expect(0, 1, '\P{^Is_Block= 	low	Surrogates}', "");
Error('\p{Is_Blk=-_Low:=Surrogates}');
Error('\P{Is_Blk=-_Low:=Surrogates}');
Expect(1, 57343, '\p{Is_Blk=lowsurrogates}', "");
Expect(0, 57343, '\p{^Is_Blk=lowsurrogates}', "");
Expect(0, 57343, '\P{Is_Blk=lowsurrogates}', "");
Expect(1, 57343, '\P{^Is_Blk=lowsurrogates}', "");
Expect(0, 1, '\p{Is_Blk=lowsurrogates}', "");
Expect(1, 1, '\p{^Is_Blk=lowsurrogates}', "");
Expect(1, 1, '\P{Is_Blk=lowsurrogates}', "");
Expect(0, 1, '\P{^Is_Blk=lowsurrogates}', "");
Expect(1, 57343, '\p{Is_Blk=Low	Surrogates}', "");
Expect(0, 57343, '\p{^Is_Blk=Low	Surrogates}', "");
Expect(0, 57343, '\P{Is_Blk=Low	Surrogates}', "");
Expect(1, 57343, '\P{^Is_Blk=Low	Surrogates}', "");
Expect(0, 1, '\p{Is_Blk=Low	Surrogates}', "");
Expect(1, 1, '\p{^Is_Blk=Low	Surrogates}', "");
Expect(1, 1, '\P{Is_Blk=Low	Surrogates}', "");
Expect(0, 1, '\P{^Is_Blk=Low	Surrogates}', "");
Error('\p{Block=/a/	_Katakana}');
Error('\P{Block=/a/	_Katakana}');
Expect(1, 12543, '\p{Block=katakana}', "");
Expect(0, 12543, '\p{^Block=katakana}', "");
Expect(0, 12543, '\P{Block=katakana}', "");
Expect(1, 12543, '\P{^Block=katakana}', "");
Expect(0, 12447, '\p{Block=katakana}', "");
Expect(1, 12447, '\p{^Block=katakana}', "");
Expect(1, 12447, '\P{Block=katakana}', "");
Expect(0, 12447, '\P{^Block=katakana}', "");
Expect(1, 12543, '\p{Block= katakana}', "");
Expect(0, 12543, '\p{^Block= katakana}', "");
Expect(0, 12543, '\P{Block= katakana}', "");
Expect(1, 12543, '\P{^Block= katakana}', "");
Expect(0, 12447, '\p{Block= katakana}', "");
Expect(1, 12447, '\p{^Block= katakana}', "");
Expect(1, 12447, '\P{Block= katakana}', "");
Expect(0, 12447, '\P{^Block= katakana}', "");
Error('\p{Blk=_:=katakana}');
Error('\P{Blk=_:=katakana}');
Expect(1, 12543, '\p{Blk=katakana}', "");
Expect(0, 12543, '\p{^Blk=katakana}', "");
Expect(0, 12543, '\P{Blk=katakana}', "");
Expect(1, 12543, '\P{^Blk=katakana}', "");
Expect(0, 12447, '\p{Blk=katakana}', "");
Expect(1, 12447, '\p{^Blk=katakana}', "");
Expect(1, 12447, '\P{Blk=katakana}', "");
Expect(0, 12447, '\P{^Blk=katakana}', "");
Expect(1, 12543, '\p{Blk:   --Katakana}', "");
Expect(0, 12543, '\p{^Blk:   --Katakana}', "");
Expect(0, 12543, '\P{Blk:   --Katakana}', "");
Expect(1, 12543, '\P{^Blk:   --Katakana}', "");
Expect(0, 12447, '\p{Blk:   --Katakana}', "");
Expect(1, 12447, '\p{^Blk:   --Katakana}', "");
Expect(1, 12447, '\P{Blk:   --Katakana}', "");
Expect(0, 12447, '\P{^Blk:   --Katakana}', "");
Error('\p{Is_Block:	:=-	KATAKANA}');
Error('\P{Is_Block:	:=-	KATAKANA}');
Expect(1, 12543, '\p{Is_Block=katakana}', "");
Expect(0, 12543, '\p{^Is_Block=katakana}', "");
Expect(0, 12543, '\P{Is_Block=katakana}', "");
Expect(1, 12543, '\P{^Is_Block=katakana}', "");
Expect(0, 12447, '\p{Is_Block=katakana}', "");
Expect(1, 12447, '\p{^Is_Block=katakana}', "");
Expect(1, 12447, '\P{Is_Block=katakana}', "");
Expect(0, 12447, '\P{^Is_Block=katakana}', "");
Expect(1, 12543, '\p{Is_Block:   __Katakana}', "");
Expect(0, 12543, '\p{^Is_Block:   __Katakana}', "");
Expect(0, 12543, '\P{Is_Block:   __Katakana}', "");
Expect(1, 12543, '\P{^Is_Block:   __Katakana}', "");
Expect(0, 12447, '\p{Is_Block:   __Katakana}', "");
Expect(1, 12447, '\p{^Is_Block:   __Katakana}', "");
Expect(1, 12447, '\P{Is_Block:   __Katakana}', "");
Expect(0, 12447, '\P{^Is_Block:   __Katakana}', "");
Error('\p{Is_Blk=_:=katakana}');
Error('\P{Is_Blk=_:=katakana}');
Expect(1, 12543, '\p{Is_Blk=katakana}', "");
Expect(0, 12543, '\p{^Is_Blk=katakana}', "");
Expect(0, 12543, '\P{Is_Blk=katakana}', "");
Expect(1, 12543, '\P{^Is_Blk=katakana}', "");
Expect(0, 12447, '\p{Is_Blk=katakana}', "");
Expect(1, 12447, '\p{^Is_Blk=katakana}', "");
Expect(1, 12447, '\P{Is_Blk=katakana}', "");
Expect(0, 12447, '\P{^Is_Blk=katakana}', "");
Expect(1, 12543, '\p{Is_Blk: 	katakana}', "");
Expect(0, 12543, '\p{^Is_Blk: 	katakana}', "");
Expect(0, 12543, '\P{Is_Blk: 	katakana}', "");
Expect(1, 12543, '\P{^Is_Blk: 	katakana}', "");
Expect(0, 12447, '\p{Is_Blk: 	katakana}', "");
Expect(1, 12447, '\p{^Is_Blk: 	katakana}', "");
Expect(1, 12447, '\P{Is_Blk: 	katakana}', "");
Expect(0, 12447, '\P{^Is_Blk: 	katakana}', "");
Error('\p{Block=/a/_ CUNEIFORM}');
Error('\P{Block=/a/_ CUNEIFORM}');
Expect(1, 74751, '\p{Block=cuneiform}', "");
Expect(0, 74751, '\p{^Block=cuneiform}', "");
Expect(0, 74751, '\P{Block=cuneiform}', "");
Expect(1, 74751, '\P{^Block=cuneiform}', "");
Expect(0, 73727, '\p{Block=cuneiform}', "");
Expect(1, 73727, '\p{^Block=cuneiform}', "");
Expect(1, 73727, '\P{Block=cuneiform}', "");
Expect(0, 73727, '\P{^Block=cuneiform}', "");
Expect(1, 74751, '\p{Block= -cuneiform}', "");
Expect(0, 74751, '\p{^Block= -cuneiform}', "");
Expect(0, 74751, '\P{Block= -cuneiform}', "");
Expect(1, 74751, '\P{^Block= -cuneiform}', "");
Expect(0, 73727, '\p{Block= -cuneiform}', "");
Expect(1, 73727, '\p{^Block= -cuneiform}', "");
Expect(1, 73727, '\P{Block= -cuneiform}', "");
Expect(0, 73727, '\P{^Block= -cuneiform}', "");
Error('\p{Blk=--cuneiform/a/}');
Error('\P{Blk=--cuneiform/a/}');
Expect(1, 74751, '\p{Blk=cuneiform}', "");
Expect(0, 74751, '\p{^Blk=cuneiform}', "");
Expect(0, 74751, '\P{Blk=cuneiform}', "");
Expect(1, 74751, '\P{^Blk=cuneiform}', "");
Expect(0, 73727, '\p{Blk=cuneiform}', "");
Expect(1, 73727, '\p{^Blk=cuneiform}', "");
Expect(1, 73727, '\P{Blk=cuneiform}', "");
Expect(0, 73727, '\P{^Blk=cuneiform}', "");
Expect(1, 74751, '\p{Blk:   __cuneiform}', "");
Expect(0, 74751, '\p{^Blk:   __cuneiform}', "");
Expect(0, 74751, '\P{Blk:   __cuneiform}', "");
Expect(1, 74751, '\P{^Blk:   __cuneiform}', "");
Expect(0, 73727, '\p{Blk:   __cuneiform}', "");
Expect(1, 73727, '\p{^Blk:   __cuneiform}', "");
Expect(1, 73727, '\P{Blk:   __cuneiform}', "");
Expect(0, 73727, '\P{^Blk:   __cuneiform}', "");
Error('\p{Is_Block=  Cuneiform/a/}');
Error('\P{Is_Block=  Cuneiform/a/}');
Expect(1, 74751, '\p{Is_Block=cuneiform}', "");
Expect(0, 74751, '\p{^Is_Block=cuneiform}', "");
Expect(0, 74751, '\P{Is_Block=cuneiform}', "");
Expect(1, 74751, '\P{^Is_Block=cuneiform}', "");
Expect(0, 73727, '\p{Is_Block=cuneiform}', "");
Expect(1, 73727, '\p{^Is_Block=cuneiform}', "");
Expect(1, 73727, '\P{Is_Block=cuneiform}', "");
Expect(0, 73727, '\P{^Is_Block=cuneiform}', "");
Expect(1, 74751, '\p{Is_Block:	__Cuneiform}', "");
Expect(0, 74751, '\p{^Is_Block:	__Cuneiform}', "");
Expect(0, 74751, '\P{Is_Block:	__Cuneiform}', "");
Expect(1, 74751, '\P{^Is_Block:	__Cuneiform}', "");
Expect(0, 73727, '\p{Is_Block:	__Cuneiform}', "");
Expect(1, 73727, '\p{^Is_Block:	__Cuneiform}', "");
Expect(1, 73727, '\P{Is_Block:	__Cuneiform}', "");
Expect(0, 73727, '\P{^Is_Block:	__Cuneiform}', "");
Error('\p{Is_Blk=_Cuneiform:=}');
Error('\P{Is_Blk=_Cuneiform:=}');
Expect(1, 74751, '\p{Is_Blk=cuneiform}', "");
Expect(0, 74751, '\p{^Is_Blk=cuneiform}', "");
Expect(0, 74751, '\P{Is_Blk=cuneiform}', "");
Expect(1, 74751, '\P{^Is_Blk=cuneiform}', "");
Expect(0, 73727, '\p{Is_Blk=cuneiform}', "");
Expect(1, 73727, '\p{^Is_Blk=cuneiform}', "");
Expect(1, 73727, '\P{Is_Blk=cuneiform}', "");
Expect(0, 73727, '\P{^Is_Blk=cuneiform}', "");
Expect(1, 74751, '\p{Is_Blk=		CUNEIFORM}', "");
Expect(0, 74751, '\p{^Is_Blk=		CUNEIFORM}', "");
Expect(0, 74751, '\P{Is_Blk=		CUNEIFORM}', "");
Expect(1, 74751, '\P{^Is_Blk=		CUNEIFORM}', "");
Expect(0, 73727, '\p{Is_Blk=		CUNEIFORM}', "");
Expect(1, 73727, '\p{^Is_Blk=		CUNEIFORM}', "");
Expect(1, 73727, '\P{Is_Blk=		CUNEIFORM}', "");
Expect(0, 73727, '\P{^Is_Blk=		CUNEIFORM}', "");
Error('\p{Block=:=- high_SURROGATES}');
Error('\P{Block=:=- high_SURROGATES}');
Expect(1, 56191, '\p{Block=highsurrogates}', "");
Expect(0, 56191, '\p{^Block=highsurrogates}', "");
Expect(0, 56191, '\P{Block=highsurrogates}', "");
Expect(1, 56191, '\P{^Block=highsurrogates}', "");
Expect(0, 55295, '\p{Block=highsurrogates}', "");
Expect(1, 55295, '\p{^Block=highsurrogates}', "");
Expect(1, 55295, '\P{Block=highsurrogates}', "");
Expect(0, 55295, '\P{^Block=highsurrogates}', "");
Expect(1, 56191, '\p{Block=	-high	SURROGATES}', "");
Expect(0, 56191, '\p{^Block=	-high	SURROGATES}', "");
Expect(0, 56191, '\P{Block=	-high	SURROGATES}', "");
Expect(1, 56191, '\P{^Block=	-high	SURROGATES}', "");
Expect(0, 55295, '\p{Block=	-high	SURROGATES}', "");
Expect(1, 55295, '\p{^Block=	-high	SURROGATES}', "");
Expect(1, 55295, '\P{Block=	-high	SURROGATES}', "");
Expect(0, 55295, '\P{^Block=	-high	SURROGATES}', "");
Error('\p{Blk=-_HIGH/a/SURROGATES}');
Error('\P{Blk=-_HIGH/a/SURROGATES}');
Expect(1, 56191, '\p{Blk=highsurrogates}', "");
Expect(0, 56191, '\p{^Blk=highsurrogates}', "");
Expect(0, 56191, '\P{Blk=highsurrogates}', "");
Expect(1, 56191, '\P{^Blk=highsurrogates}', "");
Expect(0, 55295, '\p{Blk=highsurrogates}', "");
Expect(1, 55295, '\p{^Blk=highsurrogates}', "");
Expect(1, 55295, '\P{Blk=highsurrogates}', "");
Expect(0, 55295, '\P{^Blk=highsurrogates}', "");
Expect(1, 56191, '\p{Blk=- high Surrogates}', "");
Expect(0, 56191, '\p{^Blk=- high Surrogates}', "");
Expect(0, 56191, '\P{Blk=- high Surrogates}', "");
Expect(1, 56191, '\P{^Blk=- high Surrogates}', "");
Expect(0, 55295, '\p{Blk=- high Surrogates}', "");
Expect(1, 55295, '\p{^Blk=- high Surrogates}', "");
Expect(1, 55295, '\P{Blk=- high Surrogates}', "");
Expect(0, 55295, '\P{^Blk=- high Surrogates}', "");
Error('\p{Is_Block=-/a/HIGH-surrogates}');
Error('\P{Is_Block=-/a/HIGH-surrogates}');
Expect(1, 56191, '\p{Is_Block=highsurrogates}', "");
Expect(0, 56191, '\p{^Is_Block=highsurrogates}', "");
Expect(0, 56191, '\P{Is_Block=highsurrogates}', "");
Expect(1, 56191, '\P{^Is_Block=highsurrogates}', "");
Expect(0, 55295, '\p{Is_Block=highsurrogates}', "");
Expect(1, 55295, '\p{^Is_Block=highsurrogates}', "");
Expect(1, 55295, '\P{Is_Block=highsurrogates}', "");
Expect(0, 55295, '\P{^Is_Block=highsurrogates}', "");
Expect(1, 56191, '\p{Is_Block:	HighSurrogates}', "");
Expect(0, 56191, '\p{^Is_Block:	HighSurrogates}', "");
Expect(0, 56191, '\P{Is_Block:	HighSurrogates}', "");
Expect(1, 56191, '\P{^Is_Block:	HighSurrogates}', "");
Expect(0, 55295, '\p{Is_Block:	HighSurrogates}', "");
Expect(1, 55295, '\p{^Is_Block:	HighSurrogates}', "");
Expect(1, 55295, '\P{Is_Block:	HighSurrogates}', "");
Expect(0, 55295, '\P{^Is_Block:	HighSurrogates}', "");
Error('\p{Is_Blk=:=_-High surrogates}');
Error('\P{Is_Blk=:=_-High surrogates}');
Expect(1, 56191, '\p{Is_Blk=highsurrogates}', "");
Expect(0, 56191, '\p{^Is_Blk=highsurrogates}', "");
Expect(0, 56191, '\P{Is_Blk=highsurrogates}', "");
Expect(1, 56191, '\P{^Is_Blk=highsurrogates}', "");
Expect(0, 55295, '\p{Is_Blk=highsurrogates}', "");
Expect(1, 55295, '\p{^Is_Blk=highsurrogates}', "");
Expect(1, 55295, '\P{Is_Blk=highsurrogates}', "");
Expect(0, 55295, '\P{^Is_Blk=highsurrogates}', "");
Expect(1, 56191, '\p{Is_Blk=	_HighSurrogates}', "");
Expect(0, 56191, '\p{^Is_Blk=	_HighSurrogates}', "");
Expect(0, 56191, '\P{Is_Blk=	_HighSurrogates}', "");
Expect(1, 56191, '\P{^Is_Blk=	_HighSurrogates}', "");
Expect(0, 55295, '\p{Is_Blk=	_HighSurrogates}', "");
Expect(1, 55295, '\p{^Is_Blk=	_HighSurrogates}', "");
Expect(1, 55295, '\P{Is_Blk=	_HighSurrogates}', "");
Expect(0, 55295, '\P{^Is_Blk=	_HighSurrogates}', "");
Error('\p{Block=	 ruminumeral	symbols/a/}');
Error('\P{Block=	 ruminumeral	symbols/a/}');
Expect(1, 69247, '\p{Block:   ruminumeralsymbols}', "");
Expect(0, 69247, '\p{^Block:   ruminumeralsymbols}', "");
Expect(0, 69247, '\P{Block:   ruminumeralsymbols}', "");
Expect(1, 69247, '\P{^Block:   ruminumeralsymbols}', "");
Expect(0, 69215, '\p{Block:   ruminumeralsymbols}', "");
Expect(1, 69215, '\p{^Block:   ruminumeralsymbols}', "");
Expect(1, 69215, '\P{Block:   ruminumeralsymbols}', "");
Expect(0, 69215, '\P{^Block:   ruminumeralsymbols}', "");
Expect(1, 69247, '\p{Block=Rumi_NUMERAL symbols}', "");
Expect(0, 69247, '\p{^Block=Rumi_NUMERAL symbols}', "");
Expect(0, 69247, '\P{Block=Rumi_NUMERAL symbols}', "");
Expect(1, 69247, '\P{^Block=Rumi_NUMERAL symbols}', "");
Expect(0, 69215, '\p{Block=Rumi_NUMERAL symbols}', "");
Expect(1, 69215, '\p{^Block=Rumi_NUMERAL symbols}', "");
Expect(1, 69215, '\P{Block=Rumi_NUMERAL symbols}', "");
Expect(0, 69215, '\P{^Block=Rumi_NUMERAL symbols}', "");
Error('\p{Blk=:= Rumi-NUMERAL_symbols}');
Error('\P{Blk=:= Rumi-NUMERAL_symbols}');
Expect(1, 69247, '\p{Blk=ruminumeralsymbols}', "");
Expect(0, 69247, '\p{^Blk=ruminumeralsymbols}', "");
Expect(0, 69247, '\P{Blk=ruminumeralsymbols}', "");
Expect(1, 69247, '\P{^Blk=ruminumeralsymbols}', "");
Expect(0, 69215, '\p{Blk=ruminumeralsymbols}', "");
Expect(1, 69215, '\p{^Blk=ruminumeralsymbols}', "");
Expect(1, 69215, '\P{Blk=ruminumeralsymbols}', "");
Expect(0, 69215, '\P{^Blk=ruminumeralsymbols}', "");
Expect(1, 69247, '\p{Blk: -_RUMINumeral_SYMBOLS}', "");
Expect(0, 69247, '\p{^Blk: -_RUMINumeral_SYMBOLS}', "");
Expect(0, 69247, '\P{Blk: -_RUMINumeral_SYMBOLS}', "");
Expect(1, 69247, '\P{^Blk: -_RUMINumeral_SYMBOLS}', "");
Expect(0, 69215, '\p{Blk: -_RUMINumeral_SYMBOLS}', "");
Expect(1, 69215, '\p{^Blk: -_RUMINumeral_SYMBOLS}', "");
Expect(1, 69215, '\P{Blk: -_RUMINumeral_SYMBOLS}', "");
Expect(0, 69215, '\P{^Blk: -_RUMINumeral_SYMBOLS}', "");
Error('\p{Is_Block= /a/RumiNumeral Symbols}');
Error('\P{Is_Block= /a/RumiNumeral Symbols}');
Expect(1, 69247, '\p{Is_Block=ruminumeralsymbols}', "");
Expect(0, 69247, '\p{^Is_Block=ruminumeralsymbols}', "");
Expect(0, 69247, '\P{Is_Block=ruminumeralsymbols}', "");
Expect(1, 69247, '\P{^Is_Block=ruminumeralsymbols}', "");
Expect(0, 69215, '\p{Is_Block=ruminumeralsymbols}', "");
Expect(1, 69215, '\p{^Is_Block=ruminumeralsymbols}', "");
Expect(1, 69215, '\P{Is_Block=ruminumeralsymbols}', "");
Expect(0, 69215, '\P{^Is_Block=ruminumeralsymbols}', "");
Expect(1, 69247, '\p{Is_Block=_-Rumi_Numeral SYMBOLS}', "");
Expect(0, 69247, '\p{^Is_Block=_-Rumi_Numeral SYMBOLS}', "");
Expect(0, 69247, '\P{Is_Block=_-Rumi_Numeral SYMBOLS}', "");
Expect(1, 69247, '\P{^Is_Block=_-Rumi_Numeral SYMBOLS}', "");
Expect(0, 69215, '\p{Is_Block=_-Rumi_Numeral SYMBOLS}', "");
Expect(1, 69215, '\p{^Is_Block=_-Rumi_Numeral SYMBOLS}', "");
Expect(1, 69215, '\P{Is_Block=_-Rumi_Numeral SYMBOLS}', "");
Expect(0, 69215, '\P{^Is_Block=_-Rumi_Numeral SYMBOLS}', "");
Error('\p{Is_Blk=:= RUMI Numeral	Symbols}');
Error('\P{Is_Blk=:= RUMI Numeral	Symbols}');
Expect(1, 69247, '\p{Is_Blk=ruminumeralsymbols}', "");
Expect(0, 69247, '\p{^Is_Blk=ruminumeralsymbols}', "");
Expect(0, 69247, '\P{Is_Blk=ruminumeralsymbols}', "");
Expect(1, 69247, '\P{^Is_Blk=ruminumeralsymbols}', "");
Expect(0, 69215, '\p{Is_Blk=ruminumeralsymbols}', "");
Expect(1, 69215, '\p{^Is_Blk=ruminumeralsymbols}', "");
Expect(1, 69215, '\P{Is_Blk=ruminumeralsymbols}', "");
Expect(0, 69215, '\P{^Is_Blk=ruminumeralsymbols}', "");
Expect(1, 69247, '\p{Is_Blk=		Rumi NUMERAL-symbols}', "");
Expect(0, 69247, '\p{^Is_Blk=		Rumi NUMERAL-symbols}', "");
Expect(0, 69247, '\P{Is_Blk=		Rumi NUMERAL-symbols}', "");
Expect(1, 69247, '\P{^Is_Blk=		Rumi NUMERAL-symbols}', "");
Expect(0, 69215, '\p{Is_Blk=		Rumi NUMERAL-symbols}', "");
Expect(1, 69215, '\p{^Is_Blk=		Rumi NUMERAL-symbols}', "");
Expect(1, 69215, '\P{Is_Blk=		Rumi NUMERAL-symbols}', "");
Expect(0, 69215, '\P{^Is_Blk=		Rumi NUMERAL-symbols}', "");
Error('\p{Block=__Variation_Selectors:=supplement}');
Error('\P{Block=__Variation_Selectors:=supplement}');
Expect(1, 917999, '\p{Block=variationselectorssupplement}', "");
Expect(0, 917999, '\p{^Block=variationselectorssupplement}', "");
Expect(0, 917999, '\P{Block=variationselectorssupplement}', "");
Expect(1, 917999, '\P{^Block=variationselectorssupplement}', "");
Expect(0, 917759, '\p{Block=variationselectorssupplement}', "");
Expect(1, 917759, '\p{^Block=variationselectorssupplement}', "");
Expect(1, 917759, '\P{Block=variationselectorssupplement}', "");
Expect(0, 917759, '\P{^Block=variationselectorssupplement}', "");
Expect(1, 917999, '\p{Block= Variation selectors	supplement}', "");
Expect(0, 917999, '\p{^Block= Variation selectors	supplement}', "");
Expect(0, 917999, '\P{Block= Variation selectors	supplement}', "");
Expect(1, 917999, '\P{^Block= Variation selectors	supplement}', "");
Expect(0, 917759, '\p{Block= Variation selectors	supplement}', "");
Expect(1, 917759, '\p{^Block= Variation selectors	supplement}', "");
Expect(1, 917759, '\P{Block= Variation selectors	supplement}', "");
Expect(0, 917759, '\P{^Block= Variation selectors	supplement}', "");
Error('\p{Blk=:=_	VARIATION_Selectors-Supplement}');
Error('\P{Blk=:=_	VARIATION_Selectors-Supplement}');
Expect(1, 917999, '\p{Blk=variationselectorssupplement}', "");
Expect(0, 917999, '\p{^Blk=variationselectorssupplement}', "");
Expect(0, 917999, '\P{Blk=variationselectorssupplement}', "");
Expect(1, 917999, '\P{^Blk=variationselectorssupplement}', "");
Expect(0, 917759, '\p{Blk=variationselectorssupplement}', "");
Expect(1, 917759, '\p{^Blk=variationselectorssupplement}', "");
Expect(1, 917759, '\P{Blk=variationselectorssupplement}', "");
Expect(0, 917759, '\P{^Blk=variationselectorssupplement}', "");
Expect(1, 917999, '\p{Blk= -variationSELECTORS	Supplement}', "");
Expect(0, 917999, '\p{^Blk= -variationSELECTORS	Supplement}', "");
Expect(0, 917999, '\P{Blk= -variationSELECTORS	Supplement}', "");
Expect(1, 917999, '\P{^Blk= -variationSELECTORS	Supplement}', "");
Expect(0, 917759, '\p{Blk= -variationSELECTORS	Supplement}', "");
Expect(1, 917759, '\p{^Blk= -variationSELECTORS	Supplement}', "");
Expect(1, 917759, '\P{Blk= -variationSELECTORS	Supplement}', "");
Expect(0, 917759, '\P{^Blk= -variationSELECTORS	Supplement}', "");
Error('\p{Is_Block=variation	Selectors/a/supplement}');
Error('\P{Is_Block=variation	Selectors/a/supplement}');
Expect(1, 917999, '\p{Is_Block: variationselectorssupplement}', "");
Expect(0, 917999, '\p{^Is_Block: variationselectorssupplement}', "");
Expect(0, 917999, '\P{Is_Block: variationselectorssupplement}', "");
Expect(1, 917999, '\P{^Is_Block: variationselectorssupplement}', "");
Expect(0, 917759, '\p{Is_Block: variationselectorssupplement}', "");
Expect(1, 917759, '\p{^Is_Block: variationselectorssupplement}', "");
Expect(1, 917759, '\P{Is_Block: variationselectorssupplement}', "");
Expect(0, 917759, '\P{^Is_Block: variationselectorssupplement}', "");
Expect(1, 917999, '\p{Is_Block= variation	selectors	supplement}', "");
Expect(0, 917999, '\p{^Is_Block= variation	selectors	supplement}', "");
Expect(0, 917999, '\P{Is_Block= variation	selectors	supplement}', "");
Expect(1, 917999, '\P{^Is_Block= variation	selectors	supplement}', "");
Expect(0, 917759, '\p{Is_Block= variation	selectors	supplement}', "");
Expect(1, 917759, '\p{^Is_Block= variation	selectors	supplement}', "");
Expect(1, 917759, '\P{Is_Block= variation	selectors	supplement}', "");
Expect(0, 917759, '\P{^Is_Block= variation	selectors	supplement}', "");
Error('\p{Is_Blk=_	variation-SELECTORS:=SUPPLEMENT}');
Error('\P{Is_Blk=_	variation-SELECTORS:=SUPPLEMENT}');
Expect(1, 917999, '\p{Is_Blk=variationselectorssupplement}', "");
Expect(0, 917999, '\p{^Is_Blk=variationselectorssupplement}', "");
Expect(0, 917999, '\P{Is_Blk=variationselectorssupplement}', "");
Expect(1, 917999, '\P{^Is_Blk=variationselectorssupplement}', "");
Expect(0, 917759, '\p{Is_Blk=variationselectorssupplement}', "");
Expect(1, 917759, '\p{^Is_Blk=variationselectorssupplement}', "");
Expect(1, 917759, '\P{Is_Blk=variationselectorssupplement}', "");
Expect(0, 917759, '\P{^Is_Blk=variationselectorssupplement}', "");
Expect(1, 917999, '\p{Is_Blk= 	Variation	SELECTORS Supplement}', "");
Expect(0, 917999, '\p{^Is_Blk= 	Variation	SELECTORS Supplement}', "");
Expect(0, 917999, '\P{Is_Blk= 	Variation	SELECTORS Supplement}', "");
Expect(1, 917999, '\P{^Is_Blk= 	Variation	SELECTORS Supplement}', "");
Expect(0, 917759, '\p{Is_Blk= 	Variation	SELECTORS Supplement}', "");
Expect(1, 917759, '\p{^Is_Blk= 	Variation	SELECTORS Supplement}', "");
Expect(1, 917759, '\P{Is_Blk= 	Variation	SELECTORS Supplement}', "");
Expect(0, 917759, '\P{^Is_Blk= 	Variation	SELECTORS Supplement}', "");
Error('\p{Block=:=_Georgian	SUPPLEMENT}');
Error('\P{Block=:=_Georgian	SUPPLEMENT}');
Expect(1, 11567, '\p{Block=georgiansupplement}', "");
Expect(0, 11567, '\p{^Block=georgiansupplement}', "");
Expect(0, 11567, '\P{Block=georgiansupplement}', "");
Expect(1, 11567, '\P{^Block=georgiansupplement}', "");
Expect(0, 11519, '\p{Block=georgiansupplement}', "");
Expect(1, 11519, '\p{^Block=georgiansupplement}', "");
Expect(1, 11519, '\P{Block=georgiansupplement}', "");
Expect(0, 11519, '\P{^Block=georgiansupplement}', "");
Expect(1, 11567, '\p{Block=_ Georgian_supplement}', "");
Expect(0, 11567, '\p{^Block=_ Georgian_supplement}', "");
Expect(0, 11567, '\P{Block=_ Georgian_supplement}', "");
Expect(1, 11567, '\P{^Block=_ Georgian_supplement}', "");
Expect(0, 11519, '\p{Block=_ Georgian_supplement}', "");
Expect(1, 11519, '\p{^Block=_ Georgian_supplement}', "");
Expect(1, 11519, '\P{Block=_ Georgian_supplement}', "");
Expect(0, 11519, '\P{^Block=_ Georgian_supplement}', "");
Error('\p{Blk=/a/ _GeorgianSUPPLEMENT}');
Error('\P{Blk=/a/ _GeorgianSUPPLEMENT}');
Expect(1, 11567, '\p{Blk=georgiansupplement}', "");
Expect(0, 11567, '\p{^Blk=georgiansupplement}', "");
Expect(0, 11567, '\P{Blk=georgiansupplement}', "");
Expect(1, 11567, '\P{^Blk=georgiansupplement}', "");
Expect(0, 11519, '\p{Blk=georgiansupplement}', "");
Expect(1, 11519, '\p{^Blk=georgiansupplement}', "");
Expect(1, 11519, '\P{Blk=georgiansupplement}', "");
Expect(0, 11519, '\P{^Blk=georgiansupplement}', "");
Expect(1, 11567, '\p{Blk=-	georgian	supplement}', "");
Expect(0, 11567, '\p{^Blk=-	georgian	supplement}', "");
Expect(0, 11567, '\P{Blk=-	georgian	supplement}', "");
Expect(1, 11567, '\P{^Blk=-	georgian	supplement}', "");
Expect(0, 11519, '\p{Blk=-	georgian	supplement}', "");
Expect(1, 11519, '\p{^Blk=-	georgian	supplement}', "");
Expect(1, 11519, '\P{Blk=-	georgian	supplement}', "");
Expect(0, 11519, '\P{^Blk=-	georgian	supplement}', "");
Error('\p{Is_Block=	:=Georgiansupplement}');
Error('\P{Is_Block=	:=Georgiansupplement}');
Expect(1, 11567, '\p{Is_Block=georgiansupplement}', "");
Expect(0, 11567, '\p{^Is_Block=georgiansupplement}', "");
Expect(0, 11567, '\P{Is_Block=georgiansupplement}', "");
Expect(1, 11567, '\P{^Is_Block=georgiansupplement}', "");
Expect(0, 11519, '\p{Is_Block=georgiansupplement}', "");
Expect(1, 11519, '\p{^Is_Block=georgiansupplement}', "");
Expect(1, 11519, '\P{Is_Block=georgiansupplement}', "");
Expect(0, 11519, '\P{^Is_Block=georgiansupplement}', "");
Expect(1, 11567, '\p{Is_Block=	Georgian	SUPPLEMENT}', "");
Expect(0, 11567, '\p{^Is_Block=	Georgian	SUPPLEMENT}', "");
Expect(0, 11567, '\P{Is_Block=	Georgian	SUPPLEMENT}', "");
Expect(1, 11567, '\P{^Is_Block=	Georgian	SUPPLEMENT}', "");
Expect(0, 11519, '\p{Is_Block=	Georgian	SUPPLEMENT}', "");
Expect(1, 11519, '\p{^Is_Block=	Georgian	SUPPLEMENT}', "");
Expect(1, 11519, '\P{Is_Block=	Georgian	SUPPLEMENT}', "");
Expect(0, 11519, '\P{^Is_Block=	Georgian	SUPPLEMENT}', "");
Error('\p{Is_Blk= Georgian	supplement/a/}');
Error('\P{Is_Blk= Georgian	supplement/a/}');
Expect(1, 11567, '\p{Is_Blk=georgiansupplement}', "");
Expect(0, 11567, '\p{^Is_Blk=georgiansupplement}', "");
Expect(0, 11567, '\P{Is_Blk=georgiansupplement}', "");
Expect(1, 11567, '\P{^Is_Blk=georgiansupplement}', "");
Expect(0, 11519, '\p{Is_Blk=georgiansupplement}', "");
Expect(1, 11519, '\p{^Is_Blk=georgiansupplement}', "");
Expect(1, 11519, '\P{Is_Blk=georgiansupplement}', "");
Expect(0, 11519, '\P{^Is_Blk=georgiansupplement}', "");
Expect(1, 11567, '\p{Is_Blk= _georgiansupplement}', "");
Expect(0, 11567, '\p{^Is_Blk= _georgiansupplement}', "");
Expect(0, 11567, '\P{Is_Blk= _georgiansupplement}', "");
Expect(1, 11567, '\P{^Is_Blk= _georgiansupplement}', "");
Expect(0, 11519, '\p{Is_Blk= _georgiansupplement}', "");
Expect(1, 11519, '\p{^Is_Blk= _georgiansupplement}', "");
Expect(1, 11519, '\P{Is_Blk= _georgiansupplement}', "");
Expect(0, 11519, '\P{^Is_Blk= _georgiansupplement}', "");
Error('\p{Block=	_CJK Unified-Ideographs-EXTENSION-D/a/}');
Error('\P{Block=	_CJK Unified-Ideographs-EXTENSION-D/a/}');
Expect(1, 178207, '\p{Block:   cjkunifiedideographsextensiond}', "");
Expect(0, 178207, '\p{^Block:   cjkunifiedideographsextensiond}', "");
Expect(0, 178207, '\P{Block:   cjkunifiedideographsextensiond}', "");
Expect(1, 178207, '\P{^Block:   cjkunifiedideographsextensiond}', "");
Expect(0, 177983, '\p{Block:   cjkunifiedideographsextensiond}', "");
Expect(1, 177983, '\p{^Block:   cjkunifiedideographsextensiond}', "");
Expect(1, 177983, '\P{Block:   cjkunifiedideographsextensiond}', "");
Expect(0, 177983, '\P{^Block:   cjkunifiedideographsextensiond}', "");
Expect(1, 178207, '\p{Block=		CJK	unified_IDEOGRAPHSextension	D}', "");
Expect(0, 178207, '\p{^Block=		CJK	unified_IDEOGRAPHSextension	D}', "");
Expect(0, 178207, '\P{Block=		CJK	unified_IDEOGRAPHSextension	D}', "");
Expect(1, 178207, '\P{^Block=		CJK	unified_IDEOGRAPHSextension	D}', "");
Expect(0, 177983, '\p{Block=		CJK	unified_IDEOGRAPHSextension	D}', "");
Expect(1, 177983, '\p{^Block=		CJK	unified_IDEOGRAPHSextension	D}', "");
Expect(1, 177983, '\P{Block=		CJK	unified_IDEOGRAPHSextension	D}', "");
Expect(0, 177983, '\P{^Block=		CJK	unified_IDEOGRAPHSextension	D}', "");
Error('\p{Blk=_CJK	unified Ideographs_Extension:=D}');
Error('\P{Blk=_CJK	unified Ideographs_Extension:=D}');
Expect(1, 178207, '\p{Blk=cjkunifiedideographsextensiond}', "");
Expect(0, 178207, '\p{^Blk=cjkunifiedideographsextensiond}', "");
Expect(0, 178207, '\P{Blk=cjkunifiedideographsextensiond}', "");
Expect(1, 178207, '\P{^Blk=cjkunifiedideographsextensiond}', "");
Expect(0, 177983, '\p{Blk=cjkunifiedideographsextensiond}', "");
Expect(1, 177983, '\p{^Blk=cjkunifiedideographsextensiond}', "");
Expect(1, 177983, '\P{Blk=cjkunifiedideographsextensiond}', "");
Expect(0, 177983, '\P{^Blk=cjkunifiedideographsextensiond}', "");
Expect(1, 178207, '\p{Blk= cjkUNIFIED Ideographs	extensionD}', "");
Expect(0, 178207, '\p{^Blk= cjkUNIFIED Ideographs	extensionD}', "");
Expect(0, 178207, '\P{Blk= cjkUNIFIED Ideographs	extensionD}', "");
Expect(1, 178207, '\P{^Blk= cjkUNIFIED Ideographs	extensionD}', "");
Expect(0, 177983, '\p{Blk= cjkUNIFIED Ideographs	extensionD}', "");
Expect(1, 177983, '\p{^Blk= cjkUNIFIED Ideographs	extensionD}', "");
Expect(1, 177983, '\P{Blk= cjkUNIFIED Ideographs	extensionD}', "");
Expect(0, 177983, '\P{^Blk= cjkUNIFIED Ideographs	extensionD}', "");
Error('\p{Is_Block= :=CJK UNIFIEDideographs ExtensionD}');
Error('\P{Is_Block= :=CJK UNIFIEDideographs ExtensionD}');
Expect(1, 178207, '\p{Is_Block=cjkunifiedideographsextensiond}', "");
Expect(0, 178207, '\p{^Is_Block=cjkunifiedideographsextensiond}', "");
Expect(0, 178207, '\P{Is_Block=cjkunifiedideographsextensiond}', "");
Expect(1, 178207, '\P{^Is_Block=cjkunifiedideographsextensiond}', "");
Expect(0, 177983, '\p{Is_Block=cjkunifiedideographsextensiond}', "");
Expect(1, 177983, '\p{^Is_Block=cjkunifiedideographsextensiond}', "");
Expect(1, 177983, '\P{Is_Block=cjkunifiedideographsextensiond}', "");
Expect(0, 177983, '\P{^Is_Block=cjkunifiedideographsextensiond}', "");
Expect(1, 178207, '\p{Is_Block=--cjk UNIFIED IDEOGRAPHS Extension d}', "");
Expect(0, 178207, '\p{^Is_Block=--cjk UNIFIED IDEOGRAPHS Extension d}', "");
Expect(0, 178207, '\P{Is_Block=--cjk UNIFIED IDEOGRAPHS Extension d}', "");
Expect(1, 178207, '\P{^Is_Block=--cjk UNIFIED IDEOGRAPHS Extension d}', "");
Expect(0, 177983, '\p{Is_Block=--cjk UNIFIED IDEOGRAPHS Extension d}', "");
Expect(1, 177983, '\p{^Is_Block=--cjk UNIFIED IDEOGRAPHS Extension d}', "");
Expect(1, 177983, '\P{Is_Block=--cjk UNIFIED IDEOGRAPHS Extension d}', "");
Expect(0, 177983, '\P{^Is_Block=--cjk UNIFIED IDEOGRAPHS Extension d}', "");
Error('\p{Is_Blk= _CJK-UNIFIED_ideographsextension:=d}');
Error('\P{Is_Blk= _CJK-UNIFIED_ideographsextension:=d}');
Expect(1, 178207, '\p{Is_Blk=cjkunifiedideographsextensiond}', "");
Expect(0, 178207, '\p{^Is_Blk=cjkunifiedideographsextensiond}', "");
Expect(0, 178207, '\P{Is_Blk=cjkunifiedideographsextensiond}', "");
Expect(1, 178207, '\P{^Is_Blk=cjkunifiedideographsextensiond}', "");
Expect(0, 177983, '\p{Is_Blk=cjkunifiedideographsextensiond}', "");
Expect(1, 177983, '\p{^Is_Blk=cjkunifiedideographsextensiond}', "");
Expect(1, 177983, '\P{Is_Blk=cjkunifiedideographsextensiond}', "");
Expect(0, 177983, '\P{^Is_Blk=cjkunifiedideographsextensiond}', "");
Expect(1, 178207, '\p{Is_Blk=--CJK Unified-ideographsExtensionD}', "");
Expect(0, 178207, '\p{^Is_Blk=--CJK Unified-ideographsExtensionD}', "");
Expect(0, 178207, '\P{Is_Blk=--CJK Unified-ideographsExtensionD}', "");
Expect(1, 178207, '\P{^Is_Blk=--CJK Unified-ideographsExtensionD}', "");
Expect(0, 177983, '\p{Is_Blk=--CJK Unified-ideographsExtensionD}', "");
Expect(1, 177983, '\p{^Is_Blk=--CJK Unified-ideographsExtensionD}', "");
Expect(1, 177983, '\P{Is_Blk=--CJK Unified-ideographsExtensionD}', "");
Expect(0, 177983, '\P{^Is_Blk=--CJK Unified-ideographsExtensionD}', "");
Error('\p{Block=-/a/Myanmar}');
Error('\P{Block=-/a/Myanmar}');
Expect(1, 4255, '\p{Block=myanmar}', "");
Expect(0, 4255, '\p{^Block=myanmar}', "");
Expect(0, 4255, '\P{Block=myanmar}', "");
Expect(1, 4255, '\P{^Block=myanmar}', "");
Expect(0, 4095, '\p{Block=myanmar}', "");
Expect(1, 4095, '\p{^Block=myanmar}', "");
Expect(1, 4095, '\P{Block=myanmar}', "");
Expect(0, 4095, '\P{^Block=myanmar}', "");
Expect(1, 4255, '\p{Block=-	Myanmar}', "");
Expect(0, 4255, '\p{^Block=-	Myanmar}', "");
Expect(0, 4255, '\P{Block=-	Myanmar}', "");
Expect(1, 4255, '\P{^Block=-	Myanmar}', "");
Expect(0, 4095, '\p{Block=-	Myanmar}', "");
Expect(1, 4095, '\p{^Block=-	Myanmar}', "");
Expect(1, 4095, '\P{Block=-	Myanmar}', "");
Expect(0, 4095, '\P{^Block=-	Myanmar}', "");
Error('\p{Blk=:=_Myanmar}');
Error('\P{Blk=:=_Myanmar}');
Expect(1, 4255, '\p{Blk=myanmar}', "");
Expect(0, 4255, '\p{^Blk=myanmar}', "");
Expect(0, 4255, '\P{Blk=myanmar}', "");
Expect(1, 4255, '\P{^Blk=myanmar}', "");
Expect(0, 4095, '\p{Blk=myanmar}', "");
Expect(1, 4095, '\p{^Blk=myanmar}', "");
Expect(1, 4095, '\P{Blk=myanmar}', "");
Expect(0, 4095, '\P{^Blk=myanmar}', "");
Expect(1, 4255, '\p{Blk=-	Myanmar}', "");
Expect(0, 4255, '\p{^Blk=-	Myanmar}', "");
Expect(0, 4255, '\P{Blk=-	Myanmar}', "");
Expect(1, 4255, '\P{^Blk=-	Myanmar}', "");
Expect(0, 4095, '\p{Blk=-	Myanmar}', "");
Expect(1, 4095, '\p{^Blk=-	Myanmar}', "");
Expect(1, 4095, '\P{Blk=-	Myanmar}', "");
Expect(0, 4095, '\P{^Blk=-	Myanmar}', "");
Error('\p{Is_Block= _myanmar:=}');
Error('\P{Is_Block= _myanmar:=}');
Expect(1, 4255, '\p{Is_Block=myanmar}', "");
Expect(0, 4255, '\p{^Is_Block=myanmar}', "");
Expect(0, 4255, '\P{Is_Block=myanmar}', "");
Expect(1, 4255, '\P{^Is_Block=myanmar}', "");
Expect(0, 4095, '\p{Is_Block=myanmar}', "");
Expect(1, 4095, '\p{^Is_Block=myanmar}', "");
Expect(1, 4095, '\P{Is_Block=myanmar}', "");
Expect(0, 4095, '\P{^Is_Block=myanmar}', "");
Expect(1, 4255, '\p{Is_Block=__Myanmar}', "");
Expect(0, 4255, '\p{^Is_Block=__Myanmar}', "");
Expect(0, 4255, '\P{Is_Block=__Myanmar}', "");
Expect(1, 4255, '\P{^Is_Block=__Myanmar}', "");
Expect(0, 4095, '\p{Is_Block=__Myanmar}', "");
Expect(1, 4095, '\p{^Is_Block=__Myanmar}', "");
Expect(1, 4095, '\P{Is_Block=__Myanmar}', "");
Expect(0, 4095, '\P{^Is_Block=__Myanmar}', "");
Error('\p{Is_Blk= _Myanmar:=}');
Error('\P{Is_Blk= _Myanmar:=}');
Expect(1, 4255, '\p{Is_Blk=myanmar}', "");
Expect(0, 4255, '\p{^Is_Blk=myanmar}', "");
Expect(0, 4255, '\P{Is_Blk=myanmar}', "");
Expect(1, 4255, '\P{^Is_Blk=myanmar}', "");
Expect(0, 4095, '\p{Is_Blk=myanmar}', "");
Expect(1, 4095, '\p{^Is_Blk=myanmar}', "");
Expect(1, 4095, '\P{Is_Blk=myanmar}', "");
Expect(0, 4095, '\P{^Is_Blk=myanmar}', "");
Expect(1, 4255, '\p{Is_Blk=--MYANMAR}', "");
Expect(0, 4255, '\p{^Is_Blk=--MYANMAR}', "");
Expect(0, 4255, '\P{Is_Blk=--MYANMAR}', "");
Expect(1, 4255, '\P{^Is_Blk=--MYANMAR}', "");
Expect(0, 4095, '\p{Is_Blk=--MYANMAR}', "");
Expect(1, 4095, '\p{^Is_Blk=--MYANMAR}', "");
Expect(1, 4095, '\P{Is_Blk=--MYANMAR}', "");
Expect(0, 4095, '\P{^Is_Blk=--MYANMAR}', "");
Error('\p{Block=:=-_VERTICAL	forms}');
Error('\P{Block=:=-_VERTICAL	forms}');
Expect(1, 65055, '\p{Block=verticalforms}', "");
Expect(0, 65055, '\p{^Block=verticalforms}', "");
Expect(0, 65055, '\P{Block=verticalforms}', "");
Expect(1, 65055, '\P{^Block=verticalforms}', "");
Expect(0, 65039, '\p{Block=verticalforms}', "");
Expect(1, 65039, '\p{^Block=verticalforms}', "");
Expect(1, 65039, '\P{Block=verticalforms}', "");
Expect(0, 65039, '\P{^Block=verticalforms}', "");
Expect(1, 65055, '\p{Block=	 VerticalFORMS}', "");
Expect(0, 65055, '\p{^Block=	 VerticalFORMS}', "");
Expect(0, 65055, '\P{Block=	 VerticalFORMS}', "");
Expect(1, 65055, '\P{^Block=	 VerticalFORMS}', "");
Expect(0, 65039, '\p{Block=	 VerticalFORMS}', "");
Expect(1, 65039, '\p{^Block=	 VerticalFORMS}', "");
Expect(1, 65039, '\P{Block=	 VerticalFORMS}', "");
Expect(0, 65039, '\P{^Block=	 VerticalFORMS}', "");
Error('\p{Blk= :=VERTICAL-FORMS}');
Error('\P{Blk= :=VERTICAL-FORMS}');
Expect(1, 65055, '\p{Blk=verticalforms}', "");
Expect(0, 65055, '\p{^Blk=verticalforms}', "");
Expect(0, 65055, '\P{Blk=verticalforms}', "");
Expect(1, 65055, '\P{^Blk=verticalforms}', "");
Expect(0, 65039, '\p{Blk=verticalforms}', "");
Expect(1, 65039, '\p{^Blk=verticalforms}', "");
Expect(1, 65039, '\P{Blk=verticalforms}', "");
Expect(0, 65039, '\P{^Blk=verticalforms}', "");
Expect(1, 65055, '\p{Blk=  Vertical	Forms}', "");
Expect(0, 65055, '\p{^Blk=  Vertical	Forms}', "");
Expect(0, 65055, '\P{Blk=  Vertical	Forms}', "");
Expect(1, 65055, '\P{^Blk=  Vertical	Forms}', "");
Expect(0, 65039, '\p{Blk=  Vertical	Forms}', "");
Expect(1, 65039, '\p{^Blk=  Vertical	Forms}', "");
Expect(1, 65039, '\P{Blk=  Vertical	Forms}', "");
Expect(0, 65039, '\P{^Blk=  Vertical	Forms}', "");
Error('\p{Is_Block= 	Vertical-Forms:=}');
Error('\P{Is_Block= 	Vertical-Forms:=}');
Expect(1, 65055, '\p{Is_Block=verticalforms}', "");
Expect(0, 65055, '\p{^Is_Block=verticalforms}', "");
Expect(0, 65055, '\P{Is_Block=verticalforms}', "");
Expect(1, 65055, '\P{^Is_Block=verticalforms}', "");
Expect(0, 65039, '\p{Is_Block=verticalforms}', "");
Expect(1, 65039, '\p{^Is_Block=verticalforms}', "");
Expect(1, 65039, '\P{Is_Block=verticalforms}', "");
Expect(0, 65039, '\P{^Is_Block=verticalforms}', "");
Expect(1, 65055, '\p{Is_Block=_Vertical-forms}', "");
Expect(0, 65055, '\p{^Is_Block=_Vertical-forms}', "");
Expect(0, 65055, '\P{Is_Block=_Vertical-forms}', "");
Expect(1, 65055, '\P{^Is_Block=_Vertical-forms}', "");
Expect(0, 65039, '\p{Is_Block=_Vertical-forms}', "");
Expect(1, 65039, '\p{^Is_Block=_Vertical-forms}', "");
Expect(1, 65039, '\P{Is_Block=_Vertical-forms}', "");
Expect(0, 65039, '\P{^Is_Block=_Vertical-forms}', "");
Error('\p{Is_Blk=  Vertical_forms:=}');
Error('\P{Is_Blk=  Vertical_forms:=}');
Expect(1, 65055, '\p{Is_Blk=verticalforms}', "");
Expect(0, 65055, '\p{^Is_Blk=verticalforms}', "");
Expect(0, 65055, '\P{Is_Blk=verticalforms}', "");
Expect(1, 65055, '\P{^Is_Blk=verticalforms}', "");
Expect(0, 65039, '\p{Is_Blk=verticalforms}', "");
Expect(1, 65039, '\p{^Is_Blk=verticalforms}', "");
Expect(1, 65039, '\P{Is_Blk=verticalforms}', "");
Expect(0, 65039, '\P{^Is_Blk=verticalforms}', "");
Expect(1, 65055, '\p{Is_Blk= -Vertical forms}', "");
Expect(0, 65055, '\p{^Is_Blk= -Vertical forms}', "");
Expect(0, 65055, '\P{Is_Blk= -Vertical forms}', "");
Expect(1, 65055, '\P{^Is_Blk= -Vertical forms}', "");
Expect(0, 65039, '\p{Is_Blk= -Vertical forms}', "");
Expect(1, 65039, '\p{^Is_Blk= -Vertical forms}', "");
Expect(1, 65039, '\P{Is_Blk= -Vertical forms}', "");
Expect(0, 65039, '\P{^Is_Blk= -Vertical forms}', "");
Error('\p{Block=/a/-_kaithi}');
Error('\P{Block=/a/-_kaithi}');
Expect(1, 69839, '\p{Block=kaithi}', "");
Expect(0, 69839, '\p{^Block=kaithi}', "");
Expect(0, 69839, '\P{Block=kaithi}', "");
Expect(1, 69839, '\P{^Block=kaithi}', "");
Expect(0, 69759, '\p{Block=kaithi}', "");
Expect(1, 69759, '\p{^Block=kaithi}', "");
Expect(1, 69759, '\P{Block=kaithi}', "");
Expect(0, 69759, '\P{^Block=kaithi}', "");
Expect(1, 69839, '\p{Block=	_KAITHI}', "");
Expect(0, 69839, '\p{^Block=	_KAITHI}', "");
Expect(0, 69839, '\P{Block=	_KAITHI}', "");
Expect(1, 69839, '\P{^Block=	_KAITHI}', "");
Expect(0, 69759, '\p{Block=	_KAITHI}', "");
Expect(1, 69759, '\p{^Block=	_KAITHI}', "");
Expect(1, 69759, '\P{Block=	_KAITHI}', "");
Expect(0, 69759, '\P{^Block=	_KAITHI}', "");
Error('\p{Blk=/a/Kaithi}');
Error('\P{Blk=/a/Kaithi}');
Expect(1, 69839, '\p{Blk=kaithi}', "");
Expect(0, 69839, '\p{^Blk=kaithi}', "");
Expect(0, 69839, '\P{Blk=kaithi}', "");
Expect(1, 69839, '\P{^Blk=kaithi}', "");
Expect(0, 69759, '\p{Blk=kaithi}', "");
Expect(1, 69759, '\p{^Blk=kaithi}', "");
Expect(1, 69759, '\P{Blk=kaithi}', "");
Expect(0, 69759, '\P{^Blk=kaithi}', "");
Expect(1, 69839, '\p{Blk=-Kaithi}', "");
Expect(0, 69839, '\p{^Blk=-Kaithi}', "");
Expect(0, 69839, '\P{Blk=-Kaithi}', "");
Expect(1, 69839, '\P{^Blk=-Kaithi}', "");
Expect(0, 69759, '\p{Blk=-Kaithi}', "");
Expect(1, 69759, '\p{^Blk=-Kaithi}', "");
Expect(1, 69759, '\P{Blk=-Kaithi}', "");
Expect(0, 69759, '\P{^Blk=-Kaithi}', "");
Error('\p{Is_Block=-:=Kaithi}');
Error('\P{Is_Block=-:=Kaithi}');
Expect(1, 69839, '\p{Is_Block:kaithi}', "");
Expect(0, 69839, '\p{^Is_Block:kaithi}', "");
Expect(0, 69839, '\P{Is_Block:kaithi}', "");
Expect(1, 69839, '\P{^Is_Block:kaithi}', "");
Expect(0, 69759, '\p{Is_Block:kaithi}', "");
Expect(1, 69759, '\p{^Is_Block:kaithi}', "");
Expect(1, 69759, '\P{Is_Block:kaithi}', "");
Expect(0, 69759, '\P{^Is_Block:kaithi}', "");
Expect(1, 69839, '\p{Is_Block= 	KAITHI}', "");
Expect(0, 69839, '\p{^Is_Block= 	KAITHI}', "");
Expect(0, 69839, '\P{Is_Block= 	KAITHI}', "");
Expect(1, 69839, '\P{^Is_Block= 	KAITHI}', "");
Expect(0, 69759, '\p{Is_Block= 	KAITHI}', "");
Expect(1, 69759, '\p{^Is_Block= 	KAITHI}', "");
Expect(1, 69759, '\P{Is_Block= 	KAITHI}', "");
Expect(0, 69759, '\P{^Is_Block= 	KAITHI}', "");
Error('\p{Is_Blk: Kaithi:=}');
Error('\P{Is_Blk: Kaithi:=}');
Expect(1, 69839, '\p{Is_Blk=kaithi}', "");
Expect(0, 69839, '\p{^Is_Blk=kaithi}', "");
Expect(0, 69839, '\P{Is_Blk=kaithi}', "");
Expect(1, 69839, '\P{^Is_Blk=kaithi}', "");
Expect(0, 69759, '\p{Is_Blk=kaithi}', "");
Expect(1, 69759, '\p{^Is_Blk=kaithi}', "");
Expect(1, 69759, '\P{Is_Blk=kaithi}', "");
Expect(0, 69759, '\P{^Is_Blk=kaithi}', "");
Expect(1, 69839, '\p{Is_Blk=-_Kaithi}', "");
Expect(0, 69839, '\p{^Is_Blk=-_Kaithi}', "");
Expect(0, 69839, '\P{Is_Blk=-_Kaithi}', "");
Expect(1, 69839, '\P{^Is_Blk=-_Kaithi}', "");
Expect(0, 69759, '\p{Is_Blk=-_Kaithi}', "");
Expect(1, 69759, '\p{^Is_Blk=-_Kaithi}', "");
Expect(1, 69759, '\P{Is_Blk=-_Kaithi}', "");
Expect(0, 69759, '\P{^Is_Blk=-_Kaithi}', "");
Error('\p{Block=_-Sinhala:=}');
Error('\P{Block=_-Sinhala:=}');
Expect(1, 3583, '\p{Block=sinhala}', "");
Expect(0, 3583, '\p{^Block=sinhala}', "");
Expect(0, 3583, '\P{Block=sinhala}', "");
Expect(1, 3583, '\P{^Block=sinhala}', "");
Expect(0, 3455, '\p{Block=sinhala}', "");
Expect(1, 3455, '\p{^Block=sinhala}', "");
Expect(1, 3455, '\P{Block=sinhala}', "");
Expect(0, 3455, '\P{^Block=sinhala}', "");
Expect(1, 3583, '\p{Block=_Sinhala}', "");
Expect(0, 3583, '\p{^Block=_Sinhala}', "");
Expect(0, 3583, '\P{Block=_Sinhala}', "");
Expect(1, 3583, '\P{^Block=_Sinhala}', "");
Expect(0, 3455, '\p{Block=_Sinhala}', "");
Expect(1, 3455, '\p{^Block=_Sinhala}', "");
Expect(1, 3455, '\P{Block=_Sinhala}', "");
Expect(0, 3455, '\P{^Block=_Sinhala}', "");
Error('\p{Blk=--SINHALA/a/}');
Error('\P{Blk=--SINHALA/a/}');
Expect(1, 3583, '\p{Blk=sinhala}', "");
Expect(0, 3583, '\p{^Blk=sinhala}', "");
Expect(0, 3583, '\P{Blk=sinhala}', "");
Expect(1, 3583, '\P{^Blk=sinhala}', "");
Expect(0, 3455, '\p{Blk=sinhala}', "");
Expect(1, 3455, '\p{^Blk=sinhala}', "");
Expect(1, 3455, '\P{Blk=sinhala}', "");
Expect(0, 3455, '\P{^Blk=sinhala}', "");
Expect(1, 3583, '\p{Blk=  Sinhala}', "");
Expect(0, 3583, '\p{^Blk=  Sinhala}', "");
Expect(0, 3583, '\P{Blk=  Sinhala}', "");
Expect(1, 3583, '\P{^Blk=  Sinhala}', "");
Expect(0, 3455, '\p{Blk=  Sinhala}', "");
Expect(1, 3455, '\p{^Blk=  Sinhala}', "");
Expect(1, 3455, '\P{Blk=  Sinhala}', "");
Expect(0, 3455, '\P{^Blk=  Sinhala}', "");
Error('\p{Is_Block:	_	sinhala:=}');
Error('\P{Is_Block:	_	sinhala:=}');
Expect(1, 3583, '\p{Is_Block=sinhala}', "");
Expect(0, 3583, '\p{^Is_Block=sinhala}', "");
Expect(0, 3583, '\P{Is_Block=sinhala}', "");
Expect(1, 3583, '\P{^Is_Block=sinhala}', "");
Expect(0, 3455, '\p{Is_Block=sinhala}', "");
Expect(1, 3455, '\p{^Is_Block=sinhala}', "");
Expect(1, 3455, '\P{Is_Block=sinhala}', "");
Expect(0, 3455, '\P{^Is_Block=sinhala}', "");
Expect(1, 3583, '\p{Is_Block= _sinhala}', "");
Expect(0, 3583, '\p{^Is_Block= _sinhala}', "");
Expect(0, 3583, '\P{Is_Block= _sinhala}', "");
Expect(1, 3583, '\P{^Is_Block= _sinhala}', "");
Expect(0, 3455, '\p{Is_Block= _sinhala}', "");
Expect(1, 3455, '\p{^Is_Block= _sinhala}', "");
Expect(1, 3455, '\P{Is_Block= _sinhala}', "");
Expect(0, 3455, '\P{^Is_Block= _sinhala}', "");
Error('\p{Is_Blk=	Sinhala/a/}');
Error('\P{Is_Blk=	Sinhala/a/}');
Expect(1, 3583, '\p{Is_Blk=sinhala}', "");
Expect(0, 3583, '\p{^Is_Blk=sinhala}', "");
Expect(0, 3583, '\P{Is_Blk=sinhala}', "");
Expect(1, 3583, '\P{^Is_Blk=sinhala}', "");
Expect(0, 3455, '\p{Is_Blk=sinhala}', "");
Expect(1, 3455, '\p{^Is_Blk=sinhala}', "");
Expect(1, 3455, '\P{Is_Blk=sinhala}', "");
Expect(0, 3455, '\P{^Is_Blk=sinhala}', "");
Expect(1, 3583, '\p{Is_Blk=_Sinhala}', "");
Expect(0, 3583, '\p{^Is_Blk=_Sinhala}', "");
Expect(0, 3583, '\P{Is_Blk=_Sinhala}', "");
Expect(1, 3583, '\P{^Is_Blk=_Sinhala}', "");
Expect(0, 3455, '\p{Is_Blk=_Sinhala}', "");
Expect(1, 3455, '\p{^Is_Blk=_Sinhala}', "");
Expect(1, 3455, '\P{Is_Blk=_Sinhala}', "");
Expect(0, 3455, '\P{^Is_Blk=_Sinhala}', "");
Error('\p{Block=	_Glagolitic/a/}');
Error('\P{Block=	_Glagolitic/a/}');
Expect(1, 11359, '\p{Block=glagolitic}', "");
Expect(0, 11359, '\p{^Block=glagolitic}', "");
Expect(0, 11359, '\P{Block=glagolitic}', "");
Expect(1, 11359, '\P{^Block=glagolitic}', "");
Expect(0, 11263, '\p{Block=glagolitic}', "");
Expect(1, 11263, '\p{^Block=glagolitic}', "");
Expect(1, 11263, '\P{Block=glagolitic}', "");
Expect(0, 11263, '\P{^Block=glagolitic}', "");
Expect(1, 11359, '\p{Block=-GLAGOLITIC}', "");
Expect(0, 11359, '\p{^Block=-GLAGOLITIC}', "");
Expect(0, 11359, '\P{Block=-GLAGOLITIC}', "");
Expect(1, 11359, '\P{^Block=-GLAGOLITIC}', "");
Expect(0, 11263, '\p{Block=-GLAGOLITIC}', "");
Expect(1, 11263, '\p{^Block=-GLAGOLITIC}', "");
Expect(1, 11263, '\P{Block=-GLAGOLITIC}', "");
Expect(0, 11263, '\P{^Block=-GLAGOLITIC}', "");
Error('\p{Blk= glagolitic/a/}');
Error('\P{Blk= glagolitic/a/}');
Expect(1, 11359, '\p{Blk=glagolitic}', "");
Expect(0, 11359, '\p{^Blk=glagolitic}', "");
Expect(0, 11359, '\P{Blk=glagolitic}', "");
Expect(1, 11359, '\P{^Blk=glagolitic}', "");
Expect(0, 11263, '\p{Blk=glagolitic}', "");
Expect(1, 11263, '\p{^Blk=glagolitic}', "");
Expect(1, 11263, '\P{Blk=glagolitic}', "");
Expect(0, 11263, '\P{^Blk=glagolitic}', "");
Expect(1, 11359, '\p{Blk:   	-Glagolitic}', "");
Expect(0, 11359, '\p{^Blk:   	-Glagolitic}', "");
Expect(0, 11359, '\P{Blk:   	-Glagolitic}', "");
Expect(1, 11359, '\P{^Blk:   	-Glagolitic}', "");
Expect(0, 11263, '\p{Blk:   	-Glagolitic}', "");
Expect(1, 11263, '\p{^Blk:   	-Glagolitic}', "");
Expect(1, 11263, '\P{Blk:   	-Glagolitic}', "");
Expect(0, 11263, '\P{^Blk:   	-Glagolitic}', "");
Error('\p{Is_Block: :=  glagolitic}');
Error('\P{Is_Block: :=  glagolitic}');
Expect(1, 11359, '\p{Is_Block=glagolitic}', "");
Expect(0, 11359, '\p{^Is_Block=glagolitic}', "");
Expect(0, 11359, '\P{Is_Block=glagolitic}', "");
Expect(1, 11359, '\P{^Is_Block=glagolitic}', "");
Expect(0, 11263, '\p{Is_Block=glagolitic}', "");
Expect(1, 11263, '\p{^Is_Block=glagolitic}', "");
Expect(1, 11263, '\P{Is_Block=glagolitic}', "");
Expect(0, 11263, '\P{^Is_Block=glagolitic}', "");
Expect(1, 11359, '\p{Is_Block=--Glagolitic}', "");
Expect(0, 11359, '\p{^Is_Block=--Glagolitic}', "");
Expect(0, 11359, '\P{Is_Block=--Glagolitic}', "");
Expect(1, 11359, '\P{^Is_Block=--Glagolitic}', "");
Expect(0, 11263, '\p{Is_Block=--Glagolitic}', "");
Expect(1, 11263, '\p{^Is_Block=--Glagolitic}', "");
Expect(1, 11263, '\P{Is_Block=--Glagolitic}', "");
Expect(0, 11263, '\P{^Is_Block=--Glagolitic}', "");
Error('\p{Is_Blk=/a/  GLAGOLITIC}');
Error('\P{Is_Blk=/a/  GLAGOLITIC}');
Expect(1, 11359, '\p{Is_Blk=glagolitic}', "");
Expect(0, 11359, '\p{^Is_Blk=glagolitic}', "");
Expect(0, 11359, '\P{Is_Blk=glagolitic}', "");
Expect(1, 11359, '\P{^Is_Blk=glagolitic}', "");
Expect(0, 11263, '\p{Is_Blk=glagolitic}', "");
Expect(1, 11263, '\p{^Is_Blk=glagolitic}', "");
Expect(1, 11263, '\P{Is_Blk=glagolitic}', "");
Expect(0, 11263, '\P{^Is_Blk=glagolitic}', "");
Expect(1, 11359, '\p{Is_Blk=_ GLAGOLITIC}', "");
Expect(0, 11359, '\p{^Is_Blk=_ GLAGOLITIC}', "");
Expect(0, 11359, '\P{Is_Blk=_ GLAGOLITIC}', "");
Expect(1, 11359, '\P{^Is_Blk=_ GLAGOLITIC}', "");
Expect(0, 11263, '\p{Is_Blk=_ GLAGOLITIC}', "");
Expect(1, 11263, '\p{^Is_Blk=_ GLAGOLITIC}', "");
Expect(1, 11263, '\P{Is_Blk=_ GLAGOLITIC}', "");
Expect(0, 11263, '\P{^Is_Blk=_ GLAGOLITIC}', "");
Error('\p{Block=/a/tagalog}');
Error('\P{Block=/a/tagalog}');
Expect(1, 5919, '\p{Block=tagalog}', "");
Expect(0, 5919, '\p{^Block=tagalog}', "");
Expect(0, 5919, '\P{Block=tagalog}', "");
Expect(1, 5919, '\P{^Block=tagalog}', "");
Expect(0, 5887, '\p{Block=tagalog}', "");
Expect(1, 5887, '\p{^Block=tagalog}', "");
Expect(1, 5887, '\P{Block=tagalog}', "");
Expect(0, 5887, '\P{^Block=tagalog}', "");
Expect(1, 5919, '\p{Block=_ Tagalog}', "");
Expect(0, 5919, '\p{^Block=_ Tagalog}', "");
Expect(0, 5919, '\P{Block=_ Tagalog}', "");
Expect(1, 5919, '\P{^Block=_ Tagalog}', "");
Expect(0, 5887, '\p{Block=_ Tagalog}', "");
Expect(1, 5887, '\p{^Block=_ Tagalog}', "");
Expect(1, 5887, '\P{Block=_ Tagalog}', "");
Expect(0, 5887, '\P{^Block=_ Tagalog}', "");
Error('\p{Blk=_:=TAGALOG}');
Error('\P{Blk=_:=TAGALOG}');
Expect(1, 5919, '\p{Blk=tagalog}', "");
Expect(0, 5919, '\p{^Blk=tagalog}', "");
Expect(0, 5919, '\P{Blk=tagalog}', "");
Expect(1, 5919, '\P{^Blk=tagalog}', "");
Expect(0, 5887, '\p{Blk=tagalog}', "");
Expect(1, 5887, '\p{^Blk=tagalog}', "");
Expect(1, 5887, '\P{Blk=tagalog}', "");
Expect(0, 5887, '\P{^Blk=tagalog}', "");
Expect(1, 5919, '\p{Blk=	tagalog}', "");
Expect(0, 5919, '\p{^Blk=	tagalog}', "");
Expect(0, 5919, '\P{Blk=	tagalog}', "");
Expect(1, 5919, '\P{^Blk=	tagalog}', "");
Expect(0, 5887, '\p{Blk=	tagalog}', "");
Expect(1, 5887, '\p{^Blk=	tagalog}', "");
Expect(1, 5887, '\P{Blk=	tagalog}', "");
Expect(0, 5887, '\P{^Blk=	tagalog}', "");
Error('\p{Is_Block=	/a/TAGALOG}');
Error('\P{Is_Block=	/a/TAGALOG}');
Expect(1, 5919, '\p{Is_Block=tagalog}', "");
Expect(0, 5919, '\p{^Is_Block=tagalog}', "");
Expect(0, 5919, '\P{Is_Block=tagalog}', "");
Expect(1, 5919, '\P{^Is_Block=tagalog}', "");
Expect(0, 5887, '\p{Is_Block=tagalog}', "");
Expect(1, 5887, '\p{^Is_Block=tagalog}', "");
Expect(1, 5887, '\P{Is_Block=tagalog}', "");
Expect(0, 5887, '\P{^Is_Block=tagalog}', "");
Expect(1, 5919, '\p{Is_Block=_ TAGALOG}', "");
Expect(0, 5919, '\p{^Is_Block=_ TAGALOG}', "");
Expect(0, 5919, '\P{Is_Block=_ TAGALOG}', "");
Expect(1, 5919, '\P{^Is_Block=_ TAGALOG}', "");
Expect(0, 5887, '\p{Is_Block=_ TAGALOG}', "");
Expect(1, 5887, '\p{^Is_Block=_ TAGALOG}', "");
Expect(1, 5887, '\P{Is_Block=_ TAGALOG}', "");
Expect(0, 5887, '\P{^Is_Block=_ TAGALOG}', "");
Error('\p{Is_Blk=-/a/Tagalog}');
Error('\P{Is_Blk=-/a/Tagalog}');
Expect(1, 5919, '\p{Is_Blk=tagalog}', "");
Expect(0, 5919, '\p{^Is_Blk=tagalog}', "");
Expect(0, 5919, '\P{Is_Blk=tagalog}', "");
Expect(1, 5919, '\P{^Is_Blk=tagalog}', "");
Expect(0, 5887, '\p{Is_Blk=tagalog}', "");
Expect(1, 5887, '\p{^Is_Blk=tagalog}', "");
Expect(1, 5887, '\P{Is_Blk=tagalog}', "");
Expect(0, 5887, '\P{^Is_Blk=tagalog}', "");
Expect(1, 5919, '\p{Is_Blk:    _tagalog}', "");
Expect(0, 5919, '\p{^Is_Blk:    _tagalog}', "");
Expect(0, 5919, '\P{Is_Blk:    _tagalog}', "");
Expect(1, 5919, '\P{^Is_Blk:    _tagalog}', "");
Expect(0, 5887, '\p{Is_Blk:    _tagalog}', "");
Expect(1, 5887, '\p{^Is_Blk:    _tagalog}', "");
Expect(1, 5887, '\P{Is_Blk:    _tagalog}', "");
Expect(0, 5887, '\P{^Is_Blk:    _tagalog}', "");
Error('\p{Block=:=	_Kharoshthi}');
Error('\P{Block=:=	_Kharoshthi}');
Expect(1, 68191, '\p{Block=kharoshthi}', "");
Expect(0, 68191, '\p{^Block=kharoshthi}', "");
Expect(0, 68191, '\P{Block=kharoshthi}', "");
Expect(1, 68191, '\P{^Block=kharoshthi}', "");
Expect(0, 68095, '\p{Block=kharoshthi}', "");
Expect(1, 68095, '\p{^Block=kharoshthi}', "");
Expect(1, 68095, '\P{Block=kharoshthi}', "");
Expect(0, 68095, '\P{^Block=kharoshthi}', "");
Expect(1, 68191, '\p{Block:__KHAROSHTHI}', "");
Expect(0, 68191, '\p{^Block:__KHAROSHTHI}', "");
Expect(0, 68191, '\P{Block:__KHAROSHTHI}', "");
Expect(1, 68191, '\P{^Block:__KHAROSHTHI}', "");
Expect(0, 68095, '\p{Block:__KHAROSHTHI}', "");
Expect(1, 68095, '\p{^Block:__KHAROSHTHI}', "");
Expect(1, 68095, '\P{Block:__KHAROSHTHI}', "");
Expect(0, 68095, '\P{^Block:__KHAROSHTHI}', "");
Error('\p{Blk=/a/ 	KHAROSHTHI}');
Error('\P{Blk=/a/ 	KHAROSHTHI}');
Expect(1, 68191, '\p{Blk=kharoshthi}', "");
Expect(0, 68191, '\p{^Blk=kharoshthi}', "");
Expect(0, 68191, '\P{Blk=kharoshthi}', "");
Expect(1, 68191, '\P{^Blk=kharoshthi}', "");
Expect(0, 68095, '\p{Blk=kharoshthi}', "");
Expect(1, 68095, '\p{^Blk=kharoshthi}', "");
Expect(1, 68095, '\P{Blk=kharoshthi}', "");
Expect(0, 68095, '\P{^Blk=kharoshthi}', "");
Expect(1, 68191, '\p{Blk= KHAROSHTHI}', "");
Expect(0, 68191, '\p{^Blk= KHAROSHTHI}', "");
Expect(0, 68191, '\P{Blk= KHAROSHTHI}', "");
Expect(1, 68191, '\P{^Blk= KHAROSHTHI}', "");
Expect(0, 68095, '\p{Blk= KHAROSHTHI}', "");
Expect(1, 68095, '\p{^Blk= KHAROSHTHI}', "");
Expect(1, 68095, '\P{Blk= KHAROSHTHI}', "");
Expect(0, 68095, '\P{^Blk= KHAROSHTHI}', "");
Error('\p{Is_Block=/a/	_KHAROSHTHI}');
Error('\P{Is_Block=/a/	_KHAROSHTHI}');
Expect(1, 68191, '\p{Is_Block=kharoshthi}', "");
Expect(0, 68191, '\p{^Is_Block=kharoshthi}', "");
Expect(0, 68191, '\P{Is_Block=kharoshthi}', "");
Expect(1, 68191, '\P{^Is_Block=kharoshthi}', "");
Expect(0, 68095, '\p{Is_Block=kharoshthi}', "");
Expect(1, 68095, '\p{^Is_Block=kharoshthi}', "");
Expect(1, 68095, '\P{Is_Block=kharoshthi}', "");
Expect(0, 68095, '\P{^Is_Block=kharoshthi}', "");
Expect(1, 68191, '\p{Is_Block=_	KHAROSHTHI}', "");
Expect(0, 68191, '\p{^Is_Block=_	KHAROSHTHI}', "");
Expect(0, 68191, '\P{Is_Block=_	KHAROSHTHI}', "");
Expect(1, 68191, '\P{^Is_Block=_	KHAROSHTHI}', "");
Expect(0, 68095, '\p{Is_Block=_	KHAROSHTHI}', "");
Expect(1, 68095, '\p{^Is_Block=_	KHAROSHTHI}', "");
Expect(1, 68095, '\P{Is_Block=_	KHAROSHTHI}', "");
Expect(0, 68095, '\P{^Is_Block=_	KHAROSHTHI}', "");
Error('\p{Is_Blk=:=_-KHAROSHTHI}');
Error('\P{Is_Blk=:=_-KHAROSHTHI}');
Expect(1, 68191, '\p{Is_Blk=kharoshthi}', "");
Expect(0, 68191, '\p{^Is_Blk=kharoshthi}', "");
Expect(0, 68191, '\P{Is_Blk=kharoshthi}', "");
Expect(1, 68191, '\P{^Is_Blk=kharoshthi}', "");
Expect(0, 68095, '\p{Is_Blk=kharoshthi}', "");
Expect(1, 68095, '\p{^Is_Blk=kharoshthi}', "");
Expect(1, 68095, '\P{Is_Blk=kharoshthi}', "");
Expect(0, 68095, '\P{^Is_Blk=kharoshthi}', "");
Expect(1, 68191, '\p{Is_Blk=-Kharoshthi}', "");
Expect(0, 68191, '\p{^Is_Blk=-Kharoshthi}', "");
Expect(0, 68191, '\P{Is_Blk=-Kharoshthi}', "");
Expect(1, 68191, '\P{^Is_Blk=-Kharoshthi}', "");
Expect(0, 68095, '\p{Is_Blk=-Kharoshthi}', "");
Expect(1, 68095, '\p{^Is_Blk=-Kharoshthi}', "");
Expect(1, 68095, '\P{Is_Blk=-Kharoshthi}', "");
Expect(0, 68095, '\P{^Is_Blk=-Kharoshthi}', "");
Error('\p{Block:	:=_Arabic supplement}');
Error('\P{Block:	:=_Arabic supplement}');
Expect(1, 1919, '\p{Block=arabicsupplement}', "");
Expect(0, 1919, '\p{^Block=arabicsupplement}', "");
Expect(0, 1919, '\P{Block=arabicsupplement}', "");
Expect(1, 1919, '\P{^Block=arabicsupplement}', "");
Expect(0, 1871, '\p{Block=arabicsupplement}', "");
Expect(1, 1871, '\p{^Block=arabicsupplement}', "");
Expect(1, 1871, '\P{Block=arabicsupplement}', "");
Expect(0, 1871, '\P{^Block=arabicsupplement}', "");
Expect(1, 1919, '\p{Block=	arabic-SUPPLEMENT}', "");
Expect(0, 1919, '\p{^Block=	arabic-SUPPLEMENT}', "");
Expect(0, 1919, '\P{Block=	arabic-SUPPLEMENT}', "");
Expect(1, 1919, '\P{^Block=	arabic-SUPPLEMENT}', "");
Expect(0, 1871, '\p{Block=	arabic-SUPPLEMENT}', "");
Expect(1, 1871, '\p{^Block=	arabic-SUPPLEMENT}', "");
Expect(1, 1871, '\P{Block=	arabic-SUPPLEMENT}', "");
Expect(0, 1871, '\P{^Block=	arabic-SUPPLEMENT}', "");
Error('\p{Blk=:=ARABIC Supplement}');
Error('\P{Blk=:=ARABIC Supplement}');
Expect(1, 1919, '\p{Blk=arabicsupplement}', "");
Expect(0, 1919, '\p{^Blk=arabicsupplement}', "");
Expect(0, 1919, '\P{Blk=arabicsupplement}', "");
Expect(1, 1919, '\P{^Blk=arabicsupplement}', "");
Expect(0, 1871, '\p{Blk=arabicsupplement}', "");
Expect(1, 1871, '\p{^Blk=arabicsupplement}', "");
Expect(1, 1871, '\P{Blk=arabicsupplement}', "");
Expect(0, 1871, '\P{^Blk=arabicsupplement}', "");
Expect(1, 1919, '\p{Blk:  _arabic_Supplement}', "");
Expect(0, 1919, '\p{^Blk:  _arabic_Supplement}', "");
Expect(0, 1919, '\P{Blk:  _arabic_Supplement}', "");
Expect(1, 1919, '\P{^Blk:  _arabic_Supplement}', "");
Expect(0, 1871, '\p{Blk:  _arabic_Supplement}', "");
Expect(1, 1871, '\p{^Blk:  _arabic_Supplement}', "");
Expect(1, 1871, '\P{Blk:  _arabic_Supplement}', "");
Expect(0, 1871, '\P{^Blk:  _arabic_Supplement}', "");
Error('\p{Is_Block=Arabic supplement:=}');
Error('\P{Is_Block=Arabic supplement:=}');
Expect(1, 1919, '\p{Is_Block:arabicsupplement}', "");
Expect(0, 1919, '\p{^Is_Block:arabicsupplement}', "");
Expect(0, 1919, '\P{Is_Block:arabicsupplement}', "");
Expect(1, 1919, '\P{^Is_Block:arabicsupplement}', "");
Expect(0, 1871, '\p{Is_Block:arabicsupplement}', "");
Expect(1, 1871, '\p{^Is_Block:arabicsupplement}', "");
Expect(1, 1871, '\P{Is_Block:arabicsupplement}', "");
Expect(0, 1871, '\P{^Is_Block:arabicsupplement}', "");
Expect(1, 1919, '\p{Is_Block=-_arabic supplement}', "");
Expect(0, 1919, '\p{^Is_Block=-_arabic supplement}', "");
Expect(0, 1919, '\P{Is_Block=-_arabic supplement}', "");
Expect(1, 1919, '\P{^Is_Block=-_arabic supplement}', "");
Expect(0, 1871, '\p{Is_Block=-_arabic supplement}', "");
Expect(1, 1871, '\p{^Is_Block=-_arabic supplement}', "");
Expect(1, 1871, '\P{Is_Block=-_arabic supplement}', "");
Expect(0, 1871, '\P{^Is_Block=-_arabic supplement}', "");
Error('\p{Is_Blk=-	ARABIC	SUPPLEMENT/a/}');
Error('\P{Is_Blk=-	ARABIC	SUPPLEMENT/a/}');
Expect(1, 1919, '\p{Is_Blk=arabicsupplement}', "");
Expect(0, 1919, '\p{^Is_Blk=arabicsupplement}', "");
Expect(0, 1919, '\P{Is_Blk=arabicsupplement}', "");
Expect(1, 1919, '\P{^Is_Blk=arabicsupplement}', "");
Expect(0, 1871, '\p{Is_Blk=arabicsupplement}', "");
Expect(1, 1871, '\p{^Is_Blk=arabicsupplement}', "");
Expect(1, 1871, '\P{Is_Blk=arabicsupplement}', "");
Expect(0, 1871, '\P{^Is_Blk=arabicsupplement}', "");
Expect(1, 1919, '\p{Is_Blk=- Arabic supplement}', "");
Expect(0, 1919, '\p{^Is_Blk=- Arabic supplement}', "");
Expect(0, 1919, '\P{Is_Blk=- Arabic supplement}', "");
Expect(1, 1919, '\P{^Is_Blk=- Arabic supplement}', "");
Expect(0, 1871, '\p{Is_Blk=- Arabic supplement}', "");
Expect(1, 1871, '\p{^Is_Blk=- Arabic supplement}', "");
Expect(1, 1871, '\P{Is_Blk=- Arabic supplement}', "");
Expect(0, 1871, '\P{^Is_Blk=- Arabic supplement}', "");
Error('\p{Block=-	Cuneiform_NUMBERS/a/And Punctuation}');
Error('\P{Block=-	Cuneiform_NUMBERS/a/And Punctuation}');
Expect(1, 74879, '\p{Block=cuneiformnumbersandpunctuation}', "");
Expect(0, 74879, '\p{^Block=cuneiformnumbersandpunctuation}', "");
Expect(0, 74879, '\P{Block=cuneiformnumbersandpunctuation}', "");
Expect(1, 74879, '\P{^Block=cuneiformnumbersandpunctuation}', "");
Expect(0, 74751, '\p{Block=cuneiformnumbersandpunctuation}', "");
Expect(1, 74751, '\p{^Block=cuneiformnumbersandpunctuation}', "");
Expect(1, 74751, '\P{Block=cuneiformnumbersandpunctuation}', "");
Expect(0, 74751, '\P{^Block=cuneiformnumbersandpunctuation}', "");
Expect(1, 74879, '\p{Block=	 Cuneiform	Numbers	And_Punctuation}', "");
Expect(0, 74879, '\p{^Block=	 Cuneiform	Numbers	And_Punctuation}', "");
Expect(0, 74879, '\P{Block=	 Cuneiform	Numbers	And_Punctuation}', "");
Expect(1, 74879, '\P{^Block=	 Cuneiform	Numbers	And_Punctuation}', "");
Expect(0, 74751, '\p{Block=	 Cuneiform	Numbers	And_Punctuation}', "");
Expect(1, 74751, '\p{^Block=	 Cuneiform	Numbers	And_Punctuation}', "");
Expect(1, 74751, '\P{Block=	 Cuneiform	Numbers	And_Punctuation}', "");
Expect(0, 74751, '\P{^Block=	 Cuneiform	Numbers	And_Punctuation}', "");
Error('\p{Blk=	-CUNEIFORM:=Numbers	AND	Punctuation}');
Error('\P{Blk=	-CUNEIFORM:=Numbers	AND	Punctuation}');
Expect(1, 74879, '\p{Blk=cuneiformnumbersandpunctuation}', "");
Expect(0, 74879, '\p{^Blk=cuneiformnumbersandpunctuation}', "");
Expect(0, 74879, '\P{Blk=cuneiformnumbersandpunctuation}', "");
Expect(1, 74879, '\P{^Blk=cuneiformnumbersandpunctuation}', "");
Expect(0, 74751, '\p{Blk=cuneiformnumbersandpunctuation}', "");
Expect(1, 74751, '\p{^Blk=cuneiformnumbersandpunctuation}', "");
Expect(1, 74751, '\P{Blk=cuneiformnumbersandpunctuation}', "");
Expect(0, 74751, '\P{^Blk=cuneiformnumbersandpunctuation}', "");
Expect(1, 74879, '\p{Blk=__Cuneiform	NumbersAnd_Punctuation}', "");
Expect(0, 74879, '\p{^Blk=__Cuneiform	NumbersAnd_Punctuation}', "");
Expect(0, 74879, '\P{Blk=__Cuneiform	NumbersAnd_Punctuation}', "");
Expect(1, 74879, '\P{^Blk=__Cuneiform	NumbersAnd_Punctuation}', "");
Expect(0, 74751, '\p{Blk=__Cuneiform	NumbersAnd_Punctuation}', "");
Expect(1, 74751, '\p{^Blk=__Cuneiform	NumbersAnd_Punctuation}', "");
Expect(1, 74751, '\P{Blk=__Cuneiform	NumbersAnd_Punctuation}', "");
Expect(0, 74751, '\P{^Blk=__Cuneiform	NumbersAnd_Punctuation}', "");
Error('\p{Is_Block=- cuneiform Numbers_and_PUNCTUATION:=}');
Error('\P{Is_Block=- cuneiform Numbers_and_PUNCTUATION:=}');
Expect(1, 74879, '\p{Is_Block=cuneiformnumbersandpunctuation}', "");
Expect(0, 74879, '\p{^Is_Block=cuneiformnumbersandpunctuation}', "");
Expect(0, 74879, '\P{Is_Block=cuneiformnumbersandpunctuation}', "");
Expect(1, 74879, '\P{^Is_Block=cuneiformnumbersandpunctuation}', "");
Expect(0, 74751, '\p{Is_Block=cuneiformnumbersandpunctuation}', "");
Expect(1, 74751, '\p{^Is_Block=cuneiformnumbersandpunctuation}', "");
Expect(1, 74751, '\P{Is_Block=cuneiformnumbersandpunctuation}', "");
Expect(0, 74751, '\P{^Is_Block=cuneiformnumbersandpunctuation}', "");
Expect(1, 74879, '\p{Is_Block: 	-Cuneiform-Numbers-and	PUNCTUATION}', "");
Expect(0, 74879, '\p{^Is_Block: 	-Cuneiform-Numbers-and	PUNCTUATION}', "");
Expect(0, 74879, '\P{Is_Block: 	-Cuneiform-Numbers-and	PUNCTUATION}', "");
Expect(1, 74879, '\P{^Is_Block: 	-Cuneiform-Numbers-and	PUNCTUATION}', "");
Expect(0, 74751, '\p{Is_Block: 	-Cuneiform-Numbers-and	PUNCTUATION}', "");
Expect(1, 74751, '\p{^Is_Block: 	-Cuneiform-Numbers-and	PUNCTUATION}', "");
Expect(1, 74751, '\P{Is_Block: 	-Cuneiform-Numbers-and	PUNCTUATION}', "");
Expect(0, 74751, '\P{^Is_Block: 	-Cuneiform-Numbers-and	PUNCTUATION}', "");
Error('\p{Is_Blk=-:=Cuneiform_numbers	and-PUNCTUATION}');
Error('\P{Is_Blk=-:=Cuneiform_numbers	and-PUNCTUATION}');
Expect(1, 74879, '\p{Is_Blk: cuneiformnumbersandpunctuation}', "");
Expect(0, 74879, '\p{^Is_Blk: cuneiformnumbersandpunctuation}', "");
Expect(0, 74879, '\P{Is_Blk: cuneiformnumbersandpunctuation}', "");
Expect(1, 74879, '\P{^Is_Blk: cuneiformnumbersandpunctuation}', "");
Expect(0, 74751, '\p{Is_Blk: cuneiformnumbersandpunctuation}', "");
Expect(1, 74751, '\p{^Is_Blk: cuneiformnumbersandpunctuation}', "");
Expect(1, 74751, '\P{Is_Blk: cuneiformnumbersandpunctuation}', "");
Expect(0, 74751, '\P{^Is_Blk: cuneiformnumbersandpunctuation}', "");
Expect(1, 74879, '\p{Is_Blk= _CuneiformNumbersAndPunctuation}', "");
Expect(0, 74879, '\p{^Is_Blk= _CuneiformNumbersAndPunctuation}', "");
Expect(0, 74879, '\P{Is_Blk= _CuneiformNumbersAndPunctuation}', "");
Expect(1, 74879, '\P{^Is_Blk= _CuneiformNumbersAndPunctuation}', "");
Expect(0, 74751, '\p{Is_Blk= _CuneiformNumbersAndPunctuation}', "");
Expect(1, 74751, '\p{^Is_Blk= _CuneiformNumbersAndPunctuation}', "");
Expect(1, 74751, '\P{Is_Blk= _CuneiformNumbersAndPunctuation}', "");
Expect(0, 74751, '\P{^Is_Blk= _CuneiformNumbersAndPunctuation}', "");
Error('\p{Block=-/a/DevanagariExtended}');
Error('\P{Block=-/a/DevanagariExtended}');
Expect(1, 43263, '\p{Block=devanagariextended}', "");
Expect(0, 43263, '\p{^Block=devanagariextended}', "");
Expect(0, 43263, '\P{Block=devanagariextended}', "");
Expect(1, 43263, '\P{^Block=devanagariextended}', "");
Expect(0, 43231, '\p{Block=devanagariextended}', "");
Expect(1, 43231, '\p{^Block=devanagariextended}', "");
Expect(1, 43231, '\P{Block=devanagariextended}', "");
Expect(0, 43231, '\P{^Block=devanagariextended}', "");
Expect(1, 43263, '\p{Block=_DevanagariExtended}', "");
Expect(0, 43263, '\p{^Block=_DevanagariExtended}', "");
Expect(0, 43263, '\P{Block=_DevanagariExtended}', "");
Expect(1, 43263, '\P{^Block=_DevanagariExtended}', "");
Expect(0, 43231, '\p{Block=_DevanagariExtended}', "");
Expect(1, 43231, '\p{^Block=_DevanagariExtended}', "");
Expect(1, 43231, '\P{Block=_DevanagariExtended}', "");
Expect(0, 43231, '\P{^Block=_DevanagariExtended}', "");
Error('\p{Blk=/a/	Devanagari-Extended}');
Error('\P{Blk=/a/	Devanagari-Extended}');
Expect(1, 43263, '\p{Blk=devanagariextended}', "");
Expect(0, 43263, '\p{^Blk=devanagariextended}', "");
Expect(0, 43263, '\P{Blk=devanagariextended}', "");
Expect(1, 43263, '\P{^Blk=devanagariextended}', "");
Expect(0, 43231, '\p{Blk=devanagariextended}', "");
Expect(1, 43231, '\p{^Blk=devanagariextended}', "");
Expect(1, 43231, '\P{Blk=devanagariextended}', "");
Expect(0, 43231, '\P{^Blk=devanagariextended}', "");
Expect(1, 43263, '\p{Blk=--Devanagari_Extended}', "");
Expect(0, 43263, '\p{^Blk=--Devanagari_Extended}', "");
Expect(0, 43263, '\P{Blk=--Devanagari_Extended}', "");
Expect(1, 43263, '\P{^Blk=--Devanagari_Extended}', "");
Expect(0, 43231, '\p{Blk=--Devanagari_Extended}', "");
Expect(1, 43231, '\p{^Blk=--Devanagari_Extended}', "");
Expect(1, 43231, '\P{Blk=--Devanagari_Extended}', "");
Expect(0, 43231, '\P{^Blk=--Devanagari_Extended}', "");
Error('\p{Is_Block=:=-	Devanagari	Extended}');
Error('\P{Is_Block=:=-	Devanagari	Extended}');
Expect(1, 43263, '\p{Is_Block=devanagariextended}', "");
Expect(0, 43263, '\p{^Is_Block=devanagariextended}', "");
Expect(0, 43263, '\P{Is_Block=devanagariextended}', "");
Expect(1, 43263, '\P{^Is_Block=devanagariextended}', "");
Expect(0, 43231, '\p{Is_Block=devanagariextended}', "");
Expect(1, 43231, '\p{^Is_Block=devanagariextended}', "");
Expect(1, 43231, '\P{Is_Block=devanagariextended}', "");
Expect(0, 43231, '\P{^Is_Block=devanagariextended}', "");
Expect(1, 43263, '\p{Is_Block=_-Devanagari-extended}', "");
Expect(0, 43263, '\p{^Is_Block=_-Devanagari-extended}', "");
Expect(0, 43263, '\P{Is_Block=_-Devanagari-extended}', "");
Expect(1, 43263, '\P{^Is_Block=_-Devanagari-extended}', "");
Expect(0, 43231, '\p{Is_Block=_-Devanagari-extended}', "");
Expect(1, 43231, '\p{^Is_Block=_-Devanagari-extended}', "");
Expect(1, 43231, '\P{Is_Block=_-Devanagari-extended}', "");
Expect(0, 43231, '\P{^Is_Block=_-Devanagari-extended}', "");
Error('\p{Is_Blk=/a/	 Devanagari_EXTENDED}');
Error('\P{Is_Blk=/a/	 Devanagari_EXTENDED}');
Expect(1, 43263, '\p{Is_Blk=devanagariextended}', "");
Expect(0, 43263, '\p{^Is_Blk=devanagariextended}', "");
Expect(0, 43263, '\P{Is_Blk=devanagariextended}', "");
Expect(1, 43263, '\P{^Is_Blk=devanagariextended}', "");
Expect(0, 43231, '\p{Is_Blk=devanagariextended}', "");
Expect(1, 43231, '\p{^Is_Blk=devanagariextended}', "");
Expect(1, 43231, '\P{Is_Blk=devanagariextended}', "");
Expect(0, 43231, '\P{^Is_Blk=devanagariextended}', "");
Expect(1, 43263, '\p{Is_Blk=-	Devanagari	extended}', "");
Expect(0, 43263, '\p{^Is_Blk=-	Devanagari	extended}', "");
Expect(0, 43263, '\P{Is_Blk=-	Devanagari	extended}', "");
Expect(1, 43263, '\P{^Is_Blk=-	Devanagari	extended}', "");
Expect(0, 43231, '\p{Is_Blk=-	Devanagari	extended}', "");
Expect(1, 43231, '\p{^Is_Blk=-	Devanagari	extended}', "");
Expect(1, 43231, '\P{Is_Blk=-	Devanagari	extended}', "");
Expect(0, 43231, '\P{^Is_Blk=-	Devanagari	extended}', "");
Error('\p{Block=/a/	-yi_SYLLABLES}');
Error('\P{Block=/a/	-yi_SYLLABLES}');
Expect(1, 42127, '\p{Block=yisyllables}', "");
Expect(0, 42127, '\p{^Block=yisyllables}', "");
Expect(0, 42127, '\P{Block=yisyllables}', "");
Expect(1, 42127, '\P{^Block=yisyllables}', "");
Expect(0, 40959, '\p{Block=yisyllables}', "");
Expect(1, 40959, '\p{^Block=yisyllables}', "");
Expect(1, 40959, '\P{Block=yisyllables}', "");
Expect(0, 40959, '\P{^Block=yisyllables}', "");
Expect(1, 42127, '\p{Block=__Yi SYLLABLES}', "");
Expect(0, 42127, '\p{^Block=__Yi SYLLABLES}', "");
Expect(0, 42127, '\P{Block=__Yi SYLLABLES}', "");
Expect(1, 42127, '\P{^Block=__Yi SYLLABLES}', "");
Expect(0, 40959, '\p{Block=__Yi SYLLABLES}', "");
Expect(1, 40959, '\p{^Block=__Yi SYLLABLES}', "");
Expect(1, 40959, '\P{Block=__Yi SYLLABLES}', "");
Expect(0, 40959, '\P{^Block=__Yi SYLLABLES}', "");
Error('\p{Blk:    Yi/a/syllables}');
Error('\P{Blk:    Yi/a/syllables}');
Expect(1, 42127, '\p{Blk:   yisyllables}', "");
Expect(0, 42127, '\p{^Blk:   yisyllables}', "");
Expect(0, 42127, '\P{Blk:   yisyllables}', "");
Expect(1, 42127, '\P{^Blk:   yisyllables}', "");
Expect(0, 40959, '\p{Blk:   yisyllables}', "");
Expect(1, 40959, '\p{^Blk:   yisyllables}', "");
Expect(1, 40959, '\P{Blk:   yisyllables}', "");
Expect(0, 40959, '\P{^Blk:   yisyllables}', "");
Expect(1, 42127, '\p{Blk=Yi_Syllables}', "");
Expect(0, 42127, '\p{^Blk=Yi_Syllables}', "");
Expect(0, 42127, '\P{Blk=Yi_Syllables}', "");
Expect(1, 42127, '\P{^Blk=Yi_Syllables}', "");
Expect(0, 40959, '\p{Blk=Yi_Syllables}', "");
Expect(1, 40959, '\p{^Blk=Yi_Syllables}', "");
Expect(1, 40959, '\P{Blk=Yi_Syllables}', "");
Expect(0, 40959, '\P{^Blk=Yi_Syllables}', "");
Error('\p{Is_Block=/a/_YI-SYLLABLES}');
Error('\P{Is_Block=/a/_YI-SYLLABLES}');
Expect(1, 42127, '\p{Is_Block=yisyllables}', "");
Expect(0, 42127, '\p{^Is_Block=yisyllables}', "");
Expect(0, 42127, '\P{Is_Block=yisyllables}', "");
Expect(1, 42127, '\P{^Is_Block=yisyllables}', "");
Expect(0, 40959, '\p{Is_Block=yisyllables}', "");
Expect(1, 40959, '\p{^Is_Block=yisyllables}', "");
Expect(1, 40959, '\P{Is_Block=yisyllables}', "");
Expect(0, 40959, '\P{^Is_Block=yisyllables}', "");
Expect(1, 42127, '\p{Is_Block:   		YiSyllables}', "");
Expect(0, 42127, '\p{^Is_Block:   		YiSyllables}', "");
Expect(0, 42127, '\P{Is_Block:   		YiSyllables}', "");
Expect(1, 42127, '\P{^Is_Block:   		YiSyllables}', "");
Expect(0, 40959, '\p{Is_Block:   		YiSyllables}', "");
Expect(1, 40959, '\p{^Is_Block:   		YiSyllables}', "");
Expect(1, 40959, '\P{Is_Block:   		YiSyllables}', "");
Expect(0, 40959, '\P{^Is_Block:   		YiSyllables}', "");
Error('\p{Is_Blk=		YiSyllables/a/}');
Error('\P{Is_Blk=		YiSyllables/a/}');
Expect(1, 42127, '\p{Is_Blk=yisyllables}', "");
Expect(0, 42127, '\p{^Is_Blk=yisyllables}', "");
Expect(0, 42127, '\P{Is_Blk=yisyllables}', "");
Expect(1, 42127, '\P{^Is_Blk=yisyllables}', "");
Expect(0, 40959, '\p{Is_Blk=yisyllables}', "");
Expect(1, 40959, '\p{^Is_Blk=yisyllables}', "");
Expect(1, 40959, '\P{Is_Blk=yisyllables}', "");
Expect(0, 40959, '\P{^Is_Blk=yisyllables}', "");
Expect(1, 42127, '\p{Is_Blk=_-Yi SYLLABLES}', "");
Expect(0, 42127, '\p{^Is_Blk=_-Yi SYLLABLES}', "");
Expect(0, 42127, '\P{Is_Blk=_-Yi SYLLABLES}', "");
Expect(1, 42127, '\P{^Is_Blk=_-Yi SYLLABLES}', "");
Expect(0, 40959, '\p{Is_Blk=_-Yi SYLLABLES}', "");
Expect(1, 40959, '\p{^Is_Blk=_-Yi SYLLABLES}', "");
Expect(1, 40959, '\P{Is_Blk=_-Yi SYLLABLES}', "");
Expect(0, 40959, '\P{^Is_Blk=_-Yi SYLLABLES}', "");
Error('\p{Block=-/a/CombiningHalf-Marks}');
Error('\P{Block=-/a/CombiningHalf-Marks}');
Expect(1, 65071, '\p{Block=combininghalfmarks}', "");
Expect(0, 65071, '\p{^Block=combininghalfmarks}', "");
Expect(0, 65071, '\P{Block=combininghalfmarks}', "");
Expect(1, 65071, '\P{^Block=combininghalfmarks}', "");
Expect(0, 65055, '\p{Block=combininghalfmarks}', "");
Expect(1, 65055, '\p{^Block=combininghalfmarks}', "");
Expect(1, 65055, '\P{Block=combininghalfmarks}', "");
Expect(0, 65055, '\P{^Block=combininghalfmarks}', "");
Expect(1, 65071, '\p{Block=		COMBININGHalf_Marks}', "");
Expect(0, 65071, '\p{^Block=		COMBININGHalf_Marks}', "");
Expect(0, 65071, '\P{Block=		COMBININGHalf_Marks}', "");
Expect(1, 65071, '\P{^Block=		COMBININGHalf_Marks}', "");
Expect(0, 65055, '\p{Block=		COMBININGHalf_Marks}', "");
Expect(1, 65055, '\p{^Block=		COMBININGHalf_Marks}', "");
Expect(1, 65055, '\P{Block=		COMBININGHalf_Marks}', "");
Expect(0, 65055, '\P{^Block=		COMBININGHalf_Marks}', "");
Error('\p{Blk= Combining	Half/a/marks}');
Error('\P{Blk= Combining	Half/a/marks}');
Expect(1, 65071, '\p{Blk=combininghalfmarks}', "");
Expect(0, 65071, '\p{^Blk=combininghalfmarks}', "");
Expect(0, 65071, '\P{Blk=combininghalfmarks}', "");
Expect(1, 65071, '\P{^Blk=combininghalfmarks}', "");
Expect(0, 65055, '\p{Blk=combininghalfmarks}', "");
Expect(1, 65055, '\p{^Blk=combininghalfmarks}', "");
Expect(1, 65055, '\P{Blk=combininghalfmarks}', "");
Expect(0, 65055, '\P{^Blk=combininghalfmarks}', "");
Expect(1, 65071, '\p{Blk:-COMBININGHALF-Marks}', "");
Expect(0, 65071, '\p{^Blk:-COMBININGHALF-Marks}', "");
Expect(0, 65071, '\P{Blk:-COMBININGHALF-Marks}', "");
Expect(1, 65071, '\P{^Blk:-COMBININGHALF-Marks}', "");
Expect(0, 65055, '\p{Blk:-COMBININGHALF-Marks}', "");
Expect(1, 65055, '\p{^Blk:-COMBININGHALF-Marks}', "");
Expect(1, 65055, '\P{Blk:-COMBININGHALF-Marks}', "");
Expect(0, 65055, '\P{^Blk:-COMBININGHALF-Marks}', "");
Error('\p{Is_Block= 	combining/a/HALF_Marks}');
Error('\P{Is_Block= 	combining/a/HALF_Marks}');
Expect(1, 65071, '\p{Is_Block=combininghalfmarks}', "");
Expect(0, 65071, '\p{^Is_Block=combininghalfmarks}', "");
Expect(0, 65071, '\P{Is_Block=combininghalfmarks}', "");
Expect(1, 65071, '\P{^Is_Block=combininghalfmarks}', "");
Expect(0, 65055, '\p{Is_Block=combininghalfmarks}', "");
Expect(1, 65055, '\p{^Is_Block=combininghalfmarks}', "");
Expect(1, 65055, '\P{Is_Block=combininghalfmarks}', "");
Expect(0, 65055, '\P{^Is_Block=combininghalfmarks}', "");
Expect(1, 65071, '\p{Is_Block=	-combining Half Marks}', "");
Expect(0, 65071, '\p{^Is_Block=	-combining Half Marks}', "");
Expect(0, 65071, '\P{Is_Block=	-combining Half Marks}', "");
Expect(1, 65071, '\P{^Is_Block=	-combining Half Marks}', "");
Expect(0, 65055, '\p{Is_Block=	-combining Half Marks}', "");
Expect(1, 65055, '\p{^Is_Block=	-combining Half Marks}', "");
Expect(1, 65055, '\P{Is_Block=	-combining Half Marks}', "");
Expect(0, 65055, '\P{^Is_Block=	-combining Half Marks}', "");
Error('\p{Is_Blk=Combining/a/Half marks}');
Error('\P{Is_Blk=Combining/a/Half marks}');
Expect(1, 65071, '\p{Is_Blk=combininghalfmarks}', "");
Expect(0, 65071, '\p{^Is_Blk=combininghalfmarks}', "");
Expect(0, 65071, '\P{Is_Blk=combininghalfmarks}', "");
Expect(1, 65071, '\P{^Is_Blk=combininghalfmarks}', "");
Expect(0, 65055, '\p{Is_Blk=combininghalfmarks}', "");
Expect(1, 65055, '\p{^Is_Blk=combininghalfmarks}', "");
Expect(1, 65055, '\P{Is_Blk=combininghalfmarks}', "");
Expect(0, 65055, '\P{^Is_Blk=combininghalfmarks}', "");
Expect(1, 65071, '\p{Is_Blk= 	COMBINING-Half Marks}', "");
Expect(0, 65071, '\p{^Is_Blk= 	COMBINING-Half Marks}', "");
Expect(0, 65071, '\P{Is_Blk= 	COMBINING-Half Marks}', "");
Expect(1, 65071, '\P{^Is_Blk= 	COMBINING-Half Marks}', "");
Expect(0, 65055, '\p{Is_Blk= 	COMBINING-Half Marks}', "");
Expect(1, 65055, '\p{^Is_Blk= 	COMBINING-Half Marks}', "");
Expect(1, 65055, '\P{Is_Blk= 	COMBINING-Half Marks}', "");
Expect(0, 65055, '\P{^Is_Blk= 	COMBINING-Half Marks}', "");
Error('\p{Block=-:=miscellaneous_SYMBOLSand	arrows}');
Error('\P{Block=-:=miscellaneous_SYMBOLSand	arrows}');
Expect(1, 11263, '\p{Block=miscellaneoussymbolsandarrows}', "");
Expect(0, 11263, '\p{^Block=miscellaneoussymbolsandarrows}', "");
Expect(0, 11263, '\P{Block=miscellaneoussymbolsandarrows}', "");
Expect(1, 11263, '\P{^Block=miscellaneoussymbolsandarrows}', "");
Expect(0, 11007, '\p{Block=miscellaneoussymbolsandarrows}', "");
Expect(1, 11007, '\p{^Block=miscellaneoussymbolsandarrows}', "");
Expect(1, 11007, '\P{Block=miscellaneoussymbolsandarrows}', "");
Expect(0, 11007, '\P{^Block=miscellaneoussymbolsandarrows}', "");
Expect(1, 11263, '\p{Block=	_Miscellaneous	SYMBOLS-And ARROWS}', "");
Expect(0, 11263, '\p{^Block=	_Miscellaneous	SYMBOLS-And ARROWS}', "");
Expect(0, 11263, '\P{Block=	_Miscellaneous	SYMBOLS-And ARROWS}', "");
Expect(1, 11263, '\P{^Block=	_Miscellaneous	SYMBOLS-And ARROWS}', "");
Expect(0, 11007, '\p{Block=	_Miscellaneous	SYMBOLS-And ARROWS}', "");
Expect(1, 11007, '\p{^Block=	_Miscellaneous	SYMBOLS-And ARROWS}', "");
Expect(1, 11007, '\P{Block=	_Miscellaneous	SYMBOLS-And ARROWS}', "");
Expect(0, 11007, '\P{^Block=	_Miscellaneous	SYMBOLS-And ARROWS}', "");
Error('\p{Blk=	 Miscellaneous	SYMBOLS:=AndArrows}');
Error('\P{Blk=	 Miscellaneous	SYMBOLS:=AndArrows}');
Expect(1, 11263, '\p{Blk: miscellaneoussymbolsandarrows}', "");
Expect(0, 11263, '\p{^Blk: miscellaneoussymbolsandarrows}', "");
Expect(0, 11263, '\P{Blk: miscellaneoussymbolsandarrows}', "");
Expect(1, 11263, '\P{^Blk: miscellaneoussymbolsandarrows}', "");
Expect(0, 11007, '\p{Blk: miscellaneoussymbolsandarrows}', "");
Expect(1, 11007, '\p{^Blk: miscellaneoussymbolsandarrows}', "");
Expect(1, 11007, '\P{Blk: miscellaneoussymbolsandarrows}', "");
Expect(0, 11007, '\P{^Blk: miscellaneoussymbolsandarrows}', "");
Expect(1, 11263, '\p{Blk=		MISCELLANEOUS-symbols	And_arrows}', "");
Expect(0, 11263, '\p{^Blk=		MISCELLANEOUS-symbols	And_arrows}', "");
Expect(0, 11263, '\P{Blk=		MISCELLANEOUS-symbols	And_arrows}', "");
Expect(1, 11263, '\P{^Blk=		MISCELLANEOUS-symbols	And_arrows}', "");
Expect(0, 11007, '\p{Blk=		MISCELLANEOUS-symbols	And_arrows}', "");
Expect(1, 11007, '\p{^Blk=		MISCELLANEOUS-symbols	And_arrows}', "");
Expect(1, 11007, '\P{Blk=		MISCELLANEOUS-symbols	And_arrows}', "");
Expect(0, 11007, '\P{^Blk=		MISCELLANEOUS-symbols	And_arrows}', "");
Error('\p{Is_Block= /a/MISCELLANEOUS-SymbolsAnd_ARROWS}');
Error('\P{Is_Block= /a/MISCELLANEOUS-SymbolsAnd_ARROWS}');
Expect(1, 11263, '\p{Is_Block=miscellaneoussymbolsandarrows}', "");
Expect(0, 11263, '\p{^Is_Block=miscellaneoussymbolsandarrows}', "");
Expect(0, 11263, '\P{Is_Block=miscellaneoussymbolsandarrows}', "");
Expect(1, 11263, '\P{^Is_Block=miscellaneoussymbolsandarrows}', "");
Expect(0, 11007, '\p{Is_Block=miscellaneoussymbolsandarrows}', "");
Expect(1, 11007, '\p{^Is_Block=miscellaneoussymbolsandarrows}', "");
Expect(1, 11007, '\P{Is_Block=miscellaneoussymbolsandarrows}', "");
Expect(0, 11007, '\P{^Is_Block=miscellaneoussymbolsandarrows}', "");
Expect(1, 11263, '\p{Is_Block:-MISCELLANEOUS symbolsAnd	ARROWS}', "");
Expect(0, 11263, '\p{^Is_Block:-MISCELLANEOUS symbolsAnd	ARROWS}', "");
Expect(0, 11263, '\P{Is_Block:-MISCELLANEOUS symbolsAnd	ARROWS}', "");
Expect(1, 11263, '\P{^Is_Block:-MISCELLANEOUS symbolsAnd	ARROWS}', "");
Expect(0, 11007, '\p{Is_Block:-MISCELLANEOUS symbolsAnd	ARROWS}', "");
Expect(1, 11007, '\p{^Is_Block:-MISCELLANEOUS symbolsAnd	ARROWS}', "");
Expect(1, 11007, '\P{Is_Block:-MISCELLANEOUS symbolsAnd	ARROWS}', "");
Expect(0, 11007, '\P{^Is_Block:-MISCELLANEOUS symbolsAnd	ARROWS}', "");
Error('\p{Is_Blk=  miscellaneous Symbols and/a/Arrows}');
Error('\P{Is_Blk=  miscellaneous Symbols and/a/Arrows}');
Expect(1, 11263, '\p{Is_Blk=miscellaneoussymbolsandarrows}', "");
Expect(0, 11263, '\p{^Is_Blk=miscellaneoussymbolsandarrows}', "");
Expect(0, 11263, '\P{Is_Blk=miscellaneoussymbolsandarrows}', "");
Expect(1, 11263, '\P{^Is_Blk=miscellaneoussymbolsandarrows}', "");
Expect(0, 11007, '\p{Is_Blk=miscellaneoussymbolsandarrows}', "");
Expect(1, 11007, '\p{^Is_Blk=miscellaneoussymbolsandarrows}', "");
Expect(1, 11007, '\P{Is_Blk=miscellaneoussymbolsandarrows}', "");
Expect(0, 11007, '\P{^Is_Blk=miscellaneoussymbolsandarrows}', "");
Expect(1, 11263, '\p{Is_Blk= miscellaneous Symbols	And	Arrows}', "");
Expect(0, 11263, '\p{^Is_Blk= miscellaneous Symbols	And	Arrows}', "");
Expect(0, 11263, '\P{Is_Blk= miscellaneous Symbols	And	Arrows}', "");
Expect(1, 11263, '\P{^Is_Blk= miscellaneous Symbols	And	Arrows}', "");
Expect(0, 11007, '\p{Is_Blk= miscellaneous Symbols	And	Arrows}', "");
Expect(1, 11007, '\p{^Is_Blk= miscellaneous Symbols	And	Arrows}', "");
Expect(1, 11007, '\P{Is_Blk= miscellaneous Symbols	And	Arrows}', "");
Expect(0, 11007, '\P{^Is_Blk= miscellaneous Symbols	And	Arrows}', "");
Error('\p{Block:-	halfwidth-and:=FULLWIDTH	Forms}');
Error('\P{Block:-	halfwidth-and:=FULLWIDTH	Forms}');
Expect(1, 65519, '\p{Block=halfwidthandfullwidthforms}', "");
Expect(0, 65519, '\p{^Block=halfwidthandfullwidthforms}', "");
Expect(0, 65519, '\P{Block=halfwidthandfullwidthforms}', "");
Expect(1, 65519, '\P{^Block=halfwidthandfullwidthforms}', "");
Expect(0, 65279, '\p{Block=halfwidthandfullwidthforms}', "");
Expect(1, 65279, '\p{^Block=halfwidthandfullwidthforms}', "");
Expect(1, 65279, '\P{Block=halfwidthandfullwidthforms}', "");
Expect(0, 65279, '\P{^Block=halfwidthandfullwidthforms}', "");
Expect(1, 65519, '\p{Block=	 Halfwidthand_fullwidth-FORMS}', "");
Expect(0, 65519, '\p{^Block=	 Halfwidthand_fullwidth-FORMS}', "");
Expect(0, 65519, '\P{Block=	 Halfwidthand_fullwidth-FORMS}', "");
Expect(1, 65519, '\P{^Block=	 Halfwidthand_fullwidth-FORMS}', "");
Expect(0, 65279, '\p{Block=	 Halfwidthand_fullwidth-FORMS}', "");
Expect(1, 65279, '\p{^Block=	 Halfwidthand_fullwidth-FORMS}', "");
Expect(1, 65279, '\P{Block=	 Halfwidthand_fullwidth-FORMS}', "");
Expect(0, 65279, '\P{^Block=	 Halfwidthand_fullwidth-FORMS}', "");
Error('\p{Blk=  HALFWIDTH/a/AND_Fullwidth	Forms}');
Error('\P{Blk=  HALFWIDTH/a/AND_Fullwidth	Forms}');
Expect(1, 65519, '\p{Blk=halfwidthandfullwidthforms}', "");
Expect(0, 65519, '\p{^Blk=halfwidthandfullwidthforms}', "");
Expect(0, 65519, '\P{Blk=halfwidthandfullwidthforms}', "");
Expect(1, 65519, '\P{^Blk=halfwidthandfullwidthforms}', "");
Expect(0, 65279, '\p{Blk=halfwidthandfullwidthforms}', "");
Expect(1, 65279, '\p{^Blk=halfwidthandfullwidthforms}', "");
Expect(1, 65279, '\P{Blk=halfwidthandfullwidthforms}', "");
Expect(0, 65279, '\P{^Blk=halfwidthandfullwidthforms}', "");
Expect(1, 65519, '\p{Blk=_ HALFWIDTH_AND_Fullwidth	Forms}', "");
Expect(0, 65519, '\p{^Blk=_ HALFWIDTH_AND_Fullwidth	Forms}', "");
Expect(0, 65519, '\P{Blk=_ HALFWIDTH_AND_Fullwidth	Forms}', "");
Expect(1, 65519, '\P{^Blk=_ HALFWIDTH_AND_Fullwidth	Forms}', "");
Expect(0, 65279, '\p{Blk=_ HALFWIDTH_AND_Fullwidth	Forms}', "");
Expect(1, 65279, '\p{^Blk=_ HALFWIDTH_AND_Fullwidth	Forms}', "");
Expect(1, 65279, '\P{Blk=_ HALFWIDTH_AND_Fullwidth	Forms}', "");
Expect(0, 65279, '\P{^Blk=_ HALFWIDTH_AND_Fullwidth	Forms}', "");
Error('\p{Is_Block=_:=HALFWIDTH-AND_fullwidth	FORMS}');
Error('\P{Is_Block=_:=HALFWIDTH-AND_fullwidth	FORMS}');
Expect(1, 65519, '\p{Is_Block=halfwidthandfullwidthforms}', "");
Expect(0, 65519, '\p{^Is_Block=halfwidthandfullwidthforms}', "");
Expect(0, 65519, '\P{Is_Block=halfwidthandfullwidthforms}', "");
Expect(1, 65519, '\P{^Is_Block=halfwidthandfullwidthforms}', "");
Expect(0, 65279, '\p{Is_Block=halfwidthandfullwidthforms}', "");
Expect(1, 65279, '\p{^Is_Block=halfwidthandfullwidthforms}', "");
Expect(1, 65279, '\P{Is_Block=halfwidthandfullwidthforms}', "");
Expect(0, 65279, '\P{^Is_Block=halfwidthandfullwidthforms}', "");
Expect(1, 65519, '\p{Is_Block=	-Halfwidth and	FULLWIDTH_Forms}', "");
Expect(0, 65519, '\p{^Is_Block=	-Halfwidth and	FULLWIDTH_Forms}', "");
Expect(0, 65519, '\P{Is_Block=	-Halfwidth and	FULLWIDTH_Forms}', "");
Expect(1, 65519, '\P{^Is_Block=	-Halfwidth and	FULLWIDTH_Forms}', "");
Expect(0, 65279, '\p{Is_Block=	-Halfwidth and	FULLWIDTH_Forms}', "");
Expect(1, 65279, '\p{^Is_Block=	-Halfwidth and	FULLWIDTH_Forms}', "");
Expect(1, 65279, '\P{Is_Block=	-Halfwidth and	FULLWIDTH_Forms}', "");
Expect(0, 65279, '\P{^Is_Block=	-Halfwidth and	FULLWIDTH_Forms}', "");
Error('\p{Is_Blk=- HALFWIDTH_And	Fullwidth Forms/a/}');
Error('\P{Is_Blk=- HALFWIDTH_And	Fullwidth Forms/a/}');
Expect(1, 65519, '\p{Is_Blk=halfwidthandfullwidthforms}', "");
Expect(0, 65519, '\p{^Is_Blk=halfwidthandfullwidthforms}', "");
Expect(0, 65519, '\P{Is_Blk=halfwidthandfullwidthforms}', "");
Expect(1, 65519, '\P{^Is_Blk=halfwidthandfullwidthforms}', "");
Expect(0, 65279, '\p{Is_Blk=halfwidthandfullwidthforms}', "");
Expect(1, 65279, '\p{^Is_Blk=halfwidthandfullwidthforms}', "");
Expect(1, 65279, '\P{Is_Blk=halfwidthandfullwidthforms}', "");
Expect(0, 65279, '\P{^Is_Blk=halfwidthandfullwidthforms}', "");
Expect(1, 65519, '\p{Is_Blk=--HALFWIDTH-AND Fullwidth Forms}', "");
Expect(0, 65519, '\p{^Is_Blk=--HALFWIDTH-AND Fullwidth Forms}', "");
Expect(0, 65519, '\P{Is_Blk=--HALFWIDTH-AND Fullwidth Forms}', "");
Expect(1, 65519, '\P{^Is_Blk=--HALFWIDTH-AND Fullwidth Forms}', "");
Expect(0, 65279, '\p{Is_Blk=--HALFWIDTH-AND Fullwidth Forms}', "");
Expect(1, 65279, '\p{^Is_Blk=--HALFWIDTH-AND Fullwidth Forms}', "");
Expect(1, 65279, '\P{Is_Blk=--HALFWIDTH-AND Fullwidth Forms}', "");
Expect(0, 65279, '\P{^Is_Blk=--HALFWIDTH-AND Fullwidth Forms}', "");
Error('\p{Block=-	supplementary Private_USE area/a/B}');
Error('\P{Block=-	supplementary Private_USE area/a/B}');
Expect(1, 1048576, '\p{Block=supplementaryprivateuseareab}', "");
Expect(0, 1048576, '\p{^Block=supplementaryprivateuseareab}', "");
Expect(0, 1048576, '\P{Block=supplementaryprivateuseareab}', "");
Expect(1, 1048576, '\P{^Block=supplementaryprivateuseareab}', "");
Expect(0, 1, '\p{Block=supplementaryprivateuseareab}', "");
Expect(1, 1, '\p{^Block=supplementaryprivateuseareab}', "");
Expect(1, 1, '\P{Block=supplementaryprivateuseareab}', "");
Expect(0, 1, '\P{^Block=supplementaryprivateuseareab}', "");
Expect(1, 1048576, '\p{Block=-	Supplementary	private_Use_Area B}', "");
Expect(0, 1048576, '\p{^Block=-	Supplementary	private_Use_Area B}', "");
Expect(0, 1048576, '\P{Block=-	Supplementary	private_Use_Area B}', "");
Expect(1, 1048576, '\P{^Block=-	Supplementary	private_Use_Area B}', "");
Expect(0, 1, '\p{Block=-	Supplementary	private_Use_Area B}', "");
Expect(1, 1, '\p{^Block=-	Supplementary	private_Use_Area B}', "");
Expect(1, 1, '\P{Block=-	Supplementary	private_Use_Area B}', "");
Expect(0, 1, '\P{^Block=-	Supplementary	private_Use_Area B}', "");
Error('\p{Blk=:=	 Supplementary-Private-Use AREAB}');
Error('\P{Blk=:=	 Supplementary-Private-Use AREAB}');
Expect(1, 1048576, '\p{Blk=supplementaryprivateuseareab}', "");
Expect(0, 1048576, '\p{^Blk=supplementaryprivateuseareab}', "");
Expect(0, 1048576, '\P{Blk=supplementaryprivateuseareab}', "");
Expect(1, 1048576, '\P{^Blk=supplementaryprivateuseareab}', "");
Expect(0, 1, '\p{Blk=supplementaryprivateuseareab}', "");
Expect(1, 1, '\p{^Blk=supplementaryprivateuseareab}', "");
Expect(1, 1, '\P{Blk=supplementaryprivateuseareab}', "");
Expect(0, 1, '\P{^Blk=supplementaryprivateuseareab}', "");
Expect(1, 1048576, '\p{Blk= Supplementary-Private	USE areaB}', "");
Expect(0, 1048576, '\p{^Blk= Supplementary-Private	USE areaB}', "");
Expect(0, 1048576, '\P{Blk= Supplementary-Private	USE areaB}', "");
Expect(1, 1048576, '\P{^Blk= Supplementary-Private	USE areaB}', "");
Expect(0, 1, '\p{Blk= Supplementary-Private	USE areaB}', "");
Expect(1, 1, '\p{^Blk= Supplementary-Private	USE areaB}', "");
Expect(1, 1, '\P{Blk= Supplementary-Private	USE areaB}', "");
Expect(0, 1, '\P{^Blk= Supplementary-Private	USE areaB}', "");
Error('\p{Is_Block=__supplementary Private:=Use_Area	B}');
Error('\P{Is_Block=__supplementary Private:=Use_Area	B}');
Expect(1, 1048576, '\p{Is_Block=supplementaryprivateuseareab}', "");
Expect(0, 1048576, '\p{^Is_Block=supplementaryprivateuseareab}', "");
Expect(0, 1048576, '\P{Is_Block=supplementaryprivateuseareab}', "");
Expect(1, 1048576, '\P{^Is_Block=supplementaryprivateuseareab}', "");
Expect(0, 1, '\p{Is_Block=supplementaryprivateuseareab}', "");
Expect(1, 1, '\p{^Is_Block=supplementaryprivateuseareab}', "");
Expect(1, 1, '\P{Is_Block=supplementaryprivateuseareab}', "");
Expect(0, 1, '\P{^Is_Block=supplementaryprivateuseareab}', "");
Expect(1, 1048576, '\p{Is_Block=		supplementary-Private USE-area	B}', "");
Expect(0, 1048576, '\p{^Is_Block=		supplementary-Private USE-area	B}', "");
Expect(0, 1048576, '\P{Is_Block=		supplementary-Private USE-area	B}', "");
Expect(1, 1048576, '\P{^Is_Block=		supplementary-Private USE-area	B}', "");
Expect(0, 1, '\p{Is_Block=		supplementary-Private USE-area	B}', "");
Expect(1, 1, '\p{^Is_Block=		supplementary-Private USE-area	B}', "");
Expect(1, 1, '\P{Is_Block=		supplementary-Private USE-area	B}', "");
Expect(0, 1, '\P{^Is_Block=		supplementary-Private USE-area	B}', "");
Error('\p{Is_Blk: :=Supplementary_private	use-AreaB}');
Error('\P{Is_Blk: :=Supplementary_private	use-AreaB}');
Expect(1, 1048576, '\p{Is_Blk=supplementaryprivateuseareab}', "");
Expect(0, 1048576, '\p{^Is_Blk=supplementaryprivateuseareab}', "");
Expect(0, 1048576, '\P{Is_Blk=supplementaryprivateuseareab}', "");
Expect(1, 1048576, '\P{^Is_Blk=supplementaryprivateuseareab}', "");
Expect(0, 1, '\p{Is_Blk=supplementaryprivateuseareab}', "");
Expect(1, 1, '\p{^Is_Blk=supplementaryprivateuseareab}', "");
Expect(1, 1, '\P{Is_Blk=supplementaryprivateuseareab}', "");
Expect(0, 1, '\P{^Is_Blk=supplementaryprivateuseareab}', "");
Expect(1, 1048576, '\p{Is_Blk=- supplementary_PrivateUse	AREAB}', "");
Expect(0, 1048576, '\p{^Is_Blk=- supplementary_PrivateUse	AREAB}', "");
Expect(0, 1048576, '\P{Is_Blk=- supplementary_PrivateUse	AREAB}', "");
Expect(1, 1048576, '\P{^Is_Blk=- supplementary_PrivateUse	AREAB}', "");
Expect(0, 1, '\p{Is_Blk=- supplementary_PrivateUse	AREAB}', "");
Expect(1, 1, '\p{^Is_Blk=- supplementary_PrivateUse	AREAB}', "");
Expect(1, 1, '\P{Is_Blk=- supplementary_PrivateUse	AREAB}', "");
Expect(0, 1, '\P{^Is_Blk=- supplementary_PrivateUse	AREAB}', "");
Error('\p{Block=-	SUNDANESE:=}');
Error('\P{Block=-	SUNDANESE:=}');
Expect(1, 7103, '\p{Block=sundanese}', "");
Expect(0, 7103, '\p{^Block=sundanese}', "");
Expect(0, 7103, '\P{Block=sundanese}', "");
Expect(1, 7103, '\P{^Block=sundanese}', "");
Expect(0, 7039, '\p{Block=sundanese}', "");
Expect(1, 7039, '\p{^Block=sundanese}', "");
Expect(1, 7039, '\P{Block=sundanese}', "");
Expect(0, 7039, '\P{^Block=sundanese}', "");
Expect(1, 7103, '\p{Block=	 Sundanese}', "");
Expect(0, 7103, '\p{^Block=	 Sundanese}', "");
Expect(0, 7103, '\P{Block=	 Sundanese}', "");
Expect(1, 7103, '\P{^Block=	 Sundanese}', "");
Expect(0, 7039, '\p{Block=	 Sundanese}', "");
Expect(1, 7039, '\p{^Block=	 Sundanese}', "");
Expect(1, 7039, '\P{Block=	 Sundanese}', "");
Expect(0, 7039, '\P{^Block=	 Sundanese}', "");
Error('\p{Blk=/a/	-sundanese}');
Error('\P{Blk=/a/	-sundanese}');
Expect(1, 7103, '\p{Blk=sundanese}', "");
Expect(0, 7103, '\p{^Blk=sundanese}', "");
Expect(0, 7103, '\P{Blk=sundanese}', "");
Expect(1, 7103, '\P{^Blk=sundanese}', "");
Expect(0, 7039, '\p{Blk=sundanese}', "");
Expect(1, 7039, '\p{^Blk=sundanese}', "");
Expect(1, 7039, '\P{Blk=sundanese}', "");
Expect(0, 7039, '\P{^Blk=sundanese}', "");
Expect(1, 7103, '\p{Blk=-Sundanese}', "");
Expect(0, 7103, '\p{^Blk=-Sundanese}', "");
Expect(0, 7103, '\P{Blk=-Sundanese}', "");
Expect(1, 7103, '\P{^Blk=-Sundanese}', "");
Expect(0, 7039, '\p{Blk=-Sundanese}', "");
Expect(1, 7039, '\p{^Blk=-Sundanese}', "");
Expect(1, 7039, '\P{Blk=-Sundanese}', "");
Expect(0, 7039, '\P{^Blk=-Sundanese}', "");
Error('\p{Is_Block= sundanese/a/}');
Error('\P{Is_Block= sundanese/a/}');
Expect(1, 7103, '\p{Is_Block:	sundanese}', "");
Expect(0, 7103, '\p{^Is_Block:	sundanese}', "");
Expect(0, 7103, '\P{Is_Block:	sundanese}', "");
Expect(1, 7103, '\P{^Is_Block:	sundanese}', "");
Expect(0, 7039, '\p{Is_Block:	sundanese}', "");
Expect(1, 7039, '\p{^Is_Block:	sundanese}', "");
Expect(1, 7039, '\P{Is_Block:	sundanese}', "");
Expect(0, 7039, '\P{^Is_Block:	sundanese}', "");
Expect(1, 7103, '\p{Is_Block=--SUNDANESE}', "");
Expect(0, 7103, '\p{^Is_Block=--SUNDANESE}', "");
Expect(0, 7103, '\P{Is_Block=--SUNDANESE}', "");
Expect(1, 7103, '\P{^Is_Block=--SUNDANESE}', "");
Expect(0, 7039, '\p{Is_Block=--SUNDANESE}', "");
Expect(1, 7039, '\p{^Is_Block=--SUNDANESE}', "");
Expect(1, 7039, '\P{Is_Block=--SUNDANESE}', "");
Expect(0, 7039, '\P{^Is_Block=--SUNDANESE}', "");
Error('\p{Is_Blk=-Sundanese/a/}');
Error('\P{Is_Blk=-Sundanese/a/}');
Expect(1, 7103, '\p{Is_Blk=sundanese}', "");
Expect(0, 7103, '\p{^Is_Blk=sundanese}', "");
Expect(0, 7103, '\P{Is_Blk=sundanese}', "");
Expect(1, 7103, '\P{^Is_Blk=sundanese}', "");
Expect(0, 7039, '\p{Is_Blk=sundanese}', "");
Expect(1, 7039, '\p{^Is_Blk=sundanese}', "");
Expect(1, 7039, '\P{Is_Blk=sundanese}', "");
Expect(0, 7039, '\P{^Is_Blk=sundanese}', "");
Expect(1, 7103, '\p{Is_Blk=_-Sundanese}', "");
Expect(0, 7103, '\p{^Is_Blk=_-Sundanese}', "");
Expect(0, 7103, '\P{Is_Blk=_-Sundanese}', "");
Expect(1, 7103, '\P{^Is_Blk=_-Sundanese}', "");
Expect(0, 7039, '\p{Is_Blk=_-Sundanese}', "");
Expect(1, 7039, '\p{^Is_Blk=_-Sundanese}', "");
Expect(1, 7039, '\P{Is_Blk=_-Sundanese}', "");
Expect(0, 7039, '\P{^Is_Blk=_-Sundanese}', "");
Error('\p{Block=	-enclosedAlphanumerics:=}');
Error('\P{Block=	-enclosedAlphanumerics:=}');
Expect(1, 9471, '\p{Block=enclosedalphanumerics}', "");
Expect(0, 9471, '\p{^Block=enclosedalphanumerics}', "");
Expect(0, 9471, '\P{Block=enclosedalphanumerics}', "");
Expect(1, 9471, '\P{^Block=enclosedalphanumerics}', "");
Expect(0, 9311, '\p{Block=enclosedalphanumerics}', "");
Expect(1, 9311, '\p{^Block=enclosedalphanumerics}', "");
Expect(1, 9311, '\P{Block=enclosedalphanumerics}', "");
Expect(0, 9311, '\P{^Block=enclosedalphanumerics}', "");
Expect(1, 9471, '\p{Block=_-Enclosed-Alphanumerics}', "");
Expect(0, 9471, '\p{^Block=_-Enclosed-Alphanumerics}', "");
Expect(0, 9471, '\P{Block=_-Enclosed-Alphanumerics}', "");
Expect(1, 9471, '\P{^Block=_-Enclosed-Alphanumerics}', "");
Expect(0, 9311, '\p{Block=_-Enclosed-Alphanumerics}', "");
Expect(1, 9311, '\p{^Block=_-Enclosed-Alphanumerics}', "");
Expect(1, 9311, '\P{Block=_-Enclosed-Alphanumerics}', "");
Expect(0, 9311, '\P{^Block=_-Enclosed-Alphanumerics}', "");
Error('\p{Blk=/a/Enclosed_ALPHANUMERICS}');
Error('\P{Blk=/a/Enclosed_ALPHANUMERICS}');
Expect(1, 9471, '\p{Blk=enclosedalphanumerics}', "");
Expect(0, 9471, '\p{^Blk=enclosedalphanumerics}', "");
Expect(0, 9471, '\P{Blk=enclosedalphanumerics}', "");
Expect(1, 9471, '\P{^Blk=enclosedalphanumerics}', "");
Expect(0, 9311, '\p{Blk=enclosedalphanumerics}', "");
Expect(1, 9311, '\p{^Blk=enclosedalphanumerics}', "");
Expect(1, 9311, '\P{Blk=enclosedalphanumerics}', "");
Expect(0, 9311, '\P{^Blk=enclosedalphanumerics}', "");
Expect(1, 9471, '\p{Blk: 		Enclosed	Alphanumerics}', "");
Expect(0, 9471, '\p{^Blk: 		Enclosed	Alphanumerics}', "");
Expect(0, 9471, '\P{Blk: 		Enclosed	Alphanumerics}', "");
Expect(1, 9471, '\P{^Blk: 		Enclosed	Alphanumerics}', "");
Expect(0, 9311, '\p{Blk: 		Enclosed	Alphanumerics}', "");
Expect(1, 9311, '\p{^Blk: 		Enclosed	Alphanumerics}', "");
Expect(1, 9311, '\P{Blk: 		Enclosed	Alphanumerics}', "");
Expect(0, 9311, '\P{^Blk: 		Enclosed	Alphanumerics}', "");
Error('\p{Is_Block:- EnclosedAlphanumerics/a/}');
Error('\P{Is_Block:- EnclosedAlphanumerics/a/}');
Expect(1, 9471, '\p{Is_Block=enclosedalphanumerics}', "");
Expect(0, 9471, '\p{^Is_Block=enclosedalphanumerics}', "");
Expect(0, 9471, '\P{Is_Block=enclosedalphanumerics}', "");
Expect(1, 9471, '\P{^Is_Block=enclosedalphanumerics}', "");
Expect(0, 9311, '\p{Is_Block=enclosedalphanumerics}', "");
Expect(1, 9311, '\p{^Is_Block=enclosedalphanumerics}', "");
Expect(1, 9311, '\P{Is_Block=enclosedalphanumerics}', "");
Expect(0, 9311, '\P{^Is_Block=enclosedalphanumerics}', "");
Expect(1, 9471, '\p{Is_Block=	 ENCLOSED-alphanumerics}', "");
Expect(0, 9471, '\p{^Is_Block=	 ENCLOSED-alphanumerics}', "");
Expect(0, 9471, '\P{Is_Block=	 ENCLOSED-alphanumerics}', "");
Expect(1, 9471, '\P{^Is_Block=	 ENCLOSED-alphanumerics}', "");
Expect(0, 9311, '\p{Is_Block=	 ENCLOSED-alphanumerics}', "");
Expect(1, 9311, '\p{^Is_Block=	 ENCLOSED-alphanumerics}', "");
Expect(1, 9311, '\P{Is_Block=	 ENCLOSED-alphanumerics}', "");
Expect(0, 9311, '\P{^Is_Block=	 ENCLOSED-alphanumerics}', "");
Error('\p{Is_Blk:    /a/Enclosed Alphanumerics}');
Error('\P{Is_Blk:    /a/Enclosed Alphanumerics}');
Expect(1, 9471, '\p{Is_Blk:	enclosedalphanumerics}', "");
Expect(0, 9471, '\p{^Is_Blk:	enclosedalphanumerics}', "");
Expect(0, 9471, '\P{Is_Blk:	enclosedalphanumerics}', "");
Expect(1, 9471, '\P{^Is_Blk:	enclosedalphanumerics}', "");
Expect(0, 9311, '\p{Is_Blk:	enclosedalphanumerics}', "");
Expect(1, 9311, '\p{^Is_Blk:	enclosedalphanumerics}', "");
Expect(1, 9311, '\P{Is_Blk:	enclosedalphanumerics}', "");
Expect(0, 9311, '\P{^Is_Blk:	enclosedalphanumerics}', "");
Expect(1, 9471, '\p{Is_Blk=-	enclosed Alphanumerics}', "");
Expect(0, 9471, '\p{^Is_Blk=-	enclosed Alphanumerics}', "");
Expect(0, 9471, '\P{Is_Blk=-	enclosed Alphanumerics}', "");
Expect(1, 9471, '\P{^Is_Blk=-	enclosed Alphanumerics}', "");
Expect(0, 9311, '\p{Is_Blk=-	enclosed Alphanumerics}', "");
Expect(1, 9311, '\p{^Is_Blk=-	enclosed Alphanumerics}', "");
Expect(1, 9311, '\P{Is_Blk=-	enclosed Alphanumerics}', "");
Expect(0, 9311, '\P{^Is_Blk=-	enclosed Alphanumerics}', "");
Error('\p{Block=__Old_South	ARABIAN:=}');
Error('\P{Block=__Old_South	ARABIAN:=}');
Expect(1, 68223, '\p{Block=oldsoutharabian}', "");
Expect(0, 68223, '\p{^Block=oldsoutharabian}', "");
Expect(0, 68223, '\P{Block=oldsoutharabian}', "");
Expect(1, 68223, '\P{^Block=oldsoutharabian}', "");
Expect(0, 68191, '\p{Block=oldsoutharabian}', "");
Expect(1, 68191, '\p{^Block=oldsoutharabian}', "");
Expect(1, 68191, '\P{Block=oldsoutharabian}', "");
Expect(0, 68191, '\P{^Block=oldsoutharabian}', "");
Expect(1, 68223, '\p{Block:   Old_South	Arabian}', "");
Expect(0, 68223, '\p{^Block:   Old_South	Arabian}', "");
Expect(0, 68223, '\P{Block:   Old_South	Arabian}', "");
Expect(1, 68223, '\P{^Block:   Old_South	Arabian}', "");
Expect(0, 68191, '\p{Block:   Old_South	Arabian}', "");
Expect(1, 68191, '\p{^Block:   Old_South	Arabian}', "");
Expect(1, 68191, '\P{Block:   Old_South	Arabian}', "");
Expect(0, 68191, '\P{^Block:   Old_South	Arabian}', "");
Error('\p{Blk=:=Old_South_ARABIAN}');
Error('\P{Blk=:=Old_South_ARABIAN}');
Expect(1, 68223, '\p{Blk=oldsoutharabian}', "");
Expect(0, 68223, '\p{^Blk=oldsoutharabian}', "");
Expect(0, 68223, '\P{Blk=oldsoutharabian}', "");
Expect(1, 68223, '\P{^Blk=oldsoutharabian}', "");
Expect(0, 68191, '\p{Blk=oldsoutharabian}', "");
Expect(1, 68191, '\p{^Blk=oldsoutharabian}', "");
Expect(1, 68191, '\P{Blk=oldsoutharabian}', "");
Expect(0, 68191, '\P{^Blk=oldsoutharabian}', "");
Expect(1, 68223, '\p{Blk= Old	SOUTHArabian}', "");
Expect(0, 68223, '\p{^Blk= Old	SOUTHArabian}', "");
Expect(0, 68223, '\P{Blk= Old	SOUTHArabian}', "");
Expect(1, 68223, '\P{^Blk= Old	SOUTHArabian}', "");
Expect(0, 68191, '\p{Blk= Old	SOUTHArabian}', "");
Expect(1, 68191, '\p{^Blk= Old	SOUTHArabian}', "");
Expect(1, 68191, '\P{Blk= Old	SOUTHArabian}', "");
Expect(0, 68191, '\P{^Blk= Old	SOUTHArabian}', "");
Error('\p{Is_Block=_/a/OldSouthArabian}');
Error('\P{Is_Block=_/a/OldSouthArabian}');
Expect(1, 68223, '\p{Is_Block=oldsoutharabian}', "");
Expect(0, 68223, '\p{^Is_Block=oldsoutharabian}', "");
Expect(0, 68223, '\P{Is_Block=oldsoutharabian}', "");
Expect(1, 68223, '\P{^Is_Block=oldsoutharabian}', "");
Expect(0, 68191, '\p{Is_Block=oldsoutharabian}', "");
Expect(1, 68191, '\p{^Is_Block=oldsoutharabian}', "");
Expect(1, 68191, '\P{Is_Block=oldsoutharabian}', "");
Expect(0, 68191, '\P{^Is_Block=oldsoutharabian}', "");
Expect(1, 68223, '\p{Is_Block=- Old_south_ARABIAN}', "");
Expect(0, 68223, '\p{^Is_Block=- Old_south_ARABIAN}', "");
Expect(0, 68223, '\P{Is_Block=- Old_south_ARABIAN}', "");
Expect(1, 68223, '\P{^Is_Block=- Old_south_ARABIAN}', "");
Expect(0, 68191, '\p{Is_Block=- Old_south_ARABIAN}', "");
Expect(1, 68191, '\p{^Is_Block=- Old_south_ARABIAN}', "");
Expect(1, 68191, '\P{Is_Block=- Old_south_ARABIAN}', "");
Expect(0, 68191, '\P{^Is_Block=- Old_south_ARABIAN}', "");
Error('\p{Is_Blk:	 _old:=southArabian}');
Error('\P{Is_Blk:	 _old:=southArabian}');
Expect(1, 68223, '\p{Is_Blk=oldsoutharabian}', "");
Expect(0, 68223, '\p{^Is_Blk=oldsoutharabian}', "");
Expect(0, 68223, '\P{Is_Blk=oldsoutharabian}', "");
Expect(1, 68223, '\P{^Is_Blk=oldsoutharabian}', "");
Expect(0, 68191, '\p{Is_Blk=oldsoutharabian}', "");
Expect(1, 68191, '\p{^Is_Blk=oldsoutharabian}', "");
Expect(1, 68191, '\P{Is_Blk=oldsoutharabian}', "");
Expect(0, 68191, '\P{^Is_Blk=oldsoutharabian}', "");
Expect(1, 68223, '\p{Is_Blk=_Old South_Arabian}', "");
Expect(0, 68223, '\p{^Is_Blk=_Old South_Arabian}', "");
Expect(0, 68223, '\P{Is_Blk=_Old South_Arabian}', "");
Expect(1, 68223, '\P{^Is_Blk=_Old South_Arabian}', "");
Expect(0, 68191, '\p{Is_Blk=_Old South_Arabian}', "");
Expect(1, 68191, '\p{^Is_Blk=_Old South_Arabian}', "");
Expect(1, 68191, '\P{Is_Blk=_Old South_Arabian}', "");
Expect(0, 68191, '\P{^Is_Blk=_Old South_Arabian}', "");
Error('\p{Block: tags:=}');
Error('\P{Block: tags:=}');
Expect(1, 917631, '\p{Block=tags}', "");
Expect(0, 917631, '\p{^Block=tags}', "");
Expect(0, 917631, '\P{Block=tags}', "");
Expect(1, 917631, '\P{^Block=tags}', "");
Expect(0, 1, '\p{Block=tags}', "");
Expect(1, 1, '\p{^Block=tags}', "");
Expect(1, 1, '\P{Block=tags}', "");
Expect(0, 1, '\P{^Block=tags}', "");
Expect(1, 917631, '\p{Block: 	tags}', "");
Expect(0, 917631, '\p{^Block: 	tags}', "");
Expect(0, 917631, '\P{Block: 	tags}', "");
Expect(1, 917631, '\P{^Block: 	tags}', "");
Expect(0, 1, '\p{Block: 	tags}', "");
Expect(1, 1, '\p{^Block: 	tags}', "");
Expect(1, 1, '\P{Block: 	tags}', "");
Expect(0, 1, '\P{^Block: 	tags}', "");
Error('\p{Blk=:=-	Tags}');
Error('\P{Blk=:=-	Tags}');
Expect(1, 917631, '\p{Blk=tags}', "");
Expect(0, 917631, '\p{^Blk=tags}', "");
Expect(0, 917631, '\P{Blk=tags}', "");
Expect(1, 917631, '\P{^Blk=tags}', "");
Expect(0, 1, '\p{Blk=tags}', "");
Expect(1, 1, '\p{^Blk=tags}', "");
Expect(1, 1, '\P{Blk=tags}', "");
Expect(0, 1, '\P{^Blk=tags}', "");
Expect(1, 917631, '\p{Blk: _TAGS}', "");
Expect(0, 917631, '\p{^Blk: _TAGS}', "");
Expect(0, 917631, '\P{Blk: _TAGS}', "");
Expect(1, 917631, '\P{^Blk: _TAGS}', "");
Expect(0, 1, '\p{Blk: _TAGS}', "");
Expect(1, 1, '\p{^Blk: _TAGS}', "");
Expect(1, 1, '\P{Blk: _TAGS}', "");
Expect(0, 1, '\P{^Blk: _TAGS}', "");
Error('\p{Is_Block=-:=TAGS}');
Error('\P{Is_Block=-:=TAGS}');
Expect(1, 917631, '\p{Is_Block=tags}', "");
Expect(0, 917631, '\p{^Is_Block=tags}', "");
Expect(0, 917631, '\P{Is_Block=tags}', "");
Expect(1, 917631, '\P{^Is_Block=tags}', "");
Expect(0, 1, '\p{Is_Block=tags}', "");
Expect(1, 1, '\p{^Is_Block=tags}', "");
Expect(1, 1, '\P{Is_Block=tags}', "");
Expect(0, 1, '\P{^Is_Block=tags}', "");
Expect(1, 917631, '\p{Is_Block=_tags}', "");
Expect(0, 917631, '\p{^Is_Block=_tags}', "");
Expect(0, 917631, '\P{Is_Block=_tags}', "");
Expect(1, 917631, '\P{^Is_Block=_tags}', "");
Expect(0, 1, '\p{Is_Block=_tags}', "");
Expect(1, 1, '\p{^Is_Block=_tags}', "");
Expect(1, 1, '\P{Is_Block=_tags}', "");
Expect(0, 1, '\P{^Is_Block=_tags}', "");
Error('\p{Is_Blk= /a/Tags}');
Error('\P{Is_Blk= /a/Tags}');
Expect(1, 917631, '\p{Is_Blk=tags}', "");
Expect(0, 917631, '\p{^Is_Blk=tags}', "");
Expect(0, 917631, '\P{Is_Blk=tags}', "");
Expect(1, 917631, '\P{^Is_Blk=tags}', "");
Expect(0, 1, '\p{Is_Blk=tags}', "");
Expect(1, 1, '\p{^Is_Blk=tags}', "");
Expect(1, 1, '\P{Is_Blk=tags}', "");
Expect(0, 1, '\P{^Is_Blk=tags}', "");
Expect(1, 917631, '\p{Is_Blk=  TAGS}', "");
Expect(0, 917631, '\p{^Is_Blk=  TAGS}', "");
Expect(0, 917631, '\P{Is_Blk=  TAGS}', "");
Expect(1, 917631, '\P{^Is_Blk=  TAGS}', "");
Expect(0, 1, '\p{Is_Blk=  TAGS}', "");
Expect(1, 1, '\p{^Is_Blk=  TAGS}', "");
Expect(1, 1, '\P{Is_Blk=  TAGS}', "");
Expect(0, 1, '\P{^Is_Blk=  TAGS}', "");
Error('\p{Block:   --miscellaneous:=mathematical Symbols	A}');
Error('\P{Block:   --miscellaneous:=mathematical Symbols	A}');
Expect(1, 10223, '\p{Block=miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10223, '\p{^Block=miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10223, '\P{Block=miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10223, '\P{^Block=miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10175, '\p{Block=miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10175, '\p{^Block=miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10175, '\P{Block=miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10175, '\P{^Block=miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10223, '\p{Block: -_Miscellaneous-Mathematical Symbols_A}', "");
Expect(0, 10223, '\p{^Block: -_Miscellaneous-Mathematical Symbols_A}', "");
Expect(0, 10223, '\P{Block: -_Miscellaneous-Mathematical Symbols_A}', "");
Expect(1, 10223, '\P{^Block: -_Miscellaneous-Mathematical Symbols_A}', "");
Expect(0, 10175, '\p{Block: -_Miscellaneous-Mathematical Symbols_A}', "");
Expect(1, 10175, '\p{^Block: -_Miscellaneous-Mathematical Symbols_A}', "");
Expect(1, 10175, '\P{Block: -_Miscellaneous-Mathematical Symbols_A}', "");
Expect(0, 10175, '\P{^Block: -_Miscellaneous-Mathematical Symbols_A}', "");
Error('\p{Blk:   :=--miscellaneous	mathematicalSYMBOLSA}');
Error('\P{Blk:   :=--miscellaneous	mathematicalSYMBOLSA}');
Expect(1, 10223, '\p{Blk=miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10223, '\p{^Blk=miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10223, '\P{Blk=miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10223, '\P{^Blk=miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10175, '\p{Blk=miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10175, '\p{^Blk=miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10175, '\P{Blk=miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10175, '\P{^Blk=miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10223, '\p{Blk=_miscellaneous	MATHEMATICAL	symbols_A}', "");
Expect(0, 10223, '\p{^Blk=_miscellaneous	MATHEMATICAL	symbols_A}', "");
Expect(0, 10223, '\P{Blk=_miscellaneous	MATHEMATICAL	symbols_A}', "");
Expect(1, 10223, '\P{^Blk=_miscellaneous	MATHEMATICAL	symbols_A}', "");
Expect(0, 10175, '\p{Blk=_miscellaneous	MATHEMATICAL	symbols_A}', "");
Expect(1, 10175, '\p{^Blk=_miscellaneous	MATHEMATICAL	symbols_A}', "");
Expect(1, 10175, '\P{Blk=_miscellaneous	MATHEMATICAL	symbols_A}', "");
Expect(0, 10175, '\P{^Blk=_miscellaneous	MATHEMATICAL	symbols_A}', "");
Error('\p{Is_Block=:=  Miscellaneous_MATHEMATICALSYMBOLS	A}');
Error('\P{Is_Block=:=  Miscellaneous_MATHEMATICALSYMBOLS	A}');
Expect(1, 10223, '\p{Is_Block=miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10223, '\p{^Is_Block=miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10223, '\P{Is_Block=miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10223, '\P{^Is_Block=miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10175, '\p{Is_Block=miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10175, '\p{^Is_Block=miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10175, '\P{Is_Block=miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10175, '\P{^Is_Block=miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10223, '\p{Is_Block=-	Miscellaneousmathematicalsymbols_a}', "");
Expect(0, 10223, '\p{^Is_Block=-	Miscellaneousmathematicalsymbols_a}', "");
Expect(0, 10223, '\P{Is_Block=-	Miscellaneousmathematicalsymbols_a}', "");
Expect(1, 10223, '\P{^Is_Block=-	Miscellaneousmathematicalsymbols_a}', "");
Expect(0, 10175, '\p{Is_Block=-	Miscellaneousmathematicalsymbols_a}', "");
Expect(1, 10175, '\p{^Is_Block=-	Miscellaneousmathematicalsymbols_a}', "");
Expect(1, 10175, '\P{Is_Block=-	Miscellaneousmathematicalsymbols_a}', "");
Expect(0, 10175, '\P{^Is_Block=-	Miscellaneousmathematicalsymbols_a}', "");
Error('\p{Is_Blk:	/a/		Miscellaneous	MATHEMATICAL_Symbols_A}');
Error('\P{Is_Blk:	/a/		Miscellaneous	MATHEMATICAL_Symbols_A}');
Expect(1, 10223, '\p{Is_Blk=miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10223, '\p{^Is_Blk=miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10223, '\P{Is_Blk=miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10223, '\P{^Is_Blk=miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10175, '\p{Is_Blk=miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10175, '\p{^Is_Blk=miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10175, '\P{Is_Blk=miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10175, '\P{^Is_Blk=miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10223, '\p{Is_Blk=_-miscellaneousmathematical_Symbols A}', "");
Expect(0, 10223, '\p{^Is_Blk=_-miscellaneousmathematical_Symbols A}', "");
Expect(0, 10223, '\P{Is_Blk=_-miscellaneousmathematical_Symbols A}', "");
Expect(1, 10223, '\P{^Is_Blk=_-miscellaneousmathematical_Symbols A}', "");
Expect(0, 10175, '\p{Is_Blk=_-miscellaneousmathematical_Symbols A}', "");
Expect(1, 10175, '\p{^Is_Blk=_-miscellaneousmathematical_Symbols A}', "");
Expect(1, 10175, '\P{Is_Blk=_-miscellaneousmathematical_Symbols A}', "");
Expect(0, 10175, '\P{^Is_Blk=_-miscellaneousmathematical_Symbols A}', "");
Error('\p{Block=	-BraillePatterns/a/}');
Error('\P{Block=	-BraillePatterns/a/}');
Expect(1, 10495, '\p{Block=braillepatterns}', "");
Expect(0, 10495, '\p{^Block=braillepatterns}', "");
Expect(0, 10495, '\P{Block=braillepatterns}', "");
Expect(1, 10495, '\P{^Block=braillepatterns}', "");
Expect(0, 10239, '\p{Block=braillepatterns}', "");
Expect(1, 10239, '\p{^Block=braillepatterns}', "");
Expect(1, 10239, '\P{Block=braillepatterns}', "");
Expect(0, 10239, '\P{^Block=braillepatterns}', "");
Expect(1, 10495, '\p{Block=__Braille_Patterns}', "");
Expect(0, 10495, '\p{^Block=__Braille_Patterns}', "");
Expect(0, 10495, '\P{Block=__Braille_Patterns}', "");
Expect(1, 10495, '\P{^Block=__Braille_Patterns}', "");
Expect(0, 10239, '\p{Block=__Braille_Patterns}', "");
Expect(1, 10239, '\p{^Block=__Braille_Patterns}', "");
Expect(1, 10239, '\P{Block=__Braille_Patterns}', "");
Expect(0, 10239, '\P{^Block=__Braille_Patterns}', "");
Error('\p{Blk= :=BraillePATTERNS}');
Error('\P{Blk= :=BraillePATTERNS}');
Expect(1, 10495, '\p{Blk=braillepatterns}', "");
Expect(0, 10495, '\p{^Blk=braillepatterns}', "");
Expect(0, 10495, '\P{Blk=braillepatterns}', "");
Expect(1, 10495, '\P{^Blk=braillepatterns}', "");
Expect(0, 10239, '\p{Blk=braillepatterns}', "");
Expect(1, 10239, '\p{^Blk=braillepatterns}', "");
Expect(1, 10239, '\P{Blk=braillepatterns}', "");
Expect(0, 10239, '\P{^Blk=braillepatterns}', "");
Expect(1, 10495, '\p{Blk=	braille	Patterns}', "");
Expect(0, 10495, '\p{^Blk=	braille	Patterns}', "");
Expect(0, 10495, '\P{Blk=	braille	Patterns}', "");
Expect(1, 10495, '\P{^Blk=	braille	Patterns}', "");
Expect(0, 10239, '\p{Blk=	braille	Patterns}', "");
Expect(1, 10239, '\p{^Blk=	braille	Patterns}', "");
Expect(1, 10239, '\P{Blk=	braille	Patterns}', "");
Expect(0, 10239, '\P{^Blk=	braille	Patterns}', "");
Error('\p{Is_Block=_	Braille:=patterns}');
Error('\P{Is_Block=_	Braille:=patterns}');
Expect(1, 10495, '\p{Is_Block=braillepatterns}', "");
Expect(0, 10495, '\p{^Is_Block=braillepatterns}', "");
Expect(0, 10495, '\P{Is_Block=braillepatterns}', "");
Expect(1, 10495, '\P{^Is_Block=braillepatterns}', "");
Expect(0, 10239, '\p{Is_Block=braillepatterns}', "");
Expect(1, 10239, '\p{^Is_Block=braillepatterns}', "");
Expect(1, 10239, '\P{Is_Block=braillepatterns}', "");
Expect(0, 10239, '\P{^Is_Block=braillepatterns}', "");
Expect(1, 10495, '\p{Is_Block= Braille	Patterns}', "");
Expect(0, 10495, '\p{^Is_Block= Braille	Patterns}', "");
Expect(0, 10495, '\P{Is_Block= Braille	Patterns}', "");
Expect(1, 10495, '\P{^Is_Block= Braille	Patterns}', "");
Expect(0, 10239, '\p{Is_Block= Braille	Patterns}', "");
Expect(1, 10239, '\p{^Is_Block= Braille	Patterns}', "");
Expect(1, 10239, '\P{Is_Block= Braille	Patterns}', "");
Expect(0, 10239, '\P{^Is_Block= Braille	Patterns}', "");
Error('\p{Is_Blk=/a/-BRAILLEPatterns}');
Error('\P{Is_Blk=/a/-BRAILLEPatterns}');
Expect(1, 10495, '\p{Is_Blk=braillepatterns}', "");
Expect(0, 10495, '\p{^Is_Blk=braillepatterns}', "");
Expect(0, 10495, '\P{Is_Blk=braillepatterns}', "");
Expect(1, 10495, '\P{^Is_Blk=braillepatterns}', "");
Expect(0, 10239, '\p{Is_Blk=braillepatterns}', "");
Expect(1, 10239, '\p{^Is_Blk=braillepatterns}', "");
Expect(1, 10239, '\P{Is_Blk=braillepatterns}', "");
Expect(0, 10239, '\P{^Is_Blk=braillepatterns}', "");
Expect(1, 10495, '\p{Is_Blk=	BRAILLEPATTERNS}', "");
Expect(0, 10495, '\p{^Is_Blk=	BRAILLEPATTERNS}', "");
Expect(0, 10495, '\P{Is_Blk=	BRAILLEPATTERNS}', "");
Expect(1, 10495, '\P{^Is_Blk=	BRAILLEPATTERNS}', "");
Expect(0, 10239, '\p{Is_Blk=	BRAILLEPATTERNS}', "");
Expect(1, 10239, '\p{^Is_Blk=	BRAILLEPATTERNS}', "");
Expect(1, 10239, '\P{Is_Blk=	BRAILLEPATTERNS}', "");
Expect(0, 10239, '\P{^Is_Blk=	BRAILLEPATTERNS}', "");
Error('\p{Block=:=__oriya}');
Error('\P{Block=:=__oriya}');
Expect(1, 2943, '\p{Block=oriya}', "");
Expect(0, 2943, '\p{^Block=oriya}', "");
Expect(0, 2943, '\P{Block=oriya}', "");
Expect(1, 2943, '\P{^Block=oriya}', "");
Expect(0, 2815, '\p{Block=oriya}', "");
Expect(1, 2815, '\p{^Block=oriya}', "");
Expect(1, 2815, '\P{Block=oriya}', "");
Expect(0, 2815, '\P{^Block=oriya}', "");
Expect(1, 2943, '\p{Block: 	Oriya}', "");
Expect(0, 2943, '\p{^Block: 	Oriya}', "");
Expect(0, 2943, '\P{Block: 	Oriya}', "");
Expect(1, 2943, '\P{^Block: 	Oriya}', "");
Expect(0, 2815, '\p{Block: 	Oriya}', "");
Expect(1, 2815, '\p{^Block: 	Oriya}', "");
Expect(1, 2815, '\P{Block: 	Oriya}', "");
Expect(0, 2815, '\P{^Block: 	Oriya}', "");
Error('\p{Blk=:=- oriya}');
Error('\P{Blk=:=- oriya}');
Expect(1, 2943, '\p{Blk=oriya}', "");
Expect(0, 2943, '\p{^Blk=oriya}', "");
Expect(0, 2943, '\P{Blk=oriya}', "");
Expect(1, 2943, '\P{^Blk=oriya}', "");
Expect(0, 2815, '\p{Blk=oriya}', "");
Expect(1, 2815, '\p{^Blk=oriya}', "");
Expect(1, 2815, '\P{Blk=oriya}', "");
Expect(0, 2815, '\P{^Blk=oriya}', "");
Expect(1, 2943, '\p{Blk= Oriya}', "");
Expect(0, 2943, '\p{^Blk= Oriya}', "");
Expect(0, 2943, '\P{Blk= Oriya}', "");
Expect(1, 2943, '\P{^Blk= Oriya}', "");
Expect(0, 2815, '\p{Blk= Oriya}', "");
Expect(1, 2815, '\p{^Blk= Oriya}', "");
Expect(1, 2815, '\P{Blk= Oriya}', "");
Expect(0, 2815, '\P{^Blk= Oriya}', "");
Error('\p{Is_Block=-:=ORIYA}');
Error('\P{Is_Block=-:=ORIYA}');
Expect(1, 2943, '\p{Is_Block=oriya}', "");
Expect(0, 2943, '\p{^Is_Block=oriya}', "");
Expect(0, 2943, '\P{Is_Block=oriya}', "");
Expect(1, 2943, '\P{^Is_Block=oriya}', "");
Expect(0, 2815, '\p{Is_Block=oriya}', "");
Expect(1, 2815, '\p{^Is_Block=oriya}', "");
Expect(1, 2815, '\P{Is_Block=oriya}', "");
Expect(0, 2815, '\P{^Is_Block=oriya}', "");
Expect(1, 2943, '\p{Is_Block=-_Oriya}', "");
Expect(0, 2943, '\p{^Is_Block=-_Oriya}', "");
Expect(0, 2943, '\P{Is_Block=-_Oriya}', "");
Expect(1, 2943, '\P{^Is_Block=-_Oriya}', "");
Expect(0, 2815, '\p{Is_Block=-_Oriya}', "");
Expect(1, 2815, '\p{^Is_Block=-_Oriya}', "");
Expect(1, 2815, '\P{Is_Block=-_Oriya}', "");
Expect(0, 2815, '\P{^Is_Block=-_Oriya}', "");
Error('\p{Is_Blk=	/a/Oriya}');
Error('\P{Is_Blk=	/a/Oriya}');
Expect(1, 2943, '\p{Is_Blk=oriya}', "");
Expect(0, 2943, '\p{^Is_Blk=oriya}', "");
Expect(0, 2943, '\P{Is_Blk=oriya}', "");
Expect(1, 2943, '\P{^Is_Blk=oriya}', "");
Expect(0, 2815, '\p{Is_Blk=oriya}', "");
Expect(1, 2815, '\p{^Is_Blk=oriya}', "");
Expect(1, 2815, '\P{Is_Blk=oriya}', "");
Expect(0, 2815, '\P{^Is_Blk=oriya}', "");
Expect(1, 2943, '\p{Is_Blk=  Oriya}', "");
Expect(0, 2943, '\p{^Is_Blk=  Oriya}', "");
Expect(0, 2943, '\P{Is_Blk=  Oriya}', "");
Expect(1, 2943, '\P{^Is_Blk=  Oriya}', "");
Expect(0, 2815, '\p{Is_Blk=  Oriya}', "");
Expect(1, 2815, '\p{^Is_Blk=  Oriya}', "");
Expect(1, 2815, '\P{Is_Blk=  Oriya}', "");
Expect(0, 2815, '\P{^Is_Blk=  Oriya}', "");
Error('\p{Block=_Linear:=B	IDEOGRAMS}');
Error('\P{Block=_Linear:=B	IDEOGRAMS}');
Expect(1, 65791, '\p{Block=linearbideograms}', "");
Expect(0, 65791, '\p{^Block=linearbideograms}', "");
Expect(0, 65791, '\P{Block=linearbideograms}', "");
Expect(1, 65791, '\P{^Block=linearbideograms}', "");
Expect(0, 65663, '\p{Block=linearbideograms}', "");
Expect(1, 65663, '\p{^Block=linearbideograms}', "");
Expect(1, 65663, '\P{Block=linearbideograms}', "");
Expect(0, 65663, '\P{^Block=linearbideograms}', "");
Expect(1, 65791, '\p{Block=-_LinearBideograms}', "");
Expect(0, 65791, '\p{^Block=-_LinearBideograms}', "");
Expect(0, 65791, '\P{Block=-_LinearBideograms}', "");
Expect(1, 65791, '\P{^Block=-_LinearBideograms}', "");
Expect(0, 65663, '\p{Block=-_LinearBideograms}', "");
Expect(1, 65663, '\p{^Block=-_LinearBideograms}', "");
Expect(1, 65663, '\P{Block=-_LinearBideograms}', "");
Expect(0, 65663, '\P{^Block=-_LinearBideograms}', "");
Error('\p{Blk=_:=LINEAR BIdeograms}');
Error('\P{Blk=_:=LINEAR BIdeograms}');
Expect(1, 65791, '\p{Blk=linearbideograms}', "");
Expect(0, 65791, '\p{^Blk=linearbideograms}', "");
Expect(0, 65791, '\P{Blk=linearbideograms}', "");
Expect(1, 65791, '\P{^Blk=linearbideograms}', "");
Expect(0, 65663, '\p{Blk=linearbideograms}', "");
Expect(1, 65663, '\p{^Blk=linearbideograms}', "");
Expect(1, 65663, '\P{Blk=linearbideograms}', "");
Expect(0, 65663, '\P{^Blk=linearbideograms}', "");
Expect(1, 65791, '\p{Blk:   	 Linear_B_ideograms}', "");
Expect(0, 65791, '\p{^Blk:   	 Linear_B_ideograms}', "");
Expect(0, 65791, '\P{Blk:   	 Linear_B_ideograms}', "");
Expect(1, 65791, '\P{^Blk:   	 Linear_B_ideograms}', "");
Expect(0, 65663, '\p{Blk:   	 Linear_B_ideograms}', "");
Expect(1, 65663, '\p{^Blk:   	 Linear_B_ideograms}', "");
Expect(1, 65663, '\P{Blk:   	 Linear_B_ideograms}', "");
Expect(0, 65663, '\P{^Blk:   	 Linear_B_ideograms}', "");
Error('\p{Is_Block:	 	linear:=b	ideograms}');
Error('\P{Is_Block:	 	linear:=b	ideograms}');
Expect(1, 65791, '\p{Is_Block=linearbideograms}', "");
Expect(0, 65791, '\p{^Is_Block=linearbideograms}', "");
Expect(0, 65791, '\P{Is_Block=linearbideograms}', "");
Expect(1, 65791, '\P{^Is_Block=linearbideograms}', "");
Expect(0, 65663, '\p{Is_Block=linearbideograms}', "");
Expect(1, 65663, '\p{^Is_Block=linearbideograms}', "");
Expect(1, 65663, '\P{Is_Block=linearbideograms}', "");
Expect(0, 65663, '\P{^Is_Block=linearbideograms}', "");
Expect(1, 65791, '\p{Is_Block=	Linear_B-ideograms}', "");
Expect(0, 65791, '\p{^Is_Block=	Linear_B-ideograms}', "");
Expect(0, 65791, '\P{Is_Block=	Linear_B-ideograms}', "");
Expect(1, 65791, '\P{^Is_Block=	Linear_B-ideograms}', "");
Expect(0, 65663, '\p{Is_Block=	Linear_B-ideograms}', "");
Expect(1, 65663, '\p{^Is_Block=	Linear_B-ideograms}', "");
Expect(1, 65663, '\P{Is_Block=	Linear_B-ideograms}', "");
Expect(0, 65663, '\P{^Is_Block=	Linear_B-ideograms}', "");
Error('\p{Is_Blk=_/a/Linear_B	IDEOGRAMS}');
Error('\P{Is_Blk=_/a/Linear_B	IDEOGRAMS}');
Expect(1, 65791, '\p{Is_Blk: linearbideograms}', "");
Expect(0, 65791, '\p{^Is_Blk: linearbideograms}', "");
Expect(0, 65791, '\P{Is_Blk: linearbideograms}', "");
Expect(1, 65791, '\P{^Is_Blk: linearbideograms}', "");
Expect(0, 65663, '\p{Is_Blk: linearbideograms}', "");
Expect(1, 65663, '\p{^Is_Blk: linearbideograms}', "");
Expect(1, 65663, '\P{Is_Blk: linearbideograms}', "");
Expect(0, 65663, '\P{^Is_Blk: linearbideograms}', "");
Expect(1, 65791, '\p{Is_Blk=  LinearB-Ideograms}', "");
Expect(0, 65791, '\p{^Is_Blk=  LinearB-Ideograms}', "");
Expect(0, 65791, '\P{Is_Blk=  LinearB-Ideograms}', "");
Expect(1, 65791, '\P{^Is_Blk=  LinearB-Ideograms}', "");
Expect(0, 65663, '\p{Is_Blk=  LinearB-Ideograms}', "");
Expect(1, 65663, '\p{^Is_Blk=  LinearB-Ideograms}', "");
Expect(1, 65663, '\P{Is_Blk=  LinearB-Ideograms}', "");
Expect(0, 65663, '\P{^Is_Blk=  LinearB-Ideograms}', "");
Error('\p{Block=:=_	Cherokee}');
Error('\P{Block=:=_	Cherokee}');
Expect(1, 5119, '\p{Block=cherokee}', "");
Expect(0, 5119, '\p{^Block=cherokee}', "");
Expect(0, 5119, '\P{Block=cherokee}', "");
Expect(1, 5119, '\P{^Block=cherokee}', "");
Expect(0, 5023, '\p{Block=cherokee}', "");
Expect(1, 5023, '\p{^Block=cherokee}', "");
Expect(1, 5023, '\P{Block=cherokee}', "");
Expect(0, 5023, '\P{^Block=cherokee}', "");
Expect(1, 5119, '\p{Block=	cherokee}', "");
Expect(0, 5119, '\p{^Block=	cherokee}', "");
Expect(0, 5119, '\P{Block=	cherokee}', "");
Expect(1, 5119, '\P{^Block=	cherokee}', "");
Expect(0, 5023, '\p{Block=	cherokee}', "");
Expect(1, 5023, '\p{^Block=	cherokee}', "");
Expect(1, 5023, '\P{Block=	cherokee}', "");
Expect(0, 5023, '\P{^Block=	cherokee}', "");
Error('\p{Blk=:= 	Cherokee}');
Error('\P{Blk=:= 	Cherokee}');
Expect(1, 5119, '\p{Blk=cherokee}', "");
Expect(0, 5119, '\p{^Blk=cherokee}', "");
Expect(0, 5119, '\P{Blk=cherokee}', "");
Expect(1, 5119, '\P{^Blk=cherokee}', "");
Expect(0, 5023, '\p{Blk=cherokee}', "");
Expect(1, 5023, '\p{^Blk=cherokee}', "");
Expect(1, 5023, '\P{Blk=cherokee}', "");
Expect(0, 5023, '\P{^Blk=cherokee}', "");
Expect(1, 5119, '\p{Blk=__CHEROKEE}', "");
Expect(0, 5119, '\p{^Blk=__CHEROKEE}', "");
Expect(0, 5119, '\P{Blk=__CHEROKEE}', "");
Expect(1, 5119, '\P{^Blk=__CHEROKEE}', "");
Expect(0, 5023, '\p{Blk=__CHEROKEE}', "");
Expect(1, 5023, '\p{^Blk=__CHEROKEE}', "");
Expect(1, 5023, '\P{Blk=__CHEROKEE}', "");
Expect(0, 5023, '\P{^Blk=__CHEROKEE}', "");
Error('\p{Is_Block=/a/	 Cherokee}');
Error('\P{Is_Block=/a/	 Cherokee}');
Expect(1, 5119, '\p{Is_Block=cherokee}', "");
Expect(0, 5119, '\p{^Is_Block=cherokee}', "");
Expect(0, 5119, '\P{Is_Block=cherokee}', "");
Expect(1, 5119, '\P{^Is_Block=cherokee}', "");
Expect(0, 5023, '\p{Is_Block=cherokee}', "");
Expect(1, 5023, '\p{^Is_Block=cherokee}', "");
Expect(1, 5023, '\P{Is_Block=cherokee}', "");
Expect(0, 5023, '\P{^Is_Block=cherokee}', "");
Expect(1, 5119, '\p{Is_Block:	Cherokee}', "");
Expect(0, 5119, '\p{^Is_Block:	Cherokee}', "");
Expect(0, 5119, '\P{Is_Block:	Cherokee}', "");
Expect(1, 5119, '\P{^Is_Block:	Cherokee}', "");
Expect(0, 5023, '\p{Is_Block:	Cherokee}', "");
Expect(1, 5023, '\p{^Is_Block:	Cherokee}', "");
Expect(1, 5023, '\P{Is_Block:	Cherokee}', "");
Expect(0, 5023, '\P{^Is_Block:	Cherokee}', "");
Error('\p{Is_Blk=_cherokee:=}');
Error('\P{Is_Blk=_cherokee:=}');
Expect(1, 5119, '\p{Is_Blk=cherokee}', "");
Expect(0, 5119, '\p{^Is_Blk=cherokee}', "");
Expect(0, 5119, '\P{Is_Blk=cherokee}', "");
Expect(1, 5119, '\P{^Is_Blk=cherokee}', "");
Expect(0, 5023, '\p{Is_Blk=cherokee}', "");
Expect(1, 5023, '\p{^Is_Blk=cherokee}', "");
Expect(1, 5023, '\P{Is_Blk=cherokee}', "");
Expect(0, 5023, '\P{^Is_Blk=cherokee}', "");
Expect(1, 5119, '\p{Is_Blk=_-cherokee}', "");
Expect(0, 5119, '\p{^Is_Blk=_-cherokee}', "");
Expect(0, 5119, '\P{Is_Blk=_-cherokee}', "");
Expect(1, 5119, '\P{^Is_Blk=_-cherokee}', "");
Expect(0, 5023, '\p{Is_Blk=_-cherokee}', "");
Expect(1, 5023, '\p{^Is_Blk=_-cherokee}', "");
Expect(1, 5023, '\P{Is_Blk=_-cherokee}', "");
Expect(0, 5023, '\P{^Is_Blk=_-cherokee}', "");
Error('\p{Block= :=Bopomofo-Extended}');
Error('\P{Block= :=Bopomofo-Extended}');
Expect(1, 12735, '\p{Block=bopomofoextended}', "");
Expect(0, 12735, '\p{^Block=bopomofoextended}', "");
Expect(0, 12735, '\P{Block=bopomofoextended}', "");
Expect(1, 12735, '\P{^Block=bopomofoextended}', "");
Expect(0, 12703, '\p{Block=bopomofoextended}', "");
Expect(1, 12703, '\p{^Block=bopomofoextended}', "");
Expect(1, 12703, '\P{Block=bopomofoextended}', "");
Expect(0, 12703, '\P{^Block=bopomofoextended}', "");
Expect(1, 12735, '\p{Block=- bopomofo-extended}', "");
Expect(0, 12735, '\p{^Block=- bopomofo-extended}', "");
Expect(0, 12735, '\P{Block=- bopomofo-extended}', "");
Expect(1, 12735, '\P{^Block=- bopomofo-extended}', "");
Expect(0, 12703, '\p{Block=- bopomofo-extended}', "");
Expect(1, 12703, '\p{^Block=- bopomofo-extended}', "");
Expect(1, 12703, '\P{Block=- bopomofo-extended}', "");
Expect(0, 12703, '\P{^Block=- bopomofo-extended}', "");
Error('\p{Blk:   Bopomofo_extended/a/}');
Error('\P{Blk:   Bopomofo_extended/a/}');
Expect(1, 12735, '\p{Blk=bopomofoextended}', "");
Expect(0, 12735, '\p{^Blk=bopomofoextended}', "");
Expect(0, 12735, '\P{Blk=bopomofoextended}', "");
Expect(1, 12735, '\P{^Blk=bopomofoextended}', "");
Expect(0, 12703, '\p{Blk=bopomofoextended}', "");
Expect(1, 12703, '\p{^Blk=bopomofoextended}', "");
Expect(1, 12703, '\P{Blk=bopomofoextended}', "");
Expect(0, 12703, '\P{^Blk=bopomofoextended}', "");
Expect(1, 12735, '\p{Blk=Bopomofo-Extended}', "");
Expect(0, 12735, '\p{^Blk=Bopomofo-Extended}', "");
Expect(0, 12735, '\P{Blk=Bopomofo-Extended}', "");
Expect(1, 12735, '\P{^Blk=Bopomofo-Extended}', "");
Expect(0, 12703, '\p{Blk=Bopomofo-Extended}', "");
Expect(1, 12703, '\p{^Blk=Bopomofo-Extended}', "");
Expect(1, 12703, '\P{Blk=Bopomofo-Extended}', "");
Expect(0, 12703, '\P{^Blk=Bopomofo-Extended}', "");
Error('\p{Is_Block=-:=Bopomofo	extended}');
Error('\P{Is_Block=-:=Bopomofo	extended}');
Expect(1, 12735, '\p{Is_Block=bopomofoextended}', "");
Expect(0, 12735, '\p{^Is_Block=bopomofoextended}', "");
Expect(0, 12735, '\P{Is_Block=bopomofoextended}', "");
Expect(1, 12735, '\P{^Is_Block=bopomofoextended}', "");
Expect(0, 12703, '\p{Is_Block=bopomofoextended}', "");
Expect(1, 12703, '\p{^Is_Block=bopomofoextended}', "");
Expect(1, 12703, '\P{Is_Block=bopomofoextended}', "");
Expect(0, 12703, '\P{^Is_Block=bopomofoextended}', "");
Expect(1, 12735, '\p{Is_Block:  	bopomofoextended}', "");
Expect(0, 12735, '\p{^Is_Block:  	bopomofoextended}', "");
Expect(0, 12735, '\P{Is_Block:  	bopomofoextended}', "");
Expect(1, 12735, '\P{^Is_Block:  	bopomofoextended}', "");
Expect(0, 12703, '\p{Is_Block:  	bopomofoextended}', "");
Expect(1, 12703, '\p{^Is_Block:  	bopomofoextended}', "");
Expect(1, 12703, '\P{Is_Block:  	bopomofoextended}', "");
Expect(0, 12703, '\P{^Is_Block:  	bopomofoextended}', "");
Error('\p{Is_Blk=- BOPOMOFO_extended:=}');
Error('\P{Is_Blk=- BOPOMOFO_extended:=}');
Expect(1, 12735, '\p{Is_Blk: bopomofoextended}', "");
Expect(0, 12735, '\p{^Is_Blk: bopomofoextended}', "");
Expect(0, 12735, '\P{Is_Blk: bopomofoextended}', "");
Expect(1, 12735, '\P{^Is_Blk: bopomofoextended}', "");
Expect(0, 12703, '\p{Is_Blk: bopomofoextended}', "");
Expect(1, 12703, '\p{^Is_Blk: bopomofoextended}', "");
Expect(1, 12703, '\P{Is_Blk: bopomofoextended}', "");
Expect(0, 12703, '\P{^Is_Blk: bopomofoextended}', "");
Expect(1, 12735, '\p{Is_Blk=	_Bopomofo-extended}', "");
Expect(0, 12735, '\p{^Is_Blk=	_Bopomofo-extended}', "");
Expect(0, 12735, '\P{Is_Blk=	_Bopomofo-extended}', "");
Expect(1, 12735, '\P{^Is_Blk=	_Bopomofo-extended}', "");
Expect(0, 12703, '\p{Is_Blk=	_Bopomofo-extended}', "");
Expect(1, 12703, '\p{^Is_Blk=	_Bopomofo-extended}', "");
Expect(1, 12703, '\P{Is_Blk=	_Bopomofo-extended}', "");
Expect(0, 12703, '\P{^Is_Blk=	_Bopomofo-extended}', "");
Error('\p{Block:   	Ogham:=}');
Error('\P{Block:   	Ogham:=}');
Expect(1, 5791, '\p{Block=ogham}', "");
Expect(0, 5791, '\p{^Block=ogham}', "");
Expect(0, 5791, '\P{Block=ogham}', "");
Expect(1, 5791, '\P{^Block=ogham}', "");
Expect(0, 5759, '\p{Block=ogham}', "");
Expect(1, 5759, '\p{^Block=ogham}', "");
Expect(1, 5759, '\P{Block=ogham}', "");
Expect(0, 5759, '\P{^Block=ogham}', "");
Expect(1, 5791, '\p{Block= Ogham}', "");
Expect(0, 5791, '\p{^Block= Ogham}', "");
Expect(0, 5791, '\P{Block= Ogham}', "");
Expect(1, 5791, '\P{^Block= Ogham}', "");
Expect(0, 5759, '\p{Block= Ogham}', "");
Expect(1, 5759, '\p{^Block= Ogham}', "");
Expect(1, 5759, '\P{Block= Ogham}', "");
Expect(0, 5759, '\P{^Block= Ogham}', "");
Error('\p{Blk:OGHAM/a/}');
Error('\P{Blk:OGHAM/a/}');
Expect(1, 5791, '\p{Blk:	ogham}', "");
Expect(0, 5791, '\p{^Blk:	ogham}', "");
Expect(0, 5791, '\P{Blk:	ogham}', "");
Expect(1, 5791, '\P{^Blk:	ogham}', "");
Expect(0, 5759, '\p{Blk:	ogham}', "");
Expect(1, 5759, '\p{^Blk:	ogham}', "");
Expect(1, 5759, '\P{Blk:	ogham}', "");
Expect(0, 5759, '\P{^Blk:	ogham}', "");
Expect(1, 5791, '\p{Blk= -ogham}', "");
Expect(0, 5791, '\p{^Blk= -ogham}', "");
Expect(0, 5791, '\P{Blk= -ogham}', "");
Expect(1, 5791, '\P{^Blk= -ogham}', "");
Expect(0, 5759, '\p{Blk= -ogham}', "");
Expect(1, 5759, '\p{^Blk= -ogham}', "");
Expect(1, 5759, '\P{Blk= -ogham}', "");
Expect(0, 5759, '\P{^Blk= -ogham}', "");
Error('\p{Is_Block=-:=OGHAM}');
Error('\P{Is_Block=-:=OGHAM}');
Expect(1, 5791, '\p{Is_Block=ogham}', "");
Expect(0, 5791, '\p{^Is_Block=ogham}', "");
Expect(0, 5791, '\P{Is_Block=ogham}', "");
Expect(1, 5791, '\P{^Is_Block=ogham}', "");
Expect(0, 5759, '\p{Is_Block=ogham}', "");
Expect(1, 5759, '\p{^Is_Block=ogham}', "");
Expect(1, 5759, '\P{Is_Block=ogham}', "");
Expect(0, 5759, '\P{^Is_Block=ogham}', "");
Expect(1, 5791, '\p{Is_Block= 	ogham}', "");
Expect(0, 5791, '\p{^Is_Block= 	ogham}', "");
Expect(0, 5791, '\P{Is_Block= 	ogham}', "");
Expect(1, 5791, '\P{^Is_Block= 	ogham}', "");
Expect(0, 5759, '\p{Is_Block= 	ogham}', "");
Expect(1, 5759, '\p{^Is_Block= 	ogham}', "");
Expect(1, 5759, '\P{Is_Block= 	ogham}', "");
Expect(0, 5759, '\P{^Is_Block= 	ogham}', "");
Error('\p{Is_Blk= :=Ogham}');
Error('\P{Is_Blk= :=Ogham}');
Expect(1, 5791, '\p{Is_Blk=ogham}', "");
Expect(0, 5791, '\p{^Is_Blk=ogham}', "");
Expect(0, 5791, '\P{Is_Blk=ogham}', "");
Expect(1, 5791, '\P{^Is_Blk=ogham}', "");
Expect(0, 5759, '\p{Is_Blk=ogham}', "");
Expect(1, 5759, '\p{^Is_Blk=ogham}', "");
Expect(1, 5759, '\P{Is_Blk=ogham}', "");
Expect(0, 5759, '\P{^Is_Blk=ogham}', "");
Expect(1, 5791, '\p{Is_Blk=  OGHAM}', "");
Expect(0, 5791, '\p{^Is_Blk=  OGHAM}', "");
Expect(0, 5791, '\P{Is_Blk=  OGHAM}', "");
Expect(1, 5791, '\P{^Is_Blk=  OGHAM}', "");
Expect(0, 5759, '\p{Is_Blk=  OGHAM}', "");
Expect(1, 5759, '\p{^Is_Blk=  OGHAM}', "");
Expect(1, 5759, '\P{Is_Blk=  OGHAM}', "");
Expect(0, 5759, '\P{^Is_Blk=  OGHAM}', "");
Error('\p{Block=	/a/SAMARITAN}');
Error('\P{Block=	/a/SAMARITAN}');
Expect(1, 2111, '\p{Block=samaritan}', "");
Expect(0, 2111, '\p{^Block=samaritan}', "");
Expect(0, 2111, '\P{Block=samaritan}', "");
Expect(1, 2111, '\P{^Block=samaritan}', "");
Expect(0, 2047, '\p{Block=samaritan}', "");
Expect(1, 2047, '\p{^Block=samaritan}', "");
Expect(1, 2047, '\P{Block=samaritan}', "");
Expect(0, 2047, '\P{^Block=samaritan}', "");
Expect(1, 2111, '\p{Block=	-Samaritan}', "");
Expect(0, 2111, '\p{^Block=	-Samaritan}', "");
Expect(0, 2111, '\P{Block=	-Samaritan}', "");
Expect(1, 2111, '\P{^Block=	-Samaritan}', "");
Expect(0, 2047, '\p{Block=	-Samaritan}', "");
Expect(1, 2047, '\p{^Block=	-Samaritan}', "");
Expect(1, 2047, '\P{Block=	-Samaritan}', "");
Expect(0, 2047, '\P{^Block=	-Samaritan}', "");
Error('\p{Blk= /a/SAMARITAN}');
Error('\P{Blk= /a/SAMARITAN}');
Expect(1, 2111, '\p{Blk=samaritan}', "");
Expect(0, 2111, '\p{^Blk=samaritan}', "");
Expect(0, 2111, '\P{Blk=samaritan}', "");
Expect(1, 2111, '\P{^Blk=samaritan}', "");
Expect(0, 2047, '\p{Blk=samaritan}', "");
Expect(1, 2047, '\p{^Blk=samaritan}', "");
Expect(1, 2047, '\P{Blk=samaritan}', "");
Expect(0, 2047, '\P{^Blk=samaritan}', "");
Expect(1, 2111, '\p{Blk= Samaritan}', "");
Expect(0, 2111, '\p{^Blk= Samaritan}', "");
Expect(0, 2111, '\P{Blk= Samaritan}', "");
Expect(1, 2111, '\P{^Blk= Samaritan}', "");
Expect(0, 2047, '\p{Blk= Samaritan}', "");
Expect(1, 2047, '\p{^Blk= Samaritan}', "");
Expect(1, 2047, '\P{Blk= Samaritan}', "");
Expect(0, 2047, '\P{^Blk= Samaritan}', "");
Error('\p{Is_Block=-Samaritan:=}');
Error('\P{Is_Block=-Samaritan:=}');
Expect(1, 2111, '\p{Is_Block=samaritan}', "");
Expect(0, 2111, '\p{^Is_Block=samaritan}', "");
Expect(0, 2111, '\P{Is_Block=samaritan}', "");
Expect(1, 2111, '\P{^Is_Block=samaritan}', "");
Expect(0, 2047, '\p{Is_Block=samaritan}', "");
Expect(1, 2047, '\p{^Is_Block=samaritan}', "");
Expect(1, 2047, '\P{Is_Block=samaritan}', "");
Expect(0, 2047, '\P{^Is_Block=samaritan}', "");
Expect(1, 2111, '\p{Is_Block=_samaritan}', "");
Expect(0, 2111, '\p{^Is_Block=_samaritan}', "");
Expect(0, 2111, '\P{Is_Block=_samaritan}', "");
Expect(1, 2111, '\P{^Is_Block=_samaritan}', "");
Expect(0, 2047, '\p{Is_Block=_samaritan}', "");
Expect(1, 2047, '\p{^Is_Block=_samaritan}', "");
Expect(1, 2047, '\P{Is_Block=_samaritan}', "");
Expect(0, 2047, '\P{^Is_Block=_samaritan}', "");
Error('\p{Is_Blk=	 Samaritan/a/}');
Error('\P{Is_Blk=	 Samaritan/a/}');
Expect(1, 2111, '\p{Is_Blk:samaritan}', "");
Expect(0, 2111, '\p{^Is_Blk:samaritan}', "");
Expect(0, 2111, '\P{Is_Blk:samaritan}', "");
Expect(1, 2111, '\P{^Is_Blk:samaritan}', "");
Expect(0, 2047, '\p{Is_Blk:samaritan}', "");
Expect(1, 2047, '\p{^Is_Blk:samaritan}', "");
Expect(1, 2047, '\P{Is_Blk:samaritan}', "");
Expect(0, 2047, '\P{^Is_Blk:samaritan}', "");
Expect(1, 2111, '\p{Is_Blk=	_Samaritan}', "");
Expect(0, 2111, '\p{^Is_Blk=	_Samaritan}', "");
Expect(0, 2111, '\P{Is_Blk=	_Samaritan}', "");
Expect(1, 2111, '\P{^Is_Blk=	_Samaritan}', "");
Expect(0, 2047, '\p{Is_Blk=	_Samaritan}', "");
Expect(1, 2047, '\p{^Is_Blk=	_Samaritan}', "");
Expect(1, 2047, '\P{Is_Blk=	_Samaritan}', "");
Expect(0, 2047, '\P{^Is_Blk=	_Samaritan}', "");
Error('\p{Block=:= 	vai}');
Error('\P{Block=:= 	vai}');
Expect(1, 42559, '\p{Block=vai}', "");
Expect(0, 42559, '\p{^Block=vai}', "");
Expect(0, 42559, '\P{Block=vai}', "");
Expect(1, 42559, '\P{^Block=vai}', "");
Expect(0, 42239, '\p{Block=vai}', "");
Expect(1, 42239, '\p{^Block=vai}', "");
Expect(1, 42239, '\P{Block=vai}', "");
Expect(0, 42239, '\P{^Block=vai}', "");
Expect(1, 42559, '\p{Block=	Vai}', "");
Expect(0, 42559, '\p{^Block=	Vai}', "");
Expect(0, 42559, '\P{Block=	Vai}', "");
Expect(1, 42559, '\P{^Block=	Vai}', "");
Expect(0, 42239, '\p{Block=	Vai}', "");
Expect(1, 42239, '\p{^Block=	Vai}', "");
Expect(1, 42239, '\P{Block=	Vai}', "");
Expect(0, 42239, '\P{^Block=	Vai}', "");
Error('\p{Blk=_/a/vai}');
Error('\P{Blk=_/a/vai}');
Expect(1, 42559, '\p{Blk=vai}', "");
Expect(0, 42559, '\p{^Blk=vai}', "");
Expect(0, 42559, '\P{Blk=vai}', "");
Expect(1, 42559, '\P{^Blk=vai}', "");
Expect(0, 42239, '\p{Blk=vai}', "");
Expect(1, 42239, '\p{^Blk=vai}', "");
Expect(1, 42239, '\P{Blk=vai}', "");
Expect(0, 42239, '\P{^Blk=vai}', "");
Expect(1, 42559, '\p{Blk=--vai}', "");
Expect(0, 42559, '\p{^Blk=--vai}', "");
Expect(0, 42559, '\P{Blk=--vai}', "");
Expect(1, 42559, '\P{^Blk=--vai}', "");
Expect(0, 42239, '\p{Blk=--vai}', "");
Expect(1, 42239, '\p{^Blk=--vai}', "");
Expect(1, 42239, '\P{Blk=--vai}', "");
Expect(0, 42239, '\P{^Blk=--vai}', "");
Error('\p{Is_Block=/a/ _VAI}');
Error('\P{Is_Block=/a/ _VAI}');
Expect(1, 42559, '\p{Is_Block=vai}', "");
Expect(0, 42559, '\p{^Is_Block=vai}', "");
Expect(0, 42559, '\P{Is_Block=vai}', "");
Expect(1, 42559, '\P{^Is_Block=vai}', "");
Expect(0, 42239, '\p{Is_Block=vai}', "");
Expect(1, 42239, '\p{^Is_Block=vai}', "");
Expect(1, 42239, '\P{Is_Block=vai}', "");
Expect(0, 42239, '\P{^Is_Block=vai}', "");
Expect(1, 42559, '\p{Is_Block=	vai}', "");
Expect(0, 42559, '\p{^Is_Block=	vai}', "");
Expect(0, 42559, '\P{Is_Block=	vai}', "");
Expect(1, 42559, '\P{^Is_Block=	vai}', "");
Expect(0, 42239, '\p{Is_Block=	vai}', "");
Expect(1, 42239, '\p{^Is_Block=	vai}', "");
Expect(1, 42239, '\P{Is_Block=	vai}', "");
Expect(0, 42239, '\P{^Is_Block=	vai}', "");
Error('\p{Is_Blk=-/a/Vai}');
Error('\P{Is_Blk=-/a/Vai}');
Expect(1, 42559, '\p{Is_Blk=vai}', "");
Expect(0, 42559, '\p{^Is_Blk=vai}', "");
Expect(0, 42559, '\P{Is_Blk=vai}', "");
Expect(1, 42559, '\P{^Is_Blk=vai}', "");
Expect(0, 42239, '\p{Is_Blk=vai}', "");
Expect(1, 42239, '\p{^Is_Blk=vai}', "");
Expect(1, 42239, '\P{Is_Blk=vai}', "");
Expect(0, 42239, '\P{^Is_Blk=vai}', "");
Expect(1, 42559, '\p{Is_Blk=__Vai}', "");
Expect(0, 42559, '\p{^Is_Blk=__Vai}', "");
Expect(0, 42559, '\P{Is_Blk=__Vai}', "");
Expect(1, 42559, '\P{^Is_Blk=__Vai}', "");
Expect(0, 42239, '\p{Is_Blk=__Vai}', "");
Expect(1, 42239, '\p{^Is_Blk=__Vai}', "");
Expect(1, 42239, '\P{Is_Blk=__Vai}', "");
Expect(0, 42239, '\P{^Is_Blk=__Vai}', "");
Error('\p{Block=-:=generalPunctuation}');
Error('\P{Block=-:=generalPunctuation}');
Expect(1, 8303, '\p{Block=generalpunctuation}', "");
Expect(0, 8303, '\p{^Block=generalpunctuation}', "");
Expect(0, 8303, '\P{Block=generalpunctuation}', "");
Expect(1, 8303, '\P{^Block=generalpunctuation}', "");
Expect(0, 8191, '\p{Block=generalpunctuation}', "");
Expect(1, 8191, '\p{^Block=generalpunctuation}', "");
Expect(1, 8191, '\P{Block=generalpunctuation}', "");
Expect(0, 8191, '\P{^Block=generalpunctuation}', "");
Expect(1, 8303, '\p{Block=	General-Punctuation}', "");
Expect(0, 8303, '\p{^Block=	General-Punctuation}', "");
Expect(0, 8303, '\P{Block=	General-Punctuation}', "");
Expect(1, 8303, '\P{^Block=	General-Punctuation}', "");
Expect(0, 8191, '\p{Block=	General-Punctuation}', "");
Expect(1, 8191, '\p{^Block=	General-Punctuation}', "");
Expect(1, 8191, '\P{Block=	General-Punctuation}', "");
Expect(0, 8191, '\P{^Block=	General-Punctuation}', "");
Error('\p{Blk=/a/_ General_punctuation}');
Error('\P{Blk=/a/_ General_punctuation}');
Expect(1, 8303, '\p{Blk=generalpunctuation}', "");
Expect(0, 8303, '\p{^Blk=generalpunctuation}', "");
Expect(0, 8303, '\P{Blk=generalpunctuation}', "");
Expect(1, 8303, '\P{^Blk=generalpunctuation}', "");
Expect(0, 8191, '\p{Blk=generalpunctuation}', "");
Expect(1, 8191, '\p{^Blk=generalpunctuation}', "");
Expect(1, 8191, '\P{Blk=generalpunctuation}', "");
Expect(0, 8191, '\P{^Blk=generalpunctuation}', "");
Expect(1, 8303, '\p{Blk=-	GENERAL_PUNCTUATION}', "");
Expect(0, 8303, '\p{^Blk=-	GENERAL_PUNCTUATION}', "");
Expect(0, 8303, '\P{Blk=-	GENERAL_PUNCTUATION}', "");
Expect(1, 8303, '\P{^Blk=-	GENERAL_PUNCTUATION}', "");
Expect(0, 8191, '\p{Blk=-	GENERAL_PUNCTUATION}', "");
Expect(1, 8191, '\p{^Blk=-	GENERAL_PUNCTUATION}', "");
Expect(1, 8191, '\P{Blk=-	GENERAL_PUNCTUATION}', "");
Expect(0, 8191, '\P{^Blk=-	GENERAL_PUNCTUATION}', "");
Error('\p{Is_Block:   :=	 general	punctuation}');
Error('\P{Is_Block:   :=	 general	punctuation}');
Expect(1, 8303, '\p{Is_Block=generalpunctuation}', "");
Expect(0, 8303, '\p{^Is_Block=generalpunctuation}', "");
Expect(0, 8303, '\P{Is_Block=generalpunctuation}', "");
Expect(1, 8303, '\P{^Is_Block=generalpunctuation}', "");
Expect(0, 8191, '\p{Is_Block=generalpunctuation}', "");
Expect(1, 8191, '\p{^Is_Block=generalpunctuation}', "");
Expect(1, 8191, '\P{Is_Block=generalpunctuation}', "");
Expect(0, 8191, '\P{^Is_Block=generalpunctuation}', "");
Expect(1, 8303, '\p{Is_Block=_general PUNCTUATION}', "");
Expect(0, 8303, '\p{^Is_Block=_general PUNCTUATION}', "");
Expect(0, 8303, '\P{Is_Block=_general PUNCTUATION}', "");
Expect(1, 8303, '\P{^Is_Block=_general PUNCTUATION}', "");
Expect(0, 8191, '\p{Is_Block=_general PUNCTUATION}', "");
Expect(1, 8191, '\p{^Is_Block=_general PUNCTUATION}', "");
Expect(1, 8191, '\P{Is_Block=_general PUNCTUATION}', "");
Expect(0, 8191, '\P{^Is_Block=_general PUNCTUATION}', "");
Error('\p{Is_Blk=/a/-_Generalpunctuation}');
Error('\P{Is_Blk=/a/-_Generalpunctuation}');
Expect(1, 8303, '\p{Is_Blk=generalpunctuation}', "");
Expect(0, 8303, '\p{^Is_Blk=generalpunctuation}', "");
Expect(0, 8303, '\P{Is_Blk=generalpunctuation}', "");
Expect(1, 8303, '\P{^Is_Blk=generalpunctuation}', "");
Expect(0, 8191, '\p{Is_Blk=generalpunctuation}', "");
Expect(1, 8191, '\p{^Is_Blk=generalpunctuation}', "");
Expect(1, 8191, '\P{Is_Blk=generalpunctuation}', "");
Expect(0, 8191, '\P{^Is_Blk=generalpunctuation}', "");
Expect(1, 8303, '\p{Is_Blk=	-GENERAL	Punctuation}', "");
Expect(0, 8303, '\p{^Is_Blk=	-GENERAL	Punctuation}', "");
Expect(0, 8303, '\P{Is_Blk=	-GENERAL	Punctuation}', "");
Expect(1, 8303, '\P{^Is_Blk=	-GENERAL	Punctuation}', "");
Expect(0, 8191, '\p{Is_Blk=	-GENERAL	Punctuation}', "");
Expect(1, 8191, '\p{^Is_Blk=	-GENERAL	Punctuation}', "");
Expect(1, 8191, '\P{Is_Blk=	-GENERAL	Punctuation}', "");
Expect(0, 8191, '\P{^Is_Blk=	-GENERAL	Punctuation}', "");
Error('\p{Block=	:=Rejang}');
Error('\P{Block=	:=Rejang}');
Expect(1, 43359, '\p{Block=rejang}', "");
Expect(0, 43359, '\p{^Block=rejang}', "");
Expect(0, 43359, '\P{Block=rejang}', "");
Expect(1, 43359, '\P{^Block=rejang}', "");
Expect(0, 43311, '\p{Block=rejang}', "");
Expect(1, 43311, '\p{^Block=rejang}', "");
Expect(1, 43311, '\P{Block=rejang}', "");
Expect(0, 43311, '\P{^Block=rejang}', "");
Expect(1, 43359, '\p{Block= -REJANG}', "");
Expect(0, 43359, '\p{^Block= -REJANG}', "");
Expect(0, 43359, '\P{Block= -REJANG}', "");
Expect(1, 43359, '\P{^Block= -REJANG}', "");
Expect(0, 43311, '\p{Block= -REJANG}', "");
Expect(1, 43311, '\p{^Block= -REJANG}', "");
Expect(1, 43311, '\P{Block= -REJANG}', "");
Expect(0, 43311, '\P{^Block= -REJANG}', "");
Error('\p{Blk=:=	 Rejang}');
Error('\P{Blk=:=	 Rejang}');
Expect(1, 43359, '\p{Blk=rejang}', "");
Expect(0, 43359, '\p{^Blk=rejang}', "");
Expect(0, 43359, '\P{Blk=rejang}', "");
Expect(1, 43359, '\P{^Blk=rejang}', "");
Expect(0, 43311, '\p{Blk=rejang}', "");
Expect(1, 43311, '\p{^Blk=rejang}', "");
Expect(1, 43311, '\P{Blk=rejang}', "");
Expect(0, 43311, '\P{^Blk=rejang}', "");
Expect(1, 43359, '\p{Blk= -rejang}', "");
Expect(0, 43359, '\p{^Blk= -rejang}', "");
Expect(0, 43359, '\P{Blk= -rejang}', "");
Expect(1, 43359, '\P{^Blk= -rejang}', "");
Expect(0, 43311, '\p{Blk= -rejang}', "");
Expect(1, 43311, '\p{^Blk= -rejang}', "");
Expect(1, 43311, '\P{Blk= -rejang}', "");
Expect(0, 43311, '\P{^Blk= -rejang}', "");
Error('\p{Is_Block=:=_	rejang}');
Error('\P{Is_Block=:=_	rejang}');
Expect(1, 43359, '\p{Is_Block=rejang}', "");
Expect(0, 43359, '\p{^Is_Block=rejang}', "");
Expect(0, 43359, '\P{Is_Block=rejang}', "");
Expect(1, 43359, '\P{^Is_Block=rejang}', "");
Expect(0, 43311, '\p{Is_Block=rejang}', "");
Expect(1, 43311, '\p{^Is_Block=rejang}', "");
Expect(1, 43311, '\P{Is_Block=rejang}', "");
Expect(0, 43311, '\P{^Is_Block=rejang}', "");
Expect(1, 43359, '\p{Is_Block= rejang}', "");
Expect(0, 43359, '\p{^Is_Block= rejang}', "");
Expect(0, 43359, '\P{Is_Block= rejang}', "");
Expect(1, 43359, '\P{^Is_Block= rejang}', "");
Expect(0, 43311, '\p{Is_Block= rejang}', "");
Expect(1, 43311, '\p{^Is_Block= rejang}', "");
Expect(1, 43311, '\P{Is_Block= rejang}', "");
Expect(0, 43311, '\P{^Is_Block= rejang}', "");
Error('\p{Is_Blk=:= _Rejang}');
Error('\P{Is_Blk=:= _Rejang}');
Expect(1, 43359, '\p{Is_Blk=rejang}', "");
Expect(0, 43359, '\p{^Is_Blk=rejang}', "");
Expect(0, 43359, '\P{Is_Blk=rejang}', "");
Expect(1, 43359, '\P{^Is_Blk=rejang}', "");
Expect(0, 43311, '\p{Is_Blk=rejang}', "");
Expect(1, 43311, '\p{^Is_Blk=rejang}', "");
Expect(1, 43311, '\P{Is_Blk=rejang}', "");
Expect(0, 43311, '\P{^Is_Blk=rejang}', "");
Expect(1, 43359, '\p{Is_Blk=-rejang}', "");
Expect(0, 43359, '\p{^Is_Blk=-rejang}', "");
Expect(0, 43359, '\P{Is_Blk=-rejang}', "");
Expect(1, 43359, '\P{^Is_Blk=-rejang}', "");
Expect(0, 43311, '\p{Is_Blk=-rejang}', "");
Expect(1, 43311, '\p{^Is_Blk=-rejang}', "");
Expect(1, 43311, '\P{Is_Blk=-rejang}', "");
Expect(0, 43311, '\P{^Is_Blk=-rejang}', "");
Error('\p{Block=:=- OLD turkic}');
Error('\P{Block=:=- OLD turkic}');
Expect(1, 68687, '\p{Block=oldturkic}', "");
Expect(0, 68687, '\p{^Block=oldturkic}', "");
Expect(0, 68687, '\P{Block=oldturkic}', "");
Expect(1, 68687, '\P{^Block=oldturkic}', "");
Expect(0, 68607, '\p{Block=oldturkic}', "");
Expect(1, 68607, '\p{^Block=oldturkic}', "");
Expect(1, 68607, '\P{Block=oldturkic}', "");
Expect(0, 68607, '\P{^Block=oldturkic}', "");
Expect(1, 68687, '\p{Block=_ OLD_Turkic}', "");
Expect(0, 68687, '\p{^Block=_ OLD_Turkic}', "");
Expect(0, 68687, '\P{Block=_ OLD_Turkic}', "");
Expect(1, 68687, '\P{^Block=_ OLD_Turkic}', "");
Expect(0, 68607, '\p{Block=_ OLD_Turkic}', "");
Expect(1, 68607, '\p{^Block=_ OLD_Turkic}', "");
Expect(1, 68607, '\P{Block=_ OLD_Turkic}', "");
Expect(0, 68607, '\P{^Block=_ OLD_Turkic}', "");
Error('\p{Blk=--Old:=Turkic}');
Error('\P{Blk=--Old:=Turkic}');
Expect(1, 68687, '\p{Blk: oldturkic}', "");
Expect(0, 68687, '\p{^Blk: oldturkic}', "");
Expect(0, 68687, '\P{Blk: oldturkic}', "");
Expect(1, 68687, '\P{^Blk: oldturkic}', "");
Expect(0, 68607, '\p{Blk: oldturkic}', "");
Expect(1, 68607, '\p{^Blk: oldturkic}', "");
Expect(1, 68607, '\P{Blk: oldturkic}', "");
Expect(0, 68607, '\P{^Blk: oldturkic}', "");
Expect(1, 68687, '\p{Blk=	Old-Turkic}', "");
Expect(0, 68687, '\p{^Blk=	Old-Turkic}', "");
Expect(0, 68687, '\P{Blk=	Old-Turkic}', "");
Expect(1, 68687, '\P{^Blk=	Old-Turkic}', "");
Expect(0, 68607, '\p{Blk=	Old-Turkic}', "");
Expect(1, 68607, '\p{^Blk=	Old-Turkic}', "");
Expect(1, 68607, '\P{Blk=	Old-Turkic}', "");
Expect(0, 68607, '\P{^Blk=	Old-Turkic}', "");
Error('\p{Is_Block=/a/-	oldTurkic}');
Error('\P{Is_Block=/a/-	oldTurkic}');
Expect(1, 68687, '\p{Is_Block:oldturkic}', "");
Expect(0, 68687, '\p{^Is_Block:oldturkic}', "");
Expect(0, 68687, '\P{Is_Block:oldturkic}', "");
Expect(1, 68687, '\P{^Is_Block:oldturkic}', "");
Expect(0, 68607, '\p{Is_Block:oldturkic}', "");
Expect(1, 68607, '\p{^Is_Block:oldturkic}', "");
Expect(1, 68607, '\P{Is_Block:oldturkic}', "");
Expect(0, 68607, '\P{^Is_Block:oldturkic}', "");
Expect(1, 68687, '\p{Is_Block=-_Old-turkic}', "");
Expect(0, 68687, '\p{^Is_Block=-_Old-turkic}', "");
Expect(0, 68687, '\P{Is_Block=-_Old-turkic}', "");
Expect(1, 68687, '\P{^Is_Block=-_Old-turkic}', "");
Expect(0, 68607, '\p{Is_Block=-_Old-turkic}', "");
Expect(1, 68607, '\p{^Is_Block=-_Old-turkic}', "");
Expect(1, 68607, '\P{Is_Block=-_Old-turkic}', "");
Expect(0, 68607, '\P{^Is_Block=-_Old-turkic}', "");
Error('\p{Is_Blk=	_Old/a/turkic}');
Error('\P{Is_Blk=	_Old/a/turkic}');
Expect(1, 68687, '\p{Is_Blk=oldturkic}', "");
Expect(0, 68687, '\p{^Is_Blk=oldturkic}', "");
Expect(0, 68687, '\P{Is_Blk=oldturkic}', "");
Expect(1, 68687, '\P{^Is_Blk=oldturkic}', "");
Expect(0, 68607, '\p{Is_Blk=oldturkic}', "");
Expect(1, 68607, '\p{^Is_Blk=oldturkic}', "");
Expect(1, 68607, '\P{Is_Blk=oldturkic}', "");
Expect(0, 68607, '\P{^Is_Blk=oldturkic}', "");
Expect(1, 68687, '\p{Is_Blk=  Old_Turkic}', "");
Expect(0, 68687, '\p{^Is_Blk=  Old_Turkic}', "");
Expect(0, 68687, '\P{Is_Blk=  Old_Turkic}', "");
Expect(1, 68687, '\P{^Is_Blk=  Old_Turkic}', "");
Expect(0, 68607, '\p{Is_Blk=  Old_Turkic}', "");
Expect(1, 68607, '\p{^Is_Blk=  Old_Turkic}', "");
Expect(1, 68607, '\P{Is_Blk=  Old_Turkic}', "");
Expect(0, 68607, '\P{^Is_Blk=  Old_Turkic}', "");
Error('\p{Block= _OlChiki/a/}');
Error('\P{Block= _OlChiki/a/}');
Expect(1, 7295, '\p{Block=olchiki}', "");
Expect(0, 7295, '\p{^Block=olchiki}', "");
Expect(0, 7295, '\P{Block=olchiki}', "");
Expect(1, 7295, '\P{^Block=olchiki}', "");
Expect(0, 7247, '\p{Block=olchiki}', "");
Expect(1, 7247, '\p{^Block=olchiki}', "");
Expect(1, 7247, '\P{Block=olchiki}', "");
Expect(0, 7247, '\P{^Block=olchiki}', "");
Expect(1, 7295, '\p{Block=_-olCHIKI}', "");
Expect(0, 7295, '\p{^Block=_-olCHIKI}', "");
Expect(0, 7295, '\P{Block=_-olCHIKI}', "");
Expect(1, 7295, '\P{^Block=_-olCHIKI}', "");
Expect(0, 7247, '\p{Block=_-olCHIKI}', "");
Expect(1, 7247, '\p{^Block=_-olCHIKI}', "");
Expect(1, 7247, '\P{Block=_-olCHIKI}', "");
Expect(0, 7247, '\P{^Block=_-olCHIKI}', "");
Error('\p{Blk=	OL/a/chiki}');
Error('\P{Blk=	OL/a/chiki}');
Expect(1, 7295, '\p{Blk=olchiki}', "");
Expect(0, 7295, '\p{^Blk=olchiki}', "");
Expect(0, 7295, '\P{Blk=olchiki}', "");
Expect(1, 7295, '\P{^Blk=olchiki}', "");
Expect(0, 7247, '\p{Blk=olchiki}', "");
Expect(1, 7247, '\p{^Blk=olchiki}', "");
Expect(1, 7247, '\P{Blk=olchiki}', "");
Expect(0, 7247, '\P{^Blk=olchiki}', "");
Expect(1, 7295, '\p{Blk=-Ol-chiki}', "");
Expect(0, 7295, '\p{^Blk=-Ol-chiki}', "");
Expect(0, 7295, '\P{Blk=-Ol-chiki}', "");
Expect(1, 7295, '\P{^Blk=-Ol-chiki}', "");
Expect(0, 7247, '\p{Blk=-Ol-chiki}', "");
Expect(1, 7247, '\p{^Blk=-Ol-chiki}', "");
Expect(1, 7247, '\P{Blk=-Ol-chiki}', "");
Expect(0, 7247, '\P{^Blk=-Ol-chiki}', "");
Error('\p{Is_Block=_:=Ol-chiki}');
Error('\P{Is_Block=_:=Ol-chiki}');
Expect(1, 7295, '\p{Is_Block=olchiki}', "");
Expect(0, 7295, '\p{^Is_Block=olchiki}', "");
Expect(0, 7295, '\P{Is_Block=olchiki}', "");
Expect(1, 7295, '\P{^Is_Block=olchiki}', "");
Expect(0, 7247, '\p{Is_Block=olchiki}', "");
Expect(1, 7247, '\p{^Is_Block=olchiki}', "");
Expect(1, 7247, '\P{Is_Block=olchiki}', "");
Expect(0, 7247, '\P{^Is_Block=olchiki}', "");
Expect(1, 7295, '\p{Is_Block=_ Olchiki}', "");
Expect(0, 7295, '\p{^Is_Block=_ Olchiki}', "");
Expect(0, 7295, '\P{Is_Block=_ Olchiki}', "");
Expect(1, 7295, '\P{^Is_Block=_ Olchiki}', "");
Expect(0, 7247, '\p{Is_Block=_ Olchiki}', "");
Expect(1, 7247, '\p{^Is_Block=_ Olchiki}', "");
Expect(1, 7247, '\P{Is_Block=_ Olchiki}', "");
Expect(0, 7247, '\P{^Is_Block=_ Olchiki}', "");
Error('\p{Is_Blk=-_Ol	chiki/a/}');
Error('\P{Is_Blk=-_Ol	chiki/a/}');
Expect(1, 7295, '\p{Is_Blk=olchiki}', "");
Expect(0, 7295, '\p{^Is_Blk=olchiki}', "");
Expect(0, 7295, '\P{Is_Blk=olchiki}', "");
Expect(1, 7295, '\P{^Is_Blk=olchiki}', "");
Expect(0, 7247, '\p{Is_Blk=olchiki}', "");
Expect(1, 7247, '\p{^Is_Blk=olchiki}', "");
Expect(1, 7247, '\P{Is_Blk=olchiki}', "");
Expect(0, 7247, '\P{^Is_Blk=olchiki}', "");
Expect(1, 7295, '\p{Is_Blk=-Ol-Chiki}', "");
Expect(0, 7295, '\p{^Is_Blk=-Ol-Chiki}', "");
Expect(0, 7295, '\P{Is_Blk=-Ol-Chiki}', "");
Expect(1, 7295, '\P{^Is_Blk=-Ol-Chiki}', "");
Expect(0, 7247, '\p{Is_Blk=-Ol-Chiki}', "");
Expect(1, 7247, '\p{^Is_Blk=-Ol-Chiki}', "");
Expect(1, 7247, '\P{Is_Blk=-Ol-Chiki}', "");
Expect(0, 7247, '\P{^Is_Blk=-Ol-Chiki}', "");
Error('\p{Block:	:=--ethiopic-extendedA}');
Error('\P{Block:	:=--ethiopic-extendedA}');
Expect(1, 43823, '\p{Block:   ethiopicextendeda}', "");
Expect(0, 43823, '\p{^Block:   ethiopicextendeda}', "");
Expect(0, 43823, '\P{Block:   ethiopicextendeda}', "");
Expect(1, 43823, '\P{^Block:   ethiopicextendeda}', "");
Expect(0, 43775, '\p{Block:   ethiopicextendeda}', "");
Expect(1, 43775, '\p{^Block:   ethiopicextendeda}', "");
Expect(1, 43775, '\P{Block:   ethiopicextendeda}', "");
Expect(0, 43775, '\P{^Block:   ethiopicextendeda}', "");
Expect(1, 43823, '\p{Block=_	Ethiopic_Extended_a}', "");
Expect(0, 43823, '\p{^Block=_	Ethiopic_Extended_a}', "");
Expect(0, 43823, '\P{Block=_	Ethiopic_Extended_a}', "");
Expect(1, 43823, '\P{^Block=_	Ethiopic_Extended_a}', "");
Expect(0, 43775, '\p{Block=_	Ethiopic_Extended_a}', "");
Expect(1, 43775, '\p{^Block=_	Ethiopic_Extended_a}', "");
Expect(1, 43775, '\P{Block=_	Ethiopic_Extended_a}', "");
Expect(0, 43775, '\P{^Block=_	Ethiopic_Extended_a}', "");
Error('\p{Blk=_ETHIOPIC:=extended	A}');
Error('\P{Blk=_ETHIOPIC:=extended	A}');
Expect(1, 43823, '\p{Blk=ethiopicextendeda}', "");
Expect(0, 43823, '\p{^Blk=ethiopicextendeda}', "");
Expect(0, 43823, '\P{Blk=ethiopicextendeda}', "");
Expect(1, 43823, '\P{^Blk=ethiopicextendeda}', "");
Expect(0, 43775, '\p{Blk=ethiopicextendeda}', "");
Expect(1, 43775, '\p{^Blk=ethiopicextendeda}', "");
Expect(1, 43775, '\P{Blk=ethiopicextendeda}', "");
Expect(0, 43775, '\P{^Blk=ethiopicextendeda}', "");
Expect(1, 43823, '\p{Blk=	 Ethiopic-extended-A}', "");
Expect(0, 43823, '\p{^Blk=	 Ethiopic-extended-A}', "");
Expect(0, 43823, '\P{Blk=	 Ethiopic-extended-A}', "");
Expect(1, 43823, '\P{^Blk=	 Ethiopic-extended-A}', "");
Expect(0, 43775, '\p{Blk=	 Ethiopic-extended-A}', "");
Expect(1, 43775, '\p{^Blk=	 Ethiopic-extended-A}', "");
Expect(1, 43775, '\P{Blk=	 Ethiopic-extended-A}', "");
Expect(0, 43775, '\P{^Blk=	 Ethiopic-extended-A}', "");
Error('\p{Is_Block=/a/Ethiopic	EXTENDEDA}');
Error('\P{Is_Block=/a/Ethiopic	EXTENDEDA}');
Expect(1, 43823, '\p{Is_Block=ethiopicextendeda}', "");
Expect(0, 43823, '\p{^Is_Block=ethiopicextendeda}', "");
Expect(0, 43823, '\P{Is_Block=ethiopicextendeda}', "");
Expect(1, 43823, '\P{^Is_Block=ethiopicextendeda}', "");
Expect(0, 43775, '\p{Is_Block=ethiopicextendeda}', "");
Expect(1, 43775, '\p{^Is_Block=ethiopicextendeda}', "");
Expect(1, 43775, '\P{Is_Block=ethiopicextendeda}', "");
Expect(0, 43775, '\P{^Is_Block=ethiopicextendeda}', "");
Expect(1, 43823, '\p{Is_Block=_ethiopic_Extended_A}', "");
Expect(0, 43823, '\p{^Is_Block=_ethiopic_Extended_A}', "");
Expect(0, 43823, '\P{Is_Block=_ethiopic_Extended_A}', "");
Expect(1, 43823, '\P{^Is_Block=_ethiopic_Extended_A}', "");
Expect(0, 43775, '\p{Is_Block=_ethiopic_Extended_A}', "");
Expect(1, 43775, '\p{^Is_Block=_ethiopic_Extended_A}', "");
Expect(1, 43775, '\P{Is_Block=_ethiopic_Extended_A}', "");
Expect(0, 43775, '\P{^Is_Block=_ethiopic_Extended_A}', "");
Error('\p{Is_Blk:    Ethiopic_EXTENDED:=a}');
Error('\P{Is_Blk:    Ethiopic_EXTENDED:=a}');
Expect(1, 43823, '\p{Is_Blk=ethiopicextendeda}', "");
Expect(0, 43823, '\p{^Is_Blk=ethiopicextendeda}', "");
Expect(0, 43823, '\P{Is_Blk=ethiopicextendeda}', "");
Expect(1, 43823, '\P{^Is_Blk=ethiopicextendeda}', "");
Expect(0, 43775, '\p{Is_Blk=ethiopicextendeda}', "");
Expect(1, 43775, '\p{^Is_Blk=ethiopicextendeda}', "");
Expect(1, 43775, '\P{Is_Blk=ethiopicextendeda}', "");
Expect(0, 43775, '\P{^Is_Blk=ethiopicextendeda}', "");
Expect(1, 43823, '\p{Is_Blk=--ETHIOPIC_Extended A}', "");
Expect(0, 43823, '\p{^Is_Blk=--ETHIOPIC_Extended A}', "");
Expect(0, 43823, '\P{Is_Blk=--ETHIOPIC_Extended A}', "");
Expect(1, 43823, '\P{^Is_Blk=--ETHIOPIC_Extended A}', "");
Expect(0, 43775, '\p{Is_Blk=--ETHIOPIC_Extended A}', "");
Expect(1, 43775, '\p{^Is_Blk=--ETHIOPIC_Extended A}', "");
Expect(1, 43775, '\P{Is_Blk=--ETHIOPIC_Extended A}', "");
Expect(0, 43775, '\P{^Is_Blk=--ETHIOPIC_Extended A}', "");
Error('\p{Block=-_Kanbun:=}');
Error('\P{Block=-_Kanbun:=}');
Expect(1, 12703, '\p{Block=kanbun}', "");
Expect(0, 12703, '\p{^Block=kanbun}', "");
Expect(0, 12703, '\P{Block=kanbun}', "");
Expect(1, 12703, '\P{^Block=kanbun}', "");
Expect(0, 12687, '\p{Block=kanbun}', "");
Expect(1, 12687, '\p{^Block=kanbun}', "");
Expect(1, 12687, '\P{Block=kanbun}', "");
Expect(0, 12687, '\P{^Block=kanbun}', "");
Expect(1, 12703, '\p{Block=	_Kanbun}', "");
Expect(0, 12703, '\p{^Block=	_Kanbun}', "");
Expect(0, 12703, '\P{Block=	_Kanbun}', "");
Expect(1, 12703, '\P{^Block=	_Kanbun}', "");
Expect(0, 12687, '\p{Block=	_Kanbun}', "");
Expect(1, 12687, '\p{^Block=	_Kanbun}', "");
Expect(1, 12687, '\P{Block=	_Kanbun}', "");
Expect(0, 12687, '\P{^Block=	_Kanbun}', "");
Error('\p{Blk=	/a/Kanbun}');
Error('\P{Blk=	/a/Kanbun}');
Expect(1, 12703, '\p{Blk=kanbun}', "");
Expect(0, 12703, '\p{^Blk=kanbun}', "");
Expect(0, 12703, '\P{Blk=kanbun}', "");
Expect(1, 12703, '\P{^Blk=kanbun}', "");
Expect(0, 12687, '\p{Blk=kanbun}', "");
Expect(1, 12687, '\p{^Blk=kanbun}', "");
Expect(1, 12687, '\P{Blk=kanbun}', "");
Expect(0, 12687, '\P{^Blk=kanbun}', "");
Expect(1, 12703, '\p{Blk= kanbun}', "");
Expect(0, 12703, '\p{^Blk= kanbun}', "");
Expect(0, 12703, '\P{Blk= kanbun}', "");
Expect(1, 12703, '\P{^Blk= kanbun}', "");
Expect(0, 12687, '\p{Blk= kanbun}', "");
Expect(1, 12687, '\p{^Blk= kanbun}', "");
Expect(1, 12687, '\P{Blk= kanbun}', "");
Expect(0, 12687, '\P{^Blk= kanbun}', "");
Error('\p{Is_Block= Kanbun/a/}');
Error('\P{Is_Block= Kanbun/a/}');
Expect(1, 12703, '\p{Is_Block=kanbun}', "");
Expect(0, 12703, '\p{^Is_Block=kanbun}', "");
Expect(0, 12703, '\P{Is_Block=kanbun}', "");
Expect(1, 12703, '\P{^Is_Block=kanbun}', "");
Expect(0, 12687, '\p{Is_Block=kanbun}', "");
Expect(1, 12687, '\p{^Is_Block=kanbun}', "");
Expect(1, 12687, '\P{Is_Block=kanbun}', "");
Expect(0, 12687, '\P{^Is_Block=kanbun}', "");
Expect(1, 12703, '\p{Is_Block= 	KANBUN}', "");
Expect(0, 12703, '\p{^Is_Block= 	KANBUN}', "");
Expect(0, 12703, '\P{Is_Block= 	KANBUN}', "");
Expect(1, 12703, '\P{^Is_Block= 	KANBUN}', "");
Expect(0, 12687, '\p{Is_Block= 	KANBUN}', "");
Expect(1, 12687, '\p{^Is_Block= 	KANBUN}', "");
Expect(1, 12687, '\P{Is_Block= 	KANBUN}', "");
Expect(0, 12687, '\P{^Is_Block= 	KANBUN}', "");
Error('\p{Is_Blk=:= _Kanbun}');
Error('\P{Is_Blk=:= _Kanbun}');
Expect(1, 12703, '\p{Is_Blk=kanbun}', "");
Expect(0, 12703, '\p{^Is_Blk=kanbun}', "");
Expect(0, 12703, '\P{Is_Blk=kanbun}', "");
Expect(1, 12703, '\P{^Is_Blk=kanbun}', "");
Expect(0, 12687, '\p{Is_Blk=kanbun}', "");
Expect(1, 12687, '\p{^Is_Blk=kanbun}', "");
Expect(1, 12687, '\P{Is_Blk=kanbun}', "");
Expect(0, 12687, '\P{^Is_Blk=kanbun}', "");
Expect(1, 12703, '\p{Is_Blk:	__KANBUN}', "");
Expect(0, 12703, '\p{^Is_Blk:	__KANBUN}', "");
Expect(0, 12703, '\P{Is_Blk:	__KANBUN}', "");
Expect(1, 12703, '\P{^Is_Blk:	__KANBUN}', "");
Expect(0, 12687, '\p{Is_Blk:	__KANBUN}', "");
Expect(1, 12687, '\p{^Is_Blk:	__KANBUN}', "");
Expect(1, 12687, '\P{Is_Blk:	__KANBUN}', "");
Expect(0, 12687, '\P{^Is_Blk:	__KANBUN}', "");
Error('\p{Block=/a/	 CYRILLIC-ExtendedA}');
Error('\P{Block=/a/	 CYRILLIC-ExtendedA}');
Expect(1, 11775, '\p{Block=cyrillicextendeda}', "");
Expect(0, 11775, '\p{^Block=cyrillicextendeda}', "");
Expect(0, 11775, '\P{Block=cyrillicextendeda}', "");
Expect(1, 11775, '\P{^Block=cyrillicextendeda}', "");
Expect(0, 11743, '\p{Block=cyrillicextendeda}', "");
Expect(1, 11743, '\p{^Block=cyrillicextendeda}', "");
Expect(1, 11743, '\P{Block=cyrillicextendeda}', "");
Expect(0, 11743, '\P{^Block=cyrillicextendeda}', "");
Expect(1, 11775, '\p{Block=_	CyrillicEXTENDED A}', "");
Expect(0, 11775, '\p{^Block=_	CyrillicEXTENDED A}', "");
Expect(0, 11775, '\P{Block=_	CyrillicEXTENDED A}', "");
Expect(1, 11775, '\P{^Block=_	CyrillicEXTENDED A}', "");
Expect(0, 11743, '\p{Block=_	CyrillicEXTENDED A}', "");
Expect(1, 11743, '\p{^Block=_	CyrillicEXTENDED A}', "");
Expect(1, 11743, '\P{Block=_	CyrillicEXTENDED A}', "");
Expect(0, 11743, '\P{^Block=_	CyrillicEXTENDED A}', "");
Error('\p{Blk=--CYRILLIC:=extended-A}');
Error('\P{Blk=--CYRILLIC:=extended-A}');
Expect(1, 11775, '\p{Blk=cyrillicextendeda}', "");
Expect(0, 11775, '\p{^Blk=cyrillicextendeda}', "");
Expect(0, 11775, '\P{Blk=cyrillicextendeda}', "");
Expect(1, 11775, '\P{^Blk=cyrillicextendeda}', "");
Expect(0, 11743, '\p{Blk=cyrillicextendeda}', "");
Expect(1, 11743, '\p{^Blk=cyrillicextendeda}', "");
Expect(1, 11743, '\P{Blk=cyrillicextendeda}', "");
Expect(0, 11743, '\P{^Blk=cyrillicextendeda}', "");
Expect(1, 11775, '\p{Blk=	-CYRILLIC	extendedA}', "");
Expect(0, 11775, '\p{^Blk=	-CYRILLIC	extendedA}', "");
Expect(0, 11775, '\P{Blk=	-CYRILLIC	extendedA}', "");
Expect(1, 11775, '\P{^Blk=	-CYRILLIC	extendedA}', "");
Expect(0, 11743, '\p{Blk=	-CYRILLIC	extendedA}', "");
Expect(1, 11743, '\p{^Blk=	-CYRILLIC	extendedA}', "");
Expect(1, 11743, '\P{Blk=	-CYRILLIC	extendedA}', "");
Expect(0, 11743, '\P{^Blk=	-CYRILLIC	extendedA}', "");
Error('\p{Is_Block=	 CYRILLIC_EXTENDED:=a}');
Error('\P{Is_Block=	 CYRILLIC_EXTENDED:=a}');
Expect(1, 11775, '\p{Is_Block=cyrillicextendeda}', "");
Expect(0, 11775, '\p{^Is_Block=cyrillicextendeda}', "");
Expect(0, 11775, '\P{Is_Block=cyrillicextendeda}', "");
Expect(1, 11775, '\P{^Is_Block=cyrillicextendeda}', "");
Expect(0, 11743, '\p{Is_Block=cyrillicextendeda}', "");
Expect(1, 11743, '\p{^Is_Block=cyrillicextendeda}', "");
Expect(1, 11743, '\P{Is_Block=cyrillicextendeda}', "");
Expect(0, 11743, '\P{^Is_Block=cyrillicextendeda}', "");
Expect(1, 11775, '\p{Is_Block: -CYRILLICExtended	A}', "");
Expect(0, 11775, '\p{^Is_Block: -CYRILLICExtended	A}', "");
Expect(0, 11775, '\P{Is_Block: -CYRILLICExtended	A}', "");
Expect(1, 11775, '\P{^Is_Block: -CYRILLICExtended	A}', "");
Expect(0, 11743, '\p{Is_Block: -CYRILLICExtended	A}', "");
Expect(1, 11743, '\p{^Is_Block: -CYRILLICExtended	A}', "");
Expect(1, 11743, '\P{Is_Block: -CYRILLICExtended	A}', "");
Expect(0, 11743, '\P{^Is_Block: -CYRILLICExtended	A}', "");
Error('\p{Is_Blk= -CYRILLIC EXTENDED:=A}');
Error('\P{Is_Blk= -CYRILLIC EXTENDED:=A}');
Expect(1, 11775, '\p{Is_Blk: cyrillicextendeda}', "");
Expect(0, 11775, '\p{^Is_Blk: cyrillicextendeda}', "");
Expect(0, 11775, '\P{Is_Blk: cyrillicextendeda}', "");
Expect(1, 11775, '\P{^Is_Blk: cyrillicextendeda}', "");
Expect(0, 11743, '\p{Is_Blk: cyrillicextendeda}', "");
Expect(1, 11743, '\p{^Is_Blk: cyrillicextendeda}', "");
Expect(1, 11743, '\P{Is_Blk: cyrillicextendeda}', "");
Expect(0, 11743, '\P{^Is_Blk: cyrillicextendeda}', "");
Expect(1, 11775, '\p{Is_Blk=-_cyrillicEXTENDED A}', "");
Expect(0, 11775, '\p{^Is_Blk=-_cyrillicEXTENDED A}', "");
Expect(0, 11775, '\P{Is_Blk=-_cyrillicEXTENDED A}', "");
Expect(1, 11775, '\P{^Is_Blk=-_cyrillicEXTENDED A}', "");
Expect(0, 11743, '\p{Is_Blk=-_cyrillicEXTENDED A}', "");
Expect(1, 11743, '\p{^Is_Blk=-_cyrillicEXTENDED A}', "");
Expect(1, 11743, '\P{Is_Blk=-_cyrillicEXTENDED A}', "");
Expect(0, 11743, '\P{^Is_Blk=-_cyrillicEXTENDED A}', "");
Error('\p{Block=-:=HEBREW}');
Error('\P{Block=-:=HEBREW}');
Expect(1, 1535, '\p{Block=hebrew}', "");
Expect(0, 1535, '\p{^Block=hebrew}', "");
Expect(0, 1535, '\P{Block=hebrew}', "");
Expect(1, 1535, '\P{^Block=hebrew}', "");
Expect(0, 1423, '\p{Block=hebrew}', "");
Expect(1, 1423, '\p{^Block=hebrew}', "");
Expect(1, 1423, '\P{Block=hebrew}', "");
Expect(0, 1423, '\P{^Block=hebrew}', "");
Expect(1, 1535, '\p{Block=  HEBREW}', "");
Expect(0, 1535, '\p{^Block=  HEBREW}', "");
Expect(0, 1535, '\P{Block=  HEBREW}', "");
Expect(1, 1535, '\P{^Block=  HEBREW}', "");
Expect(0, 1423, '\p{Block=  HEBREW}', "");
Expect(1, 1423, '\p{^Block=  HEBREW}', "");
Expect(1, 1423, '\P{Block=  HEBREW}', "");
Expect(0, 1423, '\P{^Block=  HEBREW}', "");
Error('\p{Blk=/a/ -HEBREW}');
Error('\P{Blk=/a/ -HEBREW}');
Expect(1, 1535, '\p{Blk=hebrew}', "");
Expect(0, 1535, '\p{^Blk=hebrew}', "");
Expect(0, 1535, '\P{Blk=hebrew}', "");
Expect(1, 1535, '\P{^Blk=hebrew}', "");
Expect(0, 1423, '\p{Blk=hebrew}', "");
Expect(1, 1423, '\p{^Blk=hebrew}', "");
Expect(1, 1423, '\P{Blk=hebrew}', "");
Expect(0, 1423, '\P{^Blk=hebrew}', "");
Expect(1, 1535, '\p{Blk=-	Hebrew}', "");
Expect(0, 1535, '\p{^Blk=-	Hebrew}', "");
Expect(0, 1535, '\P{Blk=-	Hebrew}', "");
Expect(1, 1535, '\P{^Blk=-	Hebrew}', "");
Expect(0, 1423, '\p{Blk=-	Hebrew}', "");
Expect(1, 1423, '\p{^Blk=-	Hebrew}', "");
Expect(1, 1423, '\P{Blk=-	Hebrew}', "");
Expect(0, 1423, '\P{^Blk=-	Hebrew}', "");
Error('\p{Is_Block=_Hebrew:=}');
Error('\P{Is_Block=_Hebrew:=}');
Expect(1, 1535, '\p{Is_Block=hebrew}', "");
Expect(0, 1535, '\p{^Is_Block=hebrew}', "");
Expect(0, 1535, '\P{Is_Block=hebrew}', "");
Expect(1, 1535, '\P{^Is_Block=hebrew}', "");
Expect(0, 1423, '\p{Is_Block=hebrew}', "");
Expect(1, 1423, '\p{^Is_Block=hebrew}', "");
Expect(1, 1423, '\P{Is_Block=hebrew}', "");
Expect(0, 1423, '\P{^Is_Block=hebrew}', "");
Expect(1, 1535, '\p{Is_Block:	 -hebrew}', "");
Expect(0, 1535, '\p{^Is_Block:	 -hebrew}', "");
Expect(0, 1535, '\P{Is_Block:	 -hebrew}', "");
Expect(1, 1535, '\P{^Is_Block:	 -hebrew}', "");
Expect(0, 1423, '\p{Is_Block:	 -hebrew}', "");
Expect(1, 1423, '\p{^Is_Block:	 -hebrew}', "");
Expect(1, 1423, '\P{Is_Block:	 -hebrew}', "");
Expect(0, 1423, '\P{^Is_Block:	 -hebrew}', "");
Error('\p{Is_Blk=-Hebrew/a/}');
Error('\P{Is_Blk=-Hebrew/a/}');
Expect(1, 1535, '\p{Is_Blk=hebrew}', "");
Expect(0, 1535, '\p{^Is_Blk=hebrew}', "");
Expect(0, 1535, '\P{Is_Blk=hebrew}', "");
Expect(1, 1535, '\P{^Is_Blk=hebrew}', "");
Expect(0, 1423, '\p{Is_Blk=hebrew}', "");
Expect(1, 1423, '\p{^Is_Blk=hebrew}', "");
Expect(1, 1423, '\P{Is_Blk=hebrew}', "");
Expect(0, 1423, '\P{^Is_Blk=hebrew}', "");
Expect(1, 1535, '\p{Is_Blk=_ hebrew}', "");
Expect(0, 1535, '\p{^Is_Blk=_ hebrew}', "");
Expect(0, 1535, '\P{Is_Blk=_ hebrew}', "");
Expect(1, 1535, '\P{^Is_Blk=_ hebrew}', "");
Expect(0, 1423, '\p{Is_Blk=_ hebrew}', "");
Expect(1, 1423, '\p{^Is_Blk=_ hebrew}', "");
Expect(1, 1423, '\P{Is_Blk=_ hebrew}', "");
Expect(0, 1423, '\P{^Is_Blk=_ hebrew}', "");
Error('\p{Block=/a/ 	Cyrillic}');
Error('\P{Block=/a/ 	Cyrillic}');
Expect(1, 1279, '\p{Block=cyrillic}', "");
Expect(0, 1279, '\p{^Block=cyrillic}', "");
Expect(0, 1279, '\P{Block=cyrillic}', "");
Expect(1, 1279, '\P{^Block=cyrillic}', "");
Expect(0, 1023, '\p{Block=cyrillic}', "");
Expect(1, 1023, '\p{^Block=cyrillic}', "");
Expect(1, 1023, '\P{Block=cyrillic}', "");
Expect(0, 1023, '\P{^Block=cyrillic}', "");
Expect(1, 1279, '\p{Block=- CYRILLIC}', "");
Expect(0, 1279, '\p{^Block=- CYRILLIC}', "");
Expect(0, 1279, '\P{Block=- CYRILLIC}', "");
Expect(1, 1279, '\P{^Block=- CYRILLIC}', "");
Expect(0, 1023, '\p{Block=- CYRILLIC}', "");
Expect(1, 1023, '\p{^Block=- CYRILLIC}', "");
Expect(1, 1023, '\P{Block=- CYRILLIC}', "");
Expect(0, 1023, '\P{^Block=- CYRILLIC}', "");
Error('\p{Blk=/a/- Cyrillic}');
Error('\P{Blk=/a/- Cyrillic}');
Expect(1, 1279, '\p{Blk=cyrillic}', "");
Expect(0, 1279, '\p{^Blk=cyrillic}', "");
Expect(0, 1279, '\P{Blk=cyrillic}', "");
Expect(1, 1279, '\P{^Blk=cyrillic}', "");
Expect(0, 1023, '\p{Blk=cyrillic}', "");
Expect(1, 1023, '\p{^Blk=cyrillic}', "");
Expect(1, 1023, '\P{Blk=cyrillic}', "");
Expect(0, 1023, '\P{^Blk=cyrillic}', "");
Expect(1, 1279, '\p{Blk=	 cyrillic}', "");
Expect(0, 1279, '\p{^Blk=	 cyrillic}', "");
Expect(0, 1279, '\P{Blk=	 cyrillic}', "");
Expect(1, 1279, '\P{^Blk=	 cyrillic}', "");
Expect(0, 1023, '\p{Blk=	 cyrillic}', "");
Expect(1, 1023, '\p{^Blk=	 cyrillic}', "");
Expect(1, 1023, '\P{Blk=	 cyrillic}', "");
Expect(0, 1023, '\P{^Blk=	 cyrillic}', "");
Error('\p{Is_Block=:=__CYRILLIC}');
Error('\P{Is_Block=:=__CYRILLIC}');
Expect(1, 1279, '\p{Is_Block=cyrillic}', "");
Expect(0, 1279, '\p{^Is_Block=cyrillic}', "");
Expect(0, 1279, '\P{Is_Block=cyrillic}', "");
Expect(1, 1279, '\P{^Is_Block=cyrillic}', "");
Expect(0, 1023, '\p{Is_Block=cyrillic}', "");
Expect(1, 1023, '\p{^Is_Block=cyrillic}', "");
Expect(1, 1023, '\P{Is_Block=cyrillic}', "");
Expect(0, 1023, '\P{^Is_Block=cyrillic}', "");
Expect(1, 1279, '\p{Is_Block: 		cyrillic}', "");
Expect(0, 1279, '\p{^Is_Block: 		cyrillic}', "");
Expect(0, 1279, '\P{Is_Block: 		cyrillic}', "");
Expect(1, 1279, '\P{^Is_Block: 		cyrillic}', "");
Expect(0, 1023, '\p{Is_Block: 		cyrillic}', "");
Expect(1, 1023, '\p{^Is_Block: 		cyrillic}', "");
Expect(1, 1023, '\P{Is_Block: 		cyrillic}', "");
Expect(0, 1023, '\P{^Is_Block: 		cyrillic}', "");
Error('\p{Is_Blk=	/a/cyrillic}');
Error('\P{Is_Blk=	/a/cyrillic}');
Expect(1, 1279, '\p{Is_Blk=cyrillic}', "");
Expect(0, 1279, '\p{^Is_Blk=cyrillic}', "");
Expect(0, 1279, '\P{Is_Blk=cyrillic}', "");
Expect(1, 1279, '\P{^Is_Blk=cyrillic}', "");
Expect(0, 1023, '\p{Is_Blk=cyrillic}', "");
Expect(1, 1023, '\p{^Is_Blk=cyrillic}', "");
Expect(1, 1023, '\P{Is_Blk=cyrillic}', "");
Expect(0, 1023, '\P{^Is_Blk=cyrillic}', "");
Expect(1, 1279, '\p{Is_Blk:   -_Cyrillic}', "");
Expect(0, 1279, '\p{^Is_Blk:   -_Cyrillic}', "");
Expect(0, 1279, '\P{Is_Blk:   -_Cyrillic}', "");
Expect(1, 1279, '\P{^Is_Blk:   -_Cyrillic}', "");
Expect(0, 1023, '\p{Is_Blk:   -_Cyrillic}', "");
Expect(1, 1023, '\p{^Is_Blk:   -_Cyrillic}', "");
Expect(1, 1023, '\P{Is_Blk:   -_Cyrillic}', "");
Expect(0, 1023, '\P{^Is_Blk:   -_Cyrillic}', "");
Error('\p{Block=_-latin-Extended:=a}');
Error('\P{Block=_-latin-Extended:=a}');
Expect(1, 383, '\p{Block=latinextendeda}', "");
Expect(0, 383, '\p{^Block=latinextendeda}', "");
Expect(0, 383, '\P{Block=latinextendeda}', "");
Expect(1, 383, '\P{^Block=latinextendeda}', "");
Expect(0, 255, '\p{Block=latinextendeda}', "");
Expect(1, 255, '\p{^Block=latinextendeda}', "");
Expect(1, 255, '\P{Block=latinextendeda}', "");
Expect(0, 255, '\P{^Block=latinextendeda}', "");
Expect(1, 383, '\p{Block: LATIN_EXTENDEDA}', "");
Expect(0, 383, '\p{^Block: LATIN_EXTENDEDA}', "");
Expect(0, 383, '\P{Block: LATIN_EXTENDEDA}', "");
Expect(1, 383, '\P{^Block: LATIN_EXTENDEDA}', "");
Expect(0, 255, '\p{Block: LATIN_EXTENDEDA}', "");
Expect(1, 255, '\p{^Block: LATIN_EXTENDEDA}', "");
Expect(1, 255, '\P{Block: LATIN_EXTENDEDA}', "");
Expect(0, 255, '\P{^Block: LATIN_EXTENDEDA}', "");
Error('\p{Blk=		Latin-extended/a/A}');
Error('\P{Blk=		Latin-extended/a/A}');
Expect(1, 383, '\p{Blk=latinextendeda}', "");
Expect(0, 383, '\p{^Blk=latinextendeda}', "");
Expect(0, 383, '\P{Blk=latinextendeda}', "");
Expect(1, 383, '\P{^Blk=latinextendeda}', "");
Expect(0, 255, '\p{Blk=latinextendeda}', "");
Expect(1, 255, '\p{^Blk=latinextendeda}', "");
Expect(1, 255, '\P{Blk=latinextendeda}', "");
Expect(0, 255, '\P{^Blk=latinextendeda}', "");
Expect(1, 383, '\p{Blk:   _Latin	Extended A}', "");
Expect(0, 383, '\p{^Blk:   _Latin	Extended A}', "");
Expect(0, 383, '\P{Blk:   _Latin	Extended A}', "");
Expect(1, 383, '\P{^Blk:   _Latin	Extended A}', "");
Expect(0, 255, '\p{Blk:   _Latin	Extended A}', "");
Expect(1, 255, '\p{^Blk:   _Latin	Extended A}', "");
Expect(1, 255, '\P{Blk:   _Latin	Extended A}', "");
Expect(0, 255, '\P{^Blk:   _Latin	Extended A}', "");
Error('\p{Is_Block=/a/LATIN-ExtendedA}');
Error('\P{Is_Block=/a/LATIN-ExtendedA}');
Expect(1, 383, '\p{Is_Block=latinextendeda}', "");
Expect(0, 383, '\p{^Is_Block=latinextendeda}', "");
Expect(0, 383, '\P{Is_Block=latinextendeda}', "");
Expect(1, 383, '\P{^Is_Block=latinextendeda}', "");
Expect(0, 255, '\p{Is_Block=latinextendeda}', "");
Expect(1, 255, '\p{^Is_Block=latinextendeda}', "");
Expect(1, 255, '\P{Is_Block=latinextendeda}', "");
Expect(0, 255, '\P{^Is_Block=latinextendeda}', "");
Expect(1, 383, '\p{Is_Block=-Latinextended_A}', "");
Expect(0, 383, '\p{^Is_Block=-Latinextended_A}', "");
Expect(0, 383, '\P{Is_Block=-Latinextended_A}', "");
Expect(1, 383, '\P{^Is_Block=-Latinextended_A}', "");
Expect(0, 255, '\p{Is_Block=-Latinextended_A}', "");
Expect(1, 255, '\p{^Is_Block=-Latinextended_A}', "");
Expect(1, 255, '\P{Is_Block=-Latinextended_A}', "");
Expect(0, 255, '\P{^Is_Block=-Latinextended_A}', "");
Error('\p{Is_Blk=-Latin/a/Extended	A}');
Error('\P{Is_Blk=-Latin/a/Extended	A}');
Expect(1, 383, '\p{Is_Blk=latinextendeda}', "");
Expect(0, 383, '\p{^Is_Blk=latinextendeda}', "");
Expect(0, 383, '\P{Is_Blk=latinextendeda}', "");
Expect(1, 383, '\P{^Is_Blk=latinextendeda}', "");
Expect(0, 255, '\p{Is_Blk=latinextendeda}', "");
Expect(1, 255, '\p{^Is_Blk=latinextendeda}', "");
Expect(1, 255, '\P{Is_Blk=latinextendeda}', "");
Expect(0, 255, '\P{^Is_Blk=latinextendeda}', "");
Expect(1, 383, '\p{Is_Blk= _LATIN-extended a}', "");
Expect(0, 383, '\p{^Is_Blk= _LATIN-extended a}', "");
Expect(0, 383, '\P{Is_Blk= _LATIN-extended a}', "");
Expect(1, 383, '\P{^Is_Blk= _LATIN-extended a}', "");
Expect(0, 255, '\p{Is_Blk= _LATIN-extended a}', "");
Expect(1, 255, '\p{^Is_Blk= _LATIN-extended a}', "");
Expect(1, 255, '\P{Is_Blk= _LATIN-extended a}', "");
Expect(0, 255, '\P{^Is_Blk= _LATIN-extended a}', "");
Error('\p{Block= :=Balinese}');
Error('\P{Block= :=Balinese}');
Expect(1, 7039, '\p{Block=balinese}', "");
Expect(0, 7039, '\p{^Block=balinese}', "");
Expect(0, 7039, '\P{Block=balinese}', "");
Expect(1, 7039, '\P{^Block=balinese}', "");
Expect(0, 6911, '\p{Block=balinese}', "");
Expect(1, 6911, '\p{^Block=balinese}', "");
Expect(1, 6911, '\P{Block=balinese}', "");
Expect(0, 6911, '\P{^Block=balinese}', "");
Expect(1, 7039, '\p{Block=-_BALINESE}', "");
Expect(0, 7039, '\p{^Block=-_BALINESE}', "");
Expect(0, 7039, '\P{Block=-_BALINESE}', "");
Expect(1, 7039, '\P{^Block=-_BALINESE}', "");
Expect(0, 6911, '\p{Block=-_BALINESE}', "");
Expect(1, 6911, '\p{^Block=-_BALINESE}', "");
Expect(1, 6911, '\P{Block=-_BALINESE}', "");
Expect(0, 6911, '\P{^Block=-_BALINESE}', "");
Error('\p{Blk: /a/Balinese}');
Error('\P{Blk: /a/Balinese}');
Expect(1, 7039, '\p{Blk=balinese}', "");
Expect(0, 7039, '\p{^Blk=balinese}', "");
Expect(0, 7039, '\P{Blk=balinese}', "");
Expect(1, 7039, '\P{^Blk=balinese}', "");
Expect(0, 6911, '\p{Blk=balinese}', "");
Expect(1, 6911, '\p{^Blk=balinese}', "");
Expect(1, 6911, '\P{Blk=balinese}', "");
Expect(0, 6911, '\P{^Blk=balinese}', "");
Expect(1, 7039, '\p{Blk:   		BALINESE}', "");
Expect(0, 7039, '\p{^Blk:   		BALINESE}', "");
Expect(0, 7039, '\P{Blk:   		BALINESE}', "");
Expect(1, 7039, '\P{^Blk:   		BALINESE}', "");
Expect(0, 6911, '\p{Blk:   		BALINESE}', "");
Expect(1, 6911, '\p{^Blk:   		BALINESE}', "");
Expect(1, 6911, '\P{Blk:   		BALINESE}', "");
Expect(0, 6911, '\P{^Blk:   		BALINESE}', "");
Error('\p{Is_Block=/a/-	balinese}');
Error('\P{Is_Block=/a/-	balinese}');
Expect(1, 7039, '\p{Is_Block=balinese}', "");
Expect(0, 7039, '\p{^Is_Block=balinese}', "");
Expect(0, 7039, '\P{Is_Block=balinese}', "");
Expect(1, 7039, '\P{^Is_Block=balinese}', "");
Expect(0, 6911, '\p{Is_Block=balinese}', "");
Expect(1, 6911, '\p{^Is_Block=balinese}', "");
Expect(1, 6911, '\P{Is_Block=balinese}', "");
Expect(0, 6911, '\P{^Is_Block=balinese}', "");
Expect(1, 7039, '\p{Is_Block=-BALINESE}', "");
Expect(0, 7039, '\p{^Is_Block=-BALINESE}', "");
Expect(0, 7039, '\P{Is_Block=-BALINESE}', "");
Expect(1, 7039, '\P{^Is_Block=-BALINESE}', "");
Expect(0, 6911, '\p{Is_Block=-BALINESE}', "");
Expect(1, 6911, '\p{^Is_Block=-BALINESE}', "");
Expect(1, 6911, '\P{Is_Block=-BALINESE}', "");
Expect(0, 6911, '\P{^Is_Block=-BALINESE}', "");
Error('\p{Is_Blk=:=	balinese}');
Error('\P{Is_Blk=:=	balinese}');
Expect(1, 7039, '\p{Is_Blk=balinese}', "");
Expect(0, 7039, '\p{^Is_Blk=balinese}', "");
Expect(0, 7039, '\P{Is_Blk=balinese}', "");
Expect(1, 7039, '\P{^Is_Blk=balinese}', "");
Expect(0, 6911, '\p{Is_Blk=balinese}', "");
Expect(1, 6911, '\p{^Is_Blk=balinese}', "");
Expect(1, 6911, '\P{Is_Blk=balinese}', "");
Expect(0, 6911, '\P{^Is_Blk=balinese}', "");
Expect(1, 7039, '\p{Is_Blk=_-Balinese}', "");
Expect(0, 7039, '\p{^Is_Blk=_-Balinese}', "");
Expect(0, 7039, '\P{Is_Blk=_-Balinese}', "");
Expect(1, 7039, '\P{^Is_Blk=_-Balinese}', "");
Expect(0, 6911, '\p{Is_Blk=_-Balinese}', "");
Expect(1, 6911, '\p{^Is_Blk=_-Balinese}', "");
Expect(1, 6911, '\P{Is_Blk=_-Balinese}', "");
Expect(0, 6911, '\P{^Is_Blk=_-Balinese}', "");
Error('\p{Block:	:=	avestan}');
Error('\P{Block:	:=	avestan}');
Expect(1, 68415, '\p{Block=avestan}', "");
Expect(0, 68415, '\p{^Block=avestan}', "");
Expect(0, 68415, '\P{Block=avestan}', "");
Expect(1, 68415, '\P{^Block=avestan}', "");
Expect(0, 68351, '\p{Block=avestan}', "");
Expect(1, 68351, '\p{^Block=avestan}', "");
Expect(1, 68351, '\P{Block=avestan}', "");
Expect(0, 68351, '\P{^Block=avestan}', "");
Expect(1, 68415, '\p{Block=_avestan}', "");
Expect(0, 68415, '\p{^Block=_avestan}', "");
Expect(0, 68415, '\P{Block=_avestan}', "");
Expect(1, 68415, '\P{^Block=_avestan}', "");
Expect(0, 68351, '\p{Block=_avestan}', "");
Expect(1, 68351, '\p{^Block=_avestan}', "");
Expect(1, 68351, '\P{Block=_avestan}', "");
Expect(0, 68351, '\P{^Block=_avestan}', "");
Error('\p{Blk= -avestan/a/}');
Error('\P{Blk= -avestan/a/}');
Expect(1, 68415, '\p{Blk=avestan}', "");
Expect(0, 68415, '\p{^Blk=avestan}', "");
Expect(0, 68415, '\P{Blk=avestan}', "");
Expect(1, 68415, '\P{^Blk=avestan}', "");
Expect(0, 68351, '\p{Blk=avestan}', "");
Expect(1, 68351, '\p{^Blk=avestan}', "");
Expect(1, 68351, '\P{Blk=avestan}', "");
Expect(0, 68351, '\P{^Blk=avestan}', "");
Expect(1, 68415, '\p{Blk= _Avestan}', "");
Expect(0, 68415, '\p{^Blk= _Avestan}', "");
Expect(0, 68415, '\P{Blk= _Avestan}', "");
Expect(1, 68415, '\P{^Blk= _Avestan}', "");
Expect(0, 68351, '\p{Blk= _Avestan}', "");
Expect(1, 68351, '\p{^Blk= _Avestan}', "");
Expect(1, 68351, '\P{Blk= _Avestan}', "");
Expect(0, 68351, '\P{^Blk= _Avestan}', "");
Error('\p{Is_Block=/a/ 	Avestan}');
Error('\P{Is_Block=/a/ 	Avestan}');
Expect(1, 68415, '\p{Is_Block=avestan}', "");
Expect(0, 68415, '\p{^Is_Block=avestan}', "");
Expect(0, 68415, '\P{Is_Block=avestan}', "");
Expect(1, 68415, '\P{^Is_Block=avestan}', "");
Expect(0, 68351, '\p{Is_Block=avestan}', "");
Expect(1, 68351, '\p{^Is_Block=avestan}', "");
Expect(1, 68351, '\P{Is_Block=avestan}', "");
Expect(0, 68351, '\P{^Is_Block=avestan}', "");
Expect(1, 68415, '\p{Is_Block=_avestan}', "");
Expect(0, 68415, '\p{^Is_Block=_avestan}', "");
Expect(0, 68415, '\P{Is_Block=_avestan}', "");
Expect(1, 68415, '\P{^Is_Block=_avestan}', "");
Expect(0, 68351, '\p{Is_Block=_avestan}', "");
Expect(1, 68351, '\p{^Is_Block=_avestan}', "");
Expect(1, 68351, '\P{Is_Block=_avestan}', "");
Expect(0, 68351, '\P{^Is_Block=_avestan}', "");
Error('\p{Is_Blk: _AVESTAN:=}');
Error('\P{Is_Blk: _AVESTAN:=}');
Expect(1, 68415, '\p{Is_Blk=avestan}', "");
Expect(0, 68415, '\p{^Is_Blk=avestan}', "");
Expect(0, 68415, '\P{Is_Blk=avestan}', "");
Expect(1, 68415, '\P{^Is_Blk=avestan}', "");
Expect(0, 68351, '\p{Is_Blk=avestan}', "");
Expect(1, 68351, '\p{^Is_Blk=avestan}', "");
Expect(1, 68351, '\P{Is_Blk=avestan}', "");
Expect(0, 68351, '\P{^Is_Blk=avestan}', "");
Expect(1, 68415, '\p{Is_Blk= avestan}', "");
Expect(0, 68415, '\p{^Is_Blk= avestan}', "");
Expect(0, 68415, '\P{Is_Blk= avestan}', "");
Expect(1, 68415, '\P{^Is_Blk= avestan}', "");
Expect(0, 68351, '\p{Is_Blk= avestan}', "");
Expect(1, 68351, '\p{^Is_Blk= avestan}', "");
Expect(1, 68351, '\P{Is_Blk= avestan}', "");
Expect(0, 68351, '\P{^Is_Blk= avestan}', "");
Error('\p{Block=/a/  myanmarEXTENDED-A}');
Error('\P{Block=/a/  myanmarEXTENDED-A}');
Expect(1, 43647, '\p{Block=myanmarextendeda}', "");
Expect(0, 43647, '\p{^Block=myanmarextendeda}', "");
Expect(0, 43647, '\P{Block=myanmarextendeda}', "");
Expect(1, 43647, '\P{^Block=myanmarextendeda}', "");
Expect(0, 43615, '\p{Block=myanmarextendeda}', "");
Expect(1, 43615, '\p{^Block=myanmarextendeda}', "");
Expect(1, 43615, '\P{Block=myanmarextendeda}', "");
Expect(0, 43615, '\P{^Block=myanmarextendeda}', "");
Expect(1, 43647, '\p{Block=	 MYANMAR Extended-A}', "");
Expect(0, 43647, '\p{^Block=	 MYANMAR Extended-A}', "");
Expect(0, 43647, '\P{Block=	 MYANMAR Extended-A}', "");
Expect(1, 43647, '\P{^Block=	 MYANMAR Extended-A}', "");
Expect(0, 43615, '\p{Block=	 MYANMAR Extended-A}', "");
Expect(1, 43615, '\p{^Block=	 MYANMAR Extended-A}', "");
Expect(1, 43615, '\P{Block=	 MYANMAR Extended-A}', "");
Expect(0, 43615, '\P{^Block=	 MYANMAR Extended-A}', "");
Error('\p{Blk=-myanmar_extended-a:=}');
Error('\P{Blk=-myanmar_extended-a:=}');
Expect(1, 43647, '\p{Blk=myanmarextendeda}', "");
Expect(0, 43647, '\p{^Blk=myanmarextendeda}', "");
Expect(0, 43647, '\P{Blk=myanmarextendeda}', "");
Expect(1, 43647, '\P{^Blk=myanmarextendeda}', "");
Expect(0, 43615, '\p{Blk=myanmarextendeda}', "");
Expect(1, 43615, '\p{^Blk=myanmarextendeda}', "");
Expect(1, 43615, '\P{Blk=myanmarextendeda}', "");
Expect(0, 43615, '\P{^Blk=myanmarextendeda}', "");
Expect(1, 43647, '\p{Blk:_MYANMAR_EXTENDED-A}', "");
Expect(0, 43647, '\p{^Blk:_MYANMAR_EXTENDED-A}', "");
Expect(0, 43647, '\P{Blk:_MYANMAR_EXTENDED-A}', "");
Expect(1, 43647, '\P{^Blk:_MYANMAR_EXTENDED-A}', "");
Expect(0, 43615, '\p{Blk:_MYANMAR_EXTENDED-A}', "");
Expect(1, 43615, '\p{^Blk:_MYANMAR_EXTENDED-A}', "");
Expect(1, 43615, '\P{Blk:_MYANMAR_EXTENDED-A}', "");
Expect(0, 43615, '\P{^Blk:_MYANMAR_EXTENDED-A}', "");
Error('\p{Is_Block: -:=Myanmar-Extended-a}');
Error('\P{Is_Block: -:=Myanmar-Extended-a}');
Expect(1, 43647, '\p{Is_Block:	myanmarextendeda}', "");
Expect(0, 43647, '\p{^Is_Block:	myanmarextendeda}', "");
Expect(0, 43647, '\P{Is_Block:	myanmarextendeda}', "");
Expect(1, 43647, '\P{^Is_Block:	myanmarextendeda}', "");
Expect(0, 43615, '\p{Is_Block:	myanmarextendeda}', "");
Expect(1, 43615, '\p{^Is_Block:	myanmarextendeda}', "");
Expect(1, 43615, '\P{Is_Block:	myanmarextendeda}', "");
Expect(0, 43615, '\P{^Is_Block:	myanmarextendeda}', "");
Expect(1, 43647, '\p{Is_Block=-Myanmar-EXTENDED-A}', "");
Expect(0, 43647, '\p{^Is_Block=-Myanmar-EXTENDED-A}', "");
Expect(0, 43647, '\P{Is_Block=-Myanmar-EXTENDED-A}', "");
Expect(1, 43647, '\P{^Is_Block=-Myanmar-EXTENDED-A}', "");
Expect(0, 43615, '\p{Is_Block=-Myanmar-EXTENDED-A}', "");
Expect(1, 43615, '\p{^Is_Block=-Myanmar-EXTENDED-A}', "");
Expect(1, 43615, '\P{Is_Block=-Myanmar-EXTENDED-A}', "");
Expect(0, 43615, '\P{^Is_Block=-Myanmar-EXTENDED-A}', "");
Error('\p{Is_Blk=  MYANMAR/a/extended-a}');
Error('\P{Is_Blk=  MYANMAR/a/extended-a}');
Expect(1, 43647, '\p{Is_Blk=myanmarextendeda}', "");
Expect(0, 43647, '\p{^Is_Blk=myanmarextendeda}', "");
Expect(0, 43647, '\P{Is_Blk=myanmarextendeda}', "");
Expect(1, 43647, '\P{^Is_Blk=myanmarextendeda}', "");
Expect(0, 43615, '\p{Is_Blk=myanmarextendeda}', "");
Expect(1, 43615, '\p{^Is_Blk=myanmarextendeda}', "");
Expect(1, 43615, '\P{Is_Blk=myanmarextendeda}', "");
Expect(0, 43615, '\P{^Is_Blk=myanmarextendeda}', "");
Expect(1, 43647, '\p{Is_Blk=-_MYANMARExtendedA}', "");
Expect(0, 43647, '\p{^Is_Blk=-_MYANMARExtendedA}', "");
Expect(0, 43647, '\P{Is_Blk=-_MYANMARExtendedA}', "");
Expect(1, 43647, '\P{^Is_Blk=-_MYANMARExtendedA}', "");
Expect(0, 43615, '\p{Is_Blk=-_MYANMARExtendedA}', "");
Expect(1, 43615, '\p{^Is_Blk=-_MYANMARExtendedA}', "");
Expect(1, 43615, '\P{Is_Blk=-_MYANMARExtendedA}', "");
Expect(0, 43615, '\P{^Is_Blk=-_MYANMARExtendedA}', "");
Error('\p{Block=	COUNTING_Rod:=Numerals}');
Error('\P{Block=	COUNTING_Rod:=Numerals}');
Expect(1, 119679, '\p{Block=countingrodnumerals}', "");
Expect(0, 119679, '\p{^Block=countingrodnumerals}', "");
Expect(0, 119679, '\P{Block=countingrodnumerals}', "");
Expect(1, 119679, '\P{^Block=countingrodnumerals}', "");
Expect(0, 119647, '\p{Block=countingrodnumerals}', "");
Expect(1, 119647, '\p{^Block=countingrodnumerals}', "");
Expect(1, 119647, '\P{Block=countingrodnumerals}', "");
Expect(0, 119647, '\P{^Block=countingrodnumerals}', "");
Expect(1, 119679, '\p{Block=	COUNTING rod	NUMERALS}', "");
Expect(0, 119679, '\p{^Block=	COUNTING rod	NUMERALS}', "");
Expect(0, 119679, '\P{Block=	COUNTING rod	NUMERALS}', "");
Expect(1, 119679, '\P{^Block=	COUNTING rod	NUMERALS}', "");
Expect(0, 119647, '\p{Block=	COUNTING rod	NUMERALS}', "");
Expect(1, 119647, '\p{^Block=	COUNTING rod	NUMERALS}', "");
Expect(1, 119647, '\P{Block=	COUNTING rod	NUMERALS}', "");
Expect(0, 119647, '\P{^Block=	COUNTING rod	NUMERALS}', "");
Error('\p{Blk=/a/-COUNTING rod Numerals}');
Error('\P{Blk=/a/-COUNTING rod Numerals}');
Expect(1, 119679, '\p{Blk=countingrodnumerals}', "");
Expect(0, 119679, '\p{^Blk=countingrodnumerals}', "");
Expect(0, 119679, '\P{Blk=countingrodnumerals}', "");
Expect(1, 119679, '\P{^Blk=countingrodnumerals}', "");
Expect(0, 119647, '\p{Blk=countingrodnumerals}', "");
Expect(1, 119647, '\p{^Blk=countingrodnumerals}', "");
Expect(1, 119647, '\P{Blk=countingrodnumerals}', "");
Expect(0, 119647, '\P{^Blk=countingrodnumerals}', "");
Expect(1, 119679, '\p{Blk=	-COUNTINGRod	Numerals}', "");
Expect(0, 119679, '\p{^Blk=	-COUNTINGRod	Numerals}', "");
Expect(0, 119679, '\P{Blk=	-COUNTINGRod	Numerals}', "");
Expect(1, 119679, '\P{^Blk=	-COUNTINGRod	Numerals}', "");
Expect(0, 119647, '\p{Blk=	-COUNTINGRod	Numerals}', "");
Expect(1, 119647, '\p{^Blk=	-COUNTINGRod	Numerals}', "");
Expect(1, 119647, '\P{Blk=	-COUNTINGRod	Numerals}', "");
Expect(0, 119647, '\P{^Blk=	-COUNTINGRod	Numerals}', "");
Error('\p{Is_Block=/a/COUNTING	rod_NUMERALS}');
Error('\P{Is_Block=/a/COUNTING	rod_NUMERALS}');
Expect(1, 119679, '\p{Is_Block=countingrodnumerals}', "");
Expect(0, 119679, '\p{^Is_Block=countingrodnumerals}', "");
Expect(0, 119679, '\P{Is_Block=countingrodnumerals}', "");
Expect(1, 119679, '\P{^Is_Block=countingrodnumerals}', "");
Expect(0, 119647, '\p{Is_Block=countingrodnumerals}', "");
Expect(1, 119647, '\p{^Is_Block=countingrodnumerals}', "");
Expect(1, 119647, '\P{Is_Block=countingrodnumerals}', "");
Expect(0, 119647, '\P{^Is_Block=countingrodnumerals}', "");
Expect(1, 119679, '\p{Is_Block: 	Counting	Rod	Numerals}', "");
Expect(0, 119679, '\p{^Is_Block: 	Counting	Rod	Numerals}', "");
Expect(0, 119679, '\P{Is_Block: 	Counting	Rod	Numerals}', "");
Expect(1, 119679, '\P{^Is_Block: 	Counting	Rod	Numerals}', "");
Expect(0, 119647, '\p{Is_Block: 	Counting	Rod	Numerals}', "");
Expect(1, 119647, '\p{^Is_Block: 	Counting	Rod	Numerals}', "");
Expect(1, 119647, '\P{Is_Block: 	Counting	Rod	Numerals}', "");
Expect(0, 119647, '\P{^Is_Block: 	Counting	Rod	Numerals}', "");
Error('\p{Is_Blk= 	Counting_rod/a/Numerals}');
Error('\P{Is_Blk= 	Counting_rod/a/Numerals}');
Expect(1, 119679, '\p{Is_Blk=countingrodnumerals}', "");
Expect(0, 119679, '\p{^Is_Blk=countingrodnumerals}', "");
Expect(0, 119679, '\P{Is_Blk=countingrodnumerals}', "");
Expect(1, 119679, '\P{^Is_Blk=countingrodnumerals}', "");
Expect(0, 119647, '\p{Is_Blk=countingrodnumerals}', "");
Expect(1, 119647, '\p{^Is_Blk=countingrodnumerals}', "");
Expect(1, 119647, '\P{Is_Blk=countingrodnumerals}', "");
Expect(0, 119647, '\P{^Is_Blk=countingrodnumerals}', "");
Expect(1, 119679, '\p{Is_Blk=- Counting_RodNumerals}', "");
Expect(0, 119679, '\p{^Is_Blk=- Counting_RodNumerals}', "");
Expect(0, 119679, '\P{Is_Blk=- Counting_RodNumerals}', "");
Expect(1, 119679, '\P{^Is_Blk=- Counting_RodNumerals}', "");
Expect(0, 119647, '\p{Is_Blk=- Counting_RodNumerals}', "");
Expect(1, 119647, '\p{^Is_Blk=- Counting_RodNumerals}', "");
Expect(1, 119647, '\P{Is_Blk=- Counting_RodNumerals}', "");
Expect(0, 119647, '\P{^Is_Blk=- Counting_RodNumerals}', "");
Error('\p{Block=_/a/ByzantinemusicalSYMBOLS}');
Error('\P{Block=_/a/ByzantinemusicalSYMBOLS}');
Expect(1, 119039, '\p{Block=byzantinemusicalsymbols}', "");
Expect(0, 119039, '\p{^Block=byzantinemusicalsymbols}', "");
Expect(0, 119039, '\P{Block=byzantinemusicalsymbols}', "");
Expect(1, 119039, '\P{^Block=byzantinemusicalsymbols}', "");
Expect(0, 118783, '\p{Block=byzantinemusicalsymbols}', "");
Expect(1, 118783, '\p{^Block=byzantinemusicalsymbols}', "");
Expect(1, 118783, '\P{Block=byzantinemusicalsymbols}', "");
Expect(0, 118783, '\P{^Block=byzantinemusicalsymbols}', "");
Expect(1, 119039, '\p{Block=-_Byzantine MUSICAL-SYMBOLS}', "");
Expect(0, 119039, '\p{^Block=-_Byzantine MUSICAL-SYMBOLS}', "");
Expect(0, 119039, '\P{Block=-_Byzantine MUSICAL-SYMBOLS}', "");
Expect(1, 119039, '\P{^Block=-_Byzantine MUSICAL-SYMBOLS}', "");
Expect(0, 118783, '\p{Block=-_Byzantine MUSICAL-SYMBOLS}', "");
Expect(1, 118783, '\p{^Block=-_Byzantine MUSICAL-SYMBOLS}', "");
Expect(1, 118783, '\P{Block=-_Byzantine MUSICAL-SYMBOLS}', "");
Expect(0, 118783, '\P{^Block=-_Byzantine MUSICAL-SYMBOLS}', "");
Error('\p{Blk=		Byzantine Musical/a/SYMBOLS}');
Error('\P{Blk=		Byzantine Musical/a/SYMBOLS}');
Expect(1, 119039, '\p{Blk=byzantinemusicalsymbols}', "");
Expect(0, 119039, '\p{^Blk=byzantinemusicalsymbols}', "");
Expect(0, 119039, '\P{Blk=byzantinemusicalsymbols}', "");
Expect(1, 119039, '\P{^Blk=byzantinemusicalsymbols}', "");
Expect(0, 118783, '\p{Blk=byzantinemusicalsymbols}', "");
Expect(1, 118783, '\p{^Blk=byzantinemusicalsymbols}', "");
Expect(1, 118783, '\P{Blk=byzantinemusicalsymbols}', "");
Expect(0, 118783, '\P{^Blk=byzantinemusicalsymbols}', "");
Expect(1, 119039, '\p{Blk=  byzantine-musicalsymbols}', "");
Expect(0, 119039, '\p{^Blk=  byzantine-musicalsymbols}', "");
Expect(0, 119039, '\P{Blk=  byzantine-musicalsymbols}', "");
Expect(1, 119039, '\P{^Blk=  byzantine-musicalsymbols}', "");
Expect(0, 118783, '\p{Blk=  byzantine-musicalsymbols}', "");
Expect(1, 118783, '\p{^Blk=  byzantine-musicalsymbols}', "");
Expect(1, 118783, '\P{Blk=  byzantine-musicalsymbols}', "");
Expect(0, 118783, '\P{^Blk=  byzantine-musicalsymbols}', "");
Error('\p{Is_Block=	/a/byzantine	MUSICAL-SYMBOLS}');
Error('\P{Is_Block=	/a/byzantine	MUSICAL-SYMBOLS}');
Expect(1, 119039, '\p{Is_Block:byzantinemusicalsymbols}', "");
Expect(0, 119039, '\p{^Is_Block:byzantinemusicalsymbols}', "");
Expect(0, 119039, '\P{Is_Block:byzantinemusicalsymbols}', "");
Expect(1, 119039, '\P{^Is_Block:byzantinemusicalsymbols}', "");
Expect(0, 118783, '\p{Is_Block:byzantinemusicalsymbols}', "");
Expect(1, 118783, '\p{^Is_Block:byzantinemusicalsymbols}', "");
Expect(1, 118783, '\P{Is_Block:byzantinemusicalsymbols}', "");
Expect(0, 118783, '\P{^Is_Block:byzantinemusicalsymbols}', "");
Expect(1, 119039, '\p{Is_Block=	 BYZANTINE Musical-SYMBOLS}', "");
Expect(0, 119039, '\p{^Is_Block=	 BYZANTINE Musical-SYMBOLS}', "");
Expect(0, 119039, '\P{Is_Block=	 BYZANTINE Musical-SYMBOLS}', "");
Expect(1, 119039, '\P{^Is_Block=	 BYZANTINE Musical-SYMBOLS}', "");
Expect(0, 118783, '\p{Is_Block=	 BYZANTINE Musical-SYMBOLS}', "");
Expect(1, 118783, '\p{^Is_Block=	 BYZANTINE Musical-SYMBOLS}', "");
Expect(1, 118783, '\P{Is_Block=	 BYZANTINE Musical-SYMBOLS}', "");
Expect(0, 118783, '\P{^Is_Block=	 BYZANTINE Musical-SYMBOLS}', "");
Error('\p{Is_Blk=-	ByzantineMusical:=symbols}');
Error('\P{Is_Blk=-	ByzantineMusical:=symbols}');
Expect(1, 119039, '\p{Is_Blk=byzantinemusicalsymbols}', "");
Expect(0, 119039, '\p{^Is_Blk=byzantinemusicalsymbols}', "");
Expect(0, 119039, '\P{Is_Blk=byzantinemusicalsymbols}', "");
Expect(1, 119039, '\P{^Is_Blk=byzantinemusicalsymbols}', "");
Expect(0, 118783, '\p{Is_Blk=byzantinemusicalsymbols}', "");
Expect(1, 118783, '\p{^Is_Blk=byzantinemusicalsymbols}', "");
Expect(1, 118783, '\P{Is_Blk=byzantinemusicalsymbols}', "");
Expect(0, 118783, '\P{^Is_Blk=byzantinemusicalsymbols}', "");
Expect(1, 119039, '\p{Is_Blk=_-BYZANTINEMusical symbols}', "");
Expect(0, 119039, '\p{^Is_Blk=_-BYZANTINEMusical symbols}', "");
Expect(0, 119039, '\P{Is_Blk=_-BYZANTINEMusical symbols}', "");
Expect(1, 119039, '\P{^Is_Blk=_-BYZANTINEMusical symbols}', "");
Expect(0, 118783, '\p{Is_Blk=_-BYZANTINEMusical symbols}', "");
Expect(1, 118783, '\p{^Is_Blk=_-BYZANTINEMusical symbols}', "");
Expect(1, 118783, '\P{Is_Blk=_-BYZANTINEMusical symbols}', "");
Expect(0, 118783, '\P{^Is_Blk=_-BYZANTINEMusical symbols}', "");
Error('\p{Block=tamil:=}');
Error('\P{Block=tamil:=}');
Expect(1, 3071, '\p{Block=tamil}', "");
Expect(0, 3071, '\p{^Block=tamil}', "");
Expect(0, 3071, '\P{Block=tamil}', "");
Expect(1, 3071, '\P{^Block=tamil}', "");
Expect(0, 2943, '\p{Block=tamil}', "");
Expect(1, 2943, '\p{^Block=tamil}', "");
Expect(1, 2943, '\P{Block=tamil}', "");
Expect(0, 2943, '\P{^Block=tamil}', "");
Expect(1, 3071, '\p{Block=-	Tamil}', "");
Expect(0, 3071, '\p{^Block=-	Tamil}', "");
Expect(0, 3071, '\P{Block=-	Tamil}', "");
Expect(1, 3071, '\P{^Block=-	Tamil}', "");
Expect(0, 2943, '\p{Block=-	Tamil}', "");
Expect(1, 2943, '\p{^Block=-	Tamil}', "");
Expect(1, 2943, '\P{Block=-	Tamil}', "");
Expect(0, 2943, '\P{^Block=-	Tamil}', "");
Error('\p{Blk=-/a/TAMIL}');
Error('\P{Blk=-/a/TAMIL}');
Expect(1, 3071, '\p{Blk:tamil}', "");
Expect(0, 3071, '\p{^Blk:tamil}', "");
Expect(0, 3071, '\P{Blk:tamil}', "");
Expect(1, 3071, '\P{^Blk:tamil}', "");
Expect(0, 2943, '\p{Blk:tamil}', "");
Expect(1, 2943, '\p{^Blk:tamil}', "");
Expect(1, 2943, '\P{Blk:tamil}', "");
Expect(0, 2943, '\P{^Blk:tamil}', "");
Expect(1, 3071, '\p{Blk=-TAMIL}', "");
Expect(0, 3071, '\p{^Blk=-TAMIL}', "");
Expect(0, 3071, '\P{Blk=-TAMIL}', "");
Expect(1, 3071, '\P{^Blk=-TAMIL}', "");
Expect(0, 2943, '\p{Blk=-TAMIL}', "");
Expect(1, 2943, '\p{^Blk=-TAMIL}', "");
Expect(1, 2943, '\P{Blk=-TAMIL}', "");
Expect(0, 2943, '\P{^Blk=-TAMIL}', "");
Error('\p{Is_Block=Tamil:=}');
Error('\P{Is_Block=Tamil:=}');
Expect(1, 3071, '\p{Is_Block=tamil}', "");
Expect(0, 3071, '\p{^Is_Block=tamil}', "");
Expect(0, 3071, '\P{Is_Block=tamil}', "");
Expect(1, 3071, '\P{^Is_Block=tamil}', "");
Expect(0, 2943, '\p{Is_Block=tamil}', "");
Expect(1, 2943, '\p{^Is_Block=tamil}', "");
Expect(1, 2943, '\P{Is_Block=tamil}', "");
Expect(0, 2943, '\P{^Is_Block=tamil}', "");
Expect(1, 3071, '\p{Is_Block= 	tamil}', "");
Expect(0, 3071, '\p{^Is_Block= 	tamil}', "");
Expect(0, 3071, '\P{Is_Block= 	tamil}', "");
Expect(1, 3071, '\P{^Is_Block= 	tamil}', "");
Expect(0, 2943, '\p{Is_Block= 	tamil}', "");
Expect(1, 2943, '\p{^Is_Block= 	tamil}', "");
Expect(1, 2943, '\P{Is_Block= 	tamil}', "");
Expect(0, 2943, '\P{^Is_Block= 	tamil}', "");
Error('\p{Is_Blk=-Tamil/a/}');
Error('\P{Is_Blk=-Tamil/a/}');
Expect(1, 3071, '\p{Is_Blk=tamil}', "");
Expect(0, 3071, '\p{^Is_Blk=tamil}', "");
Expect(0, 3071, '\P{Is_Blk=tamil}', "");
Expect(1, 3071, '\P{^Is_Blk=tamil}', "");
Expect(0, 2943, '\p{Is_Blk=tamil}', "");
Expect(1, 2943, '\p{^Is_Blk=tamil}', "");
Expect(1, 2943, '\P{Is_Blk=tamil}', "");
Expect(0, 2943, '\P{^Is_Blk=tamil}', "");
Expect(1, 3071, '\p{Is_Blk= 	tamil}', "");
Expect(0, 3071, '\p{^Is_Blk= 	tamil}', "");
Expect(0, 3071, '\P{Is_Blk= 	tamil}', "");
Expect(1, 3071, '\P{^Is_Blk= 	tamil}', "");
Expect(0, 2943, '\p{Is_Blk= 	tamil}', "");
Expect(1, 2943, '\p{^Is_Blk= 	tamil}', "");
Expect(1, 2943, '\P{Is_Blk= 	tamil}', "");
Expect(0, 2943, '\P{^Is_Blk= 	tamil}', "");
Error('\p{Block=/a/specials}');
Error('\P{Block=/a/specials}');
Expect(1, 65520, '\p{Block=specials}', "");
Expect(0, 65520, '\p{^Block=specials}', "");
Expect(0, 65520, '\P{Block=specials}', "");
Expect(1, 65520, '\P{^Block=specials}', "");
Expect(0, 65519, '\p{Block=specials}', "");
Expect(1, 65519, '\p{^Block=specials}', "");
Expect(1, 65519, '\P{Block=specials}', "");
Expect(0, 65519, '\P{^Block=specials}', "");
Expect(1, 65520, '\p{Block=		Specials}', "");
Expect(0, 65520, '\p{^Block=		Specials}', "");
Expect(0, 65520, '\P{Block=		Specials}', "");
Expect(1, 65520, '\P{^Block=		Specials}', "");
Expect(0, 65519, '\p{Block=		Specials}', "");
Expect(1, 65519, '\p{^Block=		Specials}', "");
Expect(1, 65519, '\P{Block=		Specials}', "");
Expect(0, 65519, '\P{^Block=		Specials}', "");
Error('\p{Blk=	:=specials}');
Error('\P{Blk=	:=specials}');
Expect(1, 65520, '\p{Blk=specials}', "");
Expect(0, 65520, '\p{^Blk=specials}', "");
Expect(0, 65520, '\P{Blk=specials}', "");
Expect(1, 65520, '\P{^Blk=specials}', "");
Expect(0, 65519, '\p{Blk=specials}', "");
Expect(1, 65519, '\p{^Blk=specials}', "");
Expect(1, 65519, '\P{Blk=specials}', "");
Expect(0, 65519, '\P{^Blk=specials}', "");
Expect(1, 65520, '\p{Blk=_specials}', "");
Expect(0, 65520, '\p{^Blk=_specials}', "");
Expect(0, 65520, '\P{Blk=_specials}', "");
Expect(1, 65520, '\P{^Blk=_specials}', "");
Expect(0, 65519, '\p{Blk=_specials}', "");
Expect(1, 65519, '\p{^Blk=_specials}', "");
Expect(1, 65519, '\P{Blk=_specials}', "");
Expect(0, 65519, '\P{^Blk=_specials}', "");
Error('\p{Is_Block=	 specials:=}');
Error('\P{Is_Block=	 specials:=}');
Expect(1, 65520, '\p{Is_Block=specials}', "");
Expect(0, 65520, '\p{^Is_Block=specials}', "");
Expect(0, 65520, '\P{Is_Block=specials}', "");
Expect(1, 65520, '\P{^Is_Block=specials}', "");
Expect(0, 65519, '\p{Is_Block=specials}', "");
Expect(1, 65519, '\p{^Is_Block=specials}', "");
Expect(1, 65519, '\P{Is_Block=specials}', "");
Expect(0, 65519, '\P{^Is_Block=specials}', "");
Expect(1, 65520, '\p{Is_Block: _-Specials}', "");
Expect(0, 65520, '\p{^Is_Block: _-Specials}', "");
Expect(0, 65520, '\P{Is_Block: _-Specials}', "");
Expect(1, 65520, '\P{^Is_Block: _-Specials}', "");
Expect(0, 65519, '\p{Is_Block: _-Specials}', "");
Expect(1, 65519, '\p{^Is_Block: _-Specials}', "");
Expect(1, 65519, '\P{Is_Block: _-Specials}', "");
Expect(0, 65519, '\P{^Is_Block: _-Specials}', "");
Error('\p{Is_Blk=		Specials:=}');
Error('\P{Is_Blk=		Specials:=}');
Expect(1, 65520, '\p{Is_Blk=specials}', "");
Expect(0, 65520, '\p{^Is_Blk=specials}', "");
Expect(0, 65520, '\P{Is_Blk=specials}', "");
Expect(1, 65520, '\P{^Is_Blk=specials}', "");
Expect(0, 65519, '\p{Is_Blk=specials}', "");
Expect(1, 65519, '\p{^Is_Blk=specials}', "");
Expect(1, 65519, '\P{Is_Blk=specials}', "");
Expect(0, 65519, '\P{^Is_Blk=specials}', "");
Expect(1, 65520, '\p{Is_Blk=-SPECIALS}', "");
Expect(0, 65520, '\p{^Is_Blk=-SPECIALS}', "");
Expect(0, 65520, '\P{Is_Blk=-SPECIALS}', "");
Expect(1, 65520, '\P{^Is_Blk=-SPECIALS}', "");
Expect(0, 65519, '\p{Is_Blk=-SPECIALS}', "");
Expect(1, 65519, '\p{^Is_Blk=-SPECIALS}', "");
Expect(1, 65519, '\P{Is_Blk=-SPECIALS}', "");
Expect(0, 65519, '\P{^Is_Blk=-SPECIALS}', "");
Error('\p{Block=- georgian/a/}');
Error('\P{Block=- georgian/a/}');
Expect(1, 4351, '\p{Block=georgian}', "");
Expect(0, 4351, '\p{^Block=georgian}', "");
Expect(0, 4351, '\P{Block=georgian}', "");
Expect(1, 4351, '\P{^Block=georgian}', "");
Expect(0, 4255, '\p{Block=georgian}', "");
Expect(1, 4255, '\p{^Block=georgian}', "");
Expect(1, 4255, '\P{Block=georgian}', "");
Expect(0, 4255, '\P{^Block=georgian}', "");
Expect(1, 4351, '\p{Block=	 georgian}', "");
Expect(0, 4351, '\p{^Block=	 georgian}', "");
Expect(0, 4351, '\P{Block=	 georgian}', "");
Expect(1, 4351, '\P{^Block=	 georgian}', "");
Expect(0, 4255, '\p{Block=	 georgian}', "");
Expect(1, 4255, '\p{^Block=	 georgian}', "");
Expect(1, 4255, '\P{Block=	 georgian}', "");
Expect(0, 4255, '\P{^Block=	 georgian}', "");
Error('\p{Blk=/a/georgian}');
Error('\P{Blk=/a/georgian}');
Expect(1, 4351, '\p{Blk=georgian}', "");
Expect(0, 4351, '\p{^Blk=georgian}', "");
Expect(0, 4351, '\P{Blk=georgian}', "");
Expect(1, 4351, '\P{^Blk=georgian}', "");
Expect(0, 4255, '\p{Blk=georgian}', "");
Expect(1, 4255, '\p{^Blk=georgian}', "");
Expect(1, 4255, '\P{Blk=georgian}', "");
Expect(0, 4255, '\P{^Blk=georgian}', "");
Expect(1, 4351, '\p{Blk=--georgian}', "");
Expect(0, 4351, '\p{^Blk=--georgian}', "");
Expect(0, 4351, '\P{Blk=--georgian}', "");
Expect(1, 4351, '\P{^Blk=--georgian}', "");
Expect(0, 4255, '\p{Blk=--georgian}', "");
Expect(1, 4255, '\p{^Blk=--georgian}', "");
Expect(1, 4255, '\P{Blk=--georgian}', "");
Expect(0, 4255, '\P{^Blk=--georgian}', "");
Error('\p{Is_Block= :=Georgian}');
Error('\P{Is_Block= :=Georgian}');
Expect(1, 4351, '\p{Is_Block=georgian}', "");
Expect(0, 4351, '\p{^Is_Block=georgian}', "");
Expect(0, 4351, '\P{Is_Block=georgian}', "");
Expect(1, 4351, '\P{^Is_Block=georgian}', "");
Expect(0, 4255, '\p{Is_Block=georgian}', "");
Expect(1, 4255, '\p{^Is_Block=georgian}', "");
Expect(1, 4255, '\P{Is_Block=georgian}', "");
Expect(0, 4255, '\P{^Is_Block=georgian}', "");
Expect(1, 4351, '\p{Is_Block=_-Georgian}', "");
Expect(0, 4351, '\p{^Is_Block=_-Georgian}', "");
Expect(0, 4351, '\P{Is_Block=_-Georgian}', "");
Expect(1, 4351, '\P{^Is_Block=_-Georgian}', "");
Expect(0, 4255, '\p{Is_Block=_-Georgian}', "");
Expect(1, 4255, '\p{^Is_Block=_-Georgian}', "");
Expect(1, 4255, '\P{Is_Block=_-Georgian}', "");
Expect(0, 4255, '\P{^Is_Block=_-Georgian}', "");
Error('\p{Is_Blk=:=-	georgian}');
Error('\P{Is_Blk=:=-	georgian}');
Expect(1, 4351, '\p{Is_Blk=georgian}', "");
Expect(0, 4351, '\p{^Is_Blk=georgian}', "");
Expect(0, 4351, '\P{Is_Blk=georgian}', "");
Expect(1, 4351, '\P{^Is_Blk=georgian}', "");
Expect(0, 4255, '\p{Is_Blk=georgian}', "");
Expect(1, 4255, '\p{^Is_Blk=georgian}', "");
Expect(1, 4255, '\P{Is_Blk=georgian}', "");
Expect(0, 4255, '\P{^Is_Blk=georgian}', "");
Expect(1, 4351, '\p{Is_Blk=_Georgian}', "");
Expect(0, 4351, '\p{^Is_Blk=_Georgian}', "");
Expect(0, 4351, '\P{Is_Blk=_Georgian}', "");
Expect(1, 4351, '\P{^Is_Blk=_Georgian}', "");
Expect(0, 4255, '\p{Is_Blk=_Georgian}', "");
Expect(1, 4255, '\p{^Is_Blk=_Georgian}', "");
Expect(1, 4255, '\P{Is_Blk=_Georgian}', "");
Expect(0, 4255, '\P{^Is_Blk=_Georgian}', "");
Error('\p{Block=- emoticons:=}');
Error('\P{Block=- emoticons:=}');
Expect(1, 128591, '\p{Block=emoticons}', "");
Expect(0, 128591, '\p{^Block=emoticons}', "");
Expect(0, 128591, '\P{Block=emoticons}', "");
Expect(1, 128591, '\P{^Block=emoticons}', "");
Expect(0, 128511, '\p{Block=emoticons}', "");
Expect(1, 128511, '\p{^Block=emoticons}', "");
Expect(1, 128511, '\P{Block=emoticons}', "");
Expect(0, 128511, '\P{^Block=emoticons}', "");
Expect(1, 128591, '\p{Block=-	emoticons}', "");
Expect(0, 128591, '\p{^Block=-	emoticons}', "");
Expect(0, 128591, '\P{Block=-	emoticons}', "");
Expect(1, 128591, '\P{^Block=-	emoticons}', "");
Expect(0, 128511, '\p{Block=-	emoticons}', "");
Expect(1, 128511, '\p{^Block=-	emoticons}', "");
Expect(1, 128511, '\P{Block=-	emoticons}', "");
Expect(0, 128511, '\P{^Block=-	emoticons}', "");
Error('\p{Blk:	--EMOTICONS:=}');
Error('\P{Blk:	--EMOTICONS:=}');
Expect(1, 128591, '\p{Blk=emoticons}', "");
Expect(0, 128591, '\p{^Blk=emoticons}', "");
Expect(0, 128591, '\P{Blk=emoticons}', "");
Expect(1, 128591, '\P{^Blk=emoticons}', "");
Expect(0, 128511, '\p{Blk=emoticons}', "");
Expect(1, 128511, '\p{^Blk=emoticons}', "");
Expect(1, 128511, '\P{Blk=emoticons}', "");
Expect(0, 128511, '\P{^Blk=emoticons}', "");
Expect(1, 128591, '\p{Blk=	EMOTICONS}', "");
Expect(0, 128591, '\p{^Blk=	EMOTICONS}', "");
Expect(0, 128591, '\P{Blk=	EMOTICONS}', "");
Expect(1, 128591, '\P{^Blk=	EMOTICONS}', "");
Expect(0, 128511, '\p{Blk=	EMOTICONS}', "");
Expect(1, 128511, '\p{^Blk=	EMOTICONS}', "");
Expect(1, 128511, '\P{Blk=	EMOTICONS}', "");
Expect(0, 128511, '\P{^Blk=	EMOTICONS}', "");
Error('\p{Is_Block=	 Emoticons/a/}');
Error('\P{Is_Block=	 Emoticons/a/}');
Expect(1, 128591, '\p{Is_Block=emoticons}', "");
Expect(0, 128591, '\p{^Is_Block=emoticons}', "");
Expect(0, 128591, '\P{Is_Block=emoticons}', "");
Expect(1, 128591, '\P{^Is_Block=emoticons}', "");
Expect(0, 128511, '\p{Is_Block=emoticons}', "");
Expect(1, 128511, '\p{^Is_Block=emoticons}', "");
Expect(1, 128511, '\P{Is_Block=emoticons}', "");
Expect(0, 128511, '\P{^Is_Block=emoticons}', "");
Expect(1, 128591, '\p{Is_Block=__Emoticons}', "");
Expect(0, 128591, '\p{^Is_Block=__Emoticons}', "");
Expect(0, 128591, '\P{Is_Block=__Emoticons}', "");
Expect(1, 128591, '\P{^Is_Block=__Emoticons}', "");
Expect(0, 128511, '\p{Is_Block=__Emoticons}', "");
Expect(1, 128511, '\p{^Is_Block=__Emoticons}', "");
Expect(1, 128511, '\P{Is_Block=__Emoticons}', "");
Expect(0, 128511, '\P{^Is_Block=__Emoticons}', "");
Error('\p{Is_Blk:	-:=EMOTICONS}');
Error('\P{Is_Blk:	-:=EMOTICONS}');
Expect(1, 128591, '\p{Is_Blk=emoticons}', "");
Expect(0, 128591, '\p{^Is_Blk=emoticons}', "");
Expect(0, 128591, '\P{Is_Blk=emoticons}', "");
Expect(1, 128591, '\P{^Is_Blk=emoticons}', "");
Expect(0, 128511, '\p{Is_Blk=emoticons}', "");
Expect(1, 128511, '\p{^Is_Blk=emoticons}', "");
Expect(1, 128511, '\P{Is_Blk=emoticons}', "");
Expect(0, 128511, '\P{^Is_Blk=emoticons}', "");
Expect(1, 128591, '\p{Is_Blk= 	EMOTICONS}', "");
Expect(0, 128591, '\p{^Is_Blk= 	EMOTICONS}', "");
Expect(0, 128591, '\P{Is_Blk= 	EMOTICONS}', "");
Expect(1, 128591, '\P{^Is_Blk= 	EMOTICONS}', "");
Expect(0, 128511, '\p{Is_Blk= 	EMOTICONS}', "");
Expect(1, 128511, '\p{^Is_Blk= 	EMOTICONS}', "");
Expect(1, 128511, '\P{Is_Blk= 	EMOTICONS}', "");
Expect(0, 128511, '\P{^Is_Blk= 	EMOTICONS}', "");
Error('\p{Block=:=transport_andmapSymbols}');
Error('\P{Block=:=transport_andmapSymbols}');
Expect(1, 128767, '\p{Block: transportandmapsymbols}', "");
Expect(0, 128767, '\p{^Block: transportandmapsymbols}', "");
Expect(0, 128767, '\P{Block: transportandmapsymbols}', "");
Expect(1, 128767, '\P{^Block: transportandmapsymbols}', "");
Expect(0, 128639, '\p{Block: transportandmapsymbols}', "");
Expect(1, 128639, '\p{^Block: transportandmapsymbols}', "");
Expect(1, 128639, '\P{Block: transportandmapsymbols}', "");
Expect(0, 128639, '\P{^Block: transportandmapsymbols}', "");
Expect(1, 128767, '\p{Block=-Transport-AndMAP-Symbols}', "");
Expect(0, 128767, '\p{^Block=-Transport-AndMAP-Symbols}', "");
Expect(0, 128767, '\P{Block=-Transport-AndMAP-Symbols}', "");
Expect(1, 128767, '\P{^Block=-Transport-AndMAP-Symbols}', "");
Expect(0, 128639, '\p{Block=-Transport-AndMAP-Symbols}', "");
Expect(1, 128639, '\p{^Block=-Transport-AndMAP-Symbols}', "");
Expect(1, 128639, '\P{Block=-Transport-AndMAP-Symbols}', "");
Expect(0, 128639, '\P{^Block=-Transport-AndMAP-Symbols}', "");
Error('\p{Blk:     Transport-And/a/map	Symbols}');
Error('\P{Blk:     Transport-And/a/map	Symbols}');
Expect(1, 128767, '\p{Blk:transportandmapsymbols}', "");
Expect(0, 128767, '\p{^Blk:transportandmapsymbols}', "");
Expect(0, 128767, '\P{Blk:transportandmapsymbols}', "");
Expect(1, 128767, '\P{^Blk:transportandmapsymbols}', "");
Expect(0, 128639, '\p{Blk:transportandmapsymbols}', "");
Expect(1, 128639, '\p{^Blk:transportandmapsymbols}', "");
Expect(1, 128639, '\P{Blk:transportandmapsymbols}', "");
Expect(0, 128639, '\P{^Blk:transportandmapsymbols}', "");
Expect(1, 128767, '\p{Blk:-	Transport-And_Mapsymbols}', "");
Expect(0, 128767, '\p{^Blk:-	Transport-And_Mapsymbols}', "");
Expect(0, 128767, '\P{Blk:-	Transport-And_Mapsymbols}', "");
Expect(1, 128767, '\P{^Blk:-	Transport-And_Mapsymbols}', "");
Expect(0, 128639, '\p{Blk:-	Transport-And_Mapsymbols}', "");
Expect(1, 128639, '\p{^Blk:-	Transport-And_Mapsymbols}', "");
Expect(1, 128639, '\P{Blk:-	Transport-And_Mapsymbols}', "");
Expect(0, 128639, '\P{^Blk:-	Transport-And_Mapsymbols}', "");
Error('\p{Is_Block=	/a/transport_and-MAP_Symbols}');
Error('\P{Is_Block=	/a/transport_and-MAP_Symbols}');
Expect(1, 128767, '\p{Is_Block=transportandmapsymbols}', "");
Expect(0, 128767, '\p{^Is_Block=transportandmapsymbols}', "");
Expect(0, 128767, '\P{Is_Block=transportandmapsymbols}', "");
Expect(1, 128767, '\P{^Is_Block=transportandmapsymbols}', "");
Expect(0, 128639, '\p{Is_Block=transportandmapsymbols}', "");
Expect(1, 128639, '\p{^Is_Block=transportandmapsymbols}', "");
Expect(1, 128639, '\P{Is_Block=transportandmapsymbols}', "");
Expect(0, 128639, '\P{^Is_Block=transportandmapsymbols}', "");
Expect(1, 128767, '\p{Is_Block=	_TRANSPORT-and map-Symbols}', "");
Expect(0, 128767, '\p{^Is_Block=	_TRANSPORT-and map-Symbols}', "");
Expect(0, 128767, '\P{Is_Block=	_TRANSPORT-and map-Symbols}', "");
Expect(1, 128767, '\P{^Is_Block=	_TRANSPORT-and map-Symbols}', "");
Expect(0, 128639, '\p{Is_Block=	_TRANSPORT-and map-Symbols}', "");
Expect(1, 128639, '\p{^Is_Block=	_TRANSPORT-and map-Symbols}', "");
Expect(1, 128639, '\P{Is_Block=	_TRANSPORT-and map-Symbols}', "");
Expect(0, 128639, '\P{^Is_Block=	_TRANSPORT-and map-Symbols}', "");
Error('\p{Is_Blk=-	transport and/a/map-Symbols}');
Error('\P{Is_Blk=-	transport and/a/map-Symbols}');
Expect(1, 128767, '\p{Is_Blk=transportandmapsymbols}', "");
Expect(0, 128767, '\p{^Is_Blk=transportandmapsymbols}', "");
Expect(0, 128767, '\P{Is_Blk=transportandmapsymbols}', "");
Expect(1, 128767, '\P{^Is_Blk=transportandmapsymbols}', "");
Expect(0, 128639, '\p{Is_Blk=transportandmapsymbols}', "");
Expect(1, 128639, '\p{^Is_Blk=transportandmapsymbols}', "");
Expect(1, 128639, '\P{Is_Blk=transportandmapsymbols}', "");
Expect(0, 128639, '\P{^Is_Blk=transportandmapsymbols}', "");
Expect(1, 128767, '\p{Is_Blk= _transport_AND	map_Symbols}', "");
Expect(0, 128767, '\p{^Is_Blk= _transport_AND	map_Symbols}', "");
Expect(0, 128767, '\P{Is_Blk= _transport_AND	map_Symbols}', "");
Expect(1, 128767, '\P{^Is_Blk= _transport_AND	map_Symbols}', "");
Expect(0, 128639, '\p{Is_Blk= _transport_AND	map_Symbols}', "");
Expect(1, 128639, '\p{^Is_Blk= _transport_AND	map_Symbols}', "");
Expect(1, 128639, '\P{Is_Blk= _transport_AND	map_Symbols}', "");
Expect(0, 128639, '\P{^Is_Blk= _transport_AND	map_Symbols}', "");
Error('\p{Block:	:=kayahLi}');
Error('\P{Block:	:=kayahLi}');
Expect(1, 43311, '\p{Block=kayahli}', "");
Expect(0, 43311, '\p{^Block=kayahli}', "");
Expect(0, 43311, '\P{Block=kayahli}', "");
Expect(1, 43311, '\P{^Block=kayahli}', "");
Expect(0, 43263, '\p{Block=kayahli}', "");
Expect(1, 43263, '\p{^Block=kayahli}', "");
Expect(1, 43263, '\P{Block=kayahli}', "");
Expect(0, 43263, '\P{^Block=kayahli}', "");
Expect(1, 43311, '\p{Block=-KAYAH	li}', "");
Expect(0, 43311, '\p{^Block=-KAYAH	li}', "");
Expect(0, 43311, '\P{Block=-KAYAH	li}', "");
Expect(1, 43311, '\P{^Block=-KAYAH	li}', "");
Expect(0, 43263, '\p{Block=-KAYAH	li}', "");
Expect(1, 43263, '\p{^Block=-KAYAH	li}', "");
Expect(1, 43263, '\P{Block=-KAYAH	li}', "");
Expect(0, 43263, '\P{^Block=-KAYAH	li}', "");
Error('\p{Blk=/a/-_kayah-li}');
Error('\P{Blk=/a/-_kayah-li}');
Expect(1, 43311, '\p{Blk=kayahli}', "");
Expect(0, 43311, '\p{^Blk=kayahli}', "");
Expect(0, 43311, '\P{Blk=kayahli}', "");
Expect(1, 43311, '\P{^Blk=kayahli}', "");
Expect(0, 43263, '\p{Blk=kayahli}', "");
Expect(1, 43263, '\p{^Blk=kayahli}', "");
Expect(1, 43263, '\P{Blk=kayahli}', "");
Expect(0, 43263, '\P{^Blk=kayahli}', "");
Expect(1, 43311, '\p{Blk=__Kayah-Li}', "");
Expect(0, 43311, '\p{^Blk=__Kayah-Li}', "");
Expect(0, 43311, '\P{Blk=__Kayah-Li}', "");
Expect(1, 43311, '\P{^Blk=__Kayah-Li}', "");
Expect(0, 43263, '\p{Blk=__Kayah-Li}', "");
Expect(1, 43263, '\p{^Blk=__Kayah-Li}', "");
Expect(1, 43263, '\P{Blk=__Kayah-Li}', "");
Expect(0, 43263, '\P{^Blk=__Kayah-Li}', "");
Error('\p{Is_Block=:=KAYAH-Li}');
Error('\P{Is_Block=:=KAYAH-Li}');
Expect(1, 43311, '\p{Is_Block=kayahli}', "");
Expect(0, 43311, '\p{^Is_Block=kayahli}', "");
Expect(0, 43311, '\P{Is_Block=kayahli}', "");
Expect(1, 43311, '\P{^Is_Block=kayahli}', "");
Expect(0, 43263, '\p{Is_Block=kayahli}', "");
Expect(1, 43263, '\p{^Is_Block=kayahli}', "");
Expect(1, 43263, '\P{Is_Block=kayahli}', "");
Expect(0, 43263, '\P{^Is_Block=kayahli}', "");
Expect(1, 43311, '\p{Is_Block: _-KayahLi}', "");
Expect(0, 43311, '\p{^Is_Block: _-KayahLi}', "");
Expect(0, 43311, '\P{Is_Block: _-KayahLi}', "");
Expect(1, 43311, '\P{^Is_Block: _-KayahLi}', "");
Expect(0, 43263, '\p{Is_Block: _-KayahLi}', "");
Expect(1, 43263, '\p{^Is_Block: _-KayahLi}', "");
Expect(1, 43263, '\P{Is_Block: _-KayahLi}', "");
Expect(0, 43263, '\P{^Is_Block: _-KayahLi}', "");
Error('\p{Is_Blk:   KAYAH:=Li}');
Error('\P{Is_Blk:   KAYAH:=Li}');
Expect(1, 43311, '\p{Is_Blk=kayahli}', "");
Expect(0, 43311, '\p{^Is_Blk=kayahli}', "");
Expect(0, 43311, '\P{Is_Blk=kayahli}', "");
Expect(1, 43311, '\P{^Is_Blk=kayahli}', "");
Expect(0, 43263, '\p{Is_Blk=kayahli}', "");
Expect(1, 43263, '\p{^Is_Blk=kayahli}', "");
Expect(1, 43263, '\P{Is_Blk=kayahli}', "");
Expect(0, 43263, '\P{^Is_Blk=kayahli}', "");
Expect(1, 43311, '\p{Is_Blk=- kayah Li}', "");
Expect(0, 43311, '\p{^Is_Blk=- kayah Li}', "");
Expect(0, 43311, '\P{Is_Blk=- kayah Li}', "");
Expect(1, 43311, '\P{^Is_Blk=- kayah Li}', "");
Expect(0, 43263, '\p{Is_Blk=- kayah Li}', "");
Expect(1, 43263, '\p{^Is_Blk=- kayah Li}', "");
Expect(1, 43263, '\P{Is_Blk=- kayah Li}', "");
Expect(0, 43263, '\P{^Is_Blk=- kayah Li}', "");
Error('\p{Block=_:=CJK CompatibilityFORMS}');
Error('\P{Block=_:=CJK CompatibilityFORMS}');
Expect(1, 65103, '\p{Block=cjkcompatibilityforms}', "");
Expect(0, 65103, '\p{^Block=cjkcompatibilityforms}', "");
Expect(0, 65103, '\P{Block=cjkcompatibilityforms}', "");
Expect(1, 65103, '\P{^Block=cjkcompatibilityforms}', "");
Expect(0, 65071, '\p{Block=cjkcompatibilityforms}', "");
Expect(1, 65071, '\p{^Block=cjkcompatibilityforms}', "");
Expect(1, 65071, '\P{Block=cjkcompatibilityforms}', "");
Expect(0, 65071, '\P{^Block=cjkcompatibilityforms}', "");
Expect(1, 65103, '\p{Block:   _CJK-Compatibility_Forms}', "");
Expect(0, 65103, '\p{^Block:   _CJK-Compatibility_Forms}', "");
Expect(0, 65103, '\P{Block:   _CJK-Compatibility_Forms}', "");
Expect(1, 65103, '\P{^Block:   _CJK-Compatibility_Forms}', "");
Expect(0, 65071, '\p{Block:   _CJK-Compatibility_Forms}', "");
Expect(1, 65071, '\p{^Block:   _CJK-Compatibility_Forms}', "");
Expect(1, 65071, '\P{Block:   _CJK-Compatibility_Forms}', "");
Expect(0, 65071, '\P{^Block:   _CJK-Compatibility_Forms}', "");
Error('\p{Blk= :=CJK Compatibility_Forms}');
Error('\P{Blk= :=CJK Compatibility_Forms}');
Expect(1, 65103, '\p{Blk=cjkcompatibilityforms}', "");
Expect(0, 65103, '\p{^Blk=cjkcompatibilityforms}', "");
Expect(0, 65103, '\P{Blk=cjkcompatibilityforms}', "");
Expect(1, 65103, '\P{^Blk=cjkcompatibilityforms}', "");
Expect(0, 65071, '\p{Blk=cjkcompatibilityforms}', "");
Expect(1, 65071, '\p{^Blk=cjkcompatibilityforms}', "");
Expect(1, 65071, '\P{Blk=cjkcompatibilityforms}', "");
Expect(0, 65071, '\P{^Blk=cjkcompatibilityforms}', "");
Expect(1, 65103, '\p{Blk= -CJK_compatibility_Forms}', "");
Expect(0, 65103, '\p{^Blk= -CJK_compatibility_Forms}', "");
Expect(0, 65103, '\P{Blk= -CJK_compatibility_Forms}', "");
Expect(1, 65103, '\P{^Blk= -CJK_compatibility_Forms}', "");
Expect(0, 65071, '\p{Blk= -CJK_compatibility_Forms}', "");
Expect(1, 65071, '\p{^Blk= -CJK_compatibility_Forms}', "");
Expect(1, 65071, '\P{Blk= -CJK_compatibility_Forms}', "");
Expect(0, 65071, '\P{^Blk= -CJK_compatibility_Forms}', "");
Error('\p{Is_Block= _cjk CompatibilityFORMS/a/}');
Error('\P{Is_Block= _cjk CompatibilityFORMS/a/}');
Expect(1, 65103, '\p{Is_Block: cjkcompatibilityforms}', "");
Expect(0, 65103, '\p{^Is_Block: cjkcompatibilityforms}', "");
Expect(0, 65103, '\P{Is_Block: cjkcompatibilityforms}', "");
Expect(1, 65103, '\P{^Is_Block: cjkcompatibilityforms}', "");
Expect(0, 65071, '\p{Is_Block: cjkcompatibilityforms}', "");
Expect(1, 65071, '\p{^Is_Block: cjkcompatibilityforms}', "");
Expect(1, 65071, '\P{Is_Block: cjkcompatibilityforms}', "");
Expect(0, 65071, '\P{^Is_Block: cjkcompatibilityforms}', "");
Expect(1, 65103, '\p{Is_Block=-cjk_Compatibility	FORMS}', "");
Expect(0, 65103, '\p{^Is_Block=-cjk_Compatibility	FORMS}', "");
Expect(0, 65103, '\P{Is_Block=-cjk_Compatibility	FORMS}', "");
Expect(1, 65103, '\P{^Is_Block=-cjk_Compatibility	FORMS}', "");
Expect(0, 65071, '\p{Is_Block=-cjk_Compatibility	FORMS}', "");
Expect(1, 65071, '\p{^Is_Block=-cjk_Compatibility	FORMS}', "");
Expect(1, 65071, '\P{Is_Block=-cjk_Compatibility	FORMS}', "");
Expect(0, 65071, '\P{^Is_Block=-cjk_Compatibility	FORMS}', "");
Error('\p{Is_Blk=_CJK COMPATIBILITY:=FORMS}');
Error('\P{Is_Blk=_CJK COMPATIBILITY:=FORMS}');
Expect(1, 65103, '\p{Is_Blk=cjkcompatibilityforms}', "");
Expect(0, 65103, '\p{^Is_Blk=cjkcompatibilityforms}', "");
Expect(0, 65103, '\P{Is_Blk=cjkcompatibilityforms}', "");
Expect(1, 65103, '\P{^Is_Blk=cjkcompatibilityforms}', "");
Expect(0, 65071, '\p{Is_Blk=cjkcompatibilityforms}', "");
Expect(1, 65071, '\p{^Is_Blk=cjkcompatibilityforms}', "");
Expect(1, 65071, '\P{Is_Blk=cjkcompatibilityforms}', "");
Expect(0, 65071, '\P{^Is_Blk=cjkcompatibilityforms}', "");
Expect(1, 65103, '\p{Is_Blk=_ CJK-Compatibility_forms}', "");
Expect(0, 65103, '\p{^Is_Blk=_ CJK-Compatibility_forms}', "");
Expect(0, 65103, '\P{Is_Blk=_ CJK-Compatibility_forms}', "");
Expect(1, 65103, '\P{^Is_Blk=_ CJK-Compatibility_forms}', "");
Expect(0, 65071, '\p{Is_Blk=_ CJK-Compatibility_forms}', "");
Expect(1, 65071, '\p{^Is_Blk=_ CJK-Compatibility_forms}', "");
Expect(1, 65071, '\P{Is_Blk=_ CJK-Compatibility_forms}', "");
Expect(0, 65071, '\P{^Is_Blk=_ CJK-Compatibility_forms}', "");
Error('\p{Block=/a/	Tifinagh}');
Error('\P{Block=/a/	Tifinagh}');
Expect(1, 11647, '\p{Block:tifinagh}', "");
Expect(0, 11647, '\p{^Block:tifinagh}', "");
Expect(0, 11647, '\P{Block:tifinagh}', "");
Expect(1, 11647, '\P{^Block:tifinagh}', "");
Expect(0, 11567, '\p{Block:tifinagh}', "");
Expect(1, 11567, '\p{^Block:tifinagh}', "");
Expect(1, 11567, '\P{Block:tifinagh}', "");
Expect(0, 11567, '\P{^Block:tifinagh}', "");
Expect(1, 11647, '\p{Block= -Tifinagh}', "");
Expect(0, 11647, '\p{^Block= -Tifinagh}', "");
Expect(0, 11647, '\P{Block= -Tifinagh}', "");
Expect(1, 11647, '\P{^Block= -Tifinagh}', "");
Expect(0, 11567, '\p{Block= -Tifinagh}', "");
Expect(1, 11567, '\p{^Block= -Tifinagh}', "");
Expect(1, 11567, '\P{Block= -Tifinagh}', "");
Expect(0, 11567, '\P{^Block= -Tifinagh}', "");
Error('\p{Blk=	_TIFINAGH:=}');
Error('\P{Blk=	_TIFINAGH:=}');
Expect(1, 11647, '\p{Blk=tifinagh}', "");
Expect(0, 11647, '\p{^Blk=tifinagh}', "");
Expect(0, 11647, '\P{Blk=tifinagh}', "");
Expect(1, 11647, '\P{^Blk=tifinagh}', "");
Expect(0, 11567, '\p{Blk=tifinagh}', "");
Expect(1, 11567, '\p{^Blk=tifinagh}', "");
Expect(1, 11567, '\P{Blk=tifinagh}', "");
Expect(0, 11567, '\P{^Blk=tifinagh}', "");
Expect(1, 11647, '\p{Blk= TIFINAGH}', "");
Expect(0, 11647, '\p{^Blk= TIFINAGH}', "");
Expect(0, 11647, '\P{Blk= TIFINAGH}', "");
Expect(1, 11647, '\P{^Blk= TIFINAGH}', "");
Expect(0, 11567, '\p{Blk= TIFINAGH}', "");
Expect(1, 11567, '\p{^Blk= TIFINAGH}', "");
Expect(1, 11567, '\P{Blk= TIFINAGH}', "");
Expect(0, 11567, '\P{^Blk= TIFINAGH}', "");
Error('\p{Is_Block=_	TIFINAGH/a/}');
Error('\P{Is_Block=_	TIFINAGH/a/}');
Expect(1, 11647, '\p{Is_Block=tifinagh}', "");
Expect(0, 11647, '\p{^Is_Block=tifinagh}', "");
Expect(0, 11647, '\P{Is_Block=tifinagh}', "");
Expect(1, 11647, '\P{^Is_Block=tifinagh}', "");
Expect(0, 11567, '\p{Is_Block=tifinagh}', "");
Expect(1, 11567, '\p{^Is_Block=tifinagh}', "");
Expect(1, 11567, '\P{Is_Block=tifinagh}', "");
Expect(0, 11567, '\P{^Is_Block=tifinagh}', "");
Expect(1, 11647, '\p{Is_Block=	 Tifinagh}', "");
Expect(0, 11647, '\p{^Is_Block=	 Tifinagh}', "");
Expect(0, 11647, '\P{Is_Block=	 Tifinagh}', "");
Expect(1, 11647, '\P{^Is_Block=	 Tifinagh}', "");
Expect(0, 11567, '\p{Is_Block=	 Tifinagh}', "");
Expect(1, 11567, '\p{^Is_Block=	 Tifinagh}', "");
Expect(1, 11567, '\P{Is_Block=	 Tifinagh}', "");
Expect(0, 11567, '\P{^Is_Block=	 Tifinagh}', "");
Error('\p{Is_Blk=:=-	TIFINAGH}');
Error('\P{Is_Blk=:=-	TIFINAGH}');
Expect(1, 11647, '\p{Is_Blk=tifinagh}', "");
Expect(0, 11647, '\p{^Is_Blk=tifinagh}', "");
Expect(0, 11647, '\P{Is_Blk=tifinagh}', "");
Expect(1, 11647, '\P{^Is_Blk=tifinagh}', "");
Expect(0, 11567, '\p{Is_Blk=tifinagh}', "");
Expect(1, 11567, '\p{^Is_Blk=tifinagh}', "");
Expect(1, 11567, '\P{Is_Blk=tifinagh}', "");
Expect(0, 11567, '\P{^Is_Blk=tifinagh}', "");
Expect(1, 11647, '\p{Is_Blk=--Tifinagh}', "");
Expect(0, 11647, '\p{^Is_Blk=--Tifinagh}', "");
Expect(0, 11647, '\P{Is_Blk=--Tifinagh}', "");
Expect(1, 11647, '\P{^Is_Blk=--Tifinagh}', "");
Expect(0, 11567, '\p{Is_Blk=--Tifinagh}', "");
Expect(1, 11567, '\p{^Is_Blk=--Tifinagh}', "");
Expect(1, 11567, '\P{Is_Blk=--Tifinagh}', "");
Expect(0, 11567, '\P{^Is_Blk=--Tifinagh}', "");
Error('\p{Block=	 hangul-Jamo:=Extended_b}');
Error('\P{Block=	 hangul-Jamo:=Extended_b}');
Expect(1, 55295, '\p{Block=hanguljamoextendedb}', "");
Expect(0, 55295, '\p{^Block=hanguljamoextendedb}', "");
Expect(0, 55295, '\P{Block=hanguljamoextendedb}', "");
Expect(1, 55295, '\P{^Block=hanguljamoextendedb}', "");
Expect(0, 55215, '\p{Block=hanguljamoextendedb}', "");
Expect(1, 55215, '\p{^Block=hanguljamoextendedb}', "");
Expect(1, 55215, '\P{Block=hanguljamoextendedb}', "");
Expect(0, 55215, '\P{^Block=hanguljamoextendedb}', "");
Expect(1, 55295, '\p{Block=	_Hangul-Jamo-Extended B}', "");
Expect(0, 55295, '\p{^Block=	_Hangul-Jamo-Extended B}', "");
Expect(0, 55295, '\P{Block=	_Hangul-Jamo-Extended B}', "");
Expect(1, 55295, '\P{^Block=	_Hangul-Jamo-Extended B}', "");
Expect(0, 55215, '\p{Block=	_Hangul-Jamo-Extended B}', "");
Expect(1, 55215, '\p{^Block=	_Hangul-Jamo-Extended B}', "");
Expect(1, 55215, '\P{Block=	_Hangul-Jamo-Extended B}', "");
Expect(0, 55215, '\P{^Block=	_Hangul-Jamo-Extended B}', "");
Error('\p{Blk=	:=Hanguljamo_EXTENDEDB}');
Error('\P{Blk=	:=Hanguljamo_EXTENDEDB}');
Expect(1, 55295, '\p{Blk=hanguljamoextendedb}', "");
Expect(0, 55295, '\p{^Blk=hanguljamoextendedb}', "");
Expect(0, 55295, '\P{Blk=hanguljamoextendedb}', "");
Expect(1, 55295, '\P{^Blk=hanguljamoextendedb}', "");
Expect(0, 55215, '\p{Blk=hanguljamoextendedb}', "");
Expect(1, 55215, '\p{^Blk=hanguljamoextendedb}', "");
Expect(1, 55215, '\P{Blk=hanguljamoextendedb}', "");
Expect(0, 55215, '\P{^Blk=hanguljamoextendedb}', "");
Expect(1, 55295, '\p{Blk=_Hangul_Jamo	Extended	B}', "");
Expect(0, 55295, '\p{^Blk=_Hangul_Jamo	Extended	B}', "");
Expect(0, 55295, '\P{Blk=_Hangul_Jamo	Extended	B}', "");
Expect(1, 55295, '\P{^Blk=_Hangul_Jamo	Extended	B}', "");
Expect(0, 55215, '\p{Blk=_Hangul_Jamo	Extended	B}', "");
Expect(1, 55215, '\p{^Blk=_Hangul_Jamo	Extended	B}', "");
Expect(1, 55215, '\P{Blk=_Hangul_Jamo	Extended	B}', "");
Expect(0, 55215, '\P{^Blk=_Hangul_Jamo	Extended	B}', "");
Error('\p{Is_Block= _Hangul	Jamoextended/a/b}');
Error('\P{Is_Block= _Hangul	Jamoextended/a/b}');
Expect(1, 55295, '\p{Is_Block=hanguljamoextendedb}', "");
Expect(0, 55295, '\p{^Is_Block=hanguljamoextendedb}', "");
Expect(0, 55295, '\P{Is_Block=hanguljamoextendedb}', "");
Expect(1, 55295, '\P{^Is_Block=hanguljamoextendedb}', "");
Expect(0, 55215, '\p{Is_Block=hanguljamoextendedb}', "");
Expect(1, 55215, '\p{^Is_Block=hanguljamoextendedb}', "");
Expect(1, 55215, '\P{Is_Block=hanguljamoextendedb}', "");
Expect(0, 55215, '\P{^Is_Block=hanguljamoextendedb}', "");
Expect(1, 55295, '\p{Is_Block=- HANGUL_jamo-extended_B}', "");
Expect(0, 55295, '\p{^Is_Block=- HANGUL_jamo-extended_B}', "");
Expect(0, 55295, '\P{Is_Block=- HANGUL_jamo-extended_B}', "");
Expect(1, 55295, '\P{^Is_Block=- HANGUL_jamo-extended_B}', "");
Expect(0, 55215, '\p{Is_Block=- HANGUL_jamo-extended_B}', "");
Expect(1, 55215, '\p{^Is_Block=- HANGUL_jamo-extended_B}', "");
Expect(1, 55215, '\P{Is_Block=- HANGUL_jamo-extended_B}', "");
Expect(0, 55215, '\P{^Is_Block=- HANGUL_jamo-extended_B}', "");
Error('\p{Is_Blk:/a/ 	Hangul_jamo-extended_B}');
Error('\P{Is_Blk:/a/ 	Hangul_jamo-extended_B}');
Expect(1, 55295, '\p{Is_Blk=hanguljamoextendedb}', "");
Expect(0, 55295, '\p{^Is_Blk=hanguljamoextendedb}', "");
Expect(0, 55295, '\P{Is_Blk=hanguljamoextendedb}', "");
Expect(1, 55295, '\P{^Is_Blk=hanguljamoextendedb}', "");
Expect(0, 55215, '\p{Is_Blk=hanguljamoextendedb}', "");
Expect(1, 55215, '\p{^Is_Blk=hanguljamoextendedb}', "");
Expect(1, 55215, '\P{Is_Blk=hanguljamoextendedb}', "");
Expect(0, 55215, '\P{^Is_Blk=hanguljamoextendedb}', "");
Expect(1, 55295, '\p{Is_Blk= 	hangul	jamo_Extended	B}', "");
Expect(0, 55295, '\p{^Is_Blk= 	hangul	jamo_Extended	B}', "");
Expect(0, 55295, '\P{Is_Blk= 	hangul	jamo_Extended	B}', "");
Expect(1, 55295, '\P{^Is_Blk= 	hangul	jamo_Extended	B}', "");
Expect(0, 55215, '\p{Is_Blk= 	hangul	jamo_Extended	B}', "");
Expect(1, 55215, '\p{^Is_Blk= 	hangul	jamo_Extended	B}', "");
Expect(1, 55215, '\P{Is_Blk= 	hangul	jamo_Extended	B}', "");
Expect(0, 55215, '\P{^Is_Blk= 	hangul	jamo_Extended	B}', "");
Error('\p{Block=/a/_thai}');
Error('\P{Block=/a/_thai}');
Expect(1, 3711, '\p{Block=thai}', "");
Expect(0, 3711, '\p{^Block=thai}', "");
Expect(0, 3711, '\P{Block=thai}', "");
Expect(1, 3711, '\P{^Block=thai}', "");
Expect(0, 3583, '\p{Block=thai}', "");
Expect(1, 3583, '\p{^Block=thai}', "");
Expect(1, 3583, '\P{Block=thai}', "");
Expect(0, 3583, '\P{^Block=thai}', "");
Expect(1, 3711, '\p{Block=	_Thai}', "");
Expect(0, 3711, '\p{^Block=	_Thai}', "");
Expect(0, 3711, '\P{Block=	_Thai}', "");
Expect(1, 3711, '\P{^Block=	_Thai}', "");
Expect(0, 3583, '\p{Block=	_Thai}', "");
Expect(1, 3583, '\p{^Block=	_Thai}', "");
Expect(1, 3583, '\P{Block=	_Thai}', "");
Expect(0, 3583, '\P{^Block=	_Thai}', "");
Error('\p{Blk=	Thai:=}');
Error('\P{Blk=	Thai:=}');
Expect(1, 3711, '\p{Blk=thai}', "");
Expect(0, 3711, '\p{^Blk=thai}', "");
Expect(0, 3711, '\P{Blk=thai}', "");
Expect(1, 3711, '\P{^Blk=thai}', "");
Expect(0, 3583, '\p{Blk=thai}', "");
Expect(1, 3583, '\p{^Blk=thai}', "");
Expect(1, 3583, '\P{Blk=thai}', "");
Expect(0, 3583, '\P{^Blk=thai}', "");
Expect(1, 3711, '\p{Blk=-THAI}', "");
Expect(0, 3711, '\p{^Blk=-THAI}', "");
Expect(0, 3711, '\P{Blk=-THAI}', "");
Expect(1, 3711, '\P{^Blk=-THAI}', "");
Expect(0, 3583, '\p{Blk=-THAI}', "");
Expect(1, 3583, '\p{^Blk=-THAI}', "");
Expect(1, 3583, '\P{Blk=-THAI}', "");
Expect(0, 3583, '\P{^Blk=-THAI}', "");
Error('\p{Is_Block=	/a/Thai}');
Error('\P{Is_Block=	/a/Thai}');
Expect(1, 3711, '\p{Is_Block=thai}', "");
Expect(0, 3711, '\p{^Is_Block=thai}', "");
Expect(0, 3711, '\P{Is_Block=thai}', "");
Expect(1, 3711, '\P{^Is_Block=thai}', "");
Expect(0, 3583, '\p{Is_Block=thai}', "");
Expect(1, 3583, '\p{^Is_Block=thai}', "");
Expect(1, 3583, '\P{Is_Block=thai}', "");
Expect(0, 3583, '\P{^Is_Block=thai}', "");
Expect(1, 3711, '\p{Is_Block=_Thai}', "");
Expect(0, 3711, '\p{^Is_Block=_Thai}', "");
Expect(0, 3711, '\P{Is_Block=_Thai}', "");
Expect(1, 3711, '\P{^Is_Block=_Thai}', "");
Expect(0, 3583, '\p{Is_Block=_Thai}', "");
Expect(1, 3583, '\p{^Is_Block=_Thai}', "");
Expect(1, 3583, '\P{Is_Block=_Thai}', "");
Expect(0, 3583, '\P{^Is_Block=_Thai}', "");
Error('\p{Is_Blk=/a/-_Thai}');
Error('\P{Is_Blk=/a/-_Thai}');
Expect(1, 3711, '\p{Is_Blk=thai}', "");
Expect(0, 3711, '\p{^Is_Blk=thai}', "");
Expect(0, 3711, '\P{Is_Blk=thai}', "");
Expect(1, 3711, '\P{^Is_Blk=thai}', "");
Expect(0, 3583, '\p{Is_Blk=thai}', "");
Expect(1, 3583, '\p{^Is_Blk=thai}', "");
Expect(1, 3583, '\P{Is_Blk=thai}', "");
Expect(0, 3583, '\P{^Is_Blk=thai}', "");
Expect(1, 3711, '\p{Is_Blk=	Thai}', "");
Expect(0, 3711, '\p{^Is_Blk=	Thai}', "");
Expect(0, 3711, '\P{Is_Blk=	Thai}', "");
Expect(1, 3711, '\P{^Is_Blk=	Thai}', "");
Expect(0, 3583, '\p{Is_Blk=	Thai}', "");
Expect(1, 3583, '\p{^Is_Blk=	Thai}', "");
Expect(1, 3583, '\P{Is_Blk=	Thai}', "");
Expect(0, 3583, '\P{^Is_Blk=	Thai}', "");
Error('\p{Block= _khmer/a/}');
Error('\P{Block= _khmer/a/}');
Expect(1, 6143, '\p{Block=khmer}', "");
Expect(0, 6143, '\p{^Block=khmer}', "");
Expect(0, 6143, '\P{Block=khmer}', "");
Expect(1, 6143, '\P{^Block=khmer}', "");
Expect(0, 6015, '\p{Block=khmer}', "");
Expect(1, 6015, '\p{^Block=khmer}', "");
Expect(1, 6015, '\P{Block=khmer}', "");
Expect(0, 6015, '\P{^Block=khmer}', "");
Expect(1, 6143, '\p{Block=  Khmer}', "");
Expect(0, 6143, '\p{^Block=  Khmer}', "");
Expect(0, 6143, '\P{Block=  Khmer}', "");
Expect(1, 6143, '\P{^Block=  Khmer}', "");
Expect(0, 6015, '\p{Block=  Khmer}', "");
Expect(1, 6015, '\p{^Block=  Khmer}', "");
Expect(1, 6015, '\P{Block=  Khmer}', "");
Expect(0, 6015, '\P{^Block=  Khmer}', "");
Error('\p{Blk=-_khmer/a/}');
Error('\P{Blk=-_khmer/a/}');
Expect(1, 6143, '\p{Blk=khmer}', "");
Expect(0, 6143, '\p{^Blk=khmer}', "");
Expect(0, 6143, '\P{Blk=khmer}', "");
Expect(1, 6143, '\P{^Blk=khmer}', "");
Expect(0, 6015, '\p{Blk=khmer}', "");
Expect(1, 6015, '\p{^Blk=khmer}', "");
Expect(1, 6015, '\P{Blk=khmer}', "");
Expect(0, 6015, '\P{^Blk=khmer}', "");
Expect(1, 6143, '\p{Blk=	KHMER}', "");
Expect(0, 6143, '\p{^Blk=	KHMER}', "");
Expect(0, 6143, '\P{Blk=	KHMER}', "");
Expect(1, 6143, '\P{^Blk=	KHMER}', "");
Expect(0, 6015, '\p{Blk=	KHMER}', "");
Expect(1, 6015, '\p{^Blk=	KHMER}', "");
Expect(1, 6015, '\P{Blk=	KHMER}', "");
Expect(0, 6015, '\P{^Blk=	KHMER}', "");
Error('\p{Is_Block:   _ khmer/a/}');
Error('\P{Is_Block:   _ khmer/a/}');
Expect(1, 6143, '\p{Is_Block=khmer}', "");
Expect(0, 6143, '\p{^Is_Block=khmer}', "");
Expect(0, 6143, '\P{Is_Block=khmer}', "");
Expect(1, 6143, '\P{^Is_Block=khmer}', "");
Expect(0, 6015, '\p{Is_Block=khmer}', "");
Expect(1, 6015, '\p{^Is_Block=khmer}', "");
Expect(1, 6015, '\P{Is_Block=khmer}', "");
Expect(0, 6015, '\P{^Is_Block=khmer}', "");
Expect(1, 6143, '\p{Is_Block=	_Khmer}', "");
Expect(0, 6143, '\p{^Is_Block=	_Khmer}', "");
Expect(0, 6143, '\P{Is_Block=	_Khmer}', "");
Expect(1, 6143, '\P{^Is_Block=	_Khmer}', "");
Expect(0, 6015, '\p{Is_Block=	_Khmer}', "");
Expect(1, 6015, '\p{^Is_Block=	_Khmer}', "");
Expect(1, 6015, '\P{Is_Block=	_Khmer}', "");
Expect(0, 6015, '\P{^Is_Block=	_Khmer}', "");
Error('\p{Is_Blk= khmer:=}');
Error('\P{Is_Blk= khmer:=}');
Expect(1, 6143, '\p{Is_Blk=khmer}', "");
Expect(0, 6143, '\p{^Is_Blk=khmer}', "");
Expect(0, 6143, '\P{Is_Blk=khmer}', "");
Expect(1, 6143, '\P{^Is_Blk=khmer}', "");
Expect(0, 6015, '\p{Is_Blk=khmer}', "");
Expect(1, 6015, '\p{^Is_Blk=khmer}', "");
Expect(1, 6015, '\P{Is_Blk=khmer}', "");
Expect(0, 6015, '\P{^Is_Blk=khmer}', "");
Expect(1, 6143, '\p{Is_Blk=  khmer}', "");
Expect(0, 6143, '\p{^Is_Blk=  khmer}', "");
Expect(0, 6143, '\P{Is_Blk=  khmer}', "");
Expect(1, 6143, '\P{^Is_Blk=  khmer}', "");
Expect(0, 6015, '\p{Is_Blk=  khmer}', "");
Expect(1, 6015, '\p{^Is_Blk=  khmer}', "");
Expect(1, 6015, '\P{Is_Blk=  khmer}', "");
Expect(0, 6015, '\P{^Is_Blk=  khmer}', "");
Error('\p{Block=:= Saurashtra}');
Error('\P{Block=:= Saurashtra}');
Expect(1, 43231, '\p{Block=saurashtra}', "");
Expect(0, 43231, '\p{^Block=saurashtra}', "");
Expect(0, 43231, '\P{Block=saurashtra}', "");
Expect(1, 43231, '\P{^Block=saurashtra}', "");
Expect(0, 43135, '\p{Block=saurashtra}', "");
Expect(1, 43135, '\p{^Block=saurashtra}', "");
Expect(1, 43135, '\P{Block=saurashtra}', "");
Expect(0, 43135, '\P{^Block=saurashtra}', "");
Expect(1, 43231, '\p{Block=	saurashtra}', "");
Expect(0, 43231, '\p{^Block=	saurashtra}', "");
Expect(0, 43231, '\P{Block=	saurashtra}', "");
Expect(1, 43231, '\P{^Block=	saurashtra}', "");
Expect(0, 43135, '\p{Block=	saurashtra}', "");
Expect(1, 43135, '\p{^Block=	saurashtra}', "");
Expect(1, 43135, '\P{Block=	saurashtra}', "");
Expect(0, 43135, '\P{^Block=	saurashtra}', "");
Error('\p{Blk=:=	saurashtra}');
Error('\P{Blk=:=	saurashtra}');
Expect(1, 43231, '\p{Blk=saurashtra}', "");
Expect(0, 43231, '\p{^Blk=saurashtra}', "");
Expect(0, 43231, '\P{Blk=saurashtra}', "");
Expect(1, 43231, '\P{^Blk=saurashtra}', "");
Expect(0, 43135, '\p{Blk=saurashtra}', "");
Expect(1, 43135, '\p{^Blk=saurashtra}', "");
Expect(1, 43135, '\P{Blk=saurashtra}', "");
Expect(0, 43135, '\P{^Blk=saurashtra}', "");
Expect(1, 43231, '\p{Blk=	 Saurashtra}', "");
Expect(0, 43231, '\p{^Blk=	 Saurashtra}', "");
Expect(0, 43231, '\P{Blk=	 Saurashtra}', "");
Expect(1, 43231, '\P{^Blk=	 Saurashtra}', "");
Expect(0, 43135, '\p{Blk=	 Saurashtra}', "");
Expect(1, 43135, '\p{^Blk=	 Saurashtra}', "");
Expect(1, 43135, '\P{Blk=	 Saurashtra}', "");
Expect(0, 43135, '\P{^Blk=	 Saurashtra}', "");
Error('\p{Is_Block=:= 	Saurashtra}');
Error('\P{Is_Block=:= 	Saurashtra}');
Expect(1, 43231, '\p{Is_Block=saurashtra}', "");
Expect(0, 43231, '\p{^Is_Block=saurashtra}', "");
Expect(0, 43231, '\P{Is_Block=saurashtra}', "");
Expect(1, 43231, '\P{^Is_Block=saurashtra}', "");
Expect(0, 43135, '\p{Is_Block=saurashtra}', "");
Expect(1, 43135, '\p{^Is_Block=saurashtra}', "");
Expect(1, 43135, '\P{Is_Block=saurashtra}', "");
Expect(0, 43135, '\P{^Is_Block=saurashtra}', "");
Expect(1, 43231, '\p{Is_Block:-saurashtra}', "");
Expect(0, 43231, '\p{^Is_Block:-saurashtra}', "");
Expect(0, 43231, '\P{Is_Block:-saurashtra}', "");
Expect(1, 43231, '\P{^Is_Block:-saurashtra}', "");
Expect(0, 43135, '\p{Is_Block:-saurashtra}', "");
Expect(1, 43135, '\p{^Is_Block:-saurashtra}', "");
Expect(1, 43135, '\P{Is_Block:-saurashtra}', "");
Expect(0, 43135, '\P{^Is_Block:-saurashtra}', "");
Error('\p{Is_Blk=	/a/Saurashtra}');
Error('\P{Is_Blk=	/a/Saurashtra}');
Expect(1, 43231, '\p{Is_Blk=saurashtra}', "");
Expect(0, 43231, '\p{^Is_Blk=saurashtra}', "");
Expect(0, 43231, '\P{Is_Blk=saurashtra}', "");
Expect(1, 43231, '\P{^Is_Blk=saurashtra}', "");
Expect(0, 43135, '\p{Is_Blk=saurashtra}', "");
Expect(1, 43135, '\p{^Is_Blk=saurashtra}', "");
Expect(1, 43135, '\P{Is_Blk=saurashtra}', "");
Expect(0, 43135, '\P{^Is_Blk=saurashtra}', "");
Expect(1, 43231, '\p{Is_Blk=-	saurashtra}', "");
Expect(0, 43231, '\p{^Is_Blk=-	saurashtra}', "");
Expect(0, 43231, '\P{Is_Blk=-	saurashtra}', "");
Expect(1, 43231, '\P{^Is_Blk=-	saurashtra}', "");
Expect(0, 43135, '\p{Is_Blk=-	saurashtra}', "");
Expect(1, 43135, '\p{^Is_Blk=-	saurashtra}', "");
Expect(1, 43135, '\P{Is_Blk=-	saurashtra}', "");
Expect(0, 43135, '\P{^Is_Blk=-	saurashtra}', "");
Error('\p{Block=/a/-gujarati}');
Error('\P{Block=/a/-gujarati}');
Expect(1, 2815, '\p{Block=gujarati}', "");
Expect(0, 2815, '\p{^Block=gujarati}', "");
Expect(0, 2815, '\P{Block=gujarati}', "");
Expect(1, 2815, '\P{^Block=gujarati}', "");
Expect(0, 2687, '\p{Block=gujarati}', "");
Expect(1, 2687, '\p{^Block=gujarati}', "");
Expect(1, 2687, '\P{Block=gujarati}', "");
Expect(0, 2687, '\P{^Block=gujarati}', "");
Expect(1, 2815, '\p{Block= Gujarati}', "");
Expect(0, 2815, '\p{^Block= Gujarati}', "");
Expect(0, 2815, '\P{Block= Gujarati}', "");
Expect(1, 2815, '\P{^Block= Gujarati}', "");
Expect(0, 2687, '\p{Block= Gujarati}', "");
Expect(1, 2687, '\p{^Block= Gujarati}', "");
Expect(1, 2687, '\P{Block= Gujarati}', "");
Expect(0, 2687, '\P{^Block= Gujarati}', "");
Error('\p{Blk=	:=gujarati}');
Error('\P{Blk=	:=gujarati}');
Expect(1, 2815, '\p{Blk=gujarati}', "");
Expect(0, 2815, '\p{^Blk=gujarati}', "");
Expect(0, 2815, '\P{Blk=gujarati}', "");
Expect(1, 2815, '\P{^Blk=gujarati}', "");
Expect(0, 2687, '\p{Blk=gujarati}', "");
Expect(1, 2687, '\p{^Blk=gujarati}', "");
Expect(1, 2687, '\P{Blk=gujarati}', "");
Expect(0, 2687, '\P{^Blk=gujarati}', "");
Expect(1, 2815, '\p{Blk= Gujarati}', "");
Expect(0, 2815, '\p{^Blk= Gujarati}', "");
Expect(0, 2815, '\P{Blk= Gujarati}', "");
Expect(1, 2815, '\P{^Blk= Gujarati}', "");
Expect(0, 2687, '\p{Blk= Gujarati}', "");
Expect(1, 2687, '\p{^Blk= Gujarati}', "");
Expect(1, 2687, '\P{Blk= Gujarati}', "");
Expect(0, 2687, '\P{^Blk= Gujarati}', "");
Error('\p{Is_Block=- GUJARATI:=}');
Error('\P{Is_Block=- GUJARATI:=}');
Expect(1, 2815, '\p{Is_Block=gujarati}', "");
Expect(0, 2815, '\p{^Is_Block=gujarati}', "");
Expect(0, 2815, '\P{Is_Block=gujarati}', "");
Expect(1, 2815, '\P{^Is_Block=gujarati}', "");
Expect(0, 2687, '\p{Is_Block=gujarati}', "");
Expect(1, 2687, '\p{^Is_Block=gujarati}', "");
Expect(1, 2687, '\P{Is_Block=gujarati}', "");
Expect(0, 2687, '\P{^Is_Block=gujarati}', "");
Expect(1, 2815, '\p{Is_Block: -	Gujarati}', "");
Expect(0, 2815, '\p{^Is_Block: -	Gujarati}', "");
Expect(0, 2815, '\P{Is_Block: -	Gujarati}', "");
Expect(1, 2815, '\P{^Is_Block: -	Gujarati}', "");
Expect(0, 2687, '\p{Is_Block: -	Gujarati}', "");
Expect(1, 2687, '\p{^Is_Block: -	Gujarati}', "");
Expect(1, 2687, '\P{Is_Block: -	Gujarati}', "");
Expect(0, 2687, '\P{^Is_Block: -	Gujarati}', "");
Error('\p{Is_Blk:	/a/ 	GUJARATI}');
Error('\P{Is_Blk:	/a/ 	GUJARATI}');
Expect(1, 2815, '\p{Is_Blk=gujarati}', "");
Expect(0, 2815, '\p{^Is_Blk=gujarati}', "");
Expect(0, 2815, '\P{Is_Blk=gujarati}', "");
Expect(1, 2815, '\P{^Is_Blk=gujarati}', "");
Expect(0, 2687, '\p{Is_Blk=gujarati}', "");
Expect(1, 2687, '\p{^Is_Blk=gujarati}', "");
Expect(1, 2687, '\P{Is_Blk=gujarati}', "");
Expect(0, 2687, '\P{^Is_Blk=gujarati}', "");
Expect(1, 2815, '\p{Is_Blk=_gujarati}', "");
Expect(0, 2815, '\p{^Is_Blk=_gujarati}', "");
Expect(0, 2815, '\P{Is_Blk=_gujarati}', "");
Expect(1, 2815, '\P{^Is_Blk=_gujarati}', "");
Expect(0, 2687, '\p{Is_Blk=_gujarati}', "");
Expect(1, 2687, '\p{^Is_Blk=_gujarati}', "");
Expect(1, 2687, '\P{Is_Blk=_gujarati}', "");
Expect(0, 2687, '\P{^Is_Blk=_gujarati}', "");
Error('\p{Block: -	Telugu/a/}');
Error('\P{Block: -	Telugu/a/}');
Expect(1, 3199, '\p{Block=telugu}', "");
Expect(0, 3199, '\p{^Block=telugu}', "");
Expect(0, 3199, '\P{Block=telugu}', "");
Expect(1, 3199, '\P{^Block=telugu}', "");
Expect(0, 3071, '\p{Block=telugu}', "");
Expect(1, 3071, '\p{^Block=telugu}', "");
Expect(1, 3071, '\P{Block=telugu}', "");
Expect(0, 3071, '\P{^Block=telugu}', "");
Expect(1, 3199, '\p{Block=  Telugu}', "");
Expect(0, 3199, '\p{^Block=  Telugu}', "");
Expect(0, 3199, '\P{Block=  Telugu}', "");
Expect(1, 3199, '\P{^Block=  Telugu}', "");
Expect(0, 3071, '\p{Block=  Telugu}', "");
Expect(1, 3071, '\p{^Block=  Telugu}', "");
Expect(1, 3071, '\P{Block=  Telugu}', "");
Expect(0, 3071, '\P{^Block=  Telugu}', "");
Error('\p{Blk: 	:=TELUGU}');
Error('\P{Blk: 	:=TELUGU}');
Expect(1, 3199, '\p{Blk=telugu}', "");
Expect(0, 3199, '\p{^Blk=telugu}', "");
Expect(0, 3199, '\P{Blk=telugu}', "");
Expect(1, 3199, '\P{^Blk=telugu}', "");
Expect(0, 3071, '\p{Blk=telugu}', "");
Expect(1, 3071, '\p{^Blk=telugu}', "");
Expect(1, 3071, '\P{Blk=telugu}', "");
Expect(0, 3071, '\P{^Blk=telugu}', "");
Expect(1, 3199, '\p{Blk:	- TELUGU}', "");
Expect(0, 3199, '\p{^Blk:	- TELUGU}', "");
Expect(0, 3199, '\P{Blk:	- TELUGU}', "");
Expect(1, 3199, '\P{^Blk:	- TELUGU}', "");
Expect(0, 3071, '\p{Blk:	- TELUGU}', "");
Expect(1, 3071, '\p{^Blk:	- TELUGU}', "");
Expect(1, 3071, '\P{Blk:	- TELUGU}', "");
Expect(0, 3071, '\P{^Blk:	- TELUGU}', "");
Error('\p{Is_Block=:=	_TELUGU}');
Error('\P{Is_Block=:=	_TELUGU}');
Expect(1, 3199, '\p{Is_Block=telugu}', "");
Expect(0, 3199, '\p{^Is_Block=telugu}', "");
Expect(0, 3199, '\P{Is_Block=telugu}', "");
Expect(1, 3199, '\P{^Is_Block=telugu}', "");
Expect(0, 3071, '\p{Is_Block=telugu}', "");
Expect(1, 3071, '\p{^Is_Block=telugu}', "");
Expect(1, 3071, '\P{Is_Block=telugu}', "");
Expect(0, 3071, '\P{^Is_Block=telugu}', "");
Expect(1, 3199, '\p{Is_Block: _telugu}', "");
Expect(0, 3199, '\p{^Is_Block: _telugu}', "");
Expect(0, 3199, '\P{Is_Block: _telugu}', "");
Expect(1, 3199, '\P{^Is_Block: _telugu}', "");
Expect(0, 3071, '\p{Is_Block: _telugu}', "");
Expect(1, 3071, '\p{^Is_Block: _telugu}', "");
Expect(1, 3071, '\P{Is_Block: _telugu}', "");
Expect(0, 3071, '\P{^Is_Block: _telugu}', "");
Error('\p{Is_Blk= /a/TELUGU}');
Error('\P{Is_Blk= /a/TELUGU}');
Expect(1, 3199, '\p{Is_Blk=telugu}', "");
Expect(0, 3199, '\p{^Is_Blk=telugu}', "");
Expect(0, 3199, '\P{Is_Blk=telugu}', "");
Expect(1, 3199, '\P{^Is_Blk=telugu}', "");
Expect(0, 3071, '\p{Is_Blk=telugu}', "");
Expect(1, 3071, '\p{^Is_Blk=telugu}', "");
Expect(1, 3071, '\P{Is_Blk=telugu}', "");
Expect(0, 3071, '\P{^Is_Blk=telugu}', "");
Expect(1, 3199, '\p{Is_Blk: 	Telugu}', "");
Expect(0, 3199, '\p{^Is_Blk: 	Telugu}', "");
Expect(0, 3199, '\P{Is_Blk: 	Telugu}', "");
Expect(1, 3199, '\P{^Is_Blk: 	Telugu}', "");
Expect(0, 3071, '\p{Is_Blk: 	Telugu}', "");
Expect(1, 3071, '\p{^Is_Blk: 	Telugu}', "");
Expect(1, 3071, '\P{Is_Blk: 	Telugu}', "");
Expect(0, 3071, '\P{^Is_Blk: 	Telugu}', "");
Error('\p{Block= :=Yi_Radicals}');
Error('\P{Block= :=Yi_Radicals}');
Expect(1, 42191, '\p{Block=yiradicals}', "");
Expect(0, 42191, '\p{^Block=yiradicals}', "");
Expect(0, 42191, '\P{Block=yiradicals}', "");
Expect(1, 42191, '\P{^Block=yiradicals}', "");
Expect(0, 42127, '\p{Block=yiradicals}', "");
Expect(1, 42127, '\p{^Block=yiradicals}', "");
Expect(1, 42127, '\P{Block=yiradicals}', "");
Expect(0, 42127, '\P{^Block=yiradicals}', "");
Expect(1, 42191, '\p{Block= yiRadicals}', "");
Expect(0, 42191, '\p{^Block= yiRadicals}', "");
Expect(0, 42191, '\P{Block= yiRadicals}', "");
Expect(1, 42191, '\P{^Block= yiRadicals}', "");
Expect(0, 42127, '\p{Block= yiRadicals}', "");
Expect(1, 42127, '\p{^Block= yiRadicals}', "");
Expect(1, 42127, '\P{Block= yiRadicals}', "");
Expect(0, 42127, '\P{^Block= yiRadicals}', "");
Error('\p{Blk=	YIradicals:=}');
Error('\P{Blk=	YIradicals:=}');
Expect(1, 42191, '\p{Blk=yiradicals}', "");
Expect(0, 42191, '\p{^Blk=yiradicals}', "");
Expect(0, 42191, '\P{Blk=yiradicals}', "");
Expect(1, 42191, '\P{^Blk=yiradicals}', "");
Expect(0, 42127, '\p{Blk=yiradicals}', "");
Expect(1, 42127, '\p{^Blk=yiradicals}', "");
Expect(1, 42127, '\P{Blk=yiradicals}', "");
Expect(0, 42127, '\P{^Blk=yiradicals}', "");
Expect(1, 42191, '\p{Blk=_	Yi-Radicals}', "");
Expect(0, 42191, '\p{^Blk=_	Yi-Radicals}', "");
Expect(0, 42191, '\P{Blk=_	Yi-Radicals}', "");
Expect(1, 42191, '\P{^Blk=_	Yi-Radicals}', "");
Expect(0, 42127, '\p{Blk=_	Yi-Radicals}', "");
Expect(1, 42127, '\p{^Blk=_	Yi-Radicals}', "");
Expect(1, 42127, '\P{Blk=_	Yi-Radicals}', "");
Expect(0, 42127, '\P{^Blk=_	Yi-Radicals}', "");
Error('\p{Is_Block=:= yi Radicals}');
Error('\P{Is_Block=:= yi Radicals}');
Expect(1, 42191, '\p{Is_Block=yiradicals}', "");
Expect(0, 42191, '\p{^Is_Block=yiradicals}', "");
Expect(0, 42191, '\P{Is_Block=yiradicals}', "");
Expect(1, 42191, '\P{^Is_Block=yiradicals}', "");
Expect(0, 42127, '\p{Is_Block=yiradicals}', "");
Expect(1, 42127, '\p{^Is_Block=yiradicals}', "");
Expect(1, 42127, '\P{Is_Block=yiradicals}', "");
Expect(0, 42127, '\P{^Is_Block=yiradicals}', "");
Expect(1, 42191, '\p{Is_Block=Yi Radicals}', "");
Expect(0, 42191, '\p{^Is_Block=Yi Radicals}', "");
Expect(0, 42191, '\P{Is_Block=Yi Radicals}', "");
Expect(1, 42191, '\P{^Is_Block=Yi Radicals}', "");
Expect(0, 42127, '\p{Is_Block=Yi Radicals}', "");
Expect(1, 42127, '\p{^Is_Block=Yi Radicals}', "");
Expect(1, 42127, '\P{Is_Block=Yi Radicals}', "");
Expect(0, 42127, '\P{^Is_Block=Yi Radicals}', "");
Error('\p{Is_Blk= :=Yi Radicals}');
Error('\P{Is_Blk= :=Yi Radicals}');
Expect(1, 42191, '\p{Is_Blk=yiradicals}', "");
Expect(0, 42191, '\p{^Is_Blk=yiradicals}', "");
Expect(0, 42191, '\P{Is_Blk=yiradicals}', "");
Expect(1, 42191, '\P{^Is_Blk=yiradicals}', "");
Expect(0, 42127, '\p{Is_Blk=yiradicals}', "");
Expect(1, 42127, '\p{^Is_Blk=yiradicals}', "");
Expect(1, 42127, '\P{Is_Blk=yiradicals}', "");
Expect(0, 42127, '\P{^Is_Blk=yiradicals}', "");
Expect(1, 42191, '\p{Is_Blk=-Yi radicals}', "");
Expect(0, 42191, '\p{^Is_Blk=-Yi radicals}', "");
Expect(0, 42191, '\P{Is_Blk=-Yi radicals}', "");
Expect(1, 42191, '\P{^Is_Blk=-Yi radicals}', "");
Expect(0, 42127, '\p{Is_Blk=-Yi radicals}', "");
Expect(1, 42127, '\p{^Is_Blk=-Yi radicals}', "");
Expect(1, 42127, '\P{Is_Blk=-Yi radicals}', "");
Expect(0, 42127, '\P{^Is_Blk=-Yi radicals}', "");
Error('\p{East_Asian_Width:	-	WIDE/a/}');
Error('\P{East_Asian_Width:	-	WIDE/a/}');
Expect(1, 4447, '\p{East_Asian_Width=wide}', "");
Expect(0, 4447, '\p{^East_Asian_Width=wide}', "");
Expect(0, 4447, '\P{East_Asian_Width=wide}', "");
Expect(1, 4447, '\P{^East_Asian_Width=wide}', "");
Expect(0, 4351, '\p{East_Asian_Width=wide}', "");
Expect(1, 4351, '\p{^East_Asian_Width=wide}', "");
Expect(1, 4351, '\P{East_Asian_Width=wide}', "");
Expect(0, 4351, '\P{^East_Asian_Width=wide}', "");
Expect(1, 4447, '\p{East_Asian_Width= Wide}', "");
Expect(0, 4447, '\p{^East_Asian_Width= Wide}', "");
Expect(0, 4447, '\P{East_Asian_Width= Wide}', "");
Expect(1, 4447, '\P{^East_Asian_Width= Wide}', "");
Expect(0, 4351, '\p{East_Asian_Width= Wide}', "");
Expect(1, 4351, '\p{^East_Asian_Width= Wide}', "");
Expect(1, 4351, '\P{East_Asian_Width= Wide}', "");
Expect(0, 4351, '\P{^East_Asian_Width= Wide}', "");
Error('\p{Ea=/a/-W}');
Error('\P{Ea=/a/-W}');
Expect(1, 4447, '\p{Ea=w}', "");
Expect(0, 4447, '\p{^Ea=w}', "");
Expect(0, 4447, '\P{Ea=w}', "");
Expect(1, 4447, '\P{^Ea=w}', "");
Expect(0, 4351, '\p{Ea=w}', "");
Expect(1, 4351, '\p{^Ea=w}', "");
Expect(1, 4351, '\P{Ea=w}', "");
Expect(0, 4351, '\P{^Ea=w}', "");
Expect(1, 4447, '\p{Ea=	 W}', "");
Expect(0, 4447, '\p{^Ea=	 W}', "");
Expect(0, 4447, '\P{Ea=	 W}', "");
Expect(1, 4447, '\P{^Ea=	 W}', "");
Expect(0, 4351, '\p{Ea=	 W}', "");
Expect(1, 4351, '\p{^Ea=	 W}', "");
Expect(1, 4351, '\P{Ea=	 W}', "");
Expect(0, 4351, '\P{^Ea=	 W}', "");
Error('\p{Is_East_Asian_Width= _Wide/a/}');
Error('\P{Is_East_Asian_Width= _Wide/a/}');
Expect(1, 4447, '\p{Is_East_Asian_Width: wide}', "");
Expect(0, 4447, '\p{^Is_East_Asian_Width: wide}', "");
Expect(0, 4447, '\P{Is_East_Asian_Width: wide}', "");
Expect(1, 4447, '\P{^Is_East_Asian_Width: wide}', "");
Expect(0, 4351, '\p{Is_East_Asian_Width: wide}', "");
Expect(1, 4351, '\p{^Is_East_Asian_Width: wide}', "");
Expect(1, 4351, '\P{Is_East_Asian_Width: wide}', "");
Expect(0, 4351, '\P{^Is_East_Asian_Width: wide}', "");
Expect(1, 4447, '\p{Is_East_Asian_Width=- wide}', "");
Expect(0, 4447, '\p{^Is_East_Asian_Width=- wide}', "");
Expect(0, 4447, '\P{Is_East_Asian_Width=- wide}', "");
Expect(1, 4447, '\P{^Is_East_Asian_Width=- wide}', "");
Expect(0, 4351, '\p{Is_East_Asian_Width=- wide}', "");
Expect(1, 4351, '\p{^Is_East_Asian_Width=- wide}', "");
Expect(1, 4351, '\P{Is_East_Asian_Width=- wide}', "");
Expect(0, 4351, '\P{^Is_East_Asian_Width=- wide}', "");
Error('\p{Is_Ea=/a/	_w}');
Error('\P{Is_Ea=/a/	_w}');
Expect(1, 4447, '\p{Is_Ea=w}', "");
Expect(0, 4447, '\p{^Is_Ea=w}', "");
Expect(0, 4447, '\P{Is_Ea=w}', "");
Expect(1, 4447, '\P{^Is_Ea=w}', "");
Expect(0, 4351, '\p{Is_Ea=w}', "");
Expect(1, 4351, '\p{^Is_Ea=w}', "");
Expect(1, 4351, '\P{Is_Ea=w}', "");
Expect(0, 4351, '\P{^Is_Ea=w}', "");
Expect(1, 4447, '\p{Is_Ea=	W}', "");
Expect(0, 4447, '\p{^Is_Ea=	W}', "");
Expect(0, 4447, '\P{Is_Ea=	W}', "");
Expect(1, 4447, '\P{^Is_Ea=	W}', "");
Expect(0, 4351, '\p{Is_Ea=	W}', "");
Expect(1, 4351, '\p{^Is_Ea=	W}', "");
Expect(1, 4351, '\P{Is_Ea=	W}', "");
Expect(0, 4351, '\P{^Is_Ea=	W}', "");
Error('\p{East_Asian_Width=/a/		fullwidth}');
Error('\P{East_Asian_Width=/a/		fullwidth}');
Expect(1, 12288, '\p{East_Asian_Width=fullwidth}', "");
Expect(0, 12288, '\p{^East_Asian_Width=fullwidth}', "");
Expect(0, 12288, '\P{East_Asian_Width=fullwidth}', "");
Expect(1, 12288, '\P{^East_Asian_Width=fullwidth}', "");
Expect(0, 12287, '\p{East_Asian_Width=fullwidth}', "");
Expect(1, 12287, '\p{^East_Asian_Width=fullwidth}', "");
Expect(1, 12287, '\P{East_Asian_Width=fullwidth}', "");
Expect(0, 12287, '\P{^East_Asian_Width=fullwidth}', "");
Expect(1, 12288, '\p{East_Asian_Width: 	 FULLWIDTH}', "");
Expect(0, 12288, '\p{^East_Asian_Width: 	 FULLWIDTH}', "");
Expect(0, 12288, '\P{East_Asian_Width: 	 FULLWIDTH}', "");
Expect(1, 12288, '\P{^East_Asian_Width: 	 FULLWIDTH}', "");
Expect(0, 12287, '\p{East_Asian_Width: 	 FULLWIDTH}', "");
Expect(1, 12287, '\p{^East_Asian_Width: 	 FULLWIDTH}', "");
Expect(1, 12287, '\P{East_Asian_Width: 	 FULLWIDTH}', "");
Expect(0, 12287, '\P{^East_Asian_Width: 	 FULLWIDTH}', "");
Error('\p{Ea=_:=F}');
Error('\P{Ea=_:=F}');
Expect(1, 12288, '\p{Ea=f}', "");
Expect(0, 12288, '\p{^Ea=f}', "");
Expect(0, 12288, '\P{Ea=f}', "");
Expect(1, 12288, '\P{^Ea=f}', "");
Expect(0, 12287, '\p{Ea=f}', "");
Expect(1, 12287, '\p{^Ea=f}', "");
Expect(1, 12287, '\P{Ea=f}', "");
Expect(0, 12287, '\P{^Ea=f}', "");
Expect(1, 12288, '\p{Ea=--f}', "");
Expect(0, 12288, '\p{^Ea=--f}', "");
Expect(0, 12288, '\P{Ea=--f}', "");
Expect(1, 12288, '\P{^Ea=--f}', "");
Expect(0, 12287, '\p{Ea=--f}', "");
Expect(1, 12287, '\p{^Ea=--f}', "");
Expect(1, 12287, '\P{Ea=--f}', "");
Expect(0, 12287, '\P{^Ea=--f}', "");
Error('\p{Is_East_Asian_Width=	 Fullwidth:=}');
Error('\P{Is_East_Asian_Width=	 Fullwidth:=}');
Expect(1, 12288, '\p{Is_East_Asian_Width=fullwidth}', "");
Expect(0, 12288, '\p{^Is_East_Asian_Width=fullwidth}', "");
Expect(0, 12288, '\P{Is_East_Asian_Width=fullwidth}', "");
Expect(1, 12288, '\P{^Is_East_Asian_Width=fullwidth}', "");
Expect(0, 12287, '\p{Is_East_Asian_Width=fullwidth}', "");
Expect(1, 12287, '\p{^Is_East_Asian_Width=fullwidth}', "");
Expect(1, 12287, '\P{Is_East_Asian_Width=fullwidth}', "");
Expect(0, 12287, '\P{^Is_East_Asian_Width=fullwidth}', "");
Expect(1, 12288, '\p{Is_East_Asian_Width=  fullwidth}', "");
Expect(0, 12288, '\p{^Is_East_Asian_Width=  fullwidth}', "");
Expect(0, 12288, '\P{Is_East_Asian_Width=  fullwidth}', "");
Expect(1, 12288, '\P{^Is_East_Asian_Width=  fullwidth}', "");
Expect(0, 12287, '\p{Is_East_Asian_Width=  fullwidth}', "");
Expect(1, 12287, '\p{^Is_East_Asian_Width=  fullwidth}', "");
Expect(1, 12287, '\P{Is_East_Asian_Width=  fullwidth}', "");
Expect(0, 12287, '\P{^Is_East_Asian_Width=  fullwidth}', "");
Error('\p{Is_Ea=-/a/f}');
Error('\P{Is_Ea=-/a/f}');
Expect(1, 12288, '\p{Is_Ea=f}', "");
Expect(0, 12288, '\p{^Is_Ea=f}', "");
Expect(0, 12288, '\P{Is_Ea=f}', "");
Expect(1, 12288, '\P{^Is_Ea=f}', "");
Expect(0, 12287, '\p{Is_Ea=f}', "");
Expect(1, 12287, '\p{^Is_Ea=f}', "");
Expect(1, 12287, '\P{Is_Ea=f}', "");
Expect(0, 12287, '\P{^Is_Ea=f}', "");
Expect(1, 12288, '\p{Is_Ea= 	F}', "");
Expect(0, 12288, '\p{^Is_Ea= 	F}', "");
Expect(0, 12288, '\P{Is_Ea= 	F}', "");
Expect(1, 12288, '\P{^Is_Ea= 	F}', "");
Expect(0, 12287, '\p{Is_Ea= 	F}', "");
Expect(1, 12287, '\p{^Is_Ea= 	F}', "");
Expect(1, 12287, '\P{Is_Ea= 	F}', "");
Expect(0, 12287, '\P{^Is_Ea= 	F}', "");
Error('\p{East_Asian_Width=	-Ambiguous/a/}');
Error('\P{East_Asian_Width=	-Ambiguous/a/}');
Expect(1, 161, '\p{East_Asian_Width=ambiguous}', "");
Expect(0, 161, '\p{^East_Asian_Width=ambiguous}', "");
Expect(0, 161, '\P{East_Asian_Width=ambiguous}', "");
Expect(1, 161, '\P{^East_Asian_Width=ambiguous}', "");
Expect(0, 160, '\p{East_Asian_Width=ambiguous}', "");
Expect(1, 160, '\p{^East_Asian_Width=ambiguous}', "");
Expect(1, 160, '\P{East_Asian_Width=ambiguous}', "");
Expect(0, 160, '\P{^East_Asian_Width=ambiguous}', "");
Expect(1, 161, '\p{East_Asian_Width=	-AMBIGUOUS}', "");
Expect(0, 161, '\p{^East_Asian_Width=	-AMBIGUOUS}', "");
Expect(0, 161, '\P{East_Asian_Width=	-AMBIGUOUS}', "");
Expect(1, 161, '\P{^East_Asian_Width=	-AMBIGUOUS}', "");
Expect(0, 160, '\p{East_Asian_Width=	-AMBIGUOUS}', "");
Expect(1, 160, '\p{^East_Asian_Width=	-AMBIGUOUS}', "");
Expect(1, 160, '\P{East_Asian_Width=	-AMBIGUOUS}', "");
Expect(0, 160, '\P{^East_Asian_Width=	-AMBIGUOUS}', "");
Error('\p{Ea:__A/a/}');
Error('\P{Ea:__A/a/}');
Expect(1, 161, '\p{Ea=a}', "");
Expect(0, 161, '\p{^Ea=a}', "");
Expect(0, 161, '\P{Ea=a}', "");
Expect(1, 161, '\P{^Ea=a}', "");
Expect(0, 160, '\p{Ea=a}', "");
Expect(1, 160, '\p{^Ea=a}', "");
Expect(1, 160, '\P{Ea=a}', "");
Expect(0, 160, '\P{^Ea=a}', "");
Expect(1, 161, '\p{Ea= 	a}', "");
Expect(0, 161, '\p{^Ea= 	a}', "");
Expect(0, 161, '\P{Ea= 	a}', "");
Expect(1, 161, '\P{^Ea= 	a}', "");
Expect(0, 160, '\p{Ea= 	a}', "");
Expect(1, 160, '\p{^Ea= 	a}', "");
Expect(1, 160, '\P{Ea= 	a}', "");
Expect(0, 160, '\P{^Ea= 	a}', "");
Error('\p{Is_East_Asian_Width=:=AMBIGUOUS}');
Error('\P{Is_East_Asian_Width=:=AMBIGUOUS}');
Expect(1, 161, '\p{Is_East_Asian_Width=ambiguous}', "");
Expect(0, 161, '\p{^Is_East_Asian_Width=ambiguous}', "");
Expect(0, 161, '\P{Is_East_Asian_Width=ambiguous}', "");
Expect(1, 161, '\P{^Is_East_Asian_Width=ambiguous}', "");
Expect(0, 160, '\p{Is_East_Asian_Width=ambiguous}', "");
Expect(1, 160, '\p{^Is_East_Asian_Width=ambiguous}', "");
Expect(1, 160, '\P{Is_East_Asian_Width=ambiguous}', "");
Expect(0, 160, '\P{^Is_East_Asian_Width=ambiguous}', "");
Expect(1, 161, '\p{Is_East_Asian_Width= Ambiguous}', "");
Expect(0, 161, '\p{^Is_East_Asian_Width= Ambiguous}', "");
Expect(0, 161, '\P{Is_East_Asian_Width= Ambiguous}', "");
Expect(1, 161, '\P{^Is_East_Asian_Width= Ambiguous}', "");
Expect(0, 160, '\p{Is_East_Asian_Width= Ambiguous}', "");
Expect(1, 160, '\p{^Is_East_Asian_Width= Ambiguous}', "");
Expect(1, 160, '\P{Is_East_Asian_Width= Ambiguous}', "");
Expect(0, 160, '\P{^Is_East_Asian_Width= Ambiguous}', "");
Error('\p{Is_Ea=	:=A}');
Error('\P{Is_Ea=	:=A}');
Expect(1, 161, '\p{Is_Ea=a}', "");
Expect(0, 161, '\p{^Is_Ea=a}', "");
Expect(0, 161, '\P{Is_Ea=a}', "");
Expect(1, 161, '\P{^Is_Ea=a}', "");
Expect(0, 160, '\p{Is_Ea=a}', "");
Expect(1, 160, '\p{^Is_Ea=a}', "");
Expect(1, 160, '\P{Is_Ea=a}', "");
Expect(0, 160, '\P{^Is_Ea=a}', "");
Expect(1, 161, '\p{Is_Ea= A}', "");
Expect(0, 161, '\p{^Is_Ea= A}', "");
Expect(0, 161, '\P{Is_Ea= A}', "");
Expect(1, 161, '\P{^Is_Ea= A}', "");
Expect(0, 160, '\p{Is_Ea= A}', "");
Expect(1, 160, '\p{^Is_Ea= A}', "");
Expect(1, 160, '\P{Is_Ea= A}', "");
Expect(0, 160, '\P{^Is_Ea= A}', "");
Error('\p{East_Asian_Width=_NARROW:=}');
Error('\P{East_Asian_Width=_NARROW:=}');
Expect(1, 126, '\p{East_Asian_Width=narrow}', "");
Expect(0, 126, '\p{^East_Asian_Width=narrow}', "");
Expect(0, 126, '\P{East_Asian_Width=narrow}', "");
Expect(1, 126, '\P{^East_Asian_Width=narrow}', "");
Expect(0, 31, '\p{East_Asian_Width=narrow}', "");
Expect(1, 31, '\p{^East_Asian_Width=narrow}', "");
Expect(1, 31, '\P{East_Asian_Width=narrow}', "");
Expect(0, 31, '\P{^East_Asian_Width=narrow}', "");
Expect(1, 126, '\p{East_Asian_Width=_-Narrow}', "");
Expect(0, 126, '\p{^East_Asian_Width=_-Narrow}', "");
Expect(0, 126, '\P{East_Asian_Width=_-Narrow}', "");
Expect(1, 126, '\P{^East_Asian_Width=_-Narrow}', "");
Expect(0, 31, '\p{East_Asian_Width=_-Narrow}', "");
Expect(1, 31, '\p{^East_Asian_Width=_-Narrow}', "");
Expect(1, 31, '\P{East_Asian_Width=_-Narrow}', "");
Expect(0, 31, '\P{^East_Asian_Width=_-Narrow}', "");
Error('\p{Ea=_Na/a/}');
Error('\P{Ea=_Na/a/}');
Expect(1, 126, '\p{Ea=na}', "");
Expect(0, 126, '\p{^Ea=na}', "");
Expect(0, 126, '\P{Ea=na}', "");
Expect(1, 126, '\P{^Ea=na}', "");
Expect(0, 31, '\p{Ea=na}', "");
Expect(1, 31, '\p{^Ea=na}', "");
Expect(1, 31, '\P{Ea=na}', "");
Expect(0, 31, '\P{^Ea=na}', "");
Error('\p{Is_East_Asian_Width=	/a/NARROW}');
Error('\P{Is_East_Asian_Width=	/a/NARROW}');
Expect(1, 126, '\p{Is_East_Asian_Width=narrow}', "");
Expect(0, 126, '\p{^Is_East_Asian_Width=narrow}', "");
Expect(0, 126, '\P{Is_East_Asian_Width=narrow}', "");
Expect(1, 126, '\P{^Is_East_Asian_Width=narrow}', "");
Expect(0, 31, '\p{Is_East_Asian_Width=narrow}', "");
Expect(1, 31, '\p{^Is_East_Asian_Width=narrow}', "");
Expect(1, 31, '\P{Is_East_Asian_Width=narrow}', "");
Expect(0, 31, '\P{^Is_East_Asian_Width=narrow}', "");
Expect(1, 126, '\p{Is_East_Asian_Width=-_Narrow}', "");
Expect(0, 126, '\p{^Is_East_Asian_Width=-_Narrow}', "");
Expect(0, 126, '\P{Is_East_Asian_Width=-_Narrow}', "");
Expect(1, 126, '\P{^Is_East_Asian_Width=-_Narrow}', "");
Expect(0, 31, '\p{Is_East_Asian_Width=-_Narrow}', "");
Expect(1, 31, '\p{^Is_East_Asian_Width=-_Narrow}', "");
Expect(1, 31, '\P{Is_East_Asian_Width=-_Narrow}', "");
Expect(0, 31, '\P{^Is_East_Asian_Width=-_Narrow}', "");
Error('\p{Is_Ea= _Na/a/}');
Error('\P{Is_Ea= _Na/a/}');
Expect(1, 126, '\p{Is_Ea:na}', "");
Expect(0, 126, '\p{^Is_Ea:na}', "");
Expect(0, 126, '\P{Is_Ea:na}', "");
Expect(1, 126, '\P{^Is_Ea:na}', "");
Expect(0, 31, '\p{Is_Ea:na}', "");
Expect(1, 31, '\p{^Is_Ea:na}', "");
Expect(1, 31, '\P{Is_Ea:na}', "");
Expect(0, 31, '\P{^Is_Ea:na}', "");
Expect(1, 126, '\p{Is_Ea=		Na}', "");
Expect(0, 126, '\p{^Is_Ea=		Na}', "");
Expect(0, 126, '\P{Is_Ea=		Na}', "");
Expect(1, 126, '\P{^Is_Ea=		Na}', "");
Expect(0, 31, '\p{Is_Ea=		Na}', "");
Expect(1, 31, '\p{^Is_Ea=		Na}', "");
Expect(1, 31, '\P{Is_Ea=		Na}', "");
Expect(0, 31, '\P{^Is_Ea=		Na}', "");
Error('\p{East_Asian_Width=--NEUTRAL/a/}');
Error('\P{East_Asian_Width=--NEUTRAL/a/}');
Expect(1, 31, '\p{East_Asian_Width=neutral}', "");
Expect(0, 31, '\p{^East_Asian_Width=neutral}', "");
Expect(0, 31, '\P{East_Asian_Width=neutral}', "");
Expect(1, 31, '\P{^East_Asian_Width=neutral}', "");
Expect(0, 126, '\p{East_Asian_Width=neutral}', "");
Expect(1, 126, '\p{^East_Asian_Width=neutral}', "");
Expect(1, 126, '\P{East_Asian_Width=neutral}', "");
Expect(0, 126, '\P{^East_Asian_Width=neutral}', "");
Expect(1, 31, '\p{East_Asian_Width=Neutral}', "");
Expect(0, 31, '\p{^East_Asian_Width=Neutral}', "");
Expect(0, 31, '\P{East_Asian_Width=Neutral}', "");
Expect(1, 31, '\P{^East_Asian_Width=Neutral}', "");
Expect(0, 126, '\p{East_Asian_Width=Neutral}', "");
Expect(1, 126, '\p{^East_Asian_Width=Neutral}', "");
Expect(1, 126, '\P{East_Asian_Width=Neutral}', "");
Expect(0, 126, '\P{^East_Asian_Width=Neutral}', "");
Error('\p{Ea=/a/	n}');
Error('\P{Ea=/a/	n}');
Expect(1, 31, '\p{Ea=n}', "");
Expect(0, 31, '\p{^Ea=n}', "");
Expect(0, 31, '\P{Ea=n}', "");
Expect(1, 31, '\P{^Ea=n}', "");
Expect(0, 126, '\p{Ea=n}', "");
Expect(1, 126, '\p{^Ea=n}', "");
Expect(1, 126, '\P{Ea=n}', "");
Expect(0, 126, '\P{^Ea=n}', "");
Expect(1, 31, '\p{Ea=- N}', "");
Expect(0, 31, '\p{^Ea=- N}', "");
Expect(0, 31, '\P{Ea=- N}', "");
Expect(1, 31, '\P{^Ea=- N}', "");
Expect(0, 126, '\p{Ea=- N}', "");
Expect(1, 126, '\p{^Ea=- N}', "");
Expect(1, 126, '\P{Ea=- N}', "");
Expect(0, 126, '\P{^Ea=- N}', "");
Error('\p{Is_East_Asian_Width=	:=Neutral}');
Error('\P{Is_East_Asian_Width=	:=Neutral}');
Expect(1, 31, '\p{Is_East_Asian_Width=neutral}', "");
Expect(0, 31, '\p{^Is_East_Asian_Width=neutral}', "");
Expect(0, 31, '\P{Is_East_Asian_Width=neutral}', "");
Expect(1, 31, '\P{^Is_East_Asian_Width=neutral}', "");
Expect(0, 126, '\p{Is_East_Asian_Width=neutral}', "");
Expect(1, 126, '\p{^Is_East_Asian_Width=neutral}', "");
Expect(1, 126, '\P{Is_East_Asian_Width=neutral}', "");
Expect(0, 126, '\P{^Is_East_Asian_Width=neutral}', "");
Expect(1, 31, '\p{Is_East_Asian_Width=_NEUTRAL}', "");
Expect(0, 31, '\p{^Is_East_Asian_Width=_NEUTRAL}', "");
Expect(0, 31, '\P{Is_East_Asian_Width=_NEUTRAL}', "");
Expect(1, 31, '\P{^Is_East_Asian_Width=_NEUTRAL}', "");
Expect(0, 126, '\p{Is_East_Asian_Width=_NEUTRAL}', "");
Expect(1, 126, '\p{^Is_East_Asian_Width=_NEUTRAL}', "");
Expect(1, 126, '\P{Is_East_Asian_Width=_NEUTRAL}', "");
Expect(0, 126, '\P{^Is_East_Asian_Width=_NEUTRAL}', "");
Error('\p{Is_Ea=:= N}');
Error('\P{Is_Ea=:= N}');
Expect(1, 31, '\p{Is_Ea=n}', "");
Expect(0, 31, '\p{^Is_Ea=n}', "");
Expect(0, 31, '\P{Is_Ea=n}', "");
Expect(1, 31, '\P{^Is_Ea=n}', "");
Expect(0, 126, '\p{Is_Ea=n}', "");
Expect(1, 126, '\p{^Is_Ea=n}', "");
Expect(1, 126, '\P{Is_Ea=n}', "");
Expect(0, 126, '\P{^Is_Ea=n}', "");
Expect(1, 31, '\p{Is_Ea=_N}', "");
Expect(0, 31, '\p{^Is_Ea=_N}', "");
Expect(0, 31, '\P{Is_Ea=_N}', "");
Expect(1, 31, '\P{^Is_Ea=_N}', "");
Expect(0, 126, '\p{Is_Ea=_N}', "");
Expect(1, 126, '\p{^Is_Ea=_N}', "");
Expect(1, 126, '\P{Is_Ea=_N}', "");
Expect(0, 126, '\P{^Is_Ea=_N}', "");
Error('\p{East_Asian_Width= /a/HALFWIDTH}');
Error('\P{East_Asian_Width= /a/HALFWIDTH}');
Expect(1, 8361, '\p{East_Asian_Width=halfwidth}', "");
Expect(0, 8361, '\p{^East_Asian_Width=halfwidth}', "");
Expect(0, 8361, '\P{East_Asian_Width=halfwidth}', "");
Expect(1, 8361, '\P{^East_Asian_Width=halfwidth}', "");
Expect(0, 8360, '\p{East_Asian_Width=halfwidth}', "");
Expect(1, 8360, '\p{^East_Asian_Width=halfwidth}', "");
Expect(1, 8360, '\P{East_Asian_Width=halfwidth}', "");
Expect(0, 8360, '\P{^East_Asian_Width=halfwidth}', "");
Expect(1, 8361, '\p{East_Asian_Width=_Halfwidth}', "");
Expect(0, 8361, '\p{^East_Asian_Width=_Halfwidth}', "");
Expect(0, 8361, '\P{East_Asian_Width=_Halfwidth}', "");
Expect(1, 8361, '\P{^East_Asian_Width=_Halfwidth}', "");
Expect(0, 8360, '\p{East_Asian_Width=_Halfwidth}', "");
Expect(1, 8360, '\p{^East_Asian_Width=_Halfwidth}', "");
Expect(1, 8360, '\P{East_Asian_Width=_Halfwidth}', "");
Expect(0, 8360, '\P{^East_Asian_Width=_Halfwidth}', "");
Error('\p{Ea=  H:=}');
Error('\P{Ea=  H:=}');
Expect(1, 8361, '\p{Ea=h}', "");
Expect(0, 8361, '\p{^Ea=h}', "");
Expect(0, 8361, '\P{Ea=h}', "");
Expect(1, 8361, '\P{^Ea=h}', "");
Expect(0, 8360, '\p{Ea=h}', "");
Expect(1, 8360, '\p{^Ea=h}', "");
Expect(1, 8360, '\P{Ea=h}', "");
Expect(0, 8360, '\P{^Ea=h}', "");
Expect(1, 8361, '\p{Ea=	-H}', "");
Expect(0, 8361, '\p{^Ea=	-H}', "");
Expect(0, 8361, '\P{Ea=	-H}', "");
Expect(1, 8361, '\P{^Ea=	-H}', "");
Expect(0, 8360, '\p{Ea=	-H}', "");
Expect(1, 8360, '\p{^Ea=	-H}', "");
Expect(1, 8360, '\P{Ea=	-H}', "");
Expect(0, 8360, '\P{^Ea=	-H}', "");
Error('\p{Is_East_Asian_Width=:=Halfwidth}');
Error('\P{Is_East_Asian_Width=:=Halfwidth}');
Expect(1, 8361, '\p{Is_East_Asian_Width=halfwidth}', "");
Expect(0, 8361, '\p{^Is_East_Asian_Width=halfwidth}', "");
Expect(0, 8361, '\P{Is_East_Asian_Width=halfwidth}', "");
Expect(1, 8361, '\P{^Is_East_Asian_Width=halfwidth}', "");
Expect(0, 8360, '\p{Is_East_Asian_Width=halfwidth}', "");
Expect(1, 8360, '\p{^Is_East_Asian_Width=halfwidth}', "");
Expect(1, 8360, '\P{Is_East_Asian_Width=halfwidth}', "");
Expect(0, 8360, '\P{^Is_East_Asian_Width=halfwidth}', "");
Expect(1, 8361, '\p{Is_East_Asian_Width=	_halfwidth}', "");
Expect(0, 8361, '\p{^Is_East_Asian_Width=	_halfwidth}', "");
Expect(0, 8361, '\P{Is_East_Asian_Width=	_halfwidth}', "");
Expect(1, 8361, '\P{^Is_East_Asian_Width=	_halfwidth}', "");
Expect(0, 8360, '\p{Is_East_Asian_Width=	_halfwidth}', "");
Expect(1, 8360, '\p{^Is_East_Asian_Width=	_halfwidth}', "");
Expect(1, 8360, '\P{Is_East_Asian_Width=	_halfwidth}', "");
Expect(0, 8360, '\P{^Is_East_Asian_Width=	_halfwidth}', "");
Error('\p{Is_Ea=/a/H}');
Error('\P{Is_Ea=/a/H}');
Expect(1, 8361, '\p{Is_Ea=h}', "");
Expect(0, 8361, '\p{^Is_Ea=h}', "");
Expect(0, 8361, '\P{Is_Ea=h}', "");
Expect(1, 8361, '\P{^Is_Ea=h}', "");
Expect(0, 8360, '\p{Is_Ea=h}', "");
Expect(1, 8360, '\p{^Is_Ea=h}', "");
Expect(1, 8360, '\P{Is_Ea=h}', "");
Expect(0, 8360, '\P{^Is_Ea=h}', "");
Expect(1, 8361, '\p{Is_Ea= 	H}', "");
Expect(0, 8361, '\p{^Is_Ea= 	H}', "");
Expect(0, 8361, '\P{Is_Ea= 	H}', "");
Expect(1, 8361, '\P{^Is_Ea= 	H}', "");
Expect(0, 8360, '\p{Is_Ea= 	H}', "");
Expect(1, 8360, '\p{^Is_Ea= 	H}', "");
Expect(1, 8360, '\P{Is_Ea= 	H}', "");
Expect(0, 8360, '\P{^Is_Ea= 	H}', "");
Error('\p{ASCII_Hex_Digit=/a/ _Yes}');
Error('\P{ASCII_Hex_Digit=/a/ _Yes}');
Expect(1, 57, '\p{ASCII_Hex_Digit=yes}', "");
Expect(0, 57, '\p{^ASCII_Hex_Digit=yes}', "");
Expect(0, 57, '\P{ASCII_Hex_Digit=yes}', "");
Expect(1, 57, '\P{^ASCII_Hex_Digit=yes}', "");
Expect(0, 47, '\p{ASCII_Hex_Digit=yes}', "");
Expect(1, 47, '\p{^ASCII_Hex_Digit=yes}', "");
Expect(1, 47, '\P{ASCII_Hex_Digit=yes}', "");
Expect(0, 47, '\P{^ASCII_Hex_Digit=yes}', "");
Expect(1, 57, '\p{ASCII_Hex_Digit: 		Yes}', "");
Expect(0, 57, '\p{^ASCII_Hex_Digit: 		Yes}', "");
Expect(0, 57, '\P{ASCII_Hex_Digit: 		Yes}', "");
Expect(1, 57, '\P{^ASCII_Hex_Digit: 		Yes}', "");
Expect(0, 47, '\p{ASCII_Hex_Digit: 		Yes}', "");
Expect(1, 47, '\p{^ASCII_Hex_Digit: 		Yes}', "");
Expect(1, 47, '\P{ASCII_Hex_Digit: 		Yes}', "");
Expect(0, 47, '\P{^ASCII_Hex_Digit: 		Yes}', "");
Error('\p{AHex=/a/		Y}');
Error('\P{AHex=/a/		Y}');
Expect(1, 57, '\p{AHex=y}', "");
Expect(0, 57, '\p{^AHex=y}', "");
Expect(0, 57, '\P{AHex=y}', "");
Expect(1, 57, '\P{^AHex=y}', "");
Expect(0, 47, '\p{AHex=y}', "");
Expect(1, 47, '\p{^AHex=y}', "");
Expect(1, 47, '\P{AHex=y}', "");
Expect(0, 47, '\P{^AHex=y}', "");
Expect(1, 57, '\p{AHex=-_Y}', "");
Expect(0, 57, '\p{^AHex=-_Y}', "");
Expect(0, 57, '\P{AHex=-_Y}', "");
Expect(1, 57, '\P{^AHex=-_Y}', "");
Expect(0, 47, '\p{AHex=-_Y}', "");
Expect(1, 47, '\p{^AHex=-_Y}', "");
Expect(1, 47, '\P{AHex=-_Y}', "");
Expect(0, 47, '\P{^AHex=-_Y}', "");
Error('\p{Is_ASCII_Hex_Digit=_:=t}');
Error('\P{Is_ASCII_Hex_Digit=_:=t}');
Expect(1, 57, '\p{Is_ASCII_Hex_Digit:t}', "");
Expect(0, 57, '\p{^Is_ASCII_Hex_Digit:t}', "");
Expect(0, 57, '\P{Is_ASCII_Hex_Digit:t}', "");
Expect(1, 57, '\P{^Is_ASCII_Hex_Digit:t}', "");
Expect(0, 47, '\p{Is_ASCII_Hex_Digit:t}', "");
Expect(1, 47, '\p{^Is_ASCII_Hex_Digit:t}', "");
Expect(1, 47, '\P{Is_ASCII_Hex_Digit:t}', "");
Expect(0, 47, '\P{^Is_ASCII_Hex_Digit:t}', "");
Expect(1, 57, '\p{Is_ASCII_Hex_Digit= t}', "");
Expect(0, 57, '\p{^Is_ASCII_Hex_Digit= t}', "");
Expect(0, 57, '\P{Is_ASCII_Hex_Digit= t}', "");
Expect(1, 57, '\P{^Is_ASCII_Hex_Digit= t}', "");
Expect(0, 47, '\p{Is_ASCII_Hex_Digit= t}', "");
Expect(1, 47, '\p{^Is_ASCII_Hex_Digit= t}', "");
Expect(1, 47, '\P{Is_ASCII_Hex_Digit= t}', "");
Expect(0, 47, '\P{^Is_ASCII_Hex_Digit= t}', "");
Error('\p{Is_AHex=:=- True}');
Error('\P{Is_AHex=:=- True}');
Expect(1, 57, '\p{Is_AHex=true}', "");
Expect(0, 57, '\p{^Is_AHex=true}', "");
Expect(0, 57, '\P{Is_AHex=true}', "");
Expect(1, 57, '\P{^Is_AHex=true}', "");
Expect(0, 47, '\p{Is_AHex=true}', "");
Expect(1, 47, '\p{^Is_AHex=true}', "");
Expect(1, 47, '\P{Is_AHex=true}', "");
Expect(0, 47, '\P{^Is_AHex=true}', "");
Expect(1, 57, '\p{Is_AHex= -TRUE}', "");
Expect(0, 57, '\p{^Is_AHex= -TRUE}', "");
Expect(0, 57, '\P{Is_AHex= -TRUE}', "");
Expect(1, 57, '\P{^Is_AHex= -TRUE}', "");
Expect(0, 47, '\p{Is_AHex= -TRUE}', "");
Expect(1, 47, '\p{^Is_AHex= -TRUE}', "");
Expect(1, 47, '\P{Is_AHex= -TRUE}', "");
Expect(0, 47, '\P{^Is_AHex= -TRUE}', "");
Error('\p{ASCII_Hex_Digit:    /a/No}');
Error('\P{ASCII_Hex_Digit:    /a/No}');
Expect(1, 47, '\p{ASCII_Hex_Digit=no}', "");
Expect(0, 47, '\p{^ASCII_Hex_Digit=no}', "");
Expect(0, 47, '\P{ASCII_Hex_Digit=no}', "");
Expect(1, 47, '\P{^ASCII_Hex_Digit=no}', "");
Expect(0, 57, '\p{ASCII_Hex_Digit=no}', "");
Expect(1, 57, '\p{^ASCII_Hex_Digit=no}', "");
Expect(1, 57, '\P{ASCII_Hex_Digit=no}', "");
Expect(0, 57, '\P{^ASCII_Hex_Digit=no}', "");
Expect(1, 47, '\p{ASCII_Hex_Digit=	No}', "");
Expect(0, 47, '\p{^ASCII_Hex_Digit=	No}', "");
Expect(0, 47, '\P{ASCII_Hex_Digit=	No}', "");
Expect(1, 47, '\P{^ASCII_Hex_Digit=	No}', "");
Expect(0, 57, '\p{ASCII_Hex_Digit=	No}', "");
Expect(1, 57, '\p{^ASCII_Hex_Digit=	No}', "");
Expect(1, 57, '\P{ASCII_Hex_Digit=	No}', "");
Expect(0, 57, '\P{^ASCII_Hex_Digit=	No}', "");
Error('\p{AHex:	 :=N}');
Error('\P{AHex:	 :=N}');
Expect(1, 47, '\p{AHex=n}', "");
Expect(0, 47, '\p{^AHex=n}', "");
Expect(0, 47, '\P{AHex=n}', "");
Expect(1, 47, '\P{^AHex=n}', "");
Expect(0, 57, '\p{AHex=n}', "");
Expect(1, 57, '\p{^AHex=n}', "");
Expect(1, 57, '\P{AHex=n}', "");
Expect(0, 57, '\P{^AHex=n}', "");
Expect(1, 47, '\p{AHex=_n}', "");
Expect(0, 47, '\p{^AHex=_n}', "");
Expect(0, 47, '\P{AHex=_n}', "");
Expect(1, 47, '\P{^AHex=_n}', "");
Expect(0, 57, '\p{AHex=_n}', "");
Expect(1, 57, '\p{^AHex=_n}', "");
Expect(1, 57, '\P{AHex=_n}', "");
Expect(0, 57, '\P{^AHex=_n}', "");
Error('\p{Is_ASCII_Hex_Digit=-/a/F}');
Error('\P{Is_ASCII_Hex_Digit=-/a/F}');
Expect(1, 47, '\p{Is_ASCII_Hex_Digit=f}', "");
Expect(0, 47, '\p{^Is_ASCII_Hex_Digit=f}', "");
Expect(0, 47, '\P{Is_ASCII_Hex_Digit=f}', "");
Expect(1, 47, '\P{^Is_ASCII_Hex_Digit=f}', "");
Expect(0, 57, '\p{Is_ASCII_Hex_Digit=f}', "");
Expect(1, 57, '\p{^Is_ASCII_Hex_Digit=f}', "");
Expect(1, 57, '\P{Is_ASCII_Hex_Digit=f}', "");
Expect(0, 57, '\P{^Is_ASCII_Hex_Digit=f}', "");
Expect(1, 47, '\p{Is_ASCII_Hex_Digit:    -F}', "");
Expect(0, 47, '\p{^Is_ASCII_Hex_Digit:    -F}', "");
Expect(0, 47, '\P{Is_ASCII_Hex_Digit:    -F}', "");
Expect(1, 47, '\P{^Is_ASCII_Hex_Digit:    -F}', "");
Expect(0, 57, '\p{Is_ASCII_Hex_Digit:    -F}', "");
Expect(1, 57, '\p{^Is_ASCII_Hex_Digit:    -F}', "");
Expect(1, 57, '\P{Is_ASCII_Hex_Digit:    -F}', "");
Expect(0, 57, '\P{^Is_ASCII_Hex_Digit:    -F}', "");
Error('\p{Is_AHex=:=-_false}');
Error('\P{Is_AHex=:=-_false}');
Expect(1, 47, '\p{Is_AHex=false}', "");
Expect(0, 47, '\p{^Is_AHex=false}', "");
Expect(0, 47, '\P{Is_AHex=false}', "");
Expect(1, 47, '\P{^Is_AHex=false}', "");
Expect(0, 57, '\p{Is_AHex=false}', "");
Expect(1, 57, '\p{^Is_AHex=false}', "");
Expect(1, 57, '\P{Is_AHex=false}', "");
Expect(0, 57, '\P{^Is_AHex=false}', "");
Error('\p{Present_In=--+00	00	000003.2/a/}');
Error('\P{Present_In=--+00	00	000003.2/a/}');
Expect(1, 544, '\p{Present_In=+3.2}', "");
Expect(0, 544, '\p{^Present_In=+3.2}', "");
Expect(0, 544, '\P{Present_In=+3.2}', "");
Expect(1, 544, '\P{^Present_In=+3.2}', "");
Expect(0, 545, '\p{Present_In=+3.2}', "");
Expect(1, 545, '\p{^Present_In=+3.2}', "");
Expect(1, 545, '\P{Present_In=+3.2}', "");
Expect(0, 545, '\P{^Present_In=+3.2}', "");
Error('\p{In=__00/a/3.2}');
Error('\P{In=__00/a/3.2}');
Expect(1, 544, '\p{In=+000_3.2}', "");
Expect(0, 544, '\p{^In=+000_3.2}', "");
Expect(0, 544, '\P{In=+000_3.2}', "");
Expect(1, 544, '\P{^In=+000_3.2}', "");
Expect(0, 545, '\p{In=+000_3.2}', "");
Expect(1, 545, '\p{^In=+000_3.2}', "");
Expect(1, 545, '\P{In=+000_3.2}', "");
Expect(0, 545, '\P{^In=+000_3.2}', "");
Error('\p{Present_In=	/a/+0002.0}');
Error('\P{Present_In=	/a/+0002.0}');
Expect(1, 501, '\p{Present_In=000002.0}', "");
Expect(0, 501, '\p{^Present_In=000002.0}', "");
Expect(0, 501, '\P{Present_In=000002.0}', "");
Expect(1, 501, '\P{^Present_In=000002.0}', "");
Expect(0, 505, '\p{Present_In=000002.0}', "");
Expect(1, 505, '\p{^Present_In=000002.0}', "");
Expect(1, 505, '\P{Present_In=000002.0}', "");
Expect(0, 505, '\P{^Present_In=000002.0}', "");
Error('\p{In= 	+0-000:=02.0}');
Error('\P{In= 	+0-000:=02.0}');
Expect(1, 501, '\p{In=+0000002.0}', "");
Expect(0, 501, '\p{^In=+0000002.0}', "");
Expect(0, 501, '\P{In=+0000002.0}', "");
Expect(1, 501, '\P{^In=+0000002.0}', "");
Expect(0, 505, '\p{In=+0000002.0}', "");
Expect(1, 505, '\p{^In=+0000002.0}', "");
Expect(1, 505, '\P{In=+0000002.0}', "");
Expect(0, 505, '\P{^In=+0000002.0}', "");
Error('\p{Present_In=--0000 0000/a/1.1}');
Error('\P{Present_In=--0000 0000/a/1.1}');
Expect(1, 501, '\p{Present_In=0000001.1}', "");
Expect(0, 501, '\p{^Present_In=0000001.1}', "");
Expect(0, 501, '\P{Present_In=0000001.1}', "");
Expect(1, 501, '\P{^Present_In=0000001.1}', "");
Expect(0, 505, '\p{Present_In=0000001.1}', "");
Expect(1, 505, '\p{^Present_In=0000001.1}', "");
Expect(1, 505, '\P{Present_In=0000001.1}', "");
Expect(0, 505, '\P{^Present_In=0000001.1}', "");
Error('\p{In= /a/0 0-01.1}');
Error('\P{In= /a/0 0-01.1}');
Expect(1, 501, '\p{In=1.1}', "");
Expect(0, 501, '\p{^In=1.1}', "");
Expect(0, 501, '\P{In=1.1}', "");
Expect(1, 501, '\P{^In=1.1}', "");
Expect(0, 505, '\p{In=1.1}', "");
Expect(1, 505, '\p{^In=1.1}', "");
Expect(1, 505, '\P{In=1.1}', "");
Expect(0, 505, '\P{^In=1.1}', "");
Error('\p{Present_In=	+000005.0:=}');
Error('\P{Present_In=	+000005.0:=}');
Expect(1, 879, '\p{Present_In=0_5.0}', "");
Expect(0, 879, '\p{^Present_In=0_5.0}', "");
Expect(0, 879, '\P{Present_In=0_5.0}', "");
Expect(1, 879, '\P{^Present_In=0_5.0}', "");
Expect(0, 883, '\p{Present_In=0_5.0}', "");
Expect(1, 883, '\p{^Present_In=0_5.0}', "");
Expect(1, 883, '\P{Present_In=0_5.0}', "");
Expect(0, 883, '\P{^Present_In=0_5.0}', "");
Error('\p{In=  5.0:=}');
Error('\P{In=  5.0:=}');
Expect(1, 879, '\p{In=0_0_0_0_0_0_0_05.0}', "");
Expect(0, 879, '\p{^In=0_0_0_0_0_0_0_05.0}', "");
Expect(0, 879, '\P{In=0_0_0_0_0_0_0_05.0}', "");
Expect(1, 879, '\P{^In=0_0_0_0_0_0_0_05.0}', "");
Expect(0, 883, '\p{In=0_0_0_0_0_0_0_05.0}', "");
Expect(1, 883, '\p{^In=0_0_0_0_0_0_0_05.0}', "");
Expect(1, 883, '\P{In=0_0_0_0_0_0_0_05.0}', "");
Expect(0, 883, '\P{^In=0_0_0_0_0_0_0_05.0}', "");
Error('\p{Present_In=-/a/00000003.0}');
Error('\P{Present_In=-/a/00000003.0}');
Expect(1, 543, '\p{Present_In=0000000003.0}', "");
Expect(0, 543, '\p{^Present_In=0000000003.0}', "");
Expect(0, 543, '\P{Present_In=0000000003.0}', "");
Expect(1, 543, '\P{^Present_In=0000000003.0}', "");
Expect(0, 545, '\p{Present_In=0000000003.0}', "");
Expect(1, 545, '\p{^Present_In=0000000003.0}', "");
Expect(1, 545, '\P{Present_In=0000000003.0}', "");
Expect(0, 545, '\P{^Present_In=0000000003.0}', "");
Error('\p{In=/a/ 00003.0}');
Error('\P{In=/a/ 00003.0}');
Expect(1, 543, '\p{In=00000_3.0}', "");
Expect(0, 543, '\p{^In=00000_3.0}', "");
Expect(0, 543, '\P{In=00000_3.0}', "");
Expect(1, 543, '\P{^In=00000_3.0}', "");
Expect(0, 545, '\p{In=00000_3.0}', "");
Expect(1, 545, '\p{^In=00000_3.0}', "");
Expect(1, 545, '\P{In=00000_3.0}', "");
Expect(0, 545, '\P{^In=00000_3.0}', "");
Error('\p{Present_In=:=_ 006.0}');
Error('\P{Present_In=:=_ 006.0}');
Expect(1, 887, '\p{Present_In=00000_6.0}', "");
Expect(0, 887, '\p{^Present_In=00000_6.0}', "");
Expect(0, 887, '\P{Present_In=00000_6.0}', "");
Expect(1, 887, '\P{^Present_In=00000_6.0}', "");
Expect(0, 889, '\p{Present_In=00000_6.0}', "");
Expect(1, 889, '\p{^Present_In=00000_6.0}', "");
Expect(1, 889, '\P{Present_In=00000_6.0}', "");
Expect(0, 889, '\P{^Present_In=00000_6.0}', "");
Error('\p{In= :=+000000006.0}');
Error('\P{In= :=+000000006.0}');
Expect(1, 887, '\p{In=0_0_0_0_06.0}', "");
Expect(0, 887, '\p{^In=0_0_0_0_06.0}', "");
Expect(0, 887, '\P{In=0_0_0_0_06.0}', "");
Expect(1, 887, '\P{^In=0_0_0_0_06.0}', "");
Expect(0, 889, '\p{In=0_0_0_0_06.0}', "");
Expect(1, 889, '\p{^In=0_0_0_0_06.0}', "");
Expect(1, 889, '\P{In=0_0_0_0_06.0}', "");
Expect(0, 889, '\P{^In=0_0_0_0_06.0}', "");
Error('\p{Present_In=:=-	unassigned}');
Error('\P{Present_In=:=-	unassigned}');
Expect(1, 889, '\p{Present_In=unassigned}', "");
Expect(0, 889, '\p{^Present_In=unassigned}', "");
Expect(0, 889, '\P{Present_In=unassigned}', "");
Expect(1, 889, '\P{^Present_In=unassigned}', "");
Expect(0, 887, '\p{Present_In=unassigned}', "");
Expect(1, 887, '\p{^Present_In=unassigned}', "");
Expect(1, 887, '\P{Present_In=unassigned}', "");
Expect(0, 887, '\P{^Present_In=unassigned}', "");
Expect(1, 889, '\p{Present_In=__unassigned}', "");
Expect(0, 889, '\p{^Present_In=__unassigned}', "");
Expect(0, 889, '\P{Present_In=__unassigned}', "");
Expect(1, 889, '\P{^Present_In=__unassigned}', "");
Expect(0, 887, '\p{Present_In=__unassigned}', "");
Expect(1, 887, '\p{^Present_In=__unassigned}', "");
Expect(1, 887, '\P{Present_In=__unassigned}', "");
Expect(0, 887, '\P{^Present_In=__unassigned}', "");
Error('\p{In= unassigned/a/}');
Error('\P{In= unassigned/a/}');
Expect(1, 889, '\p{In=unassigned}', "");
Expect(0, 889, '\p{^In=unassigned}', "");
Expect(0, 889, '\P{In=unassigned}', "");
Expect(1, 889, '\P{^In=unassigned}', "");
Expect(0, 887, '\p{In=unassigned}', "");
Expect(1, 887, '\p{^In=unassigned}', "");
Expect(1, 887, '\P{In=unassigned}', "");
Expect(0, 887, '\P{^In=unassigned}', "");
Expect(1, 889, '\p{In=_-Unassigned}', "");
Expect(0, 889, '\p{^In=_-Unassigned}', "");
Expect(0, 889, '\P{In=_-Unassigned}', "");
Expect(1, 889, '\P{^In=_-Unassigned}', "");
Expect(0, 887, '\p{In=_-Unassigned}', "");
Expect(1, 887, '\p{^In=_-Unassigned}', "");
Expect(1, 887, '\P{In=_-Unassigned}', "");
Expect(0, 887, '\P{^In=_-Unassigned}', "");
Error('\p{Present_In=:=	 +5.1}');
Error('\P{Present_In=:=	 +5.1}');
Expect(1, 887, '\p{Present_In=0005.1}', "");
Expect(0, 887, '\p{^Present_In=0005.1}', "");
Expect(0, 887, '\P{Present_In=0005.1}', "");
Expect(1, 887, '\P{^Present_In=0005.1}', "");
Expect(0, 889, '\p{Present_In=0005.1}', "");
Expect(1, 889, '\p{^Present_In=0005.1}', "");
Expect(1, 889, '\P{Present_In=0005.1}', "");
Expect(0, 889, '\P{^Present_In=0005.1}', "");
Error('\p{In=	+00 0_0_0/a/005.1}');
Error('\P{In=	+00 0_0_0/a/005.1}');
Expect(1, 887, '\p{In=05.1}', "");
Expect(0, 887, '\p{^In=05.1}', "");
Expect(0, 887, '\P{In=05.1}', "");
Expect(1, 887, '\P{^In=05.1}', "");
Expect(0, 889, '\p{In=05.1}', "");
Expect(1, 889, '\p{^In=05.1}', "");
Expect(1, 889, '\P{In=05.1}', "");
Expect(0, 889, '\P{^In=05.1}', "");
Error('\p{Present_In=- +4.0/a/}');
Error('\P{Present_In=- +4.0/a/}');
Expect(1, 566, '\p{Present_In=4.0}', "");
Expect(0, 566, '\p{^Present_In=4.0}', "");
Expect(0, 566, '\P{Present_In=4.0}', "");
Expect(1, 566, '\P{^Present_In=4.0}', "");
Expect(0, 591, '\p{Present_In=4.0}', "");
Expect(1, 591, '\p{^Present_In=4.0}', "");
Expect(1, 591, '\P{Present_In=4.0}', "");
Expect(0, 591, '\P{^Present_In=4.0}', "");
Error('\p{In=:=--004.0}');
Error('\P{In=:=--004.0}');
Expect(1, 566, '\p{In=+0_0_0_0_0_04.0}', "");
Expect(0, 566, '\p{^In=+0_0_0_0_0_04.0}', "");
Expect(0, 566, '\P{In=+0_0_0_0_0_04.0}', "");
Expect(1, 566, '\P{^In=+0_0_0_0_0_04.0}', "");
Expect(0, 591, '\p{In=+0_0_0_0_0_04.0}', "");
Expect(1, 591, '\p{^In=+0_0_0_0_0_04.0}', "");
Expect(1, 591, '\P{In=+0_0_0_0_0_04.0}', "");
Expect(0, 591, '\P{^In=+0_0_0_0_0_04.0}', "");
Error('\p{Present_In=	/a/0000000005.2}');
Error('\P{Present_In=	/a/0000000005.2}');
Expect(1, 887, '\p{Present_In=00005.2}', "");
Expect(0, 887, '\p{^Present_In=00005.2}', "");
Expect(0, 887, '\P{Present_In=00005.2}', "");
Expect(1, 887, '\P{^Present_In=00005.2}', "");
Expect(0, 889, '\p{Present_In=00005.2}', "");
Expect(1, 889, '\p{^Present_In=00005.2}', "");
Expect(1, 889, '\P{Present_In=00005.2}', "");
Expect(0, 889, '\P{^Present_In=00005.2}', "");
Error('\p{In=	/a/+000000	5.2}');
Error('\P{In=	/a/+000000	5.2}');
Expect(1, 887, '\p{In=0000005.2}', "");
Expect(0, 887, '\p{^In=0000005.2}', "");
Expect(0, 887, '\P{In=0000005.2}', "");
Expect(1, 887, '\P{^In=0000005.2}', "");
Expect(0, 889, '\p{In=0000005.2}', "");
Expect(1, 889, '\p{^In=0000005.2}', "");
Expect(1, 889, '\P{In=0000005.2}', "");
Expect(0, 889, '\P{^In=0000005.2}', "");
Error('\p{Present_In=		00_3.1/a/}');
Error('\P{Present_In=		00_3.1/a/}');
Expect(1, 543, '\p{Present_In=+0_0_0_003.1}', "");
Expect(0, 543, '\p{^Present_In=+0_0_0_003.1}', "");
Expect(0, 543, '\P{Present_In=+0_0_0_003.1}', "");
Expect(1, 543, '\P{^Present_In=+0_0_0_003.1}', "");
Expect(0, 545, '\p{Present_In=+0_0_0_003.1}', "");
Expect(1, 545, '\p{^Present_In=+0_0_0_003.1}', "");
Expect(1, 545, '\P{Present_In=+0_0_0_003.1}', "");
Expect(0, 545, '\P{^Present_In=+0_0_0_003.1}', "");
Error('\p{In=-/a/00000003.1}');
Error('\P{In=-/a/00000003.1}');
Expect(1, 543, '\p{In=00000003.1}', "");
Expect(0, 543, '\p{^In=00000003.1}', "");
Expect(0, 543, '\P{In=00000003.1}', "");
Expect(1, 543, '\P{^In=00000003.1}', "");
Expect(0, 545, '\p{In=00000003.1}', "");
Expect(1, 545, '\p{^In=00000003.1}', "");
Expect(1, 545, '\P{In=00000003.1}', "");
Expect(0, 545, '\P{^In=00000003.1}', "");
Error('\p{Present_In=/a/-	0000-0000-02.1}');
Error('\P{Present_In=/a/-	0000-0000-02.1}');
Expect(1, 501, '\p{Present_In: 02.1}', "");
Expect(0, 501, '\p{^Present_In: 02.1}', "");
Expect(0, 501, '\P{Present_In: 02.1}', "");
Expect(1, 501, '\P{^Present_In: 02.1}', "");
Expect(0, 505, '\p{Present_In: 02.1}', "");
Expect(1, 505, '\p{^Present_In: 02.1}', "");
Expect(1, 505, '\P{Present_In: 02.1}', "");
Expect(0, 505, '\P{^Present_In: 02.1}', "");
Error('\p{In=_	000002.1:=}');
Error('\P{In=_	000002.1:=}');
Expect(1, 501, '\p{In=+2.1}', "");
Expect(0, 501, '\p{^In=+2.1}', "");
Expect(0, 501, '\P{In=+2.1}', "");
Expect(1, 501, '\P{^In=+2.1}', "");
Expect(0, 505, '\p{In=+2.1}', "");
Expect(1, 505, '\p{^In=+2.1}', "");
Expect(1, 505, '\P{In=+2.1}', "");
Expect(0, 505, '\P{^In=+2.1}', "");
Error('\p{Present_In=		+000000004.1:=}');
Error('\P{Present_In=		+000000004.1:=}');
Expect(1, 577, '\p{Present_In=00004.1}', "");
Expect(0, 577, '\p{^Present_In=00004.1}', "");
Expect(0, 577, '\P{Present_In=00004.1}', "");
Expect(1, 577, '\P{^Present_In=00004.1}', "");
Expect(0, 591, '\p{Present_In=00004.1}', "");
Expect(1, 591, '\p{^Present_In=00004.1}', "");
Expect(1, 591, '\P{Present_In=00004.1}', "");
Expect(0, 591, '\P{^Present_In=00004.1}', "");
Error('\p{In=/a/+000004.1}');
Error('\P{In=/a/+000004.1}');
Expect(1, 577, '\p{In=004.1}', "");
Expect(0, 577, '\p{^In=004.1}', "");
Expect(0, 577, '\P{In=004.1}', "");
Expect(1, 577, '\P{^In=004.1}', "");
Expect(0, 591, '\p{In=004.1}', "");
Expect(1, 591, '\p{^In=004.1}', "");
Expect(1, 591, '\P{In=004.1}', "");
Expect(0, 591, '\P{^In=004.1}', "");
Error('\p{Extender=_ YES:=}');
Error('\P{Extender=_ YES:=}');
Expect(1, 183, '\p{Extender=yes}', "");
Expect(0, 183, '\p{^Extender=yes}', "");
Expect(0, 183, '\P{Extender=yes}', "");
Expect(1, 183, '\P{^Extender=yes}', "");
Expect(0, 182, '\p{Extender=yes}', "");
Expect(1, 182, '\p{^Extender=yes}', "");
Expect(1, 182, '\P{Extender=yes}', "");
Expect(0, 182, '\P{^Extender=yes}', "");
Expect(1, 183, '\p{Extender=	Yes}', "");
Expect(0, 183, '\p{^Extender=	Yes}', "");
Expect(0, 183, '\P{Extender=	Yes}', "");
Expect(1, 183, '\P{^Extender=	Yes}', "");
Expect(0, 182, '\p{Extender=	Yes}', "");
Expect(1, 182, '\p{^Extender=	Yes}', "");
Expect(1, 182, '\P{Extender=	Yes}', "");
Expect(0, 182, '\P{^Extender=	Yes}', "");
Error('\p{Ext=/a/Y}');
Error('\P{Ext=/a/Y}');
Expect(1, 183, '\p{Ext=y}', "");
Expect(0, 183, '\p{^Ext=y}', "");
Expect(0, 183, '\P{Ext=y}', "");
Expect(1, 183, '\P{^Ext=y}', "");
Expect(0, 182, '\p{Ext=y}', "");
Expect(1, 182, '\p{^Ext=y}', "");
Expect(1, 182, '\P{Ext=y}', "");
Expect(0, 182, '\P{^Ext=y}', "");
Expect(1, 183, '\p{Ext=-Y}', "");
Expect(0, 183, '\p{^Ext=-Y}', "");
Expect(0, 183, '\P{Ext=-Y}', "");
Expect(1, 183, '\P{^Ext=-Y}', "");
Expect(0, 182, '\p{Ext=-Y}', "");
Expect(1, 182, '\p{^Ext=-Y}', "");
Expect(1, 182, '\P{Ext=-Y}', "");
Expect(0, 182, '\P{^Ext=-Y}', "");
Error('\p{Is_Extender=:=--t}');
Error('\P{Is_Extender=:=--t}');
Expect(1, 183, '\p{Is_Extender=t}', "");
Expect(0, 183, '\p{^Is_Extender=t}', "");
Expect(0, 183, '\P{Is_Extender=t}', "");
Expect(1, 183, '\P{^Is_Extender=t}', "");
Expect(0, 182, '\p{Is_Extender=t}', "");
Expect(1, 182, '\p{^Is_Extender=t}', "");
Expect(1, 182, '\P{Is_Extender=t}', "");
Expect(0, 182, '\P{^Is_Extender=t}', "");
Expect(1, 183, '\p{Is_Extender= _t}', "");
Expect(0, 183, '\p{^Is_Extender= _t}', "");
Expect(0, 183, '\P{Is_Extender= _t}', "");
Expect(1, 183, '\P{^Is_Extender= _t}', "");
Expect(0, 182, '\p{Is_Extender= _t}', "");
Expect(1, 182, '\p{^Is_Extender= _t}', "");
Expect(1, 182, '\P{Is_Extender= _t}', "");
Expect(0, 182, '\P{^Is_Extender= _t}', "");
Error('\p{Is_Ext=-true:=}');
Error('\P{Is_Ext=-true:=}');
Expect(1, 183, '\p{Is_Ext=true}', "");
Expect(0, 183, '\p{^Is_Ext=true}', "");
Expect(0, 183, '\P{Is_Ext=true}', "");
Expect(1, 183, '\P{^Is_Ext=true}', "");
Expect(0, 182, '\p{Is_Ext=true}', "");
Expect(1, 182, '\p{^Is_Ext=true}', "");
Expect(1, 182, '\P{Is_Ext=true}', "");
Expect(0, 182, '\P{^Is_Ext=true}', "");
Expect(1, 183, '\p{Is_Ext=	true}', "");
Expect(0, 183, '\p{^Is_Ext=	true}', "");
Expect(0, 183, '\P{Is_Ext=	true}', "");
Expect(1, 183, '\P{^Is_Ext=	true}', "");
Expect(0, 182, '\p{Is_Ext=	true}', "");
Expect(1, 182, '\p{^Is_Ext=	true}', "");
Expect(1, 182, '\P{Is_Ext=	true}', "");
Expect(0, 182, '\P{^Is_Ext=	true}', "");
Error('\p{Extender= 	No/a/}');
Error('\P{Extender= 	No/a/}');
Expect(1, 182, '\p{Extender=no}', "");
Expect(0, 182, '\p{^Extender=no}', "");
Expect(0, 182, '\P{Extender=no}', "");
Expect(1, 182, '\P{^Extender=no}', "");
Expect(0, 183, '\p{Extender=no}', "");
Expect(1, 183, '\p{^Extender=no}', "");
Expect(1, 183, '\P{Extender=no}', "");
Expect(0, 183, '\P{^Extender=no}', "");
Expect(1, 182, '\p{Extender=_No}', "");
Expect(0, 182, '\p{^Extender=_No}', "");
Expect(0, 182, '\P{Extender=_No}', "");
Expect(1, 182, '\P{^Extender=_No}', "");
Expect(0, 183, '\p{Extender=_No}', "");
Expect(1, 183, '\p{^Extender=_No}', "");
Expect(1, 183, '\P{Extender=_No}', "");
Expect(0, 183, '\P{^Extender=_No}', "");
Error('\p{Ext: _/a/N}');
Error('\P{Ext: _/a/N}');
Expect(1, 182, '\p{Ext=n}', "");
Expect(0, 182, '\p{^Ext=n}', "");
Expect(0, 182, '\P{Ext=n}', "");
Expect(1, 182, '\P{^Ext=n}', "");
Expect(0, 183, '\p{Ext=n}', "");
Expect(1, 183, '\p{^Ext=n}', "");
Expect(1, 183, '\P{Ext=n}', "");
Expect(0, 183, '\P{^Ext=n}', "");
Expect(1, 182, '\p{Ext=- N}', "");
Expect(0, 182, '\p{^Ext=- N}', "");
Expect(0, 182, '\P{Ext=- N}', "");
Expect(1, 182, '\P{^Ext=- N}', "");
Expect(0, 183, '\p{Ext=- N}', "");
Expect(1, 183, '\p{^Ext=- N}', "");
Expect(1, 183, '\P{Ext=- N}', "");
Expect(0, 183, '\P{^Ext=- N}', "");
Error('\p{Is_Extender=-	F:=}');
Error('\P{Is_Extender=-	F:=}');
Expect(1, 182, '\p{Is_Extender=f}', "");
Expect(0, 182, '\p{^Is_Extender=f}', "");
Expect(0, 182, '\P{Is_Extender=f}', "");
Expect(1, 182, '\P{^Is_Extender=f}', "");
Expect(0, 183, '\p{Is_Extender=f}', "");
Expect(1, 183, '\p{^Is_Extender=f}', "");
Expect(1, 183, '\P{Is_Extender=f}', "");
Expect(0, 183, '\P{^Is_Extender=f}', "");
Expect(1, 182, '\p{Is_Extender=		F}', "");
Expect(0, 182, '\p{^Is_Extender=		F}', "");
Expect(0, 182, '\P{Is_Extender=		F}', "");
Expect(1, 182, '\P{^Is_Extender=		F}', "");
Expect(0, 183, '\p{Is_Extender=		F}', "");
Expect(1, 183, '\p{^Is_Extender=		F}', "");
Expect(1, 183, '\P{Is_Extender=		F}', "");
Expect(0, 183, '\P{^Is_Extender=		F}', "");
Error('\p{Is_Ext=-False/a/}');
Error('\P{Is_Ext=-False/a/}');
Expect(1, 182, '\p{Is_Ext=false}', "");
Expect(0, 182, '\p{^Is_Ext=false}', "");
Expect(0, 182, '\P{Is_Ext=false}', "");
Expect(1, 182, '\P{^Is_Ext=false}', "");
Expect(0, 183, '\p{Is_Ext=false}', "");
Expect(1, 183, '\p{^Is_Ext=false}', "");
Expect(1, 183, '\P{Is_Ext=false}', "");
Expect(0, 183, '\P{^Is_Ext=false}', "");
Expect(1, 182, '\p{Is_Ext=--False}', "");
Expect(0, 182, '\p{^Is_Ext=--False}', "");
Expect(0, 182, '\P{Is_Ext=--False}', "");
Expect(1, 182, '\P{^Is_Ext=--False}', "");
Expect(0, 183, '\p{Is_Ext=--False}', "");
Expect(1, 183, '\p{^Is_Ext=--False}', "");
Expect(1, 183, '\P{Is_Ext=--False}', "");
Expect(0, 183, '\P{^Is_Ext=--False}', "");
Error('\p{IDS_Trinary_Operator=/a/	 yes}');
Error('\P{IDS_Trinary_Operator=/a/	 yes}');
Expect(1, 12275, '\p{IDS_Trinary_Operator=yes}', "");
Expect(0, 12275, '\p{^IDS_Trinary_Operator=yes}', "");
Expect(0, 12275, '\P{IDS_Trinary_Operator=yes}', "");
Expect(1, 12275, '\P{^IDS_Trinary_Operator=yes}', "");
Expect(0, 12273, '\p{IDS_Trinary_Operator=yes}', "");
Expect(1, 12273, '\p{^IDS_Trinary_Operator=yes}', "");
Expect(1, 12273, '\P{IDS_Trinary_Operator=yes}', "");
Expect(0, 12273, '\P{^IDS_Trinary_Operator=yes}', "");
Expect(1, 12275, '\p{IDS_Trinary_Operator= Yes}', "");
Expect(0, 12275, '\p{^IDS_Trinary_Operator= Yes}', "");
Expect(0, 12275, '\P{IDS_Trinary_Operator= Yes}', "");
Expect(1, 12275, '\P{^IDS_Trinary_Operator= Yes}', "");
Expect(0, 12273, '\p{IDS_Trinary_Operator= Yes}', "");
Expect(1, 12273, '\p{^IDS_Trinary_Operator= Yes}', "");
Expect(1, 12273, '\P{IDS_Trinary_Operator= Yes}', "");
Expect(0, 12273, '\P{^IDS_Trinary_Operator= Yes}', "");
Error('\p{IDST=/a/ -Y}');
Error('\P{IDST=/a/ -Y}');
Expect(1, 12275, '\p{IDST=y}', "");
Expect(0, 12275, '\p{^IDST=y}', "");
Expect(0, 12275, '\P{IDST=y}', "");
Expect(1, 12275, '\P{^IDST=y}', "");
Expect(0, 12273, '\p{IDST=y}', "");
Expect(1, 12273, '\p{^IDST=y}', "");
Expect(1, 12273, '\P{IDST=y}', "");
Expect(0, 12273, '\P{^IDST=y}', "");
Expect(1, 12275, '\p{IDST=		Y}', "");
Expect(0, 12275, '\p{^IDST=		Y}', "");
Expect(0, 12275, '\P{IDST=		Y}', "");
Expect(1, 12275, '\P{^IDST=		Y}', "");
Expect(0, 12273, '\p{IDST=		Y}', "");
Expect(1, 12273, '\p{^IDST=		Y}', "");
Expect(1, 12273, '\P{IDST=		Y}', "");
Expect(0, 12273, '\P{^IDST=		Y}', "");
Error('\p{Is_IDS_Trinary_Operator=	/a/T}');
Error('\P{Is_IDS_Trinary_Operator=	/a/T}');
Expect(1, 12275, '\p{Is_IDS_Trinary_Operator=t}', "");
Expect(0, 12275, '\p{^Is_IDS_Trinary_Operator=t}', "");
Expect(0, 12275, '\P{Is_IDS_Trinary_Operator=t}', "");
Expect(1, 12275, '\P{^Is_IDS_Trinary_Operator=t}', "");
Expect(0, 12273, '\p{Is_IDS_Trinary_Operator=t}', "");
Expect(1, 12273, '\p{^Is_IDS_Trinary_Operator=t}', "");
Expect(1, 12273, '\P{Is_IDS_Trinary_Operator=t}', "");
Expect(0, 12273, '\P{^Is_IDS_Trinary_Operator=t}', "");
Expect(1, 12275, '\p{Is_IDS_Trinary_Operator=--T}', "");
Expect(0, 12275, '\p{^Is_IDS_Trinary_Operator=--T}', "");
Expect(0, 12275, '\P{Is_IDS_Trinary_Operator=--T}', "");
Expect(1, 12275, '\P{^Is_IDS_Trinary_Operator=--T}', "");
Expect(0, 12273, '\p{Is_IDS_Trinary_Operator=--T}', "");
Expect(1, 12273, '\p{^Is_IDS_Trinary_Operator=--T}', "");
Expect(1, 12273, '\P{Is_IDS_Trinary_Operator=--T}', "");
Expect(0, 12273, '\P{^Is_IDS_Trinary_Operator=--T}', "");
Error('\p{Is_IDST= True/a/}');
Error('\P{Is_IDST= True/a/}');
Expect(1, 12275, '\p{Is_IDST=true}', "");
Expect(0, 12275, '\p{^Is_IDST=true}', "");
Expect(0, 12275, '\P{Is_IDST=true}', "");
Expect(1, 12275, '\P{^Is_IDST=true}', "");
Expect(0, 12273, '\p{Is_IDST=true}', "");
Expect(1, 12273, '\p{^Is_IDST=true}', "");
Expect(1, 12273, '\P{Is_IDST=true}', "");
Expect(0, 12273, '\P{^Is_IDST=true}', "");
Expect(1, 12275, '\p{Is_IDST=- TRUE}', "");
Expect(0, 12275, '\p{^Is_IDST=- TRUE}', "");
Expect(0, 12275, '\P{Is_IDST=- TRUE}', "");
Expect(1, 12275, '\P{^Is_IDST=- TRUE}', "");
Expect(0, 12273, '\p{Is_IDST=- TRUE}', "");
Expect(1, 12273, '\p{^Is_IDST=- TRUE}', "");
Expect(1, 12273, '\P{Is_IDST=- TRUE}', "");
Expect(0, 12273, '\P{^Is_IDST=- TRUE}', "");
Error('\p{IDS_Trinary_Operator=  No/a/}');
Error('\P{IDS_Trinary_Operator=  No/a/}');
Expect(1, 12273, '\p{IDS_Trinary_Operator=no}', "");
Expect(0, 12273, '\p{^IDS_Trinary_Operator=no}', "");
Expect(0, 12273, '\P{IDS_Trinary_Operator=no}', "");
Expect(1, 12273, '\P{^IDS_Trinary_Operator=no}', "");
Expect(0, 12275, '\p{IDS_Trinary_Operator=no}', "");
Expect(1, 12275, '\p{^IDS_Trinary_Operator=no}', "");
Expect(1, 12275, '\P{IDS_Trinary_Operator=no}', "");
Expect(0, 12275, '\P{^IDS_Trinary_Operator=no}', "");
Expect(1, 12273, '\p{IDS_Trinary_Operator=_ No}', "");
Expect(0, 12273, '\p{^IDS_Trinary_Operator=_ No}', "");
Expect(0, 12273, '\P{IDS_Trinary_Operator=_ No}', "");
Expect(1, 12273, '\P{^IDS_Trinary_Operator=_ No}', "");
Expect(0, 12275, '\p{IDS_Trinary_Operator=_ No}', "");
Expect(1, 12275, '\p{^IDS_Trinary_Operator=_ No}', "");
Expect(1, 12275, '\P{IDS_Trinary_Operator=_ No}', "");
Expect(0, 12275, '\P{^IDS_Trinary_Operator=_ No}', "");
Error('\p{IDST=/a/-	N}');
Error('\P{IDST=/a/-	N}');
Expect(1, 12273, '\p{IDST:	n}', "");
Expect(0, 12273, '\p{^IDST:	n}', "");
Expect(0, 12273, '\P{IDST:	n}', "");
Expect(1, 12273, '\P{^IDST:	n}', "");
Expect(0, 12275, '\p{IDST:	n}', "");
Expect(1, 12275, '\p{^IDST:	n}', "");
Expect(1, 12275, '\P{IDST:	n}', "");
Expect(0, 12275, '\P{^IDST:	n}', "");
Expect(1, 12273, '\p{IDST= 	N}', "");
Expect(0, 12273, '\p{^IDST= 	N}', "");
Expect(0, 12273, '\P{IDST= 	N}', "");
Expect(1, 12273, '\P{^IDST= 	N}', "");
Expect(0, 12275, '\p{IDST= 	N}', "");
Expect(1, 12275, '\p{^IDST= 	N}', "");
Expect(1, 12275, '\P{IDST= 	N}', "");
Expect(0, 12275, '\P{^IDST= 	N}', "");
Error('\p{Is_IDS_Trinary_Operator=_/a/F}');
Error('\P{Is_IDS_Trinary_Operator=_/a/F}');
Expect(1, 12273, '\p{Is_IDS_Trinary_Operator=f}', "");
Expect(0, 12273, '\p{^Is_IDS_Trinary_Operator=f}', "");
Expect(0, 12273, '\P{Is_IDS_Trinary_Operator=f}', "");
Expect(1, 12273, '\P{^Is_IDS_Trinary_Operator=f}', "");
Expect(0, 12275, '\p{Is_IDS_Trinary_Operator=f}', "");
Expect(1, 12275, '\p{^Is_IDS_Trinary_Operator=f}', "");
Expect(1, 12275, '\P{Is_IDS_Trinary_Operator=f}', "");
Expect(0, 12275, '\P{^Is_IDS_Trinary_Operator=f}', "");
Expect(1, 12273, '\p{Is_IDS_Trinary_Operator=--F}', "");
Expect(0, 12273, '\p{^Is_IDS_Trinary_Operator=--F}', "");
Expect(0, 12273, '\P{Is_IDS_Trinary_Operator=--F}', "");
Expect(1, 12273, '\P{^Is_IDS_Trinary_Operator=--F}', "");
Expect(0, 12275, '\p{Is_IDS_Trinary_Operator=--F}', "");
Expect(1, 12275, '\p{^Is_IDS_Trinary_Operator=--F}', "");
Expect(1, 12275, '\P{Is_IDS_Trinary_Operator=--F}', "");
Expect(0, 12275, '\P{^Is_IDS_Trinary_Operator=--F}', "");
Error('\p{Is_IDST=/a/	False}');
Error('\P{Is_IDST=/a/	False}');
Expect(1, 12273, '\p{Is_IDST=false}', "");
Expect(0, 12273, '\p{^Is_IDST=false}', "");
Expect(0, 12273, '\P{Is_IDST=false}', "");
Expect(1, 12273, '\P{^Is_IDST=false}', "");
Expect(0, 12275, '\p{Is_IDST=false}', "");
Expect(1, 12275, '\p{^Is_IDST=false}', "");
Expect(1, 12275, '\P{Is_IDST=false}', "");
Expect(0, 12275, '\P{^Is_IDST=false}', "");
Expect(1, 12273, '\p{Is_IDST=  false}', "");
Expect(0, 12273, '\p{^Is_IDST=  false}', "");
Expect(0, 12273, '\P{Is_IDST=  false}', "");
Expect(1, 12273, '\P{^Is_IDST=  false}', "");
Expect(0, 12275, '\p{Is_IDST=  false}', "");
Expect(1, 12275, '\p{^Is_IDST=  false}', "");
Expect(1, 12275, '\P{Is_IDST=  false}', "");
Expect(0, 12275, '\P{^Is_IDST=  false}', "");
Error('\p{Composition_Exclusion=:=-	YES}');
Error('\P{Composition_Exclusion=:=-	YES}');
Expect(1, 2399, '\p{Composition_Exclusion=yes}', "");
Expect(0, 2399, '\p{^Composition_Exclusion=yes}', "");
Expect(0, 2399, '\P{Composition_Exclusion=yes}', "");
Expect(1, 2399, '\P{^Composition_Exclusion=yes}', "");
Expect(0, 2391, '\p{Composition_Exclusion=yes}', "");
Expect(1, 2391, '\p{^Composition_Exclusion=yes}', "");
Expect(1, 2391, '\P{Composition_Exclusion=yes}', "");
Expect(0, 2391, '\P{^Composition_Exclusion=yes}', "");
Expect(1, 2399, '\p{Composition_Exclusion=		Yes}', "");
Expect(0, 2399, '\p{^Composition_Exclusion=		Yes}', "");
Expect(0, 2399, '\P{Composition_Exclusion=		Yes}', "");
Expect(1, 2399, '\P{^Composition_Exclusion=		Yes}', "");
Expect(0, 2391, '\p{Composition_Exclusion=		Yes}', "");
Expect(1, 2391, '\p{^Composition_Exclusion=		Yes}', "");
Expect(1, 2391, '\P{Composition_Exclusion=		Yes}', "");
Expect(0, 2391, '\P{^Composition_Exclusion=		Yes}', "");
Error('\p{CE= Y/a/}');
Error('\P{CE= Y/a/}');
Expect(1, 2399, '\p{CE=y}', "");
Expect(0, 2399, '\p{^CE=y}', "");
Expect(0, 2399, '\P{CE=y}', "");
Expect(1, 2399, '\P{^CE=y}', "");
Expect(0, 2391, '\p{CE=y}', "");
Expect(1, 2391, '\p{^CE=y}', "");
Expect(1, 2391, '\P{CE=y}', "");
Expect(0, 2391, '\P{^CE=y}', "");
Expect(1, 2399, '\p{CE=Y}', "");
Expect(0, 2399, '\p{^CE=Y}', "");
Expect(0, 2399, '\P{CE=Y}', "");
Expect(1, 2399, '\P{^CE=Y}', "");
Expect(0, 2391, '\p{CE=Y}', "");
Expect(1, 2391, '\p{^CE=Y}', "");
Expect(1, 2391, '\P{CE=Y}', "");
Expect(0, 2391, '\P{^CE=Y}', "");
Error('\p{Is_Composition_Exclusion= /a/T}');
Error('\P{Is_Composition_Exclusion= /a/T}');
Expect(1, 2399, '\p{Is_Composition_Exclusion=t}', "");
Expect(0, 2399, '\p{^Is_Composition_Exclusion=t}', "");
Expect(0, 2399, '\P{Is_Composition_Exclusion=t}', "");
Expect(1, 2399, '\P{^Is_Composition_Exclusion=t}', "");
Expect(0, 2391, '\p{Is_Composition_Exclusion=t}', "");
Expect(1, 2391, '\p{^Is_Composition_Exclusion=t}', "");
Expect(1, 2391, '\P{Is_Composition_Exclusion=t}', "");
Expect(0, 2391, '\P{^Is_Composition_Exclusion=t}', "");
Expect(1, 2399, '\p{Is_Composition_Exclusion= -T}', "");
Expect(0, 2399, '\p{^Is_Composition_Exclusion= -T}', "");
Expect(0, 2399, '\P{Is_Composition_Exclusion= -T}', "");
Expect(1, 2399, '\P{^Is_Composition_Exclusion= -T}', "");
Expect(0, 2391, '\p{Is_Composition_Exclusion= -T}', "");
Expect(1, 2391, '\p{^Is_Composition_Exclusion= -T}', "");
Expect(1, 2391, '\P{Is_Composition_Exclusion= -T}', "");
Expect(0, 2391, '\P{^Is_Composition_Exclusion= -T}', "");
Error('\p{Is_CE=:=	TRUE}');
Error('\P{Is_CE=:=	TRUE}');
Expect(1, 2399, '\p{Is_CE=true}', "");
Expect(0, 2399, '\p{^Is_CE=true}', "");
Expect(0, 2399, '\P{Is_CE=true}', "");
Expect(1, 2399, '\P{^Is_CE=true}', "");
Expect(0, 2391, '\p{Is_CE=true}', "");
Expect(1, 2391, '\p{^Is_CE=true}', "");
Expect(1, 2391, '\P{Is_CE=true}', "");
Expect(0, 2391, '\P{^Is_CE=true}', "");
Expect(1, 2399, '\p{Is_CE=_ true}', "");
Expect(0, 2399, '\p{^Is_CE=_ true}', "");
Expect(0, 2399, '\P{Is_CE=_ true}', "");
Expect(1, 2399, '\P{^Is_CE=_ true}', "");
Expect(0, 2391, '\p{Is_CE=_ true}', "");
Expect(1, 2391, '\p{^Is_CE=_ true}', "");
Expect(1, 2391, '\P{Is_CE=_ true}', "");
Expect(0, 2391, '\P{^Is_CE=_ true}', "");
Error('\p{Composition_Exclusion=_-No/a/}');
Error('\P{Composition_Exclusion=_-No/a/}');
Expect(1, 2391, '\p{Composition_Exclusion=no}', "");
Expect(0, 2391, '\p{^Composition_Exclusion=no}', "");
Expect(0, 2391, '\P{Composition_Exclusion=no}', "");
Expect(1, 2391, '\P{^Composition_Exclusion=no}', "");
Expect(0, 2399, '\p{Composition_Exclusion=no}', "");
Expect(1, 2399, '\p{^Composition_Exclusion=no}', "");
Expect(1, 2399, '\P{Composition_Exclusion=no}', "");
Expect(0, 2399, '\P{^Composition_Exclusion=no}', "");
Expect(1, 2391, '\p{Composition_Exclusion=-	No}', "");
Expect(0, 2391, '\p{^Composition_Exclusion=-	No}', "");
Expect(0, 2391, '\P{Composition_Exclusion=-	No}', "");
Expect(1, 2391, '\P{^Composition_Exclusion=-	No}', "");
Expect(0, 2399, '\p{Composition_Exclusion=-	No}', "");
Expect(1, 2399, '\p{^Composition_Exclusion=-	No}', "");
Expect(1, 2399, '\P{Composition_Exclusion=-	No}', "");
Expect(0, 2399, '\P{^Composition_Exclusion=-	No}', "");
Error('\p{CE:  	n:=}');
Error('\P{CE:  	n:=}');
Expect(1, 2391, '\p{CE=n}', "");
Expect(0, 2391, '\p{^CE=n}', "");
Expect(0, 2391, '\P{CE=n}', "");
Expect(1, 2391, '\P{^CE=n}', "");
Expect(0, 2399, '\p{CE=n}', "");
Expect(1, 2399, '\p{^CE=n}', "");
Expect(1, 2399, '\P{CE=n}', "");
Expect(0, 2399, '\P{^CE=n}', "");
Expect(1, 2391, '\p{CE=		n}', "");
Expect(0, 2391, '\p{^CE=		n}', "");
Expect(0, 2391, '\P{CE=		n}', "");
Expect(1, 2391, '\P{^CE=		n}', "");
Expect(0, 2399, '\p{CE=		n}', "");
Expect(1, 2399, '\p{^CE=		n}', "");
Expect(1, 2399, '\P{CE=		n}', "");
Expect(0, 2399, '\P{^CE=		n}', "");
Error('\p{Is_Composition_Exclusion=:=_	F}');
Error('\P{Is_Composition_Exclusion=:=_	F}');
Expect(1, 2391, '\p{Is_Composition_Exclusion=f}', "");
Expect(0, 2391, '\p{^Is_Composition_Exclusion=f}', "");
Expect(0, 2391, '\P{Is_Composition_Exclusion=f}', "");
Expect(1, 2391, '\P{^Is_Composition_Exclusion=f}', "");
Expect(0, 2399, '\p{Is_Composition_Exclusion=f}', "");
Expect(1, 2399, '\p{^Is_Composition_Exclusion=f}', "");
Expect(1, 2399, '\P{Is_Composition_Exclusion=f}', "");
Expect(0, 2399, '\P{^Is_Composition_Exclusion=f}', "");
Expect(1, 2391, '\p{Is_Composition_Exclusion=	-f}', "");
Expect(0, 2391, '\p{^Is_Composition_Exclusion=	-f}', "");
Expect(0, 2391, '\P{Is_Composition_Exclusion=	-f}', "");
Expect(1, 2391, '\P{^Is_Composition_Exclusion=	-f}', "");
Expect(0, 2399, '\p{Is_Composition_Exclusion=	-f}', "");
Expect(1, 2399, '\p{^Is_Composition_Exclusion=	-f}', "");
Expect(1, 2399, '\P{Is_Composition_Exclusion=	-f}', "");
Expect(0, 2399, '\P{^Is_Composition_Exclusion=	-f}', "");
Error('\p{Is_CE=false/a/}');
Error('\P{Is_CE=false/a/}');
Expect(1, 2391, '\p{Is_CE:   false}', "");
Expect(0, 2391, '\p{^Is_CE:   false}', "");
Expect(0, 2391, '\P{Is_CE:   false}', "");
Expect(1, 2391, '\P{^Is_CE:   false}', "");
Expect(0, 2399, '\p{Is_CE:   false}', "");
Expect(1, 2399, '\p{^Is_CE:   false}', "");
Expect(1, 2399, '\P{Is_CE:   false}', "");
Expect(0, 2399, '\P{^Is_CE:   false}', "");
Expect(1, 2391, '\p{Is_CE=_-False}', "");
Expect(0, 2391, '\p{^Is_CE=_-False}', "");
Expect(0, 2391, '\P{Is_CE=_-False}', "");
Expect(1, 2391, '\P{^Is_CE=_-False}', "");
Expect(0, 2399, '\p{Is_CE=_-False}', "");
Expect(1, 2399, '\p{^Is_CE=_-False}', "");
Expect(1, 2399, '\P{Is_CE=_-False}', "");
Expect(0, 2399, '\P{^Is_CE=_-False}', "");
Error('\p{STerm=_YES:=}');
Error('\P{STerm=_YES:=}');
Expect(1, 33, '\p{STerm=yes}', "");
Expect(0, 33, '\p{^STerm=yes}', "");
Expect(0, 33, '\P{STerm=yes}', "");
Expect(1, 33, '\P{^STerm=yes}', "");
Expect(0, 32, '\p{STerm=yes}', "");
Expect(1, 32, '\p{^STerm=yes}', "");
Expect(1, 32, '\P{STerm=yes}', "");
Expect(0, 32, '\P{^STerm=yes}', "");
Expect(1, 33, '\p{STerm=		yes}', "");
Expect(0, 33, '\p{^STerm=		yes}', "");
Expect(0, 33, '\P{STerm=		yes}', "");
Expect(1, 33, '\P{^STerm=		yes}', "");
Expect(0, 32, '\p{STerm=		yes}', "");
Expect(1, 32, '\p{^STerm=		yes}', "");
Expect(1, 32, '\P{STerm=		yes}', "");
Expect(0, 32, '\P{^STerm=		yes}', "");
Error('\p{Is_STerm=_/a/Y}');
Error('\P{Is_STerm=_/a/Y}');
Expect(1, 33, '\p{Is_STerm=y}', "");
Expect(0, 33, '\p{^Is_STerm=y}', "");
Expect(0, 33, '\P{Is_STerm=y}', "");
Expect(1, 33, '\P{^Is_STerm=y}', "");
Expect(0, 32, '\p{Is_STerm=y}', "");
Expect(1, 32, '\p{^Is_STerm=y}', "");
Expect(1, 32, '\P{Is_STerm=y}', "");
Expect(0, 32, '\P{^Is_STerm=y}', "");
Expect(1, 33, '\p{Is_STerm= 	y}', "");
Expect(0, 33, '\p{^Is_STerm= 	y}', "");
Expect(0, 33, '\P{Is_STerm= 	y}', "");
Expect(1, 33, '\P{^Is_STerm= 	y}', "");
Expect(0, 32, '\p{Is_STerm= 	y}', "");
Expect(1, 32, '\p{^Is_STerm= 	y}', "");
Expect(1, 32, '\P{Is_STerm= 	y}', "");
Expect(0, 32, '\P{^Is_STerm= 	y}', "");
Error('\p{STerm=_/a/t}');
Error('\P{STerm=_/a/t}');
Expect(1, 33, '\p{STerm=t}', "");
Expect(0, 33, '\p{^STerm=t}', "");
Expect(0, 33, '\P{STerm=t}', "");
Expect(1, 33, '\P{^STerm=t}', "");
Expect(0, 32, '\p{STerm=t}', "");
Expect(1, 32, '\p{^STerm=t}', "");
Expect(1, 32, '\P{STerm=t}', "");
Expect(0, 32, '\P{^STerm=t}', "");
Expect(1, 33, '\p{STerm=  T}', "");
Expect(0, 33, '\p{^STerm=  T}', "");
Expect(0, 33, '\P{STerm=  T}', "");
Expect(1, 33, '\P{^STerm=  T}', "");
Expect(0, 32, '\p{STerm=  T}', "");
Expect(1, 32, '\p{^STerm=  T}', "");
Expect(1, 32, '\P{STerm=  T}', "");
Expect(0, 32, '\P{^STerm=  T}', "");
Error('\p{Is_STerm=	:=True}');
Error('\P{Is_STerm=	:=True}');
Expect(1, 33, '\p{Is_STerm=true}', "");
Expect(0, 33, '\p{^Is_STerm=true}', "");
Expect(0, 33, '\P{Is_STerm=true}', "");
Expect(1, 33, '\P{^Is_STerm=true}', "");
Expect(0, 32, '\p{Is_STerm=true}', "");
Expect(1, 32, '\p{^Is_STerm=true}', "");
Expect(1, 32, '\P{Is_STerm=true}', "");
Expect(0, 32, '\P{^Is_STerm=true}', "");
Expect(1, 33, '\p{Is_STerm=-_TRUE}', "");
Expect(0, 33, '\p{^Is_STerm=-_TRUE}', "");
Expect(0, 33, '\P{Is_STerm=-_TRUE}', "");
Expect(1, 33, '\P{^Is_STerm=-_TRUE}', "");
Expect(0, 32, '\p{Is_STerm=-_TRUE}', "");
Expect(1, 32, '\p{^Is_STerm=-_TRUE}', "");
Expect(1, 32, '\P{Is_STerm=-_TRUE}', "");
Expect(0, 32, '\P{^Is_STerm=-_TRUE}', "");
Error('\p{STerm=_ no/a/}');
Error('\P{STerm=_ no/a/}');
Expect(1, 32, '\p{STerm=no}', "");
Expect(0, 32, '\p{^STerm=no}', "");
Expect(0, 32, '\P{STerm=no}', "");
Expect(1, 32, '\P{^STerm=no}', "");
Expect(0, 33, '\p{STerm=no}', "");
Expect(1, 33, '\p{^STerm=no}', "");
Expect(1, 33, '\P{STerm=no}', "");
Expect(0, 33, '\P{^STerm=no}', "");
Expect(1, 32, '\p{STerm:	_No}', "");
Expect(0, 32, '\p{^STerm:	_No}', "");
Expect(0, 32, '\P{STerm:	_No}', "");
Expect(1, 32, '\P{^STerm:	_No}', "");
Expect(0, 33, '\p{STerm:	_No}', "");
Expect(1, 33, '\p{^STerm:	_No}', "");
Expect(1, 33, '\P{STerm:	_No}', "");
Expect(0, 33, '\P{^STerm:	_No}', "");
Error('\p{Is_STerm=:=		n}');
Error('\P{Is_STerm=:=		n}');
Expect(1, 32, '\p{Is_STerm=n}', "");
Expect(0, 32, '\p{^Is_STerm=n}', "");
Expect(0, 32, '\P{Is_STerm=n}', "");
Expect(1, 32, '\P{^Is_STerm=n}', "");
Expect(0, 33, '\p{Is_STerm=n}', "");
Expect(1, 33, '\p{^Is_STerm=n}', "");
Expect(1, 33, '\P{Is_STerm=n}', "");
Expect(0, 33, '\P{^Is_STerm=n}', "");
Expect(1, 32, '\p{Is_STerm=	n}', "");
Expect(0, 32, '\p{^Is_STerm=	n}', "");
Expect(0, 32, '\P{Is_STerm=	n}', "");
Expect(1, 32, '\P{^Is_STerm=	n}', "");
Expect(0, 33, '\p{Is_STerm=	n}', "");
Expect(1, 33, '\p{^Is_STerm=	n}', "");
Expect(1, 33, '\P{Is_STerm=	n}', "");
Expect(0, 33, '\P{^Is_STerm=	n}', "");
Error('\p{STerm=/a/ f}');
Error('\P{STerm=/a/ f}');
Expect(1, 32, '\p{STerm=f}', "");
Expect(0, 32, '\p{^STerm=f}', "");
Expect(0, 32, '\P{STerm=f}', "");
Expect(1, 32, '\P{^STerm=f}', "");
Expect(0, 33, '\p{STerm=f}', "");
Expect(1, 33, '\p{^STerm=f}', "");
Expect(1, 33, '\P{STerm=f}', "");
Expect(0, 33, '\P{^STerm=f}', "");
Expect(1, 32, '\p{STerm= 	F}', "");
Expect(0, 32, '\p{^STerm= 	F}', "");
Expect(0, 32, '\P{STerm= 	F}', "");
Expect(1, 32, '\P{^STerm= 	F}', "");
Expect(0, 33, '\p{STerm= 	F}', "");
Expect(1, 33, '\p{^STerm= 	F}', "");
Expect(1, 33, '\P{STerm= 	F}', "");
Expect(0, 33, '\P{^STerm= 	F}', "");
Error('\p{Is_STerm=	_False/a/}');
Error('\P{Is_STerm=	_False/a/}');
Expect(1, 32, '\p{Is_STerm:   false}', "");
Expect(0, 32, '\p{^Is_STerm:   false}', "");
Expect(0, 32, '\P{Is_STerm:   false}', "");
Expect(1, 32, '\P{^Is_STerm:   false}', "");
Expect(0, 33, '\p{Is_STerm:   false}', "");
Expect(1, 33, '\p{^Is_STerm:   false}', "");
Expect(1, 33, '\P{Is_STerm:   false}', "");
Expect(0, 33, '\P{^Is_STerm:   false}', "");
Expect(1, 32, '\p{Is_STerm=	 FALSE}', "");
Expect(0, 32, '\p{^Is_STerm=	 FALSE}', "");
Expect(0, 32, '\P{Is_STerm=	 FALSE}', "");
Expect(1, 32, '\P{^Is_STerm=	 FALSE}', "");
Expect(0, 33, '\p{Is_STerm=	 FALSE}', "");
Expect(1, 33, '\p{^Is_STerm=	 FALSE}', "");
Expect(1, 33, '\P{Is_STerm=	 FALSE}', "");
Expect(0, 33, '\P{^Is_STerm=	 FALSE}', "");
Error('\p{Decomposition_Type=_:=FRACTION}');
Error('\P{Decomposition_Type=_:=FRACTION}');
Expect(1, 190, '\p{Decomposition_Type=fraction}', "");
Expect(0, 190, '\p{^Decomposition_Type=fraction}', "");
Expect(0, 190, '\P{Decomposition_Type=fraction}', "");
Expect(1, 190, '\P{^Decomposition_Type=fraction}', "");
Expect(0, 187, '\p{Decomposition_Type=fraction}', "");
Expect(1, 187, '\p{^Decomposition_Type=fraction}', "");
Expect(1, 187, '\P{Decomposition_Type=fraction}', "");
Expect(0, 187, '\P{^Decomposition_Type=fraction}', "");
Expect(1, 190, '\p{Decomposition_Type=	-Fraction}', "");
Expect(0, 190, '\p{^Decomposition_Type=	-Fraction}', "");
Expect(0, 190, '\P{Decomposition_Type=	-Fraction}', "");
Expect(1, 190, '\P{^Decomposition_Type=	-Fraction}', "");
Expect(0, 187, '\p{Decomposition_Type=	-Fraction}', "");
Expect(1, 187, '\p{^Decomposition_Type=	-Fraction}', "");
Expect(1, 187, '\P{Decomposition_Type=	-Fraction}', "");
Expect(0, 187, '\P{^Decomposition_Type=	-Fraction}', "");
Error('\p{Dt=_	fra/a/}');
Error('\P{Dt=_	fra/a/}');
Expect(1, 190, '\p{Dt=fra}', "");
Expect(0, 190, '\p{^Dt=fra}', "");
Expect(0, 190, '\P{Dt=fra}', "");
Expect(1, 190, '\P{^Dt=fra}', "");
Expect(0, 187, '\p{Dt=fra}', "");
Expect(1, 187, '\p{^Dt=fra}', "");
Expect(1, 187, '\P{Dt=fra}', "");
Expect(0, 187, '\P{^Dt=fra}', "");
Expect(1, 190, '\p{Dt=--Fra}', "");
Expect(0, 190, '\p{^Dt=--Fra}', "");
Expect(0, 190, '\P{Dt=--Fra}', "");
Expect(1, 190, '\P{^Dt=--Fra}', "");
Expect(0, 187, '\p{Dt=--Fra}', "");
Expect(1, 187, '\p{^Dt=--Fra}', "");
Expect(1, 187, '\P{Dt=--Fra}', "");
Expect(0, 187, '\P{^Dt=--Fra}', "");
Error('\p{Is_Decomposition_Type=:=Fraction}');
Error('\P{Is_Decomposition_Type=:=Fraction}');
Expect(1, 190, '\p{Is_Decomposition_Type:   fraction}', "");
Expect(0, 190, '\p{^Is_Decomposition_Type:   fraction}', "");
Expect(0, 190, '\P{Is_Decomposition_Type:   fraction}', "");
Expect(1, 190, '\P{^Is_Decomposition_Type:   fraction}', "");
Expect(0, 187, '\p{Is_Decomposition_Type:   fraction}', "");
Expect(1, 187, '\p{^Is_Decomposition_Type:   fraction}', "");
Expect(1, 187, '\P{Is_Decomposition_Type:   fraction}', "");
Expect(0, 187, '\P{^Is_Decomposition_Type:   fraction}', "");
Expect(1, 190, '\p{Is_Decomposition_Type=	FRACTION}', "");
Expect(0, 190, '\p{^Is_Decomposition_Type=	FRACTION}', "");
Expect(0, 190, '\P{Is_Decomposition_Type=	FRACTION}', "");
Expect(1, 190, '\P{^Is_Decomposition_Type=	FRACTION}', "");
Expect(0, 187, '\p{Is_Decomposition_Type=	FRACTION}', "");
Expect(1, 187, '\p{^Is_Decomposition_Type=	FRACTION}', "");
Expect(1, 187, '\P{Is_Decomposition_Type=	FRACTION}', "");
Expect(0, 187, '\P{^Is_Decomposition_Type=	FRACTION}', "");
Error('\p{Is_Dt=		Fra/a/}');
Error('\P{Is_Dt=		Fra/a/}');
Expect(1, 190, '\p{Is_Dt=fra}', "");
Expect(0, 190, '\p{^Is_Dt=fra}', "");
Expect(0, 190, '\P{Is_Dt=fra}', "");
Expect(1, 190, '\P{^Is_Dt=fra}', "");
Expect(0, 187, '\p{Is_Dt=fra}', "");
Expect(1, 187, '\p{^Is_Dt=fra}', "");
Expect(1, 187, '\P{Is_Dt=fra}', "");
Expect(0, 187, '\P{^Is_Dt=fra}', "");
Expect(1, 190, '\p{Is_Dt=--Fra}', "");
Expect(0, 190, '\p{^Is_Dt=--Fra}', "");
Expect(0, 190, '\P{Is_Dt=--Fra}', "");
Expect(1, 190, '\P{^Is_Dt=--Fra}', "");
Expect(0, 187, '\p{Is_Dt=--Fra}', "");
Expect(1, 187, '\p{^Is_Dt=--Fra}', "");
Expect(1, 187, '\P{Is_Dt=--Fra}', "");
Expect(0, 187, '\P{^Is_Dt=--Fra}', "");
Error('\p{Decomposition_Type:   --Circle/a/}');
Error('\P{Decomposition_Type:   --Circle/a/}');
Expect(1, 9331, '\p{Decomposition_Type=circle}', "");
Expect(0, 9331, '\p{^Decomposition_Type=circle}', "");
Expect(0, 9331, '\P{Decomposition_Type=circle}', "");
Expect(1, 9331, '\P{^Decomposition_Type=circle}', "");
Expect(0, 9311, '\p{Decomposition_Type=circle}', "");
Expect(1, 9311, '\p{^Decomposition_Type=circle}', "");
Expect(1, 9311, '\P{Decomposition_Type=circle}', "");
Expect(0, 9311, '\P{^Decomposition_Type=circle}', "");
Expect(1, 9331, '\p{Decomposition_Type=_-circle}', "");
Expect(0, 9331, '\p{^Decomposition_Type=_-circle}', "");
Expect(0, 9331, '\P{Decomposition_Type=_-circle}', "");
Expect(1, 9331, '\P{^Decomposition_Type=_-circle}', "");
Expect(0, 9311, '\p{Decomposition_Type=_-circle}', "");
Expect(1, 9311, '\p{^Decomposition_Type=_-circle}', "");
Expect(1, 9311, '\P{Decomposition_Type=_-circle}', "");
Expect(0, 9311, '\P{^Decomposition_Type=_-circle}', "");
Error('\p{Dt=:=-_ENC}');
Error('\P{Dt=:=-_ENC}');
Expect(1, 9331, '\p{Dt=enc}', "");
Expect(0, 9331, '\p{^Dt=enc}', "");
Expect(0, 9331, '\P{Dt=enc}', "");
Expect(1, 9331, '\P{^Dt=enc}', "");
Expect(0, 9311, '\p{Dt=enc}', "");
Expect(1, 9311, '\p{^Dt=enc}', "");
Expect(1, 9311, '\P{Dt=enc}', "");
Expect(0, 9311, '\P{^Dt=enc}', "");
Expect(1, 9331, '\p{Dt=	_Enc}', "");
Expect(0, 9331, '\p{^Dt=	_Enc}', "");
Expect(0, 9331, '\P{Dt=	_Enc}', "");
Expect(1, 9331, '\P{^Dt=	_Enc}', "");
Expect(0, 9311, '\p{Dt=	_Enc}', "");
Expect(1, 9311, '\p{^Dt=	_Enc}', "");
Expect(1, 9311, '\P{Dt=	_Enc}', "");
Expect(0, 9311, '\P{^Dt=	_Enc}', "");
Error('\p{Is_Decomposition_Type=:=-_CIRCLE}');
Error('\P{Is_Decomposition_Type=:=-_CIRCLE}');
Expect(1, 9331, '\p{Is_Decomposition_Type=circle}', "");
Expect(0, 9331, '\p{^Is_Decomposition_Type=circle}', "");
Expect(0, 9331, '\P{Is_Decomposition_Type=circle}', "");
Expect(1, 9331, '\P{^Is_Decomposition_Type=circle}', "");
Expect(0, 9311, '\p{Is_Decomposition_Type=circle}', "");
Expect(1, 9311, '\p{^Is_Decomposition_Type=circle}', "");
Expect(1, 9311, '\P{Is_Decomposition_Type=circle}', "");
Expect(0, 9311, '\P{^Is_Decomposition_Type=circle}', "");
Expect(1, 9331, '\p{Is_Decomposition_Type=-_CIRCLE}', "");
Expect(0, 9331, '\p{^Is_Decomposition_Type=-_CIRCLE}', "");
Expect(0, 9331, '\P{Is_Decomposition_Type=-_CIRCLE}', "");
Expect(1, 9331, '\P{^Is_Decomposition_Type=-_CIRCLE}', "");
Expect(0, 9311, '\p{Is_Decomposition_Type=-_CIRCLE}', "");
Expect(1, 9311, '\p{^Is_Decomposition_Type=-_CIRCLE}', "");
Expect(1, 9311, '\P{Is_Decomposition_Type=-_CIRCLE}', "");
Expect(0, 9311, '\P{^Is_Decomposition_Type=-_CIRCLE}', "");
Error('\p{Is_Dt=:=	 Enc}');
Error('\P{Is_Dt=:=	 Enc}');
Expect(1, 9331, '\p{Is_Dt=enc}', "");
Expect(0, 9331, '\p{^Is_Dt=enc}', "");
Expect(0, 9331, '\P{Is_Dt=enc}', "");
Expect(1, 9331, '\P{^Is_Dt=enc}', "");
Expect(0, 9311, '\p{Is_Dt=enc}', "");
Expect(1, 9311, '\p{^Is_Dt=enc}', "");
Expect(1, 9311, '\P{Is_Dt=enc}', "");
Expect(0, 9311, '\P{^Is_Dt=enc}', "");
Error('\p{Decomposition_Type= :=initial}');
Error('\P{Decomposition_Type= :=initial}');
Expect(1, 64340, '\p{Decomposition_Type=initial}', "");
Expect(0, 64340, '\p{^Decomposition_Type=initial}', "");
Expect(0, 64340, '\P{Decomposition_Type=initial}', "");
Expect(1, 64340, '\P{^Decomposition_Type=initial}', "");
Expect(0, 64339, '\p{Decomposition_Type=initial}', "");
Expect(1, 64339, '\p{^Decomposition_Type=initial}', "");
Expect(1, 64339, '\P{Decomposition_Type=initial}', "");
Expect(0, 64339, '\P{^Decomposition_Type=initial}', "");
Expect(1, 64340, '\p{Decomposition_Type=-Initial}', "");
Expect(0, 64340, '\p{^Decomposition_Type=-Initial}', "");
Expect(0, 64340, '\P{Decomposition_Type=-Initial}', "");
Expect(1, 64340, '\P{^Decomposition_Type=-Initial}', "");
Expect(0, 64339, '\p{Decomposition_Type=-Initial}', "");
Expect(1, 64339, '\p{^Decomposition_Type=-Initial}', "");
Expect(1, 64339, '\P{Decomposition_Type=-Initial}', "");
Expect(0, 64339, '\P{^Decomposition_Type=-Initial}', "");
Error('\p{Dt=_INIT/a/}');
Error('\P{Dt=_INIT/a/}');
Expect(1, 64340, '\p{Dt:init}', "");
Expect(0, 64340, '\p{^Dt:init}', "");
Expect(0, 64340, '\P{Dt:init}', "");
Expect(1, 64340, '\P{^Dt:init}', "");
Expect(0, 64339, '\p{Dt:init}', "");
Expect(1, 64339, '\p{^Dt:init}', "");
Expect(1, 64339, '\P{Dt:init}', "");
Expect(0, 64339, '\P{^Dt:init}', "");
Expect(1, 64340, '\p{Dt=  Init}', "");
Expect(0, 64340, '\p{^Dt=  Init}', "");
Expect(0, 64340, '\P{Dt=  Init}', "");
Expect(1, 64340, '\P{^Dt=  Init}', "");
Expect(0, 64339, '\p{Dt=  Init}', "");
Expect(1, 64339, '\p{^Dt=  Init}', "");
Expect(1, 64339, '\P{Dt=  Init}', "");
Expect(0, 64339, '\P{^Dt=  Init}', "");
Error('\p{Is_Decomposition_Type= -Initial/a/}');
Error('\P{Is_Decomposition_Type= -Initial/a/}');
Expect(1, 64340, '\p{Is_Decomposition_Type=initial}', "");
Expect(0, 64340, '\p{^Is_Decomposition_Type=initial}', "");
Expect(0, 64340, '\P{Is_Decomposition_Type=initial}', "");
Expect(1, 64340, '\P{^Is_Decomposition_Type=initial}', "");
Expect(0, 64339, '\p{Is_Decomposition_Type=initial}', "");
Expect(1, 64339, '\p{^Is_Decomposition_Type=initial}', "");
Expect(1, 64339, '\P{Is_Decomposition_Type=initial}', "");
Expect(0, 64339, '\P{^Is_Decomposition_Type=initial}', "");
Expect(1, 64340, '\p{Is_Decomposition_Type=	 Initial}', "");
Expect(0, 64340, '\p{^Is_Decomposition_Type=	 Initial}', "");
Expect(0, 64340, '\P{Is_Decomposition_Type=	 Initial}', "");
Expect(1, 64340, '\P{^Is_Decomposition_Type=	 Initial}', "");
Expect(0, 64339, '\p{Is_Decomposition_Type=	 Initial}', "");
Expect(1, 64339, '\p{^Is_Decomposition_Type=	 Initial}', "");
Expect(1, 64339, '\P{Is_Decomposition_Type=	 Initial}', "");
Expect(0, 64339, '\P{^Is_Decomposition_Type=	 Initial}', "");
Error('\p{Is_Dt=/a/ 	Init}');
Error('\P{Is_Dt=/a/ 	Init}');
Expect(1, 64340, '\p{Is_Dt: init}', "");
Expect(0, 64340, '\p{^Is_Dt: init}', "");
Expect(0, 64340, '\P{Is_Dt: init}', "");
Expect(1, 64340, '\P{^Is_Dt: init}', "");
Expect(0, 64339, '\p{Is_Dt: init}', "");
Expect(1, 64339, '\p{^Is_Dt: init}', "");
Expect(1, 64339, '\P{Is_Dt: init}', "");
Expect(0, 64339, '\P{^Is_Dt: init}', "");
Expect(1, 64340, '\p{Is_Dt=-init}', "");
Expect(0, 64340, '\p{^Is_Dt=-init}', "");
Expect(0, 64340, '\P{Is_Dt=-init}', "");
Expect(1, 64340, '\P{^Is_Dt=-init}', "");
Expect(0, 64339, '\p{Is_Dt=-init}', "");
Expect(1, 64339, '\p{^Is_Dt=-init}', "");
Expect(1, 64339, '\P{Is_Dt=-init}', "");
Expect(0, 64339, '\P{^Is_Dt=-init}', "");
Error('\p{Decomposition_Type= font:=}');
Error('\P{Decomposition_Type= font:=}');
Expect(1, 8450, '\p{Decomposition_Type=font}', "");
Expect(0, 8450, '\p{^Decomposition_Type=font}', "");
Expect(0, 8450, '\P{Decomposition_Type=font}', "");
Expect(1, 8450, '\P{^Decomposition_Type=font}', "");
Expect(0, 8449, '\p{Decomposition_Type=font}', "");
Expect(1, 8449, '\p{^Decomposition_Type=font}', "");
Expect(1, 8449, '\P{Decomposition_Type=font}', "");
Expect(0, 8449, '\P{^Decomposition_Type=font}', "");
Expect(1, 8450, '\p{Decomposition_Type= font}', "");
Expect(0, 8450, '\p{^Decomposition_Type= font}', "");
Expect(0, 8450, '\P{Decomposition_Type= font}', "");
Expect(1, 8450, '\P{^Decomposition_Type= font}', "");
Expect(0, 8449, '\p{Decomposition_Type= font}', "");
Expect(1, 8449, '\p{^Decomposition_Type= font}', "");
Expect(1, 8449, '\P{Decomposition_Type= font}', "");
Expect(0, 8449, '\P{^Decomposition_Type= font}', "");
Error('\p{Dt= /a/font}');
Error('\P{Dt= /a/font}');
Expect(1, 8450, '\p{Dt:font}', "");
Expect(0, 8450, '\p{^Dt:font}', "");
Expect(0, 8450, '\P{Dt:font}', "");
Expect(1, 8450, '\P{^Dt:font}', "");
Expect(0, 8449, '\p{Dt:font}', "");
Expect(1, 8449, '\p{^Dt:font}', "");
Expect(1, 8449, '\P{Dt:font}', "");
Expect(0, 8449, '\P{^Dt:font}', "");
Expect(1, 8450, '\p{Dt=_FONT}', "");
Expect(0, 8450, '\p{^Dt=_FONT}', "");
Expect(0, 8450, '\P{Dt=_FONT}', "");
Expect(1, 8450, '\P{^Dt=_FONT}', "");
Expect(0, 8449, '\p{Dt=_FONT}', "");
Expect(1, 8449, '\p{^Dt=_FONT}', "");
Expect(1, 8449, '\P{Dt=_FONT}', "");
Expect(0, 8449, '\P{^Dt=_FONT}', "");
Error('\p{Is_Decomposition_Type=	 Font/a/}');
Error('\P{Is_Decomposition_Type=	 Font/a/}');
Expect(1, 8450, '\p{Is_Decomposition_Type: font}', "");
Expect(0, 8450, '\p{^Is_Decomposition_Type: font}', "");
Expect(0, 8450, '\P{Is_Decomposition_Type: font}', "");
Expect(1, 8450, '\P{^Is_Decomposition_Type: font}', "");
Expect(0, 8449, '\p{Is_Decomposition_Type: font}', "");
Expect(1, 8449, '\p{^Is_Decomposition_Type: font}', "");
Expect(1, 8449, '\P{Is_Decomposition_Type: font}', "");
Expect(0, 8449, '\P{^Is_Decomposition_Type: font}', "");
Expect(1, 8450, '\p{Is_Decomposition_Type=Font}', "");
Expect(0, 8450, '\p{^Is_Decomposition_Type=Font}', "");
Expect(0, 8450, '\P{Is_Decomposition_Type=Font}', "");
Expect(1, 8450, '\P{^Is_Decomposition_Type=Font}', "");
Expect(0, 8449, '\p{Is_Decomposition_Type=Font}', "");
Expect(1, 8449, '\p{^Is_Decomposition_Type=Font}', "");
Expect(1, 8449, '\P{Is_Decomposition_Type=Font}', "");
Expect(0, 8449, '\P{^Is_Decomposition_Type=Font}', "");
Error('\p{Is_Dt=:=--Font}');
Error('\P{Is_Dt=:=--Font}');
Expect(1, 8450, '\p{Is_Dt=font}', "");
Expect(0, 8450, '\p{^Is_Dt=font}', "");
Expect(0, 8450, '\P{Is_Dt=font}', "");
Expect(1, 8450, '\P{^Is_Dt=font}', "");
Expect(0, 8449, '\p{Is_Dt=font}', "");
Expect(1, 8449, '\p{^Is_Dt=font}', "");
Expect(1, 8449, '\P{Is_Dt=font}', "");
Expect(0, 8449, '\P{^Is_Dt=font}', "");
Expect(1, 8450, '\p{Is_Dt=	Font}', "");
Expect(0, 8450, '\p{^Is_Dt=	Font}', "");
Expect(0, 8450, '\P{Is_Dt=	Font}', "");
Expect(1, 8450, '\P{^Is_Dt=	Font}', "");
Expect(0, 8449, '\p{Is_Dt=	Font}', "");
Expect(1, 8449, '\p{^Is_Dt=	Font}', "");
Expect(1, 8449, '\P{Is_Dt=	Font}', "");
Expect(0, 8449, '\P{^Is_Dt=	Font}', "");
Error('\p{Decomposition_Type=:=	 nobreak}');
Error('\P{Decomposition_Type=:=	 nobreak}');
Expect(1, 160, '\p{Decomposition_Type=nobreak}', "");
Expect(0, 160, '\p{^Decomposition_Type=nobreak}', "");
Expect(0, 160, '\P{Decomposition_Type=nobreak}', "");
Expect(1, 160, '\P{^Decomposition_Type=nobreak}', "");
Expect(0, 159, '\p{Decomposition_Type=nobreak}', "");
Expect(1, 159, '\p{^Decomposition_Type=nobreak}', "");
Expect(1, 159, '\P{Decomposition_Type=nobreak}', "");
Expect(0, 159, '\P{^Decomposition_Type=nobreak}', "");
Expect(1, 160, '\p{Decomposition_Type=- Nobreak}', "");
Expect(0, 160, '\p{^Decomposition_Type=- Nobreak}', "");
Expect(0, 160, '\P{Decomposition_Type=- Nobreak}', "");
Expect(1, 160, '\P{^Decomposition_Type=- Nobreak}', "");
Expect(0, 159, '\p{Decomposition_Type=- Nobreak}', "");
Expect(1, 159, '\p{^Decomposition_Type=- Nobreak}', "");
Expect(1, 159, '\P{Decomposition_Type=- Nobreak}', "");
Expect(0, 159, '\P{^Decomposition_Type=- Nobreak}', "");
Error('\p{Dt=:= _Nb}');
Error('\P{Dt=:= _Nb}');
Expect(1, 160, '\p{Dt=nb}', "");
Expect(0, 160, '\p{^Dt=nb}', "");
Expect(0, 160, '\P{Dt=nb}', "");
Expect(1, 160, '\P{^Dt=nb}', "");
Expect(0, 159, '\p{Dt=nb}', "");
Expect(1, 159, '\p{^Dt=nb}', "");
Expect(1, 159, '\P{Dt=nb}', "");
Expect(0, 159, '\P{^Dt=nb}', "");
Expect(1, 160, '\p{Dt=--Nb}', "");
Expect(0, 160, '\p{^Dt=--Nb}', "");
Expect(0, 160, '\P{Dt=--Nb}', "");
Expect(1, 160, '\P{^Dt=--Nb}', "");
Expect(0, 159, '\p{Dt=--Nb}', "");
Expect(1, 159, '\p{^Dt=--Nb}', "");
Expect(1, 159, '\P{Dt=--Nb}', "");
Expect(0, 159, '\P{^Dt=--Nb}', "");
Error('\p{Is_Decomposition_Type=-NOBREAK/a/}');
Error('\P{Is_Decomposition_Type=-NOBREAK/a/}');
Expect(1, 160, '\p{Is_Decomposition_Type=nobreak}', "");
Expect(0, 160, '\p{^Is_Decomposition_Type=nobreak}', "");
Expect(0, 160, '\P{Is_Decomposition_Type=nobreak}', "");
Expect(1, 160, '\P{^Is_Decomposition_Type=nobreak}', "");
Expect(0, 159, '\p{Is_Decomposition_Type=nobreak}', "");
Expect(1, 159, '\p{^Is_Decomposition_Type=nobreak}', "");
Expect(1, 159, '\P{Is_Decomposition_Type=nobreak}', "");
Expect(0, 159, '\P{^Is_Decomposition_Type=nobreak}', "");
Expect(1, 160, '\p{Is_Decomposition_Type=	-NOBREAK}', "");
Expect(0, 160, '\p{^Is_Decomposition_Type=	-NOBREAK}', "");
Expect(0, 160, '\P{Is_Decomposition_Type=	-NOBREAK}', "");
Expect(1, 160, '\P{^Is_Decomposition_Type=	-NOBREAK}', "");
Expect(0, 159, '\p{Is_Decomposition_Type=	-NOBREAK}', "");
Expect(1, 159, '\p{^Is_Decomposition_Type=	-NOBREAK}', "");
Expect(1, 159, '\P{Is_Decomposition_Type=	-NOBREAK}', "");
Expect(0, 159, '\P{^Is_Decomposition_Type=	-NOBREAK}', "");
Error('\p{Is_Dt=:=-Nb}');
Error('\P{Is_Dt=:=-Nb}');
Expect(1, 160, '\p{Is_Dt=nb}', "");
Expect(0, 160, '\p{^Is_Dt=nb}', "");
Expect(0, 160, '\P{Is_Dt=nb}', "");
Expect(1, 160, '\P{^Is_Dt=nb}', "");
Expect(0, 159, '\p{Is_Dt=nb}', "");
Expect(1, 159, '\p{^Is_Dt=nb}', "");
Expect(1, 159, '\P{Is_Dt=nb}', "");
Expect(0, 159, '\P{^Is_Dt=nb}', "");
Expect(1, 160, '\p{Is_Dt=_ NB}', "");
Expect(0, 160, '\p{^Is_Dt=_ NB}', "");
Expect(0, 160, '\P{Is_Dt=_ NB}', "");
Expect(1, 160, '\P{^Is_Dt=_ NB}', "");
Expect(0, 159, '\p{Is_Dt=_ NB}', "");
Expect(1, 159, '\p{^Is_Dt=_ NB}', "");
Expect(1, 159, '\P{Is_Dt=_ NB}', "");
Expect(0, 159, '\P{^Is_Dt=_ NB}', "");
Error('\p{Decomposition_Type=-/a/Non Canonical}');
Error('\P{Decomposition_Type=-/a/Non Canonical}');
Expect(1, 160, '\p{Decomposition_Type=noncanonical}', "");
Expect(0, 160, '\p{^Decomposition_Type=noncanonical}', "");
Expect(0, 160, '\P{Decomposition_Type=noncanonical}', "");
Expect(1, 160, '\P{^Decomposition_Type=noncanonical}', "");
Expect(0, 159, '\p{Decomposition_Type=noncanonical}', "");
Expect(1, 159, '\p{^Decomposition_Type=noncanonical}', "");
Expect(1, 159, '\P{Decomposition_Type=noncanonical}', "");
Expect(0, 159, '\P{^Decomposition_Type=noncanonical}', "");
Expect(1, 160, '\p{Decomposition_Type: Non	Canonical}', "");
Expect(0, 160, '\p{^Decomposition_Type: Non	Canonical}', "");
Expect(0, 160, '\P{Decomposition_Type: Non	Canonical}', "");
Expect(1, 160, '\P{^Decomposition_Type: Non	Canonical}', "");
Expect(0, 159, '\p{Decomposition_Type: Non	Canonical}', "");
Expect(1, 159, '\p{^Decomposition_Type: Non	Canonical}', "");
Expect(1, 159, '\P{Decomposition_Type: Non	Canonical}', "");
Expect(0, 159, '\P{^Decomposition_Type: Non	Canonical}', "");
Error('\p{Dt=	nonCANON:=}');
Error('\P{Dt=	nonCANON:=}');
Expect(1, 160, '\p{Dt=noncanon}', "");
Expect(0, 160, '\p{^Dt=noncanon}', "");
Expect(0, 160, '\P{Dt=noncanon}', "");
Expect(1, 160, '\P{^Dt=noncanon}', "");
Expect(0, 159, '\p{Dt=noncanon}', "");
Expect(1, 159, '\p{^Dt=noncanon}', "");
Expect(1, 159, '\P{Dt=noncanon}', "");
Expect(0, 159, '\P{^Dt=noncanon}', "");
Expect(1, 160, '\p{Dt= 	NONCanon}', "");
Expect(0, 160, '\p{^Dt= 	NONCanon}', "");
Expect(0, 160, '\P{Dt= 	NONCanon}', "");
Expect(1, 160, '\P{^Dt= 	NONCanon}', "");
Expect(0, 159, '\p{Dt= 	NONCanon}', "");
Expect(1, 159, '\p{^Dt= 	NONCanon}', "");
Expect(1, 159, '\P{Dt= 	NONCanon}', "");
Expect(0, 159, '\P{^Dt= 	NONCanon}', "");
Error('\p{Is_Decomposition_Type=_-Non_Canonical/a/}');
Error('\P{Is_Decomposition_Type=_-Non_Canonical/a/}');
Expect(1, 160, '\p{Is_Decomposition_Type=noncanonical}', "");
Expect(0, 160, '\p{^Is_Decomposition_Type=noncanonical}', "");
Expect(0, 160, '\P{Is_Decomposition_Type=noncanonical}', "");
Expect(1, 160, '\P{^Is_Decomposition_Type=noncanonical}', "");
Expect(0, 159, '\p{Is_Decomposition_Type=noncanonical}', "");
Expect(1, 159, '\p{^Is_Decomposition_Type=noncanonical}', "");
Expect(1, 159, '\P{Is_Decomposition_Type=noncanonical}', "");
Expect(0, 159, '\P{^Is_Decomposition_Type=noncanonical}', "");
Expect(1, 160, '\p{Is_Decomposition_Type: 	 Non CANONICAL}', "");
Expect(0, 160, '\p{^Is_Decomposition_Type: 	 Non CANONICAL}', "");
Expect(0, 160, '\P{Is_Decomposition_Type: 	 Non CANONICAL}', "");
Expect(1, 160, '\P{^Is_Decomposition_Type: 	 Non CANONICAL}', "");
Expect(0, 159, '\p{Is_Decomposition_Type: 	 Non CANONICAL}', "");
Expect(1, 159, '\p{^Is_Decomposition_Type: 	 Non CANONICAL}', "");
Expect(1, 159, '\P{Is_Decomposition_Type: 	 Non CANONICAL}', "");
Expect(0, 159, '\P{^Is_Decomposition_Type: 	 Non CANONICAL}', "");
Error('\p{Is_Dt=/a/Non-CANON}');
Error('\P{Is_Dt=/a/Non-CANON}');
Expect(1, 160, '\p{Is_Dt:noncanon}', "");
Expect(0, 160, '\p{^Is_Dt:noncanon}', "");
Expect(0, 160, '\P{Is_Dt:noncanon}', "");
Expect(1, 160, '\P{^Is_Dt:noncanon}', "");
Expect(0, 159, '\p{Is_Dt:noncanon}', "");
Expect(1, 159, '\p{^Is_Dt:noncanon}', "");
Expect(1, 159, '\P{Is_Dt:noncanon}', "");
Expect(0, 159, '\P{^Is_Dt:noncanon}', "");
Expect(1, 160, '\p{Is_Dt=_-Non canon}', "");
Expect(0, 160, '\p{^Is_Dt=_-Non canon}', "");
Expect(0, 160, '\P{Is_Dt=_-Non canon}', "");
Expect(1, 160, '\P{^Is_Dt=_-Non canon}', "");
Expect(0, 159, '\p{Is_Dt=_-Non canon}', "");
Expect(1, 159, '\p{^Is_Dt=_-Non canon}', "");
Expect(1, 159, '\P{Is_Dt=_-Non canon}', "");
Expect(0, 159, '\P{^Is_Dt=_-Non canon}', "");
Error('\p{Decomposition_Type= FINAL:=}');
Error('\P{Decomposition_Type= FINAL:=}');
Expect(1, 64337, '\p{Decomposition_Type=final}', "");
Expect(0, 64337, '\p{^Decomposition_Type=final}', "");
Expect(0, 64337, '\P{Decomposition_Type=final}', "");
Expect(1, 64337, '\P{^Decomposition_Type=final}', "");
Expect(0, 64336, '\p{Decomposition_Type=final}', "");
Expect(1, 64336, '\p{^Decomposition_Type=final}', "");
Expect(1, 64336, '\P{Decomposition_Type=final}', "");
Expect(0, 64336, '\P{^Decomposition_Type=final}', "");
Expect(1, 64337, '\p{Decomposition_Type:	 -Final}', "");
Expect(0, 64337, '\p{^Decomposition_Type:	 -Final}', "");
Expect(0, 64337, '\P{Decomposition_Type:	 -Final}', "");
Expect(1, 64337, '\P{^Decomposition_Type:	 -Final}', "");
Expect(0, 64336, '\p{Decomposition_Type:	 -Final}', "");
Expect(1, 64336, '\p{^Decomposition_Type:	 -Final}', "");
Expect(1, 64336, '\P{Decomposition_Type:	 -Final}', "");
Expect(0, 64336, '\P{^Decomposition_Type:	 -Final}', "");
Error('\p{Dt=/a/Fin}');
Error('\P{Dt=/a/Fin}');
Expect(1, 64337, '\p{Dt=fin}', "");
Expect(0, 64337, '\p{^Dt=fin}', "");
Expect(0, 64337, '\P{Dt=fin}', "");
Expect(1, 64337, '\P{^Dt=fin}', "");
Expect(0, 64336, '\p{Dt=fin}', "");
Expect(1, 64336, '\p{^Dt=fin}', "");
Expect(1, 64336, '\P{Dt=fin}', "");
Expect(0, 64336, '\P{^Dt=fin}', "");
Expect(1, 64337, '\p{Dt= FIN}', "");
Expect(0, 64337, '\p{^Dt= FIN}', "");
Expect(0, 64337, '\P{Dt= FIN}', "");
Expect(1, 64337, '\P{^Dt= FIN}', "");
Expect(0, 64336, '\p{Dt= FIN}', "");
Expect(1, 64336, '\p{^Dt= FIN}', "");
Expect(1, 64336, '\P{Dt= FIN}', "");
Expect(0, 64336, '\P{^Dt= FIN}', "");
Error('\p{Is_Decomposition_Type=	 FINAL/a/}');
Error('\P{Is_Decomposition_Type=	 FINAL/a/}');
Expect(1, 64337, '\p{Is_Decomposition_Type=final}', "");
Expect(0, 64337, '\p{^Is_Decomposition_Type=final}', "");
Expect(0, 64337, '\P{Is_Decomposition_Type=final}', "");
Expect(1, 64337, '\P{^Is_Decomposition_Type=final}', "");
Expect(0, 64336, '\p{Is_Decomposition_Type=final}', "");
Expect(1, 64336, '\p{^Is_Decomposition_Type=final}', "");
Expect(1, 64336, '\P{Is_Decomposition_Type=final}', "");
Expect(0, 64336, '\P{^Is_Decomposition_Type=final}', "");
Expect(1, 64337, '\p{Is_Decomposition_Type=_Final}', "");
Expect(0, 64337, '\p{^Is_Decomposition_Type=_Final}', "");
Expect(0, 64337, '\P{Is_Decomposition_Type=_Final}', "");
Expect(1, 64337, '\P{^Is_Decomposition_Type=_Final}', "");
Expect(0, 64336, '\p{Is_Decomposition_Type=_Final}', "");
Expect(1, 64336, '\p{^Is_Decomposition_Type=_Final}', "");
Expect(1, 64336, '\P{Is_Decomposition_Type=_Final}', "");
Expect(0, 64336, '\P{^Is_Decomposition_Type=_Final}', "");
Error('\p{Is_Dt=:=FIN}');
Error('\P{Is_Dt=:=FIN}');
Expect(1, 64337, '\p{Is_Dt=fin}', "");
Expect(0, 64337, '\p{^Is_Dt=fin}', "");
Expect(0, 64337, '\P{Is_Dt=fin}', "");
Expect(1, 64337, '\P{^Is_Dt=fin}', "");
Expect(0, 64336, '\p{Is_Dt=fin}', "");
Expect(1, 64336, '\p{^Is_Dt=fin}', "");
Expect(1, 64336, '\P{Is_Dt=fin}', "");
Expect(0, 64336, '\P{^Is_Dt=fin}', "");
Expect(1, 64337, '\p{Is_Dt= fin}', "");
Expect(0, 64337, '\p{^Is_Dt= fin}', "");
Expect(0, 64337, '\P{Is_Dt= fin}', "");
Expect(1, 64337, '\P{^Is_Dt= fin}', "");
Expect(0, 64336, '\p{Is_Dt= fin}', "");
Expect(1, 64336, '\p{^Is_Dt= fin}', "");
Expect(1, 64336, '\P{Is_Dt= fin}', "");
Expect(0, 64336, '\P{^Is_Dt= fin}', "");
Error('\p{Decomposition_Type=--Wide/a/}');
Error('\P{Decomposition_Type=--Wide/a/}');
Expect(1, 12288, '\p{Decomposition_Type=wide}', "");
Expect(0, 12288, '\p{^Decomposition_Type=wide}', "");
Expect(0, 12288, '\P{Decomposition_Type=wide}', "");
Expect(1, 12288, '\P{^Decomposition_Type=wide}', "");
Expect(0, 12287, '\p{Decomposition_Type=wide}', "");
Expect(1, 12287, '\p{^Decomposition_Type=wide}', "");
Expect(1, 12287, '\P{Decomposition_Type=wide}', "");
Expect(0, 12287, '\P{^Decomposition_Type=wide}', "");
Expect(1, 12288, '\p{Decomposition_Type=_-WIDE}', "");
Expect(0, 12288, '\p{^Decomposition_Type=_-WIDE}', "");
Expect(0, 12288, '\P{Decomposition_Type=_-WIDE}', "");
Expect(1, 12288, '\P{^Decomposition_Type=_-WIDE}', "");
Expect(0, 12287, '\p{Decomposition_Type=_-WIDE}', "");
Expect(1, 12287, '\p{^Decomposition_Type=_-WIDE}', "");
Expect(1, 12287, '\P{Decomposition_Type=_-WIDE}', "");
Expect(0, 12287, '\P{^Decomposition_Type=_-WIDE}', "");
Error('\p{Dt=:=  WIDE}');
Error('\P{Dt=:=  WIDE}');
Expect(1, 12288, '\p{Dt=wide}', "");
Expect(0, 12288, '\p{^Dt=wide}', "");
Expect(0, 12288, '\P{Dt=wide}', "");
Expect(1, 12288, '\P{^Dt=wide}', "");
Expect(0, 12287, '\p{Dt=wide}', "");
Expect(1, 12287, '\p{^Dt=wide}', "");
Expect(1, 12287, '\P{Dt=wide}', "");
Expect(0, 12287, '\P{^Dt=wide}', "");
Expect(1, 12288, '\p{Dt=-_Wide}', "");
Expect(0, 12288, '\p{^Dt=-_Wide}', "");
Expect(0, 12288, '\P{Dt=-_Wide}', "");
Expect(1, 12288, '\P{^Dt=-_Wide}', "");
Expect(0, 12287, '\p{Dt=-_Wide}', "");
Expect(1, 12287, '\p{^Dt=-_Wide}', "");
Expect(1, 12287, '\P{Dt=-_Wide}', "");
Expect(0, 12287, '\P{^Dt=-_Wide}', "");
Error('\p{Is_Decomposition_Type=-/a/Wide}');
Error('\P{Is_Decomposition_Type=-/a/Wide}');
Expect(1, 12288, '\p{Is_Decomposition_Type=wide}', "");
Expect(0, 12288, '\p{^Is_Decomposition_Type=wide}', "");
Expect(0, 12288, '\P{Is_Decomposition_Type=wide}', "");
Expect(1, 12288, '\P{^Is_Decomposition_Type=wide}', "");
Expect(0, 12287, '\p{Is_Decomposition_Type=wide}', "");
Expect(1, 12287, '\p{^Is_Decomposition_Type=wide}', "");
Expect(1, 12287, '\P{Is_Decomposition_Type=wide}', "");
Expect(0, 12287, '\P{^Is_Decomposition_Type=wide}', "");
Expect(1, 12288, '\p{Is_Decomposition_Type=	 Wide}', "");
Expect(0, 12288, '\p{^Is_Decomposition_Type=	 Wide}', "");
Expect(0, 12288, '\P{Is_Decomposition_Type=	 Wide}', "");
Expect(1, 12288, '\P{^Is_Decomposition_Type=	 Wide}', "");
Expect(0, 12287, '\p{Is_Decomposition_Type=	 Wide}', "");
Expect(1, 12287, '\p{^Is_Decomposition_Type=	 Wide}', "");
Expect(1, 12287, '\P{Is_Decomposition_Type=	 Wide}', "");
Expect(0, 12287, '\P{^Is_Decomposition_Type=	 Wide}', "");
Error('\p{Is_Dt=_-wide:=}');
Error('\P{Is_Dt=_-wide:=}');
Expect(1, 12288, '\p{Is_Dt=wide}', "");
Expect(0, 12288, '\p{^Is_Dt=wide}', "");
Expect(0, 12288, '\P{Is_Dt=wide}', "");
Expect(1, 12288, '\P{^Is_Dt=wide}', "");
Expect(0, 12287, '\p{Is_Dt=wide}', "");
Expect(1, 12287, '\p{^Is_Dt=wide}', "");
Expect(1, 12287, '\P{Is_Dt=wide}', "");
Expect(0, 12287, '\P{^Is_Dt=wide}', "");
Expect(1, 12288, '\p{Is_Dt: 	WIDE}', "");
Expect(0, 12288, '\p{^Is_Dt: 	WIDE}', "");
Expect(0, 12288, '\P{Is_Dt: 	WIDE}', "");
Expect(1, 12288, '\P{^Is_Dt: 	WIDE}', "");
Expect(0, 12287, '\p{Is_Dt: 	WIDE}', "");
Expect(1, 12287, '\p{^Is_Dt: 	WIDE}', "");
Expect(1, 12287, '\P{Is_Dt: 	WIDE}', "");
Expect(0, 12287, '\P{^Is_Dt: 	WIDE}', "");
Error('\p{Decomposition_Type=/a/- canonical}');
Error('\P{Decomposition_Type=/a/- canonical}');
Expect(1, 197, '\p{Decomposition_Type=canonical}', "");
Expect(0, 197, '\p{^Decomposition_Type=canonical}', "");
Expect(0, 197, '\P{Decomposition_Type=canonical}', "");
Expect(1, 197, '\P{^Decomposition_Type=canonical}', "");
Expect(0, 191, '\p{Decomposition_Type=canonical}', "");
Expect(1, 191, '\p{^Decomposition_Type=canonical}', "");
Expect(1, 191, '\P{Decomposition_Type=canonical}', "");
Expect(0, 191, '\P{^Decomposition_Type=canonical}', "");
Expect(1, 197, '\p{Decomposition_Type= -CANONICAL}', "");
Expect(0, 197, '\p{^Decomposition_Type= -CANONICAL}', "");
Expect(0, 197, '\P{Decomposition_Type= -CANONICAL}', "");
Expect(1, 197, '\P{^Decomposition_Type= -CANONICAL}', "");
Expect(0, 191, '\p{Decomposition_Type= -CANONICAL}', "");
Expect(1, 191, '\p{^Decomposition_Type= -CANONICAL}', "");
Expect(1, 191, '\P{Decomposition_Type= -CANONICAL}', "");
Expect(0, 191, '\P{^Decomposition_Type= -CANONICAL}', "");
Error('\p{Dt=_:=Can}');
Error('\P{Dt=_:=Can}');
Expect(1, 197, '\p{Dt=can}', "");
Expect(0, 197, '\p{^Dt=can}', "");
Expect(0, 197, '\P{Dt=can}', "");
Expect(1, 197, '\P{^Dt=can}', "");
Expect(0, 191, '\p{Dt=can}', "");
Expect(1, 191, '\p{^Dt=can}', "");
Expect(1, 191, '\P{Dt=can}', "");
Expect(0, 191, '\P{^Dt=can}', "");
Expect(1, 197, '\p{Dt=_can}', "");
Expect(0, 197, '\p{^Dt=_can}', "");
Expect(0, 197, '\P{Dt=_can}', "");
Expect(1, 197, '\P{^Dt=_can}', "");
Expect(0, 191, '\p{Dt=_can}', "");
Expect(1, 191, '\p{^Dt=_can}', "");
Expect(1, 191, '\P{Dt=_can}', "");
Expect(0, 191, '\P{^Dt=_can}', "");
Error('\p{Is_Decomposition_Type=	-Canonical/a/}');
Error('\P{Is_Decomposition_Type=	-Canonical/a/}');
Expect(1, 197, '\p{Is_Decomposition_Type=canonical}', "");
Expect(0, 197, '\p{^Is_Decomposition_Type=canonical}', "");
Expect(0, 197, '\P{Is_Decomposition_Type=canonical}', "");
Expect(1, 197, '\P{^Is_Decomposition_Type=canonical}', "");
Expect(0, 191, '\p{Is_Decomposition_Type=canonical}', "");
Expect(1, 191, '\p{^Is_Decomposition_Type=canonical}', "");
Expect(1, 191, '\P{Is_Decomposition_Type=canonical}', "");
Expect(0, 191, '\P{^Is_Decomposition_Type=canonical}', "");
Expect(1, 197, '\p{Is_Decomposition_Type=	 canonical}', "");
Expect(0, 197, '\p{^Is_Decomposition_Type=	 canonical}', "");
Expect(0, 197, '\P{Is_Decomposition_Type=	 canonical}', "");
Expect(1, 197, '\P{^Is_Decomposition_Type=	 canonical}', "");
Expect(0, 191, '\p{Is_Decomposition_Type=	 canonical}', "");
Expect(1, 191, '\p{^Is_Decomposition_Type=	 canonical}', "");
Expect(1, 191, '\P{Is_Decomposition_Type=	 canonical}', "");
Expect(0, 191, '\P{^Is_Decomposition_Type=	 canonical}', "");
Error('\p{Is_Dt=:=  CAN}');
Error('\P{Is_Dt=:=  CAN}');
Expect(1, 197, '\p{Is_Dt=can}', "");
Expect(0, 197, '\p{^Is_Dt=can}', "");
Expect(0, 197, '\P{Is_Dt=can}', "");
Expect(1, 197, '\P{^Is_Dt=can}', "");
Expect(0, 191, '\p{Is_Dt=can}', "");
Expect(1, 191, '\p{^Is_Dt=can}', "");
Expect(1, 191, '\P{Is_Dt=can}', "");
Expect(0, 191, '\P{^Is_Dt=can}', "");
Expect(1, 197, '\p{Is_Dt=-can}', "");
Expect(0, 197, '\p{^Is_Dt=-can}', "");
Expect(0, 197, '\P{Is_Dt=-can}', "");
Expect(1, 197, '\P{^Is_Dt=-can}', "");
Expect(0, 191, '\p{Is_Dt=-can}', "");
Expect(1, 191, '\p{^Is_Dt=-can}', "");
Expect(1, 191, '\P{Is_Dt=-can}', "");
Expect(0, 191, '\P{^Is_Dt=-can}', "");
Error('\p{Decomposition_Type= -VERTICAL/a/}');
Error('\P{Decomposition_Type= -VERTICAL/a/}');
Expect(1, 12447, '\p{Decomposition_Type=vertical}', "");
Expect(0, 12447, '\p{^Decomposition_Type=vertical}', "");
Expect(0, 12447, '\P{Decomposition_Type=vertical}', "");
Expect(1, 12447, '\P{^Decomposition_Type=vertical}', "");
Expect(0, 12446, '\p{Decomposition_Type=vertical}', "");
Expect(1, 12446, '\p{^Decomposition_Type=vertical}', "");
Expect(1, 12446, '\P{Decomposition_Type=vertical}', "");
Expect(0, 12446, '\P{^Decomposition_Type=vertical}', "");
Expect(1, 12447, '\p{Decomposition_Type= 	Vertical}', "");
Expect(0, 12447, '\p{^Decomposition_Type= 	Vertical}', "");
Expect(0, 12447, '\P{Decomposition_Type= 	Vertical}', "");
Expect(1, 12447, '\P{^Decomposition_Type= 	Vertical}', "");
Expect(0, 12446, '\p{Decomposition_Type= 	Vertical}', "");
Expect(1, 12446, '\p{^Decomposition_Type= 	Vertical}', "");
Expect(1, 12446, '\P{Decomposition_Type= 	Vertical}', "");
Expect(0, 12446, '\P{^Decomposition_Type= 	Vertical}', "");
Error('\p{Dt=	/a/Vert}');
Error('\P{Dt=	/a/Vert}');
Expect(1, 12447, '\p{Dt=vert}', "");
Expect(0, 12447, '\p{^Dt=vert}', "");
Expect(0, 12447, '\P{Dt=vert}', "");
Expect(1, 12447, '\P{^Dt=vert}', "");
Expect(0, 12446, '\p{Dt=vert}', "");
Expect(1, 12446, '\p{^Dt=vert}', "");
Expect(1, 12446, '\P{Dt=vert}', "");
Expect(0, 12446, '\P{^Dt=vert}', "");
Error('\p{Is_Decomposition_Type=-	Vertical/a/}');
Error('\P{Is_Decomposition_Type=-	Vertical/a/}');
Expect(1, 12447, '\p{Is_Decomposition_Type=vertical}', "");
Expect(0, 12447, '\p{^Is_Decomposition_Type=vertical}', "");
Expect(0, 12447, '\P{Is_Decomposition_Type=vertical}', "");
Expect(1, 12447, '\P{^Is_Decomposition_Type=vertical}', "");
Expect(0, 12446, '\p{Is_Decomposition_Type=vertical}', "");
Expect(1, 12446, '\p{^Is_Decomposition_Type=vertical}', "");
Expect(1, 12446, '\P{Is_Decomposition_Type=vertical}', "");
Expect(0, 12446, '\P{^Is_Decomposition_Type=vertical}', "");
Expect(1, 12447, '\p{Is_Decomposition_Type=_vertical}', "");
Expect(0, 12447, '\p{^Is_Decomposition_Type=_vertical}', "");
Expect(0, 12447, '\P{Is_Decomposition_Type=_vertical}', "");
Expect(1, 12447, '\P{^Is_Decomposition_Type=_vertical}', "");
Expect(0, 12446, '\p{Is_Decomposition_Type=_vertical}', "");
Expect(1, 12446, '\p{^Is_Decomposition_Type=_vertical}', "");
Expect(1, 12446, '\P{Is_Decomposition_Type=_vertical}', "");
Expect(0, 12446, '\P{^Is_Decomposition_Type=_vertical}', "");
Error('\p{Is_Dt=		Vert:=}');
Error('\P{Is_Dt=		Vert:=}');
Expect(1, 12447, '\p{Is_Dt=vert}', "");
Expect(0, 12447, '\p{^Is_Dt=vert}', "");
Expect(0, 12447, '\P{Is_Dt=vert}', "");
Expect(1, 12447, '\P{^Is_Dt=vert}', "");
Expect(0, 12446, '\p{Is_Dt=vert}', "");
Expect(1, 12446, '\p{^Is_Dt=vert}', "");
Expect(1, 12446, '\P{Is_Dt=vert}', "");
Expect(0, 12446, '\P{^Is_Dt=vert}', "");
Expect(1, 12447, '\p{Is_Dt=_Vert}', "");
Expect(0, 12447, '\p{^Is_Dt=_Vert}', "");
Expect(0, 12447, '\P{Is_Dt=_Vert}', "");
Expect(1, 12447, '\P{^Is_Dt=_Vert}', "");
Expect(0, 12446, '\p{Is_Dt=_Vert}', "");
Expect(1, 12446, '\p{^Is_Dt=_Vert}', "");
Expect(1, 12446, '\P{Is_Dt=_Vert}', "");
Expect(0, 12446, '\P{^Is_Dt=_Vert}', "");
Error('\p{Decomposition_Type=/a/		Medial}');
Error('\P{Decomposition_Type=/a/		Medial}');
Expect(1, 64341, '\p{Decomposition_Type=medial}', "");
Expect(0, 64341, '\p{^Decomposition_Type=medial}', "");
Expect(0, 64341, '\P{Decomposition_Type=medial}', "");
Expect(1, 64341, '\P{^Decomposition_Type=medial}', "");
Expect(0, 64340, '\p{Decomposition_Type=medial}', "");
Expect(1, 64340, '\p{^Decomposition_Type=medial}', "");
Expect(1, 64340, '\P{Decomposition_Type=medial}', "");
Expect(0, 64340, '\P{^Decomposition_Type=medial}', "");
Expect(1, 64341, '\p{Decomposition_Type=-Medial}', "");
Expect(0, 64341, '\p{^Decomposition_Type=-Medial}', "");
Expect(0, 64341, '\P{Decomposition_Type=-Medial}', "");
Expect(1, 64341, '\P{^Decomposition_Type=-Medial}', "");
Expect(0, 64340, '\p{Decomposition_Type=-Medial}', "");
Expect(1, 64340, '\p{^Decomposition_Type=-Medial}', "");
Expect(1, 64340, '\P{Decomposition_Type=-Medial}', "");
Expect(0, 64340, '\P{^Decomposition_Type=-Medial}', "");
Error('\p{Dt=-:=Med}');
Error('\P{Dt=-:=Med}');
Expect(1, 64341, '\p{Dt=med}', "");
Expect(0, 64341, '\p{^Dt=med}', "");
Expect(0, 64341, '\P{Dt=med}', "");
Expect(1, 64341, '\P{^Dt=med}', "");
Expect(0, 64340, '\p{Dt=med}', "");
Expect(1, 64340, '\p{^Dt=med}', "");
Expect(1, 64340, '\P{Dt=med}', "");
Expect(0, 64340, '\P{^Dt=med}', "");
Expect(1, 64341, '\p{Dt=_ med}', "");
Expect(0, 64341, '\p{^Dt=_ med}', "");
Expect(0, 64341, '\P{Dt=_ med}', "");
Expect(1, 64341, '\P{^Dt=_ med}', "");
Expect(0, 64340, '\p{Dt=_ med}', "");
Expect(1, 64340, '\p{^Dt=_ med}', "");
Expect(1, 64340, '\P{Dt=_ med}', "");
Expect(0, 64340, '\P{^Dt=_ med}', "");
Error('\p{Is_Decomposition_Type=	_medial/a/}');
Error('\P{Is_Decomposition_Type=	_medial/a/}');
Expect(1, 64341, '\p{Is_Decomposition_Type=medial}', "");
Expect(0, 64341, '\p{^Is_Decomposition_Type=medial}', "");
Expect(0, 64341, '\P{Is_Decomposition_Type=medial}', "");
Expect(1, 64341, '\P{^Is_Decomposition_Type=medial}', "");
Expect(0, 64340, '\p{Is_Decomposition_Type=medial}', "");
Expect(1, 64340, '\p{^Is_Decomposition_Type=medial}', "");
Expect(1, 64340, '\P{Is_Decomposition_Type=medial}', "");
Expect(0, 64340, '\P{^Is_Decomposition_Type=medial}', "");
Expect(1, 64341, '\p{Is_Decomposition_Type= MEDIAL}', "");
Expect(0, 64341, '\p{^Is_Decomposition_Type= MEDIAL}', "");
Expect(0, 64341, '\P{Is_Decomposition_Type= MEDIAL}', "");
Expect(1, 64341, '\P{^Is_Decomposition_Type= MEDIAL}', "");
Expect(0, 64340, '\p{Is_Decomposition_Type= MEDIAL}', "");
Expect(1, 64340, '\p{^Is_Decomposition_Type= MEDIAL}', "");
Expect(1, 64340, '\P{Is_Decomposition_Type= MEDIAL}', "");
Expect(0, 64340, '\P{^Is_Decomposition_Type= MEDIAL}', "");
Error('\p{Is_Dt=	_med/a/}');
Error('\P{Is_Dt=	_med/a/}');
Expect(1, 64341, '\p{Is_Dt=med}', "");
Expect(0, 64341, '\p{^Is_Dt=med}', "");
Expect(0, 64341, '\P{Is_Dt=med}', "");
Expect(1, 64341, '\P{^Is_Dt=med}', "");
Expect(0, 64340, '\p{Is_Dt=med}', "");
Expect(1, 64340, '\p{^Is_Dt=med}', "");
Expect(1, 64340, '\P{Is_Dt=med}', "");
Expect(0, 64340, '\P{^Is_Dt=med}', "");
Expect(1, 64341, '\p{Is_Dt=	Med}', "");
Expect(0, 64341, '\p{^Is_Dt=	Med}', "");
Expect(0, 64341, '\P{Is_Dt=	Med}', "");
Expect(1, 64341, '\P{^Is_Dt=	Med}', "");
Expect(0, 64340, '\p{Is_Dt=	Med}', "");
Expect(1, 64340, '\p{^Is_Dt=	Med}', "");
Expect(1, 64340, '\P{Is_Dt=	Med}', "");
Expect(0, 64340, '\P{^Is_Dt=	Med}', "");
Error('\p{Decomposition_Type=:=		narrow}');
Error('\P{Decomposition_Type=:=		narrow}');
Expect(1, 65470, '\p{Decomposition_Type=narrow}', "");
Expect(0, 65470, '\p{^Decomposition_Type=narrow}', "");
Expect(0, 65470, '\P{Decomposition_Type=narrow}', "");
Expect(1, 65470, '\P{^Decomposition_Type=narrow}', "");
Expect(0, 65376, '\p{Decomposition_Type=narrow}', "");
Expect(1, 65376, '\p{^Decomposition_Type=narrow}', "");
Expect(1, 65376, '\P{Decomposition_Type=narrow}', "");
Expect(0, 65376, '\P{^Decomposition_Type=narrow}', "");
Expect(1, 65470, '\p{Decomposition_Type= -Narrow}', "");
Expect(0, 65470, '\p{^Decomposition_Type= -Narrow}', "");
Expect(0, 65470, '\P{Decomposition_Type= -Narrow}', "");
Expect(1, 65470, '\P{^Decomposition_Type= -Narrow}', "");
Expect(0, 65376, '\p{Decomposition_Type= -Narrow}', "");
Expect(1, 65376, '\p{^Decomposition_Type= -Narrow}', "");
Expect(1, 65376, '\P{Decomposition_Type= -Narrow}', "");
Expect(0, 65376, '\P{^Decomposition_Type= -Narrow}', "");
Error('\p{Dt:/a/__NAR}');
Error('\P{Dt:/a/__NAR}');
Expect(1, 65470, '\p{Dt=nar}', "");
Expect(0, 65470, '\p{^Dt=nar}', "");
Expect(0, 65470, '\P{Dt=nar}', "");
Expect(1, 65470, '\P{^Dt=nar}', "");
Expect(0, 65376, '\p{Dt=nar}', "");
Expect(1, 65376, '\p{^Dt=nar}', "");
Expect(1, 65376, '\P{Dt=nar}', "");
Expect(0, 65376, '\P{^Dt=nar}', "");
Expect(1, 65470, '\p{Dt=-_nar}', "");
Expect(0, 65470, '\p{^Dt=-_nar}', "");
Expect(0, 65470, '\P{Dt=-_nar}', "");
Expect(1, 65470, '\P{^Dt=-_nar}', "");
Expect(0, 65376, '\p{Dt=-_nar}', "");
Expect(1, 65376, '\p{^Dt=-_nar}', "");
Expect(1, 65376, '\P{Dt=-_nar}', "");
Expect(0, 65376, '\P{^Dt=-_nar}', "");
Error('\p{Is_Decomposition_Type=:=-	Narrow}');
Error('\P{Is_Decomposition_Type=:=-	Narrow}');
Expect(1, 65470, '\p{Is_Decomposition_Type=narrow}', "");
Expect(0, 65470, '\p{^Is_Decomposition_Type=narrow}', "");
Expect(0, 65470, '\P{Is_Decomposition_Type=narrow}', "");
Expect(1, 65470, '\P{^Is_Decomposition_Type=narrow}', "");
Expect(0, 65376, '\p{Is_Decomposition_Type=narrow}', "");
Expect(1, 65376, '\p{^Is_Decomposition_Type=narrow}', "");
Expect(1, 65376, '\P{Is_Decomposition_Type=narrow}', "");
Expect(0, 65376, '\P{^Is_Decomposition_Type=narrow}', "");
Expect(1, 65470, '\p{Is_Decomposition_Type=	-NARROW}', "");
Expect(0, 65470, '\p{^Is_Decomposition_Type=	-NARROW}', "");
Expect(0, 65470, '\P{Is_Decomposition_Type=	-NARROW}', "");
Expect(1, 65470, '\P{^Is_Decomposition_Type=	-NARROW}', "");
Expect(0, 65376, '\p{Is_Decomposition_Type=	-NARROW}', "");
Expect(1, 65376, '\p{^Is_Decomposition_Type=	-NARROW}', "");
Expect(1, 65376, '\P{Is_Decomposition_Type=	-NARROW}', "");
Expect(0, 65376, '\P{^Is_Decomposition_Type=	-NARROW}', "");
Error('\p{Is_Dt=	-nar/a/}');
Error('\P{Is_Dt=	-nar/a/}');
Expect(1, 65470, '\p{Is_Dt=nar}', "");
Expect(0, 65470, '\p{^Is_Dt=nar}', "");
Expect(0, 65470, '\P{Is_Dt=nar}', "");
Expect(1, 65470, '\P{^Is_Dt=nar}', "");
Expect(0, 65376, '\p{Is_Dt=nar}', "");
Expect(1, 65376, '\p{^Is_Dt=nar}', "");
Expect(1, 65376, '\P{Is_Dt=nar}', "");
Expect(0, 65376, '\P{^Is_Dt=nar}', "");
Expect(1, 65470, '\p{Is_Dt: - Nar}', "");
Expect(0, 65470, '\p{^Is_Dt: - Nar}', "");
Expect(0, 65470, '\P{Is_Dt: - Nar}', "");
Expect(1, 65470, '\P{^Is_Dt: - Nar}', "");
Expect(0, 65376, '\p{Is_Dt: - Nar}', "");
Expect(1, 65376, '\p{^Is_Dt: - Nar}', "");
Expect(1, 65376, '\P{Is_Dt: - Nar}', "");
Expect(0, 65376, '\P{^Is_Dt: - Nar}', "");
Error('\p{Decomposition_Type=:=- Sub}');
Error('\P{Decomposition_Type=:=- Sub}');
Expect(1, 7530, '\p{Decomposition_Type=sub}', "");
Expect(0, 7530, '\p{^Decomposition_Type=sub}', "");
Expect(0, 7530, '\P{Decomposition_Type=sub}', "");
Expect(1, 7530, '\P{^Decomposition_Type=sub}', "");
Expect(0, 7521, '\p{Decomposition_Type=sub}', "");
Expect(1, 7521, '\p{^Decomposition_Type=sub}', "");
Expect(1, 7521, '\P{Decomposition_Type=sub}', "");
Expect(0, 7521, '\P{^Decomposition_Type=sub}', "");
Expect(1, 7530, '\p{Decomposition_Type=_sub}', "");
Expect(0, 7530, '\p{^Decomposition_Type=_sub}', "");
Expect(0, 7530, '\P{Decomposition_Type=_sub}', "");
Expect(1, 7530, '\P{^Decomposition_Type=_sub}', "");
Expect(0, 7521, '\p{Decomposition_Type=_sub}', "");
Expect(1, 7521, '\p{^Decomposition_Type=_sub}', "");
Expect(1, 7521, '\P{Decomposition_Type=_sub}', "");
Expect(0, 7521, '\P{^Decomposition_Type=_sub}', "");
Error('\p{Dt=	 Sub/a/}');
Error('\P{Dt=	 Sub/a/}');
Expect(1, 7530, '\p{Dt=sub}', "");
Expect(0, 7530, '\p{^Dt=sub}', "");
Expect(0, 7530, '\P{Dt=sub}', "");
Expect(1, 7530, '\P{^Dt=sub}', "");
Expect(0, 7521, '\p{Dt=sub}', "");
Expect(1, 7521, '\p{^Dt=sub}', "");
Expect(1, 7521, '\P{Dt=sub}', "");
Expect(0, 7521, '\P{^Dt=sub}', "");
Expect(1, 7530, '\p{Dt=-Sub}', "");
Expect(0, 7530, '\p{^Dt=-Sub}', "");
Expect(0, 7530, '\P{Dt=-Sub}', "");
Expect(1, 7530, '\P{^Dt=-Sub}', "");
Expect(0, 7521, '\p{Dt=-Sub}', "");
Expect(1, 7521, '\p{^Dt=-Sub}', "");
Expect(1, 7521, '\P{Dt=-Sub}', "");
Expect(0, 7521, '\P{^Dt=-Sub}', "");
Error('\p{Is_Decomposition_Type=SUB:=}');
Error('\P{Is_Decomposition_Type=SUB:=}');
Expect(1, 7530, '\p{Is_Decomposition_Type=sub}', "");
Expect(0, 7530, '\p{^Is_Decomposition_Type=sub}', "");
Expect(0, 7530, '\P{Is_Decomposition_Type=sub}', "");
Expect(1, 7530, '\P{^Is_Decomposition_Type=sub}', "");
Expect(0, 7521, '\p{Is_Decomposition_Type=sub}', "");
Expect(1, 7521, '\p{^Is_Decomposition_Type=sub}', "");
Expect(1, 7521, '\P{Is_Decomposition_Type=sub}', "");
Expect(0, 7521, '\P{^Is_Decomposition_Type=sub}', "");
Expect(1, 7530, '\p{Is_Decomposition_Type= SUB}', "");
Expect(0, 7530, '\p{^Is_Decomposition_Type= SUB}', "");
Expect(0, 7530, '\P{Is_Decomposition_Type= SUB}', "");
Expect(1, 7530, '\P{^Is_Decomposition_Type= SUB}', "");
Expect(0, 7521, '\p{Is_Decomposition_Type= SUB}', "");
Expect(1, 7521, '\p{^Is_Decomposition_Type= SUB}', "");
Expect(1, 7521, '\P{Is_Decomposition_Type= SUB}', "");
Expect(0, 7521, '\P{^Is_Decomposition_Type= SUB}', "");
Error('\p{Is_Dt=:=	-Sub}');
Error('\P{Is_Dt=:=	-Sub}');
Expect(1, 7530, '\p{Is_Dt=sub}', "");
Expect(0, 7530, '\p{^Is_Dt=sub}', "");
Expect(0, 7530, '\P{Is_Dt=sub}', "");
Expect(1, 7530, '\P{^Is_Dt=sub}', "");
Expect(0, 7521, '\p{Is_Dt=sub}', "");
Expect(1, 7521, '\p{^Is_Dt=sub}', "");
Expect(1, 7521, '\P{Is_Dt=sub}', "");
Expect(0, 7521, '\P{^Is_Dt=sub}', "");
Expect(1, 7530, '\p{Is_Dt=-	Sub}', "");
Expect(0, 7530, '\p{^Is_Dt=-	Sub}', "");
Expect(0, 7530, '\P{Is_Dt=-	Sub}', "");
Expect(1, 7530, '\P{^Is_Dt=-	Sub}', "");
Expect(0, 7521, '\p{Is_Dt=-	Sub}', "");
Expect(1, 7521, '\p{^Is_Dt=-	Sub}', "");
Expect(1, 7521, '\P{Is_Dt=-	Sub}', "");
Expect(0, 7521, '\P{^Is_Dt=-	Sub}', "");
Error('\p{Decomposition_Type=/a/--SQUARE}');
Error('\P{Decomposition_Type=/a/--SQUARE}');
Expect(1, 12880, '\p{Decomposition_Type=square}', "");
Expect(0, 12880, '\p{^Decomposition_Type=square}', "");
Expect(0, 12880, '\P{Decomposition_Type=square}', "");
Expect(1, 12880, '\P{^Decomposition_Type=square}', "");
Expect(0, 12879, '\p{Decomposition_Type=square}', "");
Expect(1, 12879, '\p{^Decomposition_Type=square}', "");
Expect(1, 12879, '\P{Decomposition_Type=square}', "");
Expect(0, 12879, '\P{^Decomposition_Type=square}', "");
Expect(1, 12880, '\p{Decomposition_Type=Square}', "");
Expect(0, 12880, '\p{^Decomposition_Type=Square}', "");
Expect(0, 12880, '\P{Decomposition_Type=Square}', "");
Expect(1, 12880, '\P{^Decomposition_Type=Square}', "");
Expect(0, 12879, '\p{Decomposition_Type=Square}', "");
Expect(1, 12879, '\p{^Decomposition_Type=Square}', "");
Expect(1, 12879, '\P{Decomposition_Type=Square}', "");
Expect(0, 12879, '\P{^Decomposition_Type=Square}', "");
Error('\p{Dt=/a/sqr}');
Error('\P{Dt=/a/sqr}');
Expect(1, 12880, '\p{Dt=sqr}', "");
Expect(0, 12880, '\p{^Dt=sqr}', "");
Expect(0, 12880, '\P{Dt=sqr}', "");
Expect(1, 12880, '\P{^Dt=sqr}', "");
Expect(0, 12879, '\p{Dt=sqr}', "");
Expect(1, 12879, '\p{^Dt=sqr}', "");
Expect(1, 12879, '\P{Dt=sqr}', "");
Expect(0, 12879, '\P{^Dt=sqr}', "");
Expect(1, 12880, '\p{Dt= Sqr}', "");
Expect(0, 12880, '\p{^Dt= Sqr}', "");
Expect(0, 12880, '\P{Dt= Sqr}', "");
Expect(1, 12880, '\P{^Dt= Sqr}', "");
Expect(0, 12879, '\p{Dt= Sqr}', "");
Expect(1, 12879, '\p{^Dt= Sqr}', "");
Expect(1, 12879, '\P{Dt= Sqr}', "");
Expect(0, 12879, '\P{^Dt= Sqr}', "");
Error('\p{Is_Decomposition_Type=	SQUARE:=}');
Error('\P{Is_Decomposition_Type=	SQUARE:=}');
Expect(1, 12880, '\p{Is_Decomposition_Type=square}', "");
Expect(0, 12880, '\p{^Is_Decomposition_Type=square}', "");
Expect(0, 12880, '\P{Is_Decomposition_Type=square}', "");
Expect(1, 12880, '\P{^Is_Decomposition_Type=square}', "");
Expect(0, 12879, '\p{Is_Decomposition_Type=square}', "");
Expect(1, 12879, '\p{^Is_Decomposition_Type=square}', "");
Expect(1, 12879, '\P{Is_Decomposition_Type=square}', "");
Expect(0, 12879, '\P{^Is_Decomposition_Type=square}', "");
Expect(1, 12880, '\p{Is_Decomposition_Type= _SQUARE}', "");
Expect(0, 12880, '\p{^Is_Decomposition_Type= _SQUARE}', "");
Expect(0, 12880, '\P{Is_Decomposition_Type= _SQUARE}', "");
Expect(1, 12880, '\P{^Is_Decomposition_Type= _SQUARE}', "");
Expect(0, 12879, '\p{Is_Decomposition_Type= _SQUARE}', "");
Expect(1, 12879, '\p{^Is_Decomposition_Type= _SQUARE}', "");
Expect(1, 12879, '\P{Is_Decomposition_Type= _SQUARE}', "");
Expect(0, 12879, '\P{^Is_Decomposition_Type= _SQUARE}', "");
Error('\p{Is_Dt= Sqr:=}');
Error('\P{Is_Dt= Sqr:=}');
Expect(1, 12880, '\p{Is_Dt=sqr}', "");
Expect(0, 12880, '\p{^Is_Dt=sqr}', "");
Expect(0, 12880, '\P{Is_Dt=sqr}', "");
Expect(1, 12880, '\P{^Is_Dt=sqr}', "");
Expect(0, 12879, '\p{Is_Dt=sqr}', "");
Expect(1, 12879, '\p{^Is_Dt=sqr}', "");
Expect(1, 12879, '\P{Is_Dt=sqr}', "");
Expect(0, 12879, '\P{^Is_Dt=sqr}', "");
Expect(1, 12880, '\p{Is_Dt=_-sqr}', "");
Expect(0, 12880, '\p{^Is_Dt=_-sqr}', "");
Expect(0, 12880, '\P{Is_Dt=_-sqr}', "");
Expect(1, 12880, '\P{^Is_Dt=_-sqr}', "");
Expect(0, 12879, '\p{Is_Dt=_-sqr}', "");
Expect(1, 12879, '\p{^Is_Dt=_-sqr}', "");
Expect(1, 12879, '\P{Is_Dt=_-sqr}', "");
Expect(0, 12879, '\P{^Is_Dt=_-sqr}', "");
Error('\p{Decomposition_Type=-Small:=}');
Error('\P{Decomposition_Type=-Small:=}');
Expect(1, 65106, '\p{Decomposition_Type: small}', "");
Expect(0, 65106, '\p{^Decomposition_Type: small}', "");
Expect(0, 65106, '\P{Decomposition_Type: small}', "");
Expect(1, 65106, '\P{^Decomposition_Type: small}', "");
Expect(0, 65103, '\p{Decomposition_Type: small}', "");
Expect(1, 65103, '\p{^Decomposition_Type: small}', "");
Expect(1, 65103, '\P{Decomposition_Type: small}', "");
Expect(0, 65103, '\P{^Decomposition_Type: small}', "");
Expect(1, 65106, '\p{Decomposition_Type=	_Small}', "");
Expect(0, 65106, '\p{^Decomposition_Type=	_Small}', "");
Expect(0, 65106, '\P{Decomposition_Type=	_Small}', "");
Expect(1, 65106, '\P{^Decomposition_Type=	_Small}', "");
Expect(0, 65103, '\p{Decomposition_Type=	_Small}', "");
Expect(1, 65103, '\p{^Decomposition_Type=	_Small}', "");
Expect(1, 65103, '\P{Decomposition_Type=	_Small}', "");
Expect(0, 65103, '\P{^Decomposition_Type=	_Small}', "");
Error('\p{Dt=_ SML/a/}');
Error('\P{Dt=_ SML/a/}');
Expect(1, 65106, '\p{Dt=sml}', "");
Expect(0, 65106, '\p{^Dt=sml}', "");
Expect(0, 65106, '\P{Dt=sml}', "");
Expect(1, 65106, '\P{^Dt=sml}', "");
Expect(0, 65103, '\p{Dt=sml}', "");
Expect(1, 65103, '\p{^Dt=sml}', "");
Expect(1, 65103, '\P{Dt=sml}', "");
Expect(0, 65103, '\P{^Dt=sml}', "");
Expect(1, 65106, '\p{Dt=_ SML}', "");
Expect(0, 65106, '\p{^Dt=_ SML}', "");
Expect(0, 65106, '\P{Dt=_ SML}', "");
Expect(1, 65106, '\P{^Dt=_ SML}', "");
Expect(0, 65103, '\p{Dt=_ SML}', "");
Expect(1, 65103, '\p{^Dt=_ SML}', "");
Expect(1, 65103, '\P{Dt=_ SML}', "");
Expect(0, 65103, '\P{^Dt=_ SML}', "");
Error('\p{Is_Decomposition_Type=/a/_	Small}');
Error('\P{Is_Decomposition_Type=/a/_	Small}');
Expect(1, 65106, '\p{Is_Decomposition_Type=small}', "");
Expect(0, 65106, '\p{^Is_Decomposition_Type=small}', "");
Expect(0, 65106, '\P{Is_Decomposition_Type=small}', "");
Expect(1, 65106, '\P{^Is_Decomposition_Type=small}', "");
Expect(0, 65103, '\p{Is_Decomposition_Type=small}', "");
Expect(1, 65103, '\p{^Is_Decomposition_Type=small}', "");
Expect(1, 65103, '\P{Is_Decomposition_Type=small}', "");
Expect(0, 65103, '\P{^Is_Decomposition_Type=small}', "");
Expect(1, 65106, '\p{Is_Decomposition_Type=-Small}', "");
Expect(0, 65106, '\p{^Is_Decomposition_Type=-Small}', "");
Expect(0, 65106, '\P{Is_Decomposition_Type=-Small}', "");
Expect(1, 65106, '\P{^Is_Decomposition_Type=-Small}', "");
Expect(0, 65103, '\p{Is_Decomposition_Type=-Small}', "");
Expect(1, 65103, '\p{^Is_Decomposition_Type=-Small}', "");
Expect(1, 65103, '\P{Is_Decomposition_Type=-Small}', "");
Expect(0, 65103, '\P{^Is_Decomposition_Type=-Small}', "");
Error('\p{Is_Dt= /a/sml}');
Error('\P{Is_Dt= /a/sml}');
Expect(1, 65106, '\p{Is_Dt=sml}', "");
Expect(0, 65106, '\p{^Is_Dt=sml}', "");
Expect(0, 65106, '\P{Is_Dt=sml}', "");
Expect(1, 65106, '\P{^Is_Dt=sml}', "");
Expect(0, 65103, '\p{Is_Dt=sml}', "");
Expect(1, 65103, '\p{^Is_Dt=sml}', "");
Expect(1, 65103, '\P{Is_Dt=sml}', "");
Expect(0, 65103, '\P{^Is_Dt=sml}', "");
Expect(1, 65106, '\p{Is_Dt=	 Sml}', "");
Expect(0, 65106, '\p{^Is_Dt=	 Sml}', "");
Expect(0, 65106, '\P{Is_Dt=	 Sml}', "");
Expect(1, 65106, '\P{^Is_Dt=	 Sml}', "");
Expect(0, 65103, '\p{Is_Dt=	 Sml}', "");
Expect(1, 65103, '\p{^Is_Dt=	 Sml}', "");
Expect(1, 65103, '\P{Is_Dt=	 Sml}', "");
Expect(0, 65103, '\P{^Is_Dt=	 Sml}', "");
Error('\p{Decomposition_Type:   -_NONE/a/}');
Error('\P{Decomposition_Type:   -_NONE/a/}');
Expect(1, 159, '\p{Decomposition_Type=none}', "");
Expect(0, 159, '\p{^Decomposition_Type=none}', "");
Expect(0, 159, '\P{Decomposition_Type=none}', "");
Expect(1, 159, '\P{^Decomposition_Type=none}', "");
Expect(0, 160, '\p{Decomposition_Type=none}', "");
Expect(1, 160, '\p{^Decomposition_Type=none}', "");
Expect(1, 160, '\P{Decomposition_Type=none}', "");
Expect(0, 160, '\P{^Decomposition_Type=none}', "");
Expect(1, 159, '\p{Decomposition_Type:	-None}', "");
Expect(0, 159, '\p{^Decomposition_Type:	-None}', "");
Expect(0, 159, '\P{Decomposition_Type:	-None}', "");
Expect(1, 159, '\P{^Decomposition_Type:	-None}', "");
Expect(0, 160, '\p{Decomposition_Type:	-None}', "");
Expect(1, 160, '\p{^Decomposition_Type:	-None}', "");
Expect(1, 160, '\P{Decomposition_Type:	-None}', "");
Expect(0, 160, '\P{^Decomposition_Type:	-None}', "");
Error('\p{Dt=_/a/None}');
Error('\P{Dt=_/a/None}');
Expect(1, 159, '\p{Dt=none}', "");
Expect(0, 159, '\p{^Dt=none}', "");
Expect(0, 159, '\P{Dt=none}', "");
Expect(1, 159, '\P{^Dt=none}', "");
Expect(0, 160, '\p{Dt=none}', "");
Expect(1, 160, '\p{^Dt=none}', "");
Expect(1, 160, '\P{Dt=none}', "");
Expect(0, 160, '\P{^Dt=none}', "");
Expect(1, 159, '\p{Dt:_-none}', "");
Expect(0, 159, '\p{^Dt:_-none}', "");
Expect(0, 159, '\P{Dt:_-none}', "");
Expect(1, 159, '\P{^Dt:_-none}', "");
Expect(0, 160, '\p{Dt:_-none}', "");
Expect(1, 160, '\p{^Dt:_-none}', "");
Expect(1, 160, '\P{Dt:_-none}', "");
Expect(0, 160, '\P{^Dt:_-none}', "");
Error('\p{Is_Decomposition_Type=	 NONE/a/}');
Error('\P{Is_Decomposition_Type=	 NONE/a/}');
Expect(1, 159, '\p{Is_Decomposition_Type=none}', "");
Expect(0, 159, '\p{^Is_Decomposition_Type=none}', "");
Expect(0, 159, '\P{Is_Decomposition_Type=none}', "");
Expect(1, 159, '\P{^Is_Decomposition_Type=none}', "");
Expect(0, 160, '\p{Is_Decomposition_Type=none}', "");
Expect(1, 160, '\p{^Is_Decomposition_Type=none}', "");
Expect(1, 160, '\P{Is_Decomposition_Type=none}', "");
Expect(0, 160, '\P{^Is_Decomposition_Type=none}', "");
Expect(1, 159, '\p{Is_Decomposition_Type=_None}', "");
Expect(0, 159, '\p{^Is_Decomposition_Type=_None}', "");
Expect(0, 159, '\P{Is_Decomposition_Type=_None}', "");
Expect(1, 159, '\P{^Is_Decomposition_Type=_None}', "");
Expect(0, 160, '\p{Is_Decomposition_Type=_None}', "");
Expect(1, 160, '\p{^Is_Decomposition_Type=_None}', "");
Expect(1, 160, '\P{Is_Decomposition_Type=_None}', "");
Expect(0, 160, '\P{^Is_Decomposition_Type=_None}', "");
Error('\p{Is_Dt=/a/_-none}');
Error('\P{Is_Dt=/a/_-none}');
Expect(1, 159, '\p{Is_Dt=none}', "");
Expect(0, 159, '\p{^Is_Dt=none}', "");
Expect(0, 159, '\P{Is_Dt=none}', "");
Expect(1, 159, '\P{^Is_Dt=none}', "");
Expect(0, 160, '\p{Is_Dt=none}', "");
Expect(1, 160, '\p{^Is_Dt=none}', "");
Expect(1, 160, '\P{Is_Dt=none}', "");
Expect(0, 160, '\P{^Is_Dt=none}', "");
Expect(1, 159, '\p{Is_Dt=_none}', "");
Expect(0, 159, '\p{^Is_Dt=_none}', "");
Expect(0, 159, '\P{Is_Dt=_none}', "");
Expect(1, 159, '\P{^Is_Dt=_none}', "");
Expect(0, 160, '\p{Is_Dt=_none}', "");
Expect(1, 160, '\p{^Is_Dt=_none}', "");
Expect(1, 160, '\P{Is_Dt=_none}', "");
Expect(0, 160, '\P{^Is_Dt=_none}', "");
Error('\p{Decomposition_Type=:=_ Isolated}');
Error('\P{Decomposition_Type=:=_ Isolated}');
Expect(1, 64336, '\p{Decomposition_Type=isolated}', "");
Expect(0, 64336, '\p{^Decomposition_Type=isolated}', "");
Expect(0, 64336, '\P{Decomposition_Type=isolated}', "");
Expect(1, 64336, '\P{^Decomposition_Type=isolated}', "");
Expect(0, 64335, '\p{Decomposition_Type=isolated}', "");
Expect(1, 64335, '\p{^Decomposition_Type=isolated}', "");
Expect(1, 64335, '\P{Decomposition_Type=isolated}', "");
Expect(0, 64335, '\P{^Decomposition_Type=isolated}', "");
Expect(1, 64336, '\p{Decomposition_Type:   _Isolated}', "");
Expect(0, 64336, '\p{^Decomposition_Type:   _Isolated}', "");
Expect(0, 64336, '\P{Decomposition_Type:   _Isolated}', "");
Expect(1, 64336, '\P{^Decomposition_Type:   _Isolated}', "");
Expect(0, 64335, '\p{Decomposition_Type:   _Isolated}', "");
Expect(1, 64335, '\p{^Decomposition_Type:   _Isolated}', "");
Expect(1, 64335, '\P{Decomposition_Type:   _Isolated}', "");
Expect(0, 64335, '\P{^Decomposition_Type:   _Isolated}', "");
Error('\p{Dt=-:=iso}');
Error('\P{Dt=-:=iso}');
Expect(1, 64336, '\p{Dt=iso}', "");
Expect(0, 64336, '\p{^Dt=iso}', "");
Expect(0, 64336, '\P{Dt=iso}', "");
Expect(1, 64336, '\P{^Dt=iso}', "");
Expect(0, 64335, '\p{Dt=iso}', "");
Expect(1, 64335, '\p{^Dt=iso}', "");
Expect(1, 64335, '\P{Dt=iso}', "");
Expect(0, 64335, '\P{^Dt=iso}', "");
Expect(1, 64336, '\p{Dt= _Iso}', "");
Expect(0, 64336, '\p{^Dt= _Iso}', "");
Expect(0, 64336, '\P{Dt= _Iso}', "");
Expect(1, 64336, '\P{^Dt= _Iso}', "");
Expect(0, 64335, '\p{Dt= _Iso}', "");
Expect(1, 64335, '\p{^Dt= _Iso}', "");
Expect(1, 64335, '\P{Dt= _Iso}', "");
Expect(0, 64335, '\P{^Dt= _Iso}', "");
Error('\p{Is_Decomposition_Type=-:=Isolated}');
Error('\P{Is_Decomposition_Type=-:=Isolated}');
Expect(1, 64336, '\p{Is_Decomposition_Type=isolated}', "");
Expect(0, 64336, '\p{^Is_Decomposition_Type=isolated}', "");
Expect(0, 64336, '\P{Is_Decomposition_Type=isolated}', "");
Expect(1, 64336, '\P{^Is_Decomposition_Type=isolated}', "");
Expect(0, 64335, '\p{Is_Decomposition_Type=isolated}', "");
Expect(1, 64335, '\p{^Is_Decomposition_Type=isolated}', "");
Expect(1, 64335, '\P{Is_Decomposition_Type=isolated}', "");
Expect(0, 64335, '\P{^Is_Decomposition_Type=isolated}', "");
Expect(1, 64336, '\p{Is_Decomposition_Type:	- Isolated}', "");
Expect(0, 64336, '\p{^Is_Decomposition_Type:	- Isolated}', "");
Expect(0, 64336, '\P{Is_Decomposition_Type:	- Isolated}', "");
Expect(1, 64336, '\P{^Is_Decomposition_Type:	- Isolated}', "");
Expect(0, 64335, '\p{Is_Decomposition_Type:	- Isolated}', "");
Expect(1, 64335, '\p{^Is_Decomposition_Type:	- Isolated}', "");
Expect(1, 64335, '\P{Is_Decomposition_Type:	- Isolated}', "");
Expect(0, 64335, '\P{^Is_Decomposition_Type:	- Isolated}', "");
Error('\p{Is_Dt=_	iso:=}');
Error('\P{Is_Dt=_	iso:=}');
Expect(1, 64336, '\p{Is_Dt=iso}', "");
Expect(0, 64336, '\p{^Is_Dt=iso}', "");
Expect(0, 64336, '\P{Is_Dt=iso}', "");
Expect(1, 64336, '\P{^Is_Dt=iso}', "");
Expect(0, 64335, '\p{Is_Dt=iso}', "");
Expect(1, 64335, '\p{^Is_Dt=iso}', "");
Expect(1, 64335, '\P{Is_Dt=iso}', "");
Expect(0, 64335, '\P{^Is_Dt=iso}', "");
Expect(1, 64336, '\p{Is_Dt=- iso}', "");
Expect(0, 64336, '\p{^Is_Dt=- iso}', "");
Expect(0, 64336, '\P{Is_Dt=- iso}', "");
Expect(1, 64336, '\P{^Is_Dt=- iso}', "");
Expect(0, 64335, '\p{Is_Dt=- iso}', "");
Expect(1, 64335, '\p{^Is_Dt=- iso}', "");
Expect(1, 64335, '\P{Is_Dt=- iso}', "");
Expect(0, 64335, '\P{^Is_Dt=- iso}', "");
Error('\p{Decomposition_Type=:=	 compat}');
Error('\P{Decomposition_Type=:=	 compat}');
Expect(1, 168, '\p{Decomposition_Type=compat}', "");
Expect(0, 168, '\p{^Decomposition_Type=compat}', "");
Expect(0, 168, '\P{Decomposition_Type=compat}', "");
Expect(1, 168, '\P{^Decomposition_Type=compat}', "");
Expect(0, 167, '\p{Decomposition_Type=compat}', "");
Expect(1, 167, '\p{^Decomposition_Type=compat}', "");
Expect(1, 167, '\P{Decomposition_Type=compat}', "");
Expect(0, 167, '\P{^Decomposition_Type=compat}', "");
Expect(1, 168, '\p{Decomposition_Type=_	COMPAT}', "");
Expect(0, 168, '\p{^Decomposition_Type=_	COMPAT}', "");
Expect(0, 168, '\P{Decomposition_Type=_	COMPAT}', "");
Expect(1, 168, '\P{^Decomposition_Type=_	COMPAT}', "");
Expect(0, 167, '\p{Decomposition_Type=_	COMPAT}', "");
Expect(1, 167, '\p{^Decomposition_Type=_	COMPAT}', "");
Expect(1, 167, '\P{Decomposition_Type=_	COMPAT}', "");
Expect(0, 167, '\P{^Decomposition_Type=_	COMPAT}', "");
Error('\p{Dt=_Com:=}');
Error('\P{Dt=_Com:=}');
Expect(1, 168, '\p{Dt=com}', "");
Expect(0, 168, '\p{^Dt=com}', "");
Expect(0, 168, '\P{Dt=com}', "");
Expect(1, 168, '\P{^Dt=com}', "");
Expect(0, 167, '\p{Dt=com}', "");
Expect(1, 167, '\p{^Dt=com}', "");
Expect(1, 167, '\P{Dt=com}', "");
Expect(0, 167, '\P{^Dt=com}', "");
Expect(1, 168, '\p{Dt=	Com}', "");
Expect(0, 168, '\p{^Dt=	Com}', "");
Expect(0, 168, '\P{Dt=	Com}', "");
Expect(1, 168, '\P{^Dt=	Com}', "");
Expect(0, 167, '\p{Dt=	Com}', "");
Expect(1, 167, '\p{^Dt=	Com}', "");
Expect(1, 167, '\P{Dt=	Com}', "");
Expect(0, 167, '\P{^Dt=	Com}', "");
Error('\p{Is_Decomposition_Type:   /a/_	Compat}');
Error('\P{Is_Decomposition_Type:   /a/_	Compat}');
Expect(1, 168, '\p{Is_Decomposition_Type=compat}', "");
Expect(0, 168, '\p{^Is_Decomposition_Type=compat}', "");
Expect(0, 168, '\P{Is_Decomposition_Type=compat}', "");
Expect(1, 168, '\P{^Is_Decomposition_Type=compat}', "");
Expect(0, 167, '\p{Is_Decomposition_Type=compat}', "");
Expect(1, 167, '\p{^Is_Decomposition_Type=compat}', "");
Expect(1, 167, '\P{Is_Decomposition_Type=compat}', "");
Expect(0, 167, '\P{^Is_Decomposition_Type=compat}', "");
Expect(1, 168, '\p{Is_Decomposition_Type=COMPAT}', "");
Expect(0, 168, '\p{^Is_Decomposition_Type=COMPAT}', "");
Expect(0, 168, '\P{Is_Decomposition_Type=COMPAT}', "");
Expect(1, 168, '\P{^Is_Decomposition_Type=COMPAT}', "");
Expect(0, 167, '\p{Is_Decomposition_Type=COMPAT}', "");
Expect(1, 167, '\p{^Is_Decomposition_Type=COMPAT}', "");
Expect(1, 167, '\P{Is_Decomposition_Type=COMPAT}', "");
Expect(0, 167, '\P{^Is_Decomposition_Type=COMPAT}', "");
Error('\p{Is_Dt= /a/COM}');
Error('\P{Is_Dt= /a/COM}');
Expect(1, 168, '\p{Is_Dt=com}', "");
Expect(0, 168, '\p{^Is_Dt=com}', "");
Expect(0, 168, '\P{Is_Dt=com}', "");
Expect(1, 168, '\P{^Is_Dt=com}', "");
Expect(0, 167, '\p{Is_Dt=com}', "");
Expect(1, 167, '\p{^Is_Dt=com}', "");
Expect(1, 167, '\P{Is_Dt=com}', "");
Expect(0, 167, '\P{^Is_Dt=com}', "");
Expect(1, 168, '\p{Is_Dt=  Com}', "");
Expect(0, 168, '\p{^Is_Dt=  Com}', "");
Expect(0, 168, '\P{Is_Dt=  Com}', "");
Expect(1, 168, '\P{^Is_Dt=  Com}', "");
Expect(0, 167, '\p{Is_Dt=  Com}', "");
Expect(1, 167, '\p{^Is_Dt=  Com}', "");
Expect(1, 167, '\P{Is_Dt=  Com}', "");
Expect(0, 167, '\P{^Is_Dt=  Com}', "");
Error('\p{Decomposition_Type=:= super}');
Error('\P{Decomposition_Type=:= super}');
Expect(1, 170, '\p{Decomposition_Type=super}', "");
Expect(0, 170, '\p{^Decomposition_Type=super}', "");
Expect(0, 170, '\P{Decomposition_Type=super}', "");
Expect(1, 170, '\P{^Decomposition_Type=super}', "");
Expect(0, 169, '\p{Decomposition_Type=super}', "");
Expect(1, 169, '\p{^Decomposition_Type=super}', "");
Expect(1, 169, '\P{Decomposition_Type=super}', "");
Expect(0, 169, '\P{^Decomposition_Type=super}', "");
Expect(1, 170, '\p{Decomposition_Type=	_super}', "");
Expect(0, 170, '\p{^Decomposition_Type=	_super}', "");
Expect(0, 170, '\P{Decomposition_Type=	_super}', "");
Expect(1, 170, '\P{^Decomposition_Type=	_super}', "");
Expect(0, 169, '\p{Decomposition_Type=	_super}', "");
Expect(1, 169, '\p{^Decomposition_Type=	_super}', "");
Expect(1, 169, '\P{Decomposition_Type=	_super}', "");
Expect(0, 169, '\P{^Decomposition_Type=	_super}', "");
Error('\p{Dt:   :=--Sup}');
Error('\P{Dt:   :=--Sup}');
Expect(1, 170, '\p{Dt=sup}', "");
Expect(0, 170, '\p{^Dt=sup}', "");
Expect(0, 170, '\P{Dt=sup}', "");
Expect(1, 170, '\P{^Dt=sup}', "");
Expect(0, 169, '\p{Dt=sup}', "");
Expect(1, 169, '\p{^Dt=sup}', "");
Expect(1, 169, '\P{Dt=sup}', "");
Expect(0, 169, '\P{^Dt=sup}', "");
Expect(1, 170, '\p{Dt=_SUP}', "");
Expect(0, 170, '\p{^Dt=_SUP}', "");
Expect(0, 170, '\P{Dt=_SUP}', "");
Expect(1, 170, '\P{^Dt=_SUP}', "");
Expect(0, 169, '\p{Dt=_SUP}', "");
Expect(1, 169, '\p{^Dt=_SUP}', "");
Expect(1, 169, '\P{Dt=_SUP}', "");
Expect(0, 169, '\P{^Dt=_SUP}', "");
Error('\p{Is_Decomposition_Type=:=SUPER}');
Error('\P{Is_Decomposition_Type=:=SUPER}');
Expect(1, 170, '\p{Is_Decomposition_Type=super}', "");
Expect(0, 170, '\p{^Is_Decomposition_Type=super}', "");
Expect(0, 170, '\P{Is_Decomposition_Type=super}', "");
Expect(1, 170, '\P{^Is_Decomposition_Type=super}', "");
Expect(0, 169, '\p{Is_Decomposition_Type=super}', "");
Expect(1, 169, '\p{^Is_Decomposition_Type=super}', "");
Expect(1, 169, '\P{Is_Decomposition_Type=super}', "");
Expect(0, 169, '\P{^Is_Decomposition_Type=super}', "");
Expect(1, 170, '\p{Is_Decomposition_Type=_-SUPER}', "");
Expect(0, 170, '\p{^Is_Decomposition_Type=_-SUPER}', "");
Expect(0, 170, '\P{Is_Decomposition_Type=_-SUPER}', "");
Expect(1, 170, '\P{^Is_Decomposition_Type=_-SUPER}', "");
Expect(0, 169, '\p{Is_Decomposition_Type=_-SUPER}', "");
Expect(1, 169, '\p{^Is_Decomposition_Type=_-SUPER}', "");
Expect(1, 169, '\P{Is_Decomposition_Type=_-SUPER}', "");
Expect(0, 169, '\P{^Is_Decomposition_Type=_-SUPER}', "");
Error('\p{Is_Dt=		Sup/a/}');
Error('\P{Is_Dt=		Sup/a/}');
Expect(1, 170, '\p{Is_Dt=sup}', "");
Expect(0, 170, '\p{^Is_Dt=sup}', "");
Expect(0, 170, '\P{Is_Dt=sup}', "");
Expect(1, 170, '\P{^Is_Dt=sup}', "");
Expect(0, 169, '\p{Is_Dt=sup}', "");
Expect(1, 169, '\p{^Is_Dt=sup}', "");
Expect(1, 169, '\P{Is_Dt=sup}', "");
Expect(0, 169, '\P{^Is_Dt=sup}', "");
Expect(1, 170, '\p{Is_Dt=_ Sup}', "");
Expect(0, 170, '\p{^Is_Dt=_ Sup}', "");
Expect(0, 170, '\P{Is_Dt=_ Sup}', "");
Expect(1, 170, '\P{^Is_Dt=_ Sup}', "");
Expect(0, 169, '\p{Is_Dt=_ Sup}', "");
Expect(1, 169, '\p{^Is_Dt=_ Sup}', "");
Expect(1, 169, '\P{Is_Dt=_ Sup}', "");
Expect(0, 169, '\P{^Is_Dt=_ Sup}', "");
Error('\p{Other_Math: :=	 Yes}');
Error('\P{Other_Math: :=	 Yes}');
Expect(1, 94, '\p{Other_Math: yes}', 'deprecated');
Expect(0, 94, '\p{^Other_Math: yes}', 'deprecated');
Expect(0, 94, '\P{Other_Math: yes}', 'deprecated');
Expect(1, 94, '\P{^Other_Math: yes}', 'deprecated');
Expect(0, 93, '\p{Other_Math: yes}', 'deprecated');
Expect(1, 93, '\p{^Other_Math: yes}', 'deprecated');
Expect(1, 93, '\P{Other_Math: yes}', 'deprecated');
Expect(0, 93, '\P{^Other_Math: yes}', 'deprecated');
Expect(1, 94, '\p{Other_Math:_ Yes}', 'deprecated');
Expect(0, 94, '\p{^Other_Math:_ Yes}', 'deprecated');
Expect(0, 94, '\P{Other_Math:_ Yes}', 'deprecated');
Expect(1, 94, '\P{^Other_Math:_ Yes}', 'deprecated');
Expect(0, 93, '\p{Other_Math:_ Yes}', 'deprecated');
Expect(1, 93, '\p{^Other_Math:_ Yes}', 'deprecated');
Expect(1, 93, '\P{Other_Math:_ Yes}', 'deprecated');
Expect(0, 93, '\P{^Other_Math:_ Yes}', 'deprecated');
Error('\p{OMath=	y/a/}');
Error('\P{OMath=	y/a/}');
Expect(1, 94, '\p{OMath=y}', 'deprecated');
Expect(0, 94, '\p{^OMath=y}', 'deprecated');
Expect(0, 94, '\P{OMath=y}', 'deprecated');
Expect(1, 94, '\P{^OMath=y}', 'deprecated');
Expect(0, 93, '\p{OMath=y}', 'deprecated');
Expect(1, 93, '\p{^OMath=y}', 'deprecated');
Expect(1, 93, '\P{OMath=y}', 'deprecated');
Expect(0, 93, '\P{^OMath=y}', 'deprecated');
Expect(1, 94, '\p{OMath=-	Y}', 'deprecated');
Expect(0, 94, '\p{^OMath=-	Y}', 'deprecated');
Expect(0, 94, '\P{OMath=-	Y}', 'deprecated');
Expect(1, 94, '\P{^OMath=-	Y}', 'deprecated');
Expect(0, 93, '\p{OMath=-	Y}', 'deprecated');
Expect(1, 93, '\p{^OMath=-	Y}', 'deprecated');
Expect(1, 93, '\P{OMath=-	Y}', 'deprecated');
Expect(0, 93, '\P{^OMath=-	Y}', 'deprecated');
Error('\p{Is_Other_Math= /a/T}');
Error('\P{Is_Other_Math= /a/T}');
Expect(1, 94, '\p{Is_Other_Math=t}', 'deprecated');
Expect(0, 94, '\p{^Is_Other_Math=t}', 'deprecated');
Expect(0, 94, '\P{Is_Other_Math=t}', 'deprecated');
Expect(1, 94, '\P{^Is_Other_Math=t}', 'deprecated');
Expect(0, 93, '\p{Is_Other_Math=t}', 'deprecated');
Expect(1, 93, '\p{^Is_Other_Math=t}', 'deprecated');
Expect(1, 93, '\P{Is_Other_Math=t}', 'deprecated');
Expect(0, 93, '\P{^Is_Other_Math=t}', 'deprecated');
Expect(1, 94, '\p{Is_Other_Math=  T}', 'deprecated');
Expect(0, 94, '\p{^Is_Other_Math=  T}', 'deprecated');
Expect(0, 94, '\P{Is_Other_Math=  T}', 'deprecated');
Expect(1, 94, '\P{^Is_Other_Math=  T}', 'deprecated');
Expect(0, 93, '\p{Is_Other_Math=  T}', 'deprecated');
Expect(1, 93, '\p{^Is_Other_Math=  T}', 'deprecated');
Expect(1, 93, '\P{Is_Other_Math=  T}', 'deprecated');
Expect(0, 93, '\P{^Is_Other_Math=  T}', 'deprecated');
Error('\p{Is_OMath=:=	_true}');
Error('\P{Is_OMath=:=	_true}');
Expect(1, 94, '\p{Is_OMath=true}', 'deprecated');
Expect(0, 94, '\p{^Is_OMath=true}', 'deprecated');
Expect(0, 94, '\P{Is_OMath=true}', 'deprecated');
Expect(1, 94, '\P{^Is_OMath=true}', 'deprecated');
Expect(0, 93, '\p{Is_OMath=true}', 'deprecated');
Expect(1, 93, '\p{^Is_OMath=true}', 'deprecated');
Expect(1, 93, '\P{Is_OMath=true}', 'deprecated');
Expect(0, 93, '\P{^Is_OMath=true}', 'deprecated');
Expect(1, 94, '\p{Is_OMath=--TRUE}', 'deprecated');
Expect(0, 94, '\p{^Is_OMath=--TRUE}', 'deprecated');
Expect(0, 94, '\P{Is_OMath=--TRUE}', 'deprecated');
Expect(1, 94, '\P{^Is_OMath=--TRUE}', 'deprecated');
Expect(0, 93, '\p{Is_OMath=--TRUE}', 'deprecated');
Expect(1, 93, '\p{^Is_OMath=--TRUE}', 'deprecated');
Expect(1, 93, '\P{Is_OMath=--TRUE}', 'deprecated');
Expect(0, 93, '\P{^Is_OMath=--TRUE}', 'deprecated');
Error('\p{Other_Math= No:=}');
Error('\P{Other_Math= No:=}');
Expect(1, 93, '\p{Other_Math=no}', 'deprecated');
Expect(0, 93, '\p{^Other_Math=no}', 'deprecated');
Expect(0, 93, '\P{Other_Math=no}', 'deprecated');
Expect(1, 93, '\P{^Other_Math=no}', 'deprecated');
Expect(0, 94, '\p{Other_Math=no}', 'deprecated');
Expect(1, 94, '\p{^Other_Math=no}', 'deprecated');
Expect(1, 94, '\P{Other_Math=no}', 'deprecated');
Expect(0, 94, '\P{^Other_Math=no}', 'deprecated');
Expect(1, 93, '\p{Other_Math=-_No}', 'deprecated');
Expect(0, 93, '\p{^Other_Math=-_No}', 'deprecated');
Expect(0, 93, '\P{Other_Math=-_No}', 'deprecated');
Expect(1, 93, '\P{^Other_Math=-_No}', 'deprecated');
Expect(0, 94, '\p{Other_Math=-_No}', 'deprecated');
Expect(1, 94, '\p{^Other_Math=-_No}', 'deprecated');
Expect(1, 94, '\P{Other_Math=-_No}', 'deprecated');
Expect(0, 94, '\P{^Other_Math=-_No}', 'deprecated');
Error('\p{OMath= 	N/a/}');
Error('\P{OMath= 	N/a/}');
Expect(1, 93, '\p{OMath=n}', 'deprecated');
Expect(0, 93, '\p{^OMath=n}', 'deprecated');
Expect(0, 93, '\P{OMath=n}', 'deprecated');
Expect(1, 93, '\P{^OMath=n}', 'deprecated');
Expect(0, 94, '\p{OMath=n}', 'deprecated');
Expect(1, 94, '\p{^OMath=n}', 'deprecated');
Expect(1, 94, '\P{OMath=n}', 'deprecated');
Expect(0, 94, '\P{^OMath=n}', 'deprecated');
Expect(1, 93, '\p{OMath=-	N}', 'deprecated');
Expect(0, 93, '\p{^OMath=-	N}', 'deprecated');
Expect(0, 93, '\P{OMath=-	N}', 'deprecated');
Expect(1, 93, '\P{^OMath=-	N}', 'deprecated');
Expect(0, 94, '\p{OMath=-	N}', 'deprecated');
Expect(1, 94, '\p{^OMath=-	N}', 'deprecated');
Expect(1, 94, '\P{OMath=-	N}', 'deprecated');
Expect(0, 94, '\P{^OMath=-	N}', 'deprecated');
Error('\p{Is_Other_Math=:=	_f}');
Error('\P{Is_Other_Math=:=	_f}');
Expect(1, 93, '\p{Is_Other_Math=f}', 'deprecated');
Expect(0, 93, '\p{^Is_Other_Math=f}', 'deprecated');
Expect(0, 93, '\P{Is_Other_Math=f}', 'deprecated');
Expect(1, 93, '\P{^Is_Other_Math=f}', 'deprecated');
Expect(0, 94, '\p{Is_Other_Math=f}', 'deprecated');
Expect(1, 94, '\p{^Is_Other_Math=f}', 'deprecated');
Expect(1, 94, '\P{Is_Other_Math=f}', 'deprecated');
Expect(0, 94, '\P{^Is_Other_Math=f}', 'deprecated');
Expect(1, 93, '\p{Is_Other_Math=		F}', 'deprecated');
Expect(0, 93, '\p{^Is_Other_Math=		F}', 'deprecated');
Expect(0, 93, '\P{Is_Other_Math=		F}', 'deprecated');
Expect(1, 93, '\P{^Is_Other_Math=		F}', 'deprecated');
Expect(0, 94, '\p{Is_Other_Math=		F}', 'deprecated');
Expect(1, 94, '\p{^Is_Other_Math=		F}', 'deprecated');
Expect(1, 94, '\P{Is_Other_Math=		F}', 'deprecated');
Expect(0, 94, '\P{^Is_Other_Math=		F}', 'deprecated');
Error('\p{Is_OMath=-	False:=}');
Error('\P{Is_OMath=-	False:=}');
Expect(1, 93, '\p{Is_OMath:false}', 'deprecated');
Expect(0, 93, '\p{^Is_OMath:false}', 'deprecated');
Expect(0, 93, '\P{Is_OMath:false}', 'deprecated');
Expect(1, 93, '\P{^Is_OMath:false}', 'deprecated');
Expect(0, 94, '\p{Is_OMath:false}', 'deprecated');
Expect(1, 94, '\p{^Is_OMath:false}', 'deprecated');
Expect(1, 94, '\P{Is_OMath:false}', 'deprecated');
Expect(0, 94, '\P{^Is_OMath:false}', 'deprecated');
Expect(1, 93, '\p{Is_OMath=	-False}', 'deprecated');
Expect(0, 93, '\p{^Is_OMath=	-False}', 'deprecated');
Expect(0, 93, '\P{Is_OMath=	-False}', 'deprecated');
Expect(1, 93, '\P{^Is_OMath=	-False}', 'deprecated');
Expect(0, 94, '\p{Is_OMath=	-False}', 'deprecated');
Expect(1, 94, '\p{^Is_OMath=	-False}', 'deprecated');
Expect(1, 94, '\P{Is_OMath=	-False}', 'deprecated');
Expect(0, 94, '\P{^Is_OMath=	-False}', 'deprecated');
Error('\p{Hyphen=-_Yes/a/}');
Error('\P{Hyphen=-_Yes/a/}');
Expect(1, 45, '\p{Hyphen=yes}', 'deprecated');
Expect(0, 45, '\p{^Hyphen=yes}', 'deprecated');
Expect(0, 45, '\P{Hyphen=yes}', 'deprecated');
Expect(1, 45, '\P{^Hyphen=yes}', 'deprecated');
Expect(0, 44, '\p{Hyphen=yes}', 'deprecated');
Expect(1, 44, '\p{^Hyphen=yes}', 'deprecated');
Expect(1, 44, '\P{Hyphen=yes}', 'deprecated');
Expect(0, 44, '\P{^Hyphen=yes}', 'deprecated');
Expect(1, 45, '\p{Hyphen=-Yes}', 'deprecated');
Expect(0, 45, '\p{^Hyphen=-Yes}', 'deprecated');
Expect(0, 45, '\P{Hyphen=-Yes}', 'deprecated');
Expect(1, 45, '\P{^Hyphen=-Yes}', 'deprecated');
Expect(0, 44, '\p{Hyphen=-Yes}', 'deprecated');
Expect(1, 44, '\p{^Hyphen=-Yes}', 'deprecated');
Expect(1, 44, '\P{Hyphen=-Yes}', 'deprecated');
Expect(0, 44, '\P{^Hyphen=-Yes}', 'deprecated');
Error('\p{Is_Hyphen=_-y:=}');
Error('\P{Is_Hyphen=_-y:=}');
Expect(1, 45, '\p{Is_Hyphen:	y}', 'deprecated');
Expect(0, 45, '\p{^Is_Hyphen:	y}', 'deprecated');
Expect(0, 45, '\P{Is_Hyphen:	y}', 'deprecated');
Expect(1, 45, '\P{^Is_Hyphen:	y}', 'deprecated');
Expect(0, 44, '\p{Is_Hyphen:	y}', 'deprecated');
Expect(1, 44, '\p{^Is_Hyphen:	y}', 'deprecated');
Expect(1, 44, '\P{Is_Hyphen:	y}', 'deprecated');
Expect(0, 44, '\P{^Is_Hyphen:	y}', 'deprecated');
Expect(1, 45, '\p{Is_Hyphen=-	y}', 'deprecated');
Expect(0, 45, '\p{^Is_Hyphen=-	y}', 'deprecated');
Expect(0, 45, '\P{Is_Hyphen=-	y}', 'deprecated');
Expect(1, 45, '\P{^Is_Hyphen=-	y}', 'deprecated');
Expect(0, 44, '\p{Is_Hyphen=-	y}', 'deprecated');
Expect(1, 44, '\p{^Is_Hyphen=-	y}', 'deprecated');
Expect(1, 44, '\P{Is_Hyphen=-	y}', 'deprecated');
Expect(0, 44, '\P{^Is_Hyphen=-	y}', 'deprecated');
Error('\p{Hyphen=/a/T}');
Error('\P{Hyphen=/a/T}');
Expect(1, 45, '\p{Hyphen=t}', 'deprecated');
Expect(0, 45, '\p{^Hyphen=t}', 'deprecated');
Expect(0, 45, '\P{Hyphen=t}', 'deprecated');
Expect(1, 45, '\P{^Hyphen=t}', 'deprecated');
Expect(0, 44, '\p{Hyphen=t}', 'deprecated');
Expect(1, 44, '\p{^Hyphen=t}', 'deprecated');
Expect(1, 44, '\P{Hyphen=t}', 'deprecated');
Expect(0, 44, '\P{^Hyphen=t}', 'deprecated');
Expect(1, 45, '\p{Hyphen=		T}', 'deprecated');
Expect(0, 45, '\p{^Hyphen=		T}', 'deprecated');
Expect(0, 45, '\P{Hyphen=		T}', 'deprecated');
Expect(1, 45, '\P{^Hyphen=		T}', 'deprecated');
Expect(0, 44, '\p{Hyphen=		T}', 'deprecated');
Expect(1, 44, '\p{^Hyphen=		T}', 'deprecated');
Expect(1, 44, '\P{Hyphen=		T}', 'deprecated');
Expect(0, 44, '\P{^Hyphen=		T}', 'deprecated');
Error('\p{Is_Hyphen=:= True}');
Error('\P{Is_Hyphen=:= True}');
Expect(1, 45, '\p{Is_Hyphen=true}', 'deprecated');
Expect(0, 45, '\p{^Is_Hyphen=true}', 'deprecated');
Expect(0, 45, '\P{Is_Hyphen=true}', 'deprecated');
Expect(1, 45, '\P{^Is_Hyphen=true}', 'deprecated');
Expect(0, 44, '\p{Is_Hyphen=true}', 'deprecated');
Expect(1, 44, '\p{^Is_Hyphen=true}', 'deprecated');
Expect(1, 44, '\P{Is_Hyphen=true}', 'deprecated');
Expect(0, 44, '\P{^Is_Hyphen=true}', 'deprecated');
Expect(1, 45, '\p{Is_Hyphen=-True}', 'deprecated');
Expect(0, 45, '\p{^Is_Hyphen=-True}', 'deprecated');
Expect(0, 45, '\P{Is_Hyphen=-True}', 'deprecated');
Expect(1, 45, '\P{^Is_Hyphen=-True}', 'deprecated');
Expect(0, 44, '\p{Is_Hyphen=-True}', 'deprecated');
Expect(1, 44, '\p{^Is_Hyphen=-True}', 'deprecated');
Expect(1, 44, '\P{Is_Hyphen=-True}', 'deprecated');
Expect(0, 44, '\P{^Is_Hyphen=-True}', 'deprecated');
Error('\p{Hyphen=:=	no}');
Error('\P{Hyphen=:=	no}');
Expect(1, 44, '\p{Hyphen=no}', 'deprecated');
Expect(0, 44, '\p{^Hyphen=no}', 'deprecated');
Expect(0, 44, '\P{Hyphen=no}', 'deprecated');
Expect(1, 44, '\P{^Hyphen=no}', 'deprecated');
Expect(0, 45, '\p{Hyphen=no}', 'deprecated');
Expect(1, 45, '\p{^Hyphen=no}', 'deprecated');
Expect(1, 45, '\P{Hyphen=no}', 'deprecated');
Expect(0, 45, '\P{^Hyphen=no}', 'deprecated');
Expect(1, 44, '\p{Hyphen=	_No}', 'deprecated');
Expect(0, 44, '\p{^Hyphen=	_No}', 'deprecated');
Expect(0, 44, '\P{Hyphen=	_No}', 'deprecated');
Expect(1, 44, '\P{^Hyphen=	_No}', 'deprecated');
Expect(0, 45, '\p{Hyphen=	_No}', 'deprecated');
Expect(1, 45, '\p{^Hyphen=	_No}', 'deprecated');
Expect(1, 45, '\P{Hyphen=	_No}', 'deprecated');
Expect(0, 45, '\P{^Hyphen=	_No}', 'deprecated');
Error('\p{Is_Hyphen= -n:=}');
Error('\P{Is_Hyphen= -n:=}');
Expect(1, 44, '\p{Is_Hyphen=n}', 'deprecated');
Expect(0, 44, '\p{^Is_Hyphen=n}', 'deprecated');
Expect(0, 44, '\P{Is_Hyphen=n}', 'deprecated');
Expect(1, 44, '\P{^Is_Hyphen=n}', 'deprecated');
Expect(0, 45, '\p{Is_Hyphen=n}', 'deprecated');
Expect(1, 45, '\p{^Is_Hyphen=n}', 'deprecated');
Expect(1, 45, '\P{Is_Hyphen=n}', 'deprecated');
Expect(0, 45, '\P{^Is_Hyphen=n}', 'deprecated');
Expect(1, 44, '\p{Is_Hyphen=--N}', 'deprecated');
Expect(0, 44, '\p{^Is_Hyphen=--N}', 'deprecated');
Expect(0, 44, '\P{Is_Hyphen=--N}', 'deprecated');
Expect(1, 44, '\P{^Is_Hyphen=--N}', 'deprecated');
Expect(0, 45, '\p{Is_Hyphen=--N}', 'deprecated');
Expect(1, 45, '\p{^Is_Hyphen=--N}', 'deprecated');
Expect(1, 45, '\P{Is_Hyphen=--N}', 'deprecated');
Expect(0, 45, '\P{^Is_Hyphen=--N}', 'deprecated');
Error('\p{Hyphen= 	F:=}');
Error('\P{Hyphen= 	F:=}');
Expect(1, 44, '\p{Hyphen=f}', 'deprecated');
Expect(0, 44, '\p{^Hyphen=f}', 'deprecated');
Expect(0, 44, '\P{Hyphen=f}', 'deprecated');
Expect(1, 44, '\P{^Hyphen=f}', 'deprecated');
Expect(0, 45, '\p{Hyphen=f}', 'deprecated');
Expect(1, 45, '\p{^Hyphen=f}', 'deprecated');
Expect(1, 45, '\P{Hyphen=f}', 'deprecated');
Expect(0, 45, '\P{^Hyphen=f}', 'deprecated');
Expect(1, 44, '\p{Hyphen= F}', 'deprecated');
Expect(0, 44, '\p{^Hyphen= F}', 'deprecated');
Expect(0, 44, '\P{Hyphen= F}', 'deprecated');
Expect(1, 44, '\P{^Hyphen= F}', 'deprecated');
Expect(0, 45, '\p{Hyphen= F}', 'deprecated');
Expect(1, 45, '\p{^Hyphen= F}', 'deprecated');
Expect(1, 45, '\P{Hyphen= F}', 'deprecated');
Expect(0, 45, '\P{^Hyphen= F}', 'deprecated');
Error('\p{Is_Hyphen=-:=False}');
Error('\P{Is_Hyphen=-:=False}');
Expect(1, 44, '\p{Is_Hyphen=false}', 'deprecated');
Expect(0, 44, '\p{^Is_Hyphen=false}', 'deprecated');
Expect(0, 44, '\P{Is_Hyphen=false}', 'deprecated');
Expect(1, 44, '\P{^Is_Hyphen=false}', 'deprecated');
Expect(0, 45, '\p{Is_Hyphen=false}', 'deprecated');
Expect(1, 45, '\p{^Is_Hyphen=false}', 'deprecated');
Expect(1, 45, '\P{Is_Hyphen=false}', 'deprecated');
Expect(0, 45, '\P{^Is_Hyphen=false}', 'deprecated');
Expect(1, 44, '\p{Is_Hyphen=__False}', 'deprecated');
Expect(0, 44, '\p{^Is_Hyphen=__False}', 'deprecated');
Expect(0, 44, '\P{Is_Hyphen=__False}', 'deprecated');
Expect(1, 44, '\P{^Is_Hyphen=__False}', 'deprecated');
Expect(0, 45, '\p{Is_Hyphen=__False}', 'deprecated');
Expect(1, 45, '\p{^Is_Hyphen=__False}', 'deprecated');
Expect(1, 45, '\P{Is_Hyphen=__False}', 'deprecated');
Expect(0, 45, '\P{^Is_Hyphen=__False}', 'deprecated');
Error('\p{White_Space=:=--Yes}');
Error('\P{White_Space=:=--Yes}');
Expect(1, 13, '\p{White_Space=yes}', "");
Expect(0, 13, '\p{^White_Space=yes}', "");
Expect(0, 13, '\P{White_Space=yes}', "");
Expect(1, 13, '\P{^White_Space=yes}', "");
Expect(0, 8, '\p{White_Space=yes}', "");
Expect(1, 8, '\p{^White_Space=yes}', "");
Expect(1, 8, '\P{White_Space=yes}', "");
Expect(0, 8, '\P{^White_Space=yes}', "");
Expect(1, 13, '\p{White_Space= Yes}', "");
Expect(0, 13, '\p{^White_Space= Yes}', "");
Expect(0, 13, '\P{White_Space= Yes}', "");
Expect(1, 13, '\P{^White_Space= Yes}', "");
Expect(0, 8, '\p{White_Space= Yes}', "");
Expect(1, 8, '\p{^White_Space= Yes}', "");
Expect(1, 8, '\P{White_Space= Yes}', "");
Expect(0, 8, '\P{^White_Space= Yes}', "");
Error('\p{WSpace=:=Y}');
Error('\P{WSpace=:=Y}');
Expect(1, 13, '\p{WSpace=y}', "");
Expect(0, 13, '\p{^WSpace=y}', "");
Expect(0, 13, '\P{WSpace=y}', "");
Expect(1, 13, '\P{^WSpace=y}', "");
Expect(0, 8, '\p{WSpace=y}', "");
Expect(1, 8, '\p{^WSpace=y}', "");
Expect(1, 8, '\P{WSpace=y}', "");
Expect(0, 8, '\P{^WSpace=y}', "");
Expect(1, 13, '\p{WSpace=-_Y}', "");
Expect(0, 13, '\p{^WSpace=-_Y}', "");
Expect(0, 13, '\P{WSpace=-_Y}', "");
Expect(1, 13, '\P{^WSpace=-_Y}', "");
Expect(0, 8, '\p{WSpace=-_Y}', "");
Expect(1, 8, '\p{^WSpace=-_Y}', "");
Expect(1, 8, '\P{WSpace=-_Y}', "");
Expect(0, 8, '\P{^WSpace=-_Y}', "");
Error('\p{Space=	_T/a/}');
Error('\P{Space=	_T/a/}');
Expect(1, 13, '\p{Space: t}', "");
Expect(0, 13, '\p{^Space: t}', "");
Expect(0, 13, '\P{Space: t}', "");
Expect(1, 13, '\P{^Space: t}', "");
Expect(0, 8, '\p{Space: t}', "");
Expect(1, 8, '\p{^Space: t}', "");
Expect(1, 8, '\P{Space: t}', "");
Expect(0, 8, '\P{^Space: t}', "");
Expect(1, 13, '\p{Space=--T}', "");
Expect(0, 13, '\p{^Space=--T}', "");
Expect(0, 13, '\P{Space=--T}', "");
Expect(1, 13, '\P{^Space=--T}', "");
Expect(0, 8, '\p{Space=--T}', "");
Expect(1, 8, '\p{^Space=--T}', "");
Expect(1, 8, '\P{Space=--T}', "");
Expect(0, 8, '\P{^Space=--T}', "");
Error('\p{Is_White_Space=/a/True}');
Error('\P{Is_White_Space=/a/True}');
Expect(1, 13, '\p{Is_White_Space:	true}', "");
Expect(0, 13, '\p{^Is_White_Space:	true}', "");
Expect(0, 13, '\P{Is_White_Space:	true}', "");
Expect(1, 13, '\P{^Is_White_Space:	true}', "");
Expect(0, 8, '\p{Is_White_Space:	true}', "");
Expect(1, 8, '\p{^Is_White_Space:	true}', "");
Expect(1, 8, '\P{Is_White_Space:	true}', "");
Expect(0, 8, '\P{^Is_White_Space:	true}', "");
Expect(1, 13, '\p{Is_White_Space=	-True}', "");
Expect(0, 13, '\p{^Is_White_Space=	-True}', "");
Expect(0, 13, '\P{Is_White_Space=	-True}', "");
Expect(1, 13, '\P{^Is_White_Space=	-True}', "");
Expect(0, 8, '\p{Is_White_Space=	-True}', "");
Expect(1, 8, '\p{^Is_White_Space=	-True}', "");
Expect(1, 8, '\P{Is_White_Space=	-True}', "");
Expect(0, 8, '\P{^Is_White_Space=	-True}', "");
Error('\p{Is_WSpace=:= 	yes}');
Error('\P{Is_WSpace=:= 	yes}');
Expect(1, 13, '\p{Is_WSpace=yes}', "");
Expect(0, 13, '\p{^Is_WSpace=yes}', "");
Expect(0, 13, '\P{Is_WSpace=yes}', "");
Expect(1, 13, '\P{^Is_WSpace=yes}', "");
Expect(0, 8, '\p{Is_WSpace=yes}', "");
Expect(1, 8, '\p{^Is_WSpace=yes}', "");
Expect(1, 8, '\P{Is_WSpace=yes}', "");
Expect(0, 8, '\P{^Is_WSpace=yes}', "");
Expect(1, 13, '\p{Is_WSpace=	 Yes}', "");
Expect(0, 13, '\p{^Is_WSpace=	 Yes}', "");
Expect(0, 13, '\P{Is_WSpace=	 Yes}', "");
Expect(1, 13, '\P{^Is_WSpace=	 Yes}', "");
Expect(0, 8, '\p{Is_WSpace=	 Yes}', "");
Expect(1, 8, '\p{^Is_WSpace=	 Yes}', "");
Expect(1, 8, '\P{Is_WSpace=	 Yes}', "");
Expect(0, 8, '\P{^Is_WSpace=	 Yes}', "");
Error('\p{Is_Space=/a/-y}');
Error('\P{Is_Space=/a/-y}');
Expect(1, 13, '\p{Is_Space=y}', "");
Expect(0, 13, '\p{^Is_Space=y}', "");
Expect(0, 13, '\P{Is_Space=y}', "");
Expect(1, 13, '\P{^Is_Space=y}', "");
Expect(0, 8, '\p{Is_Space=y}', "");
Expect(1, 8, '\p{^Is_Space=y}', "");
Expect(1, 8, '\P{Is_Space=y}', "");
Expect(0, 8, '\P{^Is_Space=y}', "");
Expect(1, 13, '\p{Is_Space=	Y}', "");
Expect(0, 13, '\p{^Is_Space=	Y}', "");
Expect(0, 13, '\P{Is_Space=	Y}', "");
Expect(1, 13, '\P{^Is_Space=	Y}', "");
Expect(0, 8, '\p{Is_Space=	Y}', "");
Expect(1, 8, '\p{^Is_Space=	Y}', "");
Expect(1, 8, '\P{Is_Space=	Y}', "");
Expect(0, 8, '\P{^Is_Space=	Y}', "");
Error('\p{White_Space=--No/a/}');
Error('\P{White_Space=--No/a/}');
Expect(1, 8, '\p{White_Space=no}', "");
Expect(0, 8, '\p{^White_Space=no}', "");
Expect(0, 8, '\P{White_Space=no}', "");
Expect(1, 8, '\P{^White_Space=no}', "");
Expect(0, 13, '\p{White_Space=no}', "");
Expect(1, 13, '\p{^White_Space=no}', "");
Expect(1, 13, '\P{White_Space=no}', "");
Expect(0, 13, '\P{^White_Space=no}', "");
Expect(1, 8, '\p{White_Space= _No}', "");
Expect(0, 8, '\p{^White_Space= _No}', "");
Expect(0, 8, '\P{White_Space= _No}', "");
Expect(1, 8, '\P{^White_Space= _No}', "");
Expect(0, 13, '\p{White_Space= _No}', "");
Expect(1, 13, '\p{^White_Space= _No}', "");
Expect(1, 13, '\P{White_Space= _No}', "");
Expect(0, 13, '\P{^White_Space= _No}', "");
Error('\p{WSpace=N:=}');
Error('\P{WSpace=N:=}');
Expect(1, 8, '\p{WSpace=n}', "");
Expect(0, 8, '\p{^WSpace=n}', "");
Expect(0, 8, '\P{WSpace=n}', "");
Expect(1, 8, '\P{^WSpace=n}', "");
Expect(0, 13, '\p{WSpace=n}', "");
Expect(1, 13, '\p{^WSpace=n}', "");
Expect(1, 13, '\P{WSpace=n}', "");
Expect(0, 13, '\P{^WSpace=n}', "");
Expect(1, 8, '\p{WSpace=	_N}', "");
Expect(0, 8, '\p{^WSpace=	_N}', "");
Expect(0, 8, '\P{WSpace=	_N}', "");
Expect(1, 8, '\P{^WSpace=	_N}', "");
Expect(0, 13, '\p{WSpace=	_N}', "");
Expect(1, 13, '\p{^WSpace=	_N}', "");
Expect(1, 13, '\P{WSpace=	_N}', "");
Expect(0, 13, '\P{^WSpace=	_N}', "");
Error('\p{Space=:=f}');
Error('\P{Space=:=f}');
Expect(1, 8, '\p{Space=f}', "");
Expect(0, 8, '\p{^Space=f}', "");
Expect(0, 8, '\P{Space=f}', "");
Expect(1, 8, '\P{^Space=f}', "");
Expect(0, 13, '\p{Space=f}', "");
Expect(1, 13, '\p{^Space=f}', "");
Expect(1, 13, '\P{Space=f}', "");
Expect(0, 13, '\P{^Space=f}', "");
Expect(1, 8, '\p{Space=F}', "");
Expect(0, 8, '\p{^Space=F}', "");
Expect(0, 8, '\P{Space=F}', "");
Expect(1, 8, '\P{^Space=F}', "");
Expect(0, 13, '\p{Space=F}', "");
Expect(1, 13, '\p{^Space=F}', "");
Expect(1, 13, '\P{Space=F}', "");
Expect(0, 13, '\P{^Space=F}', "");
Error('\p{Is_White_Space=	-FALSE/a/}');
Error('\P{Is_White_Space=	-FALSE/a/}');
Expect(1, 8, '\p{Is_White_Space=false}', "");
Expect(0, 8, '\p{^Is_White_Space=false}', "");
Expect(0, 8, '\P{Is_White_Space=false}', "");
Expect(1, 8, '\P{^Is_White_Space=false}', "");
Expect(0, 13, '\p{Is_White_Space=false}', "");
Expect(1, 13, '\p{^Is_White_Space=false}', "");
Expect(1, 13, '\P{Is_White_Space=false}', "");
Expect(0, 13, '\P{^Is_White_Space=false}', "");
Expect(1, 8, '\p{Is_White_Space=	FALSE}', "");
Expect(0, 8, '\p{^Is_White_Space=	FALSE}', "");
Expect(0, 8, '\P{Is_White_Space=	FALSE}', "");
Expect(1, 8, '\P{^Is_White_Space=	FALSE}', "");
Expect(0, 13, '\p{Is_White_Space=	FALSE}', "");
Expect(1, 13, '\p{^Is_White_Space=	FALSE}', "");
Expect(1, 13, '\P{Is_White_Space=	FALSE}', "");
Expect(0, 13, '\P{^Is_White_Space=	FALSE}', "");
Error('\p{Is_WSpace= No:=}');
Error('\P{Is_WSpace= No:=}');
Expect(1, 8, '\p{Is_WSpace=no}', "");
Expect(0, 8, '\p{^Is_WSpace=no}', "");
Expect(0, 8, '\P{Is_WSpace=no}', "");
Expect(1, 8, '\P{^Is_WSpace=no}', "");
Expect(0, 13, '\p{Is_WSpace=no}', "");
Expect(1, 13, '\p{^Is_WSpace=no}', "");
Expect(1, 13, '\P{Is_WSpace=no}', "");
Expect(0, 13, '\P{^Is_WSpace=no}', "");
Expect(1, 8, '\p{Is_WSpace=_-NO}', "");
Expect(0, 8, '\p{^Is_WSpace=_-NO}', "");
Expect(0, 8, '\P{Is_WSpace=_-NO}', "");
Expect(1, 8, '\P{^Is_WSpace=_-NO}', "");
Expect(0, 13, '\p{Is_WSpace=_-NO}', "");
Expect(1, 13, '\p{^Is_WSpace=_-NO}', "");
Expect(1, 13, '\P{Is_WSpace=_-NO}', "");
Expect(0, 13, '\P{^Is_WSpace=_-NO}', "");
Error('\p{Is_Space=/a/	N}');
Error('\P{Is_Space=/a/	N}');
Expect(1, 8, '\p{Is_Space=n}', "");
Expect(0, 8, '\p{^Is_Space=n}', "");
Expect(0, 8, '\P{Is_Space=n}', "");
Expect(1, 8, '\P{^Is_Space=n}', "");
Expect(0, 13, '\p{Is_Space=n}', "");
Expect(1, 13, '\p{^Is_Space=n}', "");
Expect(1, 13, '\P{Is_Space=n}', "");
Expect(0, 13, '\P{^Is_Space=n}', "");
Expect(1, 8, '\p{Is_Space=	N}', "");
Expect(0, 8, '\p{^Is_Space=	N}', "");
Expect(0, 8, '\P{Is_Space=	N}', "");
Expect(1, 8, '\P{^Is_Space=	N}', "");
Expect(0, 13, '\p{Is_Space=	N}', "");
Expect(1, 13, '\p{^Is_Space=	N}', "");
Expect(1, 13, '\P{Is_Space=	N}', "");
Expect(0, 13, '\P{^Is_Space=	N}', "");
Error('\p{XID_Continue=_:=Yes}');
Error('\P{XID_Continue=_:=Yes}');
Expect(1, 57, '\p{XID_Continue:	yes}', "");
Expect(0, 57, '\p{^XID_Continue:	yes}', "");
Expect(0, 57, '\P{XID_Continue:	yes}', "");
Expect(1, 57, '\P{^XID_Continue:	yes}', "");
Expect(0, 47, '\p{XID_Continue:	yes}', "");
Expect(1, 47, '\p{^XID_Continue:	yes}', "");
Expect(1, 47, '\P{XID_Continue:	yes}', "");
Expect(0, 47, '\P{^XID_Continue:	yes}', "");
Expect(1, 57, '\p{XID_Continue=	_YES}', "");
Expect(0, 57, '\p{^XID_Continue=	_YES}', "");
Expect(0, 57, '\P{XID_Continue=	_YES}', "");
Expect(1, 57, '\P{^XID_Continue=	_YES}', "");
Expect(0, 47, '\p{XID_Continue=	_YES}', "");
Expect(1, 47, '\p{^XID_Continue=	_YES}', "");
Expect(1, 47, '\P{XID_Continue=	_YES}', "");
Expect(0, 47, '\P{^XID_Continue=	_YES}', "");
Error('\p{XIDC=	/a/Y}');
Error('\P{XIDC=	/a/Y}');
Expect(1, 57, '\p{XIDC=y}', "");
Expect(0, 57, '\p{^XIDC=y}', "");
Expect(0, 57, '\P{XIDC=y}', "");
Expect(1, 57, '\P{^XIDC=y}', "");
Expect(0, 47, '\p{XIDC=y}', "");
Expect(1, 47, '\p{^XIDC=y}', "");
Expect(1, 47, '\P{XIDC=y}', "");
Expect(0, 47, '\P{^XIDC=y}', "");
Expect(1, 57, '\p{XIDC:	 Y}', "");
Expect(0, 57, '\p{^XIDC:	 Y}', "");
Expect(0, 57, '\P{XIDC:	 Y}', "");
Expect(1, 57, '\P{^XIDC:	 Y}', "");
Expect(0, 47, '\p{XIDC:	 Y}', "");
Expect(1, 47, '\p{^XIDC:	 Y}', "");
Expect(1, 47, '\P{XIDC:	 Y}', "");
Expect(0, 47, '\P{^XIDC:	 Y}', "");
Error('\p{Is_XID_Continue=/a/_T}');
Error('\P{Is_XID_Continue=/a/_T}');
Expect(1, 57, '\p{Is_XID_Continue=t}', "");
Expect(0, 57, '\p{^Is_XID_Continue=t}', "");
Expect(0, 57, '\P{Is_XID_Continue=t}', "");
Expect(1, 57, '\P{^Is_XID_Continue=t}', "");
Expect(0, 47, '\p{Is_XID_Continue=t}', "");
Expect(1, 47, '\p{^Is_XID_Continue=t}', "");
Expect(1, 47, '\P{Is_XID_Continue=t}', "");
Expect(0, 47, '\P{^Is_XID_Continue=t}', "");
Expect(1, 57, '\p{Is_XID_Continue= _t}', "");
Expect(0, 57, '\p{^Is_XID_Continue= _t}', "");
Expect(0, 57, '\P{Is_XID_Continue= _t}', "");
Expect(1, 57, '\P{^Is_XID_Continue= _t}', "");
Expect(0, 47, '\p{Is_XID_Continue= _t}', "");
Expect(1, 47, '\p{^Is_XID_Continue= _t}', "");
Expect(1, 47, '\P{Is_XID_Continue= _t}', "");
Expect(0, 47, '\P{^Is_XID_Continue= _t}', "");
Error('\p{Is_XIDC=-:=True}');
Error('\P{Is_XIDC=-:=True}');
Expect(1, 57, '\p{Is_XIDC=true}', "");
Expect(0, 57, '\p{^Is_XIDC=true}', "");
Expect(0, 57, '\P{Is_XIDC=true}', "");
Expect(1, 57, '\P{^Is_XIDC=true}', "");
Expect(0, 47, '\p{Is_XIDC=true}', "");
Expect(1, 47, '\p{^Is_XIDC=true}', "");
Expect(1, 47, '\P{Is_XIDC=true}', "");
Expect(0, 47, '\P{^Is_XIDC=true}', "");
Expect(1, 57, '\p{Is_XIDC:-True}', "");
Expect(0, 57, '\p{^Is_XIDC:-True}', "");
Expect(0, 57, '\P{Is_XIDC:-True}', "");
Expect(1, 57, '\P{^Is_XIDC:-True}', "");
Expect(0, 47, '\p{Is_XIDC:-True}', "");
Expect(1, 47, '\p{^Is_XIDC:-True}', "");
Expect(1, 47, '\P{Is_XIDC:-True}', "");
Expect(0, 47, '\P{^Is_XIDC:-True}', "");
Error('\p{XID_Continue= :=No}');
Error('\P{XID_Continue= :=No}');
Expect(1, 47, '\p{XID_Continue=no}', "");
Expect(0, 47, '\p{^XID_Continue=no}', "");
Expect(0, 47, '\P{XID_Continue=no}', "");
Expect(1, 47, '\P{^XID_Continue=no}', "");
Expect(0, 57, '\p{XID_Continue=no}', "");
Expect(1, 57, '\p{^XID_Continue=no}', "");
Expect(1, 57, '\P{XID_Continue=no}', "");
Expect(0, 57, '\P{^XID_Continue=no}', "");
Expect(1, 47, '\p{XID_Continue=_-no}', "");
Expect(0, 47, '\p{^XID_Continue=_-no}', "");
Expect(0, 47, '\P{XID_Continue=_-no}', "");
Expect(1, 47, '\P{^XID_Continue=_-no}', "");
Expect(0, 57, '\p{XID_Continue=_-no}', "");
Expect(1, 57, '\p{^XID_Continue=_-no}', "");
Expect(1, 57, '\P{XID_Continue=_-no}', "");
Expect(0, 57, '\P{^XID_Continue=_-no}', "");
Error('\p{XIDC=/a/	-n}');
Error('\P{XIDC=/a/	-n}');
Expect(1, 47, '\p{XIDC=n}', "");
Expect(0, 47, '\p{^XIDC=n}', "");
Expect(0, 47, '\P{XIDC=n}', "");
Expect(1, 47, '\P{^XIDC=n}', "");
Expect(0, 57, '\p{XIDC=n}', "");
Expect(1, 57, '\p{^XIDC=n}', "");
Expect(1, 57, '\P{XIDC=n}', "");
Expect(0, 57, '\P{^XIDC=n}', "");
Expect(1, 47, '\p{XIDC=_-N}', "");
Expect(0, 47, '\p{^XIDC=_-N}', "");
Expect(0, 47, '\P{XIDC=_-N}', "");
Expect(1, 47, '\P{^XIDC=_-N}', "");
Expect(0, 57, '\p{XIDC=_-N}', "");
Expect(1, 57, '\p{^XIDC=_-N}', "");
Expect(1, 57, '\P{XIDC=_-N}', "");
Expect(0, 57, '\P{^XIDC=_-N}', "");
Error('\p{Is_XID_Continue= -F:=}');
Error('\P{Is_XID_Continue= -F:=}');
Expect(1, 47, '\p{Is_XID_Continue:f}', "");
Expect(0, 47, '\p{^Is_XID_Continue:f}', "");
Expect(0, 47, '\P{Is_XID_Continue:f}', "");
Expect(1, 47, '\P{^Is_XID_Continue:f}', "");
Expect(0, 57, '\p{Is_XID_Continue:f}', "");
Expect(1, 57, '\p{^Is_XID_Continue:f}', "");
Expect(1, 57, '\P{Is_XID_Continue:f}', "");
Expect(0, 57, '\P{^Is_XID_Continue:f}', "");
Expect(1, 47, '\p{Is_XID_Continue=	 F}', "");
Expect(0, 47, '\p{^Is_XID_Continue=	 F}', "");
Expect(0, 47, '\P{Is_XID_Continue=	 F}', "");
Expect(1, 47, '\P{^Is_XID_Continue=	 F}', "");
Expect(0, 57, '\p{Is_XID_Continue=	 F}', "");
Expect(1, 57, '\p{^Is_XID_Continue=	 F}', "");
Expect(1, 57, '\P{Is_XID_Continue=	 F}', "");
Expect(0, 57, '\P{^Is_XID_Continue=	 F}', "");
Error('\p{Is_XIDC=:=--FALSE}');
Error('\P{Is_XIDC=:=--FALSE}');
Expect(1, 47, '\p{Is_XIDC=false}', "");
Expect(0, 47, '\p{^Is_XIDC=false}', "");
Expect(0, 47, '\P{Is_XIDC=false}', "");
Expect(1, 47, '\P{^Is_XIDC=false}', "");
Expect(0, 57, '\p{Is_XIDC=false}', "");
Expect(1, 57, '\p{^Is_XIDC=false}', "");
Expect(1, 57, '\P{Is_XIDC=false}', "");
Expect(0, 57, '\P{^Is_XIDC=false}', "");
Expect(1, 47, '\p{Is_XIDC=-	FALSE}', "");
Expect(0, 47, '\p{^Is_XIDC=-	FALSE}', "");
Expect(0, 47, '\P{Is_XIDC=-	FALSE}', "");
Expect(1, 47, '\P{^Is_XIDC=-	FALSE}', "");
Expect(0, 57, '\p{Is_XIDC=-	FALSE}', "");
Expect(1, 57, '\p{^Is_XIDC=-	FALSE}', "");
Expect(1, 57, '\P{Is_XIDC=-	FALSE}', "");
Expect(0, 57, '\P{^Is_XIDC=-	FALSE}', "");
Error('\p{XID_Start=	_YES/a/}');
Error('\P{XID_Start=	_YES/a/}');
Expect(1, 90, '\p{XID_Start=yes}', "");
Expect(0, 90, '\p{^XID_Start=yes}', "");
Expect(0, 90, '\P{XID_Start=yes}', "");
Expect(1, 90, '\P{^XID_Start=yes}', "");
Expect(0, 64, '\p{XID_Start=yes}', "");
Expect(1, 64, '\p{^XID_Start=yes}', "");
Expect(1, 64, '\P{XID_Start=yes}', "");
Expect(0, 64, '\P{^XID_Start=yes}', "");
Expect(1, 90, '\p{XID_Start=- yes}', "");
Expect(0, 90, '\p{^XID_Start=- yes}', "");
Expect(0, 90, '\P{XID_Start=- yes}', "");
Expect(1, 90, '\P{^XID_Start=- yes}', "");
Expect(0, 64, '\p{XID_Start=- yes}', "");
Expect(1, 64, '\p{^XID_Start=- yes}', "");
Expect(1, 64, '\P{XID_Start=- yes}', "");
Expect(0, 64, '\P{^XID_Start=- yes}', "");
Error('\p{XIDS= -y/a/}');
Error('\P{XIDS= -y/a/}');
Expect(1, 90, '\p{XIDS=y}', "");
Expect(0, 90, '\p{^XIDS=y}', "");
Expect(0, 90, '\P{XIDS=y}', "");
Expect(1, 90, '\P{^XIDS=y}', "");
Expect(0, 64, '\p{XIDS=y}', "");
Expect(1, 64, '\p{^XIDS=y}', "");
Expect(1, 64, '\P{XIDS=y}', "");
Expect(0, 64, '\P{^XIDS=y}', "");
Expect(1, 90, '\p{XIDS:   _y}', "");
Expect(0, 90, '\p{^XIDS:   _y}', "");
Expect(0, 90, '\P{XIDS:   _y}', "");
Expect(1, 90, '\P{^XIDS:   _y}', "");
Expect(0, 64, '\p{XIDS:   _y}', "");
Expect(1, 64, '\p{^XIDS:   _y}', "");
Expect(1, 64, '\P{XIDS:   _y}', "");
Expect(0, 64, '\P{^XIDS:   _y}', "");
Error('\p{Is_XID_Start: := t}');
Error('\P{Is_XID_Start: := t}');
Expect(1, 90, '\p{Is_XID_Start=t}', "");
Expect(0, 90, '\p{^Is_XID_Start=t}', "");
Expect(0, 90, '\P{Is_XID_Start=t}', "");
Expect(1, 90, '\P{^Is_XID_Start=t}', "");
Expect(0, 64, '\p{Is_XID_Start=t}', "");
Expect(1, 64, '\p{^Is_XID_Start=t}', "");
Expect(1, 64, '\P{Is_XID_Start=t}', "");
Expect(0, 64, '\P{^Is_XID_Start=t}', "");
Expect(1, 90, '\p{Is_XID_Start=--T}', "");
Expect(0, 90, '\p{^Is_XID_Start=--T}', "");
Expect(0, 90, '\P{Is_XID_Start=--T}', "");
Expect(1, 90, '\P{^Is_XID_Start=--T}', "");
Expect(0, 64, '\p{Is_XID_Start=--T}', "");
Expect(1, 64, '\p{^Is_XID_Start=--T}', "");
Expect(1, 64, '\P{Is_XID_Start=--T}', "");
Expect(0, 64, '\P{^Is_XID_Start=--T}', "");
Error('\p{Is_XIDS=- True:=}');
Error('\P{Is_XIDS=- True:=}');
Expect(1, 90, '\p{Is_XIDS=true}', "");
Expect(0, 90, '\p{^Is_XIDS=true}', "");
Expect(0, 90, '\P{Is_XIDS=true}', "");
Expect(1, 90, '\P{^Is_XIDS=true}', "");
Expect(0, 64, '\p{Is_XIDS=true}', "");
Expect(1, 64, '\p{^Is_XIDS=true}', "");
Expect(1, 64, '\P{Is_XIDS=true}', "");
Expect(0, 64, '\P{^Is_XIDS=true}', "");
Expect(1, 90, '\p{Is_XIDS= -True}', "");
Expect(0, 90, '\p{^Is_XIDS= -True}', "");
Expect(0, 90, '\P{Is_XIDS= -True}', "");
Expect(1, 90, '\P{^Is_XIDS= -True}', "");
Expect(0, 64, '\p{Is_XIDS= -True}', "");
Expect(1, 64, '\p{^Is_XIDS= -True}', "");
Expect(1, 64, '\P{Is_XIDS= -True}', "");
Expect(0, 64, '\P{^Is_XIDS= -True}', "");
Error('\p{XID_Start=:=	-no}');
Error('\P{XID_Start=:=	-no}');
Expect(1, 64, '\p{XID_Start=no}', "");
Expect(0, 64, '\p{^XID_Start=no}', "");
Expect(0, 64, '\P{XID_Start=no}', "");
Expect(1, 64, '\P{^XID_Start=no}', "");
Expect(0, 90, '\p{XID_Start=no}', "");
Expect(1, 90, '\p{^XID_Start=no}', "");
Expect(1, 90, '\P{XID_Start=no}', "");
Expect(0, 90, '\P{^XID_Start=no}', "");
Expect(1, 64, '\p{XID_Start=_NO}', "");
Expect(0, 64, '\p{^XID_Start=_NO}', "");
Expect(0, 64, '\P{XID_Start=_NO}', "");
Expect(1, 64, '\P{^XID_Start=_NO}', "");
Expect(0, 90, '\p{XID_Start=_NO}', "");
Expect(1, 90, '\p{^XID_Start=_NO}', "");
Expect(1, 90, '\P{XID_Start=_NO}', "");
Expect(0, 90, '\P{^XID_Start=_NO}', "");
Error('\p{XIDS=:=	_N}');
Error('\P{XIDS=:=	_N}');
Expect(1, 64, '\p{XIDS=n}', "");
Expect(0, 64, '\p{^XIDS=n}', "");
Expect(0, 64, '\P{XIDS=n}', "");
Expect(1, 64, '\P{^XIDS=n}', "");
Expect(0, 90, '\p{XIDS=n}', "");
Expect(1, 90, '\p{^XIDS=n}', "");
Expect(1, 90, '\P{XIDS=n}', "");
Expect(0, 90, '\P{^XIDS=n}', "");
Expect(1, 64, '\p{XIDS=-_n}', "");
Expect(0, 64, '\p{^XIDS=-_n}', "");
Expect(0, 64, '\P{XIDS=-_n}', "");
Expect(1, 64, '\P{^XIDS=-_n}', "");
Expect(0, 90, '\p{XIDS=-_n}', "");
Expect(1, 90, '\p{^XIDS=-_n}', "");
Expect(1, 90, '\P{XIDS=-_n}', "");
Expect(0, 90, '\P{^XIDS=-_n}', "");
Error('\p{Is_XID_Start=	:=F}');
Error('\P{Is_XID_Start=	:=F}');
Expect(1, 64, '\p{Is_XID_Start=f}', "");
Expect(0, 64, '\p{^Is_XID_Start=f}', "");
Expect(0, 64, '\P{Is_XID_Start=f}', "");
Expect(1, 64, '\P{^Is_XID_Start=f}', "");
Expect(0, 90, '\p{Is_XID_Start=f}', "");
Expect(1, 90, '\p{^Is_XID_Start=f}', "");
Expect(1, 90, '\P{Is_XID_Start=f}', "");
Expect(0, 90, '\P{^Is_XID_Start=f}', "");
Expect(1, 64, '\p{Is_XID_Start=- F}', "");
Expect(0, 64, '\p{^Is_XID_Start=- F}', "");
Expect(0, 64, '\P{Is_XID_Start=- F}', "");
Expect(1, 64, '\P{^Is_XID_Start=- F}', "");
Expect(0, 90, '\p{Is_XID_Start=- F}', "");
Expect(1, 90, '\p{^Is_XID_Start=- F}', "");
Expect(1, 90, '\P{Is_XID_Start=- F}', "");
Expect(0, 90, '\P{^Is_XID_Start=- F}', "");
Error('\p{Is_XIDS=-FALSE:=}');
Error('\P{Is_XIDS=-FALSE:=}');
Expect(1, 64, '\p{Is_XIDS=false}', "");
Expect(0, 64, '\p{^Is_XIDS=false}', "");
Expect(0, 64, '\P{Is_XIDS=false}', "");
Expect(1, 64, '\P{^Is_XIDS=false}', "");
Expect(0, 90, '\p{Is_XIDS=false}', "");
Expect(1, 90, '\p{^Is_XIDS=false}', "");
Expect(1, 90, '\P{Is_XIDS=false}', "");
Expect(0, 90, '\P{^Is_XIDS=false}', "");
Expect(1, 64, '\p{Is_XIDS=_false}', "");
Expect(0, 64, '\p{^Is_XIDS=_false}', "");
Expect(0, 64, '\P{Is_XIDS=_false}', "");
Expect(1, 64, '\P{^Is_XIDS=_false}', "");
Expect(0, 90, '\p{Is_XIDS=_false}', "");
Expect(1, 90, '\p{^Is_XIDS=_false}', "");
Expect(1, 90, '\P{Is_XIDS=_false}', "");
Expect(0, 90, '\P{^Is_XIDS=_false}', "");
Error('\p{Script=-/a/New	taiLue}');
Error('\P{Script=-/a/New	taiLue}');
Expect(1, 6571, '\p{Script=newtailue}', "");
Expect(0, 6571, '\p{^Script=newtailue}', "");
Expect(0, 6571, '\P{Script=newtailue}', "");
Expect(1, 6571, '\P{^Script=newtailue}', "");
Expect(0, 6527, '\p{Script=newtailue}', "");
Expect(1, 6527, '\p{^Script=newtailue}', "");
Expect(1, 6527, '\P{Script=newtailue}', "");
Expect(0, 6527, '\P{^Script=newtailue}', "");
Expect(1, 6571, '\p{Script= 	New-tai	LUE}', "");
Expect(0, 6571, '\p{^Script= 	New-tai	LUE}', "");
Expect(0, 6571, '\P{Script= 	New-tai	LUE}', "");
Expect(1, 6571, '\P{^Script= 	New-tai	LUE}', "");
Expect(0, 6527, '\p{Script= 	New-tai	LUE}', "");
Expect(1, 6527, '\p{^Script= 	New-tai	LUE}', "");
Expect(1, 6527, '\P{Script= 	New-tai	LUE}', "");
Expect(0, 6527, '\P{^Script= 	New-tai	LUE}', "");
Error('\p{Sc:			TALU/a/}');
Error('\P{Sc:			TALU/a/}');
Expect(1, 6571, '\p{Sc=talu}', "");
Expect(0, 6571, '\p{^Sc=talu}', "");
Expect(0, 6571, '\P{Sc=talu}', "");
Expect(1, 6571, '\P{^Sc=talu}', "");
Expect(0, 6527, '\p{Sc=talu}', "");
Expect(1, 6527, '\p{^Sc=talu}', "");
Expect(1, 6527, '\P{Sc=talu}', "");
Expect(0, 6527, '\P{^Sc=talu}', "");
Expect(1, 6571, '\p{Sc=	Talu}', "");
Expect(0, 6571, '\p{^Sc=	Talu}', "");
Expect(0, 6571, '\P{Sc=	Talu}', "");
Expect(1, 6571, '\P{^Sc=	Talu}', "");
Expect(0, 6527, '\p{Sc=	Talu}', "");
Expect(1, 6527, '\p{^Sc=	Talu}', "");
Expect(1, 6527, '\P{Sc=	Talu}', "");
Expect(0, 6527, '\P{^Sc=	Talu}', "");
Error('\p{Is_Script=:= _New TAI_LUE}');
Error('\P{Is_Script=:= _New TAI_LUE}');
Expect(1, 6571, '\p{Is_Script=newtailue}', "");
Expect(0, 6571, '\p{^Is_Script=newtailue}', "");
Expect(0, 6571, '\P{Is_Script=newtailue}', "");
Expect(1, 6571, '\P{^Is_Script=newtailue}', "");
Expect(0, 6527, '\p{Is_Script=newtailue}', "");
Expect(1, 6527, '\p{^Is_Script=newtailue}', "");
Expect(1, 6527, '\P{Is_Script=newtailue}', "");
Expect(0, 6527, '\P{^Is_Script=newtailue}', "");
Expect(1, 6571, '\p{Is_Script:	 New_Tai-LUE}', "");
Expect(0, 6571, '\p{^Is_Script:	 New_Tai-LUE}', "");
Expect(0, 6571, '\P{Is_Script:	 New_Tai-LUE}', "");
Expect(1, 6571, '\P{^Is_Script:	 New_Tai-LUE}', "");
Expect(0, 6527, '\p{Is_Script:	 New_Tai-LUE}', "");
Expect(1, 6527, '\p{^Is_Script:	 New_Tai-LUE}', "");
Expect(1, 6527, '\P{Is_Script:	 New_Tai-LUE}', "");
Expect(0, 6527, '\P{^Is_Script:	 New_Tai-LUE}', "");
Error('\p{Is_Sc=:= Talu}');
Error('\P{Is_Sc=:= Talu}');
Expect(1, 6571, '\p{Is_Sc=talu}', "");
Expect(0, 6571, '\p{^Is_Sc=talu}', "");
Expect(0, 6571, '\P{Is_Sc=talu}', "");
Expect(1, 6571, '\P{^Is_Sc=talu}', "");
Expect(0, 6527, '\p{Is_Sc=talu}', "");
Expect(1, 6527, '\p{^Is_Sc=talu}', "");
Expect(1, 6527, '\P{Is_Sc=talu}', "");
Expect(0, 6527, '\P{^Is_Sc=talu}', "");
Expect(1, 6571, '\p{Is_Sc=Talu}', "");
Expect(0, 6571, '\p{^Is_Sc=Talu}', "");
Expect(0, 6571, '\P{Is_Sc=Talu}', "");
Expect(1, 6571, '\P{^Is_Sc=Talu}', "");
Expect(0, 6527, '\p{Is_Sc=Talu}', "");
Expect(1, 6527, '\p{^Is_Sc=Talu}', "");
Expect(1, 6527, '\P{Is_Sc=Talu}', "");
Expect(0, 6527, '\P{^Is_Sc=Talu}', "");
Error('\p{Script=	GOTHIC:=}');
Error('\P{Script=	GOTHIC:=}');
Expect(1, 66378, '\p{Script=gothic}', "");
Expect(0, 66378, '\p{^Script=gothic}', "");
Expect(0, 66378, '\P{Script=gothic}', "");
Expect(1, 66378, '\P{^Script=gothic}', "");
Expect(0, 66351, '\p{Script=gothic}', "");
Expect(1, 66351, '\p{^Script=gothic}', "");
Expect(1, 66351, '\P{Script=gothic}', "");
Expect(0, 66351, '\P{^Script=gothic}', "");
Expect(1, 66378, '\p{Script=_Gothic}', "");
Expect(0, 66378, '\p{^Script=_Gothic}', "");
Expect(0, 66378, '\P{Script=_Gothic}', "");
Expect(1, 66378, '\P{^Script=_Gothic}', "");
Expect(0, 66351, '\p{Script=_Gothic}', "");
Expect(1, 66351, '\p{^Script=_Gothic}', "");
Expect(1, 66351, '\P{Script=_Gothic}', "");
Expect(0, 66351, '\P{^Script=_Gothic}', "");
Error('\p{Sc= GOTH:=}');
Error('\P{Sc= GOTH:=}');
Expect(1, 66378, '\p{Sc=goth}', "");
Expect(0, 66378, '\p{^Sc=goth}', "");
Expect(0, 66378, '\P{Sc=goth}', "");
Expect(1, 66378, '\P{^Sc=goth}', "");
Expect(0, 66351, '\p{Sc=goth}', "");
Expect(1, 66351, '\p{^Sc=goth}', "");
Expect(1, 66351, '\P{Sc=goth}', "");
Expect(0, 66351, '\P{^Sc=goth}', "");
Expect(1, 66378, '\p{Sc=-	goth}', "");
Expect(0, 66378, '\p{^Sc=-	goth}', "");
Expect(0, 66378, '\P{Sc=-	goth}', "");
Expect(1, 66378, '\P{^Sc=-	goth}', "");
Expect(0, 66351, '\p{Sc=-	goth}', "");
Expect(1, 66351, '\p{^Sc=-	goth}', "");
Expect(1, 66351, '\P{Sc=-	goth}', "");
Expect(0, 66351, '\P{^Sc=-	goth}', "");
Error('\p{Is_Script:   /a/	-gothic}');
Error('\P{Is_Script:   /a/	-gothic}');
Expect(1, 66378, '\p{Is_Script=gothic}', "");
Expect(0, 66378, '\p{^Is_Script=gothic}', "");
Expect(0, 66378, '\P{Is_Script=gothic}', "");
Expect(1, 66378, '\P{^Is_Script=gothic}', "");
Expect(0, 66351, '\p{Is_Script=gothic}', "");
Expect(1, 66351, '\p{^Is_Script=gothic}', "");
Expect(1, 66351, '\P{Is_Script=gothic}', "");
Expect(0, 66351, '\P{^Is_Script=gothic}', "");
Expect(1, 66378, '\p{Is_Script:	_	gothic}', "");
Expect(0, 66378, '\p{^Is_Script:	_	gothic}', "");
Expect(0, 66378, '\P{Is_Script:	_	gothic}', "");
Expect(1, 66378, '\P{^Is_Script:	_	gothic}', "");
Expect(0, 66351, '\p{Is_Script:	_	gothic}', "");
Expect(1, 66351, '\p{^Is_Script:	_	gothic}', "");
Expect(1, 66351, '\P{Is_Script:	_	gothic}', "");
Expect(0, 66351, '\P{^Is_Script:	_	gothic}', "");
Error('\p{Is_Sc=-Goth:=}');
Error('\P{Is_Sc=-Goth:=}');
Expect(1, 66378, '\p{Is_Sc=goth}', "");
Expect(0, 66378, '\p{^Is_Sc=goth}', "");
Expect(0, 66378, '\P{Is_Sc=goth}', "");
Expect(1, 66378, '\P{^Is_Sc=goth}', "");
Expect(0, 66351, '\p{Is_Sc=goth}', "");
Expect(1, 66351, '\p{^Is_Sc=goth}', "");
Expect(1, 66351, '\P{Is_Sc=goth}', "");
Expect(0, 66351, '\P{^Is_Sc=goth}', "");
Expect(1, 66378, '\p{Is_Sc=_-Goth}', "");
Expect(0, 66378, '\p{^Is_Sc=_-Goth}', "");
Expect(0, 66378, '\P{Is_Sc=_-Goth}', "");
Expect(1, 66378, '\P{^Is_Sc=_-Goth}', "");
Expect(0, 66351, '\p{Is_Sc=_-Goth}', "");
Expect(1, 66351, '\p{^Is_Sc=_-Goth}', "");
Expect(1, 66351, '\P{Is_Sc=_-Goth}', "");
Expect(0, 66351, '\P{^Is_Sc=_-Goth}', "");
Error('\p{Script=-/a/Old	Italic}');
Error('\P{Script=-/a/Old	Italic}');
Expect(1, 66334, '\p{Script=olditalic}', "");
Expect(0, 66334, '\p{^Script=olditalic}', "");
Expect(0, 66334, '\P{Script=olditalic}', "");
Expect(1, 66334, '\P{^Script=olditalic}', "");
Expect(0, 66303, '\p{Script=olditalic}', "");
Expect(1, 66303, '\p{^Script=olditalic}', "");
Expect(1, 66303, '\P{Script=olditalic}', "");
Expect(0, 66303, '\P{^Script=olditalic}', "");
Expect(1, 66334, '\p{Script= _Old	italic}', "");
Expect(0, 66334, '\p{^Script= _Old	italic}', "");
Expect(0, 66334, '\P{Script= _Old	italic}', "");
Expect(1, 66334, '\P{^Script= _Old	italic}', "");
Expect(0, 66303, '\p{Script= _Old	italic}', "");
Expect(1, 66303, '\p{^Script= _Old	italic}', "");
Expect(1, 66303, '\P{Script= _Old	italic}', "");
Expect(0, 66303, '\P{^Script= _Old	italic}', "");
Error('\p{Sc=:=ital}');
Error('\P{Sc=:=ital}');
Expect(1, 66334, '\p{Sc:	ital}', "");
Expect(0, 66334, '\p{^Sc:	ital}', "");
Expect(0, 66334, '\P{Sc:	ital}', "");
Expect(1, 66334, '\P{^Sc:	ital}', "");
Expect(0, 66303, '\p{Sc:	ital}', "");
Expect(1, 66303, '\p{^Sc:	ital}', "");
Expect(1, 66303, '\P{Sc:	ital}', "");
Expect(0, 66303, '\P{^Sc:	ital}', "");
Expect(1, 66334, '\p{Sc:   	Ital}', "");
Expect(0, 66334, '\p{^Sc:   	Ital}', "");
Expect(0, 66334, '\P{Sc:   	Ital}', "");
Expect(1, 66334, '\P{^Sc:   	Ital}', "");
Expect(0, 66303, '\p{Sc:   	Ital}', "");
Expect(1, 66303, '\p{^Sc:   	Ital}', "");
Expect(1, 66303, '\P{Sc:   	Ital}', "");
Expect(0, 66303, '\P{^Sc:   	Ital}', "");
Error('\p{Is_Script=- Old_Italic:=}');
Error('\P{Is_Script=- Old_Italic:=}');
Expect(1, 66334, '\p{Is_Script=olditalic}', "");
Expect(0, 66334, '\p{^Is_Script=olditalic}', "");
Expect(0, 66334, '\P{Is_Script=olditalic}', "");
Expect(1, 66334, '\P{^Is_Script=olditalic}', "");
Expect(0, 66303, '\p{Is_Script=olditalic}', "");
Expect(1, 66303, '\p{^Is_Script=olditalic}', "");
Expect(1, 66303, '\P{Is_Script=olditalic}', "");
Expect(0, 66303, '\P{^Is_Script=olditalic}', "");
Expect(1, 66334, '\p{Is_Script=	oldItalic}', "");
Expect(0, 66334, '\p{^Is_Script=	oldItalic}', "");
Expect(0, 66334, '\P{Is_Script=	oldItalic}', "");
Expect(1, 66334, '\P{^Is_Script=	oldItalic}', "");
Expect(0, 66303, '\p{Is_Script=	oldItalic}', "");
Expect(1, 66303, '\p{^Is_Script=	oldItalic}', "");
Expect(1, 66303, '\P{Is_Script=	oldItalic}', "");
Expect(0, 66303, '\P{^Is_Script=	oldItalic}', "");
Error('\p{Is_Sc=:=Ital}');
Error('\P{Is_Sc=:=Ital}');
Expect(1, 66334, '\p{Is_Sc=ital}', "");
Expect(0, 66334, '\p{^Is_Sc=ital}', "");
Expect(0, 66334, '\P{Is_Sc=ital}', "");
Expect(1, 66334, '\P{^Is_Sc=ital}', "");
Expect(0, 66303, '\p{Is_Sc=ital}', "");
Expect(1, 66303, '\p{^Is_Sc=ital}', "");
Expect(1, 66303, '\P{Is_Sc=ital}', "");
Expect(0, 66303, '\P{^Is_Sc=ital}', "");
Expect(1, 66334, '\p{Is_Sc:  Ital}', "");
Expect(0, 66334, '\p{^Is_Sc:  Ital}', "");
Expect(0, 66334, '\P{Is_Sc:  Ital}', "");
Expect(1, 66334, '\P{^Is_Sc:  Ital}', "");
Expect(0, 66303, '\p{Is_Sc:  Ital}', "");
Expect(1, 66303, '\p{^Is_Sc:  Ital}', "");
Expect(1, 66303, '\P{Is_Sc:  Ital}', "");
Expect(0, 66303, '\P{^Is_Sc:  Ital}', "");
Error('\p{Script=-/a/BAMUM}');
Error('\P{Script=-/a/BAMUM}');
Expect(1, 42743, '\p{Script=bamum}', "");
Expect(0, 42743, '\p{^Script=bamum}', "");
Expect(0, 42743, '\P{Script=bamum}', "");
Expect(1, 42743, '\P{^Script=bamum}', "");
Expect(0, 42655, '\p{Script=bamum}', "");
Expect(1, 42655, '\p{^Script=bamum}', "");
Expect(1, 42655, '\P{Script=bamum}', "");
Expect(0, 42655, '\P{^Script=bamum}', "");
Expect(1, 42743, '\p{Script:	_ bamum}', "");
Expect(0, 42743, '\p{^Script:	_ bamum}', "");
Expect(0, 42743, '\P{Script:	_ bamum}', "");
Expect(1, 42743, '\P{^Script:	_ bamum}', "");
Expect(0, 42655, '\p{Script:	_ bamum}', "");
Expect(1, 42655, '\p{^Script:	_ bamum}', "");
Expect(1, 42655, '\P{Script:	_ bamum}', "");
Expect(0, 42655, '\P{^Script:	_ bamum}', "");
Error('\p{Sc: :=Bamu}');
Error('\P{Sc: :=Bamu}');
Expect(1, 42743, '\p{Sc:bamu}', "");
Expect(0, 42743, '\p{^Sc:bamu}', "");
Expect(0, 42743, '\P{Sc:bamu}', "");
Expect(1, 42743, '\P{^Sc:bamu}', "");
Expect(0, 42655, '\p{Sc:bamu}', "");
Expect(1, 42655, '\p{^Sc:bamu}', "");
Expect(1, 42655, '\P{Sc:bamu}', "");
Expect(0, 42655, '\P{^Sc:bamu}', "");
Expect(1, 42743, '\p{Sc=BAMU}', "");
Expect(0, 42743, '\p{^Sc=BAMU}', "");
Expect(0, 42743, '\P{Sc=BAMU}', "");
Expect(1, 42743, '\P{^Sc=BAMU}', "");
Expect(0, 42655, '\p{Sc=BAMU}', "");
Expect(1, 42655, '\p{^Sc=BAMU}', "");
Expect(1, 42655, '\P{Sc=BAMU}', "");
Expect(0, 42655, '\P{^Sc=BAMU}', "");
Error('\p{Is_Script:  :=BAMUM}');
Error('\P{Is_Script:  :=BAMUM}');
Expect(1, 42743, '\p{Is_Script=bamum}', "");
Expect(0, 42743, '\p{^Is_Script=bamum}', "");
Expect(0, 42743, '\P{Is_Script=bamum}', "");
Expect(1, 42743, '\P{^Is_Script=bamum}', "");
Expect(0, 42655, '\p{Is_Script=bamum}', "");
Expect(1, 42655, '\p{^Is_Script=bamum}', "");
Expect(1, 42655, '\P{Is_Script=bamum}', "");
Expect(0, 42655, '\P{^Is_Script=bamum}', "");
Expect(1, 42743, '\p{Is_Script: _-Bamum}', "");
Expect(0, 42743, '\p{^Is_Script: _-Bamum}', "");
Expect(0, 42743, '\P{Is_Script: _-Bamum}', "");
Expect(1, 42743, '\P{^Is_Script: _-Bamum}', "");
Expect(0, 42655, '\p{Is_Script: _-Bamum}', "");
Expect(1, 42655, '\p{^Is_Script: _-Bamum}', "");
Expect(1, 42655, '\P{Is_Script: _-Bamum}', "");
Expect(0, 42655, '\P{^Is_Script: _-Bamum}', "");
Error('\p{Is_Sc=/a/_Bamu}');
Error('\P{Is_Sc=/a/_Bamu}');
Expect(1, 42743, '\p{Is_Sc=bamu}', "");
Expect(0, 42743, '\p{^Is_Sc=bamu}', "");
Expect(0, 42743, '\P{Is_Sc=bamu}', "");
Expect(1, 42743, '\P{^Is_Sc=bamu}', "");
Expect(0, 42655, '\p{Is_Sc=bamu}', "");
Expect(1, 42655, '\p{^Is_Sc=bamu}', "");
Expect(1, 42655, '\P{Is_Sc=bamu}', "");
Expect(0, 42655, '\P{^Is_Sc=bamu}', "");
Expect(1, 42743, '\p{Is_Sc=-bamu}', "");
Expect(0, 42743, '\p{^Is_Sc=-bamu}', "");
Expect(0, 42743, '\P{Is_Sc=-bamu}', "");
Expect(1, 42743, '\P{^Is_Sc=-bamu}', "");
Expect(0, 42655, '\p{Is_Sc=-bamu}', "");
Expect(1, 42655, '\p{^Is_Sc=-bamu}', "");
Expect(1, 42655, '\P{Is_Sc=-bamu}', "");
Expect(0, 42655, '\P{^Is_Sc=-bamu}', "");
Error('\p{Script=:=--BRAHMI}');
Error('\P{Script=:=--BRAHMI}');
Expect(1, 69709, '\p{Script=brahmi}', "");
Expect(0, 69709, '\p{^Script=brahmi}', "");
Expect(0, 69709, '\P{Script=brahmi}', "");
Expect(1, 69709, '\P{^Script=brahmi}', "");
Expect(0, 69631, '\p{Script=brahmi}', "");
Expect(1, 69631, '\p{^Script=brahmi}', "");
Expect(1, 69631, '\P{Script=brahmi}', "");
Expect(0, 69631, '\P{^Script=brahmi}', "");
Expect(1, 69709, '\p{Script=	-BRAHMI}', "");
Expect(0, 69709, '\p{^Script=	-BRAHMI}', "");
Expect(0, 69709, '\P{Script=	-BRAHMI}', "");
Expect(1, 69709, '\P{^Script=	-BRAHMI}', "");
Expect(0, 69631, '\p{Script=	-BRAHMI}', "");
Expect(1, 69631, '\p{^Script=	-BRAHMI}', "");
Expect(1, 69631, '\P{Script=	-BRAHMI}', "");
Expect(0, 69631, '\P{^Script=	-BRAHMI}', "");
Error('\p{Sc=-	brah/a/}');
Error('\P{Sc=-	brah/a/}');
Expect(1, 69709, '\p{Sc=brah}', "");
Expect(0, 69709, '\p{^Sc=brah}', "");
Expect(0, 69709, '\P{Sc=brah}', "");
Expect(1, 69709, '\P{^Sc=brah}', "");
Expect(0, 69631, '\p{Sc=brah}', "");
Expect(1, 69631, '\p{^Sc=brah}', "");
Expect(1, 69631, '\P{Sc=brah}', "");
Expect(0, 69631, '\P{^Sc=brah}', "");
Expect(1, 69709, '\p{Sc=--brah}', "");
Expect(0, 69709, '\p{^Sc=--brah}', "");
Expect(0, 69709, '\P{Sc=--brah}', "");
Expect(1, 69709, '\P{^Sc=--brah}', "");
Expect(0, 69631, '\p{Sc=--brah}', "");
Expect(1, 69631, '\p{^Sc=--brah}', "");
Expect(1, 69631, '\P{Sc=--brah}', "");
Expect(0, 69631, '\P{^Sc=--brah}', "");
Error('\p{Is_Script=_:=Brahmi}');
Error('\P{Is_Script=_:=Brahmi}');
Expect(1, 69709, '\p{Is_Script=brahmi}', "");
Expect(0, 69709, '\p{^Is_Script=brahmi}', "");
Expect(0, 69709, '\P{Is_Script=brahmi}', "");
Expect(1, 69709, '\P{^Is_Script=brahmi}', "");
Expect(0, 69631, '\p{Is_Script=brahmi}', "");
Expect(1, 69631, '\p{^Is_Script=brahmi}', "");
Expect(1, 69631, '\P{Is_Script=brahmi}', "");
Expect(0, 69631, '\P{^Is_Script=brahmi}', "");
Expect(1, 69709, '\p{Is_Script=-Brahmi}', "");
Expect(0, 69709, '\p{^Is_Script=-Brahmi}', "");
Expect(0, 69709, '\P{Is_Script=-Brahmi}', "");
Expect(1, 69709, '\P{^Is_Script=-Brahmi}', "");
Expect(0, 69631, '\p{Is_Script=-Brahmi}', "");
Expect(1, 69631, '\p{^Is_Script=-Brahmi}', "");
Expect(1, 69631, '\P{Is_Script=-Brahmi}', "");
Expect(0, 69631, '\P{^Is_Script=-Brahmi}', "");
Error('\p{Is_Sc=-BRAH:=}');
Error('\P{Is_Sc=-BRAH:=}');
Expect(1, 69709, '\p{Is_Sc:   brah}', "");
Expect(0, 69709, '\p{^Is_Sc:   brah}', "");
Expect(0, 69709, '\P{Is_Sc:   brah}', "");
Expect(1, 69709, '\P{^Is_Sc:   brah}', "");
Expect(0, 69631, '\p{Is_Sc:   brah}', "");
Expect(1, 69631, '\p{^Is_Sc:   brah}', "");
Expect(1, 69631, '\P{Is_Sc:   brah}', "");
Expect(0, 69631, '\P{^Is_Sc:   brah}', "");
Expect(1, 69709, '\p{Is_Sc:   - BRAH}', "");
Expect(0, 69709, '\p{^Is_Sc:   - BRAH}', "");
Expect(0, 69709, '\P{Is_Sc:   - BRAH}', "");
Expect(1, 69709, '\P{^Is_Sc:   - BRAH}', "");
Expect(0, 69631, '\p{Is_Sc:   - BRAH}', "");
Expect(1, 69631, '\p{^Is_Sc:   - BRAH}', "");
Expect(1, 69631, '\P{Is_Sc:   - BRAH}', "");
Expect(0, 69631, '\P{^Is_Sc:   - BRAH}', "");
Error('\p{Script=_-vai:=}');
Error('\P{Script=_-vai:=}');
Expect(1, 42539, '\p{Script=vai}', "");
Expect(0, 42539, '\p{^Script=vai}', "");
Expect(0, 42539, '\P{Script=vai}', "");
Expect(1, 42539, '\P{^Script=vai}', "");
Expect(0, 42239, '\p{Script=vai}', "");
Expect(1, 42239, '\p{^Script=vai}', "");
Expect(1, 42239, '\P{Script=vai}', "");
Expect(0, 42239, '\P{^Script=vai}', "");
Expect(1, 42539, '\p{Script= Vai}', "");
Expect(0, 42539, '\p{^Script= Vai}', "");
Expect(0, 42539, '\P{Script= Vai}', "");
Expect(1, 42539, '\P{^Script= Vai}', "");
Expect(0, 42239, '\p{Script= Vai}', "");
Expect(1, 42239, '\p{^Script= Vai}', "");
Expect(1, 42239, '\P{Script= Vai}', "");
Expect(0, 42239, '\P{^Script= Vai}', "");
Error('\p{Sc=/a/- Vaii}');
Error('\P{Sc=/a/- Vaii}');
Expect(1, 42539, '\p{Sc=vaii}', "");
Expect(0, 42539, '\p{^Sc=vaii}', "");
Expect(0, 42539, '\P{Sc=vaii}', "");
Expect(1, 42539, '\P{^Sc=vaii}', "");
Expect(0, 42239, '\p{Sc=vaii}', "");
Expect(1, 42239, '\p{^Sc=vaii}', "");
Expect(1, 42239, '\P{Sc=vaii}', "");
Expect(0, 42239, '\P{^Sc=vaii}', "");
Expect(1, 42539, '\p{Sc=	Vaii}', "");
Expect(0, 42539, '\p{^Sc=	Vaii}', "");
Expect(0, 42539, '\P{Sc=	Vaii}', "");
Expect(1, 42539, '\P{^Sc=	Vaii}', "");
Expect(0, 42239, '\p{Sc=	Vaii}', "");
Expect(1, 42239, '\p{^Sc=	Vaii}', "");
Expect(1, 42239, '\P{Sc=	Vaii}', "");
Expect(0, 42239, '\P{^Sc=	Vaii}', "");
Error('\p{Is_Script:   -Vai/a/}');
Error('\P{Is_Script:   -Vai/a/}');
Expect(1, 42539, '\p{Is_Script:	vai}', "");
Expect(0, 42539, '\p{^Is_Script:	vai}', "");
Expect(0, 42539, '\P{Is_Script:	vai}', "");
Expect(1, 42539, '\P{^Is_Script:	vai}', "");
Expect(0, 42239, '\p{Is_Script:	vai}', "");
Expect(1, 42239, '\p{^Is_Script:	vai}', "");
Expect(1, 42239, '\P{Is_Script:	vai}', "");
Expect(0, 42239, '\P{^Is_Script:	vai}', "");
Expect(1, 42539, '\p{Is_Script=_Vai}', "");
Expect(0, 42539, '\p{^Is_Script=_Vai}', "");
Expect(0, 42539, '\P{Is_Script=_Vai}', "");
Expect(1, 42539, '\P{^Is_Script=_Vai}', "");
Expect(0, 42239, '\p{Is_Script=_Vai}', "");
Expect(1, 42239, '\p{^Is_Script=_Vai}', "");
Expect(1, 42239, '\P{Is_Script=_Vai}', "");
Expect(0, 42239, '\P{^Is_Script=_Vai}', "");
Error('\p{Is_Sc=/a/	Vaii}');
Error('\P{Is_Sc=/a/	Vaii}');
Expect(1, 42539, '\p{Is_Sc=vaii}', "");
Expect(0, 42539, '\p{^Is_Sc=vaii}', "");
Expect(0, 42539, '\P{Is_Sc=vaii}', "");
Expect(1, 42539, '\P{^Is_Sc=vaii}', "");
Expect(0, 42239, '\p{Is_Sc=vaii}', "");
Expect(1, 42239, '\p{^Is_Sc=vaii}', "");
Expect(1, 42239, '\P{Is_Sc=vaii}', "");
Expect(0, 42239, '\P{^Is_Sc=vaii}', "");
Expect(1, 42539, '\p{Is_Sc:	_-Vaii}', "");
Expect(0, 42539, '\p{^Is_Sc:	_-Vaii}', "");
Expect(0, 42539, '\P{Is_Sc:	_-Vaii}', "");
Expect(1, 42539, '\P{^Is_Sc:	_-Vaii}', "");
Expect(0, 42239, '\p{Is_Sc:	_-Vaii}', "");
Expect(1, 42239, '\p{^Is_Sc:	_-Vaii}', "");
Expect(1, 42239, '\P{Is_Sc:	_-Vaii}', "");
Expect(0, 42239, '\P{^Is_Sc:	_-Vaii}', "");
Error('\p{Script=:=	INSCRIPTIONAL PARTHIAN}');
Error('\P{Script=:=	INSCRIPTIONAL PARTHIAN}');
Expect(1, 68437, '\p{Script=inscriptionalparthian}', "");
Expect(0, 68437, '\p{^Script=inscriptionalparthian}', "");
Expect(0, 68437, '\P{Script=inscriptionalparthian}', "");
Expect(1, 68437, '\P{^Script=inscriptionalparthian}', "");
Expect(0, 68415, '\p{Script=inscriptionalparthian}', "");
Expect(1, 68415, '\p{^Script=inscriptionalparthian}', "");
Expect(1, 68415, '\P{Script=inscriptionalparthian}', "");
Expect(0, 68415, '\P{^Script=inscriptionalparthian}', "");
Expect(1, 68437, '\p{Script=-_INSCRIPTIONAL-Parthian}', "");
Expect(0, 68437, '\p{^Script=-_INSCRIPTIONAL-Parthian}', "");
Expect(0, 68437, '\P{Script=-_INSCRIPTIONAL-Parthian}', "");
Expect(1, 68437, '\P{^Script=-_INSCRIPTIONAL-Parthian}', "");
Expect(0, 68415, '\p{Script=-_INSCRIPTIONAL-Parthian}', "");
Expect(1, 68415, '\p{^Script=-_INSCRIPTIONAL-Parthian}', "");
Expect(1, 68415, '\P{Script=-_INSCRIPTIONAL-Parthian}', "");
Expect(0, 68415, '\P{^Script=-_INSCRIPTIONAL-Parthian}', "");
Error('\p{Sc=:=-prti}');
Error('\P{Sc=:=-prti}');
Expect(1, 68437, '\p{Sc:   prti}', "");
Expect(0, 68437, '\p{^Sc:   prti}', "");
Expect(0, 68437, '\P{Sc:   prti}', "");
Expect(1, 68437, '\P{^Sc:   prti}', "");
Expect(0, 68415, '\p{Sc:   prti}', "");
Expect(1, 68415, '\p{^Sc:   prti}', "");
Expect(1, 68415, '\P{Sc:   prti}', "");
Expect(0, 68415, '\P{^Sc:   prti}', "");
Expect(1, 68437, '\p{Sc= prti}', "");
Expect(0, 68437, '\p{^Sc= prti}', "");
Expect(0, 68437, '\P{Sc= prti}', "");
Expect(1, 68437, '\P{^Sc= prti}', "");
Expect(0, 68415, '\p{Sc= prti}', "");
Expect(1, 68415, '\p{^Sc= prti}', "");
Expect(1, 68415, '\P{Sc= prti}', "");
Expect(0, 68415, '\P{^Sc= prti}', "");
Error('\p{Is_Script=/a/Inscriptional Parthian}');
Error('\P{Is_Script=/a/Inscriptional Parthian}');
Expect(1, 68437, '\p{Is_Script=inscriptionalparthian}', "");
Expect(0, 68437, '\p{^Is_Script=inscriptionalparthian}', "");
Expect(0, 68437, '\P{Is_Script=inscriptionalparthian}', "");
Expect(1, 68437, '\P{^Is_Script=inscriptionalparthian}', "");
Expect(0, 68415, '\p{Is_Script=inscriptionalparthian}', "");
Expect(1, 68415, '\p{^Is_Script=inscriptionalparthian}', "");
Expect(1, 68415, '\P{Is_Script=inscriptionalparthian}', "");
Expect(0, 68415, '\P{^Is_Script=inscriptionalparthian}', "");
Expect(1, 68437, '\p{Is_Script=_-Inscriptional	PARTHIAN}', "");
Expect(0, 68437, '\p{^Is_Script=_-Inscriptional	PARTHIAN}', "");
Expect(0, 68437, '\P{Is_Script=_-Inscriptional	PARTHIAN}', "");
Expect(1, 68437, '\P{^Is_Script=_-Inscriptional	PARTHIAN}', "");
Expect(0, 68415, '\p{Is_Script=_-Inscriptional	PARTHIAN}', "");
Expect(1, 68415, '\p{^Is_Script=_-Inscriptional	PARTHIAN}', "");
Expect(1, 68415, '\P{Is_Script=_-Inscriptional	PARTHIAN}', "");
Expect(0, 68415, '\P{^Is_Script=_-Inscriptional	PARTHIAN}', "");
Error('\p{Is_Sc=/a/prti}');
Error('\P{Is_Sc=/a/prti}');
Expect(1, 68437, '\p{Is_Sc=prti}', "");
Expect(0, 68437, '\p{^Is_Sc=prti}', "");
Expect(0, 68437, '\P{Is_Sc=prti}', "");
Expect(1, 68437, '\P{^Is_Sc=prti}', "");
Expect(0, 68415, '\p{Is_Sc=prti}', "");
Expect(1, 68415, '\p{^Is_Sc=prti}', "");
Expect(1, 68415, '\P{Is_Sc=prti}', "");
Expect(0, 68415, '\P{^Is_Sc=prti}', "");
Expect(1, 68437, '\p{Is_Sc= -Prti}', "");
Expect(0, 68437, '\p{^Is_Sc= -Prti}', "");
Expect(0, 68437, '\P{Is_Sc= -Prti}', "");
Expect(1, 68437, '\P{^Is_Sc= -Prti}', "");
Expect(0, 68415, '\p{Is_Sc= -Prti}', "");
Expect(1, 68415, '\p{^Is_Sc= -Prti}', "");
Expect(1, 68415, '\P{Is_Sc= -Prti}', "");
Expect(0, 68415, '\P{^Is_Sc= -Prti}', "");
Error('\p{Script= Runic/a/}');
Error('\P{Script= Runic/a/}');
Expect(1, 5866, '\p{Script=runic}', "");
Expect(0, 5866, '\p{^Script=runic}', "");
Expect(0, 5866, '\P{Script=runic}', "");
Expect(1, 5866, '\P{^Script=runic}', "");
Expect(0, 5791, '\p{Script=runic}', "");
Expect(1, 5791, '\p{^Script=runic}', "");
Expect(1, 5791, '\P{Script=runic}', "");
Expect(0, 5791, '\P{^Script=runic}', "");
Expect(1, 5866, '\p{Script= -runic}', "");
Expect(0, 5866, '\p{^Script= -runic}', "");
Expect(0, 5866, '\P{Script= -runic}', "");
Expect(1, 5866, '\P{^Script= -runic}', "");
Expect(0, 5791, '\p{Script= -runic}', "");
Expect(1, 5791, '\p{^Script= -runic}', "");
Expect(1, 5791, '\P{Script= -runic}', "");
Expect(0, 5791, '\P{^Script= -runic}', "");
Error('\p{Sc=RUNR:=}');
Error('\P{Sc=RUNR:=}');
Expect(1, 5866, '\p{Sc:runr}', "");
Expect(0, 5866, '\p{^Sc:runr}', "");
Expect(0, 5866, '\P{Sc:runr}', "");
Expect(1, 5866, '\P{^Sc:runr}', "");
Expect(0, 5791, '\p{Sc:runr}', "");
Expect(1, 5791, '\p{^Sc:runr}', "");
Expect(1, 5791, '\P{Sc:runr}', "");
Expect(0, 5791, '\P{^Sc:runr}', "");
Expect(1, 5866, '\p{Sc=-runr}', "");
Expect(0, 5866, '\p{^Sc=-runr}', "");
Expect(0, 5866, '\P{Sc=-runr}', "");
Expect(1, 5866, '\P{^Sc=-runr}', "");
Expect(0, 5791, '\p{Sc=-runr}', "");
Expect(1, 5791, '\p{^Sc=-runr}', "");
Expect(1, 5791, '\P{Sc=-runr}', "");
Expect(0, 5791, '\P{^Sc=-runr}', "");
Error('\p{Is_Script=	/a/runic}');
Error('\P{Is_Script=	/a/runic}');
Expect(1, 5866, '\p{Is_Script=runic}', "");
Expect(0, 5866, '\p{^Is_Script=runic}', "");
Expect(0, 5866, '\P{Is_Script=runic}', "");
Expect(1, 5866, '\P{^Is_Script=runic}', "");
Expect(0, 5791, '\p{Is_Script=runic}', "");
Expect(1, 5791, '\p{^Is_Script=runic}', "");
Expect(1, 5791, '\P{Is_Script=runic}', "");
Expect(0, 5791, '\P{^Is_Script=runic}', "");
Expect(1, 5866, '\p{Is_Script:- runic}', "");
Expect(0, 5866, '\p{^Is_Script:- runic}', "");
Expect(0, 5866, '\P{Is_Script:- runic}', "");
Expect(1, 5866, '\P{^Is_Script:- runic}', "");
Expect(0, 5791, '\p{Is_Script:- runic}', "");
Expect(1, 5791, '\p{^Is_Script:- runic}', "");
Expect(1, 5791, '\P{Is_Script:- runic}', "");
Expect(0, 5791, '\P{^Is_Script:- runic}', "");
Error('\p{Is_Sc=-:=Runr}');
Error('\P{Is_Sc=-:=Runr}');
Expect(1, 5866, '\p{Is_Sc=runr}', "");
Expect(0, 5866, '\p{^Is_Sc=runr}', "");
Expect(0, 5866, '\P{Is_Sc=runr}', "");
Expect(1, 5866, '\P{^Is_Sc=runr}', "");
Expect(0, 5791, '\p{Is_Sc=runr}', "");
Expect(1, 5791, '\p{^Is_Sc=runr}', "");
Expect(1, 5791, '\P{Is_Sc=runr}', "");
Expect(0, 5791, '\P{^Is_Sc=runr}', "");
Expect(1, 5866, '\p{Is_Sc=	Runr}', "");
Expect(0, 5866, '\p{^Is_Sc=	Runr}', "");
Expect(0, 5866, '\P{Is_Sc=	Runr}', "");
Expect(1, 5866, '\P{^Is_Sc=	Runr}', "");
Expect(0, 5791, '\p{Is_Sc=	Runr}', "");
Expect(1, 5791, '\p{^Is_Sc=	Runr}', "");
Expect(1, 5791, '\P{Is_Sc=	Runr}', "");
Expect(0, 5791, '\P{^Is_Sc=	Runr}', "");
Error('\p{Script= 	cherokee:=}');
Error('\P{Script= 	cherokee:=}');
Expect(1, 5108, '\p{Script=cherokee}', "");
Expect(0, 5108, '\p{^Script=cherokee}', "");
Expect(0, 5108, '\P{Script=cherokee}', "");
Expect(1, 5108, '\P{^Script=cherokee}', "");
Expect(0, 5023, '\p{Script=cherokee}', "");
Expect(1, 5023, '\p{^Script=cherokee}', "");
Expect(1, 5023, '\P{Script=cherokee}', "");
Expect(0, 5023, '\P{^Script=cherokee}', "");
Expect(1, 5108, '\p{Script= Cherokee}', "");
Expect(0, 5108, '\p{^Script= Cherokee}', "");
Expect(0, 5108, '\P{Script= Cherokee}', "");
Expect(1, 5108, '\P{^Script= Cherokee}', "");
Expect(0, 5023, '\p{Script= Cherokee}', "");
Expect(1, 5023, '\p{^Script= Cherokee}', "");
Expect(1, 5023, '\P{Script= Cherokee}', "");
Expect(0, 5023, '\P{^Script= Cherokee}', "");
Error('\p{Sc=/a/_ Cher}');
Error('\P{Sc=/a/_ Cher}');
Expect(1, 5108, '\p{Sc=cher}', "");
Expect(0, 5108, '\p{^Sc=cher}', "");
Expect(0, 5108, '\P{Sc=cher}', "");
Expect(1, 5108, '\P{^Sc=cher}', "");
Expect(0, 5023, '\p{Sc=cher}', "");
Expect(1, 5023, '\p{^Sc=cher}', "");
Expect(1, 5023, '\P{Sc=cher}', "");
Expect(0, 5023, '\P{^Sc=cher}', "");
Expect(1, 5108, '\p{Sc=	Cher}', "");
Expect(0, 5108, '\p{^Sc=	Cher}', "");
Expect(0, 5108, '\P{Sc=	Cher}', "");
Expect(1, 5108, '\P{^Sc=	Cher}', "");
Expect(0, 5023, '\p{Sc=	Cher}', "");
Expect(1, 5023, '\p{^Sc=	Cher}', "");
Expect(1, 5023, '\P{Sc=	Cher}', "");
Expect(0, 5023, '\P{^Sc=	Cher}', "");
Error('\p{Is_Script=-	CHEROKEE:=}');
Error('\P{Is_Script=-	CHEROKEE:=}');
Expect(1, 5108, '\p{Is_Script=cherokee}', "");
Expect(0, 5108, '\p{^Is_Script=cherokee}', "");
Expect(0, 5108, '\P{Is_Script=cherokee}', "");
Expect(1, 5108, '\P{^Is_Script=cherokee}', "");
Expect(0, 5023, '\p{Is_Script=cherokee}', "");
Expect(1, 5023, '\p{^Is_Script=cherokee}', "");
Expect(1, 5023, '\P{Is_Script=cherokee}', "");
Expect(0, 5023, '\P{^Is_Script=cherokee}', "");
Expect(1, 5108, '\p{Is_Script=_cherokee}', "");
Expect(0, 5108, '\p{^Is_Script=_cherokee}', "");
Expect(0, 5108, '\P{Is_Script=_cherokee}', "");
Expect(1, 5108, '\P{^Is_Script=_cherokee}', "");
Expect(0, 5023, '\p{Is_Script=_cherokee}', "");
Expect(1, 5023, '\p{^Is_Script=_cherokee}', "");
Expect(1, 5023, '\P{Is_Script=_cherokee}', "");
Expect(0, 5023, '\P{^Is_Script=_cherokee}', "");
Error('\p{Is_Sc:	/a/_-CHER}');
Error('\P{Is_Sc:	/a/_-CHER}');
Expect(1, 5108, '\p{Is_Sc=cher}', "");
Expect(0, 5108, '\p{^Is_Sc=cher}', "");
Expect(0, 5108, '\P{Is_Sc=cher}', "");
Expect(1, 5108, '\P{^Is_Sc=cher}', "");
Expect(0, 5023, '\p{Is_Sc=cher}', "");
Expect(1, 5023, '\p{^Is_Sc=cher}', "");
Expect(1, 5023, '\P{Is_Sc=cher}', "");
Expect(0, 5023, '\P{^Is_Sc=cher}', "");
Expect(1, 5108, '\p{Is_Sc=-_Cher}', "");
Expect(0, 5108, '\p{^Is_Sc=-_Cher}', "");
Expect(0, 5108, '\P{Is_Sc=-_Cher}', "");
Expect(1, 5108, '\P{^Is_Sc=-_Cher}', "");
Expect(0, 5023, '\p{Is_Sc=-_Cher}', "");
Expect(1, 5023, '\p{^Is_Sc=-_Cher}', "");
Expect(1, 5023, '\P{Is_Sc=-_Cher}', "");
Expect(0, 5023, '\P{^Is_Sc=-_Cher}', "");
Error('\p{Script=:=Ol	chiki}');
Error('\P{Script=:=Ol	chiki}');
Expect(1, 7295, '\p{Script=olchiki}', "");
Expect(0, 7295, '\p{^Script=olchiki}', "");
Expect(0, 7295, '\P{Script=olchiki}', "");
Expect(1, 7295, '\P{^Script=olchiki}', "");
Expect(0, 7247, '\p{Script=olchiki}', "");
Expect(1, 7247, '\p{^Script=olchiki}', "");
Expect(1, 7247, '\P{Script=olchiki}', "");
Expect(0, 7247, '\P{^Script=olchiki}', "");
Expect(1, 7295, '\p{Script=_ol CHIKI}', "");
Expect(0, 7295, '\p{^Script=_ol CHIKI}', "");
Expect(0, 7295, '\P{Script=_ol CHIKI}', "");
Expect(1, 7295, '\P{^Script=_ol CHIKI}', "");
Expect(0, 7247, '\p{Script=_ol CHIKI}', "");
Expect(1, 7247, '\p{^Script=_ol CHIKI}', "");
Expect(1, 7247, '\P{Script=_ol CHIKI}', "");
Expect(0, 7247, '\P{^Script=_ol CHIKI}', "");
Error('\p{Sc= -Olck:=}');
Error('\P{Sc= -Olck:=}');
Expect(1, 7295, '\p{Sc=olck}', "");
Expect(0, 7295, '\p{^Sc=olck}', "");
Expect(0, 7295, '\P{Sc=olck}', "");
Expect(1, 7295, '\P{^Sc=olck}', "");
Expect(0, 7247, '\p{Sc=olck}', "");
Expect(1, 7247, '\p{^Sc=olck}', "");
Expect(1, 7247, '\P{Sc=olck}', "");
Expect(0, 7247, '\P{^Sc=olck}', "");
Expect(1, 7295, '\p{Sc=-Olck}', "");
Expect(0, 7295, '\p{^Sc=-Olck}', "");
Expect(0, 7295, '\P{Sc=-Olck}', "");
Expect(1, 7295, '\P{^Sc=-Olck}', "");
Expect(0, 7247, '\p{Sc=-Olck}', "");
Expect(1, 7247, '\p{^Sc=-Olck}', "");
Expect(1, 7247, '\P{Sc=-Olck}', "");
Expect(0, 7247, '\P{^Sc=-Olck}', "");
Error('\p{Is_Script=_/a/ol CHIKI}');
Error('\P{Is_Script=_/a/ol CHIKI}');
Expect(1, 7295, '\p{Is_Script=olchiki}', "");
Expect(0, 7295, '\p{^Is_Script=olchiki}', "");
Expect(0, 7295, '\P{Is_Script=olchiki}', "");
Expect(1, 7295, '\P{^Is_Script=olchiki}', "");
Expect(0, 7247, '\p{Is_Script=olchiki}', "");
Expect(1, 7247, '\p{^Is_Script=olchiki}', "");
Expect(1, 7247, '\P{Is_Script=olchiki}', "");
Expect(0, 7247, '\P{^Is_Script=olchiki}', "");
Expect(1, 7295, '\p{Is_Script=	_ol	CHIKI}', "");
Expect(0, 7295, '\p{^Is_Script=	_ol	CHIKI}', "");
Expect(0, 7295, '\P{Is_Script=	_ol	CHIKI}', "");
Expect(1, 7295, '\P{^Is_Script=	_ol	CHIKI}', "");
Expect(0, 7247, '\p{Is_Script=	_ol	CHIKI}', "");
Expect(1, 7247, '\p{^Is_Script=	_ol	CHIKI}', "");
Expect(1, 7247, '\P{Is_Script=	_ol	CHIKI}', "");
Expect(0, 7247, '\P{^Is_Script=	_ol	CHIKI}', "");
Error('\p{Is_Sc= 	Olck:=}');
Error('\P{Is_Sc= 	Olck:=}');
Expect(1, 7295, '\p{Is_Sc:	olck}', "");
Expect(0, 7295, '\p{^Is_Sc:	olck}', "");
Expect(0, 7295, '\P{Is_Sc:	olck}', "");
Expect(1, 7295, '\P{^Is_Sc:	olck}', "");
Expect(0, 7247, '\p{Is_Sc:	olck}', "");
Expect(1, 7247, '\p{^Is_Sc:	olck}', "");
Expect(1, 7247, '\P{Is_Sc:	olck}', "");
Expect(0, 7247, '\P{^Is_Sc:	olck}', "");
Expect(1, 7295, '\p{Is_Sc=	_Olck}', "");
Expect(0, 7295, '\p{^Is_Sc=	_Olck}', "");
Expect(0, 7295, '\P{Is_Sc=	_Olck}', "");
Expect(1, 7295, '\P{^Is_Sc=	_Olck}', "");
Expect(0, 7247, '\p{Is_Sc=	_Olck}', "");
Expect(1, 7247, '\p{^Is_Sc=	_Olck}', "");
Expect(1, 7247, '\P{Is_Sc=	_Olck}', "");
Expect(0, 7247, '\P{^Is_Sc=	_Olck}', "");
Error('\p{Script=- ugaritic:=}');
Error('\P{Script=- ugaritic:=}');
Expect(1, 66461, '\p{Script=ugaritic}', "");
Expect(0, 66461, '\p{^Script=ugaritic}', "");
Expect(0, 66461, '\P{Script=ugaritic}', "");
Expect(1, 66461, '\P{^Script=ugaritic}', "");
Expect(0, 66431, '\p{Script=ugaritic}', "");
Expect(1, 66431, '\p{^Script=ugaritic}', "");
Expect(1, 66431, '\P{Script=ugaritic}', "");
Expect(0, 66431, '\P{^Script=ugaritic}', "");
Expect(1, 66461, '\p{Script=-_UGARITIC}', "");
Expect(0, 66461, '\p{^Script=-_UGARITIC}', "");
Expect(0, 66461, '\P{Script=-_UGARITIC}', "");
Expect(1, 66461, '\P{^Script=-_UGARITIC}', "");
Expect(0, 66431, '\p{Script=-_UGARITIC}', "");
Expect(1, 66431, '\p{^Script=-_UGARITIC}', "");
Expect(1, 66431, '\P{Script=-_UGARITIC}', "");
Expect(0, 66431, '\P{^Script=-_UGARITIC}', "");
Error('\p{Sc= /a/ugar}');
Error('\P{Sc= /a/ugar}');
Expect(1, 66461, '\p{Sc=ugar}', "");
Expect(0, 66461, '\p{^Sc=ugar}', "");
Expect(0, 66461, '\P{Sc=ugar}', "");
Expect(1, 66461, '\P{^Sc=ugar}', "");
Expect(0, 66431, '\p{Sc=ugar}', "");
Expect(1, 66431, '\p{^Sc=ugar}', "");
Expect(1, 66431, '\P{Sc=ugar}', "");
Expect(0, 66431, '\P{^Sc=ugar}', "");
Expect(1, 66461, '\p{Sc:_-Ugar}', "");
Expect(0, 66461, '\p{^Sc:_-Ugar}', "");
Expect(0, 66461, '\P{Sc:_-Ugar}', "");
Expect(1, 66461, '\P{^Sc:_-Ugar}', "");
Expect(0, 66431, '\p{Sc:_-Ugar}', "");
Expect(1, 66431, '\p{^Sc:_-Ugar}', "");
Expect(1, 66431, '\P{Sc:_-Ugar}', "");
Expect(0, 66431, '\P{^Sc:_-Ugar}', "");
Error('\p{Is_Script=-_ugaritic:=}');
Error('\P{Is_Script=-_ugaritic:=}');
Expect(1, 66461, '\p{Is_Script=ugaritic}', "");
Expect(0, 66461, '\p{^Is_Script=ugaritic}', "");
Expect(0, 66461, '\P{Is_Script=ugaritic}', "");
Expect(1, 66461, '\P{^Is_Script=ugaritic}', "");
Expect(0, 66431, '\p{Is_Script=ugaritic}', "");
Expect(1, 66431, '\p{^Is_Script=ugaritic}', "");
Expect(1, 66431, '\P{Is_Script=ugaritic}', "");
Expect(0, 66431, '\P{^Is_Script=ugaritic}', "");
Expect(1, 66461, '\p{Is_Script=--ugaritic}', "");
Expect(0, 66461, '\p{^Is_Script=--ugaritic}', "");
Expect(0, 66461, '\P{Is_Script=--ugaritic}', "");
Expect(1, 66461, '\P{^Is_Script=--ugaritic}', "");
Expect(0, 66431, '\p{Is_Script=--ugaritic}', "");
Expect(1, 66431, '\p{^Is_Script=--ugaritic}', "");
Expect(1, 66431, '\P{Is_Script=--ugaritic}', "");
Expect(0, 66431, '\P{^Is_Script=--ugaritic}', "");
Error('\p{Is_Sc=/a/ ugar}');
Error('\P{Is_Sc=/a/ ugar}');
Expect(1, 66461, '\p{Is_Sc:   ugar}', "");
Expect(0, 66461, '\p{^Is_Sc:   ugar}', "");
Expect(0, 66461, '\P{Is_Sc:   ugar}', "");
Expect(1, 66461, '\P{^Is_Sc:   ugar}', "");
Expect(0, 66431, '\p{Is_Sc:   ugar}', "");
Expect(1, 66431, '\p{^Is_Sc:   ugar}', "");
Expect(1, 66431, '\P{Is_Sc:   ugar}', "");
Expect(0, 66431, '\P{^Is_Sc:   ugar}', "");
Expect(1, 66461, '\p{Is_Sc=  Ugar}', "");
Expect(0, 66461, '\p{^Is_Sc=  Ugar}', "");
Expect(0, 66461, '\P{Is_Sc=  Ugar}', "");
Expect(1, 66461, '\P{^Is_Sc=  Ugar}', "");
Expect(0, 66431, '\p{Is_Sc=  Ugar}', "");
Expect(1, 66431, '\p{^Is_Sc=  Ugar}', "");
Expect(1, 66431, '\P{Is_Sc=  Ugar}', "");
Expect(0, 66431, '\P{^Is_Sc=  Ugar}', "");
Error('\p{Script=-Phags-PA/a/}');
Error('\P{Script=-Phags-PA/a/}');
Expect(1, 43127, '\p{Script=phagspa}', "");
Expect(0, 43127, '\p{^Script=phagspa}', "");
Expect(0, 43127, '\P{Script=phagspa}', "");
Expect(1, 43127, '\P{^Script=phagspa}', "");
Expect(0, 43071, '\p{Script=phagspa}', "");
Expect(1, 43071, '\p{^Script=phagspa}', "");
Expect(1, 43071, '\P{Script=phagspa}', "");
Expect(0, 43071, '\P{^Script=phagspa}', "");
Expect(1, 43127, '\p{Script= -PHAGSPa}', "");
Expect(0, 43127, '\p{^Script= -PHAGSPa}', "");
Expect(0, 43127, '\P{Script= -PHAGSPa}', "");
Expect(1, 43127, '\P{^Script= -PHAGSPa}', "");
Expect(0, 43071, '\p{Script= -PHAGSPa}', "");
Expect(1, 43071, '\p{^Script= -PHAGSPa}', "");
Expect(1, 43071, '\P{Script= -PHAGSPa}', "");
Expect(0, 43071, '\P{^Script= -PHAGSPa}', "");
Error('\p{Sc= :=Phag}');
Error('\P{Sc= :=Phag}');
Expect(1, 43127, '\p{Sc=phag}', "");
Expect(0, 43127, '\p{^Sc=phag}', "");
Expect(0, 43127, '\P{Sc=phag}', "");
Expect(1, 43127, '\P{^Sc=phag}', "");
Expect(0, 43071, '\p{Sc=phag}', "");
Expect(1, 43071, '\p{^Sc=phag}', "");
Expect(1, 43071, '\P{Sc=phag}', "");
Expect(0, 43071, '\P{^Sc=phag}', "");
Expect(1, 43127, '\p{Sc=__PHAG}', "");
Expect(0, 43127, '\p{^Sc=__PHAG}', "");
Expect(0, 43127, '\P{Sc=__PHAG}', "");
Expect(1, 43127, '\P{^Sc=__PHAG}', "");
Expect(0, 43071, '\p{Sc=__PHAG}', "");
Expect(1, 43071, '\p{^Sc=__PHAG}', "");
Expect(1, 43071, '\P{Sc=__PHAG}', "");
Expect(0, 43071, '\P{^Sc=__PHAG}', "");
Error('\p{Is_Script=	:=Phags	PA}');
Error('\P{Is_Script=	:=Phags	PA}');
Expect(1, 43127, '\p{Is_Script: phagspa}', "");
Expect(0, 43127, '\p{^Is_Script: phagspa}', "");
Expect(0, 43127, '\P{Is_Script: phagspa}', "");
Expect(1, 43127, '\P{^Is_Script: phagspa}', "");
Expect(0, 43071, '\p{Is_Script: phagspa}', "");
Expect(1, 43071, '\p{^Is_Script: phagspa}', "");
Expect(1, 43071, '\P{Is_Script: phagspa}', "");
Expect(0, 43071, '\P{^Is_Script: phagspa}', "");
Expect(1, 43127, '\p{Is_Script=		phags_pa}', "");
Expect(0, 43127, '\p{^Is_Script=		phags_pa}', "");
Expect(0, 43127, '\P{Is_Script=		phags_pa}', "");
Expect(1, 43127, '\P{^Is_Script=		phags_pa}', "");
Expect(0, 43071, '\p{Is_Script=		phags_pa}', "");
Expect(1, 43071, '\p{^Is_Script=		phags_pa}', "");
Expect(1, 43071, '\P{Is_Script=		phags_pa}', "");
Expect(0, 43071, '\P{^Is_Script=		phags_pa}', "");
Error('\p{Is_Sc=__Phag:=}');
Error('\P{Is_Sc=__Phag:=}');
Expect(1, 43127, '\p{Is_Sc=phag}', "");
Expect(0, 43127, '\p{^Is_Sc=phag}', "");
Expect(0, 43127, '\P{Is_Sc=phag}', "");
Expect(1, 43127, '\P{^Is_Sc=phag}', "");
Expect(0, 43071, '\p{Is_Sc=phag}', "");
Expect(1, 43071, '\p{^Is_Sc=phag}', "");
Expect(1, 43071, '\P{Is_Sc=phag}', "");
Expect(0, 43071, '\P{^Is_Sc=phag}', "");
Expect(1, 43127, '\p{Is_Sc= -Phag}', "");
Expect(0, 43127, '\p{^Is_Sc= -Phag}', "");
Expect(0, 43127, '\P{Is_Sc= -Phag}', "");
Expect(1, 43127, '\P{^Is_Sc= -Phag}', "");
Expect(0, 43071, '\p{Is_Sc= -Phag}', "");
Expect(1, 43071, '\p{^Is_Sc= -Phag}', "");
Expect(1, 43071, '\P{Is_Sc= -Phag}', "");
Expect(0, 43071, '\P{^Is_Sc= -Phag}', "");
Error('\p{Script=_Armenian:=}');
Error('\P{Script=_Armenian:=}');
Expect(1, 1366, '\p{Script=armenian}', "");
Expect(0, 1366, '\p{^Script=armenian}', "");
Expect(0, 1366, '\P{Script=armenian}', "");
Expect(1, 1366, '\P{^Script=armenian}', "");
Expect(0, 1328, '\p{Script=armenian}', "");
Expect(1, 1328, '\p{^Script=armenian}', "");
Expect(1, 1328, '\P{Script=armenian}', "");
Expect(0, 1328, '\P{^Script=armenian}', "");
Expect(1, 1366, '\p{Script=__Armenian}', "");
Expect(0, 1366, '\p{^Script=__Armenian}', "");
Expect(0, 1366, '\P{Script=__Armenian}', "");
Expect(1, 1366, '\P{^Script=__Armenian}', "");
Expect(0, 1328, '\p{Script=__Armenian}', "");
Expect(1, 1328, '\p{^Script=__Armenian}', "");
Expect(1, 1328, '\P{Script=__Armenian}', "");
Expect(0, 1328, '\P{^Script=__Armenian}', "");
Error('\p{Sc=:=ARMN}');
Error('\P{Sc=:=ARMN}');
Expect(1, 1366, '\p{Sc=armn}', "");
Expect(0, 1366, '\p{^Sc=armn}', "");
Expect(0, 1366, '\P{Sc=armn}', "");
Expect(1, 1366, '\P{^Sc=armn}', "");
Expect(0, 1328, '\p{Sc=armn}', "");
Expect(1, 1328, '\p{^Sc=armn}', "");
Expect(1, 1328, '\P{Sc=armn}', "");
Expect(0, 1328, '\P{^Sc=armn}', "");
Expect(1, 1366, '\p{Sc=_	Armn}', "");
Expect(0, 1366, '\p{^Sc=_	Armn}', "");
Expect(0, 1366, '\P{Sc=_	Armn}', "");
Expect(1, 1366, '\P{^Sc=_	Armn}', "");
Expect(0, 1328, '\p{Sc=_	Armn}', "");
Expect(1, 1328, '\p{^Sc=_	Armn}', "");
Expect(1, 1328, '\P{Sc=_	Armn}', "");
Expect(0, 1328, '\P{^Sc=_	Armn}', "");
Error('\p{Is_Script=_/a/Armenian}');
Error('\P{Is_Script=_/a/Armenian}');
Expect(1, 1366, '\p{Is_Script=armenian}', "");
Expect(0, 1366, '\p{^Is_Script=armenian}', "");
Expect(0, 1366, '\P{Is_Script=armenian}', "");
Expect(1, 1366, '\P{^Is_Script=armenian}', "");
Expect(0, 1328, '\p{Is_Script=armenian}', "");
Expect(1, 1328, '\p{^Is_Script=armenian}', "");
Expect(1, 1328, '\P{Is_Script=armenian}', "");
Expect(0, 1328, '\P{^Is_Script=armenian}', "");
Expect(1, 1366, '\p{Is_Script=Armenian}', "");
Expect(0, 1366, '\p{^Is_Script=Armenian}', "");
Expect(0, 1366, '\P{Is_Script=Armenian}', "");
Expect(1, 1366, '\P{^Is_Script=Armenian}', "");
Expect(0, 1328, '\p{Is_Script=Armenian}', "");
Expect(1, 1328, '\p{^Is_Script=Armenian}', "");
Expect(1, 1328, '\P{Is_Script=Armenian}', "");
Expect(0, 1328, '\P{^Is_Script=Armenian}', "");
Error('\p{Is_Sc=	/a/armn}');
Error('\P{Is_Sc=	/a/armn}');
Expect(1, 1366, '\p{Is_Sc=armn}', "");
Expect(0, 1366, '\p{^Is_Sc=armn}', "");
Expect(0, 1366, '\P{Is_Sc=armn}', "");
Expect(1, 1366, '\P{^Is_Sc=armn}', "");
Expect(0, 1328, '\p{Is_Sc=armn}', "");
Expect(1, 1328, '\p{^Is_Sc=armn}', "");
Expect(1, 1328, '\P{Is_Sc=armn}', "");
Expect(0, 1328, '\P{^Is_Sc=armn}', "");
Expect(1, 1366, '\p{Is_Sc= 	Armn}', "");
Expect(0, 1366, '\p{^Is_Sc= 	Armn}', "");
Expect(0, 1366, '\P{Is_Sc= 	Armn}', "");
Expect(1, 1366, '\P{^Is_Sc= 	Armn}', "");
Expect(0, 1328, '\p{Is_Sc= 	Armn}', "");
Expect(1, 1328, '\p{^Is_Sc= 	Armn}', "");
Expect(1, 1328, '\P{Is_Sc= 	Armn}', "");
Expect(0, 1328, '\P{^Is_Sc= 	Armn}', "");
Error('\p{Script= -Syriac:=}');
Error('\P{Script= -Syriac:=}');
Expect(1, 1805, '\p{Script=syriac}', "");
Expect(0, 1805, '\p{^Script=syriac}', "");
Expect(0, 1805, '\P{Script=syriac}', "");
Expect(1, 1805, '\P{^Script=syriac}', "");
Expect(0, 1791, '\p{Script=syriac}', "");
Expect(1, 1791, '\p{^Script=syriac}', "");
Expect(1, 1791, '\P{Script=syriac}', "");
Expect(0, 1791, '\P{^Script=syriac}', "");
Expect(1, 1805, '\p{Script: SYRIAC}', "");
Expect(0, 1805, '\p{^Script: SYRIAC}', "");
Expect(0, 1805, '\P{Script: SYRIAC}', "");
Expect(1, 1805, '\P{^Script: SYRIAC}', "");
Expect(0, 1791, '\p{Script: SYRIAC}', "");
Expect(1, 1791, '\p{^Script: SYRIAC}', "");
Expect(1, 1791, '\P{Script: SYRIAC}', "");
Expect(0, 1791, '\P{^Script: SYRIAC}', "");
Error('\p{Sc:   - Syrc:=}');
Error('\P{Sc:   - Syrc:=}');
Expect(1, 1805, '\p{Sc=syrc}', "");
Expect(0, 1805, '\p{^Sc=syrc}', "");
Expect(0, 1805, '\P{Sc=syrc}', "");
Expect(1, 1805, '\P{^Sc=syrc}', "");
Expect(0, 1791, '\p{Sc=syrc}', "");
Expect(1, 1791, '\p{^Sc=syrc}', "");
Expect(1, 1791, '\P{Sc=syrc}', "");
Expect(0, 1791, '\P{^Sc=syrc}', "");
Expect(1, 1805, '\p{Sc:-syrc}', "");
Expect(0, 1805, '\p{^Sc:-syrc}', "");
Expect(0, 1805, '\P{Sc:-syrc}', "");
Expect(1, 1805, '\P{^Sc:-syrc}', "");
Expect(0, 1791, '\p{Sc:-syrc}', "");
Expect(1, 1791, '\p{^Sc:-syrc}', "");
Expect(1, 1791, '\P{Sc:-syrc}', "");
Expect(0, 1791, '\P{^Sc:-syrc}', "");
Error('\p{Is_Script=-/a/SYRIAC}');
Error('\P{Is_Script=-/a/SYRIAC}');
Expect(1, 1805, '\p{Is_Script=syriac}', "");
Expect(0, 1805, '\p{^Is_Script=syriac}', "");
Expect(0, 1805, '\P{Is_Script=syriac}', "");
Expect(1, 1805, '\P{^Is_Script=syriac}', "");
Expect(0, 1791, '\p{Is_Script=syriac}', "");
Expect(1, 1791, '\p{^Is_Script=syriac}', "");
Expect(1, 1791, '\P{Is_Script=syriac}', "");
Expect(0, 1791, '\P{^Is_Script=syriac}', "");
Expect(1, 1805, '\p{Is_Script=--SYRIAC}', "");
Expect(0, 1805, '\p{^Is_Script=--SYRIAC}', "");
Expect(0, 1805, '\P{Is_Script=--SYRIAC}', "");
Expect(1, 1805, '\P{^Is_Script=--SYRIAC}', "");
Expect(0, 1791, '\p{Is_Script=--SYRIAC}', "");
Expect(1, 1791, '\p{^Is_Script=--SYRIAC}', "");
Expect(1, 1791, '\P{Is_Script=--SYRIAC}', "");
Expect(0, 1791, '\P{^Is_Script=--SYRIAC}', "");
Error('\p{Is_Sc= :=Syrc}');
Error('\P{Is_Sc= :=Syrc}');
Expect(1, 1805, '\p{Is_Sc:syrc}', "");
Expect(0, 1805, '\p{^Is_Sc:syrc}', "");
Expect(0, 1805, '\P{Is_Sc:syrc}', "");
Expect(1, 1805, '\P{^Is_Sc:syrc}', "");
Expect(0, 1791, '\p{Is_Sc:syrc}', "");
Expect(1, 1791, '\p{^Is_Sc:syrc}', "");
Expect(1, 1791, '\P{Is_Sc:syrc}', "");
Expect(0, 1791, '\P{^Is_Sc:syrc}', "");
Expect(1, 1805, '\p{Is_Sc: Syrc}', "");
Expect(0, 1805, '\p{^Is_Sc: Syrc}', "");
Expect(0, 1805, '\P{Is_Sc: Syrc}', "");
Expect(1, 1805, '\P{^Is_Sc: Syrc}', "");
Expect(0, 1791, '\p{Is_Sc: Syrc}', "");
Expect(1, 1791, '\p{^Is_Sc: Syrc}', "");
Expect(1, 1791, '\P{Is_Sc: Syrc}', "");
Expect(0, 1791, '\P{^Is_Sc: Syrc}', "");
Error('\p{Script= yi:=}');
Error('\P{Script= yi:=}');
Expect(1, 42124, '\p{Script=yi}', "");
Expect(0, 42124, '\p{^Script=yi}', "");
Expect(0, 42124, '\P{Script=yi}', "");
Expect(1, 42124, '\P{^Script=yi}', "");
Expect(0, 40959, '\p{Script=yi}', "");
Expect(1, 40959, '\p{^Script=yi}', "");
Expect(1, 40959, '\P{Script=yi}', "");
Expect(0, 40959, '\P{^Script=yi}', "");
Expect(1, 42124, '\p{Script=	_yi}', "");
Expect(0, 42124, '\p{^Script=	_yi}', "");
Expect(0, 42124, '\P{Script=	_yi}', "");
Expect(1, 42124, '\P{^Script=	_yi}', "");
Expect(0, 40959, '\p{Script=	_yi}', "");
Expect(1, 40959, '\p{^Script=	_yi}', "");
Expect(1, 40959, '\P{Script=	_yi}', "");
Expect(0, 40959, '\P{^Script=	_yi}', "");
Error('\p{Sc=/a/  yiii}');
Error('\P{Sc=/a/  yiii}');
Expect(1, 42124, '\p{Sc=yiii}', "");
Expect(0, 42124, '\p{^Sc=yiii}', "");
Expect(0, 42124, '\P{Sc=yiii}', "");
Expect(1, 42124, '\P{^Sc=yiii}', "");
Expect(0, 40959, '\p{Sc=yiii}', "");
Expect(1, 40959, '\p{^Sc=yiii}', "");
Expect(1, 40959, '\P{Sc=yiii}', "");
Expect(0, 40959, '\P{^Sc=yiii}', "");
Expect(1, 42124, '\p{Sc=	yiii}', "");
Expect(0, 42124, '\p{^Sc=	yiii}', "");
Expect(0, 42124, '\P{Sc=	yiii}', "");
Expect(1, 42124, '\P{^Sc=	yiii}', "");
Expect(0, 40959, '\p{Sc=	yiii}', "");
Expect(1, 40959, '\p{^Sc=	yiii}', "");
Expect(1, 40959, '\P{Sc=	yiii}', "");
Expect(0, 40959, '\P{^Sc=	yiii}', "");
Error('\p{Is_Script= _Yi/a/}');
Error('\P{Is_Script= _Yi/a/}');
Expect(1, 42124, '\p{Is_Script:   yi}', "");
Expect(0, 42124, '\p{^Is_Script:   yi}', "");
Expect(0, 42124, '\P{Is_Script:   yi}', "");
Expect(1, 42124, '\P{^Is_Script:   yi}', "");
Expect(0, 40959, '\p{Is_Script:   yi}', "");
Expect(1, 40959, '\p{^Is_Script:   yi}', "");
Expect(1, 40959, '\P{Is_Script:   yi}', "");
Expect(0, 40959, '\P{^Is_Script:   yi}', "");
Expect(1, 42124, '\p{Is_Script=	 yi}', "");
Expect(0, 42124, '\p{^Is_Script=	 yi}', "");
Expect(0, 42124, '\P{Is_Script=	 yi}', "");
Expect(1, 42124, '\P{^Is_Script=	 yi}', "");
Expect(0, 40959, '\p{Is_Script=	 yi}', "");
Expect(1, 40959, '\p{^Is_Script=	 yi}', "");
Expect(1, 40959, '\P{Is_Script=	 yi}', "");
Expect(0, 40959, '\P{^Is_Script=	 yi}', "");
Error('\p{Is_Sc= Yiii/a/}');
Error('\P{Is_Sc= Yiii/a/}');
Expect(1, 42124, '\p{Is_Sc:	yiii}', "");
Expect(0, 42124, '\p{^Is_Sc:	yiii}', "");
Expect(0, 42124, '\P{Is_Sc:	yiii}', "");
Expect(1, 42124, '\P{^Is_Sc:	yiii}', "");
Expect(0, 40959, '\p{Is_Sc:	yiii}', "");
Expect(1, 40959, '\p{^Is_Sc:	yiii}', "");
Expect(1, 40959, '\P{Is_Sc:	yiii}', "");
Expect(0, 40959, '\P{^Is_Sc:	yiii}', "");
Expect(1, 42124, '\p{Is_Sc: - Yiii}', "");
Expect(0, 42124, '\p{^Is_Sc: - Yiii}', "");
Expect(0, 42124, '\P{Is_Sc: - Yiii}', "");
Expect(1, 42124, '\P{^Is_Sc: - Yiii}', "");
Expect(0, 40959, '\p{Is_Sc: - Yiii}', "");
Expect(1, 40959, '\p{^Is_Sc: - Yiii}', "");
Expect(1, 40959, '\P{Is_Sc: - Yiii}', "");
Expect(0, 40959, '\P{^Is_Sc: - Yiii}', "");
Error('\p{Script=/a/	-katakana}');
Error('\P{Script=/a/	-katakana}');
Expect(1, 12538, '\p{Script=katakana}', "");
Expect(0, 12538, '\p{^Script=katakana}', "");
Expect(0, 12538, '\P{Script=katakana}', "");
Expect(1, 12538, '\P{^Script=katakana}', "");
Expect(0, 12448, '\p{Script=katakana}', "");
Expect(1, 12448, '\p{^Script=katakana}', "");
Expect(1, 12448, '\P{Script=katakana}', "");
Expect(0, 12448, '\P{^Script=katakana}', "");
Expect(1, 12538, '\p{Script:    	katakana}', "");
Expect(0, 12538, '\p{^Script:    	katakana}', "");
Expect(0, 12538, '\P{Script:    	katakana}', "");
Expect(1, 12538, '\P{^Script:    	katakana}', "");
Expect(0, 12448, '\p{Script:    	katakana}', "");
Expect(1, 12448, '\p{^Script:    	katakana}', "");
Expect(1, 12448, '\P{Script:    	katakana}', "");
Expect(0, 12448, '\P{^Script:    	katakana}', "");
Error('\p{Sc=	:=Kana}');
Error('\P{Sc=	:=Kana}');
Expect(1, 12538, '\p{Sc:	kana}', "");
Expect(0, 12538, '\p{^Sc:	kana}', "");
Expect(0, 12538, '\P{Sc:	kana}', "");
Expect(1, 12538, '\P{^Sc:	kana}', "");
Expect(0, 12448, '\p{Sc:	kana}', "");
Expect(1, 12448, '\p{^Sc:	kana}', "");
Expect(1, 12448, '\P{Sc:	kana}', "");
Expect(0, 12448, '\P{^Sc:	kana}', "");
Expect(1, 12538, '\p{Sc:	_Kana}', "");
Expect(0, 12538, '\p{^Sc:	_Kana}', "");
Expect(0, 12538, '\P{Sc:	_Kana}', "");
Expect(1, 12538, '\P{^Sc:	_Kana}', "");
Expect(0, 12448, '\p{Sc:	_Kana}', "");
Expect(1, 12448, '\p{^Sc:	_Kana}', "");
Expect(1, 12448, '\P{Sc:	_Kana}', "");
Expect(0, 12448, '\P{^Sc:	_Kana}', "");
Error('\p{Is_Script= 	Katakana:=}');
Error('\P{Is_Script= 	Katakana:=}');
Expect(1, 12538, '\p{Is_Script=katakana}', "");
Expect(0, 12538, '\p{^Is_Script=katakana}', "");
Expect(0, 12538, '\P{Is_Script=katakana}', "");
Expect(1, 12538, '\P{^Is_Script=katakana}', "");
Expect(0, 12448, '\p{Is_Script=katakana}', "");
Expect(1, 12448, '\p{^Is_Script=katakana}', "");
Expect(1, 12448, '\P{Is_Script=katakana}', "");
Expect(0, 12448, '\P{^Is_Script=katakana}', "");
Expect(1, 12538, '\p{Is_Script=-Katakana}', "");
Expect(0, 12538, '\p{^Is_Script=-Katakana}', "");
Expect(0, 12538, '\P{Is_Script=-Katakana}', "");
Expect(1, 12538, '\P{^Is_Script=-Katakana}', "");
Expect(0, 12448, '\p{Is_Script=-Katakana}', "");
Expect(1, 12448, '\p{^Is_Script=-Katakana}', "");
Expect(1, 12448, '\P{Is_Script=-Katakana}', "");
Expect(0, 12448, '\P{^Is_Script=-Katakana}', "");
Error('\p{Is_Sc= 	KANA/a/}');
Error('\P{Is_Sc= 	KANA/a/}');
Expect(1, 12538, '\p{Is_Sc=kana}', "");
Expect(0, 12538, '\p{^Is_Sc=kana}', "");
Expect(0, 12538, '\P{Is_Sc=kana}', "");
Expect(1, 12538, '\P{^Is_Sc=kana}', "");
Expect(0, 12448, '\p{Is_Sc=kana}', "");
Expect(1, 12448, '\p{^Is_Sc=kana}', "");
Expect(1, 12448, '\P{Is_Sc=kana}', "");
Expect(0, 12448, '\P{^Is_Sc=kana}', "");
Expect(1, 12538, '\p{Is_Sc=_KANA}', "");
Expect(0, 12538, '\p{^Is_Sc=_KANA}', "");
Expect(0, 12538, '\P{Is_Sc=_KANA}', "");
Expect(1, 12538, '\P{^Is_Sc=_KANA}', "");
Expect(0, 12448, '\p{Is_Sc=_KANA}', "");
Expect(1, 12448, '\p{^Is_Sc=_KANA}', "");
Expect(1, 12448, '\P{Is_Sc=_KANA}', "");
Expect(0, 12448, '\P{^Is_Sc=_KANA}', "");
Error('\p{Script:	/a/	 GLAGOLITIC}');
Error('\P{Script:	/a/	 GLAGOLITIC}');
Expect(1, 11310, '\p{Script=glagolitic}', "");
Expect(0, 11310, '\p{^Script=glagolitic}', "");
Expect(0, 11310, '\P{Script=glagolitic}', "");
Expect(1, 11310, '\P{^Script=glagolitic}', "");
Expect(0, 11263, '\p{Script=glagolitic}', "");
Expect(1, 11263, '\p{^Script=glagolitic}', "");
Expect(1, 11263, '\P{Script=glagolitic}', "");
Expect(0, 11263, '\P{^Script=glagolitic}', "");
Expect(1, 11310, '\p{Script:   _Glagolitic}', "");
Expect(0, 11310, '\p{^Script:   _Glagolitic}', "");
Expect(0, 11310, '\P{Script:   _Glagolitic}', "");
Expect(1, 11310, '\P{^Script:   _Glagolitic}', "");
Expect(0, 11263, '\p{Script:   _Glagolitic}', "");
Expect(1, 11263, '\p{^Script:   _Glagolitic}', "");
Expect(1, 11263, '\P{Script:   _Glagolitic}', "");
Expect(0, 11263, '\P{^Script:   _Glagolitic}', "");
Error('\p{Sc=__Glag/a/}');
Error('\P{Sc=__Glag/a/}');
Expect(1, 11310, '\p{Sc=glag}', "");
Expect(0, 11310, '\p{^Sc=glag}', "");
Expect(0, 11310, '\P{Sc=glag}', "");
Expect(1, 11310, '\P{^Sc=glag}', "");
Expect(0, 11263, '\p{Sc=glag}', "");
Expect(1, 11263, '\p{^Sc=glag}', "");
Expect(1, 11263, '\P{Sc=glag}', "");
Expect(0, 11263, '\P{^Sc=glag}', "");
Expect(1, 11310, '\p{Sc=-Glag}', "");
Expect(0, 11310, '\p{^Sc=-Glag}', "");
Expect(0, 11310, '\P{Sc=-Glag}', "");
Expect(1, 11310, '\P{^Sc=-Glag}', "");
Expect(0, 11263, '\p{Sc=-Glag}', "");
Expect(1, 11263, '\p{^Sc=-Glag}', "");
Expect(1, 11263, '\P{Sc=-Glag}', "");
Expect(0, 11263, '\P{^Sc=-Glag}', "");
Error('\p{Is_Script=:=	Glagolitic}');
Error('\P{Is_Script=:=	Glagolitic}');
Expect(1, 11310, '\p{Is_Script=glagolitic}', "");
Expect(0, 11310, '\p{^Is_Script=glagolitic}', "");
Expect(0, 11310, '\P{Is_Script=glagolitic}', "");
Expect(1, 11310, '\P{^Is_Script=glagolitic}', "");
Expect(0, 11263, '\p{Is_Script=glagolitic}', "");
Expect(1, 11263, '\p{^Is_Script=glagolitic}', "");
Expect(1, 11263, '\P{Is_Script=glagolitic}', "");
Expect(0, 11263, '\P{^Is_Script=glagolitic}', "");
Expect(1, 11310, '\p{Is_Script=-	Glagolitic}', "");
Expect(0, 11310, '\p{^Is_Script=-	Glagolitic}', "");
Expect(0, 11310, '\P{Is_Script=-	Glagolitic}', "");
Expect(1, 11310, '\P{^Is_Script=-	Glagolitic}', "");
Expect(0, 11263, '\p{Is_Script=-	Glagolitic}', "");
Expect(1, 11263, '\p{^Is_Script=-	Glagolitic}', "");
Expect(1, 11263, '\P{Is_Script=-	Glagolitic}', "");
Expect(0, 11263, '\P{^Is_Script=-	Glagolitic}', "");
Error('\p{Is_Sc=_Glag/a/}');
Error('\P{Is_Sc=_Glag/a/}');
Expect(1, 11310, '\p{Is_Sc=glag}', "");
Expect(0, 11310, '\p{^Is_Sc=glag}', "");
Expect(0, 11310, '\P{Is_Sc=glag}', "");
Expect(1, 11310, '\P{^Is_Sc=glag}', "");
Expect(0, 11263, '\p{Is_Sc=glag}', "");
Expect(1, 11263, '\p{^Is_Sc=glag}', "");
Expect(1, 11263, '\P{Is_Sc=glag}', "");
Expect(0, 11263, '\P{^Is_Sc=glag}', "");
Expect(1, 11310, '\p{Is_Sc=	Glag}', "");
Expect(0, 11310, '\p{^Is_Sc=	Glag}', "");
Expect(0, 11310, '\P{Is_Sc=	Glag}', "");
Expect(1, 11310, '\P{^Is_Sc=	Glag}', "");
Expect(0, 11263, '\p{Is_Sc=	Glag}', "");
Expect(1, 11263, '\p{^Is_Sc=	Glag}', "");
Expect(1, 11263, '\P{Is_Sc=	Glag}', "");
Expect(0, 11263, '\P{^Is_Sc=	Glag}', "");
Error('\p{Script= :=Thaana}');
Error('\P{Script= :=Thaana}');
Expect(1, 1969, '\p{Script=thaana}', "");
Expect(0, 1969, '\p{^Script=thaana}', "");
Expect(0, 1969, '\P{Script=thaana}', "");
Expect(1, 1969, '\P{^Script=thaana}', "");
Expect(0, 1919, '\p{Script=thaana}', "");
Expect(1, 1919, '\p{^Script=thaana}', "");
Expect(1, 1919, '\P{Script=thaana}', "");
Expect(0, 1919, '\P{^Script=thaana}', "");
Expect(1, 1969, '\p{Script=-_thaana}', "");
Expect(0, 1969, '\p{^Script=-_thaana}', "");
Expect(0, 1969, '\P{Script=-_thaana}', "");
Expect(1, 1969, '\P{^Script=-_thaana}', "");
Expect(0, 1919, '\p{Script=-_thaana}', "");
Expect(1, 1919, '\p{^Script=-_thaana}', "");
Expect(1, 1919, '\P{Script=-_thaana}', "");
Expect(0, 1919, '\P{^Script=-_thaana}', "");
Error('\p{Sc= 	thaa/a/}');
Error('\P{Sc= 	thaa/a/}');
Expect(1, 1969, '\p{Sc=thaa}', "");
Expect(0, 1969, '\p{^Sc=thaa}', "");
Expect(0, 1969, '\P{Sc=thaa}', "");
Expect(1, 1969, '\P{^Sc=thaa}', "");
Expect(0, 1919, '\p{Sc=thaa}', "");
Expect(1, 1919, '\p{^Sc=thaa}', "");
Expect(1, 1919, '\P{Sc=thaa}', "");
Expect(0, 1919, '\P{^Sc=thaa}', "");
Expect(1, 1969, '\p{Sc=_THAA}', "");
Expect(0, 1969, '\p{^Sc=_THAA}', "");
Expect(0, 1969, '\P{Sc=_THAA}', "");
Expect(1, 1969, '\P{^Sc=_THAA}', "");
Expect(0, 1919, '\p{Sc=_THAA}', "");
Expect(1, 1919, '\p{^Sc=_THAA}', "");
Expect(1, 1919, '\P{Sc=_THAA}', "");
Expect(0, 1919, '\P{^Sc=_THAA}', "");
Error('\p{Is_Script=-_Thaana:=}');
Error('\P{Is_Script=-_Thaana:=}');
Expect(1, 1969, '\p{Is_Script=thaana}', "");
Expect(0, 1969, '\p{^Is_Script=thaana}', "");
Expect(0, 1969, '\P{Is_Script=thaana}', "");
Expect(1, 1969, '\P{^Is_Script=thaana}', "");
Expect(0, 1919, '\p{Is_Script=thaana}', "");
Expect(1, 1919, '\p{^Is_Script=thaana}', "");
Expect(1, 1919, '\P{Is_Script=thaana}', "");
Expect(0, 1919, '\P{^Is_Script=thaana}', "");
Expect(1, 1969, '\p{Is_Script=_ THAANA}', "");
Expect(0, 1969, '\p{^Is_Script=_ THAANA}', "");
Expect(0, 1969, '\P{Is_Script=_ THAANA}', "");
Expect(1, 1969, '\P{^Is_Script=_ THAANA}', "");
Expect(0, 1919, '\p{Is_Script=_ THAANA}', "");
Expect(1, 1919, '\p{^Is_Script=_ THAANA}', "");
Expect(1, 1919, '\P{Is_Script=_ THAANA}', "");
Expect(0, 1919, '\P{^Is_Script=_ THAANA}', "");
Error('\p{Is_Sc: /a/THAA}');
Error('\P{Is_Sc: /a/THAA}');
Expect(1, 1969, '\p{Is_Sc=thaa}', "");
Expect(0, 1969, '\p{^Is_Sc=thaa}', "");
Expect(0, 1969, '\P{Is_Sc=thaa}', "");
Expect(1, 1969, '\P{^Is_Sc=thaa}', "");
Expect(0, 1919, '\p{Is_Sc=thaa}', "");
Expect(1, 1919, '\p{^Is_Sc=thaa}', "");
Expect(1, 1919, '\P{Is_Sc=thaa}', "");
Expect(0, 1919, '\P{^Is_Sc=thaa}', "");
Expect(1, 1969, '\p{Is_Sc=	THAA}', "");
Expect(0, 1969, '\p{^Is_Sc=	THAA}', "");
Expect(0, 1969, '\P{Is_Sc=	THAA}', "");
Expect(1, 1969, '\P{^Is_Sc=	THAA}', "");
Expect(0, 1919, '\p{Is_Sc=	THAA}', "");
Expect(1, 1919, '\p{^Is_Sc=	THAA}', "");
Expect(1, 1919, '\P{Is_Sc=	THAA}', "");
Expect(0, 1919, '\P{^Is_Sc=	THAA}', "");
Error('\p{Script=-/a/Lepcha}');
Error('\P{Script=-/a/Lepcha}');
Expect(1, 7223, '\p{Script=lepcha}', "");
Expect(0, 7223, '\p{^Script=lepcha}', "");
Expect(0, 7223, '\P{Script=lepcha}', "");
Expect(1, 7223, '\P{^Script=lepcha}', "");
Expect(0, 7167, '\p{Script=lepcha}', "");
Expect(1, 7167, '\p{^Script=lepcha}', "");
Expect(1, 7167, '\P{Script=lepcha}', "");
Expect(0, 7167, '\P{^Script=lepcha}', "");
Expect(1, 7223, '\p{Script=-LEPCHA}', "");
Expect(0, 7223, '\p{^Script=-LEPCHA}', "");
Expect(0, 7223, '\P{Script=-LEPCHA}', "");
Expect(1, 7223, '\P{^Script=-LEPCHA}', "");
Expect(0, 7167, '\p{Script=-LEPCHA}', "");
Expect(1, 7167, '\p{^Script=-LEPCHA}', "");
Expect(1, 7167, '\P{Script=-LEPCHA}', "");
Expect(0, 7167, '\P{^Script=-LEPCHA}', "");
Error('\p{Sc:  /a/Lepc}');
Error('\P{Sc:  /a/Lepc}');
Expect(1, 7223, '\p{Sc=lepc}', "");
Expect(0, 7223, '\p{^Sc=lepc}', "");
Expect(0, 7223, '\P{Sc=lepc}', "");
Expect(1, 7223, '\P{^Sc=lepc}', "");
Expect(0, 7167, '\p{Sc=lepc}', "");
Expect(1, 7167, '\p{^Sc=lepc}', "");
Expect(1, 7167, '\P{Sc=lepc}', "");
Expect(0, 7167, '\P{^Sc=lepc}', "");
Expect(1, 7223, '\p{Sc=-lepc}', "");
Expect(0, 7223, '\p{^Sc=-lepc}', "");
Expect(0, 7223, '\P{Sc=-lepc}', "");
Expect(1, 7223, '\P{^Sc=-lepc}', "");
Expect(0, 7167, '\p{Sc=-lepc}', "");
Expect(1, 7167, '\p{^Sc=-lepc}', "");
Expect(1, 7167, '\P{Sc=-lepc}', "");
Expect(0, 7167, '\P{^Sc=-lepc}', "");
Error('\p{Is_Script=-/a/Lepcha}');
Error('\P{Is_Script=-/a/Lepcha}');
Expect(1, 7223, '\p{Is_Script=lepcha}', "");
Expect(0, 7223, '\p{^Is_Script=lepcha}', "");
Expect(0, 7223, '\P{Is_Script=lepcha}', "");
Expect(1, 7223, '\P{^Is_Script=lepcha}', "");
Expect(0, 7167, '\p{Is_Script=lepcha}', "");
Expect(1, 7167, '\p{^Is_Script=lepcha}', "");
Expect(1, 7167, '\P{Is_Script=lepcha}', "");
Expect(0, 7167, '\P{^Is_Script=lepcha}', "");
Expect(1, 7223, '\p{Is_Script=		lepcha}', "");
Expect(0, 7223, '\p{^Is_Script=		lepcha}', "");
Expect(0, 7223, '\P{Is_Script=		lepcha}', "");
Expect(1, 7223, '\P{^Is_Script=		lepcha}', "");
Expect(0, 7167, '\p{Is_Script=		lepcha}', "");
Expect(1, 7167, '\p{^Is_Script=		lepcha}', "");
Expect(1, 7167, '\P{Is_Script=		lepcha}', "");
Expect(0, 7167, '\P{^Is_Script=		lepcha}', "");
Error('\p{Is_Sc=:=-LEPC}');
Error('\P{Is_Sc=:=-LEPC}');
Expect(1, 7223, '\p{Is_Sc=lepc}', "");
Expect(0, 7223, '\p{^Is_Sc=lepc}', "");
Expect(0, 7223, '\P{Is_Sc=lepc}', "");
Expect(1, 7223, '\P{^Is_Sc=lepc}', "");
Expect(0, 7167, '\p{Is_Sc=lepc}', "");
Expect(1, 7167, '\p{^Is_Sc=lepc}', "");
Expect(1, 7167, '\P{Is_Sc=lepc}', "");
Expect(0, 7167, '\P{^Is_Sc=lepc}', "");
Expect(1, 7223, '\p{Is_Sc=-Lepc}', "");
Expect(0, 7223, '\p{^Is_Sc=-Lepc}', "");
Expect(0, 7223, '\P{Is_Sc=-Lepc}', "");
Expect(1, 7223, '\P{^Is_Sc=-Lepc}', "");
Expect(0, 7167, '\p{Is_Sc=-Lepc}', "");
Expect(1, 7167, '\p{^Is_Sc=-Lepc}', "");
Expect(1, 7167, '\P{Is_Sc=-Lepc}', "");
Expect(0, 7167, '\P{^Is_Sc=-Lepc}', "");
Error('\p{Script=:= 	coptic}');
Error('\P{Script=:= 	coptic}');
Expect(1, 1007, '\p{Script=coptic}', "");
Expect(0, 1007, '\p{^Script=coptic}', "");
Expect(0, 1007, '\P{Script=coptic}', "");
Expect(1, 1007, '\P{^Script=coptic}', "");
Expect(0, 993, '\p{Script=coptic}', "");
Expect(1, 993, '\p{^Script=coptic}', "");
Expect(1, 993, '\P{Script=coptic}', "");
Expect(0, 993, '\P{^Script=coptic}', "");
Expect(1, 1007, '\p{Script=  COPTIC}', "");
Expect(0, 1007, '\p{^Script=  COPTIC}', "");
Expect(0, 1007, '\P{Script=  COPTIC}', "");
Expect(1, 1007, '\P{^Script=  COPTIC}', "");
Expect(0, 993, '\p{Script=  COPTIC}', "");
Expect(1, 993, '\p{^Script=  COPTIC}', "");
Expect(1, 993, '\P{Script=  COPTIC}', "");
Expect(0, 993, '\P{^Script=  COPTIC}', "");
Error('\p{Sc=:=_	Copt}');
Error('\P{Sc=:=_	Copt}');
Expect(1, 1007, '\p{Sc=copt}', "");
Expect(0, 1007, '\p{^Sc=copt}', "");
Expect(0, 1007, '\P{Sc=copt}', "");
Expect(1, 1007, '\P{^Sc=copt}', "");
Expect(0, 993, '\p{Sc=copt}', "");
Expect(1, 993, '\p{^Sc=copt}', "");
Expect(1, 993, '\P{Sc=copt}', "");
Expect(0, 993, '\P{^Sc=copt}', "");
Expect(1, 1007, '\p{Sc=-Copt}', "");
Expect(0, 1007, '\p{^Sc=-Copt}', "");
Expect(0, 1007, '\P{Sc=-Copt}', "");
Expect(1, 1007, '\P{^Sc=-Copt}', "");
Expect(0, 993, '\p{Sc=-Copt}', "");
Expect(1, 993, '\p{^Sc=-Copt}', "");
Expect(1, 993, '\P{Sc=-Copt}', "");
Expect(0, 993, '\P{^Sc=-Copt}', "");
Error('\p{Is_Script= :=QAAC}');
Error('\P{Is_Script= :=QAAC}');
Expect(1, 1007, '\p{Is_Script=qaac}', "");
Expect(0, 1007, '\p{^Is_Script=qaac}', "");
Expect(0, 1007, '\P{Is_Script=qaac}', "");
Expect(1, 1007, '\P{^Is_Script=qaac}', "");
Expect(0, 993, '\p{Is_Script=qaac}', "");
Expect(1, 993, '\p{^Is_Script=qaac}', "");
Expect(1, 993, '\P{Is_Script=qaac}', "");
Expect(0, 993, '\P{^Is_Script=qaac}', "");
Expect(1, 1007, '\p{Is_Script=-Qaac}', "");
Expect(0, 1007, '\p{^Is_Script=-Qaac}', "");
Expect(0, 1007, '\P{Is_Script=-Qaac}', "");
Expect(1, 1007, '\P{^Is_Script=-Qaac}', "");
Expect(0, 993, '\p{Is_Script=-Qaac}', "");
Expect(1, 993, '\p{^Is_Script=-Qaac}', "");
Expect(1, 993, '\P{Is_Script=-Qaac}', "");
Expect(0, 993, '\P{^Is_Script=-Qaac}', "");
Error('\p{Is_Sc=Coptic:=}');
Error('\P{Is_Sc=Coptic:=}');
Expect(1, 1007, '\p{Is_Sc=coptic}', "");
Expect(0, 1007, '\p{^Is_Sc=coptic}', "");
Expect(0, 1007, '\P{Is_Sc=coptic}', "");
Expect(1, 1007, '\P{^Is_Sc=coptic}', "");
Expect(0, 993, '\p{Is_Sc=coptic}', "");
Expect(1, 993, '\p{^Is_Sc=coptic}', "");
Expect(1, 993, '\P{Is_Sc=coptic}', "");
Expect(0, 993, '\P{^Is_Sc=coptic}', "");
Expect(1, 1007, '\p{Is_Sc:	_-COPTIC}', "");
Expect(0, 1007, '\p{^Is_Sc:	_-COPTIC}', "");
Expect(0, 1007, '\P{Is_Sc:	_-COPTIC}', "");
Expect(1, 1007, '\P{^Is_Sc:	_-COPTIC}', "");
Expect(0, 993, '\p{Is_Sc:	_-COPTIC}', "");
Expect(1, 993, '\p{^Is_Sc:	_-COPTIC}', "");
Expect(1, 993, '\P{Is_Sc:	_-COPTIC}', "");
Expect(0, 993, '\P{^Is_Sc:	_-COPTIC}', "");
Error('\p{Script=Katakana_Or_Hiragana}');
Error('\P{Script=Katakana_Or_Hiragana}');
Error('\p{Sc=Hrkt}');
Error('\P{Sc=Hrkt}');
Error('\p{Is_Script=Katakana_Or_Hiragana}');
Error('\P{Is_Script=Katakana_Or_Hiragana}');
Error('\p{Is_Sc=Hrkt}');
Error('\P{Is_Sc=Hrkt}');
Error('\p{Script=-balinese/a/}');
Error('\P{Script=-balinese/a/}');
Expect(1, 6987, '\p{Script=balinese}', "");
Expect(0, 6987, '\p{^Script=balinese}', "");
Expect(0, 6987, '\P{Script=balinese}', "");
Expect(1, 6987, '\P{^Script=balinese}', "");
Expect(0, 6911, '\p{Script=balinese}', "");
Expect(1, 6911, '\p{^Script=balinese}', "");
Expect(1, 6911, '\P{Script=balinese}', "");
Expect(0, 6911, '\P{^Script=balinese}', "");
Expect(1, 6987, '\p{Script=--Balinese}', "");
Expect(0, 6987, '\p{^Script=--Balinese}', "");
Expect(0, 6987, '\P{Script=--Balinese}', "");
Expect(1, 6987, '\P{^Script=--Balinese}', "");
Expect(0, 6911, '\p{Script=--Balinese}', "");
Expect(1, 6911, '\p{^Script=--Balinese}', "");
Expect(1, 6911, '\P{Script=--Balinese}', "");
Expect(0, 6911, '\P{^Script=--Balinese}', "");
Error('\p{Sc= 	Bali:=}');
Error('\P{Sc= 	Bali:=}');
Expect(1, 6987, '\p{Sc=bali}', "");
Expect(0, 6987, '\p{^Sc=bali}', "");
Expect(0, 6987, '\P{Sc=bali}', "");
Expect(1, 6987, '\P{^Sc=bali}', "");
Expect(0, 6911, '\p{Sc=bali}', "");
Expect(1, 6911, '\p{^Sc=bali}', "");
Expect(1, 6911, '\P{Sc=bali}', "");
Expect(0, 6911, '\P{^Sc=bali}', "");
Expect(1, 6987, '\p{Sc= _Bali}', "");
Expect(0, 6987, '\p{^Sc= _Bali}', "");
Expect(0, 6987, '\P{Sc= _Bali}', "");
Expect(1, 6987, '\P{^Sc= _Bali}', "");
Expect(0, 6911, '\p{Sc= _Bali}', "");
Expect(1, 6911, '\p{^Sc= _Bali}', "");
Expect(1, 6911, '\P{Sc= _Bali}', "");
Expect(0, 6911, '\P{^Sc= _Bali}', "");
Error('\p{Is_Script:   _	Balinese:=}');
Error('\P{Is_Script:   _	Balinese:=}');
Expect(1, 6987, '\p{Is_Script:	balinese}', "");
Expect(0, 6987, '\p{^Is_Script:	balinese}', "");
Expect(0, 6987, '\P{Is_Script:	balinese}', "");
Expect(1, 6987, '\P{^Is_Script:	balinese}', "");
Expect(0, 6911, '\p{Is_Script:	balinese}', "");
Expect(1, 6911, '\p{^Is_Script:	balinese}', "");
Expect(1, 6911, '\P{Is_Script:	balinese}', "");
Expect(0, 6911, '\P{^Is_Script:	balinese}', "");
Expect(1, 6987, '\p{Is_Script=_ Balinese}', "");
Expect(0, 6987, '\p{^Is_Script=_ Balinese}', "");
Expect(0, 6987, '\P{Is_Script=_ Balinese}', "");
Expect(1, 6987, '\P{^Is_Script=_ Balinese}', "");
Expect(0, 6911, '\p{Is_Script=_ Balinese}', "");
Expect(1, 6911, '\p{^Is_Script=_ Balinese}', "");
Expect(1, 6911, '\P{Is_Script=_ Balinese}', "");
Expect(0, 6911, '\P{^Is_Script=_ Balinese}', "");
Error('\p{Is_Sc=_/a/Bali}');
Error('\P{Is_Sc=_/a/Bali}');
Expect(1, 6987, '\p{Is_Sc=bali}', "");
Expect(0, 6987, '\p{^Is_Sc=bali}', "");
Expect(0, 6987, '\P{Is_Sc=bali}', "");
Expect(1, 6987, '\P{^Is_Sc=bali}', "");
Expect(0, 6911, '\p{Is_Sc=bali}', "");
Expect(1, 6911, '\p{^Is_Sc=bali}', "");
Expect(1, 6911, '\P{Is_Sc=bali}', "");
Expect(0, 6911, '\P{^Is_Sc=bali}', "");
Expect(1, 6987, '\p{Is_Sc= 	bali}', "");
Expect(0, 6987, '\p{^Is_Sc= 	bali}', "");
Expect(0, 6987, '\P{Is_Sc= 	bali}', "");
Expect(1, 6987, '\P{^Is_Sc= 	bali}', "");
Expect(0, 6911, '\p{Is_Sc= 	bali}', "");
Expect(1, 6911, '\p{^Is_Sc= 	bali}', "");
Expect(1, 6911, '\P{Is_Sc= 	bali}', "");
Expect(0, 6911, '\P{^Is_Sc= 	bali}', "");
Error('\p{Script=	Tagbanwa/a/}');
Error('\P{Script=	Tagbanwa/a/}');
Expect(1, 5996, '\p{Script=tagbanwa}', "");
Expect(0, 5996, '\p{^Script=tagbanwa}', "");
Expect(0, 5996, '\P{Script=tagbanwa}', "");
Expect(1, 5996, '\P{^Script=tagbanwa}', "");
Expect(0, 5983, '\p{Script=tagbanwa}', "");
Expect(1, 5983, '\p{^Script=tagbanwa}', "");
Expect(1, 5983, '\P{Script=tagbanwa}', "");
Expect(0, 5983, '\P{^Script=tagbanwa}', "");
Expect(1, 5996, '\p{Script=_ tagbanwa}', "");
Expect(0, 5996, '\p{^Script=_ tagbanwa}', "");
Expect(0, 5996, '\P{Script=_ tagbanwa}', "");
Expect(1, 5996, '\P{^Script=_ tagbanwa}', "");
Expect(0, 5983, '\p{Script=_ tagbanwa}', "");
Expect(1, 5983, '\p{^Script=_ tagbanwa}', "");
Expect(1, 5983, '\P{Script=_ tagbanwa}', "");
Expect(0, 5983, '\P{^Script=_ tagbanwa}', "");
Error('\p{Sc= _tagb/a/}');
Error('\P{Sc= _tagb/a/}');
Expect(1, 5996, '\p{Sc=tagb}', "");
Expect(0, 5996, '\p{^Sc=tagb}', "");
Expect(0, 5996, '\P{Sc=tagb}', "");
Expect(1, 5996, '\P{^Sc=tagb}', "");
Expect(0, 5983, '\p{Sc=tagb}', "");
Expect(1, 5983, '\p{^Sc=tagb}', "");
Expect(1, 5983, '\P{Sc=tagb}', "");
Expect(0, 5983, '\P{^Sc=tagb}', "");
Expect(1, 5996, '\p{Sc= Tagb}', "");
Expect(0, 5996, '\p{^Sc= Tagb}', "");
Expect(0, 5996, '\P{Sc= Tagb}', "");
Expect(1, 5996, '\P{^Sc= Tagb}', "");
Expect(0, 5983, '\p{Sc= Tagb}', "");
Expect(1, 5983, '\p{^Sc= Tagb}', "");
Expect(1, 5983, '\P{Sc= Tagb}', "");
Expect(0, 5983, '\P{^Sc= Tagb}', "");
Error('\p{Is_Script:	-_Tagbanwa:=}');
Error('\P{Is_Script:	-_Tagbanwa:=}');
Expect(1, 5996, '\p{Is_Script=tagbanwa}', "");
Expect(0, 5996, '\p{^Is_Script=tagbanwa}', "");
Expect(0, 5996, '\P{Is_Script=tagbanwa}', "");
Expect(1, 5996, '\P{^Is_Script=tagbanwa}', "");
Expect(0, 5983, '\p{Is_Script=tagbanwa}', "");
Expect(1, 5983, '\p{^Is_Script=tagbanwa}', "");
Expect(1, 5983, '\P{Is_Script=tagbanwa}', "");
Expect(0, 5983, '\P{^Is_Script=tagbanwa}', "");
Expect(1, 5996, '\p{Is_Script=		Tagbanwa}', "");
Expect(0, 5996, '\p{^Is_Script=		Tagbanwa}', "");
Expect(0, 5996, '\P{Is_Script=		Tagbanwa}', "");
Expect(1, 5996, '\P{^Is_Script=		Tagbanwa}', "");
Expect(0, 5983, '\p{Is_Script=		Tagbanwa}', "");
Expect(1, 5983, '\p{^Is_Script=		Tagbanwa}', "");
Expect(1, 5983, '\P{Is_Script=		Tagbanwa}', "");
Expect(0, 5983, '\P{^Is_Script=		Tagbanwa}', "");
Error('\p{Is_Sc=/a/ _Tagb}');
Error('\P{Is_Sc=/a/ _Tagb}');
Expect(1, 5996, '\p{Is_Sc:tagb}', "");
Expect(0, 5996, '\p{^Is_Sc:tagb}', "");
Expect(0, 5996, '\P{Is_Sc:tagb}', "");
Expect(1, 5996, '\P{^Is_Sc:tagb}', "");
Expect(0, 5983, '\p{Is_Sc:tagb}', "");
Expect(1, 5983, '\p{^Is_Sc:tagb}', "");
Expect(1, 5983, '\P{Is_Sc:tagb}', "");
Expect(0, 5983, '\P{^Is_Sc:tagb}', "");
Expect(1, 5996, '\p{Is_Sc= -TAGB}', "");
Expect(0, 5996, '\p{^Is_Sc= -TAGB}', "");
Expect(0, 5996, '\P{Is_Sc= -TAGB}', "");
Expect(1, 5996, '\P{^Is_Sc= -TAGB}', "");
Expect(0, 5983, '\p{Is_Sc= -TAGB}', "");
Expect(1, 5983, '\p{^Is_Sc= -TAGB}', "");
Expect(1, 5983, '\P{Is_Sc= -TAGB}', "");
Expect(0, 5983, '\P{^Is_Sc= -TAGB}', "");
Error('\p{Script=_/a/Syloti nagri}');
Error('\P{Script=_/a/Syloti nagri}');
Expect(1, 43051, '\p{Script=sylotinagri}', "");
Expect(0, 43051, '\p{^Script=sylotinagri}', "");
Expect(0, 43051, '\P{Script=sylotinagri}', "");
Expect(1, 43051, '\P{^Script=sylotinagri}', "");
Expect(0, 43007, '\p{Script=sylotinagri}', "");
Expect(1, 43007, '\p{^Script=sylotinagri}', "");
Expect(1, 43007, '\P{Script=sylotinagri}', "");
Expect(0, 43007, '\P{^Script=sylotinagri}', "");
Expect(1, 43051, '\p{Script=	syloti Nagri}', "");
Expect(0, 43051, '\p{^Script=	syloti Nagri}', "");
Expect(0, 43051, '\P{Script=	syloti Nagri}', "");
Expect(1, 43051, '\P{^Script=	syloti Nagri}', "");
Expect(0, 43007, '\p{Script=	syloti Nagri}', "");
Expect(1, 43007, '\p{^Script=	syloti Nagri}', "");
Expect(1, 43007, '\P{Script=	syloti Nagri}', "");
Expect(0, 43007, '\P{^Script=	syloti Nagri}', "");
Error('\p{Sc=		Sylo:=}');
Error('\P{Sc=		Sylo:=}');
Expect(1, 43051, '\p{Sc=sylo}', "");
Expect(0, 43051, '\p{^Sc=sylo}', "");
Expect(0, 43051, '\P{Sc=sylo}', "");
Expect(1, 43051, '\P{^Sc=sylo}', "");
Expect(0, 43007, '\p{Sc=sylo}', "");
Expect(1, 43007, '\p{^Sc=sylo}', "");
Expect(1, 43007, '\P{Sc=sylo}', "");
Expect(0, 43007, '\P{^Sc=sylo}', "");
Expect(1, 43051, '\p{Sc=	-Sylo}', "");
Expect(0, 43051, '\p{^Sc=	-Sylo}', "");
Expect(0, 43051, '\P{Sc=	-Sylo}', "");
Expect(1, 43051, '\P{^Sc=	-Sylo}', "");
Expect(0, 43007, '\p{Sc=	-Sylo}', "");
Expect(1, 43007, '\p{^Sc=	-Sylo}', "");
Expect(1, 43007, '\P{Sc=	-Sylo}', "");
Expect(0, 43007, '\P{^Sc=	-Sylo}', "");
Error('\p{Is_Script=	SYLOTI	NAGRI:=}');
Error('\P{Is_Script=	SYLOTI	NAGRI:=}');
Expect(1, 43051, '\p{Is_Script=sylotinagri}', "");
Expect(0, 43051, '\p{^Is_Script=sylotinagri}', "");
Expect(0, 43051, '\P{Is_Script=sylotinagri}', "");
Expect(1, 43051, '\P{^Is_Script=sylotinagri}', "");
Expect(0, 43007, '\p{Is_Script=sylotinagri}', "");
Expect(1, 43007, '\p{^Is_Script=sylotinagri}', "");
Expect(1, 43007, '\P{Is_Script=sylotinagri}', "");
Expect(0, 43007, '\P{^Is_Script=sylotinagri}', "");
Expect(1, 43051, '\p{Is_Script=  SylotiNagri}', "");
Expect(0, 43051, '\p{^Is_Script=  SylotiNagri}', "");
Expect(0, 43051, '\P{Is_Script=  SylotiNagri}', "");
Expect(1, 43051, '\P{^Is_Script=  SylotiNagri}', "");
Expect(0, 43007, '\p{Is_Script=  SylotiNagri}', "");
Expect(1, 43007, '\p{^Is_Script=  SylotiNagri}', "");
Expect(1, 43007, '\P{Is_Script=  SylotiNagri}', "");
Expect(0, 43007, '\P{^Is_Script=  SylotiNagri}', "");
Error('\p{Is_Sc: 	/a/Sylo}');
Error('\P{Is_Sc: 	/a/Sylo}');
Expect(1, 43051, '\p{Is_Sc=sylo}', "");
Expect(0, 43051, '\p{^Is_Sc=sylo}', "");
Expect(0, 43051, '\P{Is_Sc=sylo}', "");
Expect(1, 43051, '\P{^Is_Sc=sylo}', "");
Expect(0, 43007, '\p{Is_Sc=sylo}', "");
Expect(1, 43007, '\p{^Is_Sc=sylo}', "");
Expect(1, 43007, '\P{Is_Sc=sylo}', "");
Expect(0, 43007, '\P{^Is_Sc=sylo}', "");
Expect(1, 43051, '\p{Is_Sc=	Sylo}', "");
Expect(0, 43051, '\p{^Is_Sc=	Sylo}', "");
Expect(0, 43051, '\P{Is_Sc=	Sylo}', "");
Expect(1, 43051, '\P{^Is_Sc=	Sylo}', "");
Expect(0, 43007, '\p{Is_Sc=	Sylo}', "");
Expect(1, 43007, '\p{^Is_Sc=	Sylo}', "");
Expect(1, 43007, '\P{Is_Sc=	Sylo}', "");
Expect(0, 43007, '\P{^Is_Sc=	Sylo}', "");
Error('\p{Script=_:=Meetei-MAYEK}');
Error('\P{Script=_:=Meetei-MAYEK}');
Expect(1, 44013, '\p{Script=meeteimayek}', "");
Expect(0, 44013, '\p{^Script=meeteimayek}', "");
Expect(0, 44013, '\P{Script=meeteimayek}', "");
Expect(1, 44013, '\P{^Script=meeteimayek}', "");
Expect(0, 43967, '\p{Script=meeteimayek}', "");
Expect(1, 43967, '\p{^Script=meeteimayek}', "");
Expect(1, 43967, '\P{Script=meeteimayek}', "");
Expect(0, 43967, '\P{^Script=meeteimayek}', "");
Expect(1, 44013, '\p{Script:	Meetei Mayek}', "");
Expect(0, 44013, '\p{^Script:	Meetei Mayek}', "");
Expect(0, 44013, '\P{Script:	Meetei Mayek}', "");
Expect(1, 44013, '\P{^Script:	Meetei Mayek}', "");
Expect(0, 43967, '\p{Script:	Meetei Mayek}', "");
Expect(1, 43967, '\p{^Script:	Meetei Mayek}', "");
Expect(1, 43967, '\P{Script:	Meetei Mayek}', "");
Expect(0, 43967, '\P{^Script:	Meetei Mayek}', "");
Error('\p{Sc:	_Mtei:=}');
Error('\P{Sc:	_Mtei:=}');
Expect(1, 44013, '\p{Sc=mtei}', "");
Expect(0, 44013, '\p{^Sc=mtei}', "");
Expect(0, 44013, '\P{Sc=mtei}', "");
Expect(1, 44013, '\P{^Sc=mtei}', "");
Expect(0, 43967, '\p{Sc=mtei}', "");
Expect(1, 43967, '\p{^Sc=mtei}', "");
Expect(1, 43967, '\P{Sc=mtei}', "");
Expect(0, 43967, '\P{^Sc=mtei}', "");
Expect(1, 44013, '\p{Sc=--Mtei}', "");
Expect(0, 44013, '\p{^Sc=--Mtei}', "");
Expect(0, 44013, '\P{Sc=--Mtei}', "");
Expect(1, 44013, '\P{^Sc=--Mtei}', "");
Expect(0, 43967, '\p{Sc=--Mtei}', "");
Expect(1, 43967, '\p{^Sc=--Mtei}', "");
Expect(1, 43967, '\P{Sc=--Mtei}', "");
Expect(0, 43967, '\P{^Sc=--Mtei}', "");
Error('\p{Is_Script=-meetei MAYEK:=}');
Error('\P{Is_Script=-meetei MAYEK:=}');
Expect(1, 44013, '\p{Is_Script=meeteimayek}', "");
Expect(0, 44013, '\p{^Is_Script=meeteimayek}', "");
Expect(0, 44013, '\P{Is_Script=meeteimayek}', "");
Expect(1, 44013, '\P{^Is_Script=meeteimayek}', "");
Expect(0, 43967, '\p{Is_Script=meeteimayek}', "");
Expect(1, 43967, '\p{^Is_Script=meeteimayek}', "");
Expect(1, 43967, '\P{Is_Script=meeteimayek}', "");
Expect(0, 43967, '\P{^Is_Script=meeteimayek}', "");
Expect(1, 44013, '\p{Is_Script=-	MEETEI Mayek}', "");
Expect(0, 44013, '\p{^Is_Script=-	MEETEI Mayek}', "");
Expect(0, 44013, '\P{Is_Script=-	MEETEI Mayek}', "");
Expect(1, 44013, '\P{^Is_Script=-	MEETEI Mayek}', "");
Expect(0, 43967, '\p{Is_Script=-	MEETEI Mayek}', "");
Expect(1, 43967, '\p{^Is_Script=-	MEETEI Mayek}', "");
Expect(1, 43967, '\P{Is_Script=-	MEETEI Mayek}', "");
Expect(0, 43967, '\P{^Is_Script=-	MEETEI Mayek}', "");
Error('\p{Is_Sc= MTEI:=}');
Error('\P{Is_Sc= MTEI:=}');
Expect(1, 44013, '\p{Is_Sc=mtei}', "");
Expect(0, 44013, '\p{^Is_Sc=mtei}', "");
Expect(0, 44013, '\P{Is_Sc=mtei}', "");
Expect(1, 44013, '\P{^Is_Sc=mtei}', "");
Expect(0, 43967, '\p{Is_Sc=mtei}', "");
Expect(1, 43967, '\p{^Is_Sc=mtei}', "");
Expect(1, 43967, '\P{Is_Sc=mtei}', "");
Expect(0, 43967, '\P{^Is_Sc=mtei}', "");
Expect(1, 44013, '\p{Is_Sc=	_MTEI}', "");
Expect(0, 44013, '\p{^Is_Sc=	_MTEI}', "");
Expect(0, 44013, '\P{Is_Sc=	_MTEI}', "");
Expect(1, 44013, '\P{^Is_Sc=	_MTEI}', "");
Expect(0, 43967, '\p{Is_Sc=	_MTEI}', "");
Expect(1, 43967, '\p{^Is_Sc=	_MTEI}', "");
Expect(1, 43967, '\P{Is_Sc=	_MTEI}', "");
Expect(0, 43967, '\P{^Is_Sc=	_MTEI}', "");
Error('\p{Script=-_Phoenician/a/}');
Error('\P{Script=-_Phoenician/a/}');
Expect(1, 67867, '\p{Script=phoenician}', "");
Expect(0, 67867, '\p{^Script=phoenician}', "");
Expect(0, 67867, '\P{Script=phoenician}', "");
Expect(1, 67867, '\P{^Script=phoenician}', "");
Expect(0, 67839, '\p{Script=phoenician}', "");
Expect(1, 67839, '\p{^Script=phoenician}', "");
Expect(1, 67839, '\P{Script=phoenician}', "");
Expect(0, 67839, '\P{^Script=phoenician}', "");
Expect(1, 67867, '\p{Script:		PHOENICIAN}', "");
Expect(0, 67867, '\p{^Script:		PHOENICIAN}', "");
Expect(0, 67867, '\P{Script:		PHOENICIAN}', "");
Expect(1, 67867, '\P{^Script:		PHOENICIAN}', "");
Expect(0, 67839, '\p{Script:		PHOENICIAN}', "");
Expect(1, 67839, '\p{^Script:		PHOENICIAN}', "");
Expect(1, 67839, '\P{Script:		PHOENICIAN}', "");
Expect(0, 67839, '\P{^Script:		PHOENICIAN}', "");
Error('\p{Sc:    _PHNX:=}');
Error('\P{Sc:    _PHNX:=}');
Expect(1, 67867, '\p{Sc=phnx}', "");
Expect(0, 67867, '\p{^Sc=phnx}', "");
Expect(0, 67867, '\P{Sc=phnx}', "");
Expect(1, 67867, '\P{^Sc=phnx}', "");
Expect(0, 67839, '\p{Sc=phnx}', "");
Expect(1, 67839, '\p{^Sc=phnx}', "");
Expect(1, 67839, '\P{Sc=phnx}', "");
Expect(0, 67839, '\P{^Sc=phnx}', "");
Expect(1, 67867, '\p{Sc=_	Phnx}', "");
Expect(0, 67867, '\p{^Sc=_	Phnx}', "");
Expect(0, 67867, '\P{Sc=_	Phnx}', "");
Expect(1, 67867, '\P{^Sc=_	Phnx}', "");
Expect(0, 67839, '\p{Sc=_	Phnx}', "");
Expect(1, 67839, '\p{^Sc=_	Phnx}', "");
Expect(1, 67839, '\P{Sc=_	Phnx}', "");
Expect(0, 67839, '\P{^Sc=_	Phnx}', "");
Error('\p{Is_Script=-:=Phoenician}');
Error('\P{Is_Script=-:=Phoenician}');
Expect(1, 67867, '\p{Is_Script:phoenician}', "");
Expect(0, 67867, '\p{^Is_Script:phoenician}', "");
Expect(0, 67867, '\P{Is_Script:phoenician}', "");
Expect(1, 67867, '\P{^Is_Script:phoenician}', "");
Expect(0, 67839, '\p{Is_Script:phoenician}', "");
Expect(1, 67839, '\p{^Is_Script:phoenician}', "");
Expect(1, 67839, '\P{Is_Script:phoenician}', "");
Expect(0, 67839, '\P{^Is_Script:phoenician}', "");
Expect(1, 67867, '\p{Is_Script=	PHOENICIAN}', "");
Expect(0, 67867, '\p{^Is_Script=	PHOENICIAN}', "");
Expect(0, 67867, '\P{Is_Script=	PHOENICIAN}', "");
Expect(1, 67867, '\P{^Is_Script=	PHOENICIAN}', "");
Expect(0, 67839, '\p{Is_Script=	PHOENICIAN}', "");
Expect(1, 67839, '\p{^Is_Script=	PHOENICIAN}', "");
Expect(1, 67839, '\P{Is_Script=	PHOENICIAN}', "");
Expect(0, 67839, '\P{^Is_Script=	PHOENICIAN}', "");
Error('\p{Is_Sc=:=-	phnx}');
Error('\P{Is_Sc=:=-	phnx}');
Expect(1, 67867, '\p{Is_Sc:phnx}', "");
Expect(0, 67867, '\p{^Is_Sc:phnx}', "");
Expect(0, 67867, '\P{Is_Sc:phnx}', "");
Expect(1, 67867, '\P{^Is_Sc:phnx}', "");
Expect(0, 67839, '\p{Is_Sc:phnx}', "");
Expect(1, 67839, '\p{^Is_Sc:phnx}', "");
Expect(1, 67839, '\P{Is_Sc:phnx}', "");
Expect(0, 67839, '\P{^Is_Sc:phnx}', "");
Expect(1, 67867, '\p{Is_Sc= 	phnx}', "");
Expect(0, 67867, '\p{^Is_Sc= 	phnx}', "");
Expect(0, 67867, '\P{Is_Sc= 	phnx}', "");
Expect(1, 67867, '\P{^Is_Sc= 	phnx}', "");
Expect(0, 67839, '\p{Is_Sc= 	phnx}', "");
Expect(1, 67839, '\p{^Is_Sc= 	phnx}', "");
Expect(1, 67839, '\P{Is_Sc= 	phnx}', "");
Expect(0, 67839, '\P{^Is_Sc= 	phnx}', "");
Error('\p{Script= :=devanagari}');
Error('\P{Script= :=devanagari}');
Expect(1, 2384, '\p{Script=devanagari}', "");
Expect(0, 2384, '\p{^Script=devanagari}', "");
Expect(0, 2384, '\P{Script=devanagari}', "");
Expect(1, 2384, '\P{^Script=devanagari}', "");
Expect(0, 2303, '\p{Script=devanagari}', "");
Expect(1, 2303, '\p{^Script=devanagari}', "");
Expect(1, 2303, '\P{Script=devanagari}', "");
Expect(0, 2303, '\P{^Script=devanagari}', "");
Expect(1, 2384, '\p{Script=-Devanagari}', "");
Expect(0, 2384, '\p{^Script=-Devanagari}', "");
Expect(0, 2384, '\P{Script=-Devanagari}', "");
Expect(1, 2384, '\P{^Script=-Devanagari}', "");
Expect(0, 2303, '\p{Script=-Devanagari}', "");
Expect(1, 2303, '\p{^Script=-Devanagari}', "");
Expect(1, 2303, '\P{Script=-Devanagari}', "");
Expect(0, 2303, '\P{^Script=-Devanagari}', "");
Error('\p{Sc: /a/ _Deva}');
Error('\P{Sc: /a/ _Deva}');
Expect(1, 2384, '\p{Sc=deva}', "");
Expect(0, 2384, '\p{^Sc=deva}', "");
Expect(0, 2384, '\P{Sc=deva}', "");
Expect(1, 2384, '\P{^Sc=deva}', "");
Expect(0, 2303, '\p{Sc=deva}', "");
Expect(1, 2303, '\p{^Sc=deva}', "");
Expect(1, 2303, '\P{Sc=deva}', "");
Expect(0, 2303, '\P{^Sc=deva}', "");
Expect(1, 2384, '\p{Sc=-DEVA}', "");
Expect(0, 2384, '\p{^Sc=-DEVA}', "");
Expect(0, 2384, '\P{Sc=-DEVA}', "");
Expect(1, 2384, '\P{^Sc=-DEVA}', "");
Expect(0, 2303, '\p{Sc=-DEVA}', "");
Expect(1, 2303, '\p{^Sc=-DEVA}', "");
Expect(1, 2303, '\P{Sc=-DEVA}', "");
Expect(0, 2303, '\P{^Sc=-DEVA}', "");
Error('\p{Is_Script=:=devanagari}');
Error('\P{Is_Script=:=devanagari}');
Expect(1, 2384, '\p{Is_Script:   devanagari}', "");
Expect(0, 2384, '\p{^Is_Script:   devanagari}', "");
Expect(0, 2384, '\P{Is_Script:   devanagari}', "");
Expect(1, 2384, '\P{^Is_Script:   devanagari}', "");
Expect(0, 2303, '\p{Is_Script:   devanagari}', "");
Expect(1, 2303, '\p{^Is_Script:   devanagari}', "");
Expect(1, 2303, '\P{Is_Script:   devanagari}', "");
Expect(0, 2303, '\P{^Is_Script:   devanagari}', "");
Expect(1, 2384, '\p{Is_Script=__DEVANAGARI}', "");
Expect(0, 2384, '\p{^Is_Script=__DEVANAGARI}', "");
Expect(0, 2384, '\P{Is_Script=__DEVANAGARI}', "");
Expect(1, 2384, '\P{^Is_Script=__DEVANAGARI}', "");
Expect(0, 2303, '\p{Is_Script=__DEVANAGARI}', "");
Expect(1, 2303, '\p{^Is_Script=__DEVANAGARI}', "");
Expect(1, 2303, '\P{Is_Script=__DEVANAGARI}', "");
Expect(0, 2303, '\P{^Is_Script=__DEVANAGARI}', "");
Error('\p{Is_Sc=- Deva:=}');
Error('\P{Is_Sc=- Deva:=}');
Expect(1, 2384, '\p{Is_Sc=deva}', "");
Expect(0, 2384, '\p{^Is_Sc=deva}', "");
Expect(0, 2384, '\P{Is_Sc=deva}', "");
Expect(1, 2384, '\P{^Is_Sc=deva}', "");
Expect(0, 2303, '\p{Is_Sc=deva}', "");
Expect(1, 2303, '\p{^Is_Sc=deva}', "");
Expect(1, 2303, '\P{Is_Sc=deva}', "");
Expect(0, 2303, '\P{^Is_Sc=deva}', "");
Expect(1, 2384, '\p{Is_Sc= deva}', "");
Expect(0, 2384, '\p{^Is_Sc= deva}', "");
Expect(0, 2384, '\P{Is_Sc= deva}', "");
Expect(1, 2384, '\P{^Is_Sc= deva}', "");
Expect(0, 2303, '\p{Is_Sc= deva}', "");
Expect(1, 2303, '\p{^Is_Sc= deva}', "");
Expect(1, 2303, '\P{Is_Sc= deva}', "");
Expect(0, 2303, '\P{^Is_Sc= deva}', "");
Error('\p{Script=	/a/Carian}');
Error('\P{Script=	/a/Carian}');
Expect(1, 66256, '\p{Script=carian}', "");
Expect(0, 66256, '\p{^Script=carian}', "");
Expect(0, 66256, '\P{Script=carian}', "");
Expect(1, 66256, '\P{^Script=carian}', "");
Expect(0, 66207, '\p{Script=carian}', "");
Expect(1, 66207, '\p{^Script=carian}', "");
Expect(1, 66207, '\P{Script=carian}', "");
Expect(0, 66207, '\P{^Script=carian}', "");
Expect(1, 66256, '\p{Script= -CARIAN}', "");
Expect(0, 66256, '\p{^Script= -CARIAN}', "");
Expect(0, 66256, '\P{Script= -CARIAN}', "");
Expect(1, 66256, '\P{^Script= -CARIAN}', "");
Expect(0, 66207, '\p{Script= -CARIAN}', "");
Expect(1, 66207, '\p{^Script= -CARIAN}', "");
Expect(1, 66207, '\P{Script= -CARIAN}', "");
Expect(0, 66207, '\P{^Script= -CARIAN}', "");
Error('\p{Sc=:=--Cari}');
Error('\P{Sc=:=--Cari}');
Expect(1, 66256, '\p{Sc=cari}', "");
Expect(0, 66256, '\p{^Sc=cari}', "");
Expect(0, 66256, '\P{Sc=cari}', "");
Expect(1, 66256, '\P{^Sc=cari}', "");
Expect(0, 66207, '\p{Sc=cari}', "");
Expect(1, 66207, '\p{^Sc=cari}', "");
Expect(1, 66207, '\P{Sc=cari}', "");
Expect(0, 66207, '\P{^Sc=cari}', "");
Expect(1, 66256, '\p{Sc=_-Cari}', "");
Expect(0, 66256, '\p{^Sc=_-Cari}', "");
Expect(0, 66256, '\P{Sc=_-Cari}', "");
Expect(1, 66256, '\P{^Sc=_-Cari}', "");
Expect(0, 66207, '\p{Sc=_-Cari}', "");
Expect(1, 66207, '\p{^Sc=_-Cari}', "");
Expect(1, 66207, '\P{Sc=_-Cari}', "");
Expect(0, 66207, '\P{^Sc=_-Cari}', "");
Error('\p{Is_Script=_:=carian}');
Error('\P{Is_Script=_:=carian}');
Expect(1, 66256, '\p{Is_Script=carian}', "");
Expect(0, 66256, '\p{^Is_Script=carian}', "");
Expect(0, 66256, '\P{Is_Script=carian}', "");
Expect(1, 66256, '\P{^Is_Script=carian}', "");
Expect(0, 66207, '\p{Is_Script=carian}', "");
Expect(1, 66207, '\p{^Is_Script=carian}', "");
Expect(1, 66207, '\P{Is_Script=carian}', "");
Expect(0, 66207, '\P{^Is_Script=carian}', "");
Expect(1, 66256, '\p{Is_Script=	 Carian}', "");
Expect(0, 66256, '\p{^Is_Script=	 Carian}', "");
Expect(0, 66256, '\P{Is_Script=	 Carian}', "");
Expect(1, 66256, '\P{^Is_Script=	 Carian}', "");
Expect(0, 66207, '\p{Is_Script=	 Carian}', "");
Expect(1, 66207, '\p{^Is_Script=	 Carian}', "");
Expect(1, 66207, '\P{Is_Script=	 Carian}', "");
Expect(0, 66207, '\P{^Is_Script=	 Carian}', "");
Error('\p{Is_Sc=	cari:=}');
Error('\P{Is_Sc=	cari:=}');
Expect(1, 66256, '\p{Is_Sc=cari}', "");
Expect(0, 66256, '\p{^Is_Sc=cari}', "");
Expect(0, 66256, '\P{Is_Sc=cari}', "");
Expect(1, 66256, '\P{^Is_Sc=cari}', "");
Expect(0, 66207, '\p{Is_Sc=cari}', "");
Expect(1, 66207, '\p{^Is_Sc=cari}', "");
Expect(1, 66207, '\P{Is_Sc=cari}', "");
Expect(0, 66207, '\P{^Is_Sc=cari}', "");
Expect(1, 66256, '\p{Is_Sc= 	cari}', "");
Expect(0, 66256, '\p{^Is_Sc= 	cari}', "");
Expect(0, 66256, '\P{Is_Sc= 	cari}', "");
Expect(1, 66256, '\P{^Is_Sc= 	cari}', "");
Expect(0, 66207, '\p{Is_Sc= 	cari}', "");
Expect(1, 66207, '\p{^Is_Sc= 	cari}', "");
Expect(1, 66207, '\P{Is_Sc= 	cari}', "");
Expect(0, 66207, '\P{^Is_Sc= 	cari}', "");
Error('\p{Script=_:=BUHID}');
Error('\P{Script=_:=BUHID}');
Expect(1, 5971, '\p{Script=buhid}', "");
Expect(0, 5971, '\p{^Script=buhid}', "");
Expect(0, 5971, '\P{Script=buhid}', "");
Expect(1, 5971, '\P{^Script=buhid}', "");
Expect(0, 5951, '\p{Script=buhid}', "");
Expect(1, 5951, '\p{^Script=buhid}', "");
Expect(1, 5951, '\P{Script=buhid}', "");
Expect(0, 5951, '\P{^Script=buhid}', "");
Expect(1, 5971, '\p{Script=	-BUHID}', "");
Expect(0, 5971, '\p{^Script=	-BUHID}', "");
Expect(0, 5971, '\P{Script=	-BUHID}', "");
Expect(1, 5971, '\P{^Script=	-BUHID}', "");
Expect(0, 5951, '\p{Script=	-BUHID}', "");
Expect(1, 5951, '\p{^Script=	-BUHID}', "");
Expect(1, 5951, '\P{Script=	-BUHID}', "");
Expect(0, 5951, '\P{^Script=	-BUHID}', "");
Error('\p{Sc=/a/ 	Buhd}');
Error('\P{Sc=/a/ 	Buhd}');
Expect(1, 5971, '\p{Sc=buhd}', "");
Expect(0, 5971, '\p{^Sc=buhd}', "");
Expect(0, 5971, '\P{Sc=buhd}', "");
Expect(1, 5971, '\P{^Sc=buhd}', "");
Expect(0, 5951, '\p{Sc=buhd}', "");
Expect(1, 5951, '\p{^Sc=buhd}', "");
Expect(1, 5951, '\P{Sc=buhd}', "");
Expect(0, 5951, '\P{^Sc=buhd}', "");
Expect(1, 5971, '\p{Sc=  Buhd}', "");
Expect(0, 5971, '\p{^Sc=  Buhd}', "");
Expect(0, 5971, '\P{Sc=  Buhd}', "");
Expect(1, 5971, '\P{^Sc=  Buhd}', "");
Expect(0, 5951, '\p{Sc=  Buhd}', "");
Expect(1, 5951, '\p{^Sc=  Buhd}', "");
Expect(1, 5951, '\P{Sc=  Buhd}', "");
Expect(0, 5951, '\P{^Sc=  Buhd}', "");
Error('\p{Is_Script=	_BUHID:=}');
Error('\P{Is_Script=	_BUHID:=}');
Expect(1, 5971, '\p{Is_Script=buhid}', "");
Expect(0, 5971, '\p{^Is_Script=buhid}', "");
Expect(0, 5971, '\P{Is_Script=buhid}', "");
Expect(1, 5971, '\P{^Is_Script=buhid}', "");
Expect(0, 5951, '\p{Is_Script=buhid}', "");
Expect(1, 5951, '\p{^Is_Script=buhid}', "");
Expect(1, 5951, '\P{Is_Script=buhid}', "");
Expect(0, 5951, '\P{^Is_Script=buhid}', "");
Expect(1, 5971, '\p{Is_Script=-	BUHID}', "");
Expect(0, 5971, '\p{^Is_Script=-	BUHID}', "");
Expect(0, 5971, '\P{Is_Script=-	BUHID}', "");
Expect(1, 5971, '\P{^Is_Script=-	BUHID}', "");
Expect(0, 5951, '\p{Is_Script=-	BUHID}', "");
Expect(1, 5951, '\p{^Is_Script=-	BUHID}', "");
Expect(1, 5951, '\P{Is_Script=-	BUHID}', "");
Expect(0, 5951, '\P{^Is_Script=-	BUHID}', "");
Error('\p{Is_Sc=:= Buhd}');
Error('\P{Is_Sc=:= Buhd}');
Expect(1, 5971, '\p{Is_Sc=buhd}', "");
Expect(0, 5971, '\p{^Is_Sc=buhd}', "");
Expect(0, 5971, '\P{Is_Sc=buhd}', "");
Expect(1, 5971, '\P{^Is_Sc=buhd}', "");
Expect(0, 5951, '\p{Is_Sc=buhd}', "");
Expect(1, 5951, '\p{^Is_Sc=buhd}', "");
Expect(1, 5951, '\P{Is_Sc=buhd}', "");
Expect(0, 5951, '\P{^Is_Sc=buhd}', "");
Expect(1, 5971, '\p{Is_Sc=-buhd}', "");
Expect(0, 5971, '\p{^Is_Sc=-buhd}', "");
Expect(0, 5971, '\P{Is_Sc=-buhd}', "");
Expect(1, 5971, '\P{^Is_Sc=-buhd}', "");
Expect(0, 5951, '\p{Is_Sc=-buhd}', "");
Expect(1, 5951, '\p{^Is_Sc=-buhd}', "");
Expect(1, 5951, '\P{Is_Sc=-buhd}', "");
Expect(0, 5951, '\P{^Is_Sc=-buhd}', "");
Error('\p{Script= /a/Limbu}');
Error('\P{Script= /a/Limbu}');
Expect(1, 6428, '\p{Script=limbu}', "");
Expect(0, 6428, '\p{^Script=limbu}', "");
Expect(0, 6428, '\P{Script=limbu}', "");
Expect(1, 6428, '\P{^Script=limbu}', "");
Expect(0, 6399, '\p{Script=limbu}', "");
Expect(1, 6399, '\p{^Script=limbu}', "");
Expect(1, 6399, '\P{Script=limbu}', "");
Expect(0, 6399, '\P{^Script=limbu}', "");
Expect(1, 6428, '\p{Script=-_limbu}', "");
Expect(0, 6428, '\p{^Script=-_limbu}', "");
Expect(0, 6428, '\P{Script=-_limbu}', "");
Expect(1, 6428, '\P{^Script=-_limbu}', "");
Expect(0, 6399, '\p{Script=-_limbu}', "");
Expect(1, 6399, '\p{^Script=-_limbu}', "");
Expect(1, 6399, '\P{Script=-_limbu}', "");
Expect(0, 6399, '\P{^Script=-_limbu}', "");
Error('\p{Sc=_-Limb/a/}');
Error('\P{Sc=_-Limb/a/}');
Expect(1, 6428, '\p{Sc=limb}', "");
Expect(0, 6428, '\p{^Sc=limb}', "");
Expect(0, 6428, '\P{Sc=limb}', "");
Expect(1, 6428, '\P{^Sc=limb}', "");
Expect(0, 6399, '\p{Sc=limb}', "");
Expect(1, 6399, '\p{^Sc=limb}', "");
Expect(1, 6399, '\P{Sc=limb}', "");
Expect(0, 6399, '\P{^Sc=limb}', "");
Expect(1, 6428, '\p{Sc=-LIMB}', "");
Expect(0, 6428, '\p{^Sc=-LIMB}', "");
Expect(0, 6428, '\P{Sc=-LIMB}', "");
Expect(1, 6428, '\P{^Sc=-LIMB}', "");
Expect(0, 6399, '\p{Sc=-LIMB}', "");
Expect(1, 6399, '\p{^Sc=-LIMB}', "");
Expect(1, 6399, '\P{Sc=-LIMB}', "");
Expect(0, 6399, '\P{^Sc=-LIMB}', "");
Error('\p{Is_Script=- Limbu/a/}');
Error('\P{Is_Script=- Limbu/a/}');
Expect(1, 6428, '\p{Is_Script=limbu}', "");
Expect(0, 6428, '\p{^Is_Script=limbu}', "");
Expect(0, 6428, '\P{Is_Script=limbu}', "");
Expect(1, 6428, '\P{^Is_Script=limbu}', "");
Expect(0, 6399, '\p{Is_Script=limbu}', "");
Expect(1, 6399, '\p{^Is_Script=limbu}', "");
Expect(1, 6399, '\P{Is_Script=limbu}', "");
Expect(0, 6399, '\P{^Is_Script=limbu}', "");
Expect(1, 6428, '\p{Is_Script=	Limbu}', "");
Expect(0, 6428, '\p{^Is_Script=	Limbu}', "");
Expect(0, 6428, '\P{Is_Script=	Limbu}', "");
Expect(1, 6428, '\P{^Is_Script=	Limbu}', "");
Expect(0, 6399, '\p{Is_Script=	Limbu}', "");
Expect(1, 6399, '\p{^Is_Script=	Limbu}', "");
Expect(1, 6399, '\P{Is_Script=	Limbu}', "");
Expect(0, 6399, '\P{^Is_Script=	Limbu}', "");
Error('\p{Is_Sc:  :=LIMB}');
Error('\P{Is_Sc:  :=LIMB}');
Expect(1, 6428, '\p{Is_Sc=limb}', "");
Expect(0, 6428, '\p{^Is_Sc=limb}', "");
Expect(0, 6428, '\P{Is_Sc=limb}', "");
Expect(1, 6428, '\P{^Is_Sc=limb}', "");
Expect(0, 6399, '\p{Is_Sc=limb}', "");
Expect(1, 6399, '\p{^Is_Sc=limb}', "");
Expect(1, 6399, '\P{Is_Sc=limb}', "");
Expect(0, 6399, '\P{^Is_Sc=limb}', "");
Expect(1, 6428, '\p{Is_Sc=__LIMB}', "");
Expect(0, 6428, '\p{^Is_Sc=__LIMB}', "");
Expect(0, 6428, '\P{Is_Sc=__LIMB}', "");
Expect(1, 6428, '\P{^Is_Sc=__LIMB}', "");
Expect(0, 6399, '\p{Is_Sc=__LIMB}', "");
Expect(1, 6399, '\p{^Is_Sc=__LIMB}', "");
Expect(1, 6399, '\P{Is_Sc=__LIMB}', "");
Expect(0, 6399, '\P{^Is_Sc=__LIMB}', "");
Error('\p{Script= :=JAVANESE}');
Error('\P{Script= :=JAVANESE}');
Expect(1, 43469, '\p{Script=javanese}', "");
Expect(0, 43469, '\p{^Script=javanese}', "");
Expect(0, 43469, '\P{Script=javanese}', "");
Expect(1, 43469, '\P{^Script=javanese}', "");
Expect(0, 43391, '\p{Script=javanese}', "");
Expect(1, 43391, '\p{^Script=javanese}', "");
Expect(1, 43391, '\P{Script=javanese}', "");
Expect(0, 43391, '\P{^Script=javanese}', "");
Expect(1, 43469, '\p{Script= -Javanese}', "");
Expect(0, 43469, '\p{^Script= -Javanese}', "");
Expect(0, 43469, '\P{Script= -Javanese}', "");
Expect(1, 43469, '\P{^Script= -Javanese}', "");
Expect(0, 43391, '\p{Script= -Javanese}', "");
Expect(1, 43391, '\p{^Script= -Javanese}', "");
Expect(1, 43391, '\P{Script= -Javanese}', "");
Expect(0, 43391, '\P{^Script= -Javanese}', "");
Error('\p{Sc=	Java:=}');
Error('\P{Sc=	Java:=}');
Expect(1, 43469, '\p{Sc=java}', "");
Expect(0, 43469, '\p{^Sc=java}', "");
Expect(0, 43469, '\P{Sc=java}', "");
Expect(1, 43469, '\P{^Sc=java}', "");
Expect(0, 43391, '\p{Sc=java}', "");
Expect(1, 43391, '\p{^Sc=java}', "");
Expect(1, 43391, '\P{Sc=java}', "");
Expect(0, 43391, '\P{^Sc=java}', "");
Expect(1, 43469, '\p{Sc=-_Java}', "");
Expect(0, 43469, '\p{^Sc=-_Java}', "");
Expect(0, 43469, '\P{Sc=-_Java}', "");
Expect(1, 43469, '\P{^Sc=-_Java}', "");
Expect(0, 43391, '\p{Sc=-_Java}', "");
Expect(1, 43391, '\p{^Sc=-_Java}', "");
Expect(1, 43391, '\P{Sc=-_Java}', "");
Expect(0, 43391, '\P{^Sc=-_Java}', "");
Error('\p{Is_Script:	_/a/javanese}');
Error('\P{Is_Script:	_/a/javanese}');
Expect(1, 43469, '\p{Is_Script=javanese}', "");
Expect(0, 43469, '\p{^Is_Script=javanese}', "");
Expect(0, 43469, '\P{Is_Script=javanese}', "");
Expect(1, 43469, '\P{^Is_Script=javanese}', "");
Expect(0, 43391, '\p{Is_Script=javanese}', "");
Expect(1, 43391, '\p{^Is_Script=javanese}', "");
Expect(1, 43391, '\P{Is_Script=javanese}', "");
Expect(0, 43391, '\P{^Is_Script=javanese}', "");
Expect(1, 43469, '\p{Is_Script= 	javanese}', "");
Expect(0, 43469, '\p{^Is_Script= 	javanese}', "");
Expect(0, 43469, '\P{Is_Script= 	javanese}', "");
Expect(1, 43469, '\P{^Is_Script= 	javanese}', "");
Expect(0, 43391, '\p{Is_Script= 	javanese}', "");
Expect(1, 43391, '\p{^Is_Script= 	javanese}', "");
Expect(1, 43391, '\P{Is_Script= 	javanese}', "");
Expect(0, 43391, '\P{^Is_Script= 	javanese}', "");
Error('\p{Is_Sc=/a/	 Java}');
Error('\P{Is_Sc=/a/	 Java}');
Expect(1, 43469, '\p{Is_Sc=java}', "");
Expect(0, 43469, '\p{^Is_Sc=java}', "");
Expect(0, 43469, '\P{Is_Sc=java}', "");
Expect(1, 43469, '\P{^Is_Sc=java}', "");
Expect(0, 43391, '\p{Is_Sc=java}', "");
Expect(1, 43391, '\p{^Is_Sc=java}', "");
Expect(1, 43391, '\P{Is_Sc=java}', "");
Expect(0, 43391, '\P{^Is_Sc=java}', "");
Expect(1, 43469, '\p{Is_Sc:    -JAVA}', "");
Expect(0, 43469, '\p{^Is_Sc:    -JAVA}', "");
Expect(0, 43469, '\P{Is_Sc:    -JAVA}', "");
Expect(1, 43469, '\P{^Is_Sc:    -JAVA}', "");
Expect(0, 43391, '\p{Is_Sc:    -JAVA}', "");
Expect(1, 43391, '\p{^Is_Sc:    -JAVA}', "");
Expect(1, 43391, '\P{Is_Sc:    -JAVA}', "");
Expect(0, 43391, '\P{^Is_Sc:    -JAVA}', "");
Error('\p{Script:  :=egyptian	hieroglyphs}');
Error('\P{Script:  :=egyptian	hieroglyphs}');
Expect(1, 78894, '\p{Script:   egyptianhieroglyphs}', "");
Expect(0, 78894, '\p{^Script:   egyptianhieroglyphs}', "");
Expect(0, 78894, '\P{Script:   egyptianhieroglyphs}', "");
Expect(1, 78894, '\P{^Script:   egyptianhieroglyphs}', "");
Expect(0, 77823, '\p{Script:   egyptianhieroglyphs}', "");
Expect(1, 77823, '\p{^Script:   egyptianhieroglyphs}', "");
Expect(1, 77823, '\P{Script:   egyptianhieroglyphs}', "");
Expect(0, 77823, '\P{^Script:   egyptianhieroglyphs}', "");
Expect(1, 78894, '\p{Script= -Egyptian-Hieroglyphs}', "");
Expect(0, 78894, '\p{^Script= -Egyptian-Hieroglyphs}', "");
Expect(0, 78894, '\P{Script= -Egyptian-Hieroglyphs}', "");
Expect(1, 78894, '\P{^Script= -Egyptian-Hieroglyphs}', "");
Expect(0, 77823, '\p{Script= -Egyptian-Hieroglyphs}', "");
Expect(1, 77823, '\p{^Script= -Egyptian-Hieroglyphs}', "");
Expect(1, 77823, '\P{Script= -Egyptian-Hieroglyphs}', "");
Expect(0, 77823, '\P{^Script= -Egyptian-Hieroglyphs}', "");
Error('\p{Sc=-:=egyp}');
Error('\P{Sc=-:=egyp}');
Expect(1, 78894, '\p{Sc=egyp}', "");
Expect(0, 78894, '\p{^Sc=egyp}', "");
Expect(0, 78894, '\P{Sc=egyp}', "");
Expect(1, 78894, '\P{^Sc=egyp}', "");
Expect(0, 77823, '\p{Sc=egyp}', "");
Expect(1, 77823, '\p{^Sc=egyp}', "");
Expect(1, 77823, '\P{Sc=egyp}', "");
Expect(0, 77823, '\P{^Sc=egyp}', "");
Expect(1, 78894, '\p{Sc=_-EGYP}', "");
Expect(0, 78894, '\p{^Sc=_-EGYP}', "");
Expect(0, 78894, '\P{Sc=_-EGYP}', "");
Expect(1, 78894, '\P{^Sc=_-EGYP}', "");
Expect(0, 77823, '\p{Sc=_-EGYP}', "");
Expect(1, 77823, '\p{^Sc=_-EGYP}', "");
Expect(1, 77823, '\P{Sc=_-EGYP}', "");
Expect(0, 77823, '\P{^Sc=_-EGYP}', "");
Error('\p{Is_Script=	 Egyptian_Hieroglyphs:=}');
Error('\P{Is_Script=	 Egyptian_Hieroglyphs:=}');
Expect(1, 78894, '\p{Is_Script=egyptianhieroglyphs}', "");
Expect(0, 78894, '\p{^Is_Script=egyptianhieroglyphs}', "");
Expect(0, 78894, '\P{Is_Script=egyptianhieroglyphs}', "");
Expect(1, 78894, '\P{^Is_Script=egyptianhieroglyphs}', "");
Expect(0, 77823, '\p{Is_Script=egyptianhieroglyphs}', "");
Expect(1, 77823, '\p{^Is_Script=egyptianhieroglyphs}', "");
Expect(1, 77823, '\P{Is_Script=egyptianhieroglyphs}', "");
Expect(0, 77823, '\P{^Is_Script=egyptianhieroglyphs}', "");
Expect(1, 78894, '\p{Is_Script= -Egyptian Hieroglyphs}', "");
Expect(0, 78894, '\p{^Is_Script= -Egyptian Hieroglyphs}', "");
Expect(0, 78894, '\P{Is_Script= -Egyptian Hieroglyphs}', "");
Expect(1, 78894, '\P{^Is_Script= -Egyptian Hieroglyphs}', "");
Expect(0, 77823, '\p{Is_Script= -Egyptian Hieroglyphs}', "");
Expect(1, 77823, '\p{^Is_Script= -Egyptian Hieroglyphs}', "");
Expect(1, 77823, '\P{Is_Script= -Egyptian Hieroglyphs}', "");
Expect(0, 77823, '\P{^Is_Script= -Egyptian Hieroglyphs}', "");
Error('\p{Is_Sc= /a/EGYP}');
Error('\P{Is_Sc= /a/EGYP}');
Expect(1, 78894, '\p{Is_Sc:egyp}', "");
Expect(0, 78894, '\p{^Is_Sc:egyp}', "");
Expect(0, 78894, '\P{Is_Sc:egyp}', "");
Expect(1, 78894, '\P{^Is_Sc:egyp}', "");
Expect(0, 77823, '\p{Is_Sc:egyp}', "");
Expect(1, 77823, '\p{^Is_Sc:egyp}', "");
Expect(1, 77823, '\P{Is_Sc:egyp}', "");
Expect(0, 77823, '\P{^Is_Sc:egyp}', "");
Expect(1, 78894, '\p{Is_Sc=	_Egyp}', "");
Expect(0, 78894, '\p{^Is_Sc=	_Egyp}', "");
Expect(0, 78894, '\P{Is_Sc=	_Egyp}', "");
Expect(1, 78894, '\P{^Is_Sc=	_Egyp}', "");
Expect(0, 77823, '\p{Is_Sc=	_Egyp}', "");
Expect(1, 77823, '\p{^Is_Sc=	_Egyp}', "");
Expect(1, 77823, '\P{Is_Sc=	_Egyp}', "");
Expect(0, 77823, '\P{^Is_Sc=	_Egyp}', "");
Error('\p{Script=/a/_	common}');
Error('\P{Script=/a/_	common}');
Expect(1, 64, '\p{Script=common}', "");
Expect(0, 64, '\p{^Script=common}', "");
Expect(0, 64, '\P{Script=common}', "");
Expect(1, 64, '\P{^Script=common}', "");
Expect(0, 90, '\p{Script=common}', "");
Expect(1, 90, '\p{^Script=common}', "");
Expect(1, 90, '\P{Script=common}', "");
Expect(0, 90, '\P{^Script=common}', "");
Expect(1, 64, '\p{Script:	 common}', "");
Expect(0, 64, '\p{^Script:	 common}', "");
Expect(0, 64, '\P{Script:	 common}', "");
Expect(1, 64, '\P{^Script:	 common}', "");
Expect(0, 90, '\p{Script:	 common}', "");
Expect(1, 90, '\p{^Script:	 common}', "");
Expect(1, 90, '\P{Script:	 common}', "");
Expect(0, 90, '\P{^Script:	 common}', "");
Error('\p{Sc=-:=ZYYY}');
Error('\P{Sc=-:=ZYYY}');
Expect(1, 64, '\p{Sc=zyyy}', "");
Expect(0, 64, '\p{^Sc=zyyy}', "");
Expect(0, 64, '\P{Sc=zyyy}', "");
Expect(1, 64, '\P{^Sc=zyyy}', "");
Expect(0, 90, '\p{Sc=zyyy}', "");
Expect(1, 90, '\p{^Sc=zyyy}', "");
Expect(1, 90, '\P{Sc=zyyy}', "");
Expect(0, 90, '\P{^Sc=zyyy}', "");
Expect(1, 64, '\p{Sc= 	zyyy}', "");
Expect(0, 64, '\p{^Sc= 	zyyy}', "");
Expect(0, 64, '\P{Sc= 	zyyy}', "");
Expect(1, 64, '\P{^Sc= 	zyyy}', "");
Expect(0, 90, '\p{Sc= 	zyyy}', "");
Expect(1, 90, '\p{^Sc= 	zyyy}', "");
Expect(1, 90, '\P{Sc= 	zyyy}', "");
Expect(0, 90, '\P{^Sc= 	zyyy}', "");
Error('\p{Is_Script=_Common/a/}');
Error('\P{Is_Script=_Common/a/}');
Expect(1, 64, '\p{Is_Script=common}', "");
Expect(0, 64, '\p{^Is_Script=common}', "");
Expect(0, 64, '\P{Is_Script=common}', "");
Expect(1, 64, '\P{^Is_Script=common}', "");
Expect(0, 90, '\p{Is_Script=common}', "");
Expect(1, 90, '\p{^Is_Script=common}', "");
Expect(1, 90, '\P{Is_Script=common}', "");
Expect(0, 90, '\P{^Is_Script=common}', "");
Expect(1, 64, '\p{Is_Script=  common}', "");
Expect(0, 64, '\p{^Is_Script=  common}', "");
Expect(0, 64, '\P{Is_Script=  common}', "");
Expect(1, 64, '\P{^Is_Script=  common}', "");
Expect(0, 90, '\p{Is_Script=  common}', "");
Expect(1, 90, '\p{^Is_Script=  common}', "");
Expect(1, 90, '\P{Is_Script=  common}', "");
Expect(0, 90, '\P{^Is_Script=  common}', "");
Error('\p{Is_Sc=:=	 Zyyy}');
Error('\P{Is_Sc=:=	 Zyyy}');
Expect(1, 64, '\p{Is_Sc=zyyy}', "");
Expect(0, 64, '\p{^Is_Sc=zyyy}', "");
Expect(0, 64, '\P{Is_Sc=zyyy}', "");
Expect(1, 64, '\P{^Is_Sc=zyyy}', "");
Expect(0, 90, '\p{Is_Sc=zyyy}', "");
Expect(1, 90, '\p{^Is_Sc=zyyy}', "");
Expect(1, 90, '\P{Is_Sc=zyyy}', "");
Expect(0, 90, '\P{^Is_Sc=zyyy}', "");
Expect(1, 64, '\p{Is_Sc=_-Zyyy}', "");
Expect(0, 64, '\p{^Is_Sc=_-Zyyy}', "");
Expect(0, 64, '\P{Is_Sc=_-Zyyy}', "");
Expect(1, 64, '\P{^Is_Sc=_-Zyyy}', "");
Expect(0, 90, '\p{Is_Sc=_-Zyyy}', "");
Expect(1, 90, '\p{^Is_Sc=_-Zyyy}', "");
Expect(1, 90, '\P{Is_Sc=_-Zyyy}', "");
Expect(0, 90, '\P{^Is_Sc=_-Zyyy}', "");
Error('\p{Script: /a/	_latin}');
Error('\P{Script: /a/	_latin}');
Expect(1, 90, '\p{Script: latin}', "");
Expect(0, 90, '\p{^Script: latin}', "");
Expect(0, 90, '\P{Script: latin}', "");
Expect(1, 90, '\P{^Script: latin}', "");
Expect(0, 64, '\p{Script: latin}', "");
Expect(1, 64, '\p{^Script: latin}', "");
Expect(1, 64, '\P{Script: latin}', "");
Expect(0, 64, '\P{^Script: latin}', "");
Expect(1, 90, '\p{Script= 	Latin}', "");
Expect(0, 90, '\p{^Script= 	Latin}', "");
Expect(0, 90, '\P{Script= 	Latin}', "");
Expect(1, 90, '\P{^Script= 	Latin}', "");
Expect(0, 64, '\p{Script= 	Latin}', "");
Expect(1, 64, '\p{^Script= 	Latin}', "");
Expect(1, 64, '\P{Script= 	Latin}', "");
Expect(0, 64, '\P{^Script= 	Latin}', "");
Error('\p{Sc= _Latn/a/}');
Error('\P{Sc= _Latn/a/}');
Expect(1, 90, '\p{Sc=latn}', "");
Expect(0, 90, '\p{^Sc=latn}', "");
Expect(0, 90, '\P{Sc=latn}', "");
Expect(1, 90, '\P{^Sc=latn}', "");
Expect(0, 64, '\p{Sc=latn}', "");
Expect(1, 64, '\p{^Sc=latn}', "");
Expect(1, 64, '\P{Sc=latn}', "");
Expect(0, 64, '\P{^Sc=latn}', "");
Expect(1, 90, '\p{Sc=_	Latn}', "");
Expect(0, 90, '\p{^Sc=_	Latn}', "");
Expect(0, 90, '\P{Sc=_	Latn}', "");
Expect(1, 90, '\P{^Sc=_	Latn}', "");
Expect(0, 64, '\p{Sc=_	Latn}', "");
Expect(1, 64, '\p{^Sc=_	Latn}', "");
Expect(1, 64, '\P{Sc=_	Latn}', "");
Expect(0, 64, '\P{^Sc=_	Latn}', "");
Error('\p{Is_Script=_/a/latin}');
Error('\P{Is_Script=_/a/latin}');
Expect(1, 90, '\p{Is_Script=latin}', "");
Expect(0, 90, '\p{^Is_Script=latin}', "");
Expect(0, 90, '\P{Is_Script=latin}', "");
Expect(1, 90, '\P{^Is_Script=latin}', "");
Expect(0, 64, '\p{Is_Script=latin}', "");
Expect(1, 64, '\p{^Is_Script=latin}', "");
Expect(1, 64, '\P{Is_Script=latin}', "");
Expect(0, 64, '\P{^Is_Script=latin}', "");
Expect(1, 90, '\p{Is_Script=_ Latin}', "");
Expect(0, 90, '\p{^Is_Script=_ Latin}', "");
Expect(0, 90, '\P{Is_Script=_ Latin}', "");
Expect(1, 90, '\P{^Is_Script=_ Latin}', "");
Expect(0, 64, '\p{Is_Script=_ Latin}', "");
Expect(1, 64, '\p{^Is_Script=_ Latin}', "");
Expect(1, 64, '\P{Is_Script=_ Latin}', "");
Expect(0, 64, '\P{^Is_Script=_ Latin}', "");
Error('\p{Is_Sc= Latn:=}');
Error('\P{Is_Sc= Latn:=}');
Expect(1, 90, '\p{Is_Sc=latn}', "");
Expect(0, 90, '\p{^Is_Sc=latn}', "");
Expect(0, 90, '\P{Is_Sc=latn}', "");
Expect(1, 90, '\P{^Is_Sc=latn}', "");
Expect(0, 64, '\p{Is_Sc=latn}', "");
Expect(1, 64, '\p{^Is_Sc=latn}', "");
Expect(1, 64, '\P{Is_Sc=latn}', "");
Expect(0, 64, '\P{^Is_Sc=latn}', "");
Expect(1, 90, '\p{Is_Sc= LATN}', "");
Expect(0, 90, '\p{^Is_Sc= LATN}', "");
Expect(0, 90, '\P{Is_Sc= LATN}', "");
Expect(1, 90, '\P{^Is_Sc= LATN}', "");
Expect(0, 64, '\p{Is_Sc= LATN}', "");
Expect(1, 64, '\p{^Is_Sc= LATN}', "");
Expect(1, 64, '\P{Is_Sc= LATN}', "");
Expect(0, 64, '\P{^Is_Sc= LATN}', "");
Error('\p{Script= /a/ethiopic}');
Error('\P{Script= /a/ethiopic}');
Expect(1, 4680, '\p{Script=ethiopic}', "");
Expect(0, 4680, '\p{^Script=ethiopic}', "");
Expect(0, 4680, '\P{Script=ethiopic}', "");
Expect(1, 4680, '\P{^Script=ethiopic}', "");
Expect(0, 4607, '\p{Script=ethiopic}', "");
Expect(1, 4607, '\p{^Script=ethiopic}', "");
Expect(1, 4607, '\P{Script=ethiopic}', "");
Expect(0, 4607, '\P{^Script=ethiopic}', "");
Expect(1, 4680, '\p{Script=_	Ethiopic}', "");
Expect(0, 4680, '\p{^Script=_	Ethiopic}', "");
Expect(0, 4680, '\P{Script=_	Ethiopic}', "");
Expect(1, 4680, '\P{^Script=_	Ethiopic}', "");
Expect(0, 4607, '\p{Script=_	Ethiopic}', "");
Expect(1, 4607, '\p{^Script=_	Ethiopic}', "");
Expect(1, 4607, '\P{Script=_	Ethiopic}', "");
Expect(0, 4607, '\P{^Script=_	Ethiopic}', "");
Error('\p{Sc=/a/-_ETHI}');
Error('\P{Sc=/a/-_ETHI}');
Expect(1, 4680, '\p{Sc=ethi}', "");
Expect(0, 4680, '\p{^Sc=ethi}', "");
Expect(0, 4680, '\P{Sc=ethi}', "");
Expect(1, 4680, '\P{^Sc=ethi}', "");
Expect(0, 4607, '\p{Sc=ethi}', "");
Expect(1, 4607, '\p{^Sc=ethi}', "");
Expect(1, 4607, '\P{Sc=ethi}', "");
Expect(0, 4607, '\P{^Sc=ethi}', "");
Expect(1, 4680, '\p{Sc=	_ethi}', "");
Expect(0, 4680, '\p{^Sc=	_ethi}', "");
Expect(0, 4680, '\P{Sc=	_ethi}', "");
Expect(1, 4680, '\P{^Sc=	_ethi}', "");
Expect(0, 4607, '\p{Sc=	_ethi}', "");
Expect(1, 4607, '\p{^Sc=	_ethi}', "");
Expect(1, 4607, '\P{Sc=	_ethi}', "");
Expect(0, 4607, '\P{^Sc=	_ethi}', "");
Error('\p{Is_Script=/a/ _Ethiopic}');
Error('\P{Is_Script=/a/ _Ethiopic}');
Expect(1, 4680, '\p{Is_Script=ethiopic}', "");
Expect(0, 4680, '\p{^Is_Script=ethiopic}', "");
Expect(0, 4680, '\P{Is_Script=ethiopic}', "");
Expect(1, 4680, '\P{^Is_Script=ethiopic}', "");
Expect(0, 4607, '\p{Is_Script=ethiopic}', "");
Expect(1, 4607, '\p{^Is_Script=ethiopic}', "");
Expect(1, 4607, '\P{Is_Script=ethiopic}', "");
Expect(0, 4607, '\P{^Is_Script=ethiopic}', "");
Expect(1, 4680, '\p{Is_Script=	Ethiopic}', "");
Expect(0, 4680, '\p{^Is_Script=	Ethiopic}', "");
Expect(0, 4680, '\P{Is_Script=	Ethiopic}', "");
Expect(1, 4680, '\P{^Is_Script=	Ethiopic}', "");
Expect(0, 4607, '\p{Is_Script=	Ethiopic}', "");
Expect(1, 4607, '\p{^Is_Script=	Ethiopic}', "");
Expect(1, 4607, '\P{Is_Script=	Ethiopic}', "");
Expect(0, 4607, '\P{^Is_Script=	Ethiopic}', "");
Error('\p{Is_Sc=_-ETHI/a/}');
Error('\P{Is_Sc=_-ETHI/a/}');
Expect(1, 4680, '\p{Is_Sc=ethi}', "");
Expect(0, 4680, '\p{^Is_Sc=ethi}', "");
Expect(0, 4680, '\P{Is_Sc=ethi}', "");
Expect(1, 4680, '\P{^Is_Sc=ethi}', "");
Expect(0, 4607, '\p{Is_Sc=ethi}', "");
Expect(1, 4607, '\p{^Is_Sc=ethi}', "");
Expect(1, 4607, '\P{Is_Sc=ethi}', "");
Expect(0, 4607, '\P{^Is_Sc=ethi}', "");
Expect(1, 4680, '\p{Is_Sc=-_Ethi}', "");
Expect(0, 4680, '\p{^Is_Sc=-_Ethi}', "");
Expect(0, 4680, '\P{Is_Sc=-_Ethi}', "");
Expect(1, 4680, '\P{^Is_Sc=-_Ethi}', "");
Expect(0, 4607, '\p{Is_Sc=-_Ethi}', "");
Expect(1, 4607, '\p{^Is_Sc=-_Ethi}', "");
Expect(1, 4607, '\P{Is_Sc=-_Ethi}', "");
Expect(0, 4607, '\P{^Is_Sc=-_Ethi}', "");
Error('\p{Script= Hebrew:=}');
Error('\P{Script= Hebrew:=}');
Expect(1, 1479, '\p{Script=hebrew}', "");
Expect(0, 1479, '\p{^Script=hebrew}', "");
Expect(0, 1479, '\P{Script=hebrew}', "");
Expect(1, 1479, '\P{^Script=hebrew}', "");
Expect(0, 1424, '\p{Script=hebrew}', "");
Expect(1, 1424, '\p{^Script=hebrew}', "");
Expect(1, 1424, '\P{Script=hebrew}', "");
Expect(0, 1424, '\P{^Script=hebrew}', "");
Expect(1, 1479, '\p{Script=	hebrew}', "");
Expect(0, 1479, '\p{^Script=	hebrew}', "");
Expect(0, 1479, '\P{Script=	hebrew}', "");
Expect(1, 1479, '\P{^Script=	hebrew}', "");
Expect(0, 1424, '\p{Script=	hebrew}', "");
Expect(1, 1424, '\p{^Script=	hebrew}', "");
Expect(1, 1424, '\P{Script=	hebrew}', "");
Expect(0, 1424, '\P{^Script=	hebrew}', "");
Error('\p{Sc= /a/Hebr}');
Error('\P{Sc= /a/Hebr}');
Expect(1, 1479, '\p{Sc=hebr}', "");
Expect(0, 1479, '\p{^Sc=hebr}', "");
Expect(0, 1479, '\P{Sc=hebr}', "");
Expect(1, 1479, '\P{^Sc=hebr}', "");
Expect(0, 1424, '\p{Sc=hebr}', "");
Expect(1, 1424, '\p{^Sc=hebr}', "");
Expect(1, 1424, '\P{Sc=hebr}', "");
Expect(0, 1424, '\P{^Sc=hebr}', "");
Expect(1, 1479, '\p{Sc=-	hebr}', "");
Expect(0, 1479, '\p{^Sc=-	hebr}', "");
Expect(0, 1479, '\P{Sc=-	hebr}', "");
Expect(1, 1479, '\P{^Sc=-	hebr}', "");
Expect(0, 1424, '\p{Sc=-	hebr}', "");
Expect(1, 1424, '\p{^Sc=-	hebr}', "");
Expect(1, 1424, '\P{Sc=-	hebr}', "");
Expect(0, 1424, '\P{^Sc=-	hebr}', "");
Error('\p{Is_Script=	:=Hebrew}');
Error('\P{Is_Script=	:=Hebrew}');
Expect(1, 1479, '\p{Is_Script=hebrew}', "");
Expect(0, 1479, '\p{^Is_Script=hebrew}', "");
Expect(0, 1479, '\P{Is_Script=hebrew}', "");
Expect(1, 1479, '\P{^Is_Script=hebrew}', "");
Expect(0, 1424, '\p{Is_Script=hebrew}', "");
Expect(1, 1424, '\p{^Is_Script=hebrew}', "");
Expect(1, 1424, '\P{Is_Script=hebrew}', "");
Expect(0, 1424, '\P{^Is_Script=hebrew}', "");
Expect(1, 1479, '\p{Is_Script=-_hebrew}', "");
Expect(0, 1479, '\p{^Is_Script=-_hebrew}', "");
Expect(0, 1479, '\P{Is_Script=-_hebrew}', "");
Expect(1, 1479, '\P{^Is_Script=-_hebrew}', "");
Expect(0, 1424, '\p{Is_Script=-_hebrew}', "");
Expect(1, 1424, '\p{^Is_Script=-_hebrew}', "");
Expect(1, 1424, '\P{Is_Script=-_hebrew}', "");
Expect(0, 1424, '\P{^Is_Script=-_hebrew}', "");
Error('\p{Is_Sc=/a/__Hebr}');
Error('\P{Is_Sc=/a/__Hebr}');
Expect(1, 1479, '\p{Is_Sc=hebr}', "");
Expect(0, 1479, '\p{^Is_Sc=hebr}', "");
Expect(0, 1479, '\P{Is_Sc=hebr}', "");
Expect(1, 1479, '\P{^Is_Sc=hebr}', "");
Expect(0, 1424, '\p{Is_Sc=hebr}', "");
Expect(1, 1424, '\p{^Is_Sc=hebr}', "");
Expect(1, 1424, '\P{Is_Sc=hebr}', "");
Expect(0, 1424, '\P{^Is_Sc=hebr}', "");
Expect(1, 1479, '\p{Is_Sc=_-HEBR}', "");
Expect(0, 1479, '\p{^Is_Sc=_-HEBR}', "");
Expect(0, 1479, '\P{Is_Sc=_-HEBR}', "");
Expect(1, 1479, '\P{^Is_Sc=_-HEBR}', "");
Expect(0, 1424, '\p{Is_Sc=_-HEBR}', "");
Expect(1, 1424, '\p{^Is_Sc=_-HEBR}', "");
Expect(1, 1424, '\P{Is_Sc=_-HEBR}', "");
Expect(0, 1424, '\P{^Is_Sc=_-HEBR}', "");
Error('\p{Script=	_BUGINESE/a/}');
Error('\P{Script=	_BUGINESE/a/}');
Expect(1, 6683, '\p{Script=buginese}', "");
Expect(0, 6683, '\p{^Script=buginese}', "");
Expect(0, 6683, '\P{Script=buginese}', "");
Expect(1, 6683, '\P{^Script=buginese}', "");
Expect(0, 6655, '\p{Script=buginese}', "");
Expect(1, 6655, '\p{^Script=buginese}', "");
Expect(1, 6655, '\P{Script=buginese}', "");
Expect(0, 6655, '\P{^Script=buginese}', "");
Expect(1, 6683, '\p{Script=-	BUGINESE}', "");
Expect(0, 6683, '\p{^Script=-	BUGINESE}', "");
Expect(0, 6683, '\P{Script=-	BUGINESE}', "");
Expect(1, 6683, '\P{^Script=-	BUGINESE}', "");
Expect(0, 6655, '\p{Script=-	BUGINESE}', "");
Expect(1, 6655, '\p{^Script=-	BUGINESE}', "");
Expect(1, 6655, '\P{Script=-	BUGINESE}', "");
Expect(0, 6655, '\P{^Script=-	BUGINESE}', "");
Error('\p{Sc=/a/	BUGI}');
Error('\P{Sc=/a/	BUGI}');
Expect(1, 6683, '\p{Sc=bugi}', "");
Expect(0, 6683, '\p{^Sc=bugi}', "");
Expect(0, 6683, '\P{Sc=bugi}', "");
Expect(1, 6683, '\P{^Sc=bugi}', "");
Expect(0, 6655, '\p{Sc=bugi}', "");
Expect(1, 6655, '\p{^Sc=bugi}', "");
Expect(1, 6655, '\P{Sc=bugi}', "");
Expect(0, 6655, '\P{^Sc=bugi}', "");
Expect(1, 6683, '\p{Sc=- Bugi}', "");
Expect(0, 6683, '\p{^Sc=- Bugi}', "");
Expect(0, 6683, '\P{Sc=- Bugi}', "");
Expect(1, 6683, '\P{^Sc=- Bugi}', "");
Expect(0, 6655, '\p{Sc=- Bugi}', "");
Expect(1, 6655, '\p{^Sc=- Bugi}', "");
Expect(1, 6655, '\P{Sc=- Bugi}', "");
Expect(0, 6655, '\P{^Sc=- Bugi}', "");
Error('\p{Is_Script=_buginese/a/}');
Error('\P{Is_Script=_buginese/a/}');
Expect(1, 6683, '\p{Is_Script=buginese}', "");
Expect(0, 6683, '\p{^Is_Script=buginese}', "");
Expect(0, 6683, '\P{Is_Script=buginese}', "");
Expect(1, 6683, '\P{^Is_Script=buginese}', "");
Expect(0, 6655, '\p{Is_Script=buginese}', "");
Expect(1, 6655, '\p{^Is_Script=buginese}', "");
Expect(1, 6655, '\P{Is_Script=buginese}', "");
Expect(0, 6655, '\P{^Is_Script=buginese}', "");
Expect(1, 6683, '\p{Is_Script=_ Buginese}', "");
Expect(0, 6683, '\p{^Is_Script=_ Buginese}', "");
Expect(0, 6683, '\P{Is_Script=_ Buginese}', "");
Expect(1, 6683, '\P{^Is_Script=_ Buginese}', "");
Expect(0, 6655, '\p{Is_Script=_ Buginese}', "");
Expect(1, 6655, '\p{^Is_Script=_ Buginese}', "");
Expect(1, 6655, '\P{Is_Script=_ Buginese}', "");
Expect(0, 6655, '\P{^Is_Script=_ Buginese}', "");
Error('\p{Is_Sc: -BUGI/a/}');
Error('\P{Is_Sc: -BUGI/a/}');
Expect(1, 6683, '\p{Is_Sc=bugi}', "");
Expect(0, 6683, '\p{^Is_Sc=bugi}', "");
Expect(0, 6683, '\P{Is_Sc=bugi}', "");
Expect(1, 6683, '\P{^Is_Sc=bugi}', "");
Expect(0, 6655, '\p{Is_Sc=bugi}', "");
Expect(1, 6655, '\p{^Is_Sc=bugi}', "");
Expect(1, 6655, '\P{Is_Sc=bugi}', "");
Expect(0, 6655, '\P{^Is_Sc=bugi}', "");
Expect(1, 6683, '\p{Is_Sc= -Bugi}', "");
Expect(0, 6683, '\p{^Is_Sc= -Bugi}', "");
Expect(0, 6683, '\P{Is_Sc= -Bugi}', "");
Expect(1, 6683, '\P{^Is_Sc= -Bugi}', "");
Expect(0, 6655, '\p{Is_Sc= -Bugi}', "");
Expect(1, 6655, '\p{^Is_Sc= -Bugi}', "");
Expect(1, 6655, '\P{Is_Sc= -Bugi}', "");
Expect(0, 6655, '\P{^Is_Sc= -Bugi}', "");
Error('\p{Script: 	/a/Inscriptional Pahlavi}');
Error('\P{Script: 	/a/Inscriptional Pahlavi}');
Expect(1, 68466, '\p{Script=inscriptionalpahlavi}', "");
Expect(0, 68466, '\p{^Script=inscriptionalpahlavi}', "");
Expect(0, 68466, '\P{Script=inscriptionalpahlavi}', "");
Expect(1, 68466, '\P{^Script=inscriptionalpahlavi}', "");
Expect(0, 68447, '\p{Script=inscriptionalpahlavi}', "");
Expect(1, 68447, '\p{^Script=inscriptionalpahlavi}', "");
Expect(1, 68447, '\P{Script=inscriptionalpahlavi}', "");
Expect(0, 68447, '\P{^Script=inscriptionalpahlavi}', "");
Expect(1, 68466, '\p{Script=-inscriptional_pahlavi}', "");
Expect(0, 68466, '\p{^Script=-inscriptional_pahlavi}', "");
Expect(0, 68466, '\P{Script=-inscriptional_pahlavi}', "");
Expect(1, 68466, '\P{^Script=-inscriptional_pahlavi}', "");
Expect(0, 68447, '\p{Script=-inscriptional_pahlavi}', "");
Expect(1, 68447, '\p{^Script=-inscriptional_pahlavi}', "");
Expect(1, 68447, '\P{Script=-inscriptional_pahlavi}', "");
Expect(0, 68447, '\P{^Script=-inscriptional_pahlavi}', "");
Error('\p{Sc=:=_Phli}');
Error('\P{Sc=:=_Phli}');
Expect(1, 68466, '\p{Sc=phli}', "");
Expect(0, 68466, '\p{^Sc=phli}', "");
Expect(0, 68466, '\P{Sc=phli}', "");
Expect(1, 68466, '\P{^Sc=phli}', "");
Expect(0, 68447, '\p{Sc=phli}', "");
Expect(1, 68447, '\p{^Sc=phli}', "");
Expect(1, 68447, '\P{Sc=phli}', "");
Expect(0, 68447, '\P{^Sc=phli}', "");
Expect(1, 68466, '\p{Sc=	 phli}', "");
Expect(0, 68466, '\p{^Sc=	 phli}', "");
Expect(0, 68466, '\P{Sc=	 phli}', "");
Expect(1, 68466, '\P{^Sc=	 phli}', "");
Expect(0, 68447, '\p{Sc=	 phli}', "");
Expect(1, 68447, '\p{^Sc=	 phli}', "");
Expect(1, 68447, '\P{Sc=	 phli}', "");
Expect(0, 68447, '\P{^Sc=	 phli}', "");
Error('\p{Is_Script=__inscriptional/a/pahlavi}');
Error('\P{Is_Script=__inscriptional/a/pahlavi}');
Expect(1, 68466, '\p{Is_Script=inscriptionalpahlavi}', "");
Expect(0, 68466, '\p{^Is_Script=inscriptionalpahlavi}', "");
Expect(0, 68466, '\P{Is_Script=inscriptionalpahlavi}', "");
Expect(1, 68466, '\P{^Is_Script=inscriptionalpahlavi}', "");
Expect(0, 68447, '\p{Is_Script=inscriptionalpahlavi}', "");
Expect(1, 68447, '\p{^Is_Script=inscriptionalpahlavi}', "");
Expect(1, 68447, '\P{Is_Script=inscriptionalpahlavi}', "");
Expect(0, 68447, '\P{^Is_Script=inscriptionalpahlavi}', "");
Expect(1, 68466, '\p{Is_Script=__Inscriptional_pahlavi}', "");
Expect(0, 68466, '\p{^Is_Script=__Inscriptional_pahlavi}', "");
Expect(0, 68466, '\P{Is_Script=__Inscriptional_pahlavi}', "");
Expect(1, 68466, '\P{^Is_Script=__Inscriptional_pahlavi}', "");
Expect(0, 68447, '\p{Is_Script=__Inscriptional_pahlavi}', "");
Expect(1, 68447, '\p{^Is_Script=__Inscriptional_pahlavi}', "");
Expect(1, 68447, '\P{Is_Script=__Inscriptional_pahlavi}', "");
Expect(0, 68447, '\P{^Is_Script=__Inscriptional_pahlavi}', "");
Error('\p{Is_Sc=/a/__Phli}');
Error('\P{Is_Sc=/a/__Phli}');
Expect(1, 68466, '\p{Is_Sc=phli}', "");
Expect(0, 68466, '\p{^Is_Sc=phli}', "");
Expect(0, 68466, '\P{Is_Sc=phli}', "");
Expect(1, 68466, '\P{^Is_Sc=phli}', "");
Expect(0, 68447, '\p{Is_Sc=phli}', "");
Expect(1, 68447, '\p{^Is_Sc=phli}', "");
Expect(1, 68447, '\P{Is_Sc=phli}', "");
Expect(0, 68447, '\P{^Is_Sc=phli}', "");
Expect(1, 68466, '\p{Is_Sc=Phli}', "");
Expect(0, 68466, '\p{^Is_Sc=Phli}', "");
Expect(0, 68466, '\P{Is_Sc=Phli}', "");
Expect(1, 68466, '\P{^Is_Sc=Phli}', "");
Expect(0, 68447, '\p{Is_Sc=Phli}', "");
Expect(1, 68447, '\p{^Is_Sc=Phli}', "");
Expect(1, 68447, '\P{Is_Sc=Phli}', "");
Expect(0, 68447, '\P{^Is_Sc=Phli}', "");
Error('\p{Script=/a/	Mandaic}');
Error('\P{Script=/a/	Mandaic}');
Expect(1, 2139, '\p{Script=mandaic}', "");
Expect(0, 2139, '\p{^Script=mandaic}', "");
Expect(0, 2139, '\P{Script=mandaic}', "");
Expect(1, 2139, '\P{^Script=mandaic}', "");
Expect(0, 2111, '\p{Script=mandaic}', "");
Expect(1, 2111, '\p{^Script=mandaic}', "");
Expect(1, 2111, '\P{Script=mandaic}', "");
Expect(0, 2111, '\P{^Script=mandaic}', "");
Expect(1, 2139, '\p{Script=_-MANDAIC}', "");
Expect(0, 2139, '\p{^Script=_-MANDAIC}', "");
Expect(0, 2139, '\P{Script=_-MANDAIC}', "");
Expect(1, 2139, '\P{^Script=_-MANDAIC}', "");
Expect(0, 2111, '\p{Script=_-MANDAIC}', "");
Expect(1, 2111, '\p{^Script=_-MANDAIC}', "");
Expect(1, 2111, '\P{Script=_-MANDAIC}', "");
Expect(0, 2111, '\P{^Script=_-MANDAIC}', "");
Error('\p{Sc=_mand:=}');
Error('\P{Sc=_mand:=}');
Expect(1, 2139, '\p{Sc=mand}', "");
Expect(0, 2139, '\p{^Sc=mand}', "");
Expect(0, 2139, '\P{Sc=mand}', "");
Expect(1, 2139, '\P{^Sc=mand}', "");
Expect(0, 2111, '\p{Sc=mand}', "");
Expect(1, 2111, '\p{^Sc=mand}', "");
Expect(1, 2111, '\P{Sc=mand}', "");
Expect(0, 2111, '\P{^Sc=mand}', "");
Expect(1, 2139, '\p{Sc=-mand}', "");
Expect(0, 2139, '\p{^Sc=-mand}', "");
Expect(0, 2139, '\P{Sc=-mand}', "");
Expect(1, 2139, '\P{^Sc=-mand}', "");
Expect(0, 2111, '\p{Sc=-mand}', "");
Expect(1, 2111, '\p{^Sc=-mand}', "");
Expect(1, 2111, '\P{Sc=-mand}', "");
Expect(0, 2111, '\P{^Sc=-mand}', "");
Error('\p{Is_Script=:=Mandaic}');
Error('\P{Is_Script=:=Mandaic}');
Expect(1, 2139, '\p{Is_Script=mandaic}', "");
Expect(0, 2139, '\p{^Is_Script=mandaic}', "");
Expect(0, 2139, '\P{Is_Script=mandaic}', "");
Expect(1, 2139, '\P{^Is_Script=mandaic}', "");
Expect(0, 2111, '\p{Is_Script=mandaic}', "");
Expect(1, 2111, '\p{^Is_Script=mandaic}', "");
Expect(1, 2111, '\P{Is_Script=mandaic}', "");
Expect(0, 2111, '\P{^Is_Script=mandaic}', "");
Expect(1, 2139, '\p{Is_Script=-_MANDAIC}', "");
Expect(0, 2139, '\p{^Is_Script=-_MANDAIC}', "");
Expect(0, 2139, '\P{Is_Script=-_MANDAIC}', "");
Expect(1, 2139, '\P{^Is_Script=-_MANDAIC}', "");
Expect(0, 2111, '\p{Is_Script=-_MANDAIC}', "");
Expect(1, 2111, '\p{^Is_Script=-_MANDAIC}', "");
Expect(1, 2111, '\P{Is_Script=-_MANDAIC}', "");
Expect(0, 2111, '\P{^Is_Script=-_MANDAIC}', "");
Error('\p{Is_Sc= -mand/a/}');
Error('\P{Is_Sc= -mand/a/}');
Expect(1, 2139, '\p{Is_Sc=mand}', "");
Expect(0, 2139, '\p{^Is_Sc=mand}', "");
Expect(0, 2139, '\P{Is_Sc=mand}', "");
Expect(1, 2139, '\P{^Is_Sc=mand}', "");
Expect(0, 2111, '\p{Is_Sc=mand}', "");
Expect(1, 2111, '\p{^Is_Sc=mand}', "");
Expect(1, 2111, '\P{Is_Sc=mand}', "");
Expect(0, 2111, '\P{^Is_Sc=mand}', "");
Expect(1, 2139, '\p{Is_Sc= Mand}', "");
Expect(0, 2139, '\p{^Is_Sc= Mand}', "");
Expect(0, 2139, '\P{Is_Sc= Mand}', "");
Expect(1, 2139, '\P{^Is_Sc= Mand}', "");
Expect(0, 2111, '\p{Is_Sc= Mand}', "");
Expect(1, 2111, '\p{^Is_Sc= Mand}', "");
Expect(1, 2111, '\P{Is_Sc= Mand}', "");
Expect(0, 2111, '\P{^Is_Sc= Mand}', "");
Error('\p{Script=/a/_ taiTHAM}');
Error('\P{Script=/a/_ taiTHAM}');
Expect(1, 6750, '\p{Script=taitham}', "");
Expect(0, 6750, '\p{^Script=taitham}', "");
Expect(0, 6750, '\P{Script=taitham}', "");
Expect(1, 6750, '\P{^Script=taitham}', "");
Expect(0, 6687, '\p{Script=taitham}', "");
Expect(1, 6687, '\p{^Script=taitham}', "");
Expect(1, 6687, '\P{Script=taitham}', "");
Expect(0, 6687, '\P{^Script=taitham}', "");
Expect(1, 6750, '\p{Script=_	TaiTham}', "");
Expect(0, 6750, '\p{^Script=_	TaiTham}', "");
Expect(0, 6750, '\P{Script=_	TaiTham}', "");
Expect(1, 6750, '\P{^Script=_	TaiTham}', "");
Expect(0, 6687, '\p{Script=_	TaiTham}', "");
Expect(1, 6687, '\p{^Script=_	TaiTham}', "");
Expect(1, 6687, '\P{Script=_	TaiTham}', "");
Expect(0, 6687, '\P{^Script=_	TaiTham}', "");
Error('\p{Sc=-	Lana/a/}');
Error('\P{Sc=-	Lana/a/}');
Expect(1, 6750, '\p{Sc=lana}', "");
Expect(0, 6750, '\p{^Sc=lana}', "");
Expect(0, 6750, '\P{Sc=lana}', "");
Expect(1, 6750, '\P{^Sc=lana}', "");
Expect(0, 6687, '\p{Sc=lana}', "");
Expect(1, 6687, '\p{^Sc=lana}', "");
Expect(1, 6687, '\P{Sc=lana}', "");
Expect(0, 6687, '\P{^Sc=lana}', "");
Expect(1, 6750, '\p{Sc= 	LANA}', "");
Expect(0, 6750, '\p{^Sc= 	LANA}', "");
Expect(0, 6750, '\P{Sc= 	LANA}', "");
Expect(1, 6750, '\P{^Sc= 	LANA}', "");
Expect(0, 6687, '\p{Sc= 	LANA}', "");
Expect(1, 6687, '\p{^Sc= 	LANA}', "");
Expect(1, 6687, '\P{Sc= 	LANA}', "");
Expect(0, 6687, '\P{^Sc= 	LANA}', "");
Error('\p{Is_Script=/a/tai_Tham}');
Error('\P{Is_Script=/a/tai_Tham}');
Expect(1, 6750, '\p{Is_Script=taitham}', "");
Expect(0, 6750, '\p{^Is_Script=taitham}', "");
Expect(0, 6750, '\P{Is_Script=taitham}', "");
Expect(1, 6750, '\P{^Is_Script=taitham}', "");
Expect(0, 6687, '\p{Is_Script=taitham}', "");
Expect(1, 6687, '\p{^Is_Script=taitham}', "");
Expect(1, 6687, '\P{Is_Script=taitham}', "");
Expect(0, 6687, '\P{^Is_Script=taitham}', "");
Expect(1, 6750, '\p{Is_Script=  Tai-THAM}', "");
Expect(0, 6750, '\p{^Is_Script=  Tai-THAM}', "");
Expect(0, 6750, '\P{Is_Script=  Tai-THAM}', "");
Expect(1, 6750, '\P{^Is_Script=  Tai-THAM}', "");
Expect(0, 6687, '\p{Is_Script=  Tai-THAM}', "");
Expect(1, 6687, '\p{^Is_Script=  Tai-THAM}', "");
Expect(1, 6687, '\P{Is_Script=  Tai-THAM}', "");
Expect(0, 6687, '\P{^Is_Script=  Tai-THAM}', "");
Error('\p{Is_Sc=:=_LANA}');
Error('\P{Is_Sc=:=_LANA}');
Expect(1, 6750, '\p{Is_Sc: lana}', "");
Expect(0, 6750, '\p{^Is_Sc: lana}', "");
Expect(0, 6750, '\P{Is_Sc: lana}', "");
Expect(1, 6750, '\P{^Is_Sc: lana}', "");
Expect(0, 6687, '\p{Is_Sc: lana}', "");
Expect(1, 6687, '\p{^Is_Sc: lana}', "");
Expect(1, 6687, '\P{Is_Sc: lana}', "");
Expect(0, 6687, '\P{^Is_Sc: lana}', "");
Expect(1, 6750, '\p{Is_Sc=	 Lana}', "");
Expect(0, 6750, '\p{^Is_Sc=	 Lana}', "");
Expect(0, 6750, '\P{Is_Sc=	 Lana}', "");
Expect(1, 6750, '\P{^Is_Sc=	 Lana}', "");
Expect(0, 6687, '\p{Is_Sc=	 Lana}', "");
Expect(1, 6687, '\p{^Is_Sc=	 Lana}', "");
Expect(1, 6687, '\P{Is_Sc=	 Lana}', "");
Expect(0, 6687, '\P{^Is_Sc=	 Lana}', "");
Error('\p{Script=_ Gurmukhi/a/}');
Error('\P{Script=_ Gurmukhi/a/}');
Expect(1, 2563, '\p{Script=gurmukhi}', "");
Expect(0, 2563, '\p{^Script=gurmukhi}', "");
Expect(0, 2563, '\P{Script=gurmukhi}', "");
Expect(1, 2563, '\P{^Script=gurmukhi}', "");
Expect(0, 2560, '\p{Script=gurmukhi}', "");
Expect(1, 2560, '\p{^Script=gurmukhi}', "");
Expect(1, 2560, '\P{Script=gurmukhi}', "");
Expect(0, 2560, '\P{^Script=gurmukhi}', "");
Expect(1, 2563, '\p{Script=	Gurmukhi}', "");
Expect(0, 2563, '\p{^Script=	Gurmukhi}', "");
Expect(0, 2563, '\P{Script=	Gurmukhi}', "");
Expect(1, 2563, '\P{^Script=	Gurmukhi}', "");
Expect(0, 2560, '\p{Script=	Gurmukhi}', "");
Expect(1, 2560, '\p{^Script=	Gurmukhi}', "");
Expect(1, 2560, '\P{Script=	Gurmukhi}', "");
Expect(0, 2560, '\P{^Script=	Gurmukhi}', "");
Error('\p{Sc=_guru:=}');
Error('\P{Sc=_guru:=}');
Expect(1, 2563, '\p{Sc=guru}', "");
Expect(0, 2563, '\p{^Sc=guru}', "");
Expect(0, 2563, '\P{Sc=guru}', "");
Expect(1, 2563, '\P{^Sc=guru}', "");
Expect(0, 2560, '\p{Sc=guru}', "");
Expect(1, 2560, '\p{^Sc=guru}', "");
Expect(1, 2560, '\P{Sc=guru}', "");
Expect(0, 2560, '\P{^Sc=guru}', "");
Expect(1, 2563, '\p{Sc=-_guru}', "");
Expect(0, 2563, '\p{^Sc=-_guru}', "");
Expect(0, 2563, '\P{Sc=-_guru}', "");
Expect(1, 2563, '\P{^Sc=-_guru}', "");
Expect(0, 2560, '\p{Sc=-_guru}', "");
Expect(1, 2560, '\p{^Sc=-_guru}', "");
Expect(1, 2560, '\P{Sc=-_guru}', "");
Expect(0, 2560, '\P{^Sc=-_guru}', "");
Error('\p{Is_Script=  Gurmukhi:=}');
Error('\P{Is_Script=  Gurmukhi:=}');
Expect(1, 2563, '\p{Is_Script=gurmukhi}', "");
Expect(0, 2563, '\p{^Is_Script=gurmukhi}', "");
Expect(0, 2563, '\P{Is_Script=gurmukhi}', "");
Expect(1, 2563, '\P{^Is_Script=gurmukhi}', "");
Expect(0, 2560, '\p{Is_Script=gurmukhi}', "");
Expect(1, 2560, '\p{^Is_Script=gurmukhi}', "");
Expect(1, 2560, '\P{Is_Script=gurmukhi}', "");
Expect(0, 2560, '\P{^Is_Script=gurmukhi}', "");
Expect(1, 2563, '\p{Is_Script=	Gurmukhi}', "");
Expect(0, 2563, '\p{^Is_Script=	Gurmukhi}', "");
Expect(0, 2563, '\P{Is_Script=	Gurmukhi}', "");
Expect(1, 2563, '\P{^Is_Script=	Gurmukhi}', "");
Expect(0, 2560, '\p{Is_Script=	Gurmukhi}', "");
Expect(1, 2560, '\p{^Is_Script=	Gurmukhi}', "");
Expect(1, 2560, '\P{Is_Script=	Gurmukhi}', "");
Expect(0, 2560, '\P{^Is_Script=	Gurmukhi}', "");
Error('\p{Is_Sc=/a/--Guru}');
Error('\P{Is_Sc=/a/--Guru}');
Expect(1, 2563, '\p{Is_Sc=guru}', "");
Expect(0, 2563, '\p{^Is_Sc=guru}', "");
Expect(0, 2563, '\P{Is_Sc=guru}', "");
Expect(1, 2563, '\P{^Is_Sc=guru}', "");
Expect(0, 2560, '\p{Is_Sc=guru}', "");
Expect(1, 2560, '\p{^Is_Sc=guru}', "");
Expect(1, 2560, '\P{Is_Sc=guru}', "");
Expect(0, 2560, '\P{^Is_Sc=guru}', "");
Expect(1, 2563, '\p{Is_Sc=_-Guru}', "");
Expect(0, 2563, '\p{^Is_Sc=_-Guru}', "");
Expect(0, 2563, '\P{Is_Sc=_-Guru}', "");
Expect(1, 2563, '\P{^Is_Sc=_-Guru}', "");
Expect(0, 2560, '\p{Is_Sc=_-Guru}', "");
Expect(1, 2560, '\p{^Is_Sc=_-Guru}', "");
Expect(1, 2560, '\P{Is_Sc=_-Guru}', "");
Expect(0, 2560, '\P{^Is_Sc=_-Guru}', "");
Error('\p{Script=	_Cypriot/a/}');
Error('\P{Script=	_Cypriot/a/}');
Expect(1, 67589, '\p{Script=cypriot}', "");
Expect(0, 67589, '\p{^Script=cypriot}', "");
Expect(0, 67589, '\P{Script=cypriot}', "");
Expect(1, 67589, '\P{^Script=cypriot}', "");
Expect(0, 67583, '\p{Script=cypriot}', "");
Expect(1, 67583, '\p{^Script=cypriot}', "");
Expect(1, 67583, '\P{Script=cypriot}', "");
Expect(0, 67583, '\P{^Script=cypriot}', "");
Expect(1, 67589, '\p{Script=	Cypriot}', "");
Expect(0, 67589, '\p{^Script=	Cypriot}', "");
Expect(0, 67589, '\P{Script=	Cypriot}', "");
Expect(1, 67589, '\P{^Script=	Cypriot}', "");
Expect(0, 67583, '\p{Script=	Cypriot}', "");
Expect(1, 67583, '\p{^Script=	Cypriot}', "");
Expect(1, 67583, '\P{Script=	Cypriot}', "");
Expect(0, 67583, '\P{^Script=	Cypriot}', "");
Error('\p{Sc=	/a/Cprt}');
Error('\P{Sc=	/a/Cprt}');
Expect(1, 67589, '\p{Sc=cprt}', "");
Expect(0, 67589, '\p{^Sc=cprt}', "");
Expect(0, 67589, '\P{Sc=cprt}', "");
Expect(1, 67589, '\P{^Sc=cprt}', "");
Expect(0, 67583, '\p{Sc=cprt}', "");
Expect(1, 67583, '\p{^Sc=cprt}', "");
Expect(1, 67583, '\P{Sc=cprt}', "");
Expect(0, 67583, '\P{^Sc=cprt}', "");
Expect(1, 67589, '\p{Sc= cprt}', "");
Expect(0, 67589, '\p{^Sc= cprt}', "");
Expect(0, 67589, '\P{Sc= cprt}', "");
Expect(1, 67589, '\P{^Sc= cprt}', "");
Expect(0, 67583, '\p{Sc= cprt}', "");
Expect(1, 67583, '\p{^Sc= cprt}', "");
Expect(1, 67583, '\P{Sc= cprt}', "");
Expect(0, 67583, '\P{^Sc= cprt}', "");
Error('\p{Is_Script=:= cypriot}');
Error('\P{Is_Script=:= cypriot}');
Expect(1, 67589, '\p{Is_Script=cypriot}', "");
Expect(0, 67589, '\p{^Is_Script=cypriot}', "");
Expect(0, 67589, '\P{Is_Script=cypriot}', "");
Expect(1, 67589, '\P{^Is_Script=cypriot}', "");
Expect(0, 67583, '\p{Is_Script=cypriot}', "");
Expect(1, 67583, '\p{^Is_Script=cypriot}', "");
Expect(1, 67583, '\P{Is_Script=cypriot}', "");
Expect(0, 67583, '\P{^Is_Script=cypriot}', "");
Expect(1, 67589, '\p{Is_Script=_-CYPRIOT}', "");
Expect(0, 67589, '\p{^Is_Script=_-CYPRIOT}', "");
Expect(0, 67589, '\P{Is_Script=_-CYPRIOT}', "");
Expect(1, 67589, '\P{^Is_Script=_-CYPRIOT}', "");
Expect(0, 67583, '\p{Is_Script=_-CYPRIOT}', "");
Expect(1, 67583, '\p{^Is_Script=_-CYPRIOT}', "");
Expect(1, 67583, '\P{Is_Script=_-CYPRIOT}', "");
Expect(0, 67583, '\P{^Is_Script=_-CYPRIOT}', "");
Error('\p{Is_Sc=  CPRT/a/}');
Error('\P{Is_Sc=  CPRT/a/}');
Expect(1, 67589, '\p{Is_Sc=cprt}', "");
Expect(0, 67589, '\p{^Is_Sc=cprt}', "");
Expect(0, 67589, '\P{Is_Sc=cprt}', "");
Expect(1, 67589, '\P{^Is_Sc=cprt}', "");
Expect(0, 67583, '\p{Is_Sc=cprt}', "");
Expect(1, 67583, '\p{^Is_Sc=cprt}', "");
Expect(1, 67583, '\P{Is_Sc=cprt}', "");
Expect(0, 67583, '\P{^Is_Sc=cprt}', "");
Expect(1, 67589, '\p{Is_Sc=__cprt}', "");
Expect(0, 67589, '\p{^Is_Sc=__cprt}', "");
Expect(0, 67589, '\P{Is_Sc=__cprt}', "");
Expect(1, 67589, '\P{^Is_Sc=__cprt}', "");
Expect(0, 67583, '\p{Is_Sc=__cprt}', "");
Expect(1, 67583, '\p{^Is_Sc=__cprt}', "");
Expect(1, 67583, '\P{Is_Sc=__cprt}', "");
Expect(0, 67583, '\P{^Is_Sc=__cprt}', "");
Error('\p{Script=:=_-Batak}');
Error('\P{Script=:=_-Batak}');
Expect(1, 7155, '\p{Script=batak}', "");
Expect(0, 7155, '\p{^Script=batak}', "");
Expect(0, 7155, '\P{Script=batak}', "");
Expect(1, 7155, '\P{^Script=batak}', "");
Expect(0, 7103, '\p{Script=batak}', "");
Expect(1, 7103, '\p{^Script=batak}', "");
Expect(1, 7103, '\P{Script=batak}', "");
Expect(0, 7103, '\P{^Script=batak}', "");
Expect(1, 7155, '\p{Script=__Batak}', "");
Expect(0, 7155, '\p{^Script=__Batak}', "");
Expect(0, 7155, '\P{Script=__Batak}', "");
Expect(1, 7155, '\P{^Script=__Batak}', "");
Expect(0, 7103, '\p{Script=__Batak}', "");
Expect(1, 7103, '\p{^Script=__Batak}', "");
Expect(1, 7103, '\P{Script=__Batak}', "");
Expect(0, 7103, '\P{^Script=__Batak}', "");
Error('\p{Sc= :=BATK}');
Error('\P{Sc= :=BATK}');
Expect(1, 7155, '\p{Sc=batk}', "");
Expect(0, 7155, '\p{^Sc=batk}', "");
Expect(0, 7155, '\P{Sc=batk}', "");
Expect(1, 7155, '\P{^Sc=batk}', "");
Expect(0, 7103, '\p{Sc=batk}', "");
Expect(1, 7103, '\p{^Sc=batk}', "");
Expect(1, 7103, '\P{Sc=batk}', "");
Expect(0, 7103, '\P{^Sc=batk}', "");
Expect(1, 7155, '\p{Sc=	 BATK}', "");
Expect(0, 7155, '\p{^Sc=	 BATK}', "");
Expect(0, 7155, '\P{Sc=	 BATK}', "");
Expect(1, 7155, '\P{^Sc=	 BATK}', "");
Expect(0, 7103, '\p{Sc=	 BATK}', "");
Expect(1, 7103, '\p{^Sc=	 BATK}', "");
Expect(1, 7103, '\P{Sc=	 BATK}', "");
Expect(0, 7103, '\P{^Sc=	 BATK}', "");
Error('\p{Is_Script=-_BATAK:=}');
Error('\P{Is_Script=-_BATAK:=}');
Expect(1, 7155, '\p{Is_Script=batak}', "");
Expect(0, 7155, '\p{^Is_Script=batak}', "");
Expect(0, 7155, '\P{Is_Script=batak}', "");
Expect(1, 7155, '\P{^Is_Script=batak}', "");
Expect(0, 7103, '\p{Is_Script=batak}', "");
Expect(1, 7103, '\p{^Is_Script=batak}', "");
Expect(1, 7103, '\P{Is_Script=batak}', "");
Expect(0, 7103, '\P{^Is_Script=batak}', "");
Expect(1, 7155, '\p{Is_Script=_ Batak}', "");
Expect(0, 7155, '\p{^Is_Script=_ Batak}', "");
Expect(0, 7155, '\P{Is_Script=_ Batak}', "");
Expect(1, 7155, '\P{^Is_Script=_ Batak}', "");
Expect(0, 7103, '\p{Is_Script=_ Batak}', "");
Expect(1, 7103, '\p{^Is_Script=_ Batak}', "");
Expect(1, 7103, '\P{Is_Script=_ Batak}', "");
Expect(0, 7103, '\P{^Is_Script=_ Batak}', "");
Error('\p{Is_Sc: /a/	_Batk}');
Error('\P{Is_Sc: /a/	_Batk}');
Expect(1, 7155, '\p{Is_Sc=batk}', "");
Expect(0, 7155, '\p{^Is_Sc=batk}', "");
Expect(0, 7155, '\P{Is_Sc=batk}', "");
Expect(1, 7155, '\P{^Is_Sc=batk}', "");
Expect(0, 7103, '\p{Is_Sc=batk}', "");
Expect(1, 7103, '\p{^Is_Sc=batk}', "");
Expect(1, 7103, '\P{Is_Sc=batk}', "");
Expect(0, 7103, '\P{^Is_Sc=batk}', "");
Expect(1, 7155, '\p{Is_Sc: -Batk}', "");
Expect(0, 7155, '\p{^Is_Sc: -Batk}', "");
Expect(0, 7155, '\P{Is_Sc: -Batk}', "");
Expect(1, 7155, '\P{^Is_Sc: -Batk}', "");
Expect(0, 7103, '\p{Is_Sc: -Batk}', "");
Expect(1, 7103, '\p{^Is_Sc: -Batk}', "");
Expect(1, 7103, '\P{Is_Sc: -Batk}', "");
Expect(0, 7103, '\P{^Is_Sc: -Batk}', "");
Error('\p{Script:   _Hangul:=}');
Error('\P{Script:   _Hangul:=}');
Expect(1, 4607, '\p{Script=hangul}', "");
Expect(0, 4607, '\p{^Script=hangul}', "");
Expect(0, 4607, '\P{Script=hangul}', "");
Expect(1, 4607, '\P{^Script=hangul}', "");
Expect(0, 4351, '\p{Script=hangul}', "");
Expect(1, 4351, '\p{^Script=hangul}', "");
Expect(1, 4351, '\P{Script=hangul}', "");
Expect(0, 4351, '\P{^Script=hangul}', "");
Expect(1, 4607, '\p{Script=	_hangul}', "");
Expect(0, 4607, '\p{^Script=	_hangul}', "");
Expect(0, 4607, '\P{Script=	_hangul}', "");
Expect(1, 4607, '\P{^Script=	_hangul}', "");
Expect(0, 4351, '\p{Script=	_hangul}', "");
Expect(1, 4351, '\p{^Script=	_hangul}', "");
Expect(1, 4351, '\P{Script=	_hangul}', "");
Expect(0, 4351, '\P{^Script=	_hangul}', "");
Error('\p{Sc= :=Hang}');
Error('\P{Sc= :=Hang}');
Expect(1, 4607, '\p{Sc:hang}', "");
Expect(0, 4607, '\p{^Sc:hang}', "");
Expect(0, 4607, '\P{Sc:hang}', "");
Expect(1, 4607, '\P{^Sc:hang}', "");
Expect(0, 4351, '\p{Sc:hang}', "");
Expect(1, 4351, '\p{^Sc:hang}', "");
Expect(1, 4351, '\P{Sc:hang}', "");
Expect(0, 4351, '\P{^Sc:hang}', "");
Expect(1, 4607, '\p{Sc=  Hang}', "");
Expect(0, 4607, '\p{^Sc=  Hang}', "");
Expect(0, 4607, '\P{Sc=  Hang}', "");
Expect(1, 4607, '\P{^Sc=  Hang}', "");
Expect(0, 4351, '\p{Sc=  Hang}', "");
Expect(1, 4351, '\p{^Sc=  Hang}', "");
Expect(1, 4351, '\P{Sc=  Hang}', "");
Expect(0, 4351, '\P{^Sc=  Hang}', "");
Error('\p{Is_Script=_	hangul:=}');
Error('\P{Is_Script=_	hangul:=}');
Expect(1, 4607, '\p{Is_Script=hangul}', "");
Expect(0, 4607, '\p{^Is_Script=hangul}', "");
Expect(0, 4607, '\P{Is_Script=hangul}', "");
Expect(1, 4607, '\P{^Is_Script=hangul}', "");
Expect(0, 4351, '\p{Is_Script=hangul}', "");
Expect(1, 4351, '\p{^Is_Script=hangul}', "");
Expect(1, 4351, '\P{Is_Script=hangul}', "");
Expect(0, 4351, '\P{^Is_Script=hangul}', "");
Expect(1, 4607, '\p{Is_Script:-_HANGUL}', "");
Expect(0, 4607, '\p{^Is_Script:-_HANGUL}', "");
Expect(0, 4607, '\P{Is_Script:-_HANGUL}', "");
Expect(1, 4607, '\P{^Is_Script:-_HANGUL}', "");
Expect(0, 4351, '\p{Is_Script:-_HANGUL}', "");
Expect(1, 4351, '\p{^Is_Script:-_HANGUL}', "");
Expect(1, 4351, '\P{Is_Script:-_HANGUL}', "");
Expect(0, 4351, '\P{^Is_Script:-_HANGUL}', "");
Error('\p{Is_Sc=:=_-Hang}');
Error('\P{Is_Sc=:=_-Hang}');
Expect(1, 4607, '\p{Is_Sc=hang}', "");
Expect(0, 4607, '\p{^Is_Sc=hang}', "");
Expect(0, 4607, '\P{Is_Sc=hang}', "");
Expect(1, 4607, '\P{^Is_Sc=hang}', "");
Expect(0, 4351, '\p{Is_Sc=hang}', "");
Expect(1, 4351, '\p{^Is_Sc=hang}', "");
Expect(1, 4351, '\P{Is_Sc=hang}', "");
Expect(0, 4351, '\P{^Is_Sc=hang}', "");
Expect(1, 4607, '\p{Is_Sc: _hang}', "");
Expect(0, 4607, '\p{^Is_Sc: _hang}', "");
Expect(0, 4607, '\P{Is_Sc: _hang}', "");
Expect(1, 4607, '\P{^Is_Sc: _hang}', "");
Expect(0, 4351, '\p{Is_Sc: _hang}', "");
Expect(1, 4351, '\p{^Is_Sc: _hang}', "");
Expect(1, 4351, '\P{Is_Sc: _hang}', "");
Expect(0, 4351, '\P{^Is_Sc: _hang}', "");
Error('\p{Script=/a/Unknown}');
Error('\P{Script=/a/Unknown}');
Expect(1, 889, '\p{Script=unknown}', "");
Expect(0, 889, '\p{^Script=unknown}', "");
Expect(0, 889, '\P{Script=unknown}', "");
Expect(1, 889, '\P{^Script=unknown}', "");
Expect(0, 887, '\p{Script=unknown}', "");
Expect(1, 887, '\p{^Script=unknown}', "");
Expect(1, 887, '\P{Script=unknown}', "");
Expect(0, 887, '\P{^Script=unknown}', "");
Expect(1, 889, '\p{Script=Unknown}', "");
Expect(0, 889, '\p{^Script=Unknown}', "");
Expect(0, 889, '\P{Script=Unknown}', "");
Expect(1, 889, '\P{^Script=Unknown}', "");
Expect(0, 887, '\p{Script=Unknown}', "");
Expect(1, 887, '\p{^Script=Unknown}', "");
Expect(1, 887, '\P{Script=Unknown}', "");
Expect(0, 887, '\P{^Script=Unknown}', "");
Error('\p{Sc= /a/ZZZZ}');
Error('\P{Sc= /a/ZZZZ}');
Expect(1, 889, '\p{Sc=zzzz}', "");
Expect(0, 889, '\p{^Sc=zzzz}', "");
Expect(0, 889, '\P{Sc=zzzz}', "");
Expect(1, 889, '\P{^Sc=zzzz}', "");
Expect(0, 887, '\p{Sc=zzzz}', "");
Expect(1, 887, '\p{^Sc=zzzz}', "");
Expect(1, 887, '\P{Sc=zzzz}', "");
Expect(0, 887, '\P{^Sc=zzzz}', "");
Expect(1, 889, '\p{Sc=	 ZZZZ}', "");
Expect(0, 889, '\p{^Sc=	 ZZZZ}', "");
Expect(0, 889, '\P{Sc=	 ZZZZ}', "");
Expect(1, 889, '\P{^Sc=	 ZZZZ}', "");
Expect(0, 887, '\p{Sc=	 ZZZZ}', "");
Expect(1, 887, '\p{^Sc=	 ZZZZ}', "");
Expect(1, 887, '\P{Sc=	 ZZZZ}', "");
Expect(0, 887, '\P{^Sc=	 ZZZZ}', "");
Error('\p{Is_Script=:=  Unknown}');
Error('\P{Is_Script=:=  Unknown}');
Expect(1, 889, '\p{Is_Script=unknown}', "");
Expect(0, 889, '\p{^Is_Script=unknown}', "");
Expect(0, 889, '\P{Is_Script=unknown}', "");
Expect(1, 889, '\P{^Is_Script=unknown}', "");
Expect(0, 887, '\p{Is_Script=unknown}', "");
Expect(1, 887, '\p{^Is_Script=unknown}', "");
Expect(1, 887, '\P{Is_Script=unknown}', "");
Expect(0, 887, '\P{^Is_Script=unknown}', "");
Expect(1, 889, '\p{Is_Script=-unknown}', "");
Expect(0, 889, '\p{^Is_Script=-unknown}', "");
Expect(0, 889, '\P{Is_Script=-unknown}', "");
Expect(1, 889, '\P{^Is_Script=-unknown}', "");
Expect(0, 887, '\p{Is_Script=-unknown}', "");
Expect(1, 887, '\p{^Is_Script=-unknown}', "");
Expect(1, 887, '\P{Is_Script=-unknown}', "");
Expect(0, 887, '\P{^Is_Script=-unknown}', "");
Error('\p{Is_Sc=:=zzzz}');
Error('\P{Is_Sc=:=zzzz}');
Expect(1, 889, '\p{Is_Sc=zzzz}', "");
Expect(0, 889, '\p{^Is_Sc=zzzz}', "");
Expect(0, 889, '\P{Is_Sc=zzzz}', "");
Expect(1, 889, '\P{^Is_Sc=zzzz}', "");
Expect(0, 887, '\p{Is_Sc=zzzz}', "");
Expect(1, 887, '\p{^Is_Sc=zzzz}', "");
Expect(1, 887, '\P{Is_Sc=zzzz}', "");
Expect(0, 887, '\P{^Is_Sc=zzzz}', "");
Expect(1, 889, '\p{Is_Sc:	 	ZZZZ}', "");
Expect(0, 889, '\p{^Is_Sc:	 	ZZZZ}', "");
Expect(0, 889, '\P{Is_Sc:	 	ZZZZ}', "");
Expect(1, 889, '\P{^Is_Sc:	 	ZZZZ}', "");
Expect(0, 887, '\p{Is_Sc:	 	ZZZZ}', "");
Expect(1, 887, '\p{^Is_Sc:	 	ZZZZ}', "");
Expect(1, 887, '\P{Is_Sc:	 	ZZZZ}', "");
Expect(0, 887, '\P{^Is_Sc:	 	ZZZZ}', "");
Error('\p{Script=:=_Deseret}');
Error('\P{Script=:=_Deseret}');
Expect(1, 66639, '\p{Script=deseret}', "");
Expect(0, 66639, '\p{^Script=deseret}', "");
Expect(0, 66639, '\P{Script=deseret}', "");
Expect(1, 66639, '\P{^Script=deseret}', "");
Expect(0, 66559, '\p{Script=deseret}', "");
Expect(1, 66559, '\p{^Script=deseret}', "");
Expect(1, 66559, '\P{Script=deseret}', "");
Expect(0, 66559, '\P{^Script=deseret}', "");
Expect(1, 66639, '\p{Script:_deseret}', "");
Expect(0, 66639, '\p{^Script:_deseret}', "");
Expect(0, 66639, '\P{Script:_deseret}', "");
Expect(1, 66639, '\P{^Script:_deseret}', "");
Expect(0, 66559, '\p{Script:_deseret}', "");
Expect(1, 66559, '\p{^Script:_deseret}', "");
Expect(1, 66559, '\P{Script:_deseret}', "");
Expect(0, 66559, '\P{^Script:_deseret}', "");
Error('\p{Sc= :=Dsrt}');
Error('\P{Sc= :=Dsrt}');
Expect(1, 66639, '\p{Sc=dsrt}', "");
Expect(0, 66639, '\p{^Sc=dsrt}', "");
Expect(0, 66639, '\P{Sc=dsrt}', "");
Expect(1, 66639, '\P{^Sc=dsrt}', "");
Expect(0, 66559, '\p{Sc=dsrt}', "");
Expect(1, 66559, '\p{^Sc=dsrt}', "");
Expect(1, 66559, '\P{Sc=dsrt}', "");
Expect(0, 66559, '\P{^Sc=dsrt}', "");
Expect(1, 66639, '\p{Sc=- Dsrt}', "");
Expect(0, 66639, '\p{^Sc=- Dsrt}', "");
Expect(0, 66639, '\P{Sc=- Dsrt}', "");
Expect(1, 66639, '\P{^Sc=- Dsrt}', "");
Expect(0, 66559, '\p{Sc=- Dsrt}', "");
Expect(1, 66559, '\p{^Sc=- Dsrt}', "");
Expect(1, 66559, '\P{Sc=- Dsrt}', "");
Expect(0, 66559, '\P{^Sc=- Dsrt}', "");
Error('\p{Is_Script=_:=Deseret}');
Error('\P{Is_Script=_:=Deseret}');
Expect(1, 66639, '\p{Is_Script=deseret}', "");
Expect(0, 66639, '\p{^Is_Script=deseret}', "");
Expect(0, 66639, '\P{Is_Script=deseret}', "");
Expect(1, 66639, '\P{^Is_Script=deseret}', "");
Expect(0, 66559, '\p{Is_Script=deseret}', "");
Expect(1, 66559, '\p{^Is_Script=deseret}', "");
Expect(1, 66559, '\P{Is_Script=deseret}', "");
Expect(0, 66559, '\P{^Is_Script=deseret}', "");
Expect(1, 66639, '\p{Is_Script=-	Deseret}', "");
Expect(0, 66639, '\p{^Is_Script=-	Deseret}', "");
Expect(0, 66639, '\P{Is_Script=-	Deseret}', "");
Expect(1, 66639, '\P{^Is_Script=-	Deseret}', "");
Expect(0, 66559, '\p{Is_Script=-	Deseret}', "");
Expect(1, 66559, '\p{^Is_Script=-	Deseret}', "");
Expect(1, 66559, '\P{Is_Script=-	Deseret}', "");
Expect(0, 66559, '\P{^Is_Script=-	Deseret}', "");
Error('\p{Is_Sc=_/a/Dsrt}');
Error('\P{Is_Sc=_/a/Dsrt}');
Expect(1, 66639, '\p{Is_Sc=dsrt}', "");
Expect(0, 66639, '\p{^Is_Sc=dsrt}', "");
Expect(0, 66639, '\P{Is_Sc=dsrt}', "");
Expect(1, 66639, '\P{^Is_Sc=dsrt}', "");
Expect(0, 66559, '\p{Is_Sc=dsrt}', "");
Expect(1, 66559, '\p{^Is_Sc=dsrt}', "");
Expect(1, 66559, '\P{Is_Sc=dsrt}', "");
Expect(0, 66559, '\P{^Is_Sc=dsrt}', "");
Expect(1, 66639, '\p{Is_Sc:   _DSRT}', "");
Expect(0, 66639, '\p{^Is_Sc:   _DSRT}', "");
Expect(0, 66639, '\P{Is_Sc:   _DSRT}', "");
Expect(1, 66639, '\P{^Is_Sc:   _DSRT}', "");
Expect(0, 66559, '\p{Is_Sc:   _DSRT}', "");
Expect(1, 66559, '\p{^Is_Sc:   _DSRT}', "");
Expect(1, 66559, '\P{Is_Sc:   _DSRT}', "");
Expect(0, 66559, '\P{^Is_Sc:   _DSRT}', "");
Error('\p{Script=:=_CUNEIFORM}');
Error('\P{Script=:=_CUNEIFORM}');
Expect(1, 74606, '\p{Script=cuneiform}', "");
Expect(0, 74606, '\p{^Script=cuneiform}', "");
Expect(0, 74606, '\P{Script=cuneiform}', "");
Expect(1, 74606, '\P{^Script=cuneiform}', "");
Expect(0, 73727, '\p{Script=cuneiform}', "");
Expect(1, 73727, '\p{^Script=cuneiform}', "");
Expect(1, 73727, '\P{Script=cuneiform}', "");
Expect(0, 73727, '\P{^Script=cuneiform}', "");
Expect(1, 74606, '\p{Script= cuneiform}', "");
Expect(0, 74606, '\p{^Script= cuneiform}', "");
Expect(0, 74606, '\P{Script= cuneiform}', "");
Expect(1, 74606, '\P{^Script= cuneiform}', "");
Expect(0, 73727, '\p{Script= cuneiform}', "");
Expect(1, 73727, '\p{^Script= cuneiform}', "");
Expect(1, 73727, '\P{Script= cuneiform}', "");
Expect(0, 73727, '\P{^Script= cuneiform}', "");
Error('\p{Sc=-	Xsux/a/}');
Error('\P{Sc=-	Xsux/a/}');
Expect(1, 74606, '\p{Sc=xsux}', "");
Expect(0, 74606, '\p{^Sc=xsux}', "");
Expect(0, 74606, '\P{Sc=xsux}', "");
Expect(1, 74606, '\P{^Sc=xsux}', "");
Expect(0, 73727, '\p{Sc=xsux}', "");
Expect(1, 73727, '\p{^Sc=xsux}', "");
Expect(1, 73727, '\P{Sc=xsux}', "");
Expect(0, 73727, '\P{^Sc=xsux}', "");
Expect(1, 74606, '\p{Sc=_ Xsux}', "");
Expect(0, 74606, '\p{^Sc=_ Xsux}', "");
Expect(0, 74606, '\P{Sc=_ Xsux}', "");
Expect(1, 74606, '\P{^Sc=_ Xsux}', "");
Expect(0, 73727, '\p{Sc=_ Xsux}', "");
Expect(1, 73727, '\p{^Sc=_ Xsux}', "");
Expect(1, 73727, '\P{Sc=_ Xsux}', "");
Expect(0, 73727, '\P{^Sc=_ Xsux}', "");
Error('\p{Is_Script=/a/Cuneiform}');
Error('\P{Is_Script=/a/Cuneiform}');
Expect(1, 74606, '\p{Is_Script=cuneiform}', "");
Expect(0, 74606, '\p{^Is_Script=cuneiform}', "");
Expect(0, 74606, '\P{Is_Script=cuneiform}', "");
Expect(1, 74606, '\P{^Is_Script=cuneiform}', "");
Expect(0, 73727, '\p{Is_Script=cuneiform}', "");
Expect(1, 73727, '\p{^Is_Script=cuneiform}', "");
Expect(1, 73727, '\P{Is_Script=cuneiform}', "");
Expect(0, 73727, '\P{^Is_Script=cuneiform}', "");
Expect(1, 74606, '\p{Is_Script:		-Cuneiform}', "");
Expect(0, 74606, '\p{^Is_Script:		-Cuneiform}', "");
Expect(0, 74606, '\P{Is_Script:		-Cuneiform}', "");
Expect(1, 74606, '\P{^Is_Script:		-Cuneiform}', "");
Expect(0, 73727, '\p{Is_Script:		-Cuneiform}', "");
Expect(1, 73727, '\p{^Is_Script:		-Cuneiform}', "");
Expect(1, 73727, '\P{Is_Script:		-Cuneiform}', "");
Expect(0, 73727, '\P{^Is_Script:		-Cuneiform}', "");
Error('\p{Is_Sc=-Xsux:=}');
Error('\P{Is_Sc=-Xsux:=}');
Expect(1, 74606, '\p{Is_Sc=xsux}', "");
Expect(0, 74606, '\p{^Is_Sc=xsux}', "");
Expect(0, 74606, '\P{Is_Sc=xsux}', "");
Expect(1, 74606, '\P{^Is_Sc=xsux}', "");
Expect(0, 73727, '\p{Is_Sc=xsux}', "");
Expect(1, 73727, '\p{^Is_Sc=xsux}', "");
Expect(1, 73727, '\P{Is_Sc=xsux}', "");
Expect(0, 73727, '\P{^Is_Sc=xsux}', "");
Expect(1, 74606, '\p{Is_Sc=  Xsux}', "");
Expect(0, 74606, '\p{^Is_Sc=  Xsux}', "");
Expect(0, 74606, '\P{Is_Sc=  Xsux}', "");
Expect(1, 74606, '\P{^Is_Sc=  Xsux}', "");
Expect(0, 73727, '\p{Is_Sc=  Xsux}', "");
Expect(1, 73727, '\p{^Is_Sc=  Xsux}', "");
Expect(1, 73727, '\P{Is_Sc=  Xsux}', "");
Expect(0, 73727, '\P{^Is_Sc=  Xsux}', "");
Error('\p{Script=_-Inherited:=}');
Error('\P{Script=_-Inherited:=}');
Expect(1, 879, '\p{Script:   inherited}', "");
Expect(0, 879, '\p{^Script:   inherited}', "");
Expect(0, 879, '\P{Script:   inherited}', "");
Expect(1, 879, '\P{^Script:   inherited}', "");
Expect(0, 767, '\p{Script:   inherited}', "");
Expect(1, 767, '\p{^Script:   inherited}', "");
Expect(1, 767, '\P{Script:   inherited}', "");
Expect(0, 767, '\P{^Script:   inherited}', "");
Expect(1, 879, '\p{Script=-INHERITED}', "");
Expect(0, 879, '\p{^Script=-INHERITED}', "");
Expect(0, 879, '\P{Script=-INHERITED}', "");
Expect(1, 879, '\P{^Script=-INHERITED}', "");
Expect(0, 767, '\p{Script=-INHERITED}', "");
Expect(1, 767, '\p{^Script=-INHERITED}', "");
Expect(1, 767, '\P{Script=-INHERITED}', "");
Expect(0, 767, '\P{^Script=-INHERITED}', "");
Error('\p{Sc=/a/	ZINH}');
Error('\P{Sc=/a/	ZINH}');
Expect(1, 879, '\p{Sc=zinh}', "");
Expect(0, 879, '\p{^Sc=zinh}', "");
Expect(0, 879, '\P{Sc=zinh}', "");
Expect(1, 879, '\P{^Sc=zinh}', "");
Expect(0, 767, '\p{Sc=zinh}', "");
Expect(1, 767, '\p{^Sc=zinh}', "");
Expect(1, 767, '\P{Sc=zinh}', "");
Expect(0, 767, '\P{^Sc=zinh}', "");
Expect(1, 879, '\p{Sc=Zinh}', "");
Expect(0, 879, '\p{^Sc=Zinh}', "");
Expect(0, 879, '\P{Sc=Zinh}', "");
Expect(1, 879, '\P{^Sc=Zinh}', "");
Expect(0, 767, '\p{Sc=Zinh}', "");
Expect(1, 767, '\p{^Sc=Zinh}', "");
Expect(1, 767, '\P{Sc=Zinh}', "");
Expect(0, 767, '\P{^Sc=Zinh}', "");
Error('\p{Is_Script: /a/- Qaai}');
Error('\P{Is_Script: /a/- Qaai}');
Expect(1, 879, '\p{Is_Script=qaai}', "");
Expect(0, 879, '\p{^Is_Script=qaai}', "");
Expect(0, 879, '\P{Is_Script=qaai}', "");
Expect(1, 879, '\P{^Is_Script=qaai}', "");
Expect(0, 767, '\p{Is_Script=qaai}', "");
Expect(1, 767, '\p{^Is_Script=qaai}', "");
Expect(1, 767, '\P{Is_Script=qaai}', "");
Expect(0, 767, '\P{^Is_Script=qaai}', "");
Expect(1, 879, '\p{Is_Script=-_QAAI}', "");
Expect(0, 879, '\p{^Is_Script=-_QAAI}', "");
Expect(0, 879, '\P{Is_Script=-_QAAI}', "");
Expect(1, 879, '\P{^Is_Script=-_QAAI}', "");
Expect(0, 767, '\p{Is_Script=-_QAAI}', "");
Expect(1, 767, '\p{^Is_Script=-_QAAI}', "");
Expect(1, 767, '\P{Is_Script=-_QAAI}', "");
Expect(0, 767, '\P{^Is_Script=-_QAAI}', "");
Error('\p{Is_Sc:	/a/ 	Inherited}');
Error('\P{Is_Sc:	/a/ 	Inherited}');
Expect(1, 879, '\p{Is_Sc=inherited}', "");
Expect(0, 879, '\p{^Is_Sc=inherited}', "");
Expect(0, 879, '\P{Is_Sc=inherited}', "");
Expect(1, 879, '\P{^Is_Sc=inherited}', "");
Expect(0, 767, '\p{Is_Sc=inherited}', "");
Expect(1, 767, '\p{^Is_Sc=inherited}', "");
Expect(1, 767, '\P{Is_Sc=inherited}', "");
Expect(0, 767, '\P{^Is_Sc=inherited}', "");
Expect(1, 879, '\p{Is_Sc=__Inherited}', "");
Expect(0, 879, '\p{^Is_Sc=__Inherited}', "");
Expect(0, 879, '\P{Is_Sc=__Inherited}', "");
Expect(1, 879, '\P{^Is_Sc=__Inherited}', "");
Expect(0, 767, '\p{Is_Sc=__Inherited}', "");
Expect(1, 767, '\p{^Is_Sc=__Inherited}', "");
Expect(1, 767, '\P{Is_Sc=__Inherited}', "");
Expect(0, 767, '\P{^Is_Sc=__Inherited}', "");
Error('\p{Script=_:=kaithi}');
Error('\P{Script=_:=kaithi}');
Expect(1, 69825, '\p{Script=kaithi}', "");
Expect(0, 69825, '\p{^Script=kaithi}', "");
Expect(0, 69825, '\P{Script=kaithi}', "");
Expect(1, 69825, '\P{^Script=kaithi}', "");
Expect(0, 69759, '\p{Script=kaithi}', "");
Expect(1, 69759, '\p{^Script=kaithi}', "");
Expect(1, 69759, '\P{Script=kaithi}', "");
Expect(0, 69759, '\P{^Script=kaithi}', "");
Expect(1, 69825, '\p{Script=_-kaithi}', "");
Expect(0, 69825, '\p{^Script=_-kaithi}', "");
Expect(0, 69825, '\P{Script=_-kaithi}', "");
Expect(1, 69825, '\P{^Script=_-kaithi}', "");
Expect(0, 69759, '\p{Script=_-kaithi}', "");
Expect(1, 69759, '\p{^Script=_-kaithi}', "");
Expect(1, 69759, '\P{Script=_-kaithi}', "");
Expect(0, 69759, '\P{^Script=_-kaithi}', "");
Error('\p{Sc=	KTHI:=}');
Error('\P{Sc=	KTHI:=}');
Expect(1, 69825, '\p{Sc=kthi}', "");
Expect(0, 69825, '\p{^Sc=kthi}', "");
Expect(0, 69825, '\P{Sc=kthi}', "");
Expect(1, 69825, '\P{^Sc=kthi}', "");
Expect(0, 69759, '\p{Sc=kthi}', "");
Expect(1, 69759, '\p{^Sc=kthi}', "");
Expect(1, 69759, '\P{Sc=kthi}', "");
Expect(0, 69759, '\P{^Sc=kthi}', "");
Expect(1, 69825, '\p{Sc=__kthi}', "");
Expect(0, 69825, '\p{^Sc=__kthi}', "");
Expect(0, 69825, '\P{Sc=__kthi}', "");
Expect(1, 69825, '\P{^Sc=__kthi}', "");
Expect(0, 69759, '\p{Sc=__kthi}', "");
Expect(1, 69759, '\p{^Sc=__kthi}', "");
Expect(1, 69759, '\P{Sc=__kthi}', "");
Expect(0, 69759, '\P{^Sc=__kthi}', "");
Error('\p{Is_Script=:= Kaithi}');
Error('\P{Is_Script=:= Kaithi}');
Expect(1, 69825, '\p{Is_Script:   kaithi}', "");
Expect(0, 69825, '\p{^Is_Script:   kaithi}', "");
Expect(0, 69825, '\P{Is_Script:   kaithi}', "");
Expect(1, 69825, '\P{^Is_Script:   kaithi}', "");
Expect(0, 69759, '\p{Is_Script:   kaithi}', "");
Expect(1, 69759, '\p{^Is_Script:   kaithi}', "");
Expect(1, 69759, '\P{Is_Script:   kaithi}', "");
Expect(0, 69759, '\P{^Is_Script:   kaithi}', "");
Expect(1, 69825, '\p{Is_Script=_Kaithi}', "");
Expect(0, 69825, '\p{^Is_Script=_Kaithi}', "");
Expect(0, 69825, '\P{Is_Script=_Kaithi}', "");
Expect(1, 69825, '\P{^Is_Script=_Kaithi}', "");
Expect(0, 69759, '\p{Is_Script=_Kaithi}', "");
Expect(1, 69759, '\p{^Is_Script=_Kaithi}', "");
Expect(1, 69759, '\P{Is_Script=_Kaithi}', "");
Expect(0, 69759, '\P{^Is_Script=_Kaithi}', "");
Error('\p{Is_Sc=		kthi/a/}');
Error('\P{Is_Sc=		kthi/a/}');
Expect(1, 69825, '\p{Is_Sc=kthi}', "");
Expect(0, 69825, '\p{^Is_Sc=kthi}', "");
Expect(0, 69825, '\P{Is_Sc=kthi}', "");
Expect(1, 69825, '\P{^Is_Sc=kthi}', "");
Expect(0, 69759, '\p{Is_Sc=kthi}', "");
Expect(1, 69759, '\p{^Is_Sc=kthi}', "");
Expect(1, 69759, '\P{Is_Sc=kthi}', "");
Expect(0, 69759, '\P{^Is_Sc=kthi}', "");
Expect(1, 69825, '\p{Is_Sc=	Kthi}', "");
Expect(0, 69825, '\p{^Is_Sc=	Kthi}', "");
Expect(0, 69825, '\P{Is_Sc=	Kthi}', "");
Expect(1, 69825, '\P{^Is_Sc=	Kthi}', "");
Expect(0, 69759, '\p{Is_Sc=	Kthi}', "");
Expect(1, 69759, '\p{^Is_Sc=	Kthi}', "");
Expect(1, 69759, '\P{Is_Sc=	Kthi}', "");
Expect(0, 69759, '\P{^Is_Sc=	Kthi}', "");
Error('\p{Script=/a/_arabic}');
Error('\P{Script=/a/_arabic}');
Expect(1, 1539, '\p{Script=arabic}', "");
Expect(0, 1539, '\p{^Script=arabic}', "");
Expect(0, 1539, '\P{Script=arabic}', "");
Expect(1, 1539, '\P{^Script=arabic}', "");
Expect(0, 1535, '\p{Script=arabic}', "");
Expect(1, 1535, '\p{^Script=arabic}', "");
Expect(1, 1535, '\P{Script=arabic}', "");
Expect(0, 1535, '\P{^Script=arabic}', "");
Expect(1, 1539, '\p{Script=-ARABIC}', "");
Expect(0, 1539, '\p{^Script=-ARABIC}', "");
Expect(0, 1539, '\P{Script=-ARABIC}', "");
Expect(1, 1539, '\P{^Script=-ARABIC}', "");
Expect(0, 1535, '\p{Script=-ARABIC}', "");
Expect(1, 1535, '\p{^Script=-ARABIC}', "");
Expect(1, 1535, '\P{Script=-ARABIC}', "");
Expect(0, 1535, '\P{^Script=-ARABIC}', "");
Error('\p{Sc=:=_Arab}');
Error('\P{Sc=:=_Arab}');
Expect(1, 1539, '\p{Sc=arab}', "");
Expect(0, 1539, '\p{^Sc=arab}', "");
Expect(0, 1539, '\P{Sc=arab}', "");
Expect(1, 1539, '\P{^Sc=arab}', "");
Expect(0, 1535, '\p{Sc=arab}', "");
Expect(1, 1535, '\p{^Sc=arab}', "");
Expect(1, 1535, '\P{Sc=arab}', "");
Expect(0, 1535, '\P{^Sc=arab}', "");
Expect(1, 1539, '\p{Sc=  Arab}', "");
Expect(0, 1539, '\p{^Sc=  Arab}', "");
Expect(0, 1539, '\P{Sc=  Arab}', "");
Expect(1, 1539, '\P{^Sc=  Arab}', "");
Expect(0, 1535, '\p{Sc=  Arab}', "");
Expect(1, 1535, '\p{^Sc=  Arab}', "");
Expect(1, 1535, '\P{Sc=  Arab}', "");
Expect(0, 1535, '\P{^Sc=  Arab}', "");
Error('\p{Is_Script:  -Arabic:=}');
Error('\P{Is_Script:  -Arabic:=}');
Expect(1, 1539, '\p{Is_Script=arabic}', "");
Expect(0, 1539, '\p{^Is_Script=arabic}', "");
Expect(0, 1539, '\P{Is_Script=arabic}', "");
Expect(1, 1539, '\P{^Is_Script=arabic}', "");
Expect(0, 1535, '\p{Is_Script=arabic}', "");
Expect(1, 1535, '\p{^Is_Script=arabic}', "");
Expect(1, 1535, '\P{Is_Script=arabic}', "");
Expect(0, 1535, '\P{^Is_Script=arabic}', "");
Expect(1, 1539, '\p{Is_Script: 	-ARABIC}', "");
Expect(0, 1539, '\p{^Is_Script: 	-ARABIC}', "");
Expect(0, 1539, '\P{Is_Script: 	-ARABIC}', "");
Expect(1, 1539, '\P{^Is_Script: 	-ARABIC}', "");
Expect(0, 1535, '\p{Is_Script: 	-ARABIC}', "");
Expect(1, 1535, '\p{^Is_Script: 	-ARABIC}', "");
Expect(1, 1535, '\P{Is_Script: 	-ARABIC}', "");
Expect(0, 1535, '\P{^Is_Script: 	-ARABIC}', "");
Error('\p{Is_Sc=	arab:=}');
Error('\P{Is_Sc=	arab:=}');
Expect(1, 1539, '\p{Is_Sc=arab}', "");
Expect(0, 1539, '\p{^Is_Sc=arab}', "");
Expect(0, 1539, '\P{Is_Sc=arab}', "");
Expect(1, 1539, '\P{^Is_Sc=arab}', "");
Expect(0, 1535, '\p{Is_Sc=arab}', "");
Expect(1, 1535, '\p{^Is_Sc=arab}', "");
Expect(1, 1535, '\P{Is_Sc=arab}', "");
Expect(0, 1535, '\P{^Is_Sc=arab}', "");
Expect(1, 1539, '\p{Is_Sc=	_Arab}', "");
Expect(0, 1539, '\p{^Is_Sc=	_Arab}', "");
Expect(0, 1539, '\P{Is_Sc=	_Arab}', "");
Expect(1, 1539, '\P{^Is_Sc=	_Arab}', "");
Expect(0, 1535, '\p{Is_Sc=	_Arab}', "");
Expect(1, 1535, '\p{^Is_Sc=	_Arab}', "");
Expect(1, 1535, '\P{Is_Sc=	_Arab}', "");
Expect(0, 1535, '\P{^Is_Sc=	_Arab}', "");
Error('\p{Script=- Shavian/a/}');
Error('\P{Script=- Shavian/a/}');
Expect(1, 66687, '\p{Script=shavian}', "");
Expect(0, 66687, '\p{^Script=shavian}', "");
Expect(0, 66687, '\P{Script=shavian}', "");
Expect(1, 66687, '\P{^Script=shavian}', "");
Expect(0, 66639, '\p{Script=shavian}', "");
Expect(1, 66639, '\p{^Script=shavian}', "");
Expect(1, 66639, '\P{Script=shavian}', "");
Expect(0, 66639, '\P{^Script=shavian}', "");
Expect(1, 66687, '\p{Script=	_SHAVIAN}', "");
Expect(0, 66687, '\p{^Script=	_SHAVIAN}', "");
Expect(0, 66687, '\P{Script=	_SHAVIAN}', "");
Expect(1, 66687, '\P{^Script=	_SHAVIAN}', "");
Expect(0, 66639, '\p{Script=	_SHAVIAN}', "");
Expect(1, 66639, '\p{^Script=	_SHAVIAN}', "");
Expect(1, 66639, '\P{Script=	_SHAVIAN}', "");
Expect(0, 66639, '\P{^Script=	_SHAVIAN}', "");
Error('\p{Sc= /a/Shaw}');
Error('\P{Sc= /a/Shaw}');
Expect(1, 66687, '\p{Sc:shaw}', "");
Expect(0, 66687, '\p{^Sc:shaw}', "");
Expect(0, 66687, '\P{Sc:shaw}', "");
Expect(1, 66687, '\P{^Sc:shaw}', "");
Expect(0, 66639, '\p{Sc:shaw}', "");
Expect(1, 66639, '\p{^Sc:shaw}', "");
Expect(1, 66639, '\P{Sc:shaw}', "");
Expect(0, 66639, '\P{^Sc:shaw}', "");
Expect(1, 66687, '\p{Sc= Shaw}', "");
Expect(0, 66687, '\p{^Sc= Shaw}', "");
Expect(0, 66687, '\P{Sc= Shaw}', "");
Expect(1, 66687, '\P{^Sc= Shaw}', "");
Expect(0, 66639, '\p{Sc= Shaw}', "");
Expect(1, 66639, '\p{^Sc= Shaw}', "");
Expect(1, 66639, '\P{Sc= Shaw}', "");
Expect(0, 66639, '\P{^Sc= Shaw}', "");
Error('\p{Is_Script=_Shavian/a/}');
Error('\P{Is_Script=_Shavian/a/}');
Expect(1, 66687, '\p{Is_Script=shavian}', "");
Expect(0, 66687, '\p{^Is_Script=shavian}', "");
Expect(0, 66687, '\P{Is_Script=shavian}', "");
Expect(1, 66687, '\P{^Is_Script=shavian}', "");
Expect(0, 66639, '\p{Is_Script=shavian}', "");
Expect(1, 66639, '\p{^Is_Script=shavian}', "");
Expect(1, 66639, '\P{Is_Script=shavian}', "");
Expect(0, 66639, '\P{^Is_Script=shavian}', "");
Expect(1, 66687, '\p{Is_Script=-_Shavian}', "");
Expect(0, 66687, '\p{^Is_Script=-_Shavian}', "");
Expect(0, 66687, '\P{Is_Script=-_Shavian}', "");
Expect(1, 66687, '\P{^Is_Script=-_Shavian}', "");
Expect(0, 66639, '\p{Is_Script=-_Shavian}', "");
Expect(1, 66639, '\p{^Is_Script=-_Shavian}', "");
Expect(1, 66639, '\P{Is_Script=-_Shavian}', "");
Expect(0, 66639, '\P{^Is_Script=-_Shavian}', "");
Error('\p{Is_Sc=	Shaw/a/}');
Error('\P{Is_Sc=	Shaw/a/}');
Expect(1, 66687, '\p{Is_Sc=shaw}', "");
Expect(0, 66687, '\p{^Is_Sc=shaw}', "");
Expect(0, 66687, '\P{Is_Sc=shaw}', "");
Expect(1, 66687, '\P{^Is_Sc=shaw}', "");
Expect(0, 66639, '\p{Is_Sc=shaw}', "");
Expect(1, 66639, '\p{^Is_Sc=shaw}', "");
Expect(1, 66639, '\P{Is_Sc=shaw}', "");
Expect(0, 66639, '\P{^Is_Sc=shaw}', "");
Expect(1, 66687, '\p{Is_Sc=	-shaw}', "");
Expect(0, 66687, '\p{^Is_Sc=	-shaw}', "");
Expect(0, 66687, '\P{Is_Sc=	-shaw}', "");
Expect(1, 66687, '\P{^Is_Sc=	-shaw}', "");
Expect(0, 66639, '\p{Is_Sc=	-shaw}', "");
Expect(1, 66639, '\p{^Is_Sc=	-shaw}', "");
Expect(1, 66639, '\P{Is_Sc=	-shaw}', "");
Expect(0, 66639, '\P{^Is_Sc=	-shaw}', "");
Error('\p{Script=:= -canadianaboriginal}');
Error('\P{Script=:= -canadianaboriginal}');
Expect(1, 5759, '\p{Script=canadianaboriginal}', "");
Expect(0, 5759, '\p{^Script=canadianaboriginal}', "");
Expect(0, 5759, '\P{Script=canadianaboriginal}', "");
Expect(1, 5759, '\P{^Script=canadianaboriginal}', "");
Expect(0, 5119, '\p{Script=canadianaboriginal}', "");
Expect(1, 5119, '\p{^Script=canadianaboriginal}', "");
Expect(1, 5119, '\P{Script=canadianaboriginal}', "");
Expect(0, 5119, '\P{^Script=canadianaboriginal}', "");
Expect(1, 5759, '\p{Script=	_CanadianAboriginal}', "");
Expect(0, 5759, '\p{^Script=	_CanadianAboriginal}', "");
Expect(0, 5759, '\P{Script=	_CanadianAboriginal}', "");
Expect(1, 5759, '\P{^Script=	_CanadianAboriginal}', "");
Expect(0, 5119, '\p{Script=	_CanadianAboriginal}', "");
Expect(1, 5119, '\p{^Script=	_CanadianAboriginal}', "");
Expect(1, 5119, '\P{Script=	_CanadianAboriginal}', "");
Expect(0, 5119, '\P{^Script=	_CanadianAboriginal}', "");
Error('\p{Sc=/a/-	CANS}');
Error('\P{Sc=/a/-	CANS}');
Expect(1, 5759, '\p{Sc=cans}', "");
Expect(0, 5759, '\p{^Sc=cans}', "");
Expect(0, 5759, '\P{Sc=cans}', "");
Expect(1, 5759, '\P{^Sc=cans}', "");
Expect(0, 5119, '\p{Sc=cans}', "");
Expect(1, 5119, '\p{^Sc=cans}', "");
Expect(1, 5119, '\P{Sc=cans}', "");
Expect(0, 5119, '\P{^Sc=cans}', "");
Expect(1, 5759, '\p{Sc=		Cans}', "");
Expect(0, 5759, '\p{^Sc=		Cans}', "");
Expect(0, 5759, '\P{Sc=		Cans}', "");
Expect(1, 5759, '\P{^Sc=		Cans}', "");
Expect(0, 5119, '\p{Sc=		Cans}', "");
Expect(1, 5119, '\p{^Sc=		Cans}', "");
Expect(1, 5119, '\P{Sc=		Cans}', "");
Expect(0, 5119, '\P{^Sc=		Cans}', "");
Error('\p{Is_Script=-CANADIANAboriginal/a/}');
Error('\P{Is_Script=-CANADIANAboriginal/a/}');
Expect(1, 5759, '\p{Is_Script=canadianaboriginal}', "");
Expect(0, 5759, '\p{^Is_Script=canadianaboriginal}', "");
Expect(0, 5759, '\P{Is_Script=canadianaboriginal}', "");
Expect(1, 5759, '\P{^Is_Script=canadianaboriginal}', "");
Expect(0, 5119, '\p{Is_Script=canadianaboriginal}', "");
Expect(1, 5119, '\p{^Is_Script=canadianaboriginal}', "");
Expect(1, 5119, '\P{Is_Script=canadianaboriginal}', "");
Expect(0, 5119, '\P{^Is_Script=canadianaboriginal}', "");
Expect(1, 5759, '\p{Is_Script=-Canadian	aboriginal}', "");
Expect(0, 5759, '\p{^Is_Script=-Canadian	aboriginal}', "");
Expect(0, 5759, '\P{Is_Script=-Canadian	aboriginal}', "");
Expect(1, 5759, '\P{^Is_Script=-Canadian	aboriginal}', "");
Expect(0, 5119, '\p{Is_Script=-Canadian	aboriginal}', "");
Expect(1, 5119, '\p{^Is_Script=-Canadian	aboriginal}', "");
Expect(1, 5119, '\P{Is_Script=-Canadian	aboriginal}', "");
Expect(0, 5119, '\P{^Is_Script=-Canadian	aboriginal}', "");
Error('\p{Is_Sc=/a/cans}');
Error('\P{Is_Sc=/a/cans}');
Expect(1, 5759, '\p{Is_Sc=cans}', "");
Expect(0, 5759, '\p{^Is_Sc=cans}', "");
Expect(0, 5759, '\P{Is_Sc=cans}', "");
Expect(1, 5759, '\P{^Is_Sc=cans}', "");
Expect(0, 5119, '\p{Is_Sc=cans}', "");
Expect(1, 5119, '\p{^Is_Sc=cans}', "");
Expect(1, 5119, '\P{Is_Sc=cans}', "");
Expect(0, 5119, '\P{^Is_Sc=cans}', "");
Expect(1, 5759, '\p{Is_Sc=--cans}', "");
Expect(0, 5759, '\p{^Is_Sc=--cans}', "");
Expect(0, 5759, '\P{Is_Sc=--cans}', "");
Expect(1, 5759, '\P{^Is_Sc=--cans}', "");
Expect(0, 5119, '\p{Is_Sc=--cans}', "");
Expect(1, 5119, '\p{^Is_Sc=--cans}', "");
Expect(1, 5119, '\P{Is_Sc=--cans}', "");
Expect(0, 5119, '\P{^Is_Sc=--cans}', "");
Error('\p{Script= -OLD_South-Arabian:=}');
Error('\P{Script= -OLD_South-Arabian:=}');
Expect(1, 68223, '\p{Script=oldsoutharabian}', "");
Expect(0, 68223, '\p{^Script=oldsoutharabian}', "");
Expect(0, 68223, '\P{Script=oldsoutharabian}', "");
Expect(1, 68223, '\P{^Script=oldsoutharabian}', "");
Expect(0, 68191, '\p{Script=oldsoutharabian}', "");
Expect(1, 68191, '\p{^Script=oldsoutharabian}', "");
Expect(1, 68191, '\P{Script=oldsoutharabian}', "");
Expect(0, 68191, '\P{^Script=oldsoutharabian}', "");
Expect(1, 68223, '\p{Script= _Old	South	ARABIAN}', "");
Expect(0, 68223, '\p{^Script= _Old	South	ARABIAN}', "");
Expect(0, 68223, '\P{Script= _Old	South	ARABIAN}', "");
Expect(1, 68223, '\P{^Script= _Old	South	ARABIAN}', "");
Expect(0, 68191, '\p{Script= _Old	South	ARABIAN}', "");
Expect(1, 68191, '\p{^Script= _Old	South	ARABIAN}', "");
Expect(1, 68191, '\P{Script= _Old	South	ARABIAN}', "");
Expect(0, 68191, '\P{^Script= _Old	South	ARABIAN}', "");
Error('\p{Sc=SARB/a/}');
Error('\P{Sc=SARB/a/}');
Expect(1, 68223, '\p{Sc=sarb}', "");
Expect(0, 68223, '\p{^Sc=sarb}', "");
Expect(0, 68223, '\P{Sc=sarb}', "");
Expect(1, 68223, '\P{^Sc=sarb}', "");
Expect(0, 68191, '\p{Sc=sarb}', "");
Expect(1, 68191, '\p{^Sc=sarb}', "");
Expect(1, 68191, '\P{Sc=sarb}', "");
Expect(0, 68191, '\P{^Sc=sarb}', "");
Expect(1, 68223, '\p{Sc=-Sarb}', "");
Expect(0, 68223, '\p{^Sc=-Sarb}', "");
Expect(0, 68223, '\P{Sc=-Sarb}', "");
Expect(1, 68223, '\P{^Sc=-Sarb}', "");
Expect(0, 68191, '\p{Sc=-Sarb}', "");
Expect(1, 68191, '\p{^Sc=-Sarb}', "");
Expect(1, 68191, '\P{Sc=-Sarb}', "");
Expect(0, 68191, '\P{^Sc=-Sarb}', "");
Error('\p{Is_Script=:=_ Old_southARABIAN}');
Error('\P{Is_Script=:=_ Old_southARABIAN}');
Expect(1, 68223, '\p{Is_Script=oldsoutharabian}', "");
Expect(0, 68223, '\p{^Is_Script=oldsoutharabian}', "");
Expect(0, 68223, '\P{Is_Script=oldsoutharabian}', "");
Expect(1, 68223, '\P{^Is_Script=oldsoutharabian}', "");
Expect(0, 68191, '\p{Is_Script=oldsoutharabian}', "");
Expect(1, 68191, '\p{^Is_Script=oldsoutharabian}', "");
Expect(1, 68191, '\P{Is_Script=oldsoutharabian}', "");
Expect(0, 68191, '\P{^Is_Script=oldsoutharabian}', "");
Expect(1, 68223, '\p{Is_Script:_old SouthArabian}', "");
Expect(0, 68223, '\p{^Is_Script:_old SouthArabian}', "");
Expect(0, 68223, '\P{Is_Script:_old SouthArabian}', "");
Expect(1, 68223, '\P{^Is_Script:_old SouthArabian}', "");
Expect(0, 68191, '\p{Is_Script:_old SouthArabian}', "");
Expect(1, 68191, '\p{^Is_Script:_old SouthArabian}', "");
Expect(1, 68191, '\P{Is_Script:_old SouthArabian}', "");
Expect(0, 68191, '\P{^Is_Script:_old SouthArabian}', "");
Error('\p{Is_Sc=-:=Sarb}');
Error('\P{Is_Sc=-:=Sarb}');
Expect(1, 68223, '\p{Is_Sc=sarb}', "");
Expect(0, 68223, '\p{^Is_Sc=sarb}', "");
Expect(0, 68223, '\P{Is_Sc=sarb}', "");
Expect(1, 68223, '\P{^Is_Sc=sarb}', "");
Expect(0, 68191, '\p{Is_Sc=sarb}', "");
Expect(1, 68191, '\p{^Is_Sc=sarb}', "");
Expect(1, 68191, '\P{Is_Sc=sarb}', "");
Expect(0, 68191, '\P{^Is_Sc=sarb}', "");
Expect(1, 68223, '\p{Is_Sc=_Sarb}', "");
Expect(0, 68223, '\p{^Is_Sc=_Sarb}', "");
Expect(0, 68223, '\P{Is_Sc=_Sarb}', "");
Expect(1, 68223, '\P{^Is_Sc=_Sarb}', "");
Expect(0, 68191, '\p{Is_Sc=_Sarb}', "");
Expect(1, 68191, '\p{^Is_Sc=_Sarb}', "");
Expect(1, 68191, '\P{Is_Sc=_Sarb}', "");
Expect(0, 68191, '\P{^Is_Sc=_Sarb}', "");
Error('\p{Script=- lydian:=}');
Error('\P{Script=- lydian:=}');
Expect(1, 67897, '\p{Script=lydian}', "");
Expect(0, 67897, '\p{^Script=lydian}', "");
Expect(0, 67897, '\P{Script=lydian}', "");
Expect(1, 67897, '\P{^Script=lydian}', "");
Expect(0, 67871, '\p{Script=lydian}', "");
Expect(1, 67871, '\p{^Script=lydian}', "");
Expect(1, 67871, '\P{Script=lydian}', "");
Expect(0, 67871, '\P{^Script=lydian}', "");
Expect(1, 67897, '\p{Script= -LYDIAN}', "");
Expect(0, 67897, '\p{^Script= -LYDIAN}', "");
Expect(0, 67897, '\P{Script= -LYDIAN}', "");
Expect(1, 67897, '\P{^Script= -LYDIAN}', "");
Expect(0, 67871, '\p{Script= -LYDIAN}', "");
Expect(1, 67871, '\p{^Script= -LYDIAN}', "");
Expect(1, 67871, '\P{Script= -LYDIAN}', "");
Expect(0, 67871, '\P{^Script= -LYDIAN}', "");
Error('\p{Sc= /a/LYDI}');
Error('\P{Sc= /a/LYDI}');
Expect(1, 67897, '\p{Sc=lydi}', "");
Expect(0, 67897, '\p{^Sc=lydi}', "");
Expect(0, 67897, '\P{Sc=lydi}', "");
Expect(1, 67897, '\P{^Sc=lydi}', "");
Expect(0, 67871, '\p{Sc=lydi}', "");
Expect(1, 67871, '\p{^Sc=lydi}', "");
Expect(1, 67871, '\P{Sc=lydi}', "");
Expect(0, 67871, '\P{^Sc=lydi}', "");
Expect(1, 67897, '\p{Sc=	 Lydi}', "");
Expect(0, 67897, '\p{^Sc=	 Lydi}', "");
Expect(0, 67897, '\P{Sc=	 Lydi}', "");
Expect(1, 67897, '\P{^Sc=	 Lydi}', "");
Expect(0, 67871, '\p{Sc=	 Lydi}', "");
Expect(1, 67871, '\p{^Sc=	 Lydi}', "");
Expect(1, 67871, '\P{Sc=	 Lydi}', "");
Expect(0, 67871, '\P{^Sc=	 Lydi}', "");
Error('\p{Is_Script=/a/ -Lydian}');
Error('\P{Is_Script=/a/ -Lydian}');
Expect(1, 67897, '\p{Is_Script=lydian}', "");
Expect(0, 67897, '\p{^Is_Script=lydian}', "");
Expect(0, 67897, '\P{Is_Script=lydian}', "");
Expect(1, 67897, '\P{^Is_Script=lydian}', "");
Expect(0, 67871, '\p{Is_Script=lydian}', "");
Expect(1, 67871, '\p{^Is_Script=lydian}', "");
Expect(1, 67871, '\P{Is_Script=lydian}', "");
Expect(0, 67871, '\P{^Is_Script=lydian}', "");
Expect(1, 67897, '\p{Is_Script=-Lydian}', "");
Expect(0, 67897, '\p{^Is_Script=-Lydian}', "");
Expect(0, 67897, '\P{Is_Script=-Lydian}', "");
Expect(1, 67897, '\P{^Is_Script=-Lydian}', "");
Expect(0, 67871, '\p{Is_Script=-Lydian}', "");
Expect(1, 67871, '\p{^Is_Script=-Lydian}', "");
Expect(1, 67871, '\P{Is_Script=-Lydian}', "");
Expect(0, 67871, '\P{^Is_Script=-Lydian}', "");
Error('\p{Is_Sc=-/a/LYDI}');
Error('\P{Is_Sc=-/a/LYDI}');
Expect(1, 67897, '\p{Is_Sc=lydi}', "");
Expect(0, 67897, '\p{^Is_Sc=lydi}', "");
Expect(0, 67897, '\P{Is_Sc=lydi}', "");
Expect(1, 67897, '\P{^Is_Sc=lydi}', "");
Expect(0, 67871, '\p{Is_Sc=lydi}', "");
Expect(1, 67871, '\p{^Is_Sc=lydi}', "");
Expect(1, 67871, '\P{Is_Sc=lydi}', "");
Expect(0, 67871, '\P{^Is_Sc=lydi}', "");
Expect(1, 67897, '\p{Is_Sc=_ LYDI}', "");
Expect(0, 67897, '\p{^Is_Sc=_ LYDI}', "");
Expect(0, 67897, '\P{Is_Sc=_ LYDI}', "");
Expect(1, 67897, '\P{^Is_Sc=_ LYDI}', "");
Expect(0, 67871, '\p{Is_Sc=_ LYDI}', "");
Expect(1, 67871, '\p{^Is_Sc=_ LYDI}', "");
Expect(1, 67871, '\P{Is_Sc=_ LYDI}', "");
Expect(0, 67871, '\P{^Is_Sc=_ LYDI}', "");
Error('\p{Script:			Mongolian/a/}');
Error('\P{Script:			Mongolian/a/}');
Expect(1, 6145, '\p{Script=mongolian}', "");
Expect(0, 6145, '\p{^Script=mongolian}', "");
Expect(0, 6145, '\P{Script=mongolian}', "");
Expect(1, 6145, '\P{^Script=mongolian}', "");
Expect(0, 6143, '\p{Script=mongolian}', "");
Expect(1, 6143, '\p{^Script=mongolian}', "");
Expect(1, 6143, '\P{Script=mongolian}', "");
Expect(0, 6143, '\P{^Script=mongolian}', "");
Expect(1, 6145, '\p{Script:_mongolian}', "");
Expect(0, 6145, '\p{^Script:_mongolian}', "");
Expect(0, 6145, '\P{Script:_mongolian}', "");
Expect(1, 6145, '\P{^Script:_mongolian}', "");
Expect(0, 6143, '\p{Script:_mongolian}', "");
Expect(1, 6143, '\p{^Script:_mongolian}', "");
Expect(1, 6143, '\P{Script:_mongolian}', "");
Expect(0, 6143, '\P{^Script:_mongolian}', "");
Error('\p{Sc= _Mong:=}');
Error('\P{Sc= _Mong:=}');
Expect(1, 6145, '\p{Sc: mong}', "");
Expect(0, 6145, '\p{^Sc: mong}', "");
Expect(0, 6145, '\P{Sc: mong}', "");
Expect(1, 6145, '\P{^Sc: mong}', "");
Expect(0, 6143, '\p{Sc: mong}', "");
Expect(1, 6143, '\p{^Sc: mong}', "");
Expect(1, 6143, '\P{Sc: mong}', "");
Expect(0, 6143, '\P{^Sc: mong}', "");
Expect(1, 6145, '\p{Sc=-_MONG}', "");
Expect(0, 6145, '\p{^Sc=-_MONG}', "");
Expect(0, 6145, '\P{Sc=-_MONG}', "");
Expect(1, 6145, '\P{^Sc=-_MONG}', "");
Expect(0, 6143, '\p{Sc=-_MONG}', "");
Expect(1, 6143, '\p{^Sc=-_MONG}', "");
Expect(1, 6143, '\P{Sc=-_MONG}', "");
Expect(0, 6143, '\P{^Sc=-_MONG}', "");
Error('\p{Is_Script: Mongolian/a/}');
Error('\P{Is_Script: Mongolian/a/}');
Expect(1, 6145, '\p{Is_Script=mongolian}', "");
Expect(0, 6145, '\p{^Is_Script=mongolian}', "");
Expect(0, 6145, '\P{Is_Script=mongolian}', "");
Expect(1, 6145, '\P{^Is_Script=mongolian}', "");
Expect(0, 6143, '\p{Is_Script=mongolian}', "");
Expect(1, 6143, '\p{^Is_Script=mongolian}', "");
Expect(1, 6143, '\P{Is_Script=mongolian}', "");
Expect(0, 6143, '\P{^Is_Script=mongolian}', "");
Expect(1, 6145, '\p{Is_Script=_ mongolian}', "");
Expect(0, 6145, '\p{^Is_Script=_ mongolian}', "");
Expect(0, 6145, '\P{Is_Script=_ mongolian}', "");
Expect(1, 6145, '\P{^Is_Script=_ mongolian}', "");
Expect(0, 6143, '\p{Is_Script=_ mongolian}', "");
Expect(1, 6143, '\p{^Is_Script=_ mongolian}', "");
Expect(1, 6143, '\P{Is_Script=_ mongolian}', "");
Expect(0, 6143, '\P{^Is_Script=_ mongolian}', "");
Error('\p{Is_Sc= -MONG:=}');
Error('\P{Is_Sc= -MONG:=}');
Expect(1, 6145, '\p{Is_Sc=mong}', "");
Expect(0, 6145, '\p{^Is_Sc=mong}', "");
Expect(0, 6145, '\P{Is_Sc=mong}', "");
Expect(1, 6145, '\P{^Is_Sc=mong}', "");
Expect(0, 6143, '\p{Is_Sc=mong}', "");
Expect(1, 6143, '\p{^Is_Sc=mong}', "");
Expect(1, 6143, '\P{Is_Sc=mong}', "");
Expect(0, 6143, '\P{^Is_Sc=mong}', "");
Expect(1, 6145, '\p{Is_Sc:    _MONG}', "");
Expect(0, 6145, '\p{^Is_Sc:    _MONG}', "");
Expect(0, 6145, '\P{Is_Sc:    _MONG}', "");
Expect(1, 6145, '\P{^Is_Sc:    _MONG}', "");
Expect(0, 6143, '\p{Is_Sc:    _MONG}', "");
Expect(1, 6143, '\p{^Is_Sc:    _MONG}', "");
Expect(1, 6143, '\P{Is_Sc:    _MONG}', "");
Expect(0, 6143, '\P{^Is_Sc:    _MONG}', "");
Error('\p{Script=	:=Lao}');
Error('\P{Script=	:=Lao}');
Expect(1, 3714, '\p{Script=lao}', "");
Expect(0, 3714, '\p{^Script=lao}', "");
Expect(0, 3714, '\P{Script=lao}', "");
Expect(1, 3714, '\P{^Script=lao}', "");
Expect(0, 3712, '\p{Script=lao}', "");
Expect(1, 3712, '\p{^Script=lao}', "");
Expect(1, 3712, '\P{Script=lao}', "");
Expect(0, 3712, '\P{^Script=lao}', "");
Expect(1, 3714, '\p{Script=-Lao}', "");
Expect(0, 3714, '\p{^Script=-Lao}', "");
Expect(0, 3714, '\P{Script=-Lao}', "");
Expect(1, 3714, '\P{^Script=-Lao}', "");
Expect(0, 3712, '\p{Script=-Lao}', "");
Expect(1, 3712, '\p{^Script=-Lao}', "");
Expect(1, 3712, '\P{Script=-Lao}', "");
Expect(0, 3712, '\P{^Script=-Lao}', "");
Error('\p{Sc=:=	 laoo}');
Error('\P{Sc=:=	 laoo}');
Expect(1, 3714, '\p{Sc=laoo}', "");
Expect(0, 3714, '\p{^Sc=laoo}', "");
Expect(0, 3714, '\P{Sc=laoo}', "");
Expect(1, 3714, '\P{^Sc=laoo}', "");
Expect(0, 3712, '\p{Sc=laoo}', "");
Expect(1, 3712, '\p{^Sc=laoo}', "");
Expect(1, 3712, '\P{Sc=laoo}', "");
Expect(0, 3712, '\P{^Sc=laoo}', "");
Expect(1, 3714, '\p{Sc=_Laoo}', "");
Expect(0, 3714, '\p{^Sc=_Laoo}', "");
Expect(0, 3714, '\P{Sc=_Laoo}', "");
Expect(1, 3714, '\P{^Sc=_Laoo}', "");
Expect(0, 3712, '\p{Sc=_Laoo}', "");
Expect(1, 3712, '\p{^Sc=_Laoo}', "");
Expect(1, 3712, '\P{Sc=_Laoo}', "");
Expect(0, 3712, '\P{^Sc=_Laoo}', "");
Error('\p{Is_Script=_LAO:=}');
Error('\P{Is_Script=_LAO:=}');
Expect(1, 3714, '\p{Is_Script=lao}', "");
Expect(0, 3714, '\p{^Is_Script=lao}', "");
Expect(0, 3714, '\P{Is_Script=lao}', "");
Expect(1, 3714, '\P{^Is_Script=lao}', "");
Expect(0, 3712, '\p{Is_Script=lao}', "");
Expect(1, 3712, '\p{^Is_Script=lao}', "");
Expect(1, 3712, '\P{Is_Script=lao}', "");
Expect(0, 3712, '\P{^Is_Script=lao}', "");
Expect(1, 3714, '\p{Is_Script=_lao}', "");
Expect(0, 3714, '\p{^Is_Script=_lao}', "");
Expect(0, 3714, '\P{Is_Script=_lao}', "");
Expect(1, 3714, '\P{^Is_Script=_lao}', "");
Expect(0, 3712, '\p{Is_Script=_lao}', "");
Expect(1, 3712, '\p{^Is_Script=_lao}', "");
Expect(1, 3712, '\P{Is_Script=_lao}', "");
Expect(0, 3712, '\P{^Is_Script=_lao}', "");
Error('\p{Is_Sc=/a/	 laoo}');
Error('\P{Is_Sc=/a/	 laoo}');
Expect(1, 3714, '\p{Is_Sc=laoo}', "");
Expect(0, 3714, '\p{^Is_Sc=laoo}', "");
Expect(0, 3714, '\P{Is_Sc=laoo}', "");
Expect(1, 3714, '\P{^Is_Sc=laoo}', "");
Expect(0, 3712, '\p{Is_Sc=laoo}', "");
Expect(1, 3712, '\p{^Is_Sc=laoo}', "");
Expect(1, 3712, '\P{Is_Sc=laoo}', "");
Expect(0, 3712, '\P{^Is_Sc=laoo}', "");
Expect(1, 3714, '\p{Is_Sc=--Laoo}', "");
Expect(0, 3714, '\p{^Is_Sc=--Laoo}', "");
Expect(0, 3714, '\P{Is_Sc=--Laoo}', "");
Expect(1, 3714, '\P{^Is_Sc=--Laoo}', "");
Expect(0, 3712, '\p{Is_Sc=--Laoo}', "");
Expect(1, 3712, '\p{^Is_Sc=--Laoo}', "");
Expect(1, 3712, '\P{Is_Sc=--Laoo}', "");
Expect(0, 3712, '\P{^Is_Sc=--Laoo}', "");
Error('\p{Script:   :=_ cyrillic}');
Error('\P{Script:   :=_ cyrillic}');
Expect(1, 1156, '\p{Script=cyrillic}', "");
Expect(0, 1156, '\p{^Script=cyrillic}', "");
Expect(0, 1156, '\P{Script=cyrillic}', "");
Expect(1, 1156, '\P{^Script=cyrillic}', "");
Expect(0, 1023, '\p{Script=cyrillic}', "");
Expect(1, 1023, '\p{^Script=cyrillic}', "");
Expect(1, 1023, '\P{Script=cyrillic}', "");
Expect(0, 1023, '\P{^Script=cyrillic}', "");
Expect(1, 1156, '\p{Script=-_Cyrillic}', "");
Expect(0, 1156, '\p{^Script=-_Cyrillic}', "");
Expect(0, 1156, '\P{Script=-_Cyrillic}', "");
Expect(1, 1156, '\P{^Script=-_Cyrillic}', "");
Expect(0, 1023, '\p{Script=-_Cyrillic}', "");
Expect(1, 1023, '\p{^Script=-_Cyrillic}', "");
Expect(1, 1023, '\P{Script=-_Cyrillic}', "");
Expect(0, 1023, '\P{^Script=-_Cyrillic}', "");
Error('\p{Sc=_/a/Cyrl}');
Error('\P{Sc=_/a/Cyrl}');
Expect(1, 1156, '\p{Sc=cyrl}', "");
Expect(0, 1156, '\p{^Sc=cyrl}', "");
Expect(0, 1156, '\P{Sc=cyrl}', "");
Expect(1, 1156, '\P{^Sc=cyrl}', "");
Expect(0, 1023, '\p{Sc=cyrl}', "");
Expect(1, 1023, '\p{^Sc=cyrl}', "");
Expect(1, 1023, '\P{Sc=cyrl}', "");
Expect(0, 1023, '\P{^Sc=cyrl}', "");
Expect(1, 1156, '\p{Sc= 	Cyrl}', "");
Expect(0, 1156, '\p{^Sc= 	Cyrl}', "");
Expect(0, 1156, '\P{Sc= 	Cyrl}', "");
Expect(1, 1156, '\P{^Sc= 	Cyrl}', "");
Expect(0, 1023, '\p{Sc= 	Cyrl}', "");
Expect(1, 1023, '\p{^Sc= 	Cyrl}', "");
Expect(1, 1023, '\P{Sc= 	Cyrl}', "");
Expect(0, 1023, '\P{^Sc= 	Cyrl}', "");
Error('\p{Is_Script=/a/_	Cyrillic}');
Error('\P{Is_Script=/a/_	Cyrillic}');
Expect(1, 1156, '\p{Is_Script=cyrillic}', "");
Expect(0, 1156, '\p{^Is_Script=cyrillic}', "");
Expect(0, 1156, '\P{Is_Script=cyrillic}', "");
Expect(1, 1156, '\P{^Is_Script=cyrillic}', "");
Expect(0, 1023, '\p{Is_Script=cyrillic}', "");
Expect(1, 1023, '\p{^Is_Script=cyrillic}', "");
Expect(1, 1023, '\P{Is_Script=cyrillic}', "");
Expect(0, 1023, '\P{^Is_Script=cyrillic}', "");
Expect(1, 1156, '\p{Is_Script=  cyrillic}', "");
Expect(0, 1156, '\p{^Is_Script=  cyrillic}', "");
Expect(0, 1156, '\P{Is_Script=  cyrillic}', "");
Expect(1, 1156, '\P{^Is_Script=  cyrillic}', "");
Expect(0, 1023, '\p{Is_Script=  cyrillic}', "");
Expect(1, 1023, '\p{^Is_Script=  cyrillic}', "");
Expect(1, 1023, '\P{Is_Script=  cyrillic}', "");
Expect(0, 1023, '\P{^Is_Script=  cyrillic}', "");
Error('\p{Is_Sc=:=Cyrl}');
Error('\P{Is_Sc=:=Cyrl}');
Expect(1, 1156, '\p{Is_Sc=cyrl}', "");
Expect(0, 1156, '\p{^Is_Sc=cyrl}', "");
Expect(0, 1156, '\P{Is_Sc=cyrl}', "");
Expect(1, 1156, '\P{^Is_Sc=cyrl}', "");
Expect(0, 1023, '\p{Is_Sc=cyrl}', "");
Expect(1, 1023, '\p{^Is_Sc=cyrl}', "");
Expect(1, 1023, '\P{Is_Sc=cyrl}', "");
Expect(0, 1023, '\P{^Is_Sc=cyrl}', "");
Expect(1, 1156, '\p{Is_Sc=_	cyrl}', "");
Expect(0, 1156, '\p{^Is_Sc=_	cyrl}', "");
Expect(0, 1156, '\P{Is_Sc=_	cyrl}', "");
Expect(1, 1156, '\P{^Is_Sc=_	cyrl}', "");
Expect(0, 1023, '\p{Is_Sc=_	cyrl}', "");
Expect(1, 1023, '\p{^Is_Sc=_	cyrl}', "");
Expect(1, 1023, '\P{Is_Sc=_	cyrl}', "");
Expect(0, 1023, '\P{^Is_Sc=_	cyrl}', "");
Error('\p{Script=__HIRAGANA/a/}');
Error('\P{Script=__HIRAGANA/a/}');
Expect(1, 12438, '\p{Script=hiragana}', "");
Expect(0, 12438, '\p{^Script=hiragana}', "");
Expect(0, 12438, '\P{Script=hiragana}', "");
Expect(1, 12438, '\P{^Script=hiragana}', "");
Expect(0, 12352, '\p{Script=hiragana}', "");
Expect(1, 12352, '\p{^Script=hiragana}', "");
Expect(1, 12352, '\P{Script=hiragana}', "");
Expect(0, 12352, '\P{^Script=hiragana}', "");
Expect(1, 12438, '\p{Script=_ Hiragana}', "");
Expect(0, 12438, '\p{^Script=_ Hiragana}', "");
Expect(0, 12438, '\P{Script=_ Hiragana}', "");
Expect(1, 12438, '\P{^Script=_ Hiragana}', "");
Expect(0, 12352, '\p{Script=_ Hiragana}', "");
Expect(1, 12352, '\p{^Script=_ Hiragana}', "");
Expect(1, 12352, '\P{Script=_ Hiragana}', "");
Expect(0, 12352, '\P{^Script=_ Hiragana}', "");
Error('\p{Sc=_/a/HIRA}');
Error('\P{Sc=_/a/HIRA}');
Expect(1, 12438, '\p{Sc=hira}', "");
Expect(0, 12438, '\p{^Sc=hira}', "");
Expect(0, 12438, '\P{Sc=hira}', "");
Expect(1, 12438, '\P{^Sc=hira}', "");
Expect(0, 12352, '\p{Sc=hira}', "");
Expect(1, 12352, '\p{^Sc=hira}', "");
Expect(1, 12352, '\P{Sc=hira}', "");
Expect(0, 12352, '\P{^Sc=hira}', "");
Expect(1, 12438, '\p{Sc=-_Hira}', "");
Expect(0, 12438, '\p{^Sc=-_Hira}', "");
Expect(0, 12438, '\P{Sc=-_Hira}', "");
Expect(1, 12438, '\P{^Sc=-_Hira}', "");
Expect(0, 12352, '\p{Sc=-_Hira}', "");
Expect(1, 12352, '\p{^Sc=-_Hira}', "");
Expect(1, 12352, '\P{Sc=-_Hira}', "");
Expect(0, 12352, '\P{^Sc=-_Hira}', "");
Error('\p{Is_Script=-_HIRAGANA/a/}');
Error('\P{Is_Script=-_HIRAGANA/a/}');
Expect(1, 12438, '\p{Is_Script=hiragana}', "");
Expect(0, 12438, '\p{^Is_Script=hiragana}', "");
Expect(0, 12438, '\P{Is_Script=hiragana}', "");
Expect(1, 12438, '\P{^Is_Script=hiragana}', "");
Expect(0, 12352, '\p{Is_Script=hiragana}', "");
Expect(1, 12352, '\p{^Is_Script=hiragana}', "");
Expect(1, 12352, '\P{Is_Script=hiragana}', "");
Expect(0, 12352, '\P{^Is_Script=hiragana}', "");
Expect(1, 12438, '\p{Is_Script:   __Hiragana}', "");
Expect(0, 12438, '\p{^Is_Script:   __Hiragana}', "");
Expect(0, 12438, '\P{Is_Script:   __Hiragana}', "");
Expect(1, 12438, '\P{^Is_Script:   __Hiragana}', "");
Expect(0, 12352, '\p{Is_Script:   __Hiragana}', "");
Expect(1, 12352, '\p{^Is_Script:   __Hiragana}', "");
Expect(1, 12352, '\P{Is_Script:   __Hiragana}', "");
Expect(0, 12352, '\P{^Is_Script:   __Hiragana}', "");
Error('\p{Is_Sc=_/a/HIRA}');
Error('\P{Is_Sc=_/a/HIRA}');
Expect(1, 12438, '\p{Is_Sc=hira}', "");
Expect(0, 12438, '\p{^Is_Sc=hira}', "");
Expect(0, 12438, '\P{Is_Sc=hira}', "");
Expect(1, 12438, '\P{^Is_Sc=hira}', "");
Expect(0, 12352, '\p{Is_Sc=hira}', "");
Expect(1, 12352, '\p{^Is_Sc=hira}', "");
Expect(1, 12352, '\P{Is_Sc=hira}', "");
Expect(0, 12352, '\P{^Is_Sc=hira}', "");
Expect(1, 12438, '\p{Is_Sc=  HIRA}', "");
Expect(0, 12438, '\p{^Is_Sc=  HIRA}', "");
Expect(0, 12438, '\P{Is_Sc=  HIRA}', "");
Expect(1, 12438, '\P{^Is_Sc=  HIRA}', "");
Expect(0, 12352, '\p{Is_Sc=  HIRA}', "");
Expect(1, 12352, '\p{^Is_Sc=  HIRA}', "");
Expect(1, 12352, '\P{Is_Sc=  HIRA}', "");
Expect(0, 12352, '\P{^Is_Sc=  HIRA}', "");
Error('\p{Script=:=bengali}');
Error('\P{Script=:=bengali}');
Expect(1, 2435, '\p{Script=bengali}', "");
Expect(0, 2435, '\p{^Script=bengali}', "");
Expect(0, 2435, '\P{Script=bengali}', "");
Expect(1, 2435, '\P{^Script=bengali}', "");
Expect(0, 2432, '\p{Script=bengali}', "");
Expect(1, 2432, '\p{^Script=bengali}', "");
Expect(1, 2432, '\P{Script=bengali}', "");
Expect(0, 2432, '\P{^Script=bengali}', "");
Expect(1, 2435, '\p{Script=	 Bengali}', "");
Expect(0, 2435, '\p{^Script=	 Bengali}', "");
Expect(0, 2435, '\P{Script=	 Bengali}', "");
Expect(1, 2435, '\P{^Script=	 Bengali}', "");
Expect(0, 2432, '\p{Script=	 Bengali}', "");
Expect(1, 2432, '\p{^Script=	 Bengali}', "");
Expect(1, 2432, '\P{Script=	 Bengali}', "");
Expect(0, 2432, '\P{^Script=	 Bengali}', "");
Error('\p{Sc=	_BENG/a/}');
Error('\P{Sc=	_BENG/a/}');
Expect(1, 2435, '\p{Sc=beng}', "");
Expect(0, 2435, '\p{^Sc=beng}', "");
Expect(0, 2435, '\P{Sc=beng}', "");
Expect(1, 2435, '\P{^Sc=beng}', "");
Expect(0, 2432, '\p{Sc=beng}', "");
Expect(1, 2432, '\p{^Sc=beng}', "");
Expect(1, 2432, '\P{Sc=beng}', "");
Expect(0, 2432, '\P{^Sc=beng}', "");
Expect(1, 2435, '\p{Sc=-Beng}', "");
Expect(0, 2435, '\p{^Sc=-Beng}', "");
Expect(0, 2435, '\P{Sc=-Beng}', "");
Expect(1, 2435, '\P{^Sc=-Beng}', "");
Expect(0, 2432, '\p{Sc=-Beng}', "");
Expect(1, 2432, '\p{^Sc=-Beng}', "");
Expect(1, 2432, '\P{Sc=-Beng}', "");
Expect(0, 2432, '\P{^Sc=-Beng}', "");
Error('\p{Is_Script=	 bengali:=}');
Error('\P{Is_Script=	 bengali:=}');
Expect(1, 2435, '\p{Is_Script=bengali}', "");
Expect(0, 2435, '\p{^Is_Script=bengali}', "");
Expect(0, 2435, '\P{Is_Script=bengali}', "");
Expect(1, 2435, '\P{^Is_Script=bengali}', "");
Expect(0, 2432, '\p{Is_Script=bengali}', "");
Expect(1, 2432, '\p{^Is_Script=bengali}', "");
Expect(1, 2432, '\P{Is_Script=bengali}', "");
Expect(0, 2432, '\P{^Is_Script=bengali}', "");
Expect(1, 2435, '\p{Is_Script=	Bengali}', "");
Expect(0, 2435, '\p{^Is_Script=	Bengali}', "");
Expect(0, 2435, '\P{Is_Script=	Bengali}', "");
Expect(1, 2435, '\P{^Is_Script=	Bengali}', "");
Expect(0, 2432, '\p{Is_Script=	Bengali}', "");
Expect(1, 2432, '\p{^Is_Script=	Bengali}', "");
Expect(1, 2432, '\P{Is_Script=	Bengali}', "");
Expect(0, 2432, '\P{^Is_Script=	Bengali}', "");
Error('\p{Is_Sc=-:=BENG}');
Error('\P{Is_Sc=-:=BENG}');
Expect(1, 2435, '\p{Is_Sc=beng}', "");
Expect(0, 2435, '\p{^Is_Sc=beng}', "");
Expect(0, 2435, '\P{Is_Sc=beng}', "");
Expect(1, 2435, '\P{^Is_Sc=beng}', "");
Expect(0, 2432, '\p{Is_Sc=beng}', "");
Expect(1, 2432, '\p{^Is_Sc=beng}', "");
Expect(1, 2432, '\P{Is_Sc=beng}', "");
Expect(0, 2432, '\P{^Is_Sc=beng}', "");
Expect(1, 2435, '\p{Is_Sc= 	Beng}', "");
Expect(0, 2435, '\p{^Is_Sc= 	Beng}', "");
Expect(0, 2435, '\P{Is_Sc= 	Beng}', "");
Expect(1, 2435, '\P{^Is_Sc= 	Beng}', "");
Expect(0, 2432, '\p{Is_Sc= 	Beng}', "");
Expect(1, 2432, '\p{^Is_Sc= 	Beng}', "");
Expect(1, 2432, '\P{Is_Sc= 	Beng}', "");
Expect(0, 2432, '\P{^Is_Sc= 	Beng}', "");
Error('\p{Script:   _/a/braille}');
Error('\P{Script:   _/a/braille}');
Expect(1, 10495, '\p{Script=braille}', "");
Expect(0, 10495, '\p{^Script=braille}', "");
Expect(0, 10495, '\P{Script=braille}', "");
Expect(1, 10495, '\P{^Script=braille}', "");
Expect(0, 10239, '\p{Script=braille}', "");
Expect(1, 10239, '\p{^Script=braille}', "");
Expect(1, 10239, '\P{Script=braille}', "");
Expect(0, 10239, '\P{^Script=braille}', "");
Expect(1, 10495, '\p{Script=-Braille}', "");
Expect(0, 10495, '\p{^Script=-Braille}', "");
Expect(0, 10495, '\P{Script=-Braille}', "");
Expect(1, 10495, '\P{^Script=-Braille}', "");
Expect(0, 10239, '\p{Script=-Braille}', "");
Expect(1, 10239, '\p{^Script=-Braille}', "");
Expect(1, 10239, '\P{Script=-Braille}', "");
Expect(0, 10239, '\P{^Script=-Braille}', "");
Error('\p{Sc:   _/a/Brai}');
Error('\P{Sc:   _/a/Brai}');
Expect(1, 10495, '\p{Sc:   brai}', "");
Expect(0, 10495, '\p{^Sc:   brai}', "");
Expect(0, 10495, '\P{Sc:   brai}', "");
Expect(1, 10495, '\P{^Sc:   brai}', "");
Expect(0, 10239, '\p{Sc:   brai}', "");
Expect(1, 10239, '\p{^Sc:   brai}', "");
Expect(1, 10239, '\P{Sc:   brai}', "");
Expect(0, 10239, '\P{^Sc:   brai}', "");
Expect(1, 10495, '\p{Sc=- Brai}', "");
Expect(0, 10495, '\p{^Sc=- Brai}', "");
Expect(0, 10495, '\P{Sc=- Brai}', "");
Expect(1, 10495, '\P{^Sc=- Brai}', "");
Expect(0, 10239, '\p{Sc=- Brai}', "");
Expect(1, 10239, '\p{^Sc=- Brai}', "");
Expect(1, 10239, '\P{Sc=- Brai}', "");
Expect(0, 10239, '\P{^Sc=- Brai}', "");
Error('\p{Is_Script=_	BRAILLE/a/}');
Error('\P{Is_Script=_	BRAILLE/a/}');
Expect(1, 10495, '\p{Is_Script=braille}', "");
Expect(0, 10495, '\p{^Is_Script=braille}', "");
Expect(0, 10495, '\P{Is_Script=braille}', "");
Expect(1, 10495, '\P{^Is_Script=braille}', "");
Expect(0, 10239, '\p{Is_Script=braille}', "");
Expect(1, 10239, '\p{^Is_Script=braille}', "");
Expect(1, 10239, '\P{Is_Script=braille}', "");
Expect(0, 10239, '\P{^Is_Script=braille}', "");
Expect(1, 10495, '\p{Is_Script: 	_braille}', "");
Expect(0, 10495, '\p{^Is_Script: 	_braille}', "");
Expect(0, 10495, '\P{Is_Script: 	_braille}', "");
Expect(1, 10495, '\P{^Is_Script: 	_braille}', "");
Expect(0, 10239, '\p{Is_Script: 	_braille}', "");
Expect(1, 10239, '\p{^Is_Script: 	_braille}', "");
Expect(1, 10239, '\P{Is_Script: 	_braille}', "");
Expect(0, 10239, '\P{^Is_Script: 	_braille}', "");
Error('\p{Is_Sc=:=_	Brai}');
Error('\P{Is_Sc=:=_	Brai}');
Expect(1, 10495, '\p{Is_Sc=brai}', "");
Expect(0, 10495, '\p{^Is_Sc=brai}', "");
Expect(0, 10495, '\P{Is_Sc=brai}', "");
Expect(1, 10495, '\P{^Is_Sc=brai}', "");
Expect(0, 10239, '\p{Is_Sc=brai}', "");
Expect(1, 10239, '\p{^Is_Sc=brai}', "");
Expect(1, 10239, '\P{Is_Sc=brai}', "");
Expect(0, 10239, '\P{^Is_Sc=brai}', "");
Expect(1, 10495, '\p{Is_Sc=_ BRAI}', "");
Expect(0, 10495, '\p{^Is_Sc=_ BRAI}', "");
Expect(0, 10495, '\P{Is_Sc=_ BRAI}', "");
Expect(1, 10495, '\P{^Is_Sc=_ BRAI}', "");
Expect(0, 10239, '\p{Is_Sc=_ BRAI}', "");
Expect(1, 10239, '\p{^Is_Sc=_ BRAI}', "");
Expect(1, 10239, '\P{Is_Sc=_ BRAI}', "");
Expect(0, 10239, '\P{^Is_Sc=_ BRAI}', "");
Error('\p{Script=/a/Kharoshthi}');
Error('\P{Script=/a/Kharoshthi}');
Expect(1, 68099, '\p{Script: kharoshthi}', "");
Expect(0, 68099, '\p{^Script: kharoshthi}', "");
Expect(0, 68099, '\P{Script: kharoshthi}', "");
Expect(1, 68099, '\P{^Script: kharoshthi}', "");
Expect(0, 68095, '\p{Script: kharoshthi}', "");
Expect(1, 68095, '\p{^Script: kharoshthi}', "");
Expect(1, 68095, '\P{Script: kharoshthi}', "");
Expect(0, 68095, '\P{^Script: kharoshthi}', "");
Expect(1, 68099, '\p{Script:   -	Kharoshthi}', "");
Expect(0, 68099, '\p{^Script:   -	Kharoshthi}', "");
Expect(0, 68099, '\P{Script:   -	Kharoshthi}', "");
Expect(1, 68099, '\P{^Script:   -	Kharoshthi}', "");
Expect(0, 68095, '\p{Script:   -	Kharoshthi}', "");
Expect(1, 68095, '\p{^Script:   -	Kharoshthi}', "");
Expect(1, 68095, '\P{Script:   -	Kharoshthi}', "");
Expect(0, 68095, '\P{^Script:   -	Kharoshthi}', "");
Error('\p{Sc=/a/--Khar}');
Error('\P{Sc=/a/--Khar}');
Expect(1, 68099, '\p{Sc=khar}', "");
Expect(0, 68099, '\p{^Sc=khar}', "");
Expect(0, 68099, '\P{Sc=khar}', "");
Expect(1, 68099, '\P{^Sc=khar}', "");
Expect(0, 68095, '\p{Sc=khar}', "");
Expect(1, 68095, '\p{^Sc=khar}', "");
Expect(1, 68095, '\P{Sc=khar}', "");
Expect(0, 68095, '\P{^Sc=khar}', "");
Expect(1, 68099, '\p{Sc=- KHAR}', "");
Expect(0, 68099, '\p{^Sc=- KHAR}', "");
Expect(0, 68099, '\P{Sc=- KHAR}', "");
Expect(1, 68099, '\P{^Sc=- KHAR}', "");
Expect(0, 68095, '\p{Sc=- KHAR}', "");
Expect(1, 68095, '\p{^Sc=- KHAR}', "");
Expect(1, 68095, '\P{Sc=- KHAR}', "");
Expect(0, 68095, '\P{^Sc=- KHAR}', "");
Error('\p{Is_Script=_Kharoshthi:=}');
Error('\P{Is_Script=_Kharoshthi:=}');
Expect(1, 68099, '\p{Is_Script=kharoshthi}', "");
Expect(0, 68099, '\p{^Is_Script=kharoshthi}', "");
Expect(0, 68099, '\P{Is_Script=kharoshthi}', "");
Expect(1, 68099, '\P{^Is_Script=kharoshthi}', "");
Expect(0, 68095, '\p{Is_Script=kharoshthi}', "");
Expect(1, 68095, '\p{^Is_Script=kharoshthi}', "");
Expect(1, 68095, '\P{Is_Script=kharoshthi}', "");
Expect(0, 68095, '\P{^Is_Script=kharoshthi}', "");
Expect(1, 68099, '\p{Is_Script= -KHAROSHTHI}', "");
Expect(0, 68099, '\p{^Is_Script= -KHAROSHTHI}', "");
Expect(0, 68099, '\P{Is_Script= -KHAROSHTHI}', "");
Expect(1, 68099, '\P{^Is_Script= -KHAROSHTHI}', "");
Expect(0, 68095, '\p{Is_Script= -KHAROSHTHI}', "");
Expect(1, 68095, '\p{^Is_Script= -KHAROSHTHI}', "");
Expect(1, 68095, '\P{Is_Script= -KHAROSHTHI}', "");
Expect(0, 68095, '\P{^Is_Script= -KHAROSHTHI}', "");
Error('\p{Is_Sc=- Khar/a/}');
Error('\P{Is_Sc=- Khar/a/}');
Expect(1, 68099, '\p{Is_Sc=khar}', "");
Expect(0, 68099, '\p{^Is_Sc=khar}', "");
Expect(0, 68099, '\P{Is_Sc=khar}', "");
Expect(1, 68099, '\P{^Is_Sc=khar}', "");
Expect(0, 68095, '\p{Is_Sc=khar}', "");
Expect(1, 68095, '\p{^Is_Sc=khar}', "");
Expect(1, 68095, '\P{Is_Sc=khar}', "");
Expect(0, 68095, '\P{^Is_Sc=khar}', "");
Expect(1, 68099, '\p{Is_Sc=Khar}', "");
Expect(0, 68099, '\p{^Is_Sc=Khar}', "");
Expect(0, 68099, '\P{Is_Sc=Khar}', "");
Expect(1, 68099, '\P{^Is_Sc=Khar}', "");
Expect(0, 68095, '\p{Is_Sc=Khar}', "");
Expect(1, 68095, '\p{^Is_Sc=Khar}', "");
Expect(1, 68095, '\P{Is_Sc=Khar}', "");
Expect(0, 68095, '\P{^Is_Sc=Khar}', "");
Error('\p{Script=/a/	 Lycian}');
Error('\P{Script=/a/	 Lycian}');
Expect(1, 66204, '\p{Script=lycian}', "");
Expect(0, 66204, '\p{^Script=lycian}', "");
Expect(0, 66204, '\P{Script=lycian}', "");
Expect(1, 66204, '\P{^Script=lycian}', "");
Expect(0, 66175, '\p{Script=lycian}', "");
Expect(1, 66175, '\p{^Script=lycian}', "");
Expect(1, 66175, '\P{Script=lycian}', "");
Expect(0, 66175, '\P{^Script=lycian}', "");
Expect(1, 66204, '\p{Script=_	LYCIAN}', "");
Expect(0, 66204, '\p{^Script=_	LYCIAN}', "");
Expect(0, 66204, '\P{Script=_	LYCIAN}', "");
Expect(1, 66204, '\P{^Script=_	LYCIAN}', "");
Expect(0, 66175, '\p{Script=_	LYCIAN}', "");
Expect(1, 66175, '\p{^Script=_	LYCIAN}', "");
Expect(1, 66175, '\P{Script=_	LYCIAN}', "");
Expect(0, 66175, '\P{^Script=_	LYCIAN}', "");
Error('\p{Sc= /a/lyci}');
Error('\P{Sc= /a/lyci}');
Expect(1, 66204, '\p{Sc=lyci}', "");
Expect(0, 66204, '\p{^Sc=lyci}', "");
Expect(0, 66204, '\P{Sc=lyci}', "");
Expect(1, 66204, '\P{^Sc=lyci}', "");
Expect(0, 66175, '\p{Sc=lyci}', "");
Expect(1, 66175, '\p{^Sc=lyci}', "");
Expect(1, 66175, '\P{Sc=lyci}', "");
Expect(0, 66175, '\P{^Sc=lyci}', "");
Expect(1, 66204, '\p{Sc=__LYCI}', "");
Expect(0, 66204, '\p{^Sc=__LYCI}', "");
Expect(0, 66204, '\P{Sc=__LYCI}', "");
Expect(1, 66204, '\P{^Sc=__LYCI}', "");
Expect(0, 66175, '\p{Sc=__LYCI}', "");
Expect(1, 66175, '\p{^Sc=__LYCI}', "");
Expect(1, 66175, '\P{Sc=__LYCI}', "");
Expect(0, 66175, '\P{^Sc=__LYCI}', "");
Error('\p{Is_Script:	 _Lycian/a/}');
Error('\P{Is_Script:	 _Lycian/a/}');
Expect(1, 66204, '\p{Is_Script=lycian}', "");
Expect(0, 66204, '\p{^Is_Script=lycian}', "");
Expect(0, 66204, '\P{Is_Script=lycian}', "");
Expect(1, 66204, '\P{^Is_Script=lycian}', "");
Expect(0, 66175, '\p{Is_Script=lycian}', "");
Expect(1, 66175, '\p{^Is_Script=lycian}', "");
Expect(1, 66175, '\P{Is_Script=lycian}', "");
Expect(0, 66175, '\P{^Is_Script=lycian}', "");
Expect(1, 66204, '\p{Is_Script:	 _lycian}', "");
Expect(0, 66204, '\p{^Is_Script:	 _lycian}', "");
Expect(0, 66204, '\P{Is_Script:	 _lycian}', "");
Expect(1, 66204, '\P{^Is_Script:	 _lycian}', "");
Expect(0, 66175, '\p{Is_Script:	 _lycian}', "");
Expect(1, 66175, '\p{^Is_Script:	 _lycian}', "");
Expect(1, 66175, '\P{Is_Script:	 _lycian}', "");
Expect(0, 66175, '\P{^Is_Script:	 _lycian}', "");
Error('\p{Is_Sc=_	lyci/a/}');
Error('\P{Is_Sc=_	lyci/a/}');
Expect(1, 66204, '\p{Is_Sc=lyci}', "");
Expect(0, 66204, '\p{^Is_Sc=lyci}', "");
Expect(0, 66204, '\P{Is_Sc=lyci}', "");
Expect(1, 66204, '\P{^Is_Sc=lyci}', "");
Expect(0, 66175, '\p{Is_Sc=lyci}', "");
Expect(1, 66175, '\p{^Is_Sc=lyci}', "");
Expect(1, 66175, '\P{Is_Sc=lyci}', "");
Expect(0, 66175, '\P{^Is_Sc=lyci}', "");
Expect(1, 66204, '\p{Is_Sc=	Lyci}', "");
Expect(0, 66204, '\p{^Is_Sc=	Lyci}', "");
Expect(0, 66204, '\P{Is_Sc=	Lyci}', "");
Expect(1, 66204, '\P{^Is_Sc=	Lyci}', "");
Expect(0, 66175, '\p{Is_Sc=	Lyci}', "");
Expect(1, 66175, '\p{^Is_Sc=	Lyci}', "");
Expect(1, 66175, '\P{Is_Sc=	Lyci}', "");
Expect(0, 66175, '\P{^Is_Sc=	Lyci}', "");
Error('\p{Script=:=-	bopomofo}');
Error('\P{Script=:=-	bopomofo}');
Expect(1, 747, '\p{Script=bopomofo}', "");
Expect(0, 747, '\p{^Script=bopomofo}', "");
Expect(0, 747, '\P{Script=bopomofo}', "");
Expect(1, 747, '\P{^Script=bopomofo}', "");
Expect(0, 745, '\p{Script=bopomofo}', "");
Expect(1, 745, '\p{^Script=bopomofo}', "");
Expect(1, 745, '\P{Script=bopomofo}', "");
Expect(0, 745, '\P{^Script=bopomofo}', "");
Expect(1, 747, '\p{Script=_-BOPOMOFO}', "");
Expect(0, 747, '\p{^Script=_-BOPOMOFO}', "");
Expect(0, 747, '\P{Script=_-BOPOMOFO}', "");
Expect(1, 747, '\P{^Script=_-BOPOMOFO}', "");
Expect(0, 745, '\p{Script=_-BOPOMOFO}', "");
Expect(1, 745, '\p{^Script=_-BOPOMOFO}', "");
Expect(1, 745, '\P{Script=_-BOPOMOFO}', "");
Expect(0, 745, '\P{^Script=_-BOPOMOFO}', "");
Error('\p{Sc= -Bopo/a/}');
Error('\P{Sc= -Bopo/a/}');
Expect(1, 747, '\p{Sc=bopo}', "");
Expect(0, 747, '\p{^Sc=bopo}', "");
Expect(0, 747, '\P{Sc=bopo}', "");
Expect(1, 747, '\P{^Sc=bopo}', "");
Expect(0, 745, '\p{Sc=bopo}', "");
Expect(1, 745, '\p{^Sc=bopo}', "");
Expect(1, 745, '\P{Sc=bopo}', "");
Expect(0, 745, '\P{^Sc=bopo}', "");
Expect(1, 747, '\p{Sc=__bopo}', "");
Expect(0, 747, '\p{^Sc=__bopo}', "");
Expect(0, 747, '\P{Sc=__bopo}', "");
Expect(1, 747, '\P{^Sc=__bopo}', "");
Expect(0, 745, '\p{Sc=__bopo}', "");
Expect(1, 745, '\p{^Sc=__bopo}', "");
Expect(1, 745, '\P{Sc=__bopo}', "");
Expect(0, 745, '\P{^Sc=__bopo}', "");
Error('\p{Is_Script= BOPOMOFO:=}');
Error('\P{Is_Script= BOPOMOFO:=}');
Expect(1, 747, '\p{Is_Script=bopomofo}', "");
Expect(0, 747, '\p{^Is_Script=bopomofo}', "");
Expect(0, 747, '\P{Is_Script=bopomofo}', "");
Expect(1, 747, '\P{^Is_Script=bopomofo}', "");
Expect(0, 745, '\p{Is_Script=bopomofo}', "");
Expect(1, 745, '\p{^Is_Script=bopomofo}', "");
Expect(1, 745, '\P{Is_Script=bopomofo}', "");
Expect(0, 745, '\P{^Is_Script=bopomofo}', "");
Expect(1, 747, '\p{Is_Script=	BOPOMOFO}', "");
Expect(0, 747, '\p{^Is_Script=	BOPOMOFO}', "");
Expect(0, 747, '\P{Is_Script=	BOPOMOFO}', "");
Expect(1, 747, '\P{^Is_Script=	BOPOMOFO}', "");
Expect(0, 745, '\p{Is_Script=	BOPOMOFO}', "");
Expect(1, 745, '\p{^Is_Script=	BOPOMOFO}', "");
Expect(1, 745, '\P{Is_Script=	BOPOMOFO}', "");
Expect(0, 745, '\P{^Is_Script=	BOPOMOFO}', "");
Error('\p{Is_Sc=/a/	BOPO}');
Error('\P{Is_Sc=/a/	BOPO}');
Expect(1, 747, '\p{Is_Sc=bopo}', "");
Expect(0, 747, '\p{^Is_Sc=bopo}', "");
Expect(0, 747, '\P{Is_Sc=bopo}', "");
Expect(1, 747, '\P{^Is_Sc=bopo}', "");
Expect(0, 745, '\p{Is_Sc=bopo}', "");
Expect(1, 745, '\p{^Is_Sc=bopo}', "");
Expect(1, 745, '\P{Is_Sc=bopo}', "");
Expect(0, 745, '\P{^Is_Sc=bopo}', "");
Expect(1, 747, '\p{Is_Sc: - BOPO}', "");
Expect(0, 747, '\p{^Is_Sc: - BOPO}', "");
Expect(0, 747, '\P{Is_Sc: - BOPO}', "");
Expect(1, 747, '\P{^Is_Sc: - BOPO}', "");
Expect(0, 745, '\p{Is_Sc: - BOPO}', "");
Expect(1, 745, '\p{^Is_Sc: - BOPO}', "");
Expect(1, 745, '\P{Is_Sc: - BOPO}', "");
Expect(0, 745, '\P{^Is_Sc: - BOPO}', "");
Error('\p{Script=/a/	REJANG}');
Error('\P{Script=/a/	REJANG}');
Expect(1, 43347, '\p{Script=rejang}', "");
Expect(0, 43347, '\p{^Script=rejang}', "");
Expect(0, 43347, '\P{Script=rejang}', "");
Expect(1, 43347, '\P{^Script=rejang}', "");
Expect(0, 43311, '\p{Script=rejang}', "");
Expect(1, 43311, '\p{^Script=rejang}', "");
Expect(1, 43311, '\P{Script=rejang}', "");
Expect(0, 43311, '\P{^Script=rejang}', "");
Expect(1, 43347, '\p{Script=_	rejang}', "");
Expect(0, 43347, '\p{^Script=_	rejang}', "");
Expect(0, 43347, '\P{Script=_	rejang}', "");
Expect(1, 43347, '\P{^Script=_	rejang}', "");
Expect(0, 43311, '\p{Script=_	rejang}', "");
Expect(1, 43311, '\p{^Script=_	rejang}', "");
Expect(1, 43311, '\P{Script=_	rejang}', "");
Expect(0, 43311, '\P{^Script=_	rejang}', "");
Error('\p{Sc=:= Rjng}');
Error('\P{Sc=:= Rjng}');
Expect(1, 43347, '\p{Sc=rjng}', "");
Expect(0, 43347, '\p{^Sc=rjng}', "");
Expect(0, 43347, '\P{Sc=rjng}', "");
Expect(1, 43347, '\P{^Sc=rjng}', "");
Expect(0, 43311, '\p{Sc=rjng}', "");
Expect(1, 43311, '\p{^Sc=rjng}', "");
Expect(1, 43311, '\P{Sc=rjng}', "");
Expect(0, 43311, '\P{^Sc=rjng}', "");
Expect(1, 43347, '\p{Sc=_	Rjng}', "");
Expect(0, 43347, '\p{^Sc=_	Rjng}', "");
Expect(0, 43347, '\P{Sc=_	Rjng}', "");
Expect(1, 43347, '\P{^Sc=_	Rjng}', "");
Expect(0, 43311, '\p{Sc=_	Rjng}', "");
Expect(1, 43311, '\p{^Sc=_	Rjng}', "");
Expect(1, 43311, '\P{Sc=_	Rjng}', "");
Expect(0, 43311, '\P{^Sc=_	Rjng}', "");
Error('\p{Is_Script:_ Rejang/a/}');
Error('\P{Is_Script:_ Rejang/a/}');
Expect(1, 43347, '\p{Is_Script=rejang}', "");
Expect(0, 43347, '\p{^Is_Script=rejang}', "");
Expect(0, 43347, '\P{Is_Script=rejang}', "");
Expect(1, 43347, '\P{^Is_Script=rejang}', "");
Expect(0, 43311, '\p{Is_Script=rejang}', "");
Expect(1, 43311, '\p{^Is_Script=rejang}', "");
Expect(1, 43311, '\P{Is_Script=rejang}', "");
Expect(0, 43311, '\P{^Is_Script=rejang}', "");
Expect(1, 43347, '\p{Is_Script=	-REJANG}', "");
Expect(0, 43347, '\p{^Is_Script=	-REJANG}', "");
Expect(0, 43347, '\P{Is_Script=	-REJANG}', "");
Expect(1, 43347, '\P{^Is_Script=	-REJANG}', "");
Expect(0, 43311, '\p{Is_Script=	-REJANG}', "");
Expect(1, 43311, '\p{^Is_Script=	-REJANG}', "");
Expect(1, 43311, '\P{Is_Script=	-REJANG}', "");
Expect(0, 43311, '\P{^Is_Script=	-REJANG}', "");
Error('\p{Is_Sc= _rjng:=}');
Error('\P{Is_Sc= _rjng:=}');
Expect(1, 43347, '\p{Is_Sc=rjng}', "");
Expect(0, 43347, '\p{^Is_Sc=rjng}', "");
Expect(0, 43347, '\P{Is_Sc=rjng}', "");
Expect(1, 43347, '\P{^Is_Sc=rjng}', "");
Expect(0, 43311, '\p{Is_Sc=rjng}', "");
Expect(1, 43311, '\p{^Is_Sc=rjng}', "");
Expect(1, 43311, '\P{Is_Sc=rjng}', "");
Expect(0, 43311, '\P{^Is_Sc=rjng}', "");
Expect(1, 43347, '\p{Is_Sc: _Rjng}', "");
Expect(0, 43347, '\p{^Is_Sc: _Rjng}', "");
Expect(0, 43347, '\P{Is_Sc: _Rjng}', "");
Expect(1, 43347, '\P{^Is_Sc: _Rjng}', "");
Expect(0, 43311, '\p{Is_Sc: _Rjng}', "");
Expect(1, 43311, '\p{^Is_Sc: _Rjng}', "");
Expect(1, 43311, '\P{Is_Sc: _Rjng}', "");
Expect(0, 43311, '\P{^Is_Sc: _Rjng}', "");
Error('\p{Script= hanunoo:=}');
Error('\P{Script= hanunoo:=}');
Expect(1, 5940, '\p{Script=hanunoo}', "");
Expect(0, 5940, '\p{^Script=hanunoo}', "");
Expect(0, 5940, '\P{Script=hanunoo}', "");
Expect(1, 5940, '\P{^Script=hanunoo}', "");
Expect(0, 5919, '\p{Script=hanunoo}', "");
Expect(1, 5919, '\p{^Script=hanunoo}', "");
Expect(1, 5919, '\P{Script=hanunoo}', "");
Expect(0, 5919, '\P{^Script=hanunoo}', "");
Expect(1, 5940, '\p{Script=_Hanunoo}', "");
Expect(0, 5940, '\p{^Script=_Hanunoo}', "");
Expect(0, 5940, '\P{Script=_Hanunoo}', "");
Expect(1, 5940, '\P{^Script=_Hanunoo}', "");
Expect(0, 5919, '\p{Script=_Hanunoo}', "");
Expect(1, 5919, '\p{^Script=_Hanunoo}', "");
Expect(1, 5919, '\P{Script=_Hanunoo}', "");
Expect(0, 5919, '\P{^Script=_Hanunoo}', "");
Error('\p{Sc=--hano/a/}');
Error('\P{Sc=--hano/a/}');
Expect(1, 5940, '\p{Sc: hano}', "");
Expect(0, 5940, '\p{^Sc: hano}', "");
Expect(0, 5940, '\P{Sc: hano}', "");
Expect(1, 5940, '\P{^Sc: hano}', "");
Expect(0, 5919, '\p{Sc: hano}', "");
Expect(1, 5919, '\p{^Sc: hano}', "");
Expect(1, 5919, '\P{Sc: hano}', "");
Expect(0, 5919, '\P{^Sc: hano}', "");
Expect(1, 5940, '\p{Sc=	_hano}', "");
Expect(0, 5940, '\p{^Sc=	_hano}', "");
Expect(0, 5940, '\P{Sc=	_hano}', "");
Expect(1, 5940, '\P{^Sc=	_hano}', "");
Expect(0, 5919, '\p{Sc=	_hano}', "");
Expect(1, 5919, '\p{^Sc=	_hano}', "");
Expect(1, 5919, '\P{Sc=	_hano}', "");
Expect(0, 5919, '\P{^Sc=	_hano}', "");
Error('\p{Is_Script=_-HANUNOO:=}');
Error('\P{Is_Script=_-HANUNOO:=}');
Expect(1, 5940, '\p{Is_Script=hanunoo}', "");
Expect(0, 5940, '\p{^Is_Script=hanunoo}', "");
Expect(0, 5940, '\P{Is_Script=hanunoo}', "");
Expect(1, 5940, '\P{^Is_Script=hanunoo}', "");
Expect(0, 5919, '\p{Is_Script=hanunoo}', "");
Expect(1, 5919, '\p{^Is_Script=hanunoo}', "");
Expect(1, 5919, '\P{Is_Script=hanunoo}', "");
Expect(0, 5919, '\P{^Is_Script=hanunoo}', "");
Expect(1, 5940, '\p{Is_Script=	Hanunoo}', "");
Expect(0, 5940, '\p{^Is_Script=	Hanunoo}', "");
Expect(0, 5940, '\P{Is_Script=	Hanunoo}', "");
Expect(1, 5940, '\P{^Is_Script=	Hanunoo}', "");
Expect(0, 5919, '\p{Is_Script=	Hanunoo}', "");
Expect(1, 5919, '\p{^Is_Script=	Hanunoo}', "");
Expect(1, 5919, '\P{Is_Script=	Hanunoo}', "");
Expect(0, 5919, '\P{^Is_Script=	Hanunoo}', "");
Error('\p{Is_Sc=/a/ -Hano}');
Error('\P{Is_Sc=/a/ -Hano}');
Expect(1, 5940, '\p{Is_Sc=hano}', "");
Expect(0, 5940, '\p{^Is_Sc=hano}', "");
Expect(0, 5940, '\P{Is_Sc=hano}', "");
Expect(1, 5940, '\P{^Is_Sc=hano}', "");
Expect(0, 5919, '\p{Is_Sc=hano}', "");
Expect(1, 5919, '\p{^Is_Sc=hano}', "");
Expect(1, 5919, '\P{Is_Sc=hano}', "");
Expect(0, 5919, '\P{^Is_Sc=hano}', "");
Expect(1, 5940, '\p{Is_Sc: -Hano}', "");
Expect(0, 5940, '\p{^Is_Sc: -Hano}', "");
Expect(0, 5940, '\P{Is_Sc: -Hano}', "");
Expect(1, 5940, '\P{^Is_Sc: -Hano}', "");
Expect(0, 5919, '\p{Is_Sc: -Hano}', "");
Expect(1, 5919, '\p{^Is_Sc: -Hano}', "");
Expect(1, 5919, '\P{Is_Sc: -Hano}', "");
Expect(0, 5919, '\P{^Is_Sc: -Hano}', "");
Error('\p{Script=/a/_IMPERIAL Aramaic}');
Error('\P{Script=/a/_IMPERIAL Aramaic}');
Expect(1, 67669, '\p{Script=imperialaramaic}', "");
Expect(0, 67669, '\p{^Script=imperialaramaic}', "");
Expect(0, 67669, '\P{Script=imperialaramaic}', "");
Expect(1, 67669, '\P{^Script=imperialaramaic}', "");
Expect(0, 67647, '\p{Script=imperialaramaic}', "");
Expect(1, 67647, '\p{^Script=imperialaramaic}', "");
Expect(1, 67647, '\P{Script=imperialaramaic}', "");
Expect(0, 67647, '\P{^Script=imperialaramaic}', "");
Expect(1, 67669, '\p{Script=- IMPERIAL	Aramaic}', "");
Expect(0, 67669, '\p{^Script=- IMPERIAL	Aramaic}', "");
Expect(0, 67669, '\P{Script=- IMPERIAL	Aramaic}', "");
Expect(1, 67669, '\P{^Script=- IMPERIAL	Aramaic}', "");
Expect(0, 67647, '\p{Script=- IMPERIAL	Aramaic}', "");
Expect(1, 67647, '\p{^Script=- IMPERIAL	Aramaic}', "");
Expect(1, 67647, '\P{Script=- IMPERIAL	Aramaic}', "");
Expect(0, 67647, '\P{^Script=- IMPERIAL	Aramaic}', "");
Error('\p{Sc=-:=ARMI}');
Error('\P{Sc=-:=ARMI}');
Expect(1, 67669, '\p{Sc=armi}', "");
Expect(0, 67669, '\p{^Sc=armi}', "");
Expect(0, 67669, '\P{Sc=armi}', "");
Expect(1, 67669, '\P{^Sc=armi}', "");
Expect(0, 67647, '\p{Sc=armi}', "");
Expect(1, 67647, '\p{^Sc=armi}', "");
Expect(1, 67647, '\P{Sc=armi}', "");
Expect(0, 67647, '\P{^Sc=armi}', "");
Expect(1, 67669, '\p{Sc=ARMI}', "");
Expect(0, 67669, '\p{^Sc=ARMI}', "");
Expect(0, 67669, '\P{Sc=ARMI}', "");
Expect(1, 67669, '\P{^Sc=ARMI}', "");
Expect(0, 67647, '\p{Sc=ARMI}', "");
Expect(1, 67647, '\p{^Sc=ARMI}', "");
Expect(1, 67647, '\P{Sc=ARMI}', "");
Expect(0, 67647, '\P{^Sc=ARMI}', "");
Error('\p{Is_Script= :=Imperial-Aramaic}');
Error('\P{Is_Script= :=Imperial-Aramaic}');
Expect(1, 67669, '\p{Is_Script=imperialaramaic}', "");
Expect(0, 67669, '\p{^Is_Script=imperialaramaic}', "");
Expect(0, 67669, '\P{Is_Script=imperialaramaic}', "");
Expect(1, 67669, '\P{^Is_Script=imperialaramaic}', "");
Expect(0, 67647, '\p{Is_Script=imperialaramaic}', "");
Expect(1, 67647, '\p{^Is_Script=imperialaramaic}', "");
Expect(1, 67647, '\P{Is_Script=imperialaramaic}', "");
Expect(0, 67647, '\P{^Is_Script=imperialaramaic}', "");
Expect(1, 67669, '\p{Is_Script:			IMPERIAL_ARAMAIC}', "");
Expect(0, 67669, '\p{^Is_Script:			IMPERIAL_ARAMAIC}', "");
Expect(0, 67669, '\P{Is_Script:			IMPERIAL_ARAMAIC}', "");
Expect(1, 67669, '\P{^Is_Script:			IMPERIAL_ARAMAIC}', "");
Expect(0, 67647, '\p{Is_Script:			IMPERIAL_ARAMAIC}', "");
Expect(1, 67647, '\p{^Is_Script:			IMPERIAL_ARAMAIC}', "");
Expect(1, 67647, '\P{Is_Script:			IMPERIAL_ARAMAIC}', "");
Expect(0, 67647, '\P{^Is_Script:			IMPERIAL_ARAMAIC}', "");
Error('\p{Is_Sc=_:=armi}');
Error('\P{Is_Sc=_:=armi}');
Expect(1, 67669, '\p{Is_Sc=armi}', "");
Expect(0, 67669, '\p{^Is_Sc=armi}', "");
Expect(0, 67669, '\P{Is_Sc=armi}', "");
Expect(1, 67669, '\P{^Is_Sc=armi}', "");
Expect(0, 67647, '\p{Is_Sc=armi}', "");
Expect(1, 67647, '\p{^Is_Sc=armi}', "");
Expect(1, 67647, '\P{Is_Sc=armi}', "");
Expect(0, 67647, '\P{^Is_Sc=armi}', "");
Expect(1, 67669, '\p{Is_Sc=_ARMI}', "");
Expect(0, 67669, '\p{^Is_Sc=_ARMI}', "");
Expect(0, 67669, '\P{Is_Sc=_ARMI}', "");
Expect(1, 67669, '\P{^Is_Sc=_ARMI}', "");
Expect(0, 67647, '\p{Is_Sc=_ARMI}', "");
Expect(1, 67647, '\p{^Is_Sc=_ARMI}', "");
Expect(1, 67647, '\P{Is_Sc=_ARMI}', "");
Expect(0, 67647, '\P{^Is_Sc=_ARMI}', "");
Error('\p{Script=:=- Kannada}');
Error('\P{Script=:=- Kannada}');
Expect(1, 3203, '\p{Script=kannada}', "");
Expect(0, 3203, '\p{^Script=kannada}', "");
Expect(0, 3203, '\P{Script=kannada}', "");
Expect(1, 3203, '\P{^Script=kannada}', "");
Expect(0, 3201, '\p{Script=kannada}', "");
Expect(1, 3201, '\p{^Script=kannada}', "");
Expect(1, 3201, '\P{Script=kannada}', "");
Expect(0, 3201, '\P{^Script=kannada}', "");
Expect(1, 3203, '\p{Script=_-kannada}', "");
Expect(0, 3203, '\p{^Script=_-kannada}', "");
Expect(0, 3203, '\P{Script=_-kannada}', "");
Expect(1, 3203, '\P{^Script=_-kannada}', "");
Expect(0, 3201, '\p{Script=_-kannada}', "");
Expect(1, 3201, '\p{^Script=_-kannada}', "");
Expect(1, 3201, '\P{Script=_-kannada}', "");
Expect(0, 3201, '\P{^Script=_-kannada}', "");
Error('\p{Sc=	/a/KNDA}');
Error('\P{Sc=	/a/KNDA}');
Expect(1, 3203, '\p{Sc=knda}', "");
Expect(0, 3203, '\p{^Sc=knda}', "");
Expect(0, 3203, '\P{Sc=knda}', "");
Expect(1, 3203, '\P{^Sc=knda}', "");
Expect(0, 3201, '\p{Sc=knda}', "");
Expect(1, 3201, '\p{^Sc=knda}', "");
Expect(1, 3201, '\P{Sc=knda}', "");
Expect(0, 3201, '\P{^Sc=knda}', "");
Expect(1, 3203, '\p{Sc=_Knda}', "");
Expect(0, 3203, '\p{^Sc=_Knda}', "");
Expect(0, 3203, '\P{Sc=_Knda}', "");
Expect(1, 3203, '\P{^Sc=_Knda}', "");
Expect(0, 3201, '\p{Sc=_Knda}', "");
Expect(1, 3201, '\p{^Sc=_Knda}', "");
Expect(1, 3201, '\P{Sc=_Knda}', "");
Expect(0, 3201, '\P{^Sc=_Knda}', "");
Error('\p{Is_Script= :=kannada}');
Error('\P{Is_Script= :=kannada}');
Expect(1, 3203, '\p{Is_Script=kannada}', "");
Expect(0, 3203, '\p{^Is_Script=kannada}', "");
Expect(0, 3203, '\P{Is_Script=kannada}', "");
Expect(1, 3203, '\P{^Is_Script=kannada}', "");
Expect(0, 3201, '\p{Is_Script=kannada}', "");
Expect(1, 3201, '\p{^Is_Script=kannada}', "");
Expect(1, 3201, '\P{Is_Script=kannada}', "");
Expect(0, 3201, '\P{^Is_Script=kannada}', "");
Expect(1, 3203, '\p{Is_Script:	-_KANNADA}', "");
Expect(0, 3203, '\p{^Is_Script:	-_KANNADA}', "");
Expect(0, 3203, '\P{Is_Script:	-_KANNADA}', "");
Expect(1, 3203, '\P{^Is_Script:	-_KANNADA}', "");
Expect(0, 3201, '\p{Is_Script:	-_KANNADA}', "");
Expect(1, 3201, '\p{^Is_Script:	-_KANNADA}', "");
Expect(1, 3201, '\P{Is_Script:	-_KANNADA}', "");
Expect(0, 3201, '\P{^Is_Script:	-_KANNADA}', "");
Error('\p{Is_Sc=/a/	-knda}');
Error('\P{Is_Sc=/a/	-knda}');
Expect(1, 3203, '\p{Is_Sc=knda}', "");
Expect(0, 3203, '\p{^Is_Sc=knda}', "");
Expect(0, 3203, '\P{Is_Sc=knda}', "");
Expect(1, 3203, '\P{^Is_Sc=knda}', "");
Expect(0, 3201, '\p{Is_Sc=knda}', "");
Expect(1, 3201, '\p{^Is_Sc=knda}', "");
Expect(1, 3201, '\P{Is_Sc=knda}', "");
Expect(0, 3201, '\P{^Is_Sc=knda}', "");
Error('\p{Script=-/a/Khmer}');
Error('\P{Script=-/a/Khmer}');
Expect(1, 6109, '\p{Script=khmer}', "");
Expect(0, 6109, '\p{^Script=khmer}', "");
Expect(0, 6109, '\P{Script=khmer}', "");
Expect(1, 6109, '\P{^Script=khmer}', "");
Expect(0, 6015, '\p{Script=khmer}', "");
Expect(1, 6015, '\p{^Script=khmer}', "");
Expect(1, 6015, '\P{Script=khmer}', "");
Expect(0, 6015, '\P{^Script=khmer}', "");
Expect(1, 6109, '\p{Script=Khmer}', "");
Expect(0, 6109, '\p{^Script=Khmer}', "");
Expect(0, 6109, '\P{Script=Khmer}', "");
Expect(1, 6109, '\P{^Script=Khmer}', "");
Expect(0, 6015, '\p{Script=Khmer}', "");
Expect(1, 6015, '\p{^Script=Khmer}', "");
Expect(1, 6015, '\P{Script=Khmer}', "");
Expect(0, 6015, '\P{^Script=Khmer}', "");
Error('\p{Sc:	 KHMR:=}');
Error('\P{Sc:	 KHMR:=}');
Expect(1, 6109, '\p{Sc=khmr}', "");
Expect(0, 6109, '\p{^Sc=khmr}', "");
Expect(0, 6109, '\P{Sc=khmr}', "");
Expect(1, 6109, '\P{^Sc=khmr}', "");
Expect(0, 6015, '\p{Sc=khmr}', "");
Expect(1, 6015, '\p{^Sc=khmr}', "");
Expect(1, 6015, '\P{Sc=khmr}', "");
Expect(0, 6015, '\P{^Sc=khmr}', "");
Expect(1, 6109, '\p{Sc= khmr}', "");
Expect(0, 6109, '\p{^Sc= khmr}', "");
Expect(0, 6109, '\P{Sc= khmr}', "");
Expect(1, 6109, '\P{^Sc= khmr}', "");
Expect(0, 6015, '\p{Sc= khmr}', "");
Expect(1, 6015, '\p{^Sc= khmr}', "");
Expect(1, 6015, '\P{Sc= khmr}', "");
Expect(0, 6015, '\P{^Sc= khmr}', "");
Error('\p{Is_Script=	:=khmer}');
Error('\P{Is_Script=	:=khmer}');
Expect(1, 6109, '\p{Is_Script=khmer}', "");
Expect(0, 6109, '\p{^Is_Script=khmer}', "");
Expect(0, 6109, '\P{Is_Script=khmer}', "");
Expect(1, 6109, '\P{^Is_Script=khmer}', "");
Expect(0, 6015, '\p{Is_Script=khmer}', "");
Expect(1, 6015, '\p{^Is_Script=khmer}', "");
Expect(1, 6015, '\P{Is_Script=khmer}', "");
Expect(0, 6015, '\P{^Is_Script=khmer}', "");
Expect(1, 6109, '\p{Is_Script=-Khmer}', "");
Expect(0, 6109, '\p{^Is_Script=-Khmer}', "");
Expect(0, 6109, '\P{Is_Script=-Khmer}', "");
Expect(1, 6109, '\P{^Is_Script=-Khmer}', "");
Expect(0, 6015, '\p{Is_Script=-Khmer}', "");
Expect(1, 6015, '\p{^Is_Script=-Khmer}', "");
Expect(1, 6015, '\P{Is_Script=-Khmer}', "");
Expect(0, 6015, '\P{^Is_Script=-Khmer}', "");
Error('\p{Is_Sc=	:=Khmr}');
Error('\P{Is_Sc=	:=Khmr}');
Expect(1, 6109, '\p{Is_Sc=khmr}', "");
Expect(0, 6109, '\p{^Is_Sc=khmr}', "");
Expect(0, 6109, '\P{Is_Sc=khmr}', "");
Expect(1, 6109, '\P{^Is_Sc=khmr}', "");
Expect(0, 6015, '\p{Is_Sc=khmr}', "");
Expect(1, 6015, '\p{^Is_Sc=khmr}', "");
Expect(1, 6015, '\P{Is_Sc=khmr}', "");
Expect(0, 6015, '\P{^Is_Sc=khmr}', "");
Expect(1, 6109, '\p{Is_Sc=- KHMR}', "");
Expect(0, 6109, '\p{^Is_Sc=- KHMR}', "");
Expect(0, 6109, '\P{Is_Sc=- KHMR}', "");
Expect(1, 6109, '\P{^Is_Sc=- KHMR}', "");
Expect(0, 6015, '\p{Is_Sc=- KHMR}', "");
Expect(1, 6015, '\p{^Is_Sc=- KHMR}', "");
Expect(1, 6015, '\P{Is_Sc=- KHMR}', "");
Expect(0, 6015, '\P{^Is_Sc=- KHMR}', "");
Error('\p{Script=/a/ -Cham}');
Error('\P{Script=/a/ -Cham}');
Expect(1, 43574, '\p{Script=cham}', "");
Expect(0, 43574, '\p{^Script=cham}', "");
Expect(0, 43574, '\P{Script=cham}', "");
Expect(1, 43574, '\P{^Script=cham}', "");
Expect(0, 43519, '\p{Script=cham}', "");
Expect(1, 43519, '\p{^Script=cham}', "");
Expect(1, 43519, '\P{Script=cham}', "");
Expect(0, 43519, '\P{^Script=cham}', "");
Error('\p{Sc=-	Cham:=}');
Error('\P{Sc=-	Cham:=}');
Expect(1, 43574, '\p{Sc=cham}', "");
Expect(0, 43574, '\p{^Sc=cham}', "");
Expect(0, 43574, '\P{Sc=cham}', "");
Expect(1, 43574, '\P{^Sc=cham}', "");
Expect(0, 43519, '\p{Sc=cham}', "");
Expect(1, 43519, '\p{^Sc=cham}', "");
Expect(1, 43519, '\P{Sc=cham}', "");
Expect(0, 43519, '\P{^Sc=cham}', "");
Expect(1, 43574, '\p{Sc=	Cham}', "");
Expect(0, 43574, '\p{^Sc=	Cham}', "");
Expect(0, 43574, '\P{Sc=	Cham}', "");
Expect(1, 43574, '\P{^Sc=	Cham}', "");
Expect(0, 43519, '\p{Sc=	Cham}', "");
Expect(1, 43519, '\p{^Sc=	Cham}', "");
Expect(1, 43519, '\P{Sc=	Cham}', "");
Expect(0, 43519, '\P{^Sc=	Cham}', "");
Error('\p{Is_Script=_:=CHAM}');
Error('\P{Is_Script=_:=CHAM}');
Expect(1, 43574, '\p{Is_Script=cham}', "");
Expect(0, 43574, '\p{^Is_Script=cham}', "");
Expect(0, 43574, '\P{Is_Script=cham}', "");
Expect(1, 43574, '\P{^Is_Script=cham}', "");
Expect(0, 43519, '\p{Is_Script=cham}', "");
Expect(1, 43519, '\p{^Is_Script=cham}', "");
Expect(1, 43519, '\P{Is_Script=cham}', "");
Expect(0, 43519, '\P{^Is_Script=cham}', "");
Expect(1, 43574, '\p{Is_Script=_ Cham}', "");
Expect(0, 43574, '\p{^Is_Script=_ Cham}', "");
Expect(0, 43574, '\P{Is_Script=_ Cham}', "");
Expect(1, 43574, '\P{^Is_Script=_ Cham}', "");
Expect(0, 43519, '\p{Is_Script=_ Cham}', "");
Expect(1, 43519, '\p{^Is_Script=_ Cham}', "");
Expect(1, 43519, '\P{Is_Script=_ Cham}', "");
Expect(0, 43519, '\P{^Is_Script=_ Cham}', "");
Error('\p{Is_Sc=/a/_	Cham}');
Error('\P{Is_Sc=/a/_	Cham}');
Expect(1, 43574, '\p{Is_Sc=cham}', "");
Expect(0, 43574, '\p{^Is_Sc=cham}', "");
Expect(0, 43574, '\P{Is_Sc=cham}', "");
Expect(1, 43574, '\P{^Is_Sc=cham}', "");
Expect(0, 43519, '\p{Is_Sc=cham}', "");
Expect(1, 43519, '\p{^Is_Sc=cham}', "");
Expect(1, 43519, '\P{Is_Sc=cham}', "");
Expect(0, 43519, '\P{^Is_Sc=cham}', "");
Expect(1, 43574, '\p{Is_Sc= 	CHAM}', "");
Expect(0, 43574, '\p{^Is_Sc= 	CHAM}', "");
Expect(0, 43574, '\P{Is_Sc= 	CHAM}', "");
Expect(1, 43574, '\P{^Is_Sc= 	CHAM}', "");
Expect(0, 43519, '\p{Is_Sc= 	CHAM}', "");
Expect(1, 43519, '\p{^Is_Sc= 	CHAM}', "");
Expect(1, 43519, '\P{Is_Sc= 	CHAM}', "");
Expect(0, 43519, '\P{^Is_Sc= 	CHAM}', "");
Error('\p{Script=_	Tibetan/a/}');
Error('\P{Script=_	Tibetan/a/}');
Expect(1, 3911, '\p{Script=tibetan}', "");
Expect(0, 3911, '\p{^Script=tibetan}', "");
Expect(0, 3911, '\P{Script=tibetan}', "");
Expect(1, 3911, '\P{^Script=tibetan}', "");
Expect(0, 3839, '\p{Script=tibetan}', "");
Expect(1, 3839, '\p{^Script=tibetan}', "");
Expect(1, 3839, '\P{Script=tibetan}', "");
Expect(0, 3839, '\P{^Script=tibetan}', "");
Error('\p{Sc:/a/--Tibt}');
Error('\P{Sc:/a/--Tibt}');
Expect(1, 3911, '\p{Sc=tibt}', "");
Expect(0, 3911, '\p{^Sc=tibt}', "");
Expect(0, 3911, '\P{Sc=tibt}', "");
Expect(1, 3911, '\P{^Sc=tibt}', "");
Expect(0, 3839, '\p{Sc=tibt}', "");
Expect(1, 3839, '\p{^Sc=tibt}', "");
Expect(1, 3839, '\P{Sc=tibt}', "");
Expect(0, 3839, '\P{^Sc=tibt}', "");
Expect(1, 3911, '\p{Sc= -Tibt}', "");
Expect(0, 3911, '\p{^Sc= -Tibt}', "");
Expect(0, 3911, '\P{Sc= -Tibt}', "");
Expect(1, 3911, '\P{^Sc= -Tibt}', "");
Expect(0, 3839, '\p{Sc= -Tibt}', "");
Expect(1, 3839, '\p{^Sc= -Tibt}', "");
Expect(1, 3839, '\P{Sc= -Tibt}', "");
Expect(0, 3839, '\P{^Sc= -Tibt}', "");
Error('\p{Is_Script=	_tibetan:=}');
Error('\P{Is_Script=	_tibetan:=}');
Expect(1, 3911, '\p{Is_Script=tibetan}', "");
Expect(0, 3911, '\p{^Is_Script=tibetan}', "");
Expect(0, 3911, '\P{Is_Script=tibetan}', "");
Expect(1, 3911, '\P{^Is_Script=tibetan}', "");
Expect(0, 3839, '\p{Is_Script=tibetan}', "");
Expect(1, 3839, '\p{^Is_Script=tibetan}', "");
Expect(1, 3839, '\P{Is_Script=tibetan}', "");
Expect(0, 3839, '\P{^Is_Script=tibetan}', "");
Expect(1, 3911, '\p{Is_Script=	-Tibetan}', "");
Expect(0, 3911, '\p{^Is_Script=	-Tibetan}', "");
Expect(0, 3911, '\P{Is_Script=	-Tibetan}', "");
Expect(1, 3911, '\P{^Is_Script=	-Tibetan}', "");
Expect(0, 3839, '\p{Is_Script=	-Tibetan}', "");
Expect(1, 3839, '\p{^Is_Script=	-Tibetan}', "");
Expect(1, 3839, '\P{Is_Script=	-Tibetan}', "");
Expect(0, 3839, '\P{^Is_Script=	-Tibetan}', "");
Error('\p{Is_Sc=/a/		TIBT}');
Error('\P{Is_Sc=/a/		TIBT}');
Expect(1, 3911, '\p{Is_Sc=tibt}', "");
Expect(0, 3911, '\p{^Is_Sc=tibt}', "");
Expect(0, 3911, '\P{Is_Sc=tibt}', "");
Expect(1, 3911, '\P{^Is_Sc=tibt}', "");
Expect(0, 3839, '\p{Is_Sc=tibt}', "");
Expect(1, 3839, '\p{^Is_Sc=tibt}', "");
Expect(1, 3839, '\P{Is_Sc=tibt}', "");
Expect(0, 3839, '\P{^Is_Sc=tibt}', "");
Expect(1, 3911, '\p{Is_Sc=__tibt}', "");
Expect(0, 3911, '\p{^Is_Sc=__tibt}', "");
Expect(0, 3911, '\P{Is_Sc=__tibt}', "");
Expect(1, 3911, '\P{^Is_Sc=__tibt}', "");
Expect(0, 3839, '\p{Is_Sc=__tibt}', "");
Expect(1, 3839, '\p{^Is_Sc=__tibt}', "");
Expect(1, 3839, '\P{Is_Sc=__tibt}', "");
Expect(0, 3839, '\P{^Is_Sc=__tibt}', "");
Error('\p{Script=__Ogham/a/}');
Error('\P{Script=__Ogham/a/}');
Expect(1, 5788, '\p{Script=ogham}', "");
Expect(0, 5788, '\p{^Script=ogham}', "");
Expect(0, 5788, '\P{Script=ogham}', "");
Expect(1, 5788, '\P{^Script=ogham}', "");
Expect(0, 5759, '\p{Script=ogham}', "");
Expect(1, 5759, '\p{^Script=ogham}', "");
Expect(1, 5759, '\P{Script=ogham}', "");
Expect(0, 5759, '\P{^Script=ogham}', "");
Expect(1, 5788, '\p{Script= 	Ogham}', "");
Expect(0, 5788, '\p{^Script= 	Ogham}', "");
Expect(0, 5788, '\P{Script= 	Ogham}', "");
Expect(1, 5788, '\P{^Script= 	Ogham}', "");
Expect(0, 5759, '\p{Script= 	Ogham}', "");
Expect(1, 5759, '\p{^Script= 	Ogham}', "");
Expect(1, 5759, '\P{Script= 	Ogham}', "");
Expect(0, 5759, '\P{^Script= 	Ogham}', "");
Error('\p{Sc=:=Ogam}');
Error('\P{Sc=:=Ogam}');
Expect(1, 5788, '\p{Sc=ogam}', "");
Expect(0, 5788, '\p{^Sc=ogam}', "");
Expect(0, 5788, '\P{Sc=ogam}', "");
Expect(1, 5788, '\P{^Sc=ogam}', "");
Expect(0, 5759, '\p{Sc=ogam}', "");
Expect(1, 5759, '\p{^Sc=ogam}', "");
Expect(1, 5759, '\P{Sc=ogam}', "");
Expect(0, 5759, '\P{^Sc=ogam}', "");
Expect(1, 5788, '\p{Sc=- OGAM}', "");
Expect(0, 5788, '\p{^Sc=- OGAM}', "");
Expect(0, 5788, '\P{Sc=- OGAM}', "");
Expect(1, 5788, '\P{^Sc=- OGAM}', "");
Expect(0, 5759, '\p{Sc=- OGAM}', "");
Expect(1, 5759, '\p{^Sc=- OGAM}', "");
Expect(1, 5759, '\P{Sc=- OGAM}', "");
Expect(0, 5759, '\P{^Sc=- OGAM}', "");
Error('\p{Is_Script=-	ogham:=}');
Error('\P{Is_Script=-	ogham:=}');
Expect(1, 5788, '\p{Is_Script=ogham}', "");
Expect(0, 5788, '\p{^Is_Script=ogham}', "");
Expect(0, 5788, '\P{Is_Script=ogham}', "");
Expect(1, 5788, '\P{^Is_Script=ogham}', "");
Expect(0, 5759, '\p{Is_Script=ogham}', "");
Expect(1, 5759, '\p{^Is_Script=ogham}', "");
Expect(1, 5759, '\P{Is_Script=ogham}', "");
Expect(0, 5759, '\P{^Is_Script=ogham}', "");
Expect(1, 5788, '\p{Is_Script=_Ogham}', "");
Expect(0, 5788, '\p{^Is_Script=_Ogham}', "");
Expect(0, 5788, '\P{Is_Script=_Ogham}', "");
Expect(1, 5788, '\P{^Is_Script=_Ogham}', "");
Expect(0, 5759, '\p{Is_Script=_Ogham}', "");
Expect(1, 5759, '\p{^Is_Script=_Ogham}', "");
Expect(1, 5759, '\P{Is_Script=_Ogham}', "");
Expect(0, 5759, '\P{^Is_Script=_Ogham}', "");
Error('\p{Is_Sc=__ogam:=}');
Error('\P{Is_Sc=__ogam:=}');
Expect(1, 5788, '\p{Is_Sc=ogam}', "");
Expect(0, 5788, '\p{^Is_Sc=ogam}', "");
Expect(0, 5788, '\P{Is_Sc=ogam}', "");
Expect(1, 5788, '\P{^Is_Sc=ogam}', "");
Expect(0, 5759, '\p{Is_Sc=ogam}', "");
Expect(1, 5759, '\p{^Is_Sc=ogam}', "");
Expect(1, 5759, '\P{Is_Sc=ogam}', "");
Expect(0, 5759, '\P{^Is_Sc=ogam}', "");
Expect(1, 5788, '\p{Is_Sc= 	OGAM}', "");
Expect(0, 5788, '\p{^Is_Sc= 	OGAM}', "");
Expect(0, 5788, '\P{Is_Sc= 	OGAM}', "");
Expect(1, 5788, '\P{^Is_Sc= 	OGAM}', "");
Expect(0, 5759, '\p{Is_Sc= 	OGAM}', "");
Expect(1, 5759, '\p{^Is_Sc= 	OGAM}', "");
Expect(1, 5759, '\P{Is_Sc= 	OGAM}', "");
Expect(0, 5759, '\P{^Is_Sc= 	OGAM}', "");
Error('\p{Script=	tai	Viet:=}');
Error('\P{Script=	tai	Viet:=}');
Expect(1, 43714, '\p{Script:   taiviet}', "");
Expect(0, 43714, '\p{^Script:   taiviet}', "");
Expect(0, 43714, '\P{Script:   taiviet}', "");
Expect(1, 43714, '\P{^Script:   taiviet}', "");
Expect(0, 43647, '\p{Script:   taiviet}', "");
Expect(1, 43647, '\p{^Script:   taiviet}', "");
Expect(1, 43647, '\P{Script:   taiviet}', "");
Expect(0, 43647, '\P{^Script:   taiviet}', "");
Expect(1, 43714, '\p{Script=-tai Viet}', "");
Expect(0, 43714, '\p{^Script=-tai Viet}', "");
Expect(0, 43714, '\P{Script=-tai Viet}', "");
Expect(1, 43714, '\P{^Script=-tai Viet}', "");
Expect(0, 43647, '\p{Script=-tai Viet}', "");
Expect(1, 43647, '\p{^Script=-tai Viet}', "");
Expect(1, 43647, '\P{Script=-tai Viet}', "");
Expect(0, 43647, '\P{^Script=-tai Viet}', "");
Error('\p{Sc=:=Tavt}');
Error('\P{Sc=:=Tavt}');
Expect(1, 43714, '\p{Sc: tavt}', "");
Expect(0, 43714, '\p{^Sc: tavt}', "");
Expect(0, 43714, '\P{Sc: tavt}', "");
Expect(1, 43714, '\P{^Sc: tavt}', "");
Expect(0, 43647, '\p{Sc: tavt}', "");
Expect(1, 43647, '\p{^Sc: tavt}', "");
Expect(1, 43647, '\P{Sc: tavt}', "");
Expect(0, 43647, '\P{^Sc: tavt}', "");
Expect(1, 43714, '\p{Sc=_	TAVT}', "");
Expect(0, 43714, '\p{^Sc=_	TAVT}', "");
Expect(0, 43714, '\P{Sc=_	TAVT}', "");
Expect(1, 43714, '\P{^Sc=_	TAVT}', "");
Expect(0, 43647, '\p{Sc=_	TAVT}', "");
Expect(1, 43647, '\p{^Sc=_	TAVT}', "");
Expect(1, 43647, '\P{Sc=_	TAVT}', "");
Expect(0, 43647, '\P{^Sc=_	TAVT}', "");
Error('\p{Is_Script= -tai:=viet}');
Error('\P{Is_Script= -tai:=viet}');
Expect(1, 43714, '\p{Is_Script=taiviet}', "");
Expect(0, 43714, '\p{^Is_Script=taiviet}', "");
Expect(0, 43714, '\P{Is_Script=taiviet}', "");
Expect(1, 43714, '\P{^Is_Script=taiviet}', "");
Expect(0, 43647, '\p{Is_Script=taiviet}', "");
Expect(1, 43647, '\p{^Is_Script=taiviet}', "");
Expect(1, 43647, '\P{Is_Script=taiviet}', "");
Expect(0, 43647, '\P{^Is_Script=taiviet}', "");
Expect(1, 43714, '\p{Is_Script=_	Tai_Viet}', "");
Expect(0, 43714, '\p{^Is_Script=_	Tai_Viet}', "");
Expect(0, 43714, '\P{Is_Script=_	Tai_Viet}', "");
Expect(1, 43714, '\P{^Is_Script=_	Tai_Viet}', "");
Expect(0, 43647, '\p{Is_Script=_	Tai_Viet}', "");
Expect(1, 43647, '\p{^Is_Script=_	Tai_Viet}', "");
Expect(1, 43647, '\P{Is_Script=_	Tai_Viet}', "");
Expect(0, 43647, '\P{^Is_Script=_	Tai_Viet}', "");
Error('\p{Is_Sc=/a/	 tavt}');
Error('\P{Is_Sc=/a/	 tavt}');
Expect(1, 43714, '\p{Is_Sc=tavt}', "");
Expect(0, 43714, '\p{^Is_Sc=tavt}', "");
Expect(0, 43714, '\P{Is_Sc=tavt}', "");
Expect(1, 43714, '\P{^Is_Sc=tavt}', "");
Expect(0, 43647, '\p{Is_Sc=tavt}', "");
Expect(1, 43647, '\p{^Is_Sc=tavt}', "");
Expect(1, 43647, '\P{Is_Sc=tavt}', "");
Expect(0, 43647, '\P{^Is_Sc=tavt}', "");
Expect(1, 43714, '\p{Is_Sc=__Tavt}', "");
Expect(0, 43714, '\p{^Is_Sc=__Tavt}', "");
Expect(0, 43714, '\P{Is_Sc=__Tavt}', "");
Expect(1, 43714, '\P{^Is_Sc=__Tavt}', "");
Expect(0, 43647, '\p{Is_Sc=__Tavt}', "");
Expect(1, 43647, '\p{^Is_Sc=__Tavt}', "");
Expect(1, 43647, '\P{Is_Sc=__Tavt}', "");
Expect(0, 43647, '\P{^Is_Sc=__Tavt}', "");
Error('\p{Script=_-malayalam:=}');
Error('\P{Script=_-malayalam:=}');
Expect(1, 3331, '\p{Script=malayalam}', "");
Expect(0, 3331, '\p{^Script=malayalam}', "");
Expect(0, 3331, '\P{Script=malayalam}', "");
Expect(1, 3331, '\P{^Script=malayalam}', "");
Expect(0, 3329, '\p{Script=malayalam}', "");
Expect(1, 3329, '\p{^Script=malayalam}', "");
Expect(1, 3329, '\P{Script=malayalam}', "");
Expect(0, 3329, '\P{^Script=malayalam}', "");
Expect(1, 3331, '\p{Script= 	Malayalam}', "");
Expect(0, 3331, '\p{^Script= 	Malayalam}', "");
Expect(0, 3331, '\P{Script= 	Malayalam}', "");
Expect(1, 3331, '\P{^Script= 	Malayalam}', "");
Expect(0, 3329, '\p{Script= 	Malayalam}', "");
Expect(1, 3329, '\p{^Script= 	Malayalam}', "");
Expect(1, 3329, '\P{Script= 	Malayalam}', "");
Expect(0, 3329, '\P{^Script= 	Malayalam}', "");
Error('\p{Sc= /a/mlym}');
Error('\P{Sc= /a/mlym}');
Expect(1, 3331, '\p{Sc=mlym}', "");
Expect(0, 3331, '\p{^Sc=mlym}', "");
Expect(0, 3331, '\P{Sc=mlym}', "");
Expect(1, 3331, '\P{^Sc=mlym}', "");
Expect(0, 3329, '\p{Sc=mlym}', "");
Expect(1, 3329, '\p{^Sc=mlym}', "");
Expect(1, 3329, '\P{Sc=mlym}', "");
Expect(0, 3329, '\P{^Sc=mlym}', "");
Expect(1, 3331, '\p{Sc=_-mlym}', "");
Expect(0, 3331, '\p{^Sc=_-mlym}', "");
Expect(0, 3331, '\P{Sc=_-mlym}', "");
Expect(1, 3331, '\P{^Sc=_-mlym}', "");
Expect(0, 3329, '\p{Sc=_-mlym}', "");
Expect(1, 3329, '\p{^Sc=_-mlym}', "");
Expect(1, 3329, '\P{Sc=_-mlym}', "");
Expect(0, 3329, '\P{^Sc=_-mlym}', "");
Error('\p{Is_Script=	/a/MALAYALAM}');
Error('\P{Is_Script=	/a/MALAYALAM}');
Expect(1, 3331, '\p{Is_Script=malayalam}', "");
Expect(0, 3331, '\p{^Is_Script=malayalam}', "");
Expect(0, 3331, '\P{Is_Script=malayalam}', "");
Expect(1, 3331, '\P{^Is_Script=malayalam}', "");
Expect(0, 3329, '\p{Is_Script=malayalam}', "");
Expect(1, 3329, '\p{^Is_Script=malayalam}', "");
Expect(1, 3329, '\P{Is_Script=malayalam}', "");
Expect(0, 3329, '\P{^Is_Script=malayalam}', "");
Expect(1, 3331, '\p{Is_Script:	Malayalam}', "");
Expect(0, 3331, '\p{^Is_Script:	Malayalam}', "");
Expect(0, 3331, '\P{Is_Script:	Malayalam}', "");
Expect(1, 3331, '\P{^Is_Script:	Malayalam}', "");
Expect(0, 3329, '\p{Is_Script:	Malayalam}', "");
Expect(1, 3329, '\p{^Is_Script:	Malayalam}', "");
Expect(1, 3329, '\P{Is_Script:	Malayalam}', "");
Expect(0, 3329, '\P{^Is_Script:	Malayalam}', "");
Error('\p{Is_Sc=/a/_-Mlym}');
Error('\P{Is_Sc=/a/_-Mlym}');
Expect(1, 3331, '\p{Is_Sc=mlym}', "");
Expect(0, 3331, '\p{^Is_Sc=mlym}', "");
Expect(0, 3331, '\P{Is_Sc=mlym}', "");
Expect(1, 3331, '\P{^Is_Sc=mlym}', "");
Expect(0, 3329, '\p{Is_Sc=mlym}', "");
Expect(1, 3329, '\p{^Is_Sc=mlym}', "");
Expect(1, 3329, '\P{Is_Sc=mlym}', "");
Expect(0, 3329, '\P{^Is_Sc=mlym}', "");
Expect(1, 3331, '\p{Is_Sc=	mlym}', "");
Expect(0, 3331, '\p{^Is_Sc=	mlym}', "");
Expect(0, 3331, '\P{Is_Sc=	mlym}', "");
Expect(1, 3331, '\P{^Is_Sc=	mlym}', "");
Expect(0, 3329, '\p{Is_Sc=	mlym}', "");
Expect(1, 3329, '\p{^Is_Sc=	mlym}', "");
Expect(1, 3329, '\P{Is_Sc=	mlym}', "");
Expect(0, 3329, '\P{^Is_Sc=	mlym}', "");
Error('\p{Script=		Old:=PERSIAN}');
Error('\P{Script=		Old:=PERSIAN}');
Expect(1, 66499, '\p{Script: oldpersian}', "");
Expect(0, 66499, '\p{^Script: oldpersian}', "");
Expect(0, 66499, '\P{Script: oldpersian}', "");
Expect(1, 66499, '\P{^Script: oldpersian}', "");
Expect(0, 66463, '\p{Script: oldpersian}', "");
Expect(1, 66463, '\p{^Script: oldpersian}', "");
Expect(1, 66463, '\P{Script: oldpersian}', "");
Expect(0, 66463, '\P{^Script: oldpersian}', "");
Expect(1, 66499, '\p{Script=- OLDPersian}', "");
Expect(0, 66499, '\p{^Script=- OLDPersian}', "");
Expect(0, 66499, '\P{Script=- OLDPersian}', "");
Expect(1, 66499, '\P{^Script=- OLDPersian}', "");
Expect(0, 66463, '\p{Script=- OLDPersian}', "");
Expect(1, 66463, '\p{^Script=- OLDPersian}', "");
Expect(1, 66463, '\P{Script=- OLDPersian}', "");
Expect(0, 66463, '\P{^Script=- OLDPersian}', "");
Error('\p{Sc=		XPEO:=}');
Error('\P{Sc=		XPEO:=}');
Expect(1, 66499, '\p{Sc=xpeo}', "");
Expect(0, 66499, '\p{^Sc=xpeo}', "");
Expect(0, 66499, '\P{Sc=xpeo}', "");
Expect(1, 66499, '\P{^Sc=xpeo}', "");
Expect(0, 66463, '\p{Sc=xpeo}', "");
Expect(1, 66463, '\p{^Sc=xpeo}', "");
Expect(1, 66463, '\P{Sc=xpeo}', "");
Expect(0, 66463, '\P{^Sc=xpeo}', "");
Expect(1, 66499, '\p{Sc=  xpeo}', "");
Expect(0, 66499, '\p{^Sc=  xpeo}', "");
Expect(0, 66499, '\P{Sc=  xpeo}', "");
Expect(1, 66499, '\P{^Sc=  xpeo}', "");
Expect(0, 66463, '\p{Sc=  xpeo}', "");
Expect(1, 66463, '\p{^Sc=  xpeo}', "");
Expect(1, 66463, '\P{Sc=  xpeo}', "");
Expect(0, 66463, '\P{^Sc=  xpeo}', "");
Error('\p{Is_Script=	:=old	persian}');
Error('\P{Is_Script=	:=old	persian}');
Expect(1, 66499, '\p{Is_Script=oldpersian}', "");
Expect(0, 66499, '\p{^Is_Script=oldpersian}', "");
Expect(0, 66499, '\P{Is_Script=oldpersian}', "");
Expect(1, 66499, '\P{^Is_Script=oldpersian}', "");
Expect(0, 66463, '\p{Is_Script=oldpersian}', "");
Expect(1, 66463, '\p{^Is_Script=oldpersian}', "");
Expect(1, 66463, '\P{Is_Script=oldpersian}', "");
Expect(0, 66463, '\P{^Is_Script=oldpersian}', "");
Expect(1, 66499, '\p{Is_Script=- OLDPersian}', "");
Expect(0, 66499, '\p{^Is_Script=- OLDPersian}', "");
Expect(0, 66499, '\P{Is_Script=- OLDPersian}', "");
Expect(1, 66499, '\P{^Is_Script=- OLDPersian}', "");
Expect(0, 66463, '\p{Is_Script=- OLDPersian}', "");
Expect(1, 66463, '\p{^Is_Script=- OLDPersian}', "");
Expect(1, 66463, '\P{Is_Script=- OLDPersian}', "");
Expect(0, 66463, '\P{^Is_Script=- OLDPersian}', "");
Error('\p{Is_Sc=/a/		xpeo}');
Error('\P{Is_Sc=/a/		xpeo}');
Expect(1, 66499, '\p{Is_Sc=xpeo}', "");
Expect(0, 66499, '\p{^Is_Sc=xpeo}', "");
Expect(0, 66499, '\P{Is_Sc=xpeo}', "");
Expect(1, 66499, '\P{^Is_Sc=xpeo}', "");
Expect(0, 66463, '\p{Is_Sc=xpeo}', "");
Expect(1, 66463, '\p{^Is_Sc=xpeo}', "");
Expect(1, 66463, '\P{Is_Sc=xpeo}', "");
Expect(0, 66463, '\P{^Is_Sc=xpeo}', "");
Expect(1, 66499, '\p{Is_Sc= Xpeo}', "");
Expect(0, 66499, '\p{^Is_Sc= Xpeo}', "");
Expect(0, 66499, '\P{Is_Sc= Xpeo}', "");
Expect(1, 66499, '\P{^Is_Sc= Xpeo}', "");
Expect(0, 66463, '\p{Is_Sc= Xpeo}', "");
Expect(1, 66463, '\p{^Is_Sc= Xpeo}', "");
Expect(1, 66463, '\P{Is_Sc= Xpeo}', "");
Expect(0, 66463, '\P{^Is_Sc= Xpeo}', "");
Error('\p{Script=__MYANMAR:=}');
Error('\P{Script=__MYANMAR:=}');
Expect(1, 4255, '\p{Script=myanmar}', "");
Expect(0, 4255, '\p{^Script=myanmar}', "");
Expect(0, 4255, '\P{Script=myanmar}', "");
Expect(1, 4255, '\P{^Script=myanmar}', "");
Expect(0, 4095, '\p{Script=myanmar}', "");
Expect(1, 4095, '\p{^Script=myanmar}', "");
Expect(1, 4095, '\P{Script=myanmar}', "");
Expect(0, 4095, '\P{^Script=myanmar}', "");
Expect(1, 4255, '\p{Script=_-MYANMAR}', "");
Expect(0, 4255, '\p{^Script=_-MYANMAR}', "");
Expect(0, 4255, '\P{Script=_-MYANMAR}', "");
Expect(1, 4255, '\P{^Script=_-MYANMAR}', "");
Expect(0, 4095, '\p{Script=_-MYANMAR}', "");
Expect(1, 4095, '\p{^Script=_-MYANMAR}', "");
Expect(1, 4095, '\P{Script=_-MYANMAR}', "");
Expect(0, 4095, '\P{^Script=_-MYANMAR}', "");
Error('\p{Sc=	/a/MYMR}');
Error('\P{Sc=	/a/MYMR}');
Expect(1, 4255, '\p{Sc=mymr}', "");
Expect(0, 4255, '\p{^Sc=mymr}', "");
Expect(0, 4255, '\P{Sc=mymr}', "");
Expect(1, 4255, '\P{^Sc=mymr}', "");
Expect(0, 4095, '\p{Sc=mymr}', "");
Expect(1, 4095, '\p{^Sc=mymr}', "");
Expect(1, 4095, '\P{Sc=mymr}', "");
Expect(0, 4095, '\P{^Sc=mymr}', "");
Expect(1, 4255, '\p{Sc=__Mymr}', "");
Expect(0, 4255, '\p{^Sc=__Mymr}', "");
Expect(0, 4255, '\P{Sc=__Mymr}', "");
Expect(1, 4255, '\P{^Sc=__Mymr}', "");
Expect(0, 4095, '\p{Sc=__Mymr}', "");
Expect(1, 4095, '\p{^Sc=__Mymr}', "");
Expect(1, 4095, '\P{Sc=__Mymr}', "");
Expect(0, 4095, '\P{^Sc=__Mymr}', "");
Error('\p{Is_Script=-myanmar:=}');
Error('\P{Is_Script=-myanmar:=}');
Expect(1, 4255, '\p{Is_Script=myanmar}', "");
Expect(0, 4255, '\p{^Is_Script=myanmar}', "");
Expect(0, 4255, '\P{Is_Script=myanmar}', "");
Expect(1, 4255, '\P{^Is_Script=myanmar}', "");
Expect(0, 4095, '\p{Is_Script=myanmar}', "");
Expect(1, 4095, '\p{^Is_Script=myanmar}', "");
Expect(1, 4095, '\P{Is_Script=myanmar}', "");
Expect(0, 4095, '\P{^Is_Script=myanmar}', "");
Expect(1, 4255, '\p{Is_Script=	 myanmar}', "");
Expect(0, 4255, '\p{^Is_Script=	 myanmar}', "");
Expect(0, 4255, '\P{Is_Script=	 myanmar}', "");
Expect(1, 4255, '\P{^Is_Script=	 myanmar}', "");
Expect(0, 4095, '\p{Is_Script=	 myanmar}', "");
Expect(1, 4095, '\p{^Is_Script=	 myanmar}', "");
Expect(1, 4095, '\P{Is_Script=	 myanmar}', "");
Expect(0, 4095, '\P{^Is_Script=	 myanmar}', "");
Error('\p{Is_Sc=/a/ _Mymr}');
Error('\P{Is_Sc=/a/ _Mymr}');
Expect(1, 4255, '\p{Is_Sc=mymr}', "");
Expect(0, 4255, '\p{^Is_Sc=mymr}', "");
Expect(0, 4255, '\P{Is_Sc=mymr}', "");
Expect(1, 4255, '\P{^Is_Sc=mymr}', "");
Expect(0, 4095, '\p{Is_Sc=mymr}', "");
Expect(1, 4095, '\p{^Is_Sc=mymr}', "");
Expect(1, 4095, '\P{Is_Sc=mymr}', "");
Expect(0, 4095, '\P{^Is_Sc=mymr}', "");
Expect(1, 4255, '\p{Is_Sc=-Mymr}', "");
Expect(0, 4255, '\p{^Is_Sc=-Mymr}', "");
Expect(0, 4255, '\P{Is_Sc=-Mymr}', "");
Expect(1, 4255, '\P{^Is_Sc=-Mymr}', "");
Expect(0, 4095, '\p{Is_Sc=-Mymr}', "");
Expect(1, 4095, '\p{^Is_Sc=-Mymr}', "");
Expect(1, 4095, '\P{Is_Sc=-Mymr}', "");
Expect(0, 4095, '\P{^Is_Sc=-Mymr}', "");
Error('\p{Script=/a/	_Old Turkic}');
Error('\P{Script=/a/	_Old Turkic}');
Expect(1, 68680, '\p{Script=oldturkic}', "");
Expect(0, 68680, '\p{^Script=oldturkic}', "");
Expect(0, 68680, '\P{Script=oldturkic}', "");
Expect(1, 68680, '\P{^Script=oldturkic}', "");
Expect(0, 68607, '\p{Script=oldturkic}', "");
Expect(1, 68607, '\p{^Script=oldturkic}', "");
Expect(1, 68607, '\P{Script=oldturkic}', "");
Expect(0, 68607, '\P{^Script=oldturkic}', "");
Expect(1, 68680, '\p{Script= Old Turkic}', "");
Expect(0, 68680, '\p{^Script= Old Turkic}', "");
Expect(0, 68680, '\P{Script= Old Turkic}', "");
Expect(1, 68680, '\P{^Script= Old Turkic}', "");
Expect(0, 68607, '\p{Script= Old Turkic}', "");
Expect(1, 68607, '\p{^Script= Old Turkic}', "");
Expect(1, 68607, '\P{Script= Old Turkic}', "");
Expect(0, 68607, '\P{^Script= Old Turkic}', "");
Error('\p{Sc=/a/ ORKH}');
Error('\P{Sc=/a/ ORKH}');
Expect(1, 68680, '\p{Sc=orkh}', "");
Expect(0, 68680, '\p{^Sc=orkh}', "");
Expect(0, 68680, '\P{Sc=orkh}', "");
Expect(1, 68680, '\P{^Sc=orkh}', "");
Expect(0, 68607, '\p{Sc=orkh}', "");
Expect(1, 68607, '\p{^Sc=orkh}', "");
Expect(1, 68607, '\P{Sc=orkh}', "");
Expect(0, 68607, '\P{^Sc=orkh}', "");
Expect(1, 68680, '\p{Sc=  Orkh}', "");
Expect(0, 68680, '\p{^Sc=  Orkh}', "");
Expect(0, 68680, '\P{Sc=  Orkh}', "");
Expect(1, 68680, '\P{^Sc=  Orkh}', "");
Expect(0, 68607, '\p{Sc=  Orkh}', "");
Expect(1, 68607, '\p{^Sc=  Orkh}', "");
Expect(1, 68607, '\P{Sc=  Orkh}', "");
Expect(0, 68607, '\P{^Sc=  Orkh}', "");
Error('\p{Is_Script=-_Old:=turkic}');
Error('\P{Is_Script=-_Old:=turkic}');
Expect(1, 68680, '\p{Is_Script=oldturkic}', "");
Expect(0, 68680, '\p{^Is_Script=oldturkic}', "");
Expect(0, 68680, '\P{Is_Script=oldturkic}', "");
Expect(1, 68680, '\P{^Is_Script=oldturkic}', "");
Expect(0, 68607, '\p{Is_Script=oldturkic}', "");
Expect(1, 68607, '\p{^Is_Script=oldturkic}', "");
Expect(1, 68607, '\P{Is_Script=oldturkic}', "");
Expect(0, 68607, '\P{^Is_Script=oldturkic}', "");
Expect(1, 68680, '\p{Is_Script:  _OLD_turkic}', "");
Expect(0, 68680, '\p{^Is_Script:  _OLD_turkic}', "");
Expect(0, 68680, '\P{Is_Script:  _OLD_turkic}', "");
Expect(1, 68680, '\P{^Is_Script:  _OLD_turkic}', "");
Expect(0, 68607, '\p{Is_Script:  _OLD_turkic}', "");
Expect(1, 68607, '\p{^Is_Script:  _OLD_turkic}', "");
Expect(1, 68607, '\P{Is_Script:  _OLD_turkic}', "");
Expect(0, 68607, '\P{^Is_Script:  _OLD_turkic}', "");
Error('\p{Is_Sc=--Orkh/a/}');
Error('\P{Is_Sc=--Orkh/a/}');
Expect(1, 68680, '\p{Is_Sc=orkh}', "");
Expect(0, 68680, '\p{^Is_Sc=orkh}', "");
Expect(0, 68680, '\P{Is_Sc=orkh}', "");
Expect(1, 68680, '\P{^Is_Sc=orkh}', "");
Expect(0, 68607, '\p{Is_Sc=orkh}', "");
Expect(1, 68607, '\p{^Is_Sc=orkh}', "");
Expect(1, 68607, '\P{Is_Sc=orkh}', "");
Expect(0, 68607, '\P{^Is_Sc=orkh}', "");
Expect(1, 68680, '\p{Is_Sc=		ORKH}', "");
Expect(0, 68680, '\p{^Is_Sc=		ORKH}', "");
Expect(0, 68680, '\P{Is_Sc=		ORKH}', "");
Expect(1, 68680, '\P{^Is_Sc=		ORKH}', "");
Expect(0, 68607, '\p{Is_Sc=		ORKH}', "");
Expect(1, 68607, '\p{^Is_Sc=		ORKH}', "");
Expect(1, 68607, '\P{Is_Sc=		ORKH}', "");
Expect(0, 68607, '\P{^Is_Sc=		ORKH}', "");
Error('\p{Script=		osmanya:=}');
Error('\P{Script=		osmanya:=}');
Expect(1, 66717, '\p{Script=osmanya}', "");
Expect(0, 66717, '\p{^Script=osmanya}', "");
Expect(0, 66717, '\P{Script=osmanya}', "");
Expect(1, 66717, '\P{^Script=osmanya}', "");
Expect(0, 66687, '\p{Script=osmanya}', "");
Expect(1, 66687, '\p{^Script=osmanya}', "");
Expect(1, 66687, '\P{Script=osmanya}', "");
Expect(0, 66687, '\P{^Script=osmanya}', "");
Expect(1, 66717, '\p{Script=- osmanya}', "");
Expect(0, 66717, '\p{^Script=- osmanya}', "");
Expect(0, 66717, '\P{Script=- osmanya}', "");
Expect(1, 66717, '\P{^Script=- osmanya}', "");
Expect(0, 66687, '\p{Script=- osmanya}', "");
Expect(1, 66687, '\p{^Script=- osmanya}', "");
Expect(1, 66687, '\P{Script=- osmanya}', "");
Expect(0, 66687, '\P{^Script=- osmanya}', "");
Error('\p{Sc=/a/osma}');
Error('\P{Sc=/a/osma}');
Expect(1, 66717, '\p{Sc=osma}', "");
Expect(0, 66717, '\p{^Sc=osma}', "");
Expect(0, 66717, '\P{Sc=osma}', "");
Expect(1, 66717, '\P{^Sc=osma}', "");
Expect(0, 66687, '\p{Sc=osma}', "");
Expect(1, 66687, '\p{^Sc=osma}', "");
Expect(1, 66687, '\P{Sc=osma}', "");
Expect(0, 66687, '\P{^Sc=osma}', "");
Expect(1, 66717, '\p{Sc=_Osma}', "");
Expect(0, 66717, '\p{^Sc=_Osma}', "");
Expect(0, 66717, '\P{Sc=_Osma}', "");
Expect(1, 66717, '\P{^Sc=_Osma}', "");
Expect(0, 66687, '\p{Sc=_Osma}', "");
Expect(1, 66687, '\p{^Sc=_Osma}', "");
Expect(1, 66687, '\P{Sc=_Osma}', "");
Expect(0, 66687, '\P{^Sc=_Osma}', "");
Error('\p{Is_Script=/a/	 Osmanya}');
Error('\P{Is_Script=/a/	 Osmanya}');
Expect(1, 66717, '\p{Is_Script:	osmanya}', "");
Expect(0, 66717, '\p{^Is_Script:	osmanya}', "");
Expect(0, 66717, '\P{Is_Script:	osmanya}', "");
Expect(1, 66717, '\P{^Is_Script:	osmanya}', "");
Expect(0, 66687, '\p{Is_Script:	osmanya}', "");
Expect(1, 66687, '\p{^Is_Script:	osmanya}', "");
Expect(1, 66687, '\P{Is_Script:	osmanya}', "");
Expect(0, 66687, '\P{^Is_Script:	osmanya}', "");
Expect(1, 66717, '\p{Is_Script= -osmanya}', "");
Expect(0, 66717, '\p{^Is_Script= -osmanya}', "");
Expect(0, 66717, '\P{Is_Script= -osmanya}', "");
Expect(1, 66717, '\P{^Is_Script= -osmanya}', "");
Expect(0, 66687, '\p{Is_Script= -osmanya}', "");
Expect(1, 66687, '\p{^Is_Script= -osmanya}', "");
Expect(1, 66687, '\P{Is_Script= -osmanya}', "");
Expect(0, 66687, '\P{^Is_Script= -osmanya}', "");
Error('\p{Is_Sc=:=	osma}');
Error('\P{Is_Sc=:=	osma}');
Expect(1, 66717, '\p{Is_Sc=osma}', "");
Expect(0, 66717, '\p{^Is_Sc=osma}', "");
Expect(0, 66717, '\P{Is_Sc=osma}', "");
Expect(1, 66717, '\P{^Is_Sc=osma}', "");
Expect(0, 66687, '\p{Is_Sc=osma}', "");
Expect(1, 66687, '\p{^Is_Sc=osma}', "");
Expect(1, 66687, '\P{Is_Sc=osma}', "");
Expect(0, 66687, '\P{^Is_Sc=osma}', "");
Expect(1, 66717, '\p{Is_Sc=_osma}', "");
Expect(0, 66717, '\p{^Is_Sc=_osma}', "");
Expect(0, 66717, '\P{Is_Sc=_osma}', "");
Expect(1, 66717, '\P{^Is_Sc=_osma}', "");
Expect(0, 66687, '\p{Is_Sc=_osma}', "");
Expect(1, 66687, '\p{^Is_Sc=_osma}', "");
Expect(1, 66687, '\P{Is_Sc=_osma}', "");
Expect(0, 66687, '\P{^Is_Sc=_osma}', "");
Error('\p{Script=/a/	 TAGALOG}');
Error('\P{Script=/a/	 TAGALOG}');
Expect(1, 5900, '\p{Script=tagalog}', "");
Expect(0, 5900, '\p{^Script=tagalog}', "");
Expect(0, 5900, '\P{Script=tagalog}', "");
Expect(1, 5900, '\P{^Script=tagalog}', "");
Expect(0, 5887, '\p{Script=tagalog}', "");
Expect(1, 5887, '\p{^Script=tagalog}', "");
Expect(1, 5887, '\P{Script=tagalog}', "");
Expect(0, 5887, '\P{^Script=tagalog}', "");
Expect(1, 5900, '\p{Script:	_ tagalog}', "");
Expect(0, 5900, '\p{^Script:	_ tagalog}', "");
Expect(0, 5900, '\P{Script:	_ tagalog}', "");
Expect(1, 5900, '\P{^Script:	_ tagalog}', "");
Expect(0, 5887, '\p{Script:	_ tagalog}', "");
Expect(1, 5887, '\p{^Script:	_ tagalog}', "");
Expect(1, 5887, '\P{Script:	_ tagalog}', "");
Expect(0, 5887, '\P{^Script:	_ tagalog}', "");
Error('\p{Sc=  Tglg/a/}');
Error('\P{Sc=  Tglg/a/}');
Expect(1, 5900, '\p{Sc: tglg}', "");
Expect(0, 5900, '\p{^Sc: tglg}', "");
Expect(0, 5900, '\P{Sc: tglg}', "");
Expect(1, 5900, '\P{^Sc: tglg}', "");
Expect(0, 5887, '\p{Sc: tglg}', "");
Expect(1, 5887, '\p{^Sc: tglg}', "");
Expect(1, 5887, '\P{Sc: tglg}', "");
Expect(0, 5887, '\P{^Sc: tglg}', "");
Expect(1, 5900, '\p{Sc=-	tglg}', "");
Expect(0, 5900, '\p{^Sc=-	tglg}', "");
Expect(0, 5900, '\P{Sc=-	tglg}', "");
Expect(1, 5900, '\P{^Sc=-	tglg}', "");
Expect(0, 5887, '\p{Sc=-	tglg}', "");
Expect(1, 5887, '\p{^Sc=-	tglg}', "");
Expect(1, 5887, '\P{Sc=-	tglg}', "");
Expect(0, 5887, '\P{^Sc=-	tglg}', "");
Error('\p{Is_Script=/a/ -Tagalog}');
Error('\P{Is_Script=/a/ -Tagalog}');
Expect(1, 5900, '\p{Is_Script=tagalog}', "");
Expect(0, 5900, '\p{^Is_Script=tagalog}', "");
Expect(0, 5900, '\P{Is_Script=tagalog}', "");
Expect(1, 5900, '\P{^Is_Script=tagalog}', "");
Expect(0, 5887, '\p{Is_Script=tagalog}', "");
Expect(1, 5887, '\p{^Is_Script=tagalog}', "");
Expect(1, 5887, '\P{Is_Script=tagalog}', "");
Expect(0, 5887, '\P{^Is_Script=tagalog}', "");
Expect(1, 5900, '\p{Is_Script=-	TAGALOG}', "");
Expect(0, 5900, '\p{^Is_Script=-	TAGALOG}', "");
Expect(0, 5900, '\P{Is_Script=-	TAGALOG}', "");
Expect(1, 5900, '\P{^Is_Script=-	TAGALOG}', "");
Expect(0, 5887, '\p{Is_Script=-	TAGALOG}', "");
Expect(1, 5887, '\p{^Is_Script=-	TAGALOG}', "");
Expect(1, 5887, '\P{Is_Script=-	TAGALOG}', "");
Expect(0, 5887, '\P{^Is_Script=-	TAGALOG}', "");
Error('\p{Is_Sc=_Tglg:=}');
Error('\P{Is_Sc=_Tglg:=}');
Expect(1, 5900, '\p{Is_Sc=tglg}', "");
Expect(0, 5900, '\p{^Is_Sc=tglg}', "");
Expect(0, 5900, '\P{Is_Sc=tglg}', "");
Expect(1, 5900, '\P{^Is_Sc=tglg}', "");
Expect(0, 5887, '\p{Is_Sc=tglg}', "");
Expect(1, 5887, '\p{^Is_Sc=tglg}', "");
Expect(1, 5887, '\P{Is_Sc=tglg}', "");
Expect(0, 5887, '\P{^Is_Sc=tglg}', "");
Expect(1, 5900, '\p{Is_Sc=		Tglg}', "");
Expect(0, 5900, '\p{^Is_Sc=		Tglg}', "");
Expect(0, 5900, '\P{Is_Sc=		Tglg}', "");
Expect(1, 5900, '\P{^Is_Sc=		Tglg}', "");
Expect(0, 5887, '\p{Is_Sc=		Tglg}', "");
Expect(1, 5887, '\p{^Is_Sc=		Tglg}', "");
Expect(1, 5887, '\P{Is_Sc=		Tglg}', "");
Expect(0, 5887, '\P{^Is_Sc=		Tglg}', "");
Error('\p{Script=		GUJARATI:=}');
Error('\P{Script=		GUJARATI:=}');
Expect(1, 2691, '\p{Script:   gujarati}', "");
Expect(0, 2691, '\p{^Script:   gujarati}', "");
Expect(0, 2691, '\P{Script:   gujarati}', "");
Expect(1, 2691, '\P{^Script:   gujarati}', "");
Expect(0, 2688, '\p{Script:   gujarati}', "");
Expect(1, 2688, '\p{^Script:   gujarati}', "");
Expect(1, 2688, '\P{Script:   gujarati}', "");
Expect(0, 2688, '\P{^Script:   gujarati}', "");
Expect(1, 2691, '\p{Script:   __Gujarati}', "");
Expect(0, 2691, '\p{^Script:   __Gujarati}', "");
Expect(0, 2691, '\P{Script:   __Gujarati}', "");
Expect(1, 2691, '\P{^Script:   __Gujarati}', "");
Expect(0, 2688, '\p{Script:   __Gujarati}', "");
Expect(1, 2688, '\p{^Script:   __Gujarati}', "");
Expect(1, 2688, '\P{Script:   __Gujarati}', "");
Expect(0, 2688, '\P{^Script:   __Gujarati}', "");
Error('\p{Sc=/a/-_GUJR}');
Error('\P{Sc=/a/-_GUJR}');
Expect(1, 2691, '\p{Sc: gujr}', "");
Expect(0, 2691, '\p{^Sc: gujr}', "");
Expect(0, 2691, '\P{Sc: gujr}', "");
Expect(1, 2691, '\P{^Sc: gujr}', "");
Expect(0, 2688, '\p{Sc: gujr}', "");
Expect(1, 2688, '\p{^Sc: gujr}', "");
Expect(1, 2688, '\P{Sc: gujr}', "");
Expect(0, 2688, '\P{^Sc: gujr}', "");
Expect(1, 2691, '\p{Sc=	Gujr}', "");
Expect(0, 2691, '\p{^Sc=	Gujr}', "");
Expect(0, 2691, '\P{Sc=	Gujr}', "");
Expect(1, 2691, '\P{^Sc=	Gujr}', "");
Expect(0, 2688, '\p{Sc=	Gujr}', "");
Expect(1, 2688, '\p{^Sc=	Gujr}', "");
Expect(1, 2688, '\P{Sc=	Gujr}', "");
Expect(0, 2688, '\P{^Sc=	Gujr}', "");
Error('\p{Is_Script= Gujarati/a/}');
Error('\P{Is_Script= Gujarati/a/}');
Expect(1, 2691, '\p{Is_Script=gujarati}', "");
Expect(0, 2691, '\p{^Is_Script=gujarati}', "");
Expect(0, 2691, '\P{Is_Script=gujarati}', "");
Expect(1, 2691, '\P{^Is_Script=gujarati}', "");
Expect(0, 2688, '\p{Is_Script=gujarati}', "");
Expect(1, 2688, '\p{^Is_Script=gujarati}', "");
Expect(1, 2688, '\P{Is_Script=gujarati}', "");
Expect(0, 2688, '\P{^Is_Script=gujarati}', "");
Expect(1, 2691, '\p{Is_Script:		 Gujarati}', "");
Expect(0, 2691, '\p{^Is_Script:		 Gujarati}', "");
Expect(0, 2691, '\P{Is_Script:		 Gujarati}', "");
Expect(1, 2691, '\P{^Is_Script:		 Gujarati}', "");
Expect(0, 2688, '\p{Is_Script:		 Gujarati}', "");
Expect(1, 2688, '\p{^Is_Script:		 Gujarati}', "");
Expect(1, 2688, '\P{Is_Script:		 Gujarati}', "");
Expect(0, 2688, '\P{^Is_Script:		 Gujarati}', "");
Error('\p{Is_Sc::= 	Gujr}');
Error('\P{Is_Sc::= 	Gujr}');
Expect(1, 2691, '\p{Is_Sc=gujr}', "");
Expect(0, 2691, '\p{^Is_Sc=gujr}', "");
Expect(0, 2691, '\P{Is_Sc=gujr}', "");
Expect(1, 2691, '\P{^Is_Sc=gujr}', "");
Expect(0, 2688, '\p{Is_Sc=gujr}', "");
Expect(1, 2688, '\p{^Is_Sc=gujr}', "");
Expect(1, 2688, '\P{Is_Sc=gujr}', "");
Expect(0, 2688, '\P{^Is_Sc=gujr}', "");
Expect(1, 2691, '\p{Is_Sc=-	gujr}', "");
Expect(0, 2691, '\p{^Is_Sc=-	gujr}', "");
Expect(0, 2691, '\P{Is_Sc=-	gujr}', "");
Expect(1, 2691, '\P{^Is_Sc=-	gujr}', "");
Expect(0, 2688, '\p{Is_Sc=-	gujr}', "");
Expect(1, 2688, '\p{^Is_Sc=-	gujr}', "");
Expect(1, 2688, '\P{Is_Sc=-	gujr}', "");
Expect(0, 2688, '\P{^Is_Sc=-	gujr}', "");
Error('\p{Script=:=  ORIYA}');
Error('\P{Script=:=  ORIYA}');
Expect(1, 2819, '\p{Script=oriya}', "");
Expect(0, 2819, '\p{^Script=oriya}', "");
Expect(0, 2819, '\P{Script=oriya}', "");
Expect(1, 2819, '\P{^Script=oriya}', "");
Expect(0, 2816, '\p{Script=oriya}', "");
Expect(1, 2816, '\p{^Script=oriya}', "");
Expect(1, 2816, '\P{Script=oriya}', "");
Expect(0, 2816, '\P{^Script=oriya}', "");
Expect(1, 2819, '\p{Script=-_oriya}', "");
Expect(0, 2819, '\p{^Script=-_oriya}', "");
Expect(0, 2819, '\P{Script=-_oriya}', "");
Expect(1, 2819, '\P{^Script=-_oriya}', "");
Expect(0, 2816, '\p{Script=-_oriya}', "");
Expect(1, 2816, '\p{^Script=-_oriya}', "");
Expect(1, 2816, '\P{Script=-_oriya}', "");
Expect(0, 2816, '\P{^Script=-_oriya}', "");
Error('\p{Sc= /a/Orya}');
Error('\P{Sc= /a/Orya}');
Expect(1, 2819, '\p{Sc=orya}', "");
Expect(0, 2819, '\p{^Sc=orya}', "");
Expect(0, 2819, '\P{Sc=orya}', "");
Expect(1, 2819, '\P{^Sc=orya}', "");
Expect(0, 2816, '\p{Sc=orya}', "");
Expect(1, 2816, '\p{^Sc=orya}', "");
Expect(1, 2816, '\P{Sc=orya}', "");
Expect(0, 2816, '\P{^Sc=orya}', "");
Expect(1, 2819, '\p{Sc=_Orya}', "");
Expect(0, 2819, '\p{^Sc=_Orya}', "");
Expect(0, 2819, '\P{Sc=_Orya}', "");
Expect(1, 2819, '\P{^Sc=_Orya}', "");
Expect(0, 2816, '\p{Sc=_Orya}', "");
Expect(1, 2816, '\p{^Sc=_Orya}', "");
Expect(1, 2816, '\P{Sc=_Orya}', "");
Expect(0, 2816, '\P{^Sc=_Orya}', "");
Error('\p{Is_Script=	-Oriya/a/}');
Error('\P{Is_Script=	-Oriya/a/}');
Expect(1, 2819, '\p{Is_Script=oriya}', "");
Expect(0, 2819, '\p{^Is_Script=oriya}', "");
Expect(0, 2819, '\P{Is_Script=oriya}', "");
Expect(1, 2819, '\P{^Is_Script=oriya}', "");
Expect(0, 2816, '\p{Is_Script=oriya}', "");
Expect(1, 2816, '\p{^Is_Script=oriya}', "");
Expect(1, 2816, '\P{Is_Script=oriya}', "");
Expect(0, 2816, '\P{^Is_Script=oriya}', "");
Expect(1, 2819, '\p{Is_Script=	_ORIYA}', "");
Expect(0, 2819, '\p{^Is_Script=	_ORIYA}', "");
Expect(0, 2819, '\P{Is_Script=	_ORIYA}', "");
Expect(1, 2819, '\P{^Is_Script=	_ORIYA}', "");
Expect(0, 2816, '\p{Is_Script=	_ORIYA}', "");
Expect(1, 2816, '\p{^Is_Script=	_ORIYA}', "");
Expect(1, 2816, '\P{Is_Script=	_ORIYA}', "");
Expect(0, 2816, '\P{^Is_Script=	_ORIYA}', "");
Error('\p{Is_Sc:	 Orya:=}');
Error('\P{Is_Sc:	 Orya:=}');
Expect(1, 2819, '\p{Is_Sc=orya}', "");
Expect(0, 2819, '\p{^Is_Sc=orya}', "");
Expect(0, 2819, '\P{Is_Sc=orya}', "");
Expect(1, 2819, '\P{^Is_Sc=orya}', "");
Expect(0, 2816, '\p{Is_Sc=orya}', "");
Expect(1, 2816, '\p{^Is_Sc=orya}', "");
Expect(1, 2816, '\P{Is_Sc=orya}', "");
Expect(0, 2816, '\P{^Is_Sc=orya}', "");
Expect(1, 2819, '\p{Is_Sc=	-Orya}', "");
Expect(0, 2819, '\p{^Is_Sc=	-Orya}', "");
Expect(0, 2819, '\P{Is_Sc=	-Orya}', "");
Expect(1, 2819, '\P{^Is_Sc=	-Orya}', "");
Expect(0, 2816, '\p{Is_Sc=	-Orya}', "");
Expect(1, 2816, '\p{^Is_Sc=	-Orya}', "");
Expect(1, 2816, '\P{Is_Sc=	-Orya}', "");
Expect(0, 2816, '\P{^Is_Sc=	-Orya}', "");
Error('\p{Script= -LISU/a/}');
Error('\P{Script= -LISU/a/}');
Expect(1, 42239, '\p{Script=lisu}', "");
Expect(0, 42239, '\p{^Script=lisu}', "");
Expect(0, 42239, '\P{Script=lisu}', "");
Expect(1, 42239, '\P{^Script=lisu}', "");
Expect(0, 42191, '\p{Script=lisu}', "");
Expect(1, 42191, '\p{^Script=lisu}', "");
Expect(1, 42191, '\P{Script=lisu}', "");
Expect(0, 42191, '\P{^Script=lisu}', "");
Expect(1, 42239, '\p{Script=_lisu}', "");
Expect(0, 42239, '\p{^Script=_lisu}', "");
Expect(0, 42239, '\P{Script=_lisu}', "");
Expect(1, 42239, '\P{^Script=_lisu}', "");
Expect(0, 42191, '\p{Script=_lisu}', "");
Expect(1, 42191, '\p{^Script=_lisu}', "");
Expect(1, 42191, '\P{Script=_lisu}', "");
Expect(0, 42191, '\P{^Script=_lisu}', "");
Error('\p{Sc=	lisu:=}');
Error('\P{Sc=	lisu:=}');
Expect(1, 42239, '\p{Sc=lisu}', "");
Expect(0, 42239, '\p{^Sc=lisu}', "");
Expect(0, 42239, '\P{Sc=lisu}', "");
Expect(1, 42239, '\P{^Sc=lisu}', "");
Expect(0, 42191, '\p{Sc=lisu}', "");
Expect(1, 42191, '\p{^Sc=lisu}', "");
Expect(1, 42191, '\P{Sc=lisu}', "");
Expect(0, 42191, '\P{^Sc=lisu}', "");
Expect(1, 42239, '\p{Sc= _lisu}', "");
Expect(0, 42239, '\p{^Sc= _lisu}', "");
Expect(0, 42239, '\P{Sc= _lisu}', "");
Expect(1, 42239, '\P{^Sc= _lisu}', "");
Expect(0, 42191, '\p{Sc= _lisu}', "");
Expect(1, 42191, '\p{^Sc= _lisu}', "");
Expect(1, 42191, '\P{Sc= _lisu}', "");
Expect(0, 42191, '\P{^Sc= _lisu}', "");
Error('\p{Is_Script= LISU/a/}');
Error('\P{Is_Script= LISU/a/}');
Expect(1, 42239, '\p{Is_Script=lisu}', "");
Expect(0, 42239, '\p{^Is_Script=lisu}', "");
Expect(0, 42239, '\P{Is_Script=lisu}', "");
Expect(1, 42239, '\P{^Is_Script=lisu}', "");
Expect(0, 42191, '\p{Is_Script=lisu}', "");
Expect(1, 42191, '\p{^Is_Script=lisu}', "");
Expect(1, 42191, '\P{Is_Script=lisu}', "");
Expect(0, 42191, '\P{^Is_Script=lisu}', "");
Expect(1, 42239, '\p{Is_Script=Lisu}', "");
Expect(0, 42239, '\p{^Is_Script=Lisu}', "");
Expect(0, 42239, '\P{Is_Script=Lisu}', "");
Expect(1, 42239, '\P{^Is_Script=Lisu}', "");
Expect(0, 42191, '\p{Is_Script=Lisu}', "");
Expect(1, 42191, '\p{^Is_Script=Lisu}', "");
Expect(1, 42191, '\P{Is_Script=Lisu}', "");
Expect(0, 42191, '\P{^Is_Script=Lisu}', "");
Error('\p{Is_Sc=_LISU/a/}');
Error('\P{Is_Sc=_LISU/a/}');
Expect(1, 42239, '\p{Is_Sc=lisu}', "");
Expect(0, 42239, '\p{^Is_Sc=lisu}', "");
Expect(0, 42239, '\P{Is_Sc=lisu}', "");
Expect(1, 42239, '\P{^Is_Sc=lisu}', "");
Expect(0, 42191, '\p{Is_Sc=lisu}', "");
Expect(1, 42191, '\p{^Is_Sc=lisu}', "");
Expect(1, 42191, '\P{Is_Sc=lisu}', "");
Expect(0, 42191, '\P{^Is_Sc=lisu}', "");
Expect(1, 42239, '\p{Is_Sc=_LISU}', "");
Expect(0, 42239, '\p{^Is_Sc=_LISU}', "");
Expect(0, 42239, '\P{Is_Sc=_LISU}', "");
Expect(1, 42239, '\P{^Is_Sc=_LISU}', "");
Expect(0, 42191, '\p{Is_Sc=_LISU}', "");
Expect(1, 42191, '\p{^Is_Sc=_LISU}', "");
Expect(1, 42191, '\P{Is_Sc=_LISU}', "");
Expect(0, 42191, '\P{^Is_Sc=_LISU}', "");
Error('\p{Script=_	TAI Le:=}');
Error('\P{Script=_	TAI Le:=}');
Expect(1, 6509, '\p{Script=taile}', "");
Expect(0, 6509, '\p{^Script=taile}', "");
Expect(0, 6509, '\P{Script=taile}', "");
Expect(1, 6509, '\P{^Script=taile}', "");
Expect(0, 6479, '\p{Script=taile}', "");
Expect(1, 6479, '\p{^Script=taile}', "");
Expect(1, 6479, '\P{Script=taile}', "");
Expect(0, 6479, '\P{^Script=taile}', "");
Expect(1, 6509, '\p{Script=_	taile}', "");
Expect(0, 6509, '\p{^Script=_	taile}', "");
Expect(0, 6509, '\P{Script=_	taile}', "");
Expect(1, 6509, '\P{^Script=_	taile}', "");
Expect(0, 6479, '\p{Script=_	taile}', "");
Expect(1, 6479, '\p{^Script=_	taile}', "");
Expect(1, 6479, '\P{Script=_	taile}', "");
Expect(0, 6479, '\P{^Script=_	taile}', "");
Error('\p{Sc:   -Tale/a/}');
Error('\P{Sc:   -Tale/a/}');
Expect(1, 6509, '\p{Sc=tale}', "");
Expect(0, 6509, '\p{^Sc=tale}', "");
Expect(0, 6509, '\P{Sc=tale}', "");
Expect(1, 6509, '\P{^Sc=tale}', "");
Expect(0, 6479, '\p{Sc=tale}', "");
Expect(1, 6479, '\p{^Sc=tale}', "");
Expect(1, 6479, '\P{Sc=tale}', "");
Expect(0, 6479, '\P{^Sc=tale}', "");
Expect(1, 6509, '\p{Sc=	tale}', "");
Expect(0, 6509, '\p{^Sc=	tale}', "");
Expect(0, 6509, '\P{Sc=	tale}', "");
Expect(1, 6509, '\P{^Sc=	tale}', "");
Expect(0, 6479, '\p{Sc=	tale}', "");
Expect(1, 6479, '\p{^Sc=	tale}', "");
Expect(1, 6479, '\P{Sc=	tale}', "");
Expect(0, 6479, '\P{^Sc=	tale}', "");
Error('\p{Is_Script=- Tai/a/Le}');
Error('\P{Is_Script=- Tai/a/Le}');
Expect(1, 6509, '\p{Is_Script=taile}', "");
Expect(0, 6509, '\p{^Is_Script=taile}', "");
Expect(0, 6509, '\P{Is_Script=taile}', "");
Expect(1, 6509, '\P{^Is_Script=taile}', "");
Expect(0, 6479, '\p{Is_Script=taile}', "");
Expect(1, 6479, '\p{^Is_Script=taile}', "");
Expect(1, 6479, '\P{Is_Script=taile}', "");
Expect(0, 6479, '\P{^Is_Script=taile}', "");
Expect(1, 6509, '\p{Is_Script=- tai	Le}', "");
Expect(0, 6509, '\p{^Is_Script=- tai	Le}', "");
Expect(0, 6509, '\P{Is_Script=- tai	Le}', "");
Expect(1, 6509, '\P{^Is_Script=- tai	Le}', "");
Expect(0, 6479, '\p{Is_Script=- tai	Le}', "");
Expect(1, 6479, '\p{^Is_Script=- tai	Le}', "");
Expect(1, 6479, '\P{Is_Script=- tai	Le}', "");
Expect(0, 6479, '\P{^Is_Script=- tai	Le}', "");
Error('\p{Is_Sc=	 TALE/a/}');
Error('\P{Is_Sc=	 TALE/a/}');
Expect(1, 6509, '\p{Is_Sc=tale}', "");
Expect(0, 6509, '\p{^Is_Sc=tale}', "");
Expect(0, 6509, '\P{Is_Sc=tale}', "");
Expect(1, 6509, '\P{^Is_Sc=tale}', "");
Expect(0, 6479, '\p{Is_Sc=tale}', "");
Expect(1, 6479, '\p{^Is_Sc=tale}', "");
Expect(1, 6479, '\P{Is_Sc=tale}', "");
Expect(0, 6479, '\P{^Is_Sc=tale}', "");
Expect(1, 6509, '\p{Is_Sc=_tale}', "");
Expect(0, 6509, '\p{^Is_Sc=_tale}', "");
Expect(0, 6509, '\P{Is_Sc=_tale}', "");
Expect(1, 6509, '\P{^Is_Sc=_tale}', "");
Expect(0, 6479, '\p{Is_Sc=_tale}', "");
Expect(1, 6479, '\p{^Is_Sc=_tale}', "");
Expect(1, 6479, '\P{Is_Sc=_tale}', "");
Expect(0, 6479, '\P{^Is_Sc=_tale}', "");
Error('\p{Script=:=Avestan}');
Error('\P{Script=:=Avestan}');
Expect(1, 68405, '\p{Script=avestan}', "");
Expect(0, 68405, '\p{^Script=avestan}', "");
Expect(0, 68405, '\P{Script=avestan}', "");
Expect(1, 68405, '\P{^Script=avestan}', "");
Expect(0, 68351, '\p{Script=avestan}', "");
Expect(1, 68351, '\p{^Script=avestan}', "");
Expect(1, 68351, '\P{Script=avestan}', "");
Expect(0, 68351, '\P{^Script=avestan}', "");
Expect(1, 68405, '\p{Script:   AVESTAN}', "");
Expect(0, 68405, '\p{^Script:   AVESTAN}', "");
Expect(0, 68405, '\P{Script:   AVESTAN}', "");
Expect(1, 68405, '\P{^Script:   AVESTAN}', "");
Expect(0, 68351, '\p{Script:   AVESTAN}', "");
Expect(1, 68351, '\p{^Script:   AVESTAN}', "");
Expect(1, 68351, '\P{Script:   AVESTAN}', "");
Expect(0, 68351, '\P{^Script:   AVESTAN}', "");
Error('\p{Sc= :=Avst}');
Error('\P{Sc= :=Avst}');
Expect(1, 68405, '\p{Sc=avst}', "");
Expect(0, 68405, '\p{^Sc=avst}', "");
Expect(0, 68405, '\P{Sc=avst}', "");
Expect(1, 68405, '\P{^Sc=avst}', "");
Expect(0, 68351, '\p{Sc=avst}', "");
Expect(1, 68351, '\p{^Sc=avst}', "");
Expect(1, 68351, '\P{Sc=avst}', "");
Expect(0, 68351, '\P{^Sc=avst}', "");
Expect(1, 68405, '\p{Sc:__avst}', "");
Expect(0, 68405, '\p{^Sc:__avst}', "");
Expect(0, 68405, '\P{Sc:__avst}', "");
Expect(1, 68405, '\P{^Sc:__avst}', "");
Expect(0, 68351, '\p{Sc:__avst}', "");
Expect(1, 68351, '\p{^Sc:__avst}', "");
Expect(1, 68351, '\P{Sc:__avst}', "");
Expect(0, 68351, '\P{^Sc:__avst}', "");
Error('\p{Is_Script:   /a/ avestan}');
Error('\P{Is_Script:   /a/ avestan}');
Expect(1, 68405, '\p{Is_Script=avestan}', "");
Expect(0, 68405, '\p{^Is_Script=avestan}', "");
Expect(0, 68405, '\P{Is_Script=avestan}', "");
Expect(1, 68405, '\P{^Is_Script=avestan}', "");
Expect(0, 68351, '\p{Is_Script=avestan}', "");
Expect(1, 68351, '\p{^Is_Script=avestan}', "");
Expect(1, 68351, '\P{Is_Script=avestan}', "");
Expect(0, 68351, '\P{^Is_Script=avestan}', "");
Expect(1, 68405, '\p{Is_Script=  AVESTAN}', "");
Expect(0, 68405, '\p{^Is_Script=  AVESTAN}', "");
Expect(0, 68405, '\P{Is_Script=  AVESTAN}', "");
Expect(1, 68405, '\P{^Is_Script=  AVESTAN}', "");
Expect(0, 68351, '\p{Is_Script=  AVESTAN}', "");
Expect(1, 68351, '\p{^Is_Script=  AVESTAN}', "");
Expect(1, 68351, '\P{Is_Script=  AVESTAN}', "");
Expect(0, 68351, '\P{^Is_Script=  AVESTAN}', "");
Error('\p{Is_Sc: __Avst/a/}');
Error('\P{Is_Sc: __Avst/a/}');
Expect(1, 68405, '\p{Is_Sc=avst}', "");
Expect(0, 68405, '\p{^Is_Sc=avst}', "");
Expect(0, 68405, '\P{Is_Sc=avst}', "");
Expect(1, 68405, '\P{^Is_Sc=avst}', "");
Expect(0, 68351, '\p{Is_Sc=avst}', "");
Expect(1, 68351, '\p{^Is_Sc=avst}', "");
Expect(1, 68351, '\P{Is_Sc=avst}', "");
Expect(0, 68351, '\P{^Is_Sc=avst}', "");
Expect(1, 68405, '\p{Is_Sc=_ avst}', "");
Expect(0, 68405, '\p{^Is_Sc=_ avst}', "");
Expect(0, 68405, '\P{Is_Sc=_ avst}', "");
Expect(1, 68405, '\P{^Is_Sc=_ avst}', "");
Expect(0, 68351, '\p{Is_Sc=_ avst}', "");
Expect(1, 68351, '\p{^Is_Sc=_ avst}', "");
Expect(1, 68351, '\P{Is_Sc=_ avst}', "");
Expect(0, 68351, '\P{^Is_Sc=_ avst}', "");
Error('\p{Script=:=	-GEORGIAN}');
Error('\P{Script=:=	-GEORGIAN}');
Expect(1, 4293, '\p{Script=georgian}', "");
Expect(0, 4293, '\p{^Script=georgian}', "");
Expect(0, 4293, '\P{Script=georgian}', "");
Expect(1, 4293, '\P{^Script=georgian}', "");
Expect(0, 4255, '\p{Script=georgian}', "");
Expect(1, 4255, '\p{^Script=georgian}', "");
Expect(1, 4255, '\P{Script=georgian}', "");
Expect(0, 4255, '\P{^Script=georgian}', "");
Expect(1, 4293, '\p{Script=__georgian}', "");
Expect(0, 4293, '\p{^Script=__georgian}', "");
Expect(0, 4293, '\P{Script=__georgian}', "");
Expect(1, 4293, '\P{^Script=__georgian}', "");
Expect(0, 4255, '\p{Script=__georgian}', "");
Expect(1, 4255, '\p{^Script=__georgian}', "");
Expect(1, 4255, '\P{Script=__georgian}', "");
Expect(0, 4255, '\P{^Script=__georgian}', "");
Error('\p{Sc=_	Geor:=}');
Error('\P{Sc=_	Geor:=}');
Expect(1, 4293, '\p{Sc=geor}', "");
Expect(0, 4293, '\p{^Sc=geor}', "");
Expect(0, 4293, '\P{Sc=geor}', "");
Expect(1, 4293, '\P{^Sc=geor}', "");
Expect(0, 4255, '\p{Sc=geor}', "");
Expect(1, 4255, '\p{^Sc=geor}', "");
Expect(1, 4255, '\P{Sc=geor}', "");
Expect(0, 4255, '\P{^Sc=geor}', "");
Expect(1, 4293, '\p{Sc=__Geor}', "");
Expect(0, 4293, '\p{^Sc=__Geor}', "");
Expect(0, 4293, '\P{Sc=__Geor}', "");
Expect(1, 4293, '\P{^Sc=__Geor}', "");
Expect(0, 4255, '\p{Sc=__Geor}', "");
Expect(1, 4255, '\p{^Sc=__Geor}', "");
Expect(1, 4255, '\P{Sc=__Geor}', "");
Expect(0, 4255, '\P{^Sc=__Geor}', "");
Error('\p{Is_Script= :=georgian}');
Error('\P{Is_Script= :=georgian}');
Expect(1, 4293, '\p{Is_Script=georgian}', "");
Expect(0, 4293, '\p{^Is_Script=georgian}', "");
Expect(0, 4293, '\P{Is_Script=georgian}', "");
Expect(1, 4293, '\P{^Is_Script=georgian}', "");
Expect(0, 4255, '\p{Is_Script=georgian}', "");
Expect(1, 4255, '\p{^Is_Script=georgian}', "");
Expect(1, 4255, '\P{Is_Script=georgian}', "");
Expect(0, 4255, '\P{^Is_Script=georgian}', "");
Expect(1, 4293, '\p{Is_Script=_Georgian}', "");
Expect(0, 4293, '\p{^Is_Script=_Georgian}', "");
Expect(0, 4293, '\P{Is_Script=_Georgian}', "");
Expect(1, 4293, '\P{^Is_Script=_Georgian}', "");
Expect(0, 4255, '\p{Is_Script=_Georgian}', "");
Expect(1, 4255, '\p{^Is_Script=_Georgian}', "");
Expect(1, 4255, '\P{Is_Script=_Georgian}', "");
Expect(0, 4255, '\P{^Is_Script=_Georgian}', "");
Error('\p{Is_Sc=	 geor/a/}');
Error('\P{Is_Sc=	 geor/a/}');
Expect(1, 4293, '\p{Is_Sc:   geor}', "");
Expect(0, 4293, '\p{^Is_Sc:   geor}', "");
Expect(0, 4293, '\P{Is_Sc:   geor}', "");
Expect(1, 4293, '\P{^Is_Sc:   geor}', "");
Expect(0, 4255, '\p{Is_Sc:   geor}', "");
Expect(1, 4255, '\p{^Is_Sc:   geor}', "");
Expect(1, 4255, '\P{Is_Sc:   geor}', "");
Expect(0, 4255, '\P{^Is_Sc:   geor}', "");
Expect(1, 4293, '\p{Is_Sc=-_GEOR}', "");
Expect(0, 4293, '\p{^Is_Sc=-_GEOR}', "");
Expect(0, 4293, '\P{Is_Sc=-_GEOR}', "");
Expect(1, 4293, '\P{^Is_Sc=-_GEOR}', "");
Expect(0, 4255, '\p{Is_Sc=-_GEOR}', "");
Expect(1, 4255, '\p{^Is_Sc=-_GEOR}', "");
Expect(1, 4255, '\P{Is_Sc=-_GEOR}', "");
Expect(0, 4255, '\P{^Is_Sc=-_GEOR}', "");
Error('\p{Script=:=		Telugu}');
Error('\P{Script=:=		Telugu}');
Expect(1, 3075, '\p{Script=telugu}', "");
Expect(0, 3075, '\p{^Script=telugu}', "");
Expect(0, 3075, '\P{Script=telugu}', "");
Expect(1, 3075, '\P{^Script=telugu}', "");
Expect(0, 3072, '\p{Script=telugu}', "");
Expect(1, 3072, '\p{^Script=telugu}', "");
Expect(1, 3072, '\P{Script=telugu}', "");
Expect(0, 3072, '\P{^Script=telugu}', "");
Expect(1, 3075, '\p{Script:-_Telugu}', "");
Expect(0, 3075, '\p{^Script:-_Telugu}', "");
Expect(0, 3075, '\P{Script:-_Telugu}', "");
Expect(1, 3075, '\P{^Script:-_Telugu}', "");
Expect(0, 3072, '\p{Script:-_Telugu}', "");
Expect(1, 3072, '\p{^Script:-_Telugu}', "");
Expect(1, 3072, '\P{Script:-_Telugu}', "");
Expect(0, 3072, '\P{^Script:-_Telugu}', "");
Error('\p{Sc=-telu/a/}');
Error('\P{Sc=-telu/a/}');
Expect(1, 3075, '\p{Sc=telu}', "");
Expect(0, 3075, '\p{^Sc=telu}', "");
Expect(0, 3075, '\P{Sc=telu}', "");
Expect(1, 3075, '\P{^Sc=telu}', "");
Expect(0, 3072, '\p{Sc=telu}', "");
Expect(1, 3072, '\p{^Sc=telu}', "");
Expect(1, 3072, '\P{Sc=telu}', "");
Expect(0, 3072, '\P{^Sc=telu}', "");
Expect(1, 3075, '\p{Sc: telu}', "");
Expect(0, 3075, '\p{^Sc: telu}', "");
Expect(0, 3075, '\P{Sc: telu}', "");
Expect(1, 3075, '\P{^Sc: telu}', "");
Expect(0, 3072, '\p{Sc: telu}', "");
Expect(1, 3072, '\p{^Sc: telu}', "");
Expect(1, 3072, '\P{Sc: telu}', "");
Expect(0, 3072, '\P{^Sc: telu}', "");
Error('\p{Is_Script:   	 Telugu:=}');
Error('\P{Is_Script:   	 Telugu:=}');
Expect(1, 3075, '\p{Is_Script=telugu}', "");
Expect(0, 3075, '\p{^Is_Script=telugu}', "");
Expect(0, 3075, '\P{Is_Script=telugu}', "");
Expect(1, 3075, '\P{^Is_Script=telugu}', "");
Expect(0, 3072, '\p{Is_Script=telugu}', "");
Expect(1, 3072, '\p{^Is_Script=telugu}', "");
Expect(1, 3072, '\P{Is_Script=telugu}', "");
Expect(0, 3072, '\P{^Is_Script=telugu}', "");
Expect(1, 3075, '\p{Is_Script:    Telugu}', "");
Expect(0, 3075, '\p{^Is_Script:    Telugu}', "");
Expect(0, 3075, '\P{Is_Script:    Telugu}', "");
Expect(1, 3075, '\P{^Is_Script:    Telugu}', "");
Expect(0, 3072, '\p{Is_Script:    Telugu}', "");
Expect(1, 3072, '\p{^Is_Script:    Telugu}', "");
Expect(1, 3072, '\P{Is_Script:    Telugu}', "");
Expect(0, 3072, '\P{^Is_Script:    Telugu}', "");
Error('\p{Is_Sc=/a/ -Telu}');
Error('\P{Is_Sc=/a/ -Telu}');
Expect(1, 3075, '\p{Is_Sc=telu}', "");
Expect(0, 3075, '\p{^Is_Sc=telu}', "");
Expect(0, 3075, '\P{Is_Sc=telu}', "");
Expect(1, 3075, '\P{^Is_Sc=telu}', "");
Expect(0, 3072, '\p{Is_Sc=telu}', "");
Expect(1, 3072, '\p{^Is_Sc=telu}', "");
Expect(1, 3072, '\P{Is_Sc=telu}', "");
Expect(0, 3072, '\P{^Is_Sc=telu}', "");
Expect(1, 3075, '\p{Is_Sc= Telu}', "");
Expect(0, 3075, '\p{^Is_Sc= Telu}', "");
Expect(0, 3075, '\P{Is_Sc= Telu}', "");
Expect(1, 3075, '\P{^Is_Sc= Telu}', "");
Expect(0, 3072, '\p{Is_Sc= Telu}', "");
Expect(1, 3072, '\p{^Is_Sc= Telu}', "");
Expect(1, 3072, '\P{Is_Sc= Telu}', "");
Expect(0, 3072, '\P{^Is_Sc= Telu}', "");
Error('\p{Script= :=TIFINAGH}');
Error('\P{Script= :=TIFINAGH}');
Expect(1, 11621, '\p{Script=tifinagh}', "");
Expect(0, 11621, '\p{^Script=tifinagh}', "");
Expect(0, 11621, '\P{Script=tifinagh}', "");
Expect(1, 11621, '\P{^Script=tifinagh}', "");
Expect(0, 11567, '\p{Script=tifinagh}', "");
Expect(1, 11567, '\p{^Script=tifinagh}', "");
Expect(1, 11567, '\P{Script=tifinagh}', "");
Expect(0, 11567, '\P{^Script=tifinagh}', "");
Expect(1, 11621, '\p{Script=	Tifinagh}', "");
Expect(0, 11621, '\p{^Script=	Tifinagh}', "");
Expect(0, 11621, '\P{Script=	Tifinagh}', "");
Expect(1, 11621, '\P{^Script=	Tifinagh}', "");
Expect(0, 11567, '\p{Script=	Tifinagh}', "");
Expect(1, 11567, '\p{^Script=	Tifinagh}', "");
Expect(1, 11567, '\P{Script=	Tifinagh}', "");
Expect(0, 11567, '\P{^Script=	Tifinagh}', "");
Error('\p{Sc=	tfng/a/}');
Error('\P{Sc=	tfng/a/}');
Expect(1, 11621, '\p{Sc=tfng}', "");
Expect(0, 11621, '\p{^Sc=tfng}', "");
Expect(0, 11621, '\P{Sc=tfng}', "");
Expect(1, 11621, '\P{^Sc=tfng}', "");
Expect(0, 11567, '\p{Sc=tfng}', "");
Expect(1, 11567, '\p{^Sc=tfng}', "");
Expect(1, 11567, '\P{Sc=tfng}', "");
Expect(0, 11567, '\P{^Sc=tfng}', "");
Expect(1, 11621, '\p{Sc=_Tfng}', "");
Expect(0, 11621, '\p{^Sc=_Tfng}', "");
Expect(0, 11621, '\P{Sc=_Tfng}', "");
Expect(1, 11621, '\P{^Sc=_Tfng}', "");
Expect(0, 11567, '\p{Sc=_Tfng}', "");
Expect(1, 11567, '\p{^Sc=_Tfng}', "");
Expect(1, 11567, '\P{Sc=_Tfng}', "");
Expect(0, 11567, '\P{^Sc=_Tfng}', "");
Error('\p{Is_Script= _Tifinagh/a/}');
Error('\P{Is_Script= _Tifinagh/a/}');
Expect(1, 11621, '\p{Is_Script=tifinagh}', "");
Expect(0, 11621, '\p{^Is_Script=tifinagh}', "");
Expect(0, 11621, '\P{Is_Script=tifinagh}', "");
Expect(1, 11621, '\P{^Is_Script=tifinagh}', "");
Expect(0, 11567, '\p{Is_Script=tifinagh}', "");
Expect(1, 11567, '\p{^Is_Script=tifinagh}', "");
Expect(1, 11567, '\P{Is_Script=tifinagh}', "");
Expect(0, 11567, '\P{^Is_Script=tifinagh}', "");
Expect(1, 11621, '\p{Is_Script:	 Tifinagh}', "");
Expect(0, 11621, '\p{^Is_Script:	 Tifinagh}', "");
Expect(0, 11621, '\P{Is_Script:	 Tifinagh}', "");
Expect(1, 11621, '\P{^Is_Script:	 Tifinagh}', "");
Expect(0, 11567, '\p{Is_Script:	 Tifinagh}', "");
Expect(1, 11567, '\p{^Is_Script:	 Tifinagh}', "");
Expect(1, 11567, '\P{Is_Script:	 Tifinagh}', "");
Expect(0, 11567, '\P{^Is_Script:	 Tifinagh}', "");
Error('\p{Is_Sc=_TFNG:=}');
Error('\P{Is_Sc=_TFNG:=}');
Expect(1, 11621, '\p{Is_Sc=tfng}', "");
Expect(0, 11621, '\p{^Is_Sc=tfng}', "");
Expect(0, 11621, '\P{Is_Sc=tfng}', "");
Expect(1, 11621, '\P{^Is_Sc=tfng}', "");
Expect(0, 11567, '\p{Is_Sc=tfng}', "");
Expect(1, 11567, '\p{^Is_Sc=tfng}', "");
Expect(1, 11567, '\P{Is_Sc=tfng}', "");
Expect(0, 11567, '\P{^Is_Sc=tfng}', "");
Expect(1, 11621, '\p{Is_Sc= Tfng}', "");
Expect(0, 11621, '\p{^Is_Sc= Tfng}', "");
Expect(0, 11621, '\P{Is_Sc= Tfng}', "");
Expect(1, 11621, '\P{^Is_Sc= Tfng}', "");
Expect(0, 11567, '\p{Is_Sc= Tfng}', "");
Expect(1, 11567, '\p{^Is_Sc= Tfng}', "");
Expect(1, 11567, '\P{Is_Sc= Tfng}', "");
Expect(0, 11567, '\P{^Is_Sc= Tfng}', "");
Error('\p{Script=-/a/sinhala}');
Error('\P{Script=-/a/sinhala}');
Expect(1, 3459, '\p{Script:	sinhala}', "");
Expect(0, 3459, '\p{^Script:	sinhala}', "");
Expect(0, 3459, '\P{Script:	sinhala}', "");
Expect(1, 3459, '\P{^Script:	sinhala}', "");
Expect(0, 3457, '\p{Script:	sinhala}', "");
Expect(1, 3457, '\p{^Script:	sinhala}', "");
Expect(1, 3457, '\P{Script:	sinhala}', "");
Expect(0, 3457, '\P{^Script:	sinhala}', "");
Expect(1, 3459, '\p{Script=  Sinhala}', "");
Expect(0, 3459, '\p{^Script=  Sinhala}', "");
Expect(0, 3459, '\P{Script=  Sinhala}', "");
Expect(1, 3459, '\P{^Script=  Sinhala}', "");
Expect(0, 3457, '\p{Script=  Sinhala}', "");
Expect(1, 3457, '\p{^Script=  Sinhala}', "");
Expect(1, 3457, '\P{Script=  Sinhala}', "");
Expect(0, 3457, '\P{^Script=  Sinhala}', "");
Error('\p{Sc=	:=sinh}');
Error('\P{Sc=	:=sinh}');
Expect(1, 3459, '\p{Sc=sinh}', "");
Expect(0, 3459, '\p{^Sc=sinh}', "");
Expect(0, 3459, '\P{Sc=sinh}', "");
Expect(1, 3459, '\P{^Sc=sinh}', "");
Expect(0, 3457, '\p{Sc=sinh}', "");
Expect(1, 3457, '\p{^Sc=sinh}', "");
Expect(1, 3457, '\P{Sc=sinh}', "");
Expect(0, 3457, '\P{^Sc=sinh}', "");
Expect(1, 3459, '\p{Sc=Sinh}', "");
Expect(0, 3459, '\p{^Sc=Sinh}', "");
Expect(0, 3459, '\P{Sc=Sinh}', "");
Expect(1, 3459, '\P{^Sc=Sinh}', "");
Expect(0, 3457, '\p{Sc=Sinh}', "");
Expect(1, 3457, '\p{^Sc=Sinh}', "");
Expect(1, 3457, '\P{Sc=Sinh}', "");
Expect(0, 3457, '\P{^Sc=Sinh}', "");
Error('\p{Is_Script= :=Sinhala}');
Error('\P{Is_Script= :=Sinhala}');
Expect(1, 3459, '\p{Is_Script=sinhala}', "");
Expect(0, 3459, '\p{^Is_Script=sinhala}', "");
Expect(0, 3459, '\P{Is_Script=sinhala}', "");
Expect(1, 3459, '\P{^Is_Script=sinhala}', "");
Expect(0, 3457, '\p{Is_Script=sinhala}', "");
Expect(1, 3457, '\p{^Is_Script=sinhala}', "");
Expect(1, 3457, '\P{Is_Script=sinhala}', "");
Expect(0, 3457, '\P{^Is_Script=sinhala}', "");
Expect(1, 3459, '\p{Is_Script=-	Sinhala}', "");
Expect(0, 3459, '\p{^Is_Script=-	Sinhala}', "");
Expect(0, 3459, '\P{Is_Script=-	Sinhala}', "");
Expect(1, 3459, '\P{^Is_Script=-	Sinhala}', "");
Expect(0, 3457, '\p{Is_Script=-	Sinhala}', "");
Expect(1, 3457, '\p{^Is_Script=-	Sinhala}', "");
Expect(1, 3457, '\P{Is_Script=-	Sinhala}', "");
Expect(0, 3457, '\P{^Is_Script=-	Sinhala}', "");
Error('\p{Is_Sc=/a/_ SINH}');
Error('\P{Is_Sc=/a/_ SINH}');
Expect(1, 3459, '\p{Is_Sc=sinh}', "");
Expect(0, 3459, '\p{^Is_Sc=sinh}', "");
Expect(0, 3459, '\P{Is_Sc=sinh}', "");
Expect(1, 3459, '\P{^Is_Sc=sinh}', "");
Expect(0, 3457, '\p{Is_Sc=sinh}', "");
Expect(1, 3457, '\p{^Is_Sc=sinh}', "");
Expect(1, 3457, '\P{Is_Sc=sinh}', "");
Expect(0, 3457, '\P{^Is_Sc=sinh}', "");
Expect(1, 3459, '\p{Is_Sc= _SINH}', "");
Expect(0, 3459, '\p{^Is_Sc= _SINH}', "");
Expect(0, 3459, '\P{Is_Sc= _SINH}', "");
Expect(1, 3459, '\P{^Is_Sc= _SINH}', "");
Expect(0, 3457, '\p{Is_Sc= _SINH}', "");
Expect(1, 3457, '\p{^Is_Sc= _SINH}', "");
Expect(1, 3457, '\P{Is_Sc= _SINH}', "");
Expect(0, 3457, '\P{^Is_Sc= _SINH}', "");
Error('\p{Script=-:=linearB}');
Error('\P{Script=-:=linearB}');
Expect(1, 65547, '\p{Script=linearb}', "");
Expect(0, 65547, '\p{^Script=linearb}', "");
Expect(0, 65547, '\P{Script=linearb}', "");
Expect(1, 65547, '\P{^Script=linearb}', "");
Expect(0, 1, '\p{Script=linearb}', "");
Expect(1, 1, '\p{^Script=linearb}', "");
Expect(1, 1, '\P{Script=linearb}', "");
Expect(0, 1, '\P{^Script=linearb}', "");
Expect(1, 65547, '\p{Script: 	Linear B}', "");
Expect(0, 65547, '\p{^Script: 	Linear B}', "");
Expect(0, 65547, '\P{Script: 	Linear B}', "");
Expect(1, 65547, '\P{^Script: 	Linear B}', "");
Expect(0, 1, '\p{Script: 	Linear B}', "");
Expect(1, 1, '\p{^Script: 	Linear B}', "");
Expect(1, 1, '\P{Script: 	Linear B}', "");
Expect(0, 1, '\P{^Script: 	Linear B}', "");
Error('\p{Sc=-/a/Linb}');
Error('\P{Sc=-/a/Linb}');
Expect(1, 65547, '\p{Sc=linb}', "");
Expect(0, 65547, '\p{^Sc=linb}', "");
Expect(0, 65547, '\P{Sc=linb}', "");
Expect(1, 65547, '\P{^Sc=linb}', "");
Expect(0, 1, '\p{Sc=linb}', "");
Expect(1, 1, '\p{^Sc=linb}', "");
Expect(1, 1, '\P{Sc=linb}', "");
Expect(0, 1, '\P{^Sc=linb}', "");
Expect(1, 65547, '\p{Sc=- linb}', "");
Expect(0, 65547, '\p{^Sc=- linb}', "");
Expect(0, 65547, '\P{Sc=- linb}', "");
Expect(1, 65547, '\P{^Sc=- linb}', "");
Expect(0, 1, '\p{Sc=- linb}', "");
Expect(1, 1, '\p{^Sc=- linb}', "");
Expect(1, 1, '\P{Sc=- linb}', "");
Expect(0, 1, '\P{^Sc=- linb}', "");
Error('\p{Is_Script=		linear/a/B}');
Error('\P{Is_Script=		linear/a/B}');
Expect(1, 65547, '\p{Is_Script=linearb}', "");
Expect(0, 65547, '\p{^Is_Script=linearb}', "");
Expect(0, 65547, '\P{Is_Script=linearb}', "");
Expect(1, 65547, '\P{^Is_Script=linearb}', "");
Expect(0, 1, '\p{Is_Script=linearb}', "");
Expect(1, 1, '\p{^Is_Script=linearb}', "");
Expect(1, 1, '\P{Is_Script=linearb}', "");
Expect(0, 1, '\P{^Is_Script=linearb}', "");
Expect(1, 65547, '\p{Is_Script:   LINEAR-b}', "");
Expect(0, 65547, '\p{^Is_Script:   LINEAR-b}', "");
Expect(0, 65547, '\P{Is_Script:   LINEAR-b}', "");
Expect(1, 65547, '\P{^Is_Script:   LINEAR-b}', "");
Expect(0, 1, '\p{Is_Script:   LINEAR-b}', "");
Expect(1, 1, '\p{^Is_Script:   LINEAR-b}', "");
Expect(1, 1, '\P{Is_Script:   LINEAR-b}', "");
Expect(0, 1, '\P{^Is_Script:   LINEAR-b}', "");
Error('\p{Is_Sc=-_LINB:=}');
Error('\P{Is_Sc=-_LINB:=}');
Expect(1, 65547, '\p{Is_Sc=linb}', "");
Expect(0, 65547, '\p{^Is_Sc=linb}', "");
Expect(0, 65547, '\P{Is_Sc=linb}', "");
Expect(1, 65547, '\P{^Is_Sc=linb}', "");
Expect(0, 1, '\p{Is_Sc=linb}', "");
Expect(1, 1, '\p{^Is_Sc=linb}', "");
Expect(1, 1, '\P{Is_Sc=linb}', "");
Expect(0, 1, '\P{^Is_Sc=linb}', "");
Expect(1, 65547, '\p{Is_Sc=	_LINB}', "");
Expect(0, 65547, '\p{^Is_Sc=	_LINB}', "");
Expect(0, 65547, '\P{Is_Sc=	_LINB}', "");
Expect(1, 65547, '\P{^Is_Sc=	_LINB}', "");
Expect(0, 1, '\p{Is_Sc=	_LINB}', "");
Expect(1, 1, '\p{^Is_Sc=	_LINB}', "");
Expect(1, 1, '\P{Is_Sc=	_LINB}', "");
Expect(0, 1, '\P{^Is_Sc=	_LINB}', "");
Error('\p{Script::=- Samaritan}');
Error('\P{Script::=- Samaritan}');
Expect(1, 2093, '\p{Script:	samaritan}', "");
Expect(0, 2093, '\p{^Script:	samaritan}', "");
Expect(0, 2093, '\P{Script:	samaritan}', "");
Expect(1, 2093, '\P{^Script:	samaritan}', "");
Expect(0, 2047, '\p{Script:	samaritan}', "");
Expect(1, 2047, '\p{^Script:	samaritan}', "");
Expect(1, 2047, '\P{Script:	samaritan}', "");
Expect(0, 2047, '\P{^Script:	samaritan}', "");
Expect(1, 2093, '\p{Script=-SAMARITAN}', "");
Expect(0, 2093, '\p{^Script=-SAMARITAN}', "");
Expect(0, 2093, '\P{Script=-SAMARITAN}', "");
Expect(1, 2093, '\P{^Script=-SAMARITAN}', "");
Expect(0, 2047, '\p{Script=-SAMARITAN}', "");
Expect(1, 2047, '\p{^Script=-SAMARITAN}', "");
Expect(1, 2047, '\P{Script=-SAMARITAN}', "");
Expect(0, 2047, '\P{^Script=-SAMARITAN}', "");
Error('\p{Sc=/a/--Samr}');
Error('\P{Sc=/a/--Samr}');
Expect(1, 2093, '\p{Sc=samr}', "");
Expect(0, 2093, '\p{^Sc=samr}', "");
Expect(0, 2093, '\P{Sc=samr}', "");
Expect(1, 2093, '\P{^Sc=samr}', "");
Expect(0, 2047, '\p{Sc=samr}', "");
Expect(1, 2047, '\p{^Sc=samr}', "");
Expect(1, 2047, '\P{Sc=samr}', "");
Expect(0, 2047, '\P{^Sc=samr}', "");
Expect(1, 2093, '\p{Sc=_SAMR}', "");
Expect(0, 2093, '\p{^Sc=_SAMR}', "");
Expect(0, 2093, '\P{Sc=_SAMR}', "");
Expect(1, 2093, '\P{^Sc=_SAMR}', "");
Expect(0, 2047, '\p{Sc=_SAMR}', "");
Expect(1, 2047, '\p{^Sc=_SAMR}', "");
Expect(1, 2047, '\P{Sc=_SAMR}', "");
Expect(0, 2047, '\P{^Sc=_SAMR}', "");
Error('\p{Is_Script=_SAMARITAN/a/}');
Error('\P{Is_Script=_SAMARITAN/a/}');
Expect(1, 2093, '\p{Is_Script=samaritan}', "");
Expect(0, 2093, '\p{^Is_Script=samaritan}', "");
Expect(0, 2093, '\P{Is_Script=samaritan}', "");
Expect(1, 2093, '\P{^Is_Script=samaritan}', "");
Expect(0, 2047, '\p{Is_Script=samaritan}', "");
Expect(1, 2047, '\p{^Is_Script=samaritan}', "");
Expect(1, 2047, '\P{Is_Script=samaritan}', "");
Expect(0, 2047, '\P{^Is_Script=samaritan}', "");
Expect(1, 2093, '\p{Is_Script: _ Samaritan}', "");
Expect(0, 2093, '\p{^Is_Script: _ Samaritan}', "");
Expect(0, 2093, '\P{Is_Script: _ Samaritan}', "");
Expect(1, 2093, '\P{^Is_Script: _ Samaritan}', "");
Expect(0, 2047, '\p{Is_Script: _ Samaritan}', "");
Expect(1, 2047, '\p{^Is_Script: _ Samaritan}', "");
Expect(1, 2047, '\P{Is_Script: _ Samaritan}', "");
Expect(0, 2047, '\P{^Is_Script: _ Samaritan}', "");
Error('\p{Is_Sc=/a/_Samr}');
Error('\P{Is_Sc=/a/_Samr}');
Expect(1, 2093, '\p{Is_Sc:samr}', "");
Expect(0, 2093, '\p{^Is_Sc:samr}', "");
Expect(0, 2093, '\P{Is_Sc:samr}', "");
Expect(1, 2093, '\P{^Is_Sc:samr}', "");
Expect(0, 2047, '\p{Is_Sc:samr}', "");
Expect(1, 2047, '\p{^Is_Sc:samr}', "");
Expect(1, 2047, '\P{Is_Sc:samr}', "");
Expect(0, 2047, '\P{^Is_Sc:samr}', "");
Expect(1, 2093, '\p{Is_Sc=-	samr}', "");
Expect(0, 2093, '\p{^Is_Sc=-	samr}', "");
Expect(0, 2093, '\P{Is_Sc=-	samr}', "");
Expect(1, 2093, '\P{^Is_Sc=-	samr}', "");
Expect(0, 2047, '\p{Is_Sc=-	samr}', "");
Expect(1, 2047, '\p{^Is_Sc=-	samr}', "");
Expect(1, 2047, '\P{Is_Sc=-	samr}', "");
Expect(0, 2047, '\P{^Is_Sc=-	samr}', "");
Error('\p{Script=:=- Saurashtra}');
Error('\P{Script=:=- Saurashtra}');
Expect(1, 43204, '\p{Script=saurashtra}', "");
Expect(0, 43204, '\p{^Script=saurashtra}', "");
Expect(0, 43204, '\P{Script=saurashtra}', "");
Expect(1, 43204, '\P{^Script=saurashtra}', "");
Expect(0, 43135, '\p{Script=saurashtra}', "");
Expect(1, 43135, '\p{^Script=saurashtra}', "");
Expect(1, 43135, '\P{Script=saurashtra}', "");
Expect(0, 43135, '\P{^Script=saurashtra}', "");
Expect(1, 43204, '\p{Script=__Saurashtra}', "");
Expect(0, 43204, '\p{^Script=__Saurashtra}', "");
Expect(0, 43204, '\P{Script=__Saurashtra}', "");
Expect(1, 43204, '\P{^Script=__Saurashtra}', "");
Expect(0, 43135, '\p{Script=__Saurashtra}', "");
Expect(1, 43135, '\p{^Script=__Saurashtra}', "");
Expect(1, 43135, '\P{Script=__Saurashtra}', "");
Expect(0, 43135, '\P{^Script=__Saurashtra}', "");
Error('\p{Sc=:=	_saur}');
Error('\P{Sc=:=	_saur}');
Expect(1, 43204, '\p{Sc=saur}', "");
Expect(0, 43204, '\p{^Sc=saur}', "");
Expect(0, 43204, '\P{Sc=saur}', "");
Expect(1, 43204, '\P{^Sc=saur}', "");
Expect(0, 43135, '\p{Sc=saur}', "");
Expect(1, 43135, '\p{^Sc=saur}', "");
Expect(1, 43135, '\P{Sc=saur}', "");
Expect(0, 43135, '\P{^Sc=saur}', "");
Expect(1, 43204, '\p{Sc=-Saur}', "");
Expect(0, 43204, '\p{^Sc=-Saur}', "");
Expect(0, 43204, '\P{Sc=-Saur}', "");
Expect(1, 43204, '\P{^Sc=-Saur}', "");
Expect(0, 43135, '\p{Sc=-Saur}', "");
Expect(1, 43135, '\p{^Sc=-Saur}', "");
Expect(1, 43135, '\P{Sc=-Saur}', "");
Expect(0, 43135, '\P{^Sc=-Saur}', "");
Error('\p{Is_Script=-:=Saurashtra}');
Error('\P{Is_Script=-:=Saurashtra}');
Expect(1, 43204, '\p{Is_Script=saurashtra}', "");
Expect(0, 43204, '\p{^Is_Script=saurashtra}', "");
Expect(0, 43204, '\P{Is_Script=saurashtra}', "");
Expect(1, 43204, '\P{^Is_Script=saurashtra}', "");
Expect(0, 43135, '\p{Is_Script=saurashtra}', "");
Expect(1, 43135, '\p{^Is_Script=saurashtra}', "");
Expect(1, 43135, '\P{Is_Script=saurashtra}', "");
Expect(0, 43135, '\P{^Is_Script=saurashtra}', "");
Expect(1, 43204, '\p{Is_Script= saurashtra}', "");
Expect(0, 43204, '\p{^Is_Script= saurashtra}', "");
Expect(0, 43204, '\P{Is_Script= saurashtra}', "");
Expect(1, 43204, '\P{^Is_Script= saurashtra}', "");
Expect(0, 43135, '\p{Is_Script= saurashtra}', "");
Expect(1, 43135, '\p{^Is_Script= saurashtra}', "");
Expect(1, 43135, '\P{Is_Script= saurashtra}', "");
Expect(0, 43135, '\P{^Is_Script= saurashtra}', "");
Error('\p{Is_Sc=_	Saur/a/}');
Error('\P{Is_Sc=_	Saur/a/}');
Expect(1, 43204, '\p{Is_Sc:	saur}', "");
Expect(0, 43204, '\p{^Is_Sc:	saur}', "");
Expect(0, 43204, '\P{Is_Sc:	saur}', "");
Expect(1, 43204, '\P{^Is_Sc:	saur}', "");
Expect(0, 43135, '\p{Is_Sc:	saur}', "");
Expect(1, 43135, '\p{^Is_Sc:	saur}', "");
Expect(1, 43135, '\P{Is_Sc:	saur}', "");
Expect(0, 43135, '\P{^Is_Sc:	saur}', "");
Expect(1, 43204, '\p{Is_Sc=-saur}', "");
Expect(0, 43204, '\p{^Is_Sc=-saur}', "");
Expect(0, 43204, '\P{Is_Sc=-saur}', "");
Expect(1, 43204, '\P{^Is_Sc=-saur}', "");
Expect(0, 43135, '\p{Is_Sc=-saur}', "");
Expect(1, 43135, '\p{^Is_Sc=-saur}', "");
Expect(1, 43135, '\P{Is_Sc=-saur}', "");
Expect(0, 43135, '\P{^Is_Sc=-saur}', "");
Error('\p{Script=-SUNDANESE/a/}');
Error('\P{Script=-SUNDANESE/a/}');
Expect(1, 7082, '\p{Script=sundanese}', "");
Expect(0, 7082, '\p{^Script=sundanese}', "");
Expect(0, 7082, '\P{Script=sundanese}', "");
Expect(1, 7082, '\P{^Script=sundanese}', "");
Expect(0, 7039, '\p{Script=sundanese}', "");
Expect(1, 7039, '\p{^Script=sundanese}', "");
Expect(1, 7039, '\P{Script=sundanese}', "");
Expect(0, 7039, '\P{^Script=sundanese}', "");
Expect(1, 7082, '\p{Script=Sundanese}', "");
Expect(0, 7082, '\p{^Script=Sundanese}', "");
Expect(0, 7082, '\P{Script=Sundanese}', "");
Expect(1, 7082, '\P{^Script=Sundanese}', "");
Expect(0, 7039, '\p{Script=Sundanese}', "");
Expect(1, 7039, '\p{^Script=Sundanese}', "");
Expect(1, 7039, '\P{Script=Sundanese}', "");
Expect(0, 7039, '\P{^Script=Sundanese}', "");
Error('\p{Sc:		/a/Sund}');
Error('\P{Sc:		/a/Sund}');
Expect(1, 7082, '\p{Sc=sund}', "");
Expect(0, 7082, '\p{^Sc=sund}', "");
Expect(0, 7082, '\P{Sc=sund}', "");
Expect(1, 7082, '\P{^Sc=sund}', "");
Expect(0, 7039, '\p{Sc=sund}', "");
Expect(1, 7039, '\p{^Sc=sund}', "");
Expect(1, 7039, '\P{Sc=sund}', "");
Expect(0, 7039, '\P{^Sc=sund}', "");
Expect(1, 7082, '\p{Sc=  SUND}', "");
Expect(0, 7082, '\p{^Sc=  SUND}', "");
Expect(0, 7082, '\P{Sc=  SUND}', "");
Expect(1, 7082, '\P{^Sc=  SUND}', "");
Expect(0, 7039, '\p{Sc=  SUND}', "");
Expect(1, 7039, '\p{^Sc=  SUND}', "");
Expect(1, 7039, '\P{Sc=  SUND}', "");
Expect(0, 7039, '\P{^Sc=  SUND}', "");
Error('\p{Is_Script=/a/-Sundanese}');
Error('\P{Is_Script=/a/-Sundanese}');
Expect(1, 7082, '\p{Is_Script=sundanese}', "");
Expect(0, 7082, '\p{^Is_Script=sundanese}', "");
Expect(0, 7082, '\P{Is_Script=sundanese}', "");
Expect(1, 7082, '\P{^Is_Script=sundanese}', "");
Expect(0, 7039, '\p{Is_Script=sundanese}', "");
Expect(1, 7039, '\p{^Is_Script=sundanese}', "");
Expect(1, 7039, '\P{Is_Script=sundanese}', "");
Expect(0, 7039, '\P{^Is_Script=sundanese}', "");
Expect(1, 7082, '\p{Is_Script: _ SUNDANESE}', "");
Expect(0, 7082, '\p{^Is_Script: _ SUNDANESE}', "");
Expect(0, 7082, '\P{Is_Script: _ SUNDANESE}', "");
Expect(1, 7082, '\P{^Is_Script: _ SUNDANESE}', "");
Expect(0, 7039, '\p{Is_Script: _ SUNDANESE}', "");
Expect(1, 7039, '\p{^Is_Script: _ SUNDANESE}', "");
Expect(1, 7039, '\P{Is_Script: _ SUNDANESE}', "");
Expect(0, 7039, '\P{^Is_Script: _ SUNDANESE}', "");
Error('\p{Is_Sc=:=	SUND}');
Error('\P{Is_Sc=:=	SUND}');
Expect(1, 7082, '\p{Is_Sc=sund}', "");
Expect(0, 7082, '\p{^Is_Sc=sund}', "");
Expect(0, 7082, '\P{Is_Sc=sund}', "");
Expect(1, 7082, '\P{^Is_Sc=sund}', "");
Expect(0, 7039, '\p{Is_Sc=sund}', "");
Expect(1, 7039, '\p{^Is_Sc=sund}', "");
Expect(1, 7039, '\P{Is_Sc=sund}', "");
Expect(0, 7039, '\P{^Is_Sc=sund}', "");
Expect(1, 7082, '\p{Is_Sc=_SUND}', "");
Expect(0, 7082, '\p{^Is_Sc=_SUND}', "");
Expect(0, 7082, '\P{Is_Sc=_SUND}', "");
Expect(1, 7082, '\P{^Is_Sc=_SUND}', "");
Expect(0, 7039, '\p{Is_Sc=_SUND}', "");
Expect(1, 7039, '\p{^Is_Sc=_SUND}', "");
Expect(1, 7039, '\P{Is_Sc=_SUND}', "");
Expect(0, 7039, '\P{^Is_Sc=_SUND}', "");
Error('\p{Script= /a/Nko}');
Error('\P{Script= /a/Nko}');
Expect(1, 2042, '\p{Script=nko}', "");
Expect(0, 2042, '\p{^Script=nko}', "");
Expect(0, 2042, '\P{Script=nko}', "");
Expect(1, 2042, '\P{^Script=nko}', "");
Expect(0, 1983, '\p{Script=nko}', "");
Expect(1, 1983, '\p{^Script=nko}', "");
Expect(1, 1983, '\P{Script=nko}', "");
Expect(0, 1983, '\P{^Script=nko}', "");
Expect(1, 2042, '\p{Script=__NKO}', "");
Expect(0, 2042, '\p{^Script=__NKO}', "");
Expect(0, 2042, '\P{Script=__NKO}', "");
Expect(1, 2042, '\P{^Script=__NKO}', "");
Expect(0, 1983, '\p{Script=__NKO}', "");
Expect(1, 1983, '\p{^Script=__NKO}', "");
Expect(1, 1983, '\P{Script=__NKO}', "");
Expect(0, 1983, '\P{^Script=__NKO}', "");
Error('\p{Sc=-_Nkoo:=}');
Error('\P{Sc=-_Nkoo:=}');
Expect(1, 2042, '\p{Sc=nkoo}', "");
Expect(0, 2042, '\p{^Sc=nkoo}', "");
Expect(0, 2042, '\P{Sc=nkoo}', "");
Expect(1, 2042, '\P{^Sc=nkoo}', "");
Expect(0, 1983, '\p{Sc=nkoo}', "");
Expect(1, 1983, '\p{^Sc=nkoo}', "");
Expect(1, 1983, '\P{Sc=nkoo}', "");
Expect(0, 1983, '\P{^Sc=nkoo}', "");
Expect(1, 2042, '\p{Sc= 	Nkoo}', "");
Expect(0, 2042, '\p{^Sc= 	Nkoo}', "");
Expect(0, 2042, '\P{Sc= 	Nkoo}', "");
Expect(1, 2042, '\P{^Sc= 	Nkoo}', "");
Expect(0, 1983, '\p{Sc= 	Nkoo}', "");
Expect(1, 1983, '\p{^Sc= 	Nkoo}', "");
Expect(1, 1983, '\P{Sc= 	Nkoo}', "");
Expect(0, 1983, '\P{^Sc= 	Nkoo}', "");
Error('\p{Is_Script=	nko:=}');
Error('\P{Is_Script=	nko:=}');
Expect(1, 2042, '\p{Is_Script: nko}', "");
Expect(0, 2042, '\p{^Is_Script: nko}', "");
Expect(0, 2042, '\P{Is_Script: nko}', "");
Expect(1, 2042, '\P{^Is_Script: nko}', "");
Expect(0, 1983, '\p{Is_Script: nko}', "");
Expect(1, 1983, '\p{^Is_Script: nko}', "");
Expect(1, 1983, '\P{Is_Script: nko}', "");
Expect(0, 1983, '\P{^Is_Script: nko}', "");
Expect(1, 2042, '\p{Is_Script=	NKO}', "");
Expect(0, 2042, '\p{^Is_Script=	NKO}', "");
Expect(0, 2042, '\P{Is_Script=	NKO}', "");
Expect(1, 2042, '\P{^Is_Script=	NKO}', "");
Expect(0, 1983, '\p{Is_Script=	NKO}', "");
Expect(1, 1983, '\p{^Is_Script=	NKO}', "");
Expect(1, 1983, '\P{Is_Script=	NKO}', "");
Expect(0, 1983, '\P{^Is_Script=	NKO}', "");
Error('\p{Is_Sc=__nkoo/a/}');
Error('\P{Is_Sc=__nkoo/a/}');
Expect(1, 2042, '\p{Is_Sc=nkoo}', "");
Expect(0, 2042, '\p{^Is_Sc=nkoo}', "");
Expect(0, 2042, '\P{Is_Sc=nkoo}', "");
Expect(1, 2042, '\P{^Is_Sc=nkoo}', "");
Expect(0, 1983, '\p{Is_Sc=nkoo}', "");
Expect(1, 1983, '\p{^Is_Sc=nkoo}', "");
Expect(1, 1983, '\P{Is_Sc=nkoo}', "");
Expect(0, 1983, '\P{^Is_Sc=nkoo}', "");
Expect(1, 2042, '\p{Is_Sc=		Nkoo}', "");
Expect(0, 2042, '\p{^Is_Sc=		Nkoo}', "");
Expect(0, 2042, '\P{Is_Sc=		Nkoo}', "");
Expect(1, 2042, '\P{^Is_Sc=		Nkoo}', "");
Expect(0, 1983, '\p{Is_Sc=		Nkoo}', "");
Expect(1, 1983, '\p{^Is_Sc=		Nkoo}', "");
Expect(1, 1983, '\P{Is_Sc=		Nkoo}', "");
Expect(0, 1983, '\P{^Is_Sc=		Nkoo}', "");
Error('\p{Script: -/a/Han}');
Error('\P{Script: -/a/Han}');
Expect(1, 11929, '\p{Script=han}', "");
Expect(0, 11929, '\p{^Script=han}', "");
Expect(0, 11929, '\P{Script=han}', "");
Expect(1, 11929, '\P{^Script=han}', "");
Expect(0, 11903, '\p{Script=han}', "");
Expect(1, 11903, '\p{^Script=han}', "");
Expect(1, 11903, '\P{Script=han}', "");
Expect(0, 11903, '\P{^Script=han}', "");
Expect(1, 11929, '\p{Script= -han}', "");
Expect(0, 11929, '\p{^Script= -han}', "");
Expect(0, 11929, '\P{Script= -han}', "");
Expect(1, 11929, '\P{^Script= -han}', "");
Expect(0, 11903, '\p{Script= -han}', "");
Expect(1, 11903, '\p{^Script= -han}', "");
Expect(1, 11903, '\P{Script= -han}', "");
Expect(0, 11903, '\P{^Script= -han}', "");
Error('\p{Sc=	 HANI/a/}');
Error('\P{Sc=	 HANI/a/}');
Expect(1, 11929, '\p{Sc=hani}', "");
Expect(0, 11929, '\p{^Sc=hani}', "");
Expect(0, 11929, '\P{Sc=hani}', "");
Expect(1, 11929, '\P{^Sc=hani}', "");
Expect(0, 11903, '\p{Sc=hani}', "");
Expect(1, 11903, '\p{^Sc=hani}', "");
Expect(1, 11903, '\P{Sc=hani}', "");
Expect(0, 11903, '\P{^Sc=hani}', "");
Expect(1, 11929, '\p{Sc=		HANI}', "");
Expect(0, 11929, '\p{^Sc=		HANI}', "");
Expect(0, 11929, '\P{Sc=		HANI}', "");
Expect(1, 11929, '\P{^Sc=		HANI}', "");
Expect(0, 11903, '\p{Sc=		HANI}', "");
Expect(1, 11903, '\p{^Sc=		HANI}', "");
Expect(1, 11903, '\P{Sc=		HANI}', "");
Expect(0, 11903, '\P{^Sc=		HANI}', "");
Error('\p{Is_Script=/a/__HAN}');
Error('\P{Is_Script=/a/__HAN}');
Expect(1, 11929, '\p{Is_Script=han}', "");
Expect(0, 11929, '\p{^Is_Script=han}', "");
Expect(0, 11929, '\P{Is_Script=han}', "");
Expect(1, 11929, '\P{^Is_Script=han}', "");
Expect(0, 11903, '\p{Is_Script=han}', "");
Expect(1, 11903, '\p{^Is_Script=han}', "");
Expect(1, 11903, '\P{Is_Script=han}', "");
Expect(0, 11903, '\P{^Is_Script=han}', "");
Expect(1, 11929, '\p{Is_Script=_	Han}', "");
Expect(0, 11929, '\p{^Is_Script=_	Han}', "");
Expect(0, 11929, '\P{Is_Script=_	Han}', "");
Expect(1, 11929, '\P{^Is_Script=_	Han}', "");
Expect(0, 11903, '\p{Is_Script=_	Han}', "");
Expect(1, 11903, '\p{^Is_Script=_	Han}', "");
Expect(1, 11903, '\P{Is_Script=_	Han}', "");
Expect(0, 11903, '\P{^Is_Script=_	Han}', "");
Error('\p{Is_Sc=:=	 Hani}');
Error('\P{Is_Sc=:=	 Hani}');
Expect(1, 11929, '\p{Is_Sc=hani}', "");
Expect(0, 11929, '\p{^Is_Sc=hani}', "");
Expect(0, 11929, '\P{Is_Sc=hani}', "");
Expect(1, 11929, '\P{^Is_Sc=hani}', "");
Expect(0, 11903, '\p{Is_Sc=hani}', "");
Expect(1, 11903, '\p{^Is_Sc=hani}', "");
Expect(1, 11903, '\P{Is_Sc=hani}', "");
Expect(0, 11903, '\P{^Is_Sc=hani}', "");
Expect(1, 11929, '\p{Is_Sc= Hani}', "");
Expect(0, 11929, '\p{^Is_Sc= Hani}', "");
Expect(0, 11929, '\P{Is_Sc= Hani}', "");
Expect(1, 11929, '\P{^Is_Sc= Hani}', "");
Expect(0, 11903, '\p{Is_Sc= Hani}', "");
Expect(1, 11903, '\p{^Is_Sc= Hani}', "");
Expect(1, 11903, '\P{Is_Sc= Hani}', "");
Expect(0, 11903, '\P{^Is_Sc= Hani}', "");
Error('\p{Script: /a/Greek}');
Error('\P{Script: /a/Greek}');
Expect(1, 883, '\p{Script=greek}', "");
Expect(0, 883, '\p{^Script=greek}', "");
Expect(0, 883, '\P{Script=greek}', "");
Expect(1, 883, '\P{^Script=greek}', "");
Expect(0, 879, '\p{Script=greek}', "");
Expect(1, 879, '\p{^Script=greek}', "");
Expect(1, 879, '\P{Script=greek}', "");
Expect(0, 879, '\P{^Script=greek}', "");
Expect(1, 883, '\p{Script=_greek}', "");
Expect(0, 883, '\p{^Script=_greek}', "");
Expect(0, 883, '\P{Script=_greek}', "");
Expect(1, 883, '\P{^Script=_greek}', "");
Expect(0, 879, '\p{Script=_greek}', "");
Expect(1, 879, '\p{^Script=_greek}', "");
Expect(1, 879, '\P{Script=_greek}', "");
Expect(0, 879, '\P{^Script=_greek}', "");
Error('\p{Sc=/a/	 Grek}');
Error('\P{Sc=/a/	 Grek}');
Expect(1, 883, '\p{Sc=grek}', "");
Expect(0, 883, '\p{^Sc=grek}', "");
Expect(0, 883, '\P{Sc=grek}', "");
Expect(1, 883, '\P{^Sc=grek}', "");
Expect(0, 879, '\p{Sc=grek}', "");
Expect(1, 879, '\p{^Sc=grek}', "");
Expect(1, 879, '\P{Sc=grek}', "");
Expect(0, 879, '\P{^Sc=grek}', "");
Expect(1, 883, '\p{Sc= -GREK}', "");
Expect(0, 883, '\p{^Sc= -GREK}', "");
Expect(0, 883, '\P{Sc= -GREK}', "");
Expect(1, 883, '\P{^Sc= -GREK}', "");
Expect(0, 879, '\p{Sc= -GREK}', "");
Expect(1, 879, '\p{^Sc= -GREK}', "");
Expect(1, 879, '\P{Sc= -GREK}', "");
Expect(0, 879, '\P{^Sc= -GREK}', "");
Error('\p{Is_Script:--Greek:=}');
Error('\P{Is_Script:--Greek:=}');
Expect(1, 883, '\p{Is_Script=greek}', "");
Expect(0, 883, '\p{^Is_Script=greek}', "");
Expect(0, 883, '\P{Is_Script=greek}', "");
Expect(1, 883, '\P{^Is_Script=greek}', "");
Expect(0, 879, '\p{Is_Script=greek}', "");
Expect(1, 879, '\p{^Is_Script=greek}', "");
Expect(1, 879, '\P{Is_Script=greek}', "");
Expect(0, 879, '\P{^Is_Script=greek}', "");
Expect(1, 883, '\p{Is_Script= -GREEK}', "");
Expect(0, 883, '\p{^Is_Script= -GREEK}', "");
Expect(0, 883, '\P{Is_Script= -GREEK}', "");
Expect(1, 883, '\P{^Is_Script= -GREEK}', "");
Expect(0, 879, '\p{Is_Script= -GREEK}', "");
Expect(1, 879, '\p{^Is_Script= -GREEK}', "");
Expect(1, 879, '\P{Is_Script= -GREEK}', "");
Expect(0, 879, '\P{^Is_Script= -GREEK}', "");
Error('\p{Is_Sc=:=GREK}');
Error('\P{Is_Sc=:=GREK}');
Expect(1, 883, '\p{Is_Sc=grek}', "");
Expect(0, 883, '\p{^Is_Sc=grek}', "");
Expect(0, 883, '\P{Is_Sc=grek}', "");
Expect(1, 883, '\P{^Is_Sc=grek}', "");
Expect(0, 879, '\p{Is_Sc=grek}', "");
Expect(1, 879, '\p{^Is_Sc=grek}', "");
Expect(1, 879, '\P{Is_Sc=grek}', "");
Expect(0, 879, '\P{^Is_Sc=grek}', "");
Expect(1, 883, '\p{Is_Sc=--GREK}', "");
Expect(0, 883, '\p{^Is_Sc=--GREK}', "");
Expect(0, 883, '\P{Is_Sc=--GREK}', "");
Expect(1, 883, '\P{^Is_Sc=--GREK}', "");
Expect(0, 879, '\p{Is_Sc=--GREK}', "");
Expect(1, 879, '\p{^Is_Sc=--GREK}', "");
Expect(1, 879, '\P{Is_Sc=--GREK}', "");
Expect(0, 879, '\P{^Is_Sc=--GREK}', "");
Error('\p{Script:	_	tamil:=}');
Error('\P{Script:	_	tamil:=}');
Expect(1, 2947, '\p{Script: tamil}', "");
Expect(0, 2947, '\p{^Script: tamil}', "");
Expect(0, 2947, '\P{Script: tamil}', "");
Expect(1, 2947, '\P{^Script: tamil}', "");
Expect(0, 2945, '\p{Script: tamil}', "");
Expect(1, 2945, '\p{^Script: tamil}', "");
Expect(1, 2945, '\P{Script: tamil}', "");
Expect(0, 2945, '\P{^Script: tamil}', "");
Expect(1, 2947, '\p{Script=_	tamil}', "");
Expect(0, 2947, '\p{^Script=_	tamil}', "");
Expect(0, 2947, '\P{Script=_	tamil}', "");
Expect(1, 2947, '\P{^Script=_	tamil}', "");
Expect(0, 2945, '\p{Script=_	tamil}', "");
Expect(1, 2945, '\p{^Script=_	tamil}', "");
Expect(1, 2945, '\P{Script=_	tamil}', "");
Expect(0, 2945, '\P{^Script=_	tamil}', "");
Error('\p{Sc=_:=TAML}');
Error('\P{Sc=_:=TAML}');
Expect(1, 2947, '\p{Sc=taml}', "");
Expect(0, 2947, '\p{^Sc=taml}', "");
Expect(0, 2947, '\P{Sc=taml}', "");
Expect(1, 2947, '\P{^Sc=taml}', "");
Expect(0, 2945, '\p{Sc=taml}', "");
Expect(1, 2945, '\p{^Sc=taml}', "");
Expect(1, 2945, '\P{Sc=taml}', "");
Expect(0, 2945, '\P{^Sc=taml}', "");
Expect(1, 2947, '\p{Sc= -taml}', "");
Expect(0, 2947, '\p{^Sc= -taml}', "");
Expect(0, 2947, '\P{Sc= -taml}', "");
Expect(1, 2947, '\P{^Sc= -taml}', "");
Expect(0, 2945, '\p{Sc= -taml}', "");
Expect(1, 2945, '\p{^Sc= -taml}', "");
Expect(1, 2945, '\P{Sc= -taml}', "");
Expect(0, 2945, '\P{^Sc= -taml}', "");
Error('\p{Is_Script=:=	-TAMIL}');
Error('\P{Is_Script=:=	-TAMIL}');
Expect(1, 2947, '\p{Is_Script: tamil}', "");
Expect(0, 2947, '\p{^Is_Script: tamil}', "");
Expect(0, 2947, '\P{Is_Script: tamil}', "");
Expect(1, 2947, '\P{^Is_Script: tamil}', "");
Expect(0, 2945, '\p{Is_Script: tamil}', "");
Expect(1, 2945, '\p{^Is_Script: tamil}', "");
Expect(1, 2945, '\P{Is_Script: tamil}', "");
Expect(0, 2945, '\P{^Is_Script: tamil}', "");
Expect(1, 2947, '\p{Is_Script=  TAMIL}', "");
Expect(0, 2947, '\p{^Is_Script=  TAMIL}', "");
Expect(0, 2947, '\P{Is_Script=  TAMIL}', "");
Expect(1, 2947, '\P{^Is_Script=  TAMIL}', "");
Expect(0, 2945, '\p{Is_Script=  TAMIL}', "");
Expect(1, 2945, '\p{^Is_Script=  TAMIL}', "");
Expect(1, 2945, '\P{Is_Script=  TAMIL}', "");
Expect(0, 2945, '\P{^Is_Script=  TAMIL}', "");
Error('\p{Is_Sc=_ TAML:=}');
Error('\P{Is_Sc=_ TAML:=}');
Expect(1, 2947, '\p{Is_Sc=taml}', "");
Expect(0, 2947, '\p{^Is_Sc=taml}', "");
Expect(0, 2947, '\P{Is_Sc=taml}', "");
Expect(1, 2947, '\P{^Is_Sc=taml}', "");
Expect(0, 2945, '\p{Is_Sc=taml}', "");
Expect(1, 2945, '\p{^Is_Sc=taml}', "");
Expect(1, 2945, '\P{Is_Sc=taml}', "");
Expect(0, 2945, '\P{^Is_Sc=taml}', "");
Expect(1, 2947, '\p{Is_Sc:	-Taml}', "");
Expect(0, 2947, '\p{^Is_Sc:	-Taml}', "");
Expect(0, 2947, '\P{Is_Sc:	-Taml}', "");
Expect(1, 2947, '\P{^Is_Sc:	-Taml}', "");
Expect(0, 2945, '\p{Is_Sc:	-Taml}', "");
Expect(1, 2945, '\p{^Is_Sc:	-Taml}', "");
Expect(1, 2945, '\P{Is_Sc:	-Taml}', "");
Expect(0, 2945, '\P{^Is_Sc:	-Taml}', "");
Error('\p{Script=:=	kayah	Li}');
Error('\P{Script=:=	kayah	Li}');
Expect(1, 43311, '\p{Script=kayahli}', "");
Expect(0, 43311, '\p{^Script=kayahli}', "");
Expect(0, 43311, '\P{Script=kayahli}', "");
Expect(1, 43311, '\P{^Script=kayahli}', "");
Expect(0, 43263, '\p{Script=kayahli}', "");
Expect(1, 43263, '\p{^Script=kayahli}', "");
Expect(1, 43263, '\P{Script=kayahli}', "");
Expect(0, 43263, '\P{^Script=kayahli}', "");
Expect(1, 43311, '\p{Script= _KAYAHLI}', "");
Expect(0, 43311, '\p{^Script= _KAYAHLI}', "");
Expect(0, 43311, '\P{Script= _KAYAHLI}', "");
Expect(1, 43311, '\P{^Script= _KAYAHLI}', "");
Expect(0, 43263, '\p{Script= _KAYAHLI}', "");
Expect(1, 43263, '\p{^Script= _KAYAHLI}', "");
Expect(1, 43263, '\P{Script= _KAYAHLI}', "");
Expect(0, 43263, '\P{^Script= _KAYAHLI}', "");
Error('\p{Sc=__Kali/a/}');
Error('\P{Sc=__Kali/a/}');
Expect(1, 43311, '\p{Sc=kali}', "");
Expect(0, 43311, '\p{^Sc=kali}', "");
Expect(0, 43311, '\P{Sc=kali}', "");
Expect(1, 43311, '\P{^Sc=kali}', "");
Expect(0, 43263, '\p{Sc=kali}', "");
Expect(1, 43263, '\p{^Sc=kali}', "");
Expect(1, 43263, '\P{Sc=kali}', "");
Expect(0, 43263, '\P{^Sc=kali}', "");
Expect(1, 43311, '\p{Sc= Kali}', "");
Expect(0, 43311, '\p{^Sc= Kali}', "");
Expect(0, 43311, '\P{Sc= Kali}', "");
Expect(1, 43311, '\P{^Sc= Kali}', "");
Expect(0, 43263, '\p{Sc= Kali}', "");
Expect(1, 43263, '\p{^Sc= Kali}', "");
Expect(1, 43263, '\P{Sc= Kali}', "");
Expect(0, 43263, '\P{^Sc= Kali}', "");
Error('\p{Is_Script: _/a/KAYAH-li}');
Error('\P{Is_Script: _/a/KAYAH-li}');
Expect(1, 43311, '\p{Is_Script:kayahli}', "");
Expect(0, 43311, '\p{^Is_Script:kayahli}', "");
Expect(0, 43311, '\P{Is_Script:kayahli}', "");
Expect(1, 43311, '\P{^Is_Script:kayahli}', "");
Expect(0, 43263, '\p{Is_Script:kayahli}', "");
Expect(1, 43263, '\p{^Is_Script:kayahli}', "");
Expect(1, 43263, '\P{Is_Script:kayahli}', "");
Expect(0, 43263, '\P{^Is_Script:kayahli}', "");
Expect(1, 43311, '\p{Is_Script=	-Kayah-Li}', "");
Expect(0, 43311, '\p{^Is_Script=	-Kayah-Li}', "");
Expect(0, 43311, '\P{Is_Script=	-Kayah-Li}', "");
Expect(1, 43311, '\P{^Is_Script=	-Kayah-Li}', "");
Expect(0, 43263, '\p{Is_Script=	-Kayah-Li}', "");
Expect(1, 43263, '\p{^Is_Script=	-Kayah-Li}', "");
Expect(1, 43263, '\P{Is_Script=	-Kayah-Li}', "");
Expect(0, 43263, '\P{^Is_Script=	-Kayah-Li}', "");
Error('\p{Is_Sc= /a/KALI}');
Error('\P{Is_Sc= /a/KALI}');
Expect(1, 43311, '\p{Is_Sc=kali}', "");
Expect(0, 43311, '\p{^Is_Sc=kali}', "");
Expect(0, 43311, '\P{Is_Sc=kali}', "");
Expect(1, 43311, '\P{^Is_Sc=kali}', "");
Expect(0, 43263, '\p{Is_Sc=kali}', "");
Expect(1, 43263, '\p{^Is_Sc=kali}', "");
Expect(1, 43263, '\P{Is_Sc=kali}', "");
Expect(0, 43263, '\P{^Is_Sc=kali}', "");
Expect(1, 43311, '\p{Is_Sc=_-Kali}', "");
Expect(0, 43311, '\p{^Is_Sc=_-Kali}', "");
Expect(0, 43311, '\P{Is_Sc=_-Kali}', "");
Expect(1, 43311, '\P{^Is_Sc=_-Kali}', "");
Expect(0, 43263, '\p{Is_Sc=_-Kali}', "");
Expect(1, 43263, '\p{^Is_Sc=_-Kali}', "");
Expect(1, 43263, '\P{Is_Sc=_-Kali}', "");
Expect(0, 43263, '\P{^Is_Sc=_-Kali}', "");
Error('\p{Script=:=_THAI}');
Error('\P{Script=:=_THAI}');
Expect(1, 3642, '\p{Script=thai}', "");
Expect(0, 3642, '\p{^Script=thai}', "");
Expect(0, 3642, '\P{Script=thai}', "");
Expect(1, 3642, '\P{^Script=thai}', "");
Expect(0, 3584, '\p{Script=thai}', "");
Expect(1, 3584, '\p{^Script=thai}', "");
Expect(1, 3584, '\P{Script=thai}', "");
Expect(0, 3584, '\P{^Script=thai}', "");
Expect(1, 3642, '\p{Script=-Thai}', "");
Expect(0, 3642, '\p{^Script=-Thai}', "");
Expect(0, 3642, '\P{Script=-Thai}', "");
Expect(1, 3642, '\P{^Script=-Thai}', "");
Expect(0, 3584, '\p{Script=-Thai}', "");
Expect(1, 3584, '\p{^Script=-Thai}', "");
Expect(1, 3584, '\P{Script=-Thai}', "");
Expect(0, 3584, '\P{^Script=-Thai}', "");
Error('\p{Sc=/a/Thai}');
Error('\P{Sc=/a/Thai}');
Expect(1, 3642, '\p{Sc=thai}', "");
Expect(0, 3642, '\p{^Sc=thai}', "");
Expect(0, 3642, '\P{Sc=thai}', "");
Expect(1, 3642, '\P{^Sc=thai}', "");
Expect(0, 3584, '\p{Sc=thai}', "");
Expect(1, 3584, '\p{^Sc=thai}', "");
Expect(1, 3584, '\P{Sc=thai}', "");
Expect(0, 3584, '\P{^Sc=thai}', "");
Expect(1, 3642, '\p{Sc=__THAI}', "");
Expect(0, 3642, '\p{^Sc=__THAI}', "");
Expect(0, 3642, '\P{Sc=__THAI}', "");
Expect(1, 3642, '\P{^Sc=__THAI}', "");
Expect(0, 3584, '\p{Sc=__THAI}', "");
Expect(1, 3584, '\p{^Sc=__THAI}', "");
Expect(1, 3584, '\P{Sc=__THAI}', "");
Expect(0, 3584, '\P{^Sc=__THAI}', "");
Error('\p{Is_Script=:=Thai}');
Error('\P{Is_Script=:=Thai}');
Expect(1, 3642, '\p{Is_Script=thai}', "");
Expect(0, 3642, '\p{^Is_Script=thai}', "");
Expect(0, 3642, '\P{Is_Script=thai}', "");
Expect(1, 3642, '\P{^Is_Script=thai}', "");
Expect(0, 3584, '\p{Is_Script=thai}', "");
Expect(1, 3584, '\p{^Is_Script=thai}', "");
Expect(1, 3584, '\P{Is_Script=thai}', "");
Expect(0, 3584, '\P{^Is_Script=thai}', "");
Error('\p{Is_Sc:  :=thai}');
Error('\P{Is_Sc:  :=thai}');
Expect(1, 3642, '\p{Is_Sc=thai}', "");
Expect(0, 3642, '\p{^Is_Sc=thai}', "");
Expect(0, 3642, '\P{Is_Sc=thai}', "");
Expect(1, 3642, '\P{^Is_Sc=thai}', "");
Expect(0, 3584, '\p{Is_Sc=thai}', "");
Expect(1, 3584, '\p{^Is_Sc=thai}', "");
Expect(1, 3584, '\P{Is_Sc=thai}', "");
Expect(0, 3584, '\P{^Is_Sc=thai}', "");
Expect(1, 3642, '\p{Is_Sc=  thai}', "");
Expect(0, 3642, '\p{^Is_Sc=  thai}', "");
Expect(0, 3642, '\P{Is_Sc=  thai}', "");
Expect(1, 3642, '\P{^Is_Sc=  thai}', "");
Expect(0, 3584, '\p{Is_Sc=  thai}', "");
Expect(1, 3584, '\p{^Is_Sc=  thai}', "");
Expect(1, 3584, '\P{Is_Sc=  thai}', "");
Expect(0, 3584, '\P{^Is_Sc=  thai}', "");
Error('\p{Ideographic=:=Yes}');
Error('\P{Ideographic=:=Yes}');
Expect(1, 12295, '\p{Ideographic=yes}', "");
Expect(0, 12295, '\p{^Ideographic=yes}', "");
Expect(0, 12295, '\P{Ideographic=yes}', "");
Expect(1, 12295, '\P{^Ideographic=yes}', "");
Expect(0, 12293, '\p{Ideographic=yes}', "");
Expect(1, 12293, '\p{^Ideographic=yes}', "");
Expect(1, 12293, '\P{Ideographic=yes}', "");
Expect(0, 12293, '\P{^Ideographic=yes}', "");
Expect(1, 12295, '\p{Ideographic=_	YES}', "");
Expect(0, 12295, '\p{^Ideographic=_	YES}', "");
Expect(0, 12295, '\P{Ideographic=_	YES}', "");
Expect(1, 12295, '\P{^Ideographic=_	YES}', "");
Expect(0, 12293, '\p{Ideographic=_	YES}', "");
Expect(1, 12293, '\p{^Ideographic=_	YES}', "");
Expect(1, 12293, '\P{Ideographic=_	YES}', "");
Expect(0, 12293, '\P{^Ideographic=_	YES}', "");
Error('\p{Ideo=Y:=}');
Error('\P{Ideo=Y:=}');
Expect(1, 12295, '\p{Ideo=y}', "");
Expect(0, 12295, '\p{^Ideo=y}', "");
Expect(0, 12295, '\P{Ideo=y}', "");
Expect(1, 12295, '\P{^Ideo=y}', "");
Expect(0, 12293, '\p{Ideo=y}', "");
Expect(1, 12293, '\p{^Ideo=y}', "");
Expect(1, 12293, '\P{Ideo=y}', "");
Expect(0, 12293, '\P{^Ideo=y}', "");
Expect(1, 12295, '\p{Ideo=	Y}', "");
Expect(0, 12295, '\p{^Ideo=	Y}', "");
Expect(0, 12295, '\P{Ideo=	Y}', "");
Expect(1, 12295, '\P{^Ideo=	Y}', "");
Expect(0, 12293, '\p{Ideo=	Y}', "");
Expect(1, 12293, '\p{^Ideo=	Y}', "");
Expect(1, 12293, '\P{Ideo=	Y}', "");
Expect(0, 12293, '\P{^Ideo=	Y}', "");
Error('\p{Is_Ideographic= T/a/}');
Error('\P{Is_Ideographic= T/a/}');
Expect(1, 12295, '\p{Is_Ideographic=t}', "");
Expect(0, 12295, '\p{^Is_Ideographic=t}', "");
Expect(0, 12295, '\P{Is_Ideographic=t}', "");
Expect(1, 12295, '\P{^Is_Ideographic=t}', "");
Expect(0, 12293, '\p{Is_Ideographic=t}', "");
Expect(1, 12293, '\p{^Is_Ideographic=t}', "");
Expect(1, 12293, '\P{Is_Ideographic=t}', "");
Expect(0, 12293, '\P{^Is_Ideographic=t}', "");
Expect(1, 12295, '\p{Is_Ideographic=__T}', "");
Expect(0, 12295, '\p{^Is_Ideographic=__T}', "");
Expect(0, 12295, '\P{Is_Ideographic=__T}', "");
Expect(1, 12295, '\P{^Is_Ideographic=__T}', "");
Expect(0, 12293, '\p{Is_Ideographic=__T}', "");
Expect(1, 12293, '\p{^Is_Ideographic=__T}', "");
Expect(1, 12293, '\P{Is_Ideographic=__T}', "");
Expect(0, 12293, '\P{^Is_Ideographic=__T}', "");
Error('\p{Is_Ideo=-_True:=}');
Error('\P{Is_Ideo=-_True:=}');
Expect(1, 12295, '\p{Is_Ideo=true}', "");
Expect(0, 12295, '\p{^Is_Ideo=true}', "");
Expect(0, 12295, '\P{Is_Ideo=true}', "");
Expect(1, 12295, '\P{^Is_Ideo=true}', "");
Expect(0, 12293, '\p{Is_Ideo=true}', "");
Expect(1, 12293, '\p{^Is_Ideo=true}', "");
Expect(1, 12293, '\P{Is_Ideo=true}', "");
Expect(0, 12293, '\P{^Is_Ideo=true}', "");
Expect(1, 12295, '\p{Is_Ideo:   	True}', "");
Expect(0, 12295, '\p{^Is_Ideo:   	True}', "");
Expect(0, 12295, '\P{Is_Ideo:   	True}', "");
Expect(1, 12295, '\P{^Is_Ideo:   	True}', "");
Expect(0, 12293, '\p{Is_Ideo:   	True}', "");
Expect(1, 12293, '\p{^Is_Ideo:   	True}', "");
Expect(1, 12293, '\P{Is_Ideo:   	True}', "");
Expect(0, 12293, '\P{^Is_Ideo:   	True}', "");
Error('\p{Ideographic=_NO/a/}');
Error('\P{Ideographic=_NO/a/}');
Expect(1, 12293, '\p{Ideographic=no}', "");
Expect(0, 12293, '\p{^Ideographic=no}', "");
Expect(0, 12293, '\P{Ideographic=no}', "");
Expect(1, 12293, '\P{^Ideographic=no}', "");
Expect(0, 12295, '\p{Ideographic=no}', "");
Expect(1, 12295, '\p{^Ideographic=no}', "");
Expect(1, 12295, '\P{Ideographic=no}', "");
Expect(0, 12295, '\P{^Ideographic=no}', "");
Expect(1, 12293, '\p{Ideographic= -No}', "");
Expect(0, 12293, '\p{^Ideographic= -No}', "");
Expect(0, 12293, '\P{Ideographic= -No}', "");
Expect(1, 12293, '\P{^Ideographic= -No}', "");
Expect(0, 12295, '\p{Ideographic= -No}', "");
Expect(1, 12295, '\p{^Ideographic= -No}', "");
Expect(1, 12295, '\P{Ideographic= -No}', "");
Expect(0, 12295, '\P{^Ideographic= -No}', "");
Error('\p{Ideo=/a/_	N}');
Error('\P{Ideo=/a/_	N}');
Expect(1, 12293, '\p{Ideo=n}', "");
Expect(0, 12293, '\p{^Ideo=n}', "");
Expect(0, 12293, '\P{Ideo=n}', "");
Expect(1, 12293, '\P{^Ideo=n}', "");
Expect(0, 12295, '\p{Ideo=n}', "");
Expect(1, 12295, '\p{^Ideo=n}', "");
Expect(1, 12295, '\P{Ideo=n}', "");
Expect(0, 12295, '\P{^Ideo=n}', "");
Expect(1, 12293, '\p{Ideo=_ N}', "");
Expect(0, 12293, '\p{^Ideo=_ N}', "");
Expect(0, 12293, '\P{Ideo=_ N}', "");
Expect(1, 12293, '\P{^Ideo=_ N}', "");
Expect(0, 12295, '\p{Ideo=_ N}', "");
Expect(1, 12295, '\p{^Ideo=_ N}', "");
Expect(1, 12295, '\P{Ideo=_ N}', "");
Expect(0, 12295, '\P{^Ideo=_ N}', "");
Error('\p{Is_Ideographic= /a/f}');
Error('\P{Is_Ideographic= /a/f}');
Expect(1, 12293, '\p{Is_Ideographic=f}', "");
Expect(0, 12293, '\p{^Is_Ideographic=f}', "");
Expect(0, 12293, '\P{Is_Ideographic=f}', "");
Expect(1, 12293, '\P{^Is_Ideographic=f}', "");
Expect(0, 12295, '\p{Is_Ideographic=f}', "");
Expect(1, 12295, '\p{^Is_Ideographic=f}', "");
Expect(1, 12295, '\P{Is_Ideographic=f}', "");
Expect(0, 12295, '\P{^Is_Ideographic=f}', "");
Expect(1, 12293, '\p{Is_Ideographic=F}', "");
Expect(0, 12293, '\p{^Is_Ideographic=F}', "");
Expect(0, 12293, '\P{Is_Ideographic=F}', "");
Expect(1, 12293, '\P{^Is_Ideographic=F}', "");
Expect(0, 12295, '\p{Is_Ideographic=F}', "");
Expect(1, 12295, '\p{^Is_Ideographic=F}', "");
Expect(1, 12295, '\P{Is_Ideographic=F}', "");
Expect(0, 12295, '\P{^Is_Ideographic=F}', "");
Error('\p{Is_Ideo=:=-_FALSE}');
Error('\P{Is_Ideo=:=-_FALSE}');
Expect(1, 12293, '\p{Is_Ideo=false}', "");
Expect(0, 12293, '\p{^Is_Ideo=false}', "");
Expect(0, 12293, '\P{Is_Ideo=false}', "");
Expect(1, 12293, '\P{^Is_Ideo=false}', "");
Expect(0, 12295, '\p{Is_Ideo=false}', "");
Expect(1, 12295, '\p{^Is_Ideo=false}', "");
Expect(1, 12295, '\P{Is_Ideo=false}', "");
Expect(0, 12295, '\P{^Is_Ideo=false}', "");
Expect(1, 12293, '\p{Is_Ideo:   -False}', "");
Expect(0, 12293, '\p{^Is_Ideo:   -False}', "");
Expect(0, 12293, '\P{Is_Ideo:   -False}', "");
Expect(1, 12293, '\P{^Is_Ideo:   -False}', "");
Expect(0, 12295, '\p{Is_Ideo:   -False}', "");
Expect(1, 12295, '\p{^Is_Ideo:   -False}', "");
Expect(1, 12295, '\P{Is_Ideo:   -False}', "");
Expect(0, 12295, '\P{^Is_Ideo:   -False}', "");
Error('\p{Other_Grapheme_Extend=:=	YES}');
Error('\P{Other_Grapheme_Extend=:=	YES}');
Expect(1, 2494, '\p{Other_Grapheme_Extend: yes}', 'deprecated');
Expect(0, 2494, '\p{^Other_Grapheme_Extend: yes}', 'deprecated');
Expect(0, 2494, '\P{Other_Grapheme_Extend: yes}', 'deprecated');
Expect(1, 2494, '\P{^Other_Grapheme_Extend: yes}', 'deprecated');
Expect(0, 2493, '\p{Other_Grapheme_Extend: yes}', 'deprecated');
Expect(1, 2493, '\p{^Other_Grapheme_Extend: yes}', 'deprecated');
Expect(1, 2493, '\P{Other_Grapheme_Extend: yes}', 'deprecated');
Expect(0, 2493, '\P{^Other_Grapheme_Extend: yes}', 'deprecated');
Expect(1, 2494, '\p{Other_Grapheme_Extend:	 _Yes}', 'deprecated');
Expect(0, 2494, '\p{^Other_Grapheme_Extend:	 _Yes}', 'deprecated');
Expect(0, 2494, '\P{Other_Grapheme_Extend:	 _Yes}', 'deprecated');
Expect(1, 2494, '\P{^Other_Grapheme_Extend:	 _Yes}', 'deprecated');
Expect(0, 2493, '\p{Other_Grapheme_Extend:	 _Yes}', 'deprecated');
Expect(1, 2493, '\p{^Other_Grapheme_Extend:	 _Yes}', 'deprecated');
Expect(1, 2493, '\P{Other_Grapheme_Extend:	 _Yes}', 'deprecated');
Expect(0, 2493, '\P{^Other_Grapheme_Extend:	 _Yes}', 'deprecated');
Error('\p{OGr_Ext=:=	Y}');
Error('\P{OGr_Ext=:=	Y}');
Expect(1, 2494, '\p{OGr_Ext=y}', 'deprecated');
Expect(0, 2494, '\p{^OGr_Ext=y}', 'deprecated');
Expect(0, 2494, '\P{OGr_Ext=y}', 'deprecated');
Expect(1, 2494, '\P{^OGr_Ext=y}', 'deprecated');
Expect(0, 2493, '\p{OGr_Ext=y}', 'deprecated');
Expect(1, 2493, '\p{^OGr_Ext=y}', 'deprecated');
Expect(1, 2493, '\P{OGr_Ext=y}', 'deprecated');
Expect(0, 2493, '\P{^OGr_Ext=y}', 'deprecated');
Expect(1, 2494, '\p{OGr_Ext=_Y}', 'deprecated');
Expect(0, 2494, '\p{^OGr_Ext=_Y}', 'deprecated');
Expect(0, 2494, '\P{OGr_Ext=_Y}', 'deprecated');
Expect(1, 2494, '\P{^OGr_Ext=_Y}', 'deprecated');
Expect(0, 2493, '\p{OGr_Ext=_Y}', 'deprecated');
Expect(1, 2493, '\p{^OGr_Ext=_Y}', 'deprecated');
Expect(1, 2493, '\P{OGr_Ext=_Y}', 'deprecated');
Expect(0, 2493, '\P{^OGr_Ext=_Y}', 'deprecated');
Error('\p{Is_Other_Grapheme_Extend: _:=T}');
Error('\P{Is_Other_Grapheme_Extend: _:=T}');
Expect(1, 2494, '\p{Is_Other_Grapheme_Extend:t}', 'deprecated');
Expect(0, 2494, '\p{^Is_Other_Grapheme_Extend:t}', 'deprecated');
Expect(0, 2494, '\P{Is_Other_Grapheme_Extend:t}', 'deprecated');
Expect(1, 2494, '\P{^Is_Other_Grapheme_Extend:t}', 'deprecated');
Expect(0, 2493, '\p{Is_Other_Grapheme_Extend:t}', 'deprecated');
Expect(1, 2493, '\p{^Is_Other_Grapheme_Extend:t}', 'deprecated');
Expect(1, 2493, '\P{Is_Other_Grapheme_Extend:t}', 'deprecated');
Expect(0, 2493, '\P{^Is_Other_Grapheme_Extend:t}', 'deprecated');
Expect(1, 2494, '\p{Is_Other_Grapheme_Extend=	-T}', 'deprecated');
Expect(0, 2494, '\p{^Is_Other_Grapheme_Extend=	-T}', 'deprecated');
Expect(0, 2494, '\P{Is_Other_Grapheme_Extend=	-T}', 'deprecated');
Expect(1, 2494, '\P{^Is_Other_Grapheme_Extend=	-T}', 'deprecated');
Expect(0, 2493, '\p{Is_Other_Grapheme_Extend=	-T}', 'deprecated');
Expect(1, 2493, '\p{^Is_Other_Grapheme_Extend=	-T}', 'deprecated');
Expect(1, 2493, '\P{Is_Other_Grapheme_Extend=	-T}', 'deprecated');
Expect(0, 2493, '\P{^Is_Other_Grapheme_Extend=	-T}', 'deprecated');
Error('\p{Is_OGr_Ext=-TRUE/a/}');
Error('\P{Is_OGr_Ext=-TRUE/a/}');
Expect(1, 2494, '\p{Is_OGr_Ext=true}', 'deprecated');
Expect(0, 2494, '\p{^Is_OGr_Ext=true}', 'deprecated');
Expect(0, 2494, '\P{Is_OGr_Ext=true}', 'deprecated');
Expect(1, 2494, '\P{^Is_OGr_Ext=true}', 'deprecated');
Expect(0, 2493, '\p{Is_OGr_Ext=true}', 'deprecated');
Expect(1, 2493, '\p{^Is_OGr_Ext=true}', 'deprecated');
Expect(1, 2493, '\P{Is_OGr_Ext=true}', 'deprecated');
Expect(0, 2493, '\P{^Is_OGr_Ext=true}', 'deprecated');
Error('\p{Other_Grapheme_Extend=- no/a/}');
Error('\P{Other_Grapheme_Extend=- no/a/}');
Expect(1, 2493, '\p{Other_Grapheme_Extend=no}', 'deprecated');
Expect(0, 2493, '\p{^Other_Grapheme_Extend=no}', 'deprecated');
Expect(0, 2493, '\P{Other_Grapheme_Extend=no}', 'deprecated');
Expect(1, 2493, '\P{^Other_Grapheme_Extend=no}', 'deprecated');
Expect(0, 2494, '\p{Other_Grapheme_Extend=no}', 'deprecated');
Expect(1, 2494, '\p{^Other_Grapheme_Extend=no}', 'deprecated');
Expect(1, 2494, '\P{Other_Grapheme_Extend=no}', 'deprecated');
Expect(0, 2494, '\P{^Other_Grapheme_Extend=no}', 'deprecated');
Expect(1, 2493, '\p{Other_Grapheme_Extend:-_NO}', 'deprecated');
Expect(0, 2493, '\p{^Other_Grapheme_Extend:-_NO}', 'deprecated');
Expect(0, 2493, '\P{Other_Grapheme_Extend:-_NO}', 'deprecated');
Expect(1, 2493, '\P{^Other_Grapheme_Extend:-_NO}', 'deprecated');
Expect(0, 2494, '\p{Other_Grapheme_Extend:-_NO}', 'deprecated');
Expect(1, 2494, '\p{^Other_Grapheme_Extend:-_NO}', 'deprecated');
Expect(1, 2494, '\P{Other_Grapheme_Extend:-_NO}', 'deprecated');
Expect(0, 2494, '\P{^Other_Grapheme_Extend:-_NO}', 'deprecated');
Error('\p{OGr_Ext: n/a/}');
Error('\P{OGr_Ext: n/a/}');
Expect(1, 2493, '\p{OGr_Ext=n}', 'deprecated');
Expect(0, 2493, '\p{^OGr_Ext=n}', 'deprecated');
Expect(0, 2493, '\P{OGr_Ext=n}', 'deprecated');
Expect(1, 2493, '\P{^OGr_Ext=n}', 'deprecated');
Expect(0, 2494, '\p{OGr_Ext=n}', 'deprecated');
Expect(1, 2494, '\p{^OGr_Ext=n}', 'deprecated');
Expect(1, 2494, '\P{OGr_Ext=n}', 'deprecated');
Expect(0, 2494, '\P{^OGr_Ext=n}', 'deprecated');
Expect(1, 2493, '\p{OGr_Ext=_n}', 'deprecated');
Expect(0, 2493, '\p{^OGr_Ext=_n}', 'deprecated');
Expect(0, 2493, '\P{OGr_Ext=_n}', 'deprecated');
Expect(1, 2493, '\P{^OGr_Ext=_n}', 'deprecated');
Expect(0, 2494, '\p{OGr_Ext=_n}', 'deprecated');
Expect(1, 2494, '\p{^OGr_Ext=_n}', 'deprecated');
Expect(1, 2494, '\P{OGr_Ext=_n}', 'deprecated');
Expect(0, 2494, '\P{^OGr_Ext=_n}', 'deprecated');
Error('\p{Is_Other_Grapheme_Extend=/a/F}');
Error('\P{Is_Other_Grapheme_Extend=/a/F}');
Expect(1, 2493, '\p{Is_Other_Grapheme_Extend=f}', 'deprecated');
Expect(0, 2493, '\p{^Is_Other_Grapheme_Extend=f}', 'deprecated');
Expect(0, 2493, '\P{Is_Other_Grapheme_Extend=f}', 'deprecated');
Expect(1, 2493, '\P{^Is_Other_Grapheme_Extend=f}', 'deprecated');
Expect(0, 2494, '\p{Is_Other_Grapheme_Extend=f}', 'deprecated');
Expect(1, 2494, '\p{^Is_Other_Grapheme_Extend=f}', 'deprecated');
Expect(1, 2494, '\P{Is_Other_Grapheme_Extend=f}', 'deprecated');
Expect(0, 2494, '\P{^Is_Other_Grapheme_Extend=f}', 'deprecated');
Expect(1, 2493, '\p{Is_Other_Grapheme_Extend:	_F}', 'deprecated');
Expect(0, 2493, '\p{^Is_Other_Grapheme_Extend:	_F}', 'deprecated');
Expect(0, 2493, '\P{Is_Other_Grapheme_Extend:	_F}', 'deprecated');
Expect(1, 2493, '\P{^Is_Other_Grapheme_Extend:	_F}', 'deprecated');
Expect(0, 2494, '\p{Is_Other_Grapheme_Extend:	_F}', 'deprecated');
Expect(1, 2494, '\p{^Is_Other_Grapheme_Extend:	_F}', 'deprecated');
Expect(1, 2494, '\P{Is_Other_Grapheme_Extend:	_F}', 'deprecated');
Expect(0, 2494, '\P{^Is_Other_Grapheme_Extend:	_F}', 'deprecated');
Error('\p{Is_OGr_Ext:	:=False}');
Error('\P{Is_OGr_Ext:	:=False}');
Expect(1, 2493, '\p{Is_OGr_Ext=false}', 'deprecated');
Expect(0, 2493, '\p{^Is_OGr_Ext=false}', 'deprecated');
Expect(0, 2493, '\P{Is_OGr_Ext=false}', 'deprecated');
Expect(1, 2493, '\P{^Is_OGr_Ext=false}', 'deprecated');
Expect(0, 2494, '\p{Is_OGr_Ext=false}', 'deprecated');
Expect(1, 2494, '\p{^Is_OGr_Ext=false}', 'deprecated');
Expect(1, 2494, '\P{Is_OGr_Ext=false}', 'deprecated');
Expect(0, 2494, '\P{^Is_OGr_Ext=false}', 'deprecated');
Expect(1, 2493, '\p{Is_OGr_Ext=	-FALSE}', 'deprecated');
Expect(0, 2493, '\p{^Is_OGr_Ext=	-FALSE}', 'deprecated');
Expect(0, 2493, '\P{Is_OGr_Ext=	-FALSE}', 'deprecated');
Expect(1, 2493, '\P{^Is_OGr_Ext=	-FALSE}', 'deprecated');
Expect(0, 2494, '\p{Is_OGr_Ext=	-FALSE}', 'deprecated');
Expect(1, 2494, '\p{^Is_OGr_Ext=	-FALSE}', 'deprecated');
Expect(1, 2494, '\P{Is_OGr_Ext=	-FALSE}', 'deprecated');
Expect(0, 2494, '\P{^Is_OGr_Ext=	-FALSE}', 'deprecated');
Error('\p{Grapheme_Link=Yes}');
Error('\P{Grapheme_Link=Yes}');
Error('\p{Gr_Link=Y}');
Error('\P{Gr_Link=Y}');
Error('\p{Is_Grapheme_Link=T}');
Error('\P{Is_Grapheme_Link=T}');
Error('\p{Is_Gr_Link=True}');
Error('\P{Is_Gr_Link=True}');
Error('\p{Grapheme_Link=No}');
Error('\P{Grapheme_Link=No}');
Error('\p{Gr_Link:N}');
Error('\P{Gr_Link:N}');
Error('\p{Is_Grapheme_Link=F}');
Error('\P{Is_Grapheme_Link=F}');
Error('\p{Is_Gr_Link=False}');
Error('\P{Is_Gr_Link=False}');
Error('\p{Bidi_Control=/a/__Yes}');
Error('\P{Bidi_Control=/a/__Yes}');
Expect(1, 8207, '\p{Bidi_Control=yes}', "");
Expect(0, 8207, '\p{^Bidi_Control=yes}', "");
Expect(0, 8207, '\P{Bidi_Control=yes}', "");
Expect(1, 8207, '\P{^Bidi_Control=yes}', "");
Expect(0, 8205, '\p{Bidi_Control=yes}', "");
Expect(1, 8205, '\p{^Bidi_Control=yes}', "");
Expect(1, 8205, '\P{Bidi_Control=yes}', "");
Expect(0, 8205, '\P{^Bidi_Control=yes}', "");
Expect(1, 8207, '\p{Bidi_Control= -Yes}', "");
Expect(0, 8207, '\p{^Bidi_Control= -Yes}', "");
Expect(0, 8207, '\P{Bidi_Control= -Yes}', "");
Expect(1, 8207, '\P{^Bidi_Control= -Yes}', "");
Expect(0, 8205, '\p{Bidi_Control= -Yes}', "");
Expect(1, 8205, '\p{^Bidi_Control= -Yes}', "");
Expect(1, 8205, '\P{Bidi_Control= -Yes}', "");
Expect(0, 8205, '\P{^Bidi_Control= -Yes}', "");
Error('\p{Bidi_C=-_Y:=}');
Error('\P{Bidi_C=-_Y:=}');
Expect(1, 8207, '\p{Bidi_C=y}', "");
Expect(0, 8207, '\p{^Bidi_C=y}', "");
Expect(0, 8207, '\P{Bidi_C=y}', "");
Expect(1, 8207, '\P{^Bidi_C=y}', "");
Expect(0, 8205, '\p{Bidi_C=y}', "");
Expect(1, 8205, '\p{^Bidi_C=y}', "");
Expect(1, 8205, '\P{Bidi_C=y}', "");
Expect(0, 8205, '\P{^Bidi_C=y}', "");
Expect(1, 8207, '\p{Bidi_C= _Y}', "");
Expect(0, 8207, '\p{^Bidi_C= _Y}', "");
Expect(0, 8207, '\P{Bidi_C= _Y}', "");
Expect(1, 8207, '\P{^Bidi_C= _Y}', "");
Expect(0, 8205, '\p{Bidi_C= _Y}', "");
Expect(1, 8205, '\p{^Bidi_C= _Y}', "");
Expect(1, 8205, '\P{Bidi_C= _Y}', "");
Expect(0, 8205, '\P{^Bidi_C= _Y}', "");
Error('\p{Is_Bidi_Control=_T:=}');
Error('\P{Is_Bidi_Control=_T:=}');
Expect(1, 8207, '\p{Is_Bidi_Control=t}', "");
Expect(0, 8207, '\p{^Is_Bidi_Control=t}', "");
Expect(0, 8207, '\P{Is_Bidi_Control=t}', "");
Expect(1, 8207, '\P{^Is_Bidi_Control=t}', "");
Expect(0, 8205, '\p{Is_Bidi_Control=t}', "");
Expect(1, 8205, '\p{^Is_Bidi_Control=t}', "");
Expect(1, 8205, '\P{Is_Bidi_Control=t}', "");
Expect(0, 8205, '\P{^Is_Bidi_Control=t}', "");
Expect(1, 8207, '\p{Is_Bidi_Control= T}', "");
Expect(0, 8207, '\p{^Is_Bidi_Control= T}', "");
Expect(0, 8207, '\P{Is_Bidi_Control= T}', "");
Expect(1, 8207, '\P{^Is_Bidi_Control= T}', "");
Expect(0, 8205, '\p{Is_Bidi_Control= T}', "");
Expect(1, 8205, '\p{^Is_Bidi_Control= T}', "");
Expect(1, 8205, '\P{Is_Bidi_Control= T}', "");
Expect(0, 8205, '\P{^Is_Bidi_Control= T}', "");
Error('\p{Is_Bidi_C=/a/_	True}');
Error('\P{Is_Bidi_C=/a/_	True}');
Expect(1, 8207, '\p{Is_Bidi_C=true}', "");
Expect(0, 8207, '\p{^Is_Bidi_C=true}', "");
Expect(0, 8207, '\P{Is_Bidi_C=true}', "");
Expect(1, 8207, '\P{^Is_Bidi_C=true}', "");
Expect(0, 8205, '\p{Is_Bidi_C=true}', "");
Expect(1, 8205, '\p{^Is_Bidi_C=true}', "");
Expect(1, 8205, '\P{Is_Bidi_C=true}', "");
Expect(0, 8205, '\P{^Is_Bidi_C=true}', "");
Expect(1, 8207, '\p{Is_Bidi_C=		TRUE}', "");
Expect(0, 8207, '\p{^Is_Bidi_C=		TRUE}', "");
Expect(0, 8207, '\P{Is_Bidi_C=		TRUE}', "");
Expect(1, 8207, '\P{^Is_Bidi_C=		TRUE}', "");
Expect(0, 8205, '\p{Is_Bidi_C=		TRUE}', "");
Expect(1, 8205, '\p{^Is_Bidi_C=		TRUE}', "");
Expect(1, 8205, '\P{Is_Bidi_C=		TRUE}', "");
Expect(0, 8205, '\P{^Is_Bidi_C=		TRUE}', "");
Error('\p{Bidi_Control=_:=No}');
Error('\P{Bidi_Control=_:=No}');
Expect(1, 8205, '\p{Bidi_Control=no}', "");
Expect(0, 8205, '\p{^Bidi_Control=no}', "");
Expect(0, 8205, '\P{Bidi_Control=no}', "");
Expect(1, 8205, '\P{^Bidi_Control=no}', "");
Expect(0, 8207, '\p{Bidi_Control=no}', "");
Expect(1, 8207, '\p{^Bidi_Control=no}', "");
Expect(1, 8207, '\P{Bidi_Control=no}', "");
Expect(0, 8207, '\P{^Bidi_Control=no}', "");
Expect(1, 8205, '\p{Bidi_Control= NO}', "");
Expect(0, 8205, '\p{^Bidi_Control= NO}', "");
Expect(0, 8205, '\P{Bidi_Control= NO}', "");
Expect(1, 8205, '\P{^Bidi_Control= NO}', "");
Expect(0, 8207, '\p{Bidi_Control= NO}', "");
Expect(1, 8207, '\p{^Bidi_Control= NO}', "");
Expect(1, 8207, '\P{Bidi_Control= NO}', "");
Expect(0, 8207, '\P{^Bidi_Control= NO}', "");
Error('\p{Bidi_C=_ n/a/}');
Error('\P{Bidi_C=_ n/a/}');
Expect(1, 8205, '\p{Bidi_C=n}', "");
Expect(0, 8205, '\p{^Bidi_C=n}', "");
Expect(0, 8205, '\P{Bidi_C=n}', "");
Expect(1, 8205, '\P{^Bidi_C=n}', "");
Expect(0, 8207, '\p{Bidi_C=n}', "");
Expect(1, 8207, '\p{^Bidi_C=n}', "");
Expect(1, 8207, '\P{Bidi_C=n}', "");
Expect(0, 8207, '\P{^Bidi_C=n}', "");
Expect(1, 8205, '\p{Bidi_C=--n}', "");
Expect(0, 8205, '\p{^Bidi_C=--n}', "");
Expect(0, 8205, '\P{Bidi_C=--n}', "");
Expect(1, 8205, '\P{^Bidi_C=--n}', "");
Expect(0, 8207, '\p{Bidi_C=--n}', "");
Expect(1, 8207, '\p{^Bidi_C=--n}', "");
Expect(1, 8207, '\P{Bidi_C=--n}', "");
Expect(0, 8207, '\P{^Bidi_C=--n}', "");
Error('\p{Is_Bidi_Control=/a/-F}');
Error('\P{Is_Bidi_Control=/a/-F}');
Expect(1, 8205, '\p{Is_Bidi_Control=f}', "");
Expect(0, 8205, '\p{^Is_Bidi_Control=f}', "");
Expect(0, 8205, '\P{Is_Bidi_Control=f}', "");
Expect(1, 8205, '\P{^Is_Bidi_Control=f}', "");
Expect(0, 8207, '\p{Is_Bidi_Control=f}', "");
Expect(1, 8207, '\p{^Is_Bidi_Control=f}', "");
Expect(1, 8207, '\P{Is_Bidi_Control=f}', "");
Expect(0, 8207, '\P{^Is_Bidi_Control=f}', "");
Expect(1, 8205, '\p{Is_Bidi_Control: F}', "");
Expect(0, 8205, '\p{^Is_Bidi_Control: F}', "");
Expect(0, 8205, '\P{Is_Bidi_Control: F}', "");
Expect(1, 8205, '\P{^Is_Bidi_Control: F}', "");
Expect(0, 8207, '\p{Is_Bidi_Control: F}', "");
Expect(1, 8207, '\p{^Is_Bidi_Control: F}', "");
Expect(1, 8207, '\P{Is_Bidi_Control: F}', "");
Expect(0, 8207, '\P{^Is_Bidi_Control: F}', "");
Error('\p{Is_Bidi_C=:= _False}');
Error('\P{Is_Bidi_C=:= _False}');
Expect(1, 8205, '\p{Is_Bidi_C=false}', "");
Expect(0, 8205, '\p{^Is_Bidi_C=false}', "");
Expect(0, 8205, '\P{Is_Bidi_C=false}', "");
Expect(1, 8205, '\P{^Is_Bidi_C=false}', "");
Expect(0, 8207, '\p{Is_Bidi_C=false}', "");
Expect(1, 8207, '\p{^Is_Bidi_C=false}', "");
Expect(1, 8207, '\P{Is_Bidi_C=false}', "");
Expect(0, 8207, '\P{^Is_Bidi_C=false}', "");
Expect(1, 8205, '\p{Is_Bidi_C=	-False}', "");
Expect(0, 8205, '\p{^Is_Bidi_C=	-False}', "");
Expect(0, 8205, '\P{Is_Bidi_C=	-False}', "");
Expect(1, 8205, '\P{^Is_Bidi_C=	-False}', "");
Expect(0, 8207, '\p{Is_Bidi_C=	-False}', "");
Expect(1, 8207, '\p{^Is_Bidi_C=	-False}', "");
Expect(1, 8207, '\P{Is_Bidi_C=	-False}', "");
Expect(0, 8207, '\P{^Is_Bidi_C=	-False}', "");
Error('\p{ID_Continue=_/a/yes}');
Error('\P{ID_Continue=_/a/yes}');
Expect(1, 57, '\p{ID_Continue=yes}', "");
Expect(0, 57, '\p{^ID_Continue=yes}', "");
Expect(0, 57, '\P{ID_Continue=yes}', "");
Expect(1, 57, '\P{^ID_Continue=yes}', "");
Expect(0, 47, '\p{ID_Continue=yes}', "");
Expect(1, 47, '\p{^ID_Continue=yes}', "");
Expect(1, 47, '\P{ID_Continue=yes}', "");
Expect(0, 47, '\P{^ID_Continue=yes}', "");
Expect(1, 57, '\p{ID_Continue=	 Yes}', "");
Expect(0, 57, '\p{^ID_Continue=	 Yes}', "");
Expect(0, 57, '\P{ID_Continue=	 Yes}', "");
Expect(1, 57, '\P{^ID_Continue=	 Yes}', "");
Expect(0, 47, '\p{ID_Continue=	 Yes}', "");
Expect(1, 47, '\p{^ID_Continue=	 Yes}', "");
Expect(1, 47, '\P{ID_Continue=	 Yes}', "");
Expect(0, 47, '\P{^ID_Continue=	 Yes}', "");
Error('\p{IDC=	y:=}');
Error('\P{IDC=	y:=}');
Expect(1, 57, '\p{IDC=y}', "");
Expect(0, 57, '\p{^IDC=y}', "");
Expect(0, 57, '\P{IDC=y}', "");
Expect(1, 57, '\P{^IDC=y}', "");
Expect(0, 47, '\p{IDC=y}', "");
Expect(1, 47, '\p{^IDC=y}', "");
Expect(1, 47, '\P{IDC=y}', "");
Expect(0, 47, '\P{^IDC=y}', "");
Expect(1, 57, '\p{IDC:    -Y}', "");
Expect(0, 57, '\p{^IDC:    -Y}', "");
Expect(0, 57, '\P{IDC:    -Y}', "");
Expect(1, 57, '\P{^IDC:    -Y}', "");
Expect(0, 47, '\p{IDC:    -Y}', "");
Expect(1, 47, '\p{^IDC:    -Y}', "");
Expect(1, 47, '\P{IDC:    -Y}', "");
Expect(0, 47, '\P{^IDC:    -Y}', "");
Error('\p{Is_ID_Continue= _t:=}');
Error('\P{Is_ID_Continue= _t:=}');
Expect(1, 57, '\p{Is_ID_Continue=t}', "");
Expect(0, 57, '\p{^Is_ID_Continue=t}', "");
Expect(0, 57, '\P{Is_ID_Continue=t}', "");
Expect(1, 57, '\P{^Is_ID_Continue=t}', "");
Expect(0, 47, '\p{Is_ID_Continue=t}', "");
Expect(1, 47, '\p{^Is_ID_Continue=t}', "");
Expect(1, 47, '\P{Is_ID_Continue=t}', "");
Expect(0, 47, '\P{^Is_ID_Continue=t}', "");
Expect(1, 57, '\p{Is_ID_Continue=_T}', "");
Expect(0, 57, '\p{^Is_ID_Continue=_T}', "");
Expect(0, 57, '\P{Is_ID_Continue=_T}', "");
Expect(1, 57, '\P{^Is_ID_Continue=_T}', "");
Expect(0, 47, '\p{Is_ID_Continue=_T}', "");
Expect(1, 47, '\p{^Is_ID_Continue=_T}', "");
Expect(1, 47, '\P{Is_ID_Continue=_T}', "");
Expect(0, 47, '\P{^Is_ID_Continue=_T}', "");
Error('\p{Is_IDC=-:=True}');
Error('\P{Is_IDC=-:=True}');
Expect(1, 57, '\p{Is_IDC=true}', "");
Expect(0, 57, '\p{^Is_IDC=true}', "");
Expect(0, 57, '\P{Is_IDC=true}', "");
Expect(1, 57, '\P{^Is_IDC=true}', "");
Expect(0, 47, '\p{Is_IDC=true}', "");
Expect(1, 47, '\p{^Is_IDC=true}', "");
Expect(1, 47, '\P{Is_IDC=true}', "");
Expect(0, 47, '\P{^Is_IDC=true}', "");
Expect(1, 57, '\p{Is_IDC=_ True}', "");
Expect(0, 57, '\p{^Is_IDC=_ True}', "");
Expect(0, 57, '\P{Is_IDC=_ True}', "");
Expect(1, 57, '\P{^Is_IDC=_ True}', "");
Expect(0, 47, '\p{Is_IDC=_ True}', "");
Expect(1, 47, '\p{^Is_IDC=_ True}', "");
Expect(1, 47, '\P{Is_IDC=_ True}', "");
Expect(0, 47, '\P{^Is_IDC=_ True}', "");
Error('\p{ID_Continue=/a/-_no}');
Error('\P{ID_Continue=/a/-_no}');
Expect(1, 47, '\p{ID_Continue=no}', "");
Expect(0, 47, '\p{^ID_Continue=no}', "");
Expect(0, 47, '\P{ID_Continue=no}', "");
Expect(1, 47, '\P{^ID_Continue=no}', "");
Expect(0, 57, '\p{ID_Continue=no}', "");
Expect(1, 57, '\p{^ID_Continue=no}', "");
Expect(1, 57, '\P{ID_Continue=no}', "");
Expect(0, 57, '\P{^ID_Continue=no}', "");
Expect(1, 47, '\p{ID_Continue= No}', "");
Expect(0, 47, '\p{^ID_Continue= No}', "");
Expect(0, 47, '\P{ID_Continue= No}', "");
Expect(1, 47, '\P{^ID_Continue= No}', "");
Expect(0, 57, '\p{ID_Continue= No}', "");
Expect(1, 57, '\p{^ID_Continue= No}', "");
Expect(1, 57, '\P{ID_Continue= No}', "");
Expect(0, 57, '\P{^ID_Continue= No}', "");
Error('\p{IDC=/a/_n}');
Error('\P{IDC=/a/_n}');
Expect(1, 47, '\p{IDC=n}', "");
Expect(0, 47, '\p{^IDC=n}', "");
Expect(0, 47, '\P{IDC=n}', "");
Expect(1, 47, '\P{^IDC=n}', "");
Expect(0, 57, '\p{IDC=n}', "");
Expect(1, 57, '\p{^IDC=n}', "");
Expect(1, 57, '\P{IDC=n}', "");
Expect(0, 57, '\P{^IDC=n}', "");
Expect(1, 47, '\p{IDC=	N}', "");
Expect(0, 47, '\p{^IDC=	N}', "");
Expect(0, 47, '\P{IDC=	N}', "");
Expect(1, 47, '\P{^IDC=	N}', "");
Expect(0, 57, '\p{IDC=	N}', "");
Expect(1, 57, '\p{^IDC=	N}', "");
Expect(1, 57, '\P{IDC=	N}', "");
Expect(0, 57, '\P{^IDC=	N}', "");
Error('\p{Is_ID_Continue=:=	_F}');
Error('\P{Is_ID_Continue=:=	_F}');
Expect(1, 47, '\p{Is_ID_Continue=f}', "");
Expect(0, 47, '\p{^Is_ID_Continue=f}', "");
Expect(0, 47, '\P{Is_ID_Continue=f}', "");
Expect(1, 47, '\P{^Is_ID_Continue=f}', "");
Expect(0, 57, '\p{Is_ID_Continue=f}', "");
Expect(1, 57, '\p{^Is_ID_Continue=f}', "");
Expect(1, 57, '\P{Is_ID_Continue=f}', "");
Expect(0, 57, '\P{^Is_ID_Continue=f}', "");
Expect(1, 47, '\p{Is_ID_Continue:		 f}', "");
Expect(0, 47, '\p{^Is_ID_Continue:		 f}', "");
Expect(0, 47, '\P{Is_ID_Continue:		 f}', "");
Expect(1, 47, '\P{^Is_ID_Continue:		 f}', "");
Expect(0, 57, '\p{Is_ID_Continue:		 f}', "");
Expect(1, 57, '\p{^Is_ID_Continue:		 f}', "");
Expect(1, 57, '\P{Is_ID_Continue:		 f}', "");
Expect(0, 57, '\P{^Is_ID_Continue:		 f}', "");
Error('\p{Is_IDC=/a/	false}');
Error('\P{Is_IDC=/a/	false}');
Expect(1, 47, '\p{Is_IDC=false}', "");
Expect(0, 47, '\p{^Is_IDC=false}', "");
Expect(0, 47, '\P{Is_IDC=false}', "");
Expect(1, 47, '\P{^Is_IDC=false}', "");
Expect(0, 57, '\p{Is_IDC=false}', "");
Expect(1, 57, '\p{^Is_IDC=false}', "");
Expect(1, 57, '\P{Is_IDC=false}', "");
Expect(0, 57, '\P{^Is_IDC=false}', "");
Expect(1, 47, '\p{Is_IDC=_FALSE}', "");
Expect(0, 47, '\p{^Is_IDC=_FALSE}', "");
Expect(0, 47, '\P{Is_IDC=_FALSE}', "");
Expect(1, 47, '\P{^Is_IDC=_FALSE}', "");
Expect(0, 57, '\p{Is_IDC=_FALSE}', "");
Expect(1, 57, '\p{^Is_IDC=_FALSE}', "");
Expect(1, 57, '\P{Is_IDC=_FALSE}', "");
Expect(0, 57, '\P{^Is_IDC=_FALSE}', "");
Error('\p{Other_Alphabetic=/a/ YES}');
Error('\P{Other_Alphabetic=/a/ YES}');
Expect(1, 837, '\p{Other_Alphabetic=yes}', 'deprecated');
Expect(0, 837, '\p{^Other_Alphabetic=yes}', 'deprecated');
Expect(0, 837, '\P{Other_Alphabetic=yes}', 'deprecated');
Expect(1, 837, '\P{^Other_Alphabetic=yes}', 'deprecated');
Expect(0, 836, '\p{Other_Alphabetic=yes}', 'deprecated');
Expect(1, 836, '\p{^Other_Alphabetic=yes}', 'deprecated');
Expect(1, 836, '\P{Other_Alphabetic=yes}', 'deprecated');
Expect(0, 836, '\P{^Other_Alphabetic=yes}', 'deprecated');
Expect(1, 837, '\p{Other_Alphabetic=	-YES}', 'deprecated');
Expect(0, 837, '\p{^Other_Alphabetic=	-YES}', 'deprecated');
Expect(0, 837, '\P{Other_Alphabetic=	-YES}', 'deprecated');
Expect(1, 837, '\P{^Other_Alphabetic=	-YES}', 'deprecated');
Expect(0, 836, '\p{Other_Alphabetic=	-YES}', 'deprecated');
Expect(1, 836, '\p{^Other_Alphabetic=	-YES}', 'deprecated');
Expect(1, 836, '\P{Other_Alphabetic=	-YES}', 'deprecated');
Expect(0, 836, '\P{^Other_Alphabetic=	-YES}', 'deprecated');
Error('\p{OAlpha= Y:=}');
Error('\P{OAlpha= Y:=}');
Expect(1, 837, '\p{OAlpha=y}', 'deprecated');
Expect(0, 837, '\p{^OAlpha=y}', 'deprecated');
Expect(0, 837, '\P{OAlpha=y}', 'deprecated');
Expect(1, 837, '\P{^OAlpha=y}', 'deprecated');
Expect(0, 836, '\p{OAlpha=y}', 'deprecated');
Expect(1, 836, '\p{^OAlpha=y}', 'deprecated');
Expect(1, 836, '\P{OAlpha=y}', 'deprecated');
Expect(0, 836, '\P{^OAlpha=y}', 'deprecated');
Expect(1, 837, '\p{OAlpha= -Y}', 'deprecated');
Expect(0, 837, '\p{^OAlpha= -Y}', 'deprecated');
Expect(0, 837, '\P{OAlpha= -Y}', 'deprecated');
Expect(1, 837, '\P{^OAlpha= -Y}', 'deprecated');
Expect(0, 836, '\p{OAlpha= -Y}', 'deprecated');
Expect(1, 836, '\p{^OAlpha= -Y}', 'deprecated');
Expect(1, 836, '\P{OAlpha= -Y}', 'deprecated');
Expect(0, 836, '\P{^OAlpha= -Y}', 'deprecated');
Error('\p{Is_Other_Alphabetic=/a/		T}');
Error('\P{Is_Other_Alphabetic=/a/		T}');
Expect(1, 837, '\p{Is_Other_Alphabetic=t}', 'deprecated');
Expect(0, 837, '\p{^Is_Other_Alphabetic=t}', 'deprecated');
Expect(0, 837, '\P{Is_Other_Alphabetic=t}', 'deprecated');
Expect(1, 837, '\P{^Is_Other_Alphabetic=t}', 'deprecated');
Expect(0, 836, '\p{Is_Other_Alphabetic=t}', 'deprecated');
Expect(1, 836, '\p{^Is_Other_Alphabetic=t}', 'deprecated');
Expect(1, 836, '\P{Is_Other_Alphabetic=t}', 'deprecated');
Expect(0, 836, '\P{^Is_Other_Alphabetic=t}', 'deprecated');
Expect(1, 837, '\p{Is_Other_Alphabetic=--T}', 'deprecated');
Expect(0, 837, '\p{^Is_Other_Alphabetic=--T}', 'deprecated');
Expect(0, 837, '\P{Is_Other_Alphabetic=--T}', 'deprecated');
Expect(1, 837, '\P{^Is_Other_Alphabetic=--T}', 'deprecated');
Expect(0, 836, '\p{Is_Other_Alphabetic=--T}', 'deprecated');
Expect(1, 836, '\p{^Is_Other_Alphabetic=--T}', 'deprecated');
Expect(1, 836, '\P{Is_Other_Alphabetic=--T}', 'deprecated');
Expect(0, 836, '\P{^Is_Other_Alphabetic=--T}', 'deprecated');
Error('\p{Is_OAlpha=/a/  TRUE}');
Error('\P{Is_OAlpha=/a/  TRUE}');
Expect(1, 837, '\p{Is_OAlpha=true}', 'deprecated');
Expect(0, 837, '\p{^Is_OAlpha=true}', 'deprecated');
Expect(0, 837, '\P{Is_OAlpha=true}', 'deprecated');
Expect(1, 837, '\P{^Is_OAlpha=true}', 'deprecated');
Expect(0, 836, '\p{Is_OAlpha=true}', 'deprecated');
Expect(1, 836, '\p{^Is_OAlpha=true}', 'deprecated');
Expect(1, 836, '\P{Is_OAlpha=true}', 'deprecated');
Expect(0, 836, '\P{^Is_OAlpha=true}', 'deprecated');
Expect(1, 837, '\p{Is_OAlpha=	-true}', 'deprecated');
Expect(0, 837, '\p{^Is_OAlpha=	-true}', 'deprecated');
Expect(0, 837, '\P{Is_OAlpha=	-true}', 'deprecated');
Expect(1, 837, '\P{^Is_OAlpha=	-true}', 'deprecated');
Expect(0, 836, '\p{Is_OAlpha=	-true}', 'deprecated');
Expect(1, 836, '\p{^Is_OAlpha=	-true}', 'deprecated');
Expect(1, 836, '\P{Is_OAlpha=	-true}', 'deprecated');
Expect(0, 836, '\P{^Is_OAlpha=	-true}', 'deprecated');
Error('\p{Other_Alphabetic=NO:=}');
Error('\P{Other_Alphabetic=NO:=}');
Expect(1, 836, '\p{Other_Alphabetic:	no}', 'deprecated');
Expect(0, 836, '\p{^Other_Alphabetic:	no}', 'deprecated');
Expect(0, 836, '\P{Other_Alphabetic:	no}', 'deprecated');
Expect(1, 836, '\P{^Other_Alphabetic:	no}', 'deprecated');
Expect(0, 837, '\p{Other_Alphabetic:	no}', 'deprecated');
Expect(1, 837, '\p{^Other_Alphabetic:	no}', 'deprecated');
Expect(1, 837, '\P{Other_Alphabetic:	no}', 'deprecated');
Expect(0, 837, '\P{^Other_Alphabetic:	no}', 'deprecated');
Expect(1, 836, '\p{Other_Alphabetic=	No}', 'deprecated');
Expect(0, 836, '\p{^Other_Alphabetic=	No}', 'deprecated');
Expect(0, 836, '\P{Other_Alphabetic=	No}', 'deprecated');
Expect(1, 836, '\P{^Other_Alphabetic=	No}', 'deprecated');
Expect(0, 837, '\p{Other_Alphabetic=	No}', 'deprecated');
Expect(1, 837, '\p{^Other_Alphabetic=	No}', 'deprecated');
Expect(1, 837, '\P{Other_Alphabetic=	No}', 'deprecated');
Expect(0, 837, '\P{^Other_Alphabetic=	No}', 'deprecated');
Error('\p{OAlpha=/a/_n}');
Error('\P{OAlpha=/a/_n}');
Expect(1, 836, '\p{OAlpha=n}', 'deprecated');
Expect(0, 836, '\p{^OAlpha=n}', 'deprecated');
Expect(0, 836, '\P{OAlpha=n}', 'deprecated');
Expect(1, 836, '\P{^OAlpha=n}', 'deprecated');
Expect(0, 837, '\p{OAlpha=n}', 'deprecated');
Expect(1, 837, '\p{^OAlpha=n}', 'deprecated');
Expect(1, 837, '\P{OAlpha=n}', 'deprecated');
Expect(0, 837, '\P{^OAlpha=n}', 'deprecated');
Expect(1, 836, '\p{OAlpha=--N}', 'deprecated');
Expect(0, 836, '\p{^OAlpha=--N}', 'deprecated');
Expect(0, 836, '\P{OAlpha=--N}', 'deprecated');
Expect(1, 836, '\P{^OAlpha=--N}', 'deprecated');
Expect(0, 837, '\p{OAlpha=--N}', 'deprecated');
Expect(1, 837, '\p{^OAlpha=--N}', 'deprecated');
Expect(1, 837, '\P{OAlpha=--N}', 'deprecated');
Expect(0, 837, '\P{^OAlpha=--N}', 'deprecated');
Error('\p{Is_Other_Alphabetic:   	-F:=}');
Error('\P{Is_Other_Alphabetic:   	-F:=}');
Expect(1, 836, '\p{Is_Other_Alphabetic=f}', 'deprecated');
Expect(0, 836, '\p{^Is_Other_Alphabetic=f}', 'deprecated');
Expect(0, 836, '\P{Is_Other_Alphabetic=f}', 'deprecated');
Expect(1, 836, '\P{^Is_Other_Alphabetic=f}', 'deprecated');
Expect(0, 837, '\p{Is_Other_Alphabetic=f}', 'deprecated');
Expect(1, 837, '\p{^Is_Other_Alphabetic=f}', 'deprecated');
Expect(1, 837, '\P{Is_Other_Alphabetic=f}', 'deprecated');
Expect(0, 837, '\P{^Is_Other_Alphabetic=f}', 'deprecated');
Expect(1, 836, '\p{Is_Other_Alphabetic= f}', 'deprecated');
Expect(0, 836, '\p{^Is_Other_Alphabetic= f}', 'deprecated');
Expect(0, 836, '\P{Is_Other_Alphabetic= f}', 'deprecated');
Expect(1, 836, '\P{^Is_Other_Alphabetic= f}', 'deprecated');
Expect(0, 837, '\p{Is_Other_Alphabetic= f}', 'deprecated');
Expect(1, 837, '\p{^Is_Other_Alphabetic= f}', 'deprecated');
Expect(1, 837, '\P{Is_Other_Alphabetic= f}', 'deprecated');
Expect(0, 837, '\P{^Is_Other_Alphabetic= f}', 'deprecated');
Error('\p{Is_OAlpha:   -:=false}');
Error('\P{Is_OAlpha:   -:=false}');
Expect(1, 836, '\p{Is_OAlpha=false}', 'deprecated');
Expect(0, 836, '\p{^Is_OAlpha=false}', 'deprecated');
Expect(0, 836, '\P{Is_OAlpha=false}', 'deprecated');
Expect(1, 836, '\P{^Is_OAlpha=false}', 'deprecated');
Expect(0, 837, '\p{Is_OAlpha=false}', 'deprecated');
Expect(1, 837, '\p{^Is_OAlpha=false}', 'deprecated');
Expect(1, 837, '\P{Is_OAlpha=false}', 'deprecated');
Expect(0, 837, '\P{^Is_OAlpha=false}', 'deprecated');
Expect(1, 836, '\p{Is_OAlpha=_FALSE}', 'deprecated');
Expect(0, 836, '\p{^Is_OAlpha=_FALSE}', 'deprecated');
Expect(0, 836, '\P{Is_OAlpha=_FALSE}', 'deprecated');
Expect(1, 836, '\P{^Is_OAlpha=_FALSE}', 'deprecated');
Expect(0, 837, '\p{Is_OAlpha=_FALSE}', 'deprecated');
Expect(1, 837, '\p{^Is_OAlpha=_FALSE}', 'deprecated');
Expect(1, 837, '\P{Is_OAlpha=_FALSE}', 'deprecated');
Expect(0, 837, '\P{^Is_OAlpha=_FALSE}', 'deprecated');
Error('\p{NFKD_Quick_Check= :=Yes}');
Error('\P{NFKD_Quick_Check= :=Yes}');
Expect(1, 159, '\p{NFKD_Quick_Check=yes}', "");
Expect(0, 159, '\p{^NFKD_Quick_Check=yes}', "");
Expect(0, 159, '\P{NFKD_Quick_Check=yes}', "");
Expect(1, 159, '\P{^NFKD_Quick_Check=yes}', "");
Expect(0, 160, '\p{NFKD_Quick_Check=yes}', "");
Expect(1, 160, '\p{^NFKD_Quick_Check=yes}', "");
Expect(1, 160, '\P{NFKD_Quick_Check=yes}', "");
Expect(0, 160, '\P{^NFKD_Quick_Check=yes}', "");
Expect(1, 159, '\p{NFKD_Quick_Check=	-Yes}', "");
Expect(0, 159, '\p{^NFKD_Quick_Check=	-Yes}', "");
Expect(0, 159, '\P{NFKD_Quick_Check=	-Yes}', "");
Expect(1, 159, '\P{^NFKD_Quick_Check=	-Yes}', "");
Expect(0, 160, '\p{NFKD_Quick_Check=	-Yes}', "");
Expect(1, 160, '\p{^NFKD_Quick_Check=	-Yes}', "");
Expect(1, 160, '\P{NFKD_Quick_Check=	-Yes}', "");
Expect(0, 160, '\P{^NFKD_Quick_Check=	-Yes}', "");
Error('\p{NFKD_QC=/a/_ y}');
Error('\P{NFKD_QC=/a/_ y}');
Expect(1, 159, '\p{NFKD_QC=y}', "");
Expect(0, 159, '\p{^NFKD_QC=y}', "");
Expect(0, 159, '\P{NFKD_QC=y}', "");
Expect(1, 159, '\P{^NFKD_QC=y}', "");
Expect(0, 160, '\p{NFKD_QC=y}', "");
Expect(1, 160, '\p{^NFKD_QC=y}', "");
Expect(1, 160, '\P{NFKD_QC=y}', "");
Expect(0, 160, '\P{^NFKD_QC=y}', "");
Expect(1, 159, '\p{NFKD_QC=_Y}', "");
Expect(0, 159, '\p{^NFKD_QC=_Y}', "");
Expect(0, 159, '\P{NFKD_QC=_Y}', "");
Expect(1, 159, '\P{^NFKD_QC=_Y}', "");
Expect(0, 160, '\p{NFKD_QC=_Y}', "");
Expect(1, 160, '\p{^NFKD_QC=_Y}', "");
Expect(1, 160, '\P{NFKD_QC=_Y}', "");
Expect(0, 160, '\P{^NFKD_QC=_Y}', "");
Error('\p{Is_NFKD_Quick_Check=	/a/yes}');
Error('\P{Is_NFKD_Quick_Check=	/a/yes}');
Expect(1, 159, '\p{Is_NFKD_Quick_Check=yes}', "");
Expect(0, 159, '\p{^Is_NFKD_Quick_Check=yes}', "");
Expect(0, 159, '\P{Is_NFKD_Quick_Check=yes}', "");
Expect(1, 159, '\P{^Is_NFKD_Quick_Check=yes}', "");
Expect(0, 160, '\p{Is_NFKD_Quick_Check=yes}', "");
Expect(1, 160, '\p{^Is_NFKD_Quick_Check=yes}', "");
Expect(1, 160, '\P{Is_NFKD_Quick_Check=yes}', "");
Expect(0, 160, '\P{^Is_NFKD_Quick_Check=yes}', "");
Expect(1, 159, '\p{Is_NFKD_Quick_Check=  Yes}', "");
Expect(0, 159, '\p{^Is_NFKD_Quick_Check=  Yes}', "");
Expect(0, 159, '\P{Is_NFKD_Quick_Check=  Yes}', "");
Expect(1, 159, '\P{^Is_NFKD_Quick_Check=  Yes}', "");
Expect(0, 160, '\p{Is_NFKD_Quick_Check=  Yes}', "");
Expect(1, 160, '\p{^Is_NFKD_Quick_Check=  Yes}', "");
Expect(1, 160, '\P{Is_NFKD_Quick_Check=  Yes}', "");
Expect(0, 160, '\P{^Is_NFKD_Quick_Check=  Yes}', "");
Error('\p{Is_NFKD_QC=:=__Y}');
Error('\P{Is_NFKD_QC=:=__Y}');
Expect(1, 159, '\p{Is_NFKD_QC=y}', "");
Expect(0, 159, '\p{^Is_NFKD_QC=y}', "");
Expect(0, 159, '\P{Is_NFKD_QC=y}', "");
Expect(1, 159, '\P{^Is_NFKD_QC=y}', "");
Expect(0, 160, '\p{Is_NFKD_QC=y}', "");
Expect(1, 160, '\p{^Is_NFKD_QC=y}', "");
Expect(1, 160, '\P{Is_NFKD_QC=y}', "");
Expect(0, 160, '\P{^Is_NFKD_QC=y}', "");
Expect(1, 159, '\p{Is_NFKD_QC:	 Y}', "");
Expect(0, 159, '\p{^Is_NFKD_QC:	 Y}', "");
Expect(0, 159, '\P{Is_NFKD_QC:	 Y}', "");
Expect(1, 159, '\P{^Is_NFKD_QC:	 Y}', "");
Expect(0, 160, '\p{Is_NFKD_QC:	 Y}', "");
Expect(1, 160, '\p{^Is_NFKD_QC:	 Y}', "");
Expect(1, 160, '\P{Is_NFKD_QC:	 Y}', "");
Expect(0, 160, '\P{^Is_NFKD_QC:	 Y}', "");
Error('\p{NFKD_Quick_Check=/a/-	No}');
Error('\P{NFKD_Quick_Check=/a/-	No}');
Expect(1, 160, '\p{NFKD_Quick_Check=no}', "");
Expect(0, 160, '\p{^NFKD_Quick_Check=no}', "");
Expect(0, 160, '\P{NFKD_Quick_Check=no}', "");
Expect(1, 160, '\P{^NFKD_Quick_Check=no}', "");
Expect(0, 159, '\p{NFKD_Quick_Check=no}', "");
Expect(1, 159, '\p{^NFKD_Quick_Check=no}', "");
Expect(1, 159, '\P{NFKD_Quick_Check=no}', "");
Expect(0, 159, '\P{^NFKD_Quick_Check=no}', "");
Expect(1, 160, '\p{NFKD_Quick_Check=	no}', "");
Expect(0, 160, '\p{^NFKD_Quick_Check=	no}', "");
Expect(0, 160, '\P{NFKD_Quick_Check=	no}', "");
Expect(1, 160, '\P{^NFKD_Quick_Check=	no}', "");
Expect(0, 159, '\p{NFKD_Quick_Check=	no}', "");
Expect(1, 159, '\p{^NFKD_Quick_Check=	no}', "");
Expect(1, 159, '\P{NFKD_Quick_Check=	no}', "");
Expect(0, 159, '\P{^NFKD_Quick_Check=	no}', "");
Error('\p{NFKD_QC=:=N}');
Error('\P{NFKD_QC=:=N}');
Expect(1, 160, '\p{NFKD_QC=n}', "");
Expect(0, 160, '\p{^NFKD_QC=n}', "");
Expect(0, 160, '\P{NFKD_QC=n}', "");
Expect(1, 160, '\P{^NFKD_QC=n}', "");
Expect(0, 159, '\p{NFKD_QC=n}', "");
Expect(1, 159, '\p{^NFKD_QC=n}', "");
Expect(1, 159, '\P{NFKD_QC=n}', "");
Expect(0, 159, '\P{^NFKD_QC=n}', "");
Expect(1, 160, '\p{NFKD_QC= n}', "");
Expect(0, 160, '\p{^NFKD_QC= n}', "");
Expect(0, 160, '\P{NFKD_QC= n}', "");
Expect(1, 160, '\P{^NFKD_QC= n}', "");
Expect(0, 159, '\p{NFKD_QC= n}', "");
Expect(1, 159, '\p{^NFKD_QC= n}', "");
Expect(1, 159, '\P{NFKD_QC= n}', "");
Expect(0, 159, '\P{^NFKD_QC= n}', "");
Error('\p{Is_NFKD_Quick_Check=:=__No}');
Error('\P{Is_NFKD_Quick_Check=:=__No}');
Expect(1, 160, '\p{Is_NFKD_Quick_Check=no}', "");
Expect(0, 160, '\p{^Is_NFKD_Quick_Check=no}', "");
Expect(0, 160, '\P{Is_NFKD_Quick_Check=no}', "");
Expect(1, 160, '\P{^Is_NFKD_Quick_Check=no}', "");
Expect(0, 159, '\p{Is_NFKD_Quick_Check=no}', "");
Expect(1, 159, '\p{^Is_NFKD_Quick_Check=no}', "");
Expect(1, 159, '\P{Is_NFKD_Quick_Check=no}', "");
Expect(0, 159, '\P{^Is_NFKD_Quick_Check=no}', "");
Expect(1, 160, '\p{Is_NFKD_Quick_Check:	_no}', "");
Expect(0, 160, '\p{^Is_NFKD_Quick_Check:	_no}', "");
Expect(0, 160, '\P{Is_NFKD_Quick_Check:	_no}', "");
Expect(1, 160, '\P{^Is_NFKD_Quick_Check:	_no}', "");
Expect(0, 159, '\p{Is_NFKD_Quick_Check:	_no}', "");
Expect(1, 159, '\p{^Is_NFKD_Quick_Check:	_no}', "");
Expect(1, 159, '\P{Is_NFKD_Quick_Check:	_no}', "");
Expect(0, 159, '\P{^Is_NFKD_Quick_Check:	_no}', "");
Error('\p{Is_NFKD_QC=/a/n}');
Error('\P{Is_NFKD_QC=/a/n}');
Expect(1, 160, '\p{Is_NFKD_QC=n}', "");
Expect(0, 160, '\p{^Is_NFKD_QC=n}', "");
Expect(0, 160, '\P{Is_NFKD_QC=n}', "");
Expect(1, 160, '\P{^Is_NFKD_QC=n}', "");
Expect(0, 159, '\p{Is_NFKD_QC=n}', "");
Expect(1, 159, '\p{^Is_NFKD_QC=n}', "");
Expect(1, 159, '\P{Is_NFKD_QC=n}', "");
Expect(0, 159, '\P{^Is_NFKD_QC=n}', "");
Expect(1, 160, '\p{Is_NFKD_QC=	N}', "");
Expect(0, 160, '\p{^Is_NFKD_QC=	N}', "");
Expect(0, 160, '\P{Is_NFKD_QC=	N}', "");
Expect(1, 160, '\P{^Is_NFKD_QC=	N}', "");
Expect(0, 159, '\p{Is_NFKD_QC=	N}', "");
Expect(1, 159, '\p{^Is_NFKD_QC=	N}', "");
Expect(1, 159, '\P{Is_NFKD_QC=	N}', "");
Expect(0, 159, '\P{^Is_NFKD_QC=	N}', "");
Error('\p{Math= Yes:=}');
Error('\P{Math= Yes:=}');
Expect(1, 43, '\p{Math=yes}', "");
Expect(0, 43, '\p{^Math=yes}', "");
Expect(0, 43, '\P{Math=yes}', "");
Expect(1, 43, '\P{^Math=yes}', "");
Expect(0, 42, '\p{Math=yes}', "");
Expect(1, 42, '\p{^Math=yes}', "");
Expect(1, 42, '\P{Math=yes}', "");
Expect(0, 42, '\P{^Math=yes}', "");
Expect(1, 43, '\p{Math:   _yes}', "");
Expect(0, 43, '\p{^Math:   _yes}', "");
Expect(0, 43, '\P{Math:   _yes}', "");
Expect(1, 43, '\P{^Math:   _yes}', "");
Expect(0, 42, '\p{Math:   _yes}', "");
Expect(1, 42, '\p{^Math:   _yes}', "");
Expect(1, 42, '\P{Math:   _yes}', "");
Expect(0, 42, '\P{^Math:   _yes}', "");
Error('\p{Is_Math=	-Y:=}');
Error('\P{Is_Math=	-Y:=}');
Expect(1, 43, '\p{Is_Math=y}', "");
Expect(0, 43, '\p{^Is_Math=y}', "");
Expect(0, 43, '\P{Is_Math=y}', "");
Expect(1, 43, '\P{^Is_Math=y}', "");
Expect(0, 42, '\p{Is_Math=y}', "");
Expect(1, 42, '\p{^Is_Math=y}', "");
Expect(1, 42, '\P{Is_Math=y}', "");
Expect(0, 42, '\P{^Is_Math=y}', "");
Expect(1, 43, '\p{Is_Math=_	Y}', "");
Expect(0, 43, '\p{^Is_Math=_	Y}', "");
Expect(0, 43, '\P{Is_Math=_	Y}', "");
Expect(1, 43, '\P{^Is_Math=_	Y}', "");
Expect(0, 42, '\p{Is_Math=_	Y}', "");
Expect(1, 42, '\p{^Is_Math=_	Y}', "");
Expect(1, 42, '\P{Is_Math=_	Y}', "");
Expect(0, 42, '\P{^Is_Math=_	Y}', "");
Error('\p{Math=-/a/t}');
Error('\P{Math=-/a/t}');
Expect(1, 43, '\p{Math=t}', "");
Expect(0, 43, '\p{^Math=t}', "");
Expect(0, 43, '\P{Math=t}', "");
Expect(1, 43, '\P{^Math=t}', "");
Expect(0, 42, '\p{Math=t}', "");
Expect(1, 42, '\p{^Math=t}', "");
Expect(1, 42, '\P{Math=t}', "");
Expect(0, 42, '\P{^Math=t}', "");
Expect(1, 43, '\p{Math:_ T}', "");
Expect(0, 43, '\p{^Math:_ T}', "");
Expect(0, 43, '\P{Math:_ T}', "");
Expect(1, 43, '\P{^Math:_ T}', "");
Expect(0, 42, '\p{Math:_ T}', "");
Expect(1, 42, '\p{^Math:_ T}', "");
Expect(1, 42, '\P{Math:_ T}', "");
Expect(0, 42, '\P{^Math:_ T}', "");
Error('\p{Is_Math=_/a/true}');
Error('\P{Is_Math=_/a/true}');
Expect(1, 43, '\p{Is_Math=true}', "");
Expect(0, 43, '\p{^Is_Math=true}', "");
Expect(0, 43, '\P{Is_Math=true}', "");
Expect(1, 43, '\P{^Is_Math=true}', "");
Expect(0, 42, '\p{Is_Math=true}', "");
Expect(1, 42, '\p{^Is_Math=true}', "");
Expect(1, 42, '\P{Is_Math=true}', "");
Expect(0, 42, '\P{^Is_Math=true}', "");
Expect(1, 43, '\p{Is_Math:	-True}', "");
Expect(0, 43, '\p{^Is_Math:	-True}', "");
Expect(0, 43, '\P{Is_Math:	-True}', "");
Expect(1, 43, '\P{^Is_Math:	-True}', "");
Expect(0, 42, '\p{Is_Math:	-True}', "");
Expect(1, 42, '\p{^Is_Math:	-True}', "");
Expect(1, 42, '\P{Is_Math:	-True}', "");
Expect(0, 42, '\P{^Is_Math:	-True}', "");
Error('\p{Math=_-No/a/}');
Error('\P{Math=_-No/a/}');
Expect(1, 42, '\p{Math=no}', "");
Expect(0, 42, '\p{^Math=no}', "");
Expect(0, 42, '\P{Math=no}', "");
Expect(1, 42, '\P{^Math=no}', "");
Expect(0, 43, '\p{Math=no}', "");
Expect(1, 43, '\p{^Math=no}', "");
Expect(1, 43, '\P{Math=no}', "");
Expect(0, 43, '\P{^Math=no}', "");
Expect(1, 42, '\p{Math=	NO}', "");
Expect(0, 42, '\p{^Math=	NO}', "");
Expect(0, 42, '\P{Math=	NO}', "");
Expect(1, 42, '\P{^Math=	NO}', "");
Expect(0, 43, '\p{Math=	NO}', "");
Expect(1, 43, '\p{^Math=	NO}', "");
Expect(1, 43, '\P{Math=	NO}', "");
Expect(0, 43, '\P{^Math=	NO}', "");
Error('\p{Is_Math= 	n/a/}');
Error('\P{Is_Math= 	n/a/}');
Expect(1, 42, '\p{Is_Math=n}', "");
Expect(0, 42, '\p{^Is_Math=n}', "");
Expect(0, 42, '\P{Is_Math=n}', "");
Expect(1, 42, '\P{^Is_Math=n}', "");
Expect(0, 43, '\p{Is_Math=n}', "");
Expect(1, 43, '\p{^Is_Math=n}', "");
Expect(1, 43, '\P{Is_Math=n}', "");
Expect(0, 43, '\P{^Is_Math=n}', "");
Expect(1, 42, '\p{Is_Math=N}', "");
Expect(0, 42, '\p{^Is_Math=N}', "");
Expect(0, 42, '\P{Is_Math=N}', "");
Expect(1, 42, '\P{^Is_Math=N}', "");
Expect(0, 43, '\p{Is_Math=N}', "");
Expect(1, 43, '\p{^Is_Math=N}', "");
Expect(1, 43, '\P{Is_Math=N}', "");
Expect(0, 43, '\P{^Is_Math=N}', "");
Error('\p{Math:-/a/f}');
Error('\P{Math:-/a/f}');
Expect(1, 42, '\p{Math=f}', "");
Expect(0, 42, '\p{^Math=f}', "");
Expect(0, 42, '\P{Math=f}', "");
Expect(1, 42, '\P{^Math=f}', "");
Expect(0, 43, '\p{Math=f}', "");
Expect(1, 43, '\p{^Math=f}', "");
Expect(1, 43, '\P{Math=f}', "");
Expect(0, 43, '\P{^Math=f}', "");
Expect(1, 42, '\p{Math= _F}', "");
Expect(0, 42, '\p{^Math= _F}', "");
Expect(0, 42, '\P{Math= _F}', "");
Expect(1, 42, '\P{^Math= _F}', "");
Expect(0, 43, '\p{Math= _F}', "");
Expect(1, 43, '\p{^Math= _F}', "");
Expect(1, 43, '\P{Math= _F}', "");
Expect(0, 43, '\P{^Math= _F}', "");
Error('\p{Is_Math=_/a/False}');
Error('\P{Is_Math=_/a/False}');
Expect(1, 42, '\p{Is_Math=false}', "");
Expect(0, 42, '\p{^Is_Math=false}', "");
Expect(0, 42, '\P{Is_Math=false}', "");
Expect(1, 42, '\P{^Is_Math=false}', "");
Expect(0, 43, '\p{Is_Math=false}', "");
Expect(1, 43, '\p{^Is_Math=false}', "");
Expect(1, 43, '\P{Is_Math=false}', "");
Expect(0, 43, '\P{^Is_Math=false}', "");
Expect(1, 42, '\p{Is_Math= -False}', "");
Expect(0, 42, '\p{^Is_Math= -False}', "");
Expect(0, 42, '\P{Is_Math= -False}', "");
Expect(1, 42, '\P{^Is_Math= -False}', "");
Expect(0, 43, '\p{Is_Math= -False}', "");
Expect(1, 43, '\p{^Is_Math= -False}', "");
Expect(1, 43, '\P{Is_Math= -False}', "");
Expect(0, 43, '\P{^Is_Math= -False}', "");
Error('\p{Other_Uppercase=_/a/YES}');
Error('\P{Other_Uppercase=_/a/YES}');
Expect(1, 8559, '\p{Other_Uppercase=yes}', 'deprecated');
Expect(0, 8559, '\p{^Other_Uppercase=yes}', 'deprecated');
Expect(0, 8559, '\P{Other_Uppercase=yes}', 'deprecated');
Expect(1, 8559, '\P{^Other_Uppercase=yes}', 'deprecated');
Expect(0, 8543, '\p{Other_Uppercase=yes}', 'deprecated');
Expect(1, 8543, '\p{^Other_Uppercase=yes}', 'deprecated');
Expect(1, 8543, '\P{Other_Uppercase=yes}', 'deprecated');
Expect(0, 8543, '\P{^Other_Uppercase=yes}', 'deprecated');
Expect(1, 8559, '\p{Other_Uppercase=	_YES}', 'deprecated');
Expect(0, 8559, '\p{^Other_Uppercase=	_YES}', 'deprecated');
Expect(0, 8559, '\P{Other_Uppercase=	_YES}', 'deprecated');
Expect(1, 8559, '\P{^Other_Uppercase=	_YES}', 'deprecated');
Expect(0, 8543, '\p{Other_Uppercase=	_YES}', 'deprecated');
Expect(1, 8543, '\p{^Other_Uppercase=	_YES}', 'deprecated');
Expect(1, 8543, '\P{Other_Uppercase=	_YES}', 'deprecated');
Expect(0, 8543, '\P{^Other_Uppercase=	_YES}', 'deprecated');
Error('\p{OUpper=:= _Y}');
Error('\P{OUpper=:= _Y}');
Expect(1, 8559, '\p{OUpper=y}', 'deprecated');
Expect(0, 8559, '\p{^OUpper=y}', 'deprecated');
Expect(0, 8559, '\P{OUpper=y}', 'deprecated');
Expect(1, 8559, '\P{^OUpper=y}', 'deprecated');
Expect(0, 8543, '\p{OUpper=y}', 'deprecated');
Expect(1, 8543, '\p{^OUpper=y}', 'deprecated');
Expect(1, 8543, '\P{OUpper=y}', 'deprecated');
Expect(0, 8543, '\P{^OUpper=y}', 'deprecated');
Expect(1, 8559, '\p{OUpper=	Y}', 'deprecated');
Expect(0, 8559, '\p{^OUpper=	Y}', 'deprecated');
Expect(0, 8559, '\P{OUpper=	Y}', 'deprecated');
Expect(1, 8559, '\P{^OUpper=	Y}', 'deprecated');
Expect(0, 8543, '\p{OUpper=	Y}', 'deprecated');
Expect(1, 8543, '\p{^OUpper=	Y}', 'deprecated');
Expect(1, 8543, '\P{OUpper=	Y}', 'deprecated');
Expect(0, 8543, '\P{^OUpper=	Y}', 'deprecated');
Error('\p{Is_Other_Uppercase=-_t/a/}');
Error('\P{Is_Other_Uppercase=-_t/a/}');
Expect(1, 8559, '\p{Is_Other_Uppercase=t}', 'deprecated');
Expect(0, 8559, '\p{^Is_Other_Uppercase=t}', 'deprecated');
Expect(0, 8559, '\P{Is_Other_Uppercase=t}', 'deprecated');
Expect(1, 8559, '\P{^Is_Other_Uppercase=t}', 'deprecated');
Expect(0, 8543, '\p{Is_Other_Uppercase=t}', 'deprecated');
Expect(1, 8543, '\p{^Is_Other_Uppercase=t}', 'deprecated');
Expect(1, 8543, '\P{Is_Other_Uppercase=t}', 'deprecated');
Expect(0, 8543, '\P{^Is_Other_Uppercase=t}', 'deprecated');
Expect(1, 8559, '\p{Is_Other_Uppercase=_T}', 'deprecated');
Expect(0, 8559, '\p{^Is_Other_Uppercase=_T}', 'deprecated');
Expect(0, 8559, '\P{Is_Other_Uppercase=_T}', 'deprecated');
Expect(1, 8559, '\P{^Is_Other_Uppercase=_T}', 'deprecated');
Expect(0, 8543, '\p{Is_Other_Uppercase=_T}', 'deprecated');
Expect(1, 8543, '\p{^Is_Other_Uppercase=_T}', 'deprecated');
Expect(1, 8543, '\P{Is_Other_Uppercase=_T}', 'deprecated');
Expect(0, 8543, '\P{^Is_Other_Uppercase=_T}', 'deprecated');
Error('\p{Is_OUpper=_:=TRUE}');
Error('\P{Is_OUpper=_:=TRUE}');
Expect(1, 8559, '\p{Is_OUpper=true}', 'deprecated');
Expect(0, 8559, '\p{^Is_OUpper=true}', 'deprecated');
Expect(0, 8559, '\P{Is_OUpper=true}', 'deprecated');
Expect(1, 8559, '\P{^Is_OUpper=true}', 'deprecated');
Expect(0, 8543, '\p{Is_OUpper=true}', 'deprecated');
Expect(1, 8543, '\p{^Is_OUpper=true}', 'deprecated');
Expect(1, 8543, '\P{Is_OUpper=true}', 'deprecated');
Expect(0, 8543, '\P{^Is_OUpper=true}', 'deprecated');
Expect(1, 8559, '\p{Is_OUpper=- TRUE}', 'deprecated');
Expect(0, 8559, '\p{^Is_OUpper=- TRUE}', 'deprecated');
Expect(0, 8559, '\P{Is_OUpper=- TRUE}', 'deprecated');
Expect(1, 8559, '\P{^Is_OUpper=- TRUE}', 'deprecated');
Expect(0, 8543, '\p{Is_OUpper=- TRUE}', 'deprecated');
Expect(1, 8543, '\p{^Is_OUpper=- TRUE}', 'deprecated');
Expect(1, 8543, '\P{Is_OUpper=- TRUE}', 'deprecated');
Expect(0, 8543, '\P{^Is_OUpper=- TRUE}', 'deprecated');
Error('\p{Other_Uppercase=-No/a/}');
Error('\P{Other_Uppercase=-No/a/}');
Expect(1, 8543, '\p{Other_Uppercase=no}', 'deprecated');
Expect(0, 8543, '\p{^Other_Uppercase=no}', 'deprecated');
Expect(0, 8543, '\P{Other_Uppercase=no}', 'deprecated');
Expect(1, 8543, '\P{^Other_Uppercase=no}', 'deprecated');
Expect(0, 8559, '\p{Other_Uppercase=no}', 'deprecated');
Expect(1, 8559, '\p{^Other_Uppercase=no}', 'deprecated');
Expect(1, 8559, '\P{Other_Uppercase=no}', 'deprecated');
Expect(0, 8559, '\P{^Other_Uppercase=no}', 'deprecated');
Expect(1, 8543, '\p{Other_Uppercase=	-No}', 'deprecated');
Expect(0, 8543, '\p{^Other_Uppercase=	-No}', 'deprecated');
Expect(0, 8543, '\P{Other_Uppercase=	-No}', 'deprecated');
Expect(1, 8543, '\P{^Other_Uppercase=	-No}', 'deprecated');
Expect(0, 8559, '\p{Other_Uppercase=	-No}', 'deprecated');
Expect(1, 8559, '\p{^Other_Uppercase=	-No}', 'deprecated');
Expect(1, 8559, '\P{Other_Uppercase=	-No}', 'deprecated');
Expect(0, 8559, '\P{^Other_Uppercase=	-No}', 'deprecated');
Error('\p{OUpper:    	N/a/}');
Error('\P{OUpper:    	N/a/}');
Expect(1, 8543, '\p{OUpper=n}', 'deprecated');
Expect(0, 8543, '\p{^OUpper=n}', 'deprecated');
Expect(0, 8543, '\P{OUpper=n}', 'deprecated');
Expect(1, 8543, '\P{^OUpper=n}', 'deprecated');
Expect(0, 8559, '\p{OUpper=n}', 'deprecated');
Expect(1, 8559, '\p{^OUpper=n}', 'deprecated');
Expect(1, 8559, '\P{OUpper=n}', 'deprecated');
Expect(0, 8559, '\P{^OUpper=n}', 'deprecated');
Expect(1, 8543, '\p{OUpper=	_N}', 'deprecated');
Expect(0, 8543, '\p{^OUpper=	_N}', 'deprecated');
Expect(0, 8543, '\P{OUpper=	_N}', 'deprecated');
Expect(1, 8543, '\P{^OUpper=	_N}', 'deprecated');
Expect(0, 8559, '\p{OUpper=	_N}', 'deprecated');
Expect(1, 8559, '\p{^OUpper=	_N}', 'deprecated');
Expect(1, 8559, '\P{OUpper=	_N}', 'deprecated');
Expect(0, 8559, '\P{^OUpper=	_N}', 'deprecated');
Error('\p{Is_Other_Uppercase= F/a/}');
Error('\P{Is_Other_Uppercase= F/a/}');
Expect(1, 8543, '\p{Is_Other_Uppercase=f}', 'deprecated');
Expect(0, 8543, '\p{^Is_Other_Uppercase=f}', 'deprecated');
Expect(0, 8543, '\P{Is_Other_Uppercase=f}', 'deprecated');
Expect(1, 8543, '\P{^Is_Other_Uppercase=f}', 'deprecated');
Expect(0, 8559, '\p{Is_Other_Uppercase=f}', 'deprecated');
Expect(1, 8559, '\p{^Is_Other_Uppercase=f}', 'deprecated');
Expect(1, 8559, '\P{Is_Other_Uppercase=f}', 'deprecated');
Expect(0, 8559, '\P{^Is_Other_Uppercase=f}', 'deprecated');
Error('\p{Is_OUpper=	FALSE/a/}');
Error('\P{Is_OUpper=	FALSE/a/}');
Expect(1, 8543, '\p{Is_OUpper=false}', 'deprecated');
Expect(0, 8543, '\p{^Is_OUpper=false}', 'deprecated');
Expect(0, 8543, '\P{Is_OUpper=false}', 'deprecated');
Expect(1, 8543, '\P{^Is_OUpper=false}', 'deprecated');
Expect(0, 8559, '\p{Is_OUpper=false}', 'deprecated');
Expect(1, 8559, '\p{^Is_OUpper=false}', 'deprecated');
Expect(1, 8559, '\P{Is_OUpper=false}', 'deprecated');
Expect(0, 8559, '\P{^Is_OUpper=false}', 'deprecated');
Expect(1, 8543, '\p{Is_OUpper=_false}', 'deprecated');
Expect(0, 8543, '\p{^Is_OUpper=_false}', 'deprecated');
Expect(0, 8543, '\P{Is_OUpper=_false}', 'deprecated');
Expect(1, 8543, '\P{^Is_OUpper=_false}', 'deprecated');
Expect(0, 8559, '\p{Is_OUpper=_false}', 'deprecated');
Expect(1, 8559, '\p{^Is_OUpper=_false}', 'deprecated');
Expect(1, 8559, '\P{Is_OUpper=_false}', 'deprecated');
Expect(0, 8559, '\P{^Is_OUpper=_false}', 'deprecated');
Error('\p{Changes_When_Casemapped=/a/_-yes}');
Error('\P{Changes_When_Casemapped=/a/_-yes}');
Expect(1, 90, '\p{Changes_When_Casemapped:yes}', "");
Expect(0, 90, '\p{^Changes_When_Casemapped:yes}', "");
Expect(0, 90, '\P{Changes_When_Casemapped:yes}', "");
Expect(1, 90, '\P{^Changes_When_Casemapped:yes}', "");
Expect(0, 64, '\p{Changes_When_Casemapped:yes}', "");
Expect(1, 64, '\p{^Changes_When_Casemapped:yes}', "");
Expect(1, 64, '\P{Changes_When_Casemapped:yes}', "");
Expect(0, 64, '\P{^Changes_When_Casemapped:yes}', "");
Expect(1, 90, '\p{Changes_When_Casemapped= -Yes}', "");
Expect(0, 90, '\p{^Changes_When_Casemapped= -Yes}', "");
Expect(0, 90, '\P{Changes_When_Casemapped= -Yes}', "");
Expect(1, 90, '\P{^Changes_When_Casemapped= -Yes}', "");
Expect(0, 64, '\p{Changes_When_Casemapped= -Yes}', "");
Expect(1, 64, '\p{^Changes_When_Casemapped= -Yes}', "");
Expect(1, 64, '\P{Changes_When_Casemapped= -Yes}', "");
Expect(0, 64, '\P{^Changes_When_Casemapped= -Yes}', "");
Error('\p{CWCM=-_Y/a/}');
Error('\P{CWCM=-_Y/a/}');
Expect(1, 90, '\p{CWCM=y}', "");
Expect(0, 90, '\p{^CWCM=y}', "");
Expect(0, 90, '\P{CWCM=y}', "");
Expect(1, 90, '\P{^CWCM=y}', "");
Expect(0, 64, '\p{CWCM=y}', "");
Expect(1, 64, '\p{^CWCM=y}', "");
Expect(1, 64, '\P{CWCM=y}', "");
Expect(0, 64, '\P{^CWCM=y}', "");
Expect(1, 90, '\p{CWCM= 	Y}', "");
Expect(0, 90, '\p{^CWCM= 	Y}', "");
Expect(0, 90, '\P{CWCM= 	Y}', "");
Expect(1, 90, '\P{^CWCM= 	Y}', "");
Expect(0, 64, '\p{CWCM= 	Y}', "");
Expect(1, 64, '\p{^CWCM= 	Y}', "");
Expect(1, 64, '\P{CWCM= 	Y}', "");
Expect(0, 64, '\P{^CWCM= 	Y}', "");
Error('\p{Is_Changes_When_Casemapped=/a/-T}');
Error('\P{Is_Changes_When_Casemapped=/a/-T}');
Expect(1, 90, '\p{Is_Changes_When_Casemapped=t}', "");
Expect(0, 90, '\p{^Is_Changes_When_Casemapped=t}', "");
Expect(0, 90, '\P{Is_Changes_When_Casemapped=t}', "");
Expect(1, 90, '\P{^Is_Changes_When_Casemapped=t}', "");
Expect(0, 64, '\p{Is_Changes_When_Casemapped=t}', "");
Expect(1, 64, '\p{^Is_Changes_When_Casemapped=t}', "");
Expect(1, 64, '\P{Is_Changes_When_Casemapped=t}', "");
Expect(0, 64, '\P{^Is_Changes_When_Casemapped=t}', "");
Expect(1, 90, '\p{Is_Changes_When_Casemapped=	T}', "");
Expect(0, 90, '\p{^Is_Changes_When_Casemapped=	T}', "");
Expect(0, 90, '\P{Is_Changes_When_Casemapped=	T}', "");
Expect(1, 90, '\P{^Is_Changes_When_Casemapped=	T}', "");
Expect(0, 64, '\p{Is_Changes_When_Casemapped=	T}', "");
Expect(1, 64, '\p{^Is_Changes_When_Casemapped=	T}', "");
Expect(1, 64, '\P{Is_Changes_When_Casemapped=	T}', "");
Expect(0, 64, '\P{^Is_Changes_When_Casemapped=	T}', "");
Error('\p{Is_CWCM:   /a/ 	TRUE}');
Error('\P{Is_CWCM:   /a/ 	TRUE}');
Expect(1, 90, '\p{Is_CWCM=true}', "");
Expect(0, 90, '\p{^Is_CWCM=true}', "");
Expect(0, 90, '\P{Is_CWCM=true}', "");
Expect(1, 90, '\P{^Is_CWCM=true}', "");
Expect(0, 64, '\p{Is_CWCM=true}', "");
Expect(1, 64, '\p{^Is_CWCM=true}', "");
Expect(1, 64, '\P{Is_CWCM=true}', "");
Expect(0, 64, '\P{^Is_CWCM=true}', "");
Expect(1, 90, '\p{Is_CWCM= true}', "");
Expect(0, 90, '\p{^Is_CWCM= true}', "");
Expect(0, 90, '\P{Is_CWCM= true}', "");
Expect(1, 90, '\P{^Is_CWCM= true}', "");
Expect(0, 64, '\p{Is_CWCM= true}', "");
Expect(1, 64, '\p{^Is_CWCM= true}', "");
Expect(1, 64, '\P{Is_CWCM= true}', "");
Expect(0, 64, '\P{^Is_CWCM= true}', "");
Error('\p{Changes_When_Casemapped=:= NO}');
Error('\P{Changes_When_Casemapped=:= NO}');
Expect(1, 64, '\p{Changes_When_Casemapped=no}', "");
Expect(0, 64, '\p{^Changes_When_Casemapped=no}', "");
Expect(0, 64, '\P{Changes_When_Casemapped=no}', "");
Expect(1, 64, '\P{^Changes_When_Casemapped=no}', "");
Expect(0, 90, '\p{Changes_When_Casemapped=no}', "");
Expect(1, 90, '\p{^Changes_When_Casemapped=no}', "");
Expect(1, 90, '\P{Changes_When_Casemapped=no}', "");
Expect(0, 90, '\P{^Changes_When_Casemapped=no}', "");
Expect(1, 64, '\p{Changes_When_Casemapped=	-NO}', "");
Expect(0, 64, '\p{^Changes_When_Casemapped=	-NO}', "");
Expect(0, 64, '\P{Changes_When_Casemapped=	-NO}', "");
Expect(1, 64, '\P{^Changes_When_Casemapped=	-NO}', "");
Expect(0, 90, '\p{Changes_When_Casemapped=	-NO}', "");
Expect(1, 90, '\p{^Changes_When_Casemapped=	-NO}', "");
Expect(1, 90, '\P{Changes_When_Casemapped=	-NO}', "");
Expect(0, 90, '\P{^Changes_When_Casemapped=	-NO}', "");
Error('\p{CWCM=/a/ N}');
Error('\P{CWCM=/a/ N}');
Expect(1, 64, '\p{CWCM=n}', "");
Expect(0, 64, '\p{^CWCM=n}', "");
Expect(0, 64, '\P{CWCM=n}', "");
Expect(1, 64, '\P{^CWCM=n}', "");
Expect(0, 90, '\p{CWCM=n}', "");
Expect(1, 90, '\p{^CWCM=n}', "");
Expect(1, 90, '\P{CWCM=n}', "");
Expect(0, 90, '\P{^CWCM=n}', "");
Expect(1, 64, '\p{CWCM=-N}', "");
Expect(0, 64, '\p{^CWCM=-N}', "");
Expect(0, 64, '\P{CWCM=-N}', "");
Expect(1, 64, '\P{^CWCM=-N}', "");
Expect(0, 90, '\p{CWCM=-N}', "");
Expect(1, 90, '\p{^CWCM=-N}', "");
Expect(1, 90, '\P{CWCM=-N}', "");
Expect(0, 90, '\P{^CWCM=-N}', "");
Error('\p{Is_Changes_When_Casemapped: 	F/a/}');
Error('\P{Is_Changes_When_Casemapped: 	F/a/}');
Expect(1, 64, '\p{Is_Changes_When_Casemapped=f}', "");
Expect(0, 64, '\p{^Is_Changes_When_Casemapped=f}', "");
Expect(0, 64, '\P{Is_Changes_When_Casemapped=f}', "");
Expect(1, 64, '\P{^Is_Changes_When_Casemapped=f}', "");
Expect(0, 90, '\p{Is_Changes_When_Casemapped=f}', "");
Expect(1, 90, '\p{^Is_Changes_When_Casemapped=f}', "");
Expect(1, 90, '\P{Is_Changes_When_Casemapped=f}', "");
Expect(0, 90, '\P{^Is_Changes_When_Casemapped=f}', "");
Expect(1, 64, '\p{Is_Changes_When_Casemapped:	f}', "");
Expect(0, 64, '\p{^Is_Changes_When_Casemapped:	f}', "");
Expect(0, 64, '\P{Is_Changes_When_Casemapped:	f}', "");
Expect(1, 64, '\P{^Is_Changes_When_Casemapped:	f}', "");
Expect(0, 90, '\p{Is_Changes_When_Casemapped:	f}', "");
Expect(1, 90, '\p{^Is_Changes_When_Casemapped:	f}', "");
Expect(1, 90, '\P{Is_Changes_When_Casemapped:	f}', "");
Expect(0, 90, '\P{^Is_Changes_When_Casemapped:	f}', "");
Error('\p{Is_CWCM=_/a/FALSE}');
Error('\P{Is_CWCM=_/a/FALSE}');
Expect(1, 64, '\p{Is_CWCM=false}', "");
Expect(0, 64, '\p{^Is_CWCM=false}', "");
Expect(0, 64, '\P{Is_CWCM=false}', "");
Expect(1, 64, '\P{^Is_CWCM=false}', "");
Expect(0, 90, '\p{Is_CWCM=false}', "");
Expect(1, 90, '\p{^Is_CWCM=false}', "");
Expect(1, 90, '\P{Is_CWCM=false}', "");
Expect(0, 90, '\P{^Is_CWCM=false}', "");
Expect(1, 64, '\p{Is_CWCM=-False}', "");
Expect(0, 64, '\p{^Is_CWCM=-False}', "");
Expect(0, 64, '\P{Is_CWCM=-False}', "");
Expect(1, 64, '\P{^Is_CWCM=-False}', "");
Expect(0, 90, '\p{Is_CWCM=-False}', "");
Expect(1, 90, '\p{^Is_CWCM=-False}', "");
Expect(1, 90, '\P{Is_CWCM=-False}', "");
Expect(0, 90, '\P{^Is_CWCM=-False}', "");
Error('\p{Deprecated=/a/_Yes}');
Error('\P{Deprecated=/a/_Yes}');
Expect(1, 329, '\p{Deprecated=yes}', "");
Expect(0, 329, '\p{^Deprecated=yes}', "");
Expect(0, 329, '\P{Deprecated=yes}', "");
Expect(1, 329, '\P{^Deprecated=yes}', "");
Expect(0, 328, '\p{Deprecated=yes}', "");
Expect(1, 328, '\p{^Deprecated=yes}', "");
Expect(1, 328, '\P{Deprecated=yes}', "");
Expect(0, 328, '\P{^Deprecated=yes}', "");
Expect(1, 329, '\p{Deprecated=		Yes}', "");
Expect(0, 329, '\p{^Deprecated=		Yes}', "");
Expect(0, 329, '\P{Deprecated=		Yes}', "");
Expect(1, 329, '\P{^Deprecated=		Yes}', "");
Expect(0, 328, '\p{Deprecated=		Yes}', "");
Expect(1, 328, '\p{^Deprecated=		Yes}', "");
Expect(1, 328, '\P{Deprecated=		Yes}', "");
Expect(0, 328, '\P{^Deprecated=		Yes}', "");
Error('\p{Dep=-	y:=}');
Error('\P{Dep=-	y:=}');
Expect(1, 329, '\p{Dep=y}', "");
Expect(0, 329, '\p{^Dep=y}', "");
Expect(0, 329, '\P{Dep=y}', "");
Expect(1, 329, '\P{^Dep=y}', "");
Expect(0, 328, '\p{Dep=y}', "");
Expect(1, 328, '\p{^Dep=y}', "");
Expect(1, 328, '\P{Dep=y}', "");
Expect(0, 328, '\P{^Dep=y}', "");
Expect(1, 329, '\p{Dep=__Y}', "");
Expect(0, 329, '\p{^Dep=__Y}', "");
Expect(0, 329, '\P{Dep=__Y}', "");
Expect(1, 329, '\P{^Dep=__Y}', "");
Expect(0, 328, '\p{Dep=__Y}', "");
Expect(1, 328, '\p{^Dep=__Y}', "");
Expect(1, 328, '\P{Dep=__Y}', "");
Expect(0, 328, '\P{^Dep=__Y}', "");
Error('\p{Is_Deprecated=	t/a/}');
Error('\P{Is_Deprecated=	t/a/}');
Expect(1, 329, '\p{Is_Deprecated=t}', "");
Expect(0, 329, '\p{^Is_Deprecated=t}', "");
Expect(0, 329, '\P{Is_Deprecated=t}', "");
Expect(1, 329, '\P{^Is_Deprecated=t}', "");
Expect(0, 328, '\p{Is_Deprecated=t}', "");
Expect(1, 328, '\p{^Is_Deprecated=t}', "");
Expect(1, 328, '\P{Is_Deprecated=t}', "");
Expect(0, 328, '\P{^Is_Deprecated=t}', "");
Expect(1, 329, '\p{Is_Deprecated=	_T}', "");
Expect(0, 329, '\p{^Is_Deprecated=	_T}', "");
Expect(0, 329, '\P{Is_Deprecated=	_T}', "");
Expect(1, 329, '\P{^Is_Deprecated=	_T}', "");
Expect(0, 328, '\p{Is_Deprecated=	_T}', "");
Expect(1, 328, '\p{^Is_Deprecated=	_T}', "");
Expect(1, 328, '\P{Is_Deprecated=	_T}', "");
Expect(0, 328, '\P{^Is_Deprecated=	_T}', "");
Error('\p{Is_Dep=/a/-True}');
Error('\P{Is_Dep=/a/-True}');
Expect(1, 329, '\p{Is_Dep=true}', "");
Expect(0, 329, '\p{^Is_Dep=true}', "");
Expect(0, 329, '\P{Is_Dep=true}', "");
Expect(1, 329, '\P{^Is_Dep=true}', "");
Expect(0, 328, '\p{Is_Dep=true}', "");
Expect(1, 328, '\p{^Is_Dep=true}', "");
Expect(1, 328, '\P{Is_Dep=true}', "");
Expect(0, 328, '\P{^Is_Dep=true}', "");
Expect(1, 329, '\p{Is_Dep=	_TRUE}', "");
Expect(0, 329, '\p{^Is_Dep=	_TRUE}', "");
Expect(0, 329, '\P{Is_Dep=	_TRUE}', "");
Expect(1, 329, '\P{^Is_Dep=	_TRUE}', "");
Expect(0, 328, '\p{Is_Dep=	_TRUE}', "");
Expect(1, 328, '\p{^Is_Dep=	_TRUE}', "");
Expect(1, 328, '\P{Is_Dep=	_TRUE}', "");
Expect(0, 328, '\P{^Is_Dep=	_TRUE}', "");
Error('\p{Deprecated=	_no:=}');
Error('\P{Deprecated=	_no:=}');
Expect(1, 328, '\p{Deprecated=no}', "");
Expect(0, 328, '\p{^Deprecated=no}', "");
Expect(0, 328, '\P{Deprecated=no}', "");
Expect(1, 328, '\P{^Deprecated=no}', "");
Expect(0, 329, '\p{Deprecated=no}', "");
Expect(1, 329, '\p{^Deprecated=no}', "");
Expect(1, 329, '\P{Deprecated=no}', "");
Expect(0, 329, '\P{^Deprecated=no}', "");
Expect(1, 328, '\p{Deprecated: 		No}', "");
Expect(0, 328, '\p{^Deprecated: 		No}', "");
Expect(0, 328, '\P{Deprecated: 		No}', "");
Expect(1, 328, '\P{^Deprecated: 		No}', "");
Expect(0, 329, '\p{Deprecated: 		No}', "");
Expect(1, 329, '\p{^Deprecated: 		No}', "");
Expect(1, 329, '\P{Deprecated: 		No}', "");
Expect(0, 329, '\P{^Deprecated: 		No}', "");
Error('\p{Dep=	:=n}');
Error('\P{Dep=	:=n}');
Expect(1, 328, '\p{Dep=n}', "");
Expect(0, 328, '\p{^Dep=n}', "");
Expect(0, 328, '\P{Dep=n}', "");
Expect(1, 328, '\P{^Dep=n}', "");
Expect(0, 329, '\p{Dep=n}', "");
Expect(1, 329, '\p{^Dep=n}', "");
Expect(1, 329, '\P{Dep=n}', "");
Expect(0, 329, '\P{^Dep=n}', "");
Expect(1, 328, '\p{Dep=	_n}', "");
Expect(0, 328, '\p{^Dep=	_n}', "");
Expect(0, 328, '\P{Dep=	_n}', "");
Expect(1, 328, '\P{^Dep=	_n}', "");
Expect(0, 329, '\p{Dep=	_n}', "");
Expect(1, 329, '\p{^Dep=	_n}', "");
Expect(1, 329, '\P{Dep=	_n}', "");
Expect(0, 329, '\P{^Dep=	_n}', "");
Error('\p{Is_Deprecated=_/a/F}');
Error('\P{Is_Deprecated=_/a/F}');
Expect(1, 328, '\p{Is_Deprecated=f}', "");
Expect(0, 328, '\p{^Is_Deprecated=f}', "");
Expect(0, 328, '\P{Is_Deprecated=f}', "");
Expect(1, 328, '\P{^Is_Deprecated=f}', "");
Expect(0, 329, '\p{Is_Deprecated=f}', "");
Expect(1, 329, '\p{^Is_Deprecated=f}', "");
Expect(1, 329, '\P{Is_Deprecated=f}', "");
Expect(0, 329, '\P{^Is_Deprecated=f}', "");
Expect(1, 328, '\p{Is_Deprecated=	f}', "");
Expect(0, 328, '\p{^Is_Deprecated=	f}', "");
Expect(0, 328, '\P{Is_Deprecated=	f}', "");
Expect(1, 328, '\P{^Is_Deprecated=	f}', "");
Expect(0, 329, '\p{Is_Deprecated=	f}', "");
Expect(1, 329, '\p{^Is_Deprecated=	f}', "");
Expect(1, 329, '\P{Is_Deprecated=	f}', "");
Expect(0, 329, '\P{^Is_Deprecated=	f}', "");
Error('\p{Is_Dep=_/a/false}');
Error('\P{Is_Dep=_/a/false}');
Expect(1, 328, '\p{Is_Dep:	false}', "");
Expect(0, 328, '\p{^Is_Dep:	false}', "");
Expect(0, 328, '\P{Is_Dep:	false}', "");
Expect(1, 328, '\P{^Is_Dep:	false}', "");
Expect(0, 329, '\p{Is_Dep:	false}', "");
Expect(1, 329, '\p{^Is_Dep:	false}', "");
Expect(1, 329, '\P{Is_Dep:	false}', "");
Expect(0, 329, '\P{^Is_Dep:	false}', "");
Expect(1, 328, '\p{Is_Dep=-_FALSE}', "");
Expect(0, 328, '\p{^Is_Dep=-_FALSE}', "");
Expect(0, 328, '\P{Is_Dep=-_FALSE}', "");
Expect(1, 328, '\P{^Is_Dep=-_FALSE}', "");
Expect(0, 329, '\p{Is_Dep=-_FALSE}', "");
Expect(1, 329, '\p{^Is_Dep=-_FALSE}', "");
Expect(1, 329, '\P{Is_Dep=-_FALSE}', "");
Expect(0, 329, '\P{^Is_Dep=-_FALSE}', "");
Error('\p{Sentence_Break=:=	_SP}');
Error('\P{Sentence_Break=:=	_SP}');
Expect(1, 9, '\p{Sentence_Break=sp}', "");
Expect(0, 9, '\p{^Sentence_Break=sp}', "");
Expect(0, 9, '\P{Sentence_Break=sp}', "");
Expect(1, 9, '\P{^Sentence_Break=sp}', "");
Expect(0, 8, '\p{Sentence_Break=sp}', "");
Expect(1, 8, '\p{^Sentence_Break=sp}', "");
Expect(1, 8, '\P{Sentence_Break=sp}', "");
Expect(0, 8, '\P{^Sentence_Break=sp}', "");
Expect(1, 9, '\p{Sentence_Break=_Sp}', "");
Expect(0, 9, '\p{^Sentence_Break=_Sp}', "");
Expect(0, 9, '\P{Sentence_Break=_Sp}', "");
Expect(1, 9, '\P{^Sentence_Break=_Sp}', "");
Expect(0, 8, '\p{Sentence_Break=_Sp}', "");
Expect(1, 8, '\p{^Sentence_Break=_Sp}', "");
Expect(1, 8, '\P{Sentence_Break=_Sp}', "");
Expect(0, 8, '\P{^Sentence_Break=_Sp}', "");
Error('\p{SB=:=  SP}');
Error('\P{SB=:=  SP}');
Expect(1, 9, '\p{SB=sp}', "");
Expect(0, 9, '\p{^SB=sp}', "");
Expect(0, 9, '\P{SB=sp}', "");
Expect(1, 9, '\P{^SB=sp}', "");
Expect(0, 8, '\p{SB=sp}', "");
Expect(1, 8, '\p{^SB=sp}', "");
Expect(1, 8, '\P{SB=sp}', "");
Expect(0, 8, '\P{^SB=sp}', "");
Expect(1, 9, '\p{SB= -SP}', "");
Expect(0, 9, '\p{^SB= -SP}', "");
Expect(0, 9, '\P{SB= -SP}', "");
Expect(1, 9, '\P{^SB= -SP}', "");
Expect(0, 8, '\p{SB= -SP}', "");
Expect(1, 8, '\p{^SB= -SP}', "");
Expect(1, 8, '\P{SB= -SP}', "");
Expect(0, 8, '\P{^SB= -SP}', "");
Error('\p{Is_Sentence_Break=/a/	sp}');
Error('\P{Is_Sentence_Break=/a/	sp}');
Expect(1, 9, '\p{Is_Sentence_Break=sp}', "");
Expect(0, 9, '\p{^Is_Sentence_Break=sp}', "");
Expect(0, 9, '\P{Is_Sentence_Break=sp}', "");
Expect(1, 9, '\P{^Is_Sentence_Break=sp}', "");
Expect(0, 8, '\p{Is_Sentence_Break=sp}', "");
Expect(1, 8, '\p{^Is_Sentence_Break=sp}', "");
Expect(1, 8, '\P{Is_Sentence_Break=sp}', "");
Expect(0, 8, '\P{^Is_Sentence_Break=sp}', "");
Expect(1, 9, '\p{Is_Sentence_Break= SP}', "");
Expect(0, 9, '\p{^Is_Sentence_Break= SP}', "");
Expect(0, 9, '\P{Is_Sentence_Break= SP}', "");
Expect(1, 9, '\P{^Is_Sentence_Break= SP}', "");
Expect(0, 8, '\p{Is_Sentence_Break= SP}', "");
Expect(1, 8, '\p{^Is_Sentence_Break= SP}', "");
Expect(1, 8, '\P{Is_Sentence_Break= SP}', "");
Expect(0, 8, '\P{^Is_Sentence_Break= SP}', "");
Error('\p{Is_SB=/a/_sp}');
Error('\P{Is_SB=/a/_sp}');
Expect(1, 9, '\p{Is_SB=sp}', "");
Expect(0, 9, '\p{^Is_SB=sp}', "");
Expect(0, 9, '\P{Is_SB=sp}', "");
Expect(1, 9, '\P{^Is_SB=sp}', "");
Expect(0, 8, '\p{Is_SB=sp}', "");
Expect(1, 8, '\p{^Is_SB=sp}', "");
Expect(1, 8, '\P{Is_SB=sp}', "");
Expect(0, 8, '\P{^Is_SB=sp}', "");
Expect(1, 9, '\p{Is_SB= SP}', "");
Expect(0, 9, '\p{^Is_SB= SP}', "");
Expect(0, 9, '\P{Is_SB= SP}', "");
Expect(1, 9, '\P{^Is_SB= SP}', "");
Expect(0, 8, '\p{Is_SB= SP}', "");
Expect(1, 8, '\p{^Is_SB= SP}', "");
Expect(1, 8, '\P{Is_SB= SP}', "");
Expect(0, 8, '\P{^Is_SB= SP}', "");
Error('\p{Sentence_Break=:= SContinue}');
Error('\P{Sentence_Break=:= SContinue}');
Expect(1, 45, '\p{Sentence_Break=scontinue}', "");
Expect(0, 45, '\p{^Sentence_Break=scontinue}', "");
Expect(0, 45, '\P{Sentence_Break=scontinue}', "");
Expect(1, 45, '\P{^Sentence_Break=scontinue}', "");
Expect(0, 43, '\p{Sentence_Break=scontinue}', "");
Expect(1, 43, '\p{^Sentence_Break=scontinue}', "");
Expect(1, 43, '\P{Sentence_Break=scontinue}', "");
Expect(0, 43, '\P{^Sentence_Break=scontinue}', "");
Expect(1, 45, '\p{Sentence_Break=_-SContinue}', "");
Expect(0, 45, '\p{^Sentence_Break=_-SContinue}', "");
Expect(0, 45, '\P{Sentence_Break=_-SContinue}', "");
Expect(1, 45, '\P{^Sentence_Break=_-SContinue}', "");
Expect(0, 43, '\p{Sentence_Break=_-SContinue}', "");
Expect(1, 43, '\p{^Sentence_Break=_-SContinue}', "");
Expect(1, 43, '\P{Sentence_Break=_-SContinue}', "");
Expect(0, 43, '\P{^Sentence_Break=_-SContinue}', "");
Error('\p{SB=_-sc:=}');
Error('\P{SB=_-sc:=}');
Expect(1, 45, '\p{SB=sc}', "");
Expect(0, 45, '\p{^SB=sc}', "");
Expect(0, 45, '\P{SB=sc}', "");
Expect(1, 45, '\P{^SB=sc}', "");
Expect(0, 43, '\p{SB=sc}', "");
Expect(1, 43, '\p{^SB=sc}', "");
Expect(1, 43, '\P{SB=sc}', "");
Expect(0, 43, '\P{^SB=sc}', "");
Expect(1, 45, '\p{SB:	__SC}', "");
Expect(0, 45, '\p{^SB:	__SC}', "");
Expect(0, 45, '\P{SB:	__SC}', "");
Expect(1, 45, '\P{^SB:	__SC}', "");
Expect(0, 43, '\p{SB:	__SC}', "");
Expect(1, 43, '\p{^SB:	__SC}', "");
Expect(1, 43, '\P{SB:	__SC}', "");
Expect(0, 43, '\P{^SB:	__SC}', "");
Error('\p{Is_Sentence_Break=_/a/SCONTINUE}');
Error('\P{Is_Sentence_Break=_/a/SCONTINUE}');
Expect(1, 45, '\p{Is_Sentence_Break=scontinue}', "");
Expect(0, 45, '\p{^Is_Sentence_Break=scontinue}', "");
Expect(0, 45, '\P{Is_Sentence_Break=scontinue}', "");
Expect(1, 45, '\P{^Is_Sentence_Break=scontinue}', "");
Expect(0, 43, '\p{Is_Sentence_Break=scontinue}', "");
Expect(1, 43, '\p{^Is_Sentence_Break=scontinue}', "");
Expect(1, 43, '\P{Is_Sentence_Break=scontinue}', "");
Expect(0, 43, '\P{^Is_Sentence_Break=scontinue}', "");
Expect(1, 45, '\p{Is_Sentence_Break: 	scontinue}', "");
Expect(0, 45, '\p{^Is_Sentence_Break: 	scontinue}', "");
Expect(0, 45, '\P{Is_Sentence_Break: 	scontinue}', "");
Expect(1, 45, '\P{^Is_Sentence_Break: 	scontinue}', "");
Expect(0, 43, '\p{Is_Sentence_Break: 	scontinue}', "");
Expect(1, 43, '\p{^Is_Sentence_Break: 	scontinue}', "");
Expect(1, 43, '\P{Is_Sentence_Break: 	scontinue}', "");
Expect(0, 43, '\P{^Is_Sentence_Break: 	scontinue}', "");
Error('\p{Is_SB=/a/_SC}');
Error('\P{Is_SB=/a/_SC}');
Expect(1, 45, '\p{Is_SB=sc}', "");
Expect(0, 45, '\p{^Is_SB=sc}', "");
Expect(0, 45, '\P{Is_SB=sc}', "");
Expect(1, 45, '\P{^Is_SB=sc}', "");
Expect(0, 43, '\p{Is_SB=sc}', "");
Expect(1, 43, '\p{^Is_SB=sc}', "");
Expect(1, 43, '\P{Is_SB=sc}', "");
Expect(0, 43, '\P{^Is_SB=sc}', "");
Expect(1, 45, '\p{Is_SB=--SC}', "");
Expect(0, 45, '\p{^Is_SB=--SC}', "");
Expect(0, 45, '\P{Is_SB=--SC}', "");
Expect(1, 45, '\P{^Is_SB=--SC}', "");
Expect(0, 43, '\p{Is_SB=--SC}', "");
Expect(1, 43, '\p{^Is_SB=--SC}', "");
Expect(1, 43, '\P{Is_SB=--SC}', "");
Expect(0, 43, '\P{^Is_SB=--SC}', "");
Error('\p{Sentence_Break=:=--ATerm}');
Error('\P{Sentence_Break=:=--ATerm}');
Expect(1, 46, '\p{Sentence_Break=aterm}', "");
Expect(0, 46, '\p{^Sentence_Break=aterm}', "");
Expect(0, 46, '\P{Sentence_Break=aterm}', "");
Expect(1, 46, '\P{^Sentence_Break=aterm}', "");
Expect(0, 45, '\p{Sentence_Break=aterm}', "");
Expect(1, 45, '\p{^Sentence_Break=aterm}', "");
Expect(1, 45, '\P{Sentence_Break=aterm}', "");
Expect(0, 45, '\P{^Sentence_Break=aterm}', "");
Expect(1, 46, '\p{Sentence_Break=_ ATerm}', "");
Expect(0, 46, '\p{^Sentence_Break=_ ATerm}', "");
Expect(0, 46, '\P{Sentence_Break=_ ATerm}', "");
Expect(1, 46, '\P{^Sentence_Break=_ ATerm}', "");
Expect(0, 45, '\p{Sentence_Break=_ ATerm}', "");
Expect(1, 45, '\p{^Sentence_Break=_ ATerm}', "");
Expect(1, 45, '\P{Sentence_Break=_ ATerm}', "");
Expect(0, 45, '\P{^Sentence_Break=_ ATerm}', "");
Error('\p{SB=:= 	AT}');
Error('\P{SB=:= 	AT}');
Expect(1, 46, '\p{SB=at}', "");
Expect(0, 46, '\p{^SB=at}', "");
Expect(0, 46, '\P{SB=at}', "");
Expect(1, 46, '\P{^SB=at}', "");
Expect(0, 45, '\p{SB=at}', "");
Expect(1, 45, '\p{^SB=at}', "");
Expect(1, 45, '\P{SB=at}', "");
Expect(0, 45, '\P{^SB=at}', "");
Expect(1, 46, '\p{SB=_ AT}', "");
Expect(0, 46, '\p{^SB=_ AT}', "");
Expect(0, 46, '\P{SB=_ AT}', "");
Expect(1, 46, '\P{^SB=_ AT}', "");
Expect(0, 45, '\p{SB=_ AT}', "");
Expect(1, 45, '\p{^SB=_ AT}', "");
Expect(1, 45, '\P{SB=_ AT}', "");
Expect(0, 45, '\P{^SB=_ AT}', "");
Error('\p{Is_Sentence_Break=/a/-ATerm}');
Error('\P{Is_Sentence_Break=/a/-ATerm}');
Expect(1, 46, '\p{Is_Sentence_Break:aterm}', "");
Expect(0, 46, '\p{^Is_Sentence_Break:aterm}', "");
Expect(0, 46, '\P{Is_Sentence_Break:aterm}', "");
Expect(1, 46, '\P{^Is_Sentence_Break:aterm}', "");
Expect(0, 45, '\p{Is_Sentence_Break:aterm}', "");
Expect(1, 45, '\p{^Is_Sentence_Break:aterm}', "");
Expect(1, 45, '\P{Is_Sentence_Break:aterm}', "");
Expect(0, 45, '\P{^Is_Sentence_Break:aterm}', "");
Expect(1, 46, '\p{Is_Sentence_Break=	 aterm}', "");
Expect(0, 46, '\p{^Is_Sentence_Break=	 aterm}', "");
Expect(0, 46, '\P{Is_Sentence_Break=	 aterm}', "");
Expect(1, 46, '\P{^Is_Sentence_Break=	 aterm}', "");
Expect(0, 45, '\p{Is_Sentence_Break=	 aterm}', "");
Expect(1, 45, '\p{^Is_Sentence_Break=	 aterm}', "");
Expect(1, 45, '\P{Is_Sentence_Break=	 aterm}', "");
Expect(0, 45, '\P{^Is_Sentence_Break=	 aterm}', "");
Error('\p{Is_SB:_-AT:=}');
Error('\P{Is_SB:_-AT:=}');
Expect(1, 46, '\p{Is_SB=at}', "");
Expect(0, 46, '\p{^Is_SB=at}', "");
Expect(0, 46, '\P{Is_SB=at}', "");
Expect(1, 46, '\P{^Is_SB=at}', "");
Expect(0, 45, '\p{Is_SB=at}', "");
Expect(1, 45, '\p{^Is_SB=at}', "");
Expect(1, 45, '\P{Is_SB=at}', "");
Expect(0, 45, '\P{^Is_SB=at}', "");
Expect(1, 46, '\p{Is_SB=_AT}', "");
Expect(0, 46, '\p{^Is_SB=_AT}', "");
Expect(0, 46, '\P{Is_SB=_AT}', "");
Expect(1, 46, '\P{^Is_SB=_AT}', "");
Expect(0, 45, '\p{Is_SB=_AT}', "");
Expect(1, 45, '\p{^Is_SB=_AT}', "");
Expect(1, 45, '\P{Is_SB=_AT}', "");
Expect(0, 45, '\P{^Is_SB=_AT}', "");
Error('\p{Sentence_Break=-OLetter:=}');
Error('\P{Sentence_Break=-OLetter:=}');
Expect(1, 443, '\p{Sentence_Break=oletter}', "");
Expect(0, 443, '\p{^Sentence_Break=oletter}', "");
Expect(0, 443, '\P{Sentence_Break=oletter}', "");
Expect(1, 443, '\P{^Sentence_Break=oletter}', "");
Expect(0, 442, '\p{Sentence_Break=oletter}', "");
Expect(1, 442, '\p{^Sentence_Break=oletter}', "");
Expect(1, 442, '\P{Sentence_Break=oletter}', "");
Expect(0, 442, '\P{^Sentence_Break=oletter}', "");
Expect(1, 443, '\p{Sentence_Break=-_OLetter}', "");
Expect(0, 443, '\p{^Sentence_Break=-_OLetter}', "");
Expect(0, 443, '\P{Sentence_Break=-_OLetter}', "");
Expect(1, 443, '\P{^Sentence_Break=-_OLetter}', "");
Expect(0, 442, '\p{Sentence_Break=-_OLetter}', "");
Expect(1, 442, '\p{^Sentence_Break=-_OLetter}', "");
Expect(1, 442, '\P{Sentence_Break=-_OLetter}', "");
Expect(0, 442, '\P{^Sentence_Break=-_OLetter}', "");
Error('\p{SB=:= _LE}');
Error('\P{SB=:= _LE}');
Expect(1, 443, '\p{SB=le}', "");
Expect(0, 443, '\p{^SB=le}', "");
Expect(0, 443, '\P{SB=le}', "");
Expect(1, 443, '\P{^SB=le}', "");
Expect(0, 442, '\p{SB=le}', "");
Expect(1, 442, '\p{^SB=le}', "");
Expect(1, 442, '\P{SB=le}', "");
Expect(0, 442, '\P{^SB=le}', "");
Expect(1, 443, '\p{SB=--LE}', "");
Expect(0, 443, '\p{^SB=--LE}', "");
Expect(0, 443, '\P{SB=--LE}', "");
Expect(1, 443, '\P{^SB=--LE}', "");
Expect(0, 442, '\p{SB=--LE}', "");
Expect(1, 442, '\p{^SB=--LE}', "");
Expect(1, 442, '\P{SB=--LE}', "");
Expect(0, 442, '\P{^SB=--LE}', "");
Error('\p{Is_Sentence_Break=/a/ -oletter}');
Error('\P{Is_Sentence_Break=/a/ -oletter}');
Expect(1, 443, '\p{Is_Sentence_Break=oletter}', "");
Expect(0, 443, '\p{^Is_Sentence_Break=oletter}', "");
Expect(0, 443, '\P{Is_Sentence_Break=oletter}', "");
Expect(1, 443, '\P{^Is_Sentence_Break=oletter}', "");
Expect(0, 442, '\p{Is_Sentence_Break=oletter}', "");
Expect(1, 442, '\p{^Is_Sentence_Break=oletter}', "");
Expect(1, 442, '\P{Is_Sentence_Break=oletter}', "");
Expect(0, 442, '\P{^Is_Sentence_Break=oletter}', "");
Expect(1, 443, '\p{Is_Sentence_Break=_	OLETTER}', "");
Expect(0, 443, '\p{^Is_Sentence_Break=_	OLETTER}', "");
Expect(0, 443, '\P{Is_Sentence_Break=_	OLETTER}', "");
Expect(1, 443, '\P{^Is_Sentence_Break=_	OLETTER}', "");
Expect(0, 442, '\p{Is_Sentence_Break=_	OLETTER}', "");
Expect(1, 442, '\p{^Is_Sentence_Break=_	OLETTER}', "");
Expect(1, 442, '\P{Is_Sentence_Break=_	OLETTER}', "");
Expect(0, 442, '\P{^Is_Sentence_Break=_	OLETTER}', "");
Error('\p{Is_SB=:=LE}');
Error('\P{Is_SB=:=LE}');
Expect(1, 443, '\p{Is_SB=le}', "");
Expect(0, 443, '\p{^Is_SB=le}', "");
Expect(0, 443, '\P{Is_SB=le}', "");
Expect(1, 443, '\P{^Is_SB=le}', "");
Expect(0, 442, '\p{Is_SB=le}', "");
Expect(1, 442, '\p{^Is_SB=le}', "");
Expect(1, 442, '\P{Is_SB=le}', "");
Expect(0, 442, '\P{^Is_SB=le}', "");
Expect(1, 443, '\p{Is_SB= le}', "");
Expect(0, 443, '\p{^Is_SB= le}', "");
Expect(0, 443, '\P{Is_SB= le}', "");
Expect(1, 443, '\P{^Is_SB= le}', "");
Expect(0, 442, '\p{Is_SB= le}', "");
Expect(1, 442, '\p{^Is_SB= le}', "");
Expect(1, 442, '\P{Is_SB= le}', "");
Expect(0, 442, '\P{^Is_SB= le}', "");
Error('\p{Sentence_Break= cr/a/}');
Error('\P{Sentence_Break= cr/a/}');
Expect(1, 13, '\p{Sentence_Break:cr}', "");
Expect(0, 13, '\p{^Sentence_Break:cr}', "");
Expect(0, 13, '\P{Sentence_Break:cr}', "");
Expect(1, 13, '\P{^Sentence_Break:cr}', "");
Expect(0, 12, '\p{Sentence_Break:cr}', "");
Expect(1, 12, '\p{^Sentence_Break:cr}', "");
Expect(1, 12, '\P{Sentence_Break:cr}', "");
Expect(0, 12, '\P{^Sentence_Break:cr}', "");
Expect(1, 13, '\p{Sentence_Break=_	CR}', "");
Expect(0, 13, '\p{^Sentence_Break=_	CR}', "");
Expect(0, 13, '\P{Sentence_Break=_	CR}', "");
Expect(1, 13, '\P{^Sentence_Break=_	CR}', "");
Expect(0, 12, '\p{Sentence_Break=_	CR}', "");
Expect(1, 12, '\p{^Sentence_Break=_	CR}', "");
Expect(1, 12, '\P{Sentence_Break=_	CR}', "");
Expect(0, 12, '\P{^Sentence_Break=_	CR}', "");
Error('\p{SB=-_cr/a/}');
Error('\P{SB=-_cr/a/}');
Expect(1, 13, '\p{SB=cr}', "");
Expect(0, 13, '\p{^SB=cr}', "");
Expect(0, 13, '\P{SB=cr}', "");
Expect(1, 13, '\P{^SB=cr}', "");
Expect(0, 12, '\p{SB=cr}', "");
Expect(1, 12, '\p{^SB=cr}', "");
Expect(1, 12, '\P{SB=cr}', "");
Expect(0, 12, '\P{^SB=cr}', "");
Expect(1, 13, '\p{SB=	-CR}', "");
Expect(0, 13, '\p{^SB=	-CR}', "");
Expect(0, 13, '\P{SB=	-CR}', "");
Expect(1, 13, '\P{^SB=	-CR}', "");
Expect(0, 12, '\p{SB=	-CR}', "");
Expect(1, 12, '\p{^SB=	-CR}', "");
Expect(1, 12, '\P{SB=	-CR}', "");
Expect(0, 12, '\P{^SB=	-CR}', "");
Error('\p{Is_Sentence_Break=  cr/a/}');
Error('\P{Is_Sentence_Break=  cr/a/}');
Expect(1, 13, '\p{Is_Sentence_Break=cr}', "");
Expect(0, 13, '\p{^Is_Sentence_Break=cr}', "");
Expect(0, 13, '\P{Is_Sentence_Break=cr}', "");
Expect(1, 13, '\P{^Is_Sentence_Break=cr}', "");
Expect(0, 12, '\p{Is_Sentence_Break=cr}', "");
Expect(1, 12, '\p{^Is_Sentence_Break=cr}', "");
Expect(1, 12, '\P{Is_Sentence_Break=cr}', "");
Expect(0, 12, '\P{^Is_Sentence_Break=cr}', "");
Expect(1, 13, '\p{Is_Sentence_Break=	_cr}', "");
Expect(0, 13, '\p{^Is_Sentence_Break=	_cr}', "");
Expect(0, 13, '\P{Is_Sentence_Break=	_cr}', "");
Expect(1, 13, '\P{^Is_Sentence_Break=	_cr}', "");
Expect(0, 12, '\p{Is_Sentence_Break=	_cr}', "");
Expect(1, 12, '\p{^Is_Sentence_Break=	_cr}', "");
Expect(1, 12, '\P{Is_Sentence_Break=	_cr}', "");
Expect(0, 12, '\P{^Is_Sentence_Break=	_cr}', "");
Error('\p{Is_SB=:= -CR}');
Error('\P{Is_SB=:= -CR}');
Expect(1, 13, '\p{Is_SB=cr}', "");
Expect(0, 13, '\p{^Is_SB=cr}', "");
Expect(0, 13, '\P{Is_SB=cr}', "");
Expect(1, 13, '\P{^Is_SB=cr}', "");
Expect(0, 12, '\p{Is_SB=cr}', "");
Expect(1, 12, '\p{^Is_SB=cr}', "");
Expect(1, 12, '\P{Is_SB=cr}', "");
Expect(0, 12, '\P{^Is_SB=cr}', "");
Expect(1, 13, '\p{Is_SB=  CR}', "");
Expect(0, 13, '\p{^Is_SB=  CR}', "");
Expect(0, 13, '\P{Is_SB=  CR}', "");
Expect(1, 13, '\P{^Is_SB=  CR}', "");
Expect(0, 12, '\p{Is_SB=  CR}', "");
Expect(1, 12, '\p{^Is_SB=  CR}', "");
Expect(1, 12, '\P{Is_SB=  CR}', "");
Expect(0, 12, '\P{^Is_SB=  CR}', "");
Error('\p{Sentence_Break=/a/ -Other}');
Error('\P{Sentence_Break=/a/ -Other}');
Expect(1, 8, '\p{Sentence_Break=other}', "");
Expect(0, 8, '\p{^Sentence_Break=other}', "");
Expect(0, 8, '\P{Sentence_Break=other}', "");
Expect(1, 8, '\P{^Sentence_Break=other}', "");
Expect(0, 13, '\p{Sentence_Break=other}', "");
Expect(1, 13, '\p{^Sentence_Break=other}', "");
Expect(1, 13, '\P{Sentence_Break=other}', "");
Expect(0, 13, '\P{^Sentence_Break=other}', "");
Expect(1, 8, '\p{Sentence_Break=_other}', "");
Expect(0, 8, '\p{^Sentence_Break=_other}', "");
Expect(0, 8, '\P{Sentence_Break=_other}', "");
Expect(1, 8, '\P{^Sentence_Break=_other}', "");
Expect(0, 13, '\p{Sentence_Break=_other}', "");
Expect(1, 13, '\p{^Sentence_Break=_other}', "");
Expect(1, 13, '\P{Sentence_Break=_other}', "");
Expect(0, 13, '\P{^Sentence_Break=_other}', "");
Error('\p{SB=	xx:=}');
Error('\P{SB=	xx:=}');
Expect(1, 8, '\p{SB=xx}', "");
Expect(0, 8, '\p{^SB=xx}', "");
Expect(0, 8, '\P{SB=xx}', "");
Expect(1, 8, '\P{^SB=xx}', "");
Expect(0, 13, '\p{SB=xx}', "");
Expect(1, 13, '\p{^SB=xx}', "");
Expect(1, 13, '\P{SB=xx}', "");
Expect(0, 13, '\P{^SB=xx}', "");
Expect(1, 8, '\p{SB=--XX}', "");
Expect(0, 8, '\p{^SB=--XX}', "");
Expect(0, 8, '\P{SB=--XX}', "");
Expect(1, 8, '\P{^SB=--XX}', "");
Expect(0, 13, '\p{SB=--XX}', "");
Expect(1, 13, '\p{^SB=--XX}', "");
Expect(1, 13, '\P{SB=--XX}', "");
Expect(0, 13, '\P{^SB=--XX}', "");
Error('\p{Is_Sentence_Break= :=Other}');
Error('\P{Is_Sentence_Break= :=Other}');
Expect(1, 8, '\p{Is_Sentence_Break=other}', "");
Expect(0, 8, '\p{^Is_Sentence_Break=other}', "");
Expect(0, 8, '\P{Is_Sentence_Break=other}', "");
Expect(1, 8, '\P{^Is_Sentence_Break=other}', "");
Expect(0, 13, '\p{Is_Sentence_Break=other}', "");
Expect(1, 13, '\p{^Is_Sentence_Break=other}', "");
Expect(1, 13, '\P{Is_Sentence_Break=other}', "");
Expect(0, 13, '\P{^Is_Sentence_Break=other}', "");
Expect(1, 8, '\p{Is_Sentence_Break=__Other}', "");
Expect(0, 8, '\p{^Is_Sentence_Break=__Other}', "");
Expect(0, 8, '\P{Is_Sentence_Break=__Other}', "");
Expect(1, 8, '\P{^Is_Sentence_Break=__Other}', "");
Expect(0, 13, '\p{Is_Sentence_Break=__Other}', "");
Expect(1, 13, '\p{^Is_Sentence_Break=__Other}', "");
Expect(1, 13, '\P{Is_Sentence_Break=__Other}', "");
Expect(0, 13, '\P{^Is_Sentence_Break=__Other}', "");
Error('\p{Is_SB=_	xx/a/}');
Error('\P{Is_SB=_	xx/a/}');
Expect(1, 8, '\p{Is_SB=xx}', "");
Expect(0, 8, '\p{^Is_SB=xx}', "");
Expect(0, 8, '\P{Is_SB=xx}', "");
Expect(1, 8, '\P{^Is_SB=xx}', "");
Expect(0, 13, '\p{Is_SB=xx}', "");
Expect(1, 13, '\p{^Is_SB=xx}', "");
Expect(1, 13, '\P{Is_SB=xx}', "");
Expect(0, 13, '\P{^Is_SB=xx}', "");
Expect(1, 8, '\p{Is_SB=_ XX}', "");
Expect(0, 8, '\p{^Is_SB=_ XX}', "");
Expect(0, 8, '\P{Is_SB=_ XX}', "");
Expect(1, 8, '\P{^Is_SB=_ XX}', "");
Expect(0, 13, '\p{Is_SB=_ XX}', "");
Expect(1, 13, '\p{^Is_SB=_ XX}', "");
Expect(1, 13, '\P{Is_SB=_ XX}', "");
Expect(0, 13, '\P{^Is_SB=_ XX}', "");
Error('\p{Sentence_Break= :=Numeric}');
Error('\P{Sentence_Break= :=Numeric}');
Expect(1, 57, '\p{Sentence_Break=numeric}', "");
Expect(0, 57, '\p{^Sentence_Break=numeric}', "");
Expect(0, 57, '\P{Sentence_Break=numeric}', "");
Expect(1, 57, '\P{^Sentence_Break=numeric}', "");
Expect(0, 47, '\p{Sentence_Break=numeric}', "");
Expect(1, 47, '\p{^Sentence_Break=numeric}', "");
Expect(1, 47, '\P{Sentence_Break=numeric}', "");
Expect(0, 47, '\P{^Sentence_Break=numeric}', "");
Expect(1, 57, '\p{Sentence_Break=_	NUMERIC}', "");
Expect(0, 57, '\p{^Sentence_Break=_	NUMERIC}', "");
Expect(0, 57, '\P{Sentence_Break=_	NUMERIC}', "");
Expect(1, 57, '\P{^Sentence_Break=_	NUMERIC}', "");
Expect(0, 47, '\p{Sentence_Break=_	NUMERIC}', "");
Expect(1, 47, '\p{^Sentence_Break=_	NUMERIC}', "");
Expect(1, 47, '\P{Sentence_Break=_	NUMERIC}', "");
Expect(0, 47, '\P{^Sentence_Break=_	NUMERIC}', "");
Error('\p{SB=:=	_nu}');
Error('\P{SB=:=	_nu}');
Expect(1, 57, '\p{SB=nu}', "");
Expect(0, 57, '\p{^SB=nu}', "");
Expect(0, 57, '\P{SB=nu}', "");
Expect(1, 57, '\P{^SB=nu}', "");
Expect(0, 47, '\p{SB=nu}', "");
Expect(1, 47, '\p{^SB=nu}', "");
Expect(1, 47, '\P{SB=nu}', "");
Expect(0, 47, '\P{^SB=nu}', "");
Expect(1, 57, '\p{SB=_NU}', "");
Expect(0, 57, '\p{^SB=_NU}', "");
Expect(0, 57, '\P{SB=_NU}', "");
Expect(1, 57, '\P{^SB=_NU}', "");
Expect(0, 47, '\p{SB=_NU}', "");
Expect(1, 47, '\p{^SB=_NU}', "");
Expect(1, 47, '\P{SB=_NU}', "");
Expect(0, 47, '\P{^SB=_NU}', "");
Error('\p{Is_Sentence_Break=_-numeric/a/}');
Error('\P{Is_Sentence_Break=_-numeric/a/}');
Expect(1, 57, '\p{Is_Sentence_Break=numeric}', "");
Expect(0, 57, '\p{^Is_Sentence_Break=numeric}', "");
Expect(0, 57, '\P{Is_Sentence_Break=numeric}', "");
Expect(1, 57, '\P{^Is_Sentence_Break=numeric}', "");
Expect(0, 47, '\p{Is_Sentence_Break=numeric}', "");
Expect(1, 47, '\p{^Is_Sentence_Break=numeric}', "");
Expect(1, 47, '\P{Is_Sentence_Break=numeric}', "");
Expect(0, 47, '\P{^Is_Sentence_Break=numeric}', "");
Expect(1, 57, '\p{Is_Sentence_Break=	_numeric}', "");
Expect(0, 57, '\p{^Is_Sentence_Break=	_numeric}', "");
Expect(0, 57, '\P{Is_Sentence_Break=	_numeric}', "");
Expect(1, 57, '\P{^Is_Sentence_Break=	_numeric}', "");
Expect(0, 47, '\p{Is_Sentence_Break=	_numeric}', "");
Expect(1, 47, '\p{^Is_Sentence_Break=	_numeric}', "");
Expect(1, 47, '\P{Is_Sentence_Break=	_numeric}', "");
Expect(0, 47, '\P{^Is_Sentence_Break=	_numeric}', "");
Error('\p{Is_SB= /a/NU}');
Error('\P{Is_SB= /a/NU}');
Expect(1, 57, '\p{Is_SB=nu}', "");
Expect(0, 57, '\p{^Is_SB=nu}', "");
Expect(0, 57, '\P{Is_SB=nu}', "");
Expect(1, 57, '\P{^Is_SB=nu}', "");
Expect(0, 47, '\p{Is_SB=nu}', "");
Expect(1, 47, '\p{^Is_SB=nu}', "");
Expect(1, 47, '\P{Is_SB=nu}', "");
Expect(0, 47, '\P{^Is_SB=nu}', "");
Expect(1, 57, '\p{Is_SB=_NU}', "");
Expect(0, 57, '\p{^Is_SB=_NU}', "");
Expect(0, 57, '\P{Is_SB=_NU}', "");
Expect(1, 57, '\P{^Is_SB=_NU}', "");
Expect(0, 47, '\p{Is_SB=_NU}', "");
Expect(1, 47, '\p{^Is_SB=_NU}', "");
Expect(1, 47, '\P{Is_SB=_NU}', "");
Expect(0, 47, '\P{^Is_SB=_NU}', "");
Error('\p{Sentence_Break=/a/	_Format}');
Error('\P{Sentence_Break=/a/	_Format}');
Expect(1, 173, '\p{Sentence_Break=format}', "");
Expect(0, 173, '\p{^Sentence_Break=format}', "");
Expect(0, 173, '\P{Sentence_Break=format}', "");
Expect(1, 173, '\P{^Sentence_Break=format}', "");
Expect(0, 172, '\p{Sentence_Break=format}', "");
Expect(1, 172, '\p{^Sentence_Break=format}', "");
Expect(1, 172, '\P{Sentence_Break=format}', "");
Expect(0, 172, '\P{^Sentence_Break=format}', "");
Expect(1, 173, '\p{Sentence_Break= 	FORMAT}', "");
Expect(0, 173, '\p{^Sentence_Break= 	FORMAT}', "");
Expect(0, 173, '\P{Sentence_Break= 	FORMAT}', "");
Expect(1, 173, '\P{^Sentence_Break= 	FORMAT}', "");
Expect(0, 172, '\p{Sentence_Break= 	FORMAT}', "");
Expect(1, 172, '\p{^Sentence_Break= 	FORMAT}', "");
Expect(1, 172, '\P{Sentence_Break= 	FORMAT}', "");
Expect(0, 172, '\P{^Sentence_Break= 	FORMAT}', "");
Error('\p{SB=:=-FO}');
Error('\P{SB=:=-FO}');
Expect(1, 173, '\p{SB=fo}', "");
Expect(0, 173, '\p{^SB=fo}', "");
Expect(0, 173, '\P{SB=fo}', "");
Expect(1, 173, '\P{^SB=fo}', "");
Expect(0, 172, '\p{SB=fo}', "");
Expect(1, 172, '\p{^SB=fo}', "");
Expect(1, 172, '\P{SB=fo}', "");
Expect(0, 172, '\P{^SB=fo}', "");
Expect(1, 173, '\p{SB=--fo}', "");
Expect(0, 173, '\p{^SB=--fo}', "");
Expect(0, 173, '\P{SB=--fo}', "");
Expect(1, 173, '\P{^SB=--fo}', "");
Expect(0, 172, '\p{SB=--fo}', "");
Expect(1, 172, '\p{^SB=--fo}', "");
Expect(1, 172, '\P{SB=--fo}', "");
Expect(0, 172, '\P{^SB=--fo}', "");
Error('\p{Is_Sentence_Break= /a/Format}');
Error('\P{Is_Sentence_Break= /a/Format}');
Expect(1, 173, '\p{Is_Sentence_Break=format}', "");
Expect(0, 173, '\p{^Is_Sentence_Break=format}', "");
Expect(0, 173, '\P{Is_Sentence_Break=format}', "");
Expect(1, 173, '\P{^Is_Sentence_Break=format}', "");
Expect(0, 172, '\p{Is_Sentence_Break=format}', "");
Expect(1, 172, '\p{^Is_Sentence_Break=format}', "");
Expect(1, 172, '\P{Is_Sentence_Break=format}', "");
Expect(0, 172, '\P{^Is_Sentence_Break=format}', "");
Expect(1, 173, '\p{Is_Sentence_Break=_	format}', "");
Expect(0, 173, '\p{^Is_Sentence_Break=_	format}', "");
Expect(0, 173, '\P{Is_Sentence_Break=_	format}', "");
Expect(1, 173, '\P{^Is_Sentence_Break=_	format}', "");
Expect(0, 172, '\p{Is_Sentence_Break=_	format}', "");
Expect(1, 172, '\p{^Is_Sentence_Break=_	format}', "");
Expect(1, 172, '\P{Is_Sentence_Break=_	format}', "");
Expect(0, 172, '\P{^Is_Sentence_Break=_	format}', "");
Error('\p{Is_SB= :=fo}');
Error('\P{Is_SB= :=fo}');
Expect(1, 173, '\p{Is_SB: fo}', "");
Expect(0, 173, '\p{^Is_SB: fo}', "");
Expect(0, 173, '\P{Is_SB: fo}', "");
Expect(1, 173, '\P{^Is_SB: fo}', "");
Expect(0, 172, '\p{Is_SB: fo}', "");
Expect(1, 172, '\p{^Is_SB: fo}', "");
Expect(1, 172, '\P{Is_SB: fo}', "");
Expect(0, 172, '\P{^Is_SB: fo}', "");
Expect(1, 173, '\p{Is_SB=-_FO}', "");
Expect(0, 173, '\p{^Is_SB=-_FO}', "");
Expect(0, 173, '\P{Is_SB=-_FO}', "");
Expect(1, 173, '\P{^Is_SB=-_FO}', "");
Expect(0, 172, '\p{Is_SB=-_FO}', "");
Expect(1, 172, '\p{^Is_SB=-_FO}', "");
Expect(1, 172, '\P{Is_SB=-_FO}', "");
Expect(0, 172, '\P{^Is_SB=-_FO}', "");
Error('\p{Sentence_Break=-:=lower}');
Error('\P{Sentence_Break=-:=lower}');
Expect(1, 122, '\p{Sentence_Break=lower}', "");
Expect(0, 122, '\p{^Sentence_Break=lower}', "");
Expect(0, 122, '\P{Sentence_Break=lower}', "");
Expect(1, 122, '\P{^Sentence_Break=lower}', "");
Expect(0, 96, '\p{Sentence_Break=lower}', "");
Expect(1, 96, '\p{^Sentence_Break=lower}', "");
Expect(1, 96, '\P{Sentence_Break=lower}', "");
Expect(0, 96, '\P{^Sentence_Break=lower}', "");
Expect(1, 122, '\p{Sentence_Break=-Lower}', "");
Expect(0, 122, '\p{^Sentence_Break=-Lower}', "");
Expect(0, 122, '\P{Sentence_Break=-Lower}', "");
Expect(1, 122, '\P{^Sentence_Break=-Lower}', "");
Expect(0, 96, '\p{Sentence_Break=-Lower}', "");
Expect(1, 96, '\p{^Sentence_Break=-Lower}', "");
Expect(1, 96, '\P{Sentence_Break=-Lower}', "");
Expect(0, 96, '\P{^Sentence_Break=-Lower}', "");
Error('\p{SB=/a/__LO}');
Error('\P{SB=/a/__LO}');
Expect(1, 122, '\p{SB:   lo}', "");
Expect(0, 122, '\p{^SB:   lo}', "");
Expect(0, 122, '\P{SB:   lo}', "");
Expect(1, 122, '\P{^SB:   lo}', "");
Expect(0, 96, '\p{SB:   lo}', "");
Expect(1, 96, '\p{^SB:   lo}', "");
Expect(1, 96, '\P{SB:   lo}', "");
Expect(0, 96, '\P{^SB:   lo}', "");
Expect(1, 122, '\p{SB=		LO}', "");
Expect(0, 122, '\p{^SB=		LO}', "");
Expect(0, 122, '\P{SB=		LO}', "");
Expect(1, 122, '\P{^SB=		LO}', "");
Expect(0, 96, '\p{SB=		LO}', "");
Expect(1, 96, '\p{^SB=		LO}', "");
Expect(1, 96, '\P{SB=		LO}', "");
Expect(0, 96, '\P{^SB=		LO}', "");
Error('\p{Is_Sentence_Break=/a/	Lower}');
Error('\P{Is_Sentence_Break=/a/	Lower}');
Expect(1, 122, '\p{Is_Sentence_Break=lower}', "");
Expect(0, 122, '\p{^Is_Sentence_Break=lower}', "");
Expect(0, 122, '\P{Is_Sentence_Break=lower}', "");
Expect(1, 122, '\P{^Is_Sentence_Break=lower}', "");
Expect(0, 96, '\p{Is_Sentence_Break=lower}', "");
Expect(1, 96, '\p{^Is_Sentence_Break=lower}', "");
Expect(1, 96, '\P{Is_Sentence_Break=lower}', "");
Expect(0, 96, '\P{^Is_Sentence_Break=lower}', "");
Expect(1, 122, '\p{Is_Sentence_Break= _lower}', "");
Expect(0, 122, '\p{^Is_Sentence_Break= _lower}', "");
Expect(0, 122, '\P{Is_Sentence_Break= _lower}', "");
Expect(1, 122, '\P{^Is_Sentence_Break= _lower}', "");
Expect(0, 96, '\p{Is_Sentence_Break= _lower}', "");
Expect(1, 96, '\p{^Is_Sentence_Break= _lower}', "");
Expect(1, 96, '\P{Is_Sentence_Break= _lower}', "");
Expect(0, 96, '\P{^Is_Sentence_Break= _lower}', "");
Error('\p{Is_SB=	:=LO}');
Error('\P{Is_SB=	:=LO}');
Expect(1, 122, '\p{Is_SB=lo}', "");
Expect(0, 122, '\p{^Is_SB=lo}', "");
Expect(0, 122, '\P{Is_SB=lo}', "");
Expect(1, 122, '\P{^Is_SB=lo}', "");
Expect(0, 96, '\p{Is_SB=lo}', "");
Expect(1, 96, '\p{^Is_SB=lo}', "");
Expect(1, 96, '\P{Is_SB=lo}', "");
Expect(0, 96, '\P{^Is_SB=lo}', "");
Expect(1, 122, '\p{Is_SB=--LO}', "");
Expect(0, 122, '\p{^Is_SB=--LO}', "");
Expect(0, 122, '\P{Is_SB=--LO}', "");
Expect(1, 122, '\P{^Is_SB=--LO}', "");
Expect(0, 96, '\p{Is_SB=--LO}', "");
Expect(1, 96, '\p{^Is_SB=--LO}', "");
Expect(1, 96, '\P{Is_SB=--LO}', "");
Expect(0, 96, '\P{^Is_SB=--LO}', "");
Error('\p{Sentence_Break=		UPPER/a/}');
Error('\P{Sentence_Break=		UPPER/a/}');
Expect(1, 90, '\p{Sentence_Break:   upper}', "");
Expect(0, 90, '\p{^Sentence_Break:   upper}', "");
Expect(0, 90, '\P{Sentence_Break:   upper}', "");
Expect(1, 90, '\P{^Sentence_Break:   upper}', "");
Expect(0, 64, '\p{Sentence_Break:   upper}', "");
Expect(1, 64, '\p{^Sentence_Break:   upper}', "");
Expect(1, 64, '\P{Sentence_Break:   upper}', "");
Expect(0, 64, '\P{^Sentence_Break:   upper}', "");
Expect(1, 90, '\p{Sentence_Break: 	UPPER}', "");
Expect(0, 90, '\p{^Sentence_Break: 	UPPER}', "");
Expect(0, 90, '\P{Sentence_Break: 	UPPER}', "");
Expect(1, 90, '\P{^Sentence_Break: 	UPPER}', "");
Expect(0, 64, '\p{Sentence_Break: 	UPPER}', "");
Expect(1, 64, '\p{^Sentence_Break: 	UPPER}', "");
Expect(1, 64, '\P{Sentence_Break: 	UPPER}', "");
Expect(0, 64, '\P{^Sentence_Break: 	UPPER}', "");
Error('\p{SB:	-:=up}');
Error('\P{SB:	-:=up}');
Expect(1, 90, '\p{SB=up}', "");
Expect(0, 90, '\p{^SB=up}', "");
Expect(0, 90, '\P{SB=up}', "");
Expect(1, 90, '\P{^SB=up}', "");
Expect(0, 64, '\p{SB=up}', "");
Expect(1, 64, '\p{^SB=up}', "");
Expect(1, 64, '\P{SB=up}', "");
Expect(0, 64, '\P{^SB=up}', "");
Expect(1, 90, '\p{SB=-up}', "");
Expect(0, 90, '\p{^SB=-up}', "");
Expect(0, 90, '\P{SB=-up}', "");
Expect(1, 90, '\P{^SB=-up}', "");
Expect(0, 64, '\p{SB=-up}', "");
Expect(1, 64, '\p{^SB=-up}', "");
Expect(1, 64, '\P{SB=-up}', "");
Expect(0, 64, '\P{^SB=-up}', "");
Error('\p{Is_Sentence_Break=_-UPPER:=}');
Error('\P{Is_Sentence_Break=_-UPPER:=}');
Expect(1, 90, '\p{Is_Sentence_Break=upper}', "");
Expect(0, 90, '\p{^Is_Sentence_Break=upper}', "");
Expect(0, 90, '\P{Is_Sentence_Break=upper}', "");
Expect(1, 90, '\P{^Is_Sentence_Break=upper}', "");
Expect(0, 64, '\p{Is_Sentence_Break=upper}', "");
Expect(1, 64, '\p{^Is_Sentence_Break=upper}', "");
Expect(1, 64, '\P{Is_Sentence_Break=upper}', "");
Expect(0, 64, '\P{^Is_Sentence_Break=upper}', "");
Expect(1, 90, '\p{Is_Sentence_Break=	Upper}', "");
Expect(0, 90, '\p{^Is_Sentence_Break=	Upper}', "");
Expect(0, 90, '\P{Is_Sentence_Break=	Upper}', "");
Expect(1, 90, '\P{^Is_Sentence_Break=	Upper}', "");
Expect(0, 64, '\p{Is_Sentence_Break=	Upper}', "");
Expect(1, 64, '\p{^Is_Sentence_Break=	Upper}', "");
Expect(1, 64, '\P{Is_Sentence_Break=	Upper}', "");
Expect(0, 64, '\P{^Is_Sentence_Break=	Upper}', "");
Error('\p{Is_SB=_/a/UP}');
Error('\P{Is_SB=_/a/UP}');
Expect(1, 90, '\p{Is_SB=up}', "");
Expect(0, 90, '\p{^Is_SB=up}', "");
Expect(0, 90, '\P{Is_SB=up}', "");
Expect(1, 90, '\P{^Is_SB=up}', "");
Expect(0, 64, '\p{Is_SB=up}', "");
Expect(1, 64, '\p{^Is_SB=up}', "");
Expect(1, 64, '\P{Is_SB=up}', "");
Expect(0, 64, '\P{^Is_SB=up}', "");
Expect(1, 90, '\p{Is_SB=_	UP}', "");
Expect(0, 90, '\p{^Is_SB=_	UP}', "");
Expect(0, 90, '\P{Is_SB=_	UP}', "");
Expect(1, 90, '\P{^Is_SB=_	UP}', "");
Expect(0, 64, '\p{Is_SB=_	UP}', "");
Expect(1, 64, '\p{^Is_SB=_	UP}', "");
Expect(1, 64, '\P{Is_SB=_	UP}', "");
Expect(0, 64, '\P{^Is_SB=_	UP}', "");
Error('\p{Sentence_Break:-:=sep}');
Error('\P{Sentence_Break:-:=sep}');
Expect(1, 133, '\p{Sentence_Break=sep}', "");
Expect(0, 133, '\p{^Sentence_Break=sep}', "");
Expect(0, 133, '\P{Sentence_Break=sep}', "");
Expect(1, 133, '\P{^Sentence_Break=sep}', "");
Expect(0, 132, '\p{Sentence_Break=sep}', "");
Expect(1, 132, '\p{^Sentence_Break=sep}', "");
Expect(1, 132, '\P{Sentence_Break=sep}', "");
Expect(0, 132, '\P{^Sentence_Break=sep}', "");
Expect(1, 133, '\p{Sentence_Break= 	SEP}', "");
Expect(0, 133, '\p{^Sentence_Break= 	SEP}', "");
Expect(0, 133, '\P{Sentence_Break= 	SEP}', "");
Expect(1, 133, '\P{^Sentence_Break= 	SEP}', "");
Expect(0, 132, '\p{Sentence_Break= 	SEP}', "");
Expect(1, 132, '\p{^Sentence_Break= 	SEP}', "");
Expect(1, 132, '\P{Sentence_Break= 	SEP}', "");
Expect(0, 132, '\P{^Sentence_Break= 	SEP}', "");
Error('\p{SB=_:=SE}');
Error('\P{SB=_:=SE}');
Expect(1, 133, '\p{SB=se}', "");
Expect(0, 133, '\p{^SB=se}', "");
Expect(0, 133, '\P{SB=se}', "");
Expect(1, 133, '\P{^SB=se}', "");
Expect(0, 132, '\p{SB=se}', "");
Expect(1, 132, '\p{^SB=se}', "");
Expect(1, 132, '\P{SB=se}', "");
Expect(0, 132, '\P{^SB=se}', "");
Expect(1, 133, '\p{SB=__SE}', "");
Expect(0, 133, '\p{^SB=__SE}', "");
Expect(0, 133, '\P{SB=__SE}', "");
Expect(1, 133, '\P{^SB=__SE}', "");
Expect(0, 132, '\p{SB=__SE}', "");
Expect(1, 132, '\p{^SB=__SE}', "");
Expect(1, 132, '\P{SB=__SE}', "");
Expect(0, 132, '\P{^SB=__SE}', "");
Error('\p{Is_Sentence_Break=:= 	Sep}');
Error('\P{Is_Sentence_Break=:= 	Sep}');
Expect(1, 133, '\p{Is_Sentence_Break=sep}', "");
Expect(0, 133, '\p{^Is_Sentence_Break=sep}', "");
Expect(0, 133, '\P{Is_Sentence_Break=sep}', "");
Expect(1, 133, '\P{^Is_Sentence_Break=sep}', "");
Expect(0, 132, '\p{Is_Sentence_Break=sep}', "");
Expect(1, 132, '\p{^Is_Sentence_Break=sep}', "");
Expect(1, 132, '\P{Is_Sentence_Break=sep}', "");
Expect(0, 132, '\P{^Is_Sentence_Break=sep}', "");
Expect(1, 133, '\p{Is_Sentence_Break= Sep}', "");
Expect(0, 133, '\p{^Is_Sentence_Break= Sep}', "");
Expect(0, 133, '\P{Is_Sentence_Break= Sep}', "");
Expect(1, 133, '\P{^Is_Sentence_Break= Sep}', "");
Expect(0, 132, '\p{Is_Sentence_Break= Sep}', "");
Expect(1, 132, '\p{^Is_Sentence_Break= Sep}', "");
Expect(1, 132, '\P{Is_Sentence_Break= Sep}', "");
Expect(0, 132, '\P{^Is_Sentence_Break= Sep}', "");
Error('\p{Is_SB=/a/_-se}');
Error('\P{Is_SB=/a/_-se}');
Expect(1, 133, '\p{Is_SB=se}', "");
Expect(0, 133, '\p{^Is_SB=se}', "");
Expect(0, 133, '\P{Is_SB=se}', "");
Expect(1, 133, '\P{^Is_SB=se}', "");
Expect(0, 132, '\p{Is_SB=se}', "");
Expect(1, 132, '\p{^Is_SB=se}', "");
Expect(1, 132, '\P{Is_SB=se}', "");
Expect(0, 132, '\P{^Is_SB=se}', "");
Expect(1, 133, '\p{Is_SB=-_se}', "");
Expect(0, 133, '\p{^Is_SB=-_se}', "");
Expect(0, 133, '\P{Is_SB=-_se}', "");
Expect(1, 133, '\P{^Is_SB=-_se}', "");
Expect(0, 132, '\p{Is_SB=-_se}', "");
Expect(1, 132, '\p{^Is_SB=-_se}', "");
Expect(1, 132, '\P{Is_SB=-_se}', "");
Expect(0, 132, '\P{^Is_SB=-_se}', "");
Error('\p{Sentence_Break:   :=_	Extend}');
Error('\P{Sentence_Break:   :=_	Extend}');
Expect(1, 879, '\p{Sentence_Break=extend}', "");
Expect(0, 879, '\p{^Sentence_Break=extend}', "");
Expect(0, 879, '\P{Sentence_Break=extend}', "");
Expect(1, 879, '\P{^Sentence_Break=extend}', "");
Expect(0, 767, '\p{Sentence_Break=extend}', "");
Expect(1, 767, '\p{^Sentence_Break=extend}', "");
Expect(1, 767, '\P{Sentence_Break=extend}', "");
Expect(0, 767, '\P{^Sentence_Break=extend}', "");
Expect(1, 879, '\p{Sentence_Break= _Extend}', "");
Expect(0, 879, '\p{^Sentence_Break= _Extend}', "");
Expect(0, 879, '\P{Sentence_Break= _Extend}', "");
Expect(1, 879, '\P{^Sentence_Break= _Extend}', "");
Expect(0, 767, '\p{Sentence_Break= _Extend}', "");
Expect(1, 767, '\p{^Sentence_Break= _Extend}', "");
Expect(1, 767, '\P{Sentence_Break= _Extend}', "");
Expect(0, 767, '\P{^Sentence_Break= _Extend}', "");
Error('\p{SB=-:=ex}');
Error('\P{SB=-:=ex}');
Expect(1, 879, '\p{SB=ex}', "");
Expect(0, 879, '\p{^SB=ex}', "");
Expect(0, 879, '\P{SB=ex}', "");
Expect(1, 879, '\P{^SB=ex}', "");
Expect(0, 767, '\p{SB=ex}', "");
Expect(1, 767, '\p{^SB=ex}', "");
Expect(1, 767, '\P{SB=ex}', "");
Expect(0, 767, '\P{^SB=ex}', "");
Expect(1, 879, '\p{SB=	_ex}', "");
Expect(0, 879, '\p{^SB=	_ex}', "");
Expect(0, 879, '\P{SB=	_ex}', "");
Expect(1, 879, '\P{^SB=	_ex}', "");
Expect(0, 767, '\p{SB=	_ex}', "");
Expect(1, 767, '\p{^SB=	_ex}', "");
Expect(1, 767, '\P{SB=	_ex}', "");
Expect(0, 767, '\P{^SB=	_ex}', "");
Error('\p{Is_Sentence_Break: 	_extend:=}');
Error('\P{Is_Sentence_Break: 	_extend:=}');
Expect(1, 879, '\p{Is_Sentence_Break=extend}', "");
Expect(0, 879, '\p{^Is_Sentence_Break=extend}', "");
Expect(0, 879, '\P{Is_Sentence_Break=extend}', "");
Expect(1, 879, '\P{^Is_Sentence_Break=extend}', "");
Expect(0, 767, '\p{Is_Sentence_Break=extend}', "");
Expect(1, 767, '\p{^Is_Sentence_Break=extend}', "");
Expect(1, 767, '\P{Is_Sentence_Break=extend}', "");
Expect(0, 767, '\P{^Is_Sentence_Break=extend}', "");
Expect(1, 879, '\p{Is_Sentence_Break=-_extend}', "");
Expect(0, 879, '\p{^Is_Sentence_Break=-_extend}', "");
Expect(0, 879, '\P{Is_Sentence_Break=-_extend}', "");
Expect(1, 879, '\P{^Is_Sentence_Break=-_extend}', "");
Expect(0, 767, '\p{Is_Sentence_Break=-_extend}', "");
Expect(1, 767, '\p{^Is_Sentence_Break=-_extend}', "");
Expect(1, 767, '\P{Is_Sentence_Break=-_extend}', "");
Expect(0, 767, '\P{^Is_Sentence_Break=-_extend}', "");
Error('\p{Is_SB=	:=EX}');
Error('\P{Is_SB=	:=EX}');
Expect(1, 879, '\p{Is_SB=ex}', "");
Expect(0, 879, '\p{^Is_SB=ex}', "");
Expect(0, 879, '\P{Is_SB=ex}', "");
Expect(1, 879, '\P{^Is_SB=ex}', "");
Expect(0, 767, '\p{Is_SB=ex}', "");
Expect(1, 767, '\p{^Is_SB=ex}', "");
Expect(1, 767, '\P{Is_SB=ex}', "");
Expect(0, 767, '\P{^Is_SB=ex}', "");
Expect(1, 879, '\p{Is_SB=-EX}', "");
Expect(0, 879, '\p{^Is_SB=-EX}', "");
Expect(0, 879, '\P{Is_SB=-EX}', "");
Expect(1, 879, '\P{^Is_SB=-EX}', "");
Expect(0, 767, '\p{Is_SB=-EX}', "");
Expect(1, 767, '\p{^Is_SB=-EX}', "");
Expect(1, 767, '\P{Is_SB=-EX}', "");
Expect(0, 767, '\P{^Is_SB=-EX}', "");
Error('\p{Sentence_Break= sterm:=}');
Error('\P{Sentence_Break= sterm:=}');
Expect(1, 33, '\p{Sentence_Break=sterm}', "");
Expect(0, 33, '\p{^Sentence_Break=sterm}', "");
Expect(0, 33, '\P{Sentence_Break=sterm}', "");
Expect(1, 33, '\P{^Sentence_Break=sterm}', "");
Expect(0, 32, '\p{Sentence_Break=sterm}', "");
Expect(1, 32, '\p{^Sentence_Break=sterm}', "");
Expect(1, 32, '\P{Sentence_Break=sterm}', "");
Expect(0, 32, '\P{^Sentence_Break=sterm}', "");
Expect(1, 33, '\p{Sentence_Break=		sterm}', "");
Expect(0, 33, '\p{^Sentence_Break=		sterm}', "");
Expect(0, 33, '\P{Sentence_Break=		sterm}', "");
Expect(1, 33, '\P{^Sentence_Break=		sterm}', "");
Expect(0, 32, '\p{Sentence_Break=		sterm}', "");
Expect(1, 32, '\p{^Sentence_Break=		sterm}', "");
Expect(1, 32, '\P{Sentence_Break=		sterm}', "");
Expect(0, 32, '\P{^Sentence_Break=		sterm}', "");
Error('\p{SB=_:=ST}');
Error('\P{SB=_:=ST}');
Expect(1, 33, '\p{SB:	st}', "");
Expect(0, 33, '\p{^SB:	st}', "");
Expect(0, 33, '\P{SB:	st}', "");
Expect(1, 33, '\P{^SB:	st}', "");
Expect(0, 32, '\p{SB:	st}', "");
Expect(1, 32, '\p{^SB:	st}', "");
Expect(1, 32, '\P{SB:	st}', "");
Expect(0, 32, '\P{^SB:	st}', "");
Expect(1, 33, '\p{SB=-_st}', "");
Expect(0, 33, '\p{^SB=-_st}', "");
Expect(0, 33, '\P{SB=-_st}', "");
Expect(1, 33, '\P{^SB=-_st}', "");
Expect(0, 32, '\p{SB=-_st}', "");
Expect(1, 32, '\p{^SB=-_st}', "");
Expect(1, 32, '\P{SB=-_st}', "");
Expect(0, 32, '\P{^SB=-_st}', "");
Error('\p{Is_Sentence_Break=- sterm:=}');
Error('\P{Is_Sentence_Break=- sterm:=}');
Expect(1, 33, '\p{Is_Sentence_Break=sterm}', "");
Expect(0, 33, '\p{^Is_Sentence_Break=sterm}', "");
Expect(0, 33, '\P{Is_Sentence_Break=sterm}', "");
Expect(1, 33, '\P{^Is_Sentence_Break=sterm}', "");
Expect(0, 32, '\p{Is_Sentence_Break=sterm}', "");
Expect(1, 32, '\p{^Is_Sentence_Break=sterm}', "");
Expect(1, 32, '\P{Is_Sentence_Break=sterm}', "");
Expect(0, 32, '\P{^Is_Sentence_Break=sterm}', "");
Expect(1, 33, '\p{Is_Sentence_Break=--sterm}', "");
Expect(0, 33, '\p{^Is_Sentence_Break=--sterm}', "");
Expect(0, 33, '\P{Is_Sentence_Break=--sterm}', "");
Expect(1, 33, '\P{^Is_Sentence_Break=--sterm}', "");
Expect(0, 32, '\p{Is_Sentence_Break=--sterm}', "");
Expect(1, 32, '\p{^Is_Sentence_Break=--sterm}', "");
Expect(1, 32, '\P{Is_Sentence_Break=--sterm}', "");
Expect(0, 32, '\P{^Is_Sentence_Break=--sterm}', "");
Error('\p{Is_SB=-ST:=}');
Error('\P{Is_SB=-ST:=}');
Expect(1, 33, '\p{Is_SB=st}', "");
Expect(0, 33, '\p{^Is_SB=st}', "");
Expect(0, 33, '\P{Is_SB=st}', "");
Expect(1, 33, '\P{^Is_SB=st}', "");
Expect(0, 32, '\p{Is_SB=st}', "");
Expect(1, 32, '\p{^Is_SB=st}', "");
Expect(1, 32, '\P{Is_SB=st}', "");
Expect(0, 32, '\P{^Is_SB=st}', "");
Expect(1, 33, '\p{Is_SB= 	ST}', "");
Expect(0, 33, '\p{^Is_SB= 	ST}', "");
Expect(0, 33, '\P{Is_SB= 	ST}', "");
Expect(1, 33, '\P{^Is_SB= 	ST}', "");
Expect(0, 32, '\p{Is_SB= 	ST}', "");
Expect(1, 32, '\p{^Is_SB= 	ST}', "");
Expect(1, 32, '\P{Is_SB= 	ST}', "");
Expect(0, 32, '\P{^Is_SB= 	ST}', "");
Error('\p{Sentence_Break=	/a/LF}');
Error('\P{Sentence_Break=	/a/LF}');
Expect(1, 10, '\p{Sentence_Break=lf}', "");
Expect(0, 10, '\p{^Sentence_Break=lf}', "");
Expect(0, 10, '\P{Sentence_Break=lf}', "");
Expect(1, 10, '\P{^Sentence_Break=lf}', "");
Expect(0, 9, '\p{Sentence_Break=lf}', "");
Expect(1, 9, '\p{^Sentence_Break=lf}', "");
Expect(1, 9, '\P{Sentence_Break=lf}', "");
Expect(0, 9, '\P{^Sentence_Break=lf}', "");
Expect(1, 10, '\p{Sentence_Break=	 LF}', "");
Expect(0, 10, '\p{^Sentence_Break=	 LF}', "");
Expect(0, 10, '\P{Sentence_Break=	 LF}', "");
Expect(1, 10, '\P{^Sentence_Break=	 LF}', "");
Expect(0, 9, '\p{Sentence_Break=	 LF}', "");
Expect(1, 9, '\p{^Sentence_Break=	 LF}', "");
Expect(1, 9, '\P{Sentence_Break=	 LF}', "");
Expect(0, 9, '\P{^Sentence_Break=	 LF}', "");
Error('\p{SB=	/a/LF}');
Error('\P{SB=	/a/LF}');
Expect(1, 10, '\p{SB:	lf}', "");
Expect(0, 10, '\p{^SB:	lf}', "");
Expect(0, 10, '\P{SB:	lf}', "");
Expect(1, 10, '\P{^SB:	lf}', "");
Expect(0, 9, '\p{SB:	lf}', "");
Expect(1, 9, '\p{^SB:	lf}', "");
Expect(1, 9, '\P{SB:	lf}', "");
Expect(0, 9, '\P{^SB:	lf}', "");
Expect(1, 10, '\p{SB=-	LF}', "");
Expect(0, 10, '\p{^SB=-	LF}', "");
Expect(0, 10, '\P{SB=-	LF}', "");
Expect(1, 10, '\P{^SB=-	LF}', "");
Expect(0, 9, '\p{SB=-	LF}', "");
Expect(1, 9, '\p{^SB=-	LF}', "");
Expect(1, 9, '\P{SB=-	LF}', "");
Expect(0, 9, '\P{^SB=-	LF}', "");
Error('\p{Is_Sentence_Break:/a/	-LF}');
Error('\P{Is_Sentence_Break:/a/	-LF}');
Expect(1, 10, '\p{Is_Sentence_Break=lf}', "");
Expect(0, 10, '\p{^Is_Sentence_Break=lf}', "");
Expect(0, 10, '\P{Is_Sentence_Break=lf}', "");
Expect(1, 10, '\P{^Is_Sentence_Break=lf}', "");
Expect(0, 9, '\p{Is_Sentence_Break=lf}', "");
Expect(1, 9, '\p{^Is_Sentence_Break=lf}', "");
Expect(1, 9, '\P{Is_Sentence_Break=lf}', "");
Expect(0, 9, '\P{^Is_Sentence_Break=lf}', "");
Expect(1, 10, '\p{Is_Sentence_Break:_ LF}', "");
Expect(0, 10, '\p{^Is_Sentence_Break:_ LF}', "");
Expect(0, 10, '\P{Is_Sentence_Break:_ LF}', "");
Expect(1, 10, '\P{^Is_Sentence_Break:_ LF}', "");
Expect(0, 9, '\p{Is_Sentence_Break:_ LF}', "");
Expect(1, 9, '\p{^Is_Sentence_Break:_ LF}', "");
Expect(1, 9, '\P{Is_Sentence_Break:_ LF}', "");
Expect(0, 9, '\P{^Is_Sentence_Break:_ LF}', "");
Error('\p{Is_SB:    /a/lf}');
Error('\P{Is_SB:    /a/lf}');
Expect(1, 10, '\p{Is_SB=lf}', "");
Expect(0, 10, '\p{^Is_SB=lf}', "");
Expect(0, 10, '\P{Is_SB=lf}', "");
Expect(1, 10, '\P{^Is_SB=lf}', "");
Expect(0, 9, '\p{Is_SB=lf}', "");
Expect(1, 9, '\p{^Is_SB=lf}', "");
Expect(1, 9, '\P{Is_SB=lf}', "");
Expect(0, 9, '\P{^Is_SB=lf}', "");
Expect(1, 10, '\p{Is_SB= -LF}', "");
Expect(0, 10, '\p{^Is_SB= -LF}', "");
Expect(0, 10, '\P{Is_SB= -LF}', "");
Expect(1, 10, '\P{^Is_SB= -LF}', "");
Expect(0, 9, '\p{Is_SB= -LF}', "");
Expect(1, 9, '\p{^Is_SB= -LF}', "");
Expect(1, 9, '\P{Is_SB= -LF}', "");
Expect(0, 9, '\P{^Is_SB= -LF}', "");
Error('\p{Sentence_Break: -:=Close}');
Error('\P{Sentence_Break: -:=Close}');
Expect(1, 34, '\p{Sentence_Break=close}', "");
Expect(0, 34, '\p{^Sentence_Break=close}', "");
Expect(0, 34, '\P{Sentence_Break=close}', "");
Expect(1, 34, '\P{^Sentence_Break=close}', "");
Expect(0, 33, '\p{Sentence_Break=close}', "");
Expect(1, 33, '\p{^Sentence_Break=close}', "");
Expect(1, 33, '\P{Sentence_Break=close}', "");
Expect(0, 33, '\P{^Sentence_Break=close}', "");
Expect(1, 34, '\p{Sentence_Break=	 CLOSE}', "");
Expect(0, 34, '\p{^Sentence_Break=	 CLOSE}', "");
Expect(0, 34, '\P{Sentence_Break=	 CLOSE}', "");
Expect(1, 34, '\P{^Sentence_Break=	 CLOSE}', "");
Expect(0, 33, '\p{Sentence_Break=	 CLOSE}', "");
Expect(1, 33, '\p{^Sentence_Break=	 CLOSE}', "");
Expect(1, 33, '\P{Sentence_Break=	 CLOSE}', "");
Expect(0, 33, '\P{^Sentence_Break=	 CLOSE}', "");
Error('\p{SB=_/a/cl}');
Error('\P{SB=_/a/cl}');
Expect(1, 34, '\p{SB=cl}', "");
Expect(0, 34, '\p{^SB=cl}', "");
Expect(0, 34, '\P{SB=cl}', "");
Expect(1, 34, '\P{^SB=cl}', "");
Expect(0, 33, '\p{SB=cl}', "");
Expect(1, 33, '\p{^SB=cl}', "");
Expect(1, 33, '\P{SB=cl}', "");
Expect(0, 33, '\P{^SB=cl}', "");
Expect(1, 34, '\p{SB=_-CL}', "");
Expect(0, 34, '\p{^SB=_-CL}', "");
Expect(0, 34, '\P{SB=_-CL}', "");
Expect(1, 34, '\P{^SB=_-CL}', "");
Expect(0, 33, '\p{SB=_-CL}', "");
Expect(1, 33, '\p{^SB=_-CL}', "");
Expect(1, 33, '\P{SB=_-CL}', "");
Expect(0, 33, '\P{^SB=_-CL}', "");
Error('\p{Is_Sentence_Break=_/a/Close}');
Error('\P{Is_Sentence_Break=_/a/Close}');
Expect(1, 34, '\p{Is_Sentence_Break=close}', "");
Expect(0, 34, '\p{^Is_Sentence_Break=close}', "");
Expect(0, 34, '\P{Is_Sentence_Break=close}', "");
Expect(1, 34, '\P{^Is_Sentence_Break=close}', "");
Expect(0, 33, '\p{Is_Sentence_Break=close}', "");
Expect(1, 33, '\p{^Is_Sentence_Break=close}', "");
Expect(1, 33, '\P{Is_Sentence_Break=close}', "");
Expect(0, 33, '\P{^Is_Sentence_Break=close}', "");
Expect(1, 34, '\p{Is_Sentence_Break=-_Close}', "");
Expect(0, 34, '\p{^Is_Sentence_Break=-_Close}', "");
Expect(0, 34, '\P{Is_Sentence_Break=-_Close}', "");
Expect(1, 34, '\P{^Is_Sentence_Break=-_Close}', "");
Expect(0, 33, '\p{Is_Sentence_Break=-_Close}', "");
Expect(1, 33, '\p{^Is_Sentence_Break=-_Close}', "");
Expect(1, 33, '\P{Is_Sentence_Break=-_Close}', "");
Expect(0, 33, '\P{^Is_Sentence_Break=-_Close}', "");
Error('\p{Is_SB=_CL:=}');
Error('\P{Is_SB=_CL:=}');
Expect(1, 34, '\p{Is_SB=cl}', "");
Expect(0, 34, '\p{^Is_SB=cl}', "");
Expect(0, 34, '\P{Is_SB=cl}', "");
Expect(1, 34, '\P{^Is_SB=cl}', "");
Expect(0, 33, '\p{Is_SB=cl}', "");
Expect(1, 33, '\p{^Is_SB=cl}', "");
Expect(1, 33, '\P{Is_SB=cl}', "");
Expect(0, 33, '\P{^Is_SB=cl}', "");
Expect(1, 34, '\p{Is_SB= CL}', "");
Expect(0, 34, '\p{^Is_SB= CL}', "");
Expect(0, 34, '\P{Is_SB= CL}', "");
Expect(1, 34, '\P{^Is_SB= CL}', "");
Expect(0, 33, '\p{Is_SB= CL}', "");
Expect(1, 33, '\p{^Is_SB= CL}', "");
Expect(1, 33, '\P{Is_SB= CL}', "");
Expect(0, 33, '\P{^Is_SB= CL}', "");
Error('\p{Alphabetic=-:=Yes}');
Error('\P{Alphabetic=-:=Yes}');
Expect(1, 90, '\p{Alphabetic=yes}', "");
Expect(0, 90, '\p{^Alphabetic=yes}', "");
Expect(0, 90, '\P{Alphabetic=yes}', "");
Expect(1, 90, '\P{^Alphabetic=yes}', "");
Expect(0, 64, '\p{Alphabetic=yes}', "");
Expect(1, 64, '\p{^Alphabetic=yes}', "");
Expect(1, 64, '\P{Alphabetic=yes}', "");
Expect(0, 64, '\P{^Alphabetic=yes}', "");
Expect(1, 90, '\p{Alphabetic:	- YES}', "");
Expect(0, 90, '\p{^Alphabetic:	- YES}', "");
Expect(0, 90, '\P{Alphabetic:	- YES}', "");
Expect(1, 90, '\P{^Alphabetic:	- YES}', "");
Expect(0, 64, '\p{Alphabetic:	- YES}', "");
Expect(1, 64, '\p{^Alphabetic:	- YES}', "");
Expect(1, 64, '\P{Alphabetic:	- YES}', "");
Expect(0, 64, '\P{^Alphabetic:	- YES}', "");
Error('\p{Alpha=/a/Y}');
Error('\P{Alpha=/a/Y}');
Expect(1, 90, '\p{Alpha=y}', "");
Expect(0, 90, '\p{^Alpha=y}', "");
Expect(0, 90, '\P{Alpha=y}', "");
Expect(1, 90, '\P{^Alpha=y}', "");
Expect(0, 64, '\p{Alpha=y}', "");
Expect(1, 64, '\p{^Alpha=y}', "");
Expect(1, 64, '\P{Alpha=y}', "");
Expect(0, 64, '\P{^Alpha=y}', "");
Expect(1, 90, '\p{Alpha=_y}', "");
Expect(0, 90, '\p{^Alpha=_y}', "");
Expect(0, 90, '\P{Alpha=_y}', "");
Expect(1, 90, '\P{^Alpha=_y}', "");
Expect(0, 64, '\p{Alpha=_y}', "");
Expect(1, 64, '\p{^Alpha=_y}', "");
Expect(1, 64, '\P{Alpha=_y}', "");
Expect(0, 64, '\P{^Alpha=_y}', "");
Error('\p{Is_Alphabetic= :=T}');
Error('\P{Is_Alphabetic= :=T}');
Expect(1, 90, '\p{Is_Alphabetic=t}', "");
Expect(0, 90, '\p{^Is_Alphabetic=t}', "");
Expect(0, 90, '\P{Is_Alphabetic=t}', "");
Expect(1, 90, '\P{^Is_Alphabetic=t}', "");
Expect(0, 64, '\p{Is_Alphabetic=t}', "");
Expect(1, 64, '\p{^Is_Alphabetic=t}', "");
Expect(1, 64, '\P{Is_Alphabetic=t}', "");
Expect(0, 64, '\P{^Is_Alphabetic=t}', "");
Expect(1, 90, '\p{Is_Alphabetic= _t}', "");
Expect(0, 90, '\p{^Is_Alphabetic= _t}', "");
Expect(0, 90, '\P{Is_Alphabetic= _t}', "");
Expect(1, 90, '\P{^Is_Alphabetic= _t}', "");
Expect(0, 64, '\p{Is_Alphabetic= _t}', "");
Expect(1, 64, '\p{^Is_Alphabetic= _t}', "");
Expect(1, 64, '\P{Is_Alphabetic= _t}', "");
Expect(0, 64, '\P{^Is_Alphabetic= _t}', "");
Error('\p{Is_Alpha=:=	-TRUE}');
Error('\P{Is_Alpha=:=	-TRUE}');
Expect(1, 90, '\p{Is_Alpha=true}', "");
Expect(0, 90, '\p{^Is_Alpha=true}', "");
Expect(0, 90, '\P{Is_Alpha=true}', "");
Expect(1, 90, '\P{^Is_Alpha=true}', "");
Expect(0, 64, '\p{Is_Alpha=true}', "");
Expect(1, 64, '\p{^Is_Alpha=true}', "");
Expect(1, 64, '\P{Is_Alpha=true}', "");
Expect(0, 64, '\P{^Is_Alpha=true}', "");
Expect(1, 90, '\p{Is_Alpha=	True}', "");
Expect(0, 90, '\p{^Is_Alpha=	True}', "");
Expect(0, 90, '\P{Is_Alpha=	True}', "");
Expect(1, 90, '\P{^Is_Alpha=	True}', "");
Expect(0, 64, '\p{Is_Alpha=	True}', "");
Expect(1, 64, '\p{^Is_Alpha=	True}', "");
Expect(1, 64, '\P{Is_Alpha=	True}', "");
Expect(0, 64, '\P{^Is_Alpha=	True}', "");
Error('\p{Alphabetic: :=	_no}');
Error('\P{Alphabetic: :=	_no}');
Expect(1, 64, '\p{Alphabetic=no}', "");
Expect(0, 64, '\p{^Alphabetic=no}', "");
Expect(0, 64, '\P{Alphabetic=no}', "");
Expect(1, 64, '\P{^Alphabetic=no}', "");
Expect(0, 90, '\p{Alphabetic=no}', "");
Expect(1, 90, '\p{^Alphabetic=no}', "");
Expect(1, 90, '\P{Alphabetic=no}', "");
Expect(0, 90, '\P{^Alphabetic=no}', "");
Expect(1, 64, '\p{Alphabetic:   -No}', "");
Expect(0, 64, '\p{^Alphabetic:   -No}', "");
Expect(0, 64, '\P{Alphabetic:   -No}', "");
Expect(1, 64, '\P{^Alphabetic:   -No}', "");
Expect(0, 90, '\p{Alphabetic:   -No}', "");
Expect(1, 90, '\p{^Alphabetic:   -No}', "");
Expect(1, 90, '\P{Alphabetic:   -No}', "");
Expect(0, 90, '\P{^Alphabetic:   -No}', "");
Error('\p{Alpha=:=_n}');
Error('\P{Alpha=:=_n}');
Expect(1, 64, '\p{Alpha=n}', "");
Expect(0, 64, '\p{^Alpha=n}', "");
Expect(0, 64, '\P{Alpha=n}', "");
Expect(1, 64, '\P{^Alpha=n}', "");
Expect(0, 90, '\p{Alpha=n}', "");
Expect(1, 90, '\p{^Alpha=n}', "");
Expect(1, 90, '\P{Alpha=n}', "");
Expect(0, 90, '\P{^Alpha=n}', "");
Expect(1, 64, '\p{Alpha=- N}', "");
Expect(0, 64, '\p{^Alpha=- N}', "");
Expect(0, 64, '\P{Alpha=- N}', "");
Expect(1, 64, '\P{^Alpha=- N}', "");
Expect(0, 90, '\p{Alpha=- N}', "");
Expect(1, 90, '\p{^Alpha=- N}', "");
Expect(1, 90, '\P{Alpha=- N}', "");
Expect(0, 90, '\P{^Alpha=- N}', "");
Error('\p{Is_Alphabetic=	_f/a/}');
Error('\P{Is_Alphabetic=	_f/a/}');
Expect(1, 64, '\p{Is_Alphabetic=f}', "");
Expect(0, 64, '\p{^Is_Alphabetic=f}', "");
Expect(0, 64, '\P{Is_Alphabetic=f}', "");
Expect(1, 64, '\P{^Is_Alphabetic=f}', "");
Expect(0, 90, '\p{Is_Alphabetic=f}', "");
Expect(1, 90, '\p{^Is_Alphabetic=f}', "");
Expect(1, 90, '\P{Is_Alphabetic=f}', "");
Expect(0, 90, '\P{^Is_Alphabetic=f}', "");
Expect(1, 64, '\p{Is_Alphabetic= -f}', "");
Expect(0, 64, '\p{^Is_Alphabetic= -f}', "");
Expect(0, 64, '\P{Is_Alphabetic= -f}', "");
Expect(1, 64, '\P{^Is_Alphabetic= -f}', "");
Expect(0, 90, '\p{Is_Alphabetic= -f}', "");
Expect(1, 90, '\p{^Is_Alphabetic= -f}', "");
Expect(1, 90, '\P{Is_Alphabetic= -f}', "");
Expect(0, 90, '\P{^Is_Alphabetic= -f}', "");
Error('\p{Is_Alpha=:= 	FALSE}');
Error('\P{Is_Alpha=:= 	FALSE}');
Expect(1, 64, '\p{Is_Alpha=false}', "");
Expect(0, 64, '\p{^Is_Alpha=false}', "");
Expect(0, 64, '\P{Is_Alpha=false}', "");
Expect(1, 64, '\P{^Is_Alpha=false}', "");
Expect(0, 90, '\p{Is_Alpha=false}', "");
Expect(1, 90, '\p{^Is_Alpha=false}', "");
Expect(1, 90, '\P{Is_Alpha=false}', "");
Expect(0, 90, '\P{^Is_Alpha=false}', "");
Expect(1, 64, '\p{Is_Alpha=--FALSE}', "");
Expect(0, 64, '\p{^Is_Alpha=--FALSE}', "");
Expect(0, 64, '\P{Is_Alpha=--FALSE}', "");
Expect(1, 64, '\P{^Is_Alpha=--FALSE}', "");
Expect(0, 90, '\p{Is_Alpha=--FALSE}', "");
Expect(1, 90, '\p{^Is_Alpha=--FALSE}', "");
Expect(1, 90, '\P{Is_Alpha=--FALSE}', "");
Expect(0, 90, '\P{^Is_Alpha=--FALSE}', "");
Error('\p{Hex_Digit=/a/  YES}');
Error('\P{Hex_Digit=/a/  YES}');
Expect(1, 57, '\p{Hex_Digit:   yes}', "");
Expect(0, 57, '\p{^Hex_Digit:   yes}', "");
Expect(0, 57, '\P{Hex_Digit:   yes}', "");
Expect(1, 57, '\P{^Hex_Digit:   yes}', "");
Expect(0, 47, '\p{Hex_Digit:   yes}', "");
Expect(1, 47, '\p{^Hex_Digit:   yes}', "");
Expect(1, 47, '\P{Hex_Digit:   yes}', "");
Expect(0, 47, '\P{^Hex_Digit:   yes}', "");
Expect(1, 57, '\p{Hex_Digit=_-yes}', "");
Expect(0, 57, '\p{^Hex_Digit=_-yes}', "");
Expect(0, 57, '\P{Hex_Digit=_-yes}', "");
Expect(1, 57, '\P{^Hex_Digit=_-yes}', "");
Expect(0, 47, '\p{Hex_Digit=_-yes}', "");
Expect(1, 47, '\p{^Hex_Digit=_-yes}', "");
Expect(1, 47, '\P{Hex_Digit=_-yes}', "");
Expect(0, 47, '\P{^Hex_Digit=_-yes}', "");
Error('\p{Hex=:=- Y}');
Error('\P{Hex=:=- Y}');
Expect(1, 57, '\p{Hex:y}', "");
Expect(0, 57, '\p{^Hex:y}', "");
Expect(0, 57, '\P{Hex:y}', "");
Expect(1, 57, '\P{^Hex:y}', "");
Expect(0, 47, '\p{Hex:y}', "");
Expect(1, 47, '\p{^Hex:y}', "");
Expect(1, 47, '\P{Hex:y}', "");
Expect(0, 47, '\P{^Hex:y}', "");
Expect(1, 57, '\p{Hex=_	y}', "");
Expect(0, 57, '\p{^Hex=_	y}', "");
Expect(0, 57, '\P{Hex=_	y}', "");
Expect(1, 57, '\P{^Hex=_	y}', "");
Expect(0, 47, '\p{Hex=_	y}', "");
Expect(1, 47, '\p{^Hex=_	y}', "");
Expect(1, 47, '\P{Hex=_	y}', "");
Expect(0, 47, '\P{^Hex=_	y}', "");
Error('\p{Is_Hex_Digit=_t/a/}');
Error('\P{Is_Hex_Digit=_t/a/}');
Expect(1, 57, '\p{Is_Hex_Digit=t}', "");
Expect(0, 57, '\p{^Is_Hex_Digit=t}', "");
Expect(0, 57, '\P{Is_Hex_Digit=t}', "");
Expect(1, 57, '\P{^Is_Hex_Digit=t}', "");
Expect(0, 47, '\p{Is_Hex_Digit=t}', "");
Expect(1, 47, '\p{^Is_Hex_Digit=t}', "");
Expect(1, 47, '\P{Is_Hex_Digit=t}', "");
Expect(0, 47, '\P{^Is_Hex_Digit=t}', "");
Expect(1, 57, '\p{Is_Hex_Digit=-t}', "");
Expect(0, 57, '\p{^Is_Hex_Digit=-t}', "");
Expect(0, 57, '\P{Is_Hex_Digit=-t}', "");
Expect(1, 57, '\P{^Is_Hex_Digit=-t}', "");
Expect(0, 47, '\p{Is_Hex_Digit=-t}', "");
Expect(1, 47, '\p{^Is_Hex_Digit=-t}', "");
Expect(1, 47, '\P{Is_Hex_Digit=-t}', "");
Expect(0, 47, '\P{^Is_Hex_Digit=-t}', "");
Error('\p{Is_Hex=  True:=}');
Error('\P{Is_Hex=  True:=}');
Expect(1, 57, '\p{Is_Hex=true}', "");
Expect(0, 57, '\p{^Is_Hex=true}', "");
Expect(0, 57, '\P{Is_Hex=true}', "");
Expect(1, 57, '\P{^Is_Hex=true}', "");
Expect(0, 47, '\p{Is_Hex=true}', "");
Expect(1, 47, '\p{^Is_Hex=true}', "");
Expect(1, 47, '\P{Is_Hex=true}', "");
Expect(0, 47, '\P{^Is_Hex=true}', "");
Expect(1, 57, '\p{Is_Hex=- True}', "");
Expect(0, 57, '\p{^Is_Hex=- True}', "");
Expect(0, 57, '\P{Is_Hex=- True}', "");
Expect(1, 57, '\P{^Is_Hex=- True}', "");
Expect(0, 47, '\p{Is_Hex=- True}', "");
Expect(1, 47, '\p{^Is_Hex=- True}', "");
Expect(1, 47, '\P{Is_Hex=- True}', "");
Expect(0, 47, '\P{^Is_Hex=- True}', "");
Error('\p{Hex_Digit:   :=-_NO}');
Error('\P{Hex_Digit:   :=-_NO}');
Expect(1, 47, '\p{Hex_Digit=no}', "");
Expect(0, 47, '\p{^Hex_Digit=no}', "");
Expect(0, 47, '\P{Hex_Digit=no}', "");
Expect(1, 47, '\P{^Hex_Digit=no}', "");
Expect(0, 57, '\p{Hex_Digit=no}', "");
Expect(1, 57, '\p{^Hex_Digit=no}', "");
Expect(1, 57, '\P{Hex_Digit=no}', "");
Expect(0, 57, '\P{^Hex_Digit=no}', "");
Expect(1, 47, '\p{Hex_Digit=_NO}', "");
Expect(0, 47, '\p{^Hex_Digit=_NO}', "");
Expect(0, 47, '\P{Hex_Digit=_NO}', "");
Expect(1, 47, '\P{^Hex_Digit=_NO}', "");
Expect(0, 57, '\p{Hex_Digit=_NO}', "");
Expect(1, 57, '\p{^Hex_Digit=_NO}', "");
Expect(1, 57, '\P{Hex_Digit=_NO}', "");
Expect(0, 57, '\P{^Hex_Digit=_NO}', "");
Error('\p{Hex=_	N/a/}');
Error('\P{Hex=_	N/a/}');
Expect(1, 47, '\p{Hex=n}', "");
Expect(0, 47, '\p{^Hex=n}', "");
Expect(0, 47, '\P{Hex=n}', "");
Expect(1, 47, '\P{^Hex=n}', "");
Expect(0, 57, '\p{Hex=n}', "");
Expect(1, 57, '\p{^Hex=n}', "");
Expect(1, 57, '\P{Hex=n}', "");
Expect(0, 57, '\P{^Hex=n}', "");
Expect(1, 47, '\p{Hex:   -N}', "");
Expect(0, 47, '\p{^Hex:   -N}', "");
Expect(0, 47, '\P{Hex:   -N}', "");
Expect(1, 47, '\P{^Hex:   -N}', "");
Expect(0, 57, '\p{Hex:   -N}', "");
Expect(1, 57, '\p{^Hex:   -N}', "");
Expect(1, 57, '\P{Hex:   -N}', "");
Expect(0, 57, '\P{^Hex:   -N}', "");
Error('\p{Is_Hex_Digit=_F/a/}');
Error('\P{Is_Hex_Digit=_F/a/}');
Expect(1, 47, '\p{Is_Hex_Digit=f}', "");
Expect(0, 47, '\p{^Is_Hex_Digit=f}', "");
Expect(0, 47, '\P{Is_Hex_Digit=f}', "");
Expect(1, 47, '\P{^Is_Hex_Digit=f}', "");
Expect(0, 57, '\p{Is_Hex_Digit=f}', "");
Expect(1, 57, '\p{^Is_Hex_Digit=f}', "");
Expect(1, 57, '\P{Is_Hex_Digit=f}', "");
Expect(0, 57, '\P{^Is_Hex_Digit=f}', "");
Expect(1, 47, '\p{Is_Hex_Digit=	_F}', "");
Expect(0, 47, '\p{^Is_Hex_Digit=	_F}', "");
Expect(0, 47, '\P{Is_Hex_Digit=	_F}', "");
Expect(1, 47, '\P{^Is_Hex_Digit=	_F}', "");
Expect(0, 57, '\p{Is_Hex_Digit=	_F}', "");
Expect(1, 57, '\p{^Is_Hex_Digit=	_F}', "");
Expect(1, 57, '\P{Is_Hex_Digit=	_F}', "");
Expect(0, 57, '\P{^Is_Hex_Digit=	_F}', "");
Error('\p{Is_Hex:  FALSE/a/}');
Error('\P{Is_Hex:  FALSE/a/}');
Expect(1, 47, '\p{Is_Hex=false}', "");
Expect(0, 47, '\p{^Is_Hex=false}', "");
Expect(0, 47, '\P{Is_Hex=false}', "");
Expect(1, 47, '\P{^Is_Hex=false}', "");
Expect(0, 57, '\p{Is_Hex=false}', "");
Expect(1, 57, '\p{^Is_Hex=false}', "");
Expect(1, 57, '\P{Is_Hex=false}', "");
Expect(0, 57, '\P{^Is_Hex=false}', "");
Expect(1, 47, '\p{Is_Hex=  false}', "");
Expect(0, 47, '\p{^Is_Hex=  false}', "");
Expect(0, 47, '\P{Is_Hex=  false}', "");
Expect(1, 47, '\P{^Is_Hex=  false}', "");
Expect(0, 57, '\p{Is_Hex=  false}', "");
Expect(1, 57, '\p{^Is_Hex=  false}', "");
Expect(1, 57, '\P{Is_Hex=  false}', "");
Expect(0, 57, '\P{^Is_Hex=  false}', "");
Error('\p{Canonical_Combining_Class=:= _00032}');
Error('\P{Canonical_Combining_Class=:= _00032}');
Expect(1, 1562, '\p{Canonical_Combining_Class=+00_00_03_2}', "");
Expect(0, 1562, '\p{^Canonical_Combining_Class=+00_00_03_2}', "");
Expect(0, 1562, '\P{Canonical_Combining_Class=+00_00_03_2}', "");
Expect(1, 1562, '\P{^Canonical_Combining_Class=+00_00_03_2}', "");
Expect(0, 1561, '\p{Canonical_Combining_Class=+00_00_03_2}', "");
Expect(1, 1561, '\p{^Canonical_Combining_Class=+00_00_03_2}', "");
Expect(1, 1561, '\P{Canonical_Combining_Class=+00_00_03_2}', "");
Expect(0, 1561, '\P{^Canonical_Combining_Class=+00_00_03_2}', "");
Error('\p{Ccc=0:=0	0	0 0	32}');
Error('\P{Ccc=0:=0	0	0 0	32}');
Expect(1, 1562, '\p{Ccc=0032}', "");
Expect(0, 1562, '\p{^Ccc=0032}', "");
Expect(0, 1562, '\P{Ccc=0032}', "");
Expect(1, 1562, '\P{^Ccc=0032}', "");
Expect(0, 1561, '\p{Ccc=0032}', "");
Expect(1, 1561, '\p{^Ccc=0032}', "");
Expect(1, 1561, '\P{Ccc=0032}', "");
Expect(0, 1561, '\P{^Ccc=0032}', "");
Error('\p{Is_Canonical_Combining_Class=_	0 0/a/0_0	00_32}');
Error('\P{Is_Canonical_Combining_Class=_	0 0/a/0_0	00_32}');
Expect(1, 1562, '\p{Is_Canonical_Combining_Class=000000032}', "");
Expect(0, 1562, '\p{^Is_Canonical_Combining_Class=000000032}', "");
Expect(0, 1562, '\P{Is_Canonical_Combining_Class=000000032}', "");
Expect(1, 1562, '\P{^Is_Canonical_Combining_Class=000000032}', "");
Expect(0, 1561, '\p{Is_Canonical_Combining_Class=000000032}', "");
Expect(1, 1561, '\p{^Is_Canonical_Combining_Class=000000032}', "");
Expect(1, 1561, '\P{Is_Canonical_Combining_Class=000000032}', "");
Expect(0, 1561, '\P{^Is_Canonical_Combining_Class=000000032}', "");
Error('\p{Is_Ccc=_0/a/0 000	0_00032}');
Error('\P{Is_Ccc=_0/a/0 000	0_00032}');
Expect(1, 1562, '\p{Is_Ccc=00000000032}', "");
Expect(0, 1562, '\p{^Is_Ccc=00000000032}', "");
Expect(0, 1562, '\P{Is_Ccc=00000000032}', "");
Expect(1, 1562, '\P{^Is_Ccc=00000000032}', "");
Expect(0, 1561, '\p{Is_Ccc=00000000032}', "");
Expect(1, 1561, '\p{^Is_Ccc=00000000032}', "");
Expect(1, 1561, '\P{Is_Ccc=00000000032}', "");
Expect(0, 1561, '\P{^Is_Ccc=00000000032}', "");
Error('\p{Canonical_Combining_Class=--+000000000118:=}');
Error('\P{Canonical_Combining_Class=--+000000000118:=}');
Expect(1, 3769, '\p{Canonical_Combining_Class=000118}', "");
Expect(0, 3769, '\p{^Canonical_Combining_Class=000118}', "");
Expect(0, 3769, '\P{Canonical_Combining_Class=000118}', "");
Expect(1, 3769, '\P{^Canonical_Combining_Class=000118}', "");
Expect(0, 3767, '\p{Canonical_Combining_Class=000118}', "");
Expect(1, 3767, '\p{^Canonical_Combining_Class=000118}', "");
Expect(1, 3767, '\P{Canonical_Combining_Class=000118}', "");
Expect(0, 3767, '\P{^Canonical_Combining_Class=000118}', "");
Error('\p{Ccc=_+0_0	0	0_0/a/0 0_01_18}');
Error('\P{Ccc=_+0_0	0	0_0/a/0 0_01_18}');
Expect(1, 3769, '\p{Ccc=+00_11_8}', "");
Expect(0, 3769, '\p{^Ccc=+00_11_8}', "");
Expect(0, 3769, '\P{Ccc=+00_11_8}', "");
Expect(1, 3769, '\P{^Ccc=+00_11_8}', "");
Expect(0, 3767, '\p{Ccc=+00_11_8}', "");
Expect(1, 3767, '\p{^Ccc=+00_11_8}', "");
Expect(1, 3767, '\P{Ccc=+00_11_8}', "");
Expect(0, 3767, '\P{^Ccc=+00_11_8}', "");
Error('\p{Is_Canonical_Combining_Class=/a/_0000118}');
Error('\P{Is_Canonical_Combining_Class=/a/_0000118}');
Expect(1, 3769, '\p{Is_Canonical_Combining_Class=000000118}', "");
Expect(0, 3769, '\p{^Is_Canonical_Combining_Class=000000118}', "");
Expect(0, 3769, '\P{Is_Canonical_Combining_Class=000000118}', "");
Expect(1, 3769, '\P{^Is_Canonical_Combining_Class=000000118}', "");
Expect(0, 3767, '\p{Is_Canonical_Combining_Class=000000118}', "");
Expect(1, 3767, '\p{^Is_Canonical_Combining_Class=000000118}', "");
Expect(1, 3767, '\P{Is_Canonical_Combining_Class=000000118}', "");
Expect(0, 3767, '\P{^Is_Canonical_Combining_Class=000000118}', "");
Error('\p{Is_Ccc=/a/ -118}');
Error('\P{Is_Ccc=/a/ -118}');
Expect(1, 3769, '\p{Is_Ccc=000118}', "");
Expect(0, 3769, '\p{^Is_Ccc=000118}', "");
Expect(0, 3769, '\P{Is_Ccc=000118}', "");
Expect(1, 3769, '\P{^Is_Ccc=000118}', "");
Expect(0, 3767, '\p{Is_Ccc=000118}', "");
Expect(1, 3767, '\p{^Is_Ccc=000118}', "");
Expect(1, 3767, '\P{Is_Ccc=000118}', "");
Expect(0, 3767, '\P{^Is_Ccc=000118}', "");
Error('\p{Canonical_Combining_Class=	 double Above:=}');
Error('\P{Canonical_Combining_Class=	 double Above:=}');
Expect(1, 862, '\p{Canonical_Combining_Class=doubleabove}', "");
Expect(0, 862, '\p{^Canonical_Combining_Class=doubleabove}', "");
Expect(0, 862, '\P{Canonical_Combining_Class=doubleabove}', "");
Expect(1, 862, '\P{^Canonical_Combining_Class=doubleabove}', "");
Expect(0, 860, '\p{Canonical_Combining_Class=doubleabove}', "");
Expect(1, 860, '\p{^Canonical_Combining_Class=doubleabove}', "");
Expect(1, 860, '\P{Canonical_Combining_Class=doubleabove}', "");
Expect(0, 860, '\P{^Canonical_Combining_Class=doubleabove}', "");
Expect(1, 862, '\p{Canonical_Combining_Class=--DOUBLE	Above}', "");
Expect(0, 862, '\p{^Canonical_Combining_Class=--DOUBLE	Above}', "");
Expect(0, 862, '\P{Canonical_Combining_Class=--DOUBLE	Above}', "");
Expect(1, 862, '\P{^Canonical_Combining_Class=--DOUBLE	Above}', "");
Expect(0, 860, '\p{Canonical_Combining_Class=--DOUBLE	Above}', "");
Expect(1, 860, '\p{^Canonical_Combining_Class=--DOUBLE	Above}', "");
Expect(1, 860, '\P{Canonical_Combining_Class=--DOUBLE	Above}', "");
Expect(0, 860, '\P{^Canonical_Combining_Class=--DOUBLE	Above}', "");
Error('\p{Ccc= -DA/a/}');
Error('\P{Ccc= -DA/a/}');
Expect(1, 862, '\p{Ccc:   da}', "");
Expect(0, 862, '\p{^Ccc:   da}', "");
Expect(0, 862, '\P{Ccc:   da}', "");
Expect(1, 862, '\P{^Ccc:   da}', "");
Expect(0, 860, '\p{Ccc:   da}', "");
Expect(1, 860, '\p{^Ccc:   da}', "");
Expect(1, 860, '\P{Ccc:   da}', "");
Expect(0, 860, '\P{^Ccc:   da}', "");
Expect(1, 862, '\p{Ccc=-DA}', "");
Expect(0, 862, '\p{^Ccc=-DA}', "");
Expect(0, 862, '\P{Ccc=-DA}', "");
Expect(1, 862, '\P{^Ccc=-DA}', "");
Expect(0, 860, '\p{Ccc=-DA}', "");
Expect(1, 860, '\p{^Ccc=-DA}', "");
Expect(1, 860, '\P{Ccc=-DA}', "");
Expect(0, 860, '\P{^Ccc=-DA}', "");
Error('\p{Is_Canonical_Combining_Class=:=000234}');
Error('\P{Is_Canonical_Combining_Class=:=000234}');
Expect(1, 862, '\p{Is_Canonical_Combining_Class=00234}', "");
Expect(0, 862, '\p{^Is_Canonical_Combining_Class=00234}', "");
Expect(0, 862, '\P{Is_Canonical_Combining_Class=00234}', "");
Expect(1, 862, '\P{^Is_Canonical_Combining_Class=00234}', "");
Expect(0, 860, '\p{Is_Canonical_Combining_Class=00234}', "");
Expect(1, 860, '\p{^Is_Canonical_Combining_Class=00234}', "");
Expect(1, 860, '\P{Is_Canonical_Combining_Class=00234}', "");
Expect(0, 860, '\P{^Is_Canonical_Combining_Class=00234}', "");
Error('\p{Is_Ccc=/a/_ double-above}');
Error('\P{Is_Ccc=/a/_ double-above}');
Expect(1, 862, '\p{Is_Ccc:	doubleabove}', "");
Expect(0, 862, '\p{^Is_Ccc:	doubleabove}', "");
Expect(0, 862, '\P{Is_Ccc:	doubleabove}', "");
Expect(1, 862, '\P{^Is_Ccc:	doubleabove}', "");
Expect(0, 860, '\p{Is_Ccc:	doubleabove}', "");
Expect(1, 860, '\p{^Is_Ccc:	doubleabove}', "");
Expect(1, 860, '\P{Is_Ccc:	doubleabove}', "");
Expect(0, 860, '\P{^Is_Ccc:	doubleabove}', "");
Expect(1, 862, '\p{Is_Ccc=		Double Above}', "");
Expect(0, 862, '\p{^Is_Ccc=		Double Above}', "");
Expect(0, 862, '\P{Is_Ccc=		Double Above}', "");
Expect(1, 862, '\P{^Is_Ccc=		Double Above}', "");
Expect(0, 860, '\p{Is_Ccc=		Double Above}', "");
Expect(1, 860, '\p{^Is_Ccc=		Double Above}', "");
Expect(1, 860, '\P{Is_Ccc=		Double Above}', "");
Expect(0, 860, '\P{^Is_Ccc=		Double Above}', "");
Error('\p{Canonical_Combining_Class=_-Attached-below Left:=}');
Error('\P{Canonical_Combining_Class=_-Attached-below Left:=}');
Expect(0, 1, '\p{Canonical_Combining_Class=attachedbelowleft}', "");
Expect(1, 1, '\p{^Canonical_Combining_Class=attachedbelowleft}', "");
Expect(1, 1, '\P{Canonical_Combining_Class=attachedbelowleft}', "");
Expect(0, 1, '\P{^Canonical_Combining_Class=attachedbelowleft}', "");
Expect(0, 1, '\p{Canonical_Combining_Class=- Attachedbelow_left}', "");
Expect(1, 1, '\p{^Canonical_Combining_Class=- Attachedbelow_left}', "");
Expect(1, 1, '\P{Canonical_Combining_Class=- Attachedbelow_left}', "");
Expect(0, 1, '\P{^Canonical_Combining_Class=- Attachedbelow_left}', "");
Error('\p{Ccc=/a/_	atbl}');
Error('\P{Ccc=/a/_	atbl}');
Expect(0, 1, '\p{Ccc=atbl}', "");
Expect(1, 1, '\p{^Ccc=atbl}', "");
Expect(1, 1, '\P{Ccc=atbl}', "");
Expect(0, 1, '\P{^Ccc=atbl}', "");
Expect(0, 1, '\p{Ccc:   --ATBL}', "");
Expect(1, 1, '\p{^Ccc:   --ATBL}', "");
Expect(1, 1, '\P{Ccc:   --ATBL}', "");
Expect(0, 1, '\P{^Ccc:   --ATBL}', "");
Error('\p{Is_Canonical_Combining_Class=-/a/+20_0}');
Error('\P{Is_Canonical_Combining_Class=-/a/+20_0}');
Expect(0, 1, '\p{Is_Canonical_Combining_Class=0_0_0_0_0_0_0_0_2_00}', "");
Expect(1, 1, '\p{^Is_Canonical_Combining_Class=0_0_0_0_0_0_0_0_2_00}', "");
Expect(1, 1, '\P{Is_Canonical_Combining_Class=0_0_0_0_0_0_0_0_2_00}', "");
Expect(0, 1, '\P{^Is_Canonical_Combining_Class=0_0_0_0_0_0_0_0_2_00}', "");
Error('\p{Is_Ccc:   	/a/Attached-below LEFT}');
Error('\P{Is_Ccc:   	/a/Attached-below LEFT}');
Expect(0, 1, '\p{Is_Ccc=attachedbelowleft}', "");
Expect(1, 1, '\p{^Is_Ccc=attachedbelowleft}', "");
Expect(1, 1, '\P{Is_Ccc=attachedbelowleft}', "");
Expect(0, 1, '\P{^Is_Ccc=attachedbelowleft}', "");
Expect(0, 1, '\p{Is_Ccc:	 	ATTACHED_below_left}', "");
Expect(1, 1, '\p{^Is_Ccc:	 	ATTACHED_below_left}', "");
Expect(1, 1, '\P{Is_Ccc:	 	ATTACHED_below_left}', "");
Expect(0, 1, '\P{^Is_Ccc:	 	ATTACHED_below_left}', "");
Error('\p{Canonical_Combining_Class=/a/-0001 8}');
Error('\P{Canonical_Combining_Class=/a/-0001 8}');
Expect(1, 1464, '\p{Canonical_Combining_Class=00_01_8}', "");
Expect(0, 1464, '\p{^Canonical_Combining_Class=00_01_8}', "");
Expect(0, 1464, '\P{Canonical_Combining_Class=00_01_8}', "");
Expect(1, 1464, '\P{^Canonical_Combining_Class=00_01_8}', "");
Expect(0, 1463, '\p{Canonical_Combining_Class=00_01_8}', "");
Expect(1, 1463, '\p{^Canonical_Combining_Class=00_01_8}', "");
Expect(1, 1463, '\P{Canonical_Combining_Class=00_01_8}', "");
Expect(0, 1463, '\P{^Canonical_Combining_Class=00_01_8}', "");
Error('\p{Ccc=/a/_01 8}');
Error('\P{Ccc=/a/_01 8}');
Expect(1, 1464, '\p{Ccc=00018}', "");
Expect(0, 1464, '\p{^Ccc=00018}', "");
Expect(0, 1464, '\P{Ccc=00018}', "");
Expect(1, 1464, '\P{^Ccc=00018}', "");
Expect(0, 1463, '\p{Ccc=00018}', "");
Expect(1, 1463, '\p{^Ccc=00018}', "");
Expect(1, 1463, '\P{Ccc=00018}', "");
Expect(0, 1463, '\P{^Ccc=00018}', "");
Error('\p{Is_Canonical_Combining_Class::=	0 0 0_0	0-0	00018}');
Error('\P{Is_Canonical_Combining_Class::=	0 0 0_0	0-0	00018}');
Expect(1, 1464, '\p{Is_Canonical_Combining_Class=000000018}', "");
Expect(0, 1464, '\p{^Is_Canonical_Combining_Class=000000018}', "");
Expect(0, 1464, '\P{Is_Canonical_Combining_Class=000000018}', "");
Expect(1, 1464, '\P{^Is_Canonical_Combining_Class=000000018}', "");
Expect(0, 1463, '\p{Is_Canonical_Combining_Class=000000018}', "");
Expect(1, 1463, '\p{^Is_Canonical_Combining_Class=000000018}', "");
Expect(1, 1463, '\P{Is_Canonical_Combining_Class=000000018}', "");
Expect(0, 1463, '\P{^Is_Canonical_Combining_Class=000000018}', "");
Error('\p{Is_Ccc=- 0	00:=0_0-0_0 18}');
Error('\P{Is_Ccc=- 0	00:=0_0-0_0 18}');
Expect(1, 1464, '\p{Is_Ccc=00000000018}', "");
Expect(0, 1464, '\p{^Is_Ccc=00000000018}', "");
Expect(0, 1464, '\P{Is_Ccc=00000000018}', "");
Expect(1, 1464, '\P{^Is_Ccc=00000000018}', "");
Expect(0, 1463, '\p{Is_Ccc=00000000018}', "");
Expect(1, 1463, '\p{^Is_Ccc=00000000018}', "");
Expect(1, 1463, '\P{Is_Ccc=00000000018}', "");
Expect(0, 1463, '\P{^Is_Ccc=00000000018}', "");
Error('\p{Canonical_Combining_Class=		0000:=00016}');
Error('\P{Canonical_Combining_Class=		0000:=00016}');
Expect(1, 1462, '\p{Canonical_Combining_Class=0_0_0_16}', "");
Expect(0, 1462, '\p{^Canonical_Combining_Class=0_0_0_16}', "");
Expect(0, 1462, '\P{Canonical_Combining_Class=0_0_0_16}', "");
Expect(1, 1462, '\P{^Canonical_Combining_Class=0_0_0_16}', "");
Expect(0, 1461, '\p{Canonical_Combining_Class=0_0_0_16}', "");
Expect(1, 1461, '\p{^Canonical_Combining_Class=0_0_0_16}', "");
Expect(1, 1461, '\P{Canonical_Combining_Class=0_0_0_16}', "");
Expect(0, 1461, '\P{^Canonical_Combining_Class=0_0_0_16}', "");
Error('\p{Ccc=	:=0	00	0_0	16}');
Error('\P{Ccc=	:=0	00	0_0	16}');
Expect(1, 1462, '\p{Ccc: +01_6}', "");
Expect(0, 1462, '\p{^Ccc: +01_6}', "");
Expect(0, 1462, '\P{Ccc: +01_6}', "");
Expect(1, 1462, '\P{^Ccc: +01_6}', "");
Expect(0, 1461, '\p{Ccc: +01_6}', "");
Expect(1, 1461, '\p{^Ccc: +01_6}', "");
Expect(1, 1461, '\P{Ccc: +01_6}', "");
Expect(0, 1461, '\P{^Ccc: +01_6}', "");
Error('\p{Is_Canonical_Combining_Class=:=+00016}');
Error('\P{Is_Canonical_Combining_Class=:=+00016}');
Expect(1, 1462, '\p{Is_Canonical_Combining_Class=+16}', "");
Expect(0, 1462, '\p{^Is_Canonical_Combining_Class=+16}', "");
Expect(0, 1462, '\P{Is_Canonical_Combining_Class=+16}', "");
Expect(1, 1462, '\P{^Is_Canonical_Combining_Class=+16}', "");
Expect(0, 1461, '\p{Is_Canonical_Combining_Class=+16}', "");
Expect(1, 1461, '\p{^Is_Canonical_Combining_Class=+16}', "");
Expect(1, 1461, '\P{Is_Canonical_Combining_Class=+16}', "");
Expect(0, 1461, '\P{^Is_Canonical_Combining_Class=+16}', "");
Error('\p{Is_Ccc:	00_00_01 6:=}');
Error('\P{Is_Ccc:	00_00_01 6:=}');
Expect(1, 1462, '\p{Is_Ccc=01_6}', "");
Expect(0, 1462, '\p{^Is_Ccc=01_6}', "");
Expect(0, 1462, '\P{Is_Ccc=01_6}', "");
Expect(1, 1462, '\P{^Is_Ccc=01_6}', "");
Expect(0, 1461, '\p{Is_Ccc=01_6}', "");
Expect(1, 1461, '\p{^Is_Ccc=01_6}', "");
Expect(1, 1461, '\P{Is_Ccc=01_6}', "");
Expect(0, 1461, '\P{^Is_Ccc=01_6}', "");
Error('\p{Canonical_Combining_Class=:=	084}');
Error('\P{Canonical_Combining_Class=:=	084}');
Expect(1, 3157, '\p{Canonical_Combining_Class=+8_4}', "");
Expect(0, 3157, '\p{^Canonical_Combining_Class=+8_4}', "");
Expect(0, 3157, '\P{Canonical_Combining_Class=+8_4}', "");
Expect(1, 3157, '\P{^Canonical_Combining_Class=+8_4}', "");
Expect(0, 3156, '\p{Canonical_Combining_Class=+8_4}', "");
Expect(1, 3156, '\p{^Canonical_Combining_Class=+8_4}', "");
Expect(1, 3156, '\P{Canonical_Combining_Class=+8_4}', "");
Expect(0, 3156, '\P{^Canonical_Combining_Class=+8_4}', "");
Error('\p{Ccc=/a/--0084}');
Error('\P{Ccc=/a/--0084}');
Expect(1, 3157, '\p{Ccc=000084}', "");
Expect(0, 3157, '\p{^Ccc=000084}', "");
Expect(0, 3157, '\P{Ccc=000084}', "");
Expect(1, 3157, '\P{^Ccc=000084}', "");
Expect(0, 3156, '\p{Ccc=000084}', "");
Expect(1, 3156, '\p{^Ccc=000084}', "");
Expect(1, 3156, '\P{Ccc=000084}', "");
Expect(0, 3156, '\P{^Ccc=000084}', "");
Error('\p{Is_Canonical_Combining_Class=:=-_00000000084}');
Error('\P{Is_Canonical_Combining_Class=:=-_00000000084}');
Expect(1, 3157, '\p{Is_Canonical_Combining_Class=+00000000084}', "");
Expect(0, 3157, '\p{^Is_Canonical_Combining_Class=+00000000084}', "");
Expect(0, 3157, '\P{Is_Canonical_Combining_Class=+00000000084}', "");
Expect(1, 3157, '\P{^Is_Canonical_Combining_Class=+00000000084}', "");
Expect(0, 3156, '\p{Is_Canonical_Combining_Class=+00000000084}', "");
Expect(1, 3156, '\p{^Is_Canonical_Combining_Class=+00000000084}', "");
Expect(1, 3156, '\P{Is_Canonical_Combining_Class=+00000000084}', "");
Expect(0, 3156, '\P{^Is_Canonical_Combining_Class=+00000000084}', "");
Error('\p{Is_Ccc=	 00084:=}');
Error('\P{Is_Ccc=	 00084:=}');
Expect(1, 3157, '\p{Is_Ccc=+0_0_0_0_0_84}', "");
Expect(0, 3157, '\p{^Is_Ccc=+0_0_0_0_0_84}', "");
Expect(0, 3157, '\P{Is_Ccc=+0_0_0_0_0_84}', "");
Expect(1, 3157, '\P{^Is_Ccc=+0_0_0_0_0_84}', "");
Expect(0, 3156, '\p{Is_Ccc=+0_0_0_0_0_84}', "");
Expect(1, 3156, '\p{^Is_Ccc=+0_0_0_0_0_84}', "");
Expect(1, 3156, '\P{Is_Ccc=+0_0_0_0_0_84}', "");
Expect(0, 3156, '\P{^Is_Ccc=+0_0_0_0_0_84}', "");
Error('\p{Canonical_Combining_Class=- 000000027/a/}');
Error('\P{Canonical_Combining_Class=- 000000027/a/}');
Expect(1, 1611, '\p{Canonical_Combining_Class=027}', "");
Expect(0, 1611, '\p{^Canonical_Combining_Class=027}', "");
Expect(0, 1611, '\P{Canonical_Combining_Class=027}', "");
Expect(1, 1611, '\P{^Canonical_Combining_Class=027}', "");
Expect(0, 1610, '\p{Canonical_Combining_Class=027}', "");
Expect(1, 1610, '\p{^Canonical_Combining_Class=027}', "");
Expect(1, 1610, '\P{Canonical_Combining_Class=027}', "");
Expect(0, 1610, '\P{^Canonical_Combining_Class=027}', "");
Error('\p{Ccc=:=_-000000002_7}');
Error('\P{Ccc=:=_-000000002_7}');
Expect(1, 1611, '\p{Ccc=+0000000027}', "");
Expect(0, 1611, '\p{^Ccc=+0000000027}', "");
Expect(0, 1611, '\P{Ccc=+0000000027}', "");
Expect(1, 1611, '\P{^Ccc=+0000000027}', "");
Expect(0, 1610, '\p{Ccc=+0000000027}', "");
Expect(1, 1610, '\p{^Ccc=+0000000027}', "");
Expect(1, 1610, '\P{Ccc=+0000000027}', "");
Expect(0, 1610, '\P{^Ccc=+0000000027}', "");
Error('\p{Is_Canonical_Combining_Class=:= -+27}');
Error('\P{Is_Canonical_Combining_Class=:= -+27}');
Expect(1, 1611, '\p{Is_Canonical_Combining_Class:	+000000027}', "");
Expect(0, 1611, '\p{^Is_Canonical_Combining_Class:	+000000027}', "");
Expect(0, 1611, '\P{Is_Canonical_Combining_Class:	+000000027}', "");
Expect(1, 1611, '\P{^Is_Canonical_Combining_Class:	+000000027}', "");
Expect(0, 1610, '\p{Is_Canonical_Combining_Class:	+000000027}', "");
Expect(1, 1610, '\p{^Is_Canonical_Combining_Class:	+000000027}', "");
Expect(1, 1610, '\P{Is_Canonical_Combining_Class:	+000000027}', "");
Expect(0, 1610, '\P{^Is_Canonical_Combining_Class:	+000000027}', "");
Error('\p{Is_Ccc=/a/ 000027}');
Error('\P{Is_Ccc=/a/ 000027}');
Expect(1, 1611, '\p{Is_Ccc=00_00_00_02_7}', "");
Expect(0, 1611, '\p{^Is_Ccc=00_00_00_02_7}', "");
Expect(0, 1611, '\P{Is_Ccc=00_00_00_02_7}', "");
Expect(1, 1611, '\P{^Is_Ccc=00_00_00_02_7}', "");
Expect(0, 1610, '\p{Is_Ccc=00_00_00_02_7}', "");
Expect(1, 1610, '\p{^Is_Ccc=00_00_00_02_7}', "");
Expect(1, 1610, '\P{Is_Ccc=00_00_00_02_7}', "");
Expect(0, 1610, '\P{^Is_Ccc=00_00_00_02_7}', "");
Error('\p{Canonical_Combining_Class=:=  Double_Below}');
Error('\P{Canonical_Combining_Class=:=  Double_Below}');
Expect(1, 860, '\p{Canonical_Combining_Class=doublebelow}', "");
Expect(0, 860, '\p{^Canonical_Combining_Class=doublebelow}', "");
Expect(0, 860, '\P{Canonical_Combining_Class=doublebelow}', "");
Expect(1, 860, '\P{^Canonical_Combining_Class=doublebelow}', "");
Expect(0, 859, '\p{Canonical_Combining_Class=doublebelow}', "");
Expect(1, 859, '\p{^Canonical_Combining_Class=doublebelow}', "");
Expect(1, 859, '\P{Canonical_Combining_Class=doublebelow}', "");
Expect(0, 859, '\P{^Canonical_Combining_Class=doublebelow}', "");
Expect(1, 860, '\p{Canonical_Combining_Class=-	Double-Below}', "");
Expect(0, 860, '\p{^Canonical_Combining_Class=-	Double-Below}', "");
Expect(0, 860, '\P{Canonical_Combining_Class=-	Double-Below}', "");
Expect(1, 860, '\P{^Canonical_Combining_Class=-	Double-Below}', "");
Expect(0, 859, '\p{Canonical_Combining_Class=-	Double-Below}', "");
Expect(1, 859, '\p{^Canonical_Combining_Class=-	Double-Below}', "");
Expect(1, 859, '\P{Canonical_Combining_Class=-	Double-Below}', "");
Expect(0, 859, '\P{^Canonical_Combining_Class=-	Double-Below}', "");
Error('\p{Ccc=:= db}');
Error('\P{Ccc=:= db}');
Expect(1, 860, '\p{Ccc=db}', "");
Expect(0, 860, '\p{^Ccc=db}', "");
Expect(0, 860, '\P{Ccc=db}', "");
Expect(1, 860, '\P{^Ccc=db}', "");
Expect(0, 859, '\p{Ccc=db}', "");
Expect(1, 859, '\p{^Ccc=db}', "");
Expect(1, 859, '\P{Ccc=db}', "");
Expect(0, 859, '\P{^Ccc=db}', "");
Expect(1, 860, '\p{Ccc= _DB}', "");
Expect(0, 860, '\p{^Ccc= _DB}', "");
Expect(0, 860, '\P{Ccc= _DB}', "");
Expect(1, 860, '\P{^Ccc= _DB}', "");
Expect(0, 859, '\p{Ccc= _DB}', "");
Expect(1, 859, '\p{^Ccc= _DB}', "");
Expect(1, 859, '\P{Ccc= _DB}', "");
Expect(0, 859, '\P{^Ccc= _DB}', "");
Error('\p{Is_Canonical_Combining_Class=:=0000000233}');
Error('\P{Is_Canonical_Combining_Class=:=0000000233}');
Expect(1, 860, '\p{Is_Canonical_Combining_Class=23_3}', "");
Expect(0, 860, '\p{^Is_Canonical_Combining_Class=23_3}', "");
Expect(0, 860, '\P{Is_Canonical_Combining_Class=23_3}', "");
Expect(1, 860, '\P{^Is_Canonical_Combining_Class=23_3}', "");
Expect(0, 859, '\p{Is_Canonical_Combining_Class=23_3}', "");
Expect(1, 859, '\p{^Is_Canonical_Combining_Class=23_3}', "");
Expect(1, 859, '\P{Is_Canonical_Combining_Class=23_3}', "");
Expect(0, 859, '\P{^Is_Canonical_Combining_Class=23_3}', "");
Error('\p{Is_Ccc=:=Double	BELOW}');
Error('\P{Is_Ccc=:=Double	BELOW}');
Expect(1, 860, '\p{Is_Ccc=doublebelow}', "");
Expect(0, 860, '\p{^Is_Ccc=doublebelow}', "");
Expect(0, 860, '\P{Is_Ccc=doublebelow}', "");
Expect(1, 860, '\P{^Is_Ccc=doublebelow}', "");
Expect(0, 859, '\p{Is_Ccc=doublebelow}', "");
Expect(1, 859, '\p{^Is_Ccc=doublebelow}', "");
Expect(1, 859, '\P{Is_Ccc=doublebelow}', "");
Expect(0, 859, '\P{^Is_Ccc=doublebelow}', "");
Expect(1, 860, '\p{Is_Ccc=-double_Below}', "");
Expect(0, 860, '\p{^Is_Ccc=-double_Below}', "");
Expect(0, 860, '\P{Is_Ccc=-double_Below}', "");
Expect(1, 860, '\P{^Is_Ccc=-double_Below}', "");
Expect(0, 859, '\p{Is_Ccc=-double_Below}', "");
Expect(1, 859, '\p{^Is_Ccc=-double_Below}', "");
Expect(1, 859, '\P{Is_Ccc=-double_Below}', "");
Expect(0, 859, '\P{^Is_Ccc=-double_Below}', "");
Error('\p{Canonical_Combining_Class= /a/Below	Right}');
Error('\P{Canonical_Combining_Class= /a/Below	Right}');
Expect(1, 1434, '\p{Canonical_Combining_Class=belowright}', "");
Expect(0, 1434, '\p{^Canonical_Combining_Class=belowright}', "");
Expect(0, 1434, '\P{Canonical_Combining_Class=belowright}', "");
Expect(1, 1434, '\P{^Canonical_Combining_Class=belowright}', "");
Expect(0, 1433, '\p{Canonical_Combining_Class=belowright}', "");
Expect(1, 1433, '\p{^Canonical_Combining_Class=belowright}', "");
Expect(1, 1433, '\P{Canonical_Combining_Class=belowright}', "");
Expect(0, 1433, '\P{^Canonical_Combining_Class=belowright}', "");
Expect(1, 1434, '\p{Canonical_Combining_Class:	  belowRIGHT}', "");
Expect(0, 1434, '\p{^Canonical_Combining_Class:	  belowRIGHT}', "");
Expect(0, 1434, '\P{Canonical_Combining_Class:	  belowRIGHT}', "");
Expect(1, 1434, '\P{^Canonical_Combining_Class:	  belowRIGHT}', "");
Expect(0, 1433, '\p{Canonical_Combining_Class:	  belowRIGHT}', "");
Expect(1, 1433, '\p{^Canonical_Combining_Class:	  belowRIGHT}', "");
Expect(1, 1433, '\P{Canonical_Combining_Class:	  belowRIGHT}', "");
Expect(0, 1433, '\P{^Canonical_Combining_Class:	  belowRIGHT}', "");
Error('\p{Ccc= 	BR/a/}');
Error('\P{Ccc= 	BR/a/}');
Expect(1, 1434, '\p{Ccc=br}', "");
Expect(0, 1434, '\p{^Ccc=br}', "");
Expect(0, 1434, '\P{Ccc=br}', "");
Expect(1, 1434, '\P{^Ccc=br}', "");
Expect(0, 1433, '\p{Ccc=br}', "");
Expect(1, 1433, '\p{^Ccc=br}', "");
Expect(1, 1433, '\P{Ccc=br}', "");
Expect(0, 1433, '\P{^Ccc=br}', "");
Expect(1, 1434, '\p{Ccc: BR}', "");
Expect(0, 1434, '\p{^Ccc: BR}', "");
Expect(0, 1434, '\P{Ccc: BR}', "");
Expect(1, 1434, '\P{^Ccc: BR}', "");
Expect(0, 1433, '\p{Ccc: BR}', "");
Expect(1, 1433, '\p{^Ccc: BR}', "");
Expect(1, 1433, '\P{Ccc: BR}', "");
Expect(0, 1433, '\P{^Ccc: BR}', "");
Error('\p{Is_Canonical_Combining_Class=0000/a/0022-2}');
Error('\P{Is_Canonical_Combining_Class=0000/a/0022-2}');
Expect(1, 1434, '\p{Is_Canonical_Combining_Class=+0_0_0_0_0222}', "");
Expect(0, 1434, '\p{^Is_Canonical_Combining_Class=+0_0_0_0_0222}', "");
Expect(0, 1434, '\P{Is_Canonical_Combining_Class=+0_0_0_0_0222}', "");
Expect(1, 1434, '\P{^Is_Canonical_Combining_Class=+0_0_0_0_0222}', "");
Expect(0, 1433, '\p{Is_Canonical_Combining_Class=+0_0_0_0_0222}', "");
Expect(1, 1433, '\p{^Is_Canonical_Combining_Class=+0_0_0_0_0222}', "");
Expect(1, 1433, '\P{Is_Canonical_Combining_Class=+0_0_0_0_0222}', "");
Expect(0, 1433, '\P{^Is_Canonical_Combining_Class=+0_0_0_0_0222}', "");
Error('\p{Is_Ccc=	/a/BELOW RIGHT}');
Error('\P{Is_Ccc=	/a/BELOW RIGHT}');
Expect(1, 1434, '\p{Is_Ccc=belowright}', "");
Expect(0, 1434, '\p{^Is_Ccc=belowright}', "");
Expect(0, 1434, '\P{Is_Ccc=belowright}', "");
Expect(1, 1434, '\P{^Is_Ccc=belowright}', "");
Expect(0, 1433, '\p{Is_Ccc=belowright}', "");
Expect(1, 1433, '\p{^Is_Ccc=belowright}', "");
Expect(1, 1433, '\P{Is_Ccc=belowright}', "");
Expect(0, 1433, '\P{^Is_Ccc=belowright}', "");
Expect(1, 1434, '\p{Is_Ccc=-BELOW	Right}', "");
Expect(0, 1434, '\p{^Is_Ccc=-BELOW	Right}', "");
Expect(0, 1434, '\P{Is_Ccc=-BELOW	Right}', "");
Expect(1, 1434, '\P{^Is_Ccc=-BELOW	Right}', "");
Expect(0, 1433, '\p{Is_Ccc=-BELOW	Right}', "");
Expect(1, 1433, '\p{^Is_Ccc=-BELOW	Right}', "");
Expect(1, 1433, '\P{Is_Ccc=-BELOW	Right}', "");
Expect(0, 1433, '\P{^Is_Ccc=-BELOW	Right}', "");
Error('\p{Canonical_Combining_Class=-	kana:=Voicing}');
Error('\P{Canonical_Combining_Class=-	kana:=Voicing}');
Expect(1, 12442, '\p{Canonical_Combining_Class=kanavoicing}', "");
Expect(0, 12442, '\p{^Canonical_Combining_Class=kanavoicing}', "");
Expect(0, 12442, '\P{Canonical_Combining_Class=kanavoicing}', "");
Expect(1, 12442, '\P{^Canonical_Combining_Class=kanavoicing}', "");
Expect(0, 12440, '\p{Canonical_Combining_Class=kanavoicing}', "");
Expect(1, 12440, '\p{^Canonical_Combining_Class=kanavoicing}', "");
Expect(1, 12440, '\P{Canonical_Combining_Class=kanavoicing}', "");
Expect(0, 12440, '\P{^Canonical_Combining_Class=kanavoicing}', "");
Expect(1, 12442, '\p{Canonical_Combining_Class: _	KANA	voicing}', "");
Expect(0, 12442, '\p{^Canonical_Combining_Class: _	KANA	voicing}', "");
Expect(0, 12442, '\P{Canonical_Combining_Class: _	KANA	voicing}', "");
Expect(1, 12442, '\P{^Canonical_Combining_Class: _	KANA	voicing}', "");
Expect(0, 12440, '\p{Canonical_Combining_Class: _	KANA	voicing}', "");
Expect(1, 12440, '\p{^Canonical_Combining_Class: _	KANA	voicing}', "");
Expect(1, 12440, '\P{Canonical_Combining_Class: _	KANA	voicing}', "");
Expect(0, 12440, '\P{^Canonical_Combining_Class: _	KANA	voicing}', "");
Error('\p{Ccc=:=_-KV}');
Error('\P{Ccc=:=_-KV}');
Expect(1, 12442, '\p{Ccc=kv}', "");
Expect(0, 12442, '\p{^Ccc=kv}', "");
Expect(0, 12442, '\P{Ccc=kv}', "");
Expect(1, 12442, '\P{^Ccc=kv}', "");
Expect(0, 12440, '\p{Ccc=kv}', "");
Expect(1, 12440, '\p{^Ccc=kv}', "");
Expect(1, 12440, '\P{Ccc=kv}', "");
Expect(0, 12440, '\P{^Ccc=kv}', "");
Expect(1, 12442, '\p{Ccc= _KV}', "");
Expect(0, 12442, '\p{^Ccc= _KV}', "");
Expect(0, 12442, '\P{Ccc= _KV}', "");
Expect(1, 12442, '\P{^Ccc= _KV}', "");
Expect(0, 12440, '\p{Ccc= _KV}', "");
Expect(1, 12440, '\p{^Ccc= _KV}', "");
Expect(1, 12440, '\P{Ccc= _KV}', "");
Expect(0, 12440, '\P{^Ccc= _KV}', "");
Error('\p{Is_Canonical_Combining_Class= +00_8/a/}');
Error('\P{Is_Canonical_Combining_Class= +00_8/a/}');
Expect(1, 12442, '\p{Is_Canonical_Combining_Class=000_8}', "");
Expect(0, 12442, '\p{^Is_Canonical_Combining_Class=000_8}', "");
Expect(0, 12442, '\P{Is_Canonical_Combining_Class=000_8}', "");
Expect(1, 12442, '\P{^Is_Canonical_Combining_Class=000_8}', "");
Expect(0, 12440, '\p{Is_Canonical_Combining_Class=000_8}', "");
Expect(1, 12440, '\p{^Is_Canonical_Combining_Class=000_8}', "");
Expect(1, 12440, '\P{Is_Canonical_Combining_Class=000_8}', "");
Expect(0, 12440, '\P{^Is_Canonical_Combining_Class=000_8}', "");
Error('\p{Is_Ccc=:=_Kana_Voicing}');
Error('\P{Is_Ccc=:=_Kana_Voicing}');
Expect(1, 12442, '\p{Is_Ccc:kanavoicing}', "");
Expect(0, 12442, '\p{^Is_Ccc:kanavoicing}', "");
Expect(0, 12442, '\P{Is_Ccc:kanavoicing}', "");
Expect(1, 12442, '\P{^Is_Ccc:kanavoicing}', "");
Expect(0, 12440, '\p{Is_Ccc:kanavoicing}', "");
Expect(1, 12440, '\p{^Is_Ccc:kanavoicing}', "");
Expect(1, 12440, '\P{Is_Ccc:kanavoicing}', "");
Expect(0, 12440, '\P{^Is_Ccc:kanavoicing}', "");
Expect(1, 12442, '\p{Is_Ccc= KANA_voicing}', "");
Expect(0, 12442, '\p{^Is_Ccc= KANA_voicing}', "");
Expect(0, 12442, '\P{Is_Ccc= KANA_voicing}', "");
Expect(1, 12442, '\P{^Is_Ccc= KANA_voicing}', "");
Expect(0, 12440, '\p{Is_Ccc= KANA_voicing}', "");
Expect(1, 12440, '\p{^Is_Ccc= KANA_voicing}', "");
Expect(1, 12440, '\P{Is_Ccc= KANA_voicing}', "");
Expect(0, 12440, '\P{^Is_Ccc= KANA_voicing}', "");
Error('\p{Canonical_Combining_Class=/a/-_below}');
Error('\P{Canonical_Combining_Class=/a/-_below}');
Expect(1, 793, '\p{Canonical_Combining_Class:	below}', "");
Expect(0, 793, '\p{^Canonical_Combining_Class:	below}', "");
Expect(0, 793, '\P{Canonical_Combining_Class:	below}', "");
Expect(1, 793, '\P{^Canonical_Combining_Class:	below}', "");
Expect(0, 789, '\p{Canonical_Combining_Class:	below}', "");
Expect(1, 789, '\p{^Canonical_Combining_Class:	below}', "");
Expect(1, 789, '\P{Canonical_Combining_Class:	below}', "");
Expect(0, 789, '\P{^Canonical_Combining_Class:	below}', "");
Expect(1, 793, '\p{Canonical_Combining_Class=__Below}', "");
Expect(0, 793, '\p{^Canonical_Combining_Class=__Below}', "");
Expect(0, 793, '\P{Canonical_Combining_Class=__Below}', "");
Expect(1, 793, '\P{^Canonical_Combining_Class=__Below}', "");
Expect(0, 789, '\p{Canonical_Combining_Class=__Below}', "");
Expect(1, 789, '\p{^Canonical_Combining_Class=__Below}', "");
Expect(1, 789, '\P{Canonical_Combining_Class=__Below}', "");
Expect(0, 789, '\P{^Canonical_Combining_Class=__Below}', "");
Error('\p{Ccc:   -:=B}');
Error('\P{Ccc:   -:=B}');
Expect(1, 793, '\p{Ccc=b}', "");
Expect(0, 793, '\p{^Ccc=b}', "");
Expect(0, 793, '\P{Ccc=b}', "");
Expect(1, 793, '\P{^Ccc=b}', "");
Expect(0, 789, '\p{Ccc=b}', "");
Expect(1, 789, '\p{^Ccc=b}', "");
Expect(1, 789, '\P{Ccc=b}', "");
Expect(0, 789, '\P{^Ccc=b}', "");
Expect(1, 793, '\p{Ccc=  B}', "");
Expect(0, 793, '\p{^Ccc=  B}', "");
Expect(0, 793, '\P{Ccc=  B}', "");
Expect(1, 793, '\P{^Ccc=  B}', "");
Expect(0, 789, '\p{Ccc=  B}', "");
Expect(1, 789, '\p{^Ccc=  B}', "");
Expect(1, 789, '\P{Ccc=  B}', "");
Expect(0, 789, '\P{^Ccc=  B}', "");
Error('\p{Is_Canonical_Combining_Class:	_/a/0022-0}');
Error('\P{Is_Canonical_Combining_Class:	_/a/0022-0}');
Expect(1, 793, '\p{Is_Canonical_Combining_Class=00_22_0}', "");
Expect(0, 793, '\p{^Is_Canonical_Combining_Class=00_22_0}', "");
Expect(0, 793, '\P{Is_Canonical_Combining_Class=00_22_0}', "");
Expect(1, 793, '\P{^Is_Canonical_Combining_Class=00_22_0}', "");
Expect(0, 789, '\p{Is_Canonical_Combining_Class=00_22_0}', "");
Expect(1, 789, '\p{^Is_Canonical_Combining_Class=00_22_0}', "");
Expect(1, 789, '\P{Is_Canonical_Combining_Class=00_22_0}', "");
Expect(0, 789, '\P{^Is_Canonical_Combining_Class=00_22_0}', "");
Error('\p{Is_Ccc=-	BELOW/a/}');
Error('\P{Is_Ccc=-	BELOW/a/}');
Expect(1, 793, '\p{Is_Ccc=below}', "");
Expect(0, 793, '\p{^Is_Ccc=below}', "");
Expect(0, 793, '\P{Is_Ccc=below}', "");
Expect(1, 793, '\P{^Is_Ccc=below}', "");
Expect(0, 789, '\p{Is_Ccc=below}', "");
Expect(1, 789, '\p{^Is_Ccc=below}', "");
Expect(1, 789, '\P{Is_Ccc=below}', "");
Expect(0, 789, '\P{^Is_Ccc=below}', "");
Expect(1, 793, '\p{Is_Ccc=		below}', "");
Expect(0, 793, '\p{^Is_Ccc=		below}', "");
Expect(0, 793, '\P{Is_Ccc=		below}', "");
Expect(1, 793, '\P{^Is_Ccc=		below}', "");
Expect(0, 789, '\p{Is_Ccc=		below}', "");
Expect(1, 789, '\p{^Is_Ccc=		below}', "");
Expect(1, 789, '\P{Is_Ccc=		below}', "");
Expect(0, 789, '\P{^Is_Ccc=		below}', "");
Error('\p{Canonical_Combining_Class=	00000000020:=}');
Error('\P{Canonical_Combining_Class=	00000000020:=}');
Expect(1, 1467, '\p{Canonical_Combining_Class=020}', "");
Expect(0, 1467, '\p{^Canonical_Combining_Class=020}', "");
Expect(0, 1467, '\P{Canonical_Combining_Class=020}', "");
Expect(1, 1467, '\P{^Canonical_Combining_Class=020}', "");
Expect(0, 1466, '\p{Canonical_Combining_Class=020}', "");
Expect(1, 1466, '\p{^Canonical_Combining_Class=020}', "");
Expect(1, 1466, '\P{Canonical_Combining_Class=020}', "");
Expect(0, 1466, '\P{^Canonical_Combining_Class=020}', "");
Error('\p{Ccc=/a/ +020}');
Error('\P{Ccc=/a/ +020}');
Expect(1, 1467, '\p{Ccc=+0_0_0_0_0_020}', "");
Expect(0, 1467, '\p{^Ccc=+0_0_0_0_0_020}', "");
Expect(0, 1467, '\P{Ccc=+0_0_0_0_0_020}', "");
Expect(1, 1467, '\P{^Ccc=+0_0_0_0_0_020}', "");
Expect(0, 1466, '\p{Ccc=+0_0_0_0_0_020}', "");
Expect(1, 1466, '\p{^Ccc=+0_0_0_0_0_020}', "");
Expect(1, 1466, '\P{Ccc=+0_0_0_0_0_020}', "");
Expect(0, 1466, '\P{^Ccc=+0_0_0_0_0_020}', "");
Error('\p{Is_Canonical_Combining_Class=:=-20}');
Error('\P{Is_Canonical_Combining_Class=:=-20}');
Expect(1, 1467, '\p{Is_Canonical_Combining_Class=20}', "");
Expect(0, 1467, '\p{^Is_Canonical_Combining_Class=20}', "");
Expect(0, 1467, '\P{Is_Canonical_Combining_Class=20}', "");
Expect(1, 1467, '\P{^Is_Canonical_Combining_Class=20}', "");
Expect(0, 1466, '\p{Is_Canonical_Combining_Class=20}', "");
Expect(1, 1466, '\p{^Is_Canonical_Combining_Class=20}', "");
Expect(1, 1466, '\P{Is_Canonical_Combining_Class=20}', "");
Expect(0, 1466, '\P{^Is_Canonical_Combining_Class=20}', "");
Error('\p{Is_Ccc=:=		+0000000020}');
Error('\P{Is_Ccc=:=		+0000000020}');
Expect(1, 1467, '\p{Is_Ccc=+0000_0000_20}', "");
Expect(0, 1467, '\p{^Is_Ccc=+0000_0000_20}', "");
Expect(0, 1467, '\P{Is_Ccc=+0000_0000_20}', "");
Expect(1, 1467, '\P{^Is_Ccc=+0000_0000_20}', "");
Expect(0, 1466, '\p{Is_Ccc=+0000_0000_20}', "");
Expect(1, 1466, '\p{^Is_Ccc=+0000_0000_20}', "");
Expect(1, 1466, '\P{Is_Ccc=+0000_0000_20}', "");
Expect(0, 1466, '\P{^Is_Ccc=+0000_0000_20}', "");
Error('\p{Canonical_Combining_Class=	:=ATTACHED_above Right}');
Error('\P{Canonical_Combining_Class=	:=ATTACHED_above Right}');
Expect(1, 795, '\p{Canonical_Combining_Class=attachedaboveright}', "");
Expect(0, 795, '\p{^Canonical_Combining_Class=attachedaboveright}', "");
Expect(0, 795, '\P{Canonical_Combining_Class=attachedaboveright}', "");
Expect(1, 795, '\P{^Canonical_Combining_Class=attachedaboveright}', "");
Expect(0, 794, '\p{Canonical_Combining_Class=attachedaboveright}', "");
Expect(1, 794, '\p{^Canonical_Combining_Class=attachedaboveright}', "");
Expect(1, 794, '\P{Canonical_Combining_Class=attachedaboveright}', "");
Expect(0, 794, '\P{^Canonical_Combining_Class=attachedaboveright}', "");
Expect(1, 795, '\p{Canonical_Combining_Class= 	ATTACHED-above_Right}', "");
Expect(0, 795, '\p{^Canonical_Combining_Class= 	ATTACHED-above_Right}', "");
Expect(0, 795, '\P{Canonical_Combining_Class= 	ATTACHED-above_Right}', "");
Expect(1, 795, '\P{^Canonical_Combining_Class= 	ATTACHED-above_Right}', "");
Expect(0, 794, '\p{Canonical_Combining_Class= 	ATTACHED-above_Right}', "");
Expect(1, 794, '\p{^Canonical_Combining_Class= 	ATTACHED-above_Right}', "");
Expect(1, 794, '\P{Canonical_Combining_Class= 	ATTACHED-above_Right}', "");
Expect(0, 794, '\P{^Canonical_Combining_Class= 	ATTACHED-above_Right}', "");
Error('\p{Ccc:	_/a/ATAR}');
Error('\P{Ccc:	_/a/ATAR}');
Expect(1, 795, '\p{Ccc=atar}', "");
Expect(0, 795, '\p{^Ccc=atar}', "");
Expect(0, 795, '\P{Ccc=atar}', "");
Expect(1, 795, '\P{^Ccc=atar}', "");
Expect(0, 794, '\p{Ccc=atar}', "");
Expect(1, 794, '\p{^Ccc=atar}', "");
Expect(1, 794, '\P{Ccc=atar}', "");
Expect(0, 794, '\P{^Ccc=atar}', "");
Expect(1, 795, '\p{Ccc=	 atar}', "");
Expect(0, 795, '\p{^Ccc=	 atar}', "");
Expect(0, 795, '\P{Ccc=	 atar}', "");
Expect(1, 795, '\P{^Ccc=	 atar}', "");
Expect(0, 794, '\p{Ccc=	 atar}', "");
Expect(1, 794, '\p{^Ccc=	 atar}', "");
Expect(1, 794, '\P{Ccc=	 atar}', "");
Expect(0, 794, '\P{^Ccc=	 atar}', "");
Error('\p{Is_Canonical_Combining_Class=/a/_	+0000216}');
Error('\P{Is_Canonical_Combining_Class=/a/_	+0000216}');
Expect(1, 795, '\p{Is_Canonical_Combining_Class=+0000000216}', "");
Expect(0, 795, '\p{^Is_Canonical_Combining_Class=+0000000216}', "");
Expect(0, 795, '\P{Is_Canonical_Combining_Class=+0000000216}', "");
Expect(1, 795, '\P{^Is_Canonical_Combining_Class=+0000000216}', "");
Expect(0, 794, '\p{Is_Canonical_Combining_Class=+0000000216}', "");
Expect(1, 794, '\p{^Is_Canonical_Combining_Class=+0000000216}', "");
Expect(1, 794, '\P{Is_Canonical_Combining_Class=+0000000216}', "");
Expect(0, 794, '\P{^Is_Canonical_Combining_Class=+0000000216}', "");
Error('\p{Is_Ccc=	Attached-ABOVE RIGHT:=}');
Error('\P{Is_Ccc=	Attached-ABOVE RIGHT:=}');
Expect(1, 795, '\p{Is_Ccc=attachedaboveright}', "");
Expect(0, 795, '\p{^Is_Ccc=attachedaboveright}', "");
Expect(0, 795, '\P{Is_Ccc=attachedaboveright}', "");
Expect(1, 795, '\P{^Is_Ccc=attachedaboveright}', "");
Expect(0, 794, '\p{Is_Ccc=attachedaboveright}', "");
Expect(1, 794, '\p{^Is_Ccc=attachedaboveright}', "");
Expect(1, 794, '\P{Is_Ccc=attachedaboveright}', "");
Expect(0, 794, '\P{^Is_Ccc=attachedaboveright}', "");
Expect(1, 795, '\p{Is_Ccc=_ ATTACHED	Above	right}', "");
Expect(0, 795, '\p{^Is_Ccc=_ ATTACHED	Above	right}', "");
Expect(0, 795, '\P{Is_Ccc=_ ATTACHED	Above	right}', "");
Expect(1, 795, '\P{^Is_Ccc=_ ATTACHED	Above	right}', "");
Expect(0, 794, '\p{Is_Ccc=_ ATTACHED	Above	right}', "");
Expect(1, 794, '\p{^Is_Ccc=_ ATTACHED	Above	right}', "");
Expect(1, 794, '\P{Is_Ccc=_ ATTACHED	Above	right}', "");
Expect(0, 794, '\P{^Is_Ccc=_ ATTACHED	Above	right}', "");
Error('\p{Canonical_Combining_Class=/a/ 	+0000031}');
Error('\P{Canonical_Combining_Class=/a/ 	+0000031}');
Expect(1, 1561, '\p{Canonical_Combining_Class:   +0_0_0_0_0_0_0_0_31}', "");
Expect(0, 1561, '\p{^Canonical_Combining_Class:   +0_0_0_0_0_0_0_0_31}', "");
Expect(0, 1561, '\P{Canonical_Combining_Class:   +0_0_0_0_0_0_0_0_31}', "");
Expect(1, 1561, '\P{^Canonical_Combining_Class:   +0_0_0_0_0_0_0_0_31}', "");
Expect(0, 1560, '\p{Canonical_Combining_Class:   +0_0_0_0_0_0_0_0_31}', "");
Expect(1, 1560, '\p{^Canonical_Combining_Class:   +0_0_0_0_0_0_0_0_31}', "");
Expect(1, 1560, '\P{Canonical_Combining_Class:   +0_0_0_0_0_0_0_0_31}', "");
Expect(0, 1560, '\P{^Canonical_Combining_Class:   +0_0_0_0_0_0_0_0_31}', "");
Error('\p{Ccc= :=031}');
Error('\P{Ccc= :=031}');
Expect(1, 1561, '\p{Ccc=+0_0_0_0_0_0_0_0_031}', "");
Expect(0, 1561, '\p{^Ccc=+0_0_0_0_0_0_0_0_031}', "");
Expect(0, 1561, '\P{Ccc=+0_0_0_0_0_0_0_0_031}', "");
Expect(1, 1561, '\P{^Ccc=+0_0_0_0_0_0_0_0_031}', "");
Expect(0, 1560, '\p{Ccc=+0_0_0_0_0_0_0_0_031}', "");
Expect(1, 1560, '\p{^Ccc=+0_0_0_0_0_0_0_0_031}', "");
Expect(1, 1560, '\P{Ccc=+0_0_0_0_0_0_0_0_031}', "");
Expect(0, 1560, '\P{^Ccc=+0_0_0_0_0_0_0_0_031}', "");
Error('\p{Is_Canonical_Combining_Class=	-+0 0	0/a/00-0	31}');
Error('\P{Is_Canonical_Combining_Class=	-+0 0	0/a/00-0	31}');
Expect(1, 1561, '\p{Is_Canonical_Combining_Class=00_00_00_31}', "");
Expect(0, 1561, '\p{^Is_Canonical_Combining_Class=00_00_00_31}', "");
Expect(0, 1561, '\P{Is_Canonical_Combining_Class=00_00_00_31}', "");
Expect(1, 1561, '\P{^Is_Canonical_Combining_Class=00_00_00_31}', "");
Expect(0, 1560, '\p{Is_Canonical_Combining_Class=00_00_00_31}', "");
Expect(1, 1560, '\p{^Is_Canonical_Combining_Class=00_00_00_31}', "");
Expect(1, 1560, '\P{Is_Canonical_Combining_Class=00_00_00_31}', "");
Expect(0, 1560, '\P{^Is_Canonical_Combining_Class=00_00_00_31}', "");
Error('\p{Is_Ccc=-_031/a/}');
Error('\P{Is_Ccc=-_031/a/}');
Expect(1, 1561, '\p{Is_Ccc=000000031}', "");
Expect(0, 1561, '\p{^Is_Ccc=000000031}', "");
Expect(0, 1561, '\P{Is_Ccc=000000031}', "");
Expect(1, 1561, '\P{^Is_Ccc=000000031}', "");
Expect(0, 1560, '\p{Is_Ccc=000000031}', "");
Expect(1, 1560, '\p{^Is_Ccc=000000031}', "");
Expect(1, 1560, '\P{Is_Ccc=000000031}', "");
Expect(0, 1560, '\P{^Is_Ccc=000000031}', "");
Error('\p{Canonical_Combining_Class=:=000035}');
Error('\P{Canonical_Combining_Class=:=000035}');
Expect(1, 1648, '\p{Canonical_Combining_Class=035}', "");
Expect(0, 1648, '\p{^Canonical_Combining_Class=035}', "");
Expect(0, 1648, '\P{Canonical_Combining_Class=035}', "");
Expect(1, 1648, '\P{^Canonical_Combining_Class=035}', "");
Expect(0, 1647, '\p{Canonical_Combining_Class=035}', "");
Expect(1, 1647, '\p{^Canonical_Combining_Class=035}', "");
Expect(1, 1647, '\P{Canonical_Combining_Class=035}', "");
Expect(0, 1647, '\P{^Canonical_Combining_Class=035}', "");
Error('\p{Ccc= -0035/a/}');
Error('\P{Ccc= -0035/a/}');
Expect(1, 1648, '\p{Ccc=00000035}', "");
Expect(0, 1648, '\p{^Ccc=00000035}', "");
Expect(0, 1648, '\P{Ccc=00000035}', "");
Expect(1, 1648, '\P{^Ccc=00000035}', "");
Expect(0, 1647, '\p{Ccc=00000035}', "");
Expect(1, 1647, '\p{^Ccc=00000035}', "");
Expect(1, 1647, '\P{Ccc=00000035}', "");
Expect(0, 1647, '\P{^Ccc=00000035}', "");
Error('\p{Is_Canonical_Combining_Class=-	00000003:=5}');
Error('\P{Is_Canonical_Combining_Class=-	00000003:=5}');
Expect(1, 1648, '\p{Is_Canonical_Combining_Class=003_5}', "");
Expect(0, 1648, '\p{^Is_Canonical_Combining_Class=003_5}', "");
Expect(0, 1648, '\P{Is_Canonical_Combining_Class=003_5}', "");
Expect(1, 1648, '\P{^Is_Canonical_Combining_Class=003_5}', "");
Expect(0, 1647, '\p{Is_Canonical_Combining_Class=003_5}', "");
Expect(1, 1647, '\p{^Is_Canonical_Combining_Class=003_5}', "");
Expect(1, 1647, '\P{Is_Canonical_Combining_Class=003_5}', "");
Expect(0, 1647, '\P{^Is_Canonical_Combining_Class=003_5}', "");
Error('\p{Is_Ccc=		000035:=}');
Error('\P{Is_Ccc=		000035:=}');
Expect(1, 1648, '\p{Is_Ccc=0_0_0_0_0_0_035}', "");
Expect(0, 1648, '\p{^Is_Ccc=0_0_0_0_0_0_035}', "");
Expect(0, 1648, '\P{Is_Ccc=0_0_0_0_0_0_035}', "");
Expect(1, 1648, '\P{^Is_Ccc=0_0_0_0_0_0_035}', "");
Expect(0, 1647, '\p{Is_Ccc=0_0_0_0_0_0_035}', "");
Expect(1, 1647, '\p{^Is_Ccc=0_0_0_0_0_0_035}', "");
Expect(1, 1647, '\P{Is_Ccc=0_0_0_0_0_0_035}', "");
Expect(0, 1647, '\P{^Is_Ccc=0_0_0_0_0_0_035}', "");
Error('\p{Canonical_Combining_Class=-/a/0000011}');
Error('\P{Canonical_Combining_Class=-/a/0000011}');
Expect(1, 1457, '\p{Canonical_Combining_Class=0_0_11}', "");
Expect(0, 1457, '\p{^Canonical_Combining_Class=0_0_11}', "");
Expect(0, 1457, '\P{Canonical_Combining_Class=0_0_11}', "");
Expect(1, 1457, '\P{^Canonical_Combining_Class=0_0_11}', "");
Expect(0, 1456, '\p{Canonical_Combining_Class=0_0_11}', "");
Expect(1, 1456, '\p{^Canonical_Combining_Class=0_0_11}', "");
Expect(1, 1456, '\P{Canonical_Combining_Class=0_0_11}', "");
Expect(0, 1456, '\P{^Canonical_Combining_Class=0_0_11}', "");
Error('\p{Ccc=-00000000011/a/}');
Error('\P{Ccc=-00000000011/a/}');
Expect(1, 1457, '\p{Ccc=000001_1}', "");
Expect(0, 1457, '\p{^Ccc=000001_1}', "");
Expect(0, 1457, '\P{Ccc=000001_1}', "");
Expect(1, 1457, '\P{^Ccc=000001_1}', "");
Expect(0, 1456, '\p{Ccc=000001_1}', "");
Expect(1, 1456, '\p{^Ccc=000001_1}', "");
Expect(1, 1456, '\P{Ccc=000001_1}', "");
Expect(0, 1456, '\P{^Ccc=000001_1}', "");
Error('\p{Is_Canonical_Combining_Class=	_+0:=0 0_00_00	11}');
Error('\P{Is_Canonical_Combining_Class=	_+0:=0 0_00_00	11}');
Expect(1, 1457, '\p{Is_Canonical_Combining_Class=+0000000001_1}', "");
Expect(0, 1457, '\p{^Is_Canonical_Combining_Class=+0000000001_1}', "");
Expect(0, 1457, '\P{Is_Canonical_Combining_Class=+0000000001_1}', "");
Expect(1, 1457, '\P{^Is_Canonical_Combining_Class=+0000000001_1}', "");
Expect(0, 1456, '\p{Is_Canonical_Combining_Class=+0000000001_1}', "");
Expect(1, 1456, '\p{^Is_Canonical_Combining_Class=+0000000001_1}', "");
Expect(1, 1456, '\P{Is_Canonical_Combining_Class=+0000000001_1}', "");
Expect(0, 1456, '\P{^Is_Canonical_Combining_Class=+0000000001_1}', "");
Error('\p{Is_Ccc=/a/	_+00000000011}');
Error('\P{Is_Ccc=/a/	_+00000000011}');
Expect(1, 1457, '\p{Is_Ccc=0011}', "");
Expect(0, 1457, '\p{^Is_Ccc=0011}', "");
Expect(0, 1457, '\P{Is_Ccc=0011}', "");
Expect(1, 1457, '\P{^Is_Ccc=0011}', "");
Expect(0, 1456, '\p{Is_Ccc=0011}', "");
Expect(1, 1456, '\p{^Is_Ccc=0011}', "");
Expect(1, 1456, '\P{Is_Ccc=0011}', "");
Expect(0, 1456, '\P{^Is_Ccc=0011}', "");
Error('\p{Canonical_Combining_Class=  IOTA/a/Subscript}');
Error('\P{Canonical_Combining_Class=  IOTA/a/Subscript}');
Expect(1, 837, '\p{Canonical_Combining_Class:iotasubscript}', "");
Expect(0, 837, '\p{^Canonical_Combining_Class:iotasubscript}', "");
Expect(0, 837, '\P{Canonical_Combining_Class:iotasubscript}', "");
Expect(1, 837, '\P{^Canonical_Combining_Class:iotasubscript}', "");
Expect(0, 836, '\p{Canonical_Combining_Class:iotasubscript}', "");
Expect(1, 836, '\p{^Canonical_Combining_Class:iotasubscript}', "");
Expect(1, 836, '\P{Canonical_Combining_Class:iotasubscript}', "");
Expect(0, 836, '\P{^Canonical_Combining_Class:iotasubscript}', "");
Expect(1, 837, '\p{Canonical_Combining_Class= IOTA	subscript}', "");
Expect(0, 837, '\p{^Canonical_Combining_Class= IOTA	subscript}', "");
Expect(0, 837, '\P{Canonical_Combining_Class= IOTA	subscript}', "");
Expect(1, 837, '\P{^Canonical_Combining_Class= IOTA	subscript}', "");
Expect(0, 836, '\p{Canonical_Combining_Class= IOTA	subscript}', "");
Expect(1, 836, '\p{^Canonical_Combining_Class= IOTA	subscript}', "");
Expect(1, 836, '\P{Canonical_Combining_Class= IOTA	subscript}', "");
Expect(0, 836, '\P{^Canonical_Combining_Class= IOTA	subscript}', "");
Error('\p{Ccc=:=- IS}');
Error('\P{Ccc=:=- IS}');
Expect(1, 837, '\p{Ccc=is}', "");
Expect(0, 837, '\p{^Ccc=is}', "");
Expect(0, 837, '\P{Ccc=is}', "");
Expect(1, 837, '\P{^Ccc=is}', "");
Expect(0, 836, '\p{Ccc=is}', "");
Expect(1, 836, '\p{^Ccc=is}', "");
Expect(1, 836, '\P{Ccc=is}', "");
Expect(0, 836, '\P{^Ccc=is}', "");
Expect(1, 837, '\p{Ccc= -is}', "");
Expect(0, 837, '\p{^Ccc= -is}', "");
Expect(0, 837, '\P{Ccc= -is}', "");
Expect(1, 837, '\P{^Ccc= -is}', "");
Expect(0, 836, '\p{Ccc= -is}', "");
Expect(1, 836, '\p{^Ccc= -is}', "");
Expect(1, 836, '\P{Ccc= -is}', "");
Expect(0, 836, '\P{^Ccc= -is}', "");
Error('\p{Is_Canonical_Combining_Class=/a/ _00 00 24_0}');
Error('\P{Is_Canonical_Combining_Class=/a/ _00 00 24_0}');
Expect(1, 837, '\p{Is_Canonical_Combining_Class=0000240}', "");
Expect(0, 837, '\p{^Is_Canonical_Combining_Class=0000240}', "");
Expect(0, 837, '\P{Is_Canonical_Combining_Class=0000240}', "");
Expect(1, 837, '\P{^Is_Canonical_Combining_Class=0000240}', "");
Expect(0, 836, '\p{Is_Canonical_Combining_Class=0000240}', "");
Expect(1, 836, '\p{^Is_Canonical_Combining_Class=0000240}', "");
Expect(1, 836, '\P{Is_Canonical_Combining_Class=0000240}', "");
Expect(0, 836, '\P{^Is_Canonical_Combining_Class=0000240}', "");
Error('\p{Is_Ccc=	/a/IOTASubscript}');
Error('\P{Is_Ccc=	/a/IOTASubscript}');
Expect(1, 837, '\p{Is_Ccc=iotasubscript}', "");
Expect(0, 837, '\p{^Is_Ccc=iotasubscript}', "");
Expect(0, 837, '\P{Is_Ccc=iotasubscript}', "");
Expect(1, 837, '\P{^Is_Ccc=iotasubscript}', "");
Expect(0, 836, '\p{Is_Ccc=iotasubscript}', "");
Expect(1, 836, '\p{^Is_Ccc=iotasubscript}', "");
Expect(1, 836, '\P{Is_Ccc=iotasubscript}', "");
Expect(0, 836, '\P{^Is_Ccc=iotasubscript}', "");
Expect(1, 837, '\p{Is_Ccc= 	IOTASubscript}', "");
Expect(0, 837, '\p{^Is_Ccc= 	IOTASubscript}', "");
Expect(0, 837, '\P{Is_Ccc= 	IOTASubscript}', "");
Expect(1, 837, '\P{^Is_Ccc= 	IOTASubscript}', "");
Expect(0, 836, '\p{Is_Ccc= 	IOTASubscript}', "");
Expect(1, 836, '\p{^Is_Ccc= 	IOTASubscript}', "");
Expect(1, 836, '\P{Is_Ccc= 	IOTASubscript}', "");
Expect(0, 836, '\P{^Is_Ccc= 	IOTASubscript}', "");
Error('\p{Canonical_Combining_Class=	/a/above-Right}');
Error('\P{Canonical_Combining_Class=	/a/above-Right}');
Expect(1, 789, '\p{Canonical_Combining_Class=aboveright}', "");
Expect(0, 789, '\p{^Canonical_Combining_Class=aboveright}', "");
Expect(0, 789, '\P{Canonical_Combining_Class=aboveright}', "");
Expect(1, 789, '\P{^Canonical_Combining_Class=aboveright}', "");
Expect(0, 788, '\p{Canonical_Combining_Class=aboveright}', "");
Expect(1, 788, '\p{^Canonical_Combining_Class=aboveright}', "");
Expect(1, 788, '\P{Canonical_Combining_Class=aboveright}', "");
Expect(0, 788, '\P{^Canonical_Combining_Class=aboveright}', "");
Expect(1, 789, '\p{Canonical_Combining_Class=-_Above	right}', "");
Expect(0, 789, '\p{^Canonical_Combining_Class=-_Above	right}', "");
Expect(0, 789, '\P{Canonical_Combining_Class=-_Above	right}', "");
Expect(1, 789, '\P{^Canonical_Combining_Class=-_Above	right}', "");
Expect(0, 788, '\p{Canonical_Combining_Class=-_Above	right}', "");
Expect(1, 788, '\p{^Canonical_Combining_Class=-_Above	right}', "");
Expect(1, 788, '\P{Canonical_Combining_Class=-_Above	right}', "");
Expect(0, 788, '\P{^Canonical_Combining_Class=-_Above	right}', "");
Error('\p{Ccc= /a/AR}');
Error('\P{Ccc= /a/AR}');
Expect(1, 789, '\p{Ccc=ar}', "");
Expect(0, 789, '\p{^Ccc=ar}', "");
Expect(0, 789, '\P{Ccc=ar}', "");
Expect(1, 789, '\P{^Ccc=ar}', "");
Expect(0, 788, '\p{Ccc=ar}', "");
Expect(1, 788, '\p{^Ccc=ar}', "");
Expect(1, 788, '\P{Ccc=ar}', "");
Expect(0, 788, '\P{^Ccc=ar}', "");
Expect(1, 789, '\p{Ccc=__ar}', "");
Expect(0, 789, '\p{^Ccc=__ar}', "");
Expect(0, 789, '\P{Ccc=__ar}', "");
Expect(1, 789, '\P{^Ccc=__ar}', "");
Expect(0, 788, '\p{Ccc=__ar}', "");
Expect(1, 788, '\p{^Ccc=__ar}', "");
Expect(1, 788, '\P{Ccc=__ar}', "");
Expect(0, 788, '\P{^Ccc=__ar}', "");
Error('\p{Is_Canonical_Combining_Class=:=0002 32}');
Error('\P{Is_Canonical_Combining_Class=:=0002 32}');
Expect(1, 789, '\p{Is_Canonical_Combining_Class=0_0_0_0_0232}', "");
Expect(0, 789, '\p{^Is_Canonical_Combining_Class=0_0_0_0_0232}', "");
Expect(0, 789, '\P{Is_Canonical_Combining_Class=0_0_0_0_0232}', "");
Expect(1, 789, '\P{^Is_Canonical_Combining_Class=0_0_0_0_0232}', "");
Expect(0, 788, '\p{Is_Canonical_Combining_Class=0_0_0_0_0232}', "");
Expect(1, 788, '\p{^Is_Canonical_Combining_Class=0_0_0_0_0232}', "");
Expect(1, 788, '\P{Is_Canonical_Combining_Class=0_0_0_0_0232}', "");
Expect(0, 788, '\P{^Is_Canonical_Combining_Class=0_0_0_0_0232}', "");
Error('\p{Is_Ccc=-	Above:=right}');
Error('\P{Is_Ccc=-	Above:=right}');
Expect(1, 789, '\p{Is_Ccc=aboveright}', "");
Expect(0, 789, '\p{^Is_Ccc=aboveright}', "");
Expect(0, 789, '\P{Is_Ccc=aboveright}', "");
Expect(1, 789, '\P{^Is_Ccc=aboveright}', "");
Expect(0, 788, '\p{Is_Ccc=aboveright}', "");
Expect(1, 788, '\p{^Is_Ccc=aboveright}', "");
Expect(1, 788, '\P{Is_Ccc=aboveright}', "");
Expect(0, 788, '\P{^Is_Ccc=aboveright}', "");
Expect(1, 789, '\p{Is_Ccc=-	Above Right}', "");
Expect(0, 789, '\p{^Is_Ccc=-	Above Right}', "");
Expect(0, 789, '\P{Is_Ccc=-	Above Right}', "");
Expect(1, 789, '\P{^Is_Ccc=-	Above Right}', "");
Expect(0, 788, '\p{Is_Ccc=-	Above Right}', "");
Expect(1, 788, '\p{^Is_Ccc=-	Above Right}', "");
Expect(1, 788, '\P{Is_Ccc=-	Above Right}', "");
Expect(0, 788, '\P{^Is_Ccc=-	Above Right}', "");
Error('\p{Canonical_Combining_Class= :=0002-9}');
Error('\P{Canonical_Combining_Class= :=0002-9}');
Expect(1, 1613, '\p{Canonical_Combining_Class=00029}', "");
Expect(0, 1613, '\p{^Canonical_Combining_Class=00029}', "");
Expect(0, 1613, '\P{Canonical_Combining_Class=00029}', "");
Expect(1, 1613, '\P{^Canonical_Combining_Class=00029}', "");
Expect(0, 1612, '\p{Canonical_Combining_Class=00029}', "");
Expect(1, 1612, '\p{^Canonical_Combining_Class=00029}', "");
Expect(1, 1612, '\P{Canonical_Combining_Class=00029}', "");
Expect(0, 1612, '\P{^Canonical_Combining_Class=00029}', "");
Error('\p{Ccc= -0_0:=29}');
Error('\P{Ccc= -0_0:=29}');
Expect(1, 1613, '\p{Ccc=+029}', "");
Expect(0, 1613, '\p{^Ccc=+029}', "");
Expect(0, 1613, '\P{Ccc=+029}', "");
Expect(1, 1613, '\P{^Ccc=+029}', "");
Expect(0, 1612, '\p{Ccc=+029}', "");
Expect(1, 1612, '\p{^Ccc=+029}', "");
Expect(1, 1612, '\P{Ccc=+029}', "");
Expect(0, 1612, '\P{^Ccc=+029}', "");
Error('\p{Is_Canonical_Combining_Class=:=0 00-00-0	29}');
Error('\P{Is_Canonical_Combining_Class=:=0 00-00-0	29}');
Expect(1, 1613, '\p{Is_Canonical_Combining_Class=00002_9}', "");
Expect(0, 1613, '\p{^Is_Canonical_Combining_Class=00002_9}', "");
Expect(0, 1613, '\P{Is_Canonical_Combining_Class=00002_9}', "");
Expect(1, 1613, '\P{^Is_Canonical_Combining_Class=00002_9}', "");
Expect(0, 1612, '\p{Is_Canonical_Combining_Class=00002_9}', "");
Expect(1, 1612, '\p{^Is_Canonical_Combining_Class=00002_9}', "");
Expect(1, 1612, '\P{Is_Canonical_Combining_Class=00002_9}', "");
Expect(0, 1612, '\P{^Is_Canonical_Combining_Class=00002_9}', "");
Error('\p{Is_Ccc=/a/+00 00 00 00029}');
Error('\P{Is_Ccc=/a/+00 00 00 00029}');
Expect(1, 1613, '\p{Is_Ccc=00_02_9}', "");
Expect(0, 1613, '\p{^Is_Ccc=00_02_9}', "");
Expect(0, 1613, '\P{Is_Ccc=00_02_9}', "");
Expect(1, 1613, '\P{^Is_Ccc=00_02_9}', "");
Expect(0, 1612, '\p{Is_Ccc=00_02_9}', "");
Expect(1, 1612, '\p{^Is_Ccc=00_02_9}', "");
Expect(1, 1612, '\P{Is_Ccc=00_02_9}', "");
Expect(0, 1612, '\P{^Is_Ccc=00_02_9}', "");
Error('\p{Canonical_Combining_Class=/a/	-RIGHT}');
Error('\P{Canonical_Combining_Class=/a/	-RIGHT}');
Expect(1, 119149, '\p{Canonical_Combining_Class=right}', "");
Expect(0, 119149, '\p{^Canonical_Combining_Class=right}', "");
Expect(0, 119149, '\P{Canonical_Combining_Class=right}', "");
Expect(1, 119149, '\P{^Canonical_Combining_Class=right}', "");
Expect(0, 119148, '\p{Canonical_Combining_Class=right}', "");
Expect(1, 119148, '\p{^Canonical_Combining_Class=right}', "");
Expect(1, 119148, '\P{Canonical_Combining_Class=right}', "");
Expect(0, 119148, '\P{^Canonical_Combining_Class=right}', "");
Expect(1, 119149, '\p{Canonical_Combining_Class=	Right}', "");
Expect(0, 119149, '\p{^Canonical_Combining_Class=	Right}', "");
Expect(0, 119149, '\P{Canonical_Combining_Class=	Right}', "");
Expect(1, 119149, '\P{^Canonical_Combining_Class=	Right}', "");
Expect(0, 119148, '\p{Canonical_Combining_Class=	Right}', "");
Expect(1, 119148, '\p{^Canonical_Combining_Class=	Right}', "");
Expect(1, 119148, '\P{Canonical_Combining_Class=	Right}', "");
Expect(0, 119148, '\P{^Canonical_Combining_Class=	Right}', "");
Error('\p{Ccc=/a/ R}');
Error('\P{Ccc=/a/ R}');
Expect(1, 119149, '\p{Ccc=r}', "");
Expect(0, 119149, '\p{^Ccc=r}', "");
Expect(0, 119149, '\P{Ccc=r}', "");
Expect(1, 119149, '\P{^Ccc=r}', "");
Expect(0, 119148, '\p{Ccc=r}', "");
Expect(1, 119148, '\p{^Ccc=r}', "");
Expect(1, 119148, '\P{Ccc=r}', "");
Expect(0, 119148, '\P{^Ccc=r}', "");
Expect(1, 119149, '\p{Ccc=_	R}', "");
Expect(0, 119149, '\p{^Ccc=_	R}', "");
Expect(0, 119149, '\P{Ccc=_	R}', "");
Expect(1, 119149, '\P{^Ccc=_	R}', "");
Expect(0, 119148, '\p{Ccc=_	R}', "");
Expect(1, 119148, '\p{^Ccc=_	R}', "");
Expect(1, 119148, '\P{Ccc=_	R}', "");
Expect(0, 119148, '\P{^Ccc=_	R}', "");
Error('\p{Is_Canonical_Combining_Class:   	000-000 022/a/6}');
Error('\P{Is_Canonical_Combining_Class:   	000-000 022/a/6}');
Expect(1, 119149, '\p{Is_Canonical_Combining_Class=00000226}', "");
Expect(0, 119149, '\p{^Is_Canonical_Combining_Class=00000226}', "");
Expect(0, 119149, '\P{Is_Canonical_Combining_Class=00000226}', "");
Expect(1, 119149, '\P{^Is_Canonical_Combining_Class=00000226}', "");
Expect(0, 119148, '\p{Is_Canonical_Combining_Class=00000226}', "");
Expect(1, 119148, '\p{^Is_Canonical_Combining_Class=00000226}', "");
Expect(1, 119148, '\P{Is_Canonical_Combining_Class=00000226}', "");
Expect(0, 119148, '\P{^Is_Canonical_Combining_Class=00000226}', "");
Error('\p{Is_Ccc=	/a/Right}');
Error('\P{Is_Ccc=	/a/Right}');
Expect(1, 119149, '\p{Is_Ccc=right}', "");
Expect(0, 119149, '\p{^Is_Ccc=right}', "");
Expect(0, 119149, '\P{Is_Ccc=right}', "");
Expect(1, 119149, '\P{^Is_Ccc=right}', "");
Expect(0, 119148, '\p{Is_Ccc=right}', "");
Expect(1, 119148, '\p{^Is_Ccc=right}', "");
Expect(1, 119148, '\P{Is_Ccc=right}', "");
Expect(0, 119148, '\P{^Is_Ccc=right}', "");
Expect(1, 119149, '\p{Is_Ccc=_Right}', "");
Expect(0, 119149, '\p{^Is_Ccc=_Right}', "");
Expect(0, 119149, '\P{Is_Ccc=_Right}', "");
Expect(1, 119149, '\P{^Is_Ccc=_Right}', "");
Expect(0, 119148, '\p{Is_Ccc=_Right}', "");
Expect(1, 119148, '\p{^Is_Ccc=_Right}', "");
Expect(1, 119148, '\P{Is_Ccc=_Right}', "");
Expect(0, 119148, '\P{^Is_Ccc=_Right}', "");
Error('\p{Canonical_Combining_Class=_/a/00-00	15}');
Error('\P{Canonical_Combining_Class=_/a/00-00	15}');
Expect(1, 1461, '\p{Canonical_Combining_Class=0_0_0_0_0_0_0_15}', "");
Expect(0, 1461, '\p{^Canonical_Combining_Class=0_0_0_0_0_0_0_15}', "");
Expect(0, 1461, '\P{Canonical_Combining_Class=0_0_0_0_0_0_0_15}', "");
Expect(1, 1461, '\P{^Canonical_Combining_Class=0_0_0_0_0_0_0_15}', "");
Expect(0, 1460, '\p{Canonical_Combining_Class=0_0_0_0_0_0_0_15}', "");
Expect(1, 1460, '\p{^Canonical_Combining_Class=0_0_0_0_0_0_0_15}', "");
Expect(1, 1460, '\P{Canonical_Combining_Class=0_0_0_0_0_0_0_15}', "");
Expect(0, 1460, '\P{^Canonical_Combining_Class=0_0_0_0_0_0_0_15}', "");
Error('\p{Ccc=/a/	-00015}');
Error('\P{Ccc=/a/	-00015}');
Expect(1, 1461, '\p{Ccc: 0000015}', "");
Expect(0, 1461, '\p{^Ccc: 0000015}', "");
Expect(0, 1461, '\P{Ccc: 0000015}', "");
Expect(1, 1461, '\P{^Ccc: 0000015}', "");
Expect(0, 1460, '\p{Ccc: 0000015}', "");
Expect(1, 1460, '\p{^Ccc: 0000015}', "");
Expect(1, 1460, '\P{Ccc: 0000015}', "");
Expect(0, 1460, '\P{^Ccc: 0000015}', "");
Error('\p{Is_Canonical_Combining_Class=-+0000000015/a/}');
Error('\P{Is_Canonical_Combining_Class=-+0000000015/a/}');
Expect(1, 1461, '\p{Is_Canonical_Combining_Class=+00015}', "");
Expect(0, 1461, '\p{^Is_Canonical_Combining_Class=+00015}', "");
Expect(0, 1461, '\P{Is_Canonical_Combining_Class=+00015}', "");
Expect(1, 1461, '\P{^Is_Canonical_Combining_Class=+00015}', "");
Expect(0, 1460, '\p{Is_Canonical_Combining_Class=+00015}', "");
Expect(1, 1460, '\p{^Is_Canonical_Combining_Class=+00015}', "");
Expect(1, 1460, '\P{Is_Canonical_Combining_Class=+00015}', "");
Expect(0, 1460, '\P{^Is_Canonical_Combining_Class=+00015}', "");
Error('\p{Is_Ccc=:=-0015}');
Error('\P{Is_Ccc=:=-0015}');
Expect(1, 1461, '\p{Is_Ccc:   00015}', "");
Expect(0, 1461, '\p{^Is_Ccc:   00015}', "");
Expect(0, 1461, '\P{Is_Ccc:   00015}', "");
Expect(1, 1461, '\P{^Is_Ccc:   00015}', "");
Expect(0, 1460, '\p{Is_Ccc:   00015}', "");
Expect(1, 1460, '\p{^Is_Ccc:   00015}', "");
Expect(1, 1460, '\P{Is_Ccc:   00015}', "");
Expect(0, 1460, '\P{^Is_Ccc:   00015}', "");
Error('\p{Canonical_Combining_Class=:=	BELOW Left}');
Error('\P{Canonical_Combining_Class=:=	BELOW Left}');
Expect(1, 12330, '\p{Canonical_Combining_Class=belowleft}', "");
Expect(0, 12330, '\p{^Canonical_Combining_Class=belowleft}', "");
Expect(0, 12330, '\P{Canonical_Combining_Class=belowleft}', "");
Expect(1, 12330, '\P{^Canonical_Combining_Class=belowleft}', "");
Expect(0, 12329, '\p{Canonical_Combining_Class=belowleft}', "");
Expect(1, 12329, '\p{^Canonical_Combining_Class=belowleft}', "");
Expect(1, 12329, '\P{Canonical_Combining_Class=belowleft}', "");
Expect(0, 12329, '\P{^Canonical_Combining_Class=belowleft}', "");
Expect(1, 12330, '\p{Canonical_Combining_Class: _	belowLEFT}', "");
Expect(0, 12330, '\p{^Canonical_Combining_Class: _	belowLEFT}', "");
Expect(0, 12330, '\P{Canonical_Combining_Class: _	belowLEFT}', "");
Expect(1, 12330, '\P{^Canonical_Combining_Class: _	belowLEFT}', "");
Expect(0, 12329, '\p{Canonical_Combining_Class: _	belowLEFT}', "");
Expect(1, 12329, '\p{^Canonical_Combining_Class: _	belowLEFT}', "");
Expect(1, 12329, '\P{Canonical_Combining_Class: _	belowLEFT}', "");
Expect(0, 12329, '\P{^Canonical_Combining_Class: _	belowLEFT}', "");
Error('\p{Ccc=:=_	BL}');
Error('\P{Ccc=:=_	BL}');
Expect(1, 12330, '\p{Ccc=bl}', "");
Expect(0, 12330, '\p{^Ccc=bl}', "");
Expect(0, 12330, '\P{Ccc=bl}', "");
Expect(1, 12330, '\P{^Ccc=bl}', "");
Expect(0, 12329, '\p{Ccc=bl}', "");
Expect(1, 12329, '\p{^Ccc=bl}', "");
Expect(1, 12329, '\P{Ccc=bl}', "");
Expect(0, 12329, '\P{^Ccc=bl}', "");
Expect(1, 12330, '\p{Ccc=--BL}', "");
Expect(0, 12330, '\p{^Ccc=--BL}', "");
Expect(0, 12330, '\P{Ccc=--BL}', "");
Expect(1, 12330, '\P{^Ccc=--BL}', "");
Expect(0, 12329, '\p{Ccc=--BL}', "");
Expect(1, 12329, '\p{^Ccc=--BL}', "");
Expect(1, 12329, '\P{Ccc=--BL}', "");
Expect(0, 12329, '\P{^Ccc=--BL}', "");
Error('\p{Is_Canonical_Combining_Class= /a/000218}');
Error('\P{Is_Canonical_Combining_Class= /a/000218}');
Expect(1, 12330, '\p{Is_Canonical_Combining_Class=+0218}', "");
Expect(0, 12330, '\p{^Is_Canonical_Combining_Class=+0218}', "");
Expect(0, 12330, '\P{Is_Canonical_Combining_Class=+0218}', "");
Expect(1, 12330, '\P{^Is_Canonical_Combining_Class=+0218}', "");
Expect(0, 12329, '\p{Is_Canonical_Combining_Class=+0218}', "");
Expect(1, 12329, '\p{^Is_Canonical_Combining_Class=+0218}', "");
Expect(1, 12329, '\P{Is_Canonical_Combining_Class=+0218}', "");
Expect(0, 12329, '\P{^Is_Canonical_Combining_Class=+0218}', "");
Error('\p{Is_Ccc=  BELOW_LEFT:=}');
Error('\P{Is_Ccc=  BELOW_LEFT:=}');
Expect(1, 12330, '\p{Is_Ccc=belowleft}', "");
Expect(0, 12330, '\p{^Is_Ccc=belowleft}', "");
Expect(0, 12330, '\P{Is_Ccc=belowleft}', "");
Expect(1, 12330, '\P{^Is_Ccc=belowleft}', "");
Expect(0, 12329, '\p{Is_Ccc=belowleft}', "");
Expect(1, 12329, '\p{^Is_Ccc=belowleft}', "");
Expect(1, 12329, '\P{Is_Ccc=belowleft}', "");
Expect(0, 12329, '\P{^Is_Ccc=belowleft}', "");
Expect(1, 12330, '\p{Is_Ccc=--Below	Left}', "");
Expect(0, 12330, '\p{^Is_Ccc=--Below	Left}', "");
Expect(0, 12330, '\P{Is_Ccc=--Below	Left}', "");
Expect(1, 12330, '\P{^Is_Ccc=--Below	Left}', "");
Expect(0, 12329, '\p{Is_Ccc=--Below	Left}', "");
Expect(1, 12329, '\p{^Is_Ccc=--Below	Left}', "");
Expect(1, 12329, '\P{Is_Ccc=--Below	Left}', "");
Expect(0, 12329, '\P{^Is_Ccc=--Below	Left}', "");
Error('\p{Canonical_Combining_Class=/a/-	left}');
Error('\P{Canonical_Combining_Class=/a/-	left}');
Expect(1, 12335, '\p{Canonical_Combining_Class:   left}', "");
Expect(0, 12335, '\p{^Canonical_Combining_Class:   left}', "");
Expect(0, 12335, '\P{Canonical_Combining_Class:   left}', "");
Expect(1, 12335, '\P{^Canonical_Combining_Class:   left}', "");
Expect(0, 12333, '\p{Canonical_Combining_Class:   left}', "");
Expect(1, 12333, '\p{^Canonical_Combining_Class:   left}', "");
Expect(1, 12333, '\P{Canonical_Combining_Class:   left}', "");
Expect(0, 12333, '\P{^Canonical_Combining_Class:   left}', "");
Expect(1, 12335, '\p{Canonical_Combining_Class= -Left}', "");
Expect(0, 12335, '\p{^Canonical_Combining_Class= -Left}', "");
Expect(0, 12335, '\P{Canonical_Combining_Class= -Left}', "");
Expect(1, 12335, '\P{^Canonical_Combining_Class= -Left}', "");
Expect(0, 12333, '\p{Canonical_Combining_Class= -Left}', "");
Expect(1, 12333, '\p{^Canonical_Combining_Class= -Left}', "");
Expect(1, 12333, '\P{Canonical_Combining_Class= -Left}', "");
Expect(0, 12333, '\P{^Canonical_Combining_Class= -Left}', "");
Error('\p{Ccc=	:=L}');
Error('\P{Ccc=	:=L}');
Expect(1, 12335, '\p{Ccc=l}', "");
Expect(0, 12335, '\p{^Ccc=l}', "");
Expect(0, 12335, '\P{Ccc=l}', "");
Expect(1, 12335, '\P{^Ccc=l}', "");
Expect(0, 12333, '\p{Ccc=l}', "");
Expect(1, 12333, '\p{^Ccc=l}', "");
Expect(1, 12333, '\P{Ccc=l}', "");
Expect(0, 12333, '\P{^Ccc=l}', "");
Expect(1, 12335, '\p{Ccc=_	L}', "");
Expect(0, 12335, '\p{^Ccc=_	L}', "");
Expect(0, 12335, '\P{Ccc=_	L}', "");
Expect(1, 12335, '\P{^Ccc=_	L}', "");
Expect(0, 12333, '\p{Ccc=_	L}', "");
Expect(1, 12333, '\p{^Ccc=_	L}', "");
Expect(1, 12333, '\P{Ccc=_	L}', "");
Expect(0, 12333, '\P{^Ccc=_	L}', "");
Error('\p{Is_Canonical_Combining_Class=	_+22	4/a/}');
Error('\P{Is_Canonical_Combining_Class=	_+22	4/a/}');
Expect(1, 12335, '\p{Is_Canonical_Combining_Class=224}', "");
Expect(0, 12335, '\p{^Is_Canonical_Combining_Class=224}', "");
Expect(0, 12335, '\P{Is_Canonical_Combining_Class=224}', "");
Expect(1, 12335, '\P{^Is_Canonical_Combining_Class=224}', "");
Expect(0, 12333, '\p{Is_Canonical_Combining_Class=224}', "");
Expect(1, 12333, '\p{^Is_Canonical_Combining_Class=224}', "");
Expect(1, 12333, '\P{Is_Canonical_Combining_Class=224}', "");
Expect(0, 12333, '\P{^Is_Canonical_Combining_Class=224}', "");
Error('\p{Is_Ccc:	-/a/Left}');
Error('\P{Is_Ccc:	-/a/Left}');
Expect(1, 12335, '\p{Is_Ccc=left}', "");
Expect(0, 12335, '\p{^Is_Ccc=left}', "");
Expect(0, 12335, '\P{Is_Ccc=left}', "");
Expect(1, 12335, '\P{^Is_Ccc=left}', "");
Expect(0, 12333, '\p{Is_Ccc=left}', "");
Expect(1, 12333, '\p{^Is_Ccc=left}', "");
Expect(1, 12333, '\P{Is_Ccc=left}', "");
Expect(0, 12333, '\P{^Is_Ccc=left}', "");
Expect(1, 12335, '\p{Is_Ccc=-LEFT}', "");
Expect(0, 12335, '\p{^Is_Ccc=-LEFT}', "");
Expect(0, 12335, '\P{Is_Ccc=-LEFT}', "");
Expect(1, 12335, '\P{^Is_Ccc=-LEFT}', "");
Expect(0, 12333, '\p{Is_Ccc=-LEFT}', "");
Expect(1, 12333, '\p{^Is_Ccc=-LEFT}', "");
Expect(1, 12333, '\P{Is_Ccc=-LEFT}', "");
Expect(0, 12333, '\P{^Is_Ccc=-LEFT}', "");
Error('\p{Canonical_Combining_Class=-above/a/}');
Error('\P{Canonical_Combining_Class=-above/a/}');
Expect(1, 788, '\p{Canonical_Combining_Class=above}', "");
Expect(0, 788, '\p{^Canonical_Combining_Class=above}', "");
Expect(0, 788, '\P{Canonical_Combining_Class=above}', "");
Expect(1, 788, '\P{^Canonical_Combining_Class=above}', "");
Expect(0, 767, '\p{Canonical_Combining_Class=above}', "");
Expect(1, 767, '\p{^Canonical_Combining_Class=above}', "");
Expect(1, 767, '\P{Canonical_Combining_Class=above}', "");
Expect(0, 767, '\P{^Canonical_Combining_Class=above}', "");
Expect(1, 788, '\p{Canonical_Combining_Class=-_Above}', "");
Expect(0, 788, '\p{^Canonical_Combining_Class=-_Above}', "");
Expect(0, 788, '\P{Canonical_Combining_Class=-_Above}', "");
Expect(1, 788, '\P{^Canonical_Combining_Class=-_Above}', "");
Expect(0, 767, '\p{Canonical_Combining_Class=-_Above}', "");
Expect(1, 767, '\p{^Canonical_Combining_Class=-_Above}', "");
Expect(1, 767, '\P{Canonical_Combining_Class=-_Above}', "");
Expect(0, 767, '\P{^Canonical_Combining_Class=-_Above}', "");
Error('\p{Ccc=:=A}');
Error('\P{Ccc=:=A}');
Expect(1, 788, '\p{Ccc=a}', "");
Expect(0, 788, '\p{^Ccc=a}', "");
Expect(0, 788, '\P{Ccc=a}', "");
Expect(1, 788, '\P{^Ccc=a}', "");
Expect(0, 767, '\p{Ccc=a}', "");
Expect(1, 767, '\p{^Ccc=a}', "");
Expect(1, 767, '\P{Ccc=a}', "");
Expect(0, 767, '\P{^Ccc=a}', "");
Expect(1, 788, '\p{Ccc=  a}', "");
Expect(0, 788, '\p{^Ccc=  a}', "");
Expect(0, 788, '\P{Ccc=  a}', "");
Expect(1, 788, '\P{^Ccc=  a}', "");
Expect(0, 767, '\p{Ccc=  a}', "");
Expect(1, 767, '\p{^Ccc=  a}', "");
Expect(1, 767, '\P{Ccc=  a}', "");
Expect(0, 767, '\P{^Ccc=  a}', "");
Error('\p{Is_Canonical_Combining_Class=:=_0000230}');
Error('\P{Is_Canonical_Combining_Class=:=_0000230}');
Expect(1, 788, '\p{Is_Canonical_Combining_Class=0_0_0_0_0230}', "");
Expect(0, 788, '\p{^Is_Canonical_Combining_Class=0_0_0_0_0230}', "");
Expect(0, 788, '\P{Is_Canonical_Combining_Class=0_0_0_0_0230}', "");
Expect(1, 788, '\P{^Is_Canonical_Combining_Class=0_0_0_0_0230}', "");
Expect(0, 767, '\p{Is_Canonical_Combining_Class=0_0_0_0_0230}', "");
Expect(1, 767, '\p{^Is_Canonical_Combining_Class=0_0_0_0_0230}', "");
Expect(1, 767, '\P{Is_Canonical_Combining_Class=0_0_0_0_0230}', "");
Expect(0, 767, '\P{^Is_Canonical_Combining_Class=0_0_0_0_0230}', "");
Error('\p{Is_Ccc: -ABOVE:=}');
Error('\P{Is_Ccc: -ABOVE:=}');
Expect(1, 788, '\p{Is_Ccc=above}', "");
Expect(0, 788, '\p{^Is_Ccc=above}', "");
Expect(0, 788, '\P{Is_Ccc=above}', "");
Expect(1, 788, '\P{^Is_Ccc=above}', "");
Expect(0, 767, '\p{Is_Ccc=above}', "");
Expect(1, 767, '\p{^Is_Ccc=above}', "");
Expect(1, 767, '\P{Is_Ccc=above}', "");
Expect(0, 767, '\P{^Is_Ccc=above}', "");
Expect(1, 788, '\p{Is_Ccc=--Above}', "");
Expect(0, 788, '\p{^Is_Ccc=--Above}', "");
Expect(0, 788, '\P{Is_Ccc=--Above}', "");
Expect(1, 788, '\P{^Is_Ccc=--Above}', "");
Expect(0, 767, '\p{Is_Ccc=--Above}', "");
Expect(1, 767, '\p{^Is_Ccc=--Above}', "");
Expect(1, 767, '\P{Is_Ccc=--Above}', "");
Expect(0, 767, '\P{^Is_Ccc=--Above}', "");
Error('\p{Canonical_Combining_Class=_:=+00000129}');
Error('\P{Canonical_Combining_Class=_:=+00000129}');
Expect(1, 3953, '\p{Canonical_Combining_Class=000_001_29}', "");
Expect(0, 3953, '\p{^Canonical_Combining_Class=000_001_29}', "");
Expect(0, 3953, '\P{Canonical_Combining_Class=000_001_29}', "");
Expect(1, 3953, '\P{^Canonical_Combining_Class=000_001_29}', "");
Expect(0, 3952, '\p{Canonical_Combining_Class=000_001_29}', "");
Expect(1, 3952, '\p{^Canonical_Combining_Class=000_001_29}', "");
Expect(1, 3952, '\P{Canonical_Combining_Class=000_001_29}', "");
Expect(0, 3952, '\P{^Canonical_Combining_Class=000_001_29}', "");
Error('\p{Ccc=0/a/0	0129}');
Error('\P{Ccc=0/a/0	0129}');
Expect(1, 3953, '\p{Ccc=0000_0001_29}', "");
Expect(0, 3953, '\p{^Ccc=0000_0001_29}', "");
Expect(0, 3953, '\P{Ccc=0000_0001_29}', "");
Expect(1, 3953, '\P{^Ccc=0000_0001_29}', "");
Expect(0, 3952, '\p{Ccc=0000_0001_29}', "");
Expect(1, 3952, '\p{^Ccc=0000_0001_29}', "");
Expect(1, 3952, '\P{Ccc=0000_0001_29}', "");
Expect(0, 3952, '\P{^Ccc=0000_0001_29}', "");
Error('\p{Is_Canonical_Combining_Class=	00/a/12	9}');
Error('\P{Is_Canonical_Combining_Class=	00/a/12	9}');
Expect(1, 3953, '\p{Is_Canonical_Combining_Class=12_9}', "");
Expect(0, 3953, '\p{^Is_Canonical_Combining_Class=12_9}', "");
Expect(0, 3953, '\P{Is_Canonical_Combining_Class=12_9}', "");
Expect(1, 3953, '\P{^Is_Canonical_Combining_Class=12_9}', "");
Expect(0, 3952, '\p{Is_Canonical_Combining_Class=12_9}', "");
Expect(1, 3952, '\p{^Is_Canonical_Combining_Class=12_9}', "");
Expect(1, 3952, '\P{Is_Canonical_Combining_Class=12_9}', "");
Expect(0, 3952, '\P{^Is_Canonical_Combining_Class=12_9}', "");
Error('\p{Is_Ccc=-	+0-0:=0	0-1 29}');
Error('\P{Is_Ccc=-	+0-0:=0	0-1 29}');
Expect(1, 3953, '\p{Is_Ccc=0_0_0_0_0_0_129}', "");
Expect(0, 3953, '\p{^Is_Ccc=0_0_0_0_0_0_129}', "");
Expect(0, 3953, '\P{Is_Ccc=0_0_0_0_0_0_129}', "");
Expect(1, 3953, '\P{^Is_Ccc=0_0_0_0_0_0_129}', "");
Expect(0, 3952, '\p{Is_Ccc=0_0_0_0_0_0_129}', "");
Expect(1, 3952, '\p{^Is_Ccc=0_0_0_0_0_0_129}', "");
Expect(1, 3952, '\P{Is_Ccc=0_0_0_0_0_0_129}', "");
Expect(0, 3952, '\P{^Is_Ccc=0_0_0_0_0_0_129}', "");
Error('\p{Canonical_Combining_Class=:=	_0001-7}');
Error('\P{Canonical_Combining_Class=:=	_0001-7}');
Expect(1, 1463, '\p{Canonical_Combining_Class=+00001_7}', "");
Expect(0, 1463, '\p{^Canonical_Combining_Class=+00001_7}', "");
Expect(0, 1463, '\P{Canonical_Combining_Class=+00001_7}', "");
Expect(1, 1463, '\P{^Canonical_Combining_Class=+00001_7}', "");
Expect(0, 1462, '\p{Canonical_Combining_Class=+00001_7}', "");
Expect(1, 1462, '\p{^Canonical_Combining_Class=+00001_7}', "");
Expect(1, 1462, '\P{Canonical_Combining_Class=+00001_7}', "");
Expect(0, 1462, '\P{^Canonical_Combining_Class=+00001_7}', "");
Error('\p{Ccc=_:=00017}');
Error('\P{Ccc=_:=00017}');
Expect(1, 1463, '\p{Ccc: 017}', "");
Expect(0, 1463, '\p{^Ccc: 017}', "");
Expect(0, 1463, '\P{Ccc: 017}', "");
Expect(1, 1463, '\P{^Ccc: 017}', "");
Expect(0, 1462, '\p{Ccc: 017}', "");
Expect(1, 1462, '\p{^Ccc: 017}', "");
Expect(1, 1462, '\P{Ccc: 017}', "");
Expect(0, 1462, '\P{^Ccc: 017}', "");
Error('\p{Is_Canonical_Combining_Class=	/a/+00000000017}');
Error('\P{Is_Canonical_Combining_Class=	/a/+00000000017}');
Expect(1, 1463, '\p{Is_Canonical_Combining_Class=17}', "");
Expect(0, 1463, '\p{^Is_Canonical_Combining_Class=17}', "");
Expect(0, 1463, '\P{Is_Canonical_Combining_Class=17}', "");
Expect(1, 1463, '\P{^Is_Canonical_Combining_Class=17}', "");
Expect(0, 1462, '\p{Is_Canonical_Combining_Class=17}', "");
Expect(1, 1462, '\p{^Is_Canonical_Combining_Class=17}', "");
Expect(1, 1462, '\P{Is_Canonical_Combining_Class=17}', "");
Expect(0, 1462, '\P{^Is_Canonical_Combining_Class=17}', "");
Error('\p{Is_Ccc=_+000001:=7}');
Error('\P{Is_Ccc=_+000001:=7}');
Expect(1, 1463, '\p{Is_Ccc=0001_7}', "");
Expect(0, 1463, '\p{^Is_Ccc=0001_7}', "");
Expect(0, 1463, '\P{Is_Ccc=0001_7}', "");
Expect(1, 1463, '\P{^Is_Ccc=0001_7}', "");
Expect(0, 1462, '\p{Is_Ccc=0001_7}', "");
Expect(1, 1462, '\p{^Is_Ccc=0001_7}', "");
Expect(1, 1462, '\P{Is_Ccc=0001_7}', "");
Expect(0, 1462, '\P{^Is_Ccc=0001_7}', "");
Error('\p{Canonical_Combining_Class=-/a/Not_Reordered}');
Error('\P{Canonical_Combining_Class=-/a/Not_Reordered}');
Expect(1, 767, '\p{Canonical_Combining_Class=notreordered}', "");
Expect(0, 767, '\p{^Canonical_Combining_Class=notreordered}', "");
Expect(0, 767, '\P{Canonical_Combining_Class=notreordered}', "");
Expect(1, 767, '\P{^Canonical_Combining_Class=notreordered}', "");
Expect(0, 846, '\p{Canonical_Combining_Class=notreordered}', "");
Expect(1, 846, '\p{^Canonical_Combining_Class=notreordered}', "");
Expect(1, 846, '\P{Canonical_Combining_Class=notreordered}', "");
Expect(0, 846, '\P{^Canonical_Combining_Class=notreordered}', "");
Expect(1, 767, '\p{Canonical_Combining_Class=	NOT-Reordered}', "");
Expect(0, 767, '\p{^Canonical_Combining_Class=	NOT-Reordered}', "");
Expect(0, 767, '\P{Canonical_Combining_Class=	NOT-Reordered}', "");
Expect(1, 767, '\P{^Canonical_Combining_Class=	NOT-Reordered}', "");
Expect(0, 846, '\p{Canonical_Combining_Class=	NOT-Reordered}', "");
Expect(1, 846, '\p{^Canonical_Combining_Class=	NOT-Reordered}', "");
Expect(1, 846, '\P{Canonical_Combining_Class=	NOT-Reordered}', "");
Expect(0, 846, '\P{^Canonical_Combining_Class=	NOT-Reordered}', "");
Error('\p{Ccc=:=_ nr}');
Error('\P{Ccc=:=_ nr}');
Expect(1, 767, '\p{Ccc=nr}', "");
Expect(0, 767, '\p{^Ccc=nr}', "");
Expect(0, 767, '\P{Ccc=nr}', "");
Expect(1, 767, '\P{^Ccc=nr}', "");
Expect(0, 846, '\p{Ccc=nr}', "");
Expect(1, 846, '\p{^Ccc=nr}', "");
Expect(1, 846, '\P{Ccc=nr}', "");
Expect(0, 846, '\P{^Ccc=nr}', "");
Expect(1, 767, '\p{Ccc=	 NR}', "");
Expect(0, 767, '\p{^Ccc=	 NR}', "");
Expect(0, 767, '\P{Ccc=	 NR}', "");
Expect(1, 767, '\P{^Ccc=	 NR}', "");
Expect(0, 846, '\p{Ccc=	 NR}', "");
Expect(1, 846, '\p{^Ccc=	 NR}', "");
Expect(1, 846, '\P{Ccc=	 NR}', "");
Expect(0, 846, '\P{^Ccc=	 NR}', "");
Error('\p{Is_Canonical_Combining_Class:   -	00:=0}');
Error('\P{Is_Canonical_Combining_Class:   -	00:=0}');
Expect(1, 767, '\p{Is_Canonical_Combining_Class=0000000}', "");
Expect(0, 767, '\p{^Is_Canonical_Combining_Class=0000000}', "");
Expect(0, 767, '\P{Is_Canonical_Combining_Class=0000000}', "");
Expect(1, 767, '\P{^Is_Canonical_Combining_Class=0000000}', "");
Expect(0, 846, '\p{Is_Canonical_Combining_Class=0000000}', "");
Expect(1, 846, '\p{^Is_Canonical_Combining_Class=0000000}', "");
Expect(1, 846, '\P{Is_Canonical_Combining_Class=0000000}', "");
Expect(0, 846, '\P{^Is_Canonical_Combining_Class=0000000}', "");
Error('\p{Is_Ccc= Not Reordered:=}');
Error('\P{Is_Ccc= Not Reordered:=}');
Expect(1, 767, '\p{Is_Ccc=notreordered}', "");
Expect(0, 767, '\p{^Is_Ccc=notreordered}', "");
Expect(0, 767, '\P{Is_Ccc=notreordered}', "");
Expect(1, 767, '\P{^Is_Ccc=notreordered}', "");
Expect(0, 846, '\p{Is_Ccc=notreordered}', "");
Expect(1, 846, '\p{^Is_Ccc=notreordered}', "");
Expect(1, 846, '\P{Is_Ccc=notreordered}', "");
Expect(0, 846, '\P{^Is_Ccc=notreordered}', "");
Expect(1, 767, '\p{Is_Ccc=-NOT Reordered}', "");
Expect(0, 767, '\p{^Is_Ccc=-NOT Reordered}', "");
Expect(0, 767, '\P{Is_Ccc=-NOT Reordered}', "");
Expect(1, 767, '\P{^Is_Ccc=-NOT Reordered}', "");
Expect(0, 846, '\p{Is_Ccc=-NOT Reordered}', "");
Expect(1, 846, '\p{^Is_Ccc=-NOT Reordered}', "");
Expect(1, 846, '\P{Is_Ccc=-NOT Reordered}', "");
Expect(0, 846, '\P{^Is_Ccc=-NOT Reordered}', "");
Error('\p{Canonical_Combining_Class:   	Above:=Left}');
Error('\P{Canonical_Combining_Class:   	Above:=Left}');
Expect(1, 1454, '\p{Canonical_Combining_Class=aboveleft}', "");
Expect(0, 1454, '\p{^Canonical_Combining_Class=aboveleft}', "");
Expect(0, 1454, '\P{Canonical_Combining_Class=aboveleft}', "");
Expect(1, 1454, '\P{^Canonical_Combining_Class=aboveleft}', "");
Expect(0, 1453, '\p{Canonical_Combining_Class=aboveleft}', "");
Expect(1, 1453, '\p{^Canonical_Combining_Class=aboveleft}', "");
Expect(1, 1453, '\P{Canonical_Combining_Class=aboveleft}', "");
Expect(0, 1453, '\P{^Canonical_Combining_Class=aboveleft}', "");
Expect(1, 1454, '\p{Canonical_Combining_Class=- Above	LEFT}', "");
Expect(0, 1454, '\p{^Canonical_Combining_Class=- Above	LEFT}', "");
Expect(0, 1454, '\P{Canonical_Combining_Class=- Above	LEFT}', "");
Expect(1, 1454, '\P{^Canonical_Combining_Class=- Above	LEFT}', "");
Expect(0, 1453, '\p{Canonical_Combining_Class=- Above	LEFT}', "");
Expect(1, 1453, '\p{^Canonical_Combining_Class=- Above	LEFT}', "");
Expect(1, 1453, '\P{Canonical_Combining_Class=- Above	LEFT}', "");
Expect(0, 1453, '\P{^Canonical_Combining_Class=- Above	LEFT}', "");
Error('\p{Ccc=	:=AL}');
Error('\P{Ccc=	:=AL}');
Expect(1, 1454, '\p{Ccc=al}', "");
Expect(0, 1454, '\p{^Ccc=al}', "");
Expect(0, 1454, '\P{Ccc=al}', "");
Expect(1, 1454, '\P{^Ccc=al}', "");
Expect(0, 1453, '\p{Ccc=al}', "");
Expect(1, 1453, '\p{^Ccc=al}', "");
Expect(1, 1453, '\P{Ccc=al}', "");
Expect(0, 1453, '\P{^Ccc=al}', "");
Expect(1, 1454, '\p{Ccc= al}', "");
Expect(0, 1454, '\p{^Ccc= al}', "");
Expect(0, 1454, '\P{Ccc= al}', "");
Expect(1, 1454, '\P{^Ccc= al}', "");
Expect(0, 1453, '\p{Ccc= al}', "");
Expect(1, 1453, '\p{^Ccc= al}', "");
Expect(1, 1453, '\P{Ccc= al}', "");
Expect(0, 1453, '\P{^Ccc= al}', "");
Error('\p{Is_Canonical_Combining_Class:		_+0-0-0-0/a/228}');
Error('\P{Is_Canonical_Combining_Class:		_+0-0-0-0/a/228}');
Expect(1, 1454, '\p{Is_Canonical_Combining_Class=0_0_2_28}', "");
Expect(0, 1454, '\p{^Is_Canonical_Combining_Class=0_0_2_28}', "");
Expect(0, 1454, '\P{Is_Canonical_Combining_Class=0_0_2_28}', "");
Expect(1, 1454, '\P{^Is_Canonical_Combining_Class=0_0_2_28}', "");
Expect(0, 1453, '\p{Is_Canonical_Combining_Class=0_0_2_28}', "");
Expect(1, 1453, '\p{^Is_Canonical_Combining_Class=0_0_2_28}', "");
Expect(1, 1453, '\P{Is_Canonical_Combining_Class=0_0_2_28}', "");
Expect(0, 1453, '\P{^Is_Canonical_Combining_Class=0_0_2_28}', "");
Error('\p{Is_Ccc=--Above/a/left}');
Error('\P{Is_Ccc=--Above/a/left}');
Expect(1, 1454, '\p{Is_Ccc=aboveleft}', "");
Expect(0, 1454, '\p{^Is_Ccc=aboveleft}', "");
Expect(0, 1454, '\P{Is_Ccc=aboveleft}', "");
Expect(1, 1454, '\P{^Is_Ccc=aboveleft}', "");
Expect(0, 1453, '\p{Is_Ccc=aboveleft}', "");
Expect(1, 1453, '\p{^Is_Ccc=aboveleft}', "");
Expect(1, 1453, '\P{Is_Ccc=aboveleft}', "");
Expect(0, 1453, '\P{^Is_Ccc=aboveleft}', "");
Expect(1, 1454, '\p{Is_Ccc=-_Above	Left}', "");
Expect(0, 1454, '\p{^Is_Ccc=-_Above	Left}', "");
Expect(0, 1454, '\P{Is_Ccc=-_Above	Left}', "");
Expect(1, 1454, '\P{^Is_Ccc=-_Above	Left}', "");
Expect(0, 1453, '\p{Is_Ccc=-_Above	Left}', "");
Expect(1, 1453, '\p{^Is_Ccc=-_Above	Left}', "");
Expect(1, 1453, '\P{Is_Ccc=-_Above	Left}', "");
Expect(0, 1453, '\P{^Is_Ccc=-_Above	Left}', "");
Error('\p{Canonical_Combining_Class=_OVERLAY/a/}');
Error('\P{Canonical_Combining_Class=_OVERLAY/a/}');
Expect(1, 824, '\p{Canonical_Combining_Class=overlay}', "");
Expect(0, 824, '\p{^Canonical_Combining_Class=overlay}', "");
Expect(0, 824, '\P{Canonical_Combining_Class=overlay}', "");
Expect(1, 824, '\P{^Canonical_Combining_Class=overlay}', "");
Expect(0, 819, '\p{Canonical_Combining_Class=overlay}', "");
Expect(1, 819, '\p{^Canonical_Combining_Class=overlay}', "");
Expect(1, 819, '\P{Canonical_Combining_Class=overlay}', "");
Expect(0, 819, '\P{^Canonical_Combining_Class=overlay}', "");
Expect(1, 824, '\p{Canonical_Combining_Class=-Overlay}', "");
Expect(0, 824, '\p{^Canonical_Combining_Class=-Overlay}', "");
Expect(0, 824, '\P{Canonical_Combining_Class=-Overlay}', "");
Expect(1, 824, '\P{^Canonical_Combining_Class=-Overlay}', "");
Expect(0, 819, '\p{Canonical_Combining_Class=-Overlay}', "");
Expect(1, 819, '\p{^Canonical_Combining_Class=-Overlay}', "");
Expect(1, 819, '\P{Canonical_Combining_Class=-Overlay}', "");
Expect(0, 819, '\P{^Canonical_Combining_Class=-Overlay}', "");
Error('\p{Ccc=_/a/OV}');
Error('\P{Ccc=_/a/OV}');
Expect(1, 824, '\p{Ccc=ov}', "");
Expect(0, 824, '\p{^Ccc=ov}', "");
Expect(0, 824, '\P{Ccc=ov}', "");
Expect(1, 824, '\P{^Ccc=ov}', "");
Expect(0, 819, '\p{Ccc=ov}', "");
Expect(1, 819, '\p{^Ccc=ov}', "");
Expect(1, 819, '\P{Ccc=ov}', "");
Expect(0, 819, '\P{^Ccc=ov}', "");
Expect(1, 824, '\p{Ccc= ov}', "");
Expect(0, 824, '\p{^Ccc= ov}', "");
Expect(0, 824, '\P{Ccc= ov}', "");
Expect(1, 824, '\P{^Ccc= ov}', "");
Expect(0, 819, '\p{Ccc= ov}', "");
Expect(1, 819, '\p{^Ccc= ov}', "");
Expect(1, 819, '\P{Ccc= ov}', "");
Expect(0, 819, '\P{^Ccc= ov}', "");
Error('\p{Is_Canonical_Combining_Class= :=001}');
Error('\P{Is_Canonical_Combining_Class= :=001}');
Expect(1, 824, '\p{Is_Canonical_Combining_Class=+01}', "");
Expect(0, 824, '\p{^Is_Canonical_Combining_Class=+01}', "");
Expect(0, 824, '\P{Is_Canonical_Combining_Class=+01}', "");
Expect(1, 824, '\P{^Is_Canonical_Combining_Class=+01}', "");
Expect(0, 819, '\p{Is_Canonical_Combining_Class=+01}', "");
Expect(1, 819, '\p{^Is_Canonical_Combining_Class=+01}', "");
Expect(1, 819, '\P{Is_Canonical_Combining_Class=+01}', "");
Expect(0, 819, '\P{^Is_Canonical_Combining_Class=+01}', "");
Error('\p{Is_Ccc:_overlay:=}');
Error('\P{Is_Ccc:_overlay:=}');
Expect(1, 824, '\p{Is_Ccc=overlay}', "");
Expect(0, 824, '\p{^Is_Ccc=overlay}', "");
Expect(0, 824, '\P{Is_Ccc=overlay}', "");
Expect(1, 824, '\P{^Is_Ccc=overlay}', "");
Expect(0, 819, '\p{Is_Ccc=overlay}', "");
Expect(1, 819, '\p{^Is_Ccc=overlay}', "");
Expect(1, 819, '\P{Is_Ccc=overlay}', "");
Expect(0, 819, '\P{^Is_Ccc=overlay}', "");
Expect(1, 824, '\p{Is_Ccc=__Overlay}', "");
Expect(0, 824, '\p{^Is_Ccc=__Overlay}', "");
Expect(0, 824, '\P{Is_Ccc=__Overlay}', "");
Expect(1, 824, '\P{^Is_Ccc=__Overlay}', "");
Expect(0, 819, '\p{Is_Ccc=__Overlay}', "");
Expect(1, 819, '\p{^Is_Ccc=__Overlay}', "");
Expect(1, 819, '\P{Is_Ccc=__Overlay}', "");
Expect(0, 819, '\P{^Is_Ccc=__Overlay}', "");
Error('\p{Canonical_Combining_Class=:=	 VIRAMA}');
Error('\P{Canonical_Combining_Class=:=	 VIRAMA}');
Expect(1, 2381, '\p{Canonical_Combining_Class=virama}', "");
Expect(0, 2381, '\p{^Canonical_Combining_Class=virama}', "");
Expect(0, 2381, '\P{Canonical_Combining_Class=virama}', "");
Expect(1, 2381, '\P{^Canonical_Combining_Class=virama}', "");
Expect(0, 2380, '\p{Canonical_Combining_Class=virama}', "");
Expect(1, 2380, '\p{^Canonical_Combining_Class=virama}', "");
Expect(1, 2380, '\P{Canonical_Combining_Class=virama}', "");
Expect(0, 2380, '\P{^Canonical_Combining_Class=virama}', "");
Expect(1, 2381, '\p{Canonical_Combining_Class=Virama}', "");
Expect(0, 2381, '\p{^Canonical_Combining_Class=Virama}', "");
Expect(0, 2381, '\P{Canonical_Combining_Class=Virama}', "");
Expect(1, 2381, '\P{^Canonical_Combining_Class=Virama}', "");
Expect(0, 2380, '\p{Canonical_Combining_Class=Virama}', "");
Expect(1, 2380, '\p{^Canonical_Combining_Class=Virama}', "");
Expect(1, 2380, '\P{Canonical_Combining_Class=Virama}', "");
Expect(0, 2380, '\P{^Canonical_Combining_Class=Virama}', "");
Error('\p{Ccc=/a/-VR}');
Error('\P{Ccc=/a/-VR}');
Expect(1, 2381, '\p{Ccc=vr}', "");
Expect(0, 2381, '\p{^Ccc=vr}', "");
Expect(0, 2381, '\P{Ccc=vr}', "");
Expect(1, 2381, '\P{^Ccc=vr}', "");
Expect(0, 2380, '\p{Ccc=vr}', "");
Expect(1, 2380, '\p{^Ccc=vr}', "");
Expect(1, 2380, '\P{Ccc=vr}', "");
Expect(0, 2380, '\P{^Ccc=vr}', "");
Expect(1, 2381, '\p{Ccc=	-VR}', "");
Expect(0, 2381, '\p{^Ccc=	-VR}', "");
Expect(0, 2381, '\P{Ccc=	-VR}', "");
Expect(1, 2381, '\P{^Ccc=	-VR}', "");
Expect(0, 2380, '\p{Ccc=	-VR}', "");
Expect(1, 2380, '\p{^Ccc=	-VR}', "");
Expect(1, 2380, '\P{Ccc=	-VR}', "");
Expect(0, 2380, '\P{^Ccc=	-VR}', "");
Error('\p{Is_Canonical_Combining_Class=-	000009:=}');
Error('\P{Is_Canonical_Combining_Class=-	000009:=}');
Expect(1, 2381, '\p{Is_Canonical_Combining_Class=+9}', "");
Expect(0, 2381, '\p{^Is_Canonical_Combining_Class=+9}', "");
Expect(0, 2381, '\P{Is_Canonical_Combining_Class=+9}', "");
Expect(1, 2381, '\P{^Is_Canonical_Combining_Class=+9}', "");
Expect(0, 2380, '\p{Is_Canonical_Combining_Class=+9}', "");
Expect(1, 2380, '\p{^Is_Canonical_Combining_Class=+9}', "");
Expect(1, 2380, '\P{Is_Canonical_Combining_Class=+9}', "");
Expect(0, 2380, '\P{^Is_Canonical_Combining_Class=+9}', "");
Error('\p{Is_Ccc=:=VIRAMA}');
Error('\P{Is_Ccc=:=VIRAMA}');
Expect(1, 2381, '\p{Is_Ccc=virama}', "");
Expect(0, 2381, '\p{^Is_Ccc=virama}', "");
Expect(0, 2381, '\P{Is_Ccc=virama}', "");
Expect(1, 2381, '\P{^Is_Ccc=virama}', "");
Expect(0, 2380, '\p{Is_Ccc=virama}', "");
Expect(1, 2380, '\p{^Is_Ccc=virama}', "");
Expect(1, 2380, '\P{Is_Ccc=virama}', "");
Expect(0, 2380, '\P{^Is_Ccc=virama}', "");
Expect(1, 2381, '\p{Is_Ccc= _virama}', "");
Expect(0, 2381, '\p{^Is_Ccc= _virama}', "");
Expect(0, 2381, '\P{Is_Ccc= _virama}', "");
Expect(1, 2381, '\P{^Is_Ccc= _virama}', "");
Expect(0, 2380, '\p{Is_Ccc= _virama}', "");
Expect(1, 2380, '\p{^Is_Ccc= _virama}', "");
Expect(1, 2380, '\P{Is_Ccc= _virama}', "");
Expect(0, 2380, '\P{^Is_Ccc= _virama}', "");
Error('\p{Canonical_Combining_Class=-/a/Attached Below}');
Error('\P{Canonical_Combining_Class=-/a/Attached Below}');
Expect(1, 802, '\p{Canonical_Combining_Class=attachedbelow}', "");
Expect(0, 802, '\p{^Canonical_Combining_Class=attachedbelow}', "");
Expect(0, 802, '\P{Canonical_Combining_Class=attachedbelow}', "");
Expect(1, 802, '\P{^Canonical_Combining_Class=attachedbelow}', "");
Expect(0, 800, '\p{Canonical_Combining_Class=attachedbelow}', "");
Expect(1, 800, '\p{^Canonical_Combining_Class=attachedbelow}', "");
Expect(1, 800, '\P{Canonical_Combining_Class=attachedbelow}', "");
Expect(0, 800, '\P{^Canonical_Combining_Class=attachedbelow}', "");
Expect(1, 802, '\p{Canonical_Combining_Class=-Attached below}', "");
Expect(0, 802, '\p{^Canonical_Combining_Class=-Attached below}', "");
Expect(0, 802, '\P{Canonical_Combining_Class=-Attached below}', "");
Expect(1, 802, '\P{^Canonical_Combining_Class=-Attached below}', "");
Expect(0, 800, '\p{Canonical_Combining_Class=-Attached below}', "");
Expect(1, 800, '\p{^Canonical_Combining_Class=-Attached below}', "");
Expect(1, 800, '\P{Canonical_Combining_Class=-Attached below}', "");
Expect(0, 800, '\P{^Canonical_Combining_Class=-Attached below}', "");
Error('\p{Ccc=/a/	 ATB}');
Error('\P{Ccc=/a/	 ATB}');
Expect(1, 802, '\p{Ccc=atb}', "");
Expect(0, 802, '\p{^Ccc=atb}', "");
Expect(0, 802, '\P{Ccc=atb}', "");
Expect(1, 802, '\P{^Ccc=atb}', "");
Expect(0, 800, '\p{Ccc=atb}', "");
Expect(1, 800, '\p{^Ccc=atb}', "");
Expect(1, 800, '\P{Ccc=atb}', "");
Expect(0, 800, '\P{^Ccc=atb}', "");
Expect(1, 802, '\p{Ccc=ATB}', "");
Expect(0, 802, '\p{^Ccc=ATB}', "");
Expect(0, 802, '\P{Ccc=ATB}', "");
Expect(1, 802, '\P{^Ccc=ATB}', "");
Expect(0, 800, '\p{Ccc=ATB}', "");
Expect(1, 800, '\p{^Ccc=ATB}', "");
Expect(1, 800, '\P{Ccc=ATB}', "");
Expect(0, 800, '\P{^Ccc=ATB}', "");
Error('\p{Is_Canonical_Combining_Class=/a/__+0000202}');
Error('\P{Is_Canonical_Combining_Class=/a/__+0000202}');
Expect(1, 802, '\p{Is_Canonical_Combining_Class=00_00_00_02_02}', "");
Expect(0, 802, '\p{^Is_Canonical_Combining_Class=00_00_00_02_02}', "");
Expect(0, 802, '\P{Is_Canonical_Combining_Class=00_00_00_02_02}', "");
Expect(1, 802, '\P{^Is_Canonical_Combining_Class=00_00_00_02_02}', "");
Expect(0, 800, '\p{Is_Canonical_Combining_Class=00_00_00_02_02}', "");
Expect(1, 800, '\p{^Is_Canonical_Combining_Class=00_00_00_02_02}', "");
Expect(1, 800, '\P{Is_Canonical_Combining_Class=00_00_00_02_02}', "");
Expect(0, 800, '\P{^Is_Canonical_Combining_Class=00_00_00_02_02}', "");
Error('\p{Is_Ccc=-_ATTACHED:=BELOW}');
Error('\P{Is_Ccc=-_ATTACHED:=BELOW}');
Expect(1, 802, '\p{Is_Ccc=attachedbelow}', "");
Expect(0, 802, '\p{^Is_Ccc=attachedbelow}', "");
Expect(0, 802, '\P{Is_Ccc=attachedbelow}', "");
Expect(1, 802, '\P{^Is_Ccc=attachedbelow}', "");
Expect(0, 800, '\p{Is_Ccc=attachedbelow}', "");
Expect(1, 800, '\p{^Is_Ccc=attachedbelow}', "");
Expect(1, 800, '\P{Is_Ccc=attachedbelow}', "");
Expect(0, 800, '\P{^Is_Ccc=attachedbelow}', "");
Expect(1, 802, '\p{Is_Ccc=_Attachedbelow}', "");
Expect(0, 802, '\p{^Is_Ccc=_Attachedbelow}', "");
Expect(0, 802, '\P{Is_Ccc=_Attachedbelow}', "");
Expect(1, 802, '\P{^Is_Ccc=_Attachedbelow}', "");
Expect(0, 800, '\p{Is_Ccc=_Attachedbelow}', "");
Expect(1, 800, '\p{^Is_Ccc=_Attachedbelow}', "");
Expect(1, 800, '\P{Is_Ccc=_Attachedbelow}', "");
Expect(0, 800, '\P{^Is_Ccc=_Attachedbelow}', "");
Error('\p{Canonical_Combining_Class=-+00_00-00 00:=014}');
Error('\P{Canonical_Combining_Class=-+00_00-00 00:=014}');
Expect(1, 1460, '\p{Canonical_Combining_Class=0_0_0_0_0_14}', "");
Expect(0, 1460, '\p{^Canonical_Combining_Class=0_0_0_0_0_14}', "");
Expect(0, 1460, '\P{Canonical_Combining_Class=0_0_0_0_0_14}', "");
Expect(1, 1460, '\P{^Canonical_Combining_Class=0_0_0_0_0_14}', "");
Expect(0, 1459, '\p{Canonical_Combining_Class=0_0_0_0_0_14}', "");
Expect(1, 1459, '\p{^Canonical_Combining_Class=0_0_0_0_0_14}', "");
Expect(1, 1459, '\P{Canonical_Combining_Class=0_0_0_0_0_14}', "");
Expect(0, 1459, '\P{^Canonical_Combining_Class=0_0_0_0_0_14}', "");
Error('\p{Ccc=_-0014:=}');
Error('\P{Ccc=_-0014:=}');
Expect(1, 1460, '\p{Ccc:	014}', "");
Expect(0, 1460, '\p{^Ccc:	014}', "");
Expect(0, 1460, '\P{Ccc:	014}', "");
Expect(1, 1460, '\P{^Ccc:	014}', "");
Expect(0, 1459, '\p{Ccc:	014}', "");
Expect(1, 1459, '\p{^Ccc:	014}', "");
Expect(1, 1459, '\P{Ccc:	014}', "");
Expect(0, 1459, '\P{^Ccc:	014}', "");
Error('\p{Is_Canonical_Combining_Class:	 /a/00_00 00-00_01-4}');
Error('\P{Is_Canonical_Combining_Class:	 /a/00_00 00-00_01-4}');
Expect(1, 1460, '\p{Is_Canonical_Combining_Class=01_4}', "");
Expect(0, 1460, '\p{^Is_Canonical_Combining_Class=01_4}', "");
Expect(0, 1460, '\P{Is_Canonical_Combining_Class=01_4}', "");
Expect(1, 1460, '\P{^Is_Canonical_Combining_Class=01_4}', "");
Expect(0, 1459, '\p{Is_Canonical_Combining_Class=01_4}', "");
Expect(1, 1459, '\p{^Is_Canonical_Combining_Class=01_4}', "");
Expect(1, 1459, '\P{Is_Canonical_Combining_Class=01_4}', "");
Expect(0, 1459, '\P{^Is_Canonical_Combining_Class=01_4}', "");
Error('\p{Is_Ccc=/a/__000000 00 014}');
Error('\P{Is_Ccc=/a/__000000 00 014}');
Expect(1, 1460, '\p{Is_Ccc=0_0_0_0_0_00014}', "");
Expect(0, 1460, '\p{^Is_Ccc=0_0_0_0_0_00014}', "");
Expect(0, 1460, '\P{Is_Ccc=0_0_0_0_0_00014}', "");
Expect(1, 1460, '\P{^Is_Ccc=0_0_0_0_0_00014}', "");
Expect(0, 1459, '\p{Is_Ccc=0_0_0_0_0_00014}', "");
Expect(1, 1459, '\p{^Is_Ccc=0_0_0_0_0_00014}', "");
Expect(1, 1459, '\P{Is_Ccc=0_0_0_0_0_00014}', "");
Expect(0, 1459, '\P{^Is_Ccc=0_0_0_0_0_00014}', "");
Error('\p{Canonical_Combining_Class=	:=02	4}');
Error('\P{Canonical_Combining_Class=	:=02	4}');
Expect(1, 1473, '\p{Canonical_Combining_Class=000_000_24}', "");
Expect(0, 1473, '\p{^Canonical_Combining_Class=000_000_24}', "");
Expect(0, 1473, '\P{Canonical_Combining_Class=000_000_24}', "");
Expect(1, 1473, '\P{^Canonical_Combining_Class=000_000_24}', "");
Expect(0, 1472, '\p{Canonical_Combining_Class=000_000_24}', "");
Expect(1, 1472, '\p{^Canonical_Combining_Class=000_000_24}', "");
Expect(1, 1472, '\P{Canonical_Combining_Class=000_000_24}', "");
Expect(0, 1472, '\P{^Canonical_Combining_Class=000_000_24}', "");
Error('\p{Ccc=:=+0 00 0-0 24}');
Error('\P{Ccc=:=+0 00 0-0 24}');
Expect(1, 1473, '\p{Ccc=000_002_4}', "");
Expect(0, 1473, '\p{^Ccc=000_002_4}', "");
Expect(0, 1473, '\P{Ccc=000_002_4}', "");
Expect(1, 1473, '\P{^Ccc=000_002_4}', "");
Expect(0, 1472, '\p{Ccc=000_002_4}', "");
Expect(1, 1472, '\p{^Ccc=000_002_4}', "");
Expect(1, 1472, '\P{Ccc=000_002_4}', "");
Expect(0, 1472, '\P{^Ccc=000_002_4}', "");
Error('\p{Is_Canonical_Combining_Class= -+000:=000-002 4}');
Error('\P{Is_Canonical_Combining_Class= -+000:=000-002 4}');
Expect(1, 1473, '\p{Is_Canonical_Combining_Class=+000000024}', "");
Expect(0, 1473, '\p{^Is_Canonical_Combining_Class=+000000024}', "");
Expect(0, 1473, '\P{Is_Canonical_Combining_Class=+000000024}', "");
Expect(1, 1473, '\P{^Is_Canonical_Combining_Class=+000000024}', "");
Expect(0, 1472, '\p{Is_Canonical_Combining_Class=+000000024}', "");
Expect(1, 1472, '\p{^Is_Canonical_Combining_Class=+000000024}', "");
Expect(1, 1472, '\P{Is_Canonical_Combining_Class=+000000024}', "");
Expect(0, 1472, '\P{^Is_Canonical_Combining_Class=+000000024}', "");
Error('\p{Is_Ccc=/a/_ +000024}');
Error('\P{Is_Ccc=/a/_ +000024}');
Expect(1, 1473, '\p{Is_Ccc=024}', "");
Expect(0, 1473, '\p{^Is_Ccc=024}', "");
Expect(0, 1473, '\P{Is_Ccc=024}', "");
Expect(1, 1473, '\P{^Is_Ccc=024}', "");
Expect(0, 1472, '\p{Is_Ccc=024}', "");
Expect(1, 1472, '\p{^Is_Ccc=024}', "");
Expect(1, 1472, '\P{Is_Ccc=024}', "");
Expect(0, 1472, '\P{^Is_Ccc=024}', "");
Error('\p{Canonical_Combining_Class:-	0	0/a/23}');
Error('\P{Canonical_Combining_Class:-	0	0/a/23}');
Expect(1, 1471, '\p{Canonical_Combining_Class=000002_3}', "");
Expect(0, 1471, '\p{^Canonical_Combining_Class=000002_3}', "");
Expect(0, 1471, '\P{Canonical_Combining_Class=000002_3}', "");
Expect(1, 1471, '\P{^Canonical_Combining_Class=000002_3}', "");
Expect(0, 1470, '\p{Canonical_Combining_Class=000002_3}', "");
Expect(1, 1470, '\p{^Canonical_Combining_Class=000002_3}', "");
Expect(1, 1470, '\P{Canonical_Combining_Class=000002_3}', "");
Expect(0, 1470, '\P{^Canonical_Combining_Class=000002_3}', "");
Error('\p{Ccc=_/a/023}');
Error('\P{Ccc=_/a/023}');
Expect(1, 1471, '\p{Ccc=0023}', "");
Expect(0, 1471, '\p{^Ccc=0023}', "");
Expect(0, 1471, '\P{Ccc=0023}', "");
Expect(1, 1471, '\P{^Ccc=0023}', "");
Expect(0, 1470, '\p{Ccc=0023}', "");
Expect(1, 1470, '\p{^Ccc=0023}', "");
Expect(1, 1470, '\P{Ccc=0023}', "");
Expect(0, 1470, '\P{^Ccc=0023}', "");
Error('\p{Is_Canonical_Combining_Class=-	+0023:=}');
Error('\P{Is_Canonical_Combining_Class=-	+0023:=}');
Expect(1, 1471, '\p{Is_Canonical_Combining_Class=00000023}', "");
Expect(0, 1471, '\p{^Is_Canonical_Combining_Class=00000023}', "");
Expect(0, 1471, '\P{Is_Canonical_Combining_Class=00000023}', "");
Expect(1, 1471, '\P{^Is_Canonical_Combining_Class=00000023}', "");
Expect(0, 1470, '\p{Is_Canonical_Combining_Class=00000023}', "");
Expect(1, 1470, '\p{^Is_Canonical_Combining_Class=00000023}', "");
Expect(1, 1470, '\P{Is_Canonical_Combining_Class=00000023}', "");
Expect(0, 1470, '\P{^Is_Canonical_Combining_Class=00000023}', "");
Error('\p{Is_Ccc:    /a/002_3}');
Error('\P{Is_Ccc:    /a/002_3}');
Expect(1, 1471, '\p{Is_Ccc=+23}', "");
Expect(0, 1471, '\p{^Is_Ccc=+23}', "");
Expect(0, 1471, '\P{Is_Ccc=+23}', "");
Expect(1, 1471, '\P{^Is_Ccc=+23}', "");
Expect(0, 1470, '\p{Is_Ccc=+23}', "");
Expect(1, 1470, '\p{^Is_Ccc=+23}', "");
Expect(1, 1470, '\P{Is_Ccc=+23}', "");
Expect(0, 1470, '\P{^Is_Ccc=+23}', "");
Error('\p{Canonical_Combining_Class=-_NUKTA:=}');
Error('\P{Canonical_Combining_Class=-_NUKTA:=}');
Expect(1, 2364, '\p{Canonical_Combining_Class=nukta}', "");
Expect(0, 2364, '\p{^Canonical_Combining_Class=nukta}', "");
Expect(0, 2364, '\P{Canonical_Combining_Class=nukta}', "");
Expect(1, 2364, '\P{^Canonical_Combining_Class=nukta}', "");
Expect(0, 2363, '\p{Canonical_Combining_Class=nukta}', "");
Expect(1, 2363, '\p{^Canonical_Combining_Class=nukta}', "");
Expect(1, 2363, '\P{Canonical_Combining_Class=nukta}', "");
Expect(0, 2363, '\P{^Canonical_Combining_Class=nukta}', "");
Expect(1, 2364, '\p{Canonical_Combining_Class=_ Nukta}', "");
Expect(0, 2364, '\p{^Canonical_Combining_Class=_ Nukta}', "");
Expect(0, 2364, '\P{Canonical_Combining_Class=_ Nukta}', "");
Expect(1, 2364, '\P{^Canonical_Combining_Class=_ Nukta}', "");
Expect(0, 2363, '\p{Canonical_Combining_Class=_ Nukta}', "");
Expect(1, 2363, '\p{^Canonical_Combining_Class=_ Nukta}', "");
Expect(1, 2363, '\P{Canonical_Combining_Class=_ Nukta}', "");
Expect(0, 2363, '\P{^Canonical_Combining_Class=_ Nukta}', "");
Error('\p{Ccc=:=- NK}');
Error('\P{Ccc=:=- NK}');
Expect(1, 2364, '\p{Ccc=nk}', "");
Expect(0, 2364, '\p{^Ccc=nk}', "");
Expect(0, 2364, '\P{Ccc=nk}', "");
Expect(1, 2364, '\P{^Ccc=nk}', "");
Expect(0, 2363, '\p{Ccc=nk}', "");
Expect(1, 2363, '\p{^Ccc=nk}', "");
Expect(1, 2363, '\P{Ccc=nk}', "");
Expect(0, 2363, '\P{^Ccc=nk}', "");
Expect(1, 2364, '\p{Ccc=  NK}', "");
Expect(0, 2364, '\p{^Ccc=  NK}', "");
Expect(0, 2364, '\P{Ccc=  NK}', "");
Expect(1, 2364, '\P{^Ccc=  NK}', "");
Expect(0, 2363, '\p{Ccc=  NK}', "");
Expect(1, 2363, '\p{^Ccc=  NK}', "");
Expect(1, 2363, '\P{Ccc=  NK}', "");
Expect(0, 2363, '\P{^Ccc=  NK}', "");
Error('\p{Is_Canonical_Combining_Class= 0007:=}');
Error('\P{Is_Canonical_Combining_Class= 0007:=}');
Expect(1, 2364, '\p{Is_Canonical_Combining_Class=000007}', "");
Expect(0, 2364, '\p{^Is_Canonical_Combining_Class=000007}', "");
Expect(0, 2364, '\P{Is_Canonical_Combining_Class=000007}', "");
Expect(1, 2364, '\P{^Is_Canonical_Combining_Class=000007}', "");
Expect(0, 2363, '\p{Is_Canonical_Combining_Class=000007}', "");
Expect(1, 2363, '\p{^Is_Canonical_Combining_Class=000007}', "");
Expect(1, 2363, '\P{Is_Canonical_Combining_Class=000007}', "");
Expect(0, 2363, '\P{^Is_Canonical_Combining_Class=000007}', "");
Error('\p{Is_Ccc=/a/-	NUKTA}');
Error('\P{Is_Ccc=/a/-	NUKTA}');
Expect(1, 2364, '\p{Is_Ccc=nukta}', "");
Expect(0, 2364, '\p{^Is_Ccc=nukta}', "");
Expect(0, 2364, '\P{Is_Ccc=nukta}', "");
Expect(1, 2364, '\P{^Is_Ccc=nukta}', "");
Expect(0, 2363, '\p{Is_Ccc=nukta}', "");
Expect(1, 2363, '\p{^Is_Ccc=nukta}', "");
Expect(1, 2363, '\P{Is_Ccc=nukta}', "");
Expect(0, 2363, '\P{^Is_Ccc=nukta}', "");
Expect(1, 2364, '\p{Is_Ccc=-_nukta}', "");
Expect(0, 2364, '\p{^Is_Ccc=-_nukta}', "");
Expect(0, 2364, '\P{Is_Ccc=-_nukta}', "");
Expect(1, 2364, '\P{^Is_Ccc=-_nukta}', "");
Expect(0, 2363, '\p{Is_Ccc=-_nukta}', "");
Expect(1, 2363, '\p{^Is_Ccc=-_nukta}', "");
Expect(1, 2363, '\P{Is_Ccc=-_nukta}', "");
Expect(0, 2363, '\P{^Is_Ccc=-_nukta}', "");
Error('\p{Canonical_Combining_Class=-:=000000033}');
Error('\P{Canonical_Combining_Class=-:=000000033}');
Expect(1, 1617, '\p{Canonical_Combining_Class: 000033}', "");
Expect(0, 1617, '\p{^Canonical_Combining_Class: 000033}', "");
Expect(0, 1617, '\P{Canonical_Combining_Class: 000033}', "");
Expect(1, 1617, '\P{^Canonical_Combining_Class: 000033}', "");
Expect(0, 1616, '\p{Canonical_Combining_Class: 000033}', "");
Expect(1, 1616, '\p{^Canonical_Combining_Class: 000033}', "");
Expect(1, 1616, '\P{Canonical_Combining_Class: 000033}', "");
Expect(0, 1616, '\P{^Canonical_Combining_Class: 000033}', "");
Error('\p{Ccc=	 00000000033:=}');
Error('\P{Ccc=	 00000000033:=}');
Expect(1, 1617, '\p{Ccc=0_0_0_033}', "");
Expect(0, 1617, '\p{^Ccc=0_0_0_033}', "");
Expect(0, 1617, '\P{Ccc=0_0_0_033}', "");
Expect(1, 1617, '\P{^Ccc=0_0_0_033}', "");
Expect(0, 1616, '\p{Ccc=0_0_0_033}', "");
Expect(1, 1616, '\p{^Ccc=0_0_0_033}', "");
Expect(1, 1616, '\P{Ccc=0_0_0_033}', "");
Expect(0, 1616, '\P{^Ccc=0_0_0_033}', "");
Error('\p{Is_Canonical_Combining_Class=/a/_033}');
Error('\P{Is_Canonical_Combining_Class=/a/_033}');
Expect(1, 1617, '\p{Is_Canonical_Combining_Class=000033}', "");
Expect(0, 1617, '\p{^Is_Canonical_Combining_Class=000033}', "");
Expect(0, 1617, '\P{Is_Canonical_Combining_Class=000033}', "");
Expect(1, 1617, '\P{^Is_Canonical_Combining_Class=000033}', "");
Expect(0, 1616, '\p{Is_Canonical_Combining_Class=000033}', "");
Expect(1, 1616, '\p{^Is_Canonical_Combining_Class=000033}', "");
Expect(1, 1616, '\P{Is_Canonical_Combining_Class=000033}', "");
Expect(0, 1616, '\P{^Is_Canonical_Combining_Class=000033}', "");
Error('\p{Is_Ccc=03:=3}');
Error('\P{Is_Ccc=03:=3}');
Expect(1, 1617, '\p{Is_Ccc=+0000003_3}', "");
Expect(0, 1617, '\p{^Is_Ccc=+0000003_3}', "");
Expect(0, 1617, '\P{Is_Ccc=+0000003_3}', "");
Expect(1, 1617, '\P{^Is_Ccc=+0000003_3}', "");
Expect(0, 1616, '\p{Is_Ccc=+0000003_3}', "");
Expect(1, 1616, '\p{^Is_Ccc=+0000003_3}', "");
Expect(1, 1616, '\P{Is_Ccc=+0000003_3}', "");
Expect(0, 1616, '\P{^Is_Ccc=+0000003_3}', "");
Error('\p{Canonical_Combining_Class=/a/000000-21}');
Error('\P{Canonical_Combining_Class=/a/000000-21}');
Expect(1, 1468, '\p{Canonical_Combining_Class=+000021}', "");
Expect(0, 1468, '\p{^Canonical_Combining_Class=+000021}', "");
Expect(0, 1468, '\P{Canonical_Combining_Class=+000021}', "");
Expect(1, 1468, '\P{^Canonical_Combining_Class=+000021}', "");
Expect(0, 1467, '\p{Canonical_Combining_Class=+000021}', "");
Expect(1, 1467, '\p{^Canonical_Combining_Class=+000021}', "");
Expect(1, 1467, '\P{Canonical_Combining_Class=+000021}', "");
Expect(0, 1467, '\P{^Canonical_Combining_Class=+000021}', "");
Error('\p{Ccc=_ +0-0_0-0-00/a/0	21}');
Error('\P{Ccc=_ +0-0_0-0-00/a/0	21}');
Expect(1, 1468, '\p{Ccc:	+0_0_0_0_021}', "");
Expect(0, 1468, '\p{^Ccc:	+0_0_0_0_021}', "");
Expect(0, 1468, '\P{Ccc:	+0_0_0_0_021}', "");
Expect(1, 1468, '\P{^Ccc:	+0_0_0_0_021}', "");
Expect(0, 1467, '\p{Ccc:	+0_0_0_0_021}', "");
Expect(1, 1467, '\p{^Ccc:	+0_0_0_0_021}', "");
Expect(1, 1467, '\P{Ccc:	+0_0_0_0_021}', "");
Expect(0, 1467, '\P{^Ccc:	+0_0_0_0_021}', "");
Error('\p{Is_Canonical_Combining_Class=	:=+00000000021}');
Error('\P{Is_Canonical_Combining_Class=	:=+00000000021}');
Expect(1, 1468, '\p{Is_Canonical_Combining_Class:+00021}', "");
Expect(0, 1468, '\p{^Is_Canonical_Combining_Class:+00021}', "");
Expect(0, 1468, '\P{Is_Canonical_Combining_Class:+00021}', "");
Expect(1, 1468, '\P{^Is_Canonical_Combining_Class:+00021}', "");
Expect(0, 1467, '\p{Is_Canonical_Combining_Class:+00021}', "");
Expect(1, 1467, '\p{^Is_Canonical_Combining_Class:+00021}', "");
Expect(1, 1467, '\P{Is_Canonical_Combining_Class:+00021}', "");
Expect(0, 1467, '\P{^Is_Canonical_Combining_Class:+00021}', "");
Error('\p{Is_Ccc=	_+00021/a/}');
Error('\P{Is_Ccc=	_+00021/a/}');
Expect(1, 1468, '\p{Is_Ccc=+0000021}', "");
Expect(0, 1468, '\p{^Is_Ccc=+0000021}', "");
Expect(0, 1468, '\P{Is_Ccc=+0000021}', "");
Expect(1, 1468, '\P{^Is_Ccc=+0000021}', "");
Expect(0, 1467, '\p{Is_Ccc=+0000021}', "");
Expect(1, 1467, '\p{^Is_Ccc=+0000021}', "");
Expect(1, 1467, '\P{Is_Ccc=+0000021}', "");
Expect(0, 1467, '\P{^Is_Ccc=+0000021}', "");
Error('\p{Canonical_Combining_Class=/a/-0026}');
Error('\P{Canonical_Combining_Class=/a/-0026}');
Expect(1, 64286, '\p{Canonical_Combining_Class=+00000000026}', "");
Expect(0, 64286, '\p{^Canonical_Combining_Class=+00000000026}', "");
Expect(0, 64286, '\P{Canonical_Combining_Class=+00000000026}', "");
Expect(1, 64286, '\P{^Canonical_Combining_Class=+00000000026}', "");
Expect(0, 64285, '\p{Canonical_Combining_Class=+00000000026}', "");
Expect(1, 64285, '\p{^Canonical_Combining_Class=+00000000026}', "");
Expect(1, 64285, '\P{Canonical_Combining_Class=+00000000026}', "");
Expect(0, 64285, '\P{^Canonical_Combining_Class=+00000000026}', "");
Error('\p{Ccc=-+0000000026/a/}');
Error('\P{Ccc=-+0000000026/a/}');
Expect(1, 64286, '\p{Ccc=00000000026}', "");
Expect(0, 64286, '\p{^Ccc=00000000026}', "");
Expect(0, 64286, '\P{Ccc=00000000026}', "");
Expect(1, 64286, '\P{^Ccc=00000000026}', "");
Expect(0, 64285, '\p{Ccc=00000000026}', "");
Expect(1, 64285, '\p{^Ccc=00000000026}', "");
Expect(1, 64285, '\P{Ccc=00000000026}', "");
Expect(0, 64285, '\P{^Ccc=00000000026}', "");
Error('\p{Is_Canonical_Combining_Class= -000000026/a/}');
Error('\P{Is_Canonical_Combining_Class= -000000026/a/}');
Expect(1, 64286, '\p{Is_Canonical_Combining_Class=0000026}', "");
Expect(0, 64286, '\p{^Is_Canonical_Combining_Class=0000026}', "");
Expect(0, 64286, '\P{Is_Canonical_Combining_Class=0000026}', "");
Expect(1, 64286, '\P{^Is_Canonical_Combining_Class=0000026}', "");
Expect(0, 64285, '\p{Is_Canonical_Combining_Class=0000026}', "");
Expect(1, 64285, '\p{^Is_Canonical_Combining_Class=0000026}', "");
Expect(1, 64285, '\P{Is_Canonical_Combining_Class=0000026}', "");
Expect(0, 64285, '\P{^Is_Canonical_Combining_Class=0000026}', "");
Error('\p{Is_Ccc=		+0:=0_0 0-26}');
Error('\P{Is_Ccc=		+0:=0_0 0-26}');
Expect(1, 64286, '\p{Is_Ccc=2_6}', "");
Expect(0, 64286, '\p{^Is_Ccc=2_6}', "");
Expect(0, 64286, '\P{Is_Ccc=2_6}', "");
Expect(1, 64286, '\P{^Is_Ccc=2_6}', "");
Expect(0, 64285, '\p{Is_Ccc=2_6}', "");
Expect(1, 64285, '\p{^Is_Ccc=2_6}', "");
Expect(1, 64285, '\P{Is_Ccc=2_6}', "");
Expect(0, 64285, '\P{^Is_Ccc=2_6}', "");
Error('\p{Canonical_Combining_Class=:= 0103}');
Error('\P{Canonical_Combining_Class=:= 0103}');
Expect(1, 3641, '\p{Canonical_Combining_Class=+0_0_0_0_103}', "");
Expect(0, 3641, '\p{^Canonical_Combining_Class=+0_0_0_0_103}', "");
Expect(0, 3641, '\P{Canonical_Combining_Class=+0_0_0_0_103}', "");
Expect(1, 3641, '\P{^Canonical_Combining_Class=+0_0_0_0_103}', "");
Expect(0, 3639, '\p{Canonical_Combining_Class=+0_0_0_0_103}', "");
Expect(1, 3639, '\p{^Canonical_Combining_Class=+0_0_0_0_103}', "");
Expect(1, 3639, '\P{Canonical_Combining_Class=+0_0_0_0_103}', "");
Expect(0, 3639, '\P{^Canonical_Combining_Class=+0_0_0_0_103}', "");
Error('\p{Ccc=		00000000103/a/}');
Error('\P{Ccc=		00000000103/a/}');
Expect(1, 3641, '\p{Ccc=0103}', "");
Expect(0, 3641, '\p{^Ccc=0103}', "");
Expect(0, 3641, '\P{Ccc=0103}', "");
Expect(1, 3641, '\P{^Ccc=0103}', "");
Expect(0, 3639, '\p{Ccc=0103}', "");
Expect(1, 3639, '\p{^Ccc=0103}', "");
Expect(1, 3639, '\P{Ccc=0103}', "");
Expect(0, 3639, '\P{^Ccc=0103}', "");
Error('\p{Is_Canonical_Combining_Class=-/a/+00 01 03}');
Error('\P{Is_Canonical_Combining_Class=-/a/+00 01 03}');
Expect(1, 3641, '\p{Is_Canonical_Combining_Class=000000103}', "");
Expect(0, 3641, '\p{^Is_Canonical_Combining_Class=000000103}', "");
Expect(0, 3641, '\P{Is_Canonical_Combining_Class=000000103}', "");
Expect(1, 3641, '\P{^Is_Canonical_Combining_Class=000000103}', "");
Expect(0, 3639, '\p{Is_Canonical_Combining_Class=000000103}', "");
Expect(1, 3639, '\p{^Is_Canonical_Combining_Class=000000103}', "");
Expect(1, 3639, '\P{Is_Canonical_Combining_Class=000000103}', "");
Expect(0, 3639, '\P{^Is_Canonical_Combining_Class=000000103}', "");
Error('\p{Is_Ccc= :=0	0	0 0-0-0	0-0103}');
Error('\P{Is_Ccc= :=0	0	0 0-0-0	0-0103}');
Expect(1, 3641, '\p{Is_Ccc=00103}', "");
Expect(0, 3641, '\p{^Is_Ccc=00103}', "");
Expect(0, 3641, '\P{Is_Ccc=00103}', "");
Expect(1, 3641, '\P{^Is_Ccc=00103}', "");
Expect(0, 3639, '\p{Is_Ccc=00103}', "");
Expect(1, 3639, '\p{^Is_Ccc=00103}', "");
Expect(1, 3639, '\P{Is_Ccc=00103}', "");
Expect(0, 3639, '\P{^Is_Ccc=00103}', "");
Error('\p{Canonical_Combining_Class=/a/_ +0000010}');
Error('\P{Canonical_Combining_Class=/a/_ +0000010}');
Expect(1, 1456, '\p{Canonical_Combining_Class=0_0_0_0_0010}', "");
Expect(0, 1456, '\p{^Canonical_Combining_Class=0_0_0_0_0010}', "");
Expect(0, 1456, '\P{Canonical_Combining_Class=0_0_0_0_0010}', "");
Expect(1, 1456, '\P{^Canonical_Combining_Class=0_0_0_0_0010}', "");
Expect(0, 1455, '\p{Canonical_Combining_Class=0_0_0_0_0010}', "");
Expect(1, 1455, '\p{^Canonical_Combining_Class=0_0_0_0_0010}', "");
Expect(1, 1455, '\P{Canonical_Combining_Class=0_0_0_0_0010}', "");
Expect(0, 1455, '\P{^Canonical_Combining_Class=0_0_0_0_0010}', "");
Error('\p{Ccc= -000001-0:=}');
Error('\P{Ccc= -000001-0:=}');
Expect(1, 1456, '\p{Ccc=+010}', "");
Expect(0, 1456, '\p{^Ccc=+010}', "");
Expect(0, 1456, '\P{Ccc=+010}', "");
Expect(1, 1456, '\P{^Ccc=+010}', "");
Expect(0, 1455, '\p{Ccc=+010}', "");
Expect(1, 1455, '\p{^Ccc=+010}', "");
Expect(1, 1455, '\P{Ccc=+010}', "");
Expect(0, 1455, '\P{^Ccc=+010}', "");
Error('\p{Is_Canonical_Combining_Class=/a/--00010}');
Error('\P{Is_Canonical_Combining_Class=/a/--00010}');
Expect(1, 1456, '\p{Is_Canonical_Combining_Class=+10}', "");
Expect(0, 1456, '\p{^Is_Canonical_Combining_Class=+10}', "");
Expect(0, 1456, '\P{Is_Canonical_Combining_Class=+10}', "");
Expect(1, 1456, '\P{^Is_Canonical_Combining_Class=+10}', "");
Expect(0, 1455, '\p{Is_Canonical_Combining_Class=+10}', "");
Expect(1, 1455, '\p{^Is_Canonical_Combining_Class=+10}', "");
Expect(1, 1455, '\P{Is_Canonical_Combining_Class=+10}', "");
Expect(0, 1455, '\P{^Is_Canonical_Combining_Class=+10}', "");
Error('\p{Is_Ccc=:=- 000000010}');
Error('\P{Is_Ccc=:=- 000000010}');
Expect(1, 1456, '\p{Is_Ccc=00000000010}', "");
Expect(0, 1456, '\p{^Is_Ccc=00000000010}', "");
Expect(0, 1456, '\P{Is_Ccc=00000000010}', "");
Expect(1, 1456, '\P{^Is_Ccc=00000000010}', "");
Expect(0, 1455, '\p{Is_Ccc=00000000010}', "");
Expect(1, 1455, '\p{^Is_Ccc=00000000010}', "");
Expect(1, 1455, '\P{Is_Ccc=00000000010}', "");
Expect(0, 1455, '\P{^Is_Ccc=00000000010}', "");
Error('\p{Canonical_Combining_Class=-0000091:=}');
Error('\P{Canonical_Combining_Class=-0000091:=}');
Expect(1, 3158, '\p{Canonical_Combining_Class=91}', "");
Expect(0, 3158, '\p{^Canonical_Combining_Class=91}', "");
Expect(0, 3158, '\P{Canonical_Combining_Class=91}', "");
Expect(1, 3158, '\P{^Canonical_Combining_Class=91}', "");
Expect(0, 3157, '\p{Canonical_Combining_Class=91}', "");
Expect(1, 3157, '\p{^Canonical_Combining_Class=91}', "");
Expect(1, 3157, '\P{Canonical_Combining_Class=91}', "");
Expect(0, 3157, '\P{^Canonical_Combining_Class=91}', "");
Error('\p{Ccc:	/a/ +91}');
Error('\P{Ccc:	/a/ +91}');
Expect(1, 3158, '\p{Ccc=000000091}', "");
Expect(0, 3158, '\p{^Ccc=000000091}', "");
Expect(0, 3158, '\P{Ccc=000000091}', "");
Expect(1, 3158, '\P{^Ccc=000000091}', "");
Expect(0, 3157, '\p{Ccc=000000091}', "");
Expect(1, 3157, '\p{^Ccc=000000091}', "");
Expect(1, 3157, '\P{Ccc=000000091}', "");
Expect(0, 3157, '\P{^Ccc=000000091}', "");
Error('\p{Is_Canonical_Combining_Class=-_000000/a/00091}');
Error('\P{Is_Canonical_Combining_Class=-_000000/a/00091}');
Expect(1, 3158, '\p{Is_Canonical_Combining_Class=00000091}', "");
Expect(0, 3158, '\p{^Is_Canonical_Combining_Class=00000091}', "");
Expect(0, 3158, '\P{Is_Canonical_Combining_Class=00000091}', "");
Expect(1, 3158, '\P{^Is_Canonical_Combining_Class=00000091}', "");
Expect(0, 3157, '\p{Is_Canonical_Combining_Class=00000091}', "");
Expect(1, 3157, '\p{^Is_Canonical_Combining_Class=00000091}', "");
Expect(1, 3157, '\P{Is_Canonical_Combining_Class=00000091}', "");
Expect(0, 3157, '\P{^Is_Canonical_Combining_Class=00000091}', "");
Error('\p{Is_Ccc=_00000091:=}');
Error('\P{Is_Ccc=_00000091:=}');
Expect(1, 3158, '\p{Is_Ccc=91}', "");
Expect(0, 3158, '\p{^Is_Ccc=91}', "");
Expect(0, 3158, '\P{Is_Ccc=91}', "");
Expect(1, 3158, '\P{^Is_Ccc=91}', "");
Expect(0, 3157, '\p{Is_Ccc=91}', "");
Expect(1, 3157, '\p{^Is_Ccc=91}', "");
Expect(1, 3157, '\P{Is_Ccc=91}', "");
Expect(0, 3157, '\P{^Is_Ccc=91}', "");
Error('\p{Canonical_Combining_Class=_000107/a/}');
Error('\P{Canonical_Combining_Class=_000107/a/}');
Expect(1, 3659, '\p{Canonical_Combining_Class=+000000107}', "");
Expect(0, 3659, '\p{^Canonical_Combining_Class=+000000107}', "");
Expect(0, 3659, '\P{Canonical_Combining_Class=+000000107}', "");
Expect(1, 3659, '\P{^Canonical_Combining_Class=+000000107}', "");
Expect(0, 3655, '\p{Canonical_Combining_Class=+000000107}', "");
Expect(1, 3655, '\p{^Canonical_Combining_Class=+000000107}', "");
Expect(1, 3655, '\P{Canonical_Combining_Class=+000000107}', "");
Expect(0, 3655, '\P{^Canonical_Combining_Class=+000000107}', "");
Error('\p{Ccc=_+0/a/0_0-1-07}');
Error('\P{Ccc=_+0/a/0_0-1-07}');
Expect(1, 3659, '\p{Ccc=0_0_0_107}', "");
Expect(0, 3659, '\p{^Ccc=0_0_0_107}', "");
Expect(0, 3659, '\P{Ccc=0_0_0_107}', "");
Expect(1, 3659, '\P{^Ccc=0_0_0_107}', "");
Expect(0, 3655, '\p{Ccc=0_0_0_107}', "");
Expect(1, 3655, '\p{^Ccc=0_0_0_107}', "");
Expect(1, 3655, '\P{Ccc=0_0_0_107}', "");
Expect(0, 3655, '\P{^Ccc=0_0_0_107}', "");
Error('\p{Is_Canonical_Combining_Class= /a/+00000107}');
Error('\P{Is_Canonical_Combining_Class= /a/+00000107}');
Expect(1, 3659, '\p{Is_Canonical_Combining_Class=0000107}', "");
Expect(0, 3659, '\p{^Is_Canonical_Combining_Class=0000107}', "");
Expect(0, 3659, '\P{Is_Canonical_Combining_Class=0000107}', "");
Expect(1, 3659, '\P{^Is_Canonical_Combining_Class=0000107}', "");
Expect(0, 3655, '\p{Is_Canonical_Combining_Class=0000107}', "");
Expect(1, 3655, '\p{^Is_Canonical_Combining_Class=0000107}', "");
Expect(1, 3655, '\P{Is_Canonical_Combining_Class=0000107}', "");
Expect(0, 3655, '\P{^Is_Canonical_Combining_Class=0000107}', "");
Error('\p{Is_Ccc=-/a/+00000107}');
Error('\P{Is_Ccc=-/a/+00000107}');
Expect(1, 3659, '\p{Is_Ccc=000107}', "");
Expect(0, 3659, '\p{^Is_Ccc=000107}', "");
Expect(0, 3659, '\P{Is_Ccc=000107}', "");
Expect(1, 3659, '\P{^Is_Ccc=000107}', "");
Expect(0, 3655, '\p{Is_Ccc=000107}', "");
Expect(1, 3655, '\p{^Is_Ccc=000107}', "");
Expect(1, 3655, '\P{Is_Ccc=000107}', "");
Expect(0, 3655, '\P{^Is_Ccc=000107}', "");
Error('\p{Canonical_Combining_Class=:= _attached	Above}');
Error('\P{Canonical_Combining_Class=:= _attached	Above}');
Expect(1, 7630, '\p{Canonical_Combining_Class=attachedabove}', "");
Expect(0, 7630, '\p{^Canonical_Combining_Class=attachedabove}', "");
Expect(0, 7630, '\P{Canonical_Combining_Class=attachedabove}', "");
Expect(1, 7630, '\P{^Canonical_Combining_Class=attachedabove}', "");
Expect(0, 7629, '\p{Canonical_Combining_Class=attachedabove}', "");
Expect(1, 7629, '\p{^Canonical_Combining_Class=attachedabove}', "");
Expect(1, 7629, '\P{Canonical_Combining_Class=attachedabove}', "");
Expect(0, 7629, '\P{^Canonical_Combining_Class=attachedabove}', "");
Expect(1, 7630, '\p{Canonical_Combining_Class= 	attached-Above}', "");
Expect(0, 7630, '\p{^Canonical_Combining_Class= 	attached-Above}', "");
Expect(0, 7630, '\P{Canonical_Combining_Class= 	attached-Above}', "");
Expect(1, 7630, '\P{^Canonical_Combining_Class= 	attached-Above}', "");
Expect(0, 7629, '\p{Canonical_Combining_Class= 	attached-Above}', "");
Expect(1, 7629, '\p{^Canonical_Combining_Class= 	attached-Above}', "");
Expect(1, 7629, '\P{Canonical_Combining_Class= 	attached-Above}', "");
Expect(0, 7629, '\P{^Canonical_Combining_Class= 	attached-Above}', "");
Error('\p{Ccc:  /a/ATA}');
Error('\P{Ccc:  /a/ATA}');
Expect(1, 7630, '\p{Ccc=ata}', "");
Expect(0, 7630, '\p{^Ccc=ata}', "");
Expect(0, 7630, '\P{Ccc=ata}', "");
Expect(1, 7630, '\P{^Ccc=ata}', "");
Expect(0, 7629, '\p{Ccc=ata}', "");
Expect(1, 7629, '\p{^Ccc=ata}', "");
Expect(1, 7629, '\P{Ccc=ata}', "");
Expect(0, 7629, '\P{^Ccc=ata}', "");
Expect(1, 7630, '\p{Ccc= _ATA}', "");
Expect(0, 7630, '\p{^Ccc= _ATA}', "");
Expect(0, 7630, '\P{Ccc= _ATA}', "");
Expect(1, 7630, '\P{^Ccc= _ATA}', "");
Expect(0, 7629, '\p{Ccc= _ATA}', "");
Expect(1, 7629, '\p{^Ccc= _ATA}', "");
Expect(1, 7629, '\P{Ccc= _ATA}', "");
Expect(0, 7629, '\P{^Ccc= _ATA}', "");
Error('\p{Is_Canonical_Combining_Class:	-00000214:=}');
Error('\P{Is_Canonical_Combining_Class:	-00000214:=}');
Expect(1, 7630, '\p{Is_Canonical_Combining_Class=0_0_0_0_0_0_0_00214}', "");
Expect(0, 7630, '\p{^Is_Canonical_Combining_Class=0_0_0_0_0_0_0_00214}', "");
Expect(0, 7630, '\P{Is_Canonical_Combining_Class=0_0_0_0_0_0_0_00214}', "");
Expect(1, 7630, '\P{^Is_Canonical_Combining_Class=0_0_0_0_0_0_0_00214}', "");
Expect(0, 7629, '\p{Is_Canonical_Combining_Class=0_0_0_0_0_0_0_00214}', "");
Expect(1, 7629, '\p{^Is_Canonical_Combining_Class=0_0_0_0_0_0_0_00214}', "");
Expect(1, 7629, '\P{Is_Canonical_Combining_Class=0_0_0_0_0_0_0_00214}', "");
Expect(0, 7629, '\P{^Is_Canonical_Combining_Class=0_0_0_0_0_0_0_00214}', "");
Error('\p{Is_Ccc=	attached Above/a/}');
Error('\P{Is_Ccc=	attached Above/a/}');
Expect(1, 7630, '\p{Is_Ccc=attachedabove}', "");
Expect(0, 7630, '\p{^Is_Ccc=attachedabove}', "");
Expect(0, 7630, '\P{Is_Ccc=attachedabove}', "");
Expect(1, 7630, '\P{^Is_Ccc=attachedabove}', "");
Expect(0, 7629, '\p{Is_Ccc=attachedabove}', "");
Expect(1, 7629, '\p{^Is_Ccc=attachedabove}', "");
Expect(1, 7629, '\P{Is_Ccc=attachedabove}', "");
Expect(0, 7629, '\P{^Is_Ccc=attachedabove}', "");
Expect(1, 7630, '\p{Is_Ccc=	_Attached_Above}', "");
Expect(0, 7630, '\p{^Is_Ccc=	_Attached_Above}', "");
Expect(0, 7630, '\P{Is_Ccc=	_Attached_Above}', "");
Expect(1, 7630, '\P{^Is_Ccc=	_Attached_Above}', "");
Expect(0, 7629, '\p{Is_Ccc=	_Attached_Above}', "");
Expect(1, 7629, '\p{^Is_Ccc=	_Attached_Above}', "");
Expect(1, 7629, '\P{Is_Ccc=	_Attached_Above}', "");
Expect(0, 7629, '\P{^Is_Ccc=	_Attached_Above}', "");
Error('\p{Canonical_Combining_Class=:=_	0000000001 2}');
Error('\P{Canonical_Combining_Class=:=_	0000000001 2}');
Expect(1, 1458, '\p{Canonical_Combining_Class=00_00_12}', "");
Expect(0, 1458, '\p{^Canonical_Combining_Class=00_00_12}', "");
Expect(0, 1458, '\P{Canonical_Combining_Class=00_00_12}', "");
Expect(1, 1458, '\P{^Canonical_Combining_Class=00_00_12}', "");
Expect(0, 1457, '\p{Canonical_Combining_Class=00_00_12}', "");
Expect(1, 1457, '\p{^Canonical_Combining_Class=00_00_12}', "");
Expect(1, 1457, '\P{Canonical_Combining_Class=00_00_12}', "");
Expect(0, 1457, '\P{^Canonical_Combining_Class=00_00_12}', "");
Error('\p{Ccc= 0/a/00 0	0_12}');
Error('\P{Ccc= 0/a/00 0	0_12}');
Expect(1, 1458, '\p{Ccc=0000000012}', "");
Expect(0, 1458, '\p{^Ccc=0000000012}', "");
Expect(0, 1458, '\P{Ccc=0000000012}', "");
Expect(1, 1458, '\P{^Ccc=0000000012}', "");
Expect(0, 1457, '\p{Ccc=0000000012}', "");
Expect(1, 1457, '\p{^Ccc=0000000012}', "");
Expect(1, 1457, '\P{Ccc=0000000012}', "");
Expect(0, 1457, '\P{^Ccc=0000000012}', "");
Error('\p{Is_Canonical_Combining_Class= 	000012:=}');
Error('\P{Is_Canonical_Combining_Class= 	000012:=}');
Expect(1, 1458, '\p{Is_Canonical_Combining_Class=0_0_0_0_0_0_0_0_12}', "");
Expect(0, 1458, '\p{^Is_Canonical_Combining_Class=0_0_0_0_0_0_0_0_12}', "");
Expect(0, 1458, '\P{Is_Canonical_Combining_Class=0_0_0_0_0_0_0_0_12}', "");
Expect(1, 1458, '\P{^Is_Canonical_Combining_Class=0_0_0_0_0_0_0_0_12}', "");
Expect(0, 1457, '\p{Is_Canonical_Combining_Class=0_0_0_0_0_0_0_0_12}', "");
Expect(1, 1457, '\p{^Is_Canonical_Combining_Class=0_0_0_0_0_0_0_0_12}', "");
Expect(1, 1457, '\P{Is_Canonical_Combining_Class=0_0_0_0_0_0_0_0_12}', "");
Expect(0, 1457, '\P{^Is_Canonical_Combining_Class=0_0_0_0_0_0_0_0_12}', "");
Error('\p{Is_Ccc=:=	-000000012}');
Error('\P{Is_Ccc=:=	-000000012}');
Expect(1, 1458, '\p{Is_Ccc=+0000000012}', "");
Expect(0, 1458, '\p{^Is_Ccc=+0000000012}', "");
Expect(0, 1458, '\P{Is_Ccc=+0000000012}', "");
Expect(1, 1458, '\P{^Is_Ccc=+0000000012}', "");
Expect(0, 1457, '\p{Is_Ccc=+0000000012}', "");
Expect(1, 1457, '\p{^Is_Ccc=+0000000012}', "");
Expect(1, 1457, '\P{Is_Ccc=+0000000012}', "");
Expect(0, 1457, '\P{^Is_Ccc=+0000000012}', "");
Error('\p{Canonical_Combining_Class=_0000000019/a/}');
Error('\P{Canonical_Combining_Class=_0000000019/a/}');
Expect(1, 1466, '\p{Canonical_Combining_Class=1_9}', "");
Expect(0, 1466, '\p{^Canonical_Combining_Class=1_9}', "");
Expect(0, 1466, '\P{Canonical_Combining_Class=1_9}', "");
Expect(1, 1466, '\P{^Canonical_Combining_Class=1_9}', "");
Expect(0, 1464, '\p{Canonical_Combining_Class=1_9}', "");
Expect(1, 1464, '\p{^Canonical_Combining_Class=1_9}', "");
Expect(1, 1464, '\P{Canonical_Combining_Class=1_9}', "");
Expect(0, 1464, '\P{^Canonical_Combining_Class=1_9}', "");
Error('\p{Ccc=	-00019:=}');
Error('\P{Ccc=	-00019:=}');
Expect(1, 1466, '\p{Ccc=000000019}', "");
Expect(0, 1466, '\p{^Ccc=000000019}', "");
Expect(0, 1466, '\P{Ccc=000000019}', "");
Expect(1, 1466, '\P{^Ccc=000000019}', "");
Expect(0, 1464, '\p{Ccc=000000019}', "");
Expect(1, 1464, '\p{^Ccc=000000019}', "");
Expect(1, 1464, '\P{Ccc=000000019}', "");
Expect(0, 1464, '\P{^Ccc=000000019}', "");
Error('\p{Is_Canonical_Combining_Class= /a/0	0	0	0 019}');
Error('\P{Is_Canonical_Combining_Class= /a/0	0	0	0 019}');
Expect(1, 1466, '\p{Is_Canonical_Combining_Class=019}', "");
Expect(0, 1466, '\p{^Is_Canonical_Combining_Class=019}', "");
Expect(0, 1466, '\P{Is_Canonical_Combining_Class=019}', "");
Expect(1, 1466, '\P{^Is_Canonical_Combining_Class=019}', "");
Expect(0, 1464, '\p{Is_Canonical_Combining_Class=019}', "");
Expect(1, 1464, '\p{^Is_Canonical_Combining_Class=019}', "");
Expect(1, 1464, '\P{Is_Canonical_Combining_Class=019}', "");
Expect(0, 1464, '\P{^Is_Canonical_Combining_Class=019}', "");
Error('\p{Is_Ccc= :=00019}');
Error('\P{Is_Ccc= :=00019}');
Expect(1, 1466, '\p{Is_Ccc=001_9}', "");
Expect(0, 1466, '\p{^Is_Ccc=001_9}', "");
Expect(0, 1466, '\P{Is_Ccc=001_9}', "");
Expect(1, 1466, '\P{^Is_Ccc=001_9}', "");
Expect(0, 1464, '\p{Is_Ccc=001_9}', "");
Expect(1, 1464, '\p{^Is_Ccc=001_9}', "");
Expect(1, 1464, '\P{Is_Ccc=001_9}', "");
Expect(0, 1464, '\P{^Is_Ccc=001_9}', "");
Error('\p{Canonical_Combining_Class= :=000030}');
Error('\P{Canonical_Combining_Class= :=000030}');
Expect(1, 1560, '\p{Canonical_Combining_Class: 000030}', "");
Expect(0, 1560, '\p{^Canonical_Combining_Class: 000030}', "");
Expect(0, 1560, '\P{Canonical_Combining_Class: 000030}', "");
Expect(1, 1560, '\P{^Canonical_Combining_Class: 000030}', "");
Expect(0, 1559, '\p{Canonical_Combining_Class: 000030}', "");
Expect(1, 1559, '\p{^Canonical_Combining_Class: 000030}', "");
Expect(1, 1559, '\P{Canonical_Combining_Class: 000030}', "");
Expect(0, 1559, '\P{^Canonical_Combining_Class: 000030}', "");
Error('\p{Ccc=_00-00-00-00/a/30}');
Error('\P{Ccc=_00-00-00-00/a/30}');
Expect(1, 1560, '\p{Ccc=00_00_00_03_0}', "");
Expect(0, 1560, '\p{^Ccc=00_00_00_03_0}', "");
Expect(0, 1560, '\P{Ccc=00_00_00_03_0}', "");
Expect(1, 1560, '\P{^Ccc=00_00_00_03_0}', "");
Expect(0, 1559, '\p{Ccc=00_00_00_03_0}', "");
Expect(1, 1559, '\p{^Ccc=00_00_00_03_0}', "");
Expect(1, 1559, '\P{Ccc=00_00_00_03_0}', "");
Expect(0, 1559, '\P{^Ccc=00_00_00_03_0}', "");
Error('\p{Is_Canonical_Combining_Class:  0000030/a/}');
Error('\P{Is_Canonical_Combining_Class:  0000030/a/}');
Expect(1, 1560, '\p{Is_Canonical_Combining_Class=+00_00_30}', "");
Expect(0, 1560, '\p{^Is_Canonical_Combining_Class=+00_00_30}', "");
Expect(0, 1560, '\P{Is_Canonical_Combining_Class=+00_00_30}', "");
Expect(1, 1560, '\P{^Is_Canonical_Combining_Class=+00_00_30}', "");
Expect(0, 1559, '\p{Is_Canonical_Combining_Class=+00_00_30}', "");
Expect(1, 1559, '\p{^Is_Canonical_Combining_Class=+00_00_30}', "");
Expect(1, 1559, '\P{Is_Canonical_Combining_Class=+00_00_30}', "");
Expect(0, 1559, '\P{^Is_Canonical_Combining_Class=+00_00_30}', "");
Error('\p{Is_Ccc:		-00/a/0-30}');
Error('\P{Is_Ccc:		-00/a/0-30}');
Expect(1, 1560, '\p{Is_Ccc=+030}', "");
Expect(0, 1560, '\p{^Is_Ccc=+030}', "");
Expect(0, 1560, '\P{Is_Ccc=+030}', "");
Expect(1, 1560, '\P{^Is_Ccc=+030}', "");
Expect(0, 1559, '\p{Is_Ccc=+030}', "");
Expect(1, 1559, '\p{^Is_Ccc=+030}', "");
Expect(1, 1559, '\P{Is_Ccc=+030}', "");
Expect(0, 1559, '\P{^Is_Ccc=+030}', "");
Error('\p{Canonical_Combining_Class=	-00:=00-00	00 025}');
Error('\P{Canonical_Combining_Class=	-00:=00-00	00 025}');
Expect(1, 1474, '\p{Canonical_Combining_Class=00_00_00_00_25}', "");
Expect(0, 1474, '\p{^Canonical_Combining_Class=00_00_00_00_25}', "");
Expect(0, 1474, '\P{Canonical_Combining_Class=00_00_00_00_25}', "");
Expect(1, 1474, '\P{^Canonical_Combining_Class=00_00_00_00_25}', "");
Expect(0, 1473, '\p{Canonical_Combining_Class=00_00_00_00_25}', "");
Expect(1, 1473, '\p{^Canonical_Combining_Class=00_00_00_00_25}', "");
Expect(1, 1473, '\P{Canonical_Combining_Class=00_00_00_00_25}', "");
Expect(0, 1473, '\P{^Canonical_Combining_Class=00_00_00_00_25}', "");
Error('\p{Ccc=__+00000025:=}');
Error('\P{Ccc=__+00000025:=}');
Expect(1, 1474, '\p{Ccc=+25}', "");
Expect(0, 1474, '\p{^Ccc=+25}', "");
Expect(0, 1474, '\P{Ccc=+25}', "");
Expect(1, 1474, '\P{^Ccc=+25}', "");
Expect(0, 1473, '\p{Ccc=+25}', "");
Expect(1, 1473, '\p{^Ccc=+25}', "");
Expect(1, 1473, '\P{Ccc=+25}', "");
Expect(0, 1473, '\P{^Ccc=+25}', "");
Error('\p{Is_Canonical_Combining_Class=- 0/a/0-0-0	0	0 0025}');
Error('\P{Is_Canonical_Combining_Class=- 0/a/0-0-0	0	0 0025}');
Expect(1, 1474, '\p{Is_Canonical_Combining_Class=+02_5}', "");
Expect(0, 1474, '\p{^Is_Canonical_Combining_Class=+02_5}', "");
Expect(0, 1474, '\P{Is_Canonical_Combining_Class=+02_5}', "");
Expect(1, 1474, '\P{^Is_Canonical_Combining_Class=+02_5}', "");
Expect(0, 1473, '\p{Is_Canonical_Combining_Class=+02_5}', "");
Expect(1, 1473, '\p{^Is_Canonical_Combining_Class=+02_5}', "");
Expect(1, 1473, '\P{Is_Canonical_Combining_Class=+02_5}', "");
Expect(0, 1473, '\P{^Is_Canonical_Combining_Class=+02_5}', "");
Error('\p{Is_Ccc=:=-+0025}');
Error('\P{Is_Ccc=:=-+0025}');
Expect(1, 1474, '\p{Is_Ccc=00_02_5}', "");
Expect(0, 1474, '\p{^Is_Ccc=00_02_5}', "");
Expect(0, 1474, '\P{Is_Ccc=00_02_5}', "");
Expect(1, 1474, '\P{^Is_Ccc=00_02_5}', "");
Expect(0, 1473, '\p{Is_Ccc=00_02_5}', "");
Expect(1, 1473, '\p{^Is_Ccc=00_02_5}', "");
Expect(1, 1473, '\P{Is_Ccc=00_02_5}', "");
Expect(0, 1473, '\P{^Is_Ccc=00_02_5}', "");
Error('\p{Canonical_Combining_Class=:=_00028}');
Error('\P{Canonical_Combining_Class=:=_00028}');
Expect(1, 1612, '\p{Canonical_Combining_Class=02_8}', "");
Expect(0, 1612, '\p{^Canonical_Combining_Class=02_8}', "");
Expect(0, 1612, '\P{Canonical_Combining_Class=02_8}', "");
Expect(1, 1612, '\P{^Canonical_Combining_Class=02_8}', "");
Expect(0, 1611, '\p{Canonical_Combining_Class=02_8}', "");
Expect(1, 1611, '\p{^Canonical_Combining_Class=02_8}', "");
Expect(1, 1611, '\P{Canonical_Combining_Class=02_8}', "");
Expect(0, 1611, '\P{^Canonical_Combining_Class=02_8}', "");
Error('\p{Ccc=-/a/+0028}');
Error('\P{Ccc=-/a/+0028}');
Expect(1, 1612, '\p{Ccc=+0_0_0_0_0_0_0_0028}', "");
Expect(0, 1612, '\p{^Ccc=+0_0_0_0_0_0_0_0028}', "");
Expect(0, 1612, '\P{Ccc=+0_0_0_0_0_0_0_0028}', "");
Expect(1, 1612, '\P{^Ccc=+0_0_0_0_0_0_0_0028}', "");
Expect(0, 1611, '\p{Ccc=+0_0_0_0_0_0_0_0028}', "");
Expect(1, 1611, '\p{^Ccc=+0_0_0_0_0_0_0_0028}', "");
Expect(1, 1611, '\P{Ccc=+0_0_0_0_0_0_0_0028}', "");
Expect(0, 1611, '\P{^Ccc=+0_0_0_0_0_0_0_0028}', "");
Error('\p{Is_Canonical_Combining_Class=	 0	0:=0_0-0	0 00-0	28}');
Error('\P{Is_Canonical_Combining_Class=	 0	0:=0_0-0	0 00-0	28}');
Expect(1, 1612, '\p{Is_Canonical_Combining_Class:   0028}', "");
Expect(0, 1612, '\p{^Is_Canonical_Combining_Class:   0028}', "");
Expect(0, 1612, '\P{Is_Canonical_Combining_Class:   0028}', "");
Expect(1, 1612, '\P{^Is_Canonical_Combining_Class:   0028}', "");
Expect(0, 1611, '\p{Is_Canonical_Combining_Class:   0028}', "");
Expect(1, 1611, '\p{^Is_Canonical_Combining_Class:   0028}', "");
Expect(1, 1611, '\P{Is_Canonical_Combining_Class:   0028}', "");
Expect(0, 1611, '\P{^Is_Canonical_Combining_Class:   0028}', "");
Error('\p{Is_Ccc=:=_0000028}');
Error('\P{Is_Ccc=:=_0000028}');
Expect(1, 1612, '\p{Is_Ccc=0_0_0_0_0_0_0_0028}', "");
Expect(0, 1612, '\p{^Is_Ccc=0_0_0_0_0_0_0_0028}', "");
Expect(0, 1612, '\P{Is_Ccc=0_0_0_0_0_0_0_0028}', "");
Expect(1, 1612, '\P{^Is_Ccc=0_0_0_0_0_0_0_0028}', "");
Expect(0, 1611, '\p{Is_Ccc=0_0_0_0_0_0_0_0028}', "");
Expect(1, 1611, '\p{^Is_Ccc=0_0_0_0_0_0_0_0028}', "");
Expect(1, 1611, '\P{Is_Ccc=0_0_0_0_0_0_0_0028}', "");
Expect(0, 1611, '\P{^Is_Ccc=0_0_0_0_0_0_0_0028}', "");
Error('\p{Canonical_Combining_Class=_-+0000130/a/}');
Error('\P{Canonical_Combining_Class=_-+0000130/a/}');
Expect(1, 3954, '\p{Canonical_Combining_Class=000130}', "");
Expect(0, 3954, '\p{^Canonical_Combining_Class=000130}', "");
Expect(0, 3954, '\P{Canonical_Combining_Class=000130}', "");
Expect(1, 3954, '\P{^Canonical_Combining_Class=000130}', "");
Expect(0, 3953, '\p{Canonical_Combining_Class=000130}', "");
Expect(1, 3953, '\p{^Canonical_Combining_Class=000130}', "");
Expect(1, 3953, '\P{Canonical_Combining_Class=000130}', "");
Expect(0, 3953, '\P{^Canonical_Combining_Class=000130}', "");
Error('\p{Ccc:	-	+013:=0}');
Error('\P{Ccc:	-	+013:=0}');
Expect(1, 3954, '\p{Ccc=00130}', "");
Expect(0, 3954, '\p{^Ccc=00130}', "");
Expect(0, 3954, '\P{Ccc=00130}', "");
Expect(1, 3954, '\P{^Ccc=00130}', "");
Expect(0, 3953, '\p{Ccc=00130}', "");
Expect(1, 3953, '\p{^Ccc=00130}', "");
Expect(1, 3953, '\P{Ccc=00130}', "");
Expect(0, 3953, '\P{^Ccc=00130}', "");
Error('\p{Is_Canonical_Combining_Class=/a/-	00000000130}');
Error('\P{Is_Canonical_Combining_Class=/a/-	00000000130}');
Expect(1, 3954, '\p{Is_Canonical_Combining_Class=+000000000130}', "");
Expect(0, 3954, '\p{^Is_Canonical_Combining_Class=+000000000130}', "");
Expect(0, 3954, '\P{Is_Canonical_Combining_Class=+000000000130}', "");
Expect(1, 3954, '\P{^Is_Canonical_Combining_Class=+000000000130}', "");
Expect(0, 3953, '\p{Is_Canonical_Combining_Class=+000000000130}', "");
Expect(1, 3953, '\p{^Is_Canonical_Combining_Class=+000000000130}', "");
Expect(1, 3953, '\P{Is_Canonical_Combining_Class=+000000000130}', "");
Expect(0, 3953, '\P{^Is_Canonical_Combining_Class=+000000000130}', "");
Error('\p{Is_Ccc=:=	0000013	0}');
Error('\P{Is_Ccc=:=	0000013	0}');
Expect(1, 3954, '\p{Is_Ccc:	000000130}', "");
Expect(0, 3954, '\p{^Is_Ccc:	000000130}', "");
Expect(0, 3954, '\P{Is_Ccc:	000000130}', "");
Expect(1, 3954, '\P{^Is_Ccc:	000000130}', "");
Expect(0, 3953, '\p{Is_Ccc:	000000130}', "");
Expect(1, 3953, '\p{^Is_Ccc:	000000130}', "");
Expect(1, 3953, '\P{Is_Ccc:	000000130}', "");
Expect(0, 3953, '\P{^Is_Ccc:	000000130}', "");
Error('\p{Canonical_Combining_Class=/a/00000122}');
Error('\P{Canonical_Combining_Class=/a/00000122}');
Expect(1, 3787, '\p{Canonical_Combining_Class=0000122}', "");
Expect(0, 3787, '\p{^Canonical_Combining_Class=0000122}', "");
Expect(0, 3787, '\P{Canonical_Combining_Class=0000122}', "");
Expect(1, 3787, '\P{^Canonical_Combining_Class=0000122}', "");
Expect(0, 3783, '\p{Canonical_Combining_Class=0000122}', "");
Expect(1, 3783, '\p{^Canonical_Combining_Class=0000122}', "");
Expect(1, 3783, '\P{Canonical_Combining_Class=0000122}', "");
Expect(0, 3783, '\P{^Canonical_Combining_Class=0000122}', "");
Error('\p{Ccc=	+0:=0_0	0_00-0_122}');
Error('\P{Ccc=	+0:=0_0	0_00-0_122}');
Expect(1, 3787, '\p{Ccc=0_0_0_0_0_0_0_122}', "");
Expect(0, 3787, '\p{^Ccc=0_0_0_0_0_0_0_122}', "");
Expect(0, 3787, '\P{Ccc=0_0_0_0_0_0_0_122}', "");
Expect(1, 3787, '\P{^Ccc=0_0_0_0_0_0_0_122}', "");
Expect(0, 3783, '\p{Ccc=0_0_0_0_0_0_0_122}', "");
Expect(1, 3783, '\p{^Ccc=0_0_0_0_0_0_0_122}', "");
Expect(1, 3783, '\P{Ccc=0_0_0_0_0_0_0_122}', "");
Expect(0, 3783, '\P{^Ccc=0_0_0_0_0_0_0_122}', "");
Error('\p{Is_Canonical_Combining_Class=_ 00_01/a/22}');
Error('\P{Is_Canonical_Combining_Class=_ 00_01/a/22}');
Expect(1, 3787, '\p{Is_Canonical_Combining_Class=122}', "");
Expect(0, 3787, '\p{^Is_Canonical_Combining_Class=122}', "");
Expect(0, 3787, '\P{Is_Canonical_Combining_Class=122}', "");
Expect(1, 3787, '\P{^Is_Canonical_Combining_Class=122}', "");
Expect(0, 3783, '\p{Is_Canonical_Combining_Class=122}', "");
Expect(1, 3783, '\p{^Is_Canonical_Combining_Class=122}', "");
Expect(1, 3783, '\P{Is_Canonical_Combining_Class=122}', "");
Expect(0, 3783, '\P{^Is_Canonical_Combining_Class=122}', "");
Error('\p{Is_Ccc=-_00122:=}');
Error('\P{Is_Ccc=-_00122:=}');
Expect(1, 3787, '\p{Is_Ccc=000122}', "");
Expect(0, 3787, '\p{^Is_Ccc=000122}', "");
Expect(0, 3787, '\P{Is_Ccc=000122}', "");
Expect(1, 3787, '\P{^Is_Ccc=000122}', "");
Expect(0, 3783, '\p{Is_Ccc=000122}', "");
Expect(1, 3783, '\p{^Is_Ccc=000122}', "");
Expect(1, 3783, '\P{Is_Ccc=000122}', "");
Expect(0, 3783, '\P{^Is_Ccc=000122}', "");
Error('\p{Canonical_Combining_Class=-_+0:=0-0 0_0 0	00022}');
Error('\P{Canonical_Combining_Class=-_+0:=0-0 0_0 0	00022}');
Expect(1, 1469, '\p{Canonical_Combining_Class=0_0_0_0_0_0_0022}', "");
Expect(0, 1469, '\p{^Canonical_Combining_Class=0_0_0_0_0_0_0022}', "");
Expect(0, 1469, '\P{Canonical_Combining_Class=0_0_0_0_0_0_0022}', "");
Expect(1, 1469, '\P{^Canonical_Combining_Class=0_0_0_0_0_0_0022}', "");
Expect(0, 1468, '\p{Canonical_Combining_Class=0_0_0_0_0_0_0022}', "");
Expect(1, 1468, '\p{^Canonical_Combining_Class=0_0_0_0_0_0_0022}', "");
Expect(1, 1468, '\P{Canonical_Combining_Class=0_0_0_0_0_0_0022}', "");
Expect(0, 1468, '\P{^Canonical_Combining_Class=0_0_0_0_0_0_0022}', "");
Error('\p{Ccc: :=+0000022}');
Error('\P{Ccc: :=+0000022}');
Expect(1, 1469, '\p{Ccc=00_00_00_00_22}', "");
Expect(0, 1469, '\p{^Ccc=00_00_00_00_22}', "");
Expect(0, 1469, '\P{Ccc=00_00_00_00_22}', "");
Expect(1, 1469, '\P{^Ccc=00_00_00_00_22}', "");
Expect(0, 1468, '\p{Ccc=00_00_00_00_22}', "");
Expect(1, 1468, '\p{^Ccc=00_00_00_00_22}', "");
Expect(1, 1468, '\P{Ccc=00_00_00_00_22}', "");
Expect(0, 1468, '\P{^Ccc=00_00_00_00_22}', "");
Error('\p{Is_Canonical_Combining_Class: /a/_ 000000022}');
Error('\P{Is_Canonical_Combining_Class: /a/_ 000000022}');
Expect(1, 1469, '\p{Is_Canonical_Combining_Class=0_0_0_0_0_0_22}', "");
Expect(0, 1469, '\p{^Is_Canonical_Combining_Class=0_0_0_0_0_0_22}', "");
Expect(0, 1469, '\P{Is_Canonical_Combining_Class=0_0_0_0_0_0_22}', "");
Expect(1, 1469, '\P{^Is_Canonical_Combining_Class=0_0_0_0_0_0_22}', "");
Expect(0, 1468, '\p{Is_Canonical_Combining_Class=0_0_0_0_0_0_22}', "");
Expect(1, 1468, '\p{^Is_Canonical_Combining_Class=0_0_0_0_0_0_22}', "");
Expect(1, 1468, '\P{Is_Canonical_Combining_Class=0_0_0_0_0_0_22}', "");
Expect(0, 1468, '\P{^Is_Canonical_Combining_Class=0_0_0_0_0_0_22}', "");
Error('\p{Is_Ccc=-	+00000 000022:=}');
Error('\P{Is_Ccc=-	+00000 000022:=}');
Expect(1, 1469, '\p{Is_Ccc=022}', "");
Expect(0, 1469, '\p{^Is_Ccc=022}', "");
Expect(0, 1469, '\P{Is_Ccc=022}', "");
Expect(1, 1469, '\P{^Is_Ccc=022}', "");
Expect(0, 1468, '\p{Is_Ccc=022}', "");
Expect(1, 1468, '\p{^Is_Ccc=022}', "");
Expect(1, 1468, '\P{Is_Ccc=022}', "");
Expect(0, 1468, '\P{^Is_Ccc=022}', "");
Error('\p{Canonical_Combining_Class=/a/		00000013}');
Error('\P{Canonical_Combining_Class=/a/		00000013}');
Expect(1, 1459, '\p{Canonical_Combining_Class=13}', "");
Expect(0, 1459, '\p{^Canonical_Combining_Class=13}', "");
Expect(0, 1459, '\P{Canonical_Combining_Class=13}', "");
Expect(1, 1459, '\P{^Canonical_Combining_Class=13}', "");
Expect(0, 1458, '\p{Canonical_Combining_Class=13}', "");
Expect(1, 1458, '\p{^Canonical_Combining_Class=13}', "");
Expect(1, 1458, '\P{Canonical_Combining_Class=13}', "");
Expect(0, 1458, '\P{^Canonical_Combining_Class=13}', "");
Error('\p{Ccc=:=	+0000000013}');
Error('\P{Ccc=:=	+0000000013}');
Expect(1, 1459, '\p{Ccc=013}', "");
Expect(0, 1459, '\p{^Ccc=013}', "");
Expect(0, 1459, '\P{Ccc=013}', "");
Expect(1, 1459, '\P{^Ccc=013}', "");
Expect(0, 1458, '\p{Ccc=013}', "");
Expect(1, 1458, '\p{^Ccc=013}', "");
Expect(1, 1458, '\P{Ccc=013}', "");
Expect(0, 1458, '\P{^Ccc=013}', "");
Error('\p{Is_Canonical_Combining_Class=/a/--00013}');
Error('\P{Is_Canonical_Combining_Class=/a/--00013}');
Expect(1, 1459, '\p{Is_Canonical_Combining_Class=000013}', "");
Expect(0, 1459, '\p{^Is_Canonical_Combining_Class=000013}', "");
Expect(0, 1459, '\P{Is_Canonical_Combining_Class=000013}', "");
Expect(1, 1459, '\P{^Is_Canonical_Combining_Class=000013}', "");
Expect(0, 1458, '\p{Is_Canonical_Combining_Class=000013}', "");
Expect(1, 1458, '\p{^Is_Canonical_Combining_Class=000013}', "");
Expect(1, 1458, '\P{Is_Canonical_Combining_Class=000013}', "");
Expect(0, 1458, '\P{^Is_Canonical_Combining_Class=000013}', "");
Error('\p{Is_Ccc=:=--013}');
Error('\P{Is_Ccc=:=--013}');
Expect(1, 1459, '\p{Is_Ccc=0_0_0_0_0_0_13}', "");
Expect(0, 1459, '\p{^Is_Ccc=0_0_0_0_0_0_13}', "");
Expect(0, 1459, '\P{Is_Ccc=0_0_0_0_0_0_13}', "");
Expect(1, 1459, '\P{^Is_Ccc=0_0_0_0_0_0_13}', "");
Expect(0, 1458, '\p{Is_Ccc=0_0_0_0_0_0_13}', "");
Expect(1, 1458, '\p{^Is_Ccc=0_0_0_0_0_0_13}', "");
Expect(1, 1458, '\P{Is_Ccc=0_0_0_0_0_0_13}', "");
Expect(0, 1458, '\P{^Is_Ccc=0_0_0_0_0_0_13}', "");
Error('\p{Canonical_Combining_Class=-+003:=6}');
Error('\P{Canonical_Combining_Class=-+003:=6}');
Expect(1, 1809, '\p{Canonical_Combining_Class=+00_03_6}', "");
Expect(0, 1809, '\p{^Canonical_Combining_Class=+00_03_6}', "");
Expect(0, 1809, '\P{Canonical_Combining_Class=+00_03_6}', "");
Expect(1, 1809, '\P{^Canonical_Combining_Class=+00_03_6}', "");
Expect(0, 1808, '\p{Canonical_Combining_Class=+00_03_6}', "");
Expect(1, 1808, '\p{^Canonical_Combining_Class=+00_03_6}', "");
Expect(1, 1808, '\P{Canonical_Combining_Class=+00_03_6}', "");
Expect(0, 1808, '\P{^Canonical_Combining_Class=+00_03_6}', "");
Error('\p{Ccc= :=00036}');
Error('\P{Ccc= :=00036}');
Expect(1, 1809, '\p{Ccc=+0_0_0_0_36}', "");
Expect(0, 1809, '\p{^Ccc=+0_0_0_0_36}', "");
Expect(0, 1809, '\P{Ccc=+0_0_0_0_36}', "");
Expect(1, 1809, '\P{^Ccc=+0_0_0_0_36}', "");
Expect(0, 1808, '\p{Ccc=+0_0_0_0_36}', "");
Expect(1, 1808, '\p{^Ccc=+0_0_0_0_36}', "");
Expect(1, 1808, '\P{Ccc=+0_0_0_0_36}', "");
Expect(0, 1808, '\P{^Ccc=+0_0_0_0_36}', "");
Error('\p{Is_Canonical_Combining_Class=_ +03:=6}');
Error('\P{Is_Canonical_Combining_Class=_ +03:=6}');
Expect(1, 1809, '\p{Is_Canonical_Combining_Class=+0_0_0_0_0_36}', "");
Expect(0, 1809, '\p{^Is_Canonical_Combining_Class=+0_0_0_0_0_36}', "");
Expect(0, 1809, '\P{Is_Canonical_Combining_Class=+0_0_0_0_0_36}', "");
Expect(1, 1809, '\P{^Is_Canonical_Combining_Class=+0_0_0_0_0_36}', "");
Expect(0, 1808, '\p{Is_Canonical_Combining_Class=+0_0_0_0_0_36}', "");
Expect(1, 1808, '\p{^Is_Canonical_Combining_Class=+0_0_0_0_0_36}', "");
Expect(1, 1808, '\P{Is_Canonical_Combining_Class=+0_0_0_0_0_36}', "");
Expect(0, 1808, '\P{^Is_Canonical_Combining_Class=+0_0_0_0_0_36}', "");
Error('\p{Is_Ccc:	__+0:=0-0	0_0	036}');
Error('\P{Is_Ccc:	__+0:=0-0	0_0	036}');
Expect(1, 1809, '\p{Is_Ccc=+000000036}', "");
Expect(0, 1809, '\p{^Is_Ccc=+000000036}', "");
Expect(0, 1809, '\P{Is_Ccc=+000000036}', "");
Expect(1, 1809, '\P{^Is_Ccc=+000000036}', "");
Expect(0, 1808, '\p{Is_Ccc=+000000036}', "");
Expect(1, 1808, '\p{^Is_Ccc=+000000036}', "");
Expect(1, 1808, '\P{Is_Ccc=+000000036}', "");
Expect(0, 1808, '\P{^Is_Ccc=+000000036}', "");
Error('\p{Canonical_Combining_Class=	_34:=}');
Error('\P{Canonical_Combining_Class=	_34:=}');
Expect(1, 1618, '\p{Canonical_Combining_Class: +0034}', "");
Expect(0, 1618, '\p{^Canonical_Combining_Class: +0034}', "");
Expect(0, 1618, '\P{Canonical_Combining_Class: +0034}', "");
Expect(1, 1618, '\P{^Canonical_Combining_Class: +0034}', "");
Expect(0, 1617, '\p{Canonical_Combining_Class: +0034}', "");
Expect(1, 1617, '\p{^Canonical_Combining_Class: +0034}', "");
Expect(1, 1617, '\P{Canonical_Combining_Class: +0034}', "");
Expect(0, 1617, '\P{^Canonical_Combining_Class: +0034}', "");
Error('\p{Ccc=/a/ +000034}');
Error('\P{Ccc=/a/ +000034}');
Expect(1, 1618, '\p{Ccc=0_0_0_0_0_0_0_0_034}', "");
Expect(0, 1618, '\p{^Ccc=0_0_0_0_0_0_0_0_034}', "");
Expect(0, 1618, '\P{Ccc=0_0_0_0_0_0_0_0_034}', "");
Expect(1, 1618, '\P{^Ccc=0_0_0_0_0_0_0_0_034}', "");
Expect(0, 1617, '\p{Ccc=0_0_0_0_0_0_0_0_034}', "");
Expect(1, 1617, '\p{^Ccc=0_0_0_0_0_0_0_0_034}', "");
Expect(1, 1617, '\P{Ccc=0_0_0_0_0_0_0_0_034}', "");
Expect(0, 1617, '\P{^Ccc=0_0_0_0_0_0_0_0_034}', "");
Error('\p{Is_Canonical_Combining_Class=:=00034}');
Error('\P{Is_Canonical_Combining_Class=:=00034}');
Expect(1, 1618, '\p{Is_Canonical_Combining_Class=00_03_4}', "");
Expect(0, 1618, '\p{^Is_Canonical_Combining_Class=00_03_4}', "");
Expect(0, 1618, '\P{Is_Canonical_Combining_Class=00_03_4}', "");
Expect(1, 1618, '\P{^Is_Canonical_Combining_Class=00_03_4}', "");
Expect(0, 1617, '\p{Is_Canonical_Combining_Class=00_03_4}', "");
Expect(1, 1617, '\p{^Is_Canonical_Combining_Class=00_03_4}', "");
Expect(1, 1617, '\P{Is_Canonical_Combining_Class=00_03_4}', "");
Expect(0, 1617, '\P{^Is_Canonical_Combining_Class=00_03_4}', "");
Error('\p{Is_Ccc=/a/_00034}');
Error('\P{Is_Ccc=/a/_00034}');
Expect(1, 1618, '\p{Is_Ccc=03_4}', "");
Expect(0, 1618, '\p{^Is_Ccc=03_4}', "");
Expect(0, 1618, '\P{Is_Ccc=03_4}', "");
Expect(1, 1618, '\P{^Is_Ccc=03_4}', "");
Expect(0, 1617, '\p{Is_Ccc=03_4}', "");
Expect(1, 1617, '\p{^Is_Ccc=03_4}', "");
Expect(1, 1617, '\P{Is_Ccc=03_4}', "");
Expect(0, 1617, '\P{^Is_Ccc=03_4}', "");
Error('\p{Canonical_Combining_Class=:=-	00132}');
Error('\P{Canonical_Combining_Class=:=-	00132}');
Expect(1, 3956, '\p{Canonical_Combining_Class=0000000132}', "");
Expect(0, 3956, '\p{^Canonical_Combining_Class=0000000132}', "");
Expect(0, 3956, '\P{Canonical_Combining_Class=0000000132}', "");
Expect(1, 3956, '\P{^Canonical_Combining_Class=0000000132}', "");
Expect(0, 3955, '\p{Canonical_Combining_Class=0000000132}', "");
Expect(1, 3955, '\p{^Canonical_Combining_Class=0000000132}', "");
Expect(1, 3955, '\P{Canonical_Combining_Class=0000000132}', "");
Expect(0, 3955, '\P{^Canonical_Combining_Class=0000000132}', "");
Error('\p{Ccc=:= 000001 32}');
Error('\P{Ccc=:= 000001 32}');
Expect(1, 3956, '\p{Ccc=000000132}', "");
Expect(0, 3956, '\p{^Ccc=000000132}', "");
Expect(0, 3956, '\P{Ccc=000000132}', "");
Expect(1, 3956, '\P{^Ccc=000000132}', "");
Expect(0, 3955, '\p{Ccc=000000132}', "");
Expect(1, 3955, '\p{^Ccc=000000132}', "");
Expect(1, 3955, '\P{Ccc=000000132}', "");
Expect(0, 3955, '\P{^Ccc=000000132}', "");
Error('\p{Is_Canonical_Combining_Class=_	+132/a/}');
Error('\P{Is_Canonical_Combining_Class=_	+132/a/}');
Expect(1, 3956, '\p{Is_Canonical_Combining_Class=000000132}', "");
Expect(0, 3956, '\p{^Is_Canonical_Combining_Class=000000132}', "");
Expect(0, 3956, '\P{Is_Canonical_Combining_Class=000000132}', "");
Expect(1, 3956, '\P{^Is_Canonical_Combining_Class=000000132}', "");
Expect(0, 3955, '\p{Is_Canonical_Combining_Class=000000132}', "");
Expect(1, 3955, '\p{^Is_Canonical_Combining_Class=000000132}', "");
Expect(1, 3955, '\P{Is_Canonical_Combining_Class=000000132}', "");
Expect(0, 3955, '\P{^Is_Canonical_Combining_Class=000000132}', "");
Error('\p{Is_Ccc=:=0000-0013 2}');
Error('\P{Is_Ccc=:=0000-0013 2}');
Expect(1, 3956, '\p{Is_Ccc=0_0_0_0_0_0_0_1_32}', "");
Expect(0, 3956, '\p{^Is_Ccc=0_0_0_0_0_0_0_1_32}', "");
Expect(0, 3956, '\P{Is_Ccc=0_0_0_0_0_0_0_1_32}', "");
Expect(1, 3956, '\P{^Is_Ccc=0_0_0_0_0_0_0_1_32}', "");
Expect(0, 3955, '\p{Is_Ccc=0_0_0_0_0_0_0_1_32}', "");
Expect(1, 3955, '\p{^Is_Ccc=0_0_0_0_0_0_0_1_32}', "");
Expect(1, 3955, '\P{Is_Ccc=0_0_0_0_0_0_0_1_32}', "");
Expect(0, 3955, '\P{^Is_Ccc=0_0_0_0_0_0_0_1_32}', "");
Error('\p{Bidi_Class:   -/a/segmentSeparator}');
Error('\P{Bidi_Class:   -/a/segmentSeparator}');
Expect(1, 9, '\p{Bidi_Class=segmentseparator}', "");
Expect(0, 9, '\p{^Bidi_Class=segmentseparator}', "");
Expect(0, 9, '\P{Bidi_Class=segmentseparator}', "");
Expect(1, 9, '\P{^Bidi_Class=segmentseparator}', "");
Expect(0, 8, '\p{Bidi_Class=segmentseparator}', "");
Expect(1, 8, '\p{^Bidi_Class=segmentseparator}', "");
Expect(1, 8, '\P{Bidi_Class=segmentseparator}', "");
Expect(0, 8, '\P{^Bidi_Class=segmentseparator}', "");
Expect(1, 9, '\p{Bidi_Class=  SEGMENT	separator}', "");
Expect(0, 9, '\p{^Bidi_Class=  SEGMENT	separator}', "");
Expect(0, 9, '\P{Bidi_Class=  SEGMENT	separator}', "");
Expect(1, 9, '\P{^Bidi_Class=  SEGMENT	separator}', "");
Expect(0, 8, '\p{Bidi_Class=  SEGMENT	separator}', "");
Expect(1, 8, '\p{^Bidi_Class=  SEGMENT	separator}', "");
Expect(1, 8, '\P{Bidi_Class=  SEGMENT	separator}', "");
Expect(0, 8, '\P{^Bidi_Class=  SEGMENT	separator}', "");
Error('\p{Bc=-/a/S}');
Error('\P{Bc=-/a/S}');
Expect(1, 9, '\p{Bc:	s}', "");
Expect(0, 9, '\p{^Bc:	s}', "");
Expect(0, 9, '\P{Bc:	s}', "");
Expect(1, 9, '\P{^Bc:	s}', "");
Expect(0, 8, '\p{Bc:	s}', "");
Expect(1, 8, '\p{^Bc:	s}', "");
Expect(1, 8, '\P{Bc:	s}', "");
Expect(0, 8, '\P{^Bc:	s}', "");
Expect(1, 9, '\p{Bc: _-s}', "");
Expect(0, 9, '\p{^Bc: _-s}', "");
Expect(0, 9, '\P{Bc: _-s}', "");
Expect(1, 9, '\P{^Bc: _-s}', "");
Expect(0, 8, '\p{Bc: _-s}', "");
Expect(1, 8, '\p{^Bc: _-s}', "");
Expect(1, 8, '\P{Bc: _-s}', "");
Expect(0, 8, '\P{^Bc: _-s}', "");
Error('\p{Is_Bidi_Class=:=SegmentSeparator}');
Error('\P{Is_Bidi_Class=:=SegmentSeparator}');
Expect(1, 9, '\p{Is_Bidi_Class=segmentseparator}', "");
Expect(0, 9, '\p{^Is_Bidi_Class=segmentseparator}', "");
Expect(0, 9, '\P{Is_Bidi_Class=segmentseparator}', "");
Expect(1, 9, '\P{^Is_Bidi_Class=segmentseparator}', "");
Expect(0, 8, '\p{Is_Bidi_Class=segmentseparator}', "");
Expect(1, 8, '\p{^Is_Bidi_Class=segmentseparator}', "");
Expect(1, 8, '\P{Is_Bidi_Class=segmentseparator}', "");
Expect(0, 8, '\P{^Is_Bidi_Class=segmentseparator}', "");
Expect(1, 9, '\p{Is_Bidi_Class= Segment Separator}', "");
Expect(0, 9, '\p{^Is_Bidi_Class= Segment Separator}', "");
Expect(0, 9, '\P{Is_Bidi_Class= Segment Separator}', "");
Expect(1, 9, '\P{^Is_Bidi_Class= Segment Separator}', "");
Expect(0, 8, '\p{Is_Bidi_Class= Segment Separator}', "");
Expect(1, 8, '\p{^Is_Bidi_Class= Segment Separator}', "");
Expect(1, 8, '\P{Is_Bidi_Class= Segment Separator}', "");
Expect(0, 8, '\P{^Is_Bidi_Class= Segment Separator}', "");
Error('\p{Is_Bc=/a/S}');
Error('\P{Is_Bc=/a/S}');
Expect(1, 9, '\p{Is_Bc:	s}', "");
Expect(0, 9, '\p{^Is_Bc:	s}', "");
Expect(0, 9, '\P{Is_Bc:	s}', "");
Expect(1, 9, '\P{^Is_Bc:	s}', "");
Expect(0, 8, '\p{Is_Bc:	s}', "");
Expect(1, 8, '\p{^Is_Bc:	s}', "");
Expect(1, 8, '\P{Is_Bc:	s}', "");
Expect(0, 8, '\P{^Is_Bc:	s}', "");
Expect(1, 9, '\p{Is_Bc=	S}', "");
Expect(0, 9, '\p{^Is_Bc=	S}', "");
Expect(0, 9, '\P{Is_Bc=	S}', "");
Expect(1, 9, '\P{^Is_Bc=	S}', "");
Expect(0, 8, '\p{Is_Bc=	S}', "");
Expect(1, 8, '\p{^Is_Bc=	S}', "");
Expect(1, 8, '\P{Is_Bc=	S}', "");
Expect(0, 8, '\P{^Is_Bc=	S}', "");
Error('\p{Bidi_Class=	/a/Right_To-left override}');
Error('\P{Bidi_Class=	/a/Right_To-left override}');
Expect(1, 8238, '\p{Bidi_Class=righttoleftoverride}', "");
Expect(0, 8238, '\p{^Bidi_Class=righttoleftoverride}', "");
Expect(0, 8238, '\P{Bidi_Class=righttoleftoverride}', "");
Expect(1, 8238, '\P{^Bidi_Class=righttoleftoverride}', "");
Expect(0, 8237, '\p{Bidi_Class=righttoleftoverride}', "");
Expect(1, 8237, '\p{^Bidi_Class=righttoleftoverride}', "");
Expect(1, 8237, '\P{Bidi_Class=righttoleftoverride}', "");
Expect(0, 8237, '\P{^Bidi_Class=righttoleftoverride}', "");
Expect(1, 8238, '\p{Bidi_Class=RightTo_Left_Override}', "");
Expect(0, 8238, '\p{^Bidi_Class=RightTo_Left_Override}', "");
Expect(0, 8238, '\P{Bidi_Class=RightTo_Left_Override}', "");
Expect(1, 8238, '\P{^Bidi_Class=RightTo_Left_Override}', "");
Expect(0, 8237, '\p{Bidi_Class=RightTo_Left_Override}', "");
Expect(1, 8237, '\p{^Bidi_Class=RightTo_Left_Override}', "");
Expect(1, 8237, '\P{Bidi_Class=RightTo_Left_Override}', "");
Expect(0, 8237, '\P{^Bidi_Class=RightTo_Left_Override}', "");
Error('\p{Bc=_:=RLO}');
Error('\P{Bc=_:=RLO}');
Expect(1, 8238, '\p{Bc:	rlo}', "");
Expect(0, 8238, '\p{^Bc:	rlo}', "");
Expect(0, 8238, '\P{Bc:	rlo}', "");
Expect(1, 8238, '\P{^Bc:	rlo}', "");
Expect(0, 8237, '\p{Bc:	rlo}', "");
Expect(1, 8237, '\p{^Bc:	rlo}', "");
Expect(1, 8237, '\P{Bc:	rlo}', "");
Expect(0, 8237, '\P{^Bc:	rlo}', "");
Expect(1, 8238, '\p{Bc=	-RLO}', "");
Expect(0, 8238, '\p{^Bc=	-RLO}', "");
Expect(0, 8238, '\P{Bc=	-RLO}', "");
Expect(1, 8238, '\P{^Bc=	-RLO}', "");
Expect(0, 8237, '\p{Bc=	-RLO}', "");
Expect(1, 8237, '\p{^Bc=	-RLO}', "");
Expect(1, 8237, '\P{Bc=	-RLO}', "");
Expect(0, 8237, '\P{^Bc=	-RLO}', "");
Error('\p{Is_Bidi_Class=-	Right	To Left_OVERRIDE:=}');
Error('\P{Is_Bidi_Class=-	Right	To Left_OVERRIDE:=}');
Expect(1, 8238, '\p{Is_Bidi_Class=righttoleftoverride}', "");
Expect(0, 8238, '\p{^Is_Bidi_Class=righttoleftoverride}', "");
Expect(0, 8238, '\P{Is_Bidi_Class=righttoleftoverride}', "");
Expect(1, 8238, '\P{^Is_Bidi_Class=righttoleftoverride}', "");
Expect(0, 8237, '\p{Is_Bidi_Class=righttoleftoverride}', "");
Expect(1, 8237, '\p{^Is_Bidi_Class=righttoleftoverride}', "");
Expect(1, 8237, '\P{Is_Bidi_Class=righttoleftoverride}', "");
Expect(0, 8237, '\P{^Is_Bidi_Class=righttoleftoverride}', "");
Expect(1, 8238, '\p{Is_Bidi_Class= 	RIGHT	to-leftOverride}', "");
Expect(0, 8238, '\p{^Is_Bidi_Class= 	RIGHT	to-leftOverride}', "");
Expect(0, 8238, '\P{Is_Bidi_Class= 	RIGHT	to-leftOverride}', "");
Expect(1, 8238, '\P{^Is_Bidi_Class= 	RIGHT	to-leftOverride}', "");
Expect(0, 8237, '\p{Is_Bidi_Class= 	RIGHT	to-leftOverride}', "");
Expect(1, 8237, '\p{^Is_Bidi_Class= 	RIGHT	to-leftOverride}', "");
Expect(1, 8237, '\P{Is_Bidi_Class= 	RIGHT	to-leftOverride}', "");
Expect(0, 8237, '\P{^Is_Bidi_Class= 	RIGHT	to-leftOverride}', "");
Error('\p{Is_Bc=:=RLO}');
Error('\P{Is_Bc=:=RLO}');
Expect(1, 8238, '\p{Is_Bc=rlo}', "");
Expect(0, 8238, '\p{^Is_Bc=rlo}', "");
Expect(0, 8238, '\P{Is_Bc=rlo}', "");
Expect(1, 8238, '\P{^Is_Bc=rlo}', "");
Expect(0, 8237, '\p{Is_Bc=rlo}', "");
Expect(1, 8237, '\p{^Is_Bc=rlo}', "");
Expect(1, 8237, '\P{Is_Bc=rlo}', "");
Expect(0, 8237, '\P{^Is_Bc=rlo}', "");
Expect(1, 8238, '\p{Is_Bc:-rlo}', "");
Expect(0, 8238, '\p{^Is_Bc:-rlo}', "");
Expect(0, 8238, '\P{Is_Bc:-rlo}', "");
Expect(1, 8238, '\P{^Is_Bc:-rlo}', "");
Expect(0, 8237, '\p{Is_Bc:-rlo}', "");
Expect(1, 8237, '\p{^Is_Bc:-rlo}', "");
Expect(1, 8237, '\P{Is_Bc:-rlo}', "");
Expect(0, 8237, '\P{^Is_Bc:-rlo}', "");
Error('\p{Bidi_Class=/a/	Left_ToRight-OVERRIDE}');
Error('\P{Bidi_Class=/a/	Left_ToRight-OVERRIDE}');
Expect(1, 8237, '\p{Bidi_Class=lefttorightoverride}', "");
Expect(0, 8237, '\p{^Bidi_Class=lefttorightoverride}', "");
Expect(0, 8237, '\P{Bidi_Class=lefttorightoverride}', "");
Expect(1, 8237, '\P{^Bidi_Class=lefttorightoverride}', "");
Expect(0, 8236, '\p{Bidi_Class=lefttorightoverride}', "");
Expect(1, 8236, '\p{^Bidi_Class=lefttorightoverride}', "");
Expect(1, 8236, '\P{Bidi_Class=lefttorightoverride}', "");
Expect(0, 8236, '\P{^Bidi_Class=lefttorightoverride}', "");
Expect(1, 8237, '\p{Bidi_Class=_LEFT	to	right-override}', "");
Expect(0, 8237, '\p{^Bidi_Class=_LEFT	to	right-override}', "");
Expect(0, 8237, '\P{Bidi_Class=_LEFT	to	right-override}', "");
Expect(1, 8237, '\P{^Bidi_Class=_LEFT	to	right-override}', "");
Expect(0, 8236, '\p{Bidi_Class=_LEFT	to	right-override}', "");
Expect(1, 8236, '\p{^Bidi_Class=_LEFT	to	right-override}', "");
Expect(1, 8236, '\P{Bidi_Class=_LEFT	to	right-override}', "");
Expect(0, 8236, '\P{^Bidi_Class=_LEFT	to	right-override}', "");
Error('\p{Bc=/a/	LRO}');
Error('\P{Bc=/a/	LRO}');
Expect(1, 8237, '\p{Bc=lro}', "");
Expect(0, 8237, '\p{^Bc=lro}', "");
Expect(0, 8237, '\P{Bc=lro}', "");
Expect(1, 8237, '\P{^Bc=lro}', "");
Expect(0, 8236, '\p{Bc=lro}', "");
Expect(1, 8236, '\p{^Bc=lro}', "");
Expect(1, 8236, '\P{Bc=lro}', "");
Expect(0, 8236, '\P{^Bc=lro}', "");
Expect(1, 8237, '\p{Bc=		LRO}', "");
Expect(0, 8237, '\p{^Bc=		LRO}', "");
Expect(0, 8237, '\P{Bc=		LRO}', "");
Expect(1, 8237, '\P{^Bc=		LRO}', "");
Expect(0, 8236, '\p{Bc=		LRO}', "");
Expect(1, 8236, '\p{^Bc=		LRO}', "");
Expect(1, 8236, '\P{Bc=		LRO}', "");
Expect(0, 8236, '\P{^Bc=		LRO}', "");
Error('\p{Is_Bidi_Class=/a/Leftto	RightOverride}');
Error('\P{Is_Bidi_Class=/a/Leftto	RightOverride}');
Expect(1, 8237, '\p{Is_Bidi_Class=lefttorightoverride}', "");
Expect(0, 8237, '\p{^Is_Bidi_Class=lefttorightoverride}', "");
Expect(0, 8237, '\P{Is_Bidi_Class=lefttorightoverride}', "");
Expect(1, 8237, '\P{^Is_Bidi_Class=lefttorightoverride}', "");
Expect(0, 8236, '\p{Is_Bidi_Class=lefttorightoverride}', "");
Expect(1, 8236, '\p{^Is_Bidi_Class=lefttorightoverride}', "");
Expect(1, 8236, '\P{Is_Bidi_Class=lefttorightoverride}', "");
Expect(0, 8236, '\P{^Is_Bidi_Class=lefttorightoverride}', "");
Expect(1, 8237, '\p{Is_Bidi_Class=__Left	to_RIGHT_Override}', "");
Expect(0, 8237, '\p{^Is_Bidi_Class=__Left	to_RIGHT_Override}', "");
Expect(0, 8237, '\P{Is_Bidi_Class=__Left	to_RIGHT_Override}', "");
Expect(1, 8237, '\P{^Is_Bidi_Class=__Left	to_RIGHT_Override}', "");
Expect(0, 8236, '\p{Is_Bidi_Class=__Left	to_RIGHT_Override}', "");
Expect(1, 8236, '\p{^Is_Bidi_Class=__Left	to_RIGHT_Override}', "");
Expect(1, 8236, '\P{Is_Bidi_Class=__Left	to_RIGHT_Override}', "");
Expect(0, 8236, '\P{^Is_Bidi_Class=__Left	to_RIGHT_Override}', "");
Error('\p{Is_Bc=:=	_LRO}');
Error('\P{Is_Bc=:=	_LRO}');
Expect(1, 8237, '\p{Is_Bc=lro}', "");
Expect(0, 8237, '\p{^Is_Bc=lro}', "");
Expect(0, 8237, '\P{Is_Bc=lro}', "");
Expect(1, 8237, '\P{^Is_Bc=lro}', "");
Expect(0, 8236, '\p{Is_Bc=lro}', "");
Expect(1, 8236, '\p{^Is_Bc=lro}', "");
Expect(1, 8236, '\P{Is_Bc=lro}', "");
Expect(0, 8236, '\P{^Is_Bc=lro}', "");
Expect(1, 8237, '\p{Is_Bc=--LRO}', "");
Expect(0, 8237, '\p{^Is_Bc=--LRO}', "");
Expect(0, 8237, '\P{Is_Bc=--LRO}', "");
Expect(1, 8237, '\P{^Is_Bc=--LRO}', "");
Expect(0, 8236, '\p{Is_Bc=--LRO}', "");
Expect(1, 8236, '\p{^Is_Bc=--LRO}', "");
Expect(1, 8236, '\P{Is_Bc=--LRO}', "");
Expect(0, 8236, '\P{^Is_Bc=--LRO}', "");
Error('\p{Bidi_Class= -left	to:=right}');
Error('\P{Bidi_Class= -left	to:=right}');
Expect(1, 90, '\p{Bidi_Class=lefttoright}', "");
Expect(0, 90, '\p{^Bidi_Class=lefttoright}', "");
Expect(0, 90, '\P{Bidi_Class=lefttoright}', "");
Expect(1, 90, '\P{^Bidi_Class=lefttoright}', "");
Expect(0, 64, '\p{Bidi_Class=lefttoright}', "");
Expect(1, 64, '\p{^Bidi_Class=lefttoright}', "");
Expect(1, 64, '\P{Bidi_Class=lefttoright}', "");
Expect(0, 64, '\P{^Bidi_Class=lefttoright}', "");
Expect(1, 90, '\p{Bidi_Class=	 LeftTO Right}', "");
Expect(0, 90, '\p{^Bidi_Class=	 LeftTO Right}', "");
Expect(0, 90, '\P{Bidi_Class=	 LeftTO Right}', "");
Expect(1, 90, '\P{^Bidi_Class=	 LeftTO Right}', "");
Expect(0, 64, '\p{Bidi_Class=	 LeftTO Right}', "");
Expect(1, 64, '\p{^Bidi_Class=	 LeftTO Right}', "");
Expect(1, 64, '\P{Bidi_Class=	 LeftTO Right}', "");
Expect(0, 64, '\P{^Bidi_Class=	 LeftTO Right}', "");
Error('\p{Bc=-/a/L}');
Error('\P{Bc=-/a/L}');
Expect(1, 90, '\p{Bc=l}', "");
Expect(0, 90, '\p{^Bc=l}', "");
Expect(0, 90, '\P{Bc=l}', "");
Expect(1, 90, '\P{^Bc=l}', "");
Expect(0, 64, '\p{Bc=l}', "");
Expect(1, 64, '\p{^Bc=l}', "");
Expect(1, 64, '\P{Bc=l}', "");
Expect(0, 64, '\P{^Bc=l}', "");
Expect(1, 90, '\p{Bc=-	l}', "");
Expect(0, 90, '\p{^Bc=-	l}', "");
Expect(0, 90, '\P{Bc=-	l}', "");
Expect(1, 90, '\P{^Bc=-	l}', "");
Expect(0, 64, '\p{Bc=-	l}', "");
Expect(1, 64, '\p{^Bc=-	l}', "");
Expect(1, 64, '\P{Bc=-	l}', "");
Expect(0, 64, '\P{^Bc=-	l}', "");
Error('\p{Is_Bidi_Class= Left_To_RIGHT:=}');
Error('\P{Is_Bidi_Class= Left_To_RIGHT:=}');
Expect(1, 90, '\p{Is_Bidi_Class=lefttoright}', "");
Expect(0, 90, '\p{^Is_Bidi_Class=lefttoright}', "");
Expect(0, 90, '\P{Is_Bidi_Class=lefttoright}', "");
Expect(1, 90, '\P{^Is_Bidi_Class=lefttoright}', "");
Expect(0, 64, '\p{Is_Bidi_Class=lefttoright}', "");
Expect(1, 64, '\p{^Is_Bidi_Class=lefttoright}', "");
Expect(1, 64, '\P{Is_Bidi_Class=lefttoright}', "");
Expect(0, 64, '\P{^Is_Bidi_Class=lefttoright}', "");
Expect(1, 90, '\p{Is_Bidi_Class=	Left-To Right}', "");
Expect(0, 90, '\p{^Is_Bidi_Class=	Left-To Right}', "");
Expect(0, 90, '\P{Is_Bidi_Class=	Left-To Right}', "");
Expect(1, 90, '\P{^Is_Bidi_Class=	Left-To Right}', "");
Expect(0, 64, '\p{Is_Bidi_Class=	Left-To Right}', "");
Expect(1, 64, '\p{^Is_Bidi_Class=	Left-To Right}', "");
Expect(1, 64, '\P{Is_Bidi_Class=	Left-To Right}', "");
Expect(0, 64, '\P{^Is_Bidi_Class=	Left-To Right}', "");
Error('\p{Is_Bc=/a/ L}');
Error('\P{Is_Bc=/a/ L}');
Expect(1, 90, '\p{Is_Bc=l}', "");
Expect(0, 90, '\p{^Is_Bc=l}', "");
Expect(0, 90, '\P{Is_Bc=l}', "");
Expect(1, 90, '\P{^Is_Bc=l}', "");
Expect(0, 64, '\p{Is_Bc=l}', "");
Expect(1, 64, '\p{^Is_Bc=l}', "");
Expect(1, 64, '\P{Is_Bc=l}', "");
Expect(0, 64, '\P{^Is_Bc=l}', "");
Expect(1, 90, '\p{Is_Bc= 	l}', "");
Expect(0, 90, '\p{^Is_Bc= 	l}', "");
Expect(0, 90, '\P{Is_Bc= 	l}', "");
Expect(1, 90, '\P{^Is_Bc= 	l}', "");
Expect(0, 64, '\p{Is_Bc= 	l}', "");
Expect(1, 64, '\p{^Is_Bc= 	l}', "");
Expect(1, 64, '\P{Is_Bc= 	l}', "");
Expect(0, 64, '\P{^Is_Bc= 	l}', "");
Error('\p{Bidi_Class=	right_TOLeftembedding/a/}');
Error('\P{Bidi_Class=	right_TOLeftembedding/a/}');
Expect(1, 8235, '\p{Bidi_Class=righttoleftembedding}', "");
Expect(0, 8235, '\p{^Bidi_Class=righttoleftembedding}', "");
Expect(0, 8235, '\P{Bidi_Class=righttoleftembedding}', "");
Expect(1, 8235, '\P{^Bidi_Class=righttoleftembedding}', "");
Expect(0, 8234, '\p{Bidi_Class=righttoleftembedding}', "");
Expect(1, 8234, '\p{^Bidi_Class=righttoleftembedding}', "");
Expect(1, 8234, '\P{Bidi_Class=righttoleftembedding}', "");
Expect(0, 8234, '\P{^Bidi_Class=righttoleftembedding}', "");
Expect(1, 8235, '\p{Bidi_Class=_-Right To	LeftEMBEDDING}', "");
Expect(0, 8235, '\p{^Bidi_Class=_-Right To	LeftEMBEDDING}', "");
Expect(0, 8235, '\P{Bidi_Class=_-Right To	LeftEMBEDDING}', "");
Expect(1, 8235, '\P{^Bidi_Class=_-Right To	LeftEMBEDDING}', "");
Expect(0, 8234, '\p{Bidi_Class=_-Right To	LeftEMBEDDING}', "");
Expect(1, 8234, '\p{^Bidi_Class=_-Right To	LeftEMBEDDING}', "");
Expect(1, 8234, '\P{Bidi_Class=_-Right To	LeftEMBEDDING}', "");
Expect(0, 8234, '\P{^Bidi_Class=_-Right To	LeftEMBEDDING}', "");
Error('\p{Bc=/a/--RLE}');
Error('\P{Bc=/a/--RLE}');
Expect(1, 8235, '\p{Bc=rle}', "");
Expect(0, 8235, '\p{^Bc=rle}', "");
Expect(0, 8235, '\P{Bc=rle}', "");
Expect(1, 8235, '\P{^Bc=rle}', "");
Expect(0, 8234, '\p{Bc=rle}', "");
Expect(1, 8234, '\p{^Bc=rle}', "");
Expect(1, 8234, '\P{Bc=rle}', "");
Expect(0, 8234, '\P{^Bc=rle}', "");
Expect(1, 8235, '\p{Bc=-RLE}', "");
Expect(0, 8235, '\p{^Bc=-RLE}', "");
Expect(0, 8235, '\P{Bc=-RLE}', "");
Expect(1, 8235, '\P{^Bc=-RLE}', "");
Expect(0, 8234, '\p{Bc=-RLE}', "");
Expect(1, 8234, '\p{^Bc=-RLE}', "");
Expect(1, 8234, '\P{Bc=-RLE}', "");
Expect(0, 8234, '\P{^Bc=-RLE}', "");
Error('\p{Is_Bidi_Class=  Right/a/To LEFTembedding}');
Error('\P{Is_Bidi_Class=  Right/a/To LEFTembedding}');
Expect(1, 8235, '\p{Is_Bidi_Class=righttoleftembedding}', "");
Expect(0, 8235, '\p{^Is_Bidi_Class=righttoleftembedding}', "");
Expect(0, 8235, '\P{Is_Bidi_Class=righttoleftembedding}', "");
Expect(1, 8235, '\P{^Is_Bidi_Class=righttoleftembedding}', "");
Expect(0, 8234, '\p{Is_Bidi_Class=righttoleftembedding}', "");
Expect(1, 8234, '\p{^Is_Bidi_Class=righttoleftembedding}', "");
Expect(1, 8234, '\P{Is_Bidi_Class=righttoleftembedding}', "");
Expect(0, 8234, '\P{^Is_Bidi_Class=righttoleftembedding}', "");
Expect(1, 8235, '\p{Is_Bidi_Class:	-	Right-to LEFT-Embedding}', "");
Expect(0, 8235, '\p{^Is_Bidi_Class:	-	Right-to LEFT-Embedding}', "");
Expect(0, 8235, '\P{Is_Bidi_Class:	-	Right-to LEFT-Embedding}', "");
Expect(1, 8235, '\P{^Is_Bidi_Class:	-	Right-to LEFT-Embedding}', "");
Expect(0, 8234, '\p{Is_Bidi_Class:	-	Right-to LEFT-Embedding}', "");
Expect(1, 8234, '\p{^Is_Bidi_Class:	-	Right-to LEFT-Embedding}', "");
Expect(1, 8234, '\P{Is_Bidi_Class:	-	Right-to LEFT-Embedding}', "");
Expect(0, 8234, '\P{^Is_Bidi_Class:	-	Right-to LEFT-Embedding}', "");
Error('\p{Is_Bc=_/a/RLE}');
Error('\P{Is_Bc=_/a/RLE}');
Expect(1, 8235, '\p{Is_Bc:   rle}', "");
Expect(0, 8235, '\p{^Is_Bc:   rle}', "");
Expect(0, 8235, '\P{Is_Bc:   rle}', "");
Expect(1, 8235, '\P{^Is_Bc:   rle}', "");
Expect(0, 8234, '\p{Is_Bc:   rle}', "");
Expect(1, 8234, '\p{^Is_Bc:   rle}', "");
Expect(1, 8234, '\P{Is_Bc:   rle}', "");
Expect(0, 8234, '\P{^Is_Bc:   rle}', "");
Expect(1, 8235, '\p{Is_Bc=	RLE}', "");
Expect(0, 8235, '\p{^Is_Bc=	RLE}', "");
Expect(0, 8235, '\P{Is_Bc=	RLE}', "");
Expect(1, 8235, '\P{^Is_Bc=	RLE}', "");
Expect(0, 8234, '\p{Is_Bc=	RLE}', "");
Expect(1, 8234, '\p{^Is_Bc=	RLE}', "");
Expect(1, 8234, '\P{Is_Bc=	RLE}', "");
Expect(0, 8234, '\P{^Is_Bc=	RLE}', "");
Error('\p{Bidi_Class= 	Other:=Neutral}');
Error('\P{Bidi_Class= 	Other:=Neutral}');
Expect(1, 34, '\p{Bidi_Class=otherneutral}', "");
Expect(0, 34, '\p{^Bidi_Class=otherneutral}', "");
Expect(0, 34, '\P{Bidi_Class=otherneutral}', "");
Expect(1, 34, '\P{^Bidi_Class=otherneutral}', "");
Expect(0, 32, '\p{Bidi_Class=otherneutral}', "");
Expect(1, 32, '\p{^Bidi_Class=otherneutral}', "");
Expect(1, 32, '\P{Bidi_Class=otherneutral}', "");
Expect(0, 32, '\P{^Bidi_Class=otherneutral}', "");
Expect(1, 34, '\p{Bidi_Class=Other	neutral}', "");
Expect(0, 34, '\p{^Bidi_Class=Other	neutral}', "");
Expect(0, 34, '\P{Bidi_Class=Other	neutral}', "");
Expect(1, 34, '\P{^Bidi_Class=Other	neutral}', "");
Expect(0, 32, '\p{Bidi_Class=Other	neutral}', "");
Expect(1, 32, '\p{^Bidi_Class=Other	neutral}', "");
Expect(1, 32, '\P{Bidi_Class=Other	neutral}', "");
Expect(0, 32, '\P{^Bidi_Class=Other	neutral}', "");
Error('\p{Bc=_ ON/a/}');
Error('\P{Bc=_ ON/a/}');
Expect(1, 34, '\p{Bc=on}', "");
Expect(0, 34, '\p{^Bc=on}', "");
Expect(0, 34, '\P{Bc=on}', "");
Expect(1, 34, '\P{^Bc=on}', "");
Expect(0, 32, '\p{Bc=on}', "");
Expect(1, 32, '\p{^Bc=on}', "");
Expect(1, 32, '\P{Bc=on}', "");
Expect(0, 32, '\P{^Bc=on}', "");
Expect(1, 34, '\p{Bc=ON}', "");
Expect(0, 34, '\p{^Bc=ON}', "");
Expect(0, 34, '\P{Bc=ON}', "");
Expect(1, 34, '\P{^Bc=ON}', "");
Expect(0, 32, '\p{Bc=ON}', "");
Expect(1, 32, '\p{^Bc=ON}', "");
Expect(1, 32, '\P{Bc=ON}', "");
Expect(0, 32, '\P{^Bc=ON}', "");
Error('\p{Is_Bidi_Class:	OTHER	NEUTRAL:=}');
Error('\P{Is_Bidi_Class:	OTHER	NEUTRAL:=}');
Expect(1, 34, '\p{Is_Bidi_Class=otherneutral}', "");
Expect(0, 34, '\p{^Is_Bidi_Class=otherneutral}', "");
Expect(0, 34, '\P{Is_Bidi_Class=otherneutral}', "");
Expect(1, 34, '\P{^Is_Bidi_Class=otherneutral}', "");
Expect(0, 32, '\p{Is_Bidi_Class=otherneutral}', "");
Expect(1, 32, '\p{^Is_Bidi_Class=otherneutral}', "");
Expect(1, 32, '\P{Is_Bidi_Class=otherneutral}', "");
Expect(0, 32, '\P{^Is_Bidi_Class=otherneutral}', "");
Expect(1, 34, '\p{Is_Bidi_Class:    _other NEUTRAL}', "");
Expect(0, 34, '\p{^Is_Bidi_Class:    _other NEUTRAL}', "");
Expect(0, 34, '\P{Is_Bidi_Class:    _other NEUTRAL}', "");
Expect(1, 34, '\P{^Is_Bidi_Class:    _other NEUTRAL}', "");
Expect(0, 32, '\p{Is_Bidi_Class:    _other NEUTRAL}', "");
Expect(1, 32, '\p{^Is_Bidi_Class:    _other NEUTRAL}', "");
Expect(1, 32, '\P{Is_Bidi_Class:    _other NEUTRAL}', "");
Expect(0, 32, '\P{^Is_Bidi_Class:    _other NEUTRAL}', "");
Error('\p{Is_Bc=/a/-_on}');
Error('\P{Is_Bc=/a/-_on}');
Expect(1, 34, '\p{Is_Bc=on}', "");
Expect(0, 34, '\p{^Is_Bc=on}', "");
Expect(0, 34, '\P{Is_Bc=on}', "");
Expect(1, 34, '\P{^Is_Bc=on}', "");
Expect(0, 32, '\p{Is_Bc=on}', "");
Expect(1, 32, '\p{^Is_Bc=on}', "");
Expect(1, 32, '\P{Is_Bc=on}', "");
Expect(0, 32, '\P{^Is_Bc=on}', "");
Expect(1, 34, '\p{Is_Bc: -_ON}', "");
Expect(0, 34, '\p{^Is_Bc: -_ON}', "");
Expect(0, 34, '\P{Is_Bc: -_ON}', "");
Expect(1, 34, '\P{^Is_Bc: -_ON}', "");
Expect(0, 32, '\p{Is_Bc: -_ON}', "");
Expect(1, 32, '\p{^Is_Bc: -_ON}', "");
Expect(1, 32, '\P{Is_Bc: -_ON}', "");
Expect(0, 32, '\P{^Is_Bc: -_ON}', "");
Error('\p{Bidi_Class=_ Boundary neutral/a/}');
Error('\P{Bidi_Class=_ Boundary neutral/a/}');
Expect(1, 8, '\p{Bidi_Class=boundaryneutral}', "");
Expect(0, 8, '\p{^Bidi_Class=boundaryneutral}', "");
Expect(0, 8, '\P{Bidi_Class=boundaryneutral}', "");
Expect(1, 8, '\P{^Bidi_Class=boundaryneutral}', "");
Expect(0, 13, '\p{Bidi_Class=boundaryneutral}', "");
Expect(1, 13, '\p{^Bidi_Class=boundaryneutral}', "");
Expect(1, 13, '\P{Bidi_Class=boundaryneutral}', "");
Expect(0, 13, '\P{^Bidi_Class=boundaryneutral}', "");
Expect(1, 8, '\p{Bidi_Class:	-_boundary_NEUTRAL}', "");
Expect(0, 8, '\p{^Bidi_Class:	-_boundary_NEUTRAL}', "");
Expect(0, 8, '\P{Bidi_Class:	-_boundary_NEUTRAL}', "");
Expect(1, 8, '\P{^Bidi_Class:	-_boundary_NEUTRAL}', "");
Expect(0, 13, '\p{Bidi_Class:	-_boundary_NEUTRAL}', "");
Expect(1, 13, '\p{^Bidi_Class:	-_boundary_NEUTRAL}', "");
Expect(1, 13, '\P{Bidi_Class:	-_boundary_NEUTRAL}', "");
Expect(0, 13, '\P{^Bidi_Class:	-_boundary_NEUTRAL}', "");
Error('\p{Bc= BN:=}');
Error('\P{Bc= BN:=}');
Expect(1, 8, '\p{Bc=bn}', "");
Expect(0, 8, '\p{^Bc=bn}', "");
Expect(0, 8, '\P{Bc=bn}', "");
Expect(1, 8, '\P{^Bc=bn}', "");
Expect(0, 13, '\p{Bc=bn}', "");
Expect(1, 13, '\p{^Bc=bn}', "");
Expect(1, 13, '\P{Bc=bn}', "");
Expect(0, 13, '\P{^Bc=bn}', "");
Expect(1, 8, '\p{Bc:_ BN}', "");
Expect(0, 8, '\p{^Bc:_ BN}', "");
Expect(0, 8, '\P{Bc:_ BN}', "");
Expect(1, 8, '\P{^Bc:_ BN}', "");
Expect(0, 13, '\p{Bc:_ BN}', "");
Expect(1, 13, '\p{^Bc:_ BN}', "");
Expect(1, 13, '\P{Bc:_ BN}', "");
Expect(0, 13, '\P{^Bc:_ BN}', "");
Error('\p{Is_Bidi_Class= Boundary_neutral/a/}');
Error('\P{Is_Bidi_Class= Boundary_neutral/a/}');
Expect(1, 8, '\p{Is_Bidi_Class=boundaryneutral}', "");
Expect(0, 8, '\p{^Is_Bidi_Class=boundaryneutral}', "");
Expect(0, 8, '\P{Is_Bidi_Class=boundaryneutral}', "");
Expect(1, 8, '\P{^Is_Bidi_Class=boundaryneutral}', "");
Expect(0, 13, '\p{Is_Bidi_Class=boundaryneutral}', "");
Expect(1, 13, '\p{^Is_Bidi_Class=boundaryneutral}', "");
Expect(1, 13, '\P{Is_Bidi_Class=boundaryneutral}', "");
Expect(0, 13, '\P{^Is_Bidi_Class=boundaryneutral}', "");
Expect(1, 8, '\p{Is_Bidi_Class=--BOUNDARY-neutral}', "");
Expect(0, 8, '\p{^Is_Bidi_Class=--BOUNDARY-neutral}', "");
Expect(0, 8, '\P{Is_Bidi_Class=--BOUNDARY-neutral}', "");
Expect(1, 8, '\P{^Is_Bidi_Class=--BOUNDARY-neutral}', "");
Expect(0, 13, '\p{Is_Bidi_Class=--BOUNDARY-neutral}', "");
Expect(1, 13, '\p{^Is_Bidi_Class=--BOUNDARY-neutral}', "");
Expect(1, 13, '\P{Is_Bidi_Class=--BOUNDARY-neutral}', "");
Expect(0, 13, '\P{^Is_Bidi_Class=--BOUNDARY-neutral}', "");
Error('\p{Is_Bc=-bn:=}');
Error('\P{Is_Bc=-bn:=}');
Expect(1, 8, '\p{Is_Bc: bn}', "");
Expect(0, 8, '\p{^Is_Bc: bn}', "");
Expect(0, 8, '\P{Is_Bc: bn}', "");
Expect(1, 8, '\P{^Is_Bc: bn}', "");
Expect(0, 13, '\p{Is_Bc: bn}', "");
Expect(1, 13, '\p{^Is_Bc: bn}', "");
Expect(1, 13, '\P{Is_Bc: bn}', "");
Expect(0, 13, '\P{^Is_Bc: bn}', "");
Expect(1, 8, '\p{Is_Bc=	 BN}', "");
Expect(0, 8, '\p{^Is_Bc=	 BN}', "");
Expect(0, 8, '\P{Is_Bc=	 BN}', "");
Expect(1, 8, '\P{^Is_Bc=	 BN}', "");
Expect(0, 13, '\p{Is_Bc=	 BN}', "");
Expect(1, 13, '\p{^Is_Bc=	 BN}', "");
Expect(1, 13, '\P{Is_Bc=	 BN}', "");
Expect(0, 13, '\P{^Is_Bc=	 BN}', "");
Error('\p{Bidi_Class=_	PopDIRECTIONAL	format:=}');
Error('\P{Bidi_Class=_	PopDIRECTIONAL	format:=}');
Expect(1, 8236, '\p{Bidi_Class=popdirectionalformat}', "");
Expect(0, 8236, '\p{^Bidi_Class=popdirectionalformat}', "");
Expect(0, 8236, '\P{Bidi_Class=popdirectionalformat}', "");
Expect(1, 8236, '\P{^Bidi_Class=popdirectionalformat}', "");
Expect(0, 8235, '\p{Bidi_Class=popdirectionalformat}', "");
Expect(1, 8235, '\p{^Bidi_Class=popdirectionalformat}', "");
Expect(1, 8235, '\P{Bidi_Class=popdirectionalformat}', "");
Expect(0, 8235, '\P{^Bidi_Class=popdirectionalformat}', "");
Expect(1, 8236, '\p{Bidi_Class=--popDirectional_Format}', "");
Expect(0, 8236, '\p{^Bidi_Class=--popDirectional_Format}', "");
Expect(0, 8236, '\P{Bidi_Class=--popDirectional_Format}', "");
Expect(1, 8236, '\P{^Bidi_Class=--popDirectional_Format}', "");
Expect(0, 8235, '\p{Bidi_Class=--popDirectional_Format}', "");
Expect(1, 8235, '\p{^Bidi_Class=--popDirectional_Format}', "");
Expect(1, 8235, '\P{Bidi_Class=--popDirectional_Format}', "");
Expect(0, 8235, '\P{^Bidi_Class=--popDirectional_Format}', "");
Error('\p{Bc=__pdf/a/}');
Error('\P{Bc=__pdf/a/}');
Expect(1, 8236, '\p{Bc=pdf}', "");
Expect(0, 8236, '\p{^Bc=pdf}', "");
Expect(0, 8236, '\P{Bc=pdf}', "");
Expect(1, 8236, '\P{^Bc=pdf}', "");
Expect(0, 8235, '\p{Bc=pdf}', "");
Expect(1, 8235, '\p{^Bc=pdf}', "");
Expect(1, 8235, '\P{Bc=pdf}', "");
Expect(0, 8235, '\P{^Bc=pdf}', "");
Expect(1, 8236, '\p{Bc=--PDF}', "");
Expect(0, 8236, '\p{^Bc=--PDF}', "");
Expect(0, 8236, '\P{Bc=--PDF}', "");
Expect(1, 8236, '\P{^Bc=--PDF}', "");
Expect(0, 8235, '\p{Bc=--PDF}', "");
Expect(1, 8235, '\p{^Bc=--PDF}', "");
Expect(1, 8235, '\P{Bc=--PDF}', "");
Expect(0, 8235, '\P{^Bc=--PDF}', "");
Error('\p{Is_Bidi_Class=-	Pop/a/directional Format}');
Error('\P{Is_Bidi_Class=-	Pop/a/directional Format}');
Expect(1, 8236, '\p{Is_Bidi_Class=popdirectionalformat}', "");
Expect(0, 8236, '\p{^Is_Bidi_Class=popdirectionalformat}', "");
Expect(0, 8236, '\P{Is_Bidi_Class=popdirectionalformat}', "");
Expect(1, 8236, '\P{^Is_Bidi_Class=popdirectionalformat}', "");
Expect(0, 8235, '\p{Is_Bidi_Class=popdirectionalformat}', "");
Expect(1, 8235, '\p{^Is_Bidi_Class=popdirectionalformat}', "");
Expect(1, 8235, '\P{Is_Bidi_Class=popdirectionalformat}', "");
Expect(0, 8235, '\P{^Is_Bidi_Class=popdirectionalformat}', "");
Expect(1, 8236, '\p{Is_Bidi_Class=	-Pop	Directional	format}', "");
Expect(0, 8236, '\p{^Is_Bidi_Class=	-Pop	Directional	format}', "");
Expect(0, 8236, '\P{Is_Bidi_Class=	-Pop	Directional	format}', "");
Expect(1, 8236, '\P{^Is_Bidi_Class=	-Pop	Directional	format}', "");
Expect(0, 8235, '\p{Is_Bidi_Class=	-Pop	Directional	format}', "");
Expect(1, 8235, '\p{^Is_Bidi_Class=	-Pop	Directional	format}', "");
Expect(1, 8235, '\P{Is_Bidi_Class=	-Pop	Directional	format}', "");
Expect(0, 8235, '\P{^Is_Bidi_Class=	-Pop	Directional	format}', "");
Error('\p{Is_Bc=/a/-pdf}');
Error('\P{Is_Bc=/a/-pdf}');
Expect(1, 8236, '\p{Is_Bc=pdf}', "");
Expect(0, 8236, '\p{^Is_Bc=pdf}', "");
Expect(0, 8236, '\P{Is_Bc=pdf}', "");
Expect(1, 8236, '\P{^Is_Bc=pdf}', "");
Expect(0, 8235, '\p{Is_Bc=pdf}', "");
Expect(1, 8235, '\p{^Is_Bc=pdf}', "");
Expect(1, 8235, '\P{Is_Bc=pdf}', "");
Expect(0, 8235, '\P{^Is_Bc=pdf}', "");
Expect(1, 8236, '\p{Is_Bc= _PDF}', "");
Expect(0, 8236, '\p{^Is_Bc= _PDF}', "");
Expect(0, 8236, '\P{Is_Bc= _PDF}', "");
Expect(1, 8236, '\P{^Is_Bc= _PDF}', "");
Expect(0, 8235, '\p{Is_Bc= _PDF}', "");
Expect(1, 8235, '\p{^Is_Bc= _PDF}', "");
Expect(1, 8235, '\P{Is_Bc= _PDF}', "");
Expect(0, 8235, '\P{^Is_Bc= _PDF}', "");
Error('\p{Bidi_Class=  Left TO/a/RIGHT embedding}');
Error('\P{Bidi_Class=  Left TO/a/RIGHT embedding}');
Expect(1, 8234, '\p{Bidi_Class=lefttorightembedding}', "");
Expect(0, 8234, '\p{^Bidi_Class=lefttorightembedding}', "");
Expect(0, 8234, '\P{Bidi_Class=lefttorightembedding}', "");
Expect(1, 8234, '\P{^Bidi_Class=lefttorightembedding}', "");
Expect(0, 8233, '\p{Bidi_Class=lefttorightembedding}', "");
Expect(1, 8233, '\p{^Bidi_Class=lefttorightembedding}', "");
Expect(1, 8233, '\P{Bidi_Class=lefttorightembedding}', "");
Expect(0, 8233, '\P{^Bidi_Class=lefttorightembedding}', "");
Expect(1, 8234, '\p{Bidi_Class=	_Left_ToRIGHT-embedding}', "");
Expect(0, 8234, '\p{^Bidi_Class=	_Left_ToRIGHT-embedding}', "");
Expect(0, 8234, '\P{Bidi_Class=	_Left_ToRIGHT-embedding}', "");
Expect(1, 8234, '\P{^Bidi_Class=	_Left_ToRIGHT-embedding}', "");
Expect(0, 8233, '\p{Bidi_Class=	_Left_ToRIGHT-embedding}', "");
Expect(1, 8233, '\p{^Bidi_Class=	_Left_ToRIGHT-embedding}', "");
Expect(1, 8233, '\P{Bidi_Class=	_Left_ToRIGHT-embedding}', "");
Expect(0, 8233, '\P{^Bidi_Class=	_Left_ToRIGHT-embedding}', "");
Error('\p{Bc:	-/a/LRE}');
Error('\P{Bc:	-/a/LRE}');
Expect(1, 8234, '\p{Bc=lre}', "");
Expect(0, 8234, '\p{^Bc=lre}', "");
Expect(0, 8234, '\P{Bc=lre}', "");
Expect(1, 8234, '\P{^Bc=lre}', "");
Expect(0, 8233, '\p{Bc=lre}', "");
Expect(1, 8233, '\p{^Bc=lre}', "");
Expect(1, 8233, '\P{Bc=lre}', "");
Expect(0, 8233, '\P{^Bc=lre}', "");
Expect(1, 8234, '\p{Bc=--lre}', "");
Expect(0, 8234, '\p{^Bc=--lre}', "");
Expect(0, 8234, '\P{Bc=--lre}', "");
Expect(1, 8234, '\P{^Bc=--lre}', "");
Expect(0, 8233, '\p{Bc=--lre}', "");
Expect(1, 8233, '\p{^Bc=--lre}', "");
Expect(1, 8233, '\P{Bc=--lre}', "");
Expect(0, 8233, '\P{^Bc=--lre}', "");
Error('\p{Is_Bidi_Class:	-/a/Left To-RIGHTEMBEDDING}');
Error('\P{Is_Bidi_Class:	-/a/Left To-RIGHTEMBEDDING}');
Expect(1, 8234, '\p{Is_Bidi_Class=lefttorightembedding}', "");
Expect(0, 8234, '\p{^Is_Bidi_Class=lefttorightembedding}', "");
Expect(0, 8234, '\P{Is_Bidi_Class=lefttorightembedding}', "");
Expect(1, 8234, '\P{^Is_Bidi_Class=lefttorightembedding}', "");
Expect(0, 8233, '\p{Is_Bidi_Class=lefttorightembedding}', "");
Expect(1, 8233, '\p{^Is_Bidi_Class=lefttorightembedding}', "");
Expect(1, 8233, '\P{Is_Bidi_Class=lefttorightembedding}', "");
Expect(0, 8233, '\P{^Is_Bidi_Class=lefttorightembedding}', "");
Expect(1, 8234, '\p{Is_Bidi_Class:    	Left-ToRight-EMBEDDING}', "");
Expect(0, 8234, '\p{^Is_Bidi_Class:    	Left-ToRight-EMBEDDING}', "");
Expect(0, 8234, '\P{Is_Bidi_Class:    	Left-ToRight-EMBEDDING}', "");
Expect(1, 8234, '\P{^Is_Bidi_Class:    	Left-ToRight-EMBEDDING}', "");
Expect(0, 8233, '\p{Is_Bidi_Class:    	Left-ToRight-EMBEDDING}', "");
Expect(1, 8233, '\p{^Is_Bidi_Class:    	Left-ToRight-EMBEDDING}', "");
Expect(1, 8233, '\P{Is_Bidi_Class:    	Left-ToRight-EMBEDDING}', "");
Expect(0, 8233, '\P{^Is_Bidi_Class:    	Left-ToRight-EMBEDDING}', "");
Error('\p{Is_Bc=/a/LRE}');
Error('\P{Is_Bc=/a/LRE}');
Expect(1, 8234, '\p{Is_Bc=lre}', "");
Expect(0, 8234, '\p{^Is_Bc=lre}', "");
Expect(0, 8234, '\P{Is_Bc=lre}', "");
Expect(1, 8234, '\P{^Is_Bc=lre}', "");
Expect(0, 8233, '\p{Is_Bc=lre}', "");
Expect(1, 8233, '\p{^Is_Bc=lre}', "");
Expect(1, 8233, '\P{Is_Bc=lre}', "");
Expect(0, 8233, '\P{^Is_Bc=lre}', "");
Expect(1, 8234, '\p{Is_Bc=-LRE}', "");
Expect(0, 8234, '\p{^Is_Bc=-LRE}', "");
Expect(0, 8234, '\P{Is_Bc=-LRE}', "");
Expect(1, 8234, '\P{^Is_Bc=-LRE}', "");
Expect(0, 8233, '\p{Is_Bc=-LRE}', "");
Expect(1, 8233, '\p{^Is_Bc=-LRE}', "");
Expect(1, 8233, '\P{Is_Bc=-LRE}', "");
Expect(0, 8233, '\P{^Is_Bc=-LRE}', "");
Error('\p{Bidi_Class= -ARABIC:=Letter}');
Error('\P{Bidi_Class= -ARABIC:=Letter}');
Expect(1, 1541, '\p{Bidi_Class=arabicletter}', "");
Expect(0, 1541, '\p{^Bidi_Class=arabicletter}', "");
Expect(0, 1541, '\P{Bidi_Class=arabicletter}', "");
Expect(1, 1541, '\P{^Bidi_Class=arabicletter}', "");
Expect(0, 1539, '\p{Bidi_Class=arabicletter}', "");
Expect(1, 1539, '\p{^Bidi_Class=arabicletter}', "");
Expect(1, 1539, '\P{Bidi_Class=arabicletter}', "");
Expect(0, 1539, '\P{^Bidi_Class=arabicletter}', "");
Expect(1, 1541, '\p{Bidi_Class=	arabicLetter}', "");
Expect(0, 1541, '\p{^Bidi_Class=	arabicLetter}', "");
Expect(0, 1541, '\P{Bidi_Class=	arabicLetter}', "");
Expect(1, 1541, '\P{^Bidi_Class=	arabicLetter}', "");
Expect(0, 1539, '\p{Bidi_Class=	arabicLetter}', "");
Expect(1, 1539, '\p{^Bidi_Class=	arabicLetter}', "");
Expect(1, 1539, '\P{Bidi_Class=	arabicLetter}', "");
Expect(0, 1539, '\P{^Bidi_Class=	arabicLetter}', "");
Error('\p{Bc=	_AL/a/}');
Error('\P{Bc=	_AL/a/}');
Expect(1, 1541, '\p{Bc=al}', "");
Expect(0, 1541, '\p{^Bc=al}', "");
Expect(0, 1541, '\P{Bc=al}', "");
Expect(1, 1541, '\P{^Bc=al}', "");
Expect(0, 1539, '\p{Bc=al}', "");
Expect(1, 1539, '\p{^Bc=al}', "");
Expect(1, 1539, '\P{Bc=al}', "");
Expect(0, 1539, '\P{^Bc=al}', "");
Expect(1, 1541, '\p{Bc:	_	AL}', "");
Expect(0, 1541, '\p{^Bc:	_	AL}', "");
Expect(0, 1541, '\P{Bc:	_	AL}', "");
Expect(1, 1541, '\P{^Bc:	_	AL}', "");
Expect(0, 1539, '\p{Bc:	_	AL}', "");
Expect(1, 1539, '\p{^Bc:	_	AL}', "");
Expect(1, 1539, '\P{Bc:	_	AL}', "");
Expect(0, 1539, '\P{^Bc:	_	AL}', "");
Error('\p{Is_Bidi_Class=- ARABIC	Letter/a/}');
Error('\P{Is_Bidi_Class=- ARABIC	Letter/a/}');
Expect(1, 1541, '\p{Is_Bidi_Class=arabicletter}', "");
Expect(0, 1541, '\p{^Is_Bidi_Class=arabicletter}', "");
Expect(0, 1541, '\P{Is_Bidi_Class=arabicletter}', "");
Expect(1, 1541, '\P{^Is_Bidi_Class=arabicletter}', "");
Expect(0, 1539, '\p{Is_Bidi_Class=arabicletter}', "");
Expect(1, 1539, '\p{^Is_Bidi_Class=arabicletter}', "");
Expect(1, 1539, '\P{Is_Bidi_Class=arabicletter}', "");
Expect(0, 1539, '\P{^Is_Bidi_Class=arabicletter}', "");
Expect(1, 1541, '\p{Is_Bidi_Class=	arabic-Letter}', "");
Expect(0, 1541, '\p{^Is_Bidi_Class=	arabic-Letter}', "");
Expect(0, 1541, '\P{Is_Bidi_Class=	arabic-Letter}', "");
Expect(1, 1541, '\P{^Is_Bidi_Class=	arabic-Letter}', "");
Expect(0, 1539, '\p{Is_Bidi_Class=	arabic-Letter}', "");
Expect(1, 1539, '\p{^Is_Bidi_Class=	arabic-Letter}', "");
Expect(1, 1539, '\P{Is_Bidi_Class=	arabic-Letter}', "");
Expect(0, 1539, '\P{^Is_Bidi_Class=	arabic-Letter}', "");
Error('\p{Is_Bc=:= 	AL}');
Error('\P{Is_Bc=:= 	AL}');
Expect(1, 1541, '\p{Is_Bc=al}', "");
Expect(0, 1541, '\p{^Is_Bc=al}', "");
Expect(0, 1541, '\P{Is_Bc=al}', "");
Expect(1, 1541, '\P{^Is_Bc=al}', "");
Expect(0, 1539, '\p{Is_Bc=al}', "");
Expect(1, 1539, '\p{^Is_Bc=al}', "");
Expect(1, 1539, '\P{Is_Bc=al}', "");
Expect(0, 1539, '\P{^Is_Bc=al}', "");
Expect(1, 1541, '\p{Is_Bc=_AL}', "");
Expect(0, 1541, '\p{^Is_Bc=_AL}', "");
Expect(0, 1541, '\P{Is_Bc=_AL}', "");
Expect(1, 1541, '\P{^Is_Bc=_AL}', "");
Expect(0, 1539, '\p{Is_Bc=_AL}', "");
Expect(1, 1539, '\p{^Is_Bc=_AL}', "");
Expect(1, 1539, '\P{Is_Bc=_AL}', "");
Expect(0, 1539, '\P{^Is_Bc=_AL}', "");
Error('\p{Bidi_Class= 	COMMON_separator/a/}');
Error('\P{Bidi_Class= 	COMMON_separator/a/}');
Expect(1, 44, '\p{Bidi_Class=commonseparator}', "");
Expect(0, 44, '\p{^Bidi_Class=commonseparator}', "");
Expect(0, 44, '\P{Bidi_Class=commonseparator}', "");
Expect(1, 44, '\P{^Bidi_Class=commonseparator}', "");
Expect(0, 43, '\p{Bidi_Class=commonseparator}', "");
Expect(1, 43, '\p{^Bidi_Class=commonseparator}', "");
Expect(1, 43, '\P{Bidi_Class=commonseparator}', "");
Expect(0, 43, '\P{^Bidi_Class=commonseparator}', "");
Expect(1, 44, '\p{Bidi_Class=__COMMON-SEPARATOR}', "");
Expect(0, 44, '\p{^Bidi_Class=__COMMON-SEPARATOR}', "");
Expect(0, 44, '\P{Bidi_Class=__COMMON-SEPARATOR}', "");
Expect(1, 44, '\P{^Bidi_Class=__COMMON-SEPARATOR}', "");
Expect(0, 43, '\p{Bidi_Class=__COMMON-SEPARATOR}', "");
Expect(1, 43, '\p{^Bidi_Class=__COMMON-SEPARATOR}', "");
Expect(1, 43, '\P{Bidi_Class=__COMMON-SEPARATOR}', "");
Expect(0, 43, '\P{^Bidi_Class=__COMMON-SEPARATOR}', "");
Error('\p{Bc:-CS/a/}');
Error('\P{Bc:-CS/a/}');
Expect(1, 44, '\p{Bc=cs}', "");
Expect(0, 44, '\p{^Bc=cs}', "");
Expect(0, 44, '\P{Bc=cs}', "");
Expect(1, 44, '\P{^Bc=cs}', "");
Expect(0, 43, '\p{Bc=cs}', "");
Expect(1, 43, '\p{^Bc=cs}', "");
Expect(1, 43, '\P{Bc=cs}', "");
Expect(0, 43, '\P{^Bc=cs}', "");
Expect(1, 44, '\p{Bc=_CS}', "");
Expect(0, 44, '\p{^Bc=_CS}', "");
Expect(0, 44, '\P{Bc=_CS}', "");
Expect(1, 44, '\P{^Bc=_CS}', "");
Expect(0, 43, '\p{Bc=_CS}', "");
Expect(1, 43, '\p{^Bc=_CS}', "");
Expect(1, 43, '\P{Bc=_CS}', "");
Expect(0, 43, '\P{^Bc=_CS}', "");
Error('\p{Is_Bidi_Class=_Common:=separator}');
Error('\P{Is_Bidi_Class=_Common:=separator}');
Expect(1, 44, '\p{Is_Bidi_Class=commonseparator}', "");
Expect(0, 44, '\p{^Is_Bidi_Class=commonseparator}', "");
Expect(0, 44, '\P{Is_Bidi_Class=commonseparator}', "");
Expect(1, 44, '\P{^Is_Bidi_Class=commonseparator}', "");
Expect(0, 43, '\p{Is_Bidi_Class=commonseparator}', "");
Expect(1, 43, '\p{^Is_Bidi_Class=commonseparator}', "");
Expect(1, 43, '\P{Is_Bidi_Class=commonseparator}', "");
Expect(0, 43, '\P{^Is_Bidi_Class=commonseparator}', "");
Expect(1, 44, '\p{Is_Bidi_Class=_CommonSEPARATOR}', "");
Expect(0, 44, '\p{^Is_Bidi_Class=_CommonSEPARATOR}', "");
Expect(0, 44, '\P{Is_Bidi_Class=_CommonSEPARATOR}', "");
Expect(1, 44, '\P{^Is_Bidi_Class=_CommonSEPARATOR}', "");
Expect(0, 43, '\p{Is_Bidi_Class=_CommonSEPARATOR}', "");
Expect(1, 43, '\p{^Is_Bidi_Class=_CommonSEPARATOR}', "");
Expect(1, 43, '\P{Is_Bidi_Class=_CommonSEPARATOR}', "");
Expect(0, 43, '\P{^Is_Bidi_Class=_CommonSEPARATOR}', "");
Error('\p{Is_Bc=  cs:=}');
Error('\P{Is_Bc=  cs:=}');
Expect(1, 44, '\p{Is_Bc=cs}', "");
Expect(0, 44, '\p{^Is_Bc=cs}', "");
Expect(0, 44, '\P{Is_Bc=cs}', "");
Expect(1, 44, '\P{^Is_Bc=cs}', "");
Expect(0, 43, '\p{Is_Bc=cs}', "");
Expect(1, 43, '\p{^Is_Bc=cs}', "");
Expect(1, 43, '\P{Is_Bc=cs}', "");
Expect(0, 43, '\P{^Is_Bc=cs}', "");
Expect(1, 44, '\p{Is_Bc=--CS}', "");
Expect(0, 44, '\p{^Is_Bc=--CS}', "");
Expect(0, 44, '\P{Is_Bc=--CS}', "");
Expect(1, 44, '\P{^Is_Bc=--CS}', "");
Expect(0, 43, '\p{Is_Bc=--CS}', "");
Expect(1, 43, '\p{^Is_Bc=--CS}', "");
Expect(1, 43, '\P{Is_Bc=--CS}', "");
Expect(0, 43, '\P{^Is_Bc=--CS}', "");
Error('\p{Bidi_Class:		-WHITESpace/a/}');
Error('\P{Bidi_Class:		-WHITESpace/a/}');
Expect(1, 12, '\p{Bidi_Class=whitespace}', "");
Expect(0, 12, '\p{^Bidi_Class=whitespace}', "");
Expect(0, 12, '\P{Bidi_Class=whitespace}', "");
Expect(1, 12, '\P{^Bidi_Class=whitespace}', "");
Expect(0, 11, '\p{Bidi_Class=whitespace}', "");
Expect(1, 11, '\p{^Bidi_Class=whitespace}', "");
Expect(1, 11, '\P{Bidi_Class=whitespace}', "");
Expect(0, 11, '\P{^Bidi_Class=whitespace}', "");
Expect(1, 12, '\p{Bidi_Class=_-white Space}', "");
Expect(0, 12, '\p{^Bidi_Class=_-white Space}', "");
Expect(0, 12, '\P{Bidi_Class=_-white Space}', "");
Expect(1, 12, '\P{^Bidi_Class=_-white Space}', "");
Expect(0, 11, '\p{Bidi_Class=_-white Space}', "");
Expect(1, 11, '\p{^Bidi_Class=_-white Space}', "");
Expect(1, 11, '\P{Bidi_Class=_-white Space}', "");
Expect(0, 11, '\P{^Bidi_Class=_-white Space}', "");
Error('\p{Bc:-WS/a/}');
Error('\P{Bc:-WS/a/}');
Expect(1, 12, '\p{Bc: ws}', "");
Expect(0, 12, '\p{^Bc: ws}', "");
Expect(0, 12, '\P{Bc: ws}', "");
Expect(1, 12, '\P{^Bc: ws}', "");
Expect(0, 11, '\p{Bc: ws}', "");
Expect(1, 11, '\p{^Bc: ws}', "");
Expect(1, 11, '\P{Bc: ws}', "");
Expect(0, 11, '\P{^Bc: ws}', "");
Expect(1, 12, '\p{Bc=_ws}', "");
Expect(0, 12, '\p{^Bc=_ws}', "");
Expect(0, 12, '\P{Bc=_ws}', "");
Expect(1, 12, '\P{^Bc=_ws}', "");
Expect(0, 11, '\p{Bc=_ws}', "");
Expect(1, 11, '\p{^Bc=_ws}', "");
Expect(1, 11, '\P{Bc=_ws}', "");
Expect(0, 11, '\P{^Bc=_ws}', "");
Error('\p{Is_Bidi_Class=_/a/WHITESPACE}');
Error('\P{Is_Bidi_Class=_/a/WHITESPACE}');
Expect(1, 12, '\p{Is_Bidi_Class=whitespace}', "");
Expect(0, 12, '\p{^Is_Bidi_Class=whitespace}', "");
Expect(0, 12, '\P{Is_Bidi_Class=whitespace}', "");
Expect(1, 12, '\P{^Is_Bidi_Class=whitespace}', "");
Expect(0, 11, '\p{Is_Bidi_Class=whitespace}', "");
Expect(1, 11, '\p{^Is_Bidi_Class=whitespace}', "");
Expect(1, 11, '\P{Is_Bidi_Class=whitespace}', "");
Expect(0, 11, '\P{^Is_Bidi_Class=whitespace}', "");
Expect(1, 12, '\p{Is_Bidi_Class=_	WHITE-Space}', "");
Expect(0, 12, '\p{^Is_Bidi_Class=_	WHITE-Space}', "");
Expect(0, 12, '\P{Is_Bidi_Class=_	WHITE-Space}', "");
Expect(1, 12, '\P{^Is_Bidi_Class=_	WHITE-Space}', "");
Expect(0, 11, '\p{Is_Bidi_Class=_	WHITE-Space}', "");
Expect(1, 11, '\p{^Is_Bidi_Class=_	WHITE-Space}', "");
Expect(1, 11, '\P{Is_Bidi_Class=_	WHITE-Space}', "");
Expect(0, 11, '\P{^Is_Bidi_Class=_	WHITE-Space}', "");
Error('\p{Is_Bc=/a/ ws}');
Error('\P{Is_Bc=/a/ ws}');
Expect(1, 12, '\p{Is_Bc=ws}', "");
Expect(0, 12, '\p{^Is_Bc=ws}', "");
Expect(0, 12, '\P{Is_Bc=ws}', "");
Expect(1, 12, '\P{^Is_Bc=ws}', "");
Expect(0, 11, '\p{Is_Bc=ws}', "");
Expect(1, 11, '\p{^Is_Bc=ws}', "");
Expect(1, 11, '\P{Is_Bc=ws}', "");
Expect(0, 11, '\P{^Is_Bc=ws}', "");
Expect(1, 12, '\p{Is_Bc=-	WS}', "");
Expect(0, 12, '\p{^Is_Bc=-	WS}', "");
Expect(0, 12, '\P{Is_Bc=-	WS}', "");
Expect(1, 12, '\P{^Is_Bc=-	WS}', "");
Expect(0, 11, '\p{Is_Bc=-	WS}', "");
Expect(1, 11, '\p{^Is_Bc=-	WS}', "");
Expect(1, 11, '\P{Is_Bc=-	WS}', "");
Expect(0, 11, '\P{^Is_Bc=-	WS}', "");
Error('\p{Bidi_Class=PARAGRAPHSeparator:=}');
Error('\P{Bidi_Class=PARAGRAPHSeparator:=}');
Expect(1, 10, '\p{Bidi_Class=paragraphseparator}', "");
Expect(0, 10, '\p{^Bidi_Class=paragraphseparator}', "");
Expect(0, 10, '\P{Bidi_Class=paragraphseparator}', "");
Expect(1, 10, '\P{^Bidi_Class=paragraphseparator}', "");
Expect(0, 9, '\p{Bidi_Class=paragraphseparator}', "");
Expect(1, 9, '\p{^Bidi_Class=paragraphseparator}', "");
Expect(1, 9, '\P{Bidi_Class=paragraphseparator}', "");
Expect(0, 9, '\P{^Bidi_Class=paragraphseparator}', "");
Expect(1, 10, '\p{Bidi_Class=_Paragraph	Separator}', "");
Expect(0, 10, '\p{^Bidi_Class=_Paragraph	Separator}', "");
Expect(0, 10, '\P{Bidi_Class=_Paragraph	Separator}', "");
Expect(1, 10, '\P{^Bidi_Class=_Paragraph	Separator}', "");
Expect(0, 9, '\p{Bidi_Class=_Paragraph	Separator}', "");
Expect(1, 9, '\p{^Bidi_Class=_Paragraph	Separator}', "");
Expect(1, 9, '\P{Bidi_Class=_Paragraph	Separator}', "");
Expect(0, 9, '\P{^Bidi_Class=_Paragraph	Separator}', "");
Error('\p{Bc=-	b:=}');
Error('\P{Bc=-	b:=}');
Expect(1, 10, '\p{Bc=b}', "");
Expect(0, 10, '\p{^Bc=b}', "");
Expect(0, 10, '\P{Bc=b}', "");
Expect(1, 10, '\P{^Bc=b}', "");
Expect(0, 9, '\p{Bc=b}', "");
Expect(1, 9, '\p{^Bc=b}', "");
Expect(1, 9, '\P{Bc=b}', "");
Expect(0, 9, '\P{^Bc=b}', "");
Expect(1, 10, '\p{Bc=--B}', "");
Expect(0, 10, '\p{^Bc=--B}', "");
Expect(0, 10, '\P{Bc=--B}', "");
Expect(1, 10, '\P{^Bc=--B}', "");
Expect(0, 9, '\p{Bc=--B}', "");
Expect(1, 9, '\p{^Bc=--B}', "");
Expect(1, 9, '\P{Bc=--B}', "");
Expect(0, 9, '\P{^Bc=--B}', "");
Error('\p{Is_Bidi_Class=--paragraph-Separator/a/}');
Error('\P{Is_Bidi_Class=--paragraph-Separator/a/}');
Expect(1, 10, '\p{Is_Bidi_Class:   paragraphseparator}', "");
Expect(0, 10, '\p{^Is_Bidi_Class:   paragraphseparator}', "");
Expect(0, 10, '\P{Is_Bidi_Class:   paragraphseparator}', "");
Expect(1, 10, '\P{^Is_Bidi_Class:   paragraphseparator}', "");
Expect(0, 9, '\p{Is_Bidi_Class:   paragraphseparator}', "");
Expect(1, 9, '\p{^Is_Bidi_Class:   paragraphseparator}', "");
Expect(1, 9, '\P{Is_Bidi_Class:   paragraphseparator}', "");
Expect(0, 9, '\P{^Is_Bidi_Class:   paragraphseparator}', "");
Expect(1, 10, '\p{Is_Bidi_Class=	-paragraph	SEPARATOR}', "");
Expect(0, 10, '\p{^Is_Bidi_Class=	-paragraph	SEPARATOR}', "");
Expect(0, 10, '\P{Is_Bidi_Class=	-paragraph	SEPARATOR}', "");
Expect(1, 10, '\P{^Is_Bidi_Class=	-paragraph	SEPARATOR}', "");
Expect(0, 9, '\p{Is_Bidi_Class=	-paragraph	SEPARATOR}', "");
Expect(1, 9, '\p{^Is_Bidi_Class=	-paragraph	SEPARATOR}', "");
Expect(1, 9, '\P{Is_Bidi_Class=	-paragraph	SEPARATOR}', "");
Expect(0, 9, '\P{^Is_Bidi_Class=	-paragraph	SEPARATOR}', "");
Error('\p{Is_Bc=:=_B}');
Error('\P{Is_Bc=:=_B}');
Expect(1, 10, '\p{Is_Bc=b}', "");
Expect(0, 10, '\p{^Is_Bc=b}', "");
Expect(0, 10, '\P{Is_Bc=b}', "");
Expect(1, 10, '\P{^Is_Bc=b}', "");
Expect(0, 9, '\p{Is_Bc=b}', "");
Expect(1, 9, '\p{^Is_Bc=b}', "");
Expect(1, 9, '\P{Is_Bc=b}', "");
Expect(0, 9, '\P{^Is_Bc=b}', "");
Expect(1, 10, '\p{Is_Bc=	 B}', "");
Expect(0, 10, '\p{^Is_Bc=	 B}', "");
Expect(0, 10, '\P{Is_Bc=	 B}', "");
Expect(1, 10, '\P{^Is_Bc=	 B}', "");
Expect(0, 9, '\p{Is_Bc=	 B}', "");
Expect(1, 9, '\p{^Is_Bc=	 B}', "");
Expect(1, 9, '\P{Is_Bc=	 B}', "");
Expect(0, 9, '\P{^Is_Bc=	 B}', "");
Error('\p{Bidi_Class=_:=NONSPACING mark}');
Error('\P{Bidi_Class=_:=NONSPACING mark}');
Expect(1, 879, '\p{Bidi_Class=nonspacingmark}', "");
Expect(0, 879, '\p{^Bidi_Class=nonspacingmark}', "");
Expect(0, 879, '\P{Bidi_Class=nonspacingmark}', "");
Expect(1, 879, '\P{^Bidi_Class=nonspacingmark}', "");
Expect(0, 767, '\p{Bidi_Class=nonspacingmark}', "");
Expect(1, 767, '\p{^Bidi_Class=nonspacingmark}', "");
Expect(1, 767, '\P{Bidi_Class=nonspacingmark}', "");
Expect(0, 767, '\P{^Bidi_Class=nonspacingmark}', "");
Expect(1, 879, '\p{Bidi_Class=	-Nonspacing_MARK}', "");
Expect(0, 879, '\p{^Bidi_Class=	-Nonspacing_MARK}', "");
Expect(0, 879, '\P{Bidi_Class=	-Nonspacing_MARK}', "");
Expect(1, 879, '\P{^Bidi_Class=	-Nonspacing_MARK}', "");
Expect(0, 767, '\p{Bidi_Class=	-Nonspacing_MARK}', "");
Expect(1, 767, '\p{^Bidi_Class=	-Nonspacing_MARK}', "");
Expect(1, 767, '\P{Bidi_Class=	-Nonspacing_MARK}', "");
Expect(0, 767, '\P{^Bidi_Class=	-Nonspacing_MARK}', "");
Error('\p{Bc=:=-NSM}');
Error('\P{Bc=:=-NSM}');
Expect(1, 879, '\p{Bc=nsm}', "");
Expect(0, 879, '\p{^Bc=nsm}', "");
Expect(0, 879, '\P{Bc=nsm}', "");
Expect(1, 879, '\P{^Bc=nsm}', "");
Expect(0, 767, '\p{Bc=nsm}', "");
Expect(1, 767, '\p{^Bc=nsm}', "");
Expect(1, 767, '\P{Bc=nsm}', "");
Expect(0, 767, '\P{^Bc=nsm}', "");
Expect(1, 879, '\p{Bc=_-NSM}', "");
Expect(0, 879, '\p{^Bc=_-NSM}', "");
Expect(0, 879, '\P{Bc=_-NSM}', "");
Expect(1, 879, '\P{^Bc=_-NSM}', "");
Expect(0, 767, '\p{Bc=_-NSM}', "");
Expect(1, 767, '\p{^Bc=_-NSM}', "");
Expect(1, 767, '\P{Bc=_-NSM}', "");
Expect(0, 767, '\P{^Bc=_-NSM}', "");
Error('\p{Is_Bidi_Class: /a/_-nonspacingMark}');
Error('\P{Is_Bidi_Class: /a/_-nonspacingMark}');
Expect(1, 879, '\p{Is_Bidi_Class=nonspacingmark}', "");
Expect(0, 879, '\p{^Is_Bidi_Class=nonspacingmark}', "");
Expect(0, 879, '\P{Is_Bidi_Class=nonspacingmark}', "");
Expect(1, 879, '\P{^Is_Bidi_Class=nonspacingmark}', "");
Expect(0, 767, '\p{Is_Bidi_Class=nonspacingmark}', "");
Expect(1, 767, '\p{^Is_Bidi_Class=nonspacingmark}', "");
Expect(1, 767, '\P{Is_Bidi_Class=nonspacingmark}', "");
Expect(0, 767, '\P{^Is_Bidi_Class=nonspacingmark}', "");
Expect(1, 879, '\p{Is_Bidi_Class=_ Nonspacing Mark}', "");
Expect(0, 879, '\p{^Is_Bidi_Class=_ Nonspacing Mark}', "");
Expect(0, 879, '\P{Is_Bidi_Class=_ Nonspacing Mark}', "");
Expect(1, 879, '\P{^Is_Bidi_Class=_ Nonspacing Mark}', "");
Expect(0, 767, '\p{Is_Bidi_Class=_ Nonspacing Mark}', "");
Expect(1, 767, '\p{^Is_Bidi_Class=_ Nonspacing Mark}', "");
Expect(1, 767, '\P{Is_Bidi_Class=_ Nonspacing Mark}', "");
Expect(0, 767, '\P{^Is_Bidi_Class=_ Nonspacing Mark}', "");
Error('\p{Is_Bc=-:=NSM}');
Error('\P{Is_Bc=-:=NSM}');
Expect(1, 879, '\p{Is_Bc=nsm}', "");
Expect(0, 879, '\p{^Is_Bc=nsm}', "");
Expect(0, 879, '\P{Is_Bc=nsm}', "");
Expect(1, 879, '\P{^Is_Bc=nsm}', "");
Expect(0, 767, '\p{Is_Bc=nsm}', "");
Expect(1, 767, '\p{^Is_Bc=nsm}', "");
Expect(1, 767, '\P{Is_Bc=nsm}', "");
Expect(0, 767, '\P{^Is_Bc=nsm}', "");
Expect(1, 879, '\p{Is_Bc= -NSM}', "");
Expect(0, 879, '\p{^Is_Bc= -NSM}', "");
Expect(0, 879, '\P{Is_Bc= -NSM}', "");
Expect(1, 879, '\P{^Is_Bc= -NSM}', "");
Expect(0, 767, '\p{Is_Bc= -NSM}', "");
Expect(1, 767, '\p{^Is_Bc= -NSM}', "");
Expect(1, 767, '\P{Is_Bc= -NSM}', "");
Expect(0, 767, '\P{^Is_Bc= -NSM}', "");
Error('\p{Bidi_Class:	-/a/european	SEPARATOR}');
Error('\P{Bidi_Class:	-/a/european	SEPARATOR}');
Expect(1, 43, '\p{Bidi_Class=europeanseparator}', "");
Expect(0, 43, '\p{^Bidi_Class=europeanseparator}', "");
Expect(0, 43, '\P{Bidi_Class=europeanseparator}', "");
Expect(1, 43, '\P{^Bidi_Class=europeanseparator}', "");
Expect(0, 42, '\p{Bidi_Class=europeanseparator}', "");
Expect(1, 42, '\p{^Bidi_Class=europeanseparator}', "");
Expect(1, 42, '\P{Bidi_Class=europeanseparator}', "");
Expect(0, 42, '\P{^Bidi_Class=europeanseparator}', "");
Expect(1, 43, '\p{Bidi_Class=_european-Separator}', "");
Expect(0, 43, '\p{^Bidi_Class=_european-Separator}', "");
Expect(0, 43, '\P{Bidi_Class=_european-Separator}', "");
Expect(1, 43, '\P{^Bidi_Class=_european-Separator}', "");
Expect(0, 42, '\p{Bidi_Class=_european-Separator}', "");
Expect(1, 42, '\p{^Bidi_Class=_european-Separator}', "");
Expect(1, 42, '\P{Bidi_Class=_european-Separator}', "");
Expect(0, 42, '\P{^Bidi_Class=_european-Separator}', "");
Error('\p{Bc:/a/ES}');
Error('\P{Bc:/a/ES}');
Expect(1, 43, '\p{Bc=es}', "");
Expect(0, 43, '\p{^Bc=es}', "");
Expect(0, 43, '\P{Bc=es}', "");
Expect(1, 43, '\P{^Bc=es}', "");
Expect(0, 42, '\p{Bc=es}', "");
Expect(1, 42, '\p{^Bc=es}', "");
Expect(1, 42, '\P{Bc=es}', "");
Expect(0, 42, '\P{^Bc=es}', "");
Expect(1, 43, '\p{Bc=	_ES}', "");
Expect(0, 43, '\p{^Bc=	_ES}', "");
Expect(0, 43, '\P{Bc=	_ES}', "");
Expect(1, 43, '\P{^Bc=	_ES}', "");
Expect(0, 42, '\p{Bc=	_ES}', "");
Expect(1, 42, '\p{^Bc=	_ES}', "");
Expect(1, 42, '\P{Bc=	_ES}', "");
Expect(0, 42, '\P{^Bc=	_ES}', "");
Error('\p{Is_Bidi_Class=/a/ _european_Separator}');
Error('\P{Is_Bidi_Class=/a/ _european_Separator}');
Expect(1, 43, '\p{Is_Bidi_Class=europeanseparator}', "");
Expect(0, 43, '\p{^Is_Bidi_Class=europeanseparator}', "");
Expect(0, 43, '\P{Is_Bidi_Class=europeanseparator}', "");
Expect(1, 43, '\P{^Is_Bidi_Class=europeanseparator}', "");
Expect(0, 42, '\p{Is_Bidi_Class=europeanseparator}', "");
Expect(1, 42, '\p{^Is_Bidi_Class=europeanseparator}', "");
Expect(1, 42, '\P{Is_Bidi_Class=europeanseparator}', "");
Expect(0, 42, '\P{^Is_Bidi_Class=europeanseparator}', "");
Expect(1, 43, '\p{Is_Bidi_Class=		european Separator}', "");
Expect(0, 43, '\p{^Is_Bidi_Class=		european Separator}', "");
Expect(0, 43, '\P{Is_Bidi_Class=		european Separator}', "");
Expect(1, 43, '\P{^Is_Bidi_Class=		european Separator}', "");
Expect(0, 42, '\p{Is_Bidi_Class=		european Separator}', "");
Expect(1, 42, '\p{^Is_Bidi_Class=		european Separator}', "");
Expect(1, 42, '\P{Is_Bidi_Class=		european Separator}', "");
Expect(0, 42, '\P{^Is_Bidi_Class=		european Separator}', "");
Error('\p{Is_Bc= _ES:=}');
Error('\P{Is_Bc= _ES:=}');
Expect(1, 43, '\p{Is_Bc=es}', "");
Expect(0, 43, '\p{^Is_Bc=es}', "");
Expect(0, 43, '\P{Is_Bc=es}', "");
Expect(1, 43, '\P{^Is_Bc=es}', "");
Expect(0, 42, '\p{Is_Bc=es}', "");
Expect(1, 42, '\p{^Is_Bc=es}', "");
Expect(1, 42, '\P{Is_Bc=es}', "");
Expect(0, 42, '\P{^Is_Bc=es}', "");
Expect(1, 43, '\p{Is_Bc: _ES}', "");
Expect(0, 43, '\p{^Is_Bc: _ES}', "");
Expect(0, 43, '\P{Is_Bc: _ES}', "");
Expect(1, 43, '\P{^Is_Bc: _ES}', "");
Expect(0, 42, '\p{Is_Bc: _ES}', "");
Expect(1, 42, '\p{^Is_Bc: _ES}', "");
Expect(1, 42, '\P{Is_Bc: _ES}', "");
Expect(0, 42, '\P{^Is_Bc: _ES}', "");
Error('\p{Bidi_Class=-/a/European Number}');
Error('\P{Bidi_Class=-/a/European Number}');
Expect(1, 57, '\p{Bidi_Class=europeannumber}', "");
Expect(0, 57, '\p{^Bidi_Class=europeannumber}', "");
Expect(0, 57, '\P{Bidi_Class=europeannumber}', "");
Expect(1, 57, '\P{^Bidi_Class=europeannumber}', "");
Expect(0, 47, '\p{Bidi_Class=europeannumber}', "");
Expect(1, 47, '\p{^Bidi_Class=europeannumber}', "");
Expect(1, 47, '\P{Bidi_Class=europeannumber}', "");
Expect(0, 47, '\P{^Bidi_Class=europeannumber}', "");
Expect(1, 57, '\p{Bidi_Class:	_European-Number}', "");
Expect(0, 57, '\p{^Bidi_Class:	_European-Number}', "");
Expect(0, 57, '\P{Bidi_Class:	_European-Number}', "");
Expect(1, 57, '\P{^Bidi_Class:	_European-Number}', "");
Expect(0, 47, '\p{Bidi_Class:	_European-Number}', "");
Expect(1, 47, '\p{^Bidi_Class:	_European-Number}', "");
Expect(1, 47, '\P{Bidi_Class:	_European-Number}', "");
Expect(0, 47, '\P{^Bidi_Class:	_European-Number}', "");
Error('\p{Bc=	-EN/a/}');
Error('\P{Bc=	-EN/a/}');
Expect(1, 57, '\p{Bc:   en}', "");
Expect(0, 57, '\p{^Bc:   en}', "");
Expect(0, 57, '\P{Bc:   en}', "");
Expect(1, 57, '\P{^Bc:   en}', "");
Expect(0, 47, '\p{Bc:   en}', "");
Expect(1, 47, '\p{^Bc:   en}', "");
Expect(1, 47, '\P{Bc:   en}', "");
Expect(0, 47, '\P{^Bc:   en}', "");
Expect(1, 57, '\p{Bc= _EN}', "");
Expect(0, 57, '\p{^Bc= _EN}', "");
Expect(0, 57, '\P{Bc= _EN}', "");
Expect(1, 57, '\P{^Bc= _EN}', "");
Expect(0, 47, '\p{Bc= _EN}', "");
Expect(1, 47, '\p{^Bc= _EN}', "");
Expect(1, 47, '\P{Bc= _EN}', "");
Expect(0, 47, '\P{^Bc= _EN}', "");
Error('\p{Is_Bidi_Class=:= -European_NUMBER}');
Error('\P{Is_Bidi_Class=:= -European_NUMBER}');
Expect(1, 57, '\p{Is_Bidi_Class=europeannumber}', "");
Expect(0, 57, '\p{^Is_Bidi_Class=europeannumber}', "");
Expect(0, 57, '\P{Is_Bidi_Class=europeannumber}', "");
Expect(1, 57, '\P{^Is_Bidi_Class=europeannumber}', "");
Expect(0, 47, '\p{Is_Bidi_Class=europeannumber}', "");
Expect(1, 47, '\p{^Is_Bidi_Class=europeannumber}', "");
Expect(1, 47, '\P{Is_Bidi_Class=europeannumber}', "");
Expect(0, 47, '\P{^Is_Bidi_Class=europeannumber}', "");
Expect(1, 57, '\p{Is_Bidi_Class=-EUROPEAN	number}', "");
Expect(0, 57, '\p{^Is_Bidi_Class=-EUROPEAN	number}', "");
Expect(0, 57, '\P{Is_Bidi_Class=-EUROPEAN	number}', "");
Expect(1, 57, '\P{^Is_Bidi_Class=-EUROPEAN	number}', "");
Expect(0, 47, '\p{Is_Bidi_Class=-EUROPEAN	number}', "");
Expect(1, 47, '\p{^Is_Bidi_Class=-EUROPEAN	number}', "");
Expect(1, 47, '\P{Is_Bidi_Class=-EUROPEAN	number}', "");
Expect(0, 47, '\P{^Is_Bidi_Class=-EUROPEAN	number}', "");
Error('\p{Is_Bc=/a/_EN}');
Error('\P{Is_Bc=/a/_EN}');
Expect(1, 57, '\p{Is_Bc: en}', "");
Expect(0, 57, '\p{^Is_Bc: en}', "");
Expect(0, 57, '\P{Is_Bc: en}', "");
Expect(1, 57, '\P{^Is_Bc: en}', "");
Expect(0, 47, '\p{Is_Bc: en}', "");
Expect(1, 47, '\p{^Is_Bc: en}', "");
Expect(1, 47, '\P{Is_Bc: en}', "");
Expect(0, 47, '\P{^Is_Bc: en}', "");
Expect(1, 57, '\p{Is_Bc= -en}', "");
Expect(0, 57, '\p{^Is_Bc= -en}', "");
Expect(0, 57, '\P{Is_Bc= -en}', "");
Expect(1, 57, '\P{^Is_Bc= -en}', "");
Expect(0, 47, '\p{Is_Bc= -en}', "");
Expect(1, 47, '\p{^Is_Bc= -en}', "");
Expect(1, 47, '\P{Is_Bc= -en}', "");
Expect(0, 47, '\P{^Is_Bc= -en}', "");
Error('\p{Bidi_Class=-:=European	Terminator}');
Error('\P{Bidi_Class=-:=European	Terminator}');
Expect(1, 37, '\p{Bidi_Class=europeanterminator}', "");
Expect(0, 37, '\p{^Bidi_Class=europeanterminator}', "");
Expect(0, 37, '\P{Bidi_Class=europeanterminator}', "");
Expect(1, 37, '\P{^Bidi_Class=europeanterminator}', "");
Expect(0, 34, '\p{Bidi_Class=europeanterminator}', "");
Expect(1, 34, '\p{^Bidi_Class=europeanterminator}', "");
Expect(1, 34, '\P{Bidi_Class=europeanterminator}', "");
Expect(0, 34, '\P{^Bidi_Class=europeanterminator}', "");
Expect(1, 37, '\p{Bidi_Class=  european	TERMINATOR}', "");
Expect(0, 37, '\p{^Bidi_Class=  european	TERMINATOR}', "");
Expect(0, 37, '\P{Bidi_Class=  european	TERMINATOR}', "");
Expect(1, 37, '\P{^Bidi_Class=  european	TERMINATOR}', "");
Expect(0, 34, '\p{Bidi_Class=  european	TERMINATOR}', "");
Expect(1, 34, '\p{^Bidi_Class=  european	TERMINATOR}', "");
Expect(1, 34, '\P{Bidi_Class=  european	TERMINATOR}', "");
Expect(0, 34, '\P{^Bidi_Class=  european	TERMINATOR}', "");
Error('\p{Bc=	ET/a/}');
Error('\P{Bc=	ET/a/}');
Expect(1, 37, '\p{Bc:et}', "");
Expect(0, 37, '\p{^Bc:et}', "");
Expect(0, 37, '\P{Bc:et}', "");
Expect(1, 37, '\P{^Bc:et}', "");
Expect(0, 34, '\p{Bc:et}', "");
Expect(1, 34, '\p{^Bc:et}', "");
Expect(1, 34, '\P{Bc:et}', "");
Expect(0, 34, '\P{^Bc:et}', "");
Expect(1, 37, '\p{Bc=--ET}', "");
Expect(0, 37, '\p{^Bc=--ET}', "");
Expect(0, 37, '\P{Bc=--ET}', "");
Expect(1, 37, '\P{^Bc=--ET}', "");
Expect(0, 34, '\p{Bc=--ET}', "");
Expect(1, 34, '\p{^Bc=--ET}', "");
Expect(1, 34, '\P{Bc=--ET}', "");
Expect(0, 34, '\P{^Bc=--ET}', "");
Error('\p{Is_Bidi_Class=	/a/europeanTerminator}');
Error('\P{Is_Bidi_Class=	/a/europeanTerminator}');
Expect(1, 37, '\p{Is_Bidi_Class:europeanterminator}', "");
Expect(0, 37, '\p{^Is_Bidi_Class:europeanterminator}', "");
Expect(0, 37, '\P{Is_Bidi_Class:europeanterminator}', "");
Expect(1, 37, '\P{^Is_Bidi_Class:europeanterminator}', "");
Expect(0, 34, '\p{Is_Bidi_Class:europeanterminator}', "");
Expect(1, 34, '\p{^Is_Bidi_Class:europeanterminator}', "");
Expect(1, 34, '\P{Is_Bidi_Class:europeanterminator}', "");
Expect(0, 34, '\P{^Is_Bidi_Class:europeanterminator}', "");
Expect(1, 37, '\p{Is_Bidi_Class=_	EuropeanTerminator}', "");
Expect(0, 37, '\p{^Is_Bidi_Class=_	EuropeanTerminator}', "");
Expect(0, 37, '\P{Is_Bidi_Class=_	EuropeanTerminator}', "");
Expect(1, 37, '\P{^Is_Bidi_Class=_	EuropeanTerminator}', "");
Expect(0, 34, '\p{Is_Bidi_Class=_	EuropeanTerminator}', "");
Expect(1, 34, '\p{^Is_Bidi_Class=_	EuropeanTerminator}', "");
Expect(1, 34, '\P{Is_Bidi_Class=_	EuropeanTerminator}', "");
Expect(0, 34, '\P{^Is_Bidi_Class=_	EuropeanTerminator}', "");
Error('\p{Is_Bc=-/a/ET}');
Error('\P{Is_Bc=-/a/ET}');
Expect(1, 37, '\p{Is_Bc=et}', "");
Expect(0, 37, '\p{^Is_Bc=et}', "");
Expect(0, 37, '\P{Is_Bc=et}', "");
Expect(1, 37, '\P{^Is_Bc=et}', "");
Expect(0, 34, '\p{Is_Bc=et}', "");
Expect(1, 34, '\p{^Is_Bc=et}', "");
Expect(1, 34, '\P{Is_Bc=et}', "");
Expect(0, 34, '\P{^Is_Bc=et}', "");
Expect(1, 37, '\p{Is_Bc=-_ET}', "");
Expect(0, 37, '\p{^Is_Bc=-_ET}', "");
Expect(0, 37, '\P{Is_Bc=-_ET}', "");
Expect(1, 37, '\P{^Is_Bc=-_ET}', "");
Expect(0, 34, '\p{Is_Bc=-_ET}', "");
Expect(1, 34, '\p{^Is_Bc=-_ET}', "");
Expect(1, 34, '\P{Is_Bc=-_ET}', "");
Expect(0, 34, '\P{^Is_Bc=-_ET}', "");
Error('\p{Bidi_Class:   -	ARABIC:=NUMBER}');
Error('\P{Bidi_Class:   -	ARABIC:=NUMBER}');
Expect(1, 1539, '\p{Bidi_Class=arabicnumber}', "");
Expect(0, 1539, '\p{^Bidi_Class=arabicnumber}', "");
Expect(0, 1539, '\P{Bidi_Class=arabicnumber}', "");
Expect(1, 1539, '\P{^Bidi_Class=arabicnumber}', "");
Expect(0, 1535, '\p{Bidi_Class=arabicnumber}', "");
Expect(1, 1535, '\p{^Bidi_Class=arabicnumber}', "");
Expect(1, 1535, '\P{Bidi_Class=arabicnumber}', "");
Expect(0, 1535, '\P{^Bidi_Class=arabicnumber}', "");
Expect(1, 1539, '\p{Bidi_Class:_-arabic-NUMBER}', "");
Expect(0, 1539, '\p{^Bidi_Class:_-arabic-NUMBER}', "");
Expect(0, 1539, '\P{Bidi_Class:_-arabic-NUMBER}', "");
Expect(1, 1539, '\P{^Bidi_Class:_-arabic-NUMBER}', "");
Expect(0, 1535, '\p{Bidi_Class:_-arabic-NUMBER}', "");
Expect(1, 1535, '\p{^Bidi_Class:_-arabic-NUMBER}', "");
Expect(1, 1535, '\P{Bidi_Class:_-arabic-NUMBER}', "");
Expect(0, 1535, '\P{^Bidi_Class:_-arabic-NUMBER}', "");
Error('\p{Bc=	:=AN}');
Error('\P{Bc=	:=AN}');
Expect(1, 1539, '\p{Bc=an}', "");
Expect(0, 1539, '\p{^Bc=an}', "");
Expect(0, 1539, '\P{Bc=an}', "");
Expect(1, 1539, '\P{^Bc=an}', "");
Expect(0, 1535, '\p{Bc=an}', "");
Expect(1, 1535, '\p{^Bc=an}', "");
Expect(1, 1535, '\P{Bc=an}', "");
Expect(0, 1535, '\P{^Bc=an}', "");
Expect(1, 1539, '\p{Bc=	 an}', "");
Expect(0, 1539, '\p{^Bc=	 an}', "");
Expect(0, 1539, '\P{Bc=	 an}', "");
Expect(1, 1539, '\P{^Bc=	 an}', "");
Expect(0, 1535, '\p{Bc=	 an}', "");
Expect(1, 1535, '\p{^Bc=	 an}', "");
Expect(1, 1535, '\P{Bc=	 an}', "");
Expect(0, 1535, '\P{^Bc=	 an}', "");
Error('\p{Is_Bidi_Class=__arabic/a/Number}');
Error('\P{Is_Bidi_Class=__arabic/a/Number}');
Expect(1, 1539, '\p{Is_Bidi_Class=arabicnumber}', "");
Expect(0, 1539, '\p{^Is_Bidi_Class=arabicnumber}', "");
Expect(0, 1539, '\P{Is_Bidi_Class=arabicnumber}', "");
Expect(1, 1539, '\P{^Is_Bidi_Class=arabicnumber}', "");
Expect(0, 1535, '\p{Is_Bidi_Class=arabicnumber}', "");
Expect(1, 1535, '\p{^Is_Bidi_Class=arabicnumber}', "");
Expect(1, 1535, '\P{Is_Bidi_Class=arabicnumber}', "");
Expect(0, 1535, '\P{^Is_Bidi_Class=arabicnumber}', "");
Expect(1, 1539, '\p{Is_Bidi_Class=- Arabic-Number}', "");
Expect(0, 1539, '\p{^Is_Bidi_Class=- Arabic-Number}', "");
Expect(0, 1539, '\P{Is_Bidi_Class=- Arabic-Number}', "");
Expect(1, 1539, '\P{^Is_Bidi_Class=- Arabic-Number}', "");
Expect(0, 1535, '\p{Is_Bidi_Class=- Arabic-Number}', "");
Expect(1, 1535, '\p{^Is_Bidi_Class=- Arabic-Number}', "");
Expect(1, 1535, '\P{Is_Bidi_Class=- Arabic-Number}', "");
Expect(0, 1535, '\P{^Is_Bidi_Class=- Arabic-Number}', "");
Error('\p{Is_Bc=-/a/AN}');
Error('\P{Is_Bc=-/a/AN}');
Expect(1, 1539, '\p{Is_Bc: an}', "");
Expect(0, 1539, '\p{^Is_Bc: an}', "");
Expect(0, 1539, '\P{Is_Bc: an}', "");
Expect(1, 1539, '\P{^Is_Bc: an}', "");
Expect(0, 1535, '\p{Is_Bc: an}', "");
Expect(1, 1535, '\p{^Is_Bc: an}', "");
Expect(1, 1535, '\P{Is_Bc: an}', "");
Expect(0, 1535, '\P{^Is_Bc: an}', "");
Expect(1, 1539, '\p{Is_Bc=AN}', "");
Expect(0, 1539, '\p{^Is_Bc=AN}', "");
Expect(0, 1539, '\P{Is_Bc=AN}', "");
Expect(1, 1539, '\P{^Is_Bc=AN}', "");
Expect(0, 1535, '\p{Is_Bc=AN}', "");
Expect(1, 1535, '\p{^Is_Bc=AN}', "");
Expect(1, 1535, '\P{Is_Bc=AN}', "");
Expect(0, 1535, '\P{^Is_Bc=AN}', "");
Error('\p{Bidi_Class=-:=right To left}');
Error('\P{Bidi_Class=-:=right To left}');
Expect(1, 1424, '\p{Bidi_Class=righttoleft}', "");
Expect(0, 1424, '\p{^Bidi_Class=righttoleft}', "");
Expect(0, 1424, '\P{Bidi_Class=righttoleft}', "");
Expect(1, 1424, '\P{^Bidi_Class=righttoleft}', "");
Expect(0, 1423, '\p{Bidi_Class=righttoleft}', "");
Expect(1, 1423, '\p{^Bidi_Class=righttoleft}', "");
Expect(1, 1423, '\P{Bidi_Class=righttoleft}', "");
Expect(0, 1423, '\P{^Bidi_Class=righttoleft}', "");
Expect(1, 1424, '\p{Bidi_Class= RIGHT_to LEFT}', "");
Expect(0, 1424, '\p{^Bidi_Class= RIGHT_to LEFT}', "");
Expect(0, 1424, '\P{Bidi_Class= RIGHT_to LEFT}', "");
Expect(1, 1424, '\P{^Bidi_Class= RIGHT_to LEFT}', "");
Expect(0, 1423, '\p{Bidi_Class= RIGHT_to LEFT}', "");
Expect(1, 1423, '\p{^Bidi_Class= RIGHT_to LEFT}', "");
Expect(1, 1423, '\P{Bidi_Class= RIGHT_to LEFT}', "");
Expect(0, 1423, '\P{^Bidi_Class= RIGHT_to LEFT}', "");
Error('\p{Bc=- r:=}');
Error('\P{Bc=- r:=}');
Expect(1, 1424, '\p{Bc=r}', "");
Expect(0, 1424, '\p{^Bc=r}', "");
Expect(0, 1424, '\P{Bc=r}', "");
Expect(1, 1424, '\P{^Bc=r}', "");
Expect(0, 1423, '\p{Bc=r}', "");
Expect(1, 1423, '\p{^Bc=r}', "");
Expect(1, 1423, '\P{Bc=r}', "");
Expect(0, 1423, '\P{^Bc=r}', "");
Expect(1, 1424, '\p{Bc=-R}', "");
Expect(0, 1424, '\p{^Bc=-R}', "");
Expect(0, 1424, '\P{Bc=-R}', "");
Expect(1, 1424, '\P{^Bc=-R}', "");
Expect(0, 1423, '\p{Bc=-R}', "");
Expect(1, 1423, '\p{^Bc=-R}', "");
Expect(1, 1423, '\P{Bc=-R}', "");
Expect(0, 1423, '\P{^Bc=-R}', "");
Error('\p{Is_Bidi_Class= -RIGHT:=TO left}');
Error('\P{Is_Bidi_Class= -RIGHT:=TO left}');
Expect(1, 1424, '\p{Is_Bidi_Class=righttoleft}', "");
Expect(0, 1424, '\p{^Is_Bidi_Class=righttoleft}', "");
Expect(0, 1424, '\P{Is_Bidi_Class=righttoleft}', "");
Expect(1, 1424, '\P{^Is_Bidi_Class=righttoleft}', "");
Expect(0, 1423, '\p{Is_Bidi_Class=righttoleft}', "");
Expect(1, 1423, '\p{^Is_Bidi_Class=righttoleft}', "");
Expect(1, 1423, '\P{Is_Bidi_Class=righttoleft}', "");
Expect(0, 1423, '\P{^Is_Bidi_Class=righttoleft}', "");
Expect(1, 1424, '\p{Is_Bidi_Class=		RightTO_Left}', "");
Expect(0, 1424, '\p{^Is_Bidi_Class=		RightTO_Left}', "");
Expect(0, 1424, '\P{Is_Bidi_Class=		RightTO_Left}', "");
Expect(1, 1424, '\P{^Is_Bidi_Class=		RightTO_Left}', "");
Expect(0, 1423, '\p{Is_Bidi_Class=		RightTO_Left}', "");
Expect(1, 1423, '\p{^Is_Bidi_Class=		RightTO_Left}', "");
Expect(1, 1423, '\P{Is_Bidi_Class=		RightTO_Left}', "");
Expect(0, 1423, '\P{^Is_Bidi_Class=		RightTO_Left}', "");
Error('\p{Is_Bc=:=-_r}');
Error('\P{Is_Bc=:=-_r}');
Expect(1, 1424, '\p{Is_Bc=r}', "");
Expect(0, 1424, '\p{^Is_Bc=r}', "");
Expect(0, 1424, '\P{Is_Bc=r}', "");
Expect(1, 1424, '\P{^Is_Bc=r}', "");
Expect(0, 1423, '\p{Is_Bc=r}', "");
Expect(1, 1423, '\p{^Is_Bc=r}', "");
Expect(1, 1423, '\P{Is_Bc=r}', "");
Expect(0, 1423, '\P{^Is_Bc=r}', "");
Expect(1, 1424, '\p{Is_Bc=_	R}', "");
Expect(0, 1424, '\p{^Is_Bc=_	R}', "");
Expect(0, 1424, '\P{Is_Bc=_	R}', "");
Expect(1, 1424, '\P{^Is_Bc=_	R}', "");
Expect(0, 1423, '\p{Is_Bc=_	R}', "");
Expect(1, 1423, '\p{^Is_Bc=_	R}', "");
Expect(1, 1423, '\P{Is_Bc=_	R}', "");
Expect(0, 1423, '\P{^Is_Bc=_	R}', "");
Error('\p{Radical=Yes:=}');
Error('\P{Radical=Yes:=}');
Expect(1, 11929, '\p{Radical=yes}', "");
Expect(0, 11929, '\p{^Radical=yes}', "");
Expect(0, 11929, '\P{Radical=yes}', "");
Expect(1, 11929, '\P{^Radical=yes}', "");
Expect(0, 11903, '\p{Radical=yes}', "");
Expect(1, 11903, '\p{^Radical=yes}', "");
Expect(1, 11903, '\P{Radical=yes}', "");
Expect(0, 11903, '\P{^Radical=yes}', "");
Expect(1, 11929, '\p{Radical= -YES}', "");
Expect(0, 11929, '\p{^Radical= -YES}', "");
Expect(0, 11929, '\P{Radical= -YES}', "");
Expect(1, 11929, '\P{^Radical= -YES}', "");
Expect(0, 11903, '\p{Radical= -YES}', "");
Expect(1, 11903, '\p{^Radical= -YES}', "");
Expect(1, 11903, '\P{Radical= -YES}', "");
Expect(0, 11903, '\P{^Radical= -YES}', "");
Error('\p{Is_Radical=- y/a/}');
Error('\P{Is_Radical=- y/a/}');
Expect(1, 11929, '\p{Is_Radical=y}', "");
Expect(0, 11929, '\p{^Is_Radical=y}', "");
Expect(0, 11929, '\P{Is_Radical=y}', "");
Expect(1, 11929, '\P{^Is_Radical=y}', "");
Expect(0, 11903, '\p{Is_Radical=y}', "");
Expect(1, 11903, '\p{^Is_Radical=y}', "");
Expect(1, 11903, '\P{Is_Radical=y}', "");
Expect(0, 11903, '\P{^Is_Radical=y}', "");
Expect(1, 11929, '\p{Is_Radical=- Y}', "");
Expect(0, 11929, '\p{^Is_Radical=- Y}', "");
Expect(0, 11929, '\P{Is_Radical=- Y}', "");
Expect(1, 11929, '\P{^Is_Radical=- Y}', "");
Expect(0, 11903, '\p{Is_Radical=- Y}', "");
Expect(1, 11903, '\p{^Is_Radical=- Y}', "");
Expect(1, 11903, '\P{Is_Radical=- Y}', "");
Expect(0, 11903, '\P{^Is_Radical=- Y}', "");
Error('\p{Radical= 	T/a/}');
Error('\P{Radical= 	T/a/}');
Expect(1, 11929, '\p{Radical=t}', "");
Expect(0, 11929, '\p{^Radical=t}', "");
Expect(0, 11929, '\P{Radical=t}', "");
Expect(1, 11929, '\P{^Radical=t}', "");
Expect(0, 11903, '\p{Radical=t}', "");
Expect(1, 11903, '\p{^Radical=t}', "");
Expect(1, 11903, '\P{Radical=t}', "");
Expect(0, 11903, '\P{^Radical=t}', "");
Expect(1, 11929, '\p{Radical: 	T}', "");
Expect(0, 11929, '\p{^Radical: 	T}', "");
Expect(0, 11929, '\P{Radical: 	T}', "");
Expect(1, 11929, '\P{^Radical: 	T}', "");
Expect(0, 11903, '\p{Radical: 	T}', "");
Expect(1, 11903, '\p{^Radical: 	T}', "");
Expect(1, 11903, '\P{Radical: 	T}', "");
Expect(0, 11903, '\P{^Radical: 	T}', "");
Error('\p{Is_Radical=	TRUE:=}');
Error('\P{Is_Radical=	TRUE:=}');
Expect(1, 11929, '\p{Is_Radical=true}', "");
Expect(0, 11929, '\p{^Is_Radical=true}', "");
Expect(0, 11929, '\P{Is_Radical=true}', "");
Expect(1, 11929, '\P{^Is_Radical=true}', "");
Expect(0, 11903, '\p{Is_Radical=true}', "");
Expect(1, 11903, '\p{^Is_Radical=true}', "");
Expect(1, 11903, '\P{Is_Radical=true}', "");
Expect(0, 11903, '\P{^Is_Radical=true}', "");
Expect(1, 11929, '\p{Is_Radical=__True}', "");
Expect(0, 11929, '\p{^Is_Radical=__True}', "");
Expect(0, 11929, '\P{Is_Radical=__True}', "");
Expect(1, 11929, '\P{^Is_Radical=__True}', "");
Expect(0, 11903, '\p{Is_Radical=__True}', "");
Expect(1, 11903, '\p{^Is_Radical=__True}', "");
Expect(1, 11903, '\P{Is_Radical=__True}', "");
Expect(0, 11903, '\P{^Is_Radical=__True}', "");
Error('\p{Radical=_ No/a/}');
Error('\P{Radical=_ No/a/}');
Expect(1, 11903, '\p{Radical=no}', "");
Expect(0, 11903, '\p{^Radical=no}', "");
Expect(0, 11903, '\P{Radical=no}', "");
Expect(1, 11903, '\P{^Radical=no}', "");
Expect(0, 11929, '\p{Radical=no}', "");
Expect(1, 11929, '\p{^Radical=no}', "");
Expect(1, 11929, '\P{Radical=no}', "");
Expect(0, 11929, '\P{^Radical=no}', "");
Expect(1, 11903, '\p{Radical:	_ no}', "");
Expect(0, 11903, '\p{^Radical:	_ no}', "");
Expect(0, 11903, '\P{Radical:	_ no}', "");
Expect(1, 11903, '\P{^Radical:	_ no}', "");
Expect(0, 11929, '\p{Radical:	_ no}', "");
Expect(1, 11929, '\p{^Radical:	_ no}', "");
Expect(1, 11929, '\P{Radical:	_ no}', "");
Expect(0, 11929, '\P{^Radical:	_ no}', "");
Error('\p{Is_Radical=- n:=}');
Error('\P{Is_Radical=- n:=}');
Expect(1, 11903, '\p{Is_Radical:   n}', "");
Expect(0, 11903, '\p{^Is_Radical:   n}', "");
Expect(0, 11903, '\P{Is_Radical:   n}', "");
Expect(1, 11903, '\P{^Is_Radical:   n}', "");
Expect(0, 11929, '\p{Is_Radical:   n}', "");
Expect(1, 11929, '\p{^Is_Radical:   n}', "");
Expect(1, 11929, '\P{Is_Radical:   n}', "");
Expect(0, 11929, '\P{^Is_Radical:   n}', "");
Expect(1, 11903, '\p{Is_Radical:   --N}', "");
Expect(0, 11903, '\p{^Is_Radical:   --N}', "");
Expect(0, 11903, '\P{Is_Radical:   --N}', "");
Expect(1, 11903, '\P{^Is_Radical:   --N}', "");
Expect(0, 11929, '\p{Is_Radical:   --N}', "");
Expect(1, 11929, '\p{^Is_Radical:   --N}', "");
Expect(1, 11929, '\P{Is_Radical:   --N}', "");
Expect(0, 11929, '\P{^Is_Radical:   --N}', "");
Error('\p{Radical=_ F/a/}');
Error('\P{Radical=_ F/a/}');
Expect(1, 11903, '\p{Radical=f}', "");
Expect(0, 11903, '\p{^Radical=f}', "");
Expect(0, 11903, '\P{Radical=f}', "");
Expect(1, 11903, '\P{^Radical=f}', "");
Expect(0, 11929, '\p{Radical=f}', "");
Expect(1, 11929, '\p{^Radical=f}', "");
Expect(1, 11929, '\P{Radical=f}', "");
Expect(0, 11929, '\P{^Radical=f}', "");
Expect(1, 11903, '\p{Radical= F}', "");
Expect(0, 11903, '\p{^Radical= F}', "");
Expect(0, 11903, '\P{Radical= F}', "");
Expect(1, 11903, '\P{^Radical= F}', "");
Expect(0, 11929, '\p{Radical= F}', "");
Expect(1, 11929, '\p{^Radical= F}', "");
Expect(1, 11929, '\P{Radical= F}', "");
Expect(0, 11929, '\P{^Radical= F}', "");
Error('\p{Is_Radical=/a/ -false}');
Error('\P{Is_Radical=/a/ -false}');
Expect(1, 11903, '\p{Is_Radical=false}', "");
Expect(0, 11903, '\p{^Is_Radical=false}', "");
Expect(0, 11903, '\P{Is_Radical=false}', "");
Expect(1, 11903, '\P{^Is_Radical=false}', "");
Expect(0, 11929, '\p{Is_Radical=false}', "");
Expect(1, 11929, '\p{^Is_Radical=false}', "");
Expect(1, 11929, '\P{Is_Radical=false}', "");
Expect(0, 11929, '\P{^Is_Radical=false}', "");
Expect(1, 11903, '\p{Is_Radical=	-false}', "");
Expect(0, 11903, '\p{^Is_Radical=	-false}', "");
Expect(0, 11903, '\P{Is_Radical=	-false}', "");
Expect(1, 11903, '\P{^Is_Radical=	-false}', "");
Expect(0, 11929, '\p{Is_Radical=	-false}', "");
Expect(1, 11929, '\p{^Is_Radical=	-false}', "");
Expect(1, 11929, '\P{Is_Radical=	-false}', "");
Expect(0, 11929, '\P{^Is_Radical=	-false}', "");
Error('\p{Quotation_Mark=/a/yes}');
Error('\P{Quotation_Mark=/a/yes}');
Expect(1, 34, '\p{Quotation_Mark=yes}', "");
Expect(0, 34, '\p{^Quotation_Mark=yes}', "");
Expect(0, 34, '\P{Quotation_Mark=yes}', "");
Expect(1, 34, '\P{^Quotation_Mark=yes}', "");
Expect(0, 33, '\p{Quotation_Mark=yes}', "");
Expect(1, 33, '\p{^Quotation_Mark=yes}', "");
Expect(1, 33, '\P{Quotation_Mark=yes}', "");
Expect(0, 33, '\P{^Quotation_Mark=yes}', "");
Expect(1, 34, '\p{Quotation_Mark=	 Yes}', "");
Expect(0, 34, '\p{^Quotation_Mark=	 Yes}', "");
Expect(0, 34, '\P{Quotation_Mark=	 Yes}', "");
Expect(1, 34, '\P{^Quotation_Mark=	 Yes}', "");
Expect(0, 33, '\p{Quotation_Mark=	 Yes}', "");
Expect(1, 33, '\p{^Quotation_Mark=	 Yes}', "");
Expect(1, 33, '\P{Quotation_Mark=	 Yes}', "");
Expect(0, 33, '\P{^Quotation_Mark=	 Yes}', "");
Error('\p{QMark=		Y:=}');
Error('\P{QMark=		Y:=}');
Expect(1, 34, '\p{QMark=y}', "");
Expect(0, 34, '\p{^QMark=y}', "");
Expect(0, 34, '\P{QMark=y}', "");
Expect(1, 34, '\P{^QMark=y}', "");
Expect(0, 33, '\p{QMark=y}', "");
Expect(1, 33, '\p{^QMark=y}', "");
Expect(1, 33, '\P{QMark=y}', "");
Expect(0, 33, '\P{^QMark=y}', "");
Expect(1, 34, '\p{QMark=_	Y}', "");
Expect(0, 34, '\p{^QMark=_	Y}', "");
Expect(0, 34, '\P{QMark=_	Y}', "");
Expect(1, 34, '\P{^QMark=_	Y}', "");
Expect(0, 33, '\p{QMark=_	Y}', "");
Expect(1, 33, '\p{^QMark=_	Y}', "");
Expect(1, 33, '\P{QMark=_	Y}', "");
Expect(0, 33, '\P{^QMark=_	Y}', "");
Error('\p{Is_Quotation_Mark=  T/a/}');
Error('\P{Is_Quotation_Mark=  T/a/}');
Expect(1, 34, '\p{Is_Quotation_Mark=t}', "");
Expect(0, 34, '\p{^Is_Quotation_Mark=t}', "");
Expect(0, 34, '\P{Is_Quotation_Mark=t}', "");
Expect(1, 34, '\P{^Is_Quotation_Mark=t}', "");
Expect(0, 33, '\p{Is_Quotation_Mark=t}', "");
Expect(1, 33, '\p{^Is_Quotation_Mark=t}', "");
Expect(1, 33, '\P{Is_Quotation_Mark=t}', "");
Expect(0, 33, '\P{^Is_Quotation_Mark=t}', "");
Expect(1, 34, '\p{Is_Quotation_Mark= t}', "");
Expect(0, 34, '\p{^Is_Quotation_Mark= t}', "");
Expect(0, 34, '\P{Is_Quotation_Mark= t}', "");
Expect(1, 34, '\P{^Is_Quotation_Mark= t}', "");
Expect(0, 33, '\p{Is_Quotation_Mark= t}', "");
Expect(1, 33, '\p{^Is_Quotation_Mark= t}', "");
Expect(1, 33, '\P{Is_Quotation_Mark= t}', "");
Expect(0, 33, '\P{^Is_Quotation_Mark= t}', "");
Error('\p{Is_QMark=/a/_	True}');
Error('\P{Is_QMark=/a/_	True}');
Expect(1, 34, '\p{Is_QMark=true}', "");
Expect(0, 34, '\p{^Is_QMark=true}', "");
Expect(0, 34, '\P{Is_QMark=true}', "");
Expect(1, 34, '\P{^Is_QMark=true}', "");
Expect(0, 33, '\p{Is_QMark=true}', "");
Expect(1, 33, '\p{^Is_QMark=true}', "");
Expect(1, 33, '\P{Is_QMark=true}', "");
Expect(0, 33, '\P{^Is_QMark=true}', "");
Expect(1, 34, '\p{Is_QMark= 	TRUE}', "");
Expect(0, 34, '\p{^Is_QMark= 	TRUE}', "");
Expect(0, 34, '\P{Is_QMark= 	TRUE}', "");
Expect(1, 34, '\P{^Is_QMark= 	TRUE}', "");
Expect(0, 33, '\p{Is_QMark= 	TRUE}', "");
Expect(1, 33, '\p{^Is_QMark= 	TRUE}', "");
Expect(1, 33, '\P{Is_QMark= 	TRUE}', "");
Expect(0, 33, '\P{^Is_QMark= 	TRUE}', "");
Error('\p{Quotation_Mark=	_no:=}');
Error('\P{Quotation_Mark=	_no:=}');
Expect(1, 33, '\p{Quotation_Mark=no}', "");
Expect(0, 33, '\p{^Quotation_Mark=no}', "");
Expect(0, 33, '\P{Quotation_Mark=no}', "");
Expect(1, 33, '\P{^Quotation_Mark=no}', "");
Expect(0, 34, '\p{Quotation_Mark=no}', "");
Expect(1, 34, '\p{^Quotation_Mark=no}', "");
Expect(1, 34, '\P{Quotation_Mark=no}', "");
Expect(0, 34, '\P{^Quotation_Mark=no}', "");
Expect(1, 33, '\p{Quotation_Mark= 	NO}', "");
Expect(0, 33, '\p{^Quotation_Mark= 	NO}', "");
Expect(0, 33, '\P{Quotation_Mark= 	NO}', "");
Expect(1, 33, '\P{^Quotation_Mark= 	NO}', "");
Expect(0, 34, '\p{Quotation_Mark= 	NO}', "");
Expect(1, 34, '\p{^Quotation_Mark= 	NO}', "");
Expect(1, 34, '\P{Quotation_Mark= 	NO}', "");
Expect(0, 34, '\P{^Quotation_Mark= 	NO}', "");
Error('\p{QMark=:=	 N}');
Error('\P{QMark=:=	 N}');
Expect(1, 33, '\p{QMark=n}', "");
Expect(0, 33, '\p{^QMark=n}', "");
Expect(0, 33, '\P{QMark=n}', "");
Expect(1, 33, '\P{^QMark=n}', "");
Expect(0, 34, '\p{QMark=n}', "");
Expect(1, 34, '\p{^QMark=n}', "");
Expect(1, 34, '\P{QMark=n}', "");
Expect(0, 34, '\P{^QMark=n}', "");
Expect(1, 33, '\p{QMark= _N}', "");
Expect(0, 33, '\p{^QMark= _N}', "");
Expect(0, 33, '\P{QMark= _N}', "");
Expect(1, 33, '\P{^QMark= _N}', "");
Expect(0, 34, '\p{QMark= _N}', "");
Expect(1, 34, '\p{^QMark= _N}', "");
Expect(1, 34, '\P{QMark= _N}', "");
Expect(0, 34, '\P{^QMark= _N}', "");
Error('\p{Is_Quotation_Mark=	/a/F}');
Error('\P{Is_Quotation_Mark=	/a/F}');
Expect(1, 33, '\p{Is_Quotation_Mark=f}', "");
Expect(0, 33, '\p{^Is_Quotation_Mark=f}', "");
Expect(0, 33, '\P{Is_Quotation_Mark=f}', "");
Expect(1, 33, '\P{^Is_Quotation_Mark=f}', "");
Expect(0, 34, '\p{Is_Quotation_Mark=f}', "");
Expect(1, 34, '\p{^Is_Quotation_Mark=f}', "");
Expect(1, 34, '\P{Is_Quotation_Mark=f}', "");
Expect(0, 34, '\P{^Is_Quotation_Mark=f}', "");
Expect(1, 33, '\p{Is_Quotation_Mark=-	F}', "");
Expect(0, 33, '\p{^Is_Quotation_Mark=-	F}', "");
Expect(0, 33, '\P{Is_Quotation_Mark=-	F}', "");
Expect(1, 33, '\P{^Is_Quotation_Mark=-	F}', "");
Expect(0, 34, '\p{Is_Quotation_Mark=-	F}', "");
Expect(1, 34, '\p{^Is_Quotation_Mark=-	F}', "");
Expect(1, 34, '\P{Is_Quotation_Mark=-	F}', "");
Expect(0, 34, '\P{^Is_Quotation_Mark=-	F}', "");
Error('\p{Is_QMark= :=false}');
Error('\P{Is_QMark= :=false}');
Expect(1, 33, '\p{Is_QMark=false}', "");
Expect(0, 33, '\p{^Is_QMark=false}', "");
Expect(0, 33, '\P{Is_QMark=false}', "");
Expect(1, 33, '\P{^Is_QMark=false}', "");
Expect(0, 34, '\p{Is_QMark=false}', "");
Expect(1, 34, '\p{^Is_QMark=false}', "");
Expect(1, 34, '\P{Is_QMark=false}', "");
Expect(0, 34, '\P{^Is_QMark=false}', "");
Expect(1, 33, '\p{Is_QMark:    FALSE}', "");
Expect(0, 33, '\p{^Is_QMark:    FALSE}', "");
Expect(0, 33, '\P{Is_QMark:    FALSE}', "");
Expect(1, 33, '\P{^Is_QMark:    FALSE}', "");
Expect(0, 34, '\p{Is_QMark:    FALSE}', "");
Expect(1, 34, '\p{^Is_QMark:    FALSE}', "");
Expect(1, 34, '\P{Is_QMark:    FALSE}', "");
Expect(0, 34, '\P{^Is_QMark:    FALSE}', "");
Error('\p{Expands_On_NFD=Yes}');
Error('\P{Expands_On_NFD=Yes}');
Error('\p{XO_NFD=Y}');
Error('\P{XO_NFD=Y}');
Error('\p{Is_Expands_On_NFD=T}');
Error('\P{Is_Expands_On_NFD=T}');
Error('\p{Is_XO_NFD=True}');
Error('\P{Is_XO_NFD=True}');
Error('\p{Expands_On_NFD=No}');
Error('\P{Expands_On_NFD=No}');
Error('\p{XO_NFD=N}');
Error('\P{XO_NFD=N}');
Error('\p{Is_Expands_On_NFD=F}');
Error('\P{Is_Expands_On_NFD=F}');
Error('\p{Is_XO_NFD=False}');
Error('\P{Is_XO_NFD=False}');
Error('\p{Soft_Dotted=/a/__Yes}');
Error('\P{Soft_Dotted=/a/__Yes}');
Expect(1, 106, '\p{Soft_Dotted=yes}', "");
Expect(0, 106, '\p{^Soft_Dotted=yes}', "");
Expect(0, 106, '\P{Soft_Dotted=yes}', "");
Expect(1, 106, '\P{^Soft_Dotted=yes}', "");
Expect(0, 104, '\p{Soft_Dotted=yes}', "");
Expect(1, 104, '\p{^Soft_Dotted=yes}', "");
Expect(1, 104, '\P{Soft_Dotted=yes}', "");
Expect(0, 104, '\P{^Soft_Dotted=yes}', "");
Expect(1, 106, '\p{Soft_Dotted= Yes}', "");
Expect(0, 106, '\p{^Soft_Dotted= Yes}', "");
Expect(0, 106, '\P{Soft_Dotted= Yes}', "");
Expect(1, 106, '\P{^Soft_Dotted= Yes}', "");
Expect(0, 104, '\p{Soft_Dotted= Yes}', "");
Expect(1, 104, '\p{^Soft_Dotted= Yes}', "");
Expect(1, 104, '\P{Soft_Dotted= Yes}', "");
Expect(0, 104, '\P{^Soft_Dotted= Yes}', "");
Error('\p{SD=/a/Y}');
Error('\P{SD=/a/Y}');
Expect(1, 106, '\p{SD=y}', "");
Expect(0, 106, '\p{^SD=y}', "");
Expect(0, 106, '\P{SD=y}', "");
Expect(1, 106, '\P{^SD=y}', "");
Expect(0, 104, '\p{SD=y}', "");
Expect(1, 104, '\p{^SD=y}', "");
Expect(1, 104, '\P{SD=y}', "");
Expect(0, 104, '\P{^SD=y}', "");
Expect(1, 106, '\p{SD=	y}', "");
Expect(0, 106, '\p{^SD=	y}', "");
Expect(0, 106, '\P{SD=	y}', "");
Expect(1, 106, '\P{^SD=	y}', "");
Expect(0, 104, '\p{SD=	y}', "");
Expect(1, 104, '\p{^SD=	y}', "");
Expect(1, 104, '\P{SD=	y}', "");
Expect(0, 104, '\P{^SD=	y}', "");
Error('\p{Is_Soft_Dotted= T/a/}');
Error('\P{Is_Soft_Dotted= T/a/}');
Expect(1, 106, '\p{Is_Soft_Dotted=t}', "");
Expect(0, 106, '\p{^Is_Soft_Dotted=t}', "");
Expect(0, 106, '\P{Is_Soft_Dotted=t}', "");
Expect(1, 106, '\P{^Is_Soft_Dotted=t}', "");
Expect(0, 104, '\p{Is_Soft_Dotted=t}', "");
Expect(1, 104, '\p{^Is_Soft_Dotted=t}', "");
Expect(1, 104, '\P{Is_Soft_Dotted=t}', "");
Expect(0, 104, '\P{^Is_Soft_Dotted=t}', "");
Expect(1, 106, '\p{Is_Soft_Dotted=_ T}', "");
Expect(0, 106, '\p{^Is_Soft_Dotted=_ T}', "");
Expect(0, 106, '\P{Is_Soft_Dotted=_ T}', "");
Expect(1, 106, '\P{^Is_Soft_Dotted=_ T}', "");
Expect(0, 104, '\p{Is_Soft_Dotted=_ T}', "");
Expect(1, 104, '\p{^Is_Soft_Dotted=_ T}', "");
Expect(1, 104, '\P{Is_Soft_Dotted=_ T}', "");
Expect(0, 104, '\P{^Is_Soft_Dotted=_ T}', "");
Error('\p{Is_SD:	 -True:=}');
Error('\P{Is_SD:	 -True:=}');
Expect(1, 106, '\p{Is_SD=true}', "");
Expect(0, 106, '\p{^Is_SD=true}', "");
Expect(0, 106, '\P{Is_SD=true}', "");
Expect(1, 106, '\P{^Is_SD=true}', "");
Expect(0, 104, '\p{Is_SD=true}', "");
Expect(1, 104, '\p{^Is_SD=true}', "");
Expect(1, 104, '\P{Is_SD=true}', "");
Expect(0, 104, '\P{^Is_SD=true}', "");
Expect(1, 106, '\p{Is_SD=		True}', "");
Expect(0, 106, '\p{^Is_SD=		True}', "");
Expect(0, 106, '\P{Is_SD=		True}', "");
Expect(1, 106, '\P{^Is_SD=		True}', "");
Expect(0, 104, '\p{Is_SD=		True}', "");
Expect(1, 104, '\p{^Is_SD=		True}', "");
Expect(1, 104, '\P{Is_SD=		True}', "");
Expect(0, 104, '\P{^Is_SD=		True}', "");
Error('\p{Soft_Dotted=-/a/no}');
Error('\P{Soft_Dotted=-/a/no}');
Expect(1, 104, '\p{Soft_Dotted=no}', "");
Expect(0, 104, '\p{^Soft_Dotted=no}', "");
Expect(0, 104, '\P{Soft_Dotted=no}', "");
Expect(1, 104, '\P{^Soft_Dotted=no}', "");
Expect(0, 106, '\p{Soft_Dotted=no}', "");
Expect(1, 106, '\p{^Soft_Dotted=no}', "");
Expect(1, 106, '\P{Soft_Dotted=no}', "");
Expect(0, 106, '\P{^Soft_Dotted=no}', "");
Expect(1, 104, '\p{Soft_Dotted=_-NO}', "");
Expect(0, 104, '\p{^Soft_Dotted=_-NO}', "");
Expect(0, 104, '\P{Soft_Dotted=_-NO}', "");
Expect(1, 104, '\P{^Soft_Dotted=_-NO}', "");
Expect(0, 106, '\p{Soft_Dotted=_-NO}', "");
Expect(1, 106, '\p{^Soft_Dotted=_-NO}', "");
Expect(1, 106, '\P{Soft_Dotted=_-NO}', "");
Expect(0, 106, '\P{^Soft_Dotted=_-NO}', "");
Error('\p{SD=:= n}');
Error('\P{SD=:= n}');
Expect(1, 104, '\p{SD=n}', "");
Expect(0, 104, '\p{^SD=n}', "");
Expect(0, 104, '\P{SD=n}', "");
Expect(1, 104, '\P{^SD=n}', "");
Expect(0, 106, '\p{SD=n}', "");
Expect(1, 106, '\p{^SD=n}', "");
Expect(1, 106, '\P{SD=n}', "");
Expect(0, 106, '\P{^SD=n}', "");
Expect(1, 104, '\p{SD:	- n}', "");
Expect(0, 104, '\p{^SD:	- n}', "");
Expect(0, 104, '\P{SD:	- n}', "");
Expect(1, 104, '\P{^SD:	- n}', "");
Expect(0, 106, '\p{SD:	- n}', "");
Expect(1, 106, '\p{^SD:	- n}', "");
Expect(1, 106, '\P{SD:	- n}', "");
Expect(0, 106, '\P{^SD:	- n}', "");
Error('\p{Is_Soft_Dotted=	 F/a/}');
Error('\P{Is_Soft_Dotted=	 F/a/}');
Expect(1, 104, '\p{Is_Soft_Dotted=f}', "");
Expect(0, 104, '\p{^Is_Soft_Dotted=f}', "");
Expect(0, 104, '\P{Is_Soft_Dotted=f}', "");
Expect(1, 104, '\P{^Is_Soft_Dotted=f}', "");
Expect(0, 106, '\p{Is_Soft_Dotted=f}', "");
Expect(1, 106, '\p{^Is_Soft_Dotted=f}', "");
Expect(1, 106, '\P{Is_Soft_Dotted=f}', "");
Expect(0, 106, '\P{^Is_Soft_Dotted=f}', "");
Expect(1, 104, '\p{Is_Soft_Dotted=-	f}', "");
Expect(0, 104, '\p{^Is_Soft_Dotted=-	f}', "");
Expect(0, 104, '\P{Is_Soft_Dotted=-	f}', "");
Expect(1, 104, '\P{^Is_Soft_Dotted=-	f}', "");
Expect(0, 106, '\p{Is_Soft_Dotted=-	f}', "");
Expect(1, 106, '\p{^Is_Soft_Dotted=-	f}', "");
Expect(1, 106, '\P{Is_Soft_Dotted=-	f}', "");
Expect(0, 106, '\P{^Is_Soft_Dotted=-	f}', "");
Error('\p{Is_SD=		false/a/}');
Error('\P{Is_SD=		false/a/}');
Expect(1, 104, '\p{Is_SD=false}', "");
Expect(0, 104, '\p{^Is_SD=false}', "");
Expect(0, 104, '\P{Is_SD=false}', "");
Expect(1, 104, '\P{^Is_SD=false}', "");
Expect(0, 106, '\p{Is_SD=false}', "");
Expect(1, 106, '\p{^Is_SD=false}', "");
Expect(1, 106, '\P{Is_SD=false}', "");
Expect(0, 106, '\P{^Is_SD=false}', "");
Expect(1, 104, '\p{Is_SD=	False}', "");
Expect(0, 104, '\p{^Is_SD=	False}', "");
Expect(0, 104, '\P{Is_SD=	False}', "");
Expect(1, 104, '\P{^Is_SD=	False}', "");
Expect(0, 106, '\p{Is_SD=	False}', "");
Expect(1, 106, '\p{^Is_SD=	False}', "");
Expect(1, 106, '\P{Is_SD=	False}', "");
Expect(0, 106, '\P{^Is_SD=	False}', "");
Error('\p{Other_ID_Start=/a/ yes}');
Error('\P{Other_ID_Start=/a/ yes}');
Expect(1, 8472, '\p{Other_ID_Start=yes}', 'deprecated');
Expect(0, 8472, '\p{^Other_ID_Start=yes}', 'deprecated');
Expect(0, 8472, '\P{Other_ID_Start=yes}', 'deprecated');
Expect(1, 8472, '\P{^Other_ID_Start=yes}', 'deprecated');
Expect(0, 8471, '\p{Other_ID_Start=yes}', 'deprecated');
Expect(1, 8471, '\p{^Other_ID_Start=yes}', 'deprecated');
Expect(1, 8471, '\P{Other_ID_Start=yes}', 'deprecated');
Expect(0, 8471, '\P{^Other_ID_Start=yes}', 'deprecated');
Expect(1, 8472, '\p{Other_ID_Start=	-Yes}', 'deprecated');
Expect(0, 8472, '\p{^Other_ID_Start=	-Yes}', 'deprecated');
Expect(0, 8472, '\P{Other_ID_Start=	-Yes}', 'deprecated');
Expect(1, 8472, '\P{^Other_ID_Start=	-Yes}', 'deprecated');
Expect(0, 8471, '\p{Other_ID_Start=	-Yes}', 'deprecated');
Expect(1, 8471, '\p{^Other_ID_Start=	-Yes}', 'deprecated');
Expect(1, 8471, '\P{Other_ID_Start=	-Yes}', 'deprecated');
Expect(0, 8471, '\P{^Other_ID_Start=	-Yes}', 'deprecated');
Error('\p{OIDS= /a/Y}');
Error('\P{OIDS= /a/Y}');
Expect(1, 8472, '\p{OIDS=y}', 'deprecated');
Expect(0, 8472, '\p{^OIDS=y}', 'deprecated');
Expect(0, 8472, '\P{OIDS=y}', 'deprecated');
Expect(1, 8472, '\P{^OIDS=y}', 'deprecated');
Expect(0, 8471, '\p{OIDS=y}', 'deprecated');
Expect(1, 8471, '\p{^OIDS=y}', 'deprecated');
Expect(1, 8471, '\P{OIDS=y}', 'deprecated');
Expect(0, 8471, '\P{^OIDS=y}', 'deprecated');
Expect(1, 8472, '\p{OIDS=_Y}', 'deprecated');
Expect(0, 8472, '\p{^OIDS=_Y}', 'deprecated');
Expect(0, 8472, '\P{OIDS=_Y}', 'deprecated');
Expect(1, 8472, '\P{^OIDS=_Y}', 'deprecated');
Expect(0, 8471, '\p{OIDS=_Y}', 'deprecated');
Expect(1, 8471, '\p{^OIDS=_Y}', 'deprecated');
Expect(1, 8471, '\P{OIDS=_Y}', 'deprecated');
Expect(0, 8471, '\P{^OIDS=_Y}', 'deprecated');
Error('\p{Is_Other_ID_Start=/a/_T}');
Error('\P{Is_Other_ID_Start=/a/_T}');
Expect(1, 8472, '\p{Is_Other_ID_Start=t}', 'deprecated');
Expect(0, 8472, '\p{^Is_Other_ID_Start=t}', 'deprecated');
Expect(0, 8472, '\P{Is_Other_ID_Start=t}', 'deprecated');
Expect(1, 8472, '\P{^Is_Other_ID_Start=t}', 'deprecated');
Expect(0, 8471, '\p{Is_Other_ID_Start=t}', 'deprecated');
Expect(1, 8471, '\p{^Is_Other_ID_Start=t}', 'deprecated');
Expect(1, 8471, '\P{Is_Other_ID_Start=t}', 'deprecated');
Expect(0, 8471, '\P{^Is_Other_ID_Start=t}', 'deprecated');
Expect(1, 8472, '\p{Is_Other_ID_Start=_t}', 'deprecated');
Expect(0, 8472, '\p{^Is_Other_ID_Start=_t}', 'deprecated');
Expect(0, 8472, '\P{Is_Other_ID_Start=_t}', 'deprecated');
Expect(1, 8472, '\P{^Is_Other_ID_Start=_t}', 'deprecated');
Expect(0, 8471, '\p{Is_Other_ID_Start=_t}', 'deprecated');
Expect(1, 8471, '\p{^Is_Other_ID_Start=_t}', 'deprecated');
Expect(1, 8471, '\P{Is_Other_ID_Start=_t}', 'deprecated');
Expect(0, 8471, '\P{^Is_Other_ID_Start=_t}', 'deprecated');
Error('\p{Is_OIDS::=-_True}');
Error('\P{Is_OIDS::=-_True}');
Expect(1, 8472, '\p{Is_OIDS=true}', 'deprecated');
Expect(0, 8472, '\p{^Is_OIDS=true}', 'deprecated');
Expect(0, 8472, '\P{Is_OIDS=true}', 'deprecated');
Expect(1, 8472, '\P{^Is_OIDS=true}', 'deprecated');
Expect(0, 8471, '\p{Is_OIDS=true}', 'deprecated');
Expect(1, 8471, '\p{^Is_OIDS=true}', 'deprecated');
Expect(1, 8471, '\P{Is_OIDS=true}', 'deprecated');
Expect(0, 8471, '\P{^Is_OIDS=true}', 'deprecated');
Expect(1, 8472, '\p{Is_OIDS=_True}', 'deprecated');
Expect(0, 8472, '\p{^Is_OIDS=_True}', 'deprecated');
Expect(0, 8472, '\P{Is_OIDS=_True}', 'deprecated');
Expect(1, 8472, '\P{^Is_OIDS=_True}', 'deprecated');
Expect(0, 8471, '\p{Is_OIDS=_True}', 'deprecated');
Expect(1, 8471, '\p{^Is_OIDS=_True}', 'deprecated');
Expect(1, 8471, '\P{Is_OIDS=_True}', 'deprecated');
Expect(0, 8471, '\P{^Is_OIDS=_True}', 'deprecated');
Error('\p{Other_ID_Start=_No/a/}');
Error('\P{Other_ID_Start=_No/a/}');
Expect(1, 8471, '\p{Other_ID_Start=no}', 'deprecated');
Expect(0, 8471, '\p{^Other_ID_Start=no}', 'deprecated');
Expect(0, 8471, '\P{Other_ID_Start=no}', 'deprecated');
Expect(1, 8471, '\P{^Other_ID_Start=no}', 'deprecated');
Expect(0, 8472, '\p{Other_ID_Start=no}', 'deprecated');
Expect(1, 8472, '\p{^Other_ID_Start=no}', 'deprecated');
Expect(1, 8472, '\P{Other_ID_Start=no}', 'deprecated');
Expect(0, 8472, '\P{^Other_ID_Start=no}', 'deprecated');
Expect(1, 8471, '\p{Other_ID_Start=-NO}', 'deprecated');
Expect(0, 8471, '\p{^Other_ID_Start=-NO}', 'deprecated');
Expect(0, 8471, '\P{Other_ID_Start=-NO}', 'deprecated');
Expect(1, 8471, '\P{^Other_ID_Start=-NO}', 'deprecated');
Expect(0, 8472, '\p{Other_ID_Start=-NO}', 'deprecated');
Expect(1, 8472, '\p{^Other_ID_Start=-NO}', 'deprecated');
Expect(1, 8472, '\P{Other_ID_Start=-NO}', 'deprecated');
Expect(0, 8472, '\P{^Other_ID_Start=-NO}', 'deprecated');
Error('\p{OIDS= 	N:=}');
Error('\P{OIDS= 	N:=}');
Expect(1, 8471, '\p{OIDS=n}', 'deprecated');
Expect(0, 8471, '\p{^OIDS=n}', 'deprecated');
Expect(0, 8471, '\P{OIDS=n}', 'deprecated');
Expect(1, 8471, '\P{^OIDS=n}', 'deprecated');
Expect(0, 8472, '\p{OIDS=n}', 'deprecated');
Expect(1, 8472, '\p{^OIDS=n}', 'deprecated');
Expect(1, 8472, '\P{OIDS=n}', 'deprecated');
Expect(0, 8472, '\P{^OIDS=n}', 'deprecated');
Expect(1, 8471, '\p{OIDS=	_N}', 'deprecated');
Expect(0, 8471, '\p{^OIDS=	_N}', 'deprecated');
Expect(0, 8471, '\P{OIDS=	_N}', 'deprecated');
Expect(1, 8471, '\P{^OIDS=	_N}', 'deprecated');
Expect(0, 8472, '\p{OIDS=	_N}', 'deprecated');
Expect(1, 8472, '\p{^OIDS=	_N}', 'deprecated');
Expect(1, 8472, '\P{OIDS=	_N}', 'deprecated');
Expect(0, 8472, '\P{^OIDS=	_N}', 'deprecated');
Error('\p{Is_Other_ID_Start=	-F/a/}');
Error('\P{Is_Other_ID_Start=	-F/a/}');
Expect(1, 8471, '\p{Is_Other_ID_Start=f}', 'deprecated');
Expect(0, 8471, '\p{^Is_Other_ID_Start=f}', 'deprecated');
Expect(0, 8471, '\P{Is_Other_ID_Start=f}', 'deprecated');
Expect(1, 8471, '\P{^Is_Other_ID_Start=f}', 'deprecated');
Expect(0, 8472, '\p{Is_Other_ID_Start=f}', 'deprecated');
Expect(1, 8472, '\p{^Is_Other_ID_Start=f}', 'deprecated');
Expect(1, 8472, '\P{Is_Other_ID_Start=f}', 'deprecated');
Expect(0, 8472, '\P{^Is_Other_ID_Start=f}', 'deprecated');
Expect(1, 8471, '\p{Is_Other_ID_Start=	F}', 'deprecated');
Expect(0, 8471, '\p{^Is_Other_ID_Start=	F}', 'deprecated');
Expect(0, 8471, '\P{Is_Other_ID_Start=	F}', 'deprecated');
Expect(1, 8471, '\P{^Is_Other_ID_Start=	F}', 'deprecated');
Expect(0, 8472, '\p{Is_Other_ID_Start=	F}', 'deprecated');
Expect(1, 8472, '\p{^Is_Other_ID_Start=	F}', 'deprecated');
Expect(1, 8472, '\P{Is_Other_ID_Start=	F}', 'deprecated');
Expect(0, 8472, '\P{^Is_Other_ID_Start=	F}', 'deprecated');
Error('\p{Is_OIDS=:=-	false}');
Error('\P{Is_OIDS=:=-	false}');
Expect(1, 8471, '\p{Is_OIDS:false}', 'deprecated');
Expect(0, 8471, '\p{^Is_OIDS:false}', 'deprecated');
Expect(0, 8471, '\P{Is_OIDS:false}', 'deprecated');
Expect(1, 8471, '\P{^Is_OIDS:false}', 'deprecated');
Expect(0, 8472, '\p{Is_OIDS:false}', 'deprecated');
Expect(1, 8472, '\p{^Is_OIDS:false}', 'deprecated');
Expect(1, 8472, '\P{Is_OIDS:false}', 'deprecated');
Expect(0, 8472, '\P{^Is_OIDS:false}', 'deprecated');
Expect(1, 8471, '\p{Is_OIDS=-_false}', 'deprecated');
Expect(0, 8471, '\p{^Is_OIDS=-_false}', 'deprecated');
Expect(0, 8471, '\P{Is_OIDS=-_false}', 'deprecated');
Expect(1, 8471, '\P{^Is_OIDS=-_false}', 'deprecated');
Expect(0, 8472, '\p{Is_OIDS=-_false}', 'deprecated');
Expect(1, 8472, '\p{^Is_OIDS=-_false}', 'deprecated');
Expect(1, 8472, '\P{Is_OIDS=-_false}', 'deprecated');
Expect(0, 8472, '\P{^Is_OIDS=-_false}', 'deprecated');
Error('\p{Grapheme_Base=/a/ 	YES}');
Error('\P{Grapheme_Base=/a/ 	YES}');
Expect(1, 126, '\p{Grapheme_Base=yes}', "");
Expect(0, 126, '\p{^Grapheme_Base=yes}', "");
Expect(0, 126, '\P{Grapheme_Base=yes}', "");
Expect(1, 126, '\P{^Grapheme_Base=yes}', "");
Expect(0, 31, '\p{Grapheme_Base=yes}', "");
Expect(1, 31, '\p{^Grapheme_Base=yes}', "");
Expect(1, 31, '\P{Grapheme_Base=yes}', "");
Expect(0, 31, '\P{^Grapheme_Base=yes}', "");
Expect(1, 126, '\p{Grapheme_Base=-	Yes}', "");
Expect(0, 126, '\p{^Grapheme_Base=-	Yes}', "");
Expect(0, 126, '\P{Grapheme_Base=-	Yes}', "");
Expect(1, 126, '\P{^Grapheme_Base=-	Yes}', "");
Expect(0, 31, '\p{Grapheme_Base=-	Yes}', "");
Expect(1, 31, '\p{^Grapheme_Base=-	Yes}', "");
Expect(1, 31, '\P{Grapheme_Base=-	Yes}', "");
Expect(0, 31, '\P{^Grapheme_Base=-	Yes}', "");
Error('\p{Gr_Base= :=y}');
Error('\P{Gr_Base= :=y}');
Expect(1, 126, '\p{Gr_Base=y}', "");
Expect(0, 126, '\p{^Gr_Base=y}', "");
Expect(0, 126, '\P{Gr_Base=y}', "");
Expect(1, 126, '\P{^Gr_Base=y}', "");
Expect(0, 31, '\p{Gr_Base=y}', "");
Expect(1, 31, '\p{^Gr_Base=y}', "");
Expect(1, 31, '\P{Gr_Base=y}', "");
Expect(0, 31, '\P{^Gr_Base=y}', "");
Expect(1, 126, '\p{Gr_Base=-	Y}', "");
Expect(0, 126, '\p{^Gr_Base=-	Y}', "");
Expect(0, 126, '\P{Gr_Base=-	Y}', "");
Expect(1, 126, '\P{^Gr_Base=-	Y}', "");
Expect(0, 31, '\p{Gr_Base=-	Y}', "");
Expect(1, 31, '\p{^Gr_Base=-	Y}', "");
Expect(1, 31, '\P{Gr_Base=-	Y}', "");
Expect(0, 31, '\P{^Gr_Base=-	Y}', "");
Error('\p{Is_Grapheme_Base:  t/a/}');
Error('\P{Is_Grapheme_Base:  t/a/}');
Expect(1, 126, '\p{Is_Grapheme_Base=t}', "");
Expect(0, 126, '\p{^Is_Grapheme_Base=t}', "");
Expect(0, 126, '\P{Is_Grapheme_Base=t}', "");
Expect(1, 126, '\P{^Is_Grapheme_Base=t}', "");
Expect(0, 31, '\p{Is_Grapheme_Base=t}', "");
Expect(1, 31, '\p{^Is_Grapheme_Base=t}', "");
Expect(1, 31, '\P{Is_Grapheme_Base=t}', "");
Expect(0, 31, '\P{^Is_Grapheme_Base=t}', "");
Expect(1, 126, '\p{Is_Grapheme_Base=	 T}', "");
Expect(0, 126, '\p{^Is_Grapheme_Base=	 T}', "");
Expect(0, 126, '\P{Is_Grapheme_Base=	 T}', "");
Expect(1, 126, '\P{^Is_Grapheme_Base=	 T}', "");
Expect(0, 31, '\p{Is_Grapheme_Base=	 T}', "");
Expect(1, 31, '\p{^Is_Grapheme_Base=	 T}', "");
Expect(1, 31, '\P{Is_Grapheme_Base=	 T}', "");
Expect(0, 31, '\P{^Is_Grapheme_Base=	 T}', "");
Error('\p{Is_Gr_Base=	:=TRUE}');
Error('\P{Is_Gr_Base=	:=TRUE}');
Expect(1, 126, '\p{Is_Gr_Base=true}', "");
Expect(0, 126, '\p{^Is_Gr_Base=true}', "");
Expect(0, 126, '\P{Is_Gr_Base=true}', "");
Expect(1, 126, '\P{^Is_Gr_Base=true}', "");
Expect(0, 31, '\p{Is_Gr_Base=true}', "");
Expect(1, 31, '\p{^Is_Gr_Base=true}', "");
Expect(1, 31, '\P{Is_Gr_Base=true}', "");
Expect(0, 31, '\P{^Is_Gr_Base=true}', "");
Expect(1, 126, '\p{Is_Gr_Base=True}', "");
Expect(0, 126, '\p{^Is_Gr_Base=True}', "");
Expect(0, 126, '\P{Is_Gr_Base=True}', "");
Expect(1, 126, '\P{^Is_Gr_Base=True}', "");
Expect(0, 31, '\p{Is_Gr_Base=True}', "");
Expect(1, 31, '\p{^Is_Gr_Base=True}', "");
Expect(1, 31, '\P{Is_Gr_Base=True}', "");
Expect(0, 31, '\P{^Is_Gr_Base=True}', "");
Error('\p{Grapheme_Base=	-NO:=}');
Error('\P{Grapheme_Base=	-NO:=}');
Expect(1, 31, '\p{Grapheme_Base=no}', "");
Expect(0, 31, '\p{^Grapheme_Base=no}', "");
Expect(0, 31, '\P{Grapheme_Base=no}', "");
Expect(1, 31, '\P{^Grapheme_Base=no}', "");
Expect(0, 126, '\p{Grapheme_Base=no}', "");
Expect(1, 126, '\p{^Grapheme_Base=no}', "");
Expect(1, 126, '\P{Grapheme_Base=no}', "");
Expect(0, 126, '\P{^Grapheme_Base=no}', "");
Expect(1, 31, '\p{Grapheme_Base=NO}', "");
Expect(0, 31, '\p{^Grapheme_Base=NO}', "");
Expect(0, 31, '\P{Grapheme_Base=NO}', "");
Expect(1, 31, '\P{^Grapheme_Base=NO}', "");
Expect(0, 126, '\p{Grapheme_Base=NO}', "");
Expect(1, 126, '\p{^Grapheme_Base=NO}', "");
Expect(1, 126, '\P{Grapheme_Base=NO}', "");
Expect(0, 126, '\P{^Grapheme_Base=NO}', "");
Error('\p{Gr_Base=:=_ N}');
Error('\P{Gr_Base=:=_ N}');
Expect(1, 31, '\p{Gr_Base: n}', "");
Expect(0, 31, '\p{^Gr_Base: n}', "");
Expect(0, 31, '\P{Gr_Base: n}', "");
Expect(1, 31, '\P{^Gr_Base: n}', "");
Expect(0, 126, '\p{Gr_Base: n}', "");
Expect(1, 126, '\p{^Gr_Base: n}', "");
Expect(1, 126, '\P{Gr_Base: n}', "");
Expect(0, 126, '\P{^Gr_Base: n}', "");
Expect(1, 31, '\p{Gr_Base=	-n}', "");
Expect(0, 31, '\p{^Gr_Base=	-n}', "");
Expect(0, 31, '\P{Gr_Base=	-n}', "");
Expect(1, 31, '\P{^Gr_Base=	-n}', "");
Expect(0, 126, '\p{Gr_Base=	-n}', "");
Expect(1, 126, '\p{^Gr_Base=	-n}', "");
Expect(1, 126, '\P{Gr_Base=	-n}', "");
Expect(0, 126, '\P{^Gr_Base=	-n}', "");
Error('\p{Is_Grapheme_Base= F:=}');
Error('\P{Is_Grapheme_Base= F:=}');
Expect(1, 31, '\p{Is_Grapheme_Base=f}', "");
Expect(0, 31, '\p{^Is_Grapheme_Base=f}', "");
Expect(0, 31, '\P{Is_Grapheme_Base=f}', "");
Expect(1, 31, '\P{^Is_Grapheme_Base=f}', "");
Expect(0, 126, '\p{Is_Grapheme_Base=f}', "");
Expect(1, 126, '\p{^Is_Grapheme_Base=f}', "");
Expect(1, 126, '\P{Is_Grapheme_Base=f}', "");
Expect(0, 126, '\P{^Is_Grapheme_Base=f}', "");
Expect(1, 31, '\p{Is_Grapheme_Base=	 F}', "");
Expect(0, 31, '\p{^Is_Grapheme_Base=	 F}', "");
Expect(0, 31, '\P{Is_Grapheme_Base=	 F}', "");
Expect(1, 31, '\P{^Is_Grapheme_Base=	 F}', "");
Expect(0, 126, '\p{Is_Grapheme_Base=	 F}', "");
Expect(1, 126, '\p{^Is_Grapheme_Base=	 F}', "");
Expect(1, 126, '\P{Is_Grapheme_Base=	 F}', "");
Expect(0, 126, '\P{^Is_Grapheme_Base=	 F}', "");
Error('\p{Is_Gr_Base=	False:=}');
Error('\P{Is_Gr_Base=	False:=}');
Expect(1, 31, '\p{Is_Gr_Base=false}', "");
Expect(0, 31, '\p{^Is_Gr_Base=false}', "");
Expect(0, 31, '\P{Is_Gr_Base=false}', "");
Expect(1, 31, '\P{^Is_Gr_Base=false}', "");
Expect(0, 126, '\p{Is_Gr_Base=false}', "");
Expect(1, 126, '\p{^Is_Gr_Base=false}', "");
Expect(1, 126, '\P{Is_Gr_Base=false}', "");
Expect(0, 126, '\P{^Is_Gr_Base=false}', "");
Expect(1, 31, '\p{Is_Gr_Base=  False}', "");
Expect(0, 31, '\p{^Is_Gr_Base=  False}', "");
Expect(0, 31, '\P{Is_Gr_Base=  False}', "");
Expect(1, 31, '\P{^Is_Gr_Base=  False}', "");
Expect(0, 126, '\p{Is_Gr_Base=  False}', "");
Expect(1, 126, '\p{^Is_Gr_Base=  False}', "");
Expect(1, 126, '\P{Is_Gr_Base=  False}', "");
Expect(0, 126, '\P{^Is_Gr_Base=  False}', "");
Error('\p{Numeric_Value=	/a/0	0 0	0_0 00033}');
Error('\P{Numeric_Value=	/a/0	0 0	0_0 00033}');
Expect(1, 12893, '\p{Numeric_Value=000033}', "");
Expect(0, 12893, '\p{^Numeric_Value=000033}', "");
Expect(0, 12893, '\P{Numeric_Value=000033}', "");
Expect(1, 12893, '\P{^Numeric_Value=000033}', "");
Expect(0, 12892, '\p{Numeric_Value=000033}', "");
Expect(1, 12892, '\p{^Numeric_Value=000033}', "");
Expect(1, 12892, '\P{Numeric_Value=000033}', "");
Expect(0, 12892, '\P{^Numeric_Value=000033}', "");
Error('\p{Nv=:=__+00000033}');
Error('\P{Nv=:=__+00000033}');
Expect(1, 12893, '\p{Nv=0000033}', "");
Expect(0, 12893, '\p{^Nv=0000033}', "");
Expect(0, 12893, '\P{Nv=0000033}', "");
Expect(1, 12893, '\P{^Nv=0000033}', "");
Expect(0, 12892, '\p{Nv=0000033}', "");
Expect(1, 12892, '\p{^Nv=0000033}', "");
Expect(1, 12892, '\P{Nv=0000033}', "");
Expect(0, 12892, '\P{^Nv=0000033}', "");
Error('\p{Is_Numeric_Value= -00-00:=00 0003	3}');
Error('\P{Is_Numeric_Value= -00-00:=00 0003	3}');
Expect(1, 12893, '\p{Is_Numeric_Value=0000033}', "");
Expect(0, 12893, '\p{^Is_Numeric_Value=0000033}', "");
Expect(0, 12893, '\P{Is_Numeric_Value=0000033}', "");
Expect(1, 12893, '\P{^Is_Numeric_Value=0000033}', "");
Expect(0, 12892, '\p{Is_Numeric_Value=0000033}', "");
Expect(1, 12892, '\p{^Is_Numeric_Value=0000033}', "");
Expect(1, 12892, '\P{Is_Numeric_Value=0000033}', "");
Expect(0, 12892, '\P{^Is_Numeric_Value=0000033}', "");
Error('\p{Is_Nv= 00-00-00	00/a/33}');
Error('\P{Is_Nv= 00-00-00	00/a/33}');
Expect(1, 12893, '\p{Is_Nv=00000033}', "");
Expect(0, 12893, '\p{^Is_Nv=00000033}', "");
Expect(0, 12893, '\P{Is_Nv=00000033}', "");
Expect(1, 12893, '\P{^Is_Nv=00000033}', "");
Expect(0, 12892, '\p{Is_Nv=00000033}', "");
Expect(1, 12892, '\p{^Is_Nv=00000033}', "");
Expect(1, 12892, '\P{Is_Nv=00000033}', "");
Expect(0, 12892, '\P{^Is_Nv=00000033}', "");
Error('\p{Numeric_Value=	:=+000032}');
Error('\P{Numeric_Value=	:=+000032}');
Expect(1, 12892, '\p{Numeric_Value=+0000032}', "");
Expect(0, 12892, '\p{^Numeric_Value=+0000032}', "");
Expect(0, 12892, '\P{Numeric_Value=+0000032}', "");
Expect(1, 12892, '\P{^Numeric_Value=+0000032}', "");
Expect(0, 12891, '\p{Numeric_Value=+0000032}', "");
Expect(1, 12891, '\p{^Numeric_Value=+0000032}', "");
Expect(1, 12891, '\P{Numeric_Value=+0000032}', "");
Expect(0, 12891, '\P{^Numeric_Value=+0000032}', "");
Error('\p{Nv= /a/0-0	0032}');
Error('\P{Nv= /a/0-0	0032}');
Expect(1, 12892, '\p{Nv=032}', "");
Expect(0, 12892, '\p{^Nv=032}', "");
Expect(0, 12892, '\P{Nv=032}', "");
Expect(1, 12892, '\P{^Nv=032}', "");
Expect(0, 12891, '\p{Nv=032}', "");
Expect(1, 12891, '\p{^Nv=032}', "");
Expect(1, 12891, '\P{Nv=032}', "");
Expect(0, 12891, '\P{^Nv=032}', "");
Error('\p{Is_Numeric_Value=_0-0-00:=0	032}');
Error('\P{Is_Numeric_Value=_0-0-00:=0	032}');
Expect(1, 12892, '\p{Is_Numeric_Value=3_2}', "");
Expect(0, 12892, '\p{^Is_Numeric_Value=3_2}', "");
Expect(0, 12892, '\P{Is_Numeric_Value=3_2}', "");
Expect(1, 12892, '\P{^Is_Numeric_Value=3_2}', "");
Expect(0, 12891, '\p{Is_Numeric_Value=3_2}', "");
Expect(1, 12891, '\p{^Is_Numeric_Value=3_2}', "");
Expect(1, 12891, '\P{Is_Numeric_Value=3_2}', "");
Expect(0, 12891, '\P{^Is_Numeric_Value=3_2}', "");
Error('\p{Is_Nv=000_000	32/a/}');
Error('\P{Is_Nv=000_000	32/a/}');
Expect(1, 12892, '\p{Is_Nv=+03_2}', "");
Expect(0, 12892, '\p{^Is_Nv=+03_2}', "");
Expect(0, 12892, '\P{Is_Nv=+03_2}', "");
Expect(1, 12892, '\P{^Is_Nv=+03_2}', "");
Expect(0, 12891, '\p{Is_Nv=+03_2}', "");
Expect(1, 12891, '\p{^Is_Nv=+03_2}', "");
Expect(1, 12891, '\P{Is_Nv=+03_2}', "");
Expect(0, 12891, '\P{^Is_Nv=+03_2}', "");
Error('\p{Numeric_Value=/a/ 000003/000000016}');
Error('\P{Numeric_Value=/a/ 000003/000000016}');
Expect(1, 2550, '\p{Numeric_Value=+000003/00016}', "");
Expect(0, 2550, '\p{^Numeric_Value=+000003/00016}', "");
Expect(0, 2550, '\P{Numeric_Value=+000003/00016}', "");
Expect(1, 2550, '\P{^Numeric_Value=+000003/00016}', "");
Expect(0, 2549, '\p{Numeric_Value=+000003/00016}', "");
Expect(1, 2549, '\p{^Numeric_Value=+000003/00016}', "");
Expect(1, 2549, '\P{Numeric_Value=+000003/00016}', "");
Expect(0, 2549, '\P{^Numeric_Value=+000003/00016}', "");
Error('\p{Numeric_Value=0.19}');
Error('\P{Numeric_Value=0.19}');
Expect(1, 2550, '\p{Numeric_Value=0.188}', "");
Expect(0, 2550, '\p{^Numeric_Value=0.188}', "");
Expect(0, 2550, '\P{Numeric_Value=0.188}', "");
Expect(1, 2550, '\P{^Numeric_Value=0.188}', "");
Expect(0, 2549, '\p{Numeric_Value=0.188}', "");
Expect(1, 2549, '\p{^Numeric_Value=0.188}', "");
Expect(1, 2549, '\P{Numeric_Value=0.188}', "");
Expect(0, 2549, '\P{^Numeric_Value=0.188}', "");
Error('\p{Nv=		+03/0000000016/a/}');
Error('\P{Nv=		+03/0000000016/a/}');
Expect(1, 2550, '\p{Nv=0003/0000000016}', "");
Expect(0, 2550, '\p{^Nv=0003/0000000016}', "");
Expect(0, 2550, '\P{Nv=0003/0000000016}', "");
Expect(1, 2550, '\P{^Nv=0003/0000000016}', "");
Expect(0, 2549, '\p{Nv=0003/0000000016}', "");
Expect(1, 2549, '\p{^Nv=0003/0000000016}', "");
Expect(1, 2549, '\P{Nv=0003/0000000016}', "");
Expect(0, 2549, '\P{^Nv=0003/0000000016}', "");
Error('\p{Nv=0.19}');
Error('\P{Nv=0.19}');
Expect(1, 2550, '\p{Nv=0.188}', "");
Expect(0, 2550, '\p{^Nv=0.188}', "");
Expect(0, 2550, '\P{Nv=0.188}', "");
Expect(1, 2550, '\P{^Nv=0.188}', "");
Expect(0, 2549, '\p{Nv=0.188}', "");
Expect(1, 2549, '\p{^Nv=0.188}', "");
Expect(1, 2549, '\P{Nv=0.188}', "");
Expect(0, 2549, '\P{^Nv=0.188}', "");
Error('\p{Is_Numeric_Value=	0000000003/00000016/a/}');
Error('\P{Is_Numeric_Value=	0000000003/00000016/a/}');
Expect(1, 2550, '\p{Is_Numeric_Value=000000003/00000000016}', "");
Expect(0, 2550, '\p{^Is_Numeric_Value=000000003/00000000016}', "");
Expect(0, 2550, '\P{Is_Numeric_Value=000000003/00000000016}', "");
Expect(1, 2550, '\P{^Is_Numeric_Value=000000003/00000000016}', "");
Expect(0, 2549, '\p{Is_Numeric_Value=000000003/00000000016}', "");
Expect(1, 2549, '\p{^Is_Numeric_Value=000000003/00000000016}', "");
Expect(1, 2549, '\P{Is_Numeric_Value=000000003/00000000016}', "");
Expect(0, 2549, '\P{^Is_Numeric_Value=000000003/00000000016}', "");
Error('\p{Is_Numeric_Value=0.19}');
Error('\P{Is_Numeric_Value=0.19}');
Expect(1, 2550, '\p{Is_Numeric_Value=0.188}', "");
Expect(0, 2550, '\p{^Is_Numeric_Value=0.188}', "");
Expect(0, 2550, '\P{Is_Numeric_Value=0.188}', "");
Expect(1, 2550, '\P{^Is_Numeric_Value=0.188}', "");
Expect(0, 2549, '\p{Is_Numeric_Value=0.188}', "");
Expect(1, 2549, '\p{^Is_Numeric_Value=0.188}', "");
Expect(1, 2549, '\P{Is_Numeric_Value=0.188}', "");
Expect(0, 2549, '\P{^Is_Numeric_Value=0.188}', "");
Error('\p{Is_Nv=:=--3/000016}');
Error('\P{Is_Nv=:=--3/000016}');
Expect(1, 2550, '\p{Is_Nv=+003/0000000016}', "");
Expect(0, 2550, '\p{^Is_Nv=+003/0000000016}', "");
Expect(0, 2550, '\P{Is_Nv=+003/0000000016}', "");
Expect(1, 2550, '\P{^Is_Nv=+003/0000000016}', "");
Expect(0, 2549, '\p{Is_Nv=+003/0000000016}', "");
Expect(1, 2549, '\p{^Is_Nv=+003/0000000016}', "");
Expect(1, 2549, '\P{Is_Nv=+003/0000000016}', "");
Expect(0, 2549, '\P{^Is_Nv=+003/0000000016}', "");
Error('\p{Is_Nv=0.19}');
Error('\P{Is_Nv=0.19}');
Expect(1, 2550, '\p{Is_Nv: 0.188}', "");
Expect(0, 2550, '\p{^Is_Nv: 0.188}', "");
Expect(0, 2550, '\P{Is_Nv: 0.188}', "");
Expect(1, 2550, '\P{^Is_Nv: 0.188}', "");
Expect(0, 2549, '\p{Is_Nv: 0.188}', "");
Expect(1, 2549, '\p{^Is_Nv: 0.188}', "");
Expect(1, 2549, '\P{Is_Nv: 0.188}', "");
Expect(0, 2549, '\P{^Is_Nv: 0.188}', "");
Error('\p{Numeric_Value=-	021:=}');
Error('\P{Numeric_Value=-	021:=}');
Expect(1, 12881, '\p{Numeric_Value=02_1}', "");
Expect(0, 12881, '\p{^Numeric_Value=02_1}', "");
Expect(0, 12881, '\P{Numeric_Value=02_1}', "");
Expect(1, 12881, '\P{^Numeric_Value=02_1}', "");
Expect(0, 12880, '\p{Numeric_Value=02_1}', "");
Expect(1, 12880, '\p{^Numeric_Value=02_1}', "");
Expect(1, 12880, '\P{Numeric_Value=02_1}', "");
Expect(0, 12880, '\P{^Numeric_Value=02_1}', "");
Error('\p{Nv=	021:=}');
Error('\P{Nv=	021:=}');
Expect(1, 12881, '\p{Nv:   021}', "");
Expect(0, 12881, '\p{^Nv:   021}', "");
Expect(0, 12881, '\P{Nv:   021}', "");
Expect(1, 12881, '\P{^Nv:   021}', "");
Expect(0, 12880, '\p{Nv:   021}', "");
Expect(1, 12880, '\p{^Nv:   021}', "");
Expect(1, 12880, '\P{Nv:   021}', "");
Expect(0, 12880, '\P{^Nv:   021}', "");
Error('\p{Is_Numeric_Value:   :=	00000000021}');
Error('\P{Is_Numeric_Value:   :=	00000000021}');
Expect(1, 12881, '\p{Is_Numeric_Value=00000_00002_1}', "");
Expect(0, 12881, '\p{^Is_Numeric_Value=00000_00002_1}', "");
Expect(0, 12881, '\P{Is_Numeric_Value=00000_00002_1}', "");
Expect(1, 12881, '\P{^Is_Numeric_Value=00000_00002_1}', "");
Expect(0, 12880, '\p{Is_Numeric_Value=00000_00002_1}', "");
Expect(1, 12880, '\p{^Is_Numeric_Value=00000_00002_1}', "");
Expect(1, 12880, '\P{Is_Numeric_Value=00000_00002_1}', "");
Expect(0, 12880, '\P{^Is_Numeric_Value=00000_00002_1}', "");
Error('\p{Is_Nv=_/a/+00021}');
Error('\P{Is_Nv=_/a/+00021}');
Expect(1, 12881, '\p{Is_Nv=+00000021}', "");
Expect(0, 12881, '\p{^Is_Nv=+00000021}', "");
Expect(0, 12881, '\P{Is_Nv=+00000021}', "");
Expect(1, 12881, '\P{^Is_Nv=+00000021}', "");
Expect(0, 12880, '\p{Is_Nv=+00000021}', "");
Expect(1, 12880, '\p{^Is_Nv=+00000021}', "");
Expect(1, 12880, '\P{Is_Nv=+00000021}', "");
Expect(0, 12880, '\P{^Is_Nv=+00000021}', "");
Error('\p{Numeric_Value=_/a/090}');
Error('\P{Numeric_Value=_/a/090}');
Expect(1, 4986, '\p{Numeric_Value=+0000090}', "");
Expect(0, 4986, '\p{^Numeric_Value=+0000090}', "");
Expect(0, 4986, '\P{Numeric_Value=+0000090}', "");
Expect(1, 4986, '\P{^Numeric_Value=+0000090}', "");
Expect(0, 4985, '\p{Numeric_Value=+0000090}', "");
Expect(1, 4985, '\p{^Numeric_Value=+0000090}', "");
Expect(1, 4985, '\P{Numeric_Value=+0000090}', "");
Expect(0, 4985, '\P{^Numeric_Value=+0000090}', "");
Error('\p{Nv=_/a/00000000090}');
Error('\P{Nv=_/a/00000000090}');
Expect(1, 4986, '\p{Nv:	+90}', "");
Expect(0, 4986, '\p{^Nv:	+90}', "");
Expect(0, 4986, '\P{Nv:	+90}', "");
Expect(1, 4986, '\P{^Nv:	+90}', "");
Expect(0, 4985, '\p{Nv:	+90}', "");
Expect(1, 4985, '\p{^Nv:	+90}', "");
Expect(1, 4985, '\P{Nv:	+90}', "");
Expect(0, 4985, '\P{^Nv:	+90}', "");
Error('\p{Is_Numeric_Value=_:=+00090}');
Error('\P{Is_Numeric_Value=_:=+00090}');
Expect(1, 4986, '\p{Is_Numeric_Value=00000000090}', "");
Expect(0, 4986, '\p{^Is_Numeric_Value=00000000090}', "");
Expect(0, 4986, '\P{Is_Numeric_Value=00000000090}', "");
Expect(1, 4986, '\P{^Is_Numeric_Value=00000000090}', "");
Expect(0, 4985, '\p{Is_Numeric_Value=00000000090}', "");
Expect(1, 4985, '\p{^Is_Numeric_Value=00000000090}', "");
Expect(1, 4985, '\P{Is_Numeric_Value=00000000090}', "");
Expect(0, 4985, '\P{^Is_Numeric_Value=00000000090}', "");
Error('\p{Is_Nv=+0-0:=00	0090}');
Error('\P{Is_Nv=+0-0:=00	0090}');
Expect(1, 4986, '\p{Is_Nv=0000090}', "");
Expect(0, 4986, '\p{^Is_Nv=0000090}', "");
Expect(0, 4986, '\P{Is_Nv=0000090}', "");
Expect(1, 4986, '\P{^Is_Nv=0000090}', "");
Expect(0, 4985, '\p{Is_Nv=0000090}', "");
Expect(1, 4985, '\p{^Is_Nv=0000090}', "");
Expect(1, 4985, '\P{Is_Nv=0000090}', "");
Expect(0, 4985, '\P{^Is_Nv=0000090}', "");
Error('\p{Numeric_Value=:=-00000007}');
Error('\P{Numeric_Value=:=-00000007}');
Expect(1, 55, '\p{Numeric_Value=000_7}', "");
Expect(0, 55, '\p{^Numeric_Value=000_7}', "");
Expect(0, 55, '\P{Numeric_Value=000_7}', "");
Expect(1, 55, '\P{^Numeric_Value=000_7}', "");
Expect(0, 54, '\p{Numeric_Value=000_7}', "");
Expect(1, 54, '\p{^Numeric_Value=000_7}', "");
Expect(1, 54, '\P{Numeric_Value=000_7}', "");
Expect(0, 54, '\P{^Numeric_Value=000_7}', "");
Error('\p{Nv=:= 000	000_000_7}');
Error('\P{Nv=:= 000	000_000_7}');
Expect(1, 55, '\p{Nv=+007}', "");
Expect(0, 55, '\p{^Nv=+007}', "");
Expect(0, 55, '\P{Nv=+007}', "");
Expect(1, 55, '\P{^Nv=+007}', "");
Expect(0, 54, '\p{Nv=+007}', "");
Expect(1, 54, '\p{^Nv=+007}', "");
Expect(1, 54, '\P{Nv=+007}', "");
Expect(0, 54, '\P{^Nv=+007}', "");
Error('\p{Is_Numeric_Value: /a/0000-7}');
Error('\P{Is_Numeric_Value: /a/0000-7}');
Expect(1, 55, '\p{Is_Numeric_Value=7}', "");
Expect(0, 55, '\p{^Is_Numeric_Value=7}', "");
Expect(0, 55, '\P{Is_Numeric_Value=7}', "");
Expect(1, 55, '\P{^Is_Numeric_Value=7}', "");
Expect(0, 54, '\p{Is_Numeric_Value=7}', "");
Expect(1, 54, '\p{^Is_Numeric_Value=7}', "");
Expect(1, 54, '\P{Is_Numeric_Value=7}', "");
Expect(0, 54, '\P{^Is_Numeric_Value=7}', "");
Error('\p{Is_Nv= :=+00_00_7}');
Error('\P{Is_Nv= :=+00_00_7}');
Expect(1, 55, '\p{Is_Nv=00000007}', "");
Expect(0, 55, '\p{^Is_Nv=00000007}', "");
Expect(0, 55, '\P{Is_Nv=00000007}', "");
Expect(1, 55, '\P{^Is_Nv=00000007}', "");
Expect(0, 54, '\p{Is_Nv=00000007}', "");
Expect(1, 54, '\p{^Is_Nv=00000007}', "");
Expect(1, 54, '\P{Is_Nv=00000007}', "");
Expect(0, 54, '\P{^Is_Nv=00000007}', "");
Error('\p{Numeric_Value=_00-0:=600}');
Error('\P{Numeric_Value=_00-0:=600}');
Expect(1, 65822, '\p{Numeric_Value=0000000600}', "");
Expect(0, 65822, '\p{^Numeric_Value=0000000600}', "");
Expect(0, 65822, '\P{Numeric_Value=0000000600}', "");
Expect(1, 65822, '\P{^Numeric_Value=0000000600}', "");
Expect(0, 65821, '\p{Numeric_Value=0000000600}', "");
Expect(1, 65821, '\p{^Numeric_Value=0000000600}', "");
Expect(1, 65821, '\P{Numeric_Value=0000000600}', "");
Expect(0, 65821, '\P{^Numeric_Value=0000000600}', "");
Error('\p{Nv=/a/+00000000600}');
Error('\P{Nv=/a/+00000000600}');
Expect(1, 65822, '\p{Nv=00_00_00_00_06_00}', "");
Expect(0, 65822, '\p{^Nv=00_00_00_00_06_00}', "");
Expect(0, 65822, '\P{Nv=00_00_00_00_06_00}', "");
Expect(1, 65822, '\P{^Nv=00_00_00_00_06_00}', "");
Expect(0, 65821, '\p{Nv=00_00_00_00_06_00}', "");
Expect(1, 65821, '\p{^Nv=00_00_00_00_06_00}', "");
Expect(1, 65821, '\P{Nv=00_00_00_00_06_00}', "");
Expect(0, 65821, '\P{^Nv=00_00_00_00_06_00}', "");
Error('\p{Is_Numeric_Value=/a/0-0 6 00}');
Error('\P{Is_Numeric_Value=/a/0-0 6 00}');
Expect(1, 65822, '\p{Is_Numeric_Value=0000_0060_0}', "");
Expect(0, 65822, '\p{^Is_Numeric_Value=0000_0060_0}', "");
Expect(0, 65822, '\P{Is_Numeric_Value=0000_0060_0}', "");
Expect(1, 65822, '\P{^Is_Numeric_Value=0000_0060_0}', "");
Expect(0, 65821, '\p{Is_Numeric_Value=0000_0060_0}', "");
Expect(1, 65821, '\p{^Is_Numeric_Value=0000_0060_0}', "");
Expect(1, 65821, '\P{Is_Numeric_Value=0000_0060_0}', "");
Expect(0, 65821, '\P{^Is_Numeric_Value=0000_0060_0}', "");
Error('\p{Is_Nv=		0	0:=6	00}');
Error('\P{Is_Nv=		0	0:=6	00}');
Expect(1, 65822, '\p{Is_Nv=0_0_0_0_0_0_0_600}', "");
Expect(0, 65822, '\p{^Is_Nv=0_0_0_0_0_0_0_600}', "");
Expect(0, 65822, '\P{Is_Nv=0_0_0_0_0_0_0_600}', "");
Expect(1, 65822, '\P{^Is_Nv=0_0_0_0_0_0_0_600}', "");
Expect(0, 65821, '\p{Is_Nv=0_0_0_0_0_0_0_600}', "");
Expect(1, 65821, '\p{^Is_Nv=0_0_0_0_0_0_0_600}', "");
Expect(1, 65821, '\P{Is_Nv=0_0_0_0_0_0_0_600}', "");
Expect(0, 65821, '\P{^Is_Nv=0_0_0_0_0_0_0_600}', "");
Error('\p{Numeric_Value=:=_-0000000026}');
Error('\P{Numeric_Value=:=_-0000000026}');
Expect(1, 12886, '\p{Numeric_Value=0_0_0_0_0_26}', "");
Expect(0, 12886, '\p{^Numeric_Value=0_0_0_0_0_26}', "");
Expect(0, 12886, '\P{Numeric_Value=0_0_0_0_0_26}', "");
Expect(1, 12886, '\P{^Numeric_Value=0_0_0_0_0_26}', "");
Expect(0, 12885, '\p{Numeric_Value=0_0_0_0_0_26}', "");
Expect(1, 12885, '\p{^Numeric_Value=0_0_0_0_0_26}', "");
Expect(1, 12885, '\P{Numeric_Value=0_0_0_0_0_26}', "");
Expect(0, 12885, '\P{^Numeric_Value=0_0_0_0_0_26}', "");
Error('\p{Nv= :=0026}');
Error('\P{Nv= :=0026}');
Expect(1, 12886, '\p{Nv=0_0_0_026}', "");
Expect(0, 12886, '\p{^Nv=0_0_0_026}', "");
Expect(0, 12886, '\P{Nv=0_0_0_026}', "");
Expect(1, 12886, '\P{^Nv=0_0_0_026}', "");
Expect(0, 12885, '\p{Nv=0_0_0_026}', "");
Expect(1, 12885, '\p{^Nv=0_0_0_026}', "");
Expect(1, 12885, '\P{Nv=0_0_0_026}', "");
Expect(0, 12885, '\P{^Nv=0_0_0_026}', "");
Error('\p{Is_Numeric_Value=	00000000026/a/}');
Error('\P{Is_Numeric_Value=	00000000026/a/}');
Expect(1, 12886, '\p{Is_Numeric_Value=26}', "");
Expect(0, 12886, '\p{^Is_Numeric_Value=26}', "");
Expect(0, 12886, '\P{Is_Numeric_Value=26}', "");
Expect(1, 12886, '\P{^Is_Numeric_Value=26}', "");
Expect(0, 12885, '\p{Is_Numeric_Value=26}', "");
Expect(1, 12885, '\p{^Is_Numeric_Value=26}', "");
Expect(1, 12885, '\P{Is_Numeric_Value=26}', "");
Expect(0, 12885, '\P{^Is_Numeric_Value=26}', "");
Error('\p{Is_Nv:	:=+2-6}');
Error('\P{Is_Nv:	:=+2-6}');
Expect(1, 12886, '\p{Is_Nv=00026}', "");
Expect(0, 12886, '\p{^Is_Nv=00026}', "");
Expect(0, 12886, '\P{Is_Nv=00026}', "");
Expect(1, 12886, '\P{^Is_Nv=00026}', "");
Expect(0, 12885, '\p{Is_Nv=00026}', "");
Expect(1, 12885, '\p{^Is_Nv=00026}', "");
Expect(1, 12885, '\P{Is_Nv=00026}', "");
Expect(0, 12885, '\P{^Is_Nv=00026}', "");
Error('\p{Numeric_Value=-:=+0000000080}');
Error('\P{Numeric_Value=-:=+0000000080}');
Expect(1, 4985, '\p{Numeric_Value=00_00_00_080}', "");
Expect(0, 4985, '\p{^Numeric_Value=00_00_00_080}', "");
Expect(0, 4985, '\P{Numeric_Value=00_00_00_080}', "");
Expect(1, 4985, '\P{^Numeric_Value=00_00_00_080}', "");
Expect(0, 4984, '\p{Numeric_Value=00_00_00_080}', "");
Expect(1, 4984, '\p{^Numeric_Value=00_00_00_080}', "");
Expect(1, 4984, '\P{Numeric_Value=00_00_00_080}', "");
Expect(0, 4984, '\P{^Numeric_Value=00_00_00_080}', "");
Error('\p{Nv=- +00_0000/a/00 80}');
Error('\P{Nv=- +00_0000/a/00 80}');
Expect(1, 4985, '\p{Nv=000000080}', "");
Expect(0, 4985, '\p{^Nv=000000080}', "");
Expect(0, 4985, '\P{Nv=000000080}', "");
Expect(1, 4985, '\P{^Nv=000000080}', "");
Expect(0, 4984, '\p{Nv=000000080}', "");
Expect(1, 4984, '\p{^Nv=000000080}', "");
Expect(1, 4984, '\P{Nv=000000080}', "");
Expect(0, 4984, '\P{^Nv=000000080}', "");
Error('\p{Is_Numeric_Value=-	00000/a/00008 0}');
Error('\P{Is_Numeric_Value=-	00000/a/00008 0}');
Expect(1, 4985, '\p{Is_Numeric_Value=000008_0}', "");
Expect(0, 4985, '\p{^Is_Numeric_Value=000008_0}', "");
Expect(0, 4985, '\P{Is_Numeric_Value=000008_0}', "");
Expect(1, 4985, '\P{^Is_Numeric_Value=000008_0}', "");
Expect(0, 4984, '\p{Is_Numeric_Value=000008_0}', "");
Expect(1, 4984, '\p{^Is_Numeric_Value=000008_0}', "");
Expect(1, 4984, '\P{Is_Numeric_Value=000008_0}', "");
Expect(0, 4984, '\P{^Is_Numeric_Value=000008_0}', "");
Error('\p{Is_Nv:-00080/a/}');
Error('\P{Is_Nv:-00080/a/}');
Expect(1, 4985, '\p{Is_Nv=000_000_008_0}', "");
Expect(0, 4985, '\p{^Is_Nv=000_000_008_0}', "");
Expect(0, 4985, '\P{Is_Nv=000_000_008_0}', "");
Expect(1, 4985, '\P{^Is_Nv=000_000_008_0}', "");
Expect(0, 4984, '\p{Is_Nv=000_000_008_0}', "");
Expect(1, 4984, '\p{^Is_Nv=000_000_008_0}', "");
Expect(1, 4984, '\P{Is_Nv=000_000_008_0}', "");
Expect(0, 4984, '\P{^Is_Nv=000_000_008_0}', "");
Error('\p{Numeric_Value=	+0:=0-2-00}');
Error('\P{Numeric_Value=	+0:=0-2-00}');
Expect(1, 65818, '\p{Numeric_Value=0_0_0_0_0_2_00}', "");
Expect(0, 65818, '\p{^Numeric_Value=0_0_0_0_0_2_00}', "");
Expect(0, 65818, '\P{Numeric_Value=0_0_0_0_0_2_00}', "");
Expect(1, 65818, '\P{^Numeric_Value=0_0_0_0_0_2_00}', "");
Expect(0, 65817, '\p{Numeric_Value=0_0_0_0_0_2_00}', "");
Expect(1, 65817, '\p{^Numeric_Value=0_0_0_0_0_2_00}', "");
Expect(1, 65817, '\P{Numeric_Value=0_0_0_0_0_2_00}', "");
Expect(0, 65817, '\P{^Numeric_Value=0_0_0_0_0_2_00}', "");
Error('\p{Nv=-:=20-0}');
Error('\P{Nv=-:=20-0}');
Expect(1, 65818, '\p{Nv=0200}', "");
Expect(0, 65818, '\p{^Nv=0200}', "");
Expect(0, 65818, '\P{Nv=0200}', "");
Expect(1, 65818, '\P{^Nv=0200}', "");
Expect(0, 65817, '\p{Nv=0200}', "");
Expect(1, 65817, '\p{^Nv=0200}', "");
Expect(1, 65817, '\P{Nv=0200}', "");
Expect(0, 65817, '\P{^Nv=0200}', "");
Error('\p{Is_Numeric_Value: /a/	000000000200}');
Error('\P{Is_Numeric_Value: /a/	000000000200}');
Expect(1, 65818, '\p{Is_Numeric_Value:+0200}', "");
Expect(0, 65818, '\p{^Is_Numeric_Value:+0200}', "");
Expect(0, 65818, '\P{Is_Numeric_Value:+0200}', "");
Expect(1, 65818, '\P{^Is_Numeric_Value:+0200}', "");
Expect(0, 65817, '\p{Is_Numeric_Value:+0200}', "");
Expect(1, 65817, '\p{^Is_Numeric_Value:+0200}', "");
Expect(1, 65817, '\P{Is_Numeric_Value:+0200}', "");
Expect(0, 65817, '\P{^Is_Numeric_Value:+0200}', "");
Error('\p{Is_Nv=/a/_	020 0}');
Error('\P{Is_Nv=/a/_	020 0}');
Expect(1, 65818, '\p{Is_Nv=0_0_0_0_200}', "");
Expect(0, 65818, '\p{^Is_Nv=0_0_0_0_200}', "");
Expect(0, 65818, '\P{Is_Nv=0_0_0_0_200}', "");
Expect(1, 65818, '\P{^Is_Nv=0_0_0_0_200}', "");
Expect(0, 65817, '\p{Is_Nv=0_0_0_0_200}', "");
Expect(1, 65817, '\p{^Is_Nv=0_0_0_0_200}', "");
Expect(1, 65817, '\P{Is_Nv=0_0_0_0_200}', "");
Expect(0, 65817, '\P{^Is_Nv=0_0_0_0_200}', "");
Error('\p{Numeric_Value=/a/-00018}');
Error('\P{Numeric_Value=/a/-00018}');
Expect(1, 5871, '\p{Numeric_Value=000018}', "");
Expect(0, 5871, '\p{^Numeric_Value=000018}', "");
Expect(0, 5871, '\P{Numeric_Value=000018}', "");
Expect(1, 5871, '\P{^Numeric_Value=000018}', "");
Expect(0, 5870, '\p{Numeric_Value=000018}', "");
Expect(1, 5870, '\p{^Numeric_Value=000018}', "");
Expect(1, 5870, '\P{Numeric_Value=000018}', "");
Expect(0, 5870, '\P{^Numeric_Value=000018}', "");
Error('\p{Nv=:=-_1-8}');
Error('\P{Nv=:=-_1-8}');
Expect(1, 5871, '\p{Nv=01_8}', "");
Expect(0, 5871, '\p{^Nv=01_8}', "");
Expect(0, 5871, '\P{Nv=01_8}', "");
Expect(1, 5871, '\P{^Nv=01_8}', "");
Expect(0, 5870, '\p{Nv=01_8}', "");
Expect(1, 5870, '\p{^Nv=01_8}', "");
Expect(1, 5870, '\P{Nv=01_8}', "");
Expect(0, 5870, '\P{^Nv=01_8}', "");
Error('\p{Is_Numeric_Value=	:=00000001_8}');
Error('\P{Is_Numeric_Value=	:=00000001_8}');
Expect(1, 5871, '\p{Is_Numeric_Value=0_0_0_0_0_00018}', "");
Expect(0, 5871, '\p{^Is_Numeric_Value=0_0_0_0_0_00018}', "");
Expect(0, 5871, '\P{Is_Numeric_Value=0_0_0_0_0_00018}', "");
Expect(1, 5871, '\P{^Is_Numeric_Value=0_0_0_0_0_00018}', "");
Expect(0, 5870, '\p{Is_Numeric_Value=0_0_0_0_0_00018}', "");
Expect(1, 5870, '\p{^Is_Numeric_Value=0_0_0_0_0_00018}', "");
Expect(1, 5870, '\P{Is_Numeric_Value=0_0_0_0_0_00018}', "");
Expect(0, 5870, '\P{^Is_Numeric_Value=0_0_0_0_0_00018}', "");
Error('\p{Is_Nv=	_0000/a/000018}');
Error('\P{Is_Nv=	_0000/a/000018}');
Expect(1, 5871, '\p{Is_Nv=0_0_18}', "");
Expect(0, 5871, '\p{^Is_Nv=0_0_18}', "");
Expect(0, 5871, '\P{Is_Nv=0_0_18}', "");
Expect(1, 5871, '\P{^Is_Nv=0_0_18}', "");
Expect(0, 5870, '\p{Is_Nv=0_0_18}', "");
Expect(1, 5870, '\p{^Is_Nv=0_0_18}', "");
Expect(1, 5870, '\P{Is_Nv=0_0_18}', "");
Expect(0, 5870, '\P{^Is_Nv=0_0_18}', "");
Error('\p{Numeric_Value=/a/- 000003/0000000008}');
Error('\P{Numeric_Value=/a/- 000003/0000000008}');
Expect(1, 8540, '\p{Numeric_Value=3/00008}', "");
Expect(0, 8540, '\p{^Numeric_Value=3/00008}', "");
Expect(0, 8540, '\P{Numeric_Value=3/00008}', "");
Expect(1, 8540, '\P{^Numeric_Value=3/00008}', "");
Expect(0, 8539, '\p{Numeric_Value=3/00008}', "");
Expect(1, 8539, '\p{^Numeric_Value=3/00008}', "");
Expect(1, 8539, '\P{Numeric_Value=3/00008}', "");
Expect(0, 8539, '\P{^Numeric_Value=3/00008}', "");
Error('\p{Numeric_Value=0.38}');
Error('\P{Numeric_Value=0.38}');
Expect(1, 8540, '\p{Numeric_Value=0.375}', "");
Expect(0, 8540, '\p{^Numeric_Value=0.375}', "");
Expect(0, 8540, '\P{Numeric_Value=0.375}', "");
Expect(1, 8540, '\P{^Numeric_Value=0.375}', "");
Expect(0, 8539, '\p{Numeric_Value=0.375}', "");
Expect(1, 8539, '\p{^Numeric_Value=0.375}', "");
Expect(1, 8539, '\P{Numeric_Value=0.375}', "");
Expect(0, 8539, '\P{^Numeric_Value=0.375}', "");
Error('\p{Nv=:=_ 00003/0000000008}');
Error('\P{Nv=:=_ 00003/0000000008}');
Expect(1, 8540, '\p{Nv:	+000003/08}', "");
Expect(0, 8540, '\p{^Nv:	+000003/08}', "");
Expect(0, 8540, '\P{Nv:	+000003/08}', "");
Expect(1, 8540, '\P{^Nv:	+000003/08}', "");
Expect(0, 8539, '\p{Nv:	+000003/08}', "");
Expect(1, 8539, '\p{^Nv:	+000003/08}', "");
Expect(1, 8539, '\P{Nv:	+000003/08}', "");
Expect(0, 8539, '\P{^Nv:	+000003/08}', "");
Error('\p{Nv=0.38}');
Error('\P{Nv=0.38}');
Expect(1, 8540, '\p{Nv=0.375}', "");
Expect(0, 8540, '\p{^Nv=0.375}', "");
Expect(0, 8540, '\P{Nv=0.375}', "");
Expect(1, 8540, '\P{^Nv=0.375}', "");
Expect(0, 8539, '\p{Nv=0.375}', "");
Expect(1, 8539, '\p{^Nv=0.375}', "");
Expect(1, 8539, '\P{Nv=0.375}', "");
Expect(0, 8539, '\P{^Nv=0.375}', "");
Error('\p{Is_Numeric_Value=/a/	0000003/008}');
Error('\P{Is_Numeric_Value=/a/	0000003/008}');
Expect(1, 8540, '\p{Is_Numeric_Value=000000003/0000000008}', "");
Expect(0, 8540, '\p{^Is_Numeric_Value=000000003/0000000008}', "");
Expect(0, 8540, '\P{Is_Numeric_Value=000000003/0000000008}', "");
Expect(1, 8540, '\P{^Is_Numeric_Value=000000003/0000000008}', "");
Expect(0, 8539, '\p{Is_Numeric_Value=000000003/0000000008}', "");
Expect(1, 8539, '\p{^Is_Numeric_Value=000000003/0000000008}', "");
Expect(1, 8539, '\P{Is_Numeric_Value=000000003/0000000008}', "");
Expect(0, 8539, '\P{^Is_Numeric_Value=000000003/0000000008}', "");
Error('\p{Is_Numeric_Value=0.38}');
Error('\P{Is_Numeric_Value=0.38}');
Expect(1, 8540, '\p{Is_Numeric_Value=0.375}', "");
Expect(0, 8540, '\p{^Is_Numeric_Value=0.375}', "");
Expect(0, 8540, '\P{Is_Numeric_Value=0.375}', "");
Expect(1, 8540, '\P{^Is_Numeric_Value=0.375}', "");
Expect(0, 8539, '\p{Is_Numeric_Value=0.375}', "");
Expect(1, 8539, '\p{^Is_Numeric_Value=0.375}', "");
Expect(1, 8539, '\P{Is_Numeric_Value=0.375}', "");
Expect(0, 8539, '\P{^Is_Numeric_Value=0.375}', "");
Error('\p{Is_Nv=_/a/000003/8}');
Error('\P{Is_Nv=_/a/000003/8}');
Expect(1, 8540, '\p{Is_Nv: 00000003/0008}', "");
Expect(0, 8540, '\p{^Is_Nv: 00000003/0008}', "");
Expect(0, 8540, '\P{Is_Nv: 00000003/0008}', "");
Expect(1, 8540, '\P{^Is_Nv: 00000003/0008}', "");
Expect(0, 8539, '\p{Is_Nv: 00000003/0008}', "");
Expect(1, 8539, '\p{^Is_Nv: 00000003/0008}', "");
Expect(1, 8539, '\P{Is_Nv: 00000003/0008}', "");
Expect(0, 8539, '\P{^Is_Nv: 00000003/0008}', "");
Error('\p{Is_Nv=0.38}');
Error('\P{Is_Nv=0.38}');
Expect(1, 8540, '\p{Is_Nv=0.375}', "");
Expect(0, 8540, '\p{^Is_Nv=0.375}', "");
Expect(0, 8540, '\P{Is_Nv=0.375}', "");
Expect(1, 8540, '\P{^Is_Nv=0.375}', "");
Expect(0, 8539, '\p{Is_Nv=0.375}', "");
Expect(1, 8539, '\p{^Is_Nv=0.375}', "");
Expect(1, 8539, '\P{Is_Nv=0.375}', "");
Expect(0, 8539, '\P{^Is_Nv=0.375}', "");
Error('\p{Numeric_Value=-:=0_0_500}');
Error('\P{Numeric_Value=-:=0_0_500}');
Expect(1, 8558, '\p{Numeric_Value=00000500}', "");
Expect(0, 8558, '\p{^Numeric_Value=00000500}', "");
Expect(0, 8558, '\P{Numeric_Value=00000500}', "");
Expect(1, 8558, '\P{^Numeric_Value=00000500}', "");
Expect(0, 8557, '\p{Numeric_Value=00000500}', "");
Expect(1, 8557, '\p{^Numeric_Value=00000500}', "");
Expect(1, 8557, '\P{Numeric_Value=00000500}', "");
Expect(0, 8557, '\P{^Numeric_Value=00000500}', "");
Error('\p{Nv=	000000000500:=}');
Error('\P{Nv=	000000000500:=}');
Expect(1, 8558, '\p{Nv=+00000_00005_00}', "");
Expect(0, 8558, '\p{^Nv=+00000_00005_00}', "");
Expect(0, 8558, '\P{Nv=+00000_00005_00}', "");
Expect(1, 8558, '\P{^Nv=+00000_00005_00}', "");
Expect(0, 8557, '\p{Nv=+00000_00005_00}', "");
Expect(1, 8557, '\p{^Nv=+00000_00005_00}', "");
Expect(1, 8557, '\P{Nv=+00000_00005_00}', "");
Expect(0, 8557, '\P{^Nv=+00000_00005_00}', "");
Error('\p{Is_Numeric_Value=:= 0000000500}');
Error('\P{Is_Numeric_Value=:= 0000000500}');
Expect(1, 8558, '\p{Is_Numeric_Value=+00500}', "");
Expect(0, 8558, '\p{^Is_Numeric_Value=+00500}', "");
Expect(0, 8558, '\P{Is_Numeric_Value=+00500}', "");
Expect(1, 8558, '\P{^Is_Numeric_Value=+00500}', "");
Expect(0, 8557, '\p{Is_Numeric_Value=+00500}', "");
Expect(1, 8557, '\p{^Is_Numeric_Value=+00500}', "");
Expect(1, 8557, '\P{Is_Numeric_Value=+00500}', "");
Expect(0, 8557, '\P{^Is_Numeric_Value=+00500}', "");
Error('\p{Is_Nv=/a/000000500}');
Error('\P{Is_Nv=/a/000000500}');
Expect(1, 8558, '\p{Is_Nv=+0500}', "");
Expect(0, 8558, '\p{^Is_Nv=+0500}', "");
Expect(0, 8558, '\P{Is_Nv=+0500}', "");
Expect(1, 8558, '\P{^Is_Nv=+0500}', "");
Expect(0, 8557, '\p{Is_Nv=+0500}', "");
Expect(1, 8557, '\p{^Is_Nv=+0500}', "");
Expect(1, 8557, '\P{Is_Nv=+0500}', "");
Expect(0, 8557, '\P{^Is_Nv=+0500}', "");
Error('\p{Numeric_Value=/a/_00000001_6}');
Error('\P{Numeric_Value=/a/_00000001_6}');
Expect(1, 2553, '\p{Numeric_Value=00_01_6}', "");
Expect(0, 2553, '\p{^Numeric_Value=00_01_6}', "");
Expect(0, 2553, '\P{Numeric_Value=00_01_6}', "");
Expect(1, 2553, '\P{^Numeric_Value=00_01_6}', "");
Expect(0, 2552, '\p{Numeric_Value=00_01_6}', "");
Expect(1, 2552, '\p{^Numeric_Value=00_01_6}', "");
Expect(1, 2552, '\P{Numeric_Value=00_01_6}', "");
Expect(0, 2552, '\P{^Numeric_Value=00_01_6}', "");
Error('\p{Nv=:=_-16}');
Error('\P{Nv=:=_-16}');
Expect(1, 2553, '\p{Nv=16}', "");
Expect(0, 2553, '\p{^Nv=16}', "");
Expect(0, 2553, '\P{Nv=16}', "");
Expect(1, 2553, '\P{^Nv=16}', "");
Expect(0, 2552, '\p{Nv=16}', "");
Expect(1, 2552, '\p{^Nv=16}', "");
Expect(1, 2552, '\P{Nv=16}', "");
Expect(0, 2552, '\P{^Nv=16}', "");
Error('\p{Is_Numeric_Value=	:=0000016}');
Error('\P{Is_Numeric_Value=	:=0000016}');
Expect(1, 2553, '\p{Is_Numeric_Value:   001_6}', "");
Expect(0, 2553, '\p{^Is_Numeric_Value:   001_6}', "");
Expect(0, 2553, '\P{Is_Numeric_Value:   001_6}', "");
Expect(1, 2553, '\P{^Is_Numeric_Value:   001_6}', "");
Expect(0, 2552, '\p{Is_Numeric_Value:   001_6}', "");
Expect(1, 2552, '\p{^Is_Numeric_Value:   001_6}', "");
Expect(1, 2552, '\P{Is_Numeric_Value:   001_6}', "");
Expect(0, 2552, '\P{^Is_Numeric_Value:   001_6}', "");
Error('\p{Is_Nv=  +01:=6}');
Error('\P{Is_Nv=  +01:=6}');
Expect(1, 2553, '\p{Is_Nv=00000016}', "");
Expect(0, 2553, '\p{^Is_Nv=00000016}', "");
Expect(0, 2553, '\P{Is_Nv=00000016}', "");
Expect(1, 2553, '\P{^Is_Nv=00000016}', "");
Expect(0, 2552, '\p{Is_Nv=00000016}', "");
Expect(1, 2552, '\p{^Is_Nv=00000016}', "");
Expect(1, 2552, '\P{Is_Nv=00000016}', "");
Expect(0, 2552, '\P{^Is_Nv=00000016}', "");
Error('\p{Numeric_Value=-	4 4:=}');
Error('\P{Numeric_Value=-	4 4:=}');
Expect(1, 12985, '\p{Numeric_Value=4_4}', "");
Expect(0, 12985, '\p{^Numeric_Value=4_4}', "");
Expect(0, 12985, '\P{Numeric_Value=4_4}', "");
Expect(1, 12985, '\P{^Numeric_Value=4_4}', "");
Expect(0, 12984, '\p{Numeric_Value=4_4}', "");
Expect(1, 12984, '\p{^Numeric_Value=4_4}', "");
Expect(1, 12984, '\P{Numeric_Value=4_4}', "");
Expect(0, 12984, '\P{^Numeric_Value=4_4}', "");
Error('\p{Nv=:=44}');
Error('\P{Nv=:=44}');
Expect(1, 12985, '\p{Nv=00000000044}', "");
Expect(0, 12985, '\p{^Nv=00000000044}', "");
Expect(0, 12985, '\P{Nv=00000000044}', "");
Expect(1, 12985, '\P{^Nv=00000000044}', "");
Expect(0, 12984, '\p{Nv=00000000044}', "");
Expect(1, 12984, '\p{^Nv=00000000044}', "");
Expect(1, 12984, '\P{Nv=00000000044}', "");
Expect(0, 12984, '\P{^Nv=00000000044}', "");
Error('\p{Is_Numeric_Value=	-+0_0_0/a/0_44}');
Error('\P{Is_Numeric_Value=	-+0_0_0/a/0_44}');
Expect(1, 12985, '\p{Is_Numeric_Value=+0044}', "");
Expect(0, 12985, '\p{^Is_Numeric_Value=+0044}', "");
Expect(0, 12985, '\P{Is_Numeric_Value=+0044}', "");
Expect(1, 12985, '\P{^Is_Numeric_Value=+0044}', "");
Expect(0, 12984, '\p{Is_Numeric_Value=+0044}', "");
Expect(1, 12984, '\p{^Is_Numeric_Value=+0044}', "");
Expect(1, 12984, '\P{Is_Numeric_Value=+0044}', "");
Expect(0, 12984, '\P{^Is_Numeric_Value=+0044}', "");
Error('\p{Is_Nv=:=-44}');
Error('\P{Is_Nv=:=-44}');
Expect(1, 12985, '\p{Is_Nv:   4_4}', "");
Expect(0, 12985, '\p{^Is_Nv:   4_4}', "");
Expect(0, 12985, '\P{Is_Nv:   4_4}', "");
Expect(1, 12985, '\P{^Is_Nv:   4_4}', "");
Expect(0, 12984, '\p{Is_Nv:   4_4}', "");
Expect(1, 12984, '\p{^Is_Nv:   4_4}', "");
Expect(1, 12984, '\P{Is_Nv:   4_4}', "");
Expect(0, 12984, '\P{^Is_Nv:   4_4}', "");
Error('\p{Numeric_Value=	:=027}');
Error('\P{Numeric_Value=	:=027}');
Expect(1, 12887, '\p{Numeric_Value=0_0_0_0_0_0_0_0_0_27}', "");
Expect(0, 12887, '\p{^Numeric_Value=0_0_0_0_0_0_0_0_0_27}', "");
Expect(0, 12887, '\P{Numeric_Value=0_0_0_0_0_0_0_0_0_27}', "");
Expect(1, 12887, '\P{^Numeric_Value=0_0_0_0_0_0_0_0_0_27}', "");
Expect(0, 12886, '\p{Numeric_Value=0_0_0_0_0_0_0_0_0_27}', "");
Expect(1, 12886, '\p{^Numeric_Value=0_0_0_0_0_0_0_0_0_27}', "");
Expect(1, 12886, '\P{Numeric_Value=0_0_0_0_0_0_0_0_0_27}', "");
Expect(0, 12886, '\P{^Numeric_Value=0_0_0_0_0_0_0_0_0_27}', "");
Error('\p{Nv=_-0 0 0 00_027:=}');
Error('\P{Nv=_-0 0 0 00_027:=}');
Expect(1, 12887, '\p{Nv=027}', "");
Expect(0, 12887, '\p{^Nv=027}', "");
Expect(0, 12887, '\P{Nv=027}', "");
Expect(1, 12887, '\P{^Nv=027}', "");
Expect(0, 12886, '\p{Nv=027}', "");
Expect(1, 12886, '\p{^Nv=027}', "");
Expect(1, 12886, '\P{Nv=027}', "");
Expect(0, 12886, '\P{^Nv=027}', "");
Error('\p{Is_Numeric_Value=	/a/0000000027}');
Error('\P{Is_Numeric_Value=	/a/0000000027}');
Expect(1, 12887, '\p{Is_Numeric_Value=2_7}', "");
Expect(0, 12887, '\p{^Is_Numeric_Value=2_7}', "");
Expect(0, 12887, '\P{Is_Numeric_Value=2_7}', "");
Expect(1, 12887, '\P{^Is_Numeric_Value=2_7}', "");
Expect(0, 12886, '\p{Is_Numeric_Value=2_7}', "");
Expect(1, 12886, '\p{^Is_Numeric_Value=2_7}', "");
Expect(1, 12886, '\P{Is_Numeric_Value=2_7}', "");
Expect(0, 12886, '\P{^Is_Numeric_Value=2_7}', "");
Error('\p{Is_Nv= +000027/a/}');
Error('\P{Is_Nv= +000027/a/}');
Expect(1, 12887, '\p{Is_Nv=00027}', "");
Expect(0, 12887, '\p{^Is_Nv=00027}', "");
Expect(0, 12887, '\P{Is_Nv=00027}', "");
Expect(1, 12887, '\P{^Is_Nv=00027}', "");
Expect(0, 12886, '\p{Is_Nv=00027}', "");
Expect(1, 12886, '\p{^Is_Nv=00027}', "");
Expect(1, 12886, '\P{Is_Nv=00027}', "");
Expect(0, 12886, '\P{^Is_Nv=00027}', "");
Error('\p{Numeric_Value=_/a/0_0_00	00	10_0	0_00000}');
Error('\P{Numeric_Value=_/a/0_0_00	00	10_0	0_00000}');
Expect(1, 20159, '\p{Numeric_Value=00000100000000}', "");
Expect(0, 20159, '\p{^Numeric_Value=00000100000000}', "");
Expect(0, 20159, '\P{Numeric_Value=00000100000000}', "");
Expect(1, 20159, '\P{^Numeric_Value=00000100000000}', "");
Expect(0, 20158, '\p{Numeric_Value=00000100000000}', "");
Expect(1, 20158, '\p{^Numeric_Value=00000100000000}', "");
Expect(1, 20158, '\P{Numeric_Value=00000100000000}', "");
Expect(0, 20158, '\P{^Numeric_Value=00000100000000}', "");
Error('\p{Nv=/a/_ 000000000100000000}');
Error('\P{Nv=/a/_ 000000000100000000}');
Expect(1, 20159, '\p{Nv=10_00_00_000}', "");
Expect(0, 20159, '\p{^Nv=10_00_00_000}', "");
Expect(0, 20159, '\P{Nv=10_00_00_000}', "");
Expect(1, 20159, '\P{^Nv=10_00_00_000}', "");
Expect(0, 20158, '\p{Nv=10_00_00_000}', "");
Expect(1, 20158, '\p{^Nv=10_00_00_000}', "");
Expect(1, 20158, '\P{Nv=10_00_00_000}', "");
Expect(0, 20158, '\P{^Nv=10_00_00_000}', "");
Error('\p{Is_Numeric_Value= 00000000100000000/a/}');
Error('\P{Is_Numeric_Value= 00000000100000000/a/}');
Expect(1, 20159, '\p{Is_Numeric_Value=+00_10_00_00_00_0}', "");
Expect(0, 20159, '\p{^Is_Numeric_Value=+00_10_00_00_00_0}', "");
Expect(0, 20159, '\P{Is_Numeric_Value=+00_10_00_00_00_0}', "");
Expect(1, 20159, '\P{^Is_Numeric_Value=+00_10_00_00_00_0}', "");
Expect(0, 20158, '\p{Is_Numeric_Value=+00_10_00_00_00_0}', "");
Expect(1, 20158, '\p{^Is_Numeric_Value=+00_10_00_00_00_0}', "");
Expect(1, 20158, '\P{Is_Numeric_Value=+00_10_00_00_00_0}', "");
Expect(0, 20158, '\P{^Is_Numeric_Value=+00_10_00_00_00_0}', "");
Error('\p{Is_Nv=/a/	-0000100000000}');
Error('\P{Is_Nv=/a/	-0000100000000}');
Expect(1, 20159, '\p{Is_Nv=0000_0100_0000_00}', "");
Expect(0, 20159, '\p{^Is_Nv=0000_0100_0000_00}', "");
Expect(0, 20159, '\P{Is_Nv=0000_0100_0000_00}', "");
Expect(1, 20159, '\P{^Is_Nv=0000_0100_0000_00}', "");
Expect(0, 20158, '\p{Is_Nv=0000_0100_0000_00}', "");
Expect(1, 20158, '\p{^Is_Nv=0000_0100_0000_00}', "");
Expect(1, 20158, '\P{Is_Nv=0000_0100_0000_00}', "");
Expect(0, 20158, '\P{^Is_Nv=0000_0100_0000_00}', "");
Error('\p{Numeric_Value=	/a/0000000001/00000010}');
Error('\P{Numeric_Value=	/a/0000000001/00000010}');
Expect(1, 8530, '\p{Numeric_Value=0000000001/10}', "");
Expect(0, 8530, '\p{^Numeric_Value=0000000001/10}', "");
Expect(0, 8530, '\P{Numeric_Value=0000000001/10}', "");
Expect(1, 8530, '\P{^Numeric_Value=0000000001/10}', "");
Expect(0, 8529, '\p{Numeric_Value=0000000001/10}', "");
Expect(1, 8529, '\p{^Numeric_Value=0000000001/10}', "");
Expect(1, 8529, '\P{Numeric_Value=0000000001/10}', "");
Expect(0, 8529, '\P{^Numeric_Value=0000000001/10}', "");
Expect(1, 8530, '\p{Numeric_Value=0.100}', "");
Expect(0, 8530, '\p{^Numeric_Value=0.100}', "");
Expect(0, 8530, '\P{Numeric_Value=0.100}', "");
Expect(1, 8530, '\P{^Numeric_Value=0.100}', "");
Expect(0, 8529, '\p{Numeric_Value=0.100}', "");
Expect(1, 8529, '\p{^Numeric_Value=0.100}', "");
Expect(1, 8529, '\P{Numeric_Value=0.100}', "");
Expect(0, 8529, '\P{^Numeric_Value=0.100}', "");
Error('\p{Nv=- 000000001/00000000010:=}');
Error('\P{Nv=- 000000001/00000000010:=}');
Expect(1, 8530, '\p{Nv=0000001/000000010}', "");
Expect(0, 8530, '\p{^Nv=0000001/000000010}', "");
Expect(0, 8530, '\P{Nv=0000001/000000010}', "");
Expect(1, 8530, '\P{^Nv=0000001/000000010}', "");
Expect(0, 8529, '\p{Nv=0000001/000000010}', "");
Expect(1, 8529, '\p{^Nv=0000001/000000010}', "");
Expect(1, 8529, '\P{Nv=0000001/000000010}', "");
Expect(0, 8529, '\P{^Nv=0000001/000000010}', "");
Expect(1, 8530, '\p{Nv=0.100}', "");
Expect(0, 8530, '\p{^Nv=0.100}', "");
Expect(0, 8530, '\P{Nv=0.100}', "");
Expect(1, 8530, '\P{^Nv=0.100}', "");
Expect(0, 8529, '\p{Nv=0.100}', "");
Expect(1, 8529, '\p{^Nv=0.100}', "");
Expect(1, 8529, '\P{Nv=0.100}', "");
Expect(0, 8529, '\P{^Nv=0.100}', "");
Error('\p{Is_Numeric_Value:	/a/ 000000001/00000010}');
Error('\P{Is_Numeric_Value:	/a/ 000000001/00000010}');
Expect(1, 8530, '\p{Is_Numeric_Value=0001/010}', "");
Expect(0, 8530, '\p{^Is_Numeric_Value=0001/010}', "");
Expect(0, 8530, '\P{Is_Numeric_Value=0001/010}', "");
Expect(1, 8530, '\P{^Is_Numeric_Value=0001/010}', "");
Expect(0, 8529, '\p{Is_Numeric_Value=0001/010}', "");
Expect(1, 8529, '\p{^Is_Numeric_Value=0001/010}', "");
Expect(1, 8529, '\P{Is_Numeric_Value=0001/010}', "");
Expect(0, 8529, '\P{^Is_Numeric_Value=0001/010}', "");
Expect(1, 8530, '\p{Is_Numeric_Value=0.100}', "");
Expect(0, 8530, '\p{^Is_Numeric_Value=0.100}', "");
Expect(0, 8530, '\P{Is_Numeric_Value=0.100}', "");
Expect(1, 8530, '\P{^Is_Numeric_Value=0.100}', "");
Expect(0, 8529, '\p{Is_Numeric_Value=0.100}', "");
Expect(1, 8529, '\p{^Is_Numeric_Value=0.100}', "");
Expect(1, 8529, '\P{Is_Numeric_Value=0.100}', "");
Expect(0, 8529, '\P{^Is_Numeric_Value=0.100}', "");
Error('\p{Is_Nv= :=000000001/000000010}');
Error('\P{Is_Nv= :=000000001/000000010}');
Expect(1, 8530, '\p{Is_Nv=00001/010}', "");
Expect(0, 8530, '\p{^Is_Nv=00001/010}', "");
Expect(0, 8530, '\P{Is_Nv=00001/010}', "");
Expect(1, 8530, '\P{^Is_Nv=00001/010}', "");
Expect(0, 8529, '\p{Is_Nv=00001/010}', "");
Expect(1, 8529, '\p{^Is_Nv=00001/010}', "");
Expect(1, 8529, '\P{Is_Nv=00001/010}', "");
Expect(0, 8529, '\P{^Is_Nv=00001/010}', "");
Expect(1, 8530, '\p{Is_Nv=0.100}', "");
Expect(0, 8530, '\p{^Is_Nv=0.100}', "");
Expect(0, 8530, '\P{Is_Nv=0.100}', "");
Expect(1, 8530, '\P{^Is_Nv=0.100}', "");
Expect(0, 8529, '\p{Is_Nv=0.100}', "");
Expect(1, 8529, '\p{^Is_Nv=0.100}', "");
Expect(1, 8529, '\P{Is_Nv=0.100}', "");
Expect(0, 8529, '\P{^Is_Nv=0.100}', "");
Error('\p{Numeric_Value=_ +400:=}');
Error('\P{Numeric_Value=_ +400:=}');
Expect(1, 65820, '\p{Numeric_Value=40_0}', "");
Expect(0, 65820, '\p{^Numeric_Value=40_0}', "");
Expect(0, 65820, '\P{Numeric_Value=40_0}', "");
Expect(1, 65820, '\P{^Numeric_Value=40_0}', "");
Expect(0, 65819, '\p{Numeric_Value=40_0}', "");
Expect(1, 65819, '\p{^Numeric_Value=40_0}', "");
Expect(1, 65819, '\P{Numeric_Value=40_0}', "");
Expect(0, 65819, '\P{^Numeric_Value=40_0}', "");
Error('\p{Nv: _:=+0040_0}');
Error('\P{Nv: _:=+0040_0}');
Expect(1, 65820, '\p{Nv=400}', "");
Expect(0, 65820, '\p{^Nv=400}', "");
Expect(0, 65820, '\P{Nv=400}', "");
Expect(1, 65820, '\P{^Nv=400}', "");
Expect(0, 65819, '\p{Nv=400}', "");
Expect(1, 65819, '\p{^Nv=400}', "");
Expect(1, 65819, '\P{Nv=400}', "");
Expect(0, 65819, '\P{^Nv=400}', "");
Error('\p{Is_Numeric_Value=/a/	40	0}');
Error('\P{Is_Numeric_Value=/a/	40	0}');
Expect(1, 65820, '\p{Is_Numeric_Value=+00000000400}', "");
Expect(0, 65820, '\p{^Is_Numeric_Value=+00000000400}', "");
Expect(0, 65820, '\P{Is_Numeric_Value=+00000000400}', "");
Expect(1, 65820, '\P{^Is_Numeric_Value=+00000000400}', "");
Expect(0, 65819, '\p{Is_Numeric_Value=+00000000400}', "");
Expect(1, 65819, '\p{^Is_Numeric_Value=+00000000400}', "");
Expect(1, 65819, '\P{Is_Numeric_Value=+00000000400}', "");
Expect(0, 65819, '\P{^Is_Numeric_Value=+00000000400}', "");
Error('\p{Is_Nv=-00040/a/0}');
Error('\P{Is_Nv=-00040/a/0}');
Expect(1, 65820, '\p{Is_Nv=00000040_0}', "");
Expect(0, 65820, '\p{^Is_Nv=00000040_0}', "");
Expect(0, 65820, '\P{Is_Nv=00000040_0}', "");
Expect(1, 65820, '\P{^Is_Nv=00000040_0}', "");
Expect(0, 65819, '\p{Is_Nv=00000040_0}', "");
Expect(1, 65819, '\p{^Is_Nv=00000040_0}', "");
Expect(1, 65819, '\P{Is_Nv=00000040_0}', "");
Expect(0, 65819, '\P{^Is_Nv=00000040_0}', "");
Error('\p{Numeric_Value=/a/-_+00005/0000000008}');
Error('\P{Numeric_Value=/a/-_+00005/0000000008}');
Expect(1, 8541, '\p{Numeric_Value=+0005/08}', "");
Expect(0, 8541, '\p{^Numeric_Value=+0005/08}', "");
Expect(0, 8541, '\P{Numeric_Value=+0005/08}', "");
Expect(1, 8541, '\P{^Numeric_Value=+0005/08}', "");
Expect(0, 8540, '\p{Numeric_Value=+0005/08}', "");
Expect(1, 8540, '\p{^Numeric_Value=+0005/08}', "");
Expect(1, 8540, '\P{Numeric_Value=+0005/08}', "");
Expect(0, 8540, '\P{^Numeric_Value=+0005/08}', "");
Error('\p{Numeric_Value=0.62}');
Error('\P{Numeric_Value=0.62}');
Expect(1, 8541, '\p{Numeric_Value=0.625}', "");
Expect(0, 8541, '\p{^Numeric_Value=0.625}', "");
Expect(0, 8541, '\P{Numeric_Value=0.625}', "");
Expect(1, 8541, '\P{^Numeric_Value=0.625}', "");
Expect(0, 8540, '\p{Numeric_Value=0.625}', "");
Expect(1, 8540, '\p{^Numeric_Value=0.625}', "");
Expect(1, 8540, '\P{Numeric_Value=0.625}', "");
Expect(0, 8540, '\P{^Numeric_Value=0.625}', "");
Error('\p{Nv::=__000000005/000008}');
Error('\P{Nv::=__000000005/000008}');
Expect(1, 8541, '\p{Nv=00005/08}', "");
Expect(0, 8541, '\p{^Nv=00005/08}', "");
Expect(0, 8541, '\P{Nv=00005/08}', "");
Expect(1, 8541, '\P{^Nv=00005/08}', "");
Expect(0, 8540, '\p{Nv=00005/08}', "");
Expect(1, 8540, '\p{^Nv=00005/08}', "");
Expect(1, 8540, '\P{Nv=00005/08}', "");
Expect(0, 8540, '\P{^Nv=00005/08}', "");
Error('\p{Nv: 0.62}');
Error('\P{Nv: 0.62}');
Expect(1, 8541, '\p{Nv=0.625}', "");
Expect(0, 8541, '\p{^Nv=0.625}', "");
Expect(0, 8541, '\P{Nv=0.625}', "");
Expect(1, 8541, '\P{^Nv=0.625}', "");
Expect(0, 8540, '\p{Nv=0.625}', "");
Expect(1, 8540, '\p{^Nv=0.625}', "");
Expect(1, 8540, '\P{Nv=0.625}', "");
Expect(0, 8540, '\P{^Nv=0.625}', "");
Error('\p{Is_Numeric_Value=_:=05/0008}');
Error('\P{Is_Numeric_Value=_:=05/0008}');
Expect(1, 8541, '\p{Is_Numeric_Value=+00005/0000008}', "");
Expect(0, 8541, '\p{^Is_Numeric_Value=+00005/0000008}', "");
Expect(0, 8541, '\P{Is_Numeric_Value=+00005/0000008}', "");
Expect(1, 8541, '\P{^Is_Numeric_Value=+00005/0000008}', "");
Expect(0, 8540, '\p{Is_Numeric_Value=+00005/0000008}', "");
Expect(1, 8540, '\p{^Is_Numeric_Value=+00005/0000008}', "");
Expect(1, 8540, '\P{Is_Numeric_Value=+00005/0000008}', "");
Expect(0, 8540, '\P{^Is_Numeric_Value=+00005/0000008}', "");
Error('\p{Is_Numeric_Value=0.62}');
Error('\P{Is_Numeric_Value=0.62}');
Expect(1, 8541, '\p{Is_Numeric_Value=0.625}', "");
Expect(0, 8541, '\p{^Is_Numeric_Value=0.625}', "");
Expect(0, 8541, '\P{Is_Numeric_Value=0.625}', "");
Expect(1, 8541, '\P{^Is_Numeric_Value=0.625}', "");
Expect(0, 8540, '\p{Is_Numeric_Value=0.625}', "");
Expect(1, 8540, '\p{^Is_Numeric_Value=0.625}', "");
Expect(1, 8540, '\P{Is_Numeric_Value=0.625}', "");
Expect(0, 8540, '\P{^Is_Numeric_Value=0.625}', "");
Error('\p{Is_Nv=	5/000000008:=}');
Error('\P{Is_Nv=	5/000000008:=}');
Expect(1, 8541, '\p{Is_Nv=00000005/0000008}', "");
Expect(0, 8541, '\p{^Is_Nv=00000005/0000008}', "");
Expect(0, 8541, '\P{Is_Nv=00000005/0000008}', "");
Expect(1, 8541, '\P{^Is_Nv=00000005/0000008}', "");
Expect(0, 8540, '\p{Is_Nv=00000005/0000008}', "");
Expect(1, 8540, '\p{^Is_Nv=00000005/0000008}', "");
Expect(1, 8540, '\P{Is_Nv=00000005/0000008}', "");
Expect(0, 8540, '\P{^Is_Nv=00000005/0000008}', "");
Error('\p{Is_Nv=0.62}');
Error('\P{Is_Nv=0.62}');
Expect(1, 8541, '\p{Is_Nv=0.625}', "");
Expect(0, 8541, '\p{^Is_Nv=0.625}', "");
Expect(0, 8541, '\P{Is_Nv=0.625}', "");
Expect(1, 8541, '\P{^Is_Nv=0.625}', "");
Expect(0, 8540, '\p{Is_Nv=0.625}', "");
Expect(1, 8540, '\p{^Is_Nv=0.625}', "");
Expect(1, 8540, '\P{Is_Nv=0.625}', "");
Expect(0, 8540, '\P{^Is_Nv=0.625}', "");
Error('\p{Numeric_Value=:= -+000000020}');
Error('\P{Numeric_Value=:= -+000000020}');
Expect(1, 4979, '\p{Numeric_Value=00002_0}', "");
Expect(0, 4979, '\p{^Numeric_Value=00002_0}', "");
Expect(0, 4979, '\P{Numeric_Value=00002_0}', "");
Expect(1, 4979, '\P{^Numeric_Value=00002_0}', "");
Expect(0, 4978, '\p{Numeric_Value=00002_0}', "");
Expect(1, 4978, '\p{^Numeric_Value=00002_0}', "");
Expect(1, 4978, '\P{Numeric_Value=00002_0}', "");
Expect(0, 4978, '\P{^Numeric_Value=00002_0}', "");
Error('\p{Nv= :=+0000020}');
Error('\P{Nv= :=+0000020}');
Expect(1, 4979, '\p{Nv=+020}', "");
Expect(0, 4979, '\p{^Nv=+020}', "");
Expect(0, 4979, '\P{Nv=+020}', "");
Expect(1, 4979, '\P{^Nv=+020}', "");
Expect(0, 4978, '\p{Nv=+020}', "");
Expect(1, 4978, '\p{^Nv=+020}', "");
Expect(1, 4978, '\P{Nv=+020}', "");
Expect(0, 4978, '\P{^Nv=+020}', "");
Error('\p{Is_Numeric_Value=:=	00_00 00 00-20}');
Error('\P{Is_Numeric_Value=:=	00_00 00 00-20}');
Expect(1, 4979, '\p{Is_Numeric_Value=00020}', "");
Expect(0, 4979, '\p{^Is_Numeric_Value=00020}', "");
Expect(0, 4979, '\P{Is_Numeric_Value=00020}', "");
Expect(1, 4979, '\P{^Is_Numeric_Value=00020}', "");
Expect(0, 4978, '\p{Is_Numeric_Value=00020}', "");
Expect(1, 4978, '\p{^Is_Numeric_Value=00020}', "");
Expect(1, 4978, '\P{Is_Numeric_Value=00020}', "");
Expect(0, 4978, '\P{^Is_Numeric_Value=00020}', "");
Error('\p{Is_Nv=/a/  +0000002 0}');
Error('\P{Is_Nv=/a/  +0000002 0}');
Expect(1, 4979, '\p{Is_Nv:20}', "");
Expect(0, 4979, '\p{^Is_Nv:20}', "");
Expect(0, 4979, '\P{Is_Nv:20}', "");
Expect(1, 4979, '\P{^Is_Nv:20}', "");
Expect(0, 4978, '\p{Is_Nv:20}', "");
Expect(1, 4978, '\p{^Is_Nv:20}', "");
Expect(1, 4978, '\P{Is_Nv:20}', "");
Expect(0, 4978, '\P{^Is_Nv:20}', "");
Error('\p{Numeric_Value=	:=30000}');
Error('\P{Numeric_Value=	:=30000}');
Expect(1, 65837, '\p{Numeric_Value:00000003000_0}', "");
Expect(0, 65837, '\p{^Numeric_Value:00000003000_0}', "");
Expect(0, 65837, '\P{Numeric_Value:00000003000_0}', "");
Expect(1, 65837, '\P{^Numeric_Value:00000003000_0}', "");
Expect(0, 65836, '\p{Numeric_Value:00000003000_0}', "");
Expect(1, 65836, '\p{^Numeric_Value:00000003000_0}', "");
Expect(1, 65836, '\P{Numeric_Value:00000003000_0}', "");
Expect(0, 65836, '\P{^Numeric_Value:00000003000_0}', "");
Error('\p{Nv=_:=+00000000-0300	00}');
Error('\P{Nv=_:=+00000000-0300	00}');
Expect(1, 65837, '\p{Nv=030000}', "");
Expect(0, 65837, '\p{^Nv=030000}', "");
Expect(0, 65837, '\P{Nv=030000}', "");
Expect(1, 65837, '\P{^Nv=030000}', "");
Expect(0, 65836, '\p{Nv=030000}', "");
Expect(1, 65836, '\p{^Nv=030000}', "");
Expect(1, 65836, '\P{Nv=030000}', "");
Expect(0, 65836, '\P{^Nv=030000}', "");
Error('\p{Is_Numeric_Value=	/a/+0000030000}');
Error('\P{Is_Numeric_Value=	/a/+0000030000}');
Expect(1, 65837, '\p{Is_Numeric_Value=000_000_030_000}', "");
Expect(0, 65837, '\p{^Is_Numeric_Value=000_000_030_000}', "");
Expect(0, 65837, '\P{Is_Numeric_Value=000_000_030_000}', "");
Expect(1, 65837, '\P{^Is_Numeric_Value=000_000_030_000}', "");
Expect(0, 65836, '\p{Is_Numeric_Value=000_000_030_000}', "");
Expect(1, 65836, '\p{^Is_Numeric_Value=000_000_030_000}', "");
Expect(1, 65836, '\P{Is_Numeric_Value=000_000_030_000}', "");
Expect(0, 65836, '\P{^Is_Numeric_Value=000_000_030_000}', "");
Error('\p{Is_Nv=  0_0:=0 0 0	0-0030000}');
Error('\P{Is_Nv=  0_0:=0 0 0	0-0030000}');
Expect(1, 65837, '\p{Is_Nv=0000000030000}', "");
Expect(0, 65837, '\p{^Is_Nv=0000000030000}', "");
Expect(0, 65837, '\P{Is_Nv=0000000030000}', "");
Expect(1, 65837, '\P{^Is_Nv=0000000030000}', "");
Expect(0, 65836, '\p{Is_Nv=0000000030000}', "");
Expect(1, 65836, '\p{^Is_Nv=0000000030000}', "");
Expect(1, 65836, '\P{Is_Nv=0000000030000}', "");
Expect(0, 65836, '\P{^Is_Nv=0000000030000}', "");
Error('\p{Numeric_Value=_:=+00000000010}');
Error('\P{Numeric_Value=_:=+00000000010}');
Expect(1, 3056, '\p{Numeric_Value=0000000010}', "");
Expect(0, 3056, '\p{^Numeric_Value=0000000010}', "");
Expect(0, 3056, '\P{Numeric_Value=0000000010}', "");
Expect(1, 3056, '\P{^Numeric_Value=0000000010}', "");
Expect(0, 3055, '\p{Numeric_Value=0000000010}', "");
Expect(1, 3055, '\p{^Numeric_Value=0000000010}', "");
Expect(1, 3055, '\P{Numeric_Value=0000000010}', "");
Expect(0, 3055, '\P{^Numeric_Value=0000000010}', "");
Error('\p{Nv=-_10:=}');
Error('\P{Nv=-_10:=}');
Expect(1, 3056, '\p{Nv=000010}', "");
Expect(0, 3056, '\p{^Nv=000010}', "");
Expect(0, 3056, '\P{Nv=000010}', "");
Expect(1, 3056, '\P{^Nv=000010}', "");
Expect(0, 3055, '\p{Nv=000010}', "");
Expect(1, 3055, '\p{^Nv=000010}', "");
Expect(1, 3055, '\P{Nv=000010}', "");
Expect(0, 3055, '\P{^Nv=000010}', "");
Error('\p{Is_Numeric_Value=-+00-01/a/0}');
Error('\P{Is_Numeric_Value=-+00-01/a/0}');
Expect(1, 3056, '\p{Is_Numeric_Value=10}', "");
Expect(0, 3056, '\p{^Is_Numeric_Value=10}', "");
Expect(0, 3056, '\P{Is_Numeric_Value=10}', "");
Expect(1, 3056, '\P{^Is_Numeric_Value=10}', "");
Expect(0, 3055, '\p{Is_Numeric_Value=10}', "");
Expect(1, 3055, '\p{^Is_Numeric_Value=10}', "");
Expect(1, 3055, '\P{Is_Numeric_Value=10}', "");
Expect(0, 3055, '\P{^Is_Numeric_Value=10}', "");
Error('\p{Is_Nv=-:=0	0	0-0 0 0_0010}');
Error('\P{Is_Nv=-:=0	0	0-0 0 0_0010}');
Expect(1, 3056, '\p{Is_Nv=0_0_0_0_0_0_00010}', "");
Expect(0, 3056, '\p{^Is_Nv=0_0_0_0_0_0_00010}', "");
Expect(0, 3056, '\P{Is_Nv=0_0_0_0_0_0_00010}', "");
Expect(1, 3056, '\P{^Is_Nv=0_0_0_0_0_0_00010}', "");
Expect(0, 3055, '\p{Is_Nv=0_0_0_0_0_0_00010}', "");
Expect(1, 3055, '\p{^Is_Nv=0_0_0_0_0_0_00010}', "");
Expect(1, 3055, '\P{Is_Nv=0_0_0_0_0_0_00010}', "");
Expect(0, 3055, '\P{^Is_Nv=0_0_0_0_0_0_00010}', "");
Error('\p{Numeric_Value=/a/ -000000031}');
Error('\P{Numeric_Value=/a/ -000000031}');
Expect(1, 12891, '\p{Numeric_Value=00003_1}', "");
Expect(0, 12891, '\p{^Numeric_Value=00003_1}', "");
Expect(0, 12891, '\P{Numeric_Value=00003_1}', "");
Expect(1, 12891, '\P{^Numeric_Value=00003_1}', "");
Expect(0, 12890, '\p{Numeric_Value=00003_1}', "");
Expect(1, 12890, '\p{^Numeric_Value=00003_1}', "");
Expect(1, 12890, '\P{Numeric_Value=00003_1}', "");
Expect(0, 12890, '\P{^Numeric_Value=00003_1}', "");
Error('\p{Nv= 000003 1:=}');
Error('\P{Nv= 000003 1:=}');
Expect(1, 12891, '\p{Nv:	+031}', "");
Expect(0, 12891, '\p{^Nv:	+031}', "");
Expect(0, 12891, '\P{Nv:	+031}', "");
Expect(1, 12891, '\P{^Nv:	+031}', "");
Expect(0, 12890, '\p{Nv:	+031}', "");
Expect(1, 12890, '\p{^Nv:	+031}', "");
Expect(1, 12890, '\P{Nv:	+031}', "");
Expect(0, 12890, '\P{^Nv:	+031}', "");
Error('\p{Is_Numeric_Value= 031/a/}');
Error('\P{Is_Numeric_Value= 031/a/}');
Expect(1, 12891, '\p{Is_Numeric_Value=+0000000031}', "");
Expect(0, 12891, '\p{^Is_Numeric_Value=+0000000031}', "");
Expect(0, 12891, '\P{Is_Numeric_Value=+0000000031}', "");
Expect(1, 12891, '\P{^Is_Numeric_Value=+0000000031}', "");
Expect(0, 12890, '\p{Is_Numeric_Value=+0000000031}', "");
Expect(1, 12890, '\p{^Is_Numeric_Value=+0000000031}', "");
Expect(1, 12890, '\P{Is_Numeric_Value=+0000000031}', "");
Expect(0, 12890, '\P{^Is_Numeric_Value=+0000000031}', "");
Error('\p{Is_Nv= _0_0	00/a/31}');
Error('\P{Is_Nv= _0_0	00/a/31}');
Expect(1, 12891, '\p{Is_Nv=+00003_1}', "");
Expect(0, 12891, '\p{^Is_Nv=+00003_1}', "");
Expect(0, 12891, '\P{Is_Nv=+00003_1}', "");
Expect(1, 12891, '\P{^Is_Nv=+00003_1}', "");
Expect(0, 12890, '\p{Is_Nv=+00003_1}', "");
Expect(1, 12890, '\p{^Is_Nv=+00003_1}', "");
Expect(1, 12890, '\P{Is_Nv=+00003_1}', "");
Expect(0, 12890, '\P{^Is_Nv=+00003_1}', "");
Error('\p{Numeric_Value=/a/ +0800-0}');
Error('\P{Numeric_Value=/a/ +0800-0}');
Expect(1, 65833, '\p{Numeric_Value=+008000}', "");
Expect(0, 65833, '\p{^Numeric_Value=+008000}', "");
Expect(0, 65833, '\P{Numeric_Value=+008000}', "");
Expect(1, 65833, '\P{^Numeric_Value=+008000}', "");
Expect(0, 65832, '\p{Numeric_Value=+008000}', "");
Expect(1, 65832, '\p{^Numeric_Value=+008000}', "");
Expect(1, 65832, '\P{Numeric_Value=+008000}', "");
Expect(0, 65832, '\P{^Numeric_Value=+008000}', "");
Error('\p{Nv=_/a/08000}');
Error('\P{Nv=_/a/08000}');
Expect(1, 65833, '\p{Nv=00008000}', "");
Expect(0, 65833, '\p{^Nv=00008000}', "");
Expect(0, 65833, '\P{Nv=00008000}', "");
Expect(1, 65833, '\P{^Nv=00008000}', "");
Expect(0, 65832, '\p{Nv=00008000}', "");
Expect(1, 65832, '\p{^Nv=00008000}', "");
Expect(1, 65832, '\P{Nv=00008000}', "");
Expect(0, 65832, '\P{^Nv=00008000}', "");
Error('\p{Is_Numeric_Value:   /a/-00008000}');
Error('\P{Is_Numeric_Value:   /a/-00008000}');
Expect(1, 65833, '\p{Is_Numeric_Value=0008000}', "");
Expect(0, 65833, '\p{^Is_Numeric_Value=0008000}', "");
Expect(0, 65833, '\P{Is_Numeric_Value=0008000}', "");
Expect(1, 65833, '\P{^Is_Numeric_Value=0008000}', "");
Expect(0, 65832, '\p{Is_Numeric_Value=0008000}', "");
Expect(1, 65832, '\p{^Is_Numeric_Value=0008000}', "");
Expect(1, 65832, '\P{Is_Numeric_Value=0008000}', "");
Expect(0, 65832, '\P{^Is_Numeric_Value=0008000}', "");
Error('\p{Is_Nv=:=_-00	80_00}');
Error('\P{Is_Nv=:=_-00	80_00}');
Expect(1, 65833, '\p{Is_Nv:	0000000008000}', "");
Expect(0, 65833, '\p{^Is_Nv:	0000000008000}', "");
Expect(0, 65833, '\P{Is_Nv:	0000000008000}', "");
Expect(1, 65833, '\P{^Is_Nv:	0000000008000}', "");
Expect(0, 65832, '\p{Is_Nv:	0000000008000}', "");
Expect(1, 65832, '\p{^Is_Nv:	0000000008000}', "");
Expect(1, 65832, '\P{Is_Nv:	0000000008000}', "");
Expect(0, 65832, '\P{^Is_Nv:	0000000008000}', "");
Error('\p{Numeric_Value=	:=+0 0 0_1-0_0-00 0 0_000000}');
Error('\P{Numeric_Value=	:=+0 0 0_1-0_0-00 0 0_000000}');
Expect(1, 20806, '\p{Numeric_Value=0_0_0_0_0_0_0_0_1_0_0_0_0_00000000}', "");
Expect(0, 20806, '\p{^Numeric_Value=0_0_0_0_0_0_0_0_1_0_0_0_0_00000000}', "");
Expect(0, 20806, '\P{Numeric_Value=0_0_0_0_0_0_0_0_1_0_0_0_0_00000000}', "");
Expect(1, 20806, '\P{^Numeric_Value=0_0_0_0_0_0_0_0_1_0_0_0_0_00000000}', "");
Expect(0, 20805, '\p{Numeric_Value=0_0_0_0_0_0_0_0_1_0_0_0_0_00000000}', "");
Expect(1, 20805, '\p{^Numeric_Value=0_0_0_0_0_0_0_0_1_0_0_0_0_00000000}', "");
Expect(1, 20805, '\P{Numeric_Value=0_0_0_0_0_0_0_0_1_0_0_0_0_00000000}', "");
Expect(0, 20805, '\P{^Numeric_Value=0_0_0_0_0_0_0_0_1_0_0_0_0_00000000}', "");
Error('\p{Nv:    :=00000001000000000000}');
Error('\P{Nv:    :=00000001000000000000}');
Expect(1, 20806, '\p{Nv=+0000000001000000000000}', "");
Expect(0, 20806, '\p{^Nv=+0000000001000000000000}', "");
Expect(0, 20806, '\P{Nv=+0000000001000000000000}', "");
Expect(1, 20806, '\P{^Nv=+0000000001000000000000}', "");
Expect(0, 20805, '\p{Nv=+0000000001000000000000}', "");
Expect(1, 20805, '\p{^Nv=+0000000001000000000000}', "");
Expect(1, 20805, '\P{Nv=+0000000001000000000000}', "");
Expect(0, 20805, '\P{^Nv=+0000000001000000000000}', "");
Error('\p{Is_Numeric_Value=  +000	000	001000_000	000	000/a/}');
Error('\P{Is_Numeric_Value=  +000	000	001000_000	000	000/a/}');
Expect(1, 20806, '\p{Is_Numeric_Value=0000001000000000000}', "");
Expect(0, 20806, '\p{^Is_Numeric_Value=0000001000000000000}', "");
Expect(0, 20806, '\P{Is_Numeric_Value=0000001000000000000}', "");
Expect(1, 20806, '\P{^Is_Numeric_Value=0000001000000000000}', "");
Expect(0, 20805, '\p{Is_Numeric_Value=0000001000000000000}', "");
Expect(1, 20805, '\p{^Is_Numeric_Value=0000001000000000000}', "");
Expect(1, 20805, '\P{Is_Numeric_Value=0000001000000000000}', "");
Expect(0, 20805, '\P{^Is_Numeric_Value=0000001000000000000}', "");
Error('\p{Is_Nv=__0:=01 0 0_00-00 000000}');
Error('\P{Is_Nv=__0:=01 0 0_00-00 000000}');
Expect(1, 20806, '\p{Is_Nv=000000001000000000000}', "");
Expect(0, 20806, '\p{^Is_Nv=000000001000000000000}', "");
Expect(0, 20806, '\P{Is_Nv=000000001000000000000}', "");
Expect(1, 20806, '\P{^Is_Nv=000000001000000000000}', "");
Expect(0, 20805, '\p{Is_Nv=000000001000000000000}', "");
Expect(1, 20805, '\p{^Is_Nv=000000001000000000000}', "");
Expect(1, 20805, '\P{Is_Nv=000000001000000000000}', "");
Expect(0, 20805, '\P{^Is_Nv=000000001000000000000}', "");
Error('\p{Numeric_Value=_00035:=}');
Error('\P{Numeric_Value=_00035:=}');
Expect(1, 12895, '\p{Numeric_Value=00000000035}', "");
Expect(0, 12895, '\p{^Numeric_Value=00000000035}', "");
Expect(0, 12895, '\P{Numeric_Value=00000000035}', "");
Expect(1, 12895, '\P{^Numeric_Value=00000000035}', "");
Expect(0, 12894, '\p{Numeric_Value=00000000035}', "");
Expect(1, 12894, '\p{^Numeric_Value=00000000035}', "");
Expect(1, 12894, '\P{Numeric_Value=00000000035}', "");
Expect(0, 12894, '\P{^Numeric_Value=00000000035}', "");
Error('\p{Nv=__+00	00_00 03 5/a/}');
Error('\P{Nv=__+00	00_00 03 5/a/}');
Expect(1, 12895, '\p{Nv=00035}', "");
Expect(0, 12895, '\p{^Nv=00035}', "");
Expect(0, 12895, '\P{Nv=00035}', "");
Expect(1, 12895, '\P{^Nv=00035}', "");
Expect(0, 12894, '\p{Nv=00035}', "");
Expect(1, 12894, '\p{^Nv=00035}', "");
Expect(1, 12894, '\P{Nv=00035}', "");
Expect(0, 12894, '\P{^Nv=00035}', "");
Error('\p{Is_Numeric_Value=/a/ 	035}');
Error('\P{Is_Numeric_Value=/a/ 	035}');
Expect(1, 12895, '\p{Is_Numeric_Value=00_00_00_035}', "");
Expect(0, 12895, '\p{^Is_Numeric_Value=00_00_00_035}', "");
Expect(0, 12895, '\P{Is_Numeric_Value=00_00_00_035}', "");
Expect(1, 12895, '\P{^Is_Numeric_Value=00_00_00_035}', "");
Expect(0, 12894, '\p{Is_Numeric_Value=00_00_00_035}', "");
Expect(1, 12894, '\p{^Is_Numeric_Value=00_00_00_035}', "");
Expect(1, 12894, '\P{Is_Numeric_Value=00_00_00_035}', "");
Expect(0, 12894, '\P{^Is_Numeric_Value=00_00_00_035}', "");
Error('\p{Is_Nv= /a/+0003 5}');
Error('\P{Is_Nv= /a/+0003 5}');
Expect(1, 12895, '\p{Is_Nv:	+0_0_0_0_0_0_0_0035}', "");
Expect(0, 12895, '\p{^Is_Nv:	+0_0_0_0_0_0_0_0035}', "");
Expect(0, 12895, '\P{Is_Nv:	+0_0_0_0_0_0_0_0035}', "");
Expect(1, 12895, '\P{^Is_Nv:	+0_0_0_0_0_0_0_0035}', "");
Expect(0, 12894, '\p{Is_Nv:	+0_0_0_0_0_0_0_0035}', "");
Expect(1, 12894, '\p{^Is_Nv:	+0_0_0_0_0_0_0_0035}', "");
Expect(1, 12894, '\P{Is_Nv:	+0_0_0_0_0_0_0_0035}', "");
Expect(0, 12894, '\P{^Is_Nv:	+0_0_0_0_0_0_0_0035}', "");
Error('\p{Numeric_Value:/a/_-+01	1}');
Error('\P{Numeric_Value:/a/_-+01	1}');
Expect(1, 8554, '\p{Numeric_Value=0000000011}', "");
Expect(0, 8554, '\p{^Numeric_Value=0000000011}', "");
Expect(0, 8554, '\P{Numeric_Value=0000000011}', "");
Expect(1, 8554, '\P{^Numeric_Value=0000000011}', "");
Expect(0, 8553, '\p{Numeric_Value=0000000011}', "");
Expect(1, 8553, '\p{^Numeric_Value=0000000011}', "");
Expect(1, 8553, '\P{Numeric_Value=0000000011}', "");
Expect(0, 8553, '\P{^Numeric_Value=0000000011}', "");
Error('\p{Nv= /a/+0000011}');
Error('\P{Nv= /a/+0000011}');
Expect(1, 8554, '\p{Nv=001_1}', "");
Expect(0, 8554, '\p{^Nv=001_1}', "");
Expect(0, 8554, '\P{Nv=001_1}', "");
Expect(1, 8554, '\P{^Nv=001_1}', "");
Expect(0, 8553, '\p{Nv=001_1}', "");
Expect(1, 8553, '\p{^Nv=001_1}', "");
Expect(1, 8553, '\P{Nv=001_1}', "");
Expect(0, 8553, '\P{^Nv=001_1}', "");
Error('\p{Is_Numeric_Value=-:=+00000000011}');
Error('\P{Is_Numeric_Value=-:=+00000000011}');
Expect(1, 8554, '\p{Is_Numeric_Value=11}', "");
Expect(0, 8554, '\p{^Is_Numeric_Value=11}', "");
Expect(0, 8554, '\P{Is_Numeric_Value=11}', "");
Expect(1, 8554, '\P{^Is_Numeric_Value=11}', "");
Expect(0, 8553, '\p{Is_Numeric_Value=11}', "");
Expect(1, 8553, '\p{^Is_Numeric_Value=11}', "");
Expect(1, 8553, '\P{Is_Numeric_Value=11}', "");
Expect(0, 8553, '\P{^Is_Numeric_Value=11}', "");
Error('\p{Is_Nv=	+00 0 000 0:=0_0 11}');
Error('\P{Is_Nv=	+00 0 000 0:=0_0 11}');
Expect(1, 8554, '\p{Is_Nv=+0_0_0_011}', "");
Expect(0, 8554, '\p{^Is_Nv=+0_0_0_011}', "");
Expect(0, 8554, '\P{Is_Nv=+0_0_0_011}', "");
Expect(1, 8554, '\P{^Is_Nv=+0_0_0_011}', "");
Expect(0, 8553, '\p{Is_Nv=+0_0_0_011}', "");
Expect(1, 8553, '\p{^Is_Nv=+0_0_0_011}', "");
Expect(1, 8553, '\P{Is_Nv=+0_0_0_011}', "");
Expect(0, 8553, '\P{^Is_Nv=+0_0_0_011}', "");
Error('\p{Numeric_Value=/a/0000000001/0000005}');
Error('\P{Numeric_Value=/a/0000000001/0000005}');
Expect(1, 8533, '\p{Numeric_Value=00001/05}', "");
Expect(0, 8533, '\p{^Numeric_Value=00001/05}', "");
Expect(0, 8533, '\P{Numeric_Value=00001/05}', "");
Expect(1, 8533, '\P{^Numeric_Value=00001/05}', "");
Expect(0, 8532, '\p{Numeric_Value=00001/05}', "");
Expect(1, 8532, '\p{^Numeric_Value=00001/05}', "");
Expect(1, 8532, '\P{Numeric_Value=00001/05}', "");
Expect(0, 8532, '\P{^Numeric_Value=00001/05}', "");
Expect(1, 8533, '\p{Numeric_Value=0.200}', "");
Expect(0, 8533, '\p{^Numeric_Value=0.200}', "");
Expect(0, 8533, '\P{Numeric_Value=0.200}', "");
Expect(1, 8533, '\P{^Numeric_Value=0.200}', "");
Expect(0, 8532, '\p{Numeric_Value=0.200}', "");
Expect(1, 8532, '\p{^Numeric_Value=0.200}', "");
Expect(1, 8532, '\P{Numeric_Value=0.200}', "");
Expect(0, 8532, '\P{^Numeric_Value=0.200}', "");
Error('\p{Nv=_	000000001/00005:=}');
Error('\P{Nv=_	000000001/00005:=}');
Expect(1, 8533, '\p{Nv=+0000000001/0000000005}', "");
Expect(0, 8533, '\p{^Nv=+0000000001/0000000005}', "");
Expect(0, 8533, '\P{Nv=+0000000001/0000000005}', "");
Expect(1, 8533, '\P{^Nv=+0000000001/0000000005}', "");
Expect(0, 8532, '\p{Nv=+0000000001/0000000005}', "");
Expect(1, 8532, '\p{^Nv=+0000000001/0000000005}', "");
Expect(1, 8532, '\P{Nv=+0000000001/0000000005}', "");
Expect(0, 8532, '\P{^Nv=+0000000001/0000000005}', "");
Expect(1, 8533, '\p{Nv=0.200}', "");
Expect(0, 8533, '\p{^Nv=0.200}', "");
Expect(0, 8533, '\P{Nv=0.200}', "");
Expect(1, 8533, '\P{^Nv=0.200}', "");
Expect(0, 8532, '\p{Nv=0.200}', "");
Expect(1, 8532, '\p{^Nv=0.200}', "");
Expect(1, 8532, '\P{Nv=0.200}', "");
Expect(0, 8532, '\P{^Nv=0.200}', "");
Error('\p{Is_Numeric_Value=/a/  0001/005}');
Error('\P{Is_Numeric_Value=/a/  0001/005}');
Expect(1, 8533, '\p{Is_Numeric_Value=+1/000000005}', "");
Expect(0, 8533, '\p{^Is_Numeric_Value=+1/000000005}', "");
Expect(0, 8533, '\P{Is_Numeric_Value=+1/000000005}', "");
Expect(1, 8533, '\P{^Is_Numeric_Value=+1/000000005}', "");
Expect(0, 8532, '\p{Is_Numeric_Value=+1/000000005}', "");
Expect(1, 8532, '\p{^Is_Numeric_Value=+1/000000005}', "");
Expect(1, 8532, '\P{Is_Numeric_Value=+1/000000005}', "");
Expect(0, 8532, '\P{^Is_Numeric_Value=+1/000000005}', "");
Expect(1, 8533, '\p{Is_Numeric_Value=0.200}', "");
Expect(0, 8533, '\p{^Is_Numeric_Value=0.200}', "");
Expect(0, 8533, '\P{Is_Numeric_Value=0.200}', "");
Expect(1, 8533, '\P{^Is_Numeric_Value=0.200}', "");
Expect(0, 8532, '\p{Is_Numeric_Value=0.200}', "");
Expect(1, 8532, '\p{^Is_Numeric_Value=0.200}', "");
Expect(1, 8532, '\P{Is_Numeric_Value=0.200}', "");
Expect(0, 8532, '\P{^Is_Numeric_Value=0.200}', "");
Error('\p{Is_Nv: 0000001/00005:=}');
Error('\P{Is_Nv: 0000001/00005:=}');
Expect(1, 8533, '\p{Is_Nv:0000000001/00000005}', "");
Expect(0, 8533, '\p{^Is_Nv:0000000001/00000005}', "");
Expect(0, 8533, '\P{Is_Nv:0000000001/00000005}', "");
Expect(1, 8533, '\P{^Is_Nv:0000000001/00000005}', "");
Expect(0, 8532, '\p{Is_Nv:0000000001/00000005}', "");
Expect(1, 8532, '\p{^Is_Nv:0000000001/00000005}', "");
Expect(1, 8532, '\P{Is_Nv:0000000001/00000005}', "");
Expect(0, 8532, '\P{^Is_Nv:0000000001/00000005}', "");
Expect(1, 8533, '\p{Is_Nv=0.200}', "");
Expect(0, 8533, '\p{^Is_Nv=0.200}', "");
Expect(0, 8533, '\P{Is_Nv=0.200}', "");
Expect(1, 8533, '\P{^Is_Nv=0.200}', "");
Expect(0, 8532, '\p{Is_Nv=0.200}', "");
Expect(1, 8532, '\p{^Is_Nv=0.200}', "");
Expect(1, 8532, '\P{Is_Nv=0.200}', "");
Expect(0, 8532, '\P{^Is_Nv=0.200}', "");
Error('\p{Numeric_Value=:=  NaN}');
Error('\P{Numeric_Value=:=  NaN}');
Expect(1, 47, '\p{Numeric_Value=nan}', "");
Expect(0, 47, '\p{^Numeric_Value=nan}', "");
Expect(0, 47, '\P{Numeric_Value=nan}', "");
Expect(1, 47, '\P{^Numeric_Value=nan}', "");
Expect(0, 57, '\p{Numeric_Value=nan}', "");
Expect(1, 57, '\p{^Numeric_Value=nan}', "");
Expect(1, 57, '\P{Numeric_Value=nan}', "");
Expect(0, 57, '\P{^Numeric_Value=nan}', "");
Expect(1, 47, '\p{Numeric_Value=_NAN}', "");
Expect(0, 47, '\p{^Numeric_Value=_NAN}', "");
Expect(0, 47, '\P{Numeric_Value=_NAN}', "");
Expect(1, 47, '\P{^Numeric_Value=_NAN}', "");
Expect(0, 57, '\p{Numeric_Value=_NAN}', "");
Expect(1, 57, '\p{^Numeric_Value=_NAN}', "");
Expect(1, 57, '\P{Numeric_Value=_NAN}', "");
Expect(0, 57, '\P{^Numeric_Value=_NAN}', "");
Error('\p{Nv=/a/		nan}');
Error('\P{Nv=/a/		nan}');
Expect(1, 47, '\p{Nv=nan}', "");
Expect(0, 47, '\p{^Nv=nan}', "");
Expect(0, 47, '\P{Nv=nan}', "");
Expect(1, 47, '\P{^Nv=nan}', "");
Expect(0, 57, '\p{Nv=nan}', "");
Expect(1, 57, '\p{^Nv=nan}', "");
Expect(1, 57, '\P{Nv=nan}', "");
Expect(0, 57, '\P{^Nv=nan}', "");
Expect(1, 47, '\p{Nv= nan}', "");
Expect(0, 47, '\p{^Nv= nan}', "");
Expect(0, 47, '\P{Nv= nan}', "");
Expect(1, 47, '\P{^Nv= nan}', "");
Expect(0, 57, '\p{Nv= nan}', "");
Expect(1, 57, '\p{^Nv= nan}', "");
Expect(1, 57, '\P{Nv= nan}', "");
Expect(0, 57, '\P{^Nv= nan}', "");
Error('\p{Is_Numeric_Value=/a/-	nan}');
Error('\P{Is_Numeric_Value=/a/-	nan}');
Expect(1, 47, '\p{Is_Numeric_Value=nan}', "");
Expect(0, 47, '\p{^Is_Numeric_Value=nan}', "");
Expect(0, 47, '\P{Is_Numeric_Value=nan}', "");
Expect(1, 47, '\P{^Is_Numeric_Value=nan}', "");
Expect(0, 57, '\p{Is_Numeric_Value=nan}', "");
Expect(1, 57, '\p{^Is_Numeric_Value=nan}', "");
Expect(1, 57, '\P{Is_Numeric_Value=nan}', "");
Expect(0, 57, '\P{^Is_Numeric_Value=nan}', "");
Expect(1, 47, '\p{Is_Numeric_Value:   _ NaN}', "");
Expect(0, 47, '\p{^Is_Numeric_Value:   _ NaN}', "");
Expect(0, 47, '\P{Is_Numeric_Value:   _ NaN}', "");
Expect(1, 47, '\P{^Is_Numeric_Value:   _ NaN}', "");
Expect(0, 57, '\p{Is_Numeric_Value:   _ NaN}', "");
Expect(1, 57, '\p{^Is_Numeric_Value:   _ NaN}', "");
Expect(1, 57, '\P{Is_Numeric_Value:   _ NaN}', "");
Expect(0, 57, '\P{^Is_Numeric_Value:   _ NaN}', "");
Error('\p{Is_Nv=/a/  nan}');
Error('\P{Is_Nv=/a/  nan}');
Expect(1, 47, '\p{Is_Nv=nan}', "");
Expect(0, 47, '\p{^Is_Nv=nan}', "");
Expect(0, 47, '\P{Is_Nv=nan}', "");
Expect(1, 47, '\P{^Is_Nv=nan}', "");
Expect(0, 57, '\p{Is_Nv=nan}', "");
Expect(1, 57, '\p{^Is_Nv=nan}', "");
Expect(1, 57, '\P{Is_Nv=nan}', "");
Expect(0, 57, '\P{^Is_Nv=nan}', "");
Expect(1, 47, '\p{Is_Nv=_-nan}', "");
Expect(0, 47, '\p{^Is_Nv=_-nan}', "");
Expect(0, 47, '\P{Is_Nv=_-nan}', "");
Expect(1, 47, '\P{^Is_Nv=_-nan}', "");
Expect(0, 57, '\p{Is_Nv=_-nan}', "");
Expect(1, 57, '\p{^Is_Nv=_-nan}', "");
Expect(1, 57, '\P{Is_Nv=_-nan}', "");
Expect(0, 57, '\P{^Is_Nv=_-nan}', "");
Error('\p{Numeric_Value=:=_ 00015/00002}');
Error('\P{Numeric_Value=:=_ 00015/00002}');
Expect(1, 3889, '\p{Numeric_Value=0015/0000002}', "");
Expect(0, 3889, '\p{^Numeric_Value=0015/0000002}', "");
Expect(0, 3889, '\P{Numeric_Value=0015/0000002}', "");
Expect(1, 3889, '\P{^Numeric_Value=0015/0000002}', "");
Expect(0, 3888, '\p{Numeric_Value=0015/0000002}', "");
Expect(1, 3888, '\p{^Numeric_Value=0015/0000002}', "");
Expect(1, 3888, '\P{Numeric_Value=0015/0000002}', "");
Expect(0, 3888, '\P{^Numeric_Value=0015/0000002}', "");
Expect(1, 3889, '\p{Numeric_Value=7.500}', "");
Expect(0, 3889, '\p{^Numeric_Value=7.500}', "");
Expect(0, 3889, '\P{Numeric_Value=7.500}', "");
Expect(1, 3889, '\P{^Numeric_Value=7.500}', "");
Expect(0, 3888, '\p{Numeric_Value=7.500}', "");
Expect(1, 3888, '\p{^Numeric_Value=7.500}', "");
Expect(1, 3888, '\P{Numeric_Value=7.500}', "");
Expect(0, 3888, '\P{^Numeric_Value=7.500}', "");
Error('\p{Nv=_	015/0000002/a/}');
Error('\P{Nv=_	015/0000002/a/}');
Expect(1, 3889, '\p{Nv=000000015/0000000002}', "");
Expect(0, 3889, '\p{^Nv=000000015/0000000002}', "");
Expect(0, 3889, '\P{Nv=000000015/0000000002}', "");
Expect(1, 3889, '\P{^Nv=000000015/0000000002}', "");
Expect(0, 3888, '\p{Nv=000000015/0000000002}', "");
Expect(1, 3888, '\p{^Nv=000000015/0000000002}', "");
Expect(1, 3888, '\P{Nv=000000015/0000000002}', "");
Expect(0, 3888, '\P{^Nv=000000015/0000000002}', "");
Expect(1, 3889, '\p{Nv=7.500}', "");
Expect(0, 3889, '\p{^Nv=7.500}', "");
Expect(0, 3889, '\P{Nv=7.500}', "");
Expect(1, 3889, '\P{^Nv=7.500}', "");
Expect(0, 3888, '\p{Nv=7.500}', "");
Expect(1, 3888, '\p{^Nv=7.500}', "");
Expect(1, 3888, '\P{Nv=7.500}', "");
Expect(0, 3888, '\P{^Nv=7.500}', "");
Error('\p{Is_Numeric_Value=	:=0000015/0000002}');
Error('\P{Is_Numeric_Value=	:=0000015/0000002}');
Expect(1, 3889, '\p{Is_Numeric_Value=00015/00002}', "");
Expect(0, 3889, '\p{^Is_Numeric_Value=00015/00002}', "");
Expect(0, 3889, '\P{Is_Numeric_Value=00015/00002}', "");
Expect(1, 3889, '\P{^Is_Numeric_Value=00015/00002}', "");
Expect(0, 3888, '\p{Is_Numeric_Value=00015/00002}', "");
Expect(1, 3888, '\p{^Is_Numeric_Value=00015/00002}', "");
Expect(1, 3888, '\P{Is_Numeric_Value=00015/00002}', "");
Expect(0, 3888, '\P{^Is_Numeric_Value=00015/00002}', "");
Expect(1, 3889, '\p{Is_Numeric_Value=7.500}', "");
Expect(0, 3889, '\p{^Is_Numeric_Value=7.500}', "");
Expect(0, 3889, '\P{Is_Numeric_Value=7.500}', "");
Expect(1, 3889, '\P{^Is_Numeric_Value=7.500}', "");
Expect(0, 3888, '\p{Is_Numeric_Value=7.500}', "");
Expect(1, 3888, '\p{^Is_Numeric_Value=7.500}', "");
Expect(1, 3888, '\P{Is_Numeric_Value=7.500}', "");
Expect(0, 3888, '\P{^Is_Numeric_Value=7.500}', "");
Error('\p{Is_Nv=/a/+000000015/00000002}');
Error('\P{Is_Nv=/a/+000000015/00000002}');
Expect(1, 3889, '\p{Is_Nv=0015/002}', "");
Expect(0, 3889, '\p{^Is_Nv=0015/002}', "");
Expect(0, 3889, '\P{Is_Nv=0015/002}', "");
Expect(1, 3889, '\P{^Is_Nv=0015/002}', "");
Expect(0, 3888, '\p{Is_Nv=0015/002}', "");
Expect(1, 3888, '\p{^Is_Nv=0015/002}', "");
Expect(1, 3888, '\P{Is_Nv=0015/002}', "");
Expect(0, 3888, '\P{^Is_Nv=0015/002}', "");
Expect(1, 3889, '\p{Is_Nv=7.500}', "");
Expect(0, 3889, '\p{^Is_Nv=7.500}', "");
Expect(0, 3889, '\P{Is_Nv=7.500}', "");
Expect(1, 3889, '\P{^Is_Nv=7.500}', "");
Expect(0, 3888, '\p{Is_Nv=7.500}', "");
Expect(1, 3888, '\p{^Is_Nv=7.500}', "");
Expect(1, 3888, '\P{Is_Nv=7.500}', "");
Expect(0, 3888, '\P{^Is_Nv=7.500}', "");
Error('\p{Numeric_Value=:=--0007/0008}');
Error('\P{Numeric_Value=:=--0007/0008}');
Expect(1, 8542, '\p{Numeric_Value=000000007/0000008}', "");
Expect(0, 8542, '\p{^Numeric_Value=000000007/0000008}', "");
Expect(0, 8542, '\P{Numeric_Value=000000007/0000008}', "");
Expect(1, 8542, '\P{^Numeric_Value=000000007/0000008}', "");
Expect(0, 8541, '\p{Numeric_Value=000000007/0000008}', "");
Expect(1, 8541, '\p{^Numeric_Value=000000007/0000008}', "");
Expect(1, 8541, '\P{Numeric_Value=000000007/0000008}', "");
Expect(0, 8541, '\P{^Numeric_Value=000000007/0000008}', "");
Error('\p{Numeric_Value=0.9}');
Error('\P{Numeric_Value=0.9}');
Error('\p{Numeric_Value=0.88}');
Error('\P{Numeric_Value=0.88}');
Expect(1, 8542, '\p{Numeric_Value=0.875}', "");
Expect(0, 8542, '\p{^Numeric_Value=0.875}', "");
Expect(0, 8542, '\P{Numeric_Value=0.875}', "");
Expect(1, 8542, '\P{^Numeric_Value=0.875}', "");
Expect(0, 8541, '\p{Numeric_Value=0.875}', "");
Expect(1, 8541, '\p{^Numeric_Value=0.875}', "");
Expect(1, 8541, '\P{Numeric_Value=0.875}', "");
Expect(0, 8541, '\P{^Numeric_Value=0.875}', "");
Error('\p{Nv=-:=0007/0000008}');
Error('\P{Nv=-:=0007/0000008}');
Expect(1, 8542, '\p{Nv=+000007/0000000008}', "");
Expect(0, 8542, '\p{^Nv=+000007/0000000008}', "");
Expect(0, 8542, '\P{Nv=+000007/0000000008}', "");
Expect(1, 8542, '\P{^Nv=+000007/0000000008}', "");
Expect(0, 8541, '\p{Nv=+000007/0000000008}', "");
Expect(1, 8541, '\p{^Nv=+000007/0000000008}', "");
Expect(1, 8541, '\P{Nv=+000007/0000000008}', "");
Expect(0, 8541, '\P{^Nv=+000007/0000000008}', "");
Error('\p{Nv=0.9}');
Error('\P{Nv=0.9}');
Error('\p{Nv=0.88}');
Error('\P{Nv=0.88}');
Expect(1, 8542, '\p{Nv=0.875}', "");
Expect(0, 8542, '\p{^Nv=0.875}', "");
Expect(0, 8542, '\P{Nv=0.875}', "");
Expect(1, 8542, '\P{^Nv=0.875}', "");
Expect(0, 8541, '\p{Nv=0.875}', "");
Expect(1, 8541, '\p{^Nv=0.875}', "");
Expect(1, 8541, '\P{Nv=0.875}', "");
Expect(0, 8541, '\P{^Nv=0.875}', "");
Error('\p{Is_Numeric_Value=/a/ +000007/0008}');
Error('\P{Is_Numeric_Value=/a/ +000007/0008}');
Expect(1, 8542, '\p{Is_Numeric_Value=07/000000008}', "");
Expect(0, 8542, '\p{^Is_Numeric_Value=07/000000008}', "");
Expect(0, 8542, '\P{Is_Numeric_Value=07/000000008}', "");
Expect(1, 8542, '\P{^Is_Numeric_Value=07/000000008}', "");
Expect(0, 8541, '\p{Is_Numeric_Value=07/000000008}', "");
Expect(1, 8541, '\p{^Is_Numeric_Value=07/000000008}', "");
Expect(1, 8541, '\P{Is_Numeric_Value=07/000000008}', "");
Expect(0, 8541, '\P{^Is_Numeric_Value=07/000000008}', "");
Error('\p{Is_Numeric_Value=0.9}');
Error('\P{Is_Numeric_Value=0.9}');
Error('\p{Is_Numeric_Value=0.88}');
Error('\P{Is_Numeric_Value=0.88}');
Expect(1, 8542, '\p{Is_Numeric_Value=0.875}', "");
Expect(0, 8542, '\p{^Is_Numeric_Value=0.875}', "");
Expect(0, 8542, '\P{Is_Numeric_Value=0.875}', "");
Expect(1, 8542, '\P{^Is_Numeric_Value=0.875}', "");
Expect(0, 8541, '\p{Is_Numeric_Value=0.875}', "");
Expect(1, 8541, '\p{^Is_Numeric_Value=0.875}', "");
Expect(1, 8541, '\P{Is_Numeric_Value=0.875}', "");
Expect(0, 8541, '\P{^Is_Numeric_Value=0.875}', "");
Error('\p{Is_Nv=:=	 +0000000007/00000008}');
Error('\P{Is_Nv=:=	 +0000000007/00000008}');
Expect(1, 8542, '\p{Is_Nv=+07/8}', "");
Expect(0, 8542, '\p{^Is_Nv=+07/8}', "");
Expect(0, 8542, '\P{Is_Nv=+07/8}', "");
Expect(1, 8542, '\P{^Is_Nv=+07/8}', "");
Expect(0, 8541, '\p{Is_Nv=+07/8}', "");
Expect(1, 8541, '\p{^Is_Nv=+07/8}', "");
Expect(1, 8541, '\P{Is_Nv=+07/8}', "");
Expect(0, 8541, '\P{^Is_Nv=+07/8}', "");
Error('\p{Is_Nv:   0.9}');
Error('\P{Is_Nv:   0.9}');
Error('\p{Is_Nv=0.88}');
Error('\P{Is_Nv=0.88}');
Expect(1, 8542, '\p{Is_Nv=0.875}', "");
Expect(0, 8542, '\p{^Is_Nv=0.875}', "");
Expect(0, 8542, '\P{Is_Nv=0.875}', "");
Expect(1, 8542, '\P{^Is_Nv=0.875}', "");
Expect(0, 8541, '\p{Is_Nv=0.875}', "");
Expect(1, 8541, '\p{^Is_Nv=0.875}', "");
Expect(1, 8541, '\P{Is_Nv=0.875}', "");
Expect(0, 8541, '\P{^Is_Nv=0.875}', "");
Error('\p{Numeric_Value=	_+700/a/}');
Error('\P{Numeric_Value=	_+700/a/}');
Expect(1, 65823, '\p{Numeric_Value=00000000700}', "");
Expect(0, 65823, '\p{^Numeric_Value=00000000700}', "");
Expect(0, 65823, '\P{Numeric_Value=00000000700}', "");
Expect(1, 65823, '\P{^Numeric_Value=00000000700}', "");
Expect(0, 65822, '\p{Numeric_Value=00000000700}', "");
Expect(1, 65822, '\p{^Numeric_Value=00000000700}', "");
Expect(1, 65822, '\P{Numeric_Value=00000000700}', "");
Expect(0, 65822, '\P{^Numeric_Value=00000000700}', "");
Error('\p{Nv=_	700/a/}');
Error('\P{Nv=_	700/a/}');
Expect(1, 65823, '\p{Nv=+000000000700}', "");
Expect(0, 65823, '\p{^Nv=+000000000700}', "");
Expect(0, 65823, '\P{Nv=+000000000700}', "");
Expect(1, 65823, '\P{^Nv=+000000000700}', "");
Expect(0, 65822, '\p{Nv=+000000000700}', "");
Expect(1, 65822, '\p{^Nv=+000000000700}', "");
Expect(1, 65822, '\P{Nv=+000000000700}', "");
Expect(0, 65822, '\P{^Nv=+000000000700}', "");
Error('\p{Is_Numeric_Value=/a/ -+0-0	0700}');
Error('\P{Is_Numeric_Value=/a/ -+0-0	0700}');
Expect(1, 65823, '\p{Is_Numeric_Value=70_0}', "");
Expect(0, 65823, '\p{^Is_Numeric_Value=70_0}', "");
Expect(0, 65823, '\P{Is_Numeric_Value=70_0}', "");
Expect(1, 65823, '\P{^Is_Numeric_Value=70_0}', "");
Expect(0, 65822, '\p{Is_Numeric_Value=70_0}', "");
Expect(1, 65822, '\p{^Is_Numeric_Value=70_0}', "");
Expect(1, 65822, '\P{Is_Numeric_Value=70_0}', "");
Expect(0, 65822, '\P{^Is_Numeric_Value=70_0}', "");
Error('\p{Is_Nv=	_0_0 0_0_00_700/a/}');
Error('\P{Is_Nv=	_0_0 0_0_00_700/a/}');
Expect(1, 65823, '\p{Is_Nv=00_00_70_0}', "");
Expect(0, 65823, '\p{^Is_Nv=00_00_70_0}', "");
Expect(0, 65823, '\P{Is_Nv=00_00_70_0}', "");
Expect(1, 65823, '\P{^Is_Nv=00_00_70_0}', "");
Expect(0, 65822, '\p{Is_Nv=00_00_70_0}', "");
Expect(1, 65822, '\p{^Is_Nv=00_00_70_0}', "");
Expect(1, 65822, '\P{Is_Nv=00_00_70_0}', "");
Expect(0, 65822, '\P{^Is_Nv=00_00_70_0}', "");
Error('\p{Numeric_Value=/a/ -0000013/2}');
Error('\P{Numeric_Value=/a/ -0000013/2}');
Expect(1, 3888, '\p{Numeric_Value=+00013/0000002}', "");
Expect(0, 3888, '\p{^Numeric_Value=+00013/0000002}', "");
Expect(0, 3888, '\P{Numeric_Value=+00013/0000002}', "");
Expect(1, 3888, '\P{^Numeric_Value=+00013/0000002}', "");
Expect(0, 3887, '\p{Numeric_Value=+00013/0000002}', "");
Expect(1, 3887, '\p{^Numeric_Value=+00013/0000002}', "");
Expect(1, 3887, '\P{Numeric_Value=+00013/0000002}', "");
Expect(0, 3887, '\P{^Numeric_Value=+00013/0000002}', "");
Expect(1, 3888, '\p{Numeric_Value=6.500}', "");
Expect(0, 3888, '\p{^Numeric_Value=6.500}', "");
Expect(0, 3888, '\P{Numeric_Value=6.500}', "");
Expect(1, 3888, '\P{^Numeric_Value=6.500}', "");
Expect(0, 3887, '\p{Numeric_Value=6.500}', "");
Expect(1, 3887, '\p{^Numeric_Value=6.500}', "");
Expect(1, 3887, '\P{Numeric_Value=6.500}', "");
Expect(0, 3887, '\P{^Numeric_Value=6.500}', "");
Error('\p{Nv=	-+000000013/002/a/}');
Error('\P{Nv=	-+000000013/002/a/}');
Expect(1, 3888, '\p{Nv=0000013/002}', "");
Expect(0, 3888, '\p{^Nv=0000013/002}', "");
Expect(0, 3888, '\P{Nv=0000013/002}', "");
Expect(1, 3888, '\P{^Nv=0000013/002}', "");
Expect(0, 3887, '\p{Nv=0000013/002}', "");
Expect(1, 3887, '\p{^Nv=0000013/002}', "");
Expect(1, 3887, '\P{Nv=0000013/002}', "");
Expect(0, 3887, '\P{^Nv=0000013/002}', "");
Expect(1, 3888, '\p{Nv=6.500}', "");
Expect(0, 3888, '\p{^Nv=6.500}', "");
Expect(0, 3888, '\P{Nv=6.500}', "");
Expect(1, 3888, '\P{^Nv=6.500}', "");
Expect(0, 3887, '\p{Nv=6.500}', "");
Expect(1, 3887, '\p{^Nv=6.500}', "");
Expect(1, 3887, '\P{Nv=6.500}', "");
Expect(0, 3887, '\P{^Nv=6.500}', "");
Error('\p{Is_Numeric_Value=	0000013/002:=}');
Error('\P{Is_Numeric_Value=	0000013/002:=}');
Expect(1, 3888, '\p{Is_Numeric_Value=0000000013/02}', "");
Expect(0, 3888, '\p{^Is_Numeric_Value=0000000013/02}', "");
Expect(0, 3888, '\P{Is_Numeric_Value=0000000013/02}', "");
Expect(1, 3888, '\P{^Is_Numeric_Value=0000000013/02}', "");
Expect(0, 3887, '\p{Is_Numeric_Value=0000000013/02}', "");
Expect(1, 3887, '\p{^Is_Numeric_Value=0000000013/02}', "");
Expect(1, 3887, '\P{Is_Numeric_Value=0000000013/02}', "");
Expect(0, 3887, '\P{^Is_Numeric_Value=0000000013/02}', "");
Expect(1, 3888, '\p{Is_Numeric_Value=6.500}', "");
Expect(0, 3888, '\p{^Is_Numeric_Value=6.500}', "");
Expect(0, 3888, '\P{Is_Numeric_Value=6.500}', "");
Expect(1, 3888, '\P{^Is_Numeric_Value=6.500}', "");
Expect(0, 3887, '\p{Is_Numeric_Value=6.500}', "");
Expect(1, 3887, '\p{^Is_Numeric_Value=6.500}', "");
Expect(1, 3887, '\P{Is_Numeric_Value=6.500}', "");
Expect(0, 3887, '\P{^Is_Numeric_Value=6.500}', "");
Error('\p{Is_Nv=	:=00013/00002}');
Error('\P{Is_Nv=	:=00013/00002}');
Expect(1, 3888, '\p{Is_Nv=+0000013/00002}', "");
Expect(0, 3888, '\p{^Is_Nv=+0000013/00002}', "");
Expect(0, 3888, '\P{Is_Nv=+0000013/00002}', "");
Expect(1, 3888, '\P{^Is_Nv=+0000013/00002}', "");
Expect(0, 3887, '\p{Is_Nv=+0000013/00002}', "");
Expect(1, 3887, '\p{^Is_Nv=+0000013/00002}', "");
Expect(1, 3887, '\P{Is_Nv=+0000013/00002}', "");
Expect(0, 3887, '\P{^Is_Nv=+0000013/00002}', "");
Expect(1, 3888, '\p{Is_Nv=6.500}', "");
Expect(0, 3888, '\p{^Is_Nv=6.500}', "");
Expect(0, 3888, '\P{Is_Nv=6.500}', "");
Expect(1, 3888, '\P{^Is_Nv=6.500}', "");
Expect(0, 3887, '\p{Is_Nv=6.500}', "");
Expect(1, 3887, '\p{^Is_Nv=6.500}', "");
Expect(1, 3887, '\P{Is_Nv=6.500}', "");
Expect(0, 3887, '\P{^Is_Nv=6.500}', "");
Error('\p{Numeric_Value=/a/0	0	00	0	0_48}');
Error('\P{Numeric_Value=/a/0	0	00	0	0_48}');
Expect(1, 12989, '\p{Numeric_Value=0_0_0_0_48}', "");
Expect(0, 12989, '\p{^Numeric_Value=0_0_0_0_48}', "");
Expect(0, 12989, '\P{Numeric_Value=0_0_0_0_48}', "");
Expect(1, 12989, '\P{^Numeric_Value=0_0_0_0_48}', "");
Expect(0, 12988, '\p{Numeric_Value=0_0_0_0_48}', "");
Expect(1, 12988, '\p{^Numeric_Value=0_0_0_0_48}', "");
Expect(1, 12988, '\P{Numeric_Value=0_0_0_0_48}', "");
Expect(0, 12988, '\P{^Numeric_Value=0_0_0_0_48}', "");
Error('\p{Nv:		 00000048/a/}');
Error('\P{Nv:		 00000048/a/}');
Expect(1, 12989, '\p{Nv=00_04_8}', "");
Expect(0, 12989, '\p{^Nv=00_04_8}', "");
Expect(0, 12989, '\P{Nv=00_04_8}', "");
Expect(1, 12989, '\P{^Nv=00_04_8}', "");
Expect(0, 12988, '\p{Nv=00_04_8}', "");
Expect(1, 12988, '\p{^Nv=00_04_8}', "");
Expect(1, 12988, '\P{Nv=00_04_8}', "");
Expect(0, 12988, '\P{^Nv=00_04_8}', "");
Error('\p{Is_Numeric_Value= 4:=8}');
Error('\P{Is_Numeric_Value= 4:=8}');
Expect(1, 12989, '\p{Is_Numeric_Value:   000048}', "");
Expect(0, 12989, '\p{^Is_Numeric_Value:   000048}', "");
Expect(0, 12989, '\P{Is_Numeric_Value:   000048}', "");
Expect(1, 12989, '\P{^Is_Numeric_Value:   000048}', "");
Expect(0, 12988, '\p{Is_Numeric_Value:   000048}', "");
Expect(1, 12988, '\p{^Is_Numeric_Value:   000048}', "");
Expect(1, 12988, '\P{Is_Numeric_Value:   000048}', "");
Expect(0, 12988, '\P{^Is_Numeric_Value:   000048}', "");
Error('\p{Is_Nv: /a/000004 8}');
Error('\P{Is_Nv: /a/000004 8}');
Expect(1, 12989, '\p{Is_Nv=+04_8}', "");
Expect(0, 12989, '\p{^Is_Nv=+04_8}', "");
Expect(0, 12989, '\P{Is_Nv=+04_8}', "");
Expect(1, 12989, '\P{^Is_Nv=+04_8}', "");
Expect(0, 12988, '\p{Is_Nv=+04_8}', "");
Expect(1, 12988, '\p{^Is_Nv=+04_8}', "");
Expect(1, 12988, '\P{Is_Nv=+04_8}', "");
Expect(0, 12988, '\P{^Is_Nv=+04_8}', "");
Error('\p{Numeric_Value= :=1/000003}');
Error('\P{Numeric_Value= :=1/000003}');
Expect(1, 8531, '\p{Numeric_Value=+00000001/00000003}', "");
Expect(0, 8531, '\p{^Numeric_Value=+00000001/00000003}', "");
Expect(0, 8531, '\P{Numeric_Value=+00000001/00000003}', "");
Expect(1, 8531, '\P{^Numeric_Value=+00000001/00000003}', "");
Expect(0, 8530, '\p{Numeric_Value=+00000001/00000003}', "");
Expect(1, 8530, '\p{^Numeric_Value=+00000001/00000003}', "");
Expect(1, 8530, '\P{Numeric_Value=+00000001/00000003}', "");
Expect(0, 8530, '\P{^Numeric_Value=+00000001/00000003}', "");
Error('\p{Numeric_Value=0.3}');
Error('\P{Numeric_Value=0.3}');
Error('\p{Numeric_Value=0.33}');
Error('\P{Numeric_Value=0.33}');
Expect(1, 8531, '\p{Numeric_Value=0.333}', "");
Expect(0, 8531, '\p{^Numeric_Value=0.333}', "");
Expect(0, 8531, '\P{Numeric_Value=0.333}', "");
Expect(1, 8531, '\P{^Numeric_Value=0.333}', "");
Expect(0, 8530, '\p{Numeric_Value=0.333}', "");
Expect(1, 8530, '\p{^Numeric_Value=0.333}', "");
Expect(1, 8530, '\P{Numeric_Value=0.333}', "");
Expect(0, 8530, '\P{^Numeric_Value=0.333}', "");
Error('\p{Nv=	-+0001/3:=}');
Error('\P{Nv=	-+0001/3:=}');
Expect(1, 8531, '\p{Nv:	0001/003}', "");
Expect(0, 8531, '\p{^Nv:	0001/003}', "");
Expect(0, 8531, '\P{Nv:	0001/003}', "");
Expect(1, 8531, '\P{^Nv:	0001/003}', "");
Expect(0, 8530, '\p{Nv:	0001/003}', "");
Expect(1, 8530, '\p{^Nv:	0001/003}', "");
Expect(1, 8530, '\P{Nv:	0001/003}', "");
Expect(0, 8530, '\P{^Nv:	0001/003}', "");
Error('\p{Nv=0.3}');
Error('\P{Nv=0.3}');
Error('\p{Nv=0.33}');
Error('\P{Nv=0.33}');
Expect(1, 8531, '\p{Nv=0.333}', "");
Expect(0, 8531, '\p{^Nv=0.333}', "");
Expect(0, 8531, '\P{Nv=0.333}', "");
Expect(1, 8531, '\P{^Nv=0.333}', "");
Expect(0, 8530, '\p{Nv=0.333}', "");
Expect(1, 8530, '\p{^Nv=0.333}', "");
Expect(1, 8530, '\P{Nv=0.333}', "");
Expect(0, 8530, '\P{^Nv=0.333}', "");
Error('\p{Is_Numeric_Value=/a/-_000001/000000003}');
Error('\P{Is_Numeric_Value=/a/-_000001/000000003}');
Expect(1, 8531, '\p{Is_Numeric_Value=000001/0003}', "");
Expect(0, 8531, '\p{^Is_Numeric_Value=000001/0003}', "");
Expect(0, 8531, '\P{Is_Numeric_Value=000001/0003}', "");
Expect(1, 8531, '\P{^Is_Numeric_Value=000001/0003}', "");
Expect(0, 8530, '\p{Is_Numeric_Value=000001/0003}', "");
Expect(1, 8530, '\p{^Is_Numeric_Value=000001/0003}', "");
Expect(1, 8530, '\P{Is_Numeric_Value=000001/0003}', "");
Expect(0, 8530, '\P{^Is_Numeric_Value=000001/0003}', "");
Error('\p{Is_Numeric_Value=0.3}');
Error('\P{Is_Numeric_Value=0.3}');
Error('\p{Is_Numeric_Value=0.33}');
Error('\P{Is_Numeric_Value=0.33}');
Expect(1, 8531, '\p{Is_Numeric_Value=0.333}', "");
Expect(0, 8531, '\p{^Is_Numeric_Value=0.333}', "");
Expect(0, 8531, '\P{Is_Numeric_Value=0.333}', "");
Expect(1, 8531, '\P{^Is_Numeric_Value=0.333}', "");
Expect(0, 8530, '\p{Is_Numeric_Value=0.333}', "");
Expect(1, 8530, '\p{^Is_Numeric_Value=0.333}', "");
Expect(1, 8530, '\P{Is_Numeric_Value=0.333}', "");
Expect(0, 8530, '\P{^Is_Numeric_Value=0.333}', "");
Error('\p{Is_Nv=	-001/003:=}');
Error('\P{Is_Nv=	-001/003:=}');
Expect(1, 8531, '\p{Is_Nv=001/0000003}', "");
Expect(0, 8531, '\p{^Is_Nv=001/0000003}', "");
Expect(0, 8531, '\P{Is_Nv=001/0000003}', "");
Expect(1, 8531, '\P{^Is_Nv=001/0000003}', "");
Expect(0, 8530, '\p{Is_Nv=001/0000003}', "");
Expect(1, 8530, '\p{^Is_Nv=001/0000003}', "");
Expect(1, 8530, '\P{Is_Nv=001/0000003}', "");
Expect(0, 8530, '\P{^Is_Nv=001/0000003}', "");
Error('\p{Is_Nv=0.3}');
Error('\P{Is_Nv=0.3}');
Error('\p{Is_Nv=0.33}');
Error('\P{Is_Nv=0.33}');
Expect(1, 8531, '\p{Is_Nv=0.333}', "");
Expect(0, 8531, '\p{^Is_Nv=0.333}', "");
Expect(0, 8531, '\P{Is_Nv=0.333}', "");
Expect(1, 8531, '\P{^Is_Nv=0.333}', "");
Expect(0, 8530, '\p{Is_Nv=0.333}', "");
Expect(1, 8530, '\p{^Is_Nv=0.333}', "");
Expect(1, 8530, '\P{Is_Nv=0.333}', "");
Expect(0, 8530, '\P{^Is_Nv=0.333}', "");
Error('\p{Numeric_Value=	000000200_0/a/}');
Error('\P{Numeric_Value=	000000200_0/a/}');
Expect(1, 65827, '\p{Numeric_Value=00000200_0}', "");
Expect(0, 65827, '\p{^Numeric_Value=00000200_0}', "");
Expect(0, 65827, '\P{Numeric_Value=00000200_0}', "");
Expect(1, 65827, '\P{^Numeric_Value=00000200_0}', "");
Expect(0, 65826, '\p{Numeric_Value=00000200_0}', "");
Expect(1, 65826, '\p{^Numeric_Value=00000200_0}', "");
Expect(1, 65826, '\P{Numeric_Value=00000200_0}', "");
Expect(0, 65826, '\P{^Numeric_Value=00000200_0}', "");
Error('\p{Nv=/a/2000}');
Error('\P{Nv=/a/2000}');
Expect(1, 65827, '\p{Nv:	0000_0000_0200_0}', "");
Expect(0, 65827, '\p{^Nv:	0000_0000_0200_0}', "");
Expect(0, 65827, '\P{Nv:	0000_0000_0200_0}', "");
Expect(1, 65827, '\P{^Nv:	0000_0000_0200_0}', "");
Expect(0, 65826, '\p{Nv:	0000_0000_0200_0}', "");
Expect(1, 65826, '\p{^Nv:	0000_0000_0200_0}', "");
Expect(1, 65826, '\P{Nv:	0000_0000_0200_0}', "");
Expect(0, 65826, '\P{^Nv:	0000_0000_0200_0}', "");
Error('\p{Is_Numeric_Value=_-000-2000:=}');
Error('\P{Is_Numeric_Value=_-000-2000:=}');
Expect(1, 65827, '\p{Is_Numeric_Value=0000000002000}', "");
Expect(0, 65827, '\p{^Is_Numeric_Value=0000000002000}', "");
Expect(0, 65827, '\P{Is_Numeric_Value=0000000002000}', "");
Expect(1, 65827, '\P{^Is_Numeric_Value=0000000002000}', "");
Expect(0, 65826, '\p{Is_Numeric_Value=0000000002000}', "");
Expect(1, 65826, '\p{^Is_Numeric_Value=0000000002000}', "");
Expect(1, 65826, '\P{Is_Numeric_Value=0000000002000}', "");
Expect(0, 65826, '\P{^Is_Numeric_Value=0000000002000}', "");
Error('\p{Is_Nv=/a/	0000002000}');
Error('\P{Is_Nv=/a/	0000002000}');
Expect(1, 65827, '\p{Is_Nv=+02000}', "");
Expect(0, 65827, '\p{^Is_Nv=+02000}', "");
Expect(0, 65827, '\P{Is_Nv=+02000}', "");
Expect(1, 65827, '\P{^Is_Nv=+02000}', "");
Expect(0, 65826, '\p{Is_Nv=+02000}', "");
Expect(1, 65826, '\p{^Is_Nv=+02000}', "");
Expect(1, 65826, '\P{Is_Nv=+02000}', "");
Expect(0, 65826, '\P{^Is_Nv=+02000}', "");
Error('\p{Numeric_Value= 02:=9}');
Error('\P{Numeric_Value= 02:=9}');
Expect(1, 12889, '\p{Numeric_Value=29}', "");
Expect(0, 12889, '\p{^Numeric_Value=29}', "");
Expect(0, 12889, '\P{Numeric_Value=29}', "");
Expect(1, 12889, '\P{^Numeric_Value=29}', "");
Expect(0, 12888, '\p{Numeric_Value=29}', "");
Expect(1, 12888, '\p{^Numeric_Value=29}', "");
Expect(1, 12888, '\P{Numeric_Value=29}', "");
Expect(0, 12888, '\P{^Numeric_Value=29}', "");
Error('\p{Nv=	-+00-0 0 0/a/0	00029}');
Error('\P{Nv=	-+00-0 0 0/a/0	00029}');
Expect(1, 12889, '\p{Nv=029}', "");
Expect(0, 12889, '\p{^Nv=029}', "");
Expect(0, 12889, '\P{Nv=029}', "");
Expect(1, 12889, '\P{^Nv=029}', "");
Expect(0, 12888, '\p{Nv=029}', "");
Expect(1, 12888, '\p{^Nv=029}', "");
Expect(1, 12888, '\P{Nv=029}', "");
Expect(0, 12888, '\P{^Nv=029}', "");
Error('\p{Is_Numeric_Value=	-000000029:=}');
Error('\P{Is_Numeric_Value=	-000000029:=}');
Expect(1, 12889, '\p{Is_Numeric_Value=0000029}', "");
Expect(0, 12889, '\p{^Is_Numeric_Value=0000029}', "");
Expect(0, 12889, '\P{Is_Numeric_Value=0000029}', "");
Expect(1, 12889, '\P{^Is_Numeric_Value=0000029}', "");
Expect(0, 12888, '\p{Is_Numeric_Value=0000029}', "");
Expect(1, 12888, '\p{^Is_Numeric_Value=0000029}', "");
Expect(1, 12888, '\P{Is_Numeric_Value=0000029}', "");
Expect(0, 12888, '\P{^Is_Numeric_Value=0000029}', "");
Error('\p{Is_Nv=	:=00000000029}');
Error('\P{Is_Nv=	:=00000000029}');
Expect(1, 12889, '\p{Is_Nv=002_9}', "");
Expect(0, 12889, '\p{^Is_Nv=002_9}', "");
Expect(0, 12889, '\P{Is_Nv=002_9}', "");
Expect(1, 12889, '\P{^Is_Nv=002_9}', "");
Expect(0, 12888, '\p{Is_Nv=002_9}', "");
Expect(1, 12888, '\p{^Is_Nv=002_9}', "");
Expect(1, 12888, '\P{Is_Nv=002_9}', "");
Expect(0, 12888, '\P{^Is_Nv=002_9}', "");
Error('\p{Numeric_Value= 00:=0001 00000}');
Error('\P{Numeric_Value= 00:=0001 00000}');
Expect(1, 8584, '\p{Numeric_Value=00000_01000_00}', "");
Expect(0, 8584, '\p{^Numeric_Value=00000_01000_00}', "");
Expect(0, 8584, '\P{Numeric_Value=00000_01000_00}', "");
Expect(1, 8584, '\P{^Numeric_Value=00000_01000_00}', "");
Expect(0, 8583, '\p{Numeric_Value=00000_01000_00}', "");
Expect(1, 8583, '\p{^Numeric_Value=00000_01000_00}', "");
Expect(1, 8583, '\P{Numeric_Value=00000_01000_00}', "");
Expect(0, 8583, '\P{^Numeric_Value=00000_01000_00}', "");
Error('\p{Nv=:=+0010000-0}');
Error('\P{Nv=:=+0010000-0}');
Expect(1, 8584, '\p{Nv:   00000100000}', "");
Expect(0, 8584, '\p{^Nv:   00000100000}', "");
Expect(0, 8584, '\P{Nv:   00000100000}', "");
Expect(1, 8584, '\P{^Nv:   00000100000}', "");
Expect(0, 8583, '\p{Nv:   00000100000}', "");
Expect(1, 8583, '\p{^Nv:   00000100000}', "");
Expect(1, 8583, '\P{Nv:   00000100000}', "");
Expect(0, 8583, '\P{^Nv:   00000100000}', "");
Error('\p{Is_Numeric_Value=/a/--00000100000}');
Error('\P{Is_Numeric_Value=/a/--00000100000}');
Expect(1, 8584, '\p{Is_Numeric_Value:	0_0_0_0_0_1_0_0_000}', "");
Expect(0, 8584, '\p{^Is_Numeric_Value:	0_0_0_0_0_1_0_0_000}', "");
Expect(0, 8584, '\P{Is_Numeric_Value:	0_0_0_0_0_1_0_0_000}', "");
Expect(1, 8584, '\P{^Is_Numeric_Value:	0_0_0_0_0_1_0_0_000}', "");
Expect(0, 8583, '\p{Is_Numeric_Value:	0_0_0_0_0_1_0_0_000}', "");
Expect(1, 8583, '\p{^Is_Numeric_Value:	0_0_0_0_0_1_0_0_000}', "");
Expect(1, 8583, '\P{Is_Numeric_Value:	0_0_0_0_0_1_0_0_000}', "");
Expect(0, 8583, '\P{^Is_Numeric_Value:	0_0_0_0_0_1_0_0_000}', "");
Error('\p{Is_Nv=- 100000:=}');
Error('\P{Is_Nv=- 100000:=}');
Expect(1, 8584, '\p{Is_Nv=00000010000_0}', "");
Expect(0, 8584, '\p{^Is_Nv=00000010000_0}', "");
Expect(0, 8584, '\P{Is_Nv=00000010000_0}', "");
Expect(1, 8584, '\P{^Is_Nv=00000010000_0}', "");
Expect(0, 8583, '\p{Is_Nv=00000010000_0}', "");
Expect(1, 8583, '\p{^Is_Nv=00000010000_0}', "");
Expect(1, 8583, '\P{Is_Nv=00000010000_0}', "");
Expect(0, 8583, '\P{^Is_Nv=00000010000_0}', "");
Error('\p{Numeric_Value=:=- 00005	0}');
Error('\P{Numeric_Value=:=- 00005	0}');
Expect(1, 4982, '\p{Numeric_Value=0000050}', "");
Expect(0, 4982, '\p{^Numeric_Value=0000050}', "");
Expect(0, 4982, '\P{Numeric_Value=0000050}', "");
Expect(1, 4982, '\P{^Numeric_Value=0000050}', "");
Expect(0, 4981, '\p{Numeric_Value=0000050}', "");
Expect(1, 4981, '\p{^Numeric_Value=0000050}', "");
Expect(1, 4981, '\P{Numeric_Value=0000050}', "");
Expect(0, 4981, '\P{^Numeric_Value=0000050}', "");
Error('\p{Nv= :=+00000050}');
Error('\P{Nv= :=+00000050}');
Expect(1, 4982, '\p{Nv=+0_0_50}', "");
Expect(0, 4982, '\p{^Nv=+0_0_50}', "");
Expect(0, 4982, '\P{Nv=+0_0_50}', "");
Expect(1, 4982, '\P{^Nv=+0_0_50}', "");
Expect(0, 4981, '\p{Nv=+0_0_50}', "");
Expect(1, 4981, '\p{^Nv=+0_0_50}', "");
Expect(1, 4981, '\P{Nv=+0_0_50}', "");
Expect(0, 4981, '\P{^Nv=+0_0_50}', "");
Error('\p{Is_Numeric_Value=-:=05-0}');
Error('\P{Is_Numeric_Value=-:=05-0}');
Expect(1, 4982, '\p{Is_Numeric_Value=005_0}', "");
Expect(0, 4982, '\p{^Is_Numeric_Value=005_0}', "");
Expect(0, 4982, '\P{Is_Numeric_Value=005_0}', "");
Expect(1, 4982, '\P{^Is_Numeric_Value=005_0}', "");
Expect(0, 4981, '\p{Is_Numeric_Value=005_0}', "");
Expect(1, 4981, '\p{^Is_Numeric_Value=005_0}', "");
Expect(1, 4981, '\P{Is_Numeric_Value=005_0}', "");
Expect(0, 4981, '\P{^Is_Numeric_Value=005_0}', "");
Error('\p{Is_Nv=-_+0/a/0_0-0_0-0_0	050}');
Error('\P{Is_Nv=-_+0/a/0_0-0_0-0_0	050}');
Expect(1, 4982, '\p{Is_Nv:0000000050}', "");
Expect(0, 4982, '\p{^Is_Nv:0000000050}', "");
Expect(0, 4982, '\P{Is_Nv:0000000050}', "");
Expect(1, 4982, '\P{^Is_Nv:0000000050}', "");
Expect(0, 4981, '\p{Is_Nv:0000000050}', "");
Expect(1, 4981, '\p{^Is_Nv:0000000050}', "");
Expect(1, 4981, '\P{Is_Nv:0000000050}', "");
Expect(0, 4981, '\P{^Is_Nv:0000000050}', "");
Error('\p{Numeric_Value= _0 00_0 0	0:=0-39}');
Error('\P{Numeric_Value= _0 00_0 0	0:=0-39}');
Expect(1, 12980, '\p{Numeric_Value=0003_9}', "");
Expect(0, 12980, '\p{^Numeric_Value=0003_9}', "");
Expect(0, 12980, '\P{Numeric_Value=0003_9}', "");
Expect(1, 12980, '\P{^Numeric_Value=0003_9}', "");
Expect(0, 12979, '\p{Numeric_Value=0003_9}', "");
Expect(1, 12979, '\p{^Numeric_Value=0003_9}', "");
Expect(1, 12979, '\P{Numeric_Value=0003_9}', "");
Expect(0, 12979, '\P{^Numeric_Value=0003_9}', "");
Error('\p{Nv=_:=00000000039}');
Error('\P{Nv=_:=00000000039}');
Expect(1, 12980, '\p{Nv=00_00_00_03_9}', "");
Expect(0, 12980, '\p{^Nv=00_00_00_03_9}', "");
Expect(0, 12980, '\P{Nv=00_00_00_03_9}', "");
Expect(1, 12980, '\P{^Nv=00_00_00_03_9}', "");
Expect(0, 12979, '\p{Nv=00_00_00_03_9}', "");
Expect(1, 12979, '\p{^Nv=00_00_00_03_9}', "");
Expect(1, 12979, '\P{Nv=00_00_00_03_9}', "");
Expect(0, 12979, '\P{^Nv=00_00_00_03_9}', "");
Error('\p{Is_Numeric_Value::=-00000039}');
Error('\P{Is_Numeric_Value::=-00000039}');
Expect(1, 12980, '\p{Is_Numeric_Value=00003_9}', "");
Expect(0, 12980, '\p{^Is_Numeric_Value=00003_9}', "");
Expect(0, 12980, '\P{Is_Numeric_Value=00003_9}', "");
Expect(1, 12980, '\P{^Is_Numeric_Value=00003_9}', "");
Expect(0, 12979, '\p{Is_Numeric_Value=00003_9}', "");
Expect(1, 12979, '\p{^Is_Numeric_Value=00003_9}', "");
Expect(1, 12979, '\P{Is_Numeric_Value=00003_9}', "");
Expect(0, 12979, '\P{^Is_Numeric_Value=00003_9}', "");
Error('\p{Is_Nv=:=0003 9}');
Error('\P{Is_Nv=:=0003 9}');
Expect(1, 12980, '\p{Is_Nv=0000039}', "");
Expect(0, 12980, '\p{^Is_Nv=0000039}', "");
Expect(0, 12980, '\P{Is_Nv=0000039}', "");
Expect(1, 12980, '\P{^Is_Nv=0000039}', "");
Expect(0, 12979, '\p{Is_Nv=0000039}', "");
Expect(1, 12979, '\p{^Is_Nv=0000039}', "");
Expect(1, 12979, '\P{Is_Nv=0000039}', "");
Expect(0, 12979, '\P{^Is_Nv=0000039}', "");
Error('\p{Numeric_Value: _/a/001/0016}');
Error('\P{Numeric_Value: _/a/001/0016}');
Expect(1, 2548, '\p{Numeric_Value=0000001/000000016}', "");
Expect(0, 2548, '\p{^Numeric_Value=0000001/000000016}', "");
Expect(0, 2548, '\P{Numeric_Value=0000001/000000016}', "");
Expect(1, 2548, '\P{^Numeric_Value=0000001/000000016}', "");
Expect(0, 2547, '\p{Numeric_Value=0000001/000000016}', "");
Expect(1, 2547, '\p{^Numeric_Value=0000001/000000016}', "");
Expect(1, 2547, '\P{Numeric_Value=0000001/000000016}', "");
Expect(0, 2547, '\P{^Numeric_Value=0000001/000000016}', "");
Error('\p{Numeric_Value=0.06}');
Error('\P{Numeric_Value=0.06}');
Expect(1, 2548, '\p{Numeric_Value=0.062}', "");
Expect(0, 2548, '\p{^Numeric_Value=0.062}', "");
Expect(0, 2548, '\P{Numeric_Value=0.062}', "");
Expect(1, 2548, '\P{^Numeric_Value=0.062}', "");
Expect(0, 2547, '\p{Numeric_Value=0.062}', "");
Expect(1, 2547, '\p{^Numeric_Value=0.062}', "");
Expect(1, 2547, '\P{Numeric_Value=0.062}', "");
Expect(0, 2547, '\P{^Numeric_Value=0.062}', "");
Error('\p{Nv=:=--0001/00016}');
Error('\P{Nv=:=--0001/00016}');
Expect(1, 2548, '\p{Nv=00001/0016}', "");
Expect(0, 2548, '\p{^Nv=00001/0016}', "");
Expect(0, 2548, '\P{Nv=00001/0016}', "");
Expect(1, 2548, '\P{^Nv=00001/0016}', "");
Expect(0, 2547, '\p{Nv=00001/0016}', "");
Expect(1, 2547, '\p{^Nv=00001/0016}', "");
Expect(1, 2547, '\P{Nv=00001/0016}', "");
Expect(0, 2547, '\P{^Nv=00001/0016}', "");
Error('\p{Nv=0.06}');
Error('\P{Nv=0.06}');
Expect(1, 2548, '\p{Nv=0.062}', "");
Expect(0, 2548, '\p{^Nv=0.062}', "");
Expect(0, 2548, '\P{Nv=0.062}', "");
Expect(1, 2548, '\P{^Nv=0.062}', "");
Expect(0, 2547, '\p{Nv=0.062}', "");
Expect(1, 2547, '\p{^Nv=0.062}', "");
Expect(1, 2547, '\P{Nv=0.062}', "");
Expect(0, 2547, '\P{^Nv=0.062}', "");
Error('\p{Is_Numeric_Value=:=	-+00000001/00000000016}');
Error('\P{Is_Numeric_Value=:=	-+00000001/00000000016}');
Expect(1, 2548, '\p{Is_Numeric_Value=000001/000000016}', "");
Expect(0, 2548, '\p{^Is_Numeric_Value=000001/000000016}', "");
Expect(0, 2548, '\P{Is_Numeric_Value=000001/000000016}', "");
Expect(1, 2548, '\P{^Is_Numeric_Value=000001/000000016}', "");
Expect(0, 2547, '\p{Is_Numeric_Value=000001/000000016}', "");
Expect(1, 2547, '\p{^Is_Numeric_Value=000001/000000016}', "");
Expect(1, 2547, '\P{Is_Numeric_Value=000001/000000016}', "");
Expect(0, 2547, '\P{^Is_Numeric_Value=000001/000000016}', "");
Error('\p{Is_Numeric_Value=0.06}');
Error('\P{Is_Numeric_Value=0.06}');
Expect(1, 2548, '\p{Is_Numeric_Value=0.062}', "");
Expect(0, 2548, '\p{^Is_Numeric_Value=0.062}', "");
Expect(0, 2548, '\P{Is_Numeric_Value=0.062}', "");
Expect(1, 2548, '\P{^Is_Numeric_Value=0.062}', "");
Expect(0, 2547, '\p{Is_Numeric_Value=0.062}', "");
Expect(1, 2547, '\p{^Is_Numeric_Value=0.062}', "");
Expect(1, 2547, '\P{Is_Numeric_Value=0.062}', "");
Expect(0, 2547, '\P{^Is_Numeric_Value=0.062}', "");
Error('\p{Is_Nv=_:=0000001/0000016}');
Error('\P{Is_Nv=_:=0000001/0000016}');
Expect(1, 2548, '\p{Is_Nv=+01/16}', "");
Expect(0, 2548, '\p{^Is_Nv=+01/16}', "");
Expect(0, 2548, '\P{Is_Nv=+01/16}', "");
Expect(1, 2548, '\P{^Is_Nv=+01/16}', "");
Expect(0, 2547, '\p{Is_Nv=+01/16}', "");
Expect(1, 2547, '\p{^Is_Nv=+01/16}', "");
Expect(1, 2547, '\P{Is_Nv=+01/16}', "");
Expect(0, 2547, '\P{^Is_Nv=+01/16}', "");
Error('\p{Is_Nv=0.06}');
Error('\P{Is_Nv=0.06}');
Expect(1, 2548, '\p{Is_Nv=0.062}', "");
Expect(0, 2548, '\p{^Is_Nv=0.062}', "");
Expect(0, 2548, '\P{Is_Nv=0.062}', "");
Expect(1, 2548, '\P{^Is_Nv=0.062}', "");
Expect(0, 2547, '\p{Is_Nv=0.062}', "");
Expect(1, 2547, '\p{^Is_Nv=0.062}', "");
Expect(1, 2547, '\P{Is_Nv=0.062}', "");
Expect(0, 2547, '\P{^Is_Nv=0.062}', "");
Error('\p{Numeric_Value=- +3/002/a/}');
Error('\P{Numeric_Value=- +3/002/a/}');
Expect(1, 3883, '\p{Numeric_Value=003/2}', "");
Expect(0, 3883, '\p{^Numeric_Value=003/2}', "");
Expect(0, 3883, '\P{Numeric_Value=003/2}', "");
Expect(1, 3883, '\P{^Numeric_Value=003/2}', "");
Expect(0, 3882, '\p{Numeric_Value=003/2}', "");
Expect(1, 3882, '\p{^Numeric_Value=003/2}', "");
Expect(1, 3882, '\P{Numeric_Value=003/2}', "");
Expect(0, 3882, '\P{^Numeric_Value=003/2}', "");
Expect(1, 3883, '\p{Numeric_Value=1.500}', "");
Expect(0, 3883, '\p{^Numeric_Value=1.500}', "");
Expect(0, 3883, '\P{Numeric_Value=1.500}', "");
Expect(1, 3883, '\P{^Numeric_Value=1.500}', "");
Expect(0, 3882, '\p{Numeric_Value=1.500}', "");
Expect(1, 3882, '\p{^Numeric_Value=1.500}', "");
Expect(1, 3882, '\P{Numeric_Value=1.500}', "");
Expect(0, 3882, '\P{^Numeric_Value=1.500}', "");
Error('\p{Nv=:= 000000003/0000000002}');
Error('\P{Nv=:= 000000003/0000000002}');
Expect(1, 3883, '\p{Nv:   00003/0002}', "");
Expect(0, 3883, '\p{^Nv:   00003/0002}', "");
Expect(0, 3883, '\P{Nv:   00003/0002}', "");
Expect(1, 3883, '\P{^Nv:   00003/0002}', "");
Expect(0, 3882, '\p{Nv:   00003/0002}', "");
Expect(1, 3882, '\p{^Nv:   00003/0002}', "");
Expect(1, 3882, '\P{Nv:   00003/0002}', "");
Expect(0, 3882, '\P{^Nv:   00003/0002}', "");
Expect(1, 3883, '\p{Nv=1.500}', "");
Expect(0, 3883, '\p{^Nv=1.500}', "");
Expect(0, 3883, '\P{Nv=1.500}', "");
Expect(1, 3883, '\P{^Nv=1.500}', "");
Expect(0, 3882, '\p{Nv=1.500}', "");
Expect(1, 3882, '\p{^Nv=1.500}', "");
Expect(1, 3882, '\P{Nv=1.500}', "");
Expect(0, 3882, '\P{^Nv=1.500}', "");
Error('\p{Is_Numeric_Value=/a/	 00003/00000002}');
Error('\P{Is_Numeric_Value=/a/	 00003/00000002}');
Expect(1, 3883, '\p{Is_Numeric_Value=00003/2}', "");
Expect(0, 3883, '\p{^Is_Numeric_Value=00003/2}', "");
Expect(0, 3883, '\P{Is_Numeric_Value=00003/2}', "");
Expect(1, 3883, '\P{^Is_Numeric_Value=00003/2}', "");
Expect(0, 3882, '\p{Is_Numeric_Value=00003/2}', "");
Expect(1, 3882, '\p{^Is_Numeric_Value=00003/2}', "");
Expect(1, 3882, '\P{Is_Numeric_Value=00003/2}', "");
Expect(0, 3882, '\P{^Is_Numeric_Value=00003/2}', "");
Expect(1, 3883, '\p{Is_Numeric_Value=1.500}', "");
Expect(0, 3883, '\p{^Is_Numeric_Value=1.500}', "");
Expect(0, 3883, '\P{Is_Numeric_Value=1.500}', "");
Expect(1, 3883, '\P{^Is_Numeric_Value=1.500}', "");
Expect(0, 3882, '\p{Is_Numeric_Value=1.500}', "");
Expect(1, 3882, '\p{^Is_Numeric_Value=1.500}', "");
Expect(1, 3882, '\P{Is_Numeric_Value=1.500}', "");
Expect(0, 3882, '\P{^Is_Numeric_Value=1.500}', "");
Error('\p{Is_Nv=/a/--03/0000000002}');
Error('\P{Is_Nv=/a/--03/0000000002}');
Expect(1, 3883, '\p{Is_Nv=3/000002}', "");
Expect(0, 3883, '\p{^Is_Nv=3/000002}', "");
Expect(0, 3883, '\P{Is_Nv=3/000002}', "");
Expect(1, 3883, '\P{^Is_Nv=3/000002}', "");
Expect(0, 3882, '\p{Is_Nv=3/000002}', "");
Expect(1, 3882, '\p{^Is_Nv=3/000002}', "");
Expect(1, 3882, '\P{Is_Nv=3/000002}', "");
Expect(0, 3882, '\P{^Is_Nv=3/000002}', "");
Expect(1, 3883, '\p{Is_Nv=1.500}', "");
Expect(0, 3883, '\p{^Is_Nv=1.500}', "");
Expect(0, 3883, '\P{Is_Nv=1.500}', "");
Expect(1, 3883, '\P{^Is_Nv=1.500}', "");
Expect(0, 3882, '\p{Is_Nv=1.500}', "");
Expect(1, 3882, '\p{^Is_Nv=1.500}', "");
Expect(1, 3882, '\P{Is_Nv=1.500}', "");
Expect(0, 3882, '\P{^Is_Nv=1.500}', "");
Error('\p{Numeric_Value=_/a/41}');
Error('\P{Numeric_Value=_/a/41}');
Expect(1, 12982, '\p{Numeric_Value: 0_0_0_041}', "");
Expect(0, 12982, '\p{^Numeric_Value: 0_0_0_041}', "");
Expect(0, 12982, '\P{Numeric_Value: 0_0_0_041}', "");
Expect(1, 12982, '\P{^Numeric_Value: 0_0_0_041}', "");
Expect(0, 12981, '\p{Numeric_Value: 0_0_0_041}', "");
Expect(1, 12981, '\p{^Numeric_Value: 0_0_0_041}', "");
Expect(1, 12981, '\P{Numeric_Value: 0_0_0_041}', "");
Expect(0, 12981, '\P{^Numeric_Value: 0_0_0_041}', "");
Error('\p{Nv=	041:=}');
Error('\P{Nv=	041:=}');
Expect(1, 12982, '\p{Nv=+000041}', "");
Expect(0, 12982, '\p{^Nv=+000041}', "");
Expect(0, 12982, '\P{Nv=+000041}', "");
Expect(1, 12982, '\P{^Nv=+000041}', "");
Expect(0, 12981, '\p{Nv=+000041}', "");
Expect(1, 12981, '\p{^Nv=+000041}', "");
Expect(1, 12981, '\P{Nv=+000041}', "");
Expect(0, 12981, '\P{^Nv=+000041}', "");
Error('\p{Is_Numeric_Value: _	+0000000041/a/}');
Error('\P{Is_Numeric_Value: _	+0000000041/a/}');
Expect(1, 12982, '\p{Is_Numeric_Value=0_0_0_0_0_0_041}', "");
Expect(0, 12982, '\p{^Is_Numeric_Value=0_0_0_0_0_0_041}', "");
Expect(0, 12982, '\P{Is_Numeric_Value=0_0_0_0_0_0_041}', "");
Expect(1, 12982, '\P{^Is_Numeric_Value=0_0_0_0_0_0_041}', "");
Expect(0, 12981, '\p{Is_Numeric_Value=0_0_0_0_0_0_041}', "");
Expect(1, 12981, '\p{^Is_Numeric_Value=0_0_0_0_0_0_041}', "");
Expect(1, 12981, '\P{Is_Numeric_Value=0_0_0_0_0_0_041}', "");
Expect(0, 12981, '\P{^Is_Numeric_Value=0_0_0_0_0_0_041}', "");
Error('\p{Is_Nv=:=-41}');
Error('\P{Is_Nv=:=-41}');
Expect(1, 12982, '\p{Is_Nv=+00_00_00_04_1}', "");
Expect(0, 12982, '\p{^Is_Nv=+00_00_00_04_1}', "");
Expect(0, 12982, '\P{Is_Nv=+00_00_00_04_1}', "");
Expect(1, 12982, '\P{^Is_Nv=+00_00_00_04_1}', "");
Expect(0, 12981, '\p{Is_Nv=+00_00_00_04_1}', "");
Expect(1, 12981, '\p{^Is_Nv=+00_00_00_04_1}', "");
Expect(1, 12981, '\P{Is_Nv=+00_00_00_04_1}', "");
Expect(0, 12981, '\P{^Is_Nv=+00_00_00_04_1}', "");
Error('\p{Numeric_Value=-/a/+00	012}');
Error('\P{Numeric_Value=-/a/+00	012}');
Expect(1, 8555, '\p{Numeric_Value=+0_0_12}', "");
Expect(0, 8555, '\p{^Numeric_Value=+0_0_12}', "");
Expect(0, 8555, '\P{Numeric_Value=+0_0_12}', "");
Expect(1, 8555, '\P{^Numeric_Value=+0_0_12}', "");
Expect(0, 8554, '\p{Numeric_Value=+0_0_12}', "");
Expect(1, 8554, '\p{^Numeric_Value=+0_0_12}', "");
Expect(1, 8554, '\P{Numeric_Value=+0_0_12}', "");
Expect(0, 8554, '\P{^Numeric_Value=+0_0_12}', "");
Error('\p{Nv=_0/a/0 0012}');
Error('\P{Nv=_0/a/0 0012}');
Expect(1, 8555, '\p{Nv=1_2}', "");
Expect(0, 8555, '\p{^Nv=1_2}', "");
Expect(0, 8555, '\P{Nv=1_2}', "");
Expect(1, 8555, '\P{^Nv=1_2}', "");
Expect(0, 8554, '\p{Nv=1_2}', "");
Expect(1, 8554, '\p{^Nv=1_2}', "");
Expect(1, 8554, '\P{Nv=1_2}', "");
Expect(0, 8554, '\P{^Nv=1_2}', "");
Error('\p{Is_Numeric_Value=	 +0000012/a/}');
Error('\P{Is_Numeric_Value=	 +0000012/a/}');
Expect(1, 8555, '\p{Is_Numeric_Value=0_0_0_0_0_0_0_012}', "");
Expect(0, 8555, '\p{^Is_Numeric_Value=0_0_0_0_0_0_0_012}', "");
Expect(0, 8555, '\P{Is_Numeric_Value=0_0_0_0_0_0_0_012}', "");
Expect(1, 8555, '\P{^Is_Numeric_Value=0_0_0_0_0_0_0_012}', "");
Expect(0, 8554, '\p{Is_Numeric_Value=0_0_0_0_0_0_0_012}', "");
Expect(1, 8554, '\p{^Is_Numeric_Value=0_0_0_0_0_0_0_012}', "");
Expect(1, 8554, '\P{Is_Numeric_Value=0_0_0_0_0_0_0_012}', "");
Expect(0, 8554, '\P{^Is_Numeric_Value=0_0_0_0_0_0_0_012}', "");
Error('\p{Is_Nv=:=000000012}');
Error('\P{Is_Nv=:=000000012}');
Expect(1, 8555, '\p{Is_Nv=00000012}', "");
Expect(0, 8555, '\p{^Is_Nv=00000012}', "");
Expect(0, 8555, '\P{Is_Nv=00000012}', "");
Expect(1, 8555, '\P{^Is_Nv=00000012}', "");
Expect(0, 8554, '\p{Is_Nv=00000012}', "");
Expect(1, 8554, '\p{^Is_Nv=00000012}', "");
Expect(1, 8554, '\P{Is_Nv=00000012}', "");
Expect(0, 8554, '\P{^Is_Nv=00000012}', "");
Error('\p{Numeric_Value=	000015/a/}');
Error('\P{Numeric_Value=	000015/a/}');
Expect(1, 9326, '\p{Numeric_Value=+0000000015}', "");
Expect(0, 9326, '\p{^Numeric_Value=+0000000015}', "");
Expect(0, 9326, '\P{Numeric_Value=+0000000015}', "");
Expect(1, 9326, '\P{^Numeric_Value=+0000000015}', "");
Expect(0, 9325, '\p{Numeric_Value=+0000000015}', "");
Expect(1, 9325, '\p{^Numeric_Value=+0000000015}', "");
Expect(1, 9325, '\P{Numeric_Value=+0000000015}', "");
Expect(0, 9325, '\P{^Numeric_Value=+0000000015}', "");
Error('\p{Nv= :=+00000000015}');
Error('\P{Nv= :=+00000000015}');
Expect(1, 9326, '\p{Nv=15}', "");
Expect(0, 9326, '\p{^Nv=15}', "");
Expect(0, 9326, '\P{Nv=15}', "");
Expect(1, 9326, '\P{^Nv=15}', "");
Expect(0, 9325, '\p{Nv=15}', "");
Expect(1, 9325, '\p{^Nv=15}', "");
Expect(1, 9325, '\P{Nv=15}', "");
Expect(0, 9325, '\P{^Nv=15}', "");
Error('\p{Is_Numeric_Value= /a/0	0	0_00_0 15}');
Error('\P{Is_Numeric_Value= /a/0	0	0_00_0 15}');
Expect(1, 9326, '\p{Is_Numeric_Value=0000015}', "");
Expect(0, 9326, '\p{^Is_Numeric_Value=0000015}', "");
Expect(0, 9326, '\P{Is_Numeric_Value=0000015}', "");
Expect(1, 9326, '\P{^Is_Numeric_Value=0000015}', "");
Expect(0, 9325, '\p{Is_Numeric_Value=0000015}', "");
Expect(1, 9325, '\p{^Is_Numeric_Value=0000015}', "");
Expect(1, 9325, '\P{Is_Numeric_Value=0000015}', "");
Expect(0, 9325, '\P{^Is_Numeric_Value=0000015}', "");
Error('\p{Is_Nv=:=_-+01_5}');
Error('\P{Is_Nv=:=_-+01_5}');
Expect(1, 9326, '\p{Is_Nv=001_5}', "");
Expect(0, 9326, '\p{^Is_Nv=001_5}', "");
Expect(0, 9326, '\P{Is_Nv=001_5}', "");
Expect(1, 9326, '\P{^Is_Nv=001_5}', "");
Expect(0, 9325, '\p{Is_Nv=001_5}', "");
Expect(1, 9325, '\p{^Is_Nv=001_5}', "");
Expect(1, 9325, '\P{Is_Nv=001_5}', "");
Expect(0, 9325, '\P{^Is_Nv=001_5}', "");
Error('\p{Numeric_Value=	/a/_01/0000002}');
Error('\P{Numeric_Value=	/a/_01/0000002}');
Expect(1, 3891, '\p{Numeric_Value=-0001/0000002}', "");
Expect(0, 3891, '\p{^Numeric_Value=-0001/0000002}', "");
Expect(0, 3891, '\P{Numeric_Value=-0001/0000002}', "");
Expect(1, 3891, '\P{^Numeric_Value=-0001/0000002}', "");
Expect(0, 3890, '\p{Numeric_Value=-0001/0000002}', "");
Expect(1, 3890, '\p{^Numeric_Value=-0001/0000002}', "");
Expect(1, 3890, '\P{Numeric_Value=-0001/0000002}', "");
Expect(0, 3890, '\P{^Numeric_Value=-0001/0000002}', "");
Expect(1, 3891, '\p{Numeric_Value=-0.500}', "");
Expect(0, 3891, '\p{^Numeric_Value=-0.500}', "");
Expect(0, 3891, '\P{Numeric_Value=-0.500}', "");
Expect(1, 3891, '\P{^Numeric_Value=-0.500}', "");
Expect(0, 3890, '\p{Numeric_Value=-0.500}', "");
Expect(1, 3890, '\p{^Numeric_Value=-0.500}', "");
Expect(1, 3890, '\P{Numeric_Value=-0.500}', "");
Expect(0, 3890, '\P{^Numeric_Value=-0.500}', "");
Error('\p{Nv= -_0000001/000002:=}');
Error('\P{Nv= -_0000001/000002:=}');
Expect(1, 3891, '\p{Nv=-0000001/000000002}', "");
Expect(0, 3891, '\p{^Nv=-0000001/000000002}', "");
Expect(0, 3891, '\P{Nv=-0000001/000000002}', "");
Expect(1, 3891, '\P{^Nv=-0000001/000000002}', "");
Expect(0, 3890, '\p{Nv=-0000001/000000002}', "");
Expect(1, 3890, '\p{^Nv=-0000001/000000002}', "");
Expect(1, 3890, '\P{Nv=-0000001/000000002}', "");
Expect(0, 3890, '\P{^Nv=-0000001/000000002}', "");
Expect(1, 3891, '\p{Nv=-0.500}', "");
Expect(0, 3891, '\p{^Nv=-0.500}', "");
Expect(0, 3891, '\P{Nv=-0.500}', "");
Expect(1, 3891, '\P{^Nv=-0.500}', "");
Expect(0, 3890, '\p{Nv=-0.500}', "");
Expect(1, 3890, '\p{^Nv=-0.500}', "");
Expect(1, 3890, '\P{Nv=-0.500}', "");
Expect(0, 3890, '\P{^Nv=-0.500}', "");
Error('\p{Is_Numeric_Value=_	/a/00000001/00000002}');
Error('\P{Is_Numeric_Value=_	/a/00000001/00000002}');
Expect(1, 3891, '\p{Is_Numeric_Value=-001/0000000002}', "");
Expect(0, 3891, '\p{^Is_Numeric_Value=-001/0000000002}', "");
Expect(0, 3891, '\P{Is_Numeric_Value=-001/0000000002}', "");
Expect(1, 3891, '\P{^Is_Numeric_Value=-001/0000000002}', "");
Expect(0, 3890, '\p{Is_Numeric_Value=-001/0000000002}', "");
Expect(1, 3890, '\p{^Is_Numeric_Value=-001/0000000002}', "");
Expect(1, 3890, '\P{Is_Numeric_Value=-001/0000000002}', "");
Expect(0, 3890, '\P{^Is_Numeric_Value=-001/0000000002}', "");
Expect(1, 3891, '\p{Is_Numeric_Value=-0.500}', "");
Expect(0, 3891, '\p{^Is_Numeric_Value=-0.500}', "");
Expect(0, 3891, '\P{Is_Numeric_Value=-0.500}', "");
Expect(1, 3891, '\P{^Is_Numeric_Value=-0.500}', "");
Expect(0, 3890, '\p{Is_Numeric_Value=-0.500}', "");
Expect(1, 3890, '\p{^Is_Numeric_Value=-0.500}', "");
Expect(1, 3890, '\P{Is_Numeric_Value=-0.500}', "");
Expect(0, 3890, '\P{^Is_Numeric_Value=-0.500}', "");
Error('\p{Is_Nv: -/a/000001/2}');
Error('\P{Is_Nv: -/a/000001/2}');
Expect(1, 3891, '\p{Is_Nv=-00001/00002}', "");
Expect(0, 3891, '\p{^Is_Nv=-00001/00002}', "");
Expect(0, 3891, '\P{Is_Nv=-00001/00002}', "");
Expect(1, 3891, '\P{^Is_Nv=-00001/00002}', "");
Expect(0, 3890, '\p{Is_Nv=-00001/00002}', "");
Expect(1, 3890, '\p{^Is_Nv=-00001/00002}', "");
Expect(1, 3890, '\P{Is_Nv=-00001/00002}', "");
Expect(0, 3890, '\P{^Is_Nv=-00001/00002}', "");
Expect(1, 3891, '\p{Is_Nv=-0.500}', "");
Expect(0, 3891, '\p{^Is_Nv=-0.500}', "");
Expect(0, 3891, '\P{Is_Nv=-0.500}', "");
Expect(1, 3891, '\P{^Is_Nv=-0.500}', "");
Expect(0, 3890, '\p{Is_Nv=-0.500}', "");
Expect(1, 3890, '\p{^Is_Nv=-0.500}', "");
Expect(1, 3890, '\P{Is_Nv=-0.500}', "");
Expect(0, 3890, '\P{^Is_Nv=-0.500}', "");
Error('\p{Numeric_Value=_:=0	0 08 0000}');
Error('\P{Numeric_Value=_:=0	0 08 0000}');
Expect(1, 65842, '\p{Numeric_Value=80000}', "");
Expect(0, 65842, '\p{^Numeric_Value=80000}', "");
Expect(0, 65842, '\P{Numeric_Value=80000}', "");
Expect(1, 65842, '\P{^Numeric_Value=80000}', "");
Expect(0, 65841, '\p{Numeric_Value=80000}', "");
Expect(1, 65841, '\p{^Numeric_Value=80000}', "");
Expect(1, 65841, '\P{Numeric_Value=80000}', "");
Expect(0, 65841, '\P{^Numeric_Value=80000}', "");
Error('\p{Nv=/a/_+80000}');
Error('\P{Nv=/a/_+80000}');
Expect(1, 65842, '\p{Nv=00_00_00_00_80_00_0}', "");
Expect(0, 65842, '\p{^Nv=00_00_00_00_80_00_0}', "");
Expect(0, 65842, '\P{Nv=00_00_00_00_80_00_0}', "");
Expect(1, 65842, '\P{^Nv=00_00_00_00_80_00_0}', "");
Expect(0, 65841, '\p{Nv=00_00_00_00_80_00_0}', "");
Expect(1, 65841, '\p{^Nv=00_00_00_00_80_00_0}', "");
Expect(1, 65841, '\P{Nv=00_00_00_00_80_00_0}', "");
Expect(0, 65841, '\P{^Nv=00_00_00_00_80_00_0}', "");
Error('\p{Is_Numeric_Value=_:=80000}');
Error('\P{Is_Numeric_Value=_:=80000}');
Expect(1, 65842, '\p{Is_Numeric_Value=+00000080000}', "");
Expect(0, 65842, '\p{^Is_Numeric_Value=+00000080000}', "");
Expect(0, 65842, '\P{Is_Numeric_Value=+00000080000}', "");
Expect(1, 65842, '\P{^Is_Numeric_Value=+00000080000}', "");
Expect(0, 65841, '\p{Is_Numeric_Value=+00000080000}', "");
Expect(1, 65841, '\p{^Is_Numeric_Value=+00000080000}', "");
Expect(1, 65841, '\P{Is_Numeric_Value=+00000080000}', "");
Expect(0, 65841, '\P{^Is_Numeric_Value=+00000080000}', "");
Error('\p{Is_Nv: -_0:=0-8 0_0 00}');
Error('\P{Is_Nv: -_0:=0-8 0_0 00}');
Expect(1, 65842, '\p{Is_Nv=000080000}', "");
Expect(0, 65842, '\p{^Is_Nv=000080000}', "");
Expect(0, 65842, '\P{Is_Nv=000080000}', "");
Expect(1, 65842, '\P{^Is_Nv=000080000}', "");
Expect(0, 65841, '\p{Is_Nv=000080000}', "");
Expect(1, 65841, '\p{^Is_Nv=000080000}', "");
Expect(1, 65841, '\P{Is_Nv=000080000}', "");
Expect(0, 65841, '\P{^Is_Nv=000080000}', "");
Error('\p{Numeric_Value=__0-00-0	00:=0_060}');
Error('\P{Numeric_Value=__0-00-0	00:=0_060}');
Expect(1, 4983, '\p{Numeric_Value:00_00_00_06_0}', "");
Expect(0, 4983, '\p{^Numeric_Value:00_00_00_06_0}', "");
Expect(0, 4983, '\P{Numeric_Value:00_00_00_06_0}', "");
Expect(1, 4983, '\P{^Numeric_Value:00_00_00_06_0}', "");
Expect(0, 4982, '\p{Numeric_Value:00_00_00_06_0}', "");
Expect(1, 4982, '\p{^Numeric_Value:00_00_00_06_0}', "");
Expect(1, 4982, '\P{Numeric_Value:00_00_00_06_0}', "");
Expect(0, 4982, '\P{^Numeric_Value:00_00_00_06_0}', "");
Error('\p{Nv=--0000-0000/a/60}');
Error('\P{Nv=--0000-0000/a/60}');
Expect(1, 4983, '\p{Nv=0060}', "");
Expect(0, 4983, '\p{^Nv=0060}', "");
Expect(0, 4983, '\P{Nv=0060}', "");
Expect(1, 4983, '\P{^Nv=0060}', "");
Expect(0, 4982, '\p{Nv=0060}', "");
Expect(1, 4982, '\p{^Nv=0060}', "");
Expect(1, 4982, '\P{Nv=0060}', "");
Expect(0, 4982, '\P{^Nv=0060}', "");
Error('\p{Is_Numeric_Value=_/a/0000060}');
Error('\P{Is_Numeric_Value=_/a/0000060}');
Expect(1, 4983, '\p{Is_Numeric_Value=0006_0}', "");
Expect(0, 4983, '\p{^Is_Numeric_Value=0006_0}', "");
Expect(0, 4983, '\P{Is_Numeric_Value=0006_0}', "");
Expect(1, 4983, '\P{^Is_Numeric_Value=0006_0}', "");
Expect(0, 4982, '\p{Is_Numeric_Value=0006_0}', "");
Expect(1, 4982, '\p{^Is_Numeric_Value=0006_0}', "");
Expect(1, 4982, '\P{Is_Numeric_Value=0006_0}', "");
Expect(0, 4982, '\P{^Is_Numeric_Value=0006_0}', "");
Error('\p{Is_Nv=-00	0	0 0-0:=060}');
Error('\P{Is_Nv=-00	0	0 0-0:=060}');
Expect(1, 4983, '\p{Is_Nv=+0_0_0_0_0_0060}', "");
Expect(0, 4983, '\p{^Is_Nv=+0_0_0_0_0_0060}', "");
Expect(0, 4983, '\P{Is_Nv=+0_0_0_0_0_0060}', "");
Expect(1, 4983, '\P{^Is_Nv=+0_0_0_0_0_0060}', "");
Expect(0, 4982, '\p{Is_Nv=+0_0_0_0_0_0060}', "");
Expect(1, 4982, '\p{^Is_Nv=+0_0_0_0_0_0060}', "");
Expect(1, 4982, '\P{Is_Nv=+0_0_0_0_0_0060}', "");
Expect(0, 4982, '\P{^Is_Nv=+0_0_0_0_0_0060}', "");
Error('\p{Numeric_Value=:=_	00000000045}');
Error('\P{Numeric_Value=:=_	00000000045}');
Expect(1, 12986, '\p{Numeric_Value=+4_5}', "");
Expect(0, 12986, '\p{^Numeric_Value=+4_5}', "");
Expect(0, 12986, '\P{Numeric_Value=+4_5}', "");
Expect(1, 12986, '\P{^Numeric_Value=+4_5}', "");
Expect(0, 12985, '\p{Numeric_Value=+4_5}', "");
Expect(1, 12985, '\p{^Numeric_Value=+4_5}', "");
Expect(1, 12985, '\P{Numeric_Value=+4_5}', "");
Expect(0, 12985, '\P{^Numeric_Value=+4_5}', "");
Error('\p{Nv=-:=+45}');
Error('\P{Nv=-:=+45}');
Expect(1, 12986, '\p{Nv=+000045}', "");
Expect(0, 12986, '\p{^Nv=+000045}', "");
Expect(0, 12986, '\P{Nv=+000045}', "");
Expect(1, 12986, '\P{^Nv=+000045}', "");
Expect(0, 12985, '\p{Nv=+000045}', "");
Expect(1, 12985, '\p{^Nv=+000045}', "");
Expect(1, 12985, '\P{Nv=+000045}', "");
Expect(0, 12985, '\P{^Nv=+000045}', "");
Error('\p{Is_Numeric_Value=-+0:=0-45}');
Error('\P{Is_Numeric_Value=-+0:=0-45}');
Expect(1, 12986, '\p{Is_Numeric_Value=45}', "");
Expect(0, 12986, '\p{^Is_Numeric_Value=45}', "");
Expect(0, 12986, '\P{Is_Numeric_Value=45}', "");
Expect(1, 12986, '\P{^Is_Numeric_Value=45}', "");
Expect(0, 12985, '\p{Is_Numeric_Value=45}', "");
Expect(1, 12985, '\p{^Is_Numeric_Value=45}', "");
Expect(1, 12985, '\P{Is_Numeric_Value=45}', "");
Expect(0, 12985, '\P{^Is_Numeric_Value=45}', "");
Error('\p{Is_Nv=_	+0004/a/5}');
Error('\P{Is_Nv=_	+0004/a/5}');
Expect(1, 12986, '\p{Is_Nv=00045}', "");
Expect(0, 12986, '\p{^Is_Nv=00045}', "");
Expect(0, 12986, '\P{Is_Nv=00045}', "");
Expect(1, 12986, '\P{^Is_Nv=00045}', "");
Expect(0, 12985, '\p{Is_Nv=00045}', "");
Expect(1, 12985, '\p{^Is_Nv=00045}', "");
Expect(1, 12985, '\P{Is_Nv=00045}', "");
Expect(0, 12985, '\P{^Is_Nv=00045}', "");
Error('\p{Numeric_Value= /a/000_0000019}');
Error('\P{Numeric_Value= /a/000_0000019}');
Expect(1, 5872, '\p{Numeric_Value=+0_0_0_0_0_019}', "");
Expect(0, 5872, '\p{^Numeric_Value=+0_0_0_0_0_019}', "");
Expect(0, 5872, '\P{Numeric_Value=+0_0_0_0_0_019}', "");
Expect(1, 5872, '\P{^Numeric_Value=+0_0_0_0_0_019}', "");
Expect(0, 5871, '\p{Numeric_Value=+0_0_0_0_0_019}', "");
Expect(1, 5871, '\p{^Numeric_Value=+0_0_0_0_0_019}', "");
Expect(1, 5871, '\P{Numeric_Value=+0_0_0_0_0_019}', "");
Expect(0, 5871, '\P{^Numeric_Value=+0_0_0_0_0_019}', "");
Error('\p{Nv=_ +019/a/}');
Error('\P{Nv=_ +019/a/}');
Expect(1, 5872, '\p{Nv=01_9}', "");
Expect(0, 5872, '\p{^Nv=01_9}', "");
Expect(0, 5872, '\P{Nv=01_9}', "");
Expect(1, 5872, '\P{^Nv=01_9}', "");
Expect(0, 5871, '\p{Nv=01_9}', "");
Expect(1, 5871, '\p{^Nv=01_9}', "");
Expect(1, 5871, '\P{Nv=01_9}', "");
Expect(0, 5871, '\P{^Nv=01_9}', "");
Error('\p{Is_Numeric_Value=/a/_ 0019}');
Error('\P{Is_Numeric_Value=/a/_ 0019}');
Expect(1, 5872, '\p{Is_Numeric_Value=+0000_0001_9}', "");
Expect(0, 5872, '\p{^Is_Numeric_Value=+0000_0001_9}', "");
Expect(0, 5872, '\P{Is_Numeric_Value=+0000_0001_9}', "");
Expect(1, 5872, '\P{^Is_Numeric_Value=+0000_0001_9}', "");
Expect(0, 5871, '\p{Is_Numeric_Value=+0000_0001_9}', "");
Expect(1, 5871, '\p{^Is_Numeric_Value=+0000_0001_9}', "");
Expect(1, 5871, '\P{Is_Numeric_Value=+0000_0001_9}', "");
Expect(0, 5871, '\P{^Is_Numeric_Value=+0000_0001_9}', "");
Error('\p{Is_Nv=:=-00019}');
Error('\P{Is_Nv=:=-00019}');
Expect(1, 5872, '\p{Is_Nv=00000000019}', "");
Expect(0, 5872, '\p{^Is_Nv=00000000019}', "");
Expect(0, 5872, '\P{Is_Nv=00000000019}', "");
Expect(1, 5872, '\P{^Is_Nv=00000000019}', "");
Expect(0, 5871, '\p{Is_Nv=00000000019}', "");
Expect(1, 5871, '\p{^Is_Nv=00000000019}', "");
Expect(1, 5871, '\P{Is_Nv=00000000019}', "");
Expect(0, 5871, '\P{^Is_Nv=00000000019}', "");
Error('\p{Numeric_Value=/a/	-000000011/000002}');
Error('\P{Numeric_Value=/a/	-000000011/000002}');
Expect(1, 3887, '\p{Numeric_Value=+011/0000000002}', "");
Expect(0, 3887, '\p{^Numeric_Value=+011/0000000002}', "");
Expect(0, 3887, '\P{Numeric_Value=+011/0000000002}', "");
Expect(1, 3887, '\P{^Numeric_Value=+011/0000000002}', "");
Expect(0, 3886, '\p{Numeric_Value=+011/0000000002}', "");
Expect(1, 3886, '\p{^Numeric_Value=+011/0000000002}', "");
Expect(1, 3886, '\P{Numeric_Value=+011/0000000002}', "");
Expect(0, 3886, '\P{^Numeric_Value=+011/0000000002}', "");
Expect(1, 3887, '\p{Numeric_Value: 5.500}', "");
Expect(0, 3887, '\p{^Numeric_Value: 5.500}', "");
Expect(0, 3887, '\P{Numeric_Value: 5.500}', "");
Expect(1, 3887, '\P{^Numeric_Value: 5.500}', "");
Expect(0, 3886, '\p{Numeric_Value: 5.500}', "");
Expect(1, 3886, '\p{^Numeric_Value: 5.500}', "");
Expect(1, 3886, '\P{Numeric_Value: 5.500}', "");
Expect(0, 3886, '\P{^Numeric_Value: 5.500}', "");
Error('\p{Nv=/a/  000000011/2}');
Error('\P{Nv=/a/  000000011/2}');
Expect(1, 3887, '\p{Nv=000011/02}', "");
Expect(0, 3887, '\p{^Nv=000011/02}', "");
Expect(0, 3887, '\P{Nv=000011/02}', "");
Expect(1, 3887, '\P{^Nv=000011/02}', "");
Expect(0, 3886, '\p{Nv=000011/02}', "");
Expect(1, 3886, '\p{^Nv=000011/02}', "");
Expect(1, 3886, '\P{Nv=000011/02}', "");
Expect(0, 3886, '\P{^Nv=000011/02}', "");
Expect(1, 3887, '\p{Nv=5.500}', "");
Expect(0, 3887, '\p{^Nv=5.500}', "");
Expect(0, 3887, '\P{Nv=5.500}', "");
Expect(1, 3887, '\P{^Nv=5.500}', "");
Expect(0, 3886, '\p{Nv=5.500}', "");
Expect(1, 3886, '\p{^Nv=5.500}', "");
Expect(1, 3886, '\P{Nv=5.500}', "");
Expect(0, 3886, '\P{^Nv=5.500}', "");
Error('\p{Is_Numeric_Value=-	+000000011/00002/a/}');
Error('\P{Is_Numeric_Value=-	+000000011/00002/a/}');
Expect(1, 3887, '\p{Is_Numeric_Value=+00000011/2}', "");
Expect(0, 3887, '\p{^Is_Numeric_Value=+00000011/2}', "");
Expect(0, 3887, '\P{Is_Numeric_Value=+00000011/2}', "");
Expect(1, 3887, '\P{^Is_Numeric_Value=+00000011/2}', "");
Expect(0, 3886, '\p{Is_Numeric_Value=+00000011/2}', "");
Expect(1, 3886, '\p{^Is_Numeric_Value=+00000011/2}', "");
Expect(1, 3886, '\P{Is_Numeric_Value=+00000011/2}', "");
Expect(0, 3886, '\P{^Is_Numeric_Value=+00000011/2}', "");
Expect(1, 3887, '\p{Is_Numeric_Value=5.500}', "");
Expect(0, 3887, '\p{^Is_Numeric_Value=5.500}', "");
Expect(0, 3887, '\P{Is_Numeric_Value=5.500}', "");
Expect(1, 3887, '\P{^Is_Numeric_Value=5.500}', "");
Expect(0, 3886, '\p{Is_Numeric_Value=5.500}', "");
Expect(1, 3886, '\p{^Is_Numeric_Value=5.500}', "");
Expect(1, 3886, '\P{Is_Numeric_Value=5.500}', "");
Expect(0, 3886, '\P{^Is_Numeric_Value=5.500}', "");
Error('\p{Is_Nv:/a/_-00000011/02}');
Error('\P{Is_Nv:/a/_-00000011/02}');
Expect(1, 3887, '\p{Is_Nv=0000011/00002}', "");
Expect(0, 3887, '\p{^Is_Nv=0000011/00002}', "");
Expect(0, 3887, '\P{Is_Nv=0000011/00002}', "");
Expect(1, 3887, '\P{^Is_Nv=0000011/00002}', "");
Expect(0, 3886, '\p{Is_Nv=0000011/00002}', "");
Expect(1, 3886, '\p{^Is_Nv=0000011/00002}', "");
Expect(1, 3886, '\P{Is_Nv=0000011/00002}', "");
Expect(0, 3886, '\P{^Is_Nv=0000011/00002}', "");
Expect(1, 3887, '\p{Is_Nv=5.500}', "");
Expect(0, 3887, '\p{^Is_Nv=5.500}', "");
Expect(0, 3887, '\P{Is_Nv=5.500}', "");
Expect(1, 3887, '\P{^Is_Nv=5.500}', "");
Expect(0, 3886, '\p{Is_Nv=5.500}', "");
Expect(1, 3886, '\p{^Is_Nv=5.500}', "");
Expect(1, 3886, '\P{Is_Nv=5.500}', "");
Expect(0, 3886, '\P{^Is_Nv=5.500}', "");
Error('\p{Numeric_Value=_ +0070/a/}');
Error('\P{Numeric_Value=_ +0070/a/}');
Expect(1, 4984, '\p{Numeric_Value=0070}', "");
Expect(0, 4984, '\p{^Numeric_Value=0070}', "");
Expect(0, 4984, '\P{Numeric_Value=0070}', "");
Expect(1, 4984, '\P{^Numeric_Value=0070}', "");
Expect(0, 4983, '\p{Numeric_Value=0070}', "");
Expect(1, 4983, '\p{^Numeric_Value=0070}', "");
Expect(1, 4983, '\P{Numeric_Value=0070}', "");
Expect(0, 4983, '\P{^Numeric_Value=0070}', "");
Error('\p{Nv=-_00:=00	07	0}');
Error('\P{Nv=-_00:=00	07	0}');
Expect(1, 4984, '\p{Nv=00000000070}', "");
Expect(0, 4984, '\p{^Nv=00000000070}', "");
Expect(0, 4984, '\P{Nv=00000000070}', "");
Expect(1, 4984, '\P{^Nv=00000000070}', "");
Expect(0, 4983, '\p{Nv=00000000070}', "");
Expect(1, 4983, '\p{^Nv=00000000070}', "");
Expect(1, 4983, '\P{Nv=00000000070}', "");
Expect(0, 4983, '\P{^Nv=00000000070}', "");
Error('\p{Is_Numeric_Value=:=	00-0070}');
Error('\P{Is_Numeric_Value=:=	00-0070}');
Expect(1, 4984, '\p{Is_Numeric_Value=000000070}', "");
Expect(0, 4984, '\p{^Is_Numeric_Value=000000070}', "");
Expect(0, 4984, '\P{Is_Numeric_Value=000000070}', "");
Expect(1, 4984, '\P{^Is_Numeric_Value=000000070}', "");
Expect(0, 4983, '\p{Is_Numeric_Value=000000070}', "");
Expect(1, 4983, '\p{^Is_Numeric_Value=000000070}', "");
Expect(1, 4983, '\P{Is_Numeric_Value=000000070}', "");
Expect(0, 4983, '\P{^Is_Numeric_Value=000000070}', "");
Error('\p{Is_Nv=/a/ -070}');
Error('\P{Is_Nv=/a/ -070}');
Expect(1, 4984, '\p{Is_Nv=070}', "");
Expect(0, 4984, '\p{^Is_Nv=070}', "");
Expect(0, 4984, '\P{Is_Nv=070}', "");
Expect(1, 4984, '\P{^Is_Nv=070}', "");
Expect(0, 4983, '\p{Is_Nv=070}', "");
Expect(1, 4983, '\p{^Is_Nv=070}', "");
Expect(1, 4983, '\P{Is_Nv=070}', "");
Expect(0, 4983, '\P{^Is_Nv=070}', "");
Error('\p{Numeric_Value=:=00 00_02}');
Error('\P{Numeric_Value=:=00 00_02}');
Expect(1, 50, '\p{Numeric_Value=+0_0_02}', "");
Expect(0, 50, '\p{^Numeric_Value=+0_0_02}', "");
Expect(0, 50, '\P{Numeric_Value=+0_0_02}', "");
Expect(1, 50, '\P{^Numeric_Value=+0_0_02}', "");
Expect(0, 49, '\p{Numeric_Value=+0_0_02}', "");
Expect(1, 49, '\p{^Numeric_Value=+0_0_02}', "");
Expect(1, 49, '\P{Numeric_Value=+0_0_02}', "");
Expect(0, 49, '\P{^Numeric_Value=+0_0_02}', "");
Error('\p{Nv=--002:=}');
Error('\P{Nv=--002:=}');
Expect(1, 50, '\p{Nv=0000002}', "");
Expect(0, 50, '\p{^Nv=0000002}', "");
Expect(0, 50, '\P{Nv=0000002}', "");
Expect(1, 50, '\P{^Nv=0000002}', "");
Expect(0, 49, '\p{Nv=0000002}', "");
Expect(1, 49, '\p{^Nv=0000002}', "");
Expect(1, 49, '\P{Nv=0000002}', "");
Expect(0, 49, '\P{^Nv=0000002}', "");
Error('\p{Is_Numeric_Value=:= 02}');
Error('\P{Is_Numeric_Value=:= 02}');
Expect(1, 50, '\p{Is_Numeric_Value=2}', "");
Expect(0, 50, '\p{^Is_Numeric_Value=2}', "");
Expect(0, 50, '\P{Is_Numeric_Value=2}', "");
Expect(1, 50, '\P{^Is_Numeric_Value=2}', "");
Expect(0, 49, '\p{Is_Numeric_Value=2}', "");
Expect(1, 49, '\p{^Is_Numeric_Value=2}', "");
Expect(1, 49, '\P{Is_Numeric_Value=2}', "");
Expect(0, 49, '\P{^Is_Numeric_Value=2}', "");
Error('\p{Is_Nv=	:=000000002}');
Error('\P{Is_Nv=	:=000000002}');
Expect(1, 50, '\p{Is_Nv:	02}', "");
Expect(0, 50, '\p{^Is_Nv:	02}', "");
Expect(0, 50, '\P{Is_Nv:	02}', "");
Expect(1, 50, '\P{^Is_Nv:	02}', "");
Expect(0, 49, '\p{Is_Nv:	02}', "");
Expect(1, 49, '\p{^Is_Nv:	02}', "");
Expect(1, 49, '\P{Is_Nv:	02}', "");
Expect(0, 49, '\P{^Is_Nv:	02}', "");
Error('\p{Numeric_Value=+00000000017:=}');
Error('\P{Numeric_Value=+00000000017:=}');
Expect(1, 5870, '\p{Numeric_Value=0_0_0_0_0_0_017}', "");
Expect(0, 5870, '\p{^Numeric_Value=0_0_0_0_0_0_017}', "");
Expect(0, 5870, '\P{Numeric_Value=0_0_0_0_0_0_017}', "");
Expect(1, 5870, '\P{^Numeric_Value=0_0_0_0_0_0_017}', "");
Expect(0, 5869, '\p{Numeric_Value=0_0_0_0_0_0_017}', "");
Expect(1, 5869, '\p{^Numeric_Value=0_0_0_0_0_0_017}', "");
Expect(1, 5869, '\P{Numeric_Value=0_0_0_0_0_0_017}', "");
Expect(0, 5869, '\P{^Numeric_Value=0_0_0_0_0_0_017}', "");
Error('\p{Nv=-000	0-0-0:=0017}');
Error('\P{Nv=-000	0-0-0:=0017}');
Expect(1, 5870, '\p{Nv=0017}', "");
Expect(0, 5870, '\p{^Nv=0017}', "");
Expect(0, 5870, '\P{Nv=0017}', "");
Expect(1, 5870, '\P{^Nv=0017}', "");
Expect(0, 5869, '\p{Nv=0017}', "");
Expect(1, 5869, '\p{^Nv=0017}', "");
Expect(1, 5869, '\P{Nv=0017}', "");
Expect(0, 5869, '\P{^Nv=0017}', "");
Error('\p{Is_Numeric_Value=	+0	0/a/17}');
Error('\P{Is_Numeric_Value=	+0	0/a/17}');
Expect(1, 5870, '\p{Is_Numeric_Value=00000_00001_7}', "");
Expect(0, 5870, '\p{^Is_Numeric_Value=00000_00001_7}', "");
Expect(0, 5870, '\P{Is_Numeric_Value=00000_00001_7}', "");
Expect(1, 5870, '\P{^Is_Numeric_Value=00000_00001_7}', "");
Expect(0, 5869, '\p{Is_Numeric_Value=00000_00001_7}', "");
Expect(1, 5869, '\p{^Is_Numeric_Value=00000_00001_7}', "");
Expect(1, 5869, '\P{Is_Numeric_Value=00000_00001_7}', "");
Expect(0, 5869, '\P{^Is_Numeric_Value=00000_00001_7}', "");
Error('\p{Is_Nv=_	0000-0000:=17}');
Error('\P{Is_Nv=_	0000-0000:=17}');
Expect(1, 5870, '\p{Is_Nv=0000017}', "");
Expect(0, 5870, '\p{^Is_Nv=0000017}', "");
Expect(0, 5870, '\P{Is_Nv=0000017}', "");
Expect(1, 5870, '\P{^Is_Nv=0000017}', "");
Expect(0, 5869, '\p{Is_Nv=0000017}', "");
Expect(1, 5869, '\p{^Is_Nv=0000017}', "");
Expect(1, 5869, '\P{Is_Nv=0000017}', "");
Expect(0, 5869, '\P{^Is_Nv=0000017}', "");
Error('\p{Numeric_Value=:=-	20000}');
Error('\P{Numeric_Value=:=-	20000}');
Expect(1, 65836, '\p{Numeric_Value=00000020000}', "");
Expect(0, 65836, '\p{^Numeric_Value=00000020000}', "");
Expect(0, 65836, '\P{Numeric_Value=00000020000}', "");
Expect(1, 65836, '\P{^Numeric_Value=00000020000}', "");
Expect(0, 65835, '\p{Numeric_Value=00000020000}', "");
Expect(1, 65835, '\p{^Numeric_Value=00000020000}', "");
Expect(1, 65835, '\P{Numeric_Value=00000020000}', "");
Expect(0, 65835, '\P{^Numeric_Value=00000020000}', "");
Error('\p{Nv: /a/-_+00000020000}');
Error('\P{Nv: /a/-_+00000020000}');
Expect(1, 65836, '\p{Nv=0000020000}', "");
Expect(0, 65836, '\p{^Nv=0000020000}', "");
Expect(0, 65836, '\P{Nv=0000020000}', "");
Expect(1, 65836, '\P{^Nv=0000020000}', "");
Expect(0, 65835, '\p{Nv=0000020000}', "");
Expect(1, 65835, '\p{^Nv=0000020000}', "");
Expect(1, 65835, '\P{Nv=0000020000}', "");
Expect(0, 65835, '\P{^Nv=0000020000}', "");
Error('\p{Is_Numeric_Value= 0/a/00	0	2 0000}');
Error('\P{Is_Numeric_Value= 0/a/00	0	2 0000}');
Expect(1, 65836, '\p{Is_Numeric_Value=+002000_0}', "");
Expect(0, 65836, '\p{^Is_Numeric_Value=+002000_0}', "");
Expect(0, 65836, '\P{Is_Numeric_Value=+002000_0}', "");
Expect(1, 65836, '\P{^Is_Numeric_Value=+002000_0}', "");
Expect(0, 65835, '\p{Is_Numeric_Value=+002000_0}', "");
Expect(1, 65835, '\p{^Is_Numeric_Value=+002000_0}', "");
Expect(1, 65835, '\P{Is_Numeric_Value=+002000_0}', "");
Expect(0, 65835, '\P{^Is_Numeric_Value=+002000_0}', "");
Error('\p{Is_Nv= 000000/a/0020000}');
Error('\P{Is_Nv= 000000/a/0020000}');
Expect(1, 65836, '\p{Is_Nv=000000020000}', "");
Expect(0, 65836, '\p{^Is_Nv=000000020000}', "");
Expect(0, 65836, '\P{Is_Nv=000000020000}', "");
Expect(1, 65836, '\P{^Is_Nv=000000020000}', "");
Expect(0, 65835, '\p{Is_Nv=000000020000}', "");
Expect(1, 65835, '\p{^Is_Nv=000000020000}', "");
Expect(1, 65835, '\P{Is_Nv=000000020000}', "");
Expect(0, 65835, '\P{^Is_Nv=000000020000}', "");
Error('\p{Numeric_Value=:=  +0001}');
Error('\P{Numeric_Value=:=  +0001}');
Expect(1, 49, '\p{Numeric_Value=00000000_1}', "");
Expect(0, 49, '\p{^Numeric_Value=00000000_1}', "");
Expect(0, 49, '\P{Numeric_Value=00000000_1}', "");
Expect(1, 49, '\P{^Numeric_Value=00000000_1}', "");
Expect(0, 48, '\p{Numeric_Value=00000000_1}', "");
Expect(1, 48, '\p{^Numeric_Value=00000000_1}', "");
Expect(1, 48, '\P{Numeric_Value=00000000_1}', "");
Expect(0, 48, '\P{^Numeric_Value=00000000_1}', "");
Error('\p{Nv=_-1:=}');
Error('\P{Nv=_-1:=}');
Expect(1, 49, '\p{Nv=1}', "");
Expect(0, 49, '\p{^Nv=1}', "");
Expect(0, 49, '\P{Nv=1}', "");
Expect(1, 49, '\P{^Nv=1}', "");
Expect(0, 48, '\p{Nv=1}', "");
Expect(1, 48, '\p{^Nv=1}', "");
Expect(1, 48, '\P{Nv=1}', "");
Expect(0, 48, '\P{^Nv=1}', "");
Error('\p{Is_Numeric_Value=	/a/00000000-1}');
Error('\P{Is_Numeric_Value=	/a/00000000-1}');
Expect(1, 49, '\p{Is_Numeric_Value=00_00_00_00_01}', "");
Expect(0, 49, '\p{^Is_Numeric_Value=00_00_00_00_01}', "");
Expect(0, 49, '\P{Is_Numeric_Value=00_00_00_00_01}', "");
Expect(1, 49, '\P{^Is_Numeric_Value=00_00_00_00_01}', "");
Expect(0, 48, '\p{Is_Numeric_Value=00_00_00_00_01}', "");
Expect(1, 48, '\p{^Is_Numeric_Value=00_00_00_00_01}', "");
Expect(1, 48, '\P{Is_Numeric_Value=00_00_00_00_01}', "");
Expect(0, 48, '\P{^Is_Numeric_Value=00_00_00_00_01}', "");
Error('\p{Is_Nv=	-+0_001:=}');
Error('\P{Is_Nv=	-+0_001:=}');
Expect(1, 49, '\p{Is_Nv=00001}', "");
Expect(0, 49, '\p{^Is_Nv=00001}', "");
Expect(0, 49, '\P{Is_Nv=00001}', "");
Expect(1, 49, '\P{^Is_Nv=00001}', "");
Expect(0, 48, '\p{Is_Nv=00001}', "");
Expect(1, 48, '\p{^Is_Nv=00001}', "");
Expect(1, 48, '\P{Is_Nv=00001}', "");
Expect(0, 48, '\P{^Is_Nv=00001}', "");
Error('\p{Numeric_Value=	+6000/a/}');
Error('\P{Numeric_Value=	+6000/a/}');
Expect(1, 65831, '\p{Numeric_Value=000000006000}', "");
Expect(0, 65831, '\p{^Numeric_Value=000000006000}', "");
Expect(0, 65831, '\P{Numeric_Value=000000006000}', "");
Expect(1, 65831, '\P{^Numeric_Value=000000006000}', "");
Expect(0, 65830, '\p{Numeric_Value=000000006000}', "");
Expect(1, 65830, '\p{^Numeric_Value=000000006000}', "");
Expect(1, 65830, '\P{Numeric_Value=000000006000}', "");
Expect(0, 65830, '\P{^Numeric_Value=000000006000}', "");
Error('\p{Nv=- +6_0 00/a/}');
Error('\P{Nv=- +6_0 00/a/}');
Expect(1, 65831, '\p{Nv=0000006000}', "");
Expect(0, 65831, '\p{^Nv=0000006000}', "");
Expect(0, 65831, '\P{Nv=0000006000}', "");
Expect(1, 65831, '\P{^Nv=0000006000}', "");
Expect(0, 65830, '\p{Nv=0000006000}', "");
Expect(1, 65830, '\p{^Nv=0000006000}', "");
Expect(1, 65830, '\P{Nv=0000006000}', "");
Expect(0, 65830, '\P{^Nv=0000006000}', "");
Error('\p{Is_Numeric_Value=-/a/00_0_6	000}');
Error('\P{Is_Numeric_Value=-/a/00_0_6	000}');
Expect(1, 65831, '\p{Is_Numeric_Value=+000000006000}', "");
Expect(0, 65831, '\p{^Is_Numeric_Value=+000000006000}', "");
Expect(0, 65831, '\P{Is_Numeric_Value=+000000006000}', "");
Expect(1, 65831, '\P{^Is_Numeric_Value=+000000006000}', "");
Expect(0, 65830, '\p{Is_Numeric_Value=+000000006000}', "");
Expect(1, 65830, '\p{^Is_Numeric_Value=+000000006000}', "");
Expect(1, 65830, '\P{Is_Numeric_Value=+000000006000}', "");
Expect(0, 65830, '\P{^Is_Numeric_Value=+000000006000}', "");
Error('\p{Is_Nv= -0/a/0-0-0-0	0_06 0 00}');
Error('\P{Is_Nv= -0/a/0-0-0-0	0_06 0 00}');
Expect(1, 65831, '\p{Is_Nv=0_0_6_0_00}', "");
Expect(0, 65831, '\p{^Is_Nv=0_0_6_0_00}', "");
Expect(0, 65831, '\P{Is_Nv=0_0_6_0_00}', "");
Expect(1, 65831, '\P{^Is_Nv=0_0_6_0_00}', "");
Expect(0, 65830, '\p{Is_Nv=0_0_6_0_00}', "");
Expect(1, 65830, '\p{^Is_Nv=0_0_6_0_00}', "");
Expect(1, 65830, '\P{Is_Nv=0_0_6_0_00}', "");
Expect(0, 65830, '\P{^Is_Nv=0_0_6_0_00}', "");
Error('\p{Numeric_Value=:=000030}');
Error('\P{Numeric_Value=:=000030}');
Expect(1, 4980, '\p{Numeric_Value=+003_0}', "");
Expect(0, 4980, '\p{^Numeric_Value=+003_0}', "");
Expect(0, 4980, '\P{Numeric_Value=+003_0}', "");
Expect(1, 4980, '\P{^Numeric_Value=+003_0}', "");
Expect(0, 4979, '\p{Numeric_Value=+003_0}', "");
Expect(1, 4979, '\p{^Numeric_Value=+003_0}', "");
Expect(1, 4979, '\P{Numeric_Value=+003_0}', "");
Expect(0, 4979, '\P{^Numeric_Value=+003_0}', "");
Error('\p{Nv=_/a/+0000030}');
Error('\P{Nv=_/a/+0000030}');
Expect(1, 4980, '\p{Nv=30}', "");
Expect(0, 4980, '\p{^Nv=30}', "");
Expect(0, 4980, '\P{Nv=30}', "");
Expect(1, 4980, '\P{^Nv=30}', "");
Expect(0, 4979, '\p{Nv=30}', "");
Expect(1, 4979, '\p{^Nv=30}', "");
Expect(1, 4979, '\P{Nv=30}', "");
Expect(0, 4979, '\P{^Nv=30}', "");
Error('\p{Is_Numeric_Value: /a/-	0	0 0	0-0 00030}');
Error('\P{Is_Numeric_Value: /a/-	0	0 0	0-0 00030}');
Expect(1, 4980, '\p{Is_Numeric_Value=0000000030}', "");
Expect(0, 4980, '\p{^Is_Numeric_Value=0000000030}', "");
Expect(0, 4980, '\P{Is_Numeric_Value=0000000030}', "");
Expect(1, 4980, '\P{^Is_Numeric_Value=0000000030}', "");
Expect(0, 4979, '\p{Is_Numeric_Value=0000000030}', "");
Expect(1, 4979, '\p{^Is_Numeric_Value=0000000030}', "");
Expect(1, 4979, '\P{Is_Numeric_Value=0000000030}', "");
Expect(0, 4979, '\P{^Is_Numeric_Value=0000000030}', "");
Error('\p{Is_Nv=/a/-+00000000030}');
Error('\P{Is_Nv=/a/-+00000000030}');
Expect(1, 4980, '\p{Is_Nv:   000_000_000_30}', "");
Expect(0, 4980, '\p{^Is_Nv:   000_000_000_30}', "");
Expect(0, 4980, '\P{Is_Nv:   000_000_000_30}', "");
Expect(1, 4980, '\P{^Is_Nv:   000_000_000_30}', "");
Expect(0, 4979, '\p{Is_Nv:   000_000_000_30}', "");
Expect(1, 4979, '\p{^Is_Nv:   000_000_000_30}', "");
Expect(1, 4979, '\P{Is_Nv:   000_000_000_30}', "");
Expect(0, 4979, '\P{^Is_Nv:   000_000_000_30}', "");
Error('\p{Numeric_Value=_+0002/000003/a/}');
Error('\P{Numeric_Value=_+0002/000003/a/}');
Expect(1, 8532, '\p{Numeric_Value=0002/0003}', "");
Expect(0, 8532, '\p{^Numeric_Value=0002/0003}', "");
Expect(0, 8532, '\P{Numeric_Value=0002/0003}', "");
Expect(1, 8532, '\P{^Numeric_Value=0002/0003}', "");
Expect(0, 8531, '\p{Numeric_Value=0002/0003}', "");
Expect(1, 8531, '\p{^Numeric_Value=0002/0003}', "");
Expect(1, 8531, '\P{Numeric_Value=0002/0003}', "");
Expect(0, 8531, '\P{^Numeric_Value=0002/0003}', "");
Error('\p{Numeric_Value=0.7}');
Error('\P{Numeric_Value=0.7}');
Error('\p{Numeric_Value=0.67}');
Error('\P{Numeric_Value=0.67}');
Expect(1, 8532, '\p{Numeric_Value=0.667}', "");
Expect(0, 8532, '\p{^Numeric_Value=0.667}', "");
Expect(0, 8532, '\P{Numeric_Value=0.667}', "");
Expect(1, 8532, '\P{^Numeric_Value=0.667}', "");
Expect(0, 8531, '\p{Numeric_Value=0.667}', "");
Expect(1, 8531, '\p{^Numeric_Value=0.667}', "");
Expect(1, 8531, '\P{Numeric_Value=0.667}', "");
Expect(0, 8531, '\P{^Numeric_Value=0.667}', "");
Error('\p{Nv=-_+0000000002/0003:=}');
Error('\P{Nv=-_+0000000002/0003:=}');
Expect(1, 8532, '\p{Nv:	000000002/03}', "");
Expect(0, 8532, '\p{^Nv:	000000002/03}', "");
Expect(0, 8532, '\P{Nv:	000000002/03}', "");
Expect(1, 8532, '\P{^Nv:	000000002/03}', "");
Expect(0, 8531, '\p{Nv:	000000002/03}', "");
Expect(1, 8531, '\p{^Nv:	000000002/03}', "");
Expect(1, 8531, '\P{Nv:	000000002/03}', "");
Expect(0, 8531, '\P{^Nv:	000000002/03}', "");
Error('\p{Nv=0.7}');
Error('\P{Nv=0.7}');
Error('\p{Nv:   0.67}');
Error('\P{Nv:   0.67}');
Expect(1, 8532, '\p{Nv=0.667}', "");
Expect(0, 8532, '\p{^Nv=0.667}', "");
Expect(0, 8532, '\P{Nv=0.667}', "");
Expect(1, 8532, '\P{^Nv=0.667}', "");
Expect(0, 8531, '\p{Nv=0.667}', "");
Expect(1, 8531, '\p{^Nv=0.667}', "");
Expect(1, 8531, '\P{Nv=0.667}', "");
Expect(0, 8531, '\P{^Nv=0.667}', "");
Error('\p{Is_Numeric_Value=:= _00000002/3}');
Error('\P{Is_Numeric_Value=:= _00000002/3}');
Expect(1, 8532, '\p{Is_Numeric_Value:   +02/000000003}', "");
Expect(0, 8532, '\p{^Is_Numeric_Value:   +02/000000003}', "");
Expect(0, 8532, '\P{Is_Numeric_Value:   +02/000000003}', "");
Expect(1, 8532, '\P{^Is_Numeric_Value:   +02/000000003}', "");
Expect(0, 8531, '\p{Is_Numeric_Value:   +02/000000003}', "");
Expect(1, 8531, '\p{^Is_Numeric_Value:   +02/000000003}', "");
Expect(1, 8531, '\P{Is_Numeric_Value:   +02/000000003}', "");
Expect(0, 8531, '\P{^Is_Numeric_Value:   +02/000000003}', "");
Error('\p{Is_Numeric_Value=0.7}');
Error('\P{Is_Numeric_Value=0.7}');
Error('\p{Is_Numeric_Value=0.67}');
Error('\P{Is_Numeric_Value=0.67}');
Expect(1, 8532, '\p{Is_Numeric_Value=0.667}', "");
Expect(0, 8532, '\p{^Is_Numeric_Value=0.667}', "");
Expect(0, 8532, '\P{Is_Numeric_Value=0.667}', "");
Expect(1, 8532, '\P{^Is_Numeric_Value=0.667}', "");
Expect(0, 8531, '\p{Is_Numeric_Value=0.667}', "");
Expect(1, 8531, '\p{^Is_Numeric_Value=0.667}', "");
Expect(1, 8531, '\P{Is_Numeric_Value=0.667}', "");
Expect(0, 8531, '\P{^Is_Numeric_Value=0.667}', "");
Error('\p{Is_Nv=_:=00000002/3}');
Error('\P{Is_Nv=_:=00000002/3}');
Expect(1, 8532, '\p{Is_Nv=000000002/03}', "");
Expect(0, 8532, '\p{^Is_Nv=000000002/03}', "");
Expect(0, 8532, '\P{Is_Nv=000000002/03}', "");
Expect(1, 8532, '\P{^Is_Nv=000000002/03}', "");
Expect(0, 8531, '\p{Is_Nv=000000002/03}', "");
Expect(1, 8531, '\p{^Is_Nv=000000002/03}', "");
Expect(1, 8531, '\P{Is_Nv=000000002/03}', "");
Expect(0, 8531, '\P{^Is_Nv=000000002/03}', "");
Error('\p{Is_Nv=0.7}');
Error('\P{Is_Nv=0.7}');
Error('\p{Is_Nv=0.67}');
Error('\P{Is_Nv=0.67}');
Expect(1, 8532, '\p{Is_Nv=0.667}', "");
Expect(0, 8532, '\p{^Is_Nv=0.667}', "");
Expect(0, 8532, '\P{Is_Nv=0.667}', "");
Expect(1, 8532, '\P{^Is_Nv=0.667}', "");
Expect(0, 8531, '\p{Is_Nv=0.667}', "");
Expect(1, 8531, '\p{^Is_Nv=0.667}', "");
Expect(1, 8531, '\P{Is_Nv=0.667}', "");
Expect(0, 8531, '\P{^Is_Nv=0.667}', "");
Error('\p{Numeric_Value=_/a/+0000000400	0}');
Error('\P{Numeric_Value=_/a/+0000000400	0}');
Expect(1, 65829, '\p{Numeric_Value=0_0_0_0_0_0_0_004000}', "");
Expect(0, 65829, '\p{^Numeric_Value=0_0_0_0_0_0_0_004000}', "");
Expect(0, 65829, '\P{Numeric_Value=0_0_0_0_0_0_0_004000}', "");
Expect(1, 65829, '\P{^Numeric_Value=0_0_0_0_0_0_0_004000}', "");
Expect(0, 65828, '\p{Numeric_Value=0_0_0_0_0_0_0_004000}', "");
Expect(1, 65828, '\p{^Numeric_Value=0_0_0_0_0_0_0_004000}', "");
Expect(1, 65828, '\P{Numeric_Value=0_0_0_0_0_0_0_004000}', "");
Expect(0, 65828, '\P{^Numeric_Value=0_0_0_0_0_0_0_004000}', "");
Error('\p{Nv=-/a/004000}');
Error('\P{Nv=-/a/004000}');
Expect(1, 65829, '\p{Nv=04000}', "");
Expect(0, 65829, '\p{^Nv=04000}', "");
Expect(0, 65829, '\P{Nv=04000}', "");
Expect(1, 65829, '\P{^Nv=04000}', "");
Expect(0, 65828, '\p{Nv=04000}', "");
Expect(1, 65828, '\p{^Nv=04000}', "");
Expect(1, 65828, '\P{Nv=04000}', "");
Expect(0, 65828, '\P{^Nv=04000}', "");
Error('\p{Is_Numeric_Value=_:=000004000}');
Error('\P{Is_Numeric_Value=_:=000004000}');
Expect(1, 65829, '\p{Is_Numeric_Value=000004000}', "");
Expect(0, 65829, '\p{^Is_Numeric_Value=000004000}', "");
Expect(0, 65829, '\P{Is_Numeric_Value=000004000}', "");
Expect(1, 65829, '\P{^Is_Numeric_Value=000004000}', "");
Expect(0, 65828, '\p{Is_Numeric_Value=000004000}', "");
Expect(1, 65828, '\p{^Is_Numeric_Value=000004000}', "");
Expect(1, 65828, '\P{Is_Numeric_Value=000004000}', "");
Expect(0, 65828, '\P{^Is_Numeric_Value=000004000}', "");
Error('\p{Is_Nv=/a/ 400 0}');
Error('\P{Is_Nv=/a/ 400 0}');
Expect(1, 65829, '\p{Is_Nv=0_4_0_00}', "");
Expect(0, 65829, '\p{^Is_Nv=0_4_0_00}', "");
Expect(0, 65829, '\P{Is_Nv=0_4_0_00}', "");
Expect(1, 65829, '\P{^Is_Nv=0_4_0_00}', "");
Expect(0, 65828, '\p{Is_Nv=0_4_0_00}', "");
Expect(1, 65828, '\p{^Is_Nv=0_4_0_00}', "");
Expect(1, 65828, '\P{Is_Nv=0_4_0_00}', "");
Expect(0, 65828, '\P{^Is_Nv=0_4_0_00}', "");
Error('\p{Numeric_Value=- 00:=00-100}');
Error('\P{Numeric_Value=- 00:=00-100}');
Expect(1, 3057, '\p{Numeric_Value=000100}', "");
Expect(0, 3057, '\p{^Numeric_Value=000100}', "");
Expect(0, 3057, '\P{Numeric_Value=000100}', "");
Expect(1, 3057, '\P{^Numeric_Value=000100}', "");
Expect(0, 3056, '\p{Numeric_Value=000100}', "");
Expect(1, 3056, '\p{^Numeric_Value=000100}', "");
Expect(1, 3056, '\P{Numeric_Value=000100}', "");
Expect(0, 3056, '\P{^Numeric_Value=000100}', "");
Error('\p{Nv=	000-000/a/010 0}');
Error('\P{Nv=	000-000/a/010 0}');
Expect(1, 3057, '\p{Nv=+00000100}', "");
Expect(0, 3057, '\p{^Nv=+00000100}', "");
Expect(0, 3057, '\P{Nv=+00000100}', "");
Expect(1, 3057, '\P{^Nv=+00000100}', "");
Expect(0, 3056, '\p{Nv=+00000100}', "");
Expect(1, 3056, '\p{^Nv=+00000100}', "");
Expect(1, 3056, '\P{Nv=+00000100}', "");
Expect(0, 3056, '\P{^Nv=+00000100}', "");
Error('\p{Is_Numeric_Value=:=--+000100}');
Error('\P{Is_Numeric_Value=:=--+000100}');
Expect(1, 3057, '\p{Is_Numeric_Value=0_0_0_0_0_0_000100}', "");
Expect(0, 3057, '\p{^Is_Numeric_Value=0_0_0_0_0_0_000100}', "");
Expect(0, 3057, '\P{Is_Numeric_Value=0_0_0_0_0_0_000100}', "");
Expect(1, 3057, '\P{^Is_Numeric_Value=0_0_0_0_0_0_000100}', "");
Expect(0, 3056, '\p{Is_Numeric_Value=0_0_0_0_0_0_000100}', "");
Expect(1, 3056, '\p{^Is_Numeric_Value=0_0_0_0_0_0_000100}', "");
Expect(1, 3056, '\P{Is_Numeric_Value=0_0_0_0_0_0_000100}', "");
Expect(0, 3056, '\P{^Is_Numeric_Value=0_0_0_0_0_0_000100}', "");
Error('\p{Is_Nv= /a/+0-0_0_0	0 0100}');
Error('\P{Is_Nv= /a/+0-0_0_0	0 0100}');
Expect(1, 3057, '\p{Is_Nv=100}', "");
Expect(0, 3057, '\p{^Is_Nv=100}', "");
Expect(0, 3057, '\P{Is_Nv=100}', "");
Expect(1, 3057, '\P{^Is_Nv=100}', "");
Expect(0, 3056, '\p{Is_Nv=100}', "");
Expect(1, 3056, '\p{^Is_Nv=100}', "");
Expect(1, 3056, '\P{Is_Nv=100}', "");
Expect(0, 3056, '\P{^Is_Nv=100}', "");
Error('\p{Numeric_Value= +0_0:=00_0 0300}');
Error('\P{Numeric_Value= +0_0:=00_0 0300}');
Expect(1, 65819, '\p{Numeric_Value=0_0_3_00}', "");
Expect(0, 65819, '\p{^Numeric_Value=0_0_3_00}', "");
Expect(0, 65819, '\P{Numeric_Value=0_0_3_00}', "");
Expect(1, 65819, '\P{^Numeric_Value=0_0_3_00}', "");
Expect(0, 65818, '\p{Numeric_Value=0_0_3_00}', "");
Expect(1, 65818, '\p{^Numeric_Value=0_0_3_00}', "");
Expect(1, 65818, '\P{Numeric_Value=0_0_3_00}', "");
Expect(0, 65818, '\P{^Numeric_Value=0_0_3_00}', "");
Error('\p{Nv=_00:=0-0-03 00}');
Error('\P{Nv=_00:=0-0-03 00}');
Expect(1, 65819, '\p{Nv:   300}', "");
Expect(0, 65819, '\p{^Nv:   300}', "");
Expect(0, 65819, '\P{Nv:   300}', "");
Expect(1, 65819, '\P{^Nv:   300}', "");
Expect(0, 65818, '\p{Nv:   300}', "");
Expect(1, 65818, '\p{^Nv:   300}', "");
Expect(1, 65818, '\P{Nv:   300}', "");
Expect(0, 65818, '\P{^Nv:   300}', "");
Error('\p{Is_Numeric_Value=	:=300}');
Error('\P{Is_Numeric_Value=	:=300}');
Expect(1, 65819, '\p{Is_Numeric_Value:	00_00_00_03_00}', "");
Expect(0, 65819, '\p{^Is_Numeric_Value:	00_00_00_03_00}', "");
Expect(0, 65819, '\P{Is_Numeric_Value:	00_00_00_03_00}', "");
Expect(1, 65819, '\P{^Is_Numeric_Value:	00_00_00_03_00}', "");
Expect(0, 65818, '\p{Is_Numeric_Value:	00_00_00_03_00}', "");
Expect(1, 65818, '\p{^Is_Numeric_Value:	00_00_00_03_00}', "");
Expect(1, 65818, '\P{Is_Numeric_Value:	00_00_00_03_00}', "");
Expect(0, 65818, '\P{^Is_Numeric_Value:	00_00_00_03_00}', "");
Error('\p{Is_Nv= /a/000000000300}');
Error('\P{Is_Nv= /a/000000000300}');
Expect(1, 65819, '\p{Is_Nv=00_03_00}', "");
Expect(0, 65819, '\p{^Is_Nv=00_03_00}', "");
Expect(0, 65819, '\P{Is_Nv=00_03_00}', "");
Expect(1, 65819, '\P{^Is_Nv=00_03_00}', "");
Expect(0, 65818, '\p{Is_Nv=00_03_00}', "");
Expect(1, 65818, '\p{^Is_Nv=00_03_00}', "");
Expect(1, 65818, '\P{Is_Nv=00_03_00}', "");
Expect(0, 65818, '\P{^Is_Nv=00_03_00}', "");
Error('\p{Numeric_Value=/a/+0000000001/0000000008}');
Error('\P{Numeric_Value=/a/+0000000001/0000000008}');
Expect(1, 2549, '\p{Numeric_Value=0000000001/8}', "");
Expect(0, 2549, '\p{^Numeric_Value=0000000001/8}', "");
Expect(0, 2549, '\P{Numeric_Value=0000000001/8}', "");
Expect(1, 2549, '\P{^Numeric_Value=0000000001/8}', "");
Expect(0, 2548, '\p{Numeric_Value=0000000001/8}', "");
Expect(1, 2548, '\p{^Numeric_Value=0000000001/8}', "");
Expect(1, 2548, '\P{Numeric_Value=0000000001/8}', "");
Expect(0, 2548, '\P{^Numeric_Value=0000000001/8}', "");
Error('\p{Numeric_Value=0.12}');
Error('\P{Numeric_Value=0.12}');
Expect(1, 2549, '\p{Numeric_Value: 0.125}', "");
Expect(0, 2549, '\p{^Numeric_Value: 0.125}', "");
Expect(0, 2549, '\P{Numeric_Value: 0.125}', "");
Expect(1, 2549, '\P{^Numeric_Value: 0.125}', "");
Expect(0, 2548, '\p{Numeric_Value: 0.125}', "");
Expect(1, 2548, '\p{^Numeric_Value: 0.125}', "");
Expect(1, 2548, '\P{Numeric_Value: 0.125}', "");
Expect(0, 2548, '\P{^Numeric_Value: 0.125}', "");
Error('\p{Nv= :=0001/0000000008}');
Error('\P{Nv= :=0001/0000000008}');
Expect(1, 2549, '\p{Nv=1/00008}', "");
Expect(0, 2549, '\p{^Nv=1/00008}', "");
Expect(0, 2549, '\P{Nv=1/00008}', "");
Expect(1, 2549, '\P{^Nv=1/00008}', "");
Expect(0, 2548, '\p{Nv=1/00008}', "");
Expect(1, 2548, '\p{^Nv=1/00008}', "");
Expect(1, 2548, '\P{Nv=1/00008}', "");
Expect(0, 2548, '\P{^Nv=1/00008}', "");
Error('\p{Nv:0.12}');
Error('\P{Nv:0.12}');
Expect(1, 2549, '\p{Nv=0.125}', "");
Expect(0, 2549, '\p{^Nv=0.125}', "");
Expect(0, 2549, '\P{Nv=0.125}', "");
Expect(1, 2549, '\P{^Nv=0.125}', "");
Expect(0, 2548, '\p{Nv=0.125}', "");
Expect(1, 2548, '\p{^Nv=0.125}', "");
Expect(1, 2548, '\P{Nv=0.125}', "");
Expect(0, 2548, '\P{^Nv=0.125}', "");
Error('\p{Is_Numeric_Value=_:=001/00008}');
Error('\P{Is_Numeric_Value=_:=001/00008}');
Expect(1, 2549, '\p{Is_Numeric_Value=00001/008}', "");
Expect(0, 2549, '\p{^Is_Numeric_Value=00001/008}', "");
Expect(0, 2549, '\P{Is_Numeric_Value=00001/008}', "");
Expect(1, 2549, '\P{^Is_Numeric_Value=00001/008}', "");
Expect(0, 2548, '\p{Is_Numeric_Value=00001/008}', "");
Expect(1, 2548, '\p{^Is_Numeric_Value=00001/008}', "");
Expect(1, 2548, '\P{Is_Numeric_Value=00001/008}', "");
Expect(0, 2548, '\P{^Is_Numeric_Value=00001/008}', "");
Error('\p{Is_Numeric_Value=0.12}');
Error('\P{Is_Numeric_Value=0.12}');
Expect(1, 2549, '\p{Is_Numeric_Value=0.125}', "");
Expect(0, 2549, '\p{^Is_Numeric_Value=0.125}', "");
Expect(0, 2549, '\P{Is_Numeric_Value=0.125}', "");
Expect(1, 2549, '\P{^Is_Numeric_Value=0.125}', "");
Expect(0, 2548, '\p{Is_Numeric_Value=0.125}', "");
Expect(1, 2548, '\p{^Is_Numeric_Value=0.125}', "");
Expect(1, 2548, '\P{Is_Numeric_Value=0.125}', "");
Expect(0, 2548, '\P{^Is_Numeric_Value=0.125}', "");
Error('\p{Is_Nv=_01/8/a/}');
Error('\P{Is_Nv=_01/8/a/}');
Expect(1, 2549, '\p{Is_Nv=000000001/000000008}', "");
Expect(0, 2549, '\p{^Is_Nv=000000001/000000008}', "");
Expect(0, 2549, '\P{Is_Nv=000000001/000000008}', "");
Expect(1, 2549, '\P{^Is_Nv=000000001/000000008}', "");
Expect(0, 2548, '\p{Is_Nv=000000001/000000008}', "");
Expect(1, 2548, '\p{^Is_Nv=000000001/000000008}', "");
Expect(1, 2548, '\P{Is_Nv=000000001/000000008}', "");
Expect(0, 2548, '\P{^Is_Nv=000000001/000000008}', "");
Error('\p{Is_Nv=0.12}');
Error('\P{Is_Nv=0.12}');
Expect(1, 2549, '\p{Is_Nv=0.125}', "");
Expect(0, 2549, '\p{^Is_Nv=0.125}', "");
Expect(0, 2549, '\P{Is_Nv=0.125}', "");
Expect(1, 2549, '\P{^Is_Nv=0.125}', "");
Expect(0, 2548, '\p{Is_Nv=0.125}', "");
Expect(1, 2548, '\p{^Is_Nv=0.125}', "");
Expect(1, 2548, '\P{Is_Nv=0.125}', "");
Expect(0, 2548, '\P{^Is_Nv=0.125}', "");
Error('\p{Numeric_Value=-	00005/0000000006:=}');
Error('\P{Numeric_Value=-	00005/0000000006:=}');
Expect(1, 8538, '\p{Numeric_Value=005/6}', "");
Expect(0, 8538, '\p{^Numeric_Value=005/6}', "");
Expect(0, 8538, '\P{Numeric_Value=005/6}', "");
Expect(1, 8538, '\P{^Numeric_Value=005/6}', "");
Expect(0, 8537, '\p{Numeric_Value=005/6}', "");
Expect(1, 8537, '\p{^Numeric_Value=005/6}', "");
Expect(1, 8537, '\P{Numeric_Value=005/6}', "");
Expect(0, 8537, '\P{^Numeric_Value=005/6}', "");
Error('\p{Numeric_Value=0.83}');
Error('\P{Numeric_Value=0.83}');
Expect(1, 8538, '\p{Numeric_Value=0.833}', "");
Expect(0, 8538, '\p{^Numeric_Value=0.833}', "");
Expect(0, 8538, '\P{Numeric_Value=0.833}', "");
Expect(1, 8538, '\P{^Numeric_Value=0.833}', "");
Expect(0, 8537, '\p{Numeric_Value=0.833}', "");
Expect(1, 8537, '\p{^Numeric_Value=0.833}', "");
Expect(1, 8537, '\P{Numeric_Value=0.833}', "");
Expect(0, 8537, '\P{^Numeric_Value=0.833}', "");
Error('\p{Nv=-_+0000005/00006:=}');
Error('\P{Nv=-_+0000005/00006:=}');
Expect(1, 8538, '\p{Nv=005/6}', "");
Expect(0, 8538, '\p{^Nv=005/6}', "");
Expect(0, 8538, '\P{Nv=005/6}', "");
Expect(1, 8538, '\P{^Nv=005/6}', "");
Expect(0, 8537, '\p{Nv=005/6}', "");
Expect(1, 8537, '\p{^Nv=005/6}', "");
Expect(1, 8537, '\P{Nv=005/6}', "");
Expect(0, 8537, '\P{^Nv=005/6}', "");
Error('\p{Nv=0.83}');
Error('\P{Nv=0.83}');
Expect(1, 8538, '\p{Nv=0.833}', "");
Expect(0, 8538, '\p{^Nv=0.833}', "");
Expect(0, 8538, '\P{Nv=0.833}', "");
Expect(1, 8538, '\P{^Nv=0.833}', "");
Expect(0, 8537, '\p{Nv=0.833}', "");
Expect(1, 8537, '\p{^Nv=0.833}', "");
Expect(1, 8537, '\P{Nv=0.833}', "");
Expect(0, 8537, '\P{^Nv=0.833}', "");
Error('\p{Is_Numeric_Value=-:=0000005/00006}');
Error('\P{Is_Numeric_Value=-:=0000005/00006}');
Expect(1, 8538, '\p{Is_Numeric_Value=+0000000005/006}', "");
Expect(0, 8538, '\p{^Is_Numeric_Value=+0000000005/006}', "");
Expect(0, 8538, '\P{Is_Numeric_Value=+0000000005/006}', "");
Expect(1, 8538, '\P{^Is_Numeric_Value=+0000000005/006}', "");
Expect(0, 8537, '\p{Is_Numeric_Value=+0000000005/006}', "");
Expect(1, 8537, '\p{^Is_Numeric_Value=+0000000005/006}', "");
Expect(1, 8537, '\P{Is_Numeric_Value=+0000000005/006}', "");
Expect(0, 8537, '\P{^Is_Numeric_Value=+0000000005/006}', "");
Error('\p{Is_Numeric_Value=0.83}');
Error('\P{Is_Numeric_Value=0.83}');
Expect(1, 8538, '\p{Is_Numeric_Value=0.833}', "");
Expect(0, 8538, '\p{^Is_Numeric_Value=0.833}', "");
Expect(0, 8538, '\P{Is_Numeric_Value=0.833}', "");
Expect(1, 8538, '\P{^Is_Numeric_Value=0.833}', "");
Expect(0, 8537, '\p{Is_Numeric_Value=0.833}', "");
Expect(1, 8537, '\p{^Is_Numeric_Value=0.833}', "");
Expect(1, 8537, '\P{Is_Numeric_Value=0.833}', "");
Expect(0, 8537, '\P{^Is_Numeric_Value=0.833}', "");
Error('\p{Is_Nv=/a/000000005/000000006}');
Error('\P{Is_Nv=/a/000000005/000000006}');
Expect(1, 8538, '\p{Is_Nv:	005/06}', "");
Expect(0, 8538, '\p{^Is_Nv:	005/06}', "");
Expect(0, 8538, '\P{Is_Nv:	005/06}', "");
Expect(1, 8538, '\P{^Is_Nv:	005/06}', "");
Expect(0, 8537, '\p{Is_Nv:	005/06}', "");
Expect(1, 8537, '\p{^Is_Nv:	005/06}', "");
Expect(1, 8537, '\P{Is_Nv:	005/06}', "");
Expect(0, 8537, '\P{^Is_Nv:	005/06}', "");
Error('\p{Is_Nv:	0.83}');
Error('\P{Is_Nv:	0.83}');
Expect(1, 8538, '\p{Is_Nv:	0.833}', "");
Expect(0, 8538, '\p{^Is_Nv:	0.833}', "");
Expect(0, 8538, '\P{Is_Nv:	0.833}', "");
Expect(1, 8538, '\P{^Is_Nv:	0.833}', "");
Expect(0, 8537, '\p{Is_Nv:	0.833}', "");
Expect(1, 8537, '\p{^Is_Nv:	0.833}', "");
Expect(1, 8537, '\P{Is_Nv:	0.833}', "");
Expect(0, 8537, '\P{^Is_Nv:	0.833}', "");
Error('\p{Numeric_Value=	000000025:=}');
Error('\P{Numeric_Value=	000000025:=}');
Expect(1, 12885, '\p{Numeric_Value=25}', "");
Expect(0, 12885, '\p{^Numeric_Value=25}', "");
Expect(0, 12885, '\P{Numeric_Value=25}', "");
Expect(1, 12885, '\P{^Numeric_Value=25}', "");
Expect(0, 12884, '\p{Numeric_Value=25}', "");
Expect(1, 12884, '\p{^Numeric_Value=25}', "");
Expect(1, 12884, '\P{Numeric_Value=25}', "");
Expect(0, 12884, '\P{^Numeric_Value=25}', "");
Error('\p{Nv=:=+00000025}');
Error('\P{Nv=:=+00000025}');
Expect(1, 12885, '\p{Nv=0_0_0_0_0_0_025}', "");
Expect(0, 12885, '\p{^Nv=0_0_0_0_0_0_025}', "");
Expect(0, 12885, '\P{Nv=0_0_0_0_0_0_025}', "");
Expect(1, 12885, '\P{^Nv=0_0_0_0_0_0_025}', "");
Expect(0, 12884, '\p{Nv=0_0_0_0_0_0_025}', "");
Expect(1, 12884, '\p{^Nv=0_0_0_0_0_0_025}', "");
Expect(1, 12884, '\P{Nv=0_0_0_0_0_0_025}', "");
Expect(0, 12884, '\P{^Nv=0_0_0_0_0_0_025}', "");
Error('\p{Is_Numeric_Value:	_/a/0002_5}');
Error('\P{Is_Numeric_Value:	_/a/0002_5}');
Expect(1, 12885, '\p{Is_Numeric_Value=+0000025}', "");
Expect(0, 12885, '\p{^Is_Numeric_Value=+0000025}', "");
Expect(0, 12885, '\P{Is_Numeric_Value=+0000025}', "");
Expect(1, 12885, '\P{^Is_Numeric_Value=+0000025}', "");
Expect(0, 12884, '\p{Is_Numeric_Value=+0000025}', "");
Expect(1, 12884, '\p{^Is_Numeric_Value=+0000025}', "");
Expect(1, 12884, '\P{Is_Numeric_Value=+0000025}', "");
Expect(0, 12884, '\P{^Is_Numeric_Value=+0000025}', "");
Error('\p{Is_Nv=_-0/a/0 00-025}');
Error('\P{Is_Nv=_-0/a/0 00-025}');
Expect(1, 12885, '\p{Is_Nv=00_00_00_25}', "");
Expect(0, 12885, '\p{^Is_Nv=00_00_00_25}', "");
Expect(0, 12885, '\P{Is_Nv=00_00_00_25}', "");
Expect(1, 12885, '\P{^Is_Nv=00_00_00_25}', "");
Expect(0, 12884, '\p{Is_Nv=00_00_00_25}', "");
Expect(1, 12884, '\p{^Is_Nv=00_00_00_25}', "");
Expect(1, 12884, '\P{Is_Nv=00_00_00_25}', "");
Expect(0, 12884, '\P{^Is_Nv=00_00_00_25}', "");
Error('\p{Numeric_Value=-:=000000028}');
Error('\P{Numeric_Value=-:=000000028}');
Expect(1, 12888, '\p{Numeric_Value:0_0_0_0_0_28}', "");
Expect(0, 12888, '\p{^Numeric_Value:0_0_0_0_0_28}', "");
Expect(0, 12888, '\P{Numeric_Value:0_0_0_0_0_28}', "");
Expect(1, 12888, '\P{^Numeric_Value:0_0_0_0_0_28}', "");
Expect(0, 12887, '\p{Numeric_Value:0_0_0_0_0_28}', "");
Expect(1, 12887, '\p{^Numeric_Value:0_0_0_0_0_28}', "");
Expect(1, 12887, '\P{Numeric_Value:0_0_0_0_0_28}', "");
Expect(0, 12887, '\P{^Numeric_Value:0_0_0_0_0_28}', "");
Error('\p{Nv=	-+00-00/a/00	00-02 8}');
Error('\P{Nv=	-+00-00/a/00	00-02 8}');
Expect(1, 12888, '\p{Nv=0_0_0_0_0_0_0_0_28}', "");
Expect(0, 12888, '\p{^Nv=0_0_0_0_0_0_0_0_28}', "");
Expect(0, 12888, '\P{Nv=0_0_0_0_0_0_0_0_28}', "");
Expect(1, 12888, '\P{^Nv=0_0_0_0_0_0_0_0_28}', "");
Expect(0, 12887, '\p{Nv=0_0_0_0_0_0_0_0_28}', "");
Expect(1, 12887, '\p{^Nv=0_0_0_0_0_0_0_0_28}', "");
Expect(1, 12887, '\P{Nv=0_0_0_0_0_0_0_0_28}', "");
Expect(0, 12887, '\P{^Nv=0_0_0_0_0_0_0_0_28}', "");
Error('\p{Is_Numeric_Value=_:=+2-8}');
Error('\P{Is_Numeric_Value=_:=+2-8}');
Expect(1, 12888, '\p{Is_Numeric_Value: 0000028}', "");
Expect(0, 12888, '\p{^Is_Numeric_Value: 0000028}', "");
Expect(0, 12888, '\P{Is_Numeric_Value: 0000028}', "");
Expect(1, 12888, '\P{^Is_Numeric_Value: 0000028}', "");
Expect(0, 12887, '\p{Is_Numeric_Value: 0000028}', "");
Expect(1, 12887, '\p{^Is_Numeric_Value: 0000028}', "");
Expect(1, 12887, '\P{Is_Numeric_Value: 0000028}', "");
Expect(0, 12887, '\P{^Is_Numeric_Value: 0000028}', "");
Error('\p{Is_Nv= /a/0 0_0-28}');
Error('\P{Is_Nv= /a/0 0_0-28}');
Expect(1, 12888, '\p{Is_Nv=0028}', "");
Expect(0, 12888, '\p{^Is_Nv=0028}', "");
Expect(0, 12888, '\P{Is_Nv=0028}', "");
Expect(1, 12888, '\P{^Is_Nv=0028}', "");
Expect(0, 12887, '\p{Is_Nv=0028}', "");
Expect(1, 12887, '\p{^Is_Nv=0028}', "");
Expect(1, 12887, '\P{Is_Nv=0028}', "");
Expect(0, 12887, '\P{^Is_Nv=0028}', "");
Error('\p{Numeric_Value=_/a/0007/000000002}');
Error('\P{Numeric_Value=_/a/0007/000000002}');
Expect(1, 3885, '\p{Numeric_Value=+07/00000002}', "");
Expect(0, 3885, '\p{^Numeric_Value=+07/00000002}', "");
Expect(0, 3885, '\P{Numeric_Value=+07/00000002}', "");
Expect(1, 3885, '\P{^Numeric_Value=+07/00000002}', "");
Expect(0, 3884, '\p{Numeric_Value=+07/00000002}', "");
Expect(1, 3884, '\p{^Numeric_Value=+07/00000002}', "");
Expect(1, 3884, '\P{Numeric_Value=+07/00000002}', "");
Expect(0, 3884, '\P{^Numeric_Value=+07/00000002}', "");
Expect(1, 3885, '\p{Numeric_Value=3.500}', "");
Expect(0, 3885, '\p{^Numeric_Value=3.500}', "");
Expect(0, 3885, '\P{Numeric_Value=3.500}', "");
Expect(1, 3885, '\P{^Numeric_Value=3.500}', "");
Expect(0, 3884, '\p{Numeric_Value=3.500}', "");
Expect(1, 3884, '\p{^Numeric_Value=3.500}', "");
Expect(1, 3884, '\P{Numeric_Value=3.500}', "");
Expect(0, 3884, '\P{^Numeric_Value=3.500}', "");
Error('\p{Nv=-+00000007/00000002/a/}');
Error('\P{Nv=-+00000007/00000002/a/}');
Expect(1, 3885, '\p{Nv=000007/000000002}', "");
Expect(0, 3885, '\p{^Nv=000007/000000002}', "");
Expect(0, 3885, '\P{Nv=000007/000000002}', "");
Expect(1, 3885, '\P{^Nv=000007/000000002}', "");
Expect(0, 3884, '\p{Nv=000007/000000002}', "");
Expect(1, 3884, '\p{^Nv=000007/000000002}', "");
Expect(1, 3884, '\P{Nv=000007/000000002}', "");
Expect(0, 3884, '\P{^Nv=000007/000000002}', "");
Expect(1, 3885, '\p{Nv=3.500}', "");
Expect(0, 3885, '\p{^Nv=3.500}', "");
Expect(0, 3885, '\P{Nv=3.500}', "");
Expect(1, 3885, '\P{^Nv=3.500}', "");
Expect(0, 3884, '\p{Nv=3.500}', "");
Expect(1, 3884, '\p{^Nv=3.500}', "");
Expect(1, 3884, '\P{Nv=3.500}', "");
Expect(0, 3884, '\P{^Nv=3.500}', "");
Error('\p{Is_Numeric_Value=:=	_+0000000007/000002}');
Error('\P{Is_Numeric_Value=:=	_+0000000007/000002}');
Expect(1, 3885, '\p{Is_Numeric_Value=00007/00002}', "");
Expect(0, 3885, '\p{^Is_Numeric_Value=00007/00002}', "");
Expect(0, 3885, '\P{Is_Numeric_Value=00007/00002}', "");
Expect(1, 3885, '\P{^Is_Numeric_Value=00007/00002}', "");
Expect(0, 3884, '\p{Is_Numeric_Value=00007/00002}', "");
Expect(1, 3884, '\p{^Is_Numeric_Value=00007/00002}', "");
Expect(1, 3884, '\P{Is_Numeric_Value=00007/00002}', "");
Expect(0, 3884, '\P{^Is_Numeric_Value=00007/00002}', "");
Expect(1, 3885, '\p{Is_Numeric_Value=3.500}', "");
Expect(0, 3885, '\p{^Is_Numeric_Value=3.500}', "");
Expect(0, 3885, '\P{Is_Numeric_Value=3.500}', "");
Expect(1, 3885, '\P{^Is_Numeric_Value=3.500}', "");
Expect(0, 3884, '\p{Is_Numeric_Value=3.500}', "");
Expect(1, 3884, '\p{^Is_Numeric_Value=3.500}', "");
Expect(1, 3884, '\P{Is_Numeric_Value=3.500}', "");
Expect(0, 3884, '\P{^Is_Numeric_Value=3.500}', "");
Error('\p{Is_Nv=00000007/00002:=}');
Error('\P{Is_Nv=00000007/00002:=}');
Expect(1, 3885, '\p{Is_Nv=0000007/0000002}', "");
Expect(0, 3885, '\p{^Is_Nv=0000007/0000002}', "");
Expect(0, 3885, '\P{Is_Nv=0000007/0000002}', "");
Expect(1, 3885, '\P{^Is_Nv=0000007/0000002}', "");
Expect(0, 3884, '\p{Is_Nv=0000007/0000002}', "");
Expect(1, 3884, '\p{^Is_Nv=0000007/0000002}', "");
Expect(1, 3884, '\P{Is_Nv=0000007/0000002}', "");
Expect(0, 3884, '\P{^Is_Nv=0000007/0000002}', "");
Expect(1, 3885, '\p{Is_Nv=3.500}', "");
Expect(0, 3885, '\p{^Is_Nv=3.500}', "");
Expect(0, 3885, '\P{Is_Nv=3.500}', "");
Expect(1, 3885, '\P{^Is_Nv=3.500}', "");
Expect(0, 3884, '\p{Is_Nv=3.500}', "");
Expect(1, 3884, '\p{^Is_Nv=3.500}', "");
Expect(1, 3884, '\P{Is_Nv=3.500}', "");
Expect(0, 3884, '\P{^Is_Nv=3.500}', "");
Error('\p{Numeric_Value:   :=- 000000009/02}');
Error('\P{Numeric_Value:   :=- 000000009/02}');
Expect(1, 3886, '\p{Numeric_Value=+000009/000002}', "");
Expect(0, 3886, '\p{^Numeric_Value=+000009/000002}', "");
Expect(0, 3886, '\P{Numeric_Value=+000009/000002}', "");
Expect(1, 3886, '\P{^Numeric_Value=+000009/000002}', "");
Expect(0, 3885, '\p{Numeric_Value=+000009/000002}', "");
Expect(1, 3885, '\p{^Numeric_Value=+000009/000002}', "");
Expect(1, 3885, '\P{Numeric_Value=+000009/000002}', "");
Expect(0, 3885, '\P{^Numeric_Value=+000009/000002}', "");
Expect(1, 3886, '\p{Numeric_Value=4.500}', "");
Expect(0, 3886, '\p{^Numeric_Value=4.500}', "");
Expect(0, 3886, '\P{Numeric_Value=4.500}', "");
Expect(1, 3886, '\P{^Numeric_Value=4.500}', "");
Expect(0, 3885, '\p{Numeric_Value=4.500}', "");
Expect(1, 3885, '\p{^Numeric_Value=4.500}', "");
Expect(1, 3885, '\P{Numeric_Value=4.500}', "");
Expect(0, 3885, '\P{^Numeric_Value=4.500}', "");
Error('\p{Nv= /a/+000009/000002}');
Error('\P{Nv= /a/+000009/000002}');
Expect(1, 3886, '\p{Nv=0000009/0002}', "");
Expect(0, 3886, '\p{^Nv=0000009/0002}', "");
Expect(0, 3886, '\P{Nv=0000009/0002}', "");
Expect(1, 3886, '\P{^Nv=0000009/0002}', "");
Expect(0, 3885, '\p{Nv=0000009/0002}', "");
Expect(1, 3885, '\p{^Nv=0000009/0002}', "");
Expect(1, 3885, '\P{Nv=0000009/0002}', "");
Expect(0, 3885, '\P{^Nv=0000009/0002}', "");
Expect(1, 3886, '\p{Nv=4.500}', "");
Expect(0, 3886, '\p{^Nv=4.500}', "");
Expect(0, 3886, '\P{Nv=4.500}', "");
Expect(1, 3886, '\P{^Nv=4.500}', "");
Expect(0, 3885, '\p{Nv=4.500}', "");
Expect(1, 3885, '\p{^Nv=4.500}', "");
Expect(1, 3885, '\P{Nv=4.500}', "");
Expect(0, 3885, '\P{^Nv=4.500}', "");
Error('\p{Is_Numeric_Value: /a/__+000009/02}');
Error('\P{Is_Numeric_Value: /a/__+000009/02}');
Expect(1, 3886, '\p{Is_Numeric_Value=0000000009/2}', "");
Expect(0, 3886, '\p{^Is_Numeric_Value=0000000009/2}', "");
Expect(0, 3886, '\P{Is_Numeric_Value=0000000009/2}', "");
Expect(1, 3886, '\P{^Is_Numeric_Value=0000000009/2}', "");
Expect(0, 3885, '\p{Is_Numeric_Value=0000000009/2}', "");
Expect(1, 3885, '\p{^Is_Numeric_Value=0000000009/2}', "");
Expect(1, 3885, '\P{Is_Numeric_Value=0000000009/2}', "");
Expect(0, 3885, '\P{^Is_Numeric_Value=0000000009/2}', "");
Expect(1, 3886, '\p{Is_Numeric_Value=4.500}', "");
Expect(0, 3886, '\p{^Is_Numeric_Value=4.500}', "");
Expect(0, 3886, '\P{Is_Numeric_Value=4.500}', "");
Expect(1, 3886, '\P{^Is_Numeric_Value=4.500}', "");
Expect(0, 3885, '\p{Is_Numeric_Value=4.500}', "");
Expect(1, 3885, '\p{^Is_Numeric_Value=4.500}', "");
Expect(1, 3885, '\P{Is_Numeric_Value=4.500}', "");
Expect(0, 3885, '\P{^Is_Numeric_Value=4.500}', "");
Error('\p{Is_Nv: :=-_0000000009/02}');
Error('\P{Is_Nv: :=-_0000000009/02}');
Expect(1, 3886, '\p{Is_Nv=00009/000002}', "");
Expect(0, 3886, '\p{^Is_Nv=00009/000002}', "");
Expect(0, 3886, '\P{Is_Nv=00009/000002}', "");
Expect(1, 3886, '\P{^Is_Nv=00009/000002}', "");
Expect(0, 3885, '\p{Is_Nv=00009/000002}', "");
Expect(1, 3885, '\p{^Is_Nv=00009/000002}', "");
Expect(1, 3885, '\P{Is_Nv=00009/000002}', "");
Expect(0, 3885, '\P{^Is_Nv=00009/000002}', "");
Expect(1, 3886, '\p{Is_Nv:4.500}', "");
Expect(0, 3886, '\p{^Is_Nv:4.500}', "");
Expect(0, 3886, '\P{Is_Nv:4.500}', "");
Expect(1, 3886, '\P{^Is_Nv:4.500}', "");
Expect(0, 3885, '\p{Is_Nv:4.500}', "");
Expect(1, 3885, '\p{^Is_Nv:4.500}', "");
Expect(1, 3885, '\P{Is_Nv:4.500}', "");
Expect(0, 3885, '\P{^Is_Nv:4.500}', "");
Error('\p{Numeric_Value=/a/- +00000000040}');
Error('\P{Numeric_Value=/a/- +00000000040}');
Expect(1, 4981, '\p{Numeric_Value=+0000040}', "");
Expect(0, 4981, '\p{^Numeric_Value=+0000040}', "");
Expect(0, 4981, '\P{Numeric_Value=+0000040}', "");
Expect(1, 4981, '\P{^Numeric_Value=+0000040}', "");
Expect(0, 4980, '\p{Numeric_Value=+0000040}', "");
Expect(1, 4980, '\p{^Numeric_Value=+0000040}', "");
Expect(1, 4980, '\P{Numeric_Value=+0000040}', "");
Expect(0, 4980, '\P{^Numeric_Value=+0000040}', "");
Error('\p{Nv=__0000000004_0/a/}');
Error('\P{Nv=__0000000004_0/a/}');
Expect(1, 4981, '\p{Nv=00040}', "");
Expect(0, 4981, '\p{^Nv=00040}', "");
Expect(0, 4981, '\P{Nv=00040}', "");
Expect(1, 4981, '\P{^Nv=00040}', "");
Expect(0, 4980, '\p{Nv=00040}', "");
Expect(1, 4980, '\p{^Nv=00040}', "");
Expect(1, 4980, '\P{Nv=00040}', "");
Expect(0, 4980, '\P{^Nv=00040}', "");
Error('\p{Is_Numeric_Value=:=	_00000040}');
Error('\P{Is_Numeric_Value=:=	_00000040}');
Expect(1, 4981, '\p{Is_Numeric_Value: +00_04_0}', "");
Expect(0, 4981, '\p{^Is_Numeric_Value: +00_04_0}', "");
Expect(0, 4981, '\P{Is_Numeric_Value: +00_04_0}', "");
Expect(1, 4981, '\P{^Is_Numeric_Value: +00_04_0}', "");
Expect(0, 4980, '\p{Is_Numeric_Value: +00_04_0}', "");
Expect(1, 4980, '\p{^Is_Numeric_Value: +00_04_0}', "");
Expect(1, 4980, '\P{Is_Numeric_Value: +00_04_0}', "");
Expect(0, 4980, '\P{^Is_Numeric_Value: +00_04_0}', "");
Error('\p{Is_Nv=:=00 00	04-0}');
Error('\P{Is_Nv=:=00 00	04-0}');
Expect(1, 4981, '\p{Is_Nv=000040}', "");
Expect(0, 4981, '\p{^Is_Nv=000040}', "");
Expect(0, 4981, '\P{Is_Nv=000040}', "");
Expect(1, 4981, '\P{^Is_Nv=000040}', "");
Expect(0, 4980, '\p{Is_Nv=000040}', "");
Expect(1, 4980, '\p{^Is_Nv=000040}', "");
Expect(1, 4980, '\P{Is_Nv=000040}', "");
Expect(0, 4980, '\P{^Is_Nv=000040}', "");
Error('\p{Numeric_Value=/a/000003_00	0}');
Error('\P{Numeric_Value=/a/000003_00	0}');
Expect(1, 65828, '\p{Numeric_Value=+0_0_0_0_0_0_0_03000}', "");
Expect(0, 65828, '\p{^Numeric_Value=+0_0_0_0_0_0_0_03000}', "");
Expect(0, 65828, '\P{Numeric_Value=+0_0_0_0_0_0_0_03000}', "");
Expect(1, 65828, '\P{^Numeric_Value=+0_0_0_0_0_0_0_03000}', "");
Expect(0, 65827, '\p{Numeric_Value=+0_0_0_0_0_0_0_03000}', "");
Expect(1, 65827, '\p{^Numeric_Value=+0_0_0_0_0_0_0_03000}', "");
Expect(1, 65827, '\P{Numeric_Value=+0_0_0_0_0_0_0_03000}', "");
Expect(0, 65827, '\P{^Numeric_Value=+0_0_0_0_0_0_0_03000}', "");
Error('\p{Nv=_/a/+0 0-3 000}');
Error('\P{Nv=_/a/+0 0-3 000}');
Expect(1, 65828, '\p{Nv=00300_0}', "");
Expect(0, 65828, '\p{^Nv=00300_0}', "");
Expect(0, 65828, '\P{Nv=00300_0}', "");
Expect(1, 65828, '\P{^Nv=00300_0}', "");
Expect(0, 65827, '\p{Nv=00300_0}', "");
Expect(1, 65827, '\p{^Nv=00300_0}', "");
Expect(1, 65827, '\P{Nv=00300_0}', "");
Expect(0, 65827, '\P{^Nv=00300_0}', "");
Error('\p{Is_Numeric_Value= +0000003000/a/}');
Error('\P{Is_Numeric_Value= +0000003000/a/}');
Expect(1, 65828, '\p{Is_Numeric_Value=000000003000}', "");
Expect(0, 65828, '\p{^Is_Numeric_Value=000000003000}', "");
Expect(0, 65828, '\P{Is_Numeric_Value=000000003000}', "");
Expect(1, 65828, '\P{^Is_Numeric_Value=000000003000}', "");
Expect(0, 65827, '\p{Is_Numeric_Value=000000003000}', "");
Expect(1, 65827, '\p{^Is_Numeric_Value=000000003000}', "");
Expect(1, 65827, '\P{Is_Numeric_Value=000000003000}', "");
Expect(0, 65827, '\P{^Is_Numeric_Value=000000003000}', "");
Error('\p{Is_Nv=:= 003000}');
Error('\P{Is_Nv=:= 003000}');
Expect(1, 65828, '\p{Is_Nv=03000}', "");
Expect(0, 65828, '\p{^Is_Nv=03000}', "");
Expect(0, 65828, '\P{Is_Nv=03000}', "");
Expect(1, 65828, '\P{^Is_Nv=03000}', "");
Expect(0, 65827, '\p{Is_Nv=03000}', "");
Expect(1, 65827, '\p{^Is_Nv=03000}', "");
Expect(1, 65827, '\P{Is_Nv=03000}', "");
Expect(0, 65827, '\P{^Is_Nv=03000}', "");
Error('\p{Numeric_Value=	00800/a/}');
Error('\P{Numeric_Value=	00800/a/}');
Expect(1, 65824, '\p{Numeric_Value:   0000000800}', "");
Expect(0, 65824, '\p{^Numeric_Value:   0000000800}', "");
Expect(0, 65824, '\P{Numeric_Value:   0000000800}', "");
Expect(1, 65824, '\P{^Numeric_Value:   0000000800}', "");
Expect(0, 65823, '\p{Numeric_Value:   0000000800}', "");
Expect(1, 65823, '\p{^Numeric_Value:   0000000800}', "");
Expect(1, 65823, '\P{Numeric_Value:   0000000800}', "");
Expect(0, 65823, '\P{^Numeric_Value:   0000000800}', "");
Error('\p{Nv=:=		+00000000800}');
Error('\P{Nv=:=		+00000000800}');
Expect(1, 65824, '\p{Nv=0_0_0_0_0_0_0_00800}', "");
Expect(0, 65824, '\p{^Nv=0_0_0_0_0_0_0_00800}', "");
Expect(0, 65824, '\P{Nv=0_0_0_0_0_0_0_00800}', "");
Expect(1, 65824, '\P{^Nv=0_0_0_0_0_0_0_00800}', "");
Expect(0, 65823, '\p{Nv=0_0_0_0_0_0_0_00800}', "");
Expect(1, 65823, '\p{^Nv=0_0_0_0_0_0_0_00800}', "");
Expect(1, 65823, '\P{Nv=0_0_0_0_0_0_0_00800}', "");
Expect(0, 65823, '\P{^Nv=0_0_0_0_0_0_0_00800}', "");
Error('\p{Is_Numeric_Value=	000000008-00/a/}');
Error('\P{Is_Numeric_Value=	000000008-00/a/}');
Expect(1, 65824, '\p{Is_Numeric_Value=00000800}', "");
Expect(0, 65824, '\p{^Is_Numeric_Value=00000800}', "");
Expect(0, 65824, '\P{Is_Numeric_Value=00000800}', "");
Expect(1, 65824, '\P{^Is_Numeric_Value=00000800}', "");
Expect(0, 65823, '\p{Is_Numeric_Value=00000800}', "");
Expect(1, 65823, '\p{^Is_Numeric_Value=00000800}', "");
Expect(1, 65823, '\P{Is_Numeric_Value=00000800}', "");
Expect(0, 65823, '\P{^Is_Numeric_Value=00000800}', "");
Error('\p{Is_Nv=	0800/a/}');
Error('\P{Is_Nv=	0800/a/}');
Expect(1, 65824, '\p{Is_Nv=0000000800}', "");
Expect(0, 65824, '\p{^Is_Nv=0000000800}', "");
Expect(0, 65824, '\P{Is_Nv=0000000800}', "");
Expect(1, 65824, '\P{^Is_Nv=0000000800}', "");
Expect(0, 65823, '\p{Is_Nv=0000000800}', "");
Expect(1, 65823, '\p{^Is_Nv=0000000800}', "");
Expect(1, 65823, '\P{Is_Nv=0000000800}', "");
Expect(0, 65823, '\P{^Is_Nv=0000000800}', "");
Error('\p{Numeric_Value=	:=+9_0-00}');
Error('\P{Numeric_Value=	:=+9_0-00}');
Expect(1, 65834, '\p{Numeric_Value=000000900_0}', "");
Expect(0, 65834, '\p{^Numeric_Value=000000900_0}', "");
Expect(0, 65834, '\P{Numeric_Value=000000900_0}', "");
Expect(1, 65834, '\P{^Numeric_Value=000000900_0}', "");
Expect(0, 65833, '\p{Numeric_Value=000000900_0}', "");
Expect(1, 65833, '\p{^Numeric_Value=000000900_0}', "");
Expect(1, 65833, '\P{Numeric_Value=000000900_0}', "");
Expect(0, 65833, '\P{^Numeric_Value=000000900_0}', "");
Error('\p{Nv:	/a/	_00009000}');
Error('\P{Nv:	/a/	_00009000}');
Expect(1, 65834, '\p{Nv=000900_0}', "");
Expect(0, 65834, '\p{^Nv=000900_0}', "");
Expect(0, 65834, '\P{Nv=000900_0}', "");
Expect(1, 65834, '\P{^Nv=000900_0}', "");
Expect(0, 65833, '\p{Nv=000900_0}', "");
Expect(1, 65833, '\p{^Nv=000900_0}', "");
Expect(1, 65833, '\P{Nv=000900_0}', "");
Expect(0, 65833, '\P{^Nv=000900_0}', "");
Error('\p{Is_Numeric_Value= -+00009000:=}');
Error('\P{Is_Numeric_Value= -+00009000:=}');
Expect(1, 65834, '\p{Is_Numeric_Value=00_00_00_90_00}', "");
Expect(0, 65834, '\p{^Is_Numeric_Value=00_00_00_90_00}', "");
Expect(0, 65834, '\P{Is_Numeric_Value=00_00_00_90_00}', "");
Expect(1, 65834, '\P{^Is_Numeric_Value=00_00_00_90_00}', "");
Expect(0, 65833, '\p{Is_Numeric_Value=00_00_00_90_00}', "");
Expect(1, 65833, '\p{^Is_Numeric_Value=00_00_00_90_00}', "");
Expect(1, 65833, '\P{Is_Numeric_Value=00_00_00_90_00}', "");
Expect(0, 65833, '\P{^Is_Numeric_Value=00_00_00_90_00}', "");
Error('\p{Is_Nv=:=0	00	00	0_0_0_09000}');
Error('\P{Is_Nv=:=0	00	00	0_0_0_09000}');
Expect(1, 65834, '\p{Is_Nv=+00009000}', "");
Expect(0, 65834, '\p{^Is_Nv=+00009000}', "");
Expect(0, 65834, '\P{Is_Nv=+00009000}', "");
Expect(1, 65834, '\P{^Is_Nv=+00009000}', "");
Expect(0, 65833, '\p{Is_Nv=+00009000}', "");
Expect(1, 65833, '\p{^Is_Nv=+00009000}', "");
Expect(1, 65833, '\P{Is_Nv=+00009000}', "");
Expect(0, 65833, '\P{^Is_Nv=+00009000}', "");
Error('\p{Numeric_Value= -14/a/}');
Error('\P{Numeric_Value= -14/a/}');
Expect(1, 9325, '\p{Numeric_Value=1_4}', "");
Expect(0, 9325, '\p{^Numeric_Value=1_4}', "");
Expect(0, 9325, '\P{Numeric_Value=1_4}', "");
Expect(1, 9325, '\P{^Numeric_Value=1_4}', "");
Expect(0, 9324, '\p{Numeric_Value=1_4}', "");
Expect(1, 9324, '\p{^Numeric_Value=1_4}', "");
Expect(1, 9324, '\P{Numeric_Value=1_4}', "");
Expect(0, 9324, '\P{^Numeric_Value=1_4}', "");
Error('\p{Nv=	/a/+0	0 0	00	0	0_014}');
Error('\P{Nv=	/a/+0	0 0	00	0	0_014}');
Expect(1, 9325, '\p{Nv=00_00_14}', "");
Expect(0, 9325, '\p{^Nv=00_00_14}', "");
Expect(0, 9325, '\P{Nv=00_00_14}', "");
Expect(1, 9325, '\P{^Nv=00_00_14}', "");
Expect(0, 9324, '\p{Nv=00_00_14}', "");
Expect(1, 9324, '\p{^Nv=00_00_14}', "");
Expect(1, 9324, '\P{Nv=00_00_14}', "");
Expect(0, 9324, '\P{^Nv=00_00_14}', "");
Error('\p{Is_Numeric_Value=	+1	4:=}');
Error('\P{Is_Numeric_Value=	+1	4:=}');
Expect(1, 9325, '\p{Is_Numeric_Value=00000014}', "");
Expect(0, 9325, '\p{^Is_Numeric_Value=00000014}', "");
Expect(0, 9325, '\P{Is_Numeric_Value=00000014}', "");
Expect(1, 9325, '\P{^Is_Numeric_Value=00000014}', "");
Expect(0, 9324, '\p{Is_Numeric_Value=00000014}', "");
Expect(1, 9324, '\p{^Is_Numeric_Value=00000014}', "");
Expect(1, 9324, '\P{Is_Numeric_Value=00000014}', "");
Expect(0, 9324, '\P{^Is_Numeric_Value=00000014}', "");
Error('\p{Is_Nv=	-000001 4:=}');
Error('\P{Is_Nv=	-000001 4:=}');
Expect(1, 9325, '\p{Is_Nv: 00_00_00_00_014}', "");
Expect(0, 9325, '\p{^Is_Nv: 00_00_00_00_014}', "");
Expect(0, 9325, '\P{Is_Nv: 00_00_00_00_014}', "");
Expect(1, 9325, '\P{^Is_Nv: 00_00_00_00_014}', "");
Expect(0, 9324, '\p{Is_Nv: 00_00_00_00_014}', "");
Expect(1, 9324, '\p{^Is_Nv: 00_00_00_00_014}', "");
Expect(1, 9324, '\P{Is_Nv: 00_00_00_00_014}', "");
Expect(0, 9324, '\P{^Is_Nv: 00_00_00_00_014}', "");
Error('\p{Numeric_Value= 	0060000/a/}');
Error('\P{Numeric_Value= 	0060000/a/}');
Expect(1, 65840, '\p{Numeric_Value=00060000}', "");
Expect(0, 65840, '\p{^Numeric_Value=00060000}', "");
Expect(0, 65840, '\P{Numeric_Value=00060000}', "");
Expect(1, 65840, '\P{^Numeric_Value=00060000}', "");
Expect(0, 65839, '\p{Numeric_Value=00060000}', "");
Expect(1, 65839, '\p{^Numeric_Value=00060000}', "");
Expect(1, 65839, '\P{Numeric_Value=00060000}', "");
Expect(0, 65839, '\P{^Numeric_Value=00060000}', "");
Error('\p{Nv=-/a/+60000}');
Error('\P{Nv=-/a/+60000}');
Expect(1, 65840, '\p{Nv=00_00_00_00_06_00_00}', "");
Expect(0, 65840, '\p{^Nv=00_00_00_00_06_00_00}', "");
Expect(0, 65840, '\P{Nv=00_00_00_00_06_00_00}', "");
Expect(1, 65840, '\P{^Nv=00_00_00_00_06_00_00}', "");
Expect(0, 65839, '\p{Nv=00_00_00_00_06_00_00}', "");
Expect(1, 65839, '\p{^Nv=00_00_00_00_06_00_00}', "");
Expect(1, 65839, '\P{Nv=00_00_00_00_06_00_00}', "");
Expect(0, 65839, '\P{^Nv=00_00_00_00_06_00_00}', "");
Error('\p{Is_Numeric_Value=:=- 060000}');
Error('\P{Is_Numeric_Value=:=- 060000}');
Expect(1, 65840, '\p{Is_Numeric_Value=0_0_0_0_0_0_0_0_0_6_0_0_00}', "");
Expect(0, 65840, '\p{^Is_Numeric_Value=0_0_0_0_0_0_0_0_0_6_0_0_00}', "");
Expect(0, 65840, '\P{Is_Numeric_Value=0_0_0_0_0_0_0_0_0_6_0_0_00}', "");
Expect(1, 65840, '\P{^Is_Numeric_Value=0_0_0_0_0_0_0_0_0_6_0_0_00}', "");
Expect(0, 65839, '\p{Is_Numeric_Value=0_0_0_0_0_0_0_0_0_6_0_0_00}', "");
Expect(1, 65839, '\p{^Is_Numeric_Value=0_0_0_0_0_0_0_0_0_6_0_0_00}', "");
Expect(1, 65839, '\P{Is_Numeric_Value=0_0_0_0_0_0_0_0_0_6_0_0_00}', "");
Expect(0, 65839, '\P{^Is_Numeric_Value=0_0_0_0_0_0_0_0_0_6_0_0_00}', "");
Error('\p{Is_Nv= /a/000060000}');
Error('\P{Is_Nv= /a/000060000}');
Expect(1, 65840, '\p{Is_Nv=0006000_0}', "");
Expect(0, 65840, '\p{^Is_Nv=0006000_0}', "");
Expect(0, 65840, '\P{Is_Nv=0006000_0}', "");
Expect(1, 65840, '\P{^Is_Nv=0006000_0}', "");
Expect(0, 65839, '\p{Is_Nv=0006000_0}', "");
Expect(1, 65839, '\p{^Is_Nv=0006000_0}', "");
Expect(1, 65839, '\P{Is_Nv=0006000_0}', "");
Expect(0, 65839, '\P{^Is_Nv=0006000_0}', "");
Error('\p{Numeric_Value=/a/+0049}');
Error('\P{Numeric_Value=/a/+0049}');
Expect(1, 12990, '\p{Numeric_Value=+0049}', "");
Expect(0, 12990, '\p{^Numeric_Value=+0049}', "");
Expect(0, 12990, '\P{Numeric_Value=+0049}', "");
Expect(1, 12990, '\P{^Numeric_Value=+0049}', "");
Expect(0, 12989, '\p{Numeric_Value=+0049}', "");
Expect(1, 12989, '\p{^Numeric_Value=+0049}', "");
Expect(1, 12989, '\P{Numeric_Value=+0049}', "");
Expect(0, 12989, '\P{^Numeric_Value=+0049}', "");
Error('\p{Nv=	 00000049:=}');
Error('\P{Nv=	 00000049:=}');
Expect(1, 12990, '\p{Nv=0000000049}', "");
Expect(0, 12990, '\p{^Nv=0000000049}', "");
Expect(0, 12990, '\P{Nv=0000000049}', "");
Expect(1, 12990, '\P{^Nv=0000000049}', "");
Expect(0, 12989, '\p{Nv=0000000049}', "");
Expect(1, 12989, '\p{^Nv=0000000049}', "");
Expect(1, 12989, '\P{Nv=0000000049}', "");
Expect(0, 12989, '\P{^Nv=0000000049}', "");
Error('\p{Is_Numeric_Value: /a/0000-04-9}');
Error('\P{Is_Numeric_Value: /a/0000-04-9}');
Expect(1, 12990, '\p{Is_Numeric_Value=00000000049}', "");
Expect(0, 12990, '\p{^Is_Numeric_Value=00000000049}', "");
Expect(0, 12990, '\P{Is_Numeric_Value=00000000049}', "");
Expect(1, 12990, '\P{^Is_Numeric_Value=00000000049}', "");
Expect(0, 12989, '\p{Is_Numeric_Value=00000000049}', "");
Expect(1, 12989, '\p{^Is_Numeric_Value=00000000049}', "");
Expect(1, 12989, '\P{Is_Numeric_Value=00000000049}', "");
Expect(0, 12989, '\P{^Is_Numeric_Value=00000000049}', "");
Error('\p{Is_Nv=_/a/00000000049}');
Error('\P{Is_Nv=_/a/00000000049}');
Expect(1, 12990, '\p{Is_Nv=0000000049}', "");
Expect(0, 12990, '\p{^Is_Nv=0000000049}', "");
Expect(0, 12990, '\P{Is_Nv=0000000049}', "");
Expect(1, 12990, '\P{^Is_Nv=0000000049}', "");
Expect(0, 12989, '\p{Is_Nv=0000000049}', "");
Expect(1, 12989, '\p{^Is_Nv=0000000049}', "");
Expect(1, 12989, '\P{Is_Nv=0000000049}', "");
Expect(0, 12989, '\P{^Is_Nv=0000000049}', "");
Error('\p{Numeric_Value=_-+0 0/a/0_24}');
Error('\P{Numeric_Value=_-+0 0/a/0_24}');
Expect(1, 12884, '\p{Numeric_Value=0000000024}', "");
Expect(0, 12884, '\p{^Numeric_Value=0000000024}', "");
Expect(0, 12884, '\P{Numeric_Value=0000000024}', "");
Expect(1, 12884, '\P{^Numeric_Value=0000000024}', "");
Expect(0, 12883, '\p{Numeric_Value=0000000024}', "");
Expect(1, 12883, '\p{^Numeric_Value=0000000024}', "");
Expect(1, 12883, '\P{Numeric_Value=0000000024}', "");
Expect(0, 12883, '\P{^Numeric_Value=0000000024}', "");
Error('\p{Nv=/a/_-+000024}');
Error('\P{Nv=/a/_-+000024}');
Expect(1, 12884, '\p{Nv=0000000024}', "");
Expect(0, 12884, '\p{^Nv=0000000024}', "");
Expect(0, 12884, '\P{Nv=0000000024}', "");
Expect(1, 12884, '\P{^Nv=0000000024}', "");
Expect(0, 12883, '\p{Nv=0000000024}', "");
Expect(1, 12883, '\p{^Nv=0000000024}', "");
Expect(1, 12883, '\P{Nv=0000000024}', "");
Expect(0, 12883, '\P{^Nv=0000000024}', "");
Error('\p{Is_Numeric_Value=_/a/+000024}');
Error('\P{Is_Numeric_Value=_/a/+000024}');
Expect(1, 12884, '\p{Is_Numeric_Value:000024}', "");
Expect(0, 12884, '\p{^Is_Numeric_Value:000024}', "");
Expect(0, 12884, '\P{Is_Numeric_Value:000024}', "");
Expect(1, 12884, '\P{^Is_Numeric_Value:000024}', "");
Expect(0, 12883, '\p{Is_Numeric_Value:000024}', "");
Expect(1, 12883, '\p{^Is_Numeric_Value:000024}', "");
Expect(1, 12883, '\P{Is_Numeric_Value:000024}', "");
Expect(0, 12883, '\P{^Is_Numeric_Value:000024}', "");
Error('\p{Is_Nv=	/a/+00000-0024}');
Error('\P{Is_Nv=	/a/+00000-0024}');
Expect(1, 12884, '\p{Is_Nv:	0002_4}', "");
Expect(0, 12884, '\p{^Is_Nv:	0002_4}', "");
Expect(0, 12884, '\P{Is_Nv:	0002_4}', "");
Expect(1, 12884, '\P{^Is_Nv:	0002_4}', "");
Expect(0, 12883, '\p{Is_Nv:	0002_4}', "");
Expect(1, 12883, '\p{^Is_Nv:	0002_4}', "");
Expect(1, 12883, '\P{Is_Nv:	0002_4}', "");
Expect(0, 12883, '\P{^Is_Nv:	0002_4}', "");
Error('\p{Numeric_Value=/a/	_+0000001/000004}');
Error('\P{Numeric_Value=/a/	_+0000001/000004}');
Expect(1, 188, '\p{Numeric_Value=0000001/004}', "");
Expect(0, 188, '\p{^Numeric_Value=0000001/004}', "");
Expect(0, 188, '\P{Numeric_Value=0000001/004}', "");
Expect(1, 188, '\P{^Numeric_Value=0000001/004}', "");
Expect(0, 187, '\p{Numeric_Value=0000001/004}', "");
Expect(1, 187, '\p{^Numeric_Value=0000001/004}', "");
Expect(1, 187, '\P{Numeric_Value=0000001/004}', "");
Expect(0, 187, '\P{^Numeric_Value=0000001/004}', "");
Expect(1, 188, '\p{Numeric_Value=0.250}', "");
Expect(0, 188, '\p{^Numeric_Value=0.250}', "");
Expect(0, 188, '\P{Numeric_Value=0.250}', "");
Expect(1, 188, '\P{^Numeric_Value=0.250}', "");
Expect(0, 187, '\p{Numeric_Value=0.250}', "");
Expect(1, 187, '\p{^Numeric_Value=0.250}', "");
Expect(1, 187, '\P{Numeric_Value=0.250}', "");
Expect(0, 187, '\P{^Numeric_Value=0.250}', "");
Error('\p{Nv= /a/0001/0000004}');
Error('\P{Nv= /a/0001/0000004}');
Expect(1, 188, '\p{Nv=00001/0000000004}', "");
Expect(0, 188, '\p{^Nv=00001/0000000004}', "");
Expect(0, 188, '\P{Nv=00001/0000000004}', "");
Expect(1, 188, '\P{^Nv=00001/0000000004}', "");
Expect(0, 187, '\p{Nv=00001/0000000004}', "");
Expect(1, 187, '\p{^Nv=00001/0000000004}', "");
Expect(1, 187, '\P{Nv=00001/0000000004}', "");
Expect(0, 187, '\P{^Nv=00001/0000000004}', "");
Expect(1, 188, '\p{Nv=0.250}', "");
Expect(0, 188, '\p{^Nv=0.250}', "");
Expect(0, 188, '\P{Nv=0.250}', "");
Expect(1, 188, '\P{^Nv=0.250}', "");
Expect(0, 187, '\p{Nv=0.250}', "");
Expect(1, 187, '\p{^Nv=0.250}', "");
Expect(1, 187, '\P{Nv=0.250}', "");
Expect(0, 187, '\P{^Nv=0.250}', "");
Error('\p{Is_Numeric_Value= /a/000001/04}');
Error('\P{Is_Numeric_Value= /a/000001/04}');
Expect(1, 188, '\p{Is_Numeric_Value=01/000000004}', "");
Expect(0, 188, '\p{^Is_Numeric_Value=01/000000004}', "");
Expect(0, 188, '\P{Is_Numeric_Value=01/000000004}', "");
Expect(1, 188, '\P{^Is_Numeric_Value=01/000000004}', "");
Expect(0, 187, '\p{Is_Numeric_Value=01/000000004}', "");
Expect(1, 187, '\p{^Is_Numeric_Value=01/000000004}', "");
Expect(1, 187, '\P{Is_Numeric_Value=01/000000004}', "");
Expect(0, 187, '\P{^Is_Numeric_Value=01/000000004}', "");
Expect(1, 188, '\p{Is_Numeric_Value: 0.250}', "");
Expect(0, 188, '\p{^Is_Numeric_Value: 0.250}', "");
Expect(0, 188, '\P{Is_Numeric_Value: 0.250}', "");
Expect(1, 188, '\P{^Is_Numeric_Value: 0.250}', "");
Expect(0, 187, '\p{Is_Numeric_Value: 0.250}', "");
Expect(1, 187, '\p{^Is_Numeric_Value: 0.250}', "");
Expect(1, 187, '\P{Is_Numeric_Value: 0.250}', "");
Expect(0, 187, '\P{^Is_Numeric_Value: 0.250}', "");
Error('\p{Is_Nv:	-	0000000001/00000004:=}');
Error('\P{Is_Nv:	-	0000000001/00000004:=}');
Expect(1, 188, '\p{Is_Nv=+0001/000004}', "");
Expect(0, 188, '\p{^Is_Nv=+0001/000004}', "");
Expect(0, 188, '\P{Is_Nv=+0001/000004}', "");
Expect(1, 188, '\P{^Is_Nv=+0001/000004}', "");
Expect(0, 187, '\p{Is_Nv=+0001/000004}', "");
Expect(1, 187, '\p{^Is_Nv=+0001/000004}', "");
Expect(1, 187, '\P{Is_Nv=+0001/000004}', "");
Expect(0, 187, '\P{^Is_Nv=+0001/000004}', "");
Expect(1, 188, '\p{Is_Nv=0.250}', "");
Expect(0, 188, '\p{^Is_Nv=0.250}', "");
Expect(0, 188, '\P{Is_Nv=0.250}', "");
Expect(1, 188, '\P{^Is_Nv=0.250}', "");
Expect(0, 187, '\p{Is_Nv=0.250}', "");
Expect(1, 187, '\p{^Is_Nv=0.250}', "");
Expect(1, 187, '\P{Is_Nv=0.250}', "");
Expect(0, 187, '\P{^Is_Nv=0.250}', "");
Error('\p{Numeric_Value=_ 090000:=}');
Error('\P{Numeric_Value=_ 090000:=}');
Expect(1, 65843, '\p{Numeric_Value=000090000}', "");
Expect(0, 65843, '\p{^Numeric_Value=000090000}', "");
Expect(0, 65843, '\P{Numeric_Value=000090000}', "");
Expect(1, 65843, '\P{^Numeric_Value=000090000}', "");
Expect(0, 65842, '\p{Numeric_Value=000090000}', "");
Expect(1, 65842, '\p{^Numeric_Value=000090000}', "");
Expect(1, 65842, '\P{Numeric_Value=000090000}', "");
Expect(0, 65842, '\P{^Numeric_Value=000090000}', "");
Error('\p{Nv= -00	0090/a/00-0}');
Error('\P{Nv= -00	0090/a/00-0}');
Expect(1, 65843, '\p{Nv=00000000090000}', "");
Expect(0, 65843, '\p{^Nv=00000000090000}', "");
Expect(0, 65843, '\P{Nv=00000000090000}', "");
Expect(1, 65843, '\P{^Nv=00000000090000}', "");
Expect(0, 65842, '\p{Nv=00000000090000}', "");
Expect(1, 65842, '\p{^Nv=00000000090000}', "");
Expect(1, 65842, '\P{Nv=00000000090000}', "");
Expect(0, 65842, '\P{^Nv=00000000090000}', "");
Error('\p{Is_Numeric_Value=-	+0_0	0_00/a/9_0000}');
Error('\P{Is_Numeric_Value=-	+0_0	0_00/a/9_0000}');
Expect(1, 65843, '\p{Is_Numeric_Value=0_0_0_0_0_0_0_0_0_9_0_000}', "");
Expect(0, 65843, '\p{^Is_Numeric_Value=0_0_0_0_0_0_0_0_0_9_0_000}', "");
Expect(0, 65843, '\P{Is_Numeric_Value=0_0_0_0_0_0_0_0_0_9_0_000}', "");
Expect(1, 65843, '\P{^Is_Numeric_Value=0_0_0_0_0_0_0_0_0_9_0_000}', "");
Expect(0, 65842, '\p{Is_Numeric_Value=0_0_0_0_0_0_0_0_0_9_0_000}', "");
Expect(1, 65842, '\p{^Is_Numeric_Value=0_0_0_0_0_0_0_0_0_9_0_000}', "");
Expect(1, 65842, '\P{Is_Numeric_Value=0_0_0_0_0_0_0_0_0_9_0_000}', "");
Expect(0, 65842, '\P{^Is_Numeric_Value=0_0_0_0_0_0_0_0_0_9_0_000}', "");
Error('\p{Is_Nv:   -090000/a/}');
Error('\P{Is_Nv:   -090000/a/}');
Expect(1, 65843, '\p{Is_Nv=0090000}', "");
Expect(0, 65843, '\p{^Is_Nv=0090000}', "");
Expect(0, 65843, '\P{Is_Nv=0090000}', "");
Expect(1, 65843, '\P{^Is_Nv=0090000}', "");
Expect(0, 65842, '\p{Is_Nv=0090000}', "");
Expect(1, 65842, '\p{^Is_Nv=0090000}', "");
Expect(1, 65842, '\P{Is_Nv=0090000}', "");
Expect(0, 65842, '\P{^Is_Nv=0090000}', "");
Error('\p{Numeric_Value=:= 00000000050000}');
Error('\P{Numeric_Value=:= 00000000050000}');
Expect(1, 8583, '\p{Numeric_Value=0_0_0_0_5_0000}', "");
Expect(0, 8583, '\p{^Numeric_Value=0_0_0_0_5_0000}', "");
Expect(0, 8583, '\P{Numeric_Value=0_0_0_0_5_0000}', "");
Expect(1, 8583, '\P{^Numeric_Value=0_0_0_0_5_0000}', "");
Expect(0, 8582, '\p{Numeric_Value=0_0_0_0_5_0000}', "");
Expect(1, 8582, '\p{^Numeric_Value=0_0_0_0_5_0000}', "");
Expect(1, 8582, '\P{Numeric_Value=0_0_0_0_5_0000}', "");
Expect(0, 8582, '\P{^Numeric_Value=0_0_0_0_5_0000}', "");
Error('\p{Nv=  0-00-0_00 0:=0050000}');
Error('\P{Nv=  0-00-0_00 0:=0050000}');
Expect(1, 8583, '\p{Nv:	00005000_0}', "");
Expect(0, 8583, '\p{^Nv:	00005000_0}', "");
Expect(0, 8583, '\P{Nv:	00005000_0}', "");
Expect(1, 8583, '\P{^Nv:	00005000_0}', "");
Expect(0, 8582, '\p{Nv:	00005000_0}', "");
Expect(1, 8582, '\p{^Nv:	00005000_0}', "");
Expect(1, 8582, '\P{Nv:	00005000_0}', "");
Expect(0, 8582, '\P{^Nv:	00005000_0}', "");
Error('\p{Is_Numeric_Value=--05/a/00	00}');
Error('\P{Is_Numeric_Value=--05/a/00	00}');
Expect(1, 8583, '\p{Is_Numeric_Value=000_000_050_000}', "");
Expect(0, 8583, '\p{^Is_Numeric_Value=000_000_050_000}', "");
Expect(0, 8583, '\P{Is_Numeric_Value=000_000_050_000}', "");
Expect(1, 8583, '\P{^Is_Numeric_Value=000_000_050_000}', "");
Expect(0, 8582, '\p{Is_Numeric_Value=000_000_050_000}', "");
Expect(1, 8582, '\p{^Is_Numeric_Value=000_000_050_000}', "");
Expect(1, 8582, '\P{Is_Numeric_Value=000_000_050_000}', "");
Expect(0, 8582, '\P{^Is_Numeric_Value=000_000_050_000}', "");
Error('\p{Is_Nv=-:=05000 0}');
Error('\P{Is_Nv=-:=05000 0}');
Expect(1, 8583, '\p{Is_Nv:0000005000_0}', "");
Expect(0, 8583, '\p{^Is_Nv:0000005000_0}', "");
Expect(0, 8583, '\P{Is_Nv:0000005000_0}', "");
Expect(1, 8583, '\P{^Is_Nv:0000005000_0}', "");
Expect(0, 8582, '\p{Is_Nv:0000005000_0}', "");
Expect(1, 8582, '\p{^Is_Nv:0000005000_0}', "");
Expect(1, 8582, '\P{Is_Nv:0000005000_0}', "");
Expect(0, 8582, '\P{^Is_Nv:0000005000_0}', "");
Error('\p{Numeric_Value=	+0/a/000 00-4 0000}');
Error('\P{Numeric_Value=	+0/a/000 00-4 0000}');
Expect(1, 65838, '\p{Numeric_Value:   0000040000}', "");
Expect(0, 65838, '\p{^Numeric_Value:   0000040000}', "");
Expect(0, 65838, '\P{Numeric_Value:   0000040000}', "");
Expect(1, 65838, '\P{^Numeric_Value:   0000040000}', "");
Expect(0, 65837, '\p{Numeric_Value:   0000040000}', "");
Expect(1, 65837, '\p{^Numeric_Value:   0000040000}', "");
Expect(1, 65837, '\P{Numeric_Value:   0000040000}', "");
Expect(0, 65837, '\P{^Numeric_Value:   0000040000}', "");
Error('\p{Nv:  +000000040000/a/}');
Error('\P{Nv:  +000000040000/a/}');
Expect(1, 65838, '\p{Nv=00040000}', "");
Expect(0, 65838, '\p{^Nv=00040000}', "");
Expect(0, 65838, '\P{Nv=00040000}', "");
Expect(1, 65838, '\P{^Nv=00040000}', "");
Expect(0, 65837, '\p{Nv=00040000}', "");
Expect(1, 65837, '\p{^Nv=00040000}', "");
Expect(1, 65837, '\P{Nv=00040000}', "");
Expect(0, 65837, '\P{^Nv=00040000}', "");
Error('\p{Is_Numeric_Value=/a/		+4000-0}');
Error('\P{Is_Numeric_Value=/a/		+4000-0}');
Expect(1, 65838, '\p{Is_Numeric_Value=+0_0_0_0_0_0_4_0_000}', "");
Expect(0, 65838, '\p{^Is_Numeric_Value=+0_0_0_0_0_0_4_0_000}', "");
Expect(0, 65838, '\P{Is_Numeric_Value=+0_0_0_0_0_0_4_0_000}', "");
Expect(1, 65838, '\P{^Is_Numeric_Value=+0_0_0_0_0_0_4_0_000}', "");
Expect(0, 65837, '\p{Is_Numeric_Value=+0_0_0_0_0_0_4_0_000}', "");
Expect(1, 65837, '\p{^Is_Numeric_Value=+0_0_0_0_0_0_4_0_000}', "");
Expect(1, 65837, '\P{Is_Numeric_Value=+0_0_0_0_0_0_4_0_000}', "");
Expect(0, 65837, '\P{^Is_Numeric_Value=+0_0_0_0_0_0_4_0_000}', "");
Error('\p{Is_Nv=_00:=00 00_00_40 000}');
Error('\P{Is_Nv=_00:=00 00_00_40 000}');
Expect(1, 65838, '\p{Is_Nv=0000000040000}', "");
Expect(0, 65838, '\p{^Is_Nv=0000000040000}', "");
Expect(0, 65838, '\P{Is_Nv=0000000040000}', "");
Expect(1, 65838, '\P{^Is_Nv=0000000040000}', "");
Expect(0, 65837, '\p{Is_Nv=0000000040000}', "");
Expect(1, 65837, '\p{^Is_Nv=0000000040000}', "");
Expect(1, 65837, '\P{Is_Nv=0000000040000}', "");
Expect(0, 65837, '\P{^Is_Nv=0000000040000}', "");
Error('\p{Numeric_Value=:=- 000000001/02}');
Error('\P{Numeric_Value=:=- 000000001/02}');
Expect(1, 189, '\p{Numeric_Value=0000001/0002}', "");
Expect(0, 189, '\p{^Numeric_Value=0000001/0002}', "");
Expect(0, 189, '\P{Numeric_Value=0000001/0002}', "");
Expect(1, 189, '\P{^Numeric_Value=0000001/0002}', "");
Expect(0, 188, '\p{Numeric_Value=0000001/0002}', "");
Expect(1, 188, '\p{^Numeric_Value=0000001/0002}', "");
Expect(1, 188, '\P{Numeric_Value=0000001/0002}', "");
Expect(0, 188, '\P{^Numeric_Value=0000001/0002}', "");
Expect(1, 189, '\p{Numeric_Value=0.500}', "");
Expect(0, 189, '\p{^Numeric_Value=0.500}', "");
Expect(0, 189, '\P{Numeric_Value=0.500}', "");
Expect(1, 189, '\P{^Numeric_Value=0.500}', "");
Expect(0, 188, '\p{Numeric_Value=0.500}', "");
Expect(1, 188, '\p{^Numeric_Value=0.500}', "");
Expect(1, 188, '\P{Numeric_Value=0.500}', "");
Expect(0, 188, '\P{^Numeric_Value=0.500}', "");
Error('\p{Nv=	:=000001/00002}');
Error('\P{Nv=	:=000001/00002}');
Expect(1, 189, '\p{Nv:00001/002}', "");
Expect(0, 189, '\p{^Nv:00001/002}', "");
Expect(0, 189, '\P{Nv:00001/002}', "");
Expect(1, 189, '\P{^Nv:00001/002}', "");
Expect(0, 188, '\p{Nv:00001/002}', "");
Expect(1, 188, '\p{^Nv:00001/002}', "");
Expect(1, 188, '\P{Nv:00001/002}', "");
Expect(0, 188, '\P{^Nv:00001/002}', "");
Expect(1, 189, '\p{Nv=0.500}', "");
Expect(0, 189, '\p{^Nv=0.500}', "");
Expect(0, 189, '\P{Nv=0.500}', "");
Expect(1, 189, '\P{^Nv=0.500}', "");
Expect(0, 188, '\p{Nv=0.500}', "");
Expect(1, 188, '\p{^Nv=0.500}', "");
Expect(1, 188, '\P{Nv=0.500}', "");
Expect(0, 188, '\P{^Nv=0.500}', "");
Error('\p{Is_Numeric_Value=:=	_0000001/00000002}');
Error('\P{Is_Numeric_Value=:=	_0000001/00000002}');
Expect(1, 189, '\p{Is_Numeric_Value=+000000001/000000002}', "");
Expect(0, 189, '\p{^Is_Numeric_Value=+000000001/000000002}', "");
Expect(0, 189, '\P{Is_Numeric_Value=+000000001/000000002}', "");
Expect(1, 189, '\P{^Is_Numeric_Value=+000000001/000000002}', "");
Expect(0, 188, '\p{Is_Numeric_Value=+000000001/000000002}', "");
Expect(1, 188, '\p{^Is_Numeric_Value=+000000001/000000002}', "");
Expect(1, 188, '\P{Is_Numeric_Value=+000000001/000000002}', "");
Expect(0, 188, '\P{^Is_Numeric_Value=+000000001/000000002}', "");
Expect(1, 189, '\p{Is_Numeric_Value=0.500}', "");
Expect(0, 189, '\p{^Is_Numeric_Value=0.500}', "");
Expect(0, 189, '\P{Is_Numeric_Value=0.500}', "");
Expect(1, 189, '\P{^Is_Numeric_Value=0.500}', "");
Expect(0, 188, '\p{Is_Numeric_Value=0.500}', "");
Expect(1, 188, '\p{^Is_Numeric_Value=0.500}', "");
Expect(1, 188, '\P{Is_Numeric_Value=0.500}', "");
Expect(0, 188, '\P{^Is_Numeric_Value=0.500}', "");
Error('\p{Is_Nv=/a/	-00001/000002}');
Error('\P{Is_Nv=/a/	-00001/000002}');
Expect(1, 189, '\p{Is_Nv=+00000001/0000000002}', "");
Expect(0, 189, '\p{^Is_Nv=+00000001/0000000002}', "");
Expect(0, 189, '\P{Is_Nv=+00000001/0000000002}', "");
Expect(1, 189, '\P{^Is_Nv=+00000001/0000000002}', "");
Expect(0, 188, '\p{Is_Nv=+00000001/0000000002}', "");
Expect(1, 188, '\p{^Is_Nv=+00000001/0000000002}', "");
Expect(1, 188, '\P{Is_Nv=+00000001/0000000002}', "");
Expect(0, 188, '\P{^Is_Nv=+00000001/0000000002}', "");
Expect(1, 189, '\p{Is_Nv=0.500}', "");
Expect(0, 189, '\p{^Is_Nv=0.500}', "");
Expect(0, 189, '\P{Is_Nv=0.500}', "");
Expect(1, 189, '\P{^Is_Nv=0.500}', "");
Expect(0, 188, '\p{Is_Nv=0.500}', "");
Expect(1, 188, '\p{^Is_Nv=0.500}', "");
Expect(1, 188, '\P{Is_Nv=0.500}', "");
Expect(0, 188, '\P{^Is_Nv=0.500}', "");
Error('\p{Numeric_Value:	 +00 00 00:=00_70	00}');
Error('\P{Numeric_Value:	 +00 00 00:=00_70	00}');
Expect(1, 65832, '\p{Numeric_Value=+00_00_00_00_07_00_0}', "");
Expect(0, 65832, '\p{^Numeric_Value=+00_00_00_00_07_00_0}', "");
Expect(0, 65832, '\P{Numeric_Value=+00_00_00_00_07_00_0}', "");
Expect(1, 65832, '\P{^Numeric_Value=+00_00_00_00_07_00_0}', "");
Expect(0, 65831, '\p{Numeric_Value=+00_00_00_00_07_00_0}', "");
Expect(1, 65831, '\p{^Numeric_Value=+00_00_00_00_07_00_0}', "");
Expect(1, 65831, '\P{Numeric_Value=+00_00_00_00_07_00_0}', "");
Expect(0, 65831, '\P{^Numeric_Value=+00_00_00_00_07_00_0}', "");
Error('\p{Nv=-:=0 0_70 00}');
Error('\P{Nv=-:=0 0_70 00}');
Expect(1, 65832, '\p{Nv:+0_7_0_00}', "");
Expect(0, 65832, '\p{^Nv:+0_7_0_00}', "");
Expect(0, 65832, '\P{Nv:+0_7_0_00}', "");
Expect(1, 65832, '\P{^Nv:+0_7_0_00}', "");
Expect(0, 65831, '\p{Nv:+0_7_0_00}', "");
Expect(1, 65831, '\p{^Nv:+0_7_0_00}', "");
Expect(1, 65831, '\P{Nv:+0_7_0_00}', "");
Expect(0, 65831, '\P{^Nv:+0_7_0_00}', "");
Error('\p{Is_Numeric_Value:   	:=+000000007000}');
Error('\P{Is_Numeric_Value:   	:=+000000007000}');
Expect(1, 65832, '\p{Is_Numeric_Value=00700_0}', "");
Expect(0, 65832, '\p{^Is_Numeric_Value=00700_0}', "");
Expect(0, 65832, '\P{Is_Numeric_Value=00700_0}', "");
Expect(1, 65832, '\P{^Is_Numeric_Value=00700_0}', "");
Expect(0, 65831, '\p{Is_Numeric_Value=00700_0}', "");
Expect(1, 65831, '\p{^Is_Numeric_Value=00700_0}', "");
Expect(1, 65831, '\P{Is_Numeric_Value=00700_0}', "");
Expect(0, 65831, '\P{^Is_Numeric_Value=00700_0}', "");
Error('\p{Is_Nv=	00/a/70_00}');
Error('\P{Is_Nv=	00/a/70_00}');
Expect(1, 65832, '\p{Is_Nv=7000}', "");
Expect(0, 65832, '\p{^Is_Nv=7000}', "");
Expect(0, 65832, '\P{Is_Nv=7000}', "");
Expect(1, 65832, '\P{^Is_Nv=7000}', "");
Expect(0, 65831, '\p{Is_Nv=7000}', "");
Expect(1, 65831, '\p{^Is_Nv=7000}', "");
Expect(1, 65831, '\P{Is_Nv=7000}', "");
Expect(0, 65831, '\P{^Is_Nv=7000}', "");
Error('\p{Numeric_Value:	:=	 3/00005}');
Error('\P{Numeric_Value:	:=	 3/00005}');
Expect(1, 8535, '\p{Numeric_Value=03/000000005}', "");
Expect(0, 8535, '\p{^Numeric_Value=03/000000005}', "");
Expect(0, 8535, '\P{Numeric_Value=03/000000005}', "");
Expect(1, 8535, '\P{^Numeric_Value=03/000000005}', "");
Expect(0, 8534, '\p{Numeric_Value=03/000000005}', "");
Expect(1, 8534, '\p{^Numeric_Value=03/000000005}', "");
Expect(1, 8534, '\P{Numeric_Value=03/000000005}', "");
Expect(0, 8534, '\P{^Numeric_Value=03/000000005}', "");
Expect(1, 8535, '\p{Numeric_Value=0.600}', "");
Expect(0, 8535, '\p{^Numeric_Value=0.600}', "");
Expect(0, 8535, '\P{Numeric_Value=0.600}', "");
Expect(1, 8535, '\P{^Numeric_Value=0.600}', "");
Expect(0, 8534, '\p{Numeric_Value=0.600}', "");
Expect(1, 8534, '\p{^Numeric_Value=0.600}', "");
Expect(1, 8534, '\P{Numeric_Value=0.600}', "");
Expect(0, 8534, '\P{^Numeric_Value=0.600}', "");
Error('\p{Nv= :=0000003/000005}');
Error('\P{Nv= :=0000003/000005}');
Expect(1, 8535, '\p{Nv=000000003/000005}', "");
Expect(0, 8535, '\p{^Nv=000000003/000005}', "");
Expect(0, 8535, '\P{Nv=000000003/000005}', "");
Expect(1, 8535, '\P{^Nv=000000003/000005}', "");
Expect(0, 8534, '\p{Nv=000000003/000005}', "");
Expect(1, 8534, '\p{^Nv=000000003/000005}', "");
Expect(1, 8534, '\P{Nv=000000003/000005}', "");
Expect(0, 8534, '\P{^Nv=000000003/000005}', "");
Expect(1, 8535, '\p{Nv=0.600}', "");
Expect(0, 8535, '\p{^Nv=0.600}', "");
Expect(0, 8535, '\P{Nv=0.600}', "");
Expect(1, 8535, '\P{^Nv=0.600}', "");
Expect(0, 8534, '\p{Nv=0.600}', "");
Expect(1, 8534, '\p{^Nv=0.600}', "");
Expect(1, 8534, '\P{Nv=0.600}', "");
Expect(0, 8534, '\P{^Nv=0.600}', "");
Error('\p{Is_Numeric_Value:   -:=00003/00005}');
Error('\P{Is_Numeric_Value:   -:=00003/00005}');
Expect(1, 8535, '\p{Is_Numeric_Value=000003/00005}', "");
Expect(0, 8535, '\p{^Is_Numeric_Value=000003/00005}', "");
Expect(0, 8535, '\P{Is_Numeric_Value=000003/00005}', "");
Expect(1, 8535, '\P{^Is_Numeric_Value=000003/00005}', "");
Expect(0, 8534, '\p{Is_Numeric_Value=000003/00005}', "");
Expect(1, 8534, '\p{^Is_Numeric_Value=000003/00005}', "");
Expect(1, 8534, '\P{Is_Numeric_Value=000003/00005}', "");
Expect(0, 8534, '\P{^Is_Numeric_Value=000003/00005}', "");
Expect(1, 8535, '\p{Is_Numeric_Value:0.600}', "");
Expect(0, 8535, '\p{^Is_Numeric_Value:0.600}', "");
Expect(0, 8535, '\P{Is_Numeric_Value:0.600}', "");
Expect(1, 8535, '\P{^Is_Numeric_Value:0.600}', "");
Expect(0, 8534, '\p{Is_Numeric_Value:0.600}', "");
Expect(1, 8534, '\p{^Is_Numeric_Value:0.600}', "");
Expect(1, 8534, '\P{Is_Numeric_Value:0.600}', "");
Expect(0, 8534, '\P{^Is_Numeric_Value:0.600}', "");
Error('\p{Is_Nv=-/a/0000000003/05}');
Error('\P{Is_Nv=-/a/0000000003/05}');
Expect(1, 8535, '\p{Is_Nv=3/005}', "");
Expect(0, 8535, '\p{^Is_Nv=3/005}', "");
Expect(0, 8535, '\P{Is_Nv=3/005}', "");
Expect(1, 8535, '\P{^Is_Nv=3/005}', "");
Expect(0, 8534, '\p{Is_Nv=3/005}', "");
Expect(1, 8534, '\p{^Is_Nv=3/005}', "");
Expect(1, 8534, '\P{Is_Nv=3/005}', "");
Expect(0, 8534, '\P{^Is_Nv=3/005}', "");
Expect(1, 8535, '\p{Is_Nv=0.600}', "");
Expect(0, 8535, '\p{^Is_Nv=0.600}', "");
Expect(0, 8535, '\P{Is_Nv=0.600}', "");
Expect(1, 8535, '\P{^Is_Nv=0.600}', "");
Expect(0, 8534, '\p{Is_Nv=0.600}', "");
Expect(1, 8534, '\p{^Is_Nv=0.600}', "");
Expect(1, 8534, '\P{Is_Nv=0.600}', "");
Expect(0, 8534, '\P{^Is_Nv=0.600}', "");
Error('\p{Numeric_Value=/a/0000000017/002}');
Error('\P{Numeric_Value=/a/0000000017/002}');
Expect(1, 3890, '\p{Numeric_Value=+0000017/2}', "");
Expect(0, 3890, '\p{^Numeric_Value=+0000017/2}', "");
Expect(0, 3890, '\P{Numeric_Value=+0000017/2}', "");
Expect(1, 3890, '\P{^Numeric_Value=+0000017/2}', "");
Expect(0, 3889, '\p{Numeric_Value=+0000017/2}', "");
Expect(1, 3889, '\p{^Numeric_Value=+0000017/2}', "");
Expect(1, 3889, '\P{Numeric_Value=+0000017/2}', "");
Expect(0, 3889, '\P{^Numeric_Value=+0000017/2}', "");
Expect(1, 3890, '\p{Numeric_Value=8.500}', "");
Expect(0, 3890, '\p{^Numeric_Value=8.500}', "");
Expect(0, 3890, '\P{Numeric_Value=8.500}', "");
Expect(1, 3890, '\P{^Numeric_Value=8.500}', "");
Expect(0, 3889, '\p{Numeric_Value=8.500}', "");
Expect(1, 3889, '\p{^Numeric_Value=8.500}', "");
Expect(1, 3889, '\P{Numeric_Value=8.500}', "");
Expect(0, 3889, '\P{^Numeric_Value=8.500}', "");
Error('\p{Nv=00000017/02/a/}');
Error('\P{Nv=00000017/02/a/}');
Expect(1, 3890, '\p{Nv=000017/00000002}', "");
Expect(0, 3890, '\p{^Nv=000017/00000002}', "");
Expect(0, 3890, '\P{Nv=000017/00000002}', "");
Expect(1, 3890, '\P{^Nv=000017/00000002}', "");
Expect(0, 3889, '\p{Nv=000017/00000002}', "");
Expect(1, 3889, '\p{^Nv=000017/00000002}', "");
Expect(1, 3889, '\P{Nv=000017/00000002}', "");
Expect(0, 3889, '\P{^Nv=000017/00000002}', "");
Expect(1, 3890, '\p{Nv=8.500}', "");
Expect(0, 3890, '\p{^Nv=8.500}', "");
Expect(0, 3890, '\P{Nv=8.500}', "");
Expect(1, 3890, '\P{^Nv=8.500}', "");
Expect(0, 3889, '\p{Nv=8.500}', "");
Expect(1, 3889, '\p{^Nv=8.500}', "");
Expect(1, 3889, '\P{Nv=8.500}', "");
Expect(0, 3889, '\P{^Nv=8.500}', "");
Error('\p{Is_Numeric_Value=-/a/+00000017/0000002}');
Error('\P{Is_Numeric_Value=-/a/+00000017/0000002}');
Expect(1, 3890, '\p{Is_Numeric_Value=+0000000017/0000000002}', "");
Expect(0, 3890, '\p{^Is_Numeric_Value=+0000000017/0000000002}', "");
Expect(0, 3890, '\P{Is_Numeric_Value=+0000000017/0000000002}', "");
Expect(1, 3890, '\P{^Is_Numeric_Value=+0000000017/0000000002}', "");
Expect(0, 3889, '\p{Is_Numeric_Value=+0000000017/0000000002}', "");
Expect(1, 3889, '\p{^Is_Numeric_Value=+0000000017/0000000002}', "");
Expect(1, 3889, '\P{Is_Numeric_Value=+0000000017/0000000002}', "");
Expect(0, 3889, '\P{^Is_Numeric_Value=+0000000017/0000000002}', "");
Expect(1, 3890, '\p{Is_Numeric_Value:   8.500}', "");
Expect(0, 3890, '\p{^Is_Numeric_Value:   8.500}', "");
Expect(0, 3890, '\P{Is_Numeric_Value:   8.500}', "");
Expect(1, 3890, '\P{^Is_Numeric_Value:   8.500}', "");
Expect(0, 3889, '\p{Is_Numeric_Value:   8.500}', "");
Expect(1, 3889, '\p{^Is_Numeric_Value:   8.500}', "");
Expect(1, 3889, '\P{Is_Numeric_Value:   8.500}', "");
Expect(0, 3889, '\P{^Is_Numeric_Value:   8.500}', "");
Error('\p{Is_Nv=/a/_00000000017/00000002}');
Error('\P{Is_Nv=/a/_00000000017/00000002}');
Expect(1, 3890, '\p{Is_Nv=0000000017/00000002}', "");
Expect(0, 3890, '\p{^Is_Nv=0000000017/00000002}', "");
Expect(0, 3890, '\P{Is_Nv=0000000017/00000002}', "");
Expect(1, 3890, '\P{^Is_Nv=0000000017/00000002}', "");
Expect(0, 3889, '\p{Is_Nv=0000000017/00000002}', "");
Expect(1, 3889, '\p{^Is_Nv=0000000017/00000002}', "");
Expect(1, 3889, '\P{Is_Nv=0000000017/00000002}', "");
Expect(0, 3889, '\P{^Is_Nv=0000000017/00000002}', "");
Expect(1, 3890, '\p{Is_Nv=8.500}', "");
Expect(0, 3890, '\p{^Is_Nv=8.500}', "");
Expect(0, 3890, '\P{Is_Nv=8.500}', "");
Expect(1, 3890, '\P{^Is_Nv=8.500}', "");
Expect(0, 3889, '\p{Is_Nv=8.500}', "");
Expect(1, 3889, '\p{^Is_Nv=8.500}', "");
Expect(1, 3889, '\P{Is_Nv=8.500}', "");
Expect(0, 3889, '\P{^Is_Nv=8.500}', "");
Error('\p{Numeric_Value= 	0:=0 0 0 0	042}');
Error('\P{Numeric_Value= 	0:=0 0 0 0	042}');
Expect(1, 12983, '\p{Numeric_Value=000042}', "");
Expect(0, 12983, '\p{^Numeric_Value=000042}', "");
Expect(0, 12983, '\P{Numeric_Value=000042}', "");
Expect(1, 12983, '\P{^Numeric_Value=000042}', "");
Expect(0, 12982, '\p{Numeric_Value=000042}', "");
Expect(1, 12982, '\p{^Numeric_Value=000042}', "");
Expect(1, 12982, '\P{Numeric_Value=000042}', "");
Expect(0, 12982, '\P{^Numeric_Value=000042}', "");
Error('\p{Nv=_	0	0 0 0 0_42/a/}');
Error('\P{Nv=_	0	0 0 0 0_42/a/}');
Expect(1, 12983, '\p{Nv=004_2}', "");
Expect(0, 12983, '\p{^Nv=004_2}', "");
Expect(0, 12983, '\P{Nv=004_2}', "");
Expect(1, 12983, '\P{^Nv=004_2}', "");
Expect(0, 12982, '\p{Nv=004_2}', "");
Expect(1, 12982, '\p{^Nv=004_2}', "");
Expect(1, 12982, '\P{Nv=004_2}', "");
Expect(0, 12982, '\P{^Nv=004_2}', "");
Error('\p{Is_Numeric_Value:		00-0:=42}');
Error('\P{Is_Numeric_Value:		00-0:=42}');
Expect(1, 12983, '\p{Is_Numeric_Value=0000000042}', "");
Expect(0, 12983, '\p{^Is_Numeric_Value=0000000042}', "");
Expect(0, 12983, '\P{Is_Numeric_Value=0000000042}', "");
Expect(1, 12983, '\P{^Is_Numeric_Value=0000000042}', "");
Expect(0, 12982, '\p{Is_Numeric_Value=0000000042}', "");
Expect(1, 12982, '\p{^Is_Numeric_Value=0000000042}', "");
Expect(1, 12982, '\P{Is_Numeric_Value=0000000042}', "");
Expect(0, 12982, '\P{^Is_Numeric_Value=0000000042}', "");
Error('\p{Is_Nv=	/a/000000042}');
Error('\P{Is_Nv=	/a/000000042}');
Expect(1, 12983, '\p{Is_Nv=+000000042}', "");
Expect(0, 12983, '\p{^Is_Nv=+000000042}', "");
Expect(0, 12983, '\P{Is_Nv=+000000042}', "");
Expect(1, 12983, '\P{^Is_Nv=+000000042}', "");
Expect(0, 12982, '\p{Is_Nv=+000000042}', "");
Expect(1, 12982, '\p{^Is_Nv=+000000042}', "");
Expect(1, 12982, '\P{Is_Nv=+000000042}', "");
Expect(0, 12982, '\P{^Is_Nv=+000000042}', "");
Error('\p{Numeric_Value: +0:=0 0	0 0	022}');
Error('\P{Numeric_Value: +0:=0 0	0 0	022}');
Expect(1, 12882, '\p{Numeric_Value=0_0_0_022}', "");
Expect(0, 12882, '\p{^Numeric_Value=0_0_0_022}', "");
Expect(0, 12882, '\P{Numeric_Value=0_0_0_022}', "");
Expect(1, 12882, '\P{^Numeric_Value=0_0_0_022}', "");
Expect(0, 12881, '\p{Numeric_Value=0_0_0_022}', "");
Expect(1, 12881, '\p{^Numeric_Value=0_0_0_022}', "");
Expect(1, 12881, '\P{Numeric_Value=0_0_0_022}', "");
Expect(0, 12881, '\P{^Numeric_Value=0_0_0_022}', "");
Error('\p{Nv=/a/	 +0002-2}');
Error('\P{Nv=/a/	 +0002-2}');
Expect(1, 12882, '\p{Nv=+00_02_2}', "");
Expect(0, 12882, '\p{^Nv=+00_02_2}', "");
Expect(0, 12882, '\P{Nv=+00_02_2}', "");
Expect(1, 12882, '\P{^Nv=+00_02_2}', "");
Expect(0, 12881, '\p{Nv=+00_02_2}', "");
Expect(1, 12881, '\p{^Nv=+00_02_2}', "");
Expect(1, 12881, '\P{Nv=+00_02_2}', "");
Expect(0, 12881, '\P{^Nv=+00_02_2}', "");
Error('\p{Is_Numeric_Value=  022/a/}');
Error('\P{Is_Numeric_Value=  022/a/}');
Expect(1, 12882, '\p{Is_Numeric_Value:   +00000022}', "");
Expect(0, 12882, '\p{^Is_Numeric_Value:   +00000022}', "");
Expect(0, 12882, '\P{Is_Numeric_Value:   +00000022}', "");
Expect(1, 12882, '\P{^Is_Numeric_Value:   +00000022}', "");
Expect(0, 12881, '\p{Is_Numeric_Value:   +00000022}', "");
Expect(1, 12881, '\p{^Is_Numeric_Value:   +00000022}', "");
Expect(1, 12881, '\P{Is_Numeric_Value:   +00000022}', "");
Expect(0, 12881, '\P{^Is_Numeric_Value:   +00000022}', "");
Error('\p{Is_Nv=- 00/a/00 0000 022}');
Error('\P{Is_Nv=- 00/a/00 0000 022}');
Expect(1, 12882, '\p{Is_Nv=0_0_0_0_0_0_0_0_022}', "");
Expect(0, 12882, '\p{^Is_Nv=0_0_0_0_0_0_0_0_022}', "");
Expect(0, 12882, '\P{Is_Nv=0_0_0_0_0_0_0_0_022}', "");
Expect(1, 12882, '\P{^Is_Nv=0_0_0_0_0_0_0_0_022}', "");
Expect(0, 12881, '\p{Is_Nv=0_0_0_0_0_0_0_0_022}', "");
Expect(1, 12881, '\p{^Is_Nv=0_0_0_0_0_0_0_0_022}', "");
Expect(1, 12881, '\P{Is_Nv=0_0_0_0_0_0_0_0_022}', "");
Expect(0, 12881, '\P{^Is_Nv=0_0_0_0_0_0_0_0_022}', "");
Error('\p{Numeric_Value:/a/ 	00000001/0009}');
Error('\P{Numeric_Value:/a/ 	00000001/0009}');
Expect(1, 8529, '\p{Numeric_Value=000000001/0000009}', "");
Expect(0, 8529, '\p{^Numeric_Value=000000001/0000009}', "");
Expect(0, 8529, '\P{Numeric_Value=000000001/0000009}', "");
Expect(1, 8529, '\P{^Numeric_Value=000000001/0000009}', "");
Expect(0, 8528, '\p{Numeric_Value=000000001/0000009}', "");
Expect(1, 8528, '\p{^Numeric_Value=000000001/0000009}', "");
Expect(1, 8528, '\P{Numeric_Value=000000001/0000009}', "");
Expect(0, 8528, '\P{^Numeric_Value=000000001/0000009}', "");
Error('\p{Numeric_Value=0.11}');
Error('\P{Numeric_Value=0.11}');
Expect(1, 8529, '\p{Numeric_Value:   0.111}', "");
Expect(0, 8529, '\p{^Numeric_Value:   0.111}', "");
Expect(0, 8529, '\P{Numeric_Value:   0.111}', "");
Expect(1, 8529, '\P{^Numeric_Value:   0.111}', "");
Expect(0, 8528, '\p{Numeric_Value:   0.111}', "");
Expect(1, 8528, '\p{^Numeric_Value:   0.111}', "");
Expect(1, 8528, '\P{Numeric_Value:   0.111}', "");
Expect(0, 8528, '\P{^Numeric_Value:   0.111}', "");
Error('\p{Nv=:=	+0001/09}');
Error('\P{Nv=:=	+0001/09}');
Expect(1, 8529, '\p{Nv=001/000000009}', "");
Expect(0, 8529, '\p{^Nv=001/000000009}', "");
Expect(0, 8529, '\P{Nv=001/000000009}', "");
Expect(1, 8529, '\P{^Nv=001/000000009}', "");
Expect(0, 8528, '\p{Nv=001/000000009}', "");
Expect(1, 8528, '\p{^Nv=001/000000009}', "");
Expect(1, 8528, '\P{Nv=001/000000009}', "");
Expect(0, 8528, '\P{^Nv=001/000000009}', "");
Error('\p{Nv=0.11}');
Error('\P{Nv=0.11}');
Expect(1, 8529, '\p{Nv:   0.111}', "");
Expect(0, 8529, '\p{^Nv:   0.111}', "");
Expect(0, 8529, '\P{Nv:   0.111}', "");
Expect(1, 8529, '\P{^Nv:   0.111}', "");
Expect(0, 8528, '\p{Nv:   0.111}', "");
Expect(1, 8528, '\p{^Nv:   0.111}', "");
Expect(1, 8528, '\P{Nv:   0.111}', "");
Expect(0, 8528, '\P{^Nv:   0.111}', "");
Error('\p{Is_Numeric_Value=:=	-000001/00009}');
Error('\P{Is_Numeric_Value=:=	-000001/00009}');
Expect(1, 8529, '\p{Is_Numeric_Value=+001/9}', "");
Expect(0, 8529, '\p{^Is_Numeric_Value=+001/9}', "");
Expect(0, 8529, '\P{Is_Numeric_Value=+001/9}', "");
Expect(1, 8529, '\P{^Is_Numeric_Value=+001/9}', "");
Expect(0, 8528, '\p{Is_Numeric_Value=+001/9}', "");
Expect(1, 8528, '\p{^Is_Numeric_Value=+001/9}', "");
Expect(1, 8528, '\P{Is_Numeric_Value=+001/9}', "");
Expect(0, 8528, '\P{^Is_Numeric_Value=+001/9}', "");
Error('\p{Is_Numeric_Value=0.11}');
Error('\P{Is_Numeric_Value=0.11}');
Expect(1, 8529, '\p{Is_Numeric_Value=0.111}', "");
Expect(0, 8529, '\p{^Is_Numeric_Value=0.111}', "");
Expect(0, 8529, '\P{Is_Numeric_Value=0.111}', "");
Expect(1, 8529, '\P{^Is_Numeric_Value=0.111}', "");
Expect(0, 8528, '\p{Is_Numeric_Value=0.111}', "");
Expect(1, 8528, '\p{^Is_Numeric_Value=0.111}', "");
Expect(1, 8528, '\P{Is_Numeric_Value=0.111}', "");
Expect(0, 8528, '\P{^Is_Numeric_Value=0.111}', "");
Error('\p{Is_Nv=_:=1/0000000009}');
Error('\P{Is_Nv=_:=1/0000000009}');
Expect(1, 8529, '\p{Is_Nv=01/00009}', "");
Expect(0, 8529, '\p{^Is_Nv=01/00009}', "");
Expect(0, 8529, '\P{Is_Nv=01/00009}', "");
Expect(1, 8529, '\P{^Is_Nv=01/00009}', "");
Expect(0, 8528, '\p{Is_Nv=01/00009}', "");
Expect(1, 8528, '\p{^Is_Nv=01/00009}', "");
Expect(1, 8528, '\P{Is_Nv=01/00009}', "");
Expect(0, 8528, '\P{^Is_Nv=01/00009}', "");
Error('\p{Is_Nv=0.11}');
Error('\P{Is_Nv=0.11}');
Expect(1, 8529, '\p{Is_Nv=0.111}', "");
Expect(0, 8529, '\p{^Is_Nv=0.111}', "");
Expect(0, 8529, '\P{Is_Nv=0.111}', "");
Expect(1, 8529, '\P{^Is_Nv=0.111}', "");
Expect(0, 8528, '\p{Is_Nv=0.111}', "");
Expect(1, 8528, '\p{^Is_Nv=0.111}', "");
Expect(1, 8528, '\P{Is_Nv=0.111}', "");
Expect(0, 8528, '\P{^Is_Nv=0.111}', "");
Error('\p{Numeric_Value=:=+00900}');
Error('\P{Numeric_Value=:=+00900}');
Expect(1, 65825, '\p{Numeric_Value=0_0_9_00}', "");
Expect(0, 65825, '\p{^Numeric_Value=0_0_9_00}', "");
Expect(0, 65825, '\P{Numeric_Value=0_0_9_00}', "");
Expect(1, 65825, '\P{^Numeric_Value=0_0_9_00}', "");
Expect(0, 65824, '\p{Numeric_Value=0_0_9_00}', "");
Expect(1, 65824, '\p{^Numeric_Value=0_0_9_00}', "");
Expect(1, 65824, '\P{Numeric_Value=0_0_9_00}', "");
Expect(0, 65824, '\P{^Numeric_Value=0_0_9_00}', "");
Error('\p{Nv=-/a/00900}');
Error('\P{Nv=-/a/00900}');
Expect(1, 65825, '\p{Nv=00900}', "");
Expect(0, 65825, '\p{^Nv=00900}', "");
Expect(0, 65825, '\P{Nv=00900}', "");
Expect(1, 65825, '\P{^Nv=00900}', "");
Expect(0, 65824, '\p{Nv=00900}', "");
Expect(1, 65824, '\p{^Nv=00900}', "");
Expect(1, 65824, '\P{Nv=00900}', "");
Expect(0, 65824, '\P{^Nv=00900}', "");
Error('\p{Is_Numeric_Value:	:=000000000900}');
Error('\P{Is_Numeric_Value:	:=000000000900}');
Expect(1, 65825, '\p{Is_Numeric_Value=000900}', "");
Expect(0, 65825, '\p{^Is_Numeric_Value=000900}', "");
Expect(0, 65825, '\P{Is_Numeric_Value=000900}', "");
Expect(1, 65825, '\P{^Is_Numeric_Value=000900}', "");
Expect(0, 65824, '\p{Is_Numeric_Value=000900}', "");
Expect(1, 65824, '\p{^Is_Numeric_Value=000900}', "");
Expect(1, 65824, '\P{Is_Numeric_Value=000900}', "");
Expect(0, 65824, '\P{^Is_Numeric_Value=000900}', "");
Error('\p{Is_Nv:	:=0	00 0 0_0-00_900}');
Error('\P{Is_Nv:	:=0	00 0 0_0-00_900}');
Expect(1, 65825, '\p{Is_Nv=000000000900}', "");
Expect(0, 65825, '\p{^Is_Nv=000000000900}', "");
Expect(0, 65825, '\P{Is_Nv=000000000900}', "");
Expect(1, 65825, '\P{^Is_Nv=000000000900}', "");
Expect(0, 65824, '\p{Is_Nv=000000000900}', "");
Expect(1, 65824, '\p{^Is_Nv=000000000900}', "");
Expect(1, 65824, '\P{Is_Nv=000000000900}', "");
Expect(0, 65824, '\P{^Is_Nv=000000000900}', "");
Error('\p{Numeric_Value=_0000002/0000005:=}');
Error('\P{Numeric_Value=_0000002/0000005:=}');
Expect(1, 8534, '\p{Numeric_Value:   2/00000005}', "");
Expect(0, 8534, '\p{^Numeric_Value:   2/00000005}', "");
Expect(0, 8534, '\P{Numeric_Value:   2/00000005}', "");
Expect(1, 8534, '\P{^Numeric_Value:   2/00000005}', "");
Expect(0, 8533, '\p{Numeric_Value:   2/00000005}', "");
Expect(1, 8533, '\p{^Numeric_Value:   2/00000005}', "");
Expect(1, 8533, '\P{Numeric_Value:   2/00000005}', "");
Expect(0, 8533, '\P{^Numeric_Value:   2/00000005}', "");
Expect(1, 8534, '\p{Numeric_Value=0.400}', "");
Expect(0, 8534, '\p{^Numeric_Value=0.400}', "");
Expect(0, 8534, '\P{Numeric_Value=0.400}', "");
Expect(1, 8534, '\P{^Numeric_Value=0.400}', "");
Expect(0, 8533, '\p{Numeric_Value=0.400}', "");
Expect(1, 8533, '\p{^Numeric_Value=0.400}', "");
Expect(1, 8533, '\P{Numeric_Value=0.400}', "");
Expect(0, 8533, '\P{^Numeric_Value=0.400}', "");
Error('\p{Nv= _00002/00000005/a/}');
Error('\P{Nv= _00002/00000005/a/}');
Expect(1, 8534, '\p{Nv:000000002/05}', "");
Expect(0, 8534, '\p{^Nv:000000002/05}', "");
Expect(0, 8534, '\P{Nv:000000002/05}', "");
Expect(1, 8534, '\P{^Nv:000000002/05}', "");
Expect(0, 8533, '\p{Nv:000000002/05}', "");
Expect(1, 8533, '\p{^Nv:000000002/05}', "");
Expect(1, 8533, '\P{Nv:000000002/05}', "");
Expect(0, 8533, '\P{^Nv:000000002/05}', "");
Expect(1, 8534, '\p{Nv:   0.400}', "");
Expect(0, 8534, '\p{^Nv:   0.400}', "");
Expect(0, 8534, '\P{Nv:   0.400}', "");
Expect(1, 8534, '\P{^Nv:   0.400}', "");
Expect(0, 8533, '\p{Nv:   0.400}', "");
Expect(1, 8533, '\p{^Nv:   0.400}', "");
Expect(1, 8533, '\P{Nv:   0.400}', "");
Expect(0, 8533, '\P{^Nv:   0.400}', "");
Error('\p{Is_Numeric_Value=	_000000002/005/a/}');
Error('\P{Is_Numeric_Value=	_000000002/005/a/}');
Expect(1, 8534, '\p{Is_Numeric_Value=000002/0005}', "");
Expect(0, 8534, '\p{^Is_Numeric_Value=000002/0005}', "");
Expect(0, 8534, '\P{Is_Numeric_Value=000002/0005}', "");
Expect(1, 8534, '\P{^Is_Numeric_Value=000002/0005}', "");
Expect(0, 8533, '\p{Is_Numeric_Value=000002/0005}', "");
Expect(1, 8533, '\p{^Is_Numeric_Value=000002/0005}', "");
Expect(1, 8533, '\P{Is_Numeric_Value=000002/0005}', "");
Expect(0, 8533, '\P{^Is_Numeric_Value=000002/0005}', "");
Expect(1, 8534, '\p{Is_Numeric_Value=0.400}', "");
Expect(0, 8534, '\p{^Is_Numeric_Value=0.400}', "");
Expect(0, 8534, '\P{Is_Numeric_Value=0.400}', "");
Expect(1, 8534, '\P{^Is_Numeric_Value=0.400}', "");
Expect(0, 8533, '\p{Is_Numeric_Value=0.400}', "");
Expect(1, 8533, '\p{^Is_Numeric_Value=0.400}', "");
Expect(1, 8533, '\P{Is_Numeric_Value=0.400}', "");
Expect(0, 8533, '\P{^Is_Numeric_Value=0.400}', "");
Error('\p{Is_Nv=	/a/00000002/0000005}');
Error('\P{Is_Nv=	/a/00000002/0000005}');
Expect(1, 8534, '\p{Is_Nv=00002/00005}', "");
Expect(0, 8534, '\p{^Is_Nv=00002/00005}', "");
Expect(0, 8534, '\P{Is_Nv=00002/00005}', "");
Expect(1, 8534, '\P{^Is_Nv=00002/00005}', "");
Expect(0, 8533, '\p{Is_Nv=00002/00005}', "");
Expect(1, 8533, '\p{^Is_Nv=00002/00005}', "");
Expect(1, 8533, '\P{Is_Nv=00002/00005}', "");
Expect(0, 8533, '\P{^Is_Nv=00002/00005}', "");
Expect(1, 8534, '\p{Is_Nv:   0.400}', "");
Expect(0, 8534, '\p{^Is_Nv:   0.400}', "");
Expect(0, 8534, '\P{Is_Nv:   0.400}', "");
Expect(1, 8534, '\P{^Is_Nv:   0.400}', "");
Expect(0, 8533, '\p{Is_Nv:   0.400}', "");
Expect(1, 8533, '\p{^Is_Nv:   0.400}', "");
Expect(1, 8533, '\P{Is_Nv:   0.400}', "");
Expect(0, 8533, '\P{^Is_Nv:   0.400}', "");
Error('\p{Numeric_Value=-_00000000046:=}');
Error('\P{Numeric_Value=-_00000000046:=}');
Expect(1, 12987, '\p{Numeric_Value=0046}', "");
Expect(0, 12987, '\p{^Numeric_Value=0046}', "");
Expect(0, 12987, '\P{Numeric_Value=0046}', "");
Expect(1, 12987, '\P{^Numeric_Value=0046}', "");
Expect(0, 12986, '\p{Numeric_Value=0046}', "");
Expect(1, 12986, '\p{^Numeric_Value=0046}', "");
Expect(1, 12986, '\P{Numeric_Value=0046}', "");
Expect(0, 12986, '\P{^Numeric_Value=0046}', "");
Error('\p{Nv=-	+0/a/0-0-0 0 0 00046}');
Error('\P{Nv=-	+0/a/0-0-0 0 0 00046}');
Expect(1, 12987, '\p{Nv=0_0_0_0_0_0_0_46}', "");
Expect(0, 12987, '\p{^Nv=0_0_0_0_0_0_0_46}', "");
Expect(0, 12987, '\P{Nv=0_0_0_0_0_0_0_46}', "");
Expect(1, 12987, '\P{^Nv=0_0_0_0_0_0_0_46}', "");
Expect(0, 12986, '\p{Nv=0_0_0_0_0_0_0_46}', "");
Expect(1, 12986, '\p{^Nv=0_0_0_0_0_0_0_46}', "");
Expect(1, 12986, '\P{Nv=0_0_0_0_0_0_0_46}', "");
Expect(0, 12986, '\P{^Nv=0_0_0_0_0_0_0_46}', "");
Error('\p{Is_Numeric_Value=-_+04_6/a/}');
Error('\P{Is_Numeric_Value=-_+04_6/a/}');
Expect(1, 12987, '\p{Is_Numeric_Value=+00000000046}', "");
Expect(0, 12987, '\p{^Is_Numeric_Value=+00000000046}', "");
Expect(0, 12987, '\P{Is_Numeric_Value=+00000000046}', "");
Expect(1, 12987, '\P{^Is_Numeric_Value=+00000000046}', "");
Expect(0, 12986, '\p{Is_Numeric_Value=+00000000046}', "");
Expect(1, 12986, '\p{^Is_Numeric_Value=+00000000046}', "");
Expect(1, 12986, '\P{Is_Numeric_Value=+00000000046}', "");
Expect(0, 12986, '\P{^Is_Numeric_Value=+00000000046}', "");
Error('\p{Is_Nv=/a/4 6}');
Error('\P{Is_Nv=/a/4 6}');
Expect(1, 12987, '\p{Is_Nv=00000046}', "");
Expect(0, 12987, '\p{^Is_Nv=00000046}', "");
Expect(0, 12987, '\P{Is_Nv=00000046}', "");
Expect(1, 12987, '\P{^Is_Nv=00000046}', "");
Expect(0, 12986, '\p{Is_Nv=00000046}', "");
Expect(1, 12986, '\p{^Is_Nv=00000046}', "");
Expect(1, 12986, '\P{Is_Nv=00000046}', "");
Expect(0, 12986, '\P{^Is_Nv=00000046}', "");
Error('\p{Numeric_Value= -00:=0}');
Error('\P{Numeric_Value= -00:=0}');
Expect(1, 48, '\p{Numeric_Value=0}', "");
Expect(0, 48, '\p{^Numeric_Value=0}', "");
Expect(0, 48, '\P{Numeric_Value=0}', "");
Expect(1, 48, '\P{^Numeric_Value=0}', "");
Expect(0, 47, '\p{Numeric_Value=0}', "");
Expect(1, 47, '\p{^Numeric_Value=0}', "");
Expect(1, 47, '\P{Numeric_Value=0}', "");
Expect(0, 47, '\P{^Numeric_Value=0}', "");
Error('\p{Nv= 00:=}');
Error('\P{Nv= 00:=}');
Expect(1, 48, '\p{Nv:0_0}', "");
Expect(0, 48, '\p{^Nv:0_0}', "");
Expect(0, 48, '\P{Nv:0_0}', "");
Expect(1, 48, '\P{^Nv:0_0}', "");
Expect(0, 47, '\p{Nv:0_0}', "");
Expect(1, 47, '\p{^Nv:0_0}', "");
Expect(1, 47, '\P{Nv:0_0}', "");
Expect(0, 47, '\P{^Nv:0_0}', "");
Error('\p{Is_Numeric_Value=/a/	00}');
Error('\P{Is_Numeric_Value=/a/	00}');
Expect(1, 48, '\p{Is_Numeric_Value=+0_0_0_0_0000}', "");
Expect(0, 48, '\p{^Is_Numeric_Value=+0_0_0_0_0000}', "");
Expect(0, 48, '\P{Is_Numeric_Value=+0_0_0_0_0000}', "");
Expect(1, 48, '\P{^Is_Numeric_Value=+0_0_0_0_0000}', "");
Expect(0, 47, '\p{Is_Numeric_Value=+0_0_0_0_0000}', "");
Expect(1, 47, '\p{^Is_Numeric_Value=+0_0_0_0_0000}', "");
Expect(1, 47, '\P{Is_Numeric_Value=+0_0_0_0_0000}', "");
Expect(0, 47, '\P{^Is_Numeric_Value=+0_0_0_0_0000}', "");
Error('\p{Is_Nv=__00000/a/}');
Error('\P{Is_Nv=__00000/a/}');
Expect(1, 48, '\p{Is_Nv=0000}', "");
Expect(0, 48, '\p{^Is_Nv=0000}', "");
Expect(0, 48, '\P{Is_Nv=0000}', "");
Expect(1, 48, '\P{^Is_Nv=0000}', "");
Expect(0, 47, '\p{Is_Nv=0000}', "");
Expect(1, 47, '\p{^Is_Nv=0000}', "");
Expect(1, 47, '\P{Is_Nv=0000}', "");
Expect(0, 47, '\P{^Is_Nv=0000}', "");
Error('\p{Numeric_Value=/a/-_+023}');
Error('\P{Numeric_Value=/a/-_+023}');
Expect(1, 12883, '\p{Numeric_Value=0_0_0_23}', "");
Expect(0, 12883, '\p{^Numeric_Value=0_0_0_23}', "");
Expect(0, 12883, '\P{Numeric_Value=0_0_0_23}', "");
Expect(1, 12883, '\P{^Numeric_Value=0_0_0_23}', "");
Expect(0, 12882, '\p{Numeric_Value=0_0_0_23}', "");
Expect(1, 12882, '\p{^Numeric_Value=0_0_0_23}', "");
Expect(1, 12882, '\P{Numeric_Value=0_0_0_23}', "");
Expect(0, 12882, '\P{^Numeric_Value=0_0_0_23}', "");
Error('\p{Nv=- 0000-00 023:=}');
Error('\P{Nv=- 0000-00 023:=}');
Expect(1, 12883, '\p{Nv:023}', "");
Expect(0, 12883, '\p{^Nv:023}', "");
Expect(0, 12883, '\P{Nv:023}', "");
Expect(1, 12883, '\P{^Nv:023}', "");
Expect(0, 12882, '\p{Nv:023}', "");
Expect(1, 12882, '\p{^Nv:023}', "");
Expect(1, 12882, '\P{Nv:023}', "");
Expect(0, 12882, '\P{^Nv:023}', "");
Error('\p{Is_Numeric_Value=	+0-0_0-023/a/}');
Error('\P{Is_Numeric_Value=	+0-0_0-023/a/}');
Expect(1, 12883, '\p{Is_Numeric_Value=+00023}', "");
Expect(0, 12883, '\p{^Is_Numeric_Value=+00023}', "");
Expect(0, 12883, '\P{Is_Numeric_Value=+00023}', "");
Expect(1, 12883, '\P{^Is_Numeric_Value=+00023}', "");
Expect(0, 12882, '\p{Is_Numeric_Value=+00023}', "");
Expect(1, 12882, '\p{^Is_Numeric_Value=+00023}', "");
Expect(1, 12882, '\P{Is_Numeric_Value=+00023}', "");
Expect(0, 12882, '\P{^Is_Numeric_Value=+00023}', "");
Error('\p{Is_Nv= -+0/a/00 0-0	023}');
Error('\P{Is_Nv= -+0/a/00 0-0	023}');
Expect(1, 12883, '\p{Is_Nv:   0000_0000_23}', "");
Expect(0, 12883, '\p{^Is_Nv:   0000_0000_23}', "");
Expect(0, 12883, '\P{Is_Nv:   0000_0000_23}', "");
Expect(1, 12883, '\P{^Is_Nv:   0000_0000_23}', "");
Expect(0, 12882, '\p{Is_Nv:   0000_0000_23}', "");
Expect(1, 12882, '\p{^Is_Nv:   0000_0000_23}', "");
Expect(1, 12882, '\P{Is_Nv:   0000_0000_23}', "");
Expect(0, 12882, '\P{^Is_Nv:   0000_0000_23}', "");
Error('\p{Numeric_Value= :=000000001/000007}');
Error('\P{Numeric_Value= :=000000001/000007}');
Expect(1, 8528, '\p{Numeric_Value=0000001/07}', "");
Expect(0, 8528, '\p{^Numeric_Value=0000001/07}', "");
Expect(0, 8528, '\P{Numeric_Value=0000001/07}', "");
Expect(1, 8528, '\P{^Numeric_Value=0000001/07}', "");
Expect(0, 8527, '\p{Numeric_Value=0000001/07}', "");
Expect(1, 8527, '\p{^Numeric_Value=0000001/07}', "");
Expect(1, 8527, '\P{Numeric_Value=0000001/07}', "");
Expect(0, 8527, '\P{^Numeric_Value=0000001/07}', "");
Error('\p{Numeric_Value=0.14}');
Error('\P{Numeric_Value=0.14}');
Expect(1, 8528, '\p{Numeric_Value=0.143}', "");
Expect(0, 8528, '\p{^Numeric_Value=0.143}', "");
Expect(0, 8528, '\P{Numeric_Value=0.143}', "");
Expect(1, 8528, '\P{^Numeric_Value=0.143}', "");
Expect(0, 8527, '\p{Numeric_Value=0.143}', "");
Expect(1, 8527, '\p{^Numeric_Value=0.143}', "");
Expect(1, 8527, '\P{Numeric_Value=0.143}', "");
Expect(0, 8527, '\P{^Numeric_Value=0.143}', "");
Error('\p{Nv=	/a/+00000001/000000007}');
Error('\P{Nv=	/a/+00000001/000000007}');
Expect(1, 8528, '\p{Nv=0000001/7}', "");
Expect(0, 8528, '\p{^Nv=0000001/7}', "");
Expect(0, 8528, '\P{Nv=0000001/7}', "");
Expect(1, 8528, '\P{^Nv=0000001/7}', "");
Expect(0, 8527, '\p{Nv=0000001/7}', "");
Expect(1, 8527, '\p{^Nv=0000001/7}', "");
Expect(1, 8527, '\P{Nv=0000001/7}', "");
Expect(0, 8527, '\P{^Nv=0000001/7}', "");
Error('\p{Nv=0.14}');
Error('\P{Nv=0.14}');
Expect(1, 8528, '\p{Nv=0.143}', "");
Expect(0, 8528, '\p{^Nv=0.143}', "");
Expect(0, 8528, '\P{Nv=0.143}', "");
Expect(1, 8528, '\P{^Nv=0.143}', "");
Expect(0, 8527, '\p{Nv=0.143}', "");
Expect(1, 8527, '\p{^Nv=0.143}', "");
Expect(1, 8527, '\P{Nv=0.143}', "");
Expect(0, 8527, '\P{^Nv=0.143}', "");
Error('\p{Is_Numeric_Value=/a/  000000001/00007}');
Error('\P{Is_Numeric_Value=/a/  000000001/00007}');
Expect(1, 8528, '\p{Is_Numeric_Value=0000001/007}', "");
Expect(0, 8528, '\p{^Is_Numeric_Value=0000001/007}', "");
Expect(0, 8528, '\P{Is_Numeric_Value=0000001/007}', "");
Expect(1, 8528, '\P{^Is_Numeric_Value=0000001/007}', "");
Expect(0, 8527, '\p{Is_Numeric_Value=0000001/007}', "");
Expect(1, 8527, '\p{^Is_Numeric_Value=0000001/007}', "");
Expect(1, 8527, '\P{Is_Numeric_Value=0000001/007}', "");
Expect(0, 8527, '\P{^Is_Numeric_Value=0000001/007}', "");
Error('\p{Is_Numeric_Value:0.14}');
Error('\P{Is_Numeric_Value:0.14}');
Expect(1, 8528, '\p{Is_Numeric_Value=0.143}', "");
Expect(0, 8528, '\p{^Is_Numeric_Value=0.143}', "");
Expect(0, 8528, '\P{Is_Numeric_Value=0.143}', "");
Expect(1, 8528, '\P{^Is_Numeric_Value=0.143}', "");
Expect(0, 8527, '\p{Is_Numeric_Value=0.143}', "");
Expect(1, 8527, '\p{^Is_Numeric_Value=0.143}', "");
Expect(1, 8527, '\P{Is_Numeric_Value=0.143}', "");
Expect(0, 8527, '\P{^Is_Numeric_Value=0.143}', "");
Error('\p{Is_Nv=-:=+0001/0000000007}');
Error('\P{Is_Nv=-:=+0001/0000000007}');
Expect(1, 8528, '\p{Is_Nv=1/0000000007}', "");
Expect(0, 8528, '\p{^Is_Nv=1/0000000007}', "");
Expect(0, 8528, '\P{Is_Nv=1/0000000007}', "");
Expect(1, 8528, '\P{^Is_Nv=1/0000000007}', "");
Expect(0, 8527, '\p{Is_Nv=1/0000000007}', "");
Expect(1, 8527, '\p{^Is_Nv=1/0000000007}', "");
Expect(1, 8527, '\P{Is_Nv=1/0000000007}', "");
Expect(0, 8527, '\P{^Is_Nv=1/0000000007}', "");
Error('\p{Is_Nv:	0.14}');
Error('\P{Is_Nv:	0.14}');
Expect(1, 8528, '\p{Is_Nv=0.143}', "");
Expect(0, 8528, '\p{^Is_Nv=0.143}', "");
Expect(0, 8528, '\P{Is_Nv=0.143}', "");
Expect(1, 8528, '\P{^Is_Nv=0.143}', "");
Expect(0, 8527, '\p{Is_Nv=0.143}', "");
Expect(1, 8527, '\p{^Is_Nv=0.143}', "");
Expect(1, 8527, '\P{Is_Nv=0.143}', "");
Expect(0, 8527, '\P{^Is_Nv=0.143}', "");
Error('\p{Numeric_Value=/a/-04/05}');
Error('\P{Numeric_Value=/a/-04/05}');
Expect(1, 8536, '\p{Numeric_Value=0004/0000000005}', "");
Expect(0, 8536, '\p{^Numeric_Value=0004/0000000005}', "");
Expect(0, 8536, '\P{Numeric_Value=0004/0000000005}', "");
Expect(1, 8536, '\P{^Numeric_Value=0004/0000000005}', "");
Expect(0, 8535, '\p{Numeric_Value=0004/0000000005}', "");
Expect(1, 8535, '\p{^Numeric_Value=0004/0000000005}', "");
Expect(1, 8535, '\P{Numeric_Value=0004/0000000005}', "");
Expect(0, 8535, '\P{^Numeric_Value=0004/0000000005}', "");
Expect(1, 8536, '\p{Numeric_Value:   0.800}', "");
Expect(0, 8536, '\p{^Numeric_Value:   0.800}', "");
Expect(0, 8536, '\P{Numeric_Value:   0.800}', "");
Expect(1, 8536, '\P{^Numeric_Value:   0.800}', "");
Expect(0, 8535, '\p{Numeric_Value:   0.800}', "");
Expect(1, 8535, '\p{^Numeric_Value:   0.800}', "");
Expect(1, 8535, '\P{Numeric_Value:   0.800}', "");
Expect(0, 8535, '\P{^Numeric_Value:   0.800}', "");
Error('\p{Nv=/a/_ +4/0005}');
Error('\P{Nv=/a/_ +4/0005}');
Expect(1, 8536, '\p{Nv=0000004/0005}', "");
Expect(0, 8536, '\p{^Nv=0000004/0005}', "");
Expect(0, 8536, '\P{Nv=0000004/0005}', "");
Expect(1, 8536, '\P{^Nv=0000004/0005}', "");
Expect(0, 8535, '\p{Nv=0000004/0005}', "");
Expect(1, 8535, '\p{^Nv=0000004/0005}', "");
Expect(1, 8535, '\P{Nv=0000004/0005}', "");
Expect(0, 8535, '\P{^Nv=0000004/0005}', "");
Expect(1, 8536, '\p{Nv=0.800}', "");
Expect(0, 8536, '\p{^Nv=0.800}', "");
Expect(0, 8536, '\P{Nv=0.800}', "");
Expect(1, 8536, '\P{^Nv=0.800}', "");
Expect(0, 8535, '\p{Nv=0.800}', "");
Expect(1, 8535, '\p{^Nv=0.800}', "");
Expect(1, 8535, '\P{Nv=0.800}', "");
Expect(0, 8535, '\P{^Nv=0.800}', "");
Error('\p{Is_Numeric_Value=/a/_ 00004/0000005}');
Error('\P{Is_Numeric_Value=/a/_ 00004/0000005}');
Expect(1, 8536, '\p{Is_Numeric_Value=+4/5}', "");
Expect(0, 8536, '\p{^Is_Numeric_Value=+4/5}', "");
Expect(0, 8536, '\P{Is_Numeric_Value=+4/5}', "");
Expect(1, 8536, '\P{^Is_Numeric_Value=+4/5}', "");
Expect(0, 8535, '\p{Is_Numeric_Value=+4/5}', "");
Expect(1, 8535, '\p{^Is_Numeric_Value=+4/5}', "");
Expect(1, 8535, '\P{Is_Numeric_Value=+4/5}', "");
Expect(0, 8535, '\P{^Is_Numeric_Value=+4/5}', "");
Expect(1, 8536, '\p{Is_Numeric_Value=0.800}', "");
Expect(0, 8536, '\p{^Is_Numeric_Value=0.800}', "");
Expect(0, 8536, '\P{Is_Numeric_Value=0.800}', "");
Expect(1, 8536, '\P{^Is_Numeric_Value=0.800}', "");
Expect(0, 8535, '\p{Is_Numeric_Value=0.800}', "");
Expect(1, 8535, '\p{^Is_Numeric_Value=0.800}', "");
Expect(1, 8535, '\P{Is_Numeric_Value=0.800}', "");
Expect(0, 8535, '\P{^Is_Numeric_Value=0.800}', "");
Error('\p{Is_Nv=_+000000004/005/a/}');
Error('\P{Is_Nv=_+000000004/005/a/}');
Expect(1, 8536, '\p{Is_Nv=00000004/0000000005}', "");
Expect(0, 8536, '\p{^Is_Nv=00000004/0000000005}', "");
Expect(0, 8536, '\P{Is_Nv=00000004/0000000005}', "");
Expect(1, 8536, '\P{^Is_Nv=00000004/0000000005}', "");
Expect(0, 8535, '\p{Is_Nv=00000004/0000000005}', "");
Expect(1, 8535, '\p{^Is_Nv=00000004/0000000005}', "");
Expect(1, 8535, '\P{Is_Nv=00000004/0000000005}', "");
Expect(0, 8535, '\P{^Is_Nv=00000004/0000000005}', "");
Expect(1, 8536, '\p{Is_Nv=0.800}', "");
Expect(0, 8536, '\p{^Is_Nv=0.800}', "");
Expect(0, 8536, '\P{Is_Nv=0.800}', "");
Expect(1, 8536, '\P{^Is_Nv=0.800}', "");
Expect(0, 8535, '\p{Is_Nv=0.800}', "");
Expect(1, 8535, '\p{^Is_Nv=0.800}', "");
Expect(1, 8535, '\P{Is_Nv=0.800}', "");
Expect(0, 8535, '\P{^Is_Nv=0.800}', "");
Error('\p{Numeric_Value=_	0001_3/a/}');
Error('\P{Numeric_Value=_	0001_3/a/}');
Expect(1, 9324, '\p{Numeric_Value=0000000013}', "");
Expect(0, 9324, '\p{^Numeric_Value=0000000013}', "");
Expect(0, 9324, '\P{Numeric_Value=0000000013}', "");
Expect(1, 9324, '\P{^Numeric_Value=0000000013}', "");
Expect(0, 9323, '\p{Numeric_Value=0000000013}', "");
Expect(1, 9323, '\p{^Numeric_Value=0000000013}', "");
Expect(1, 9323, '\P{Numeric_Value=0000000013}', "");
Expect(0, 9323, '\P{^Numeric_Value=0000000013}', "");
Error('\p{Nv=	_+001_3/a/}');
Error('\P{Nv=	_+001_3/a/}');
Expect(1, 9324, '\p{Nv:   0000013}', "");
Expect(0, 9324, '\p{^Nv:   0000013}', "");
Expect(0, 9324, '\P{Nv:   0000013}', "");
Expect(1, 9324, '\P{^Nv:   0000013}', "");
Expect(0, 9323, '\p{Nv:   0000013}', "");
Expect(1, 9323, '\p{^Nv:   0000013}', "");
Expect(1, 9323, '\P{Nv:   0000013}', "");
Expect(0, 9323, '\P{^Nv:   0000013}', "");
Error('\p{Is_Numeric_Value= 	00001	3:=}');
Error('\P{Is_Numeric_Value= 	00001	3:=}');
Expect(1, 9324, '\p{Is_Numeric_Value=+00000001_3}', "");
Expect(0, 9324, '\p{^Is_Numeric_Value=+00000001_3}', "");
Expect(0, 9324, '\P{Is_Numeric_Value=+00000001_3}', "");
Expect(1, 9324, '\P{^Is_Numeric_Value=+00000001_3}', "");
Expect(0, 9323, '\p{Is_Numeric_Value=+00000001_3}', "");
Expect(1, 9323, '\p{^Is_Numeric_Value=+00000001_3}', "");
Expect(1, 9323, '\P{Is_Numeric_Value=+00000001_3}', "");
Expect(0, 9323, '\P{^Is_Numeric_Value=+00000001_3}', "");
Error('\p{Is_Nv=/a/_0000013}');
Error('\P{Is_Nv=/a/_0000013}');
Expect(1, 9324, '\p{Is_Nv=+013}', "");
Expect(0, 9324, '\p{^Is_Nv=+013}', "");
Expect(0, 9324, '\P{Is_Nv=+013}', "");
Expect(1, 9324, '\P{^Is_Nv=+013}', "");
Expect(0, 9323, '\p{Is_Nv=+013}', "");
Expect(1, 9323, '\p{^Is_Nv=+013}', "");
Expect(1, 9323, '\P{Is_Nv=+013}', "");
Expect(0, 9323, '\P{^Is_Nv=+013}', "");
Error('\p{Numeric_Value=/a/_	000000006}');
Error('\P{Numeric_Value=/a/_	000000006}');
Expect(1, 54, '\p{Numeric_Value=006}', "");
Expect(0, 54, '\p{^Numeric_Value=006}', "");
Expect(0, 54, '\P{Numeric_Value=006}', "");
Expect(1, 54, '\P{^Numeric_Value=006}', "");
Expect(0, 53, '\p{Numeric_Value=006}', "");
Expect(1, 53, '\p{^Numeric_Value=006}', "");
Expect(1, 53, '\P{Numeric_Value=006}', "");
Expect(0, 53, '\P{^Numeric_Value=006}', "");
Error('\p{Nv=:=+0006}');
Error('\P{Nv=:=+0006}');
Expect(1, 54, '\p{Nv=6}', "");
Expect(0, 54, '\p{^Nv=6}', "");
Expect(0, 54, '\P{Nv=6}', "");
Expect(1, 54, '\P{^Nv=6}', "");
Expect(0, 53, '\p{Nv=6}', "");
Expect(1, 53, '\p{^Nv=6}', "");
Expect(1, 53, '\P{Nv=6}', "");
Expect(0, 53, '\P{^Nv=6}', "");
Error('\p{Is_Numeric_Value=	/a/00006}');
Error('\P{Is_Numeric_Value=	/a/00006}');
Expect(1, 54, '\p{Is_Numeric_Value=+6}', "");
Expect(0, 54, '\p{^Is_Numeric_Value=+6}', "");
Expect(0, 54, '\P{Is_Numeric_Value=+6}', "");
Expect(1, 54, '\P{^Is_Numeric_Value=+6}', "");
Expect(0, 53, '\p{Is_Numeric_Value=+6}', "");
Expect(1, 53, '\p{^Is_Numeric_Value=+6}', "");
Expect(1, 53, '\P{Is_Numeric_Value=+6}', "");
Expect(0, 53, '\P{^Is_Numeric_Value=+6}', "");
Error('\p{Is_Nv:   :=__+00006}');
Error('\P{Is_Nv:   :=__+00006}');
Expect(1, 54, '\p{Is_Nv=+0000006}', "");
Expect(0, 54, '\p{^Is_Nv=+0000006}', "");
Expect(0, 54, '\P{Is_Nv=+0000006}', "");
Expect(1, 54, '\P{^Is_Nv=+0000006}', "");
Expect(0, 53, '\p{Is_Nv=+0000006}', "");
Expect(1, 53, '\p{^Is_Nv=+0000006}', "");
Expect(1, 53, '\P{Is_Nv=+0000006}', "");
Expect(0, 53, '\P{^Is_Nv=+0000006}', "");
Error('\p{Numeric_Value=/a/-0000 070000}');
Error('\P{Numeric_Value=/a/-0000 070000}');
Expect(1, 65841, '\p{Numeric_Value=+000070000}', "");
Expect(0, 65841, '\p{^Numeric_Value=+000070000}', "");
Expect(0, 65841, '\P{Numeric_Value=+000070000}', "");
Expect(1, 65841, '\P{^Numeric_Value=+000070000}', "");
Expect(0, 65840, '\p{Numeric_Value=+000070000}', "");
Expect(1, 65840, '\p{^Numeric_Value=+000070000}', "");
Expect(1, 65840, '\P{Numeric_Value=+000070000}', "");
Expect(0, 65840, '\P{^Numeric_Value=+000070000}', "");
Error('\p{Nv= 0	0-0_0_0 0 7-0 0:=00}');
Error('\P{Nv= 0	0-0_0_0 0 7-0 0:=00}');
Expect(1, 65841, '\p{Nv=00000070000}', "");
Expect(0, 65841, '\p{^Nv=00000070000}', "");
Expect(0, 65841, '\P{Nv=00000070000}', "");
Expect(1, 65841, '\P{^Nv=00000070000}', "");
Expect(0, 65840, '\p{Nv=00000070000}', "");
Expect(1, 65840, '\p{^Nv=00000070000}', "");
Expect(1, 65840, '\P{Nv=00000070000}', "");
Expect(0, 65840, '\P{^Nv=00000070000}', "");
Error('\p{Is_Numeric_Value=	-000070000:=}');
Error('\P{Is_Numeric_Value=	-000070000:=}');
Expect(1, 65841, '\p{Is_Numeric_Value=0_0_0_0_0_0_070000}', "");
Expect(0, 65841, '\p{^Is_Numeric_Value=0_0_0_0_0_0_070000}', "");
Expect(0, 65841, '\P{Is_Numeric_Value=0_0_0_0_0_0_070000}', "");
Expect(1, 65841, '\P{^Is_Numeric_Value=0_0_0_0_0_0_070000}', "");
Expect(0, 65840, '\p{Is_Numeric_Value=0_0_0_0_0_0_070000}', "");
Expect(1, 65840, '\p{^Is_Numeric_Value=0_0_0_0_0_0_070000}', "");
Expect(1, 65840, '\P{Is_Numeric_Value=0_0_0_0_0_0_070000}', "");
Expect(0, 65840, '\P{^Is_Numeric_Value=0_0_0_0_0_0_070000}', "");
Error('\p{Is_Nv= /a/0_0-0_00 000_70000}');
Error('\P{Is_Nv= /a/0_0-0_00 000_70000}');
Expect(1, 65841, '\p{Is_Nv=00000070000}', "");
Expect(0, 65841, '\p{^Is_Nv=00000070000}', "");
Expect(0, 65841, '\P{Is_Nv=00000070000}', "");
Expect(1, 65841, '\P{^Is_Nv=00000070000}', "");
Expect(0, 65840, '\p{Is_Nv=00000070000}', "");
Expect(1, 65840, '\p{^Is_Nv=00000070000}', "");
Expect(1, 65840, '\P{Is_Nv=00000070000}', "");
Expect(0, 65840, '\P{^Is_Nv=00000070000}', "");
Error('\p{Numeric_Value=:=000 000-003 6}');
Error('\P{Numeric_Value=:=000 000-003 6}');
Expect(1, 12977, '\p{Numeric_Value=3_6}', "");
Expect(0, 12977, '\p{^Numeric_Value=3_6}', "");
Expect(0, 12977, '\P{Numeric_Value=3_6}', "");
Expect(1, 12977, '\P{^Numeric_Value=3_6}', "");
Expect(0, 12976, '\p{Numeric_Value=3_6}', "");
Expect(1, 12976, '\p{^Numeric_Value=3_6}', "");
Expect(1, 12976, '\P{Numeric_Value=3_6}', "");
Expect(0, 12976, '\P{^Numeric_Value=3_6}', "");
Error('\p{Nv= _+00036:=}');
Error('\P{Nv= _+00036:=}');
Expect(1, 12977, '\p{Nv=0000036}', "");
Expect(0, 12977, '\p{^Nv=0000036}', "");
Expect(0, 12977, '\P{Nv=0000036}', "");
Expect(1, 12977, '\P{^Nv=0000036}', "");
Expect(0, 12976, '\p{Nv=0000036}', "");
Expect(1, 12976, '\p{^Nv=0000036}', "");
Expect(1, 12976, '\P{Nv=0000036}', "");
Expect(0, 12976, '\P{^Nv=0000036}', "");
Error('\p{Is_Numeric_Value= 036/a/}');
Error('\P{Is_Numeric_Value= 036/a/}');
Expect(1, 12977, '\p{Is_Numeric_Value=+000000036}', "");
Expect(0, 12977, '\p{^Is_Numeric_Value=+000000036}', "");
Expect(0, 12977, '\P{Is_Numeric_Value=+000000036}', "");
Expect(1, 12977, '\P{^Is_Numeric_Value=+000000036}', "");
Expect(0, 12976, '\p{Is_Numeric_Value=+000000036}', "");
Expect(1, 12976, '\p{^Is_Numeric_Value=+000000036}', "");
Expect(1, 12976, '\P{Is_Numeric_Value=+000000036}', "");
Expect(0, 12976, '\P{^Is_Numeric_Value=+000000036}', "");
Error('\p{Is_Nv=/a/- 0000036}');
Error('\P{Is_Nv=/a/- 0000036}');
Expect(1, 12977, '\p{Is_Nv=0000000036}', "");
Expect(0, 12977, '\p{^Is_Nv=0000000036}', "");
Expect(0, 12977, '\P{Is_Nv=0000000036}', "");
Expect(1, 12977, '\P{^Is_Nv=0000000036}', "");
Expect(0, 12976, '\p{Is_Nv=0000000036}', "");
Expect(1, 12976, '\p{^Is_Nv=0000000036}', "");
Expect(1, 12976, '\P{Is_Nv=0000000036}', "");
Expect(0, 12976, '\P{^Is_Nv=0000000036}', "");
Error('\p{Numeric_Value=:=-00000003}');
Error('\P{Numeric_Value=:=-00000003}');
Expect(1, 51, '\p{Numeric_Value=00000_3}', "");
Expect(0, 51, '\p{^Numeric_Value=00000_3}', "");
Expect(0, 51, '\P{Numeric_Value=00000_3}', "");
Expect(1, 51, '\P{^Numeric_Value=00000_3}', "");
Expect(0, 50, '\p{Numeric_Value=00000_3}', "");
Expect(1, 50, '\p{^Numeric_Value=00000_3}', "");
Expect(1, 50, '\P{Numeric_Value=00000_3}', "");
Expect(0, 50, '\P{^Numeric_Value=00000_3}', "");
Error('\p{Nv=-00 3:=}');
Error('\P{Nv=-00 3:=}');
Expect(1, 51, '\p{Nv=000000_3}', "");
Expect(0, 51, '\p{^Nv=000000_3}', "");
Expect(0, 51, '\P{Nv=000000_3}', "");
Expect(1, 51, '\P{^Nv=000000_3}', "");
Expect(0, 50, '\p{Nv=000000_3}', "");
Expect(1, 50, '\p{^Nv=000000_3}', "");
Expect(1, 50, '\P{Nv=000000_3}', "");
Expect(0, 50, '\P{^Nv=000000_3}', "");
Error('\p{Is_Numeric_Value=:=+0	0-00-0 0003}');
Error('\P{Is_Numeric_Value=:=+0	0-00-0 0003}');
Expect(1, 51, '\p{Is_Numeric_Value=3}', "");
Expect(0, 51, '\p{^Is_Numeric_Value=3}', "");
Expect(0, 51, '\P{Is_Numeric_Value=3}', "");
Expect(1, 51, '\P{^Is_Numeric_Value=3}', "");
Expect(0, 50, '\p{Is_Numeric_Value=3}', "");
Expect(1, 50, '\p{^Is_Numeric_Value=3}', "");
Expect(1, 50, '\P{Is_Numeric_Value=3}', "");
Expect(0, 50, '\P{^Is_Numeric_Value=3}', "");
Error('\p{Is_Nv=/a/000003}');
Error('\P{Is_Nv=/a/000003}');
Expect(1, 51, '\p{Is_Nv=00000_3}', "");
Expect(0, 51, '\p{^Is_Nv=00000_3}', "");
Expect(0, 51, '\P{Is_Nv=00000_3}', "");
Expect(1, 51, '\P{^Is_Nv=00000_3}', "");
Expect(0, 50, '\p{Is_Nv=00000_3}', "");
Expect(1, 50, '\p{^Is_Nv=00000_3}', "");
Expect(1, 50, '\P{Is_Nv=00000_3}', "");
Expect(0, 50, '\P{^Is_Nv=00000_3}', "");
Error('\p{Numeric_Value=/a/ -+00005000}');
Error('\P{Numeric_Value=/a/ -+00005000}');
Expect(1, 8577, '\p{Numeric_Value=0000_0050_00}', "");
Expect(0, 8577, '\p{^Numeric_Value=0000_0050_00}', "");
Expect(0, 8577, '\P{Numeric_Value=0000_0050_00}', "");
Expect(1, 8577, '\P{^Numeric_Value=0000_0050_00}', "");
Expect(0, 8576, '\p{Numeric_Value=0000_0050_00}', "");
Expect(1, 8576, '\p{^Numeric_Value=0000_0050_00}', "");
Expect(1, 8576, '\P{Numeric_Value=0000_0050_00}', "");
Expect(0, 8576, '\P{^Numeric_Value=0000_0050_00}', "");
Error('\p{Nv=_0000 0500 0:=}');
Error('\P{Nv=_0000 0500 0:=}');
Expect(1, 8577, '\p{Nv=+00000005000}', "");
Expect(0, 8577, '\p{^Nv=+00000005000}', "");
Expect(0, 8577, '\P{Nv=+00000005000}', "");
Expect(1, 8577, '\P{^Nv=+00000005000}', "");
Expect(0, 8576, '\p{Nv=+00000005000}', "");
Expect(1, 8576, '\p{^Nv=+00000005000}', "");
Expect(1, 8576, '\P{Nv=+00000005000}', "");
Expect(0, 8576, '\P{^Nv=+00000005000}', "");
Error('\p{Is_Numeric_Value=	_+0 0:=5 000}');
Error('\P{Is_Numeric_Value=	_+0 0:=5 000}');
Expect(1, 8577, '\p{Is_Numeric_Value=00_00_00_50_00}', "");
Expect(0, 8577, '\p{^Is_Numeric_Value=00_00_00_50_00}', "");
Expect(0, 8577, '\P{Is_Numeric_Value=00_00_00_50_00}', "");
Expect(1, 8577, '\P{^Is_Numeric_Value=00_00_00_50_00}', "");
Expect(0, 8576, '\p{Is_Numeric_Value=00_00_00_50_00}', "");
Expect(1, 8576, '\p{^Is_Numeric_Value=00_00_00_50_00}', "");
Expect(1, 8576, '\P{Is_Numeric_Value=00_00_00_50_00}', "");
Expect(0, 8576, '\P{^Is_Numeric_Value=00_00_00_50_00}', "");
Error('\p{Is_Nv= 0:=0-5	0_00}');
Error('\P{Is_Nv= 0:=0-5	0_00}');
Expect(1, 8577, '\p{Is_Nv=+5000}', "");
Expect(0, 8577, '\p{^Is_Nv=+5000}', "");
Expect(0, 8577, '\P{Is_Nv=+5000}', "");
Expect(1, 8577, '\P{^Is_Nv=+5000}', "");
Expect(0, 8576, '\p{Is_Nv=+5000}', "");
Expect(1, 8576, '\p{^Is_Nv=+5000}', "");
Expect(1, 8576, '\P{Is_Nv=+5000}', "");
Expect(0, 8576, '\P{^Is_Nv=+5000}', "");
Error('\p{Numeric_Value=-/a/000	000 9}');
Error('\P{Numeric_Value=-/a/000	000 9}');
Expect(1, 57, '\p{Numeric_Value=000000009}', "");
Expect(0, 57, '\p{^Numeric_Value=000000009}', "");
Expect(0, 57, '\P{Numeric_Value=000000009}', "");
Expect(1, 57, '\P{^Numeric_Value=000000009}', "");
Expect(0, 56, '\p{Numeric_Value=000000009}', "");
Expect(1, 56, '\p{^Numeric_Value=000000009}', "");
Expect(1, 56, '\P{Numeric_Value=000000009}', "");
Expect(0, 56, '\P{^Numeric_Value=000000009}', "");
Error('\p{Nv=:= _0009}');
Error('\P{Nv=:= _0009}');
Expect(1, 57, '\p{Nv=0000000009}', "");
Expect(0, 57, '\p{^Nv=0000000009}', "");
Expect(0, 57, '\P{Nv=0000000009}', "");
Expect(1, 57, '\P{^Nv=0000000009}', "");
Expect(0, 56, '\p{Nv=0000000009}', "");
Expect(1, 56, '\p{^Nv=0000000009}', "");
Expect(1, 56, '\P{Nv=0000000009}', "");
Expect(0, 56, '\P{^Nv=0000000009}', "");
Error('\p{Is_Numeric_Value=-/a/+00000009}');
Error('\P{Is_Numeric_Value=-/a/+00000009}');
Expect(1, 57, '\p{Is_Numeric_Value=0000000_9}', "");
Expect(0, 57, '\p{^Is_Numeric_Value=0000000_9}', "");
Expect(0, 57, '\P{Is_Numeric_Value=0000000_9}', "");
Expect(1, 57, '\P{^Is_Numeric_Value=0000000_9}', "");
Expect(0, 56, '\p{Is_Numeric_Value=0000000_9}', "");
Expect(1, 56, '\p{^Is_Numeric_Value=0000000_9}', "");
Expect(1, 56, '\P{Is_Numeric_Value=0000000_9}', "");
Expect(0, 56, '\P{^Is_Numeric_Value=0000000_9}', "");
Error('\p{Is_Nv:   	_0000 9/a/}');
Error('\P{Is_Nv:   	_0000 9/a/}');
Expect(1, 57, '\p{Is_Nv=0000_9}', "");
Expect(0, 57, '\p{^Is_Nv=0000_9}', "");
Expect(0, 57, '\P{Is_Nv=0000_9}', "");
Expect(1, 57, '\P{^Is_Nv=0000_9}', "");
Expect(0, 56, '\p{Is_Nv=0000_9}', "");
Expect(1, 56, '\p{^Is_Nv=0000_9}', "");
Expect(1, 56, '\P{Is_Nv=0000_9}', "");
Expect(0, 56, '\P{^Is_Nv=0000_9}', "");
Error('\p{Numeric_Value=-/a/0 1_00-00}');
Error('\P{Numeric_Value=-/a/0 1_00-00}');
Expect(1, 4988, '\p{Numeric_Value=+00000010000}', "");
Expect(0, 4988, '\p{^Numeric_Value=+00000010000}', "");
Expect(0, 4988, '\P{Numeric_Value=+00000010000}', "");
Expect(1, 4988, '\P{^Numeric_Value=+00000010000}', "");
Expect(0, 4987, '\p{Numeric_Value=+00000010000}', "");
Expect(1, 4987, '\p{^Numeric_Value=+00000010000}', "");
Expect(1, 4987, '\P{Numeric_Value=+00000010000}', "");
Expect(0, 4987, '\P{^Numeric_Value=+00000010000}', "");
Error('\p{Nv= :=00000000010000}');
Error('\P{Nv= :=00000000010000}');
Expect(1, 4988, '\p{Nv=10000}', "");
Expect(0, 4988, '\p{^Nv=10000}', "");
Expect(0, 4988, '\P{Nv=10000}', "");
Expect(1, 4988, '\P{^Nv=10000}', "");
Expect(0, 4987, '\p{Nv=10000}', "");
Expect(1, 4987, '\p{^Nv=10000}', "");
Expect(1, 4987, '\P{Nv=10000}', "");
Expect(0, 4987, '\P{^Nv=10000}', "");
Error('\p{Is_Numeric_Value:/a/ -00000000010000}');
Error('\P{Is_Numeric_Value:/a/ -00000000010000}');
Expect(1, 4988, '\p{Is_Numeric_Value=0000000010000}', "");
Expect(0, 4988, '\p{^Is_Numeric_Value=0000000010000}', "");
Expect(0, 4988, '\P{Is_Numeric_Value=0000000010000}', "");
Expect(1, 4988, '\P{^Is_Numeric_Value=0000000010000}', "");
Expect(0, 4987, '\p{Is_Numeric_Value=0000000010000}', "");
Expect(1, 4987, '\p{^Is_Numeric_Value=0000000010000}', "");
Expect(1, 4987, '\P{Is_Numeric_Value=0000000010000}', "");
Expect(0, 4987, '\P{^Is_Numeric_Value=0000000010000}', "");
Error('\p{Is_Nv= -+0-0	0_0-0	0-0 10000:=}');
Error('\P{Is_Nv= -+0-0	0_0-0	0-0 10000:=}');
Expect(1, 4988, '\p{Is_Nv=000_000_000_100_00}', "");
Expect(0, 4988, '\p{^Is_Nv=000_000_000_100_00}', "");
Expect(0, 4988, '\P{Is_Nv=000_000_000_100_00}', "");
Expect(1, 4988, '\P{^Is_Nv=000_000_000_100_00}', "");
Expect(0, 4987, '\p{Is_Nv=000_000_000_100_00}', "");
Expect(1, 4987, '\p{^Is_Nv=000_000_000_100_00}', "");
Expect(1, 4987, '\P{Is_Nv=000_000_000_100_00}', "");
Expect(0, 4987, '\P{^Is_Nv=000_000_000_100_00}', "");
Error('\p{Numeric_Value=/a/+00000004	7}');
Error('\P{Numeric_Value=/a/+00000004	7}');
Expect(1, 12988, '\p{Numeric_Value=0000000047}', "");
Expect(0, 12988, '\p{^Numeric_Value=0000000047}', "");
Expect(0, 12988, '\P{Numeric_Value=0000000047}', "");
Expect(1, 12988, '\P{^Numeric_Value=0000000047}', "");
Expect(0, 12987, '\p{Numeric_Value=0000000047}', "");
Expect(1, 12987, '\p{^Numeric_Value=0000000047}', "");
Expect(1, 12987, '\P{Numeric_Value=0000000047}', "");
Expect(0, 12987, '\P{^Numeric_Value=0000000047}', "");
Error('\p{Nv=-004/a/7}');
Error('\P{Nv=-004/a/7}');
Expect(1, 12988, '\p{Nv=004_7}', "");
Expect(0, 12988, '\p{^Nv=004_7}', "");
Expect(0, 12988, '\P{Nv=004_7}', "");
Expect(1, 12988, '\P{^Nv=004_7}', "");
Expect(0, 12987, '\p{Nv=004_7}', "");
Expect(1, 12987, '\p{^Nv=004_7}', "");
Expect(1, 12987, '\P{Nv=004_7}', "");
Expect(0, 12987, '\P{^Nv=004_7}', "");
Error('\p{Is_Numeric_Value=-00-047:=}');
Error('\P{Is_Numeric_Value=-00-047:=}');
Expect(1, 12988, '\p{Is_Numeric_Value=+00004_7}', "");
Expect(0, 12988, '\p{^Is_Numeric_Value=+00004_7}', "");
Expect(0, 12988, '\P{Is_Numeric_Value=+00004_7}', "");
Expect(1, 12988, '\P{^Is_Numeric_Value=+00004_7}', "");
Expect(0, 12987, '\p{Is_Numeric_Value=+00004_7}', "");
Expect(1, 12987, '\p{^Is_Numeric_Value=+00004_7}', "");
Expect(1, 12987, '\P{Is_Numeric_Value=+00004_7}', "");
Expect(0, 12987, '\P{^Is_Numeric_Value=+00004_7}', "");
Error('\p{Is_Nv=_:=0000000047}');
Error('\P{Is_Nv=_:=0000000047}');
Expect(1, 12988, '\p{Is_Nv=+0000_0000_47}', "");
Expect(0, 12988, '\p{^Is_Nv=+0000_0000_47}', "");
Expect(0, 12988, '\P{Is_Nv=+0000_0000_47}', "");
Expect(1, 12988, '\P{^Is_Nv=+0000_0000_47}', "");
Expect(0, 12987, '\p{Is_Nv=+0000_0000_47}', "");
Expect(1, 12987, '\p{^Is_Nv=+0000_0000_47}', "");
Expect(1, 12987, '\P{Is_Nv=+0000_0000_47}', "");
Expect(0, 12987, '\P{^Is_Nv=+0000_0000_47}', "");
Error('\p{Numeric_Value=:=0000001/00000006}');
Error('\P{Numeric_Value=:=0000001/00000006}');
Expect(1, 8537, '\p{Numeric_Value=01/000006}', "");
Expect(0, 8537, '\p{^Numeric_Value=01/000006}', "");
Expect(0, 8537, '\P{Numeric_Value=01/000006}', "");
Expect(1, 8537, '\P{^Numeric_Value=01/000006}', "");
Expect(0, 8536, '\p{Numeric_Value=01/000006}', "");
Expect(1, 8536, '\p{^Numeric_Value=01/000006}', "");
Expect(1, 8536, '\P{Numeric_Value=01/000006}', "");
Expect(0, 8536, '\P{^Numeric_Value=01/000006}', "");
Error('\p{Numeric_Value=0.17}');
Error('\P{Numeric_Value=0.17}');
Expect(1, 8537, '\p{Numeric_Value=0.167}', "");
Expect(0, 8537, '\p{^Numeric_Value=0.167}', "");
Expect(0, 8537, '\P{Numeric_Value=0.167}', "");
Expect(1, 8537, '\P{^Numeric_Value=0.167}', "");
Expect(0, 8536, '\p{Numeric_Value=0.167}', "");
Expect(1, 8536, '\p{^Numeric_Value=0.167}', "");
Expect(1, 8536, '\P{Numeric_Value=0.167}', "");
Expect(0, 8536, '\P{^Numeric_Value=0.167}', "");
Error('\p{Nv=-/a/01/006}');
Error('\P{Nv=-/a/01/006}');
Expect(1, 8537, '\p{Nv=+000001/06}', "");
Expect(0, 8537, '\p{^Nv=+000001/06}', "");
Expect(0, 8537, '\P{Nv=+000001/06}', "");
Expect(1, 8537, '\P{^Nv=+000001/06}', "");
Expect(0, 8536, '\p{Nv=+000001/06}', "");
Expect(1, 8536, '\p{^Nv=+000001/06}', "");
Expect(1, 8536, '\P{Nv=+000001/06}', "");
Expect(0, 8536, '\P{^Nv=+000001/06}', "");
Error('\p{Nv=0.17}');
Error('\P{Nv=0.17}');
Expect(1, 8537, '\p{Nv=0.167}', "");
Expect(0, 8537, '\p{^Nv=0.167}', "");
Expect(0, 8537, '\P{Nv=0.167}', "");
Expect(1, 8537, '\P{^Nv=0.167}', "");
Expect(0, 8536, '\p{Nv=0.167}', "");
Expect(1, 8536, '\p{^Nv=0.167}', "");
Expect(1, 8536, '\P{Nv=0.167}', "");
Expect(0, 8536, '\P{^Nv=0.167}', "");
Error('\p{Is_Numeric_Value=	00001/00000006/a/}');
Error('\P{Is_Numeric_Value=	00001/00000006/a/}');
Expect(1, 8537, '\p{Is_Numeric_Value=000001/00006}', "");
Expect(0, 8537, '\p{^Is_Numeric_Value=000001/00006}', "");
Expect(0, 8537, '\P{Is_Numeric_Value=000001/00006}', "");
Expect(1, 8537, '\P{^Is_Numeric_Value=000001/00006}', "");
Expect(0, 8536, '\p{Is_Numeric_Value=000001/00006}', "");
Expect(1, 8536, '\p{^Is_Numeric_Value=000001/00006}', "");
Expect(1, 8536, '\P{Is_Numeric_Value=000001/00006}', "");
Expect(0, 8536, '\P{^Is_Numeric_Value=000001/00006}', "");
Error('\p{Is_Numeric_Value=0.17}');
Error('\P{Is_Numeric_Value=0.17}');
Expect(1, 8537, '\p{Is_Numeric_Value=0.167}', "");
Expect(0, 8537, '\p{^Is_Numeric_Value=0.167}', "");
Expect(0, 8537, '\P{Is_Numeric_Value=0.167}', "");
Expect(1, 8537, '\P{^Is_Numeric_Value=0.167}', "");
Expect(0, 8536, '\p{Is_Numeric_Value=0.167}', "");
Expect(1, 8536, '\p{^Is_Numeric_Value=0.167}', "");
Expect(1, 8536, '\P{Is_Numeric_Value=0.167}', "");
Expect(0, 8536, '\P{^Is_Numeric_Value=0.167}', "");
Error('\p{Is_Nv=	_+1/0000000006:=}');
Error('\P{Is_Nv=	_+1/0000000006:=}');
Expect(1, 8537, '\p{Is_Nv=+0001/00000006}', "");
Expect(0, 8537, '\p{^Is_Nv=+0001/00000006}', "");
Expect(0, 8537, '\P{Is_Nv=+0001/00000006}', "");
Expect(1, 8537, '\P{^Is_Nv=+0001/00000006}', "");
Expect(0, 8536, '\p{Is_Nv=+0001/00000006}', "");
Expect(1, 8536, '\p{^Is_Nv=+0001/00000006}', "");
Expect(1, 8536, '\P{Is_Nv=+0001/00000006}', "");
Expect(0, 8536, '\P{^Is_Nv=+0001/00000006}', "");
Error('\p{Is_Nv=0.17}');
Error('\P{Is_Nv=0.17}');
Expect(1, 8537, '\p{Is_Nv=0.167}', "");
Expect(0, 8537, '\p{^Is_Nv=0.167}', "");
Expect(0, 8537, '\P{Is_Nv=0.167}', "");
Expect(1, 8537, '\P{^Is_Nv=0.167}', "");
Expect(0, 8536, '\p{Is_Nv=0.167}', "");
Expect(1, 8536, '\p{^Is_Nv=0.167}', "");
Expect(1, 8536, '\P{Is_Nv=0.167}', "");
Expect(0, 8536, '\P{^Is_Nv=0.167}', "");
Error('\p{Numeric_Value= 	000:=003_8}');
Error('\P{Numeric_Value= 	000:=003_8}');
Expect(1, 12979, '\p{Numeric_Value=000038}', "");
Expect(0, 12979, '\p{^Numeric_Value=000038}', "");
Expect(0, 12979, '\P{Numeric_Value=000038}', "");
Expect(1, 12979, '\P{^Numeric_Value=000038}', "");
Expect(0, 12978, '\p{Numeric_Value=000038}', "");
Expect(1, 12978, '\p{^Numeric_Value=000038}', "");
Expect(1, 12978, '\P{Numeric_Value=000038}', "");
Expect(0, 12978, '\P{^Numeric_Value=000038}', "");
Error('\p{Nv=-0000000038:=}');
Error('\P{Nv=-0000000038:=}');
Expect(1, 12979, '\p{Nv=38}', "");
Expect(0, 12979, '\p{^Nv=38}', "");
Expect(0, 12979, '\P{Nv=38}', "");
Expect(1, 12979, '\P{^Nv=38}', "");
Expect(0, 12978, '\p{Nv=38}', "");
Expect(1, 12978, '\p{^Nv=38}', "");
Expect(1, 12978, '\P{Nv=38}', "");
Expect(0, 12978, '\P{^Nv=38}', "");
Error('\p{Is_Numeric_Value=:=+38}');
Error('\P{Is_Numeric_Value=:=+38}');
Expect(1, 12979, '\p{Is_Numeric_Value=03_8}', "");
Expect(0, 12979, '\p{^Is_Numeric_Value=03_8}', "");
Expect(0, 12979, '\P{Is_Numeric_Value=03_8}', "");
Expect(1, 12979, '\P{^Is_Numeric_Value=03_8}', "");
Expect(0, 12978, '\p{Is_Numeric_Value=03_8}', "");
Expect(1, 12978, '\p{^Is_Numeric_Value=03_8}', "");
Expect(1, 12978, '\P{Is_Numeric_Value=03_8}', "");
Expect(0, 12978, '\P{^Is_Numeric_Value=03_8}', "");
Error('\p{Is_Nv= /a/00000038}');
Error('\P{Is_Nv= /a/00000038}');
Expect(1, 12979, '\p{Is_Nv=+0038}', "");
Expect(0, 12979, '\p{^Is_Nv=+0038}', "");
Expect(0, 12979, '\P{Is_Nv=+0038}', "");
Expect(1, 12979, '\P{^Is_Nv=+0038}', "");
Expect(0, 12978, '\p{Is_Nv=+0038}', "");
Expect(1, 12978, '\p{^Is_Nv=+0038}', "");
Expect(1, 12978, '\P{Is_Nv=+0038}', "");
Expect(0, 12978, '\P{^Is_Nv=+0038}', "");
Error('\p{Numeric_Value=	0_0/a/0 0 0 0_0008}');
Error('\P{Numeric_Value=	0_0/a/0 0 0 0_0008}');
Expect(1, 56, '\p{Numeric_Value=08}', "");
Expect(0, 56, '\p{^Numeric_Value=08}', "");
Expect(0, 56, '\P{Numeric_Value=08}', "");
Expect(1, 56, '\P{^Numeric_Value=08}', "");
Expect(0, 55, '\p{Numeric_Value=08}', "");
Expect(1, 55, '\p{^Numeric_Value=08}', "");
Expect(1, 55, '\P{Numeric_Value=08}', "");
Expect(0, 55, '\P{^Numeric_Value=08}', "");
Error('\p{Nv= +8/a/}');
Error('\P{Nv= +8/a/}');
Expect(1, 56, '\p{Nv=+0_0_0_0_0_0008}', "");
Expect(0, 56, '\p{^Nv=+0_0_0_0_0_0008}', "");
Expect(0, 56, '\P{Nv=+0_0_0_0_0_0008}', "");
Expect(1, 56, '\P{^Nv=+0_0_0_0_0_0008}', "");
Expect(0, 55, '\p{Nv=+0_0_0_0_0_0008}', "");
Expect(1, 55, '\p{^Nv=+0_0_0_0_0_0008}', "");
Expect(1, 55, '\P{Nv=+0_0_0_0_0_0008}', "");
Expect(0, 55, '\P{^Nv=+0_0_0_0_0_0008}', "");
Error('\p{Is_Numeric_Value:	  00000008:=}');
Error('\P{Is_Numeric_Value:	  00000008:=}');
Expect(1, 56, '\p{Is_Numeric_Value=00_00_00_00_08}', "");
Expect(0, 56, '\p{^Is_Numeric_Value=00_00_00_00_08}', "");
Expect(0, 56, '\P{Is_Numeric_Value=00_00_00_00_08}', "");
Expect(1, 56, '\P{^Is_Numeric_Value=00_00_00_00_08}', "");
Expect(0, 55, '\p{Is_Numeric_Value=00_00_00_00_08}', "");
Expect(1, 55, '\p{^Is_Numeric_Value=00_00_00_00_08}', "");
Expect(1, 55, '\P{Is_Numeric_Value=00_00_00_00_08}', "");
Expect(0, 55, '\P{^Is_Numeric_Value=00_00_00_00_08}', "");
Error('\p{Is_Nv=--0-8:=}');
Error('\P{Is_Nv=--0-8:=}');
Expect(1, 56, '\p{Is_Nv=08}', "");
Expect(0, 56, '\p{^Is_Nv=08}', "");
Expect(0, 56, '\P{Is_Nv=08}', "");
Expect(1, 56, '\P{^Is_Nv=08}', "");
Expect(0, 55, '\p{Is_Nv=08}', "");
Expect(1, 55, '\p{^Is_Nv=08}', "");
Expect(1, 55, '\P{Is_Nv=08}', "");
Expect(0, 55, '\P{^Is_Nv=08}', "");
Error('\p{Numeric_Value=/a/_000000003/000004}');
Error('\P{Numeric_Value=/a/_000000003/000004}');
Expect(1, 190, '\p{Numeric_Value=+3/0000004}', "");
Expect(0, 190, '\p{^Numeric_Value=+3/0000004}', "");
Expect(0, 190, '\P{Numeric_Value=+3/0000004}', "");
Expect(1, 190, '\P{^Numeric_Value=+3/0000004}', "");
Expect(0, 189, '\p{Numeric_Value=+3/0000004}', "");
Expect(1, 189, '\p{^Numeric_Value=+3/0000004}', "");
Expect(1, 189, '\P{Numeric_Value=+3/0000004}', "");
Expect(0, 189, '\P{^Numeric_Value=+3/0000004}', "");
Expect(1, 190, '\p{Numeric_Value=0.750}', "");
Expect(0, 190, '\p{^Numeric_Value=0.750}', "");
Expect(0, 190, '\P{Numeric_Value=0.750}', "");
Expect(1, 190, '\P{^Numeric_Value=0.750}', "");
Expect(0, 189, '\p{Numeric_Value=0.750}', "");
Expect(1, 189, '\p{^Numeric_Value=0.750}', "");
Expect(1, 189, '\P{Numeric_Value=0.750}', "");
Expect(0, 189, '\P{^Numeric_Value=0.750}', "");
Error('\p{Nv=	-03/0000000004:=}');
Error('\P{Nv=	-03/0000000004:=}');
Expect(1, 190, '\p{Nv=+0003/0000004}', "");
Expect(0, 190, '\p{^Nv=+0003/0000004}', "");
Expect(0, 190, '\P{Nv=+0003/0000004}', "");
Expect(1, 190, '\P{^Nv=+0003/0000004}', "");
Expect(0, 189, '\p{Nv=+0003/0000004}', "");
Expect(1, 189, '\p{^Nv=+0003/0000004}', "");
Expect(1, 189, '\P{Nv=+0003/0000004}', "");
Expect(0, 189, '\P{^Nv=+0003/0000004}', "");
Expect(1, 190, '\p{Nv=0.750}', "");
Expect(0, 190, '\p{^Nv=0.750}', "");
Expect(0, 190, '\P{Nv=0.750}', "");
Expect(1, 190, '\P{^Nv=0.750}', "");
Expect(0, 189, '\p{Nv=0.750}', "");
Expect(1, 189, '\p{^Nv=0.750}', "");
Expect(1, 189, '\P{Nv=0.750}', "");
Expect(0, 189, '\P{^Nv=0.750}', "");
Error('\p{Is_Numeric_Value=	_0003/4:=}');
Error('\P{Is_Numeric_Value=	_0003/4:=}');
Expect(1, 190, '\p{Is_Numeric_Value:	0000003/0000004}', "");
Expect(0, 190, '\p{^Is_Numeric_Value:	0000003/0000004}', "");
Expect(0, 190, '\P{Is_Numeric_Value:	0000003/0000004}', "");
Expect(1, 190, '\P{^Is_Numeric_Value:	0000003/0000004}', "");
Expect(0, 189, '\p{Is_Numeric_Value:	0000003/0000004}', "");
Expect(1, 189, '\p{^Is_Numeric_Value:	0000003/0000004}', "");
Expect(1, 189, '\P{Is_Numeric_Value:	0000003/0000004}', "");
Expect(0, 189, '\P{^Is_Numeric_Value:	0000003/0000004}', "");
Expect(1, 190, '\p{Is_Numeric_Value=0.750}', "");
Expect(0, 190, '\p{^Is_Numeric_Value=0.750}', "");
Expect(0, 190, '\P{Is_Numeric_Value=0.750}', "");
Expect(1, 190, '\P{^Is_Numeric_Value=0.750}', "");
Expect(0, 189, '\p{Is_Numeric_Value=0.750}', "");
Expect(1, 189, '\p{^Is_Numeric_Value=0.750}', "");
Expect(1, 189, '\P{Is_Numeric_Value=0.750}', "");
Expect(0, 189, '\P{^Is_Numeric_Value=0.750}', "");
Error('\p{Is_Nv=/a/-00000003/04}');
Error('\P{Is_Nv=/a/-00000003/04}');
Expect(1, 190, '\p{Is_Nv=003/0004}', "");
Expect(0, 190, '\p{^Is_Nv=003/0004}', "");
Expect(0, 190, '\P{Is_Nv=003/0004}', "");
Expect(1, 190, '\P{^Is_Nv=003/0004}', "");
Expect(0, 189, '\p{Is_Nv=003/0004}', "");
Expect(1, 189, '\p{^Is_Nv=003/0004}', "");
Expect(1, 189, '\P{Is_Nv=003/0004}', "");
Expect(0, 189, '\P{^Is_Nv=003/0004}', "");
Expect(1, 190, '\p{Is_Nv=0.750}', "");
Expect(0, 190, '\p{^Is_Nv=0.750}', "");
Expect(0, 190, '\P{Is_Nv=0.750}', "");
Expect(1, 190, '\P{^Is_Nv=0.750}', "");
Expect(0, 189, '\p{Is_Nv=0.750}', "");
Expect(1, 189, '\p{^Is_Nv=0.750}', "");
Expect(1, 189, '\P{Is_Nv=0.750}', "");
Expect(0, 189, '\P{^Is_Nv=0.750}', "");
Error('\p{Numeric_Value=-	0/a/0_0-00_04}');
Error('\P{Numeric_Value=-	0/a/0_0-00_04}');
Expect(1, 52, '\p{Numeric_Value=+0_4}', "");
Expect(0, 52, '\p{^Numeric_Value=+0_4}', "");
Expect(0, 52, '\P{Numeric_Value=+0_4}', "");
Expect(1, 52, '\P{^Numeric_Value=+0_4}', "");
Expect(0, 51, '\p{Numeric_Value=+0_4}', "");
Expect(1, 51, '\p{^Numeric_Value=+0_4}', "");
Expect(1, 51, '\P{Numeric_Value=+0_4}', "");
Expect(0, 51, '\P{^Numeric_Value=+0_4}', "");
Error('\p{Nv=-000004/a/}');
Error('\P{Nv=-000004/a/}');
Expect(1, 52, '\p{Nv=00004}', "");
Expect(0, 52, '\p{^Nv=00004}', "");
Expect(0, 52, '\P{Nv=00004}', "");
Expect(1, 52, '\P{^Nv=00004}', "");
Expect(0, 51, '\p{Nv=00004}', "");
Expect(1, 51, '\p{^Nv=00004}', "");
Expect(1, 51, '\P{Nv=00004}', "");
Expect(0, 51, '\P{^Nv=00004}', "");
Error('\p{Is_Numeric_Value=-/a/00004}');
Error('\P{Is_Numeric_Value=-/a/00004}');
Expect(1, 52, '\p{Is_Numeric_Value=0_0_0_0_0004}', "");
Expect(0, 52, '\p{^Is_Numeric_Value=0_0_0_0_0004}', "");
Expect(0, 52, '\P{Is_Numeric_Value=0_0_0_0_0004}', "");
Expect(1, 52, '\P{^Is_Numeric_Value=0_0_0_0_0004}', "");
Expect(0, 51, '\p{Is_Numeric_Value=0_0_0_0_0004}', "");
Expect(1, 51, '\p{^Is_Numeric_Value=0_0_0_0_0004}', "");
Expect(1, 51, '\P{Is_Numeric_Value=0_0_0_0_0004}', "");
Expect(0, 51, '\P{^Is_Numeric_Value=0_0_0_0_0004}', "");
Error('\p{Is_Nv=_	4:=}');
Error('\P{Is_Nv=_	4:=}');
Expect(1, 52, '\p{Is_Nv=0_0_0_0_0_0_0_0_04}', "");
Expect(0, 52, '\p{^Is_Nv=0_0_0_0_0_0_0_0_04}', "");
Expect(0, 52, '\P{Is_Nv=0_0_0_0_0_0_0_0_04}', "");
Expect(1, 52, '\P{^Is_Nv=0_0_0_0_0_0_0_0_04}', "");
Expect(0, 51, '\p{Is_Nv=0_0_0_0_0_0_0_0_04}', "");
Expect(1, 51, '\p{^Is_Nv=0_0_0_0_0_0_0_0_04}', "");
Expect(1, 51, '\P{Is_Nv=0_0_0_0_0_0_0_0_04}', "");
Expect(0, 51, '\P{^Is_Nv=0_0_0_0_0_0_0_0_04}', "");
Error('\p{Numeric_Value=:= 	00000034}');
Error('\P{Numeric_Value=:= 	00000034}');
Expect(1, 12894, '\p{Numeric_Value:   +0000034}', "");
Expect(0, 12894, '\p{^Numeric_Value:   +0000034}', "");
Expect(0, 12894, '\P{Numeric_Value:   +0000034}', "");
Expect(1, 12894, '\P{^Numeric_Value:   +0000034}', "");
Expect(0, 12893, '\p{Numeric_Value:   +0000034}', "");
Expect(1, 12893, '\p{^Numeric_Value:   +0000034}', "");
Expect(1, 12893, '\P{Numeric_Value:   +0000034}', "");
Expect(0, 12893, '\P{^Numeric_Value:   +0000034}', "");
Error('\p{Nv=_:=0000034}');
Error('\P{Nv=_:=0000034}');
Expect(1, 12894, '\p{Nv=0_0_34}', "");
Expect(0, 12894, '\p{^Nv=0_0_34}', "");
Expect(0, 12894, '\P{Nv=0_0_34}', "");
Expect(1, 12894, '\P{^Nv=0_0_34}', "");
Expect(0, 12893, '\p{Nv=0_0_34}', "");
Expect(1, 12893, '\p{^Nv=0_0_34}', "");
Expect(1, 12893, '\P{Nv=0_0_34}', "");
Expect(0, 12893, '\P{^Nv=0_0_34}', "");
Error('\p{Is_Numeric_Value=-/a/0000034}');
Error('\P{Is_Numeric_Value=-/a/0000034}');
Expect(1, 12894, '\p{Is_Numeric_Value=00000000034}', "");
Expect(0, 12894, '\p{^Is_Numeric_Value=00000000034}', "");
Expect(0, 12894, '\P{Is_Numeric_Value=00000000034}', "");
Expect(1, 12894, '\P{^Is_Numeric_Value=00000000034}', "");
Expect(0, 12893, '\p{Is_Numeric_Value=00000000034}', "");
Expect(1, 12893, '\p{^Is_Numeric_Value=00000000034}', "");
Expect(1, 12893, '\P{Is_Numeric_Value=00000000034}', "");
Expect(0, 12893, '\P{^Is_Numeric_Value=00000000034}', "");
Error('\p{Is_Nv=_ +0 000 0:=0	034}');
Error('\P{Is_Nv=_ +0 000 0:=0	034}');
Expect(1, 12894, '\p{Is_Nv=0_0_34}', "");
Expect(0, 12894, '\p{^Is_Nv=0_0_34}', "");
Expect(0, 12894, '\P{Is_Nv=0_0_34}', "");
Expect(1, 12894, '\P{^Is_Nv=0_0_34}', "");
Expect(0, 12893, '\p{Is_Nv=0_0_34}', "");
Expect(1, 12893, '\p{^Is_Nv=0_0_34}', "");
Expect(1, 12893, '\P{Is_Nv=0_0_34}', "");
Expect(0, 12893, '\P{^Is_Nv=0_0_34}', "");
Error('\p{Numeric_Value=	0000003 7/a/}');
Error('\P{Numeric_Value=	0000003 7/a/}');
Expect(1, 12978, '\p{Numeric_Value=0000037}', "");
Expect(0, 12978, '\p{^Numeric_Value=0000037}', "");
Expect(0, 12978, '\P{Numeric_Value=0000037}', "");
Expect(1, 12978, '\P{^Numeric_Value=0000037}', "");
Expect(0, 12977, '\p{Numeric_Value=0000037}', "");
Expect(1, 12977, '\p{^Numeric_Value=0000037}', "");
Expect(1, 12977, '\P{Numeric_Value=0000037}', "");
Expect(0, 12977, '\P{^Numeric_Value=0000037}', "");
Error('\p{Nv=-/a/00000037}');
Error('\P{Nv=-/a/00000037}');
Expect(1, 12978, '\p{Nv=00_00_00_037}', "");
Expect(0, 12978, '\p{^Nv=00_00_00_037}', "");
Expect(0, 12978, '\P{Nv=00_00_00_037}', "");
Expect(1, 12978, '\P{^Nv=00_00_00_037}', "");
Expect(0, 12977, '\p{Nv=00_00_00_037}', "");
Expect(1, 12977, '\p{^Nv=00_00_00_037}', "");
Expect(1, 12977, '\P{Nv=00_00_00_037}', "");
Expect(0, 12977, '\P{^Nv=00_00_00_037}', "");
Error('\p{Is_Numeric_Value=-:=+0000000037}');
Error('\P{Is_Numeric_Value=-:=+0000000037}');
Expect(1, 12978, '\p{Is_Numeric_Value=037}', "");
Expect(0, 12978, '\p{^Is_Numeric_Value=037}', "");
Expect(0, 12978, '\P{Is_Numeric_Value=037}', "");
Expect(1, 12978, '\P{^Is_Numeric_Value=037}', "");
Expect(0, 12977, '\p{Is_Numeric_Value=037}', "");
Expect(1, 12977, '\p{^Is_Numeric_Value=037}', "");
Expect(1, 12977, '\P{Is_Numeric_Value=037}', "");
Expect(0, 12977, '\P{^Is_Numeric_Value=037}', "");
Error('\p{Is_Nv=- 000000037:=}');
Error('\P{Is_Nv=- 000000037:=}');
Expect(1, 12978, '\p{Is_Nv=3_7}', "");
Expect(0, 12978, '\p{^Is_Nv=3_7}', "");
Expect(0, 12978, '\P{Is_Nv=3_7}', "");
Expect(1, 12978, '\P{^Is_Nv=3_7}', "");
Expect(0, 12977, '\p{Is_Nv=3_7}', "");
Expect(1, 12977, '\p{^Is_Nv=3_7}', "");
Expect(1, 12977, '\P{Is_Nv=3_7}', "");
Expect(0, 12977, '\P{^Is_Nv=3_7}', "");
Error('\p{Numeric_Value=-	+0000000005/000000002/a/}');
Error('\P{Numeric_Value=-	+0000000005/000000002/a/}');
Expect(1, 3884, '\p{Numeric_Value=+00000005/0002}', "");
Expect(0, 3884, '\p{^Numeric_Value=+00000005/0002}', "");
Expect(0, 3884, '\P{Numeric_Value=+00000005/0002}', "");
Expect(1, 3884, '\P{^Numeric_Value=+00000005/0002}', "");
Expect(0, 3883, '\p{Numeric_Value=+00000005/0002}', "");
Expect(1, 3883, '\p{^Numeric_Value=+00000005/0002}', "");
Expect(1, 3883, '\P{Numeric_Value=+00000005/0002}', "");
Expect(0, 3883, '\P{^Numeric_Value=+00000005/0002}', "");
Expect(1, 3884, '\p{Numeric_Value:	2.500}', "");
Expect(0, 3884, '\p{^Numeric_Value:	2.500}', "");
Expect(0, 3884, '\P{Numeric_Value:	2.500}', "");
Expect(1, 3884, '\P{^Numeric_Value:	2.500}', "");
Expect(0, 3883, '\p{Numeric_Value:	2.500}', "");
Expect(1, 3883, '\p{^Numeric_Value:	2.500}', "");
Expect(1, 3883, '\P{Numeric_Value:	2.500}', "");
Expect(0, 3883, '\P{^Numeric_Value:	2.500}', "");
Error('\p{Nv:_:=+05/00000002}');
Error('\P{Nv:_:=+05/00000002}');
Expect(1, 3884, '\p{Nv=5/2}', "");
Expect(0, 3884, '\p{^Nv=5/2}', "");
Expect(0, 3884, '\P{Nv=5/2}', "");
Expect(1, 3884, '\P{^Nv=5/2}', "");
Expect(0, 3883, '\p{Nv=5/2}', "");
Expect(1, 3883, '\p{^Nv=5/2}', "");
Expect(1, 3883, '\P{Nv=5/2}', "");
Expect(0, 3883, '\P{^Nv=5/2}', "");
Expect(1, 3884, '\p{Nv=2.500}', "");
Expect(0, 3884, '\p{^Nv=2.500}', "");
Expect(0, 3884, '\P{Nv=2.500}', "");
Expect(1, 3884, '\P{^Nv=2.500}', "");
Expect(0, 3883, '\p{Nv=2.500}', "");
Expect(1, 3883, '\p{^Nv=2.500}', "");
Expect(1, 3883, '\P{Nv=2.500}', "");
Expect(0, 3883, '\P{^Nv=2.500}', "");
Error('\p{Is_Numeric_Value=-_+000000005/2/a/}');
Error('\P{Is_Numeric_Value=-_+000000005/2/a/}');
Expect(1, 3884, '\p{Is_Numeric_Value: 0000005/0000002}', "");
Expect(0, 3884, '\p{^Is_Numeric_Value: 0000005/0000002}', "");
Expect(0, 3884, '\P{Is_Numeric_Value: 0000005/0000002}', "");
Expect(1, 3884, '\P{^Is_Numeric_Value: 0000005/0000002}', "");
Expect(0, 3883, '\p{Is_Numeric_Value: 0000005/0000002}', "");
Expect(1, 3883, '\p{^Is_Numeric_Value: 0000005/0000002}', "");
Expect(1, 3883, '\P{Is_Numeric_Value: 0000005/0000002}', "");
Expect(0, 3883, '\P{^Is_Numeric_Value: 0000005/0000002}', "");
Expect(1, 3884, '\p{Is_Numeric_Value=2.500}', "");
Expect(0, 3884, '\p{^Is_Numeric_Value=2.500}', "");
Expect(0, 3884, '\P{Is_Numeric_Value=2.500}', "");
Expect(1, 3884, '\P{^Is_Numeric_Value=2.500}', "");
Expect(0, 3883, '\p{Is_Numeric_Value=2.500}', "");
Expect(1, 3883, '\p{^Is_Numeric_Value=2.500}', "");
Expect(1, 3883, '\P{Is_Numeric_Value=2.500}', "");
Expect(0, 3883, '\P{^Is_Numeric_Value=2.500}', "");
Error('\p{Is_Nv=-/a/+05/2}');
Error('\P{Is_Nv=-/a/+05/2}');
Expect(1, 3884, '\p{Is_Nv=+0005/000000002}', "");
Expect(0, 3884, '\p{^Is_Nv=+0005/000000002}', "");
Expect(0, 3884, '\P{Is_Nv=+0005/000000002}', "");
Expect(1, 3884, '\P{^Is_Nv=+0005/000000002}', "");
Expect(0, 3883, '\p{Is_Nv=+0005/000000002}', "");
Expect(1, 3883, '\p{^Is_Nv=+0005/000000002}', "");
Expect(1, 3883, '\P{Is_Nv=+0005/000000002}', "");
Expect(0, 3883, '\P{^Is_Nv=+0005/000000002}', "");
Expect(1, 3884, '\p{Is_Nv=2.500}', "");
Expect(0, 3884, '\p{^Is_Nv=2.500}', "");
Expect(0, 3884, '\P{Is_Nv=2.500}', "");
Expect(1, 3884, '\P{^Is_Nv=2.500}', "");
Expect(0, 3883, '\p{Is_Nv=2.500}', "");
Expect(1, 3883, '\p{^Is_Nv=2.500}', "");
Expect(1, 3883, '\P{Is_Nv=2.500}', "");
Expect(0, 3883, '\P{^Is_Nv=2.500}', "");
Error('\p{Numeric_Value=/a/_	+000000001000}');
Error('\P{Numeric_Value=/a/_	+000000001000}');
Expect(1, 3058, '\p{Numeric_Value=+0_0_0_0_0_0_0_01000}', "");
Expect(0, 3058, '\p{^Numeric_Value=+0_0_0_0_0_0_0_01000}', "");
Expect(0, 3058, '\P{Numeric_Value=+0_0_0_0_0_0_0_01000}', "");
Expect(1, 3058, '\P{^Numeric_Value=+0_0_0_0_0_0_0_01000}', "");
Expect(0, 3057, '\p{Numeric_Value=+0_0_0_0_0_0_0_01000}', "");
Expect(1, 3057, '\p{^Numeric_Value=+0_0_0_0_0_0_0_01000}', "");
Expect(1, 3057, '\P{Numeric_Value=+0_0_0_0_0_0_0_01000}', "");
Expect(0, 3057, '\P{^Numeric_Value=+0_0_0_0_0_0_0_01000}', "");
Error('\p{Nv=:=	-+1000}');
Error('\P{Nv=:=	-+1000}');
Expect(1, 3058, '\p{Nv=0_1_0_00}', "");
Expect(0, 3058, '\p{^Nv=0_1_0_00}', "");
Expect(0, 3058, '\P{Nv=0_1_0_00}', "");
Expect(1, 3058, '\P{^Nv=0_1_0_00}', "");
Expect(0, 3057, '\p{Nv=0_1_0_00}', "");
Expect(1, 3057, '\p{^Nv=0_1_0_00}', "");
Expect(1, 3057, '\P{Nv=0_1_0_00}', "");
Expect(0, 3057, '\P{^Nv=0_1_0_00}', "");
Error('\p{Is_Numeric_Value=_-0/a/0 0	0_0	1-0_00}');
Error('\P{Is_Numeric_Value=_-0/a/0 0	0_0	1-0_00}');
Expect(1, 3058, '\p{Is_Numeric_Value:	0000001000}', "");
Expect(0, 3058, '\p{^Is_Numeric_Value:	0000001000}', "");
Expect(0, 3058, '\P{Is_Numeric_Value:	0000001000}', "");
Expect(1, 3058, '\P{^Is_Numeric_Value:	0000001000}', "");
Expect(0, 3057, '\p{Is_Numeric_Value:	0000001000}', "");
Expect(1, 3057, '\p{^Is_Numeric_Value:	0000001000}', "");
Expect(1, 3057, '\P{Is_Numeric_Value:	0000001000}', "");
Expect(0, 3057, '\P{^Is_Numeric_Value:	0000001000}', "");
Error('\p{Is_Nv=/a/ 000001000}');
Error('\P{Is_Nv=/a/ 000001000}');
Expect(1, 3058, '\p{Is_Nv=000000001000}', "");
Expect(0, 3058, '\p{^Is_Nv=000000001000}', "");
Expect(0, 3058, '\P{Is_Nv=000000001000}', "");
Expect(1, 3058, '\P{^Is_Nv=000000001000}', "");
Expect(0, 3057, '\p{Is_Nv=000000001000}', "");
Expect(1, 3057, '\p{^Is_Nv=000000001000}', "");
Expect(1, 3057, '\P{Is_Nv=000000001000}', "");
Expect(0, 3057, '\P{^Is_Nv=000000001000}', "");
Error('\p{Numeric_Value=	:=+04_3}');
Error('\P{Numeric_Value=	:=+04_3}');
Expect(1, 12984, '\p{Numeric_Value=000_000_004_3}', "");
Expect(0, 12984, '\p{^Numeric_Value=000_000_004_3}', "");
Expect(0, 12984, '\P{Numeric_Value=000_000_004_3}', "");
Expect(1, 12984, '\P{^Numeric_Value=000_000_004_3}', "");
Expect(0, 12983, '\p{Numeric_Value=000_000_004_3}', "");
Expect(1, 12983, '\p{^Numeric_Value=000_000_004_3}', "");
Expect(1, 12983, '\P{Numeric_Value=000_000_004_3}', "");
Expect(0, 12983, '\P{^Numeric_Value=000_000_004_3}', "");
Error('\p{Nv=_:=0043}');
Error('\P{Nv=_:=0043}');
Expect(1, 12984, '\p{Nv=000000004_3}', "");
Expect(0, 12984, '\p{^Nv=000000004_3}', "");
Expect(0, 12984, '\P{Nv=000000004_3}', "");
Expect(1, 12984, '\P{^Nv=000000004_3}', "");
Expect(0, 12983, '\p{Nv=000000004_3}', "");
Expect(1, 12983, '\p{^Nv=000000004_3}', "");
Expect(1, 12983, '\P{Nv=000000004_3}', "");
Expect(0, 12983, '\P{^Nv=000000004_3}', "");
Error('\p{Is_Numeric_Value=	/a/00000043}');
Error('\P{Is_Numeric_Value=	/a/00000043}');
Expect(1, 12984, '\p{Is_Numeric_Value=0_0_43}', "");
Expect(0, 12984, '\p{^Is_Numeric_Value=0_0_43}', "");
Expect(0, 12984, '\P{Is_Numeric_Value=0_0_43}', "");
Expect(1, 12984, '\P{^Is_Numeric_Value=0_0_43}', "");
Expect(0, 12983, '\p{Is_Numeric_Value=0_0_43}', "");
Expect(1, 12983, '\p{^Is_Numeric_Value=0_0_43}', "");
Expect(1, 12983, '\P{Is_Numeric_Value=0_0_43}', "");
Expect(0, 12983, '\P{^Is_Numeric_Value=0_0_43}', "");
Error('\p{Is_Nv=/a/  0000043}');
Error('\P{Is_Nv=/a/  0000043}');
Expect(1, 12984, '\p{Is_Nv=0000000043}', "");
Expect(0, 12984, '\p{^Is_Nv=0000000043}', "");
Expect(0, 12984, '\P{Is_Nv=0000000043}', "");
Expect(1, 12984, '\P{^Is_Nv=0000000043}', "");
Expect(0, 12983, '\p{Is_Nv=0000000043}', "");
Expect(1, 12983, '\p{^Is_Nv=0000000043}', "");
Expect(1, 12983, '\P{Is_Nv=0000000043}', "");
Expect(0, 12983, '\P{^Is_Nv=0000000043}', "");
Error('\p{Numeric_Value=:=00 00	0005}');
Error('\P{Numeric_Value=:=00 00	0005}');
Expect(1, 53, '\p{Numeric_Value=000005}', "");
Expect(0, 53, '\p{^Numeric_Value=000005}', "");
Expect(0, 53, '\P{Numeric_Value=000005}', "");
Expect(1, 53, '\P{^Numeric_Value=000005}', "");
Expect(0, 52, '\p{Numeric_Value=000005}', "");
Expect(1, 52, '\p{^Numeric_Value=000005}', "");
Expect(1, 52, '\P{Numeric_Value=000005}', "");
Expect(0, 52, '\P{^Numeric_Value=000005}', "");
Error('\p{Nv=_5/a/}');
Error('\P{Nv=_5/a/}');
Expect(1, 53, '\p{Nv=+000000005}', "");
Expect(0, 53, '\p{^Nv=+000000005}', "");
Expect(0, 53, '\P{Nv=+000000005}', "");
Expect(1, 53, '\P{^Nv=+000000005}', "");
Expect(0, 52, '\p{Nv=+000000005}', "");
Expect(1, 52, '\p{^Nv=+000000005}', "");
Expect(1, 52, '\P{Nv=+000000005}', "");
Expect(0, 52, '\P{^Nv=+000000005}', "");
Error('\p{Is_Numeric_Value::=_	5}');
Error('\P{Is_Numeric_Value::=_	5}');
Expect(1, 53, '\p{Is_Numeric_Value=0005}', "");
Expect(0, 53, '\p{^Is_Numeric_Value=0005}', "");
Expect(0, 53, '\P{Is_Numeric_Value=0005}', "");
Expect(1, 53, '\P{^Is_Numeric_Value=0005}', "");
Expect(0, 52, '\p{Is_Numeric_Value=0005}', "");
Expect(1, 52, '\p{^Is_Numeric_Value=0005}', "");
Expect(1, 52, '\P{Is_Numeric_Value=0005}', "");
Expect(0, 52, '\P{^Is_Numeric_Value=0005}', "");
Error('\p{Is_Nv=	+0:=0 0-00	05}');
Error('\P{Is_Nv=	+0:=0 0-00	05}');
Expect(1, 53, '\p{Is_Nv=00005}', "");
Expect(0, 53, '\p{^Is_Nv=00005}', "");
Expect(0, 53, '\P{Is_Nv=00005}', "");
Expect(1, 53, '\P{^Is_Nv=00005}', "");
Expect(0, 52, '\p{Is_Nv=00005}', "");
Expect(1, 52, '\p{^Is_Nv=00005}', "");
Expect(1, 52, '\P{Is_Nv=00005}', "");
Expect(0, 52, '\P{^Is_Nv=00005}', "");
Error('\p{Changes_When_Uppercased=yes/a/}');
Error('\P{Changes_When_Uppercased=yes/a/}');
Expect(1, 122, '\p{Changes_When_Uppercased=yes}', "");
Expect(0, 122, '\p{^Changes_When_Uppercased=yes}', "");
Expect(0, 122, '\P{Changes_When_Uppercased=yes}', "");
Expect(1, 122, '\P{^Changes_When_Uppercased=yes}', "");
Expect(0, 96, '\p{Changes_When_Uppercased=yes}', "");
Expect(1, 96, '\p{^Changes_When_Uppercased=yes}', "");
Expect(1, 96, '\P{Changes_When_Uppercased=yes}', "");
Expect(0, 96, '\P{^Changes_When_Uppercased=yes}', "");
Expect(1, 122, '\p{Changes_When_Uppercased=-	YES}', "");
Expect(0, 122, '\p{^Changes_When_Uppercased=-	YES}', "");
Expect(0, 122, '\P{Changes_When_Uppercased=-	YES}', "");
Expect(1, 122, '\P{^Changes_When_Uppercased=-	YES}', "");
Expect(0, 96, '\p{Changes_When_Uppercased=-	YES}', "");
Expect(1, 96, '\p{^Changes_When_Uppercased=-	YES}', "");
Expect(1, 96, '\P{Changes_When_Uppercased=-	YES}', "");
Expect(0, 96, '\P{^Changes_When_Uppercased=-	YES}', "");
Error('\p{CWU=:=y}');
Error('\P{CWU=:=y}');
Expect(1, 122, '\p{CWU=y}', "");
Expect(0, 122, '\p{^CWU=y}', "");
Expect(0, 122, '\P{CWU=y}', "");
Expect(1, 122, '\P{^CWU=y}', "");
Expect(0, 96, '\p{CWU=y}', "");
Expect(1, 96, '\p{^CWU=y}', "");
Expect(1, 96, '\P{CWU=y}', "");
Expect(0, 96, '\P{^CWU=y}', "");
Expect(1, 122, '\p{CWU=-y}', "");
Expect(0, 122, '\p{^CWU=-y}', "");
Expect(0, 122, '\P{CWU=-y}', "");
Expect(1, 122, '\P{^CWU=-y}', "");
Expect(0, 96, '\p{CWU=-y}', "");
Expect(1, 96, '\p{^CWU=-y}', "");
Expect(1, 96, '\P{CWU=-y}', "");
Expect(0, 96, '\P{^CWU=-y}', "");
Error('\p{Is_Changes_When_Uppercased=/a/_T}');
Error('\P{Is_Changes_When_Uppercased=/a/_T}');
Expect(1, 122, '\p{Is_Changes_When_Uppercased=t}', "");
Expect(0, 122, '\p{^Is_Changes_When_Uppercased=t}', "");
Expect(0, 122, '\P{Is_Changes_When_Uppercased=t}', "");
Expect(1, 122, '\P{^Is_Changes_When_Uppercased=t}', "");
Expect(0, 96, '\p{Is_Changes_When_Uppercased=t}', "");
Expect(1, 96, '\p{^Is_Changes_When_Uppercased=t}', "");
Expect(1, 96, '\P{Is_Changes_When_Uppercased=t}', "");
Expect(0, 96, '\P{^Is_Changes_When_Uppercased=t}', "");
Expect(1, 122, '\p{Is_Changes_When_Uppercased:	_t}', "");
Expect(0, 122, '\p{^Is_Changes_When_Uppercased:	_t}', "");
Expect(0, 122, '\P{Is_Changes_When_Uppercased:	_t}', "");
Expect(1, 122, '\P{^Is_Changes_When_Uppercased:	_t}', "");
Expect(0, 96, '\p{Is_Changes_When_Uppercased:	_t}', "");
Expect(1, 96, '\p{^Is_Changes_When_Uppercased:	_t}', "");
Expect(1, 96, '\P{Is_Changes_When_Uppercased:	_t}', "");
Expect(0, 96, '\P{^Is_Changes_When_Uppercased:	_t}', "");
Error('\p{Is_CWU=:=	 true}');
Error('\P{Is_CWU=:=	 true}');
Expect(1, 122, '\p{Is_CWU=true}', "");
Expect(0, 122, '\p{^Is_CWU=true}', "");
Expect(0, 122, '\P{Is_CWU=true}', "");
Expect(1, 122, '\P{^Is_CWU=true}', "");
Expect(0, 96, '\p{Is_CWU=true}', "");
Expect(1, 96, '\p{^Is_CWU=true}', "");
Expect(1, 96, '\P{Is_CWU=true}', "");
Expect(0, 96, '\P{^Is_CWU=true}', "");
Expect(1, 122, '\p{Is_CWU=-True}', "");
Expect(0, 122, '\p{^Is_CWU=-True}', "");
Expect(0, 122, '\P{Is_CWU=-True}', "");
Expect(1, 122, '\P{^Is_CWU=-True}', "");
Expect(0, 96, '\p{Is_CWU=-True}', "");
Expect(1, 96, '\p{^Is_CWU=-True}', "");
Expect(1, 96, '\P{Is_CWU=-True}', "");
Expect(0, 96, '\P{^Is_CWU=-True}', "");
Error('\p{Changes_When_Uppercased=_No/a/}');
Error('\P{Changes_When_Uppercased=_No/a/}');
Expect(1, 96, '\p{Changes_When_Uppercased=no}', "");
Expect(0, 96, '\p{^Changes_When_Uppercased=no}', "");
Expect(0, 96, '\P{Changes_When_Uppercased=no}', "");
Expect(1, 96, '\P{^Changes_When_Uppercased=no}', "");
Expect(0, 122, '\p{Changes_When_Uppercased=no}', "");
Expect(1, 122, '\p{^Changes_When_Uppercased=no}', "");
Expect(1, 122, '\P{Changes_When_Uppercased=no}', "");
Expect(0, 122, '\P{^Changes_When_Uppercased=no}', "");
Expect(1, 96, '\p{Changes_When_Uppercased=--NO}', "");
Expect(0, 96, '\p{^Changes_When_Uppercased=--NO}', "");
Expect(0, 96, '\P{Changes_When_Uppercased=--NO}', "");
Expect(1, 96, '\P{^Changes_When_Uppercased=--NO}', "");
Expect(0, 122, '\p{Changes_When_Uppercased=--NO}', "");
Expect(1, 122, '\p{^Changes_When_Uppercased=--NO}', "");
Expect(1, 122, '\P{Changes_When_Uppercased=--NO}', "");
Expect(0, 122, '\P{^Changes_When_Uppercased=--NO}', "");
Error('\p{CWU= n/a/}');
Error('\P{CWU= n/a/}');
Expect(1, 96, '\p{CWU=n}', "");
Expect(0, 96, '\p{^CWU=n}', "");
Expect(0, 96, '\P{CWU=n}', "");
Expect(1, 96, '\P{^CWU=n}', "");
Expect(0, 122, '\p{CWU=n}', "");
Expect(1, 122, '\p{^CWU=n}', "");
Expect(1, 122, '\P{CWU=n}', "");
Expect(0, 122, '\P{^CWU=n}', "");
Expect(1, 96, '\p{CWU=-N}', "");
Expect(0, 96, '\p{^CWU=-N}', "");
Expect(0, 96, '\P{CWU=-N}', "");
Expect(1, 96, '\P{^CWU=-N}', "");
Expect(0, 122, '\p{CWU=-N}', "");
Expect(1, 122, '\p{^CWU=-N}', "");
Expect(1, 122, '\P{CWU=-N}', "");
Expect(0, 122, '\P{^CWU=-N}', "");
Error('\p{Is_Changes_When_Uppercased=-/a/F}');
Error('\P{Is_Changes_When_Uppercased=-/a/F}');
Expect(1, 96, '\p{Is_Changes_When_Uppercased=f}', "");
Expect(0, 96, '\p{^Is_Changes_When_Uppercased=f}', "");
Expect(0, 96, '\P{Is_Changes_When_Uppercased=f}', "");
Expect(1, 96, '\P{^Is_Changes_When_Uppercased=f}', "");
Expect(0, 122, '\p{Is_Changes_When_Uppercased=f}', "");
Expect(1, 122, '\p{^Is_Changes_When_Uppercased=f}', "");
Expect(1, 122, '\P{Is_Changes_When_Uppercased=f}', "");
Expect(0, 122, '\P{^Is_Changes_When_Uppercased=f}', "");
Expect(1, 96, '\p{Is_Changes_When_Uppercased= -F}', "");
Expect(0, 96, '\p{^Is_Changes_When_Uppercased= -F}', "");
Expect(0, 96, '\P{Is_Changes_When_Uppercased= -F}', "");
Expect(1, 96, '\P{^Is_Changes_When_Uppercased= -F}', "");
Expect(0, 122, '\p{Is_Changes_When_Uppercased= -F}', "");
Expect(1, 122, '\p{^Is_Changes_When_Uppercased= -F}', "");
Expect(1, 122, '\P{Is_Changes_When_Uppercased= -F}', "");
Expect(0, 122, '\P{^Is_Changes_When_Uppercased= -F}', "");
Error('\p{Is_CWU=-_False:=}');
Error('\P{Is_CWU=-_False:=}');
Expect(1, 96, '\p{Is_CWU=false}', "");
Expect(0, 96, '\p{^Is_CWU=false}', "");
Expect(0, 96, '\P{Is_CWU=false}', "");
Expect(1, 96, '\P{^Is_CWU=false}', "");
Expect(0, 122, '\p{Is_CWU=false}', "");
Expect(1, 122, '\p{^Is_CWU=false}', "");
Expect(1, 122, '\P{Is_CWU=false}', "");
Expect(0, 122, '\P{^Is_CWU=false}', "");
Expect(1, 96, '\p{Is_CWU=-_FALSE}', "");
Expect(0, 96, '\p{^Is_CWU=-_FALSE}', "");
Expect(0, 96, '\P{Is_CWU=-_FALSE}', "");
Expect(1, 96, '\P{^Is_CWU=-_FALSE}', "");
Expect(0, 122, '\p{Is_CWU=-_FALSE}', "");
Expect(1, 122, '\p{^Is_CWU=-_FALSE}', "");
Expect(1, 122, '\P{Is_CWU=-_FALSE}', "");
Expect(0, 122, '\P{^Is_CWU=-_FALSE}', "");
Error('\p{Changes_When_Lowercased=--Yes/a/}');
Error('\P{Changes_When_Lowercased=--Yes/a/}');
Expect(1, 90, '\p{Changes_When_Lowercased=yes}', "");
Expect(0, 90, '\p{^Changes_When_Lowercased=yes}', "");
Expect(0, 90, '\P{Changes_When_Lowercased=yes}', "");
Expect(1, 90, '\P{^Changes_When_Lowercased=yes}', "");
Expect(0, 64, '\p{Changes_When_Lowercased=yes}', "");
Expect(1, 64, '\p{^Changes_When_Lowercased=yes}', "");
Expect(1, 64, '\P{Changes_When_Lowercased=yes}', "");
Expect(0, 64, '\P{^Changes_When_Lowercased=yes}', "");
Expect(1, 90, '\p{Changes_When_Lowercased=	-Yes}', "");
Expect(0, 90, '\p{^Changes_When_Lowercased=	-Yes}', "");
Expect(0, 90, '\P{Changes_When_Lowercased=	-Yes}', "");
Expect(1, 90, '\P{^Changes_When_Lowercased=	-Yes}', "");
Expect(0, 64, '\p{Changes_When_Lowercased=	-Yes}', "");
Expect(1, 64, '\p{^Changes_When_Lowercased=	-Yes}', "");
Expect(1, 64, '\P{Changes_When_Lowercased=	-Yes}', "");
Expect(0, 64, '\P{^Changes_When_Lowercased=	-Yes}', "");
Error('\p{CWL=_:=Y}');
Error('\P{CWL=_:=Y}');
Expect(1, 90, '\p{CWL=y}', "");
Expect(0, 90, '\p{^CWL=y}', "");
Expect(0, 90, '\P{CWL=y}', "");
Expect(1, 90, '\P{^CWL=y}', "");
Expect(0, 64, '\p{CWL=y}', "");
Expect(1, 64, '\p{^CWL=y}', "");
Expect(1, 64, '\P{CWL=y}', "");
Expect(0, 64, '\P{^CWL=y}', "");
Expect(1, 90, '\p{CWL=- Y}', "");
Expect(0, 90, '\p{^CWL=- Y}', "");
Expect(0, 90, '\P{CWL=- Y}', "");
Expect(1, 90, '\P{^CWL=- Y}', "");
Expect(0, 64, '\p{CWL=- Y}', "");
Expect(1, 64, '\p{^CWL=- Y}', "");
Expect(1, 64, '\P{CWL=- Y}', "");
Expect(0, 64, '\P{^CWL=- Y}', "");
Error('\p{Is_Changes_When_Lowercased: _	t/a/}');
Error('\P{Is_Changes_When_Lowercased: _	t/a/}');
Expect(1, 90, '\p{Is_Changes_When_Lowercased=t}', "");
Expect(0, 90, '\p{^Is_Changes_When_Lowercased=t}', "");
Expect(0, 90, '\P{Is_Changes_When_Lowercased=t}', "");
Expect(1, 90, '\P{^Is_Changes_When_Lowercased=t}', "");
Expect(0, 64, '\p{Is_Changes_When_Lowercased=t}', "");
Expect(1, 64, '\p{^Is_Changes_When_Lowercased=t}', "");
Expect(1, 64, '\P{Is_Changes_When_Lowercased=t}', "");
Expect(0, 64, '\P{^Is_Changes_When_Lowercased=t}', "");
Expect(1, 90, '\p{Is_Changes_When_Lowercased=_-t}', "");
Expect(0, 90, '\p{^Is_Changes_When_Lowercased=_-t}', "");
Expect(0, 90, '\P{Is_Changes_When_Lowercased=_-t}', "");
Expect(1, 90, '\P{^Is_Changes_When_Lowercased=_-t}', "");
Expect(0, 64, '\p{Is_Changes_When_Lowercased=_-t}', "");
Expect(1, 64, '\p{^Is_Changes_When_Lowercased=_-t}', "");
Expect(1, 64, '\P{Is_Changes_When_Lowercased=_-t}', "");
Expect(0, 64, '\P{^Is_Changes_When_Lowercased=_-t}', "");
Error('\p{Is_CWL:    /a/True}');
Error('\P{Is_CWL:    /a/True}');
Expect(1, 90, '\p{Is_CWL=true}', "");
Expect(0, 90, '\p{^Is_CWL=true}', "");
Expect(0, 90, '\P{Is_CWL=true}', "");
Expect(1, 90, '\P{^Is_CWL=true}', "");
Expect(0, 64, '\p{Is_CWL=true}', "");
Expect(1, 64, '\p{^Is_CWL=true}', "");
Expect(1, 64, '\P{Is_CWL=true}', "");
Expect(0, 64, '\P{^Is_CWL=true}', "");
Expect(1, 90, '\p{Is_CWL=  True}', "");
Expect(0, 90, '\p{^Is_CWL=  True}', "");
Expect(0, 90, '\P{Is_CWL=  True}', "");
Expect(1, 90, '\P{^Is_CWL=  True}', "");
Expect(0, 64, '\p{Is_CWL=  True}', "");
Expect(1, 64, '\p{^Is_CWL=  True}', "");
Expect(1, 64, '\P{Is_CWL=  True}', "");
Expect(0, 64, '\P{^Is_CWL=  True}', "");
Error('\p{Changes_When_Lowercased=-	No/a/}');
Error('\P{Changes_When_Lowercased=-	No/a/}');
Expect(1, 64, '\p{Changes_When_Lowercased=no}', "");
Expect(0, 64, '\p{^Changes_When_Lowercased=no}', "");
Expect(0, 64, '\P{Changes_When_Lowercased=no}', "");
Expect(1, 64, '\P{^Changes_When_Lowercased=no}', "");
Expect(0, 90, '\p{Changes_When_Lowercased=no}', "");
Expect(1, 90, '\p{^Changes_When_Lowercased=no}', "");
Expect(1, 90, '\P{Changes_When_Lowercased=no}', "");
Expect(0, 90, '\P{^Changes_When_Lowercased=no}', "");
Expect(1, 64, '\p{Changes_When_Lowercased=-	NO}', "");
Expect(0, 64, '\p{^Changes_When_Lowercased=-	NO}', "");
Expect(0, 64, '\P{Changes_When_Lowercased=-	NO}', "");
Expect(1, 64, '\P{^Changes_When_Lowercased=-	NO}', "");
Expect(0, 90, '\p{Changes_When_Lowercased=-	NO}', "");
Expect(1, 90, '\p{^Changes_When_Lowercased=-	NO}', "");
Expect(1, 90, '\P{Changes_When_Lowercased=-	NO}', "");
Expect(0, 90, '\P{^Changes_When_Lowercased=-	NO}', "");
Error('\p{CWL=	-N/a/}');
Error('\P{CWL=	-N/a/}');
Expect(1, 64, '\p{CWL=n}', "");
Expect(0, 64, '\p{^CWL=n}', "");
Expect(0, 64, '\P{CWL=n}', "");
Expect(1, 64, '\P{^CWL=n}', "");
Expect(0, 90, '\p{CWL=n}', "");
Expect(1, 90, '\p{^CWL=n}', "");
Expect(1, 90, '\P{CWL=n}', "");
Expect(0, 90, '\P{^CWL=n}', "");
Expect(1, 64, '\p{CWL=  N}', "");
Expect(0, 64, '\p{^CWL=  N}', "");
Expect(0, 64, '\P{CWL=  N}', "");
Expect(1, 64, '\P{^CWL=  N}', "");
Expect(0, 90, '\p{CWL=  N}', "");
Expect(1, 90, '\p{^CWL=  N}', "");
Expect(1, 90, '\P{CWL=  N}', "");
Expect(0, 90, '\P{^CWL=  N}', "");
Error('\p{Is_Changes_When_Lowercased=:=_ f}');
Error('\P{Is_Changes_When_Lowercased=:=_ f}');
Expect(1, 64, '\p{Is_Changes_When_Lowercased=f}', "");
Expect(0, 64, '\p{^Is_Changes_When_Lowercased=f}', "");
Expect(0, 64, '\P{Is_Changes_When_Lowercased=f}', "");
Expect(1, 64, '\P{^Is_Changes_When_Lowercased=f}', "");
Expect(0, 90, '\p{Is_Changes_When_Lowercased=f}', "");
Expect(1, 90, '\p{^Is_Changes_When_Lowercased=f}', "");
Expect(1, 90, '\P{Is_Changes_When_Lowercased=f}', "");
Expect(0, 90, '\P{^Is_Changes_When_Lowercased=f}', "");
Expect(1, 64, '\p{Is_Changes_When_Lowercased=-F}', "");
Expect(0, 64, '\p{^Is_Changes_When_Lowercased=-F}', "");
Expect(0, 64, '\P{Is_Changes_When_Lowercased=-F}', "");
Expect(1, 64, '\P{^Is_Changes_When_Lowercased=-F}', "");
Expect(0, 90, '\p{Is_Changes_When_Lowercased=-F}', "");
Expect(1, 90, '\p{^Is_Changes_When_Lowercased=-F}', "");
Expect(1, 90, '\P{Is_Changes_When_Lowercased=-F}', "");
Expect(0, 90, '\P{^Is_Changes_When_Lowercased=-F}', "");
Error('\p{Is_CWL=/a/- False}');
Error('\P{Is_CWL=/a/- False}');
Expect(1, 64, '\p{Is_CWL=false}', "");
Expect(0, 64, '\p{^Is_CWL=false}', "");
Expect(0, 64, '\P{Is_CWL=false}', "");
Expect(1, 64, '\P{^Is_CWL=false}', "");
Expect(0, 90, '\p{Is_CWL=false}', "");
Expect(1, 90, '\p{^Is_CWL=false}', "");
Expect(1, 90, '\P{Is_CWL=false}', "");
Expect(0, 90, '\P{^Is_CWL=false}', "");
Expect(1, 64, '\p{Is_CWL=_FALSE}', "");
Expect(0, 64, '\p{^Is_CWL=_FALSE}', "");
Expect(0, 64, '\P{Is_CWL=_FALSE}', "");
Expect(1, 64, '\P{^Is_CWL=_FALSE}', "");
Expect(0, 90, '\p{Is_CWL=_FALSE}', "");
Expect(1, 90, '\p{^Is_CWL=_FALSE}', "");
Expect(1, 90, '\P{Is_CWL=_FALSE}', "");
Expect(0, 90, '\P{^Is_CWL=_FALSE}', "");
Error('\p{Case_Ignorable=:=__yes}');
Error('\P{Case_Ignorable=:=__yes}');
Expect(1, 39, '\p{Case_Ignorable=yes}', "");
Expect(0, 39, '\p{^Case_Ignorable=yes}', "");
Expect(0, 39, '\P{Case_Ignorable=yes}', "");
Expect(1, 39, '\P{^Case_Ignorable=yes}', "");
Expect(0, 38, '\p{Case_Ignorable=yes}', "");
Expect(1, 38, '\p{^Case_Ignorable=yes}', "");
Expect(1, 38, '\P{Case_Ignorable=yes}', "");
Expect(0, 38, '\P{^Case_Ignorable=yes}', "");
Expect(1, 39, '\p{Case_Ignorable=-YES}', "");
Expect(0, 39, '\p{^Case_Ignorable=-YES}', "");
Expect(0, 39, '\P{Case_Ignorable=-YES}', "");
Expect(1, 39, '\P{^Case_Ignorable=-YES}', "");
Expect(0, 38, '\p{Case_Ignorable=-YES}', "");
Expect(1, 38, '\p{^Case_Ignorable=-YES}', "");
Expect(1, 38, '\P{Case_Ignorable=-YES}', "");
Expect(0, 38, '\P{^Case_Ignorable=-YES}', "");
Error('\p{CI=	/a/Y}');
Error('\P{CI=	/a/Y}');
Expect(1, 39, '\p{CI=y}', "");
Expect(0, 39, '\p{^CI=y}', "");
Expect(0, 39, '\P{CI=y}', "");
Expect(1, 39, '\P{^CI=y}', "");
Expect(0, 38, '\p{CI=y}', "");
Expect(1, 38, '\p{^CI=y}', "");
Expect(1, 38, '\P{CI=y}', "");
Expect(0, 38, '\P{^CI=y}', "");
Expect(1, 39, '\p{CI=--Y}', "");
Expect(0, 39, '\p{^CI=--Y}', "");
Expect(0, 39, '\P{CI=--Y}', "");
Expect(1, 39, '\P{^CI=--Y}', "");
Expect(0, 38, '\p{CI=--Y}', "");
Expect(1, 38, '\p{^CI=--Y}', "");
Expect(1, 38, '\P{CI=--Y}', "");
Expect(0, 38, '\P{^CI=--Y}', "");
Error('\p{Is_Case_Ignorable=-T:=}');
Error('\P{Is_Case_Ignorable=-T:=}');
Expect(1, 39, '\p{Is_Case_Ignorable=t}', "");
Expect(0, 39, '\p{^Is_Case_Ignorable=t}', "");
Expect(0, 39, '\P{Is_Case_Ignorable=t}', "");
Expect(1, 39, '\P{^Is_Case_Ignorable=t}', "");
Expect(0, 38, '\p{Is_Case_Ignorable=t}', "");
Expect(1, 38, '\p{^Is_Case_Ignorable=t}', "");
Expect(1, 38, '\P{Is_Case_Ignorable=t}', "");
Expect(0, 38, '\P{^Is_Case_Ignorable=t}', "");
Expect(1, 39, '\p{Is_Case_Ignorable=-T}', "");
Expect(0, 39, '\p{^Is_Case_Ignorable=-T}', "");
Expect(0, 39, '\P{Is_Case_Ignorable=-T}', "");
Expect(1, 39, '\P{^Is_Case_Ignorable=-T}', "");
Expect(0, 38, '\p{Is_Case_Ignorable=-T}', "");
Expect(1, 38, '\p{^Is_Case_Ignorable=-T}', "");
Expect(1, 38, '\P{Is_Case_Ignorable=-T}', "");
Expect(0, 38, '\P{^Is_Case_Ignorable=-T}', "");
Error('\p{Is_CI= True/a/}');
Error('\P{Is_CI= True/a/}');
Expect(1, 39, '\p{Is_CI=true}', "");
Expect(0, 39, '\p{^Is_CI=true}', "");
Expect(0, 39, '\P{Is_CI=true}', "");
Expect(1, 39, '\P{^Is_CI=true}', "");
Expect(0, 38, '\p{Is_CI=true}', "");
Expect(1, 38, '\p{^Is_CI=true}', "");
Expect(1, 38, '\P{Is_CI=true}', "");
Expect(0, 38, '\P{^Is_CI=true}', "");
Expect(1, 39, '\p{Is_CI=True}', "");
Expect(0, 39, '\p{^Is_CI=True}', "");
Expect(0, 39, '\P{Is_CI=True}', "");
Expect(1, 39, '\P{^Is_CI=True}', "");
Expect(0, 38, '\p{Is_CI=True}', "");
Expect(1, 38, '\p{^Is_CI=True}', "");
Expect(1, 38, '\P{Is_CI=True}', "");
Expect(0, 38, '\P{^Is_CI=True}', "");
Error('\p{Case_Ignorable=/a/	-No}');
Error('\P{Case_Ignorable=/a/	-No}');
Expect(1, 38, '\p{Case_Ignorable=no}', "");
Expect(0, 38, '\p{^Case_Ignorable=no}', "");
Expect(0, 38, '\P{Case_Ignorable=no}', "");
Expect(1, 38, '\P{^Case_Ignorable=no}', "");
Expect(0, 39, '\p{Case_Ignorable=no}', "");
Expect(1, 39, '\p{^Case_Ignorable=no}', "");
Expect(1, 39, '\P{Case_Ignorable=no}', "");
Expect(0, 39, '\P{^Case_Ignorable=no}', "");
Expect(1, 38, '\p{Case_Ignorable=	no}', "");
Expect(0, 38, '\p{^Case_Ignorable=	no}', "");
Expect(0, 38, '\P{Case_Ignorable=	no}', "");
Expect(1, 38, '\P{^Case_Ignorable=	no}', "");
Expect(0, 39, '\p{Case_Ignorable=	no}', "");
Expect(1, 39, '\p{^Case_Ignorable=	no}', "");
Expect(1, 39, '\P{Case_Ignorable=	no}', "");
Expect(0, 39, '\P{^Case_Ignorable=	no}', "");
Error('\p{CI=  n:=}');
Error('\P{CI=  n:=}');
Expect(1, 38, '\p{CI=n}', "");
Expect(0, 38, '\p{^CI=n}', "");
Expect(0, 38, '\P{CI=n}', "");
Expect(1, 38, '\P{^CI=n}', "");
Expect(0, 39, '\p{CI=n}', "");
Expect(1, 39, '\p{^CI=n}', "");
Expect(1, 39, '\P{CI=n}', "");
Expect(0, 39, '\P{^CI=n}', "");
Expect(1, 38, '\p{CI=_	N}', "");
Expect(0, 38, '\p{^CI=_	N}', "");
Expect(0, 38, '\P{CI=_	N}', "");
Expect(1, 38, '\P{^CI=_	N}', "");
Expect(0, 39, '\p{CI=_	N}', "");
Expect(1, 39, '\p{^CI=_	N}', "");
Expect(1, 39, '\P{CI=_	N}', "");
Expect(0, 39, '\P{^CI=_	N}', "");
Error('\p{Is_Case_Ignorable:   -f/a/}');
Error('\P{Is_Case_Ignorable:   -f/a/}');
Expect(1, 38, '\p{Is_Case_Ignorable=f}', "");
Expect(0, 38, '\p{^Is_Case_Ignorable=f}', "");
Expect(0, 38, '\P{Is_Case_Ignorable=f}', "");
Expect(1, 38, '\P{^Is_Case_Ignorable=f}', "");
Expect(0, 39, '\p{Is_Case_Ignorable=f}', "");
Expect(1, 39, '\p{^Is_Case_Ignorable=f}', "");
Expect(1, 39, '\P{Is_Case_Ignorable=f}', "");
Expect(0, 39, '\P{^Is_Case_Ignorable=f}', "");
Expect(1, 38, '\p{Is_Case_Ignorable=	F}', "");
Expect(0, 38, '\p{^Is_Case_Ignorable=	F}', "");
Expect(0, 38, '\P{Is_Case_Ignorable=	F}', "");
Expect(1, 38, '\P{^Is_Case_Ignorable=	F}', "");
Expect(0, 39, '\p{Is_Case_Ignorable=	F}', "");
Expect(1, 39, '\p{^Is_Case_Ignorable=	F}', "");
Expect(1, 39, '\P{Is_Case_Ignorable=	F}', "");
Expect(0, 39, '\P{^Is_Case_Ignorable=	F}', "");
Error('\p{Is_CI=	:=False}');
Error('\P{Is_CI=	:=False}');
Expect(1, 38, '\p{Is_CI=false}', "");
Expect(0, 38, '\p{^Is_CI=false}', "");
Expect(0, 38, '\P{Is_CI=false}', "");
Expect(1, 38, '\P{^Is_CI=false}', "");
Expect(0, 39, '\p{Is_CI=false}', "");
Expect(1, 39, '\p{^Is_CI=false}', "");
Expect(1, 39, '\P{Is_CI=false}', "");
Expect(0, 39, '\P{^Is_CI=false}', "");
Expect(1, 38, '\p{Is_CI=_-FALSE}', "");
Expect(0, 38, '\p{^Is_CI=_-FALSE}', "");
Expect(0, 38, '\P{Is_CI=_-FALSE}', "");
Expect(1, 38, '\P{^Is_CI=_-FALSE}', "");
Expect(0, 39, '\p{Is_CI=_-FALSE}', "");
Expect(1, 39, '\p{^Is_CI=_-FALSE}', "");
Expect(1, 39, '\P{Is_CI=_-FALSE}', "");
Expect(0, 39, '\P{^Is_CI=_-FALSE}', "");
Error('\p{Pattern_Syntax=/a/yes}');
Error('\P{Pattern_Syntax=/a/yes}');
Expect(1, 47, '\p{Pattern_Syntax=yes}', "");
Expect(0, 47, '\p{^Pattern_Syntax=yes}', "");
Expect(0, 47, '\P{Pattern_Syntax=yes}', "");
Expect(1, 47, '\P{^Pattern_Syntax=yes}', "");
Expect(0, 32, '\p{Pattern_Syntax=yes}', "");
Expect(1, 32, '\p{^Pattern_Syntax=yes}', "");
Expect(1, 32, '\P{Pattern_Syntax=yes}', "");
Expect(0, 32, '\P{^Pattern_Syntax=yes}', "");
Expect(1, 47, '\p{Pattern_Syntax=	Yes}', "");
Expect(0, 47, '\p{^Pattern_Syntax=	Yes}', "");
Expect(0, 47, '\P{Pattern_Syntax=	Yes}', "");
Expect(1, 47, '\P{^Pattern_Syntax=	Yes}', "");
Expect(0, 32, '\p{Pattern_Syntax=	Yes}', "");
Expect(1, 32, '\p{^Pattern_Syntax=	Yes}', "");
Expect(1, 32, '\P{Pattern_Syntax=	Yes}', "");
Expect(0, 32, '\P{^Pattern_Syntax=	Yes}', "");
Error('\p{Pat_Syn=_/a/y}');
Error('\P{Pat_Syn=_/a/y}');
Expect(1, 47, '\p{Pat_Syn=y}', "");
Expect(0, 47, '\p{^Pat_Syn=y}', "");
Expect(0, 47, '\P{Pat_Syn=y}', "");
Expect(1, 47, '\P{^Pat_Syn=y}', "");
Expect(0, 32, '\p{Pat_Syn=y}', "");
Expect(1, 32, '\p{^Pat_Syn=y}', "");
Expect(1, 32, '\P{Pat_Syn=y}', "");
Expect(0, 32, '\P{^Pat_Syn=y}', "");
Expect(1, 47, '\p{Pat_Syn=-Y}', "");
Expect(0, 47, '\p{^Pat_Syn=-Y}', "");
Expect(0, 47, '\P{Pat_Syn=-Y}', "");
Expect(1, 47, '\P{^Pat_Syn=-Y}', "");
Expect(0, 32, '\p{Pat_Syn=-Y}', "");
Expect(1, 32, '\p{^Pat_Syn=-Y}', "");
Expect(1, 32, '\P{Pat_Syn=-Y}', "");
Expect(0, 32, '\P{^Pat_Syn=-Y}', "");
Error('\p{Is_Pattern_Syntax=/a/_-T}');
Error('\P{Is_Pattern_Syntax=/a/_-T}');
Expect(1, 47, '\p{Is_Pattern_Syntax=t}', "");
Expect(0, 47, '\p{^Is_Pattern_Syntax=t}', "");
Expect(0, 47, '\P{Is_Pattern_Syntax=t}', "");
Expect(1, 47, '\P{^Is_Pattern_Syntax=t}', "");
Expect(0, 32, '\p{Is_Pattern_Syntax=t}', "");
Expect(1, 32, '\p{^Is_Pattern_Syntax=t}', "");
Expect(1, 32, '\P{Is_Pattern_Syntax=t}', "");
Expect(0, 32, '\P{^Is_Pattern_Syntax=t}', "");
Expect(1, 47, '\p{Is_Pattern_Syntax=	_t}', "");
Expect(0, 47, '\p{^Is_Pattern_Syntax=	_t}', "");
Expect(0, 47, '\P{Is_Pattern_Syntax=	_t}', "");
Expect(1, 47, '\P{^Is_Pattern_Syntax=	_t}', "");
Expect(0, 32, '\p{Is_Pattern_Syntax=	_t}', "");
Expect(1, 32, '\p{^Is_Pattern_Syntax=	_t}', "");
Expect(1, 32, '\P{Is_Pattern_Syntax=	_t}', "");
Expect(0, 32, '\P{^Is_Pattern_Syntax=	_t}', "");
Error('\p{Is_Pat_Syn=_-True/a/}');
Error('\P{Is_Pat_Syn=_-True/a/}');
Expect(1, 47, '\p{Is_Pat_Syn=true}', "");
Expect(0, 47, '\p{^Is_Pat_Syn=true}', "");
Expect(0, 47, '\P{Is_Pat_Syn=true}', "");
Expect(1, 47, '\P{^Is_Pat_Syn=true}', "");
Expect(0, 32, '\p{Is_Pat_Syn=true}', "");
Expect(1, 32, '\p{^Is_Pat_Syn=true}', "");
Expect(1, 32, '\P{Is_Pat_Syn=true}', "");
Expect(0, 32, '\P{^Is_Pat_Syn=true}', "");
Expect(1, 47, '\p{Is_Pat_Syn= true}', "");
Expect(0, 47, '\p{^Is_Pat_Syn= true}', "");
Expect(0, 47, '\P{Is_Pat_Syn= true}', "");
Expect(1, 47, '\P{^Is_Pat_Syn= true}', "");
Expect(0, 32, '\p{Is_Pat_Syn= true}', "");
Expect(1, 32, '\p{^Is_Pat_Syn= true}', "");
Expect(1, 32, '\P{Is_Pat_Syn= true}', "");
Expect(0, 32, '\P{^Is_Pat_Syn= true}', "");
Error('\p{Pattern_Syntax=_/a/No}');
Error('\P{Pattern_Syntax=_/a/No}');
Expect(1, 32, '\p{Pattern_Syntax=no}', "");
Expect(0, 32, '\p{^Pattern_Syntax=no}', "");
Expect(0, 32, '\P{Pattern_Syntax=no}', "");
Expect(1, 32, '\P{^Pattern_Syntax=no}', "");
Expect(0, 47, '\p{Pattern_Syntax=no}', "");
Expect(1, 47, '\p{^Pattern_Syntax=no}', "");
Expect(1, 47, '\P{Pattern_Syntax=no}', "");
Expect(0, 47, '\P{^Pattern_Syntax=no}', "");
Expect(1, 32, '\p{Pattern_Syntax= 	no}', "");
Expect(0, 32, '\p{^Pattern_Syntax= 	no}', "");
Expect(0, 32, '\P{Pattern_Syntax= 	no}', "");
Expect(1, 32, '\P{^Pattern_Syntax= 	no}', "");
Expect(0, 47, '\p{Pattern_Syntax= 	no}', "");
Expect(1, 47, '\p{^Pattern_Syntax= 	no}', "");
Expect(1, 47, '\P{Pattern_Syntax= 	no}', "");
Expect(0, 47, '\P{^Pattern_Syntax= 	no}', "");
Error('\p{Pat_Syn: /a/		N}');
Error('\P{Pat_Syn: /a/		N}');
Expect(1, 32, '\p{Pat_Syn=n}', "");
Expect(0, 32, '\p{^Pat_Syn=n}', "");
Expect(0, 32, '\P{Pat_Syn=n}', "");
Expect(1, 32, '\P{^Pat_Syn=n}', "");
Expect(0, 47, '\p{Pat_Syn=n}', "");
Expect(1, 47, '\p{^Pat_Syn=n}', "");
Expect(1, 47, '\P{Pat_Syn=n}', "");
Expect(0, 47, '\P{^Pat_Syn=n}', "");
Expect(1, 32, '\p{Pat_Syn: 		N}', "");
Expect(0, 32, '\p{^Pat_Syn: 		N}', "");
Expect(0, 32, '\P{Pat_Syn: 		N}', "");
Expect(1, 32, '\P{^Pat_Syn: 		N}', "");
Expect(0, 47, '\p{Pat_Syn: 		N}', "");
Expect(1, 47, '\p{^Pat_Syn: 		N}', "");
Expect(1, 47, '\P{Pat_Syn: 		N}', "");
Expect(0, 47, '\P{^Pat_Syn: 		N}', "");
Error('\p{Is_Pattern_Syntax=/a/	f}');
Error('\P{Is_Pattern_Syntax=/a/	f}');
Expect(1, 32, '\p{Is_Pattern_Syntax=f}', "");
Expect(0, 32, '\p{^Is_Pattern_Syntax=f}', "");
Expect(0, 32, '\P{Is_Pattern_Syntax=f}', "");
Expect(1, 32, '\P{^Is_Pattern_Syntax=f}', "");
Expect(0, 47, '\p{Is_Pattern_Syntax=f}', "");
Expect(1, 47, '\p{^Is_Pattern_Syntax=f}', "");
Expect(1, 47, '\P{Is_Pattern_Syntax=f}', "");
Expect(0, 47, '\P{^Is_Pattern_Syntax=f}', "");
Expect(1, 32, '\p{Is_Pattern_Syntax=- F}', "");
Expect(0, 32, '\p{^Is_Pattern_Syntax=- F}', "");
Expect(0, 32, '\P{Is_Pattern_Syntax=- F}', "");
Expect(1, 32, '\P{^Is_Pattern_Syntax=- F}', "");
Expect(0, 47, '\p{Is_Pattern_Syntax=- F}', "");
Expect(1, 47, '\p{^Is_Pattern_Syntax=- F}', "");
Expect(1, 47, '\P{Is_Pattern_Syntax=- F}', "");
Expect(0, 47, '\P{^Is_Pattern_Syntax=- F}', "");
Error('\p{Is_Pat_Syn= :=FALSE}');
Error('\P{Is_Pat_Syn= :=FALSE}');
Expect(1, 32, '\p{Is_Pat_Syn=false}', "");
Expect(0, 32, '\p{^Is_Pat_Syn=false}', "");
Expect(0, 32, '\P{Is_Pat_Syn=false}', "");
Expect(1, 32, '\P{^Is_Pat_Syn=false}', "");
Expect(0, 47, '\p{Is_Pat_Syn=false}', "");
Expect(1, 47, '\p{^Is_Pat_Syn=false}', "");
Expect(1, 47, '\P{Is_Pat_Syn=false}', "");
Expect(0, 47, '\P{^Is_Pat_Syn=false}', "");
Expect(1, 32, '\p{Is_Pat_Syn=- False}', "");
Expect(0, 32, '\p{^Is_Pat_Syn=- False}', "");
Expect(0, 32, '\P{Is_Pat_Syn=- False}', "");
Expect(1, 32, '\P{^Is_Pat_Syn=- False}', "");
Expect(0, 47, '\p{Is_Pat_Syn=- False}', "");
Expect(1, 47, '\p{^Is_Pat_Syn=- False}', "");
Expect(1, 47, '\P{Is_Pat_Syn=- False}', "");
Expect(0, 47, '\P{^Is_Pat_Syn=- False}', "");
Error('\p{Numeric_Type=:= -None}');
Error('\P{Numeric_Type=:= -None}');
Expect(1, 47, '\p{Numeric_Type=none}', "");
Expect(0, 47, '\p{^Numeric_Type=none}', "");
Expect(0, 47, '\P{Numeric_Type=none}', "");
Expect(1, 47, '\P{^Numeric_Type=none}', "");
Expect(0, 57, '\p{Numeric_Type=none}', "");
Expect(1, 57, '\p{^Numeric_Type=none}', "");
Expect(1, 57, '\P{Numeric_Type=none}', "");
Expect(0, 57, '\P{^Numeric_Type=none}', "");
Expect(1, 47, '\p{Numeric_Type=	_None}', "");
Expect(0, 47, '\p{^Numeric_Type=	_None}', "");
Expect(0, 47, '\P{Numeric_Type=	_None}', "");
Expect(1, 47, '\P{^Numeric_Type=	_None}', "");
Expect(0, 57, '\p{Numeric_Type=	_None}', "");
Expect(1, 57, '\p{^Numeric_Type=	_None}', "");
Expect(1, 57, '\P{Numeric_Type=	_None}', "");
Expect(0, 57, '\P{^Numeric_Type=	_None}', "");
Error('\p{Nt=/a/__none}');
Error('\P{Nt=/a/__none}');
Expect(1, 47, '\p{Nt=none}', "");
Expect(0, 47, '\p{^Nt=none}', "");
Expect(0, 47, '\P{Nt=none}', "");
Expect(1, 47, '\P{^Nt=none}', "");
Expect(0, 57, '\p{Nt=none}', "");
Expect(1, 57, '\p{^Nt=none}', "");
Expect(1, 57, '\P{Nt=none}', "");
Expect(0, 57, '\P{^Nt=none}', "");
Expect(1, 47, '\p{Nt=__None}', "");
Expect(0, 47, '\p{^Nt=__None}', "");
Expect(0, 47, '\P{Nt=__None}', "");
Expect(1, 47, '\P{^Nt=__None}', "");
Expect(0, 57, '\p{Nt=__None}', "");
Expect(1, 57, '\p{^Nt=__None}', "");
Expect(1, 57, '\P{Nt=__None}', "");
Expect(0, 57, '\P{^Nt=__None}', "");
Error('\p{Is_Numeric_Type=--NONE:=}');
Error('\P{Is_Numeric_Type=--NONE:=}');
Expect(1, 47, '\p{Is_Numeric_Type=none}', "");
Expect(0, 47, '\p{^Is_Numeric_Type=none}', "");
Expect(0, 47, '\P{Is_Numeric_Type=none}', "");
Expect(1, 47, '\P{^Is_Numeric_Type=none}', "");
Expect(0, 57, '\p{Is_Numeric_Type=none}', "");
Expect(1, 57, '\p{^Is_Numeric_Type=none}', "");
Expect(1, 57, '\P{Is_Numeric_Type=none}', "");
Expect(0, 57, '\P{^Is_Numeric_Type=none}', "");
Expect(1, 47, '\p{Is_Numeric_Type=	NONE}', "");
Expect(0, 47, '\p{^Is_Numeric_Type=	NONE}', "");
Expect(0, 47, '\P{Is_Numeric_Type=	NONE}', "");
Expect(1, 47, '\P{^Is_Numeric_Type=	NONE}', "");
Expect(0, 57, '\p{Is_Numeric_Type=	NONE}', "");
Expect(1, 57, '\p{^Is_Numeric_Type=	NONE}', "");
Expect(1, 57, '\P{Is_Numeric_Type=	NONE}', "");
Expect(0, 57, '\P{^Is_Numeric_Type=	NONE}', "");
Error('\p{Is_Nt=-:=NONE}');
Error('\P{Is_Nt=-:=NONE}');
Expect(1, 47, '\p{Is_Nt=none}', "");
Expect(0, 47, '\p{^Is_Nt=none}', "");
Expect(0, 47, '\P{Is_Nt=none}', "");
Expect(1, 47, '\P{^Is_Nt=none}', "");
Expect(0, 57, '\p{Is_Nt=none}', "");
Expect(1, 57, '\p{^Is_Nt=none}', "");
Expect(1, 57, '\P{Is_Nt=none}', "");
Expect(0, 57, '\P{^Is_Nt=none}', "");
Expect(1, 47, '\p{Is_Nt= none}', "");
Expect(0, 47, '\p{^Is_Nt= none}', "");
Expect(0, 47, '\P{Is_Nt= none}', "");
Expect(1, 47, '\P{^Is_Nt= none}', "");
Expect(0, 57, '\p{Is_Nt= none}', "");
Expect(1, 57, '\p{^Is_Nt= none}', "");
Expect(1, 57, '\P{Is_Nt= none}', "");
Expect(0, 57, '\P{^Is_Nt= none}', "");
Error('\p{Numeric_Type=:=Digit}');
Error('\P{Numeric_Type=:=Digit}');
Expect(1, 179, '\p{Numeric_Type=digit}', "");
Expect(0, 179, '\p{^Numeric_Type=digit}', "");
Expect(0, 179, '\P{Numeric_Type=digit}', "");
Expect(1, 179, '\P{^Numeric_Type=digit}', "");
Expect(0, 177, '\p{Numeric_Type=digit}', "");
Expect(1, 177, '\p{^Numeric_Type=digit}', "");
Expect(1, 177, '\P{Numeric_Type=digit}', "");
Expect(0, 177, '\P{^Numeric_Type=digit}', "");
Expect(1, 179, '\p{Numeric_Type=_	digit}', "");
Expect(0, 179, '\p{^Numeric_Type=_	digit}', "");
Expect(0, 179, '\P{Numeric_Type=_	digit}', "");
Expect(1, 179, '\P{^Numeric_Type=_	digit}', "");
Expect(0, 177, '\p{Numeric_Type=_	digit}', "");
Expect(1, 177, '\p{^Numeric_Type=_	digit}', "");
Expect(1, 177, '\P{Numeric_Type=_	digit}', "");
Expect(0, 177, '\P{^Numeric_Type=_	digit}', "");
Error('\p{Nt: -	Di:=}');
Error('\P{Nt: -	Di:=}');
Expect(1, 179, '\p{Nt: di}', "");
Expect(0, 179, '\p{^Nt: di}', "");
Expect(0, 179, '\P{Nt: di}', "");
Expect(1, 179, '\P{^Nt: di}', "");
Expect(0, 177, '\p{Nt: di}', "");
Expect(1, 177, '\p{^Nt: di}', "");
Expect(1, 177, '\P{Nt: di}', "");
Expect(0, 177, '\P{^Nt: di}', "");
Expect(1, 179, '\p{Nt=	Di}', "");
Expect(0, 179, '\p{^Nt=	Di}', "");
Expect(0, 179, '\P{Nt=	Di}', "");
Expect(1, 179, '\P{^Nt=	Di}', "");
Expect(0, 177, '\p{Nt=	Di}', "");
Expect(1, 177, '\p{^Nt=	Di}', "");
Expect(1, 177, '\P{Nt=	Di}', "");
Expect(0, 177, '\P{^Nt=	Di}', "");
Error('\p{Is_Numeric_Type=	Digit:=}');
Error('\P{Is_Numeric_Type=	Digit:=}');
Expect(1, 179, '\p{Is_Numeric_Type=digit}', "");
Expect(0, 179, '\p{^Is_Numeric_Type=digit}', "");
Expect(0, 179, '\P{Is_Numeric_Type=digit}', "");
Expect(1, 179, '\P{^Is_Numeric_Type=digit}', "");
Expect(0, 177, '\p{Is_Numeric_Type=digit}', "");
Expect(1, 177, '\p{^Is_Numeric_Type=digit}', "");
Expect(1, 177, '\P{Is_Numeric_Type=digit}', "");
Expect(0, 177, '\P{^Is_Numeric_Type=digit}', "");
Expect(1, 179, '\p{Is_Numeric_Type=-_Digit}', "");
Expect(0, 179, '\p{^Is_Numeric_Type=-_Digit}', "");
Expect(0, 179, '\P{Is_Numeric_Type=-_Digit}', "");
Expect(1, 179, '\P{^Is_Numeric_Type=-_Digit}', "");
Expect(0, 177, '\p{Is_Numeric_Type=-_Digit}', "");
Expect(1, 177, '\p{^Is_Numeric_Type=-_Digit}', "");
Expect(1, 177, '\P{Is_Numeric_Type=-_Digit}', "");
Expect(0, 177, '\P{^Is_Numeric_Type=-_Digit}', "");
Error('\p{Is_Nt=	:=Di}');
Error('\P{Is_Nt=	:=Di}');
Expect(1, 179, '\p{Is_Nt=di}', "");
Expect(0, 179, '\p{^Is_Nt=di}', "");
Expect(0, 179, '\P{Is_Nt=di}', "");
Expect(1, 179, '\P{^Is_Nt=di}', "");
Expect(0, 177, '\p{Is_Nt=di}', "");
Expect(1, 177, '\p{^Is_Nt=di}', "");
Expect(1, 177, '\P{Is_Nt=di}', "");
Expect(0, 177, '\P{^Is_Nt=di}', "");
Expect(1, 179, '\p{Is_Nt= 	DI}', "");
Expect(0, 179, '\p{^Is_Nt= 	DI}', "");
Expect(0, 179, '\P{Is_Nt= 	DI}', "");
Expect(1, 179, '\P{^Is_Nt= 	DI}', "");
Expect(0, 177, '\p{Is_Nt= 	DI}', "");
Expect(1, 177, '\p{^Is_Nt= 	DI}', "");
Expect(1, 177, '\P{Is_Nt= 	DI}', "");
Expect(0, 177, '\P{^Is_Nt= 	DI}', "");
Error('\p{Numeric_Type= Decimal:=}');
Error('\P{Numeric_Type= Decimal:=}');
Expect(1, 57, '\p{Numeric_Type=decimal}', "");
Expect(0, 57, '\p{^Numeric_Type=decimal}', "");
Expect(0, 57, '\P{Numeric_Type=decimal}', "");
Expect(1, 57, '\P{^Numeric_Type=decimal}', "");
Expect(0, 47, '\p{Numeric_Type=decimal}', "");
Expect(1, 47, '\p{^Numeric_Type=decimal}', "");
Expect(1, 47, '\P{Numeric_Type=decimal}', "");
Expect(0, 47, '\P{^Numeric_Type=decimal}', "");
Expect(1, 57, '\p{Numeric_Type:-_DECIMAL}', "");
Expect(0, 57, '\p{^Numeric_Type:-_DECIMAL}', "");
Expect(0, 57, '\P{Numeric_Type:-_DECIMAL}', "");
Expect(1, 57, '\P{^Numeric_Type:-_DECIMAL}', "");
Expect(0, 47, '\p{Numeric_Type:-_DECIMAL}', "");
Expect(1, 47, '\p{^Numeric_Type:-_DECIMAL}', "");
Expect(1, 47, '\P{Numeric_Type:-_DECIMAL}', "");
Expect(0, 47, '\P{^Numeric_Type:-_DECIMAL}', "");
Error('\p{Nt=:=	-De}');
Error('\P{Nt=:=	-De}');
Expect(1, 57, '\p{Nt=de}', "");
Expect(0, 57, '\p{^Nt=de}', "");
Expect(0, 57, '\P{Nt=de}', "");
Expect(1, 57, '\P{^Nt=de}', "");
Expect(0, 47, '\p{Nt=de}', "");
Expect(1, 47, '\p{^Nt=de}', "");
Expect(1, 47, '\P{Nt=de}', "");
Expect(0, 47, '\P{^Nt=de}', "");
Expect(1, 57, '\p{Nt= de}', "");
Expect(0, 57, '\p{^Nt= de}', "");
Expect(0, 57, '\P{Nt= de}', "");
Expect(1, 57, '\P{^Nt= de}', "");
Expect(0, 47, '\p{Nt= de}', "");
Expect(1, 47, '\p{^Nt= de}', "");
Expect(1, 47, '\P{Nt= de}', "");
Expect(0, 47, '\P{^Nt= de}', "");
Error('\p{Is_Numeric_Type:	:=decimal}');
Error('\P{Is_Numeric_Type:	:=decimal}');
Expect(1, 57, '\p{Is_Numeric_Type=decimal}', "");
Expect(0, 57, '\p{^Is_Numeric_Type=decimal}', "");
Expect(0, 57, '\P{Is_Numeric_Type=decimal}', "");
Expect(1, 57, '\P{^Is_Numeric_Type=decimal}', "");
Expect(0, 47, '\p{Is_Numeric_Type=decimal}', "");
Expect(1, 47, '\p{^Is_Numeric_Type=decimal}', "");
Expect(1, 47, '\P{Is_Numeric_Type=decimal}', "");
Expect(0, 47, '\P{^Is_Numeric_Type=decimal}', "");
Expect(1, 57, '\p{Is_Numeric_Type=  DECIMAL}', "");
Expect(0, 57, '\p{^Is_Numeric_Type=  DECIMAL}', "");
Expect(0, 57, '\P{Is_Numeric_Type=  DECIMAL}', "");
Expect(1, 57, '\P{^Is_Numeric_Type=  DECIMAL}', "");
Expect(0, 47, '\p{Is_Numeric_Type=  DECIMAL}', "");
Expect(1, 47, '\p{^Is_Numeric_Type=  DECIMAL}', "");
Expect(1, 47, '\P{Is_Numeric_Type=  DECIMAL}', "");
Expect(0, 47, '\P{^Is_Numeric_Type=  DECIMAL}', "");
Error('\p{Is_Nt=:=DE}');
Error('\P{Is_Nt=:=DE}');
Expect(1, 57, '\p{Is_Nt=de}', "");
Expect(0, 57, '\p{^Is_Nt=de}', "");
Expect(0, 57, '\P{Is_Nt=de}', "");
Expect(1, 57, '\P{^Is_Nt=de}', "");
Expect(0, 47, '\p{Is_Nt=de}', "");
Expect(1, 47, '\p{^Is_Nt=de}', "");
Expect(1, 47, '\P{Is_Nt=de}', "");
Expect(0, 47, '\P{^Is_Nt=de}', "");
Expect(1, 57, '\p{Is_Nt= 	De}', "");
Expect(0, 57, '\p{^Is_Nt= 	De}', "");
Expect(0, 57, '\P{Is_Nt= 	De}', "");
Expect(1, 57, '\P{^Is_Nt= 	De}', "");
Expect(0, 47, '\p{Is_Nt= 	De}', "");
Expect(1, 47, '\p{^Is_Nt= 	De}', "");
Expect(1, 47, '\P{Is_Nt= 	De}', "");
Expect(0, 47, '\P{^Is_Nt= 	De}', "");
Error('\p{Numeric_Type=/a/_Numeric}');
Error('\P{Numeric_Type=/a/_Numeric}');
Expect(1, 190, '\p{Numeric_Type=numeric}', "");
Expect(0, 190, '\p{^Numeric_Type=numeric}', "");
Expect(0, 190, '\P{Numeric_Type=numeric}', "");
Expect(1, 190, '\P{^Numeric_Type=numeric}', "");
Expect(0, 187, '\p{Numeric_Type=numeric}', "");
Expect(1, 187, '\p{^Numeric_Type=numeric}', "");
Expect(1, 187, '\P{Numeric_Type=numeric}', "");
Expect(0, 187, '\P{^Numeric_Type=numeric}', "");
Expect(1, 190, '\p{Numeric_Type=	numeric}', "");
Expect(0, 190, '\p{^Numeric_Type=	numeric}', "");
Expect(0, 190, '\P{Numeric_Type=	numeric}', "");
Expect(1, 190, '\P{^Numeric_Type=	numeric}', "");
Expect(0, 187, '\p{Numeric_Type=	numeric}', "");
Expect(1, 187, '\p{^Numeric_Type=	numeric}', "");
Expect(1, 187, '\P{Numeric_Type=	numeric}', "");
Expect(0, 187, '\P{^Numeric_Type=	numeric}', "");
Error('\p{Nt= /a/nu}');
Error('\P{Nt= /a/nu}');
Expect(1, 190, '\p{Nt=nu}', "");
Expect(0, 190, '\p{^Nt=nu}', "");
Expect(0, 190, '\P{Nt=nu}', "");
Expect(1, 190, '\P{^Nt=nu}', "");
Expect(0, 187, '\p{Nt=nu}', "");
Expect(1, 187, '\p{^Nt=nu}', "");
Expect(1, 187, '\P{Nt=nu}', "");
Expect(0, 187, '\P{^Nt=nu}', "");
Expect(1, 190, '\p{Nt:	Nu}', "");
Expect(0, 190, '\p{^Nt:	Nu}', "");
Expect(0, 190, '\P{Nt:	Nu}', "");
Expect(1, 190, '\P{^Nt:	Nu}', "");
Expect(0, 187, '\p{Nt:	Nu}', "");
Expect(1, 187, '\p{^Nt:	Nu}', "");
Expect(1, 187, '\P{Nt:	Nu}', "");
Expect(0, 187, '\P{^Nt:	Nu}', "");
Error('\p{Is_Numeric_Type=_:=numeric}');
Error('\P{Is_Numeric_Type=_:=numeric}');
Expect(1, 190, '\p{Is_Numeric_Type=numeric}', "");
Expect(0, 190, '\p{^Is_Numeric_Type=numeric}', "");
Expect(0, 190, '\P{Is_Numeric_Type=numeric}', "");
Expect(1, 190, '\P{^Is_Numeric_Type=numeric}', "");
Expect(0, 187, '\p{Is_Numeric_Type=numeric}', "");
Expect(1, 187, '\p{^Is_Numeric_Type=numeric}', "");
Expect(1, 187, '\P{Is_Numeric_Type=numeric}', "");
Expect(0, 187, '\P{^Is_Numeric_Type=numeric}', "");
Expect(1, 190, '\p{Is_Numeric_Type= 	numeric}', "");
Expect(0, 190, '\p{^Is_Numeric_Type= 	numeric}', "");
Expect(0, 190, '\P{Is_Numeric_Type= 	numeric}', "");
Expect(1, 190, '\P{^Is_Numeric_Type= 	numeric}', "");
Expect(0, 187, '\p{Is_Numeric_Type= 	numeric}', "");
Expect(1, 187, '\p{^Is_Numeric_Type= 	numeric}', "");
Expect(1, 187, '\P{Is_Numeric_Type= 	numeric}', "");
Expect(0, 187, '\P{^Is_Numeric_Type= 	numeric}', "");
Error('\p{Is_Nt=:=  NU}');
Error('\P{Is_Nt=:=  NU}');
Expect(1, 190, '\p{Is_Nt=nu}', "");
Expect(0, 190, '\p{^Is_Nt=nu}', "");
Expect(0, 190, '\P{Is_Nt=nu}', "");
Expect(1, 190, '\P{^Is_Nt=nu}', "");
Expect(0, 187, '\p{Is_Nt=nu}', "");
Expect(1, 187, '\p{^Is_Nt=nu}', "");
Expect(1, 187, '\P{Is_Nt=nu}', "");
Expect(0, 187, '\P{^Is_Nt=nu}', "");
Expect(1, 190, '\p{Is_Nt=		NU}', "");
Expect(0, 190, '\p{^Is_Nt=		NU}', "");
Expect(0, 190, '\P{Is_Nt=		NU}', "");
Expect(1, 190, '\P{^Is_Nt=		NU}', "");
Expect(0, 187, '\p{Is_Nt=		NU}', "");
Expect(1, 187, '\p{^Is_Nt=		NU}', "");
Expect(1, 187, '\P{Is_Nt=		NU}', "");
Expect(0, 187, '\P{^Is_Nt=		NU}', "");
Error('\p{Expands_On_NFC=Yes}');
Error('\P{Expands_On_NFC=Yes}');
Error('\p{XO_NFC=Y}');
Error('\P{XO_NFC=Y}');
Error('\p{Is_Expands_On_NFC=T}');
Error('\P{Is_Expands_On_NFC=T}');
Error('\p{Is_XO_NFC=True}');
Error('\P{Is_XO_NFC=True}');
Error('\p{Expands_On_NFC:No}');
Error('\P{Expands_On_NFC:No}');
Error('\p{XO_NFC:N}');
Error('\P{XO_NFC:N}');
Error('\p{Is_Expands_On_NFC=F}');
Error('\P{Is_Expands_On_NFC=F}');
Error('\p{Is_XO_NFC=False}');
Error('\P{Is_XO_NFC=False}');
Error('\p{Dash=:=__Yes}');
Error('\P{Dash=:=__Yes}');
Expect(1, 45, '\p{Dash:yes}', "");
Expect(0, 45, '\p{^Dash:yes}', "");
Expect(0, 45, '\P{Dash:yes}', "");
Expect(1, 45, '\P{^Dash:yes}', "");
Expect(0, 44, '\p{Dash:yes}', "");
Expect(1, 44, '\p{^Dash:yes}', "");
Expect(1, 44, '\P{Dash:yes}', "");
Expect(0, 44, '\P{^Dash:yes}', "");
Expect(1, 45, '\p{Dash=	Yes}', "");
Expect(0, 45, '\p{^Dash=	Yes}', "");
Expect(0, 45, '\P{Dash=	Yes}', "");
Expect(1, 45, '\P{^Dash=	Yes}', "");
Expect(0, 44, '\p{Dash=	Yes}', "");
Expect(1, 44, '\p{^Dash=	Yes}', "");
Expect(1, 44, '\P{Dash=	Yes}', "");
Expect(0, 44, '\P{^Dash=	Yes}', "");
Error('\p{Is_Dash=-:=Y}');
Error('\P{Is_Dash=-:=Y}');
Expect(1, 45, '\p{Is_Dash=y}', "");
Expect(0, 45, '\p{^Is_Dash=y}', "");
Expect(0, 45, '\P{Is_Dash=y}', "");
Expect(1, 45, '\P{^Is_Dash=y}', "");
Expect(0, 44, '\p{Is_Dash=y}', "");
Expect(1, 44, '\p{^Is_Dash=y}', "");
Expect(1, 44, '\P{Is_Dash=y}', "");
Expect(0, 44, '\P{^Is_Dash=y}', "");
Expect(1, 45, '\p{Is_Dash=_Y}', "");
Expect(0, 45, '\p{^Is_Dash=_Y}', "");
Expect(0, 45, '\P{Is_Dash=_Y}', "");
Expect(1, 45, '\P{^Is_Dash=_Y}', "");
Expect(0, 44, '\p{Is_Dash=_Y}', "");
Expect(1, 44, '\p{^Is_Dash=_Y}', "");
Expect(1, 44, '\P{Is_Dash=_Y}', "");
Expect(0, 44, '\P{^Is_Dash=_Y}', "");
Error('\p{Dash:_t/a/}');
Error('\P{Dash:_t/a/}');
Expect(1, 45, '\p{Dash=t}', "");
Expect(0, 45, '\p{^Dash=t}', "");
Expect(0, 45, '\P{Dash=t}', "");
Expect(1, 45, '\P{^Dash=t}', "");
Expect(0, 44, '\p{Dash=t}', "");
Expect(1, 44, '\p{^Dash=t}', "");
Expect(1, 44, '\P{Dash=t}', "");
Expect(0, 44, '\P{^Dash=t}', "");
Expect(1, 45, '\p{Dash= t}', "");
Expect(0, 45, '\p{^Dash= t}', "");
Expect(0, 45, '\P{Dash= t}', "");
Expect(1, 45, '\P{^Dash= t}', "");
Expect(0, 44, '\p{Dash= t}', "");
Expect(1, 44, '\p{^Dash= t}', "");
Expect(1, 44, '\P{Dash= t}', "");
Expect(0, 44, '\P{^Dash= t}', "");
Error('\p{Is_Dash:  -TRUE/a/}');
Error('\P{Is_Dash:  -TRUE/a/}');
Expect(1, 45, '\p{Is_Dash=true}', "");
Expect(0, 45, '\p{^Is_Dash=true}', "");
Expect(0, 45, '\P{Is_Dash=true}', "");
Expect(1, 45, '\P{^Is_Dash=true}', "");
Expect(0, 44, '\p{Is_Dash=true}', "");
Expect(1, 44, '\p{^Is_Dash=true}', "");
Expect(1, 44, '\P{Is_Dash=true}', "");
Expect(0, 44, '\P{^Is_Dash=true}', "");
Expect(1, 45, '\p{Is_Dash=	_TRUE}', "");
Expect(0, 45, '\p{^Is_Dash=	_TRUE}', "");
Expect(0, 45, '\P{Is_Dash=	_TRUE}', "");
Expect(1, 45, '\P{^Is_Dash=	_TRUE}', "");
Expect(0, 44, '\p{Is_Dash=	_TRUE}', "");
Expect(1, 44, '\p{^Is_Dash=	_TRUE}', "");
Expect(1, 44, '\P{Is_Dash=	_TRUE}', "");
Expect(0, 44, '\P{^Is_Dash=	_TRUE}', "");
Error('\p{Dash=-No:=}');
Error('\P{Dash=-No:=}');
Expect(1, 44, '\p{Dash=no}', "");
Expect(0, 44, '\p{^Dash=no}', "");
Expect(0, 44, '\P{Dash=no}', "");
Expect(1, 44, '\P{^Dash=no}', "");
Expect(0, 45, '\p{Dash=no}', "");
Expect(1, 45, '\p{^Dash=no}', "");
Expect(1, 45, '\P{Dash=no}', "");
Expect(0, 45, '\P{^Dash=no}', "");
Expect(1, 44, '\p{Dash=- NO}', "");
Expect(0, 44, '\p{^Dash=- NO}', "");
Expect(0, 44, '\P{Dash=- NO}', "");
Expect(1, 44, '\P{^Dash=- NO}', "");
Expect(0, 45, '\p{Dash=- NO}', "");
Expect(1, 45, '\p{^Dash=- NO}', "");
Expect(1, 45, '\P{Dash=- NO}', "");
Expect(0, 45, '\P{^Dash=- NO}', "");
Error('\p{Is_Dash:	/a/n}');
Error('\P{Is_Dash:	/a/n}');
Expect(1, 44, '\p{Is_Dash=n}', "");
Expect(0, 44, '\p{^Is_Dash=n}', "");
Expect(0, 44, '\P{Is_Dash=n}', "");
Expect(1, 44, '\P{^Is_Dash=n}', "");
Expect(0, 45, '\p{Is_Dash=n}', "");
Expect(1, 45, '\p{^Is_Dash=n}', "");
Expect(1, 45, '\P{Is_Dash=n}', "");
Expect(0, 45, '\P{^Is_Dash=n}', "");
Expect(1, 44, '\p{Is_Dash=-	N}', "");
Expect(0, 44, '\p{^Is_Dash=-	N}', "");
Expect(0, 44, '\P{Is_Dash=-	N}', "");
Expect(1, 44, '\P{^Is_Dash=-	N}', "");
Expect(0, 45, '\p{Is_Dash=-	N}', "");
Expect(1, 45, '\p{^Is_Dash=-	N}', "");
Expect(1, 45, '\P{Is_Dash=-	N}', "");
Expect(0, 45, '\P{^Is_Dash=-	N}', "");
Error('\p{Dash=/a/F}');
Error('\P{Dash=/a/F}');
Expect(1, 44, '\p{Dash=f}', "");
Expect(0, 44, '\p{^Dash=f}', "");
Expect(0, 44, '\P{Dash=f}', "");
Expect(1, 44, '\P{^Dash=f}', "");
Expect(0, 45, '\p{Dash=f}', "");
Expect(1, 45, '\p{^Dash=f}', "");
Expect(1, 45, '\P{Dash=f}', "");
Expect(0, 45, '\P{^Dash=f}', "");
Expect(1, 44, '\p{Dash=_F}', "");
Expect(0, 44, '\p{^Dash=_F}', "");
Expect(0, 44, '\P{Dash=_F}', "");
Expect(1, 44, '\P{^Dash=_F}', "");
Expect(0, 45, '\p{Dash=_F}', "");
Expect(1, 45, '\p{^Dash=_F}', "");
Expect(1, 45, '\P{Dash=_F}', "");
Expect(0, 45, '\P{^Dash=_F}', "");
Error('\p{Is_Dash=__False:=}');
Error('\P{Is_Dash=__False:=}');
Expect(1, 44, '\p{Is_Dash=false}', "");
Expect(0, 44, '\p{^Is_Dash=false}', "");
Expect(0, 44, '\P{Is_Dash=false}', "");
Expect(1, 44, '\P{^Is_Dash=false}', "");
Expect(0, 45, '\p{Is_Dash=false}', "");
Expect(1, 45, '\p{^Is_Dash=false}', "");
Expect(1, 45, '\P{Is_Dash=false}', "");
Expect(0, 45, '\P{^Is_Dash=false}', "");
Expect(1, 44, '\p{Is_Dash=  False}', "");
Expect(0, 44, '\p{^Is_Dash=  False}', "");
Expect(0, 44, '\P{Is_Dash=  False}', "");
Expect(1, 44, '\P{^Is_Dash=  False}', "");
Expect(0, 45, '\p{Is_Dash=  False}', "");
Expect(1, 45, '\p{^Is_Dash=  False}', "");
Expect(1, 45, '\P{Is_Dash=  False}', "");
Expect(0, 45, '\P{^Is_Dash=  False}', "");
Error('\p{Changes_When_Titlecased= _YES:=}');
Error('\P{Changes_When_Titlecased= _YES:=}');
Expect(1, 122, '\p{Changes_When_Titlecased=yes}', "");
Expect(0, 122, '\p{^Changes_When_Titlecased=yes}', "");
Expect(0, 122, '\P{Changes_When_Titlecased=yes}', "");
Expect(1, 122, '\P{^Changes_When_Titlecased=yes}', "");
Expect(0, 96, '\p{Changes_When_Titlecased=yes}', "");
Expect(1, 96, '\p{^Changes_When_Titlecased=yes}', "");
Expect(1, 96, '\P{Changes_When_Titlecased=yes}', "");
Expect(0, 96, '\P{^Changes_When_Titlecased=yes}', "");
Expect(1, 122, '\p{Changes_When_Titlecased=--yes}', "");
Expect(0, 122, '\p{^Changes_When_Titlecased=--yes}', "");
Expect(0, 122, '\P{Changes_When_Titlecased=--yes}', "");
Expect(1, 122, '\P{^Changes_When_Titlecased=--yes}', "");
Expect(0, 96, '\p{Changes_When_Titlecased=--yes}', "");
Expect(1, 96, '\p{^Changes_When_Titlecased=--yes}', "");
Expect(1, 96, '\P{Changes_When_Titlecased=--yes}', "");
Expect(0, 96, '\P{^Changes_When_Titlecased=--yes}', "");
Error('\p{CWT= /a/Y}');
Error('\P{CWT= /a/Y}');
Expect(1, 122, '\p{CWT=y}', "");
Expect(0, 122, '\p{^CWT=y}', "");
Expect(0, 122, '\P{CWT=y}', "");
Expect(1, 122, '\P{^CWT=y}', "");
Expect(0, 96, '\p{CWT=y}', "");
Expect(1, 96, '\p{^CWT=y}', "");
Expect(1, 96, '\P{CWT=y}', "");
Expect(0, 96, '\P{^CWT=y}', "");
Expect(1, 122, '\p{CWT=_-y}', "");
Expect(0, 122, '\p{^CWT=_-y}', "");
Expect(0, 122, '\P{CWT=_-y}', "");
Expect(1, 122, '\P{^CWT=_-y}', "");
Expect(0, 96, '\p{CWT=_-y}', "");
Expect(1, 96, '\p{^CWT=_-y}', "");
Expect(1, 96, '\P{CWT=_-y}', "");
Expect(0, 96, '\P{^CWT=_-y}', "");
Error('\p{Is_Changes_When_Titlecased:  -T:=}');
Error('\P{Is_Changes_When_Titlecased:  -T:=}');
Expect(1, 122, '\p{Is_Changes_When_Titlecased: t}', "");
Expect(0, 122, '\p{^Is_Changes_When_Titlecased: t}', "");
Expect(0, 122, '\P{Is_Changes_When_Titlecased: t}', "");
Expect(1, 122, '\P{^Is_Changes_When_Titlecased: t}', "");
Expect(0, 96, '\p{Is_Changes_When_Titlecased: t}', "");
Expect(1, 96, '\p{^Is_Changes_When_Titlecased: t}', "");
Expect(1, 96, '\P{Is_Changes_When_Titlecased: t}', "");
Expect(0, 96, '\P{^Is_Changes_When_Titlecased: t}', "");
Expect(1, 122, '\p{Is_Changes_When_Titlecased=	T}', "");
Expect(0, 122, '\p{^Is_Changes_When_Titlecased=	T}', "");
Expect(0, 122, '\P{Is_Changes_When_Titlecased=	T}', "");
Expect(1, 122, '\P{^Is_Changes_When_Titlecased=	T}', "");
Expect(0, 96, '\p{Is_Changes_When_Titlecased=	T}', "");
Expect(1, 96, '\p{^Is_Changes_When_Titlecased=	T}', "");
Expect(1, 96, '\P{Is_Changes_When_Titlecased=	T}', "");
Expect(0, 96, '\P{^Is_Changes_When_Titlecased=	T}', "");
Error('\p{Is_CWT: :=True}');
Error('\P{Is_CWT: :=True}');
Expect(1, 122, '\p{Is_CWT:   true}', "");
Expect(0, 122, '\p{^Is_CWT:   true}', "");
Expect(0, 122, '\P{Is_CWT:   true}', "");
Expect(1, 122, '\P{^Is_CWT:   true}', "");
Expect(0, 96, '\p{Is_CWT:   true}', "");
Expect(1, 96, '\p{^Is_CWT:   true}', "");
Expect(1, 96, '\P{Is_CWT:   true}', "");
Expect(0, 96, '\P{^Is_CWT:   true}', "");
Expect(1, 122, '\p{Is_CWT=_ TRUE}', "");
Expect(0, 122, '\p{^Is_CWT=_ TRUE}', "");
Expect(0, 122, '\P{Is_CWT=_ TRUE}', "");
Expect(1, 122, '\P{^Is_CWT=_ TRUE}', "");
Expect(0, 96, '\p{Is_CWT=_ TRUE}', "");
Expect(1, 96, '\p{^Is_CWT=_ TRUE}', "");
Expect(1, 96, '\P{Is_CWT=_ TRUE}', "");
Expect(0, 96, '\P{^Is_CWT=_ TRUE}', "");
Error('\p{Changes_When_Titlecased=	No/a/}');
Error('\P{Changes_When_Titlecased=	No/a/}');
Expect(1, 96, '\p{Changes_When_Titlecased=no}', "");
Expect(0, 96, '\p{^Changes_When_Titlecased=no}', "");
Expect(0, 96, '\P{Changes_When_Titlecased=no}', "");
Expect(1, 96, '\P{^Changes_When_Titlecased=no}', "");
Expect(0, 122, '\p{Changes_When_Titlecased=no}', "");
Expect(1, 122, '\p{^Changes_When_Titlecased=no}', "");
Expect(1, 122, '\P{Changes_When_Titlecased=no}', "");
Expect(0, 122, '\P{^Changes_When_Titlecased=no}', "");
Expect(1, 96, '\p{Changes_When_Titlecased=-no}', "");
Expect(0, 96, '\p{^Changes_When_Titlecased=-no}', "");
Expect(0, 96, '\P{Changes_When_Titlecased=-no}', "");
Expect(1, 96, '\P{^Changes_When_Titlecased=-no}', "");
Expect(0, 122, '\p{Changes_When_Titlecased=-no}', "");
Expect(1, 122, '\p{^Changes_When_Titlecased=-no}', "");
Expect(1, 122, '\P{Changes_When_Titlecased=-no}', "");
Expect(0, 122, '\P{^Changes_When_Titlecased=-no}', "");
Error('\p{CWT= :=N}');
Error('\P{CWT= :=N}');
Expect(1, 96, '\p{CWT=n}', "");
Expect(0, 96, '\p{^CWT=n}', "");
Expect(0, 96, '\P{CWT=n}', "");
Expect(1, 96, '\P{^CWT=n}', "");
Expect(0, 122, '\p{CWT=n}', "");
Expect(1, 122, '\p{^CWT=n}', "");
Expect(1, 122, '\P{CWT=n}', "");
Expect(0, 122, '\P{^CWT=n}', "");
Error('\p{Is_Changes_When_Titlecased=-F:=}');
Error('\P{Is_Changes_When_Titlecased=-F:=}');
Expect(1, 96, '\p{Is_Changes_When_Titlecased=f}', "");
Expect(0, 96, '\p{^Is_Changes_When_Titlecased=f}', "");
Expect(0, 96, '\P{Is_Changes_When_Titlecased=f}', "");
Expect(1, 96, '\P{^Is_Changes_When_Titlecased=f}', "");
Expect(0, 122, '\p{Is_Changes_When_Titlecased=f}', "");
Expect(1, 122, '\p{^Is_Changes_When_Titlecased=f}', "");
Expect(1, 122, '\P{Is_Changes_When_Titlecased=f}', "");
Expect(0, 122, '\P{^Is_Changes_When_Titlecased=f}', "");
Expect(1, 96, '\p{Is_Changes_When_Titlecased=		f}', "");
Expect(0, 96, '\p{^Is_Changes_When_Titlecased=		f}', "");
Expect(0, 96, '\P{Is_Changes_When_Titlecased=		f}', "");
Expect(1, 96, '\P{^Is_Changes_When_Titlecased=		f}', "");
Expect(0, 122, '\p{Is_Changes_When_Titlecased=		f}', "");
Expect(1, 122, '\p{^Is_Changes_When_Titlecased=		f}', "");
Expect(1, 122, '\P{Is_Changes_When_Titlecased=		f}', "");
Expect(0, 122, '\P{^Is_Changes_When_Titlecased=		f}', "");
Error('\p{Is_CWT=/a/	-false}');
Error('\P{Is_CWT=/a/	-false}');
Expect(1, 96, '\p{Is_CWT=false}', "");
Expect(0, 96, '\p{^Is_CWT=false}', "");
Expect(0, 96, '\P{Is_CWT=false}', "");
Expect(1, 96, '\P{^Is_CWT=false}', "");
Expect(0, 122, '\p{Is_CWT=false}', "");
Expect(1, 122, '\p{^Is_CWT=false}', "");
Expect(1, 122, '\P{Is_CWT=false}', "");
Expect(0, 122, '\P{^Is_CWT=false}', "");
Expect(1, 96, '\p{Is_CWT=_ False}', "");
Expect(0, 96, '\p{^Is_CWT=_ False}', "");
Expect(0, 96, '\P{Is_CWT=_ False}', "");
Expect(1, 96, '\P{^Is_CWT=_ False}', "");
Expect(0, 122, '\p{Is_CWT=_ False}', "");
Expect(1, 122, '\p{^Is_CWT=_ False}', "");
Expect(1, 122, '\P{Is_CWT=_ False}', "");
Expect(0, 122, '\P{^Is_CWT=_ False}', "");
Error('\p{Hangul_Syllable_Type: /a/- Trailing	JAMO}');
Error('\P{Hangul_Syllable_Type: /a/- Trailing	JAMO}');
Expect(1, 4607, '\p{Hangul_Syllable_Type=trailingjamo}', "");
Expect(0, 4607, '\p{^Hangul_Syllable_Type=trailingjamo}', "");
Expect(0, 4607, '\P{Hangul_Syllable_Type=trailingjamo}', "");
Expect(1, 4607, '\P{^Hangul_Syllable_Type=trailingjamo}', "");
Expect(0, 4519, '\p{Hangul_Syllable_Type=trailingjamo}', "");
Expect(1, 4519, '\p{^Hangul_Syllable_Type=trailingjamo}', "");
Expect(1, 4519, '\P{Hangul_Syllable_Type=trailingjamo}', "");
Expect(0, 4519, '\P{^Hangul_Syllable_Type=trailingjamo}', "");
Expect(1, 4607, '\p{Hangul_Syllable_Type=-trailingJamo}', "");
Expect(0, 4607, '\p{^Hangul_Syllable_Type=-trailingJamo}', "");
Expect(0, 4607, '\P{Hangul_Syllable_Type=-trailingJamo}', "");
Expect(1, 4607, '\P{^Hangul_Syllable_Type=-trailingJamo}', "");
Expect(0, 4519, '\p{Hangul_Syllable_Type=-trailingJamo}', "");
Expect(1, 4519, '\p{^Hangul_Syllable_Type=-trailingJamo}', "");
Expect(1, 4519, '\P{Hangul_Syllable_Type=-trailingJamo}', "");
Expect(0, 4519, '\P{^Hangul_Syllable_Type=-trailingJamo}', "");
Error('\p{Hst=-t/a/}');
Error('\P{Hst=-t/a/}');
Expect(1, 4607, '\p{Hst=t}', "");
Expect(0, 4607, '\p{^Hst=t}', "");
Expect(0, 4607, '\P{Hst=t}', "");
Expect(1, 4607, '\P{^Hst=t}', "");
Expect(0, 4519, '\p{Hst=t}', "");
Expect(1, 4519, '\p{^Hst=t}', "");
Expect(1, 4519, '\P{Hst=t}', "");
Expect(0, 4519, '\P{^Hst=t}', "");
Expect(1, 4607, '\p{Hst=-	T}', "");
Expect(0, 4607, '\p{^Hst=-	T}', "");
Expect(0, 4607, '\P{Hst=-	T}', "");
Expect(1, 4607, '\P{^Hst=-	T}', "");
Expect(0, 4519, '\p{Hst=-	T}', "");
Expect(1, 4519, '\p{^Hst=-	T}', "");
Expect(1, 4519, '\P{Hst=-	T}', "");
Expect(0, 4519, '\P{^Hst=-	T}', "");
Error('\p{Is_Hangul_Syllable_Type=_ trailing:=Jamo}');
Error('\P{Is_Hangul_Syllable_Type=_ trailing:=Jamo}');
Expect(1, 4607, '\p{Is_Hangul_Syllable_Type=trailingjamo}', "");
Expect(0, 4607, '\p{^Is_Hangul_Syllable_Type=trailingjamo}', "");
Expect(0, 4607, '\P{Is_Hangul_Syllable_Type=trailingjamo}', "");
Expect(1, 4607, '\P{^Is_Hangul_Syllable_Type=trailingjamo}', "");
Expect(0, 4519, '\p{Is_Hangul_Syllable_Type=trailingjamo}', "");
Expect(1, 4519, '\p{^Is_Hangul_Syllable_Type=trailingjamo}', "");
Expect(1, 4519, '\P{Is_Hangul_Syllable_Type=trailingjamo}', "");
Expect(0, 4519, '\P{^Is_Hangul_Syllable_Type=trailingjamo}', "");
Expect(1, 4607, '\p{Is_Hangul_Syllable_Type=--TRAILING Jamo}', "");
Expect(0, 4607, '\p{^Is_Hangul_Syllable_Type=--TRAILING Jamo}', "");
Expect(0, 4607, '\P{Is_Hangul_Syllable_Type=--TRAILING Jamo}', "");
Expect(1, 4607, '\P{^Is_Hangul_Syllable_Type=--TRAILING Jamo}', "");
Expect(0, 4519, '\p{Is_Hangul_Syllable_Type=--TRAILING Jamo}', "");
Expect(1, 4519, '\p{^Is_Hangul_Syllable_Type=--TRAILING Jamo}', "");
Expect(1, 4519, '\P{Is_Hangul_Syllable_Type=--TRAILING Jamo}', "");
Expect(0, 4519, '\P{^Is_Hangul_Syllable_Type=--TRAILING Jamo}', "");
Error('\p{Is_Hst= :=T}');
Error('\P{Is_Hst= :=T}');
Expect(1, 4607, '\p{Is_Hst=t}', "");
Expect(0, 4607, '\p{^Is_Hst=t}', "");
Expect(0, 4607, '\P{Is_Hst=t}', "");
Expect(1, 4607, '\P{^Is_Hst=t}', "");
Expect(0, 4519, '\p{Is_Hst=t}', "");
Expect(1, 4519, '\p{^Is_Hst=t}', "");
Expect(1, 4519, '\P{Is_Hst=t}', "");
Expect(0, 4519, '\P{^Is_Hst=t}', "");
Expect(1, 4607, '\p{Is_Hst=-T}', "");
Expect(0, 4607, '\p{^Is_Hst=-T}', "");
Expect(0, 4607, '\P{Is_Hst=-T}', "");
Expect(1, 4607, '\P{^Is_Hst=-T}', "");
Expect(0, 4519, '\p{Is_Hst=-T}', "");
Expect(1, 4519, '\p{^Is_Hst=-T}', "");
Expect(1, 4519, '\P{Is_Hst=-T}', "");
Expect(0, 4519, '\P{^Is_Hst=-T}', "");
Error('\p{Hangul_Syllable_Type=_ LVT/a/Syllable}');
Error('\P{Hangul_Syllable_Type=_ LVT/a/Syllable}');
Expect(1, 44059, '\p{Hangul_Syllable_Type=lvtsyllable}', "");
Expect(0, 44059, '\p{^Hangul_Syllable_Type=lvtsyllable}', "");
Expect(0, 44059, '\P{Hangul_Syllable_Type=lvtsyllable}', "");
Expect(1, 44059, '\P{^Hangul_Syllable_Type=lvtsyllable}', "");
Expect(0, 44032, '\p{Hangul_Syllable_Type=lvtsyllable}', "");
Expect(1, 44032, '\p{^Hangul_Syllable_Type=lvtsyllable}', "");
Expect(1, 44032, '\P{Hangul_Syllable_Type=lvtsyllable}', "");
Expect(0, 44032, '\P{^Hangul_Syllable_Type=lvtsyllable}', "");
Expect(1, 44059, '\p{Hangul_Syllable_Type=		LVTSyllable}', "");
Expect(0, 44059, '\p{^Hangul_Syllable_Type=		LVTSyllable}', "");
Expect(0, 44059, '\P{Hangul_Syllable_Type=		LVTSyllable}', "");
Expect(1, 44059, '\P{^Hangul_Syllable_Type=		LVTSyllable}', "");
Expect(0, 44032, '\p{Hangul_Syllable_Type=		LVTSyllable}', "");
Expect(1, 44032, '\p{^Hangul_Syllable_Type=		LVTSyllable}', "");
Expect(1, 44032, '\P{Hangul_Syllable_Type=		LVTSyllable}', "");
Expect(0, 44032, '\P{^Hangul_Syllable_Type=		LVTSyllable}', "");
Error('\p{Hst=	:=LVT}');
Error('\P{Hst=	:=LVT}');
Expect(1, 44059, '\p{Hst=lvt}', "");
Expect(0, 44059, '\p{^Hst=lvt}', "");
Expect(0, 44059, '\P{Hst=lvt}', "");
Expect(1, 44059, '\P{^Hst=lvt}', "");
Expect(0, 44032, '\p{Hst=lvt}', "");
Expect(1, 44032, '\p{^Hst=lvt}', "");
Expect(1, 44032, '\P{Hst=lvt}', "");
Expect(0, 44032, '\P{^Hst=lvt}', "");
Expect(1, 44059, '\p{Hst=-	LVT}', "");
Expect(0, 44059, '\p{^Hst=-	LVT}', "");
Expect(0, 44059, '\P{Hst=-	LVT}', "");
Expect(1, 44059, '\P{^Hst=-	LVT}', "");
Expect(0, 44032, '\p{Hst=-	LVT}', "");
Expect(1, 44032, '\p{^Hst=-	LVT}', "");
Expect(1, 44032, '\P{Hst=-	LVT}', "");
Expect(0, 44032, '\P{^Hst=-	LVT}', "");
Error('\p{Is_Hangul_Syllable_Type=-:=lvtsyllable}');
Error('\P{Is_Hangul_Syllable_Type=-:=lvtsyllable}');
Expect(1, 44059, '\p{Is_Hangul_Syllable_Type=lvtsyllable}', "");
Expect(0, 44059, '\p{^Is_Hangul_Syllable_Type=lvtsyllable}', "");
Expect(0, 44059, '\P{Is_Hangul_Syllable_Type=lvtsyllable}', "");
Expect(1, 44059, '\P{^Is_Hangul_Syllable_Type=lvtsyllable}', "");
Expect(0, 44032, '\p{Is_Hangul_Syllable_Type=lvtsyllable}', "");
Expect(1, 44032, '\p{^Is_Hangul_Syllable_Type=lvtsyllable}', "");
Expect(1, 44032, '\P{Is_Hangul_Syllable_Type=lvtsyllable}', "");
Expect(0, 44032, '\P{^Is_Hangul_Syllable_Type=lvtsyllable}', "");
Expect(1, 44059, '\p{Is_Hangul_Syllable_Type= -LVT-Syllable}', "");
Expect(0, 44059, '\p{^Is_Hangul_Syllable_Type= -LVT-Syllable}', "");
Expect(0, 44059, '\P{Is_Hangul_Syllable_Type= -LVT-Syllable}', "");
Expect(1, 44059, '\P{^Is_Hangul_Syllable_Type= -LVT-Syllable}', "");
Expect(0, 44032, '\p{Is_Hangul_Syllable_Type= -LVT-Syllable}', "");
Expect(1, 44032, '\p{^Is_Hangul_Syllable_Type= -LVT-Syllable}', "");
Expect(1, 44032, '\P{Is_Hangul_Syllable_Type= -LVT-Syllable}', "");
Expect(0, 44032, '\P{^Is_Hangul_Syllable_Type= -LVT-Syllable}', "");
Error('\p{Is_Hst= :=LVT}');
Error('\P{Is_Hst= :=LVT}');
Expect(1, 44059, '\p{Is_Hst:   lvt}', "");
Expect(0, 44059, '\p{^Is_Hst:   lvt}', "");
Expect(0, 44059, '\P{Is_Hst:   lvt}', "");
Expect(1, 44059, '\P{^Is_Hst:   lvt}', "");
Expect(0, 44032, '\p{Is_Hst:   lvt}', "");
Expect(1, 44032, '\p{^Is_Hst:   lvt}', "");
Expect(1, 44032, '\P{Is_Hst:   lvt}', "");
Expect(0, 44032, '\P{^Is_Hst:   lvt}', "");
Expect(1, 44059, '\p{Is_Hst=_-lvt}', "");
Expect(0, 44059, '\p{^Is_Hst=_-lvt}', "");
Expect(0, 44059, '\P{Is_Hst=_-lvt}', "");
Expect(1, 44059, '\P{^Is_Hst=_-lvt}', "");
Expect(0, 44032, '\p{Is_Hst=_-lvt}', "");
Expect(1, 44032, '\p{^Is_Hst=_-lvt}', "");
Expect(1, 44032, '\P{Is_Hst=_-lvt}', "");
Expect(0, 44032, '\P{^Is_Hst=_-lvt}', "");
Error('\p{Hangul_Syllable_Type:   :=VowelJamo}');
Error('\P{Hangul_Syllable_Type:   :=VowelJamo}');
Expect(1, 4519, '\p{Hangul_Syllable_Type=voweljamo}', "");
Expect(0, 4519, '\p{^Hangul_Syllable_Type=voweljamo}', "");
Expect(0, 4519, '\P{Hangul_Syllable_Type=voweljamo}', "");
Expect(1, 4519, '\P{^Hangul_Syllable_Type=voweljamo}', "");
Expect(0, 4447, '\p{Hangul_Syllable_Type=voweljamo}', "");
Expect(1, 4447, '\p{^Hangul_Syllable_Type=voweljamo}', "");
Expect(1, 4447, '\P{Hangul_Syllable_Type=voweljamo}', "");
Expect(0, 4447, '\P{^Hangul_Syllable_Type=voweljamo}', "");
Expect(1, 4519, '\p{Hangul_Syllable_Type=vowel-Jamo}', "");
Expect(0, 4519, '\p{^Hangul_Syllable_Type=vowel-Jamo}', "");
Expect(0, 4519, '\P{Hangul_Syllable_Type=vowel-Jamo}', "");
Expect(1, 4519, '\P{^Hangul_Syllable_Type=vowel-Jamo}', "");
Expect(0, 4447, '\p{Hangul_Syllable_Type=vowel-Jamo}', "");
Expect(1, 4447, '\p{^Hangul_Syllable_Type=vowel-Jamo}', "");
Expect(1, 4447, '\P{Hangul_Syllable_Type=vowel-Jamo}', "");
Expect(0, 4447, '\P{^Hangul_Syllable_Type=vowel-Jamo}', "");
Error('\p{Hst=-/a/V}');
Error('\P{Hst=-/a/V}');
Expect(1, 4519, '\p{Hst=v}', "");
Expect(0, 4519, '\p{^Hst=v}', "");
Expect(0, 4519, '\P{Hst=v}', "");
Expect(1, 4519, '\P{^Hst=v}', "");
Expect(0, 4447, '\p{Hst=v}', "");
Expect(1, 4447, '\p{^Hst=v}', "");
Expect(1, 4447, '\P{Hst=v}', "");
Expect(0, 4447, '\P{^Hst=v}', "");
Expect(1, 4519, '\p{Hst=-v}', "");
Expect(0, 4519, '\p{^Hst=-v}', "");
Expect(0, 4519, '\P{Hst=-v}', "");
Expect(1, 4519, '\P{^Hst=-v}', "");
Expect(0, 4447, '\p{Hst=-v}', "");
Expect(1, 4447, '\p{^Hst=-v}', "");
Expect(1, 4447, '\P{Hst=-v}', "");
Expect(0, 4447, '\P{^Hst=-v}', "");
Error('\p{Is_Hangul_Syllable_Type=	/a/Vowel-Jamo}');
Error('\P{Is_Hangul_Syllable_Type=	/a/Vowel-Jamo}');
Expect(1, 4519, '\p{Is_Hangul_Syllable_Type=voweljamo}', "");
Expect(0, 4519, '\p{^Is_Hangul_Syllable_Type=voweljamo}', "");
Expect(0, 4519, '\P{Is_Hangul_Syllable_Type=voweljamo}', "");
Expect(1, 4519, '\P{^Is_Hangul_Syllable_Type=voweljamo}', "");
Expect(0, 4447, '\p{Is_Hangul_Syllable_Type=voweljamo}', "");
Expect(1, 4447, '\p{^Is_Hangul_Syllable_Type=voweljamo}', "");
Expect(1, 4447, '\P{Is_Hangul_Syllable_Type=voweljamo}', "");
Expect(0, 4447, '\P{^Is_Hangul_Syllable_Type=voweljamo}', "");
Expect(1, 4519, '\p{Is_Hangul_Syllable_Type=__vowel	jamo}', "");
Expect(0, 4519, '\p{^Is_Hangul_Syllable_Type=__vowel	jamo}', "");
Expect(0, 4519, '\P{Is_Hangul_Syllable_Type=__vowel	jamo}', "");
Expect(1, 4519, '\P{^Is_Hangul_Syllable_Type=__vowel	jamo}', "");
Expect(0, 4447, '\p{Is_Hangul_Syllable_Type=__vowel	jamo}', "");
Expect(1, 4447, '\p{^Is_Hangul_Syllable_Type=__vowel	jamo}', "");
Expect(1, 4447, '\P{Is_Hangul_Syllable_Type=__vowel	jamo}', "");
Expect(0, 4447, '\P{^Is_Hangul_Syllable_Type=__vowel	jamo}', "");
Error('\p{Is_Hst=/a/V}');
Error('\P{Is_Hst=/a/V}');
Expect(1, 4519, '\p{Is_Hst=v}', "");
Expect(0, 4519, '\p{^Is_Hst=v}', "");
Expect(0, 4519, '\P{Is_Hst=v}', "");
Expect(1, 4519, '\P{^Is_Hst=v}', "");
Expect(0, 4447, '\p{Is_Hst=v}', "");
Expect(1, 4447, '\p{^Is_Hst=v}', "");
Expect(1, 4447, '\P{Is_Hst=v}', "");
Expect(0, 4447, '\P{^Is_Hst=v}', "");
Expect(1, 4519, '\p{Is_Hst=__V}', "");
Expect(0, 4519, '\p{^Is_Hst=__V}', "");
Expect(0, 4519, '\P{Is_Hst=__V}', "");
Expect(1, 4519, '\P{^Is_Hst=__V}', "");
Expect(0, 4447, '\p{Is_Hst=__V}', "");
Expect(1, 4447, '\p{^Is_Hst=__V}', "");
Expect(1, 4447, '\P{Is_Hst=__V}', "");
Expect(0, 4447, '\P{^Is_Hst=__V}', "");
Error('\p{Hangul_Syllable_Type=_-LV:=SYLLABLE}');
Error('\P{Hangul_Syllable_Type=_-LV:=SYLLABLE}');
Expect(1, 44032, '\p{Hangul_Syllable_Type=lvsyllable}', "");
Expect(0, 44032, '\p{^Hangul_Syllable_Type=lvsyllable}', "");
Expect(0, 44032, '\P{Hangul_Syllable_Type=lvsyllable}', "");
Expect(1, 44032, '\P{^Hangul_Syllable_Type=lvsyllable}', "");
Expect(0, 44031, '\p{Hangul_Syllable_Type=lvsyllable}', "");
Expect(1, 44031, '\p{^Hangul_Syllable_Type=lvsyllable}', "");
Expect(1, 44031, '\P{Hangul_Syllable_Type=lvsyllable}', "");
Expect(0, 44031, '\P{^Hangul_Syllable_Type=lvsyllable}', "");
Expect(1, 44032, '\p{Hangul_Syllable_Type=	 lvSYLLABLE}', "");
Expect(0, 44032, '\p{^Hangul_Syllable_Type=	 lvSYLLABLE}', "");
Expect(0, 44032, '\P{Hangul_Syllable_Type=	 lvSYLLABLE}', "");
Expect(1, 44032, '\P{^Hangul_Syllable_Type=	 lvSYLLABLE}', "");
Expect(0, 44031, '\p{Hangul_Syllable_Type=	 lvSYLLABLE}', "");
Expect(1, 44031, '\p{^Hangul_Syllable_Type=	 lvSYLLABLE}', "");
Expect(1, 44031, '\P{Hangul_Syllable_Type=	 lvSYLLABLE}', "");
Expect(0, 44031, '\P{^Hangul_Syllable_Type=	 lvSYLLABLE}', "");
Error('\p{Hst=_/a/LV}');
Error('\P{Hst=_/a/LV}');
Expect(1, 44032, '\p{Hst=lv}', "");
Expect(0, 44032, '\p{^Hst=lv}', "");
Expect(0, 44032, '\P{Hst=lv}', "");
Expect(1, 44032, '\P{^Hst=lv}', "");
Expect(0, 44031, '\p{Hst=lv}', "");
Expect(1, 44031, '\p{^Hst=lv}', "");
Expect(1, 44031, '\P{Hst=lv}', "");
Expect(0, 44031, '\P{^Hst=lv}', "");
Expect(1, 44032, '\p{Hst=-_LV}', "");
Expect(0, 44032, '\p{^Hst=-_LV}', "");
Expect(0, 44032, '\P{Hst=-_LV}', "");
Expect(1, 44032, '\P{^Hst=-_LV}', "");
Expect(0, 44031, '\p{Hst=-_LV}', "");
Expect(1, 44031, '\p{^Hst=-_LV}', "");
Expect(1, 44031, '\P{Hst=-_LV}', "");
Expect(0, 44031, '\P{^Hst=-_LV}', "");
Error('\p{Is_Hangul_Syllable_Type=_LV:=Syllable}');
Error('\P{Is_Hangul_Syllable_Type=_LV:=Syllable}');
Expect(1, 44032, '\p{Is_Hangul_Syllable_Type=lvsyllable}', "");
Expect(0, 44032, '\p{^Is_Hangul_Syllable_Type=lvsyllable}', "");
Expect(0, 44032, '\P{Is_Hangul_Syllable_Type=lvsyllable}', "");
Expect(1, 44032, '\P{^Is_Hangul_Syllable_Type=lvsyllable}', "");
Expect(0, 44031, '\p{Is_Hangul_Syllable_Type=lvsyllable}', "");
Expect(1, 44031, '\p{^Is_Hangul_Syllable_Type=lvsyllable}', "");
Expect(1, 44031, '\P{Is_Hangul_Syllable_Type=lvsyllable}', "");
Expect(0, 44031, '\P{^Is_Hangul_Syllable_Type=lvsyllable}', "");
Expect(1, 44032, '\p{Is_Hangul_Syllable_Type=-lv_Syllable}', "");
Expect(0, 44032, '\p{^Is_Hangul_Syllable_Type=-lv_Syllable}', "");
Expect(0, 44032, '\P{Is_Hangul_Syllable_Type=-lv_Syllable}', "");
Expect(1, 44032, '\P{^Is_Hangul_Syllable_Type=-lv_Syllable}', "");
Expect(0, 44031, '\p{Is_Hangul_Syllable_Type=-lv_Syllable}', "");
Expect(1, 44031, '\p{^Is_Hangul_Syllable_Type=-lv_Syllable}', "");
Expect(1, 44031, '\P{Is_Hangul_Syllable_Type=-lv_Syllable}', "");
Expect(0, 44031, '\P{^Is_Hangul_Syllable_Type=-lv_Syllable}', "");
Error('\p{Is_Hst=_	LV:=}');
Error('\P{Is_Hst=_	LV:=}');
Expect(1, 44032, '\p{Is_Hst=lv}', "");
Expect(0, 44032, '\p{^Is_Hst=lv}', "");
Expect(0, 44032, '\P{Is_Hst=lv}', "");
Expect(1, 44032, '\P{^Is_Hst=lv}', "");
Expect(0, 44031, '\p{Is_Hst=lv}', "");
Expect(1, 44031, '\p{^Is_Hst=lv}', "");
Expect(1, 44031, '\P{Is_Hst=lv}', "");
Expect(0, 44031, '\P{^Is_Hst=lv}', "");
Expect(1, 44032, '\p{Is_Hst=_LV}', "");
Expect(0, 44032, '\p{^Is_Hst=_LV}', "");
Expect(0, 44032, '\P{Is_Hst=_LV}', "");
Expect(1, 44032, '\P{^Is_Hst=_LV}', "");
Expect(0, 44031, '\p{Is_Hst=_LV}', "");
Expect(1, 44031, '\p{^Is_Hst=_LV}', "");
Expect(1, 44031, '\P{Is_Hst=_LV}', "");
Expect(0, 44031, '\P{^Is_Hst=_LV}', "");
Error('\p{Hangul_Syllable_Type= _Not:=Applicable}');
Error('\P{Hangul_Syllable_Type= _Not:=Applicable}');
Expect(1, 4351, '\p{Hangul_Syllable_Type=notapplicable}', "");
Expect(0, 4351, '\p{^Hangul_Syllable_Type=notapplicable}', "");
Expect(0, 4351, '\P{Hangul_Syllable_Type=notapplicable}', "");
Expect(1, 4351, '\P{^Hangul_Syllable_Type=notapplicable}', "");
Expect(0, 4607, '\p{Hangul_Syllable_Type=notapplicable}', "");
Expect(1, 4607, '\p{^Hangul_Syllable_Type=notapplicable}', "");
Expect(1, 4607, '\P{Hangul_Syllable_Type=notapplicable}', "");
Expect(0, 4607, '\P{^Hangul_Syllable_Type=notapplicable}', "");
Expect(1, 4351, '\p{Hangul_Syllable_Type=-Not APPLICABLE}', "");
Expect(0, 4351, '\p{^Hangul_Syllable_Type=-Not APPLICABLE}', "");
Expect(0, 4351, '\P{Hangul_Syllable_Type=-Not APPLICABLE}', "");
Expect(1, 4351, '\P{^Hangul_Syllable_Type=-Not APPLICABLE}', "");
Expect(0, 4607, '\p{Hangul_Syllable_Type=-Not APPLICABLE}', "");
Expect(1, 4607, '\p{^Hangul_Syllable_Type=-Not APPLICABLE}', "");
Expect(1, 4607, '\P{Hangul_Syllable_Type=-Not APPLICABLE}', "");
Expect(0, 4607, '\P{^Hangul_Syllable_Type=-Not APPLICABLE}', "");
Error('\p{Hst=/a/-NA}');
Error('\P{Hst=/a/-NA}');
Expect(1, 4351, '\p{Hst=na}', "");
Expect(0, 4351, '\p{^Hst=na}', "");
Expect(0, 4351, '\P{Hst=na}', "");
Expect(1, 4351, '\P{^Hst=na}', "");
Expect(0, 4607, '\p{Hst=na}', "");
Expect(1, 4607, '\p{^Hst=na}', "");
Expect(1, 4607, '\P{Hst=na}', "");
Expect(0, 4607, '\P{^Hst=na}', "");
Expect(1, 4351, '\p{Hst=	_NA}', "");
Expect(0, 4351, '\p{^Hst=	_NA}', "");
Expect(0, 4351, '\P{Hst=	_NA}', "");
Expect(1, 4351, '\P{^Hst=	_NA}', "");
Expect(0, 4607, '\p{Hst=	_NA}', "");
Expect(1, 4607, '\p{^Hst=	_NA}', "");
Expect(1, 4607, '\P{Hst=	_NA}', "");
Expect(0, 4607, '\P{^Hst=	_NA}', "");
Error('\p{Is_Hangul_Syllable_Type= /a/not_Applicable}');
Error('\P{Is_Hangul_Syllable_Type= /a/not_Applicable}');
Expect(1, 4351, '\p{Is_Hangul_Syllable_Type=notapplicable}', "");
Expect(0, 4351, '\p{^Is_Hangul_Syllable_Type=notapplicable}', "");
Expect(0, 4351, '\P{Is_Hangul_Syllable_Type=notapplicable}', "");
Expect(1, 4351, '\P{^Is_Hangul_Syllable_Type=notapplicable}', "");
Expect(0, 4607, '\p{Is_Hangul_Syllable_Type=notapplicable}', "");
Expect(1, 4607, '\p{^Is_Hangul_Syllable_Type=notapplicable}', "");
Expect(1, 4607, '\P{Is_Hangul_Syllable_Type=notapplicable}', "");
Expect(0, 4607, '\P{^Is_Hangul_Syllable_Type=notapplicable}', "");
Expect(1, 4351, '\p{Is_Hangul_Syllable_Type=	_NOT_APPLICABLE}', "");
Expect(0, 4351, '\p{^Is_Hangul_Syllable_Type=	_NOT_APPLICABLE}', "");
Expect(0, 4351, '\P{Is_Hangul_Syllable_Type=	_NOT_APPLICABLE}', "");
Expect(1, 4351, '\P{^Is_Hangul_Syllable_Type=	_NOT_APPLICABLE}', "");
Expect(0, 4607, '\p{Is_Hangul_Syllable_Type=	_NOT_APPLICABLE}', "");
Expect(1, 4607, '\p{^Is_Hangul_Syllable_Type=	_NOT_APPLICABLE}', "");
Expect(1, 4607, '\P{Is_Hangul_Syllable_Type=	_NOT_APPLICABLE}', "");
Expect(0, 4607, '\P{^Is_Hangul_Syllable_Type=	_NOT_APPLICABLE}', "");
Error('\p{Is_Hst:   --na/a/}');
Error('\P{Is_Hst:   --na/a/}');
Expect(1, 4351, '\p{Is_Hst=na}', "");
Expect(0, 4351, '\p{^Is_Hst=na}', "");
Expect(0, 4351, '\P{Is_Hst=na}', "");
Expect(1, 4351, '\P{^Is_Hst=na}', "");
Expect(0, 4607, '\p{Is_Hst=na}', "");
Expect(1, 4607, '\p{^Is_Hst=na}', "");
Expect(1, 4607, '\P{Is_Hst=na}', "");
Expect(0, 4607, '\P{^Is_Hst=na}', "");
Expect(1, 4351, '\p{Is_Hst:   _	NA}', "");
Expect(0, 4351, '\p{^Is_Hst:   _	NA}', "");
Expect(0, 4351, '\P{Is_Hst:   _	NA}', "");
Expect(1, 4351, '\P{^Is_Hst:   _	NA}', "");
Expect(0, 4607, '\p{Is_Hst:   _	NA}', "");
Expect(1, 4607, '\p{^Is_Hst:   _	NA}', "");
Expect(1, 4607, '\P{Is_Hst:   _	NA}', "");
Expect(0, 4607, '\P{^Is_Hst:   _	NA}', "");
Error('\p{Hangul_Syllable_Type:  Leading Jamo/a/}');
Error('\P{Hangul_Syllable_Type:  Leading Jamo/a/}');
Expect(1, 4447, '\p{Hangul_Syllable_Type=leadingjamo}', "");
Expect(0, 4447, '\p{^Hangul_Syllable_Type=leadingjamo}', "");
Expect(0, 4447, '\P{Hangul_Syllable_Type=leadingjamo}', "");
Expect(1, 4447, '\P{^Hangul_Syllable_Type=leadingjamo}', "");
Expect(0, 4351, '\p{Hangul_Syllable_Type=leadingjamo}', "");
Expect(1, 4351, '\p{^Hangul_Syllable_Type=leadingjamo}', "");
Expect(1, 4351, '\P{Hangul_Syllable_Type=leadingjamo}', "");
Expect(0, 4351, '\P{^Hangul_Syllable_Type=leadingjamo}', "");
Expect(1, 4447, '\p{Hangul_Syllable_Type: _Leading_jamo}', "");
Expect(0, 4447, '\p{^Hangul_Syllable_Type: _Leading_jamo}', "");
Expect(0, 4447, '\P{Hangul_Syllable_Type: _Leading_jamo}', "");
Expect(1, 4447, '\P{^Hangul_Syllable_Type: _Leading_jamo}', "");
Expect(0, 4351, '\p{Hangul_Syllable_Type: _Leading_jamo}', "");
Expect(1, 4351, '\p{^Hangul_Syllable_Type: _Leading_jamo}', "");
Expect(1, 4351, '\P{Hangul_Syllable_Type: _Leading_jamo}', "");
Expect(0, 4351, '\P{^Hangul_Syllable_Type: _Leading_jamo}', "");
Error('\p{Hst=_:=L}');
Error('\P{Hst=_:=L}');
Expect(1, 4447, '\p{Hst=l}', "");
Expect(0, 4447, '\p{^Hst=l}', "");
Expect(0, 4447, '\P{Hst=l}', "");
Expect(1, 4447, '\P{^Hst=l}', "");
Expect(0, 4351, '\p{Hst=l}', "");
Expect(1, 4351, '\p{^Hst=l}', "");
Expect(1, 4351, '\P{Hst=l}', "");
Expect(0, 4351, '\P{^Hst=l}', "");
Expect(1, 4447, '\p{Hst=_	L}', "");
Expect(0, 4447, '\p{^Hst=_	L}', "");
Expect(0, 4447, '\P{Hst=_	L}', "");
Expect(1, 4447, '\P{^Hst=_	L}', "");
Expect(0, 4351, '\p{Hst=_	L}', "");
Expect(1, 4351, '\p{^Hst=_	L}', "");
Expect(1, 4351, '\P{Hst=_	L}', "");
Expect(0, 4351, '\P{^Hst=_	L}', "");
Error('\p{Is_Hangul_Syllable_Type=:=-LEADING JAMO}');
Error('\P{Is_Hangul_Syllable_Type=:=-LEADING JAMO}');
Expect(1, 4447, '\p{Is_Hangul_Syllable_Type=leadingjamo}', "");
Expect(0, 4447, '\p{^Is_Hangul_Syllable_Type=leadingjamo}', "");
Expect(0, 4447, '\P{Is_Hangul_Syllable_Type=leadingjamo}', "");
Expect(1, 4447, '\P{^Is_Hangul_Syllable_Type=leadingjamo}', "");
Expect(0, 4351, '\p{Is_Hangul_Syllable_Type=leadingjamo}', "");
Expect(1, 4351, '\p{^Is_Hangul_Syllable_Type=leadingjamo}', "");
Expect(1, 4351, '\P{Is_Hangul_Syllable_Type=leadingjamo}', "");
Expect(0, 4351, '\P{^Is_Hangul_Syllable_Type=leadingjamo}', "");
Expect(1, 4447, '\p{Is_Hangul_Syllable_Type=_	LEADING-Jamo}', "");
Expect(0, 4447, '\p{^Is_Hangul_Syllable_Type=_	LEADING-Jamo}', "");
Expect(0, 4447, '\P{Is_Hangul_Syllable_Type=_	LEADING-Jamo}', "");
Expect(1, 4447, '\P{^Is_Hangul_Syllable_Type=_	LEADING-Jamo}', "");
Expect(0, 4351, '\p{Is_Hangul_Syllable_Type=_	LEADING-Jamo}', "");
Expect(1, 4351, '\p{^Is_Hangul_Syllable_Type=_	LEADING-Jamo}', "");
Expect(1, 4351, '\P{Is_Hangul_Syllable_Type=_	LEADING-Jamo}', "");
Expect(0, 4351, '\P{^Is_Hangul_Syllable_Type=_	LEADING-Jamo}', "");
Error('\p{Is_Hst=:=	-L}');
Error('\P{Is_Hst=:=	-L}');
Expect(1, 4447, '\p{Is_Hst=l}', "");
Expect(0, 4447, '\p{^Is_Hst=l}', "");
Expect(0, 4447, '\P{Is_Hst=l}', "");
Expect(1, 4447, '\P{^Is_Hst=l}', "");
Expect(0, 4351, '\p{Is_Hst=l}', "");
Expect(1, 4351, '\p{^Is_Hst=l}', "");
Expect(1, 4351, '\P{Is_Hst=l}', "");
Expect(0, 4351, '\P{^Is_Hst=l}', "");
Expect(1, 4447, '\p{Is_Hst=L}', "");
Expect(0, 4447, '\p{^Is_Hst=L}', "");
Expect(0, 4447, '\P{Is_Hst=L}', "");
Expect(1, 4447, '\P{^Is_Hst=L}', "");
Expect(0, 4351, '\p{Is_Hst=L}', "");
Expect(1, 4351, '\p{^Is_Hst=L}', "");
Expect(1, 4351, '\P{Is_Hst=L}', "");
Expect(0, 4351, '\P{^Is_Hst=L}', "");
Error('\p{Noncharacter_Code_Point=	yes:=}');
Error('\P{Noncharacter_Code_Point=	yes:=}');
Expect(1, 65007, '\p{Noncharacter_Code_Point=yes}', "");
Expect(0, 65007, '\p{^Noncharacter_Code_Point=yes}', "");
Expect(0, 65007, '\P{Noncharacter_Code_Point=yes}', "");
Expect(1, 65007, '\P{^Noncharacter_Code_Point=yes}', "");
Expect(0, 64975, '\p{Noncharacter_Code_Point=yes}', "");
Expect(1, 64975, '\p{^Noncharacter_Code_Point=yes}', "");
Expect(1, 64975, '\P{Noncharacter_Code_Point=yes}', "");
Expect(0, 64975, '\P{^Noncharacter_Code_Point=yes}', "");
Expect(1, 65007, '\p{Noncharacter_Code_Point=-	yes}', "");
Expect(0, 65007, '\p{^Noncharacter_Code_Point=-	yes}', "");
Expect(0, 65007, '\P{Noncharacter_Code_Point=-	yes}', "");
Expect(1, 65007, '\P{^Noncharacter_Code_Point=-	yes}', "");
Expect(0, 64975, '\p{Noncharacter_Code_Point=-	yes}', "");
Expect(1, 64975, '\p{^Noncharacter_Code_Point=-	yes}', "");
Expect(1, 64975, '\P{Noncharacter_Code_Point=-	yes}', "");
Expect(0, 64975, '\P{^Noncharacter_Code_Point=-	yes}', "");
Error('\p{NChar=--Y:=}');
Error('\P{NChar=--Y:=}');
Expect(1, 65007, '\p{NChar=y}', "");
Expect(0, 65007, '\p{^NChar=y}', "");
Expect(0, 65007, '\P{NChar=y}', "");
Expect(1, 65007, '\P{^NChar=y}', "");
Expect(0, 64975, '\p{NChar=y}', "");
Expect(1, 64975, '\p{^NChar=y}', "");
Expect(1, 64975, '\P{NChar=y}', "");
Expect(0, 64975, '\P{^NChar=y}', "");
Expect(1, 65007, '\p{NChar=	y}', "");
Expect(0, 65007, '\p{^NChar=	y}', "");
Expect(0, 65007, '\P{NChar=	y}', "");
Expect(1, 65007, '\P{^NChar=	y}', "");
Expect(0, 64975, '\p{NChar=	y}', "");
Expect(1, 64975, '\p{^NChar=	y}', "");
Expect(1, 64975, '\P{NChar=	y}', "");
Expect(0, 64975, '\P{^NChar=	y}', "");
Error('\p{Is_Noncharacter_Code_Point=T:=}');
Error('\P{Is_Noncharacter_Code_Point=T:=}');
Expect(1, 65007, '\p{Is_Noncharacter_Code_Point=t}', "");
Expect(0, 65007, '\p{^Is_Noncharacter_Code_Point=t}', "");
Expect(0, 65007, '\P{Is_Noncharacter_Code_Point=t}', "");
Expect(1, 65007, '\P{^Is_Noncharacter_Code_Point=t}', "");
Expect(0, 64975, '\p{Is_Noncharacter_Code_Point=t}', "");
Expect(1, 64975, '\p{^Is_Noncharacter_Code_Point=t}', "");
Expect(1, 64975, '\P{Is_Noncharacter_Code_Point=t}', "");
Expect(0, 64975, '\P{^Is_Noncharacter_Code_Point=t}', "");
Expect(1, 65007, '\p{Is_Noncharacter_Code_Point=T}', "");
Expect(0, 65007, '\p{^Is_Noncharacter_Code_Point=T}', "");
Expect(0, 65007, '\P{Is_Noncharacter_Code_Point=T}', "");
Expect(1, 65007, '\P{^Is_Noncharacter_Code_Point=T}', "");
Expect(0, 64975, '\p{Is_Noncharacter_Code_Point=T}', "");
Expect(1, 64975, '\p{^Is_Noncharacter_Code_Point=T}', "");
Expect(1, 64975, '\P{Is_Noncharacter_Code_Point=T}', "");
Expect(0, 64975, '\P{^Is_Noncharacter_Code_Point=T}', "");
Error('\p{Is_NChar=	_TRUE:=}');
Error('\P{Is_NChar=	_TRUE:=}');
Expect(1, 65007, '\p{Is_NChar=true}', "");
Expect(0, 65007, '\p{^Is_NChar=true}', "");
Expect(0, 65007, '\P{Is_NChar=true}', "");
Expect(1, 65007, '\P{^Is_NChar=true}', "");
Expect(0, 64975, '\p{Is_NChar=true}', "");
Expect(1, 64975, '\p{^Is_NChar=true}', "");
Expect(1, 64975, '\P{Is_NChar=true}', "");
Expect(0, 64975, '\P{^Is_NChar=true}', "");
Expect(1, 65007, '\p{Is_NChar=-TRUE}', "");
Expect(0, 65007, '\p{^Is_NChar=-TRUE}', "");
Expect(0, 65007, '\P{Is_NChar=-TRUE}', "");
Expect(1, 65007, '\P{^Is_NChar=-TRUE}', "");
Expect(0, 64975, '\p{Is_NChar=-TRUE}', "");
Expect(1, 64975, '\p{^Is_NChar=-TRUE}', "");
Expect(1, 64975, '\P{Is_NChar=-TRUE}', "");
Expect(0, 64975, '\P{^Is_NChar=-TRUE}', "");
Error('\p{Noncharacter_Code_Point=	no/a/}');
Error('\P{Noncharacter_Code_Point=	no/a/}');
Expect(1, 64975, '\p{Noncharacter_Code_Point=no}', "");
Expect(0, 64975, '\p{^Noncharacter_Code_Point=no}', "");
Expect(0, 64975, '\P{Noncharacter_Code_Point=no}', "");
Expect(1, 64975, '\P{^Noncharacter_Code_Point=no}', "");
Expect(0, 65007, '\p{Noncharacter_Code_Point=no}', "");
Expect(1, 65007, '\p{^Noncharacter_Code_Point=no}', "");
Expect(1, 65007, '\P{Noncharacter_Code_Point=no}', "");
Expect(0, 65007, '\P{^Noncharacter_Code_Point=no}', "");
Expect(1, 64975, '\p{Noncharacter_Code_Point= 	no}', "");
Expect(0, 64975, '\p{^Noncharacter_Code_Point= 	no}', "");
Expect(0, 64975, '\P{Noncharacter_Code_Point= 	no}', "");
Expect(1, 64975, '\P{^Noncharacter_Code_Point= 	no}', "");
Expect(0, 65007, '\p{Noncharacter_Code_Point= 	no}', "");
Expect(1, 65007, '\p{^Noncharacter_Code_Point= 	no}', "");
Expect(1, 65007, '\P{Noncharacter_Code_Point= 	no}', "");
Expect(0, 65007, '\P{^Noncharacter_Code_Point= 	no}', "");
Error('\p{NChar=_	n/a/}');
Error('\P{NChar=_	n/a/}');
Expect(1, 64975, '\p{NChar=n}', "");
Expect(0, 64975, '\p{^NChar=n}', "");
Expect(0, 64975, '\P{NChar=n}', "");
Expect(1, 64975, '\P{^NChar=n}', "");
Expect(0, 65007, '\p{NChar=n}', "");
Expect(1, 65007, '\p{^NChar=n}', "");
Expect(1, 65007, '\P{NChar=n}', "");
Expect(0, 65007, '\P{^NChar=n}', "");
Expect(1, 64975, '\p{NChar:    -n}', "");
Expect(0, 64975, '\p{^NChar:    -n}', "");
Expect(0, 64975, '\P{NChar:    -n}', "");
Expect(1, 64975, '\P{^NChar:    -n}', "");
Expect(0, 65007, '\p{NChar:    -n}', "");
Expect(1, 65007, '\p{^NChar:    -n}', "");
Expect(1, 65007, '\P{NChar:    -n}', "");
Expect(0, 65007, '\P{^NChar:    -n}', "");
Error('\p{Is_Noncharacter_Code_Point= -F/a/}');
Error('\P{Is_Noncharacter_Code_Point= -F/a/}');
Expect(1, 64975, '\p{Is_Noncharacter_Code_Point:   f}', "");
Expect(0, 64975, '\p{^Is_Noncharacter_Code_Point:   f}', "");
Expect(0, 64975, '\P{Is_Noncharacter_Code_Point:   f}', "");
Expect(1, 64975, '\P{^Is_Noncharacter_Code_Point:   f}', "");
Expect(0, 65007, '\p{Is_Noncharacter_Code_Point:   f}', "");
Expect(1, 65007, '\p{^Is_Noncharacter_Code_Point:   f}', "");
Expect(1, 65007, '\P{Is_Noncharacter_Code_Point:   f}', "");
Expect(0, 65007, '\P{^Is_Noncharacter_Code_Point:   f}', "");
Expect(1, 64975, '\p{Is_Noncharacter_Code_Point=  F}', "");
Expect(0, 64975, '\p{^Is_Noncharacter_Code_Point=  F}', "");
Expect(0, 64975, '\P{Is_Noncharacter_Code_Point=  F}', "");
Expect(1, 64975, '\P{^Is_Noncharacter_Code_Point=  F}', "");
Expect(0, 65007, '\p{Is_Noncharacter_Code_Point=  F}', "");
Expect(1, 65007, '\p{^Is_Noncharacter_Code_Point=  F}', "");
Expect(1, 65007, '\P{Is_Noncharacter_Code_Point=  F}', "");
Expect(0, 65007, '\P{^Is_Noncharacter_Code_Point=  F}', "");
Error('\p{Is_NChar=-:=False}');
Error('\P{Is_NChar=-:=False}');
Expect(1, 64975, '\p{Is_NChar=false}', "");
Expect(0, 64975, '\p{^Is_NChar=false}', "");
Expect(0, 64975, '\P{Is_NChar=false}', "");
Expect(1, 64975, '\P{^Is_NChar=false}', "");
Expect(0, 65007, '\p{Is_NChar=false}', "");
Expect(1, 65007, '\p{^Is_NChar=false}', "");
Expect(1, 65007, '\P{Is_NChar=false}', "");
Expect(0, 65007, '\P{^Is_NChar=false}', "");
Expect(1, 64975, '\p{Is_NChar=	False}', "");
Expect(0, 64975, '\p{^Is_NChar=	False}', "");
Expect(0, 64975, '\P{Is_NChar=	False}', "");
Expect(1, 64975, '\P{^Is_NChar=	False}', "");
Expect(0, 65007, '\p{Is_NChar=	False}', "");
Expect(1, 65007, '\p{^Is_NChar=	False}', "");
Expect(1, 65007, '\P{Is_NChar=	False}', "");
Expect(0, 65007, '\P{^Is_NChar=	False}', "");
Error('\p{Unified_Ideograph=	YES:=}');
Error('\P{Unified_Ideograph=	YES:=}');
Expect(1, 19893, '\p{Unified_Ideograph=yes}', "");
Expect(0, 19893, '\p{^Unified_Ideograph=yes}', "");
Expect(0, 19893, '\P{Unified_Ideograph=yes}', "");
Expect(1, 19893, '\P{^Unified_Ideograph=yes}', "");
Expect(0, 13311, '\p{Unified_Ideograph=yes}', "");
Expect(1, 13311, '\p{^Unified_Ideograph=yes}', "");
Expect(1, 13311, '\P{Unified_Ideograph=yes}', "");
Expect(0, 13311, '\P{^Unified_Ideograph=yes}', "");
Expect(1, 19893, '\p{Unified_Ideograph: _	Yes}', "");
Expect(0, 19893, '\p{^Unified_Ideograph: _	Yes}', "");
Expect(0, 19893, '\P{Unified_Ideograph: _	Yes}', "");
Expect(1, 19893, '\P{^Unified_Ideograph: _	Yes}', "");
Expect(0, 13311, '\p{Unified_Ideograph: _	Yes}', "");
Expect(1, 13311, '\p{^Unified_Ideograph: _	Yes}', "");
Expect(1, 13311, '\P{Unified_Ideograph: _	Yes}', "");
Expect(0, 13311, '\P{^Unified_Ideograph: _	Yes}', "");
Error('\p{UIdeo=Y:=}');
Error('\P{UIdeo=Y:=}');
Expect(1, 19893, '\p{UIdeo=y}', "");
Expect(0, 19893, '\p{^UIdeo=y}', "");
Expect(0, 19893, '\P{UIdeo=y}', "");
Expect(1, 19893, '\P{^UIdeo=y}', "");
Expect(0, 13311, '\p{UIdeo=y}', "");
Expect(1, 13311, '\p{^UIdeo=y}', "");
Expect(1, 13311, '\P{UIdeo=y}', "");
Expect(0, 13311, '\P{^UIdeo=y}', "");
Expect(1, 19893, '\p{UIdeo=	-Y}', "");
Expect(0, 19893, '\p{^UIdeo=	-Y}', "");
Expect(0, 19893, '\P{UIdeo=	-Y}', "");
Expect(1, 19893, '\P{^UIdeo=	-Y}', "");
Expect(0, 13311, '\p{UIdeo=	-Y}', "");
Expect(1, 13311, '\p{^UIdeo=	-Y}', "");
Expect(1, 13311, '\P{UIdeo=	-Y}', "");
Expect(0, 13311, '\P{^UIdeo=	-Y}', "");
Error('\p{Is_Unified_Ideograph=	T:=}');
Error('\P{Is_Unified_Ideograph=	T:=}');
Expect(1, 19893, '\p{Is_Unified_Ideograph=t}', "");
Expect(0, 19893, '\p{^Is_Unified_Ideograph=t}', "");
Expect(0, 19893, '\P{Is_Unified_Ideograph=t}', "");
Expect(1, 19893, '\P{^Is_Unified_Ideograph=t}', "");
Expect(0, 13311, '\p{Is_Unified_Ideograph=t}', "");
Expect(1, 13311, '\p{^Is_Unified_Ideograph=t}', "");
Expect(1, 13311, '\P{Is_Unified_Ideograph=t}', "");
Expect(0, 13311, '\P{^Is_Unified_Ideograph=t}', "");
Expect(1, 19893, '\p{Is_Unified_Ideograph=  T}', "");
Expect(0, 19893, '\p{^Is_Unified_Ideograph=  T}', "");
Expect(0, 19893, '\P{Is_Unified_Ideograph=  T}', "");
Expect(1, 19893, '\P{^Is_Unified_Ideograph=  T}', "");
Expect(0, 13311, '\p{Is_Unified_Ideograph=  T}', "");
Expect(1, 13311, '\p{^Is_Unified_Ideograph=  T}', "");
Expect(1, 13311, '\P{Is_Unified_Ideograph=  T}', "");
Expect(0, 13311, '\P{^Is_Unified_Ideograph=  T}', "");
Error('\p{Is_UIdeo: /a/True}');
Error('\P{Is_UIdeo: /a/True}');
Expect(1, 19893, '\p{Is_UIdeo=true}', "");
Expect(0, 19893, '\p{^Is_UIdeo=true}', "");
Expect(0, 19893, '\P{Is_UIdeo=true}', "");
Expect(1, 19893, '\P{^Is_UIdeo=true}', "");
Expect(0, 13311, '\p{Is_UIdeo=true}', "");
Expect(1, 13311, '\p{^Is_UIdeo=true}', "");
Expect(1, 13311, '\P{Is_UIdeo=true}', "");
Expect(0, 13311, '\P{^Is_UIdeo=true}', "");
Expect(1, 19893, '\p{Is_UIdeo= _true}', "");
Expect(0, 19893, '\p{^Is_UIdeo= _true}', "");
Expect(0, 19893, '\P{Is_UIdeo= _true}', "");
Expect(1, 19893, '\P{^Is_UIdeo= _true}', "");
Expect(0, 13311, '\p{Is_UIdeo= _true}', "");
Expect(1, 13311, '\p{^Is_UIdeo= _true}', "");
Expect(1, 13311, '\P{Is_UIdeo= _true}', "");
Expect(0, 13311, '\P{^Is_UIdeo= _true}', "");
Error('\p{Unified_Ideograph=	 no:=}');
Error('\P{Unified_Ideograph=	 no:=}');
Expect(1, 13311, '\p{Unified_Ideograph=no}', "");
Expect(0, 13311, '\p{^Unified_Ideograph=no}', "");
Expect(0, 13311, '\P{Unified_Ideograph=no}', "");
Expect(1, 13311, '\P{^Unified_Ideograph=no}', "");
Expect(0, 19893, '\p{Unified_Ideograph=no}', "");
Expect(1, 19893, '\p{^Unified_Ideograph=no}', "");
Expect(1, 19893, '\P{Unified_Ideograph=no}', "");
Expect(0, 19893, '\P{^Unified_Ideograph=no}', "");
Expect(1, 13311, '\p{Unified_Ideograph=	 no}', "");
Expect(0, 13311, '\p{^Unified_Ideograph=	 no}', "");
Expect(0, 13311, '\P{Unified_Ideograph=	 no}', "");
Expect(1, 13311, '\P{^Unified_Ideograph=	 no}', "");
Expect(0, 19893, '\p{Unified_Ideograph=	 no}', "");
Expect(1, 19893, '\p{^Unified_Ideograph=	 no}', "");
Expect(1, 19893, '\P{Unified_Ideograph=	 no}', "");
Expect(0, 19893, '\P{^Unified_Ideograph=	 no}', "");
Error('\p{UIdeo=	_N:=}');
Error('\P{UIdeo=	_N:=}');
Expect(1, 13311, '\p{UIdeo=n}', "");
Expect(0, 13311, '\p{^UIdeo=n}', "");
Expect(0, 13311, '\P{UIdeo=n}', "");
Expect(1, 13311, '\P{^UIdeo=n}', "");
Expect(0, 19893, '\p{UIdeo=n}', "");
Expect(1, 19893, '\p{^UIdeo=n}', "");
Expect(1, 19893, '\P{UIdeo=n}', "");
Expect(0, 19893, '\P{^UIdeo=n}', "");
Expect(1, 13311, '\p{UIdeo=	 N}', "");
Expect(0, 13311, '\p{^UIdeo=	 N}', "");
Expect(0, 13311, '\P{UIdeo=	 N}', "");
Expect(1, 13311, '\P{^UIdeo=	 N}', "");
Expect(0, 19893, '\p{UIdeo=	 N}', "");
Expect(1, 19893, '\p{^UIdeo=	 N}', "");
Expect(1, 19893, '\P{UIdeo=	 N}', "");
Expect(0, 19893, '\P{^UIdeo=	 N}', "");
Error('\p{Is_Unified_Ideograph=_/a/f}');
Error('\P{Is_Unified_Ideograph=_/a/f}');
Expect(1, 13311, '\p{Is_Unified_Ideograph=f}', "");
Expect(0, 13311, '\p{^Is_Unified_Ideograph=f}', "");
Expect(0, 13311, '\P{Is_Unified_Ideograph=f}', "");
Expect(1, 13311, '\P{^Is_Unified_Ideograph=f}', "");
Expect(0, 19893, '\p{Is_Unified_Ideograph=f}', "");
Expect(1, 19893, '\p{^Is_Unified_Ideograph=f}', "");
Expect(1, 19893, '\P{Is_Unified_Ideograph=f}', "");
Expect(0, 19893, '\P{^Is_Unified_Ideograph=f}', "");
Expect(1, 13311, '\p{Is_Unified_Ideograph= _F}', "");
Expect(0, 13311, '\p{^Is_Unified_Ideograph= _F}', "");
Expect(0, 13311, '\P{Is_Unified_Ideograph= _F}', "");
Expect(1, 13311, '\P{^Is_Unified_Ideograph= _F}', "");
Expect(0, 19893, '\p{Is_Unified_Ideograph= _F}', "");
Expect(1, 19893, '\p{^Is_Unified_Ideograph= _F}', "");
Expect(1, 19893, '\P{Is_Unified_Ideograph= _F}', "");
Expect(0, 19893, '\P{^Is_Unified_Ideograph= _F}', "");
Error('\p{Is_UIdeo=:=_	False}');
Error('\P{Is_UIdeo=:=_	False}');
Expect(1, 13311, '\p{Is_UIdeo=false}', "");
Expect(0, 13311, '\p{^Is_UIdeo=false}', "");
Expect(0, 13311, '\P{Is_UIdeo=false}', "");
Expect(1, 13311, '\P{^Is_UIdeo=false}', "");
Expect(0, 19893, '\p{Is_UIdeo=false}', "");
Expect(1, 19893, '\p{^Is_UIdeo=false}', "");
Expect(1, 19893, '\P{Is_UIdeo=false}', "");
Expect(0, 19893, '\P{^Is_UIdeo=false}', "");
Expect(1, 13311, '\p{Is_UIdeo=_-false}', "");
Expect(0, 13311, '\p{^Is_UIdeo=_-false}', "");
Expect(0, 13311, '\P{Is_UIdeo=_-false}', "");
Expect(1, 13311, '\P{^Is_UIdeo=_-false}', "");
Expect(0, 19893, '\p{Is_UIdeo=_-false}', "");
Expect(1, 19893, '\p{^Is_UIdeo=_-false}', "");
Expect(1, 19893, '\P{Is_UIdeo=_-false}', "");
Expect(0, 19893, '\P{^Is_UIdeo=_-false}', "");
Error('\p{Diacritic=_/a/Yes}');
Error('\P{Diacritic=_/a/Yes}');
Expect(1, 94, '\p{Diacritic=yes}', "");
Expect(0, 94, '\p{^Diacritic=yes}', "");
Expect(0, 94, '\P{Diacritic=yes}', "");
Expect(1, 94, '\P{^Diacritic=yes}', "");
Expect(0, 93, '\p{Diacritic=yes}', "");
Expect(1, 93, '\p{^Diacritic=yes}', "");
Expect(1, 93, '\P{Diacritic=yes}', "");
Expect(0, 93, '\P{^Diacritic=yes}', "");
Expect(1, 94, '\p{Diacritic=	 yes}', "");
Expect(0, 94, '\p{^Diacritic=	 yes}', "");
Expect(0, 94, '\P{Diacritic=	 yes}', "");
Expect(1, 94, '\P{^Diacritic=	 yes}', "");
Expect(0, 93, '\p{Diacritic=	 yes}', "");
Expect(1, 93, '\p{^Diacritic=	 yes}', "");
Expect(1, 93, '\P{Diacritic=	 yes}', "");
Expect(0, 93, '\P{^Diacritic=	 yes}', "");
Error('\p{Dia= /a/Y}');
Error('\P{Dia= /a/Y}');
Expect(1, 94, '\p{Dia=y}', "");
Expect(0, 94, '\p{^Dia=y}', "");
Expect(0, 94, '\P{Dia=y}', "");
Expect(1, 94, '\P{^Dia=y}', "");
Expect(0, 93, '\p{Dia=y}', "");
Expect(1, 93, '\p{^Dia=y}', "");
Expect(1, 93, '\P{Dia=y}', "");
Expect(0, 93, '\P{^Dia=y}', "");
Expect(1, 94, '\p{Dia=	_Y}', "");
Expect(0, 94, '\p{^Dia=	_Y}', "");
Expect(0, 94, '\P{Dia=	_Y}', "");
Expect(1, 94, '\P{^Dia=	_Y}', "");
Expect(0, 93, '\p{Dia=	_Y}', "");
Expect(1, 93, '\p{^Dia=	_Y}', "");
Expect(1, 93, '\P{Dia=	_Y}', "");
Expect(0, 93, '\P{^Dia=	_Y}', "");
Error('\p{Is_Diacritic=/a/-	T}');
Error('\P{Is_Diacritic=/a/-	T}');
Expect(1, 94, '\p{Is_Diacritic=t}', "");
Expect(0, 94, '\p{^Is_Diacritic=t}', "");
Expect(0, 94, '\P{Is_Diacritic=t}', "");
Expect(1, 94, '\P{^Is_Diacritic=t}', "");
Expect(0, 93, '\p{Is_Diacritic=t}', "");
Expect(1, 93, '\p{^Is_Diacritic=t}', "");
Expect(1, 93, '\P{Is_Diacritic=t}', "");
Expect(0, 93, '\P{^Is_Diacritic=t}', "");
Expect(1, 94, '\p{Is_Diacritic=--t}', "");
Expect(0, 94, '\p{^Is_Diacritic=--t}', "");
Expect(0, 94, '\P{Is_Diacritic=--t}', "");
Expect(1, 94, '\P{^Is_Diacritic=--t}', "");
Expect(0, 93, '\p{Is_Diacritic=--t}', "");
Expect(1, 93, '\p{^Is_Diacritic=--t}', "");
Expect(1, 93, '\P{Is_Diacritic=--t}', "");
Expect(0, 93, '\P{^Is_Diacritic=--t}', "");
Error('\p{Is_Dia=	/a/TRUE}');
Error('\P{Is_Dia=	/a/TRUE}');
Expect(1, 94, '\p{Is_Dia=true}', "");
Expect(0, 94, '\p{^Is_Dia=true}', "");
Expect(0, 94, '\P{Is_Dia=true}', "");
Expect(1, 94, '\P{^Is_Dia=true}', "");
Expect(0, 93, '\p{Is_Dia=true}', "");
Expect(1, 93, '\p{^Is_Dia=true}', "");
Expect(1, 93, '\P{Is_Dia=true}', "");
Expect(0, 93, '\P{^Is_Dia=true}', "");
Expect(1, 94, '\p{Is_Dia:	 TRUE}', "");
Expect(0, 94, '\p{^Is_Dia:	 TRUE}', "");
Expect(0, 94, '\P{Is_Dia:	 TRUE}', "");
Expect(1, 94, '\P{^Is_Dia:	 TRUE}', "");
Expect(0, 93, '\p{Is_Dia:	 TRUE}', "");
Expect(1, 93, '\p{^Is_Dia:	 TRUE}', "");
Expect(1, 93, '\P{Is_Dia:	 TRUE}', "");
Expect(0, 93, '\P{^Is_Dia:	 TRUE}', "");
Error('\p{Diacritic=/a/	 NO}');
Error('\P{Diacritic=/a/	 NO}');
Expect(1, 93, '\p{Diacritic=no}', "");
Expect(0, 93, '\p{^Diacritic=no}', "");
Expect(0, 93, '\P{Diacritic=no}', "");
Expect(1, 93, '\P{^Diacritic=no}', "");
Expect(0, 94, '\p{Diacritic=no}', "");
Expect(1, 94, '\p{^Diacritic=no}', "");
Expect(1, 94, '\P{Diacritic=no}', "");
Expect(0, 94, '\P{^Diacritic=no}', "");
Expect(1, 93, '\p{Diacritic=_ NO}', "");
Expect(0, 93, '\p{^Diacritic=_ NO}', "");
Expect(0, 93, '\P{Diacritic=_ NO}', "");
Expect(1, 93, '\P{^Diacritic=_ NO}', "");
Expect(0, 94, '\p{Diacritic=_ NO}', "");
Expect(1, 94, '\p{^Diacritic=_ NO}', "");
Expect(1, 94, '\P{Diacritic=_ NO}', "");
Expect(0, 94, '\P{^Diacritic=_ NO}', "");
Error('\p{Dia=:=-_n}');
Error('\P{Dia=:=-_n}');
Expect(1, 93, '\p{Dia=n}', "");
Expect(0, 93, '\p{^Dia=n}', "");
Expect(0, 93, '\P{Dia=n}', "");
Expect(1, 93, '\P{^Dia=n}', "");
Expect(0, 94, '\p{Dia=n}', "");
Expect(1, 94, '\p{^Dia=n}', "");
Expect(1, 94, '\P{Dia=n}', "");
Expect(0, 94, '\P{^Dia=n}', "");
Expect(1, 93, '\p{Dia=-	N}', "");
Expect(0, 93, '\p{^Dia=-	N}', "");
Expect(0, 93, '\P{Dia=-	N}', "");
Expect(1, 93, '\P{^Dia=-	N}', "");
Expect(0, 94, '\p{Dia=-	N}', "");
Expect(1, 94, '\p{^Dia=-	N}', "");
Expect(1, 94, '\P{Dia=-	N}', "");
Expect(0, 94, '\P{^Dia=-	N}', "");
Error('\p{Is_Diacritic=_:=F}');
Error('\P{Is_Diacritic=_:=F}');
Expect(1, 93, '\p{Is_Diacritic=f}', "");
Expect(0, 93, '\p{^Is_Diacritic=f}', "");
Expect(0, 93, '\P{Is_Diacritic=f}', "");
Expect(1, 93, '\P{^Is_Diacritic=f}', "");
Expect(0, 94, '\p{Is_Diacritic=f}', "");
Expect(1, 94, '\p{^Is_Diacritic=f}', "");
Expect(1, 94, '\P{Is_Diacritic=f}', "");
Expect(0, 94, '\P{^Is_Diacritic=f}', "");
Expect(1, 93, '\p{Is_Diacritic:   F}', "");
Expect(0, 93, '\p{^Is_Diacritic:   F}', "");
Expect(0, 93, '\P{Is_Diacritic:   F}', "");
Expect(1, 93, '\P{^Is_Diacritic:   F}', "");
Expect(0, 94, '\p{Is_Diacritic:   F}', "");
Expect(1, 94, '\p{^Is_Diacritic:   F}', "");
Expect(1, 94, '\P{Is_Diacritic:   F}', "");
Expect(0, 94, '\P{^Is_Diacritic:   F}', "");
Error('\p{Is_Dia= /a/False}');
Error('\P{Is_Dia= /a/False}');
Expect(1, 93, '\p{Is_Dia=false}', "");
Expect(0, 93, '\p{^Is_Dia=false}', "");
Expect(0, 93, '\P{Is_Dia=false}', "");
Expect(1, 93, '\P{^Is_Dia=false}', "");
Expect(0, 94, '\p{Is_Dia=false}', "");
Expect(1, 94, '\p{^Is_Dia=false}', "");
Expect(1, 94, '\P{Is_Dia=false}', "");
Expect(0, 94, '\P{^Is_Dia=false}', "");
Expect(1, 93, '\p{Is_Dia=	FALSE}', "");
Expect(0, 93, '\p{^Is_Dia=	FALSE}', "");
Expect(0, 93, '\P{Is_Dia=	FALSE}', "");
Expect(1, 93, '\P{^Is_Dia=	FALSE}', "");
Expect(0, 94, '\p{Is_Dia=	FALSE}', "");
Expect(1, 94, '\p{^Is_Dia=	FALSE}', "");
Expect(1, 94, '\P{Is_Dia=	FALSE}', "");
Expect(0, 94, '\P{^Is_Dia=	FALSE}', "");
Error('\p{Perl_Canonical_Combining_Class=0}');
Error('\P{Perl_Canonical_Combining_Class=0}');
Error('\p{Perl_ccc=0}');
Error('\P{Perl_ccc=0}');
Error('\p{Grapheme_Extend:_ yes/a/}');
Error('\P{Grapheme_Extend:_ yes/a/}');
Expect(1, 879, '\p{Grapheme_Extend=yes}', "");
Expect(0, 879, '\p{^Grapheme_Extend=yes}', "");
Expect(0, 879, '\P{Grapheme_Extend=yes}', "");
Expect(1, 879, '\P{^Grapheme_Extend=yes}', "");
Expect(0, 767, '\p{Grapheme_Extend=yes}', "");
Expect(1, 767, '\p{^Grapheme_Extend=yes}', "");
Expect(1, 767, '\P{Grapheme_Extend=yes}', "");
Expect(0, 767, '\P{^Grapheme_Extend=yes}', "");
Expect(1, 879, '\p{Grapheme_Extend:	- Yes}', "");
Expect(0, 879, '\p{^Grapheme_Extend:	- Yes}', "");
Expect(0, 879, '\P{Grapheme_Extend:	- Yes}', "");
Expect(1, 879, '\P{^Grapheme_Extend:	- Yes}', "");
Expect(0, 767, '\p{Grapheme_Extend:	- Yes}', "");
Expect(1, 767, '\p{^Grapheme_Extend:	- Yes}', "");
Expect(1, 767, '\P{Grapheme_Extend:	- Yes}', "");
Expect(0, 767, '\P{^Grapheme_Extend:	- Yes}', "");
Error('\p{Gr_Ext= 	y:=}');
Error('\P{Gr_Ext= 	y:=}');
Expect(1, 879, '\p{Gr_Ext=y}', "");
Expect(0, 879, '\p{^Gr_Ext=y}', "");
Expect(0, 879, '\P{Gr_Ext=y}', "");
Expect(1, 879, '\P{^Gr_Ext=y}', "");
Expect(0, 767, '\p{Gr_Ext=y}', "");
Expect(1, 767, '\p{^Gr_Ext=y}', "");
Expect(1, 767, '\P{Gr_Ext=y}', "");
Expect(0, 767, '\P{^Gr_Ext=y}', "");
Expect(1, 879, '\p{Gr_Ext=_y}', "");
Expect(0, 879, '\p{^Gr_Ext=_y}', "");
Expect(0, 879, '\P{Gr_Ext=_y}', "");
Expect(1, 879, '\P{^Gr_Ext=_y}', "");
Expect(0, 767, '\p{Gr_Ext=_y}', "");
Expect(1, 767, '\p{^Gr_Ext=_y}', "");
Expect(1, 767, '\P{Gr_Ext=_y}', "");
Expect(0, 767, '\P{^Gr_Ext=_y}', "");
Error('\p{Is_Grapheme_Extend:   		T:=}');
Error('\P{Is_Grapheme_Extend:   		T:=}');
Expect(1, 879, '\p{Is_Grapheme_Extend=t}', "");
Expect(0, 879, '\p{^Is_Grapheme_Extend=t}', "");
Expect(0, 879, '\P{Is_Grapheme_Extend=t}', "");
Expect(1, 879, '\P{^Is_Grapheme_Extend=t}', "");
Expect(0, 767, '\p{Is_Grapheme_Extend=t}', "");
Expect(1, 767, '\p{^Is_Grapheme_Extend=t}', "");
Expect(1, 767, '\P{Is_Grapheme_Extend=t}', "");
Expect(0, 767, '\P{^Is_Grapheme_Extend=t}', "");
Expect(1, 879, '\p{Is_Grapheme_Extend=_-T}', "");
Expect(0, 879, '\p{^Is_Grapheme_Extend=_-T}', "");
Expect(0, 879, '\P{Is_Grapheme_Extend=_-T}', "");
Expect(1, 879, '\P{^Is_Grapheme_Extend=_-T}', "");
Expect(0, 767, '\p{Is_Grapheme_Extend=_-T}', "");
Expect(1, 767, '\p{^Is_Grapheme_Extend=_-T}', "");
Expect(1, 767, '\P{Is_Grapheme_Extend=_-T}', "");
Expect(0, 767, '\P{^Is_Grapheme_Extend=_-T}', "");
Error('\p{Is_Gr_Ext= TRUE:=}');
Error('\P{Is_Gr_Ext= TRUE:=}');
Expect(1, 879, '\p{Is_Gr_Ext=true}', "");
Expect(0, 879, '\p{^Is_Gr_Ext=true}', "");
Expect(0, 879, '\P{Is_Gr_Ext=true}', "");
Expect(1, 879, '\P{^Is_Gr_Ext=true}', "");
Expect(0, 767, '\p{Is_Gr_Ext=true}', "");
Expect(1, 767, '\p{^Is_Gr_Ext=true}', "");
Expect(1, 767, '\P{Is_Gr_Ext=true}', "");
Expect(0, 767, '\P{^Is_Gr_Ext=true}', "");
Expect(1, 879, '\p{Is_Gr_Ext=_True}', "");
Expect(0, 879, '\p{^Is_Gr_Ext=_True}', "");
Expect(0, 879, '\P{Is_Gr_Ext=_True}', "");
Expect(1, 879, '\P{^Is_Gr_Ext=_True}', "");
Expect(0, 767, '\p{Is_Gr_Ext=_True}', "");
Expect(1, 767, '\p{^Is_Gr_Ext=_True}', "");
Expect(1, 767, '\P{Is_Gr_Ext=_True}', "");
Expect(0, 767, '\P{^Is_Gr_Ext=_True}', "");
Error('\p{Grapheme_Extend=_/a/No}');
Error('\P{Grapheme_Extend=_/a/No}');
Expect(1, 767, '\p{Grapheme_Extend=no}', "");
Expect(0, 767, '\p{^Grapheme_Extend=no}', "");
Expect(0, 767, '\P{Grapheme_Extend=no}', "");
Expect(1, 767, '\P{^Grapheme_Extend=no}', "");
Expect(0, 879, '\p{Grapheme_Extend=no}', "");
Expect(1, 879, '\p{^Grapheme_Extend=no}', "");
Expect(1, 879, '\P{Grapheme_Extend=no}', "");
Expect(0, 879, '\P{^Grapheme_Extend=no}', "");
Expect(1, 767, '\p{Grapheme_Extend=-	No}', "");
Expect(0, 767, '\p{^Grapheme_Extend=-	No}', "");
Expect(0, 767, '\P{Grapheme_Extend=-	No}', "");
Expect(1, 767, '\P{^Grapheme_Extend=-	No}', "");
Expect(0, 879, '\p{Grapheme_Extend=-	No}', "");
Expect(1, 879, '\p{^Grapheme_Extend=-	No}', "");
Expect(1, 879, '\P{Grapheme_Extend=-	No}', "");
Expect(0, 879, '\P{^Grapheme_Extend=-	No}', "");
Error('\p{Gr_Ext=-:=N}');
Error('\P{Gr_Ext=-:=N}');
Expect(1, 767, '\p{Gr_Ext=n}', "");
Expect(0, 767, '\p{^Gr_Ext=n}', "");
Expect(0, 767, '\P{Gr_Ext=n}', "");
Expect(1, 767, '\P{^Gr_Ext=n}', "");
Expect(0, 879, '\p{Gr_Ext=n}', "");
Expect(1, 879, '\p{^Gr_Ext=n}', "");
Expect(1, 879, '\P{Gr_Ext=n}', "");
Expect(0, 879, '\P{^Gr_Ext=n}', "");
Expect(1, 767, '\p{Gr_Ext=	N}', "");
Expect(0, 767, '\p{^Gr_Ext=	N}', "");
Expect(0, 767, '\P{Gr_Ext=	N}', "");
Expect(1, 767, '\P{^Gr_Ext=	N}', "");
Expect(0, 879, '\p{Gr_Ext=	N}', "");
Expect(1, 879, '\p{^Gr_Ext=	N}', "");
Expect(1, 879, '\P{Gr_Ext=	N}', "");
Expect(0, 879, '\P{^Gr_Ext=	N}', "");
Error('\p{Is_Grapheme_Extend=:=	_F}');
Error('\P{Is_Grapheme_Extend=:=	_F}');
Expect(1, 767, '\p{Is_Grapheme_Extend=f}', "");
Expect(0, 767, '\p{^Is_Grapheme_Extend=f}', "");
Expect(0, 767, '\P{Is_Grapheme_Extend=f}', "");
Expect(1, 767, '\P{^Is_Grapheme_Extend=f}', "");
Expect(0, 879, '\p{Is_Grapheme_Extend=f}', "");
Expect(1, 879, '\p{^Is_Grapheme_Extend=f}', "");
Expect(1, 879, '\P{Is_Grapheme_Extend=f}', "");
Expect(0, 879, '\P{^Is_Grapheme_Extend=f}', "");
Expect(1, 767, '\p{Is_Grapheme_Extend=	 f}', "");
Expect(0, 767, '\p{^Is_Grapheme_Extend=	 f}', "");
Expect(0, 767, '\P{Is_Grapheme_Extend=	 f}', "");
Expect(1, 767, '\P{^Is_Grapheme_Extend=	 f}', "");
Expect(0, 879, '\p{Is_Grapheme_Extend=	 f}', "");
Expect(1, 879, '\p{^Is_Grapheme_Extend=	 f}', "");
Expect(1, 879, '\P{Is_Grapheme_Extend=	 f}', "");
Expect(0, 879, '\P{^Is_Grapheme_Extend=	 f}', "");
Error('\p{Is_Gr_Ext= :=False}');
Error('\P{Is_Gr_Ext= :=False}');
Expect(1, 767, '\p{Is_Gr_Ext=false}', "");
Expect(0, 767, '\p{^Is_Gr_Ext=false}', "");
Expect(0, 767, '\P{Is_Gr_Ext=false}', "");
Expect(1, 767, '\P{^Is_Gr_Ext=false}', "");
Expect(0, 879, '\p{Is_Gr_Ext=false}', "");
Expect(1, 879, '\p{^Is_Gr_Ext=false}', "");
Expect(1, 879, '\P{Is_Gr_Ext=false}', "");
Expect(0, 879, '\P{^Is_Gr_Ext=false}', "");
Expect(1, 767, '\p{Is_Gr_Ext:_	false}', "");
Expect(0, 767, '\p{^Is_Gr_Ext:_	false}', "");
Expect(0, 767, '\P{Is_Gr_Ext:_	false}', "");
Expect(1, 767, '\P{^Is_Gr_Ext:_	false}', "");
Expect(0, 879, '\p{Is_Gr_Ext:_	false}', "");
Expect(1, 879, '\p{^Is_Gr_Ext:_	false}', "");
Expect(1, 879, '\P{Is_Gr_Ext:_	false}', "");
Expect(0, 879, '\P{^Is_Gr_Ext:_	false}', "");
Error('\p{Other_ID_Continue:-_yes/a/}');
Error('\P{Other_ID_Continue:-_yes/a/}');
Expect(1, 183, '\p{Other_ID_Continue=yes}', 'deprecated');
Expect(0, 183, '\p{^Other_ID_Continue=yes}', 'deprecated');
Expect(0, 183, '\P{Other_ID_Continue=yes}', 'deprecated');
Expect(1, 183, '\P{^Other_ID_Continue=yes}', 'deprecated');
Expect(0, 182, '\p{Other_ID_Continue=yes}', 'deprecated');
Expect(1, 182, '\p{^Other_ID_Continue=yes}', 'deprecated');
Expect(1, 182, '\P{Other_ID_Continue=yes}', 'deprecated');
Expect(0, 182, '\P{^Other_ID_Continue=yes}', 'deprecated');
Expect(1, 183, '\p{Other_ID_Continue=- yes}', 'deprecated');
Expect(0, 183, '\p{^Other_ID_Continue=- yes}', 'deprecated');
Expect(0, 183, '\P{Other_ID_Continue=- yes}', 'deprecated');
Expect(1, 183, '\P{^Other_ID_Continue=- yes}', 'deprecated');
Expect(0, 182, '\p{Other_ID_Continue=- yes}', 'deprecated');
Expect(1, 182, '\p{^Other_ID_Continue=- yes}', 'deprecated');
Expect(1, 182, '\P{Other_ID_Continue=- yes}', 'deprecated');
Expect(0, 182, '\P{^Other_ID_Continue=- yes}', 'deprecated');
Error('\p{OIDC=Y/a/}');
Error('\P{OIDC=Y/a/}');
Expect(1, 183, '\p{OIDC: y}', 'deprecated');
Expect(0, 183, '\p{^OIDC: y}', 'deprecated');
Expect(0, 183, '\P{OIDC: y}', 'deprecated');
Expect(1, 183, '\P{^OIDC: y}', 'deprecated');
Expect(0, 182, '\p{OIDC: y}', 'deprecated');
Expect(1, 182, '\p{^OIDC: y}', 'deprecated');
Expect(1, 182, '\P{OIDC: y}', 'deprecated');
Expect(0, 182, '\P{^OIDC: y}', 'deprecated');
Expect(1, 183, '\p{OIDC=_-Y}', 'deprecated');
Expect(0, 183, '\p{^OIDC=_-Y}', 'deprecated');
Expect(0, 183, '\P{OIDC=_-Y}', 'deprecated');
Expect(1, 183, '\P{^OIDC=_-Y}', 'deprecated');
Expect(0, 182, '\p{OIDC=_-Y}', 'deprecated');
Expect(1, 182, '\p{^OIDC=_-Y}', 'deprecated');
Expect(1, 182, '\P{OIDC=_-Y}', 'deprecated');
Expect(0, 182, '\P{^OIDC=_-Y}', 'deprecated');
Error('\p{Is_Other_ID_Continue=:=	 T}');
Error('\P{Is_Other_ID_Continue=:=	 T}');
Expect(1, 183, '\p{Is_Other_ID_Continue=t}', 'deprecated');
Expect(0, 183, '\p{^Is_Other_ID_Continue=t}', 'deprecated');
Expect(0, 183, '\P{Is_Other_ID_Continue=t}', 'deprecated');
Expect(1, 183, '\P{^Is_Other_ID_Continue=t}', 'deprecated');
Expect(0, 182, '\p{Is_Other_ID_Continue=t}', 'deprecated');
Expect(1, 182, '\p{^Is_Other_ID_Continue=t}', 'deprecated');
Expect(1, 182, '\P{Is_Other_ID_Continue=t}', 'deprecated');
Expect(0, 182, '\P{^Is_Other_ID_Continue=t}', 'deprecated');
Expect(1, 183, '\p{Is_Other_ID_Continue=T}', 'deprecated');
Expect(0, 183, '\p{^Is_Other_ID_Continue=T}', 'deprecated');
Expect(0, 183, '\P{Is_Other_ID_Continue=T}', 'deprecated');
Expect(1, 183, '\P{^Is_Other_ID_Continue=T}', 'deprecated');
Expect(0, 182, '\p{Is_Other_ID_Continue=T}', 'deprecated');
Expect(1, 182, '\p{^Is_Other_ID_Continue=T}', 'deprecated');
Expect(1, 182, '\P{Is_Other_ID_Continue=T}', 'deprecated');
Expect(0, 182, '\P{^Is_Other_ID_Continue=T}', 'deprecated');
Error('\p{Is_OIDC:	:=true}');
Error('\P{Is_OIDC:	:=true}');
Expect(1, 183, '\p{Is_OIDC=true}', 'deprecated');
Expect(0, 183, '\p{^Is_OIDC=true}', 'deprecated');
Expect(0, 183, '\P{Is_OIDC=true}', 'deprecated');
Expect(1, 183, '\P{^Is_OIDC=true}', 'deprecated');
Expect(0, 182, '\p{Is_OIDC=true}', 'deprecated');
Expect(1, 182, '\p{^Is_OIDC=true}', 'deprecated');
Expect(1, 182, '\P{Is_OIDC=true}', 'deprecated');
Expect(0, 182, '\P{^Is_OIDC=true}', 'deprecated');
Expect(1, 183, '\p{Is_OIDC=	-TRUE}', 'deprecated');
Expect(0, 183, '\p{^Is_OIDC=	-TRUE}', 'deprecated');
Expect(0, 183, '\P{Is_OIDC=	-TRUE}', 'deprecated');
Expect(1, 183, '\P{^Is_OIDC=	-TRUE}', 'deprecated');
Expect(0, 182, '\p{Is_OIDC=	-TRUE}', 'deprecated');
Expect(1, 182, '\p{^Is_OIDC=	-TRUE}', 'deprecated');
Expect(1, 182, '\P{Is_OIDC=	-TRUE}', 'deprecated');
Expect(0, 182, '\P{^Is_OIDC=	-TRUE}', 'deprecated');
Error('\p{Other_ID_Continue=:=- No}');
Error('\P{Other_ID_Continue=:=- No}');
Expect(1, 182, '\p{Other_ID_Continue=no}', 'deprecated');
Expect(0, 182, '\p{^Other_ID_Continue=no}', 'deprecated');
Expect(0, 182, '\P{Other_ID_Continue=no}', 'deprecated');
Expect(1, 182, '\P{^Other_ID_Continue=no}', 'deprecated');
Expect(0, 183, '\p{Other_ID_Continue=no}', 'deprecated');
Expect(1, 183, '\p{^Other_ID_Continue=no}', 'deprecated');
Expect(1, 183, '\P{Other_ID_Continue=no}', 'deprecated');
Expect(0, 183, '\P{^Other_ID_Continue=no}', 'deprecated');
Expect(1, 182, '\p{Other_ID_Continue=	 No}', 'deprecated');
Expect(0, 182, '\p{^Other_ID_Continue=	 No}', 'deprecated');
Expect(0, 182, '\P{Other_ID_Continue=	 No}', 'deprecated');
Expect(1, 182, '\P{^Other_ID_Continue=	 No}', 'deprecated');
Expect(0, 183, '\p{Other_ID_Continue=	 No}', 'deprecated');
Expect(1, 183, '\p{^Other_ID_Continue=	 No}', 'deprecated');
Expect(1, 183, '\P{Other_ID_Continue=	 No}', 'deprecated');
Expect(0, 183, '\P{^Other_ID_Continue=	 No}', 'deprecated');
Error('\p{OIDC=_:=N}');
Error('\P{OIDC=_:=N}');
Expect(1, 182, '\p{OIDC=n}', 'deprecated');
Expect(0, 182, '\p{^OIDC=n}', 'deprecated');
Expect(0, 182, '\P{OIDC=n}', 'deprecated');
Expect(1, 182, '\P{^OIDC=n}', 'deprecated');
Expect(0, 183, '\p{OIDC=n}', 'deprecated');
Expect(1, 183, '\p{^OIDC=n}', 'deprecated');
Expect(1, 183, '\P{OIDC=n}', 'deprecated');
Expect(0, 183, '\P{^OIDC=n}', 'deprecated');
Expect(1, 182, '\p{OIDC=	N}', 'deprecated');
Expect(0, 182, '\p{^OIDC=	N}', 'deprecated');
Expect(0, 182, '\P{OIDC=	N}', 'deprecated');
Expect(1, 182, '\P{^OIDC=	N}', 'deprecated');
Expect(0, 183, '\p{OIDC=	N}', 'deprecated');
Expect(1, 183, '\p{^OIDC=	N}', 'deprecated');
Expect(1, 183, '\P{OIDC=	N}', 'deprecated');
Expect(0, 183, '\P{^OIDC=	N}', 'deprecated');
Error('\p{Is_Other_ID_Continue=:=	F}');
Error('\P{Is_Other_ID_Continue=:=	F}');
Expect(1, 182, '\p{Is_Other_ID_Continue=f}', 'deprecated');
Expect(0, 182, '\p{^Is_Other_ID_Continue=f}', 'deprecated');
Expect(0, 182, '\P{Is_Other_ID_Continue=f}', 'deprecated');
Expect(1, 182, '\P{^Is_Other_ID_Continue=f}', 'deprecated');
Expect(0, 183, '\p{Is_Other_ID_Continue=f}', 'deprecated');
Expect(1, 183, '\p{^Is_Other_ID_Continue=f}', 'deprecated');
Expect(1, 183, '\P{Is_Other_ID_Continue=f}', 'deprecated');
Expect(0, 183, '\P{^Is_Other_ID_Continue=f}', 'deprecated');
Expect(1, 182, '\p{Is_Other_ID_Continue=	_f}', 'deprecated');
Expect(0, 182, '\p{^Is_Other_ID_Continue=	_f}', 'deprecated');
Expect(0, 182, '\P{Is_Other_ID_Continue=	_f}', 'deprecated');
Expect(1, 182, '\P{^Is_Other_ID_Continue=	_f}', 'deprecated');
Expect(0, 183, '\p{Is_Other_ID_Continue=	_f}', 'deprecated');
Expect(1, 183, '\p{^Is_Other_ID_Continue=	_f}', 'deprecated');
Expect(1, 183, '\P{Is_Other_ID_Continue=	_f}', 'deprecated');
Expect(0, 183, '\P{^Is_Other_ID_Continue=	_f}', 'deprecated');
Error('\p{Is_OIDC=	/a/False}');
Error('\P{Is_OIDC=	/a/False}');
Expect(1, 182, '\p{Is_OIDC=false}', 'deprecated');
Expect(0, 182, '\p{^Is_OIDC=false}', 'deprecated');
Expect(0, 182, '\P{Is_OIDC=false}', 'deprecated');
Expect(1, 182, '\P{^Is_OIDC=false}', 'deprecated');
Expect(0, 183, '\p{Is_OIDC=false}', 'deprecated');
Expect(1, 183, '\p{^Is_OIDC=false}', 'deprecated');
Expect(1, 183, '\P{Is_OIDC=false}', 'deprecated');
Expect(0, 183, '\P{^Is_OIDC=false}', 'deprecated');
Expect(1, 182, '\p{Is_OIDC=		false}', 'deprecated');
Expect(0, 182, '\p{^Is_OIDC=		false}', 'deprecated');
Expect(0, 182, '\P{Is_OIDC=		false}', 'deprecated');
Expect(1, 182, '\P{^Is_OIDC=		false}', 'deprecated');
Expect(0, 183, '\p{Is_OIDC=		false}', 'deprecated');
Expect(1, 183, '\p{^Is_OIDC=		false}', 'deprecated');
Expect(1, 183, '\P{Is_OIDC=		false}', 'deprecated');
Expect(0, 183, '\P{^Is_OIDC=		false}', 'deprecated');
Error('\p{Joining_Group=_	Swash:=Kaf}');
Error('\P{Joining_Group=_	Swash:=Kaf}');
Expect(1, 1706, '\p{Joining_Group=swashkaf}', "");
Expect(0, 1706, '\p{^Joining_Group=swashkaf}', "");
Expect(0, 1706, '\P{Joining_Group=swashkaf}', "");
Expect(1, 1706, '\P{^Joining_Group=swashkaf}', "");
Expect(0, 1705, '\p{Joining_Group=swashkaf}', "");
Expect(1, 1705, '\p{^Joining_Group=swashkaf}', "");
Expect(1, 1705, '\P{Joining_Group=swashkaf}', "");
Expect(0, 1705, '\P{^Joining_Group=swashkaf}', "");
Expect(1, 1706, '\p{Joining_Group= Swash-kaf}', "");
Expect(0, 1706, '\p{^Joining_Group= Swash-kaf}', "");
Expect(0, 1706, '\P{Joining_Group= Swash-kaf}', "");
Expect(1, 1706, '\P{^Joining_Group= Swash-kaf}', "");
Expect(0, 1705, '\p{Joining_Group= Swash-kaf}', "");
Expect(1, 1705, '\p{^Joining_Group= Swash-kaf}', "");
Expect(1, 1705, '\P{Joining_Group= Swash-kaf}', "");
Expect(0, 1705, '\P{^Joining_Group= Swash-kaf}', "");
Error('\p{Jg:-	swash_Kaf:=}');
Error('\P{Jg:-	swash_Kaf:=}');
Expect(1, 1706, '\p{Jg=swashkaf}', "");
Expect(0, 1706, '\p{^Jg=swashkaf}', "");
Expect(0, 1706, '\P{Jg=swashkaf}', "");
Expect(1, 1706, '\P{^Jg=swashkaf}', "");
Expect(0, 1705, '\p{Jg=swashkaf}', "");
Expect(1, 1705, '\p{^Jg=swashkaf}', "");
Expect(1, 1705, '\P{Jg=swashkaf}', "");
Expect(0, 1705, '\P{^Jg=swashkaf}', "");
Expect(1, 1706, '\p{Jg=_	Swash	Kaf}', "");
Expect(0, 1706, '\p{^Jg=_	Swash	Kaf}', "");
Expect(0, 1706, '\P{Jg=_	Swash	Kaf}', "");
Expect(1, 1706, '\P{^Jg=_	Swash	Kaf}', "");
Expect(0, 1705, '\p{Jg=_	Swash	Kaf}', "");
Expect(1, 1705, '\p{^Jg=_	Swash	Kaf}', "");
Expect(1, 1705, '\P{Jg=_	Swash	Kaf}', "");
Expect(0, 1705, '\P{^Jg=_	Swash	Kaf}', "");
Error('\p{Is_Joining_Group=- Swash_kaf/a/}');
Error('\P{Is_Joining_Group=- Swash_kaf/a/}');
Expect(1, 1706, '\p{Is_Joining_Group=swashkaf}', "");
Expect(0, 1706, '\p{^Is_Joining_Group=swashkaf}', "");
Expect(0, 1706, '\P{Is_Joining_Group=swashkaf}', "");
Expect(1, 1706, '\P{^Is_Joining_Group=swashkaf}', "");
Expect(0, 1705, '\p{Is_Joining_Group=swashkaf}', "");
Expect(1, 1705, '\p{^Is_Joining_Group=swashkaf}', "");
Expect(1, 1705, '\P{Is_Joining_Group=swashkaf}', "");
Expect(0, 1705, '\P{^Is_Joining_Group=swashkaf}', "");
Expect(1, 1706, '\p{Is_Joining_Group=--Swash-KAF}', "");
Expect(0, 1706, '\p{^Is_Joining_Group=--Swash-KAF}', "");
Expect(0, 1706, '\P{Is_Joining_Group=--Swash-KAF}', "");
Expect(1, 1706, '\P{^Is_Joining_Group=--Swash-KAF}', "");
Expect(0, 1705, '\p{Is_Joining_Group=--Swash-KAF}', "");
Expect(1, 1705, '\p{^Is_Joining_Group=--Swash-KAF}', "");
Expect(1, 1705, '\P{Is_Joining_Group=--Swash-KAF}', "");
Expect(0, 1705, '\P{^Is_Joining_Group=--Swash-KAF}', "");
Error('\p{Is_Jg=Swash/a/Kaf}');
Error('\P{Is_Jg=Swash/a/Kaf}');
Expect(1, 1706, '\p{Is_Jg=swashkaf}', "");
Expect(0, 1706, '\p{^Is_Jg=swashkaf}', "");
Expect(0, 1706, '\P{Is_Jg=swashkaf}', "");
Expect(1, 1706, '\P{^Is_Jg=swashkaf}', "");
Expect(0, 1705, '\p{Is_Jg=swashkaf}', "");
Expect(1, 1705, '\p{^Is_Jg=swashkaf}', "");
Expect(1, 1705, '\P{Is_Jg=swashkaf}', "");
Expect(0, 1705, '\P{^Is_Jg=swashkaf}', "");
Expect(1, 1706, '\p{Is_Jg=	_swash-Kaf}', "");
Expect(0, 1706, '\p{^Is_Jg=	_swash-Kaf}', "");
Expect(0, 1706, '\P{Is_Jg=	_swash-Kaf}', "");
Expect(1, 1706, '\P{^Is_Jg=	_swash-Kaf}', "");
Expect(0, 1705, '\p{Is_Jg=	_swash-Kaf}', "");
Expect(1, 1705, '\p{^Is_Jg=	_swash-Kaf}', "");
Expect(1, 1705, '\P{Is_Jg=	_swash-Kaf}', "");
Expect(0, 1705, '\P{^Is_Jg=	_swash-Kaf}', "");
Error('\p{Joining_Group=/a/	Seen}');
Error('\P{Joining_Group=/a/	Seen}');
Expect(1, 1588, '\p{Joining_Group=seen}', "");
Expect(0, 1588, '\p{^Joining_Group=seen}', "");
Expect(0, 1588, '\P{Joining_Group=seen}', "");
Expect(1, 1588, '\P{^Joining_Group=seen}', "");
Expect(0, 1586, '\p{Joining_Group=seen}', "");
Expect(1, 1586, '\p{^Joining_Group=seen}', "");
Expect(1, 1586, '\P{Joining_Group=seen}', "");
Expect(0, 1586, '\P{^Joining_Group=seen}', "");
Expect(1, 1588, '\p{Joining_Group= 	Seen}', "");
Expect(0, 1588, '\p{^Joining_Group= 	Seen}', "");
Expect(0, 1588, '\P{Joining_Group= 	Seen}', "");
Expect(1, 1588, '\P{^Joining_Group= 	Seen}', "");
Expect(0, 1586, '\p{Joining_Group= 	Seen}', "");
Expect(1, 1586, '\p{^Joining_Group= 	Seen}', "");
Expect(1, 1586, '\P{Joining_Group= 	Seen}', "");
Expect(0, 1586, '\P{^Joining_Group= 	Seen}', "");
Error('\p{Jg=/a/Seen}');
Error('\P{Jg=/a/Seen}');
Expect(1, 1588, '\p{Jg=seen}', "");
Expect(0, 1588, '\p{^Jg=seen}', "");
Expect(0, 1588, '\P{Jg=seen}', "");
Expect(1, 1588, '\P{^Jg=seen}', "");
Expect(0, 1586, '\p{Jg=seen}', "");
Expect(1, 1586, '\p{^Jg=seen}', "");
Expect(1, 1586, '\P{Jg=seen}', "");
Expect(0, 1586, '\P{^Jg=seen}', "");
Expect(1, 1588, '\p{Jg= -SEEN}', "");
Expect(0, 1588, '\p{^Jg= -SEEN}', "");
Expect(0, 1588, '\P{Jg= -SEEN}', "");
Expect(1, 1588, '\P{^Jg= -SEEN}', "");
Expect(0, 1586, '\p{Jg= -SEEN}', "");
Expect(1, 1586, '\p{^Jg= -SEEN}', "");
Expect(1, 1586, '\P{Jg= -SEEN}', "");
Expect(0, 1586, '\P{^Jg= -SEEN}', "");
Error('\p{Is_Joining_Group= -Seen:=}');
Error('\P{Is_Joining_Group= -Seen:=}');
Expect(1, 1588, '\p{Is_Joining_Group=seen}', "");
Expect(0, 1588, '\p{^Is_Joining_Group=seen}', "");
Expect(0, 1588, '\P{Is_Joining_Group=seen}', "");
Expect(1, 1588, '\P{^Is_Joining_Group=seen}', "");
Expect(0, 1586, '\p{Is_Joining_Group=seen}', "");
Expect(1, 1586, '\p{^Is_Joining_Group=seen}', "");
Expect(1, 1586, '\P{Is_Joining_Group=seen}', "");
Expect(0, 1586, '\P{^Is_Joining_Group=seen}', "");
Expect(1, 1588, '\p{Is_Joining_Group=-SEEN}', "");
Expect(0, 1588, '\p{^Is_Joining_Group=-SEEN}', "");
Expect(0, 1588, '\P{Is_Joining_Group=-SEEN}', "");
Expect(1, 1588, '\P{^Is_Joining_Group=-SEEN}', "");
Expect(0, 1586, '\p{Is_Joining_Group=-SEEN}', "");
Expect(1, 1586, '\p{^Is_Joining_Group=-SEEN}', "");
Expect(1, 1586, '\P{Is_Joining_Group=-SEEN}', "");
Expect(0, 1586, '\P{^Is_Joining_Group=-SEEN}', "");
Error('\p{Is_Jg=	-SEEN/a/}');
Error('\P{Is_Jg=	-SEEN/a/}');
Expect(1, 1588, '\p{Is_Jg=seen}', "");
Expect(0, 1588, '\p{^Is_Jg=seen}', "");
Expect(0, 1588, '\P{Is_Jg=seen}', "");
Expect(1, 1588, '\P{^Is_Jg=seen}', "");
Expect(0, 1586, '\p{Is_Jg=seen}', "");
Expect(1, 1586, '\p{^Is_Jg=seen}', "");
Expect(1, 1586, '\P{Is_Jg=seen}', "");
Expect(0, 1586, '\P{^Is_Jg=seen}', "");
Expect(1, 1588, '\p{Is_Jg=		seen}', "");
Expect(0, 1588, '\p{^Is_Jg=		seen}', "");
Expect(0, 1588, '\P{Is_Jg=		seen}', "");
Expect(1, 1588, '\P{^Is_Jg=		seen}', "");
Expect(0, 1586, '\p{Is_Jg=		seen}', "");
Expect(1, 1586, '\p{^Is_Jg=		seen}', "");
Expect(1, 1586, '\P{Is_Jg=		seen}', "");
Expect(0, 1586, '\P{^Is_Jg=		seen}', "");
Error('\p{Joining_Group=-/a/Beth}');
Error('\P{Joining_Group=-/a/Beth}');
Expect(1, 1810, '\p{Joining_Group=beth}', "");
Expect(0, 1810, '\p{^Joining_Group=beth}', "");
Expect(0, 1810, '\P{Joining_Group=beth}', "");
Expect(1, 1810, '\P{^Joining_Group=beth}', "");
Expect(0, 1809, '\p{Joining_Group=beth}', "");
Expect(1, 1809, '\p{^Joining_Group=beth}', "");
Expect(1, 1809, '\P{Joining_Group=beth}', "");
Expect(0, 1809, '\P{^Joining_Group=beth}', "");
Expect(1, 1810, '\p{Joining_Group= -Beth}', "");
Expect(0, 1810, '\p{^Joining_Group= -Beth}', "");
Expect(0, 1810, '\P{Joining_Group= -Beth}', "");
Expect(1, 1810, '\P{^Joining_Group= -Beth}', "");
Expect(0, 1809, '\p{Joining_Group= -Beth}', "");
Expect(1, 1809, '\p{^Joining_Group= -Beth}', "");
Expect(1, 1809, '\P{Joining_Group= -Beth}', "");
Expect(0, 1809, '\P{^Joining_Group= -Beth}', "");
Error('\p{Jg=:=  Beth}');
Error('\P{Jg=:=  Beth}');
Expect(1, 1810, '\p{Jg: beth}', "");
Expect(0, 1810, '\p{^Jg: beth}', "");
Expect(0, 1810, '\P{Jg: beth}', "");
Expect(1, 1810, '\P{^Jg: beth}', "");
Expect(0, 1809, '\p{Jg: beth}', "");
Expect(1, 1809, '\p{^Jg: beth}', "");
Expect(1, 1809, '\P{Jg: beth}', "");
Expect(0, 1809, '\P{^Jg: beth}', "");
Expect(1, 1810, '\p{Jg=		Beth}', "");
Expect(0, 1810, '\p{^Jg=		Beth}', "");
Expect(0, 1810, '\P{Jg=		Beth}', "");
Expect(1, 1810, '\P{^Jg=		Beth}', "");
Expect(0, 1809, '\p{Jg=		Beth}', "");
Expect(1, 1809, '\p{^Jg=		Beth}', "");
Expect(1, 1809, '\P{Jg=		Beth}', "");
Expect(0, 1809, '\P{^Jg=		Beth}', "");
Error('\p{Is_Joining_Group=/a/	-BETH}');
Error('\P{Is_Joining_Group=/a/	-BETH}');
Expect(1, 1810, '\p{Is_Joining_Group=beth}', "");
Expect(0, 1810, '\p{^Is_Joining_Group=beth}', "");
Expect(0, 1810, '\P{Is_Joining_Group=beth}', "");
Expect(1, 1810, '\P{^Is_Joining_Group=beth}', "");
Expect(0, 1809, '\p{Is_Joining_Group=beth}', "");
Expect(1, 1809, '\p{^Is_Joining_Group=beth}', "");
Expect(1, 1809, '\P{Is_Joining_Group=beth}', "");
Expect(0, 1809, '\P{^Is_Joining_Group=beth}', "");
Expect(1, 1810, '\p{Is_Joining_Group=_Beth}', "");
Expect(0, 1810, '\p{^Is_Joining_Group=_Beth}', "");
Expect(0, 1810, '\P{Is_Joining_Group=_Beth}', "");
Expect(1, 1810, '\P{^Is_Joining_Group=_Beth}', "");
Expect(0, 1809, '\p{Is_Joining_Group=_Beth}', "");
Expect(1, 1809, '\p{^Is_Joining_Group=_Beth}', "");
Expect(1, 1809, '\P{Is_Joining_Group=_Beth}', "");
Expect(0, 1809, '\P{^Is_Joining_Group=_Beth}', "");
Error('\p{Is_Jg: -:=BETH}');
Error('\P{Is_Jg: -:=BETH}');
Expect(1, 1810, '\p{Is_Jg=beth}', "");
Expect(0, 1810, '\p{^Is_Jg=beth}', "");
Expect(0, 1810, '\P{Is_Jg=beth}', "");
Expect(1, 1810, '\P{^Is_Jg=beth}', "");
Expect(0, 1809, '\p{Is_Jg=beth}', "");
Expect(1, 1809, '\p{^Is_Jg=beth}', "");
Expect(1, 1809, '\P{Is_Jg=beth}', "");
Expect(0, 1809, '\P{^Is_Jg=beth}', "");
Expect(1, 1810, '\p{Is_Jg: _beth}', "");
Expect(0, 1810, '\p{^Is_Jg: _beth}', "");
Expect(0, 1810, '\P{Is_Jg: _beth}', "");
Expect(1, 1810, '\P{^Is_Jg: _beth}', "");
Expect(0, 1809, '\p{Is_Jg: _beth}', "");
Expect(1, 1809, '\p{^Is_Jg: _beth}', "");
Expect(1, 1809, '\P{Is_Jg: _beth}', "");
Expect(0, 1809, '\P{^Is_Jg: _beth}', "");
Error('\p{Joining_Group=_	semkath/a/}');
Error('\P{Joining_Group=_	semkath/a/}');
Expect(1, 1827, '\p{Joining_Group=semkath}', "");
Expect(0, 1827, '\p{^Joining_Group=semkath}', "");
Expect(0, 1827, '\P{Joining_Group=semkath}', "");
Expect(1, 1827, '\P{^Joining_Group=semkath}', "");
Expect(0, 1826, '\p{Joining_Group=semkath}', "");
Expect(1, 1826, '\p{^Joining_Group=semkath}', "");
Expect(1, 1826, '\P{Joining_Group=semkath}', "");
Expect(0, 1826, '\P{^Joining_Group=semkath}', "");
Expect(1, 1827, '\p{Joining_Group=- SEMKATH}', "");
Expect(0, 1827, '\p{^Joining_Group=- SEMKATH}', "");
Expect(0, 1827, '\P{Joining_Group=- SEMKATH}', "");
Expect(1, 1827, '\P{^Joining_Group=- SEMKATH}', "");
Expect(0, 1826, '\p{Joining_Group=- SEMKATH}', "");
Expect(1, 1826, '\p{^Joining_Group=- SEMKATH}', "");
Expect(1, 1826, '\P{Joining_Group=- SEMKATH}', "");
Expect(0, 1826, '\P{^Joining_Group=- SEMKATH}', "");
Error('\p{Jg=/a/-_Semkath}');
Error('\P{Jg=/a/-_Semkath}');
Expect(1, 1827, '\p{Jg=semkath}', "");
Expect(0, 1827, '\p{^Jg=semkath}', "");
Expect(0, 1827, '\P{Jg=semkath}', "");
Expect(1, 1827, '\P{^Jg=semkath}', "");
Expect(0, 1826, '\p{Jg=semkath}', "");
Expect(1, 1826, '\p{^Jg=semkath}', "");
Expect(1, 1826, '\P{Jg=semkath}', "");
Expect(0, 1826, '\P{^Jg=semkath}', "");
Expect(1, 1827, '\p{Jg=--Semkath}', "");
Expect(0, 1827, '\p{^Jg=--Semkath}', "");
Expect(0, 1827, '\P{Jg=--Semkath}', "");
Expect(1, 1827, '\P{^Jg=--Semkath}', "");
Expect(0, 1826, '\p{Jg=--Semkath}', "");
Expect(1, 1826, '\p{^Jg=--Semkath}', "");
Expect(1, 1826, '\P{Jg=--Semkath}', "");
Expect(0, 1826, '\P{^Jg=--Semkath}', "");
Error('\p{Is_Joining_Group=_	SEMKATH:=}');
Error('\P{Is_Joining_Group=_	SEMKATH:=}');
Expect(1, 1827, '\p{Is_Joining_Group=semkath}', "");
Expect(0, 1827, '\p{^Is_Joining_Group=semkath}', "");
Expect(0, 1827, '\P{Is_Joining_Group=semkath}', "");
Expect(1, 1827, '\P{^Is_Joining_Group=semkath}', "");
Expect(0, 1826, '\p{Is_Joining_Group=semkath}', "");
Expect(1, 1826, '\p{^Is_Joining_Group=semkath}', "");
Expect(1, 1826, '\P{Is_Joining_Group=semkath}', "");
Expect(0, 1826, '\P{^Is_Joining_Group=semkath}', "");
Expect(1, 1827, '\p{Is_Joining_Group: __Semkath}', "");
Expect(0, 1827, '\p{^Is_Joining_Group: __Semkath}', "");
Expect(0, 1827, '\P{Is_Joining_Group: __Semkath}', "");
Expect(1, 1827, '\P{^Is_Joining_Group: __Semkath}', "");
Expect(0, 1826, '\p{Is_Joining_Group: __Semkath}', "");
Expect(1, 1826, '\p{^Is_Joining_Group: __Semkath}', "");
Expect(1, 1826, '\P{Is_Joining_Group: __Semkath}', "");
Expect(0, 1826, '\P{^Is_Joining_Group: __Semkath}', "");
Error('\p{Is_Jg=	:=semkath}');
Error('\P{Is_Jg=	:=semkath}');
Expect(1, 1827, '\p{Is_Jg=semkath}', "");
Expect(0, 1827, '\p{^Is_Jg=semkath}', "");
Expect(0, 1827, '\P{Is_Jg=semkath}', "");
Expect(1, 1827, '\P{^Is_Jg=semkath}', "");
Expect(0, 1826, '\p{Is_Jg=semkath}', "");
Expect(1, 1826, '\p{^Is_Jg=semkath}', "");
Expect(1, 1826, '\P{Is_Jg=semkath}', "");
Expect(0, 1826, '\P{^Is_Jg=semkath}', "");
Expect(1, 1827, '\p{Is_Jg= 	semkath}', "");
Expect(0, 1827, '\p{^Is_Jg= 	semkath}', "");
Expect(0, 1827, '\P{Is_Jg= 	semkath}', "");
Expect(1, 1827, '\P{^Is_Jg= 	semkath}', "");
Expect(0, 1826, '\p{Is_Jg= 	semkath}', "");
Expect(1, 1826, '\p{^Is_Jg= 	semkath}', "");
Expect(1, 1826, '\P{Is_Jg= 	semkath}', "");
Expect(0, 1826, '\P{^Is_Jg= 	semkath}', "");
Error('\p{Joining_Group=_hah/a/}');
Error('\P{Joining_Group=_hah/a/}');
Expect(1, 1582, '\p{Joining_Group=hah}', "");
Expect(0, 1582, '\p{^Joining_Group=hah}', "");
Expect(0, 1582, '\P{Joining_Group=hah}', "");
Expect(1, 1582, '\P{^Joining_Group=hah}', "");
Expect(0, 1579, '\p{Joining_Group=hah}', "");
Expect(1, 1579, '\p{^Joining_Group=hah}', "");
Expect(1, 1579, '\P{Joining_Group=hah}', "");
Expect(0, 1579, '\P{^Joining_Group=hah}', "");
Expect(1, 1582, '\p{Joining_Group=_-HAH}', "");
Expect(0, 1582, '\p{^Joining_Group=_-HAH}', "");
Expect(0, 1582, '\P{Joining_Group=_-HAH}', "");
Expect(1, 1582, '\P{^Joining_Group=_-HAH}', "");
Expect(0, 1579, '\p{Joining_Group=_-HAH}', "");
Expect(1, 1579, '\p{^Joining_Group=_-HAH}', "");
Expect(1, 1579, '\P{Joining_Group=_-HAH}', "");
Expect(0, 1579, '\P{^Joining_Group=_-HAH}', "");
Error('\p{Jg=	/a/hah}');
Error('\P{Jg=	/a/hah}');
Expect(1, 1582, '\p{Jg=hah}', "");
Expect(0, 1582, '\p{^Jg=hah}', "");
Expect(0, 1582, '\P{Jg=hah}', "");
Expect(1, 1582, '\P{^Jg=hah}', "");
Expect(0, 1579, '\p{Jg=hah}', "");
Expect(1, 1579, '\p{^Jg=hah}', "");
Expect(1, 1579, '\P{Jg=hah}', "");
Expect(0, 1579, '\P{^Jg=hah}', "");
Expect(1, 1582, '\p{Jg=- Hah}', "");
Expect(0, 1582, '\p{^Jg=- Hah}', "");
Expect(0, 1582, '\P{Jg=- Hah}', "");
Expect(1, 1582, '\P{^Jg=- Hah}', "");
Expect(0, 1579, '\p{Jg=- Hah}', "");
Expect(1, 1579, '\p{^Jg=- Hah}', "");
Expect(1, 1579, '\P{Jg=- Hah}', "");
Expect(0, 1579, '\P{^Jg=- Hah}', "");
Error('\p{Is_Joining_Group:/a/-Hah}');
Error('\P{Is_Joining_Group:/a/-Hah}');
Expect(1, 1582, '\p{Is_Joining_Group:   hah}', "");
Expect(0, 1582, '\p{^Is_Joining_Group:   hah}', "");
Expect(0, 1582, '\P{Is_Joining_Group:   hah}', "");
Expect(1, 1582, '\P{^Is_Joining_Group:   hah}', "");
Expect(0, 1579, '\p{Is_Joining_Group:   hah}', "");
Expect(1, 1579, '\p{^Is_Joining_Group:   hah}', "");
Expect(1, 1579, '\P{Is_Joining_Group:   hah}', "");
Expect(0, 1579, '\P{^Is_Joining_Group:   hah}', "");
Expect(1, 1582, '\p{Is_Joining_Group=	_Hah}', "");
Expect(0, 1582, '\p{^Is_Joining_Group=	_Hah}', "");
Expect(0, 1582, '\P{Is_Joining_Group=	_Hah}', "");
Expect(1, 1582, '\P{^Is_Joining_Group=	_Hah}', "");
Expect(0, 1579, '\p{Is_Joining_Group=	_Hah}', "");
Expect(1, 1579, '\p{^Is_Joining_Group=	_Hah}', "");
Expect(1, 1579, '\P{Is_Joining_Group=	_Hah}', "");
Expect(0, 1579, '\P{^Is_Joining_Group=	_Hah}', "");
Error('\p{Is_Jg:  hah/a/}');
Error('\P{Is_Jg:  hah/a/}');
Expect(1, 1582, '\p{Is_Jg=hah}', "");
Expect(0, 1582, '\p{^Is_Jg=hah}', "");
Expect(0, 1582, '\P{Is_Jg=hah}', "");
Expect(1, 1582, '\P{^Is_Jg=hah}', "");
Expect(0, 1579, '\p{Is_Jg=hah}', "");
Expect(1, 1579, '\p{^Is_Jg=hah}', "");
Expect(1, 1579, '\P{Is_Jg=hah}', "");
Expect(0, 1579, '\P{^Is_Jg=hah}', "");
Expect(1, 1582, '\p{Is_Jg=-HAH}', "");
Expect(0, 1582, '\p{^Is_Jg=-HAH}', "");
Expect(0, 1582, '\P{Is_Jg=-HAH}', "");
Expect(1, 1582, '\P{^Is_Jg=-HAH}', "");
Expect(0, 1579, '\p{Is_Jg=-HAH}', "");
Expect(1, 1579, '\p{^Is_Jg=-HAH}', "");
Expect(1, 1579, '\P{Is_Jg=-HAH}', "");
Expect(0, 1579, '\P{^Is_Jg=-HAH}', "");
Error('\p{Joining_Group=- SYRIAC/a/WAW}');
Error('\P{Joining_Group=- SYRIAC/a/WAW}');
Expect(1, 1816, '\p{Joining_Group=syriacwaw}', "");
Expect(0, 1816, '\p{^Joining_Group=syriacwaw}', "");
Expect(0, 1816, '\P{Joining_Group=syriacwaw}', "");
Expect(1, 1816, '\P{^Joining_Group=syriacwaw}', "");
Expect(0, 1815, '\p{Joining_Group=syriacwaw}', "");
Expect(1, 1815, '\p{^Joining_Group=syriacwaw}', "");
Expect(1, 1815, '\P{Joining_Group=syriacwaw}', "");
Expect(0, 1815, '\P{^Joining_Group=syriacwaw}', "");
Expect(1, 1816, '\p{Joining_Group:SYRIAC_waw}', "");
Expect(0, 1816, '\p{^Joining_Group:SYRIAC_waw}', "");
Expect(0, 1816, '\P{Joining_Group:SYRIAC_waw}', "");
Expect(1, 1816, '\P{^Joining_Group:SYRIAC_waw}', "");
Expect(0, 1815, '\p{Joining_Group:SYRIAC_waw}', "");
Expect(1, 1815, '\p{^Joining_Group:SYRIAC_waw}', "");
Expect(1, 1815, '\P{Joining_Group:SYRIAC_waw}', "");
Expect(0, 1815, '\P{^Joining_Group:SYRIAC_waw}', "");
Error('\p{Jg= /a/SYRIACwaw}');
Error('\P{Jg= /a/SYRIACwaw}');
Expect(1, 1816, '\p{Jg=syriacwaw}', "");
Expect(0, 1816, '\p{^Jg=syriacwaw}', "");
Expect(0, 1816, '\P{Jg=syriacwaw}', "");
Expect(1, 1816, '\P{^Jg=syriacwaw}', "");
Expect(0, 1815, '\p{Jg=syriacwaw}', "");
Expect(1, 1815, '\p{^Jg=syriacwaw}', "");
Expect(1, 1815, '\P{Jg=syriacwaw}', "");
Expect(0, 1815, '\P{^Jg=syriacwaw}', "");
Expect(1, 1816, '\p{Jg=	_Syriac	WAW}', "");
Expect(0, 1816, '\p{^Jg=	_Syriac	WAW}', "");
Expect(0, 1816, '\P{Jg=	_Syriac	WAW}', "");
Expect(1, 1816, '\P{^Jg=	_Syriac	WAW}', "");
Expect(0, 1815, '\p{Jg=	_Syriac	WAW}', "");
Expect(1, 1815, '\p{^Jg=	_Syriac	WAW}', "");
Expect(1, 1815, '\P{Jg=	_Syriac	WAW}', "");
Expect(0, 1815, '\P{^Jg=	_Syriac	WAW}', "");
Error('\p{Is_Joining_Group=- SyriacWaw:=}');
Error('\P{Is_Joining_Group=- SyriacWaw:=}');
Expect(1, 1816, '\p{Is_Joining_Group=syriacwaw}', "");
Expect(0, 1816, '\p{^Is_Joining_Group=syriacwaw}', "");
Expect(0, 1816, '\P{Is_Joining_Group=syriacwaw}', "");
Expect(1, 1816, '\P{^Is_Joining_Group=syriacwaw}', "");
Expect(0, 1815, '\p{Is_Joining_Group=syriacwaw}', "");
Expect(1, 1815, '\p{^Is_Joining_Group=syriacwaw}', "");
Expect(1, 1815, '\P{Is_Joining_Group=syriacwaw}', "");
Expect(0, 1815, '\P{^Is_Joining_Group=syriacwaw}', "");
Expect(1, 1816, '\p{Is_Joining_Group=-syriacWAW}', "");
Expect(0, 1816, '\p{^Is_Joining_Group=-syriacWAW}', "");
Expect(0, 1816, '\P{Is_Joining_Group=-syriacWAW}', "");
Expect(1, 1816, '\P{^Is_Joining_Group=-syriacWAW}', "");
Expect(0, 1815, '\p{Is_Joining_Group=-syriacWAW}', "");
Expect(1, 1815, '\p{^Is_Joining_Group=-syriacWAW}', "");
Expect(1, 1815, '\P{Is_Joining_Group=-syriacWAW}', "");
Expect(0, 1815, '\P{^Is_Joining_Group=-syriacWAW}', "");
Error('\p{Is_Jg= :=Syriac-Waw}');
Error('\P{Is_Jg= :=Syriac-Waw}');
Expect(1, 1816, '\p{Is_Jg=syriacwaw}', "");
Expect(0, 1816, '\p{^Is_Jg=syriacwaw}', "");
Expect(0, 1816, '\P{Is_Jg=syriacwaw}', "");
Expect(1, 1816, '\P{^Is_Jg=syriacwaw}', "");
Expect(0, 1815, '\p{Is_Jg=syriacwaw}', "");
Expect(1, 1815, '\p{^Is_Jg=syriacwaw}', "");
Expect(1, 1815, '\P{Is_Jg=syriacwaw}', "");
Expect(0, 1815, '\P{^Is_Jg=syriacwaw}', "");
Expect(1, 1816, '\p{Is_Jg=		syriac_Waw}', "");
Expect(0, 1816, '\p{^Is_Jg=		syriac_Waw}', "");
Expect(0, 1816, '\P{Is_Jg=		syriac_Waw}', "");
Expect(1, 1816, '\P{^Is_Jg=		syriac_Waw}', "");
Expect(0, 1815, '\p{Is_Jg=		syriac_Waw}', "");
Expect(1, 1815, '\p{^Is_Jg=		syriac_Waw}', "");
Expect(1, 1815, '\P{Is_Jg=		syriac_Waw}', "");
Expect(0, 1815, '\P{^Is_Jg=		syriac_Waw}', "");
Error('\p{Joining_Group=-taw:=}');
Error('\P{Joining_Group=-taw:=}');
Expect(1, 1836, '\p{Joining_Group:taw}', "");
Expect(0, 1836, '\p{^Joining_Group:taw}', "");
Expect(0, 1836, '\P{Joining_Group:taw}', "");
Expect(1, 1836, '\P{^Joining_Group:taw}', "");
Expect(0, 1835, '\p{Joining_Group:taw}', "");
Expect(1, 1835, '\p{^Joining_Group:taw}', "");
Expect(1, 1835, '\P{Joining_Group:taw}', "");
Expect(0, 1835, '\P{^Joining_Group:taw}', "");
Expect(1, 1836, '\p{Joining_Group:-taw}', "");
Expect(0, 1836, '\p{^Joining_Group:-taw}', "");
Expect(0, 1836, '\P{Joining_Group:-taw}', "");
Expect(1, 1836, '\P{^Joining_Group:-taw}', "");
Expect(0, 1835, '\p{Joining_Group:-taw}', "");
Expect(1, 1835, '\p{^Joining_Group:-taw}', "");
Expect(1, 1835, '\P{Joining_Group:-taw}', "");
Expect(0, 1835, '\P{^Joining_Group:-taw}', "");
Error('\p{Jg= :=Taw}');
Error('\P{Jg= :=Taw}');
Expect(1, 1836, '\p{Jg=taw}', "");
Expect(0, 1836, '\p{^Jg=taw}', "");
Expect(0, 1836, '\P{Jg=taw}', "");
Expect(1, 1836, '\P{^Jg=taw}', "");
Expect(0, 1835, '\p{Jg=taw}', "");
Expect(1, 1835, '\p{^Jg=taw}', "");
Expect(1, 1835, '\P{Jg=taw}', "");
Expect(0, 1835, '\P{^Jg=taw}', "");
Expect(1, 1836, '\p{Jg=- taw}', "");
Expect(0, 1836, '\p{^Jg=- taw}', "");
Expect(0, 1836, '\P{Jg=- taw}', "");
Expect(1, 1836, '\P{^Jg=- taw}', "");
Expect(0, 1835, '\p{Jg=- taw}', "");
Expect(1, 1835, '\p{^Jg=- taw}', "");
Expect(1, 1835, '\P{Jg=- taw}', "");
Expect(0, 1835, '\P{^Jg=- taw}', "");
Error('\p{Is_Joining_Group=-_taw/a/}');
Error('\P{Is_Joining_Group=-_taw/a/}');
Expect(1, 1836, '\p{Is_Joining_Group=taw}', "");
Expect(0, 1836, '\p{^Is_Joining_Group=taw}', "");
Expect(0, 1836, '\P{Is_Joining_Group=taw}', "");
Expect(1, 1836, '\P{^Is_Joining_Group=taw}', "");
Expect(0, 1835, '\p{Is_Joining_Group=taw}', "");
Expect(1, 1835, '\p{^Is_Joining_Group=taw}', "");
Expect(1, 1835, '\P{Is_Joining_Group=taw}', "");
Expect(0, 1835, '\P{^Is_Joining_Group=taw}', "");
Expect(1, 1836, '\p{Is_Joining_Group= _TAW}', "");
Expect(0, 1836, '\p{^Is_Joining_Group= _TAW}', "");
Expect(0, 1836, '\P{Is_Joining_Group= _TAW}', "");
Expect(1, 1836, '\P{^Is_Joining_Group= _TAW}', "");
Expect(0, 1835, '\p{Is_Joining_Group= _TAW}', "");
Expect(1, 1835, '\p{^Is_Joining_Group= _TAW}', "");
Expect(1, 1835, '\P{Is_Joining_Group= _TAW}', "");
Expect(0, 1835, '\P{^Is_Joining_Group= _TAW}', "");
Error('\p{Is_Jg=_/a/Taw}');
Error('\P{Is_Jg=_/a/Taw}');
Expect(1, 1836, '\p{Is_Jg=taw}', "");
Expect(0, 1836, '\p{^Is_Jg=taw}', "");
Expect(0, 1836, '\P{Is_Jg=taw}', "");
Expect(1, 1836, '\P{^Is_Jg=taw}', "");
Expect(0, 1835, '\p{Is_Jg=taw}', "");
Expect(1, 1835, '\p{^Is_Jg=taw}', "");
Expect(1, 1835, '\P{Is_Jg=taw}', "");
Expect(0, 1835, '\P{^Is_Jg=taw}', "");
Expect(1, 1836, '\p{Is_Jg=	_Taw}', "");
Expect(0, 1836, '\p{^Is_Jg=	_Taw}', "");
Expect(0, 1836, '\P{Is_Jg=	_Taw}', "");
Expect(1, 1836, '\P{^Is_Jg=	_Taw}', "");
Expect(0, 1835, '\p{Is_Jg=	_Taw}', "");
Expect(1, 1835, '\p{^Is_Jg=	_Taw}', "");
Expect(1, 1835, '\P{Is_Jg=	_Taw}', "");
Expect(0, 1835, '\P{^Is_Jg=	_Taw}', "");
Error('\p{Joining_Group=_/a/FinalSemkath}');
Error('\P{Joining_Group=_/a/FinalSemkath}');
Expect(1, 1828, '\p{Joining_Group=finalsemkath}', "");
Expect(0, 1828, '\p{^Joining_Group=finalsemkath}', "");
Expect(0, 1828, '\P{Joining_Group=finalsemkath}', "");
Expect(1, 1828, '\P{^Joining_Group=finalsemkath}', "");
Expect(0, 1827, '\p{Joining_Group=finalsemkath}', "");
Expect(1, 1827, '\p{^Joining_Group=finalsemkath}', "");
Expect(1, 1827, '\P{Joining_Group=finalsemkath}', "");
Expect(0, 1827, '\P{^Joining_Group=finalsemkath}', "");
Expect(1, 1828, '\p{Joining_Group=__final	Semkath}', "");
Expect(0, 1828, '\p{^Joining_Group=__final	Semkath}', "");
Expect(0, 1828, '\P{Joining_Group=__final	Semkath}', "");
Expect(1, 1828, '\P{^Joining_Group=__final	Semkath}', "");
Expect(0, 1827, '\p{Joining_Group=__final	Semkath}', "");
Expect(1, 1827, '\p{^Joining_Group=__final	Semkath}', "");
Expect(1, 1827, '\P{Joining_Group=__final	Semkath}', "");
Expect(0, 1827, '\P{^Joining_Group=__final	Semkath}', "");
Error('\p{Jg=  Final-SEMKATH/a/}');
Error('\P{Jg=  Final-SEMKATH/a/}');
Expect(1, 1828, '\p{Jg=finalsemkath}', "");
Expect(0, 1828, '\p{^Jg=finalsemkath}', "");
Expect(0, 1828, '\P{Jg=finalsemkath}', "");
Expect(1, 1828, '\P{^Jg=finalsemkath}', "");
Expect(0, 1827, '\p{Jg=finalsemkath}', "");
Expect(1, 1827, '\p{^Jg=finalsemkath}', "");
Expect(1, 1827, '\P{Jg=finalsemkath}', "");
Expect(0, 1827, '\P{^Jg=finalsemkath}', "");
Expect(1, 1828, '\p{Jg:	-_Final	Semkath}', "");
Expect(0, 1828, '\p{^Jg:	-_Final	Semkath}', "");
Expect(0, 1828, '\P{Jg:	-_Final	Semkath}', "");
Expect(1, 1828, '\P{^Jg:	-_Final	Semkath}', "");
Expect(0, 1827, '\p{Jg:	-_Final	Semkath}', "");
Expect(1, 1827, '\p{^Jg:	-_Final	Semkath}', "");
Expect(1, 1827, '\P{Jg:	-_Final	Semkath}', "");
Expect(0, 1827, '\P{^Jg:	-_Final	Semkath}', "");
Error('\p{Is_Joining_Group=-:=final_SEMKATH}');
Error('\P{Is_Joining_Group=-:=final_SEMKATH}');
Expect(1, 1828, '\p{Is_Joining_Group: finalsemkath}', "");
Expect(0, 1828, '\p{^Is_Joining_Group: finalsemkath}', "");
Expect(0, 1828, '\P{Is_Joining_Group: finalsemkath}', "");
Expect(1, 1828, '\P{^Is_Joining_Group: finalsemkath}', "");
Expect(0, 1827, '\p{Is_Joining_Group: finalsemkath}', "");
Expect(1, 1827, '\p{^Is_Joining_Group: finalsemkath}', "");
Expect(1, 1827, '\P{Is_Joining_Group: finalsemkath}', "");
Expect(0, 1827, '\P{^Is_Joining_Group: finalsemkath}', "");
Expect(1, 1828, '\p{Is_Joining_Group=_ FINALsemkath}', "");
Expect(0, 1828, '\p{^Is_Joining_Group=_ FINALsemkath}', "");
Expect(0, 1828, '\P{Is_Joining_Group=_ FINALsemkath}', "");
Expect(1, 1828, '\P{^Is_Joining_Group=_ FINALsemkath}', "");
Expect(0, 1827, '\p{Is_Joining_Group=_ FINALsemkath}', "");
Expect(1, 1827, '\p{^Is_Joining_Group=_ FINALsemkath}', "");
Expect(1, 1827, '\P{Is_Joining_Group=_ FINALsemkath}', "");
Expect(0, 1827, '\P{^Is_Joining_Group=_ FINALsemkath}', "");
Error('\p{Is_Jg=/a/ -Final_Semkath}');
Error('\P{Is_Jg=/a/ -Final_Semkath}');
Expect(1, 1828, '\p{Is_Jg=finalsemkath}', "");
Expect(0, 1828, '\p{^Is_Jg=finalsemkath}', "");
Expect(0, 1828, '\P{Is_Jg=finalsemkath}', "");
Expect(1, 1828, '\P{^Is_Jg=finalsemkath}', "");
Expect(0, 1827, '\p{Is_Jg=finalsemkath}', "");
Expect(1, 1827, '\p{^Is_Jg=finalsemkath}', "");
Expect(1, 1827, '\P{Is_Jg=finalsemkath}', "");
Expect(0, 1827, '\P{^Is_Jg=finalsemkath}', "");
Expect(1, 1828, '\p{Is_Jg=_-Final_SEMKATH}', "");
Expect(0, 1828, '\p{^Is_Jg=_-Final_SEMKATH}', "");
Expect(0, 1828, '\P{Is_Jg=_-Final_SEMKATH}', "");
Expect(1, 1828, '\P{^Is_Jg=_-Final_SEMKATH}', "");
Expect(0, 1827, '\p{Is_Jg=_-Final_SEMKATH}', "");
Expect(1, 1827, '\p{^Is_Jg=_-Final_SEMKATH}', "");
Expect(1, 1827, '\P{Is_Jg=_-Final_SEMKATH}', "");
Expect(0, 1827, '\P{^Is_Jg=_-Final_SEMKATH}', "");
Error('\p{Joining_Group= /a/knotted HEH}');
Error('\P{Joining_Group= /a/knotted HEH}');
Expect(1, 1726, '\p{Joining_Group=knottedheh}', "");
Expect(0, 1726, '\p{^Joining_Group=knottedheh}', "");
Expect(0, 1726, '\P{Joining_Group=knottedheh}', "");
Expect(1, 1726, '\P{^Joining_Group=knottedheh}', "");
Expect(0, 1725, '\p{Joining_Group=knottedheh}', "");
Expect(1, 1725, '\p{^Joining_Group=knottedheh}', "");
Expect(1, 1725, '\P{Joining_Group=knottedheh}', "");
Expect(0, 1725, '\P{^Joining_Group=knottedheh}', "");
Expect(1, 1726, '\p{Joining_Group=_ KNOTTED_HEH}', "");
Expect(0, 1726, '\p{^Joining_Group=_ KNOTTED_HEH}', "");
Expect(0, 1726, '\P{Joining_Group=_ KNOTTED_HEH}', "");
Expect(1, 1726, '\P{^Joining_Group=_ KNOTTED_HEH}', "");
Expect(0, 1725, '\p{Joining_Group=_ KNOTTED_HEH}', "");
Expect(1, 1725, '\p{^Joining_Group=_ KNOTTED_HEH}', "");
Expect(1, 1725, '\P{Joining_Group=_ KNOTTED_HEH}', "");
Expect(0, 1725, '\P{^Joining_Group=_ KNOTTED_HEH}', "");
Error('\p{Jg=  knotted:=Heh}');
Error('\P{Jg=  knotted:=Heh}');
Expect(1, 1726, '\p{Jg=knottedheh}', "");
Expect(0, 1726, '\p{^Jg=knottedheh}', "");
Expect(0, 1726, '\P{Jg=knottedheh}', "");
Expect(1, 1726, '\P{^Jg=knottedheh}', "");
Expect(0, 1725, '\p{Jg=knottedheh}', "");
Expect(1, 1725, '\p{^Jg=knottedheh}', "");
Expect(1, 1725, '\P{Jg=knottedheh}', "");
Expect(0, 1725, '\P{^Jg=knottedheh}', "");
Expect(1, 1726, '\p{Jg=_Knotted Heh}', "");
Expect(0, 1726, '\p{^Jg=_Knotted Heh}', "");
Expect(0, 1726, '\P{Jg=_Knotted Heh}', "");
Expect(1, 1726, '\P{^Jg=_Knotted Heh}', "");
Expect(0, 1725, '\p{Jg=_Knotted Heh}', "");
Expect(1, 1725, '\p{^Jg=_Knotted Heh}', "");
Expect(1, 1725, '\P{Jg=_Knotted Heh}', "");
Expect(0, 1725, '\P{^Jg=_Knotted Heh}', "");
Error('\p{Is_Joining_Group= :=KNOTTED HEH}');
Error('\P{Is_Joining_Group= :=KNOTTED HEH}');
Expect(1, 1726, '\p{Is_Joining_Group=knottedheh}', "");
Expect(0, 1726, '\p{^Is_Joining_Group=knottedheh}', "");
Expect(0, 1726, '\P{Is_Joining_Group=knottedheh}', "");
Expect(1, 1726, '\P{^Is_Joining_Group=knottedheh}', "");
Expect(0, 1725, '\p{Is_Joining_Group=knottedheh}', "");
Expect(1, 1725, '\p{^Is_Joining_Group=knottedheh}', "");
Expect(1, 1725, '\P{Is_Joining_Group=knottedheh}', "");
Expect(0, 1725, '\P{^Is_Joining_Group=knottedheh}', "");
Expect(1, 1726, '\p{Is_Joining_Group=	Knotted	Heh}', "");
Expect(0, 1726, '\p{^Is_Joining_Group=	Knotted	Heh}', "");
Expect(0, 1726, '\P{Is_Joining_Group=	Knotted	Heh}', "");
Expect(1, 1726, '\P{^Is_Joining_Group=	Knotted	Heh}', "");
Expect(0, 1725, '\p{Is_Joining_Group=	Knotted	Heh}', "");
Expect(1, 1725, '\p{^Is_Joining_Group=	Knotted	Heh}', "");
Expect(1, 1725, '\P{Is_Joining_Group=	Knotted	Heh}', "");
Expect(0, 1725, '\P{^Is_Joining_Group=	Knotted	Heh}', "");
Error('\p{Is_Jg=/a/ KNOTTED Heh}');
Error('\P{Is_Jg=/a/ KNOTTED Heh}');
Expect(1, 1726, '\p{Is_Jg=knottedheh}', "");
Expect(0, 1726, '\p{^Is_Jg=knottedheh}', "");
Expect(0, 1726, '\P{Is_Jg=knottedheh}', "");
Expect(1, 1726, '\P{^Is_Jg=knottedheh}', "");
Expect(0, 1725, '\p{Is_Jg=knottedheh}', "");
Expect(1, 1725, '\p{^Is_Jg=knottedheh}', "");
Expect(1, 1725, '\P{Is_Jg=knottedheh}', "");
Expect(0, 1725, '\P{^Is_Jg=knottedheh}', "");
Expect(1, 1726, '\p{Is_Jg=_	Knotted-Heh}', "");
Expect(0, 1726, '\p{^Is_Jg=_	Knotted-Heh}', "");
Expect(0, 1726, '\P{Is_Jg=_	Knotted-Heh}', "");
Expect(1, 1726, '\P{^Is_Jg=_	Knotted-Heh}', "");
Expect(0, 1725, '\p{Is_Jg=_	Knotted-Heh}', "");
Expect(1, 1725, '\p{^Is_Jg=_	Knotted-Heh}', "");
Expect(1, 1725, '\P{Is_Jg=_	Knotted-Heh}', "");
Expect(0, 1725, '\P{^Is_Jg=_	Knotted-Heh}', "");
Error('\p{Joining_Group=_	Kaf/a/}');
Error('\P{Joining_Group=_	Kaf/a/}');
Expect(1, 1603, '\p{Joining_Group=kaf}', "");
Expect(0, 1603, '\p{^Joining_Group=kaf}', "");
Expect(0, 1603, '\P{Joining_Group=kaf}', "");
Expect(1, 1603, '\P{^Joining_Group=kaf}', "");
Expect(0, 1602, '\p{Joining_Group=kaf}', "");
Expect(1, 1602, '\p{^Joining_Group=kaf}', "");
Expect(1, 1602, '\P{Joining_Group=kaf}', "");
Expect(0, 1602, '\P{^Joining_Group=kaf}', "");
Expect(1, 1603, '\p{Joining_Group=_KAF}', "");
Expect(0, 1603, '\p{^Joining_Group=_KAF}', "");
Expect(0, 1603, '\P{Joining_Group=_KAF}', "");
Expect(1, 1603, '\P{^Joining_Group=_KAF}', "");
Expect(0, 1602, '\p{Joining_Group=_KAF}', "");
Expect(1, 1602, '\p{^Joining_Group=_KAF}', "");
Expect(1, 1602, '\P{Joining_Group=_KAF}', "");
Expect(0, 1602, '\P{^Joining_Group=_KAF}', "");
Error('\p{Jg= :=Kaf}');
Error('\P{Jg= :=Kaf}');
Expect(1, 1603, '\p{Jg=kaf}', "");
Expect(0, 1603, '\p{^Jg=kaf}', "");
Expect(0, 1603, '\P{Jg=kaf}', "");
Expect(1, 1603, '\P{^Jg=kaf}', "");
Expect(0, 1602, '\p{Jg=kaf}', "");
Expect(1, 1602, '\p{^Jg=kaf}', "");
Expect(1, 1602, '\P{Jg=kaf}', "");
Expect(0, 1602, '\P{^Jg=kaf}', "");
Expect(1, 1603, '\p{Jg=__Kaf}', "");
Expect(0, 1603, '\p{^Jg=__Kaf}', "");
Expect(0, 1603, '\P{Jg=__Kaf}', "");
Expect(1, 1603, '\P{^Jg=__Kaf}', "");
Expect(0, 1602, '\p{Jg=__Kaf}', "");
Expect(1, 1602, '\p{^Jg=__Kaf}', "");
Expect(1, 1602, '\P{Jg=__Kaf}', "");
Expect(0, 1602, '\P{^Jg=__Kaf}', "");
Error('\p{Is_Joining_Group=/a/__Kaf}');
Error('\P{Is_Joining_Group=/a/__Kaf}');
Expect(1, 1603, '\p{Is_Joining_Group=kaf}', "");
Expect(0, 1603, '\p{^Is_Joining_Group=kaf}', "");
Expect(0, 1603, '\P{Is_Joining_Group=kaf}', "");
Expect(1, 1603, '\P{^Is_Joining_Group=kaf}', "");
Expect(0, 1602, '\p{Is_Joining_Group=kaf}', "");
Expect(1, 1602, '\p{^Is_Joining_Group=kaf}', "");
Expect(1, 1602, '\P{Is_Joining_Group=kaf}', "");
Expect(0, 1602, '\P{^Is_Joining_Group=kaf}', "");
Expect(1, 1603, '\p{Is_Joining_Group=-Kaf}', "");
Expect(0, 1603, '\p{^Is_Joining_Group=-Kaf}', "");
Expect(0, 1603, '\P{Is_Joining_Group=-Kaf}', "");
Expect(1, 1603, '\P{^Is_Joining_Group=-Kaf}', "");
Expect(0, 1602, '\p{Is_Joining_Group=-Kaf}', "");
Expect(1, 1602, '\p{^Is_Joining_Group=-Kaf}', "");
Expect(1, 1602, '\P{Is_Joining_Group=-Kaf}', "");
Expect(0, 1602, '\P{^Is_Joining_Group=-Kaf}', "");
Error('\p{Is_Jg= kaf/a/}');
Error('\P{Is_Jg= kaf/a/}');
Expect(1, 1603, '\p{Is_Jg=kaf}', "");
Expect(0, 1603, '\p{^Is_Jg=kaf}', "");
Expect(0, 1603, '\P{Is_Jg=kaf}', "");
Expect(1, 1603, '\P{^Is_Jg=kaf}', "");
Expect(0, 1602, '\p{Is_Jg=kaf}', "");
Expect(1, 1602, '\p{^Is_Jg=kaf}', "");
Expect(1, 1602, '\P{Is_Jg=kaf}', "");
Expect(0, 1602, '\P{^Is_Jg=kaf}', "");
Expect(1, 1603, '\p{Is_Jg=--KAF}', "");
Expect(0, 1603, '\p{^Is_Jg=--KAF}', "");
Expect(0, 1603, '\P{Is_Jg=--KAF}', "");
Expect(1, 1603, '\P{^Is_Jg=--KAF}', "");
Expect(0, 1602, '\p{Is_Jg=--KAF}', "");
Expect(1, 1602, '\p{^Is_Jg=--KAF}', "");
Expect(1, 1602, '\P{Is_Jg=--KAF}', "");
Expect(0, 1602, '\P{^Is_Jg=--KAF}', "");
Error('\p{Joining_Group:   -:=Fe}');
Error('\P{Joining_Group:   -:=Fe}');
Expect(1, 1871, '\p{Joining_Group=fe}', "");
Expect(0, 1871, '\p{^Joining_Group=fe}', "");
Expect(0, 1871, '\P{Joining_Group=fe}', "");
Expect(1, 1871, '\P{^Joining_Group=fe}', "");
Expect(0, 1870, '\p{Joining_Group=fe}', "");
Expect(1, 1870, '\p{^Joining_Group=fe}', "");
Expect(1, 1870, '\P{Joining_Group=fe}', "");
Expect(0, 1870, '\P{^Joining_Group=fe}', "");
Expect(1, 1871, '\p{Joining_Group=	_Fe}', "");
Expect(0, 1871, '\p{^Joining_Group=	_Fe}', "");
Expect(0, 1871, '\P{Joining_Group=	_Fe}', "");
Expect(1, 1871, '\P{^Joining_Group=	_Fe}', "");
Expect(0, 1870, '\p{Joining_Group=	_Fe}', "");
Expect(1, 1870, '\p{^Joining_Group=	_Fe}', "");
Expect(1, 1870, '\P{Joining_Group=	_Fe}', "");
Expect(0, 1870, '\P{^Joining_Group=	_Fe}', "");
Error('\p{Jg=_ Fe/a/}');
Error('\P{Jg=_ Fe/a/}');
Expect(1, 1871, '\p{Jg=fe}', "");
Expect(0, 1871, '\p{^Jg=fe}', "");
Expect(0, 1871, '\P{Jg=fe}', "");
Expect(1, 1871, '\P{^Jg=fe}', "");
Expect(0, 1870, '\p{Jg=fe}', "");
Expect(1, 1870, '\p{^Jg=fe}', "");
Expect(1, 1870, '\P{Jg=fe}', "");
Expect(0, 1870, '\P{^Jg=fe}', "");
Expect(1, 1871, '\p{Jg= FE}', "");
Expect(0, 1871, '\p{^Jg= FE}', "");
Expect(0, 1871, '\P{Jg= FE}', "");
Expect(1, 1871, '\P{^Jg= FE}', "");
Expect(0, 1870, '\p{Jg= FE}', "");
Expect(1, 1870, '\p{^Jg= FE}', "");
Expect(1, 1870, '\P{Jg= FE}', "");
Expect(0, 1870, '\P{^Jg= FE}', "");
Error('\p{Is_Joining_Group=/a/- fe}');
Error('\P{Is_Joining_Group=/a/- fe}');
Expect(1, 1871, '\p{Is_Joining_Group=fe}', "");
Expect(0, 1871, '\p{^Is_Joining_Group=fe}', "");
Expect(0, 1871, '\P{Is_Joining_Group=fe}', "");
Expect(1, 1871, '\P{^Is_Joining_Group=fe}', "");
Expect(0, 1870, '\p{Is_Joining_Group=fe}', "");
Expect(1, 1870, '\p{^Is_Joining_Group=fe}', "");
Expect(1, 1870, '\P{Is_Joining_Group=fe}', "");
Expect(0, 1870, '\P{^Is_Joining_Group=fe}', "");
Expect(1, 1871, '\p{Is_Joining_Group=	Fe}', "");
Expect(0, 1871, '\p{^Is_Joining_Group=	Fe}', "");
Expect(0, 1871, '\P{Is_Joining_Group=	Fe}', "");
Expect(1, 1871, '\P{^Is_Joining_Group=	Fe}', "");
Expect(0, 1870, '\p{Is_Joining_Group=	Fe}', "");
Expect(1, 1870, '\p{^Is_Joining_Group=	Fe}', "");
Expect(1, 1870, '\P{Is_Joining_Group=	Fe}', "");
Expect(0, 1870, '\P{^Is_Joining_Group=	Fe}', "");
Error('\p{Is_Jg: /a/-Fe}');
Error('\P{Is_Jg: /a/-Fe}');
Expect(1, 1871, '\p{Is_Jg=fe}', "");
Expect(0, 1871, '\p{^Is_Jg=fe}', "");
Expect(0, 1871, '\P{Is_Jg=fe}', "");
Expect(1, 1871, '\P{^Is_Jg=fe}', "");
Expect(0, 1870, '\p{Is_Jg=fe}', "");
Expect(1, 1870, '\p{^Is_Jg=fe}', "");
Expect(1, 1870, '\P{Is_Jg=fe}', "");
Expect(0, 1870, '\P{^Is_Jg=fe}', "");
Expect(1, 1871, '\p{Is_Jg=--Fe}', "");
Expect(0, 1871, '\p{^Is_Jg=--Fe}', "");
Expect(0, 1871, '\P{Is_Jg=--Fe}', "");
Expect(1, 1871, '\P{^Is_Jg=--Fe}', "");
Expect(0, 1870, '\p{Is_Jg=--Fe}', "");
Expect(1, 1870, '\p{^Is_Jg=--Fe}', "");
Expect(1, 1870, '\P{Is_Jg=--Fe}', "");
Expect(0, 1870, '\P{^Is_Jg=--Fe}', "");
Error('\p{Joining_Group=-Teh Marbuta:=goal}');
Error('\P{Joining_Group=-Teh Marbuta:=goal}');
Expect(1, 1731, '\p{Joining_Group=tehmarbutagoal}', "");
Expect(0, 1731, '\p{^Joining_Group=tehmarbutagoal}', "");
Expect(0, 1731, '\P{Joining_Group=tehmarbutagoal}', "");
Expect(1, 1731, '\P{^Joining_Group=tehmarbutagoal}', "");
Expect(0, 1730, '\p{Joining_Group=tehmarbutagoal}', "");
Expect(1, 1730, '\p{^Joining_Group=tehmarbutagoal}', "");
Expect(1, 1730, '\P{Joining_Group=tehmarbutagoal}', "");
Expect(0, 1730, '\P{^Joining_Group=tehmarbutagoal}', "");
Expect(1, 1731, '\p{Joining_Group:   --teh	MARBUTA_Goal}', "");
Expect(0, 1731, '\p{^Joining_Group:   --teh	MARBUTA_Goal}', "");
Expect(0, 1731, '\P{Joining_Group:   --teh	MARBUTA_Goal}', "");
Expect(1, 1731, '\P{^Joining_Group:   --teh	MARBUTA_Goal}', "");
Expect(0, 1730, '\p{Joining_Group:   --teh	MARBUTA_Goal}', "");
Expect(1, 1730, '\p{^Joining_Group:   --teh	MARBUTA_Goal}', "");
Expect(1, 1730, '\P{Joining_Group:   --teh	MARBUTA_Goal}', "");
Expect(0, 1730, '\P{^Joining_Group:   --teh	MARBUTA_Goal}', "");
Error('\p{Jg= /a/HAMZAOn-Heh	goal}');
Error('\P{Jg= /a/HAMZAOn-Heh	goal}');
Expect(1, 1731, '\p{Jg=hamzaonhehgoal}', "");
Expect(0, 1731, '\p{^Jg=hamzaonhehgoal}', "");
Expect(0, 1731, '\P{Jg=hamzaonhehgoal}', "");
Expect(1, 1731, '\P{^Jg=hamzaonhehgoal}', "");
Expect(0, 1730, '\p{Jg=hamzaonhehgoal}', "");
Expect(1, 1730, '\p{^Jg=hamzaonhehgoal}', "");
Expect(1, 1730, '\P{Jg=hamzaonhehgoal}', "");
Expect(0, 1730, '\P{^Jg=hamzaonhehgoal}', "");
Expect(1, 1731, '\p{Jg=_ hamza-on	HEH	Goal}', "");
Expect(0, 1731, '\p{^Jg=_ hamza-on	HEH	Goal}', "");
Expect(0, 1731, '\P{Jg=_ hamza-on	HEH	Goal}', "");
Expect(1, 1731, '\P{^Jg=_ hamza-on	HEH	Goal}', "");
Expect(0, 1730, '\p{Jg=_ hamza-on	HEH	Goal}', "");
Expect(1, 1730, '\p{^Jg=_ hamza-on	HEH	Goal}', "");
Expect(1, 1730, '\P{Jg=_ hamza-on	HEH	Goal}', "");
Expect(0, 1730, '\P{^Jg=_ hamza-on	HEH	Goal}', "");
Error('\p{Is_Joining_Group= /a/Teh_MARBUTA-Goal}');
Error('\P{Is_Joining_Group= /a/Teh_MARBUTA-Goal}');
Expect(1, 1731, '\p{Is_Joining_Group=tehmarbutagoal}', "");
Expect(0, 1731, '\p{^Is_Joining_Group=tehmarbutagoal}', "");
Expect(0, 1731, '\P{Is_Joining_Group=tehmarbutagoal}', "");
Expect(1, 1731, '\P{^Is_Joining_Group=tehmarbutagoal}', "");
Expect(0, 1730, '\p{Is_Joining_Group=tehmarbutagoal}', "");
Expect(1, 1730, '\p{^Is_Joining_Group=tehmarbutagoal}', "");
Expect(1, 1730, '\P{Is_Joining_Group=tehmarbutagoal}', "");
Expect(0, 1730, '\P{^Is_Joining_Group=tehmarbutagoal}', "");
Expect(1, 1731, '\p{Is_Joining_Group=_ Teh	marbuta GOAL}', "");
Expect(0, 1731, '\p{^Is_Joining_Group=_ Teh	marbuta GOAL}', "");
Expect(0, 1731, '\P{Is_Joining_Group=_ Teh	marbuta GOAL}', "");
Expect(1, 1731, '\P{^Is_Joining_Group=_ Teh	marbuta GOAL}', "");
Expect(0, 1730, '\p{Is_Joining_Group=_ Teh	marbuta GOAL}', "");
Expect(1, 1730, '\p{^Is_Joining_Group=_ Teh	marbuta GOAL}', "");
Expect(1, 1730, '\P{Is_Joining_Group=_ Teh	marbuta GOAL}', "");
Expect(0, 1730, '\P{^Is_Joining_Group=_ Teh	marbuta GOAL}', "");
Error('\p{Is_Jg=_	hamza	on:=Hehgoal}');
Error('\P{Is_Jg=_	hamza	on:=Hehgoal}');
Expect(1, 1731, '\p{Is_Jg=hamzaonhehgoal}', "");
Expect(0, 1731, '\p{^Is_Jg=hamzaonhehgoal}', "");
Expect(0, 1731, '\P{Is_Jg=hamzaonhehgoal}', "");
Expect(1, 1731, '\P{^Is_Jg=hamzaonhehgoal}', "");
Expect(0, 1730, '\p{Is_Jg=hamzaonhehgoal}', "");
Expect(1, 1730, '\p{^Is_Jg=hamzaonhehgoal}', "");
Expect(1, 1730, '\P{Is_Jg=hamzaonhehgoal}', "");
Expect(0, 1730, '\P{^Is_Jg=hamzaonhehgoal}', "");
Expect(1, 1731, '\p{Is_Jg=	-HamzaOn_hehGOAL}', "");
Expect(0, 1731, '\p{^Is_Jg=	-HamzaOn_hehGOAL}', "");
Expect(0, 1731, '\P{Is_Jg=	-HamzaOn_hehGOAL}', "");
Expect(1, 1731, '\P{^Is_Jg=	-HamzaOn_hehGOAL}', "");
Expect(0, 1730, '\p{Is_Jg=	-HamzaOn_hehGOAL}', "");
Expect(1, 1730, '\p{^Is_Jg=	-HamzaOn_hehGOAL}', "");
Expect(1, 1730, '\P{Is_Jg=	-HamzaOn_hehGOAL}', "");
Expect(0, 1730, '\P{^Is_Jg=	-HamzaOn_hehGOAL}', "");
Error('\p{Joining_Group=/a/-alaph}');
Error('\P{Joining_Group=/a/-alaph}');
Expect(1, 1808, '\p{Joining_Group=alaph}', "");
Expect(0, 1808, '\p{^Joining_Group=alaph}', "");
Expect(0, 1808, '\P{Joining_Group=alaph}', "");
Expect(1, 1808, '\P{^Joining_Group=alaph}', "");
Expect(0, 1807, '\p{Joining_Group=alaph}', "");
Expect(1, 1807, '\p{^Joining_Group=alaph}', "");
Expect(1, 1807, '\P{Joining_Group=alaph}', "");
Expect(0, 1807, '\P{^Joining_Group=alaph}', "");
Expect(1, 1808, '\p{Joining_Group: -	Alaph}', "");
Expect(0, 1808, '\p{^Joining_Group: -	Alaph}', "");
Expect(0, 1808, '\P{Joining_Group: -	Alaph}', "");
Expect(1, 1808, '\P{^Joining_Group: -	Alaph}', "");
Expect(0, 1807, '\p{Joining_Group: -	Alaph}', "");
Expect(1, 1807, '\p{^Joining_Group: -	Alaph}', "");
Expect(1, 1807, '\P{Joining_Group: -	Alaph}', "");
Expect(0, 1807, '\P{^Joining_Group: -	Alaph}', "");
Error('\p{Jg=/a/ALAPH}');
Error('\P{Jg=/a/ALAPH}');
Expect(1, 1808, '\p{Jg=alaph}', "");
Expect(0, 1808, '\p{^Jg=alaph}', "");
Expect(0, 1808, '\P{Jg=alaph}', "");
Expect(1, 1808, '\P{^Jg=alaph}', "");
Expect(0, 1807, '\p{Jg=alaph}', "");
Expect(1, 1807, '\p{^Jg=alaph}', "");
Expect(1, 1807, '\P{Jg=alaph}', "");
Expect(0, 1807, '\P{^Jg=alaph}', "");
Expect(1, 1808, '\p{Jg=__Alaph}', "");
Expect(0, 1808, '\p{^Jg=__Alaph}', "");
Expect(0, 1808, '\P{Jg=__Alaph}', "");
Expect(1, 1808, '\P{^Jg=__Alaph}', "");
Expect(0, 1807, '\p{Jg=__Alaph}', "");
Expect(1, 1807, '\p{^Jg=__Alaph}', "");
Expect(1, 1807, '\P{Jg=__Alaph}', "");
Expect(0, 1807, '\P{^Jg=__Alaph}', "");
Error('\p{Is_Joining_Group=	_ALAPH:=}');
Error('\P{Is_Joining_Group=	_ALAPH:=}');
Expect(1, 1808, '\p{Is_Joining_Group=alaph}', "");
Expect(0, 1808, '\p{^Is_Joining_Group=alaph}', "");
Expect(0, 1808, '\P{Is_Joining_Group=alaph}', "");
Expect(1, 1808, '\P{^Is_Joining_Group=alaph}', "");
Expect(0, 1807, '\p{Is_Joining_Group=alaph}', "");
Expect(1, 1807, '\p{^Is_Joining_Group=alaph}', "");
Expect(1, 1807, '\P{Is_Joining_Group=alaph}', "");
Expect(0, 1807, '\P{^Is_Joining_Group=alaph}', "");
Expect(1, 1808, '\p{Is_Joining_Group= ALAPH}', "");
Expect(0, 1808, '\p{^Is_Joining_Group= ALAPH}', "");
Expect(0, 1808, '\P{Is_Joining_Group= ALAPH}', "");
Expect(1, 1808, '\P{^Is_Joining_Group= ALAPH}', "");
Expect(0, 1807, '\p{Is_Joining_Group= ALAPH}', "");
Expect(1, 1807, '\p{^Is_Joining_Group= ALAPH}', "");
Expect(1, 1807, '\P{Is_Joining_Group= ALAPH}', "");
Expect(0, 1807, '\P{^Is_Joining_Group= ALAPH}', "");
Error('\p{Is_Jg=-:=Alaph}');
Error('\P{Is_Jg=-:=Alaph}');
Expect(1, 1808, '\p{Is_Jg:alaph}', "");
Expect(0, 1808, '\p{^Is_Jg:alaph}', "");
Expect(0, 1808, '\P{Is_Jg:alaph}', "");
Expect(1, 1808, '\P{^Is_Jg:alaph}', "");
Expect(0, 1807, '\p{Is_Jg:alaph}', "");
Expect(1, 1807, '\p{^Is_Jg:alaph}', "");
Expect(1, 1807, '\P{Is_Jg:alaph}', "");
Expect(0, 1807, '\P{^Is_Jg:alaph}', "");
Expect(1, 1808, '\p{Is_Jg=	-Alaph}', "");
Expect(0, 1808, '\p{^Is_Jg=	-Alaph}', "");
Expect(0, 1808, '\P{Is_Jg=	-Alaph}', "");
Expect(1, 1808, '\P{^Is_Jg=	-Alaph}', "");
Expect(0, 1807, '\p{Is_Jg=	-Alaph}', "");
Expect(1, 1807, '\p{^Is_Jg=	-Alaph}', "");
Expect(1, 1807, '\P{Is_Jg=	-Alaph}', "");
Expect(0, 1807, '\P{^Is_Jg=	-Alaph}', "");
Error('\p{Joining_Group=:= 	LAMADH}');
Error('\P{Joining_Group=:= 	LAMADH}');
Expect(1, 1824, '\p{Joining_Group=lamadh}', "");
Expect(0, 1824, '\p{^Joining_Group=lamadh}', "");
Expect(0, 1824, '\P{Joining_Group=lamadh}', "");
Expect(1, 1824, '\P{^Joining_Group=lamadh}', "");
Expect(0, 1823, '\p{Joining_Group=lamadh}', "");
Expect(1, 1823, '\p{^Joining_Group=lamadh}', "");
Expect(1, 1823, '\P{Joining_Group=lamadh}', "");
Expect(0, 1823, '\P{^Joining_Group=lamadh}', "");
Expect(1, 1824, '\p{Joining_Group=-	Lamadh}', "");
Expect(0, 1824, '\p{^Joining_Group=-	Lamadh}', "");
Expect(0, 1824, '\P{Joining_Group=-	Lamadh}', "");
Expect(1, 1824, '\P{^Joining_Group=-	Lamadh}', "");
Expect(0, 1823, '\p{Joining_Group=-	Lamadh}', "");
Expect(1, 1823, '\p{^Joining_Group=-	Lamadh}', "");
Expect(1, 1823, '\P{Joining_Group=-	Lamadh}', "");
Expect(0, 1823, '\P{^Joining_Group=-	Lamadh}', "");
Error('\p{Jg=  lamadh/a/}');
Error('\P{Jg=  lamadh/a/}');
Expect(1, 1824, '\p{Jg=lamadh}', "");
Expect(0, 1824, '\p{^Jg=lamadh}', "");
Expect(0, 1824, '\P{Jg=lamadh}', "");
Expect(1, 1824, '\P{^Jg=lamadh}', "");
Expect(0, 1823, '\p{Jg=lamadh}', "");
Expect(1, 1823, '\p{^Jg=lamadh}', "");
Expect(1, 1823, '\P{Jg=lamadh}', "");
Expect(0, 1823, '\P{^Jg=lamadh}', "");
Expect(1, 1824, '\p{Jg=-Lamadh}', "");
Expect(0, 1824, '\p{^Jg=-Lamadh}', "");
Expect(0, 1824, '\P{Jg=-Lamadh}', "");
Expect(1, 1824, '\P{^Jg=-Lamadh}', "");
Expect(0, 1823, '\p{Jg=-Lamadh}', "");
Expect(1, 1823, '\p{^Jg=-Lamadh}', "");
Expect(1, 1823, '\P{Jg=-Lamadh}', "");
Expect(0, 1823, '\P{^Jg=-Lamadh}', "");
Error('\p{Is_Joining_Group=_:=lamadh}');
Error('\P{Is_Joining_Group=_:=lamadh}');
Expect(1, 1824, '\p{Is_Joining_Group: lamadh}', "");
Expect(0, 1824, '\p{^Is_Joining_Group: lamadh}', "");
Expect(0, 1824, '\P{Is_Joining_Group: lamadh}', "");
Expect(1, 1824, '\P{^Is_Joining_Group: lamadh}', "");
Expect(0, 1823, '\p{Is_Joining_Group: lamadh}', "");
Expect(1, 1823, '\p{^Is_Joining_Group: lamadh}', "");
Expect(1, 1823, '\P{Is_Joining_Group: lamadh}', "");
Expect(0, 1823, '\P{^Is_Joining_Group: lamadh}', "");
Expect(1, 1824, '\p{Is_Joining_Group=__lamadh}', "");
Expect(0, 1824, '\p{^Is_Joining_Group=__lamadh}', "");
Expect(0, 1824, '\P{Is_Joining_Group=__lamadh}', "");
Expect(1, 1824, '\P{^Is_Joining_Group=__lamadh}', "");
Expect(0, 1823, '\p{Is_Joining_Group=__lamadh}', "");
Expect(1, 1823, '\p{^Is_Joining_Group=__lamadh}', "");
Expect(1, 1823, '\P{Is_Joining_Group=__lamadh}', "");
Expect(0, 1823, '\P{^Is_Joining_Group=__lamadh}', "");
Error('\p{Is_Jg=:=Lamadh}');
Error('\P{Is_Jg=:=Lamadh}');
Expect(1, 1824, '\p{Is_Jg=lamadh}', "");
Expect(0, 1824, '\p{^Is_Jg=lamadh}', "");
Expect(0, 1824, '\P{Is_Jg=lamadh}', "");
Expect(1, 1824, '\P{^Is_Jg=lamadh}', "");
Expect(0, 1823, '\p{Is_Jg=lamadh}', "");
Expect(1, 1823, '\p{^Is_Jg=lamadh}', "");
Expect(1, 1823, '\P{Is_Jg=lamadh}', "");
Expect(0, 1823, '\P{^Is_Jg=lamadh}', "");
Expect(1, 1824, '\p{Is_Jg=- Lamadh}', "");
Expect(0, 1824, '\p{^Is_Jg=- Lamadh}', "");
Expect(0, 1824, '\P{Is_Jg=- Lamadh}', "");
Expect(1, 1824, '\P{^Is_Jg=- Lamadh}', "");
Expect(0, 1823, '\p{Is_Jg=- Lamadh}', "");
Expect(1, 1823, '\p{^Is_Jg=- Lamadh}', "");
Expect(1, 1823, '\P{Is_Jg=- Lamadh}', "");
Expect(0, 1823, '\P{^Is_Jg=- Lamadh}', "");
Error('\p{Joining_Group= /a/E}');
Error('\P{Joining_Group= /a/E}');
Expect(1, 1829, '\p{Joining_Group: e}', "");
Expect(0, 1829, '\p{^Joining_Group: e}', "");
Expect(0, 1829, '\P{Joining_Group: e}', "");
Expect(1, 1829, '\P{^Joining_Group: e}', "");
Expect(0, 1828, '\p{Joining_Group: e}', "");
Expect(1, 1828, '\p{^Joining_Group: e}', "");
Expect(1, 1828, '\P{Joining_Group: e}', "");
Expect(0, 1828, '\P{^Joining_Group: e}', "");
Expect(1, 1829, '\p{Joining_Group= _e}', "");
Expect(0, 1829, '\p{^Joining_Group= _e}', "");
Expect(0, 1829, '\P{Joining_Group= _e}', "");
Expect(1, 1829, '\P{^Joining_Group= _e}', "");
Expect(0, 1828, '\p{Joining_Group= _e}', "");
Expect(1, 1828, '\p{^Joining_Group= _e}', "");
Expect(1, 1828, '\P{Joining_Group= _e}', "");
Expect(0, 1828, '\P{^Joining_Group= _e}', "");
Error('\p{Jg=/a/_-E}');
Error('\P{Jg=/a/_-E}');
Expect(1, 1829, '\p{Jg=e}', "");
Expect(0, 1829, '\p{^Jg=e}', "");
Expect(0, 1829, '\P{Jg=e}', "");
Expect(1, 1829, '\P{^Jg=e}', "");
Expect(0, 1828, '\p{Jg=e}', "");
Expect(1, 1828, '\p{^Jg=e}', "");
Expect(1, 1828, '\P{Jg=e}', "");
Expect(0, 1828, '\P{^Jg=e}', "");
Expect(1, 1829, '\p{Jg:- E}', "");
Expect(0, 1829, '\p{^Jg:- E}', "");
Expect(0, 1829, '\P{Jg:- E}', "");
Expect(1, 1829, '\P{^Jg:- E}', "");
Expect(0, 1828, '\p{Jg:- E}', "");
Expect(1, 1828, '\p{^Jg:- E}', "");
Expect(1, 1828, '\P{Jg:- E}', "");
Expect(0, 1828, '\P{^Jg:- E}', "");
Error('\p{Is_Joining_Group=/a/E}');
Error('\P{Is_Joining_Group=/a/E}');
Expect(1, 1829, '\p{Is_Joining_Group=e}', "");
Expect(0, 1829, '\p{^Is_Joining_Group=e}', "");
Expect(0, 1829, '\P{Is_Joining_Group=e}', "");
Expect(1, 1829, '\P{^Is_Joining_Group=e}', "");
Expect(0, 1828, '\p{Is_Joining_Group=e}', "");
Expect(1, 1828, '\p{^Is_Joining_Group=e}', "");
Expect(1, 1828, '\P{Is_Joining_Group=e}', "");
Expect(0, 1828, '\P{^Is_Joining_Group=e}', "");
Expect(1, 1829, '\p{Is_Joining_Group=	-e}', "");
Expect(0, 1829, '\p{^Is_Joining_Group=	-e}', "");
Expect(0, 1829, '\P{Is_Joining_Group=	-e}', "");
Expect(1, 1829, '\P{^Is_Joining_Group=	-e}', "");
Expect(0, 1828, '\p{Is_Joining_Group=	-e}', "");
Expect(1, 1828, '\p{^Is_Joining_Group=	-e}', "");
Expect(1, 1828, '\P{Is_Joining_Group=	-e}', "");
Expect(0, 1828, '\P{^Is_Joining_Group=	-e}', "");
Error('\p{Is_Jg=-e/a/}');
Error('\P{Is_Jg=-e/a/}');
Expect(1, 1829, '\p{Is_Jg=e}', "");
Expect(0, 1829, '\p{^Is_Jg=e}', "");
Expect(0, 1829, '\P{Is_Jg=e}', "");
Expect(1, 1829, '\P{^Is_Jg=e}', "");
Expect(0, 1828, '\p{Is_Jg=e}', "");
Expect(1, 1828, '\p{^Is_Jg=e}', "");
Expect(1, 1828, '\P{Is_Jg=e}', "");
Expect(0, 1828, '\P{^Is_Jg=e}', "");
Expect(1, 1829, '\p{Is_Jg=_ E}', "");
Expect(0, 1829, '\p{^Is_Jg=_ E}', "");
Expect(0, 1829, '\P{Is_Jg=_ E}', "");
Expect(1, 1829, '\P{^Is_Jg=_ E}', "");
Expect(0, 1828, '\p{Is_Jg=_ E}', "");
Expect(1, 1828, '\p{^Is_Jg=_ E}', "");
Expect(1, 1828, '\P{Is_Jg=_ E}', "");
Expect(0, 1828, '\P{^Is_Jg=_ E}', "");
Error('\p{Joining_Group: :=-	YEH_BARREE}');
Error('\P{Joining_Group: :=-	YEH_BARREE}');
Expect(1, 1747, '\p{Joining_Group=yehbarree}', "");
Expect(0, 1747, '\p{^Joining_Group=yehbarree}', "");
Expect(0, 1747, '\P{Joining_Group=yehbarree}', "");
Expect(1, 1747, '\P{^Joining_Group=yehbarree}', "");
Expect(0, 1745, '\p{Joining_Group=yehbarree}', "");
Expect(1, 1745, '\p{^Joining_Group=yehbarree}', "");
Expect(1, 1745, '\P{Joining_Group=yehbarree}', "");
Expect(0, 1745, '\P{^Joining_Group=yehbarree}', "");
Expect(1, 1747, '\p{Joining_Group: __Yeh_Barree}', "");
Expect(0, 1747, '\p{^Joining_Group: __Yeh_Barree}', "");
Expect(0, 1747, '\P{Joining_Group: __Yeh_Barree}', "");
Expect(1, 1747, '\P{^Joining_Group: __Yeh_Barree}', "");
Expect(0, 1745, '\p{Joining_Group: __Yeh_Barree}', "");
Expect(1, 1745, '\p{^Joining_Group: __Yeh_Barree}', "");
Expect(1, 1745, '\P{Joining_Group: __Yeh_Barree}', "");
Expect(0, 1745, '\P{^Joining_Group: __Yeh_Barree}', "");
Error('\p{Jg=--Yeh/a/Barree}');
Error('\P{Jg=--Yeh/a/Barree}');
Expect(1, 1747, '\p{Jg=yehbarree}', "");
Expect(0, 1747, '\p{^Jg=yehbarree}', "");
Expect(0, 1747, '\P{Jg=yehbarree}', "");
Expect(1, 1747, '\P{^Jg=yehbarree}', "");
Expect(0, 1745, '\p{Jg=yehbarree}', "");
Expect(1, 1745, '\p{^Jg=yehbarree}', "");
Expect(1, 1745, '\P{Jg=yehbarree}', "");
Expect(0, 1745, '\P{^Jg=yehbarree}', "");
Expect(1, 1747, '\p{Jg=--yeh	BARREE}', "");
Expect(0, 1747, '\p{^Jg=--yeh	BARREE}', "");
Expect(0, 1747, '\P{Jg=--yeh	BARREE}', "");
Expect(1, 1747, '\P{^Jg=--yeh	BARREE}', "");
Expect(0, 1745, '\p{Jg=--yeh	BARREE}', "");
Expect(1, 1745, '\p{^Jg=--yeh	BARREE}', "");
Expect(1, 1745, '\P{Jg=--yeh	BARREE}', "");
Expect(0, 1745, '\P{^Jg=--yeh	BARREE}', "");
Error('\p{Is_Joining_Group=	:=YEH_barree}');
Error('\P{Is_Joining_Group=	:=YEH_barree}');
Expect(1, 1747, '\p{Is_Joining_Group=yehbarree}', "");
Expect(0, 1747, '\p{^Is_Joining_Group=yehbarree}', "");
Expect(0, 1747, '\P{Is_Joining_Group=yehbarree}', "");
Expect(1, 1747, '\P{^Is_Joining_Group=yehbarree}', "");
Expect(0, 1745, '\p{Is_Joining_Group=yehbarree}', "");
Expect(1, 1745, '\p{^Is_Joining_Group=yehbarree}', "");
Expect(1, 1745, '\P{Is_Joining_Group=yehbarree}', "");
Expect(0, 1745, '\P{^Is_Joining_Group=yehbarree}', "");
Expect(1, 1747, '\p{Is_Joining_Group=_-YehBARREE}', "");
Expect(0, 1747, '\p{^Is_Joining_Group=_-YehBARREE}', "");
Expect(0, 1747, '\P{Is_Joining_Group=_-YehBARREE}', "");
Expect(1, 1747, '\P{^Is_Joining_Group=_-YehBARREE}', "");
Expect(0, 1745, '\p{Is_Joining_Group=_-YehBARREE}', "");
Expect(1, 1745, '\p{^Is_Joining_Group=_-YehBARREE}', "");
Expect(1, 1745, '\P{Is_Joining_Group=_-YehBARREE}', "");
Expect(0, 1745, '\P{^Is_Joining_Group=_-YehBARREE}', "");
Error('\p{Is_Jg: :=YEH Barree}');
Error('\P{Is_Jg: :=YEH Barree}');
Expect(1, 1747, '\p{Is_Jg=yehbarree}', "");
Expect(0, 1747, '\p{^Is_Jg=yehbarree}', "");
Expect(0, 1747, '\P{Is_Jg=yehbarree}', "");
Expect(1, 1747, '\P{^Is_Jg=yehbarree}', "");
Expect(0, 1745, '\p{Is_Jg=yehbarree}', "");
Expect(1, 1745, '\p{^Is_Jg=yehbarree}', "");
Expect(1, 1745, '\P{Is_Jg=yehbarree}', "");
Expect(0, 1745, '\P{^Is_Jg=yehbarree}', "");
Expect(1, 1747, '\p{Is_Jg=	yeh	Barree}', "");
Expect(0, 1747, '\p{^Is_Jg=	yeh	Barree}', "");
Expect(0, 1747, '\P{Is_Jg=	yeh	Barree}', "");
Expect(1, 1747, '\P{^Is_Jg=	yeh	Barree}', "");
Expect(0, 1745, '\p{Is_Jg=	yeh	Barree}', "");
Expect(1, 1745, '\p{^Is_Jg=	yeh	Barree}', "");
Expect(1, 1745, '\P{Is_Jg=	yeh	Barree}', "");
Expect(0, 1745, '\P{^Is_Jg=	yeh	Barree}', "");
Error('\p{Joining_Group=- Nya/a/}');
Error('\P{Joining_Group=- Nya/a/}');
Expect(1, 1725, '\p{Joining_Group=nya}', "");
Expect(0, 1725, '\p{^Joining_Group=nya}', "");
Expect(0, 1725, '\P{Joining_Group=nya}', "");
Expect(1, 1725, '\P{^Joining_Group=nya}', "");
Expect(0, 1724, '\p{Joining_Group=nya}', "");
Expect(1, 1724, '\p{^Joining_Group=nya}', "");
Expect(1, 1724, '\P{Joining_Group=nya}', "");
Expect(0, 1724, '\P{^Joining_Group=nya}', "");
Expect(1, 1725, '\p{Joining_Group=_-Nya}', "");
Expect(0, 1725, '\p{^Joining_Group=_-Nya}', "");
Expect(0, 1725, '\P{Joining_Group=_-Nya}', "");
Expect(1, 1725, '\P{^Joining_Group=_-Nya}', "");
Expect(0, 1724, '\p{Joining_Group=_-Nya}', "");
Expect(1, 1724, '\p{^Joining_Group=_-Nya}', "");
Expect(1, 1724, '\P{Joining_Group=_-Nya}', "");
Expect(0, 1724, '\P{^Joining_Group=_-Nya}', "");
Error('\p{Jg=/a/Nya}');
Error('\P{Jg=/a/Nya}');
Expect(1, 1725, '\p{Jg=nya}', "");
Expect(0, 1725, '\p{^Jg=nya}', "");
Expect(0, 1725, '\P{Jg=nya}', "");
Expect(1, 1725, '\P{^Jg=nya}', "");
Expect(0, 1724, '\p{Jg=nya}', "");
Expect(1, 1724, '\p{^Jg=nya}', "");
Expect(1, 1724, '\P{Jg=nya}', "");
Expect(0, 1724, '\P{^Jg=nya}', "");
Expect(1, 1725, '\p{Jg=_	NYA}', "");
Expect(0, 1725, '\p{^Jg=_	NYA}', "");
Expect(0, 1725, '\P{Jg=_	NYA}', "");
Expect(1, 1725, '\P{^Jg=_	NYA}', "");
Expect(0, 1724, '\p{Jg=_	NYA}', "");
Expect(1, 1724, '\p{^Jg=_	NYA}', "");
Expect(1, 1724, '\P{Jg=_	NYA}', "");
Expect(0, 1724, '\P{^Jg=_	NYA}', "");
Error('\p{Is_Joining_Group=_NYA/a/}');
Error('\P{Is_Joining_Group=_NYA/a/}');
Expect(1, 1725, '\p{Is_Joining_Group=nya}', "");
Expect(0, 1725, '\p{^Is_Joining_Group=nya}', "");
Expect(0, 1725, '\P{Is_Joining_Group=nya}', "");
Expect(1, 1725, '\P{^Is_Joining_Group=nya}', "");
Expect(0, 1724, '\p{Is_Joining_Group=nya}', "");
Expect(1, 1724, '\p{^Is_Joining_Group=nya}', "");
Expect(1, 1724, '\P{Is_Joining_Group=nya}', "");
Expect(0, 1724, '\P{^Is_Joining_Group=nya}', "");
Expect(1, 1725, '\p{Is_Joining_Group=__nya}', "");
Expect(0, 1725, '\p{^Is_Joining_Group=__nya}', "");
Expect(0, 1725, '\P{Is_Joining_Group=__nya}', "");
Expect(1, 1725, '\P{^Is_Joining_Group=__nya}', "");
Expect(0, 1724, '\p{Is_Joining_Group=__nya}', "");
Expect(1, 1724, '\p{^Is_Joining_Group=__nya}', "");
Expect(1, 1724, '\P{Is_Joining_Group=__nya}', "");
Expect(0, 1724, '\P{^Is_Joining_Group=__nya}', "");
Error('\p{Is_Jg=/a/-_Nya}');
Error('\P{Is_Jg=/a/-_Nya}');
Expect(1, 1725, '\p{Is_Jg=nya}', "");
Expect(0, 1725, '\p{^Is_Jg=nya}', "");
Expect(0, 1725, '\P{Is_Jg=nya}', "");
Expect(1, 1725, '\P{^Is_Jg=nya}', "");
Expect(0, 1724, '\p{Is_Jg=nya}', "");
Expect(1, 1724, '\p{^Is_Jg=nya}', "");
Expect(1, 1724, '\P{Is_Jg=nya}', "");
Expect(0, 1724, '\P{^Is_Jg=nya}', "");
Expect(1, 1725, '\p{Is_Jg=-nya}', "");
Expect(0, 1725, '\p{^Is_Jg=-nya}', "");
Expect(0, 1725, '\P{Is_Jg=-nya}', "");
Expect(1, 1725, '\P{^Is_Jg=-nya}', "");
Expect(0, 1724, '\p{Is_Jg=-nya}', "");
Expect(1, 1724, '\p{^Is_Jg=-nya}', "");
Expect(1, 1724, '\P{Is_Jg=-nya}', "");
Expect(0, 1724, '\P{^Is_Jg=-nya}', "");
Error('\p{Joining_Group=:=Nun}');
Error('\P{Joining_Group=:=Nun}');
Expect(1, 1826, '\p{Joining_Group:nun}', "");
Expect(0, 1826, '\p{^Joining_Group:nun}', "");
Expect(0, 1826, '\P{Joining_Group:nun}', "");
Expect(1, 1826, '\P{^Joining_Group:nun}', "");
Expect(0, 1825, '\p{Joining_Group:nun}', "");
Expect(1, 1825, '\p{^Joining_Group:nun}', "");
Expect(1, 1825, '\P{Joining_Group:nun}', "");
Expect(0, 1825, '\P{^Joining_Group:nun}', "");
Expect(1, 1826, '\p{Joining_Group=  NUN}', "");
Expect(0, 1826, '\p{^Joining_Group=  NUN}', "");
Expect(0, 1826, '\P{Joining_Group=  NUN}', "");
Expect(1, 1826, '\P{^Joining_Group=  NUN}', "");
Expect(0, 1825, '\p{Joining_Group=  NUN}', "");
Expect(1, 1825, '\p{^Joining_Group=  NUN}', "");
Expect(1, 1825, '\P{Joining_Group=  NUN}', "");
Expect(0, 1825, '\P{^Joining_Group=  NUN}', "");
Error('\p{Jg=_/a/nun}');
Error('\P{Jg=_/a/nun}');
Expect(1, 1826, '\p{Jg=nun}', "");
Expect(0, 1826, '\p{^Jg=nun}', "");
Expect(0, 1826, '\P{Jg=nun}', "");
Expect(1, 1826, '\P{^Jg=nun}', "");
Expect(0, 1825, '\p{Jg=nun}', "");
Expect(1, 1825, '\p{^Jg=nun}', "");
Expect(1, 1825, '\P{Jg=nun}', "");
Expect(0, 1825, '\P{^Jg=nun}', "");
Expect(1, 1826, '\p{Jg=	-Nun}', "");
Expect(0, 1826, '\p{^Jg=	-Nun}', "");
Expect(0, 1826, '\P{Jg=	-Nun}', "");
Expect(1, 1826, '\P{^Jg=	-Nun}', "");
Expect(0, 1825, '\p{Jg=	-Nun}', "");
Expect(1, 1825, '\p{^Jg=	-Nun}', "");
Expect(1, 1825, '\P{Jg=	-Nun}', "");
Expect(0, 1825, '\P{^Jg=	-Nun}', "");
Error('\p{Is_Joining_Group=/a/Nun}');
Error('\P{Is_Joining_Group=/a/Nun}');
Expect(1, 1826, '\p{Is_Joining_Group=nun}', "");
Expect(0, 1826, '\p{^Is_Joining_Group=nun}', "");
Expect(0, 1826, '\P{Is_Joining_Group=nun}', "");
Expect(1, 1826, '\P{^Is_Joining_Group=nun}', "");
Expect(0, 1825, '\p{Is_Joining_Group=nun}', "");
Expect(1, 1825, '\p{^Is_Joining_Group=nun}', "");
Expect(1, 1825, '\P{Is_Joining_Group=nun}', "");
Expect(0, 1825, '\P{^Is_Joining_Group=nun}', "");
Expect(1, 1826, '\p{Is_Joining_Group=- NUN}', "");
Expect(0, 1826, '\p{^Is_Joining_Group=- NUN}', "");
Expect(0, 1826, '\P{Is_Joining_Group=- NUN}', "");
Expect(1, 1826, '\P{^Is_Joining_Group=- NUN}', "");
Expect(0, 1825, '\p{Is_Joining_Group=- NUN}', "");
Expect(1, 1825, '\p{^Is_Joining_Group=- NUN}', "");
Expect(1, 1825, '\P{Is_Joining_Group=- NUN}', "");
Expect(0, 1825, '\P{^Is_Joining_Group=- NUN}', "");
Error('\p{Is_Jg=_NUN/a/}');
Error('\P{Is_Jg=_NUN/a/}');
Expect(1, 1826, '\p{Is_Jg:nun}', "");
Expect(0, 1826, '\p{^Is_Jg:nun}', "");
Expect(0, 1826, '\P{Is_Jg:nun}', "");
Expect(1, 1826, '\P{^Is_Jg:nun}', "");
Expect(0, 1825, '\p{Is_Jg:nun}', "");
Expect(1, 1825, '\p{^Is_Jg:nun}', "");
Expect(1, 1825, '\P{Is_Jg:nun}', "");
Expect(0, 1825, '\P{^Is_Jg:nun}', "");
Expect(1, 1826, '\p{Is_Jg= 	NUN}', "");
Expect(0, 1826, '\p{^Is_Jg= 	NUN}', "");
Expect(0, 1826, '\P{Is_Jg= 	NUN}', "");
Expect(1, 1826, '\P{^Is_Jg= 	NUN}', "");
Expect(0, 1825, '\p{Is_Jg= 	NUN}', "");
Expect(1, 1825, '\p{^Is_Jg= 	NUN}', "");
Expect(1, 1825, '\P{Is_Jg= 	NUN}', "");
Expect(0, 1825, '\P{^Is_Jg= 	NUN}', "");
Error('\p{Joining_Group=/a/ -LAM}');
Error('\P{Joining_Group=/a/ -LAM}');
Expect(1, 1604, '\p{Joining_Group=lam}', "");
Expect(0, 1604, '\p{^Joining_Group=lam}', "");
Expect(0, 1604, '\P{Joining_Group=lam}', "");
Expect(1, 1604, '\P{^Joining_Group=lam}', "");
Expect(0, 1603, '\p{Joining_Group=lam}', "");
Expect(1, 1603, '\p{^Joining_Group=lam}', "");
Expect(1, 1603, '\P{Joining_Group=lam}', "");
Expect(0, 1603, '\P{^Joining_Group=lam}', "");
Expect(1, 1604, '\p{Joining_Group=-_lam}', "");
Expect(0, 1604, '\p{^Joining_Group=-_lam}', "");
Expect(0, 1604, '\P{Joining_Group=-_lam}', "");
Expect(1, 1604, '\P{^Joining_Group=-_lam}', "");
Expect(0, 1603, '\p{Joining_Group=-_lam}', "");
Expect(1, 1603, '\p{^Joining_Group=-_lam}', "");
Expect(1, 1603, '\P{Joining_Group=-_lam}', "");
Expect(0, 1603, '\P{^Joining_Group=-_lam}', "");
Error('\p{Jg=/a/Lam}');
Error('\P{Jg=/a/Lam}');
Expect(1, 1604, '\p{Jg=lam}', "");
Expect(0, 1604, '\p{^Jg=lam}', "");
Expect(0, 1604, '\P{Jg=lam}', "");
Expect(1, 1604, '\P{^Jg=lam}', "");
Expect(0, 1603, '\p{Jg=lam}', "");
Expect(1, 1603, '\p{^Jg=lam}', "");
Expect(1, 1603, '\P{Jg=lam}', "");
Expect(0, 1603, '\P{^Jg=lam}', "");
Expect(1, 1604, '\p{Jg=- Lam}', "");
Expect(0, 1604, '\p{^Jg=- Lam}', "");
Expect(0, 1604, '\P{Jg=- Lam}', "");
Expect(1, 1604, '\P{^Jg=- Lam}', "");
Expect(0, 1603, '\p{Jg=- Lam}', "");
Expect(1, 1603, '\p{^Jg=- Lam}', "");
Expect(1, 1603, '\P{Jg=- Lam}', "");
Expect(0, 1603, '\P{^Jg=- Lam}', "");
Error('\p{Is_Joining_Group=--lam:=}');
Error('\P{Is_Joining_Group=--lam:=}');
Expect(1, 1604, '\p{Is_Joining_Group=lam}', "");
Expect(0, 1604, '\p{^Is_Joining_Group=lam}', "");
Expect(0, 1604, '\P{Is_Joining_Group=lam}', "");
Expect(1, 1604, '\P{^Is_Joining_Group=lam}', "");
Expect(0, 1603, '\p{Is_Joining_Group=lam}', "");
Expect(1, 1603, '\p{^Is_Joining_Group=lam}', "");
Expect(1, 1603, '\P{Is_Joining_Group=lam}', "");
Expect(0, 1603, '\P{^Is_Joining_Group=lam}', "");
Expect(1, 1604, '\p{Is_Joining_Group=  Lam}', "");
Expect(0, 1604, '\p{^Is_Joining_Group=  Lam}', "");
Expect(0, 1604, '\P{Is_Joining_Group=  Lam}', "");
Expect(1, 1604, '\P{^Is_Joining_Group=  Lam}', "");
Expect(0, 1603, '\p{Is_Joining_Group=  Lam}', "");
Expect(1, 1603, '\p{^Is_Joining_Group=  Lam}', "");
Expect(1, 1603, '\P{Is_Joining_Group=  Lam}', "");
Expect(0, 1603, '\P{^Is_Joining_Group=  Lam}', "");
Error('\p{Is_Jg=/a/Lam}');
Error('\P{Is_Jg=/a/Lam}');
Expect(1, 1604, '\p{Is_Jg=lam}', "");
Expect(0, 1604, '\p{^Is_Jg=lam}', "");
Expect(0, 1604, '\P{Is_Jg=lam}', "");
Expect(1, 1604, '\P{^Is_Jg=lam}', "");
Expect(0, 1603, '\p{Is_Jg=lam}', "");
Expect(1, 1603, '\p{^Is_Jg=lam}', "");
Expect(1, 1603, '\P{Is_Jg=lam}', "");
Expect(0, 1603, '\P{^Is_Jg=lam}', "");
Expect(1, 1604, '\p{Is_Jg:		LAM}', "");
Expect(0, 1604, '\p{^Is_Jg:		LAM}', "");
Expect(0, 1604, '\P{Is_Jg:		LAM}', "");
Expect(1, 1604, '\P{^Is_Jg:		LAM}', "");
Expect(0, 1603, '\p{Is_Jg:		LAM}', "");
Expect(1, 1603, '\p{^Is_Jg:		LAM}', "");
Expect(1, 1603, '\P{Is_Jg:		LAM}', "");
Expect(0, 1603, '\P{^Is_Jg:		LAM}', "");
Error('\p{Joining_Group=_ain:=}');
Error('\P{Joining_Group=_ain:=}');
Expect(1, 1594, '\p{Joining_Group=ain}', "");
Expect(0, 1594, '\p{^Joining_Group=ain}', "");
Expect(0, 1594, '\P{Joining_Group=ain}', "");
Expect(1, 1594, '\P{^Joining_Group=ain}', "");
Expect(0, 1592, '\p{Joining_Group=ain}', "");
Expect(1, 1592, '\p{^Joining_Group=ain}', "");
Expect(1, 1592, '\P{Joining_Group=ain}', "");
Expect(0, 1592, '\P{^Joining_Group=ain}', "");
Expect(1, 1594, '\p{Joining_Group=	_Ain}', "");
Expect(0, 1594, '\p{^Joining_Group=	_Ain}', "");
Expect(0, 1594, '\P{Joining_Group=	_Ain}', "");
Expect(1, 1594, '\P{^Joining_Group=	_Ain}', "");
Expect(0, 1592, '\p{Joining_Group=	_Ain}', "");
Expect(1, 1592, '\p{^Joining_Group=	_Ain}', "");
Expect(1, 1592, '\P{Joining_Group=	_Ain}', "");
Expect(0, 1592, '\P{^Joining_Group=	_Ain}', "");
Error('\p{Jg=/a/	 Ain}');
Error('\P{Jg=/a/	 Ain}');
Expect(1, 1594, '\p{Jg=ain}', "");
Expect(0, 1594, '\p{^Jg=ain}', "");
Expect(0, 1594, '\P{Jg=ain}', "");
Expect(1, 1594, '\P{^Jg=ain}', "");
Expect(0, 1592, '\p{Jg=ain}', "");
Expect(1, 1592, '\p{^Jg=ain}', "");
Expect(1, 1592, '\P{Jg=ain}', "");
Expect(0, 1592, '\P{^Jg=ain}', "");
Expect(1, 1594, '\p{Jg=-Ain}', "");
Expect(0, 1594, '\p{^Jg=-Ain}', "");
Expect(0, 1594, '\P{Jg=-Ain}', "");
Expect(1, 1594, '\P{^Jg=-Ain}', "");
Expect(0, 1592, '\p{Jg=-Ain}', "");
Expect(1, 1592, '\p{^Jg=-Ain}', "");
Expect(1, 1592, '\P{Jg=-Ain}', "");
Expect(0, 1592, '\P{^Jg=-Ain}', "");
Error('\p{Is_Joining_Group:	:=	_AIN}');
Error('\P{Is_Joining_Group:	:=	_AIN}');
Expect(1, 1594, '\p{Is_Joining_Group=ain}', "");
Expect(0, 1594, '\p{^Is_Joining_Group=ain}', "");
Expect(0, 1594, '\P{Is_Joining_Group=ain}', "");
Expect(1, 1594, '\P{^Is_Joining_Group=ain}', "");
Expect(0, 1592, '\p{Is_Joining_Group=ain}', "");
Expect(1, 1592, '\p{^Is_Joining_Group=ain}', "");
Expect(1, 1592, '\P{Is_Joining_Group=ain}', "");
Expect(0, 1592, '\P{^Is_Joining_Group=ain}', "");
Expect(1, 1594, '\p{Is_Joining_Group=Ain}', "");
Expect(0, 1594, '\p{^Is_Joining_Group=Ain}', "");
Expect(0, 1594, '\P{Is_Joining_Group=Ain}', "");
Expect(1, 1594, '\P{^Is_Joining_Group=Ain}', "");
Expect(0, 1592, '\p{Is_Joining_Group=Ain}', "");
Expect(1, 1592, '\p{^Is_Joining_Group=Ain}', "");
Expect(1, 1592, '\P{Is_Joining_Group=Ain}', "");
Expect(0, 1592, '\P{^Is_Joining_Group=Ain}', "");
Error('\p{Is_Jg=:=AIN}');
Error('\P{Is_Jg=:=AIN}');
Expect(1, 1594, '\p{Is_Jg=ain}', "");
Expect(0, 1594, '\p{^Is_Jg=ain}', "");
Expect(0, 1594, '\P{Is_Jg=ain}', "");
Expect(1, 1594, '\P{^Is_Jg=ain}', "");
Expect(0, 1592, '\p{Is_Jg=ain}', "");
Expect(1, 1592, '\p{^Is_Jg=ain}', "");
Expect(1, 1592, '\P{Is_Jg=ain}', "");
Expect(0, 1592, '\P{^Is_Jg=ain}', "");
Expect(1, 1594, '\p{Is_Jg=_-AIN}', "");
Expect(0, 1594, '\p{^Is_Jg=_-AIN}', "");
Expect(0, 1594, '\P{Is_Jg=_-AIN}', "");
Expect(1, 1594, '\P{^Is_Jg=_-AIN}', "");
Expect(0, 1592, '\p{Is_Jg=_-AIN}', "");
Expect(1, 1592, '\p{^Is_Jg=_-AIN}', "");
Expect(1, 1592, '\P{Is_Jg=_-AIN}', "");
Expect(0, 1592, '\P{^Is_Jg=_-AIN}', "");
Error('\p{Joining_Group=/a/-_Heh}');
Error('\P{Joining_Group=/a/-_Heh}');
Expect(1, 1607, '\p{Joining_Group=heh}', "");
Expect(0, 1607, '\p{^Joining_Group=heh}', "");
Expect(0, 1607, '\P{Joining_Group=heh}', "");
Expect(1, 1607, '\P{^Joining_Group=heh}', "");
Expect(0, 1606, '\p{Joining_Group=heh}', "");
Expect(1, 1606, '\p{^Joining_Group=heh}', "");
Expect(1, 1606, '\P{Joining_Group=heh}', "");
Expect(0, 1606, '\P{^Joining_Group=heh}', "");
Expect(1, 1607, '\p{Joining_Group=_-HEH}', "");
Expect(0, 1607, '\p{^Joining_Group=_-HEH}', "");
Expect(0, 1607, '\P{Joining_Group=_-HEH}', "");
Expect(1, 1607, '\P{^Joining_Group=_-HEH}', "");
Expect(0, 1606, '\p{Joining_Group=_-HEH}', "");
Expect(1, 1606, '\p{^Joining_Group=_-HEH}', "");
Expect(1, 1606, '\P{Joining_Group=_-HEH}', "");
Expect(0, 1606, '\P{^Joining_Group=_-HEH}', "");
Error('\p{Jg= /a/Heh}');
Error('\P{Jg= /a/Heh}');
Expect(1, 1607, '\p{Jg=heh}', "");
Expect(0, 1607, '\p{^Jg=heh}', "");
Expect(0, 1607, '\P{Jg=heh}', "");
Expect(1, 1607, '\P{^Jg=heh}', "");
Expect(0, 1606, '\p{Jg=heh}', "");
Expect(1, 1606, '\p{^Jg=heh}', "");
Expect(1, 1606, '\P{Jg=heh}', "");
Expect(0, 1606, '\P{^Jg=heh}', "");
Expect(1, 1607, '\p{Jg:-_HEH}', "");
Expect(0, 1607, '\p{^Jg:-_HEH}', "");
Expect(0, 1607, '\P{Jg:-_HEH}', "");
Expect(1, 1607, '\P{^Jg:-_HEH}', "");
Expect(0, 1606, '\p{Jg:-_HEH}', "");
Expect(1, 1606, '\p{^Jg:-_HEH}', "");
Expect(1, 1606, '\P{Jg:-_HEH}', "");
Expect(0, 1606, '\P{^Jg:-_HEH}', "");
Error('\p{Is_Joining_Group=	/a/Heh}');
Error('\P{Is_Joining_Group=	/a/Heh}');
Expect(1, 1607, '\p{Is_Joining_Group=heh}', "");
Expect(0, 1607, '\p{^Is_Joining_Group=heh}', "");
Expect(0, 1607, '\P{Is_Joining_Group=heh}', "");
Expect(1, 1607, '\P{^Is_Joining_Group=heh}', "");
Expect(0, 1606, '\p{Is_Joining_Group=heh}', "");
Expect(1, 1606, '\p{^Is_Joining_Group=heh}', "");
Expect(1, 1606, '\P{Is_Joining_Group=heh}', "");
Expect(0, 1606, '\P{^Is_Joining_Group=heh}', "");
Expect(1, 1607, '\p{Is_Joining_Group=__Heh}', "");
Expect(0, 1607, '\p{^Is_Joining_Group=__Heh}', "");
Expect(0, 1607, '\P{Is_Joining_Group=__Heh}', "");
Expect(1, 1607, '\P{^Is_Joining_Group=__Heh}', "");
Expect(0, 1606, '\p{Is_Joining_Group=__Heh}', "");
Expect(1, 1606, '\p{^Is_Joining_Group=__Heh}', "");
Expect(1, 1606, '\P{Is_Joining_Group=__Heh}', "");
Expect(0, 1606, '\P{^Is_Joining_Group=__Heh}', "");
Error('\p{Is_Jg=	:=heh}');
Error('\P{Is_Jg=	:=heh}');
Expect(1, 1607, '\p{Is_Jg=heh}', "");
Expect(0, 1607, '\p{^Is_Jg=heh}', "");
Expect(0, 1607, '\P{Is_Jg=heh}', "");
Expect(1, 1607, '\P{^Is_Jg=heh}', "");
Expect(0, 1606, '\p{Is_Jg=heh}', "");
Expect(1, 1606, '\p{^Is_Jg=heh}', "");
Expect(1, 1606, '\P{Is_Jg=heh}', "");
Expect(0, 1606, '\P{^Is_Jg=heh}', "");
Expect(1, 1607, '\p{Is_Jg=	 Heh}', "");
Expect(0, 1607, '\p{^Is_Jg=	 Heh}', "");
Expect(0, 1607, '\P{Is_Jg=	 Heh}', "");
Expect(1, 1607, '\P{^Is_Jg=	 Heh}', "");
Expect(0, 1606, '\p{Is_Jg=	 Heh}', "");
Expect(1, 1606, '\p{^Is_Jg=	 Heh}', "");
Expect(1, 1606, '\P{Is_Jg=	 Heh}', "");
Expect(0, 1606, '\P{^Is_Jg=	 Heh}', "");
Error('\p{Joining_Group=:= Qaph}');
Error('\P{Joining_Group=:= Qaph}');
Expect(1, 1833, '\p{Joining_Group=qaph}', "");
Expect(0, 1833, '\p{^Joining_Group=qaph}', "");
Expect(0, 1833, '\P{Joining_Group=qaph}', "");
Expect(1, 1833, '\P{^Joining_Group=qaph}', "");
Expect(0, 1832, '\p{Joining_Group=qaph}', "");
Expect(1, 1832, '\p{^Joining_Group=qaph}', "");
Expect(1, 1832, '\P{Joining_Group=qaph}', "");
Expect(0, 1832, '\P{^Joining_Group=qaph}', "");
Expect(1, 1833, '\p{Joining_Group=__QAPH}', "");
Expect(0, 1833, '\p{^Joining_Group=__QAPH}', "");
Expect(0, 1833, '\P{Joining_Group=__QAPH}', "");
Expect(1, 1833, '\P{^Joining_Group=__QAPH}', "");
Expect(0, 1832, '\p{Joining_Group=__QAPH}', "");
Expect(1, 1832, '\p{^Joining_Group=__QAPH}', "");
Expect(1, 1832, '\P{Joining_Group=__QAPH}', "");
Expect(0, 1832, '\P{^Joining_Group=__QAPH}', "");
Error('\p{Jg=:=-	QAPH}');
Error('\P{Jg=:=-	QAPH}');
Expect(1, 1833, '\p{Jg=qaph}', "");
Expect(0, 1833, '\p{^Jg=qaph}', "");
Expect(0, 1833, '\P{Jg=qaph}', "");
Expect(1, 1833, '\P{^Jg=qaph}', "");
Expect(0, 1832, '\p{Jg=qaph}', "");
Expect(1, 1832, '\p{^Jg=qaph}', "");
Expect(1, 1832, '\P{Jg=qaph}', "");
Expect(0, 1832, '\P{^Jg=qaph}', "");
Expect(1, 1833, '\p{Jg=_ Qaph}', "");
Expect(0, 1833, '\p{^Jg=_ Qaph}', "");
Expect(0, 1833, '\P{Jg=_ Qaph}', "");
Expect(1, 1833, '\P{^Jg=_ Qaph}', "");
Expect(0, 1832, '\p{Jg=_ Qaph}', "");
Expect(1, 1832, '\p{^Jg=_ Qaph}', "");
Expect(1, 1832, '\P{Jg=_ Qaph}', "");
Expect(0, 1832, '\P{^Jg=_ Qaph}', "");
Error('\p{Is_Joining_Group= :=Qaph}');
Error('\P{Is_Joining_Group= :=Qaph}');
Expect(1, 1833, '\p{Is_Joining_Group=qaph}', "");
Expect(0, 1833, '\p{^Is_Joining_Group=qaph}', "");
Expect(0, 1833, '\P{Is_Joining_Group=qaph}', "");
Expect(1, 1833, '\P{^Is_Joining_Group=qaph}', "");
Expect(0, 1832, '\p{Is_Joining_Group=qaph}', "");
Expect(1, 1832, '\p{^Is_Joining_Group=qaph}', "");
Expect(1, 1832, '\P{Is_Joining_Group=qaph}', "");
Expect(0, 1832, '\P{^Is_Joining_Group=qaph}', "");
Expect(1, 1833, '\p{Is_Joining_Group= -Qaph}', "");
Expect(0, 1833, '\p{^Is_Joining_Group= -Qaph}', "");
Expect(0, 1833, '\P{Is_Joining_Group= -Qaph}', "");
Expect(1, 1833, '\P{^Is_Joining_Group= -Qaph}', "");
Expect(0, 1832, '\p{Is_Joining_Group= -Qaph}', "");
Expect(1, 1832, '\p{^Is_Joining_Group= -Qaph}', "");
Expect(1, 1832, '\P{Is_Joining_Group= -Qaph}', "");
Expect(0, 1832, '\P{^Is_Joining_Group= -Qaph}', "");
Error('\p{Is_Jg:  _Qaph/a/}');
Error('\P{Is_Jg:  _Qaph/a/}');
Expect(1, 1833, '\p{Is_Jg=qaph}', "");
Expect(0, 1833, '\p{^Is_Jg=qaph}', "");
Expect(0, 1833, '\P{Is_Jg=qaph}', "");
Expect(1, 1833, '\P{^Is_Jg=qaph}', "");
Expect(0, 1832, '\p{Is_Jg=qaph}', "");
Expect(1, 1832, '\p{^Is_Jg=qaph}', "");
Expect(1, 1832, '\P{Is_Jg=qaph}', "");
Expect(0, 1832, '\P{^Is_Jg=qaph}', "");
Expect(1, 1833, '\p{Is_Jg:    Qaph}', "");
Expect(0, 1833, '\p{^Is_Jg:    Qaph}', "");
Expect(0, 1833, '\P{Is_Jg:    Qaph}', "");
Expect(1, 1833, '\P{^Is_Jg:    Qaph}', "");
Expect(0, 1832, '\p{Is_Jg:    Qaph}', "");
Expect(1, 1832, '\p{^Is_Jg:    Qaph}', "");
Expect(1, 1832, '\P{Is_Jg:    Qaph}', "");
Expect(0, 1832, '\P{^Is_Jg:    Qaph}', "");
Error('\p{Joining_Group=	 Heth:=}');
Error('\P{Joining_Group=	 Heth:=}');
Expect(1, 1818, '\p{Joining_Group=heth}', "");
Expect(0, 1818, '\p{^Joining_Group=heth}', "");
Expect(0, 1818, '\P{Joining_Group=heth}', "");
Expect(1, 1818, '\P{^Joining_Group=heth}', "");
Expect(0, 1817, '\p{Joining_Group=heth}', "");
Expect(1, 1817, '\p{^Joining_Group=heth}', "");
Expect(1, 1817, '\P{Joining_Group=heth}', "");
Expect(0, 1817, '\P{^Joining_Group=heth}', "");
Expect(1, 1818, '\p{Joining_Group=	Heth}', "");
Expect(0, 1818, '\p{^Joining_Group=	Heth}', "");
Expect(0, 1818, '\P{Joining_Group=	Heth}', "");
Expect(1, 1818, '\P{^Joining_Group=	Heth}', "");
Expect(0, 1817, '\p{Joining_Group=	Heth}', "");
Expect(1, 1817, '\p{^Joining_Group=	Heth}', "");
Expect(1, 1817, '\P{Joining_Group=	Heth}', "");
Expect(0, 1817, '\P{^Joining_Group=	Heth}', "");
Error('\p{Jg=_Heth:=}');
Error('\P{Jg=_Heth:=}');
Expect(1, 1818, '\p{Jg=heth}', "");
Expect(0, 1818, '\p{^Jg=heth}', "");
Expect(0, 1818, '\P{Jg=heth}', "");
Expect(1, 1818, '\P{^Jg=heth}', "");
Expect(0, 1817, '\p{Jg=heth}', "");
Expect(1, 1817, '\p{^Jg=heth}', "");
Expect(1, 1817, '\P{Jg=heth}', "");
Expect(0, 1817, '\P{^Jg=heth}', "");
Expect(1, 1818, '\p{Jg=__heth}', "");
Expect(0, 1818, '\p{^Jg=__heth}', "");
Expect(0, 1818, '\P{Jg=__heth}', "");
Expect(1, 1818, '\P{^Jg=__heth}', "");
Expect(0, 1817, '\p{Jg=__heth}', "");
Expect(1, 1817, '\p{^Jg=__heth}', "");
Expect(1, 1817, '\P{Jg=__heth}', "");
Expect(0, 1817, '\P{^Jg=__heth}', "");
Error('\p{Is_Joining_Group=--HETH:=}');
Error('\P{Is_Joining_Group=--HETH:=}');
Expect(1, 1818, '\p{Is_Joining_Group=heth}', "");
Expect(0, 1818, '\p{^Is_Joining_Group=heth}', "");
Expect(0, 1818, '\P{Is_Joining_Group=heth}', "");
Expect(1, 1818, '\P{^Is_Joining_Group=heth}', "");
Expect(0, 1817, '\p{Is_Joining_Group=heth}', "");
Expect(1, 1817, '\p{^Is_Joining_Group=heth}', "");
Expect(1, 1817, '\P{Is_Joining_Group=heth}', "");
Expect(0, 1817, '\P{^Is_Joining_Group=heth}', "");
Expect(1, 1818, '\p{Is_Joining_Group=	Heth}', "");
Expect(0, 1818, '\p{^Is_Joining_Group=	Heth}', "");
Expect(0, 1818, '\P{Is_Joining_Group=	Heth}', "");
Expect(1, 1818, '\P{^Is_Joining_Group=	Heth}', "");
Expect(0, 1817, '\p{Is_Joining_Group=	Heth}', "");
Expect(1, 1817, '\p{^Is_Joining_Group=	Heth}', "");
Expect(1, 1817, '\P{Is_Joining_Group=	Heth}', "");
Expect(0, 1817, '\P{^Is_Joining_Group=	Heth}', "");
Error('\p{Is_Jg=/a/  Heth}');
Error('\P{Is_Jg=/a/  Heth}');
Expect(1, 1818, '\p{Is_Jg=heth}', "");
Expect(0, 1818, '\p{^Is_Jg=heth}', "");
Expect(0, 1818, '\P{Is_Jg=heth}', "");
Expect(1, 1818, '\P{^Is_Jg=heth}', "");
Expect(0, 1817, '\p{Is_Jg=heth}', "");
Expect(1, 1817, '\p{^Is_Jg=heth}', "");
Expect(1, 1817, '\P{Is_Jg=heth}', "");
Expect(0, 1817, '\P{^Is_Jg=heth}', "");
Expect(1, 1818, '\p{Is_Jg=__HETH}', "");
Expect(0, 1818, '\p{^Is_Jg=__HETH}', "");
Expect(0, 1818, '\P{Is_Jg=__HETH}', "");
Expect(1, 1818, '\P{^Is_Jg=__HETH}', "");
Expect(0, 1817, '\p{Is_Jg=__HETH}', "");
Expect(1, 1817, '\p{^Is_Jg=__HETH}', "");
Expect(1, 1817, '\P{Is_Jg=__HETH}', "");
Expect(0, 1817, '\P{^Is_Jg=__HETH}', "");
Error('\p{Joining_Group=:=_ TETH}');
Error('\P{Joining_Group=:=_ TETH}');
Expect(1, 1820, '\p{Joining_Group=teth}', "");
Expect(0, 1820, '\p{^Joining_Group=teth}', "");
Expect(0, 1820, '\P{Joining_Group=teth}', "");
Expect(1, 1820, '\P{^Joining_Group=teth}', "");
Expect(0, 1818, '\p{Joining_Group=teth}', "");
Expect(1, 1818, '\p{^Joining_Group=teth}', "");
Expect(1, 1818, '\P{Joining_Group=teth}', "");
Expect(0, 1818, '\P{^Joining_Group=teth}', "");
Expect(1, 1820, '\p{Joining_Group=	-Teth}', "");
Expect(0, 1820, '\p{^Joining_Group=	-Teth}', "");
Expect(0, 1820, '\P{Joining_Group=	-Teth}', "");
Expect(1, 1820, '\P{^Joining_Group=	-Teth}', "");
Expect(0, 1818, '\p{Joining_Group=	-Teth}', "");
Expect(1, 1818, '\p{^Joining_Group=	-Teth}', "");
Expect(1, 1818, '\P{Joining_Group=	-Teth}', "");
Expect(0, 1818, '\P{^Joining_Group=	-Teth}', "");
Error('\p{Jg=/a/	Teth}');
Error('\P{Jg=/a/	Teth}');
Expect(1, 1820, '\p{Jg=teth}', "");
Expect(0, 1820, '\p{^Jg=teth}', "");
Expect(0, 1820, '\P{Jg=teth}', "");
Expect(1, 1820, '\P{^Jg=teth}', "");
Expect(0, 1818, '\p{Jg=teth}', "");
Expect(1, 1818, '\p{^Jg=teth}', "");
Expect(1, 1818, '\P{Jg=teth}', "");
Expect(0, 1818, '\P{^Jg=teth}', "");
Expect(1, 1820, '\p{Jg=- teth}', "");
Expect(0, 1820, '\p{^Jg=- teth}', "");
Expect(0, 1820, '\P{Jg=- teth}', "");
Expect(1, 1820, '\P{^Jg=- teth}', "");
Expect(0, 1818, '\p{Jg=- teth}', "");
Expect(1, 1818, '\p{^Jg=- teth}', "");
Expect(1, 1818, '\P{Jg=- teth}', "");
Expect(0, 1818, '\P{^Jg=- teth}', "");
Error('\p{Is_Joining_Group=--Teth:=}');
Error('\P{Is_Joining_Group=--Teth:=}');
Expect(1, 1820, '\p{Is_Joining_Group=teth}', "");
Expect(0, 1820, '\p{^Is_Joining_Group=teth}', "");
Expect(0, 1820, '\P{Is_Joining_Group=teth}', "");
Expect(1, 1820, '\P{^Is_Joining_Group=teth}', "");
Expect(0, 1818, '\p{Is_Joining_Group=teth}', "");
Expect(1, 1818, '\p{^Is_Joining_Group=teth}', "");
Expect(1, 1818, '\P{Is_Joining_Group=teth}', "");
Expect(0, 1818, '\P{^Is_Joining_Group=teth}', "");
Expect(1, 1820, '\p{Is_Joining_Group=	 TETH}', "");
Expect(0, 1820, '\p{^Is_Joining_Group=	 TETH}', "");
Expect(0, 1820, '\P{Is_Joining_Group=	 TETH}', "");
Expect(1, 1820, '\P{^Is_Joining_Group=	 TETH}', "");
Expect(0, 1818, '\p{Is_Joining_Group=	 TETH}', "");
Expect(1, 1818, '\p{^Is_Joining_Group=	 TETH}', "");
Expect(1, 1818, '\P{Is_Joining_Group=	 TETH}', "");
Expect(0, 1818, '\P{^Is_Joining_Group=	 TETH}', "");
Error('\p{Is_Jg=/a/_	TETH}');
Error('\P{Is_Jg=/a/_	TETH}');
Expect(1, 1820, '\p{Is_Jg=teth}', "");
Expect(0, 1820, '\p{^Is_Jg=teth}', "");
Expect(0, 1820, '\P{Is_Jg=teth}', "");
Expect(1, 1820, '\P{^Is_Jg=teth}', "");
Expect(0, 1818, '\p{Is_Jg=teth}', "");
Expect(1, 1818, '\p{^Is_Jg=teth}', "");
Expect(1, 1818, '\P{Is_Jg=teth}', "");
Expect(0, 1818, '\P{^Is_Jg=teth}', "");
Expect(1, 1820, '\p{Is_Jg=_Teth}', "");
Expect(0, 1820, '\p{^Is_Jg=_Teth}', "");
Expect(0, 1820, '\P{Is_Jg=_Teth}', "");
Expect(1, 1820, '\P{^Is_Jg=_Teth}', "");
Expect(0, 1818, '\p{Is_Jg=_Teth}', "");
Expect(1, 1818, '\p{^Is_Jg=_Teth}', "");
Expect(1, 1818, '\P{Is_Jg=_Teth}', "");
Expect(0, 1818, '\P{^Is_Jg=_Teth}', "");
Error('\p{Joining_Group=_	Dalath:=rish}');
Error('\P{Joining_Group=_	Dalath:=rish}');
Expect(1, 1814, '\p{Joining_Group:dalathrish}', "");
Expect(0, 1814, '\p{^Joining_Group:dalathrish}', "");
Expect(0, 1814, '\P{Joining_Group:dalathrish}', "");
Expect(1, 1814, '\P{^Joining_Group:dalathrish}', "");
Expect(0, 1812, '\p{Joining_Group:dalathrish}', "");
Expect(1, 1812, '\p{^Joining_Group:dalathrish}', "");
Expect(1, 1812, '\P{Joining_Group:dalathrish}', "");
Expect(0, 1812, '\P{^Joining_Group:dalathrish}', "");
Expect(1, 1814, '\p{Joining_Group:-_dalath Rish}', "");
Expect(0, 1814, '\p{^Joining_Group:-_dalath Rish}', "");
Expect(0, 1814, '\P{Joining_Group:-_dalath Rish}', "");
Expect(1, 1814, '\P{^Joining_Group:-_dalath Rish}', "");
Expect(0, 1812, '\p{Joining_Group:-_dalath Rish}', "");
Expect(1, 1812, '\p{^Joining_Group:-_dalath Rish}', "");
Expect(1, 1812, '\P{Joining_Group:-_dalath Rish}', "");
Expect(0, 1812, '\P{^Joining_Group:-_dalath Rish}', "");
Error('\p{Jg:  _DALATH:=Rish}');
Error('\P{Jg:  _DALATH:=Rish}');
Expect(1, 1814, '\p{Jg: dalathrish}', "");
Expect(0, 1814, '\p{^Jg: dalathrish}', "");
Expect(0, 1814, '\P{Jg: dalathrish}', "");
Expect(1, 1814, '\P{^Jg: dalathrish}', "");
Expect(0, 1812, '\p{Jg: dalathrish}', "");
Expect(1, 1812, '\p{^Jg: dalathrish}', "");
Expect(1, 1812, '\P{Jg: dalathrish}', "");
Expect(0, 1812, '\P{^Jg: dalathrish}', "");
Expect(1, 1814, '\p{Jg=-	dalath Rish}', "");
Expect(0, 1814, '\p{^Jg=-	dalath Rish}', "");
Expect(0, 1814, '\P{Jg=-	dalath Rish}', "");
Expect(1, 1814, '\P{^Jg=-	dalath Rish}', "");
Expect(0, 1812, '\p{Jg=-	dalath Rish}', "");
Expect(1, 1812, '\p{^Jg=-	dalath Rish}', "");
Expect(1, 1812, '\P{Jg=-	dalath Rish}', "");
Expect(0, 1812, '\P{^Jg=-	dalath Rish}', "");
Error('\p{Is_Joining_Group=- DALATH	RISH:=}');
Error('\P{Is_Joining_Group=- DALATH	RISH:=}');
Expect(1, 1814, '\p{Is_Joining_Group:dalathrish}', "");
Expect(0, 1814, '\p{^Is_Joining_Group:dalathrish}', "");
Expect(0, 1814, '\P{Is_Joining_Group:dalathrish}', "");
Expect(1, 1814, '\P{^Is_Joining_Group:dalathrish}', "");
Expect(0, 1812, '\p{Is_Joining_Group:dalathrish}', "");
Expect(1, 1812, '\p{^Is_Joining_Group:dalathrish}', "");
Expect(1, 1812, '\P{Is_Joining_Group:dalathrish}', "");
Expect(0, 1812, '\P{^Is_Joining_Group:dalathrish}', "");
Expect(1, 1814, '\p{Is_Joining_Group=	Dalath_RISH}', "");
Expect(0, 1814, '\p{^Is_Joining_Group=	Dalath_RISH}', "");
Expect(0, 1814, '\P{Is_Joining_Group=	Dalath_RISH}', "");
Expect(1, 1814, '\P{^Is_Joining_Group=	Dalath_RISH}', "");
Expect(0, 1812, '\p{Is_Joining_Group=	Dalath_RISH}', "");
Expect(1, 1812, '\p{^Is_Joining_Group=	Dalath_RISH}', "");
Expect(1, 1812, '\P{Is_Joining_Group=	Dalath_RISH}', "");
Expect(0, 1812, '\P{^Is_Joining_Group=	Dalath_RISH}', "");
Error('\p{Is_Jg=-_DALATH	Rish/a/}');
Error('\P{Is_Jg=-_DALATH	Rish/a/}');
Expect(1, 1814, '\p{Is_Jg=dalathrish}', "");
Expect(0, 1814, '\p{^Is_Jg=dalathrish}', "");
Expect(0, 1814, '\P{Is_Jg=dalathrish}', "");
Expect(1, 1814, '\P{^Is_Jg=dalathrish}', "");
Expect(0, 1812, '\p{Is_Jg=dalathrish}', "");
Expect(1, 1812, '\p{^Is_Jg=dalathrish}', "");
Expect(1, 1812, '\P{Is_Jg=dalathrish}', "");
Expect(0, 1812, '\P{^Is_Jg=dalathrish}', "");
Expect(1, 1814, '\p{Is_Jg=- DALATHRish}', "");
Expect(0, 1814, '\p{^Is_Jg=- DALATHRish}', "");
Expect(0, 1814, '\P{Is_Jg=- DALATHRish}', "");
Expect(1, 1814, '\P{^Is_Jg=- DALATHRish}', "");
Expect(0, 1812, '\p{Is_Jg=- DALATHRish}', "");
Expect(1, 1812, '\p{^Is_Jg=- DALATHRish}', "");
Expect(1, 1812, '\P{Is_Jg=- DALATHRish}', "");
Expect(0, 1812, '\P{^Is_Jg=- DALATHRish}', "");
Error('\p{Joining_Group=	Yudh_he/a/}');
Error('\P{Joining_Group=	Yudh_he/a/}');
Expect(1, 1822, '\p{Joining_Group=yudhhe}', "");
Expect(0, 1822, '\p{^Joining_Group=yudhhe}', "");
Expect(0, 1822, '\P{Joining_Group=yudhhe}', "");
Expect(1, 1822, '\P{^Joining_Group=yudhhe}', "");
Expect(0, 1821, '\p{Joining_Group=yudhhe}', "");
Expect(1, 1821, '\p{^Joining_Group=yudhhe}', "");
Expect(1, 1821, '\P{Joining_Group=yudhhe}', "");
Expect(0, 1821, '\P{^Joining_Group=yudhhe}', "");
Expect(1, 1822, '\p{Joining_Group=__Yudh_He}', "");
Expect(0, 1822, '\p{^Joining_Group=__Yudh_He}', "");
Expect(0, 1822, '\P{Joining_Group=__Yudh_He}', "");
Expect(1, 1822, '\P{^Joining_Group=__Yudh_He}', "");
Expect(0, 1821, '\p{Joining_Group=__Yudh_He}', "");
Expect(1, 1821, '\p{^Joining_Group=__Yudh_He}', "");
Expect(1, 1821, '\P{Joining_Group=__Yudh_He}', "");
Expect(0, 1821, '\P{^Joining_Group=__Yudh_He}', "");
Error('\p{Jg=_-YUDH-HE:=}');
Error('\P{Jg=_-YUDH-HE:=}');
Expect(1, 1822, '\p{Jg=yudhhe}', "");
Expect(0, 1822, '\p{^Jg=yudhhe}', "");
Expect(0, 1822, '\P{Jg=yudhhe}', "");
Expect(1, 1822, '\P{^Jg=yudhhe}', "");
Expect(0, 1821, '\p{Jg=yudhhe}', "");
Expect(1, 1821, '\p{^Jg=yudhhe}', "");
Expect(1, 1821, '\P{Jg=yudhhe}', "");
Expect(0, 1821, '\P{^Jg=yudhhe}', "");
Expect(1, 1822, '\p{Jg=-yudh-HE}', "");
Expect(0, 1822, '\p{^Jg=-yudh-HE}', "");
Expect(0, 1822, '\P{Jg=-yudh-HE}', "");
Expect(1, 1822, '\P{^Jg=-yudh-HE}', "");
Expect(0, 1821, '\p{Jg=-yudh-HE}', "");
Expect(1, 1821, '\p{^Jg=-yudh-HE}', "");
Expect(1, 1821, '\P{Jg=-yudh-HE}', "");
Expect(0, 1821, '\P{^Jg=-yudh-HE}', "");
Error('\p{Is_Joining_Group= _Yudh/a/He}');
Error('\P{Is_Joining_Group= _Yudh/a/He}');
Expect(1, 1822, '\p{Is_Joining_Group=yudhhe}', "");
Expect(0, 1822, '\p{^Is_Joining_Group=yudhhe}', "");
Expect(0, 1822, '\P{Is_Joining_Group=yudhhe}', "");
Expect(1, 1822, '\P{^Is_Joining_Group=yudhhe}', "");
Expect(0, 1821, '\p{Is_Joining_Group=yudhhe}', "");
Expect(1, 1821, '\p{^Is_Joining_Group=yudhhe}', "");
Expect(1, 1821, '\P{Is_Joining_Group=yudhhe}', "");
Expect(0, 1821, '\P{^Is_Joining_Group=yudhhe}', "");
Expect(1, 1822, '\p{Is_Joining_Group=_ yudhhe}', "");
Expect(0, 1822, '\p{^Is_Joining_Group=_ yudhhe}', "");
Expect(0, 1822, '\P{Is_Joining_Group=_ yudhhe}', "");
Expect(1, 1822, '\P{^Is_Joining_Group=_ yudhhe}', "");
Expect(0, 1821, '\p{Is_Joining_Group=_ yudhhe}', "");
Expect(1, 1821, '\p{^Is_Joining_Group=_ yudhhe}', "");
Expect(1, 1821, '\P{Is_Joining_Group=_ yudhhe}', "");
Expect(0, 1821, '\P{^Is_Joining_Group=_ yudhhe}', "");
Error('\p{Is_Jg:  YUDH_he/a/}');
Error('\P{Is_Jg:  YUDH_he/a/}');
Expect(1, 1822, '\p{Is_Jg=yudhhe}', "");
Expect(0, 1822, '\p{^Is_Jg=yudhhe}', "");
Expect(0, 1822, '\P{Is_Jg=yudhhe}', "");
Expect(1, 1822, '\P{^Is_Jg=yudhhe}', "");
Expect(0, 1821, '\p{Is_Jg=yudhhe}', "");
Expect(1, 1821, '\p{^Is_Jg=yudhhe}', "");
Expect(1, 1821, '\P{Is_Jg=yudhhe}', "");
Expect(0, 1821, '\P{^Is_Jg=yudhhe}', "");
Expect(1, 1822, '\p{Is_Jg=	yudh-He}', "");
Expect(0, 1822, '\p{^Is_Jg=	yudh-He}', "");
Expect(0, 1822, '\P{Is_Jg=	yudh-He}', "");
Expect(1, 1822, '\P{^Is_Jg=	yudh-He}', "");
Expect(0, 1821, '\p{Is_Jg=	yudh-He}', "");
Expect(1, 1821, '\p{^Is_Jg=	yudh-He}', "");
Expect(1, 1821, '\P{Is_Jg=	yudh-He}', "");
Expect(0, 1821, '\P{^Is_Jg=	yudh-He}', "");
Error('\p{Joining_Group=- noon/a/}');
Error('\P{Joining_Group=- noon/a/}');
Expect(1, 1606, '\p{Joining_Group=noon}', "");
Expect(0, 1606, '\p{^Joining_Group=noon}', "");
Expect(0, 1606, '\P{Joining_Group=noon}', "");
Expect(1, 1606, '\P{^Joining_Group=noon}', "");
Expect(0, 1605, '\p{Joining_Group=noon}', "");
Expect(1, 1605, '\p{^Joining_Group=noon}', "");
Expect(1, 1605, '\P{Joining_Group=noon}', "");
Expect(0, 1605, '\P{^Joining_Group=noon}', "");
Expect(1, 1606, '\p{Joining_Group=-noon}', "");
Expect(0, 1606, '\p{^Joining_Group=-noon}', "");
Expect(0, 1606, '\P{Joining_Group=-noon}', "");
Expect(1, 1606, '\P{^Joining_Group=-noon}', "");
Expect(0, 1605, '\p{Joining_Group=-noon}', "");
Expect(1, 1605, '\p{^Joining_Group=-noon}', "");
Expect(1, 1605, '\P{Joining_Group=-noon}', "");
Expect(0, 1605, '\P{^Joining_Group=-noon}', "");
Error('\p{Jg=_	NOON:=}');
Error('\P{Jg=_	NOON:=}');
Expect(1, 1606, '\p{Jg=noon}', "");
Expect(0, 1606, '\p{^Jg=noon}', "");
Expect(0, 1606, '\P{Jg=noon}', "");
Expect(1, 1606, '\P{^Jg=noon}', "");
Expect(0, 1605, '\p{Jg=noon}', "");
Expect(1, 1605, '\p{^Jg=noon}', "");
Expect(1, 1605, '\P{Jg=noon}', "");
Expect(0, 1605, '\P{^Jg=noon}', "");
Expect(1, 1606, '\p{Jg= Noon}', "");
Expect(0, 1606, '\p{^Jg= Noon}', "");
Expect(0, 1606, '\P{Jg= Noon}', "");
Expect(1, 1606, '\P{^Jg= Noon}', "");
Expect(0, 1605, '\p{Jg= Noon}', "");
Expect(1, 1605, '\p{^Jg= Noon}', "");
Expect(1, 1605, '\P{Jg= Noon}', "");
Expect(0, 1605, '\P{^Jg= Noon}', "");
Error('\p{Is_Joining_Group=/a/	Noon}');
Error('\P{Is_Joining_Group=/a/	Noon}');
Expect(1, 1606, '\p{Is_Joining_Group=noon}', "");
Expect(0, 1606, '\p{^Is_Joining_Group=noon}', "");
Expect(0, 1606, '\P{Is_Joining_Group=noon}', "");
Expect(1, 1606, '\P{^Is_Joining_Group=noon}', "");
Expect(0, 1605, '\p{Is_Joining_Group=noon}', "");
Expect(1, 1605, '\p{^Is_Joining_Group=noon}', "");
Expect(1, 1605, '\P{Is_Joining_Group=noon}', "");
Expect(0, 1605, '\P{^Is_Joining_Group=noon}', "");
Expect(1, 1606, '\p{Is_Joining_Group=_-Noon}', "");
Expect(0, 1606, '\p{^Is_Joining_Group=_-Noon}', "");
Expect(0, 1606, '\P{Is_Joining_Group=_-Noon}', "");
Expect(1, 1606, '\P{^Is_Joining_Group=_-Noon}', "");
Expect(0, 1605, '\p{Is_Joining_Group=_-Noon}', "");
Expect(1, 1605, '\p{^Is_Joining_Group=_-Noon}', "");
Expect(1, 1605, '\P{Is_Joining_Group=_-Noon}', "");
Expect(0, 1605, '\P{^Is_Joining_Group=_-Noon}', "");
Error('\p{Is_Jg:__Noon:=}');
Error('\P{Is_Jg:__Noon:=}');
Expect(1, 1606, '\p{Is_Jg=noon}', "");
Expect(0, 1606, '\p{^Is_Jg=noon}', "");
Expect(0, 1606, '\P{Is_Jg=noon}', "");
Expect(1, 1606, '\P{^Is_Jg=noon}', "");
Expect(0, 1605, '\p{Is_Jg=noon}', "");
Expect(1, 1605, '\p{^Is_Jg=noon}', "");
Expect(1, 1605, '\P{Is_Jg=noon}', "");
Expect(0, 1605, '\P{^Is_Jg=noon}', "");
Expect(1, 1606, '\p{Is_Jg=	Noon}', "");
Expect(0, 1606, '\p{^Is_Jg=	Noon}', "");
Expect(0, 1606, '\P{Is_Jg=	Noon}', "");
Expect(1, 1606, '\P{^Is_Jg=	Noon}', "");
Expect(0, 1605, '\p{Is_Jg=	Noon}', "");
Expect(1, 1605, '\p{^Is_Jg=	Noon}', "");
Expect(1, 1605, '\P{Is_Jg=	Noon}', "");
Expect(0, 1605, '\P{^Is_Jg=	Noon}', "");
Error('\p{Joining_Group=-	Mim:=}');
Error('\P{Joining_Group=-	Mim:=}');
Expect(1, 1825, '\p{Joining_Group=mim}', "");
Expect(0, 1825, '\p{^Joining_Group=mim}', "");
Expect(0, 1825, '\P{Joining_Group=mim}', "");
Expect(1, 1825, '\P{^Joining_Group=mim}', "");
Expect(0, 1824, '\p{Joining_Group=mim}', "");
Expect(1, 1824, '\p{^Joining_Group=mim}', "");
Expect(1, 1824, '\P{Joining_Group=mim}', "");
Expect(0, 1824, '\P{^Joining_Group=mim}', "");
Expect(1, 1825, '\p{Joining_Group:__Mim}', "");
Expect(0, 1825, '\p{^Joining_Group:__Mim}', "");
Expect(0, 1825, '\P{Joining_Group:__Mim}', "");
Expect(1, 1825, '\P{^Joining_Group:__Mim}', "");
Expect(0, 1824, '\p{Joining_Group:__Mim}', "");
Expect(1, 1824, '\p{^Joining_Group:__Mim}', "");
Expect(1, 1824, '\P{Joining_Group:__Mim}', "");
Expect(0, 1824, '\P{^Joining_Group:__Mim}', "");
Error('\p{Jg=_	Mim/a/}');
Error('\P{Jg=_	Mim/a/}');
Expect(1, 1825, '\p{Jg=mim}', "");
Expect(0, 1825, '\p{^Jg=mim}', "");
Expect(0, 1825, '\P{Jg=mim}', "");
Expect(1, 1825, '\P{^Jg=mim}', "");
Expect(0, 1824, '\p{Jg=mim}', "");
Expect(1, 1824, '\p{^Jg=mim}', "");
Expect(1, 1824, '\P{Jg=mim}', "");
Expect(0, 1824, '\P{^Jg=mim}', "");
Expect(1, 1825, '\p{Jg:		MIM}', "");
Expect(0, 1825, '\p{^Jg:		MIM}', "");
Expect(0, 1825, '\P{Jg:		MIM}', "");
Expect(1, 1825, '\P{^Jg:		MIM}', "");
Expect(0, 1824, '\p{Jg:		MIM}', "");
Expect(1, 1824, '\p{^Jg:		MIM}', "");
Expect(1, 1824, '\P{Jg:		MIM}', "");
Expect(0, 1824, '\P{^Jg:		MIM}', "");
Error('\p{Is_Joining_Group=	-mim:=}');
Error('\P{Is_Joining_Group=	-mim:=}');
Expect(1, 1825, '\p{Is_Joining_Group=mim}', "");
Expect(0, 1825, '\p{^Is_Joining_Group=mim}', "");
Expect(0, 1825, '\P{Is_Joining_Group=mim}', "");
Expect(1, 1825, '\P{^Is_Joining_Group=mim}', "");
Expect(0, 1824, '\p{Is_Joining_Group=mim}', "");
Expect(1, 1824, '\p{^Is_Joining_Group=mim}', "");
Expect(1, 1824, '\P{Is_Joining_Group=mim}', "");
Expect(0, 1824, '\P{^Is_Joining_Group=mim}', "");
Expect(1, 1825, '\p{Is_Joining_Group= _Mim}', "");
Expect(0, 1825, '\p{^Is_Joining_Group= _Mim}', "");
Expect(0, 1825, '\P{Is_Joining_Group= _Mim}', "");
Expect(1, 1825, '\P{^Is_Joining_Group= _Mim}', "");
Expect(0, 1824, '\p{Is_Joining_Group= _Mim}', "");
Expect(1, 1824, '\p{^Is_Joining_Group= _Mim}', "");
Expect(1, 1824, '\P{Is_Joining_Group= _Mim}', "");
Expect(0, 1824, '\P{^Is_Joining_Group= _Mim}', "");
Error('\p{Is_Jg:	-mim/a/}');
Error('\P{Is_Jg:	-mim/a/}');
Expect(1, 1825, '\p{Is_Jg=mim}', "");
Expect(0, 1825, '\p{^Is_Jg=mim}', "");
Expect(0, 1825, '\P{Is_Jg=mim}', "");
Expect(1, 1825, '\P{^Is_Jg=mim}', "");
Expect(0, 1824, '\p{Is_Jg=mim}', "");
Expect(1, 1824, '\p{^Is_Jg=mim}', "");
Expect(1, 1824, '\P{Is_Jg=mim}', "");
Expect(0, 1824, '\P{^Is_Jg=mim}', "");
Expect(1, 1825, '\p{Is_Jg=_-Mim}', "");
Expect(0, 1825, '\p{^Is_Jg=_-Mim}', "");
Expect(0, 1825, '\P{Is_Jg=_-Mim}', "");
Expect(1, 1825, '\P{^Is_Jg=_-Mim}', "");
Expect(0, 1824, '\p{Is_Jg=_-Mim}', "");
Expect(1, 1824, '\p{^Is_Jg=_-Mim}', "");
Expect(1, 1824, '\P{Is_Jg=_-Mim}', "");
Expect(0, 1824, '\P{^Is_Jg=_-Mim}', "");
Error('\p{Joining_Group= /a/HEH-Goal}');
Error('\P{Joining_Group= /a/HEH-Goal}');
Expect(1, 1730, '\p{Joining_Group=hehgoal}', "");
Expect(0, 1730, '\p{^Joining_Group=hehgoal}', "");
Expect(0, 1730, '\P{Joining_Group=hehgoal}', "");
Expect(1, 1730, '\P{^Joining_Group=hehgoal}', "");
Expect(0, 1728, '\p{Joining_Group=hehgoal}', "");
Expect(1, 1728, '\p{^Joining_Group=hehgoal}', "");
Expect(1, 1728, '\P{Joining_Group=hehgoal}', "");
Expect(0, 1728, '\P{^Joining_Group=hehgoal}', "");
Expect(1, 1730, '\p{Joining_Group:   - Heh Goal}', "");
Expect(0, 1730, '\p{^Joining_Group:   - Heh Goal}', "");
Expect(0, 1730, '\P{Joining_Group:   - Heh Goal}', "");
Expect(1, 1730, '\P{^Joining_Group:   - Heh Goal}', "");
Expect(0, 1728, '\p{Joining_Group:   - Heh Goal}', "");
Expect(1, 1728, '\p{^Joining_Group:   - Heh Goal}', "");
Expect(1, 1728, '\P{Joining_Group:   - Heh Goal}', "");
Expect(0, 1728, '\P{^Joining_Group:   - Heh Goal}', "");
Error('\p{Jg=-:=heh GOAL}');
Error('\P{Jg=-:=heh GOAL}');
Expect(1, 1730, '\p{Jg=hehgoal}', "");
Expect(0, 1730, '\p{^Jg=hehgoal}', "");
Expect(0, 1730, '\P{Jg=hehgoal}', "");
Expect(1, 1730, '\P{^Jg=hehgoal}', "");
Expect(0, 1728, '\p{Jg=hehgoal}', "");
Expect(1, 1728, '\p{^Jg=hehgoal}', "");
Expect(1, 1728, '\P{Jg=hehgoal}', "");
Expect(0, 1728, '\P{^Jg=hehgoal}', "");
Expect(1, 1730, '\p{Jg: HEHGoal}', "");
Expect(0, 1730, '\p{^Jg: HEHGoal}', "");
Expect(0, 1730, '\P{Jg: HEHGoal}', "");
Expect(1, 1730, '\P{^Jg: HEHGoal}', "");
Expect(0, 1728, '\p{Jg: HEHGoal}', "");
Expect(1, 1728, '\p{^Jg: HEHGoal}', "");
Expect(1, 1728, '\P{Jg: HEHGoal}', "");
Expect(0, 1728, '\P{^Jg: HEHGoal}', "");
Error('\p{Is_Joining_Group=:= -Heh-Goal}');
Error('\P{Is_Joining_Group=:= -Heh-Goal}');
Expect(1, 1730, '\p{Is_Joining_Group=hehgoal}', "");
Expect(0, 1730, '\p{^Is_Joining_Group=hehgoal}', "");
Expect(0, 1730, '\P{Is_Joining_Group=hehgoal}', "");
Expect(1, 1730, '\P{^Is_Joining_Group=hehgoal}', "");
Expect(0, 1728, '\p{Is_Joining_Group=hehgoal}', "");
Expect(1, 1728, '\p{^Is_Joining_Group=hehgoal}', "");
Expect(1, 1728, '\P{Is_Joining_Group=hehgoal}', "");
Expect(0, 1728, '\P{^Is_Joining_Group=hehgoal}', "");
Expect(1, 1730, '\p{Is_Joining_Group=	_HEH Goal}', "");
Expect(0, 1730, '\p{^Is_Joining_Group=	_HEH Goal}', "");
Expect(0, 1730, '\P{Is_Joining_Group=	_HEH Goal}', "");
Expect(1, 1730, '\P{^Is_Joining_Group=	_HEH Goal}', "");
Expect(0, 1728, '\p{Is_Joining_Group=	_HEH Goal}', "");
Expect(1, 1728, '\p{^Is_Joining_Group=	_HEH Goal}', "");
Expect(1, 1728, '\P{Is_Joining_Group=	_HEH Goal}', "");
Expect(0, 1728, '\P{^Is_Joining_Group=	_HEH Goal}', "");
Error('\p{Is_Jg=/a/Hehgoal}');
Error('\P{Is_Jg=/a/Hehgoal}');
Expect(1, 1730, '\p{Is_Jg=hehgoal}', "");
Expect(0, 1730, '\p{^Is_Jg=hehgoal}', "");
Expect(0, 1730, '\P{Is_Jg=hehgoal}', "");
Expect(1, 1730, '\P{^Is_Jg=hehgoal}', "");
Expect(0, 1728, '\p{Is_Jg=hehgoal}', "");
Expect(1, 1728, '\p{^Is_Jg=hehgoal}', "");
Expect(1, 1728, '\P{Is_Jg=hehgoal}', "");
Expect(0, 1728, '\P{^Is_Jg=hehgoal}', "");
Expect(1, 1730, '\p{Is_Jg=Heh-Goal}', "");
Expect(0, 1730, '\p{^Is_Jg=Heh-Goal}', "");
Expect(0, 1730, '\P{Is_Jg=Heh-Goal}', "");
Expect(1, 1730, '\P{^Is_Jg=Heh-Goal}', "");
Expect(0, 1728, '\p{Is_Jg=Heh-Goal}', "");
Expect(1, 1728, '\p{^Is_Jg=Heh-Goal}', "");
Expect(1, 1728, '\P{Is_Jg=Heh-Goal}', "");
Expect(0, 1728, '\P{^Is_Jg=Heh-Goal}', "");
Error('\p{Joining_Group=/a/ _khaph}');
Error('\P{Joining_Group=/a/ _khaph}');
Expect(1, 1870, '\p{Joining_Group=khaph}', "");
Expect(0, 1870, '\p{^Joining_Group=khaph}', "");
Expect(0, 1870, '\P{Joining_Group=khaph}', "");
Expect(1, 1870, '\P{^Joining_Group=khaph}', "");
Expect(0, 1869, '\p{Joining_Group=khaph}', "");
Expect(1, 1869, '\p{^Joining_Group=khaph}', "");
Expect(1, 1869, '\P{Joining_Group=khaph}', "");
Expect(0, 1869, '\P{^Joining_Group=khaph}', "");
Expect(1, 1870, '\p{Joining_Group=	khaph}', "");
Expect(0, 1870, '\p{^Joining_Group=	khaph}', "");
Expect(0, 1870, '\P{Joining_Group=	khaph}', "");
Expect(1, 1870, '\P{^Joining_Group=	khaph}', "");
Expect(0, 1869, '\p{Joining_Group=	khaph}', "");
Expect(1, 1869, '\p{^Joining_Group=	khaph}', "");
Expect(1, 1869, '\P{Joining_Group=	khaph}', "");
Expect(0, 1869, '\P{^Joining_Group=	khaph}', "");
Error('\p{Jg=:=	 KHAPH}');
Error('\P{Jg=:=	 KHAPH}');
Expect(1, 1870, '\p{Jg:	khaph}', "");
Expect(0, 1870, '\p{^Jg:	khaph}', "");
Expect(0, 1870, '\P{Jg:	khaph}', "");
Expect(1, 1870, '\P{^Jg:	khaph}', "");
Expect(0, 1869, '\p{Jg:	khaph}', "");
Expect(1, 1869, '\p{^Jg:	khaph}', "");
Expect(1, 1869, '\P{Jg:	khaph}', "");
Expect(0, 1869, '\P{^Jg:	khaph}', "");
Expect(1, 1870, '\p{Jg=-	khaph}', "");
Expect(0, 1870, '\p{^Jg=-	khaph}', "");
Expect(0, 1870, '\P{Jg=-	khaph}', "");
Expect(1, 1870, '\P{^Jg=-	khaph}', "");
Expect(0, 1869, '\p{Jg=-	khaph}', "");
Expect(1, 1869, '\p{^Jg=-	khaph}', "");
Expect(1, 1869, '\P{Jg=-	khaph}', "");
Expect(0, 1869, '\P{^Jg=-	khaph}', "");
Error('\p{Is_Joining_Group=/a/Khaph}');
Error('\P{Is_Joining_Group=/a/Khaph}');
Expect(1, 1870, '\p{Is_Joining_Group=khaph}', "");
Expect(0, 1870, '\p{^Is_Joining_Group=khaph}', "");
Expect(0, 1870, '\P{Is_Joining_Group=khaph}', "");
Expect(1, 1870, '\P{^Is_Joining_Group=khaph}', "");
Expect(0, 1869, '\p{Is_Joining_Group=khaph}', "");
Expect(1, 1869, '\p{^Is_Joining_Group=khaph}', "");
Expect(1, 1869, '\P{Is_Joining_Group=khaph}', "");
Expect(0, 1869, '\P{^Is_Joining_Group=khaph}', "");
Expect(1, 1870, '\p{Is_Joining_Group=_ khaph}', "");
Expect(0, 1870, '\p{^Is_Joining_Group=_ khaph}', "");
Expect(0, 1870, '\P{Is_Joining_Group=_ khaph}', "");
Expect(1, 1870, '\P{^Is_Joining_Group=_ khaph}', "");
Expect(0, 1869, '\p{Is_Joining_Group=_ khaph}', "");
Expect(1, 1869, '\p{^Is_Joining_Group=_ khaph}', "");
Expect(1, 1869, '\P{Is_Joining_Group=_ khaph}', "");
Expect(0, 1869, '\P{^Is_Joining_Group=_ khaph}', "");
Error('\p{Is_Jg=		Khaph/a/}');
Error('\P{Is_Jg=		Khaph/a/}');
Expect(1, 1870, '\p{Is_Jg=khaph}', "");
Expect(0, 1870, '\p{^Is_Jg=khaph}', "");
Expect(0, 1870, '\P{Is_Jg=khaph}', "");
Expect(1, 1870, '\P{^Is_Jg=khaph}', "");
Expect(0, 1869, '\p{Is_Jg=khaph}', "");
Expect(1, 1869, '\p{^Is_Jg=khaph}', "");
Expect(1, 1869, '\P{Is_Jg=khaph}', "");
Expect(0, 1869, '\P{^Is_Jg=khaph}', "");
Expect(1, 1870, '\p{Is_Jg= -Khaph}', "");
Expect(0, 1870, '\p{^Is_Jg= -Khaph}', "");
Expect(0, 1870, '\P{Is_Jg= -Khaph}', "");
Expect(1, 1870, '\P{^Is_Jg= -Khaph}', "");
Expect(0, 1869, '\p{Is_Jg= -Khaph}', "");
Expect(1, 1869, '\p{^Is_Jg= -Khaph}', "");
Expect(1, 1869, '\P{Is_Jg= -Khaph}', "");
Expect(0, 1869, '\P{^Is_Jg= -Khaph}', "");
Error('\p{Joining_Group=:=_ sad}');
Error('\P{Joining_Group=:=_ sad}');
Expect(1, 1590, '\p{Joining_Group=sad}', "");
Expect(0, 1590, '\p{^Joining_Group=sad}', "");
Expect(0, 1590, '\P{Joining_Group=sad}', "");
Expect(1, 1590, '\P{^Joining_Group=sad}', "");
Expect(0, 1588, '\p{Joining_Group=sad}', "");
Expect(1, 1588, '\p{^Joining_Group=sad}', "");
Expect(1, 1588, '\P{Joining_Group=sad}', "");
Expect(0, 1588, '\P{^Joining_Group=sad}', "");
Expect(1, 1590, '\p{Joining_Group: -SAD}', "");
Expect(0, 1590, '\p{^Joining_Group: -SAD}', "");
Expect(0, 1590, '\P{Joining_Group: -SAD}', "");
Expect(1, 1590, '\P{^Joining_Group: -SAD}', "");
Expect(0, 1588, '\p{Joining_Group: -SAD}', "");
Expect(1, 1588, '\p{^Joining_Group: -SAD}', "");
Expect(1, 1588, '\P{Joining_Group: -SAD}', "");
Expect(0, 1588, '\P{^Joining_Group: -SAD}', "");
Error('\p{Jg=/a/__Sad}');
Error('\P{Jg=/a/__Sad}');
Expect(1, 1590, '\p{Jg=sad}', "");
Expect(0, 1590, '\p{^Jg=sad}', "");
Expect(0, 1590, '\P{Jg=sad}', "");
Expect(1, 1590, '\P{^Jg=sad}', "");
Expect(0, 1588, '\p{Jg=sad}', "");
Expect(1, 1588, '\p{^Jg=sad}', "");
Expect(1, 1588, '\P{Jg=sad}', "");
Expect(0, 1588, '\P{^Jg=sad}', "");
Expect(1, 1590, '\p{Jg=	Sad}', "");
Expect(0, 1590, '\p{^Jg=	Sad}', "");
Expect(0, 1590, '\P{Jg=	Sad}', "");
Expect(1, 1590, '\P{^Jg=	Sad}', "");
Expect(0, 1588, '\p{Jg=	Sad}', "");
Expect(1, 1588, '\p{^Jg=	Sad}', "");
Expect(1, 1588, '\P{Jg=	Sad}', "");
Expect(0, 1588, '\P{^Jg=	Sad}', "");
Error('\p{Is_Joining_Group=:=_-SAD}');
Error('\P{Is_Joining_Group=:=_-SAD}');
Expect(1, 1590, '\p{Is_Joining_Group=sad}', "");
Expect(0, 1590, '\p{^Is_Joining_Group=sad}', "");
Expect(0, 1590, '\P{Is_Joining_Group=sad}', "");
Expect(1, 1590, '\P{^Is_Joining_Group=sad}', "");
Expect(0, 1588, '\p{Is_Joining_Group=sad}', "");
Expect(1, 1588, '\p{^Is_Joining_Group=sad}', "");
Expect(1, 1588, '\P{Is_Joining_Group=sad}', "");
Expect(0, 1588, '\P{^Is_Joining_Group=sad}', "");
Expect(1, 1590, '\p{Is_Joining_Group=_-SAD}', "");
Expect(0, 1590, '\p{^Is_Joining_Group=_-SAD}', "");
Expect(0, 1590, '\P{Is_Joining_Group=_-SAD}', "");
Expect(1, 1590, '\P{^Is_Joining_Group=_-SAD}', "");
Expect(0, 1588, '\p{Is_Joining_Group=_-SAD}', "");
Expect(1, 1588, '\p{^Is_Joining_Group=_-SAD}', "");
Expect(1, 1588, '\P{Is_Joining_Group=_-SAD}', "");
Expect(0, 1588, '\P{^Is_Joining_Group=_-SAD}', "");
Error('\p{Is_Jg=-_sad:=}');
Error('\P{Is_Jg=-_sad:=}');
Expect(1, 1590, '\p{Is_Jg=sad}', "");
Expect(0, 1590, '\p{^Is_Jg=sad}', "");
Expect(0, 1590, '\P{Is_Jg=sad}', "");
Expect(1, 1590, '\P{^Is_Jg=sad}', "");
Expect(0, 1588, '\p{Is_Jg=sad}', "");
Expect(1, 1588, '\p{^Is_Jg=sad}', "");
Expect(1, 1588, '\P{Is_Jg=sad}', "");
Expect(0, 1588, '\P{^Is_Jg=sad}', "");
Expect(1, 1590, '\p{Is_Jg:--Sad}', "");
Expect(0, 1590, '\p{^Is_Jg:--Sad}', "");
Expect(0, 1590, '\P{Is_Jg:--Sad}', "");
Expect(1, 1590, '\P{^Is_Jg:--Sad}', "");
Expect(0, 1588, '\p{Is_Jg:--Sad}', "");
Expect(1, 1588, '\p{^Is_Jg:--Sad}', "");
Expect(1, 1588, '\P{Is_Jg:--Sad}', "");
Expect(0, 1588, '\P{^Is_Jg:--Sad}', "");
Error('\p{Joining_Group= 	Qaf:=}');
Error('\P{Joining_Group= 	Qaf:=}');
Expect(1, 1602, '\p{Joining_Group=qaf}', "");
Expect(0, 1602, '\p{^Joining_Group=qaf}', "");
Expect(0, 1602, '\P{Joining_Group=qaf}', "");
Expect(1, 1602, '\P{^Joining_Group=qaf}', "");
Expect(0, 1601, '\p{Joining_Group=qaf}', "");
Expect(1, 1601, '\p{^Joining_Group=qaf}', "");
Expect(1, 1601, '\P{Joining_Group=qaf}', "");
Expect(0, 1601, '\P{^Joining_Group=qaf}', "");
Expect(1, 1602, '\p{Joining_Group= _qaf}', "");
Expect(0, 1602, '\p{^Joining_Group= _qaf}', "");
Expect(0, 1602, '\P{Joining_Group= _qaf}', "");
Expect(1, 1602, '\P{^Joining_Group= _qaf}', "");
Expect(0, 1601, '\p{Joining_Group= _qaf}', "");
Expect(1, 1601, '\p{^Joining_Group= _qaf}', "");
Expect(1, 1601, '\P{Joining_Group= _qaf}', "");
Expect(0, 1601, '\P{^Joining_Group= _qaf}', "");
Error('\p{Jg:	 :=Qaf}');
Error('\P{Jg:	 :=Qaf}');
Expect(1, 1602, '\p{Jg=qaf}', "");
Expect(0, 1602, '\p{^Jg=qaf}', "");
Expect(0, 1602, '\P{Jg=qaf}', "");
Expect(1, 1602, '\P{^Jg=qaf}', "");
Expect(0, 1601, '\p{Jg=qaf}', "");
Expect(1, 1601, '\p{^Jg=qaf}', "");
Expect(1, 1601, '\P{Jg=qaf}', "");
Expect(0, 1601, '\P{^Jg=qaf}', "");
Expect(1, 1602, '\p{Jg:_Qaf}', "");
Expect(0, 1602, '\p{^Jg:_Qaf}', "");
Expect(0, 1602, '\P{Jg:_Qaf}', "");
Expect(1, 1602, '\P{^Jg:_Qaf}', "");
Expect(0, 1601, '\p{Jg:_Qaf}', "");
Expect(1, 1601, '\p{^Jg:_Qaf}', "");
Expect(1, 1601, '\P{Jg:_Qaf}', "");
Expect(0, 1601, '\P{^Jg:_Qaf}', "");
Error('\p{Is_Joining_Group=_:=QAF}');
Error('\P{Is_Joining_Group=_:=QAF}');
Expect(1, 1602, '\p{Is_Joining_Group=qaf}', "");
Expect(0, 1602, '\p{^Is_Joining_Group=qaf}', "");
Expect(0, 1602, '\P{Is_Joining_Group=qaf}', "");
Expect(1, 1602, '\P{^Is_Joining_Group=qaf}', "");
Expect(0, 1601, '\p{Is_Joining_Group=qaf}', "");
Expect(1, 1601, '\p{^Is_Joining_Group=qaf}', "");
Expect(1, 1601, '\P{Is_Joining_Group=qaf}', "");
Expect(0, 1601, '\P{^Is_Joining_Group=qaf}', "");
Expect(1, 1602, '\p{Is_Joining_Group=	 Qaf}', "");
Expect(0, 1602, '\p{^Is_Joining_Group=	 Qaf}', "");
Expect(0, 1602, '\P{Is_Joining_Group=	 Qaf}', "");
Expect(1, 1602, '\P{^Is_Joining_Group=	 Qaf}', "");
Expect(0, 1601, '\p{Is_Joining_Group=	 Qaf}', "");
Expect(1, 1601, '\p{^Is_Joining_Group=	 Qaf}', "");
Expect(1, 1601, '\P{Is_Joining_Group=	 Qaf}', "");
Expect(0, 1601, '\P{^Is_Joining_Group=	 Qaf}', "");
Error('\p{Is_Jg=/a/Qaf}');
Error('\P{Is_Jg=/a/Qaf}');
Expect(1, 1602, '\p{Is_Jg=qaf}', "");
Expect(0, 1602, '\p{^Is_Jg=qaf}', "");
Expect(0, 1602, '\P{Is_Jg=qaf}', "");
Expect(1, 1602, '\P{^Is_Jg=qaf}', "");
Expect(0, 1601, '\p{Is_Jg=qaf}', "");
Expect(1, 1601, '\p{^Is_Jg=qaf}', "");
Expect(1, 1601, '\P{Is_Jg=qaf}', "");
Expect(0, 1601, '\P{^Is_Jg=qaf}', "");
Expect(1, 1602, '\p{Is_Jg=		qaf}', "");
Expect(0, 1602, '\p{^Is_Jg=		qaf}', "");
Expect(0, 1602, '\P{Is_Jg=		qaf}', "");
Expect(1, 1602, '\P{^Is_Jg=		qaf}', "");
Expect(0, 1601, '\p{Is_Jg=		qaf}', "");
Expect(1, 1601, '\p{^Is_Jg=		qaf}', "");
Expect(1, 1601, '\P{Is_Jg=		qaf}', "");
Expect(0, 1601, '\P{^Is_Jg=		qaf}', "");
Error('\p{Joining_Group=	-kaph:=}');
Error('\P{Joining_Group=	-kaph:=}');
Expect(1, 1823, '\p{Joining_Group=kaph}', "");
Expect(0, 1823, '\p{^Joining_Group=kaph}', "");
Expect(0, 1823, '\P{Joining_Group=kaph}', "");
Expect(1, 1823, '\P{^Joining_Group=kaph}', "");
Expect(0, 1822, '\p{Joining_Group=kaph}', "");
Expect(1, 1822, '\p{^Joining_Group=kaph}', "");
Expect(1, 1822, '\P{Joining_Group=kaph}', "");
Expect(0, 1822, '\P{^Joining_Group=kaph}', "");
Expect(1, 1823, '\p{Joining_Group=-Kaph}', "");
Expect(0, 1823, '\p{^Joining_Group=-Kaph}', "");
Expect(0, 1823, '\P{Joining_Group=-Kaph}', "");
Expect(1, 1823, '\P{^Joining_Group=-Kaph}', "");
Expect(0, 1822, '\p{Joining_Group=-Kaph}', "");
Expect(1, 1822, '\p{^Joining_Group=-Kaph}', "");
Expect(1, 1822, '\P{Joining_Group=-Kaph}', "");
Expect(0, 1822, '\P{^Joining_Group=-Kaph}', "");
Error('\p{Jg=	/a/KAPH}');
Error('\P{Jg=	/a/KAPH}');
Expect(1, 1823, '\p{Jg=kaph}', "");
Expect(0, 1823, '\p{^Jg=kaph}', "");
Expect(0, 1823, '\P{Jg=kaph}', "");
Expect(1, 1823, '\P{^Jg=kaph}', "");
Expect(0, 1822, '\p{Jg=kaph}', "");
Expect(1, 1822, '\p{^Jg=kaph}', "");
Expect(1, 1822, '\P{Jg=kaph}', "");
Expect(0, 1822, '\P{^Jg=kaph}', "");
Expect(1, 1823, '\p{Jg:    Kaph}', "");
Expect(0, 1823, '\p{^Jg:    Kaph}', "");
Expect(0, 1823, '\P{Jg:    Kaph}', "");
Expect(1, 1823, '\P{^Jg:    Kaph}', "");
Expect(0, 1822, '\p{Jg:    Kaph}', "");
Expect(1, 1822, '\p{^Jg:    Kaph}', "");
Expect(1, 1822, '\P{Jg:    Kaph}', "");
Expect(0, 1822, '\P{^Jg:    Kaph}', "");
Error('\p{Is_Joining_Group=/a/Kaph}');
Error('\P{Is_Joining_Group=/a/Kaph}');
Expect(1, 1823, '\p{Is_Joining_Group=kaph}', "");
Expect(0, 1823, '\p{^Is_Joining_Group=kaph}', "");
Expect(0, 1823, '\P{Is_Joining_Group=kaph}', "");
Expect(1, 1823, '\P{^Is_Joining_Group=kaph}', "");
Expect(0, 1822, '\p{Is_Joining_Group=kaph}', "");
Expect(1, 1822, '\p{^Is_Joining_Group=kaph}', "");
Expect(1, 1822, '\P{Is_Joining_Group=kaph}', "");
Expect(0, 1822, '\P{^Is_Joining_Group=kaph}', "");
Expect(1, 1823, '\p{Is_Joining_Group=  KAPH}', "");
Expect(0, 1823, '\p{^Is_Joining_Group=  KAPH}', "");
Expect(0, 1823, '\P{Is_Joining_Group=  KAPH}', "");
Expect(1, 1823, '\P{^Is_Joining_Group=  KAPH}', "");
Expect(0, 1822, '\p{Is_Joining_Group=  KAPH}', "");
Expect(1, 1822, '\p{^Is_Joining_Group=  KAPH}', "");
Expect(1, 1822, '\P{Is_Joining_Group=  KAPH}', "");
Expect(0, 1822, '\P{^Is_Joining_Group=  KAPH}', "");
Error('\p{Is_Jg=:=	 kaph}');
Error('\P{Is_Jg=:=	 kaph}');
Expect(1, 1823, '\p{Is_Jg:   kaph}', "");
Expect(0, 1823, '\p{^Is_Jg:   kaph}', "");
Expect(0, 1823, '\P{Is_Jg:   kaph}', "");
Expect(1, 1823, '\P{^Is_Jg:   kaph}', "");
Expect(0, 1822, '\p{Is_Jg:   kaph}', "");
Expect(1, 1822, '\p{^Is_Jg:   kaph}', "");
Expect(1, 1822, '\P{Is_Jg:   kaph}', "");
Expect(0, 1822, '\P{^Is_Jg:   kaph}', "");
Expect(1, 1823, '\p{Is_Jg=-Kaph}', "");
Expect(0, 1823, '\p{^Is_Jg=-Kaph}', "");
Expect(0, 1823, '\P{Is_Jg=-Kaph}', "");
Expect(1, 1823, '\P{^Is_Jg=-Kaph}', "");
Expect(0, 1822, '\p{Is_Jg=-Kaph}', "");
Expect(1, 1822, '\p{^Is_Jg=-Kaph}', "");
Expect(1, 1822, '\P{Is_Jg=-Kaph}', "");
Expect(0, 1822, '\P{^Is_Jg=-Kaph}', "");
Error('\p{Joining_Group=_/a/Feh}');
Error('\P{Joining_Group=_/a/Feh}');
Expect(1, 1601, '\p{Joining_Group=feh}', "");
Expect(0, 1601, '\p{^Joining_Group=feh}', "");
Expect(0, 1601, '\P{Joining_Group=feh}', "");
Expect(1, 1601, '\P{^Joining_Group=feh}', "");
Expect(0, 1600, '\p{Joining_Group=feh}', "");
Expect(1, 1600, '\p{^Joining_Group=feh}', "");
Expect(1, 1600, '\P{Joining_Group=feh}', "");
Expect(0, 1600, '\P{^Joining_Group=feh}', "");
Expect(1, 1601, '\p{Joining_Group= _feh}', "");
Expect(0, 1601, '\p{^Joining_Group= _feh}', "");
Expect(0, 1601, '\P{Joining_Group= _feh}', "");
Expect(1, 1601, '\P{^Joining_Group= _feh}', "");
Expect(0, 1600, '\p{Joining_Group= _feh}', "");
Expect(1, 1600, '\p{^Joining_Group= _feh}', "");
Expect(1, 1600, '\P{Joining_Group= _feh}', "");
Expect(0, 1600, '\P{^Joining_Group= _feh}', "");
Error('\p{Jg=:=_ Feh}');
Error('\P{Jg=:=_ Feh}');
Expect(1, 1601, '\p{Jg=feh}', "");
Expect(0, 1601, '\p{^Jg=feh}', "");
Expect(0, 1601, '\P{Jg=feh}', "");
Expect(1, 1601, '\P{^Jg=feh}', "");
Expect(0, 1600, '\p{Jg=feh}', "");
Expect(1, 1600, '\p{^Jg=feh}', "");
Expect(1, 1600, '\P{Jg=feh}', "");
Expect(0, 1600, '\P{^Jg=feh}', "");
Expect(1, 1601, '\p{Jg= -Feh}', "");
Expect(0, 1601, '\p{^Jg= -Feh}', "");
Expect(0, 1601, '\P{Jg= -Feh}', "");
Expect(1, 1601, '\P{^Jg= -Feh}', "");
Expect(0, 1600, '\p{Jg= -Feh}', "");
Expect(1, 1600, '\p{^Jg= -Feh}', "");
Expect(1, 1600, '\P{Jg= -Feh}', "");
Expect(0, 1600, '\P{^Jg= -Feh}', "");
Error('\p{Is_Joining_Group=-:=FEH}');
Error('\P{Is_Joining_Group=-:=FEH}');
Expect(1, 1601, '\p{Is_Joining_Group=feh}', "");
Expect(0, 1601, '\p{^Is_Joining_Group=feh}', "");
Expect(0, 1601, '\P{Is_Joining_Group=feh}', "");
Expect(1, 1601, '\P{^Is_Joining_Group=feh}', "");
Expect(0, 1600, '\p{Is_Joining_Group=feh}', "");
Expect(1, 1600, '\p{^Is_Joining_Group=feh}', "");
Expect(1, 1600, '\P{Is_Joining_Group=feh}', "");
Expect(0, 1600, '\P{^Is_Joining_Group=feh}', "");
Expect(1, 1601, '\p{Is_Joining_Group=-	Feh}', "");
Expect(0, 1601, '\p{^Is_Joining_Group=-	Feh}', "");
Expect(0, 1601, '\P{Is_Joining_Group=-	Feh}', "");
Expect(1, 1601, '\P{^Is_Joining_Group=-	Feh}', "");
Expect(0, 1600, '\p{Is_Joining_Group=-	Feh}', "");
Expect(1, 1600, '\p{^Is_Joining_Group=-	Feh}', "");
Expect(1, 1600, '\P{Is_Joining_Group=-	Feh}', "");
Expect(0, 1600, '\P{^Is_Joining_Group=-	Feh}', "");
Error('\p{Is_Jg=		feh/a/}');
Error('\P{Is_Jg=		feh/a/}');
Expect(1, 1601, '\p{Is_Jg: feh}', "");
Expect(0, 1601, '\p{^Is_Jg: feh}', "");
Expect(0, 1601, '\P{Is_Jg: feh}', "");
Expect(1, 1601, '\P{^Is_Jg: feh}', "");
Expect(0, 1600, '\p{Is_Jg: feh}', "");
Expect(1, 1600, '\p{^Is_Jg: feh}', "");
Expect(1, 1600, '\P{Is_Jg: feh}', "");
Expect(0, 1600, '\P{^Is_Jg: feh}', "");
Error('\p{Joining_Group=/a/Farsi_yeh}');
Error('\P{Joining_Group=/a/Farsi_yeh}');
Expect(1, 1599, '\p{Joining_Group=farsiyeh}', "");
Expect(0, 1599, '\p{^Joining_Group=farsiyeh}', "");
Expect(0, 1599, '\P{Joining_Group=farsiyeh}', "");
Expect(1, 1599, '\P{^Joining_Group=farsiyeh}', "");
Expect(0, 1596, '\p{Joining_Group=farsiyeh}', "");
Expect(1, 1596, '\p{^Joining_Group=farsiyeh}', "");
Expect(1, 1596, '\P{Joining_Group=farsiyeh}', "");
Expect(0, 1596, '\P{^Joining_Group=farsiyeh}', "");
Expect(1, 1599, '\p{Joining_Group=- Farsi_Yeh}', "");
Expect(0, 1599, '\p{^Joining_Group=- Farsi_Yeh}', "");
Expect(0, 1599, '\P{Joining_Group=- Farsi_Yeh}', "");
Expect(1, 1599, '\P{^Joining_Group=- Farsi_Yeh}', "");
Expect(0, 1596, '\p{Joining_Group=- Farsi_Yeh}', "");
Expect(1, 1596, '\p{^Joining_Group=- Farsi_Yeh}', "");
Expect(1, 1596, '\P{Joining_Group=- Farsi_Yeh}', "");
Expect(0, 1596, '\P{^Joining_Group=- Farsi_Yeh}', "");
Error('\p{Jg=	Farsi/a/YEH}');
Error('\P{Jg=	Farsi/a/YEH}');
Expect(1, 1599, '\p{Jg=farsiyeh}', "");
Expect(0, 1599, '\p{^Jg=farsiyeh}', "");
Expect(0, 1599, '\P{Jg=farsiyeh}', "");
Expect(1, 1599, '\P{^Jg=farsiyeh}', "");
Expect(0, 1596, '\p{Jg=farsiyeh}', "");
Expect(1, 1596, '\p{^Jg=farsiyeh}', "");
Expect(1, 1596, '\P{Jg=farsiyeh}', "");
Expect(0, 1596, '\P{^Jg=farsiyeh}', "");
Expect(1, 1599, '\p{Jg=_farsi_YEH}', "");
Expect(0, 1599, '\p{^Jg=_farsi_YEH}', "");
Expect(0, 1599, '\P{Jg=_farsi_YEH}', "");
Expect(1, 1599, '\P{^Jg=_farsi_YEH}', "");
Expect(0, 1596, '\p{Jg=_farsi_YEH}', "");
Expect(1, 1596, '\p{^Jg=_farsi_YEH}', "");
Expect(1, 1596, '\P{Jg=_farsi_YEH}', "");
Expect(0, 1596, '\P{^Jg=_farsi_YEH}', "");
Error('\p{Is_Joining_Group= :=Farsi	yeh}');
Error('\P{Is_Joining_Group= :=Farsi	yeh}');
Expect(1, 1599, '\p{Is_Joining_Group=farsiyeh}', "");
Expect(0, 1599, '\p{^Is_Joining_Group=farsiyeh}', "");
Expect(0, 1599, '\P{Is_Joining_Group=farsiyeh}', "");
Expect(1, 1599, '\P{^Is_Joining_Group=farsiyeh}', "");
Expect(0, 1596, '\p{Is_Joining_Group=farsiyeh}', "");
Expect(1, 1596, '\p{^Is_Joining_Group=farsiyeh}', "");
Expect(1, 1596, '\P{Is_Joining_Group=farsiyeh}', "");
Expect(0, 1596, '\P{^Is_Joining_Group=farsiyeh}', "");
Expect(1, 1599, '\p{Is_Joining_Group=  Farsi-Yeh}', "");
Expect(0, 1599, '\p{^Is_Joining_Group=  Farsi-Yeh}', "");
Expect(0, 1599, '\P{Is_Joining_Group=  Farsi-Yeh}', "");
Expect(1, 1599, '\P{^Is_Joining_Group=  Farsi-Yeh}', "");
Expect(0, 1596, '\p{Is_Joining_Group=  Farsi-Yeh}', "");
Expect(1, 1596, '\p{^Is_Joining_Group=  Farsi-Yeh}', "");
Expect(1, 1596, '\P{Is_Joining_Group=  Farsi-Yeh}', "");
Expect(0, 1596, '\P{^Is_Joining_Group=  Farsi-Yeh}', "");
Error('\p{Is_Jg=_	FARSI-Yeh:=}');
Error('\P{Is_Jg=_	FARSI-Yeh:=}');
Expect(1, 1599, '\p{Is_Jg=farsiyeh}', "");
Expect(0, 1599, '\p{^Is_Jg=farsiyeh}', "");
Expect(0, 1599, '\P{Is_Jg=farsiyeh}', "");
Expect(1, 1599, '\P{^Is_Jg=farsiyeh}', "");
Expect(0, 1596, '\p{Is_Jg=farsiyeh}', "");
Expect(1, 1596, '\p{^Is_Jg=farsiyeh}', "");
Expect(1, 1596, '\P{Is_Jg=farsiyeh}', "");
Expect(0, 1596, '\P{^Is_Jg=farsiyeh}', "");
Expect(1, 1599, '\p{Is_Jg=	 Farsi_yeh}', "");
Expect(0, 1599, '\p{^Is_Jg=	 Farsi_yeh}', "");
Expect(0, 1599, '\P{Is_Jg=	 Farsi_yeh}', "");
Expect(1, 1599, '\P{^Is_Jg=	 Farsi_yeh}', "");
Expect(0, 1596, '\p{Is_Jg=	 Farsi_yeh}', "");
Expect(1, 1596, '\p{^Is_Jg=	 Farsi_yeh}', "");
Expect(1, 1596, '\P{Is_Jg=	 Farsi_yeh}', "");
Expect(0, 1596, '\P{^Is_Jg=	 Farsi_yeh}', "");
Error('\p{Joining_Group=_:=Reversed_Pe}');
Error('\P{Joining_Group=_:=Reversed_Pe}');
Expect(1, 1831, '\p{Joining_Group=reversedpe}', "");
Expect(0, 1831, '\p{^Joining_Group=reversedpe}', "");
Expect(0, 1831, '\P{Joining_Group=reversedpe}', "");
Expect(1, 1831, '\P{^Joining_Group=reversedpe}', "");
Expect(0, 1830, '\p{Joining_Group=reversedpe}', "");
Expect(1, 1830, '\p{^Joining_Group=reversedpe}', "");
Expect(1, 1830, '\P{Joining_Group=reversedpe}', "");
Expect(0, 1830, '\P{^Joining_Group=reversedpe}', "");
Expect(1, 1831, '\p{Joining_Group=	 Reversed	Pe}', "");
Expect(0, 1831, '\p{^Joining_Group=	 Reversed	Pe}', "");
Expect(0, 1831, '\P{Joining_Group=	 Reversed	Pe}', "");
Expect(1, 1831, '\P{^Joining_Group=	 Reversed	Pe}', "");
Expect(0, 1830, '\p{Joining_Group=	 Reversed	Pe}', "");
Expect(1, 1830, '\p{^Joining_Group=	 Reversed	Pe}', "");
Expect(1, 1830, '\P{Joining_Group=	 Reversed	Pe}', "");
Expect(0, 1830, '\P{^Joining_Group=	 Reversed	Pe}', "");
Error('\p{Jg= _reversedPe:=}');
Error('\P{Jg= _reversedPe:=}');
Expect(1, 1831, '\p{Jg=reversedpe}', "");
Expect(0, 1831, '\p{^Jg=reversedpe}', "");
Expect(0, 1831, '\P{Jg=reversedpe}', "");
Expect(1, 1831, '\P{^Jg=reversedpe}', "");
Expect(0, 1830, '\p{Jg=reversedpe}', "");
Expect(1, 1830, '\p{^Jg=reversedpe}', "");
Expect(1, 1830, '\P{Jg=reversedpe}', "");
Expect(0, 1830, '\P{^Jg=reversedpe}', "");
Expect(1, 1831, '\p{Jg=_-ReversedPE}', "");
Expect(0, 1831, '\p{^Jg=_-ReversedPE}', "");
Expect(0, 1831, '\P{Jg=_-ReversedPE}', "");
Expect(1, 1831, '\P{^Jg=_-ReversedPE}', "");
Expect(0, 1830, '\p{Jg=_-ReversedPE}', "");
Expect(1, 1830, '\p{^Jg=_-ReversedPE}', "");
Expect(1, 1830, '\P{Jg=_-ReversedPE}', "");
Expect(0, 1830, '\P{^Jg=_-ReversedPE}', "");
Error('\p{Is_Joining_Group=:=_	Reversed-Pe}');
Error('\P{Is_Joining_Group=:=_	Reversed-Pe}');
Expect(1, 1831, '\p{Is_Joining_Group=reversedpe}', "");
Expect(0, 1831, '\p{^Is_Joining_Group=reversedpe}', "");
Expect(0, 1831, '\P{Is_Joining_Group=reversedpe}', "");
Expect(1, 1831, '\P{^Is_Joining_Group=reversedpe}', "");
Expect(0, 1830, '\p{Is_Joining_Group=reversedpe}', "");
Expect(1, 1830, '\p{^Is_Joining_Group=reversedpe}', "");
Expect(1, 1830, '\P{Is_Joining_Group=reversedpe}', "");
Expect(0, 1830, '\P{^Is_Joining_Group=reversedpe}', "");
Expect(1, 1831, '\p{Is_Joining_Group=-reversedpe}', "");
Expect(0, 1831, '\p{^Is_Joining_Group=-reversedpe}', "");
Expect(0, 1831, '\P{Is_Joining_Group=-reversedpe}', "");
Expect(1, 1831, '\P{^Is_Joining_Group=-reversedpe}', "");
Expect(0, 1830, '\p{Is_Joining_Group=-reversedpe}', "");
Expect(1, 1830, '\p{^Is_Joining_Group=-reversedpe}', "");
Expect(1, 1830, '\P{Is_Joining_Group=-reversedpe}', "");
Expect(0, 1830, '\P{^Is_Joining_Group=-reversedpe}', "");
Error('\p{Is_Jg=-:=Reversed_pe}');
Error('\P{Is_Jg=-:=Reversed_pe}');
Expect(1, 1831, '\p{Is_Jg=reversedpe}', "");
Expect(0, 1831, '\p{^Is_Jg=reversedpe}', "");
Expect(0, 1831, '\P{Is_Jg=reversedpe}', "");
Expect(1, 1831, '\P{^Is_Jg=reversedpe}', "");
Expect(0, 1830, '\p{Is_Jg=reversedpe}', "");
Expect(1, 1830, '\p{^Is_Jg=reversedpe}', "");
Expect(1, 1830, '\P{Is_Jg=reversedpe}', "");
Expect(0, 1830, '\P{^Is_Jg=reversedpe}', "");
Expect(1, 1831, '\p{Is_Jg:   reversed_PE}', "");
Expect(0, 1831, '\p{^Is_Jg:   reversed_PE}', "");
Expect(0, 1831, '\P{Is_Jg:   reversed_PE}', "");
Expect(1, 1831, '\P{^Is_Jg:   reversed_PE}', "");
Expect(0, 1830, '\p{Is_Jg:   reversed_PE}', "");
Expect(1, 1830, '\p{^Is_Jg:   reversed_PE}', "");
Expect(1, 1830, '\P{Is_Jg:   reversed_PE}', "");
Expect(0, 1830, '\P{^Is_Jg:   reversed_PE}', "");
Error('\p{Joining_Group= _Shin/a/}');
Error('\P{Joining_Group= _Shin/a/}');
Expect(1, 1835, '\p{Joining_Group:shin}', "");
Expect(0, 1835, '\p{^Joining_Group:shin}', "");
Expect(0, 1835, '\P{Joining_Group:shin}', "");
Expect(1, 1835, '\P{^Joining_Group:shin}', "");
Expect(0, 1834, '\p{Joining_Group:shin}', "");
Expect(1, 1834, '\p{^Joining_Group:shin}', "");
Expect(1, 1834, '\P{Joining_Group:shin}', "");
Expect(0, 1834, '\P{^Joining_Group:shin}', "");
Expect(1, 1835, '\p{Joining_Group=		Shin}', "");
Expect(0, 1835, '\p{^Joining_Group=		Shin}', "");
Expect(0, 1835, '\P{Joining_Group=		Shin}', "");
Expect(1, 1835, '\P{^Joining_Group=		Shin}', "");
Expect(0, 1834, '\p{Joining_Group=		Shin}', "");
Expect(1, 1834, '\p{^Joining_Group=		Shin}', "");
Expect(1, 1834, '\P{Joining_Group=		Shin}', "");
Expect(0, 1834, '\P{^Joining_Group=		Shin}', "");
Error('\p{Jg=/a/ Shin}');
Error('\P{Jg=/a/ Shin}');
Expect(1, 1835, '\p{Jg=shin}', "");
Expect(0, 1835, '\p{^Jg=shin}', "");
Expect(0, 1835, '\P{Jg=shin}', "");
Expect(1, 1835, '\P{^Jg=shin}', "");
Expect(0, 1834, '\p{Jg=shin}', "");
Expect(1, 1834, '\p{^Jg=shin}', "");
Expect(1, 1834, '\P{Jg=shin}', "");
Expect(0, 1834, '\P{^Jg=shin}', "");
Expect(1, 1835, '\p{Jg=_ Shin}', "");
Expect(0, 1835, '\p{^Jg=_ Shin}', "");
Expect(0, 1835, '\P{Jg=_ Shin}', "");
Expect(1, 1835, '\P{^Jg=_ Shin}', "");
Expect(0, 1834, '\p{Jg=_ Shin}', "");
Expect(1, 1834, '\p{^Jg=_ Shin}', "");
Expect(1, 1834, '\P{Jg=_ Shin}', "");
Expect(0, 1834, '\P{^Jg=_ Shin}', "");
Error('\p{Is_Joining_Group=_shin/a/}');
Error('\P{Is_Joining_Group=_shin/a/}');
Expect(1, 1835, '\p{Is_Joining_Group=shin}', "");
Expect(0, 1835, '\p{^Is_Joining_Group=shin}', "");
Expect(0, 1835, '\P{Is_Joining_Group=shin}', "");
Expect(1, 1835, '\P{^Is_Joining_Group=shin}', "");
Expect(0, 1834, '\p{Is_Joining_Group=shin}', "");
Expect(1, 1834, '\p{^Is_Joining_Group=shin}', "");
Expect(1, 1834, '\P{Is_Joining_Group=shin}', "");
Expect(0, 1834, '\P{^Is_Joining_Group=shin}', "");
Expect(1, 1835, '\p{Is_Joining_Group:_Shin}', "");
Expect(0, 1835, '\p{^Is_Joining_Group:_Shin}', "");
Expect(0, 1835, '\P{Is_Joining_Group:_Shin}', "");
Expect(1, 1835, '\P{^Is_Joining_Group:_Shin}', "");
Expect(0, 1834, '\p{Is_Joining_Group:_Shin}', "");
Expect(1, 1834, '\p{^Is_Joining_Group:_Shin}', "");
Expect(1, 1834, '\P{Is_Joining_Group:_Shin}', "");
Expect(0, 1834, '\P{^Is_Joining_Group:_Shin}', "");
Error('\p{Is_Jg=:=_	Shin}');
Error('\P{Is_Jg=:=_	Shin}');
Expect(1, 1835, '\p{Is_Jg=shin}', "");
Expect(0, 1835, '\p{^Is_Jg=shin}', "");
Expect(0, 1835, '\P{Is_Jg=shin}', "");
Expect(1, 1835, '\P{^Is_Jg=shin}', "");
Expect(0, 1834, '\p{Is_Jg=shin}', "");
Expect(1, 1834, '\p{^Is_Jg=shin}', "");
Expect(1, 1834, '\P{Is_Jg=shin}', "");
Expect(0, 1834, '\P{^Is_Jg=shin}', "");
Expect(1, 1835, '\p{Is_Jg= _Shin}', "");
Expect(0, 1835, '\p{^Is_Jg= _Shin}', "");
Expect(0, 1835, '\P{Is_Jg= _Shin}', "");
Expect(1, 1835, '\P{^Is_Jg= _Shin}', "");
Expect(0, 1834, '\p{Is_Jg= _Shin}', "");
Expect(1, 1834, '\p{^Is_Jg= _Shin}', "");
Expect(1, 1834, '\P{Is_Jg= _Shin}', "");
Expect(0, 1834, '\P{^Is_Jg= _Shin}', "");
Error('\p{Joining_Group=	 Yeh:=}');
Error('\P{Joining_Group=	 Yeh:=}');
Expect(1, 1568, '\p{Joining_Group:yeh}', "");
Expect(0, 1568, '\p{^Joining_Group:yeh}', "");
Expect(0, 1568, '\P{Joining_Group:yeh}', "");
Expect(1, 1568, '\P{^Joining_Group:yeh}', "");
Expect(0, 1567, '\p{Joining_Group:yeh}', "");
Expect(1, 1567, '\p{^Joining_Group:yeh}', "");
Expect(1, 1567, '\P{Joining_Group:yeh}', "");
Expect(0, 1567, '\P{^Joining_Group:yeh}', "");
Expect(1, 1568, '\p{Joining_Group=  Yeh}', "");
Expect(0, 1568, '\p{^Joining_Group=  Yeh}', "");
Expect(0, 1568, '\P{Joining_Group=  Yeh}', "");
Expect(1, 1568, '\P{^Joining_Group=  Yeh}', "");
Expect(0, 1567, '\p{Joining_Group=  Yeh}', "");
Expect(1, 1567, '\p{^Joining_Group=  Yeh}', "");
Expect(1, 1567, '\P{Joining_Group=  Yeh}', "");
Expect(0, 1567, '\P{^Joining_Group=  Yeh}', "");
Error('\p{Jg:   _:=Yeh}');
Error('\P{Jg:   _:=Yeh}');
Expect(1, 1568, '\p{Jg=yeh}', "");
Expect(0, 1568, '\p{^Jg=yeh}', "");
Expect(0, 1568, '\P{Jg=yeh}', "");
Expect(1, 1568, '\P{^Jg=yeh}', "");
Expect(0, 1567, '\p{Jg=yeh}', "");
Expect(1, 1567, '\p{^Jg=yeh}', "");
Expect(1, 1567, '\P{Jg=yeh}', "");
Expect(0, 1567, '\P{^Jg=yeh}', "");
Expect(1, 1568, '\p{Jg:   	_Yeh}', "");
Expect(0, 1568, '\p{^Jg:   	_Yeh}', "");
Expect(0, 1568, '\P{Jg:   	_Yeh}', "");
Expect(1, 1568, '\P{^Jg:   	_Yeh}', "");
Expect(0, 1567, '\p{Jg:   	_Yeh}', "");
Expect(1, 1567, '\p{^Jg:   	_Yeh}', "");
Expect(1, 1567, '\P{Jg:   	_Yeh}', "");
Expect(0, 1567, '\P{^Jg:   	_Yeh}', "");
Error('\p{Is_Joining_Group=/a/-yeh}');
Error('\P{Is_Joining_Group=/a/-yeh}');
Expect(1, 1568, '\p{Is_Joining_Group=yeh}', "");
Expect(0, 1568, '\p{^Is_Joining_Group=yeh}', "");
Expect(0, 1568, '\P{Is_Joining_Group=yeh}', "");
Expect(1, 1568, '\P{^Is_Joining_Group=yeh}', "");
Expect(0, 1567, '\p{Is_Joining_Group=yeh}', "");
Expect(1, 1567, '\p{^Is_Joining_Group=yeh}', "");
Expect(1, 1567, '\P{Is_Joining_Group=yeh}', "");
Expect(0, 1567, '\P{^Is_Joining_Group=yeh}', "");
Expect(1, 1568, '\p{Is_Joining_Group=--YEH}', "");
Expect(0, 1568, '\p{^Is_Joining_Group=--YEH}', "");
Expect(0, 1568, '\P{Is_Joining_Group=--YEH}', "");
Expect(1, 1568, '\P{^Is_Joining_Group=--YEH}', "");
Expect(0, 1567, '\p{Is_Joining_Group=--YEH}', "");
Expect(1, 1567, '\p{^Is_Joining_Group=--YEH}', "");
Expect(1, 1567, '\P{Is_Joining_Group=--YEH}', "");
Expect(0, 1567, '\P{^Is_Joining_Group=--YEH}', "");
Error('\p{Is_Jg=:=_	Yeh}');
Error('\P{Is_Jg=:=_	Yeh}');
Expect(1, 1568, '\p{Is_Jg=yeh}', "");
Expect(0, 1568, '\p{^Is_Jg=yeh}', "");
Expect(0, 1568, '\P{Is_Jg=yeh}', "");
Expect(1, 1568, '\P{^Is_Jg=yeh}', "");
Expect(0, 1567, '\p{Is_Jg=yeh}', "");
Expect(1, 1567, '\p{^Is_Jg=yeh}', "");
Expect(1, 1567, '\P{Is_Jg=yeh}', "");
Expect(0, 1567, '\P{^Is_Jg=yeh}', "");
Expect(1, 1568, '\p{Is_Jg=_YEH}', "");
Expect(0, 1568, '\p{^Is_Jg=_YEH}', "");
Expect(0, 1568, '\P{Is_Jg=_YEH}', "");
Expect(1, 1568, '\P{^Is_Jg=_YEH}', "");
Expect(0, 1567, '\p{Is_Jg=_YEH}', "");
Expect(1, 1567, '\p{^Is_Jg=_YEH}', "");
Expect(1, 1567, '\P{Is_Jg=_YEH}', "");
Expect(0, 1567, '\P{^Is_Jg=_YEH}', "");
Error('\p{Joining_Group=	/a/Dal}');
Error('\P{Joining_Group=	/a/Dal}');
Expect(1, 1584, '\p{Joining_Group=dal}', "");
Expect(0, 1584, '\p{^Joining_Group=dal}', "");
Expect(0, 1584, '\P{Joining_Group=dal}', "");
Expect(1, 1584, '\P{^Joining_Group=dal}', "");
Expect(0, 1582, '\p{Joining_Group=dal}', "");
Expect(1, 1582, '\p{^Joining_Group=dal}', "");
Expect(1, 1582, '\P{Joining_Group=dal}', "");
Expect(0, 1582, '\P{^Joining_Group=dal}', "");
Expect(1, 1584, '\p{Joining_Group=_ Dal}', "");
Expect(0, 1584, '\p{^Joining_Group=_ Dal}', "");
Expect(0, 1584, '\P{Joining_Group=_ Dal}', "");
Expect(1, 1584, '\P{^Joining_Group=_ Dal}', "");
Expect(0, 1582, '\p{Joining_Group=_ Dal}', "");
Expect(1, 1582, '\p{^Joining_Group=_ Dal}', "");
Expect(1, 1582, '\P{Joining_Group=_ Dal}', "");
Expect(0, 1582, '\P{^Joining_Group=_ Dal}', "");
Error('\p{Jg=:= Dal}');
Error('\P{Jg=:= Dal}');
Expect(1, 1584, '\p{Jg=dal}', "");
Expect(0, 1584, '\p{^Jg=dal}', "");
Expect(0, 1584, '\P{Jg=dal}', "");
Expect(1, 1584, '\P{^Jg=dal}', "");
Expect(0, 1582, '\p{Jg=dal}', "");
Expect(1, 1582, '\p{^Jg=dal}', "");
Expect(1, 1582, '\P{Jg=dal}', "");
Expect(0, 1582, '\P{^Jg=dal}', "");
Expect(1, 1584, '\p{Jg= 	dal}', "");
Expect(0, 1584, '\p{^Jg= 	dal}', "");
Expect(0, 1584, '\P{Jg= 	dal}', "");
Expect(1, 1584, '\P{^Jg= 	dal}', "");
Expect(0, 1582, '\p{Jg= 	dal}', "");
Expect(1, 1582, '\p{^Jg= 	dal}', "");
Expect(1, 1582, '\P{Jg= 	dal}', "");
Expect(0, 1582, '\P{^Jg= 	dal}', "");
Error('\p{Is_Joining_Group=:=	 Dal}');
Error('\P{Is_Joining_Group=:=	 Dal}');
Expect(1, 1584, '\p{Is_Joining_Group=dal}', "");
Expect(0, 1584, '\p{^Is_Joining_Group=dal}', "");
Expect(0, 1584, '\P{Is_Joining_Group=dal}', "");
Expect(1, 1584, '\P{^Is_Joining_Group=dal}', "");
Expect(0, 1582, '\p{Is_Joining_Group=dal}', "");
Expect(1, 1582, '\p{^Is_Joining_Group=dal}', "");
Expect(1, 1582, '\P{Is_Joining_Group=dal}', "");
Expect(0, 1582, '\P{^Is_Joining_Group=dal}', "");
Expect(1, 1584, '\p{Is_Joining_Group= Dal}', "");
Expect(0, 1584, '\p{^Is_Joining_Group= Dal}', "");
Expect(0, 1584, '\P{Is_Joining_Group= Dal}', "");
Expect(1, 1584, '\P{^Is_Joining_Group= Dal}', "");
Expect(0, 1582, '\p{Is_Joining_Group= Dal}', "");
Expect(1, 1582, '\p{^Is_Joining_Group= Dal}', "");
Expect(1, 1582, '\P{Is_Joining_Group= Dal}', "");
Expect(0, 1582, '\P{^Is_Joining_Group= Dal}', "");
Error('\p{Is_Jg=	_Dal:=}');
Error('\P{Is_Jg=	_Dal:=}');
Expect(1, 1584, '\p{Is_Jg=dal}', "");
Expect(0, 1584, '\p{^Is_Jg=dal}', "");
Expect(0, 1584, '\P{Is_Jg=dal}', "");
Expect(1, 1584, '\P{^Is_Jg=dal}', "");
Expect(0, 1582, '\p{Is_Jg=dal}', "");
Expect(1, 1582, '\p{^Is_Jg=dal}', "");
Expect(1, 1582, '\P{Is_Jg=dal}', "");
Expect(0, 1582, '\P{^Is_Jg=dal}', "");
Expect(1, 1584, '\p{Is_Jg=-dal}', "");
Expect(0, 1584, '\p{^Is_Jg=-dal}', "");
Expect(0, 1584, '\P{Is_Jg=-dal}', "");
Expect(1, 1584, '\P{^Is_Jg=-dal}', "");
Expect(0, 1582, '\p{Is_Jg=-dal}', "");
Expect(1, 1582, '\p{^Is_Jg=-dal}', "");
Expect(1, 1582, '\P{Is_Jg=-dal}', "");
Expect(0, 1582, '\P{^Is_Jg=-dal}', "");
Error('\p{Joining_Group=	:=HE}');
Error('\P{Joining_Group=	:=HE}');
Expect(1, 1815, '\p{Joining_Group=he}', "");
Expect(0, 1815, '\p{^Joining_Group=he}', "");
Expect(0, 1815, '\P{Joining_Group=he}', "");
Expect(1, 1815, '\P{^Joining_Group=he}', "");
Expect(0, 1814, '\p{Joining_Group=he}', "");
Expect(1, 1814, '\p{^Joining_Group=he}', "");
Expect(1, 1814, '\P{Joining_Group=he}', "");
Expect(0, 1814, '\P{^Joining_Group=he}', "");
Expect(1, 1815, '\p{Joining_Group= He}', "");
Expect(0, 1815, '\p{^Joining_Group= He}', "");
Expect(0, 1815, '\P{Joining_Group= He}', "");
Expect(1, 1815, '\P{^Joining_Group= He}', "");
Expect(0, 1814, '\p{Joining_Group= He}', "");
Expect(1, 1814, '\p{^Joining_Group= He}', "");
Expect(1, 1814, '\P{Joining_Group= He}', "");
Expect(0, 1814, '\P{^Joining_Group= He}', "");
Error('\p{Jg=	He/a/}');
Error('\P{Jg=	He/a/}');
Expect(1, 1815, '\p{Jg: he}', "");
Expect(0, 1815, '\p{^Jg: he}', "");
Expect(0, 1815, '\P{Jg: he}', "");
Expect(1, 1815, '\P{^Jg: he}', "");
Expect(0, 1814, '\p{Jg: he}', "");
Expect(1, 1814, '\p{^Jg: he}', "");
Expect(1, 1814, '\P{Jg: he}', "");
Expect(0, 1814, '\P{^Jg: he}', "");
Error('\p{Is_Joining_Group=:=_ He}');
Error('\P{Is_Joining_Group=:=_ He}');
Expect(1, 1815, '\p{Is_Joining_Group=he}', "");
Expect(0, 1815, '\p{^Is_Joining_Group=he}', "");
Expect(0, 1815, '\P{Is_Joining_Group=he}', "");
Expect(1, 1815, '\P{^Is_Joining_Group=he}', "");
Expect(0, 1814, '\p{Is_Joining_Group=he}', "");
Expect(1, 1814, '\p{^Is_Joining_Group=he}', "");
Expect(1, 1814, '\P{Is_Joining_Group=he}', "");
Expect(0, 1814, '\P{^Is_Joining_Group=he}', "");
Expect(1, 1815, '\p{Is_Joining_Group=-He}', "");
Expect(0, 1815, '\p{^Is_Joining_Group=-He}', "");
Expect(0, 1815, '\P{Is_Joining_Group=-He}', "");
Expect(1, 1815, '\P{^Is_Joining_Group=-He}', "");
Expect(0, 1814, '\p{Is_Joining_Group=-He}', "");
Expect(1, 1814, '\p{^Is_Joining_Group=-He}', "");
Expect(1, 1814, '\P{Is_Joining_Group=-He}', "");
Expect(0, 1814, '\P{^Is_Joining_Group=-He}', "");
Error('\p{Is_Jg= HE:=}');
Error('\P{Is_Jg= HE:=}');
Expect(1, 1815, '\p{Is_Jg=he}', "");
Expect(0, 1815, '\p{^Is_Jg=he}', "");
Expect(0, 1815, '\P{Is_Jg=he}', "");
Expect(1, 1815, '\P{^Is_Jg=he}', "");
Expect(0, 1814, '\p{Is_Jg=he}', "");
Expect(1, 1814, '\p{^Is_Jg=he}', "");
Expect(1, 1814, '\P{Is_Jg=he}', "");
Expect(0, 1814, '\P{^Is_Jg=he}', "");
Expect(1, 1815, '\p{Is_Jg=-_He}', "");
Expect(0, 1815, '\p{^Is_Jg=-_He}', "");
Expect(0, 1815, '\P{Is_Jg=-_He}', "");
Expect(1, 1815, '\P{^Is_Jg=-_He}', "");
Expect(0, 1814, '\p{Is_Jg=-_He}', "");
Expect(1, 1814, '\p{^Is_Jg=-_He}', "");
Expect(1, 1814, '\P{Is_Jg=-_He}', "");
Expect(0, 1814, '\P{^Is_Jg=-_He}', "");
Error('\p{Joining_Group=-/a/NOJoining-GROUP}');
Error('\P{Joining_Group=-/a/NOJoining-GROUP}');
Expect(1, 1567, '\p{Joining_Group=nojoininggroup}', "");
Expect(0, 1567, '\p{^Joining_Group=nojoininggroup}', "");
Expect(0, 1567, '\P{Joining_Group=nojoininggroup}', "");
Expect(1, 1567, '\P{^Joining_Group=nojoininggroup}', "");
Expect(0, 1568, '\p{Joining_Group=nojoininggroup}', "");
Expect(1, 1568, '\p{^Joining_Group=nojoininggroup}', "");
Expect(1, 1568, '\P{Joining_Group=nojoininggroup}', "");
Expect(0, 1568, '\P{^Joining_Group=nojoininggroup}', "");
Expect(1, 1567, '\p{Joining_Group=no_Joining-GROUP}', "");
Expect(0, 1567, '\p{^Joining_Group=no_Joining-GROUP}', "");
Expect(0, 1567, '\P{Joining_Group=no_Joining-GROUP}', "");
Expect(1, 1567, '\P{^Joining_Group=no_Joining-GROUP}', "");
Expect(0, 1568, '\p{Joining_Group=no_Joining-GROUP}', "");
Expect(1, 1568, '\p{^Joining_Group=no_Joining-GROUP}', "");
Expect(1, 1568, '\P{Joining_Group=no_Joining-GROUP}', "");
Expect(0, 1568, '\P{^Joining_Group=no_Joining-GROUP}', "");
Error('\p{Jg= :=NoJOINING-group}');
Error('\P{Jg= :=NoJOINING-group}');
Expect(1, 1567, '\p{Jg=nojoininggroup}', "");
Expect(0, 1567, '\p{^Jg=nojoininggroup}', "");
Expect(0, 1567, '\P{Jg=nojoininggroup}', "");
Expect(1, 1567, '\P{^Jg=nojoininggroup}', "");
Expect(0, 1568, '\p{Jg=nojoininggroup}', "");
Expect(1, 1568, '\p{^Jg=nojoininggroup}', "");
Expect(1, 1568, '\P{Jg=nojoininggroup}', "");
Expect(0, 1568, '\P{^Jg=nojoininggroup}', "");
Expect(1, 1567, '\p{Jg=  noJoining-group}', "");
Expect(0, 1567, '\p{^Jg=  noJoining-group}', "");
Expect(0, 1567, '\P{Jg=  noJoining-group}', "");
Expect(1, 1567, '\P{^Jg=  noJoining-group}', "");
Expect(0, 1568, '\p{Jg=  noJoining-group}', "");
Expect(1, 1568, '\p{^Jg=  noJoining-group}', "");
Expect(1, 1568, '\P{Jg=  noJoining-group}', "");
Expect(0, 1568, '\P{^Jg=  noJoining-group}', "");
Error('\p{Is_Joining_Group=/a/ _no_Joining_Group}');
Error('\P{Is_Joining_Group=/a/ _no_Joining_Group}');
Expect(1, 1567, '\p{Is_Joining_Group:nojoininggroup}', "");
Expect(0, 1567, '\p{^Is_Joining_Group:nojoininggroup}', "");
Expect(0, 1567, '\P{Is_Joining_Group:nojoininggroup}', "");
Expect(1, 1567, '\P{^Is_Joining_Group:nojoininggroup}', "");
Expect(0, 1568, '\p{Is_Joining_Group:nojoininggroup}', "");
Expect(1, 1568, '\p{^Is_Joining_Group:nojoininggroup}', "");
Expect(1, 1568, '\P{Is_Joining_Group:nojoininggroup}', "");
Expect(0, 1568, '\P{^Is_Joining_Group:nojoininggroup}', "");
Expect(1, 1567, '\p{Is_Joining_Group=	 no	JOINING_group}', "");
Expect(0, 1567, '\p{^Is_Joining_Group=	 no	JOINING_group}', "");
Expect(0, 1567, '\P{Is_Joining_Group=	 no	JOINING_group}', "");
Expect(1, 1567, '\P{^Is_Joining_Group=	 no	JOINING_group}', "");
Expect(0, 1568, '\p{Is_Joining_Group=	 no	JOINING_group}', "");
Expect(1, 1568, '\p{^Is_Joining_Group=	 no	JOINING_group}', "");
Expect(1, 1568, '\P{Is_Joining_Group=	 no	JOINING_group}', "");
Expect(0, 1568, '\P{^Is_Joining_Group=	 no	JOINING_group}', "");
Error('\p{Is_Jg=	-no_Joining/a/Group}');
Error('\P{Is_Jg=	-no_Joining/a/Group}');
Expect(1, 1567, '\p{Is_Jg=nojoininggroup}', "");
Expect(0, 1567, '\p{^Is_Jg=nojoininggroup}', "");
Expect(0, 1567, '\P{Is_Jg=nojoininggroup}', "");
Expect(1, 1567, '\P{^Is_Jg=nojoininggroup}', "");
Expect(0, 1568, '\p{Is_Jg=nojoininggroup}', "");
Expect(1, 1568, '\p{^Is_Jg=nojoininggroup}', "");
Expect(1, 1568, '\P{Is_Jg=nojoininggroup}', "");
Expect(0, 1568, '\P{^Is_Jg=nojoininggroup}', "");
Expect(1, 1567, '\p{Is_Jg=	 No_JOINING_Group}', "");
Expect(0, 1567, '\p{^Is_Jg=	 No_JOINING_Group}', "");
Expect(0, 1567, '\P{Is_Jg=	 No_JOINING_Group}', "");
Expect(1, 1567, '\P{^Is_Jg=	 No_JOINING_Group}', "");
Expect(0, 1568, '\p{Is_Jg=	 No_JOINING_Group}', "");
Expect(1, 1568, '\p{^Is_Jg=	 No_JOINING_Group}', "");
Expect(1, 1568, '\P{Is_Jg=	 No_JOINING_Group}', "");
Expect(0, 1568, '\P{^Is_Jg=	 No_JOINING_Group}', "");
Error('\p{Joining_Group=	BURUSHASKIYEH:=BARREE}');
Error('\P{Joining_Group=	BURUSHASKIYEH:=BARREE}');
Expect(1, 1915, '\p{Joining_Group=burushaskiyehbarree}', "");
Expect(0, 1915, '\p{^Joining_Group=burushaskiyehbarree}', "");
Expect(0, 1915, '\P{Joining_Group=burushaskiyehbarree}', "");
Expect(1, 1915, '\P{^Joining_Group=burushaskiyehbarree}', "");
Expect(0, 1913, '\p{Joining_Group=burushaskiyehbarree}', "");
Expect(1, 1913, '\p{^Joining_Group=burushaskiyehbarree}', "");
Expect(1, 1913, '\P{Joining_Group=burushaskiyehbarree}', "");
Expect(0, 1913, '\P{^Joining_Group=burushaskiyehbarree}', "");
Expect(1, 1915, '\p{Joining_Group=_-BurushaskiYEH_Barree}', "");
Expect(0, 1915, '\p{^Joining_Group=_-BurushaskiYEH_Barree}', "");
Expect(0, 1915, '\P{Joining_Group=_-BurushaskiYEH_Barree}', "");
Expect(1, 1915, '\P{^Joining_Group=_-BurushaskiYEH_Barree}', "");
Expect(0, 1913, '\p{Joining_Group=_-BurushaskiYEH_Barree}', "");
Expect(1, 1913, '\p{^Joining_Group=_-BurushaskiYEH_Barree}', "");
Expect(1, 1913, '\P{Joining_Group=_-BurushaskiYEH_Barree}', "");
Expect(0, 1913, '\P{^Joining_Group=_-BurushaskiYEH_Barree}', "");
Error('\p{Jg=-:=Burushaski	yeh-Barree}');
Error('\P{Jg=-:=Burushaski	yeh-Barree}');
Expect(1, 1915, '\p{Jg=burushaskiyehbarree}', "");
Expect(0, 1915, '\p{^Jg=burushaskiyehbarree}', "");
Expect(0, 1915, '\P{Jg=burushaskiyehbarree}', "");
Expect(1, 1915, '\P{^Jg=burushaskiyehbarree}', "");
Expect(0, 1913, '\p{Jg=burushaskiyehbarree}', "");
Expect(1, 1913, '\p{^Jg=burushaskiyehbarree}', "");
Expect(1, 1913, '\P{Jg=burushaskiyehbarree}', "");
Expect(0, 1913, '\P{^Jg=burushaskiyehbarree}', "");
Expect(1, 1915, '\p{Jg=-	burushaski	Yeh	barree}', "");
Expect(0, 1915, '\p{^Jg=-	burushaski	Yeh	barree}', "");
Expect(0, 1915, '\P{Jg=-	burushaski	Yeh	barree}', "");
Expect(1, 1915, '\P{^Jg=-	burushaski	Yeh	barree}', "");
Expect(0, 1913, '\p{Jg=-	burushaski	Yeh	barree}', "");
Expect(1, 1913, '\p{^Jg=-	burushaski	Yeh	barree}', "");
Expect(1, 1913, '\P{Jg=-	burushaski	Yeh	barree}', "");
Expect(0, 1913, '\P{^Jg=-	burushaski	Yeh	barree}', "");
Error('\p{Is_Joining_Group=	:=BURUSHASKI YEH_barree}');
Error('\P{Is_Joining_Group=	:=BURUSHASKI YEH_barree}');
Expect(1, 1915, '\p{Is_Joining_Group=burushaskiyehbarree}', "");
Expect(0, 1915, '\p{^Is_Joining_Group=burushaskiyehbarree}', "");
Expect(0, 1915, '\P{Is_Joining_Group=burushaskiyehbarree}', "");
Expect(1, 1915, '\P{^Is_Joining_Group=burushaskiyehbarree}', "");
Expect(0, 1913, '\p{Is_Joining_Group=burushaskiyehbarree}', "");
Expect(1, 1913, '\p{^Is_Joining_Group=burushaskiyehbarree}', "");
Expect(1, 1913, '\P{Is_Joining_Group=burushaskiyehbarree}', "");
Expect(0, 1913, '\P{^Is_Joining_Group=burushaskiyehbarree}', "");
Expect(1, 1915, '\p{Is_Joining_Group=-	Burushaski	YEH barree}', "");
Expect(0, 1915, '\p{^Is_Joining_Group=-	Burushaski	YEH barree}', "");
Expect(0, 1915, '\P{Is_Joining_Group=-	Burushaski	YEH barree}', "");
Expect(1, 1915, '\P{^Is_Joining_Group=-	Burushaski	YEH barree}', "");
Expect(0, 1913, '\p{Is_Joining_Group=-	Burushaski	YEH barree}', "");
Expect(1, 1913, '\p{^Is_Joining_Group=-	Burushaski	YEH barree}', "");
Expect(1, 1913, '\P{Is_Joining_Group=-	Burushaski	YEH barree}', "");
Expect(0, 1913, '\P{^Is_Joining_Group=-	Burushaski	YEH barree}', "");
Error('\p{Is_Jg=_:=Burushaski Yeh-Barree}');
Error('\P{Is_Jg=_:=Burushaski Yeh-Barree}');
Expect(1, 1915, '\p{Is_Jg=burushaskiyehbarree}', "");
Expect(0, 1915, '\p{^Is_Jg=burushaskiyehbarree}', "");
Expect(0, 1915, '\P{Is_Jg=burushaskiyehbarree}', "");
Expect(1, 1915, '\P{^Is_Jg=burushaskiyehbarree}', "");
Expect(0, 1913, '\p{Is_Jg=burushaskiyehbarree}', "");
Expect(1, 1913, '\p{^Is_Jg=burushaskiyehbarree}', "");
Expect(1, 1913, '\P{Is_Jg=burushaskiyehbarree}', "");
Expect(0, 1913, '\P{^Is_Jg=burushaskiyehbarree}', "");
Expect(1, 1915, '\p{Is_Jg=BURUSHASKI	Yeh_Barree}', "");
Expect(0, 1915, '\p{^Is_Jg=BURUSHASKI	Yeh_Barree}', "");
Expect(0, 1915, '\P{Is_Jg=BURUSHASKI	Yeh_Barree}', "");
Expect(1, 1915, '\P{^Is_Jg=BURUSHASKI	Yeh_Barree}', "");
Expect(0, 1913, '\p{Is_Jg=BURUSHASKI	Yeh_Barree}', "");
Expect(1, 1913, '\p{^Is_Jg=BURUSHASKI	Yeh_Barree}', "");
Expect(1, 1913, '\P{Is_Jg=BURUSHASKI	Yeh_Barree}', "");
Expect(0, 1913, '\P{^Is_Jg=BURUSHASKI	Yeh_Barree}', "");
Error('\p{Joining_Group=-	Teh marbuta/a/}');
Error('\P{Joining_Group=-	Teh marbuta/a/}');
Expect(1, 1577, '\p{Joining_Group=tehmarbuta}', "");
Expect(0, 1577, '\p{^Joining_Group=tehmarbuta}', "");
Expect(0, 1577, '\P{Joining_Group=tehmarbuta}', "");
Expect(1, 1577, '\P{^Joining_Group=tehmarbuta}', "");
Expect(0, 1576, '\p{Joining_Group=tehmarbuta}', "");
Expect(1, 1576, '\p{^Joining_Group=tehmarbuta}', "");
Expect(1, 1576, '\P{Joining_Group=tehmarbuta}', "");
Expect(0, 1576, '\P{^Joining_Group=tehmarbuta}', "");
Expect(1, 1577, '\p{Joining_Group=_teh-Marbuta}', "");
Expect(0, 1577, '\p{^Joining_Group=_teh-Marbuta}', "");
Expect(0, 1577, '\P{Joining_Group=_teh-Marbuta}', "");
Expect(1, 1577, '\P{^Joining_Group=_teh-Marbuta}', "");
Expect(0, 1576, '\p{Joining_Group=_teh-Marbuta}', "");
Expect(1, 1576, '\p{^Joining_Group=_teh-Marbuta}', "");
Expect(1, 1576, '\P{Joining_Group=_teh-Marbuta}', "");
Expect(0, 1576, '\P{^Joining_Group=_teh-Marbuta}', "");
Error('\p{Jg=	Teh:=MARBUTA}');
Error('\P{Jg=	Teh:=MARBUTA}');
Expect(1, 1577, '\p{Jg=tehmarbuta}', "");
Expect(0, 1577, '\p{^Jg=tehmarbuta}', "");
Expect(0, 1577, '\P{Jg=tehmarbuta}', "");
Expect(1, 1577, '\P{^Jg=tehmarbuta}', "");
Expect(0, 1576, '\p{Jg=tehmarbuta}', "");
Expect(1, 1576, '\p{^Jg=tehmarbuta}', "");
Expect(1, 1576, '\P{Jg=tehmarbuta}', "");
Expect(0, 1576, '\P{^Jg=tehmarbuta}', "");
Expect(1, 1577, '\p{Jg=-_Teh-Marbuta}', "");
Expect(0, 1577, '\p{^Jg=-_Teh-Marbuta}', "");
Expect(0, 1577, '\P{Jg=-_Teh-Marbuta}', "");
Expect(1, 1577, '\P{^Jg=-_Teh-Marbuta}', "");
Expect(0, 1576, '\p{Jg=-_Teh-Marbuta}', "");
Expect(1, 1576, '\p{^Jg=-_Teh-Marbuta}', "");
Expect(1, 1576, '\P{Jg=-_Teh-Marbuta}', "");
Expect(0, 1576, '\P{^Jg=-_Teh-Marbuta}', "");
Error('\p{Is_Joining_Group=  Teh:=Marbuta}');
Error('\P{Is_Joining_Group=  Teh:=Marbuta}');
Expect(1, 1577, '\p{Is_Joining_Group=tehmarbuta}', "");
Expect(0, 1577, '\p{^Is_Joining_Group=tehmarbuta}', "");
Expect(0, 1577, '\P{Is_Joining_Group=tehmarbuta}', "");
Expect(1, 1577, '\P{^Is_Joining_Group=tehmarbuta}', "");
Expect(0, 1576, '\p{Is_Joining_Group=tehmarbuta}', "");
Expect(1, 1576, '\p{^Is_Joining_Group=tehmarbuta}', "");
Expect(1, 1576, '\P{Is_Joining_Group=tehmarbuta}', "");
Expect(0, 1576, '\P{^Is_Joining_Group=tehmarbuta}', "");
Expect(1, 1577, '\p{Is_Joining_Group= -tehmarbuta}', "");
Expect(0, 1577, '\p{^Is_Joining_Group= -tehmarbuta}', "");
Expect(0, 1577, '\P{Is_Joining_Group= -tehmarbuta}', "");
Expect(1, 1577, '\P{^Is_Joining_Group= -tehmarbuta}', "");
Expect(0, 1576, '\p{Is_Joining_Group= -tehmarbuta}', "");
Expect(1, 1576, '\p{^Is_Joining_Group= -tehmarbuta}', "");
Expect(1, 1576, '\P{Is_Joining_Group= -tehmarbuta}', "");
Expect(0, 1576, '\P{^Is_Joining_Group= -tehmarbuta}', "");
Error('\p{Is_Jg=:=-_Teh_Marbuta}');
Error('\P{Is_Jg=:=-_Teh_Marbuta}');
Expect(1, 1577, '\p{Is_Jg=tehmarbuta}', "");
Expect(0, 1577, '\p{^Is_Jg=tehmarbuta}', "");
Expect(0, 1577, '\P{Is_Jg=tehmarbuta}', "");
Expect(1, 1577, '\P{^Is_Jg=tehmarbuta}', "");
Expect(0, 1576, '\p{Is_Jg=tehmarbuta}', "");
Expect(1, 1576, '\p{^Is_Jg=tehmarbuta}', "");
Expect(1, 1576, '\P{Is_Jg=tehmarbuta}', "");
Expect(0, 1576, '\P{^Is_Jg=tehmarbuta}', "");
Expect(1, 1577, '\p{Is_Jg=		Teh_marbuta}', "");
Expect(0, 1577, '\p{^Is_Jg=		Teh_marbuta}', "");
Expect(0, 1577, '\P{Is_Jg=		Teh_marbuta}', "");
Expect(1, 1577, '\P{^Is_Jg=		Teh_marbuta}', "");
Expect(0, 1576, '\p{Is_Jg=		Teh_marbuta}', "");
Expect(1, 1576, '\p{^Is_Jg=		Teh_marbuta}', "");
Expect(1, 1576, '\P{Is_Jg=		Teh_marbuta}', "");
Expect(0, 1576, '\P{^Is_Jg=		Teh_marbuta}', "");
Error('\p{Joining_Group=/a/	-REH}');
Error('\P{Joining_Group=/a/	-REH}');
Expect(1, 1586, '\p{Joining_Group=reh}', "");
Expect(0, 1586, '\p{^Joining_Group=reh}', "");
Expect(0, 1586, '\P{Joining_Group=reh}', "");
Expect(1, 1586, '\P{^Joining_Group=reh}', "");
Expect(0, 1584, '\p{Joining_Group=reh}', "");
Expect(1, 1584, '\p{^Joining_Group=reh}', "");
Expect(1, 1584, '\P{Joining_Group=reh}', "");
Expect(0, 1584, '\P{^Joining_Group=reh}', "");
Expect(1, 1586, '\p{Joining_Group:	 	reh}', "");
Expect(0, 1586, '\p{^Joining_Group:	 	reh}', "");
Expect(0, 1586, '\P{Joining_Group:	 	reh}', "");
Expect(1, 1586, '\P{^Joining_Group:	 	reh}', "");
Expect(0, 1584, '\p{Joining_Group:	 	reh}', "");
Expect(1, 1584, '\p{^Joining_Group:	 	reh}', "");
Expect(1, 1584, '\P{Joining_Group:	 	reh}', "");
Expect(0, 1584, '\P{^Joining_Group:	 	reh}', "");
Error('\p{Jg= -REH:=}');
Error('\P{Jg= -REH:=}');
Expect(1, 1586, '\p{Jg:reh}', "");
Expect(0, 1586, '\p{^Jg:reh}', "");
Expect(0, 1586, '\P{Jg:reh}', "");
Expect(1, 1586, '\P{^Jg:reh}', "");
Expect(0, 1584, '\p{Jg:reh}', "");
Expect(1, 1584, '\p{^Jg:reh}', "");
Expect(1, 1584, '\P{Jg:reh}', "");
Expect(0, 1584, '\P{^Jg:reh}', "");
Expect(1, 1586, '\p{Jg= Reh}', "");
Expect(0, 1586, '\p{^Jg= Reh}', "");
Expect(0, 1586, '\P{Jg= Reh}', "");
Expect(1, 1586, '\P{^Jg= Reh}', "");
Expect(0, 1584, '\p{Jg= Reh}', "");
Expect(1, 1584, '\p{^Jg= Reh}', "");
Expect(1, 1584, '\P{Jg= Reh}', "");
Expect(0, 1584, '\P{^Jg= Reh}', "");
Error('\p{Is_Joining_Group=-/a/reh}');
Error('\P{Is_Joining_Group=-/a/reh}');
Expect(1, 1586, '\p{Is_Joining_Group=reh}', "");
Expect(0, 1586, '\p{^Is_Joining_Group=reh}', "");
Expect(0, 1586, '\P{Is_Joining_Group=reh}', "");
Expect(1, 1586, '\P{^Is_Joining_Group=reh}', "");
Expect(0, 1584, '\p{Is_Joining_Group=reh}', "");
Expect(1, 1584, '\p{^Is_Joining_Group=reh}', "");
Expect(1, 1584, '\P{Is_Joining_Group=reh}', "");
Expect(0, 1584, '\P{^Is_Joining_Group=reh}', "");
Expect(1, 1586, '\p{Is_Joining_Group=	_Reh}', "");
Expect(0, 1586, '\p{^Is_Joining_Group=	_Reh}', "");
Expect(0, 1586, '\P{Is_Joining_Group=	_Reh}', "");
Expect(1, 1586, '\P{^Is_Joining_Group=	_Reh}', "");
Expect(0, 1584, '\p{Is_Joining_Group=	_Reh}', "");
Expect(1, 1584, '\p{^Is_Joining_Group=	_Reh}', "");
Expect(1, 1584, '\P{Is_Joining_Group=	_Reh}', "");
Expect(0, 1584, '\P{^Is_Joining_Group=	_Reh}', "");
Error('\p{Is_Jg= _reh:=}');
Error('\P{Is_Jg= _reh:=}');
Expect(1, 1586, '\p{Is_Jg=reh}', "");
Expect(0, 1586, '\p{^Is_Jg=reh}', "");
Expect(0, 1586, '\P{Is_Jg=reh}', "");
Expect(1, 1586, '\P{^Is_Jg=reh}', "");
Expect(0, 1584, '\p{Is_Jg=reh}', "");
Expect(1, 1584, '\p{^Is_Jg=reh}', "");
Expect(1, 1584, '\P{Is_Jg=reh}', "");
Expect(0, 1584, '\P{^Is_Jg=reh}', "");
Expect(1, 1586, '\p{Is_Jg=REH}', "");
Expect(0, 1586, '\p{^Is_Jg=REH}', "");
Expect(0, 1586, '\P{Is_Jg=REH}', "");
Expect(1, 1586, '\P{^Is_Jg=REH}', "");
Expect(0, 1584, '\p{Is_Jg=REH}', "");
Expect(1, 1584, '\p{^Is_Jg=REH}', "");
Expect(1, 1584, '\P{Is_Jg=REH}', "");
Expect(0, 1584, '\P{^Is_Jg=REH}', "");
Error('\p{Joining_Group=_ZAIN:=}');
Error('\P{Joining_Group=_ZAIN:=}');
Expect(1, 1817, '\p{Joining_Group=zain}', "");
Expect(0, 1817, '\p{^Joining_Group=zain}', "");
Expect(0, 1817, '\P{Joining_Group=zain}', "");
Expect(1, 1817, '\P{^Joining_Group=zain}', "");
Expect(0, 1816, '\p{Joining_Group=zain}', "");
Expect(1, 1816, '\p{^Joining_Group=zain}', "");
Expect(1, 1816, '\P{Joining_Group=zain}', "");
Expect(0, 1816, '\P{^Joining_Group=zain}', "");
Expect(1, 1817, '\p{Joining_Group=_ zain}', "");
Expect(0, 1817, '\p{^Joining_Group=_ zain}', "");
Expect(0, 1817, '\P{Joining_Group=_ zain}', "");
Expect(1, 1817, '\P{^Joining_Group=_ zain}', "");
Expect(0, 1816, '\p{Joining_Group=_ zain}', "");
Expect(1, 1816, '\p{^Joining_Group=_ zain}', "");
Expect(1, 1816, '\P{Joining_Group=_ zain}', "");
Expect(0, 1816, '\P{^Joining_Group=_ zain}', "");
Error('\p{Jg=:=-	Zain}');
Error('\P{Jg=:=-	Zain}');
Expect(1, 1817, '\p{Jg=zain}', "");
Expect(0, 1817, '\p{^Jg=zain}', "");
Expect(0, 1817, '\P{Jg=zain}', "");
Expect(1, 1817, '\P{^Jg=zain}', "");
Expect(0, 1816, '\p{Jg=zain}', "");
Expect(1, 1816, '\p{^Jg=zain}', "");
Expect(1, 1816, '\P{Jg=zain}', "");
Expect(0, 1816, '\P{^Jg=zain}', "");
Expect(1, 1817, '\p{Jg=_ Zain}', "");
Expect(0, 1817, '\p{^Jg=_ Zain}', "");
Expect(0, 1817, '\P{Jg=_ Zain}', "");
Expect(1, 1817, '\P{^Jg=_ Zain}', "");
Expect(0, 1816, '\p{Jg=_ Zain}', "");
Expect(1, 1816, '\p{^Jg=_ Zain}', "");
Expect(1, 1816, '\P{Jg=_ Zain}', "");
Expect(0, 1816, '\P{^Jg=_ Zain}', "");
Error('\p{Is_Joining_Group=:=zain}');
Error('\P{Is_Joining_Group=:=zain}');
Expect(1, 1817, '\p{Is_Joining_Group:	zain}', "");
Expect(0, 1817, '\p{^Is_Joining_Group:	zain}', "");
Expect(0, 1817, '\P{Is_Joining_Group:	zain}', "");
Expect(1, 1817, '\P{^Is_Joining_Group:	zain}', "");
Expect(0, 1816, '\p{Is_Joining_Group:	zain}', "");
Expect(1, 1816, '\p{^Is_Joining_Group:	zain}', "");
Expect(1, 1816, '\P{Is_Joining_Group:	zain}', "");
Expect(0, 1816, '\P{^Is_Joining_Group:	zain}', "");
Expect(1, 1817, '\p{Is_Joining_Group: _zain}', "");
Expect(0, 1817, '\p{^Is_Joining_Group: _zain}', "");
Expect(0, 1817, '\P{Is_Joining_Group: _zain}', "");
Expect(1, 1817, '\P{^Is_Joining_Group: _zain}', "");
Expect(0, 1816, '\p{Is_Joining_Group: _zain}', "");
Expect(1, 1816, '\p{^Is_Joining_Group: _zain}', "");
Expect(1, 1816, '\P{Is_Joining_Group: _zain}', "");
Expect(0, 1816, '\P{^Is_Joining_Group: _zain}', "");
Error('\p{Is_Jg=_	zain/a/}');
Error('\P{Is_Jg=_	zain/a/}');
Expect(1, 1817, '\p{Is_Jg=zain}', "");
Expect(0, 1817, '\p{^Is_Jg=zain}', "");
Expect(0, 1817, '\P{Is_Jg=zain}', "");
Expect(1, 1817, '\P{^Is_Jg=zain}', "");
Expect(0, 1816, '\p{Is_Jg=zain}', "");
Expect(1, 1816, '\p{^Is_Jg=zain}', "");
Expect(1, 1816, '\P{Is_Jg=zain}', "");
Expect(0, 1816, '\P{^Is_Jg=zain}', "");
Expect(1, 1817, '\p{Is_Jg=--zain}', "");
Expect(0, 1817, '\p{^Is_Jg=--zain}', "");
Expect(0, 1817, '\P{Is_Jg=--zain}', "");
Expect(1, 1817, '\P{^Is_Jg=--zain}', "");
Expect(0, 1816, '\p{Is_Jg=--zain}', "");
Expect(1, 1816, '\p{^Is_Jg=--zain}', "");
Expect(1, 1816, '\P{Is_Jg=--zain}', "");
Expect(0, 1816, '\P{^Is_Jg=--zain}', "");
Error('\p{Joining_Group=_:=Alef}');
Error('\P{Joining_Group=_:=Alef}');
Expect(1, 1571, '\p{Joining_Group=alef}', "");
Expect(0, 1571, '\p{^Joining_Group=alef}', "");
Expect(0, 1571, '\P{Joining_Group=alef}', "");
Expect(1, 1571, '\P{^Joining_Group=alef}', "");
Expect(0, 1569, '\p{Joining_Group=alef}', "");
Expect(1, 1569, '\p{^Joining_Group=alef}', "");
Expect(1, 1569, '\P{Joining_Group=alef}', "");
Expect(0, 1569, '\P{^Joining_Group=alef}', "");
Expect(1, 1571, '\p{Joining_Group=  Alef}', "");
Expect(0, 1571, '\p{^Joining_Group=  Alef}', "");
Expect(0, 1571, '\P{Joining_Group=  Alef}', "");
Expect(1, 1571, '\P{^Joining_Group=  Alef}', "");
Expect(0, 1569, '\p{Joining_Group=  Alef}', "");
Expect(1, 1569, '\p{^Joining_Group=  Alef}', "");
Expect(1, 1569, '\P{Joining_Group=  Alef}', "");
Expect(0, 1569, '\P{^Joining_Group=  Alef}', "");
Error('\p{Jg=_alef:=}');
Error('\P{Jg=_alef:=}');
Expect(1, 1571, '\p{Jg=alef}', "");
Expect(0, 1571, '\p{^Jg=alef}', "");
Expect(0, 1571, '\P{Jg=alef}', "");
Expect(1, 1571, '\P{^Jg=alef}', "");
Expect(0, 1569, '\p{Jg=alef}', "");
Expect(1, 1569, '\p{^Jg=alef}', "");
Expect(1, 1569, '\P{Jg=alef}', "");
Expect(0, 1569, '\P{^Jg=alef}', "");
Expect(1, 1571, '\p{Jg= _ALEF}', "");
Expect(0, 1571, '\p{^Jg= _ALEF}', "");
Expect(0, 1571, '\P{Jg= _ALEF}', "");
Expect(1, 1571, '\P{^Jg= _ALEF}', "");
Expect(0, 1569, '\p{Jg= _ALEF}', "");
Expect(1, 1569, '\p{^Jg= _ALEF}', "");
Expect(1, 1569, '\P{Jg= _ALEF}', "");
Expect(0, 1569, '\P{^Jg= _ALEF}', "");
Error('\p{Is_Joining_Group=_/a/ALEF}');
Error('\P{Is_Joining_Group=_/a/ALEF}');
Expect(1, 1571, '\p{Is_Joining_Group=alef}', "");
Expect(0, 1571, '\p{^Is_Joining_Group=alef}', "");
Expect(0, 1571, '\P{Is_Joining_Group=alef}', "");
Expect(1, 1571, '\P{^Is_Joining_Group=alef}', "");
Expect(0, 1569, '\p{Is_Joining_Group=alef}', "");
Expect(1, 1569, '\p{^Is_Joining_Group=alef}', "");
Expect(1, 1569, '\P{Is_Joining_Group=alef}', "");
Expect(0, 1569, '\P{^Is_Joining_Group=alef}', "");
Expect(1, 1571, '\p{Is_Joining_Group=		Alef}', "");
Expect(0, 1571, '\p{^Is_Joining_Group=		Alef}', "");
Expect(0, 1571, '\P{Is_Joining_Group=		Alef}', "");
Expect(1, 1571, '\P{^Is_Joining_Group=		Alef}', "");
Expect(0, 1569, '\p{Is_Joining_Group=		Alef}', "");
Expect(1, 1569, '\p{^Is_Joining_Group=		Alef}', "");
Expect(1, 1569, '\P{Is_Joining_Group=		Alef}', "");
Expect(0, 1569, '\P{^Is_Joining_Group=		Alef}', "");
Error('\p{Is_Jg=:= _alef}');
Error('\P{Is_Jg=:= _alef}');
Expect(1, 1571, '\p{Is_Jg=alef}', "");
Expect(0, 1571, '\p{^Is_Jg=alef}', "");
Expect(0, 1571, '\P{Is_Jg=alef}', "");
Expect(1, 1571, '\P{^Is_Jg=alef}', "");
Expect(0, 1569, '\p{Is_Jg=alef}', "");
Expect(1, 1569, '\p{^Is_Jg=alef}', "");
Expect(1, 1569, '\P{Is_Jg=alef}', "");
Expect(0, 1569, '\P{^Is_Jg=alef}', "");
Expect(1, 1571, '\p{Is_Jg=-ALEF}', "");
Expect(0, 1571, '\p{^Is_Jg=-ALEF}', "");
Expect(0, 1571, '\P{Is_Jg=-ALEF}', "");
Expect(1, 1571, '\P{^Is_Jg=-ALEF}', "");
Expect(0, 1569, '\p{Is_Jg=-ALEF}', "");
Expect(1, 1569, '\p{^Is_Jg=-ALEF}', "");
Expect(1, 1569, '\P{Is_Jg=-ALEF}', "");
Expect(0, 1569, '\P{^Is_Jg=-ALEF}', "");
Error('\p{Joining_Group:_:=GAMAL}');
Error('\P{Joining_Group:_:=GAMAL}');
Expect(1, 1812, '\p{Joining_Group: gamal}', "");
Expect(0, 1812, '\p{^Joining_Group: gamal}', "");
Expect(0, 1812, '\P{Joining_Group: gamal}', "");
Expect(1, 1812, '\P{^Joining_Group: gamal}', "");
Expect(0, 1810, '\p{Joining_Group: gamal}', "");
Expect(1, 1810, '\p{^Joining_Group: gamal}', "");
Expect(1, 1810, '\P{Joining_Group: gamal}', "");
Expect(0, 1810, '\P{^Joining_Group: gamal}', "");
Expect(1, 1812, '\p{Joining_Group=	-Gamal}', "");
Expect(0, 1812, '\p{^Joining_Group=	-Gamal}', "");
Expect(0, 1812, '\P{Joining_Group=	-Gamal}', "");
Expect(1, 1812, '\P{^Joining_Group=	-Gamal}', "");
Expect(0, 1810, '\p{Joining_Group=	-Gamal}', "");
Expect(1, 1810, '\p{^Joining_Group=	-Gamal}', "");
Expect(1, 1810, '\P{Joining_Group=	-Gamal}', "");
Expect(0, 1810, '\P{^Joining_Group=	-Gamal}', "");
Error('\p{Jg=_:=Gamal}');
Error('\P{Jg=_:=Gamal}');
Expect(1, 1812, '\p{Jg=gamal}', "");
Expect(0, 1812, '\p{^Jg=gamal}', "");
Expect(0, 1812, '\P{Jg=gamal}', "");
Expect(1, 1812, '\P{^Jg=gamal}', "");
Expect(0, 1810, '\p{Jg=gamal}', "");
Expect(1, 1810, '\p{^Jg=gamal}', "");
Expect(1, 1810, '\P{Jg=gamal}', "");
Expect(0, 1810, '\P{^Jg=gamal}', "");
Expect(1, 1812, '\p{Jg= Gamal}', "");
Expect(0, 1812, '\p{^Jg= Gamal}', "");
Expect(0, 1812, '\P{Jg= Gamal}', "");
Expect(1, 1812, '\P{^Jg= Gamal}', "");
Expect(0, 1810, '\p{Jg= Gamal}', "");
Expect(1, 1810, '\p{^Jg= Gamal}', "");
Expect(1, 1810, '\P{Jg= Gamal}', "");
Expect(0, 1810, '\P{^Jg= Gamal}', "");
Error('\p{Is_Joining_Group=/a/_	GAMAL}');
Error('\P{Is_Joining_Group=/a/_	GAMAL}');
Expect(1, 1812, '\p{Is_Joining_Group:	gamal}', "");
Expect(0, 1812, '\p{^Is_Joining_Group:	gamal}', "");
Expect(0, 1812, '\P{Is_Joining_Group:	gamal}', "");
Expect(1, 1812, '\P{^Is_Joining_Group:	gamal}', "");
Expect(0, 1810, '\p{Is_Joining_Group:	gamal}', "");
Expect(1, 1810, '\p{^Is_Joining_Group:	gamal}', "");
Expect(1, 1810, '\P{Is_Joining_Group:	gamal}', "");
Expect(0, 1810, '\P{^Is_Joining_Group:	gamal}', "");
Expect(1, 1812, '\p{Is_Joining_Group=		GAMAL}', "");
Expect(0, 1812, '\p{^Is_Joining_Group=		GAMAL}', "");
Expect(0, 1812, '\P{Is_Joining_Group=		GAMAL}', "");
Expect(1, 1812, '\P{^Is_Joining_Group=		GAMAL}', "");
Expect(0, 1810, '\p{Is_Joining_Group=		GAMAL}', "");
Expect(1, 1810, '\p{^Is_Joining_Group=		GAMAL}', "");
Expect(1, 1810, '\P{Is_Joining_Group=		GAMAL}', "");
Expect(0, 1810, '\P{^Is_Joining_Group=		GAMAL}', "");
Error('\p{Is_Jg=	/a/GAMAL}');
Error('\P{Is_Jg=	/a/GAMAL}');
Expect(1, 1812, '\p{Is_Jg=gamal}', "");
Expect(0, 1812, '\p{^Is_Jg=gamal}', "");
Expect(0, 1812, '\P{Is_Jg=gamal}', "");
Expect(1, 1812, '\P{^Is_Jg=gamal}', "");
Expect(0, 1810, '\p{Is_Jg=gamal}', "");
Expect(1, 1810, '\p{^Is_Jg=gamal}', "");
Expect(1, 1810, '\P{Is_Jg=gamal}', "");
Expect(0, 1810, '\P{^Is_Jg=gamal}', "");
Expect(1, 1812, '\p{Is_Jg=__gamal}', "");
Expect(0, 1812, '\p{^Is_Jg=__gamal}', "");
Expect(0, 1812, '\P{Is_Jg=__gamal}', "");
Expect(1, 1812, '\P{^Is_Jg=__gamal}', "");
Expect(0, 1810, '\p{Is_Jg=__gamal}', "");
Expect(1, 1810, '\p{^Is_Jg=__gamal}', "");
Expect(1, 1810, '\P{Is_Jg=__gamal}', "");
Expect(0, 1810, '\P{^Is_Jg=__gamal}', "");
Error('\p{Joining_Group=/a/	meem}');
Error('\P{Joining_Group=/a/	meem}');
Expect(1, 1605, '\p{Joining_Group=meem}', "");
Expect(0, 1605, '\p{^Joining_Group=meem}', "");
Expect(0, 1605, '\P{Joining_Group=meem}', "");
Expect(1, 1605, '\P{^Joining_Group=meem}', "");
Expect(0, 1604, '\p{Joining_Group=meem}', "");
Expect(1, 1604, '\p{^Joining_Group=meem}', "");
Expect(1, 1604, '\P{Joining_Group=meem}', "");
Expect(0, 1604, '\P{^Joining_Group=meem}', "");
Expect(1, 1605, '\p{Joining_Group=	-Meem}', "");
Expect(0, 1605, '\p{^Joining_Group=	-Meem}', "");
Expect(0, 1605, '\P{Joining_Group=	-Meem}', "");
Expect(1, 1605, '\P{^Joining_Group=	-Meem}', "");
Expect(0, 1604, '\p{Joining_Group=	-Meem}', "");
Expect(1, 1604, '\p{^Joining_Group=	-Meem}', "");
Expect(1, 1604, '\P{Joining_Group=	-Meem}', "");
Expect(0, 1604, '\P{^Joining_Group=	-Meem}', "");
Error('\p{Jg=/a/__Meem}');
Error('\P{Jg=/a/__Meem}');
Expect(1, 1605, '\p{Jg=meem}', "");
Expect(0, 1605, '\p{^Jg=meem}', "");
Expect(0, 1605, '\P{Jg=meem}', "");
Expect(1, 1605, '\P{^Jg=meem}', "");
Expect(0, 1604, '\p{Jg=meem}', "");
Expect(1, 1604, '\p{^Jg=meem}', "");
Expect(1, 1604, '\P{Jg=meem}', "");
Expect(0, 1604, '\P{^Jg=meem}', "");
Expect(1, 1605, '\p{Jg=  MEEM}', "");
Expect(0, 1605, '\p{^Jg=  MEEM}', "");
Expect(0, 1605, '\P{Jg=  MEEM}', "");
Expect(1, 1605, '\P{^Jg=  MEEM}', "");
Expect(0, 1604, '\p{Jg=  MEEM}', "");
Expect(1, 1604, '\p{^Jg=  MEEM}', "");
Expect(1, 1604, '\P{Jg=  MEEM}', "");
Expect(0, 1604, '\P{^Jg=  MEEM}', "");
Error('\p{Is_Joining_Group=:=	-meem}');
Error('\P{Is_Joining_Group=:=	-meem}');
Expect(1, 1605, '\p{Is_Joining_Group: meem}', "");
Expect(0, 1605, '\p{^Is_Joining_Group: meem}', "");
Expect(0, 1605, '\P{Is_Joining_Group: meem}', "");
Expect(1, 1605, '\P{^Is_Joining_Group: meem}', "");
Expect(0, 1604, '\p{Is_Joining_Group: meem}', "");
Expect(1, 1604, '\p{^Is_Joining_Group: meem}', "");
Expect(1, 1604, '\P{Is_Joining_Group: meem}', "");
Expect(0, 1604, '\P{^Is_Joining_Group: meem}', "");
Expect(1, 1605, '\p{Is_Joining_Group= 	Meem}', "");
Expect(0, 1605, '\p{^Is_Joining_Group= 	Meem}', "");
Expect(0, 1605, '\P{Is_Joining_Group= 	Meem}', "");
Expect(1, 1605, '\P{^Is_Joining_Group= 	Meem}', "");
Expect(0, 1604, '\p{Is_Joining_Group= 	Meem}', "");
Expect(1, 1604, '\p{^Is_Joining_Group= 	Meem}', "");
Expect(1, 1604, '\P{Is_Joining_Group= 	Meem}', "");
Expect(0, 1604, '\P{^Is_Joining_Group= 	Meem}', "");
Error('\p{Is_Jg=--Meem:=}');
Error('\P{Is_Jg=--Meem:=}');
Expect(1, 1605, '\p{Is_Jg=meem}', "");
Expect(0, 1605, '\p{^Is_Jg=meem}', "");
Expect(0, 1605, '\P{Is_Jg=meem}', "");
Expect(1, 1605, '\P{^Is_Jg=meem}', "");
Expect(0, 1604, '\p{Is_Jg=meem}', "");
Expect(1, 1604, '\p{^Is_Jg=meem}', "");
Expect(1, 1604, '\P{Is_Jg=meem}', "");
Expect(0, 1604, '\P{^Is_Jg=meem}', "");
Expect(1, 1605, '\p{Is_Jg=-	Meem}', "");
Expect(0, 1605, '\p{^Is_Jg=-	Meem}', "");
Expect(0, 1605, '\P{Is_Jg=-	Meem}', "");
Expect(1, 1605, '\P{^Is_Jg=-	Meem}', "");
Expect(0, 1604, '\p{Is_Jg=-	Meem}', "");
Expect(1, 1604, '\p{^Is_Jg=-	Meem}', "");
Expect(1, 1604, '\P{Is_Jg=-	Meem}', "");
Expect(0, 1604, '\P{^Is_Jg=-	Meem}', "");
Error('\p{Joining_Group=-	Sadhe/a/}');
Error('\P{Joining_Group=-	Sadhe/a/}');
Expect(1, 1832, '\p{Joining_Group:sadhe}', "");
Expect(0, 1832, '\p{^Joining_Group:sadhe}', "");
Expect(0, 1832, '\P{Joining_Group:sadhe}', "");
Expect(1, 1832, '\P{^Joining_Group:sadhe}', "");
Expect(0, 1831, '\p{Joining_Group:sadhe}', "");
Expect(1, 1831, '\p{^Joining_Group:sadhe}', "");
Expect(1, 1831, '\P{Joining_Group:sadhe}', "");
Expect(0, 1831, '\P{^Joining_Group:sadhe}', "");
Expect(1, 1832, '\p{Joining_Group=_Sadhe}', "");
Expect(0, 1832, '\p{^Joining_Group=_Sadhe}', "");
Expect(0, 1832, '\P{Joining_Group=_Sadhe}', "");
Expect(1, 1832, '\P{^Joining_Group=_Sadhe}', "");
Expect(0, 1831, '\p{Joining_Group=_Sadhe}', "");
Expect(1, 1831, '\p{^Joining_Group=_Sadhe}', "");
Expect(1, 1831, '\P{Joining_Group=_Sadhe}', "");
Expect(0, 1831, '\P{^Joining_Group=_Sadhe}', "");
Error('\p{Jg=/a/Sadhe}');
Error('\P{Jg=/a/Sadhe}');
Expect(1, 1832, '\p{Jg=sadhe}', "");
Expect(0, 1832, '\p{^Jg=sadhe}', "");
Expect(0, 1832, '\P{Jg=sadhe}', "");
Expect(1, 1832, '\P{^Jg=sadhe}', "");
Expect(0, 1831, '\p{Jg=sadhe}', "");
Expect(1, 1831, '\p{^Jg=sadhe}', "");
Expect(1, 1831, '\P{Jg=sadhe}', "");
Expect(0, 1831, '\P{^Jg=sadhe}', "");
Expect(1, 1832, '\p{Jg=	Sadhe}', "");
Expect(0, 1832, '\p{^Jg=	Sadhe}', "");
Expect(0, 1832, '\P{Jg=	Sadhe}', "");
Expect(1, 1832, '\P{^Jg=	Sadhe}', "");
Expect(0, 1831, '\p{Jg=	Sadhe}', "");
Expect(1, 1831, '\p{^Jg=	Sadhe}', "");
Expect(1, 1831, '\P{Jg=	Sadhe}', "");
Expect(0, 1831, '\P{^Jg=	Sadhe}', "");
Error('\p{Is_Joining_Group= /a/Sadhe}');
Error('\P{Is_Joining_Group= /a/Sadhe}');
Expect(1, 1832, '\p{Is_Joining_Group=sadhe}', "");
Expect(0, 1832, '\p{^Is_Joining_Group=sadhe}', "");
Expect(0, 1832, '\P{Is_Joining_Group=sadhe}', "");
Expect(1, 1832, '\P{^Is_Joining_Group=sadhe}', "");
Expect(0, 1831, '\p{Is_Joining_Group=sadhe}', "");
Expect(1, 1831, '\p{^Is_Joining_Group=sadhe}', "");
Expect(1, 1831, '\P{Is_Joining_Group=sadhe}', "");
Expect(0, 1831, '\P{^Is_Joining_Group=sadhe}', "");
Expect(1, 1832, '\p{Is_Joining_Group=	sadhe}', "");
Expect(0, 1832, '\p{^Is_Joining_Group=	sadhe}', "");
Expect(0, 1832, '\P{Is_Joining_Group=	sadhe}', "");
Expect(1, 1832, '\P{^Is_Joining_Group=	sadhe}', "");
Expect(0, 1831, '\p{Is_Joining_Group=	sadhe}', "");
Expect(1, 1831, '\p{^Is_Joining_Group=	sadhe}', "");
Expect(1, 1831, '\P{Is_Joining_Group=	sadhe}', "");
Expect(0, 1831, '\P{^Is_Joining_Group=	sadhe}', "");
Error('\p{Is_Jg=__SADHE/a/}');
Error('\P{Is_Jg=__SADHE/a/}');
Expect(1, 1832, '\p{Is_Jg=sadhe}', "");
Expect(0, 1832, '\p{^Is_Jg=sadhe}', "");
Expect(0, 1832, '\P{Is_Jg=sadhe}', "");
Expect(1, 1832, '\P{^Is_Jg=sadhe}', "");
Expect(0, 1831, '\p{Is_Jg=sadhe}', "");
Expect(1, 1831, '\p{^Is_Jg=sadhe}', "");
Expect(1, 1831, '\P{Is_Jg=sadhe}', "");
Expect(0, 1831, '\P{^Is_Jg=sadhe}', "");
Expect(1, 1832, '\p{Is_Jg=_ Sadhe}', "");
Expect(0, 1832, '\p{^Is_Jg=_ Sadhe}', "");
Expect(0, 1832, '\P{Is_Jg=_ Sadhe}', "");
Expect(1, 1832, '\P{^Is_Jg=_ Sadhe}', "");
Expect(0, 1831, '\p{Is_Jg=_ Sadhe}', "");
Expect(1, 1831, '\p{^Is_Jg=_ Sadhe}', "");
Expect(1, 1831, '\P{Is_Jg=_ Sadhe}', "");
Expect(0, 1831, '\P{^Is_Jg=_ Sadhe}', "");
Error('\p{Joining_Group: :=Beh}');
Error('\P{Joining_Group: :=Beh}');
Expect(1, 1576, '\p{Joining_Group=beh}', "");
Expect(0, 1576, '\p{^Joining_Group=beh}', "");
Expect(0, 1576, '\P{Joining_Group=beh}', "");
Expect(1, 1576, '\P{^Joining_Group=beh}', "");
Expect(0, 1575, '\p{Joining_Group=beh}', "");
Expect(1, 1575, '\p{^Joining_Group=beh}', "");
Expect(1, 1575, '\P{Joining_Group=beh}', "");
Expect(0, 1575, '\P{^Joining_Group=beh}', "");
Expect(1, 1576, '\p{Joining_Group=	beh}', "");
Expect(0, 1576, '\p{^Joining_Group=	beh}', "");
Expect(0, 1576, '\P{Joining_Group=	beh}', "");
Expect(1, 1576, '\P{^Joining_Group=	beh}', "");
Expect(0, 1575, '\p{Joining_Group=	beh}', "");
Expect(1, 1575, '\p{^Joining_Group=	beh}', "");
Expect(1, 1575, '\P{Joining_Group=	beh}', "");
Expect(0, 1575, '\P{^Joining_Group=	beh}', "");
Error('\p{Jg= _Beh/a/}');
Error('\P{Jg= _Beh/a/}');
Expect(1, 1576, '\p{Jg=beh}', "");
Expect(0, 1576, '\p{^Jg=beh}', "");
Expect(0, 1576, '\P{Jg=beh}', "");
Expect(1, 1576, '\P{^Jg=beh}', "");
Expect(0, 1575, '\p{Jg=beh}', "");
Expect(1, 1575, '\p{^Jg=beh}', "");
Expect(1, 1575, '\P{Jg=beh}', "");
Expect(0, 1575, '\P{^Jg=beh}', "");
Expect(1, 1576, '\p{Jg=__BEH}', "");
Expect(0, 1576, '\p{^Jg=__BEH}', "");
Expect(0, 1576, '\P{Jg=__BEH}', "");
Expect(1, 1576, '\P{^Jg=__BEH}', "");
Expect(0, 1575, '\p{Jg=__BEH}', "");
Expect(1, 1575, '\p{^Jg=__BEH}', "");
Expect(1, 1575, '\P{Jg=__BEH}', "");
Expect(0, 1575, '\P{^Jg=__BEH}', "");
Error('\p{Is_Joining_Group=/a/ Beh}');
Error('\P{Is_Joining_Group=/a/ Beh}');
Expect(1, 1576, '\p{Is_Joining_Group=beh}', "");
Expect(0, 1576, '\p{^Is_Joining_Group=beh}', "");
Expect(0, 1576, '\P{Is_Joining_Group=beh}', "");
Expect(1, 1576, '\P{^Is_Joining_Group=beh}', "");
Expect(0, 1575, '\p{Is_Joining_Group=beh}', "");
Expect(1, 1575, '\p{^Is_Joining_Group=beh}', "");
Expect(1, 1575, '\P{Is_Joining_Group=beh}', "");
Expect(0, 1575, '\P{^Is_Joining_Group=beh}', "");
Expect(1, 1576, '\p{Is_Joining_Group=	BEH}', "");
Expect(0, 1576, '\p{^Is_Joining_Group=	BEH}', "");
Expect(0, 1576, '\P{Is_Joining_Group=	BEH}', "");
Expect(1, 1576, '\P{^Is_Joining_Group=	BEH}', "");
Expect(0, 1575, '\p{Is_Joining_Group=	BEH}', "");
Expect(1, 1575, '\p{^Is_Joining_Group=	BEH}', "");
Expect(1, 1575, '\P{Is_Joining_Group=	BEH}', "");
Expect(0, 1575, '\P{^Is_Joining_Group=	BEH}', "");
Error('\p{Is_Jg=_Beh/a/}');
Error('\P{Is_Jg=_Beh/a/}');
Expect(1, 1576, '\p{Is_Jg=beh}', "");
Expect(0, 1576, '\p{^Is_Jg=beh}', "");
Expect(0, 1576, '\P{Is_Jg=beh}', "");
Expect(1, 1576, '\P{^Is_Jg=beh}', "");
Expect(0, 1575, '\p{Is_Jg=beh}', "");
Expect(1, 1575, '\p{^Is_Jg=beh}', "");
Expect(1, 1575, '\P{Is_Jg=beh}', "");
Expect(0, 1575, '\P{^Is_Jg=beh}', "");
Expect(1, 1576, '\p{Is_Jg=- Beh}', "");
Expect(0, 1576, '\p{^Is_Jg=- Beh}', "");
Expect(0, 1576, '\P{Is_Jg=- Beh}', "");
Expect(1, 1576, '\P{^Is_Jg=- Beh}', "");
Expect(0, 1575, '\p{Is_Jg=- Beh}', "");
Expect(1, 1575, '\p{^Is_Jg=- Beh}', "");
Expect(1, 1575, '\P{Is_Jg=- Beh}', "");
Expect(0, 1575, '\P{^Is_Jg=- Beh}', "");
Error('\p{Joining_Group=-	Yeh:=With-tail}');
Error('\P{Joining_Group=-	Yeh:=With-tail}');
Expect(1, 1741, '\p{Joining_Group=yehwithtail}', "");
Expect(0, 1741, '\p{^Joining_Group=yehwithtail}', "");
Expect(0, 1741, '\P{Joining_Group=yehwithtail}', "");
Expect(1, 1741, '\P{^Joining_Group=yehwithtail}', "");
Expect(0, 1740, '\p{Joining_Group=yehwithtail}', "");
Expect(1, 1740, '\p{^Joining_Group=yehwithtail}', "");
Expect(1, 1740, '\P{Joining_Group=yehwithtail}', "");
Expect(0, 1740, '\P{^Joining_Group=yehwithtail}', "");
Expect(1, 1741, '\p{Joining_Group=__YEHWith_Tail}', "");
Expect(0, 1741, '\p{^Joining_Group=__YEHWith_Tail}', "");
Expect(0, 1741, '\P{Joining_Group=__YEHWith_Tail}', "");
Expect(1, 1741, '\P{^Joining_Group=__YEHWith_Tail}', "");
Expect(0, 1740, '\p{Joining_Group=__YEHWith_Tail}', "");
Expect(1, 1740, '\p{^Joining_Group=__YEHWith_Tail}', "");
Expect(1, 1740, '\P{Joining_Group=__YEHWith_Tail}', "");
Expect(0, 1740, '\P{^Joining_Group=__YEHWith_Tail}', "");
Error('\p{Jg:     yeh WITH_Tail:=}');
Error('\P{Jg:     yeh WITH_Tail:=}');
Expect(1, 1741, '\p{Jg=yehwithtail}', "");
Expect(0, 1741, '\p{^Jg=yehwithtail}', "");
Expect(0, 1741, '\P{Jg=yehwithtail}', "");
Expect(1, 1741, '\P{^Jg=yehwithtail}', "");
Expect(0, 1740, '\p{Jg=yehwithtail}', "");
Expect(1, 1740, '\p{^Jg=yehwithtail}', "");
Expect(1, 1740, '\P{Jg=yehwithtail}', "");
Expect(0, 1740, '\P{^Jg=yehwithtail}', "");
Expect(1, 1741, '\p{Jg=_YehWith-Tail}', "");
Expect(0, 1741, '\p{^Jg=_YehWith-Tail}', "");
Expect(0, 1741, '\P{Jg=_YehWith-Tail}', "");
Expect(1, 1741, '\P{^Jg=_YehWith-Tail}', "");
Expect(0, 1740, '\p{Jg=_YehWith-Tail}', "");
Expect(1, 1740, '\p{^Jg=_YehWith-Tail}', "");
Expect(1, 1740, '\P{Jg=_YehWith-Tail}', "");
Expect(0, 1740, '\P{^Jg=_YehWith-Tail}', "");
Error('\p{Is_Joining_Group= _Yeh-withTail/a/}');
Error('\P{Is_Joining_Group= _Yeh-withTail/a/}');
Expect(1, 1741, '\p{Is_Joining_Group=yehwithtail}', "");
Expect(0, 1741, '\p{^Is_Joining_Group=yehwithtail}', "");
Expect(0, 1741, '\P{Is_Joining_Group=yehwithtail}', "");
Expect(1, 1741, '\P{^Is_Joining_Group=yehwithtail}', "");
Expect(0, 1740, '\p{Is_Joining_Group=yehwithtail}', "");
Expect(1, 1740, '\p{^Is_Joining_Group=yehwithtail}', "");
Expect(1, 1740, '\P{Is_Joining_Group=yehwithtail}', "");
Expect(0, 1740, '\P{^Is_Joining_Group=yehwithtail}', "");
Expect(1, 1741, '\p{Is_Joining_Group:	-yehWithTAIL}', "");
Expect(0, 1741, '\p{^Is_Joining_Group:	-yehWithTAIL}', "");
Expect(0, 1741, '\P{Is_Joining_Group:	-yehWithTAIL}', "");
Expect(1, 1741, '\P{^Is_Joining_Group:	-yehWithTAIL}', "");
Expect(0, 1740, '\p{Is_Joining_Group:	-yehWithTAIL}', "");
Expect(1, 1740, '\p{^Is_Joining_Group:	-yehWithTAIL}', "");
Expect(1, 1740, '\P{Is_Joining_Group:	-yehWithTAIL}', "");
Expect(0, 1740, '\P{^Is_Joining_Group:	-yehWithTAIL}', "");
Error('\p{Is_Jg=-Yeh_With-TAIL/a/}');
Error('\P{Is_Jg=-Yeh_With-TAIL/a/}');
Expect(1, 1741, '\p{Is_Jg=yehwithtail}', "");
Expect(0, 1741, '\p{^Is_Jg=yehwithtail}', "");
Expect(0, 1741, '\P{Is_Jg=yehwithtail}', "");
Expect(1, 1741, '\P{^Is_Jg=yehwithtail}', "");
Expect(0, 1740, '\p{Is_Jg=yehwithtail}', "");
Expect(1, 1740, '\p{^Is_Jg=yehwithtail}', "");
Expect(1, 1740, '\P{Is_Jg=yehwithtail}', "");
Expect(0, 1740, '\P{^Is_Jg=yehwithtail}', "");
Expect(1, 1741, '\p{Is_Jg=YEH	With Tail}', "");
Expect(0, 1741, '\p{^Is_Jg=YEH	With Tail}', "");
Expect(0, 1741, '\P{Is_Jg=YEH	With Tail}', "");
Expect(1, 1741, '\P{^Is_Jg=YEH	With Tail}', "");
Expect(0, 1740, '\p{Is_Jg=YEH	With Tail}', "");
Expect(1, 1740, '\p{^Is_Jg=YEH	With Tail}', "");
Expect(1, 1740, '\P{Is_Jg=YEH	With Tail}', "");
Expect(0, 1740, '\P{^Is_Jg=YEH	With Tail}', "");
Error('\p{Joining_Group= Tah/a/}');
Error('\P{Joining_Group= Tah/a/}');
Expect(1, 1592, '\p{Joining_Group=tah}', "");
Expect(0, 1592, '\p{^Joining_Group=tah}', "");
Expect(0, 1592, '\P{Joining_Group=tah}', "");
Expect(1, 1592, '\P{^Joining_Group=tah}', "");
Expect(0, 1590, '\p{Joining_Group=tah}', "");
Expect(1, 1590, '\p{^Joining_Group=tah}', "");
Expect(1, 1590, '\P{Joining_Group=tah}', "");
Expect(0, 1590, '\P{^Joining_Group=tah}', "");
Expect(1, 1592, '\p{Joining_Group=	_tah}', "");
Expect(0, 1592, '\p{^Joining_Group=	_tah}', "");
Expect(0, 1592, '\P{Joining_Group=	_tah}', "");
Expect(1, 1592, '\P{^Joining_Group=	_tah}', "");
Expect(0, 1590, '\p{Joining_Group=	_tah}', "");
Expect(1, 1590, '\p{^Joining_Group=	_tah}', "");
Expect(1, 1590, '\P{Joining_Group=	_tah}', "");
Expect(0, 1590, '\P{^Joining_Group=	_tah}', "");
Error('\p{Jg=_/a/tah}');
Error('\P{Jg=_/a/tah}');
Expect(1, 1592, '\p{Jg=tah}', "");
Expect(0, 1592, '\p{^Jg=tah}', "");
Expect(0, 1592, '\P{Jg=tah}', "");
Expect(1, 1592, '\P{^Jg=tah}', "");
Expect(0, 1590, '\p{Jg=tah}', "");
Expect(1, 1590, '\p{^Jg=tah}', "");
Expect(1, 1590, '\P{Jg=tah}', "");
Expect(0, 1590, '\P{^Jg=tah}', "");
Expect(1, 1592, '\p{Jg: _TAH}', "");
Expect(0, 1592, '\p{^Jg: _TAH}', "");
Expect(0, 1592, '\P{Jg: _TAH}', "");
Expect(1, 1592, '\P{^Jg: _TAH}', "");
Expect(0, 1590, '\p{Jg: _TAH}', "");
Expect(1, 1590, '\p{^Jg: _TAH}', "");
Expect(1, 1590, '\P{Jg: _TAH}', "");
Expect(0, 1590, '\P{^Jg: _TAH}', "");
Error('\p{Is_Joining_Group=	/a/Tah}');
Error('\P{Is_Joining_Group=	/a/Tah}');
Expect(1, 1592, '\p{Is_Joining_Group=tah}', "");
Expect(0, 1592, '\p{^Is_Joining_Group=tah}', "");
Expect(0, 1592, '\P{Is_Joining_Group=tah}', "");
Expect(1, 1592, '\P{^Is_Joining_Group=tah}', "");
Expect(0, 1590, '\p{Is_Joining_Group=tah}', "");
Expect(1, 1590, '\p{^Is_Joining_Group=tah}', "");
Expect(1, 1590, '\P{Is_Joining_Group=tah}', "");
Expect(0, 1590, '\P{^Is_Joining_Group=tah}', "");
Expect(1, 1592, '\p{Is_Joining_Group= TAH}', "");
Expect(0, 1592, '\p{^Is_Joining_Group= TAH}', "");
Expect(0, 1592, '\P{Is_Joining_Group= TAH}', "");
Expect(1, 1592, '\P{^Is_Joining_Group= TAH}', "");
Expect(0, 1590, '\p{Is_Joining_Group= TAH}', "");
Expect(1, 1590, '\p{^Is_Joining_Group= TAH}', "");
Expect(1, 1590, '\P{Is_Joining_Group= TAH}', "");
Expect(0, 1590, '\P{^Is_Joining_Group= TAH}', "");
Error('\p{Is_Jg= /a/tah}');
Error('\P{Is_Jg= /a/tah}');
Expect(1, 1592, '\p{Is_Jg=tah}', "");
Expect(0, 1592, '\p{^Is_Jg=tah}', "");
Expect(0, 1592, '\P{Is_Jg=tah}', "");
Expect(1, 1592, '\P{^Is_Jg=tah}', "");
Expect(0, 1590, '\p{Is_Jg=tah}', "");
Expect(1, 1590, '\p{^Is_Jg=tah}', "");
Expect(1, 1590, '\P{Is_Jg=tah}', "");
Expect(0, 1590, '\P{^Is_Jg=tah}', "");
Expect(1, 1592, '\p{Is_Jg=-Tah}', "");
Expect(0, 1592, '\p{^Is_Jg=-Tah}', "");
Expect(0, 1592, '\P{Is_Jg=-Tah}', "");
Expect(1, 1592, '\P{^Is_Jg=-Tah}', "");
Expect(0, 1590, '\p{Is_Jg=-Tah}', "");
Expect(1, 1590, '\p{^Is_Jg=-Tah}', "");
Expect(1, 1590, '\P{Is_Jg=-Tah}', "");
Expect(0, 1590, '\P{^Is_Jg=-Tah}', "");
Error('\p{Joining_Group:		zhain/a/}');
Error('\P{Joining_Group:		zhain/a/}');
Expect(1, 1869, '\p{Joining_Group=zhain}', "");
Expect(0, 1869, '\p{^Joining_Group=zhain}', "");
Expect(0, 1869, '\P{Joining_Group=zhain}', "");
Expect(1, 1869, '\P{^Joining_Group=zhain}', "");
Expect(0, 1868, '\p{Joining_Group=zhain}', "");
Expect(1, 1868, '\p{^Joining_Group=zhain}', "");
Expect(1, 1868, '\P{Joining_Group=zhain}', "");
Expect(0, 1868, '\P{^Joining_Group=zhain}', "");
Expect(1, 1869, '\p{Joining_Group=_Zhain}', "");
Expect(0, 1869, '\p{^Joining_Group=_Zhain}', "");
Expect(0, 1869, '\P{Joining_Group=_Zhain}', "");
Expect(1, 1869, '\P{^Joining_Group=_Zhain}', "");
Expect(0, 1868, '\p{Joining_Group=_Zhain}', "");
Expect(1, 1868, '\p{^Joining_Group=_Zhain}', "");
Expect(1, 1868, '\P{Joining_Group=_Zhain}', "");
Expect(0, 1868, '\P{^Joining_Group=_Zhain}', "");
Error('\p{Jg=/a/	-zhain}');
Error('\P{Jg=/a/	-zhain}');
Expect(1, 1869, '\p{Jg:	zhain}', "");
Expect(0, 1869, '\p{^Jg:	zhain}', "");
Expect(0, 1869, '\P{Jg:	zhain}', "");
Expect(1, 1869, '\P{^Jg:	zhain}', "");
Expect(0, 1868, '\p{Jg:	zhain}', "");
Expect(1, 1868, '\p{^Jg:	zhain}', "");
Expect(1, 1868, '\P{Jg:	zhain}', "");
Expect(0, 1868, '\P{^Jg:	zhain}', "");
Expect(1, 1869, '\p{Jg=-Zhain}', "");
Expect(0, 1869, '\p{^Jg=-Zhain}', "");
Expect(0, 1869, '\P{Jg=-Zhain}', "");
Expect(1, 1869, '\P{^Jg=-Zhain}', "");
Expect(0, 1868, '\p{Jg=-Zhain}', "");
Expect(1, 1868, '\p{^Jg=-Zhain}', "");
Expect(1, 1868, '\P{Jg=-Zhain}', "");
Expect(0, 1868, '\P{^Jg=-Zhain}', "");
Error('\p{Is_Joining_Group=-/a/Zhain}');
Error('\P{Is_Joining_Group=-/a/Zhain}');
Expect(1, 1869, '\p{Is_Joining_Group=zhain}', "");
Expect(0, 1869, '\p{^Is_Joining_Group=zhain}', "");
Expect(0, 1869, '\P{Is_Joining_Group=zhain}', "");
Expect(1, 1869, '\P{^Is_Joining_Group=zhain}', "");
Expect(0, 1868, '\p{Is_Joining_Group=zhain}', "");
Expect(1, 1868, '\p{^Is_Joining_Group=zhain}', "");
Expect(1, 1868, '\P{Is_Joining_Group=zhain}', "");
Expect(0, 1868, '\P{^Is_Joining_Group=zhain}', "");
Expect(1, 1869, '\p{Is_Joining_Group=_-Zhain}', "");
Expect(0, 1869, '\p{^Is_Joining_Group=_-Zhain}', "");
Expect(0, 1869, '\P{Is_Joining_Group=_-Zhain}', "");
Expect(1, 1869, '\P{^Is_Joining_Group=_-Zhain}', "");
Expect(0, 1868, '\p{Is_Joining_Group=_-Zhain}', "");
Expect(1, 1868, '\p{^Is_Joining_Group=_-Zhain}', "");
Expect(1, 1868, '\P{Is_Joining_Group=_-Zhain}', "");
Expect(0, 1868, '\P{^Is_Joining_Group=_-Zhain}', "");
Error('\p{Is_Jg= :=zhain}');
Error('\P{Is_Jg= :=zhain}');
Expect(1, 1869, '\p{Is_Jg=zhain}', "");
Expect(0, 1869, '\p{^Is_Jg=zhain}', "");
Expect(0, 1869, '\P{Is_Jg=zhain}', "");
Expect(1, 1869, '\P{^Is_Jg=zhain}', "");
Expect(0, 1868, '\p{Is_Jg=zhain}', "");
Expect(1, 1868, '\p{^Is_Jg=zhain}', "");
Expect(1, 1868, '\P{Is_Jg=zhain}', "");
Expect(0, 1868, '\P{^Is_Jg=zhain}', "");
Expect(1, 1869, '\p{Is_Jg=-Zhain}', "");
Expect(0, 1869, '\p{^Is_Jg=-Zhain}', "");
Expect(0, 1869, '\P{Is_Jg=-Zhain}', "");
Expect(1, 1869, '\P{^Is_Jg=-Zhain}', "");
Expect(0, 1868, '\p{Is_Jg=-Zhain}', "");
Expect(1, 1868, '\p{^Is_Jg=-Zhain}', "");
Expect(1, 1868, '\P{Is_Jg=-Zhain}', "");
Expect(0, 1868, '\P{^Is_Jg=-Zhain}', "");
Error('\p{Joining_Group=/a/PE}');
Error('\P{Joining_Group=/a/PE}');
Expect(1, 1830, '\p{Joining_Group=pe}', "");
Expect(0, 1830, '\p{^Joining_Group=pe}', "");
Expect(0, 1830, '\P{Joining_Group=pe}', "");
Expect(1, 1830, '\P{^Joining_Group=pe}', "");
Expect(0, 1829, '\p{Joining_Group=pe}', "");
Expect(1, 1829, '\p{^Joining_Group=pe}', "");
Expect(1, 1829, '\P{Joining_Group=pe}', "");
Expect(0, 1829, '\P{^Joining_Group=pe}', "");
Expect(1, 1830, '\p{Joining_Group=	_pe}', "");
Expect(0, 1830, '\p{^Joining_Group=	_pe}', "");
Expect(0, 1830, '\P{Joining_Group=	_pe}', "");
Expect(1, 1830, '\P{^Joining_Group=	_pe}', "");
Expect(0, 1829, '\p{Joining_Group=	_pe}', "");
Expect(1, 1829, '\p{^Joining_Group=	_pe}', "");
Expect(1, 1829, '\P{Joining_Group=	_pe}', "");
Expect(0, 1829, '\P{^Joining_Group=	_pe}', "");
Error('\p{Jg= 	Pe/a/}');
Error('\P{Jg= 	Pe/a/}');
Expect(1, 1830, '\p{Jg=pe}', "");
Expect(0, 1830, '\p{^Jg=pe}', "");
Expect(0, 1830, '\P{Jg=pe}', "");
Expect(1, 1830, '\P{^Jg=pe}', "");
Expect(0, 1829, '\p{Jg=pe}', "");
Expect(1, 1829, '\p{^Jg=pe}', "");
Expect(1, 1829, '\P{Jg=pe}', "");
Expect(0, 1829, '\P{^Jg=pe}', "");
Expect(1, 1830, '\p{Jg=--PE}', "");
Expect(0, 1830, '\p{^Jg=--PE}', "");
Expect(0, 1830, '\P{Jg=--PE}', "");
Expect(1, 1830, '\P{^Jg=--PE}', "");
Expect(0, 1829, '\p{Jg=--PE}', "");
Expect(1, 1829, '\p{^Jg=--PE}', "");
Expect(1, 1829, '\P{Jg=--PE}', "");
Expect(0, 1829, '\P{^Jg=--PE}', "");
Error('\p{Is_Joining_Group=-:=pe}');
Error('\P{Is_Joining_Group=-:=pe}');
Expect(1, 1830, '\p{Is_Joining_Group=pe}', "");
Expect(0, 1830, '\p{^Is_Joining_Group=pe}', "");
Expect(0, 1830, '\P{Is_Joining_Group=pe}', "");
Expect(1, 1830, '\P{^Is_Joining_Group=pe}', "");
Expect(0, 1829, '\p{Is_Joining_Group=pe}', "");
Expect(1, 1829, '\p{^Is_Joining_Group=pe}', "");
Expect(1, 1829, '\P{Is_Joining_Group=pe}', "");
Expect(0, 1829, '\P{^Is_Joining_Group=pe}', "");
Expect(1, 1830, '\p{Is_Joining_Group=	_PE}', "");
Expect(0, 1830, '\p{^Is_Joining_Group=	_PE}', "");
Expect(0, 1830, '\P{Is_Joining_Group=	_PE}', "");
Expect(1, 1830, '\P{^Is_Joining_Group=	_PE}', "");
Expect(0, 1829, '\p{Is_Joining_Group=	_PE}', "");
Expect(1, 1829, '\p{^Is_Joining_Group=	_PE}', "");
Expect(1, 1829, '\P{Is_Joining_Group=	_PE}', "");
Expect(0, 1829, '\P{^Is_Joining_Group=	_PE}', "");
Error('\p{Is_Jg=:=_-Pe}');
Error('\P{Is_Jg=:=_-Pe}');
Expect(1, 1830, '\p{Is_Jg=pe}', "");
Expect(0, 1830, '\p{^Is_Jg=pe}', "");
Expect(0, 1830, '\P{Is_Jg=pe}', "");
Expect(1, 1830, '\P{^Is_Jg=pe}', "");
Expect(0, 1829, '\p{Is_Jg=pe}', "");
Expect(1, 1829, '\p{^Is_Jg=pe}', "");
Expect(1, 1829, '\P{Is_Jg=pe}', "");
Expect(0, 1829, '\P{^Is_Jg=pe}', "");
Expect(1, 1830, '\p{Is_Jg=Pe}', "");
Expect(0, 1830, '\p{^Is_Jg=Pe}', "");
Expect(0, 1830, '\P{Is_Jg=Pe}', "");
Expect(1, 1830, '\P{^Is_Jg=Pe}', "");
Expect(0, 1829, '\p{Is_Jg=Pe}', "");
Expect(1, 1829, '\p{^Is_Jg=Pe}', "");
Expect(1, 1829, '\P{Is_Jg=Pe}', "");
Expect(0, 1829, '\P{^Is_Jg=Pe}', "");
Error('\p{Joining_Group: -/a/Gaf}');
Error('\P{Joining_Group: -/a/Gaf}');
Expect(1, 1596, '\p{Joining_Group=gaf}', "");
Expect(0, 1596, '\p{^Joining_Group=gaf}', "");
Expect(0, 1596, '\P{Joining_Group=gaf}', "");
Expect(1, 1596, '\P{^Joining_Group=gaf}', "");
Expect(0, 1594, '\p{Joining_Group=gaf}', "");
Expect(1, 1594, '\p{^Joining_Group=gaf}', "");
Expect(1, 1594, '\P{Joining_Group=gaf}', "");
Expect(0, 1594, '\P{^Joining_Group=gaf}', "");
Expect(1, 1596, '\p{Joining_Group=_Gaf}', "");
Expect(0, 1596, '\p{^Joining_Group=_Gaf}', "");
Expect(0, 1596, '\P{Joining_Group=_Gaf}', "");
Expect(1, 1596, '\P{^Joining_Group=_Gaf}', "");
Expect(0, 1594, '\p{Joining_Group=_Gaf}', "");
Expect(1, 1594, '\p{^Joining_Group=_Gaf}', "");
Expect(1, 1594, '\P{Joining_Group=_Gaf}', "");
Expect(0, 1594, '\P{^Joining_Group=_Gaf}', "");
Error('\p{Jg:		:=Gaf}');
Error('\P{Jg:		:=Gaf}');
Expect(1, 1596, '\p{Jg=gaf}', "");
Expect(0, 1596, '\p{^Jg=gaf}', "");
Expect(0, 1596, '\P{Jg=gaf}', "");
Expect(1, 1596, '\P{^Jg=gaf}', "");
Expect(0, 1594, '\p{Jg=gaf}', "");
Expect(1, 1594, '\p{^Jg=gaf}', "");
Expect(1, 1594, '\P{Jg=gaf}', "");
Expect(0, 1594, '\P{^Jg=gaf}', "");
Expect(1, 1596, '\p{Jg=- Gaf}', "");
Expect(0, 1596, '\p{^Jg=- Gaf}', "");
Expect(0, 1596, '\P{Jg=- Gaf}', "");
Expect(1, 1596, '\P{^Jg=- Gaf}', "");
Expect(0, 1594, '\p{Jg=- Gaf}', "");
Expect(1, 1594, '\p{^Jg=- Gaf}', "");
Expect(1, 1594, '\P{Jg=- Gaf}', "");
Expect(0, 1594, '\P{^Jg=- Gaf}', "");
Error('\p{Is_Joining_Group=Gaf/a/}');
Error('\P{Is_Joining_Group=Gaf/a/}');
Expect(1, 1596, '\p{Is_Joining_Group=gaf}', "");
Expect(0, 1596, '\p{^Is_Joining_Group=gaf}', "");
Expect(0, 1596, '\P{Is_Joining_Group=gaf}', "");
Expect(1, 1596, '\P{^Is_Joining_Group=gaf}', "");
Expect(0, 1594, '\p{Is_Joining_Group=gaf}', "");
Expect(1, 1594, '\p{^Is_Joining_Group=gaf}', "");
Expect(1, 1594, '\P{Is_Joining_Group=gaf}', "");
Expect(0, 1594, '\P{^Is_Joining_Group=gaf}', "");
Expect(1, 1596, '\p{Is_Joining_Group: _	Gaf}', "");
Expect(0, 1596, '\p{^Is_Joining_Group: _	Gaf}', "");
Expect(0, 1596, '\P{Is_Joining_Group: _	Gaf}', "");
Expect(1, 1596, '\P{^Is_Joining_Group: _	Gaf}', "");
Expect(0, 1594, '\p{Is_Joining_Group: _	Gaf}', "");
Expect(1, 1594, '\p{^Is_Joining_Group: _	Gaf}', "");
Expect(1, 1594, '\P{Is_Joining_Group: _	Gaf}', "");
Expect(0, 1594, '\P{^Is_Joining_Group: _	Gaf}', "");
Error('\p{Is_Jg=/a/gaf}');
Error('\P{Is_Jg=/a/gaf}');
Expect(1, 1596, '\p{Is_Jg=gaf}', "");
Expect(0, 1596, '\p{^Is_Jg=gaf}', "");
Expect(0, 1596, '\P{Is_Jg=gaf}', "");
Expect(1, 1596, '\P{^Is_Jg=gaf}', "");
Expect(0, 1594, '\p{Is_Jg=gaf}', "");
Expect(1, 1594, '\p{^Is_Jg=gaf}', "");
Expect(1, 1594, '\P{Is_Jg=gaf}', "");
Expect(0, 1594, '\P{^Is_Jg=gaf}', "");
Expect(1, 1596, '\p{Is_Jg= Gaf}', "");
Expect(0, 1596, '\p{^Is_Jg= Gaf}', "");
Expect(0, 1596, '\P{Is_Jg= Gaf}', "");
Expect(1, 1596, '\P{^Is_Jg= Gaf}', "");
Expect(0, 1594, '\p{Is_Jg= Gaf}', "");
Expect(1, 1594, '\p{^Is_Jg= Gaf}', "");
Expect(1, 1594, '\P{Is_Jg= Gaf}', "");
Expect(0, 1594, '\P{^Is_Jg= Gaf}', "");
Error('\p{Joining_Group=:=	WAW}');
Error('\P{Joining_Group=:=	WAW}');
Expect(1, 1572, '\p{Joining_Group:   waw}', "");
Expect(0, 1572, '\p{^Joining_Group:   waw}', "");
Expect(0, 1572, '\P{Joining_Group:   waw}', "");
Expect(1, 1572, '\P{^Joining_Group:   waw}', "");
Expect(0, 1571, '\p{Joining_Group:   waw}', "");
Expect(1, 1571, '\p{^Joining_Group:   waw}', "");
Expect(1, 1571, '\P{Joining_Group:   waw}', "");
Expect(0, 1571, '\P{^Joining_Group:   waw}', "");
Expect(1, 1572, '\p{Joining_Group:   Waw}', "");
Expect(0, 1572, '\p{^Joining_Group:   Waw}', "");
Expect(0, 1572, '\P{Joining_Group:   Waw}', "");
Expect(1, 1572, '\P{^Joining_Group:   Waw}', "");
Expect(0, 1571, '\p{Joining_Group:   Waw}', "");
Expect(1, 1571, '\p{^Joining_Group:   Waw}', "");
Expect(1, 1571, '\P{Joining_Group:   Waw}', "");
Expect(0, 1571, '\P{^Joining_Group:   Waw}', "");
Error('\p{Jg=:=-Waw}');
Error('\P{Jg=:=-Waw}');
Expect(1, 1572, '\p{Jg=waw}', "");
Expect(0, 1572, '\p{^Jg=waw}', "");
Expect(0, 1572, '\P{Jg=waw}', "");
Expect(1, 1572, '\P{^Jg=waw}', "");
Expect(0, 1571, '\p{Jg=waw}', "");
Expect(1, 1571, '\p{^Jg=waw}', "");
Expect(1, 1571, '\P{Jg=waw}', "");
Expect(0, 1571, '\P{^Jg=waw}', "");
Expect(1, 1572, '\p{Jg=- WAW}', "");
Expect(0, 1572, '\p{^Jg=- WAW}', "");
Expect(0, 1572, '\P{Jg=- WAW}', "");
Expect(1, 1572, '\P{^Jg=- WAW}', "");
Expect(0, 1571, '\p{Jg=- WAW}', "");
Expect(1, 1571, '\p{^Jg=- WAW}', "");
Expect(1, 1571, '\P{Jg=- WAW}', "");
Expect(0, 1571, '\P{^Jg=- WAW}', "");
Error('\p{Is_Joining_Group=WAW:=}');
Error('\P{Is_Joining_Group=WAW:=}');
Expect(1, 1572, '\p{Is_Joining_Group=waw}', "");
Expect(0, 1572, '\p{^Is_Joining_Group=waw}', "");
Expect(0, 1572, '\P{Is_Joining_Group=waw}', "");
Expect(1, 1572, '\P{^Is_Joining_Group=waw}', "");
Expect(0, 1571, '\p{Is_Joining_Group=waw}', "");
Expect(1, 1571, '\p{^Is_Joining_Group=waw}', "");
Expect(1, 1571, '\P{Is_Joining_Group=waw}', "");
Expect(0, 1571, '\P{^Is_Joining_Group=waw}', "");
Expect(1, 1572, '\p{Is_Joining_Group=	Waw}', "");
Expect(0, 1572, '\p{^Is_Joining_Group=	Waw}', "");
Expect(0, 1572, '\P{Is_Joining_Group=	Waw}', "");
Expect(1, 1572, '\P{^Is_Joining_Group=	Waw}', "");
Expect(0, 1571, '\p{Is_Joining_Group=	Waw}', "");
Expect(1, 1571, '\p{^Is_Joining_Group=	Waw}', "");
Expect(1, 1571, '\P{Is_Joining_Group=	Waw}', "");
Expect(0, 1571, '\P{^Is_Joining_Group=	Waw}', "");
Error('\p{Is_Jg=:=Waw}');
Error('\P{Is_Jg=:=Waw}');
Expect(1, 1572, '\p{Is_Jg=waw}', "");
Expect(0, 1572, '\p{^Is_Jg=waw}', "");
Expect(0, 1572, '\P{Is_Jg=waw}', "");
Expect(1, 1572, '\P{^Is_Jg=waw}', "");
Expect(0, 1571, '\p{Is_Jg=waw}', "");
Expect(1, 1571, '\p{^Is_Jg=waw}', "");
Expect(1, 1571, '\P{Is_Jg=waw}', "");
Expect(0, 1571, '\P{^Is_Jg=waw}', "");
Expect(1, 1572, '\p{Is_Jg=_-waw}', "");
Expect(0, 1572, '\p{^Is_Jg=_-waw}', "");
Expect(0, 1572, '\P{Is_Jg=_-waw}', "");
Expect(1, 1572, '\P{^Is_Jg=_-waw}', "");
Expect(0, 1571, '\p{Is_Jg=_-waw}', "");
Expect(1, 1571, '\p{^Is_Jg=_-waw}', "");
Expect(1, 1571, '\P{Is_Jg=_-waw}', "");
Expect(0, 1571, '\P{^Is_Jg=_-waw}', "");
Error('\p{Joining_Group=/a/-	Yudh}');
Error('\P{Joining_Group=/a/-	Yudh}');
Expect(1, 1821, '\p{Joining_Group=yudh}', "");
Expect(0, 1821, '\p{^Joining_Group=yudh}', "");
Expect(0, 1821, '\P{Joining_Group=yudh}', "");
Expect(1, 1821, '\P{^Joining_Group=yudh}', "");
Expect(0, 1820, '\p{Joining_Group=yudh}', "");
Expect(1, 1820, '\p{^Joining_Group=yudh}', "");
Expect(1, 1820, '\P{Joining_Group=yudh}', "");
Expect(0, 1820, '\P{^Joining_Group=yudh}', "");
Expect(1, 1821, '\p{Joining_Group: _YUDH}', "");
Expect(0, 1821, '\p{^Joining_Group: _YUDH}', "");
Expect(0, 1821, '\P{Joining_Group: _YUDH}', "");
Expect(1, 1821, '\P{^Joining_Group: _YUDH}', "");
Expect(0, 1820, '\p{Joining_Group: _YUDH}', "");
Expect(1, 1820, '\p{^Joining_Group: _YUDH}', "");
Expect(1, 1820, '\P{Joining_Group: _YUDH}', "");
Expect(0, 1820, '\P{^Joining_Group: _YUDH}', "");
Error('\p{Jg=-	Yudh/a/}');
Error('\P{Jg=-	Yudh/a/}');
Expect(1, 1821, '\p{Jg:	yudh}', "");
Expect(0, 1821, '\p{^Jg:	yudh}', "");
Expect(0, 1821, '\P{Jg:	yudh}', "");
Expect(1, 1821, '\P{^Jg:	yudh}', "");
Expect(0, 1820, '\p{Jg:	yudh}', "");
Expect(1, 1820, '\p{^Jg:	yudh}', "");
Expect(1, 1820, '\P{Jg:	yudh}', "");
Expect(0, 1820, '\P{^Jg:	yudh}', "");
Expect(1, 1821, '\p{Jg= Yudh}', "");
Expect(0, 1821, '\p{^Jg= Yudh}', "");
Expect(0, 1821, '\P{Jg= Yudh}', "");
Expect(1, 1821, '\P{^Jg= Yudh}', "");
Expect(0, 1820, '\p{Jg= Yudh}', "");
Expect(1, 1820, '\p{^Jg= Yudh}', "");
Expect(1, 1820, '\P{Jg= Yudh}', "");
Expect(0, 1820, '\P{^Jg= Yudh}', "");
Error('\p{Is_Joining_Group=	:=Yudh}');
Error('\P{Is_Joining_Group=	:=Yudh}');
Expect(1, 1821, '\p{Is_Joining_Group=yudh}', "");
Expect(0, 1821, '\p{^Is_Joining_Group=yudh}', "");
Expect(0, 1821, '\P{Is_Joining_Group=yudh}', "");
Expect(1, 1821, '\P{^Is_Joining_Group=yudh}', "");
Expect(0, 1820, '\p{Is_Joining_Group=yudh}', "");
Expect(1, 1820, '\p{^Is_Joining_Group=yudh}', "");
Expect(1, 1820, '\P{Is_Joining_Group=yudh}', "");
Expect(0, 1820, '\P{^Is_Joining_Group=yudh}', "");
Expect(1, 1821, '\p{Is_Joining_Group=_	Yudh}', "");
Expect(0, 1821, '\p{^Is_Joining_Group=_	Yudh}', "");
Expect(0, 1821, '\P{Is_Joining_Group=_	Yudh}', "");
Expect(1, 1821, '\P{^Is_Joining_Group=_	Yudh}', "");
Expect(0, 1820, '\p{Is_Joining_Group=_	Yudh}', "");
Expect(1, 1820, '\p{^Is_Joining_Group=_	Yudh}', "");
Expect(1, 1820, '\P{Is_Joining_Group=_	Yudh}', "");
Expect(0, 1820, '\P{^Is_Joining_Group=_	Yudh}', "");
Error('\p{Is_Jg=:=_YUDH}');
Error('\P{Is_Jg=:=_YUDH}');
Expect(1, 1821, '\p{Is_Jg=yudh}', "");
Expect(0, 1821, '\p{^Is_Jg=yudh}', "");
Expect(0, 1821, '\P{Is_Jg=yudh}', "");
Expect(1, 1821, '\P{^Is_Jg=yudh}', "");
Expect(0, 1820, '\p{Is_Jg=yudh}', "");
Expect(1, 1820, '\p{^Is_Jg=yudh}', "");
Expect(1, 1820, '\P{Is_Jg=yudh}', "");
Expect(0, 1820, '\P{^Is_Jg=yudh}', "");
Expect(1, 1821, '\p{Is_Jg=-Yudh}', "");
Expect(0, 1821, '\p{^Is_Jg=-Yudh}', "");
Expect(0, 1821, '\P{Is_Jg=-Yudh}', "");
Expect(1, 1821, '\P{^Is_Jg=-Yudh}', "");
Expect(0, 1820, '\p{Is_Jg=-Yudh}', "");
Expect(1, 1820, '\p{^Is_Jg=-Yudh}', "");
Expect(1, 1820, '\P{Is_Jg=-Yudh}', "");
Expect(0, 1820, '\P{^Is_Jg=-Yudh}', "");
Error('\p{Pattern_White_Space:	/a/YES}');
Error('\P{Pattern_White_Space:	/a/YES}');
Expect(1, 13, '\p{Pattern_White_Space=yes}', "");
Expect(0, 13, '\p{^Pattern_White_Space=yes}', "");
Expect(0, 13, '\P{Pattern_White_Space=yes}', "");
Expect(1, 13, '\P{^Pattern_White_Space=yes}', "");
Expect(0, 8, '\p{Pattern_White_Space=yes}', "");
Expect(1, 8, '\p{^Pattern_White_Space=yes}', "");
Expect(1, 8, '\P{Pattern_White_Space=yes}', "");
Expect(0, 8, '\P{^Pattern_White_Space=yes}', "");
Expect(1, 13, '\p{Pattern_White_Space=- Yes}', "");
Expect(0, 13, '\p{^Pattern_White_Space=- Yes}', "");
Expect(0, 13, '\P{Pattern_White_Space=- Yes}', "");
Expect(1, 13, '\P{^Pattern_White_Space=- Yes}', "");
Expect(0, 8, '\p{Pattern_White_Space=- Yes}', "");
Expect(1, 8, '\p{^Pattern_White_Space=- Yes}', "");
Expect(1, 8, '\P{Pattern_White_Space=- Yes}', "");
Expect(0, 8, '\P{^Pattern_White_Space=- Yes}', "");
Error('\p{Pat_WS=:=_	y}');
Error('\P{Pat_WS=:=_	y}');
Expect(1, 13, '\p{Pat_WS=y}', "");
Expect(0, 13, '\p{^Pat_WS=y}', "");
Expect(0, 13, '\P{Pat_WS=y}', "");
Expect(1, 13, '\P{^Pat_WS=y}', "");
Expect(0, 8, '\p{Pat_WS=y}', "");
Expect(1, 8, '\p{^Pat_WS=y}', "");
Expect(1, 8, '\P{Pat_WS=y}', "");
Expect(0, 8, '\P{^Pat_WS=y}', "");
Expect(1, 13, '\p{Pat_WS=  Y}', "");
Expect(0, 13, '\p{^Pat_WS=  Y}', "");
Expect(0, 13, '\P{Pat_WS=  Y}', "");
Expect(1, 13, '\P{^Pat_WS=  Y}', "");
Expect(0, 8, '\p{Pat_WS=  Y}', "");
Expect(1, 8, '\p{^Pat_WS=  Y}', "");
Expect(1, 8, '\P{Pat_WS=  Y}', "");
Expect(0, 8, '\P{^Pat_WS=  Y}', "");
Error('\p{Is_Pattern_White_Space=_/a/T}');
Error('\P{Is_Pattern_White_Space=_/a/T}');
Expect(1, 13, '\p{Is_Pattern_White_Space=t}', "");
Expect(0, 13, '\p{^Is_Pattern_White_Space=t}', "");
Expect(0, 13, '\P{Is_Pattern_White_Space=t}', "");
Expect(1, 13, '\P{^Is_Pattern_White_Space=t}', "");
Expect(0, 8, '\p{Is_Pattern_White_Space=t}', "");
Expect(1, 8, '\p{^Is_Pattern_White_Space=t}', "");
Expect(1, 8, '\P{Is_Pattern_White_Space=t}', "");
Expect(0, 8, '\P{^Is_Pattern_White_Space=t}', "");
Expect(1, 13, '\p{Is_Pattern_White_Space=	T}', "");
Expect(0, 13, '\p{^Is_Pattern_White_Space=	T}', "");
Expect(0, 13, '\P{Is_Pattern_White_Space=	T}', "");
Expect(1, 13, '\P{^Is_Pattern_White_Space=	T}', "");
Expect(0, 8, '\p{Is_Pattern_White_Space=	T}', "");
Expect(1, 8, '\p{^Is_Pattern_White_Space=	T}', "");
Expect(1, 8, '\P{Is_Pattern_White_Space=	T}', "");
Expect(0, 8, '\P{^Is_Pattern_White_Space=	T}', "");
Error('\p{Is_Pat_WS=_/a/true}');
Error('\P{Is_Pat_WS=_/a/true}');
Expect(1, 13, '\p{Is_Pat_WS=true}', "");
Expect(0, 13, '\p{^Is_Pat_WS=true}', "");
Expect(0, 13, '\P{Is_Pat_WS=true}', "");
Expect(1, 13, '\P{^Is_Pat_WS=true}', "");
Expect(0, 8, '\p{Is_Pat_WS=true}', "");
Expect(1, 8, '\p{^Is_Pat_WS=true}', "");
Expect(1, 8, '\P{Is_Pat_WS=true}', "");
Expect(0, 8, '\P{^Is_Pat_WS=true}', "");
Expect(1, 13, '\p{Is_Pat_WS:   TRUE}', "");
Expect(0, 13, '\p{^Is_Pat_WS:   TRUE}', "");
Expect(0, 13, '\P{Is_Pat_WS:   TRUE}', "");
Expect(1, 13, '\P{^Is_Pat_WS:   TRUE}', "");
Expect(0, 8, '\p{Is_Pat_WS:   TRUE}', "");
Expect(1, 8, '\p{^Is_Pat_WS:   TRUE}', "");
Expect(1, 8, '\P{Is_Pat_WS:   TRUE}', "");
Expect(0, 8, '\P{^Is_Pat_WS:   TRUE}', "");
Error('\p{Pattern_White_Space=_ No:=}');
Error('\P{Pattern_White_Space=_ No:=}');
Expect(1, 8, '\p{Pattern_White_Space=no}', "");
Expect(0, 8, '\p{^Pattern_White_Space=no}', "");
Expect(0, 8, '\P{Pattern_White_Space=no}', "");
Expect(1, 8, '\P{^Pattern_White_Space=no}', "");
Expect(0, 13, '\p{Pattern_White_Space=no}', "");
Expect(1, 13, '\p{^Pattern_White_Space=no}', "");
Expect(1, 13, '\P{Pattern_White_Space=no}', "");
Expect(0, 13, '\P{^Pattern_White_Space=no}', "");
Expect(1, 8, '\p{Pattern_White_Space=	_no}', "");
Expect(0, 8, '\p{^Pattern_White_Space=	_no}', "");
Expect(0, 8, '\P{Pattern_White_Space=	_no}', "");
Expect(1, 8, '\P{^Pattern_White_Space=	_no}', "");
Expect(0, 13, '\p{Pattern_White_Space=	_no}', "");
Expect(1, 13, '\p{^Pattern_White_Space=	_no}', "");
Expect(1, 13, '\P{Pattern_White_Space=	_no}', "");
Expect(0, 13, '\P{^Pattern_White_Space=	_no}', "");
Error('\p{Pat_WS: 	 N:=}');
Error('\P{Pat_WS: 	 N:=}');
Expect(1, 8, '\p{Pat_WS=n}', "");
Expect(0, 8, '\p{^Pat_WS=n}', "");
Expect(0, 8, '\P{Pat_WS=n}', "");
Expect(1, 8, '\P{^Pat_WS=n}', "");
Expect(0, 13, '\p{Pat_WS=n}', "");
Expect(1, 13, '\p{^Pat_WS=n}', "");
Expect(1, 13, '\P{Pat_WS=n}', "");
Expect(0, 13, '\P{^Pat_WS=n}', "");
Expect(1, 8, '\p{Pat_WS= N}', "");
Expect(0, 8, '\p{^Pat_WS= N}', "");
Expect(0, 8, '\P{Pat_WS= N}', "");
Expect(1, 8, '\P{^Pat_WS= N}', "");
Expect(0, 13, '\p{Pat_WS= N}', "");
Expect(1, 13, '\p{^Pat_WS= N}', "");
Expect(1, 13, '\P{Pat_WS= N}', "");
Expect(0, 13, '\P{^Pat_WS= N}', "");
Error('\p{Is_Pattern_White_Space:   _-F:=}');
Error('\P{Is_Pattern_White_Space:   _-F:=}');
Expect(1, 8, '\p{Is_Pattern_White_Space=f}', "");
Expect(0, 8, '\p{^Is_Pattern_White_Space=f}', "");
Expect(0, 8, '\P{Is_Pattern_White_Space=f}', "");
Expect(1, 8, '\P{^Is_Pattern_White_Space=f}', "");
Expect(0, 13, '\p{Is_Pattern_White_Space=f}', "");
Expect(1, 13, '\p{^Is_Pattern_White_Space=f}', "");
Expect(1, 13, '\P{Is_Pattern_White_Space=f}', "");
Expect(0, 13, '\P{^Is_Pattern_White_Space=f}', "");
Expect(1, 8, '\p{Is_Pattern_White_Space= _F}', "");
Expect(0, 8, '\p{^Is_Pattern_White_Space= _F}', "");
Expect(0, 8, '\P{Is_Pattern_White_Space= _F}', "");
Expect(1, 8, '\P{^Is_Pattern_White_Space= _F}', "");
Expect(0, 13, '\p{Is_Pattern_White_Space= _F}', "");
Expect(1, 13, '\p{^Is_Pattern_White_Space= _F}', "");
Expect(1, 13, '\P{Is_Pattern_White_Space= _F}', "");
Expect(0, 13, '\P{^Is_Pattern_White_Space= _F}', "");
Error('\p{Is_Pat_WS=-:=False}');
Error('\P{Is_Pat_WS=-:=False}');
Expect(1, 8, '\p{Is_Pat_WS=false}', "");
Expect(0, 8, '\p{^Is_Pat_WS=false}', "");
Expect(0, 8, '\P{Is_Pat_WS=false}', "");
Expect(1, 8, '\P{^Is_Pat_WS=false}', "");
Expect(0, 13, '\p{Is_Pat_WS=false}', "");
Expect(1, 13, '\p{^Is_Pat_WS=false}', "");
Expect(1, 13, '\P{Is_Pat_WS=false}', "");
Expect(0, 13, '\P{^Is_Pat_WS=false}', "");
Expect(1, 8, '\p{Is_Pat_WS=		false}', "");
Expect(0, 8, '\p{^Is_Pat_WS=		false}', "");
Expect(0, 8, '\P{Is_Pat_WS=		false}', "");
Expect(1, 8, '\P{^Is_Pat_WS=		false}', "");
Expect(0, 13, '\p{Is_Pat_WS=		false}', "");
Expect(1, 13, '\p{^Is_Pat_WS=		false}', "");
Expect(1, 13, '\P{Is_Pat_WS=		false}', "");
Expect(0, 13, '\P{^Is_Pat_WS=		false}', "");
Error('\p{Join_Control:_:=YES}');
Error('\P{Join_Control:_:=YES}');
Expect(1, 8205, '\p{Join_Control=yes}', "");
Expect(0, 8205, '\p{^Join_Control=yes}', "");
Expect(0, 8205, '\P{Join_Control=yes}', "");
Expect(1, 8205, '\P{^Join_Control=yes}', "");
Expect(0, 8203, '\p{Join_Control=yes}', "");
Expect(1, 8203, '\p{^Join_Control=yes}', "");
Expect(1, 8203, '\P{Join_Control=yes}', "");
Expect(0, 8203, '\P{^Join_Control=yes}', "");
Expect(1, 8205, '\p{Join_Control=_	YES}', "");
Expect(0, 8205, '\p{^Join_Control=_	YES}', "");
Expect(0, 8205, '\P{Join_Control=_	YES}', "");
Expect(1, 8205, '\P{^Join_Control=_	YES}', "");
Expect(0, 8203, '\p{Join_Control=_	YES}', "");
Expect(1, 8203, '\p{^Join_Control=_	YES}', "");
Expect(1, 8203, '\P{Join_Control=_	YES}', "");
Expect(0, 8203, '\P{^Join_Control=_	YES}', "");
Error('\p{Join_C=	:=Y}');
Error('\P{Join_C=	:=Y}');
Expect(1, 8205, '\p{Join_C=y}', "");
Expect(0, 8205, '\p{^Join_C=y}', "");
Expect(0, 8205, '\P{Join_C=y}', "");
Expect(1, 8205, '\P{^Join_C=y}', "");
Expect(0, 8203, '\p{Join_C=y}', "");
Expect(1, 8203, '\p{^Join_C=y}', "");
Expect(1, 8203, '\P{Join_C=y}', "");
Expect(0, 8203, '\P{^Join_C=y}', "");
Expect(1, 8205, '\p{Join_C=__Y}', "");
Expect(0, 8205, '\p{^Join_C=__Y}', "");
Expect(0, 8205, '\P{Join_C=__Y}', "");
Expect(1, 8205, '\P{^Join_C=__Y}', "");
Expect(0, 8203, '\p{Join_C=__Y}', "");
Expect(1, 8203, '\p{^Join_C=__Y}', "");
Expect(1, 8203, '\P{Join_C=__Y}', "");
Expect(0, 8203, '\P{^Join_C=__Y}', "");
Error('\p{Is_Join_Control:	 	T/a/}');
Error('\P{Is_Join_Control:	 	T/a/}');
Expect(1, 8205, '\p{Is_Join_Control=t}', "");
Expect(0, 8205, '\p{^Is_Join_Control=t}', "");
Expect(0, 8205, '\P{Is_Join_Control=t}', "");
Expect(1, 8205, '\P{^Is_Join_Control=t}', "");
Expect(0, 8203, '\p{Is_Join_Control=t}', "");
Expect(1, 8203, '\p{^Is_Join_Control=t}', "");
Expect(1, 8203, '\P{Is_Join_Control=t}', "");
Expect(0, 8203, '\P{^Is_Join_Control=t}', "");
Expect(1, 8205, '\p{Is_Join_Control=-	T}', "");
Expect(0, 8205, '\p{^Is_Join_Control=-	T}', "");
Expect(0, 8205, '\P{Is_Join_Control=-	T}', "");
Expect(1, 8205, '\P{^Is_Join_Control=-	T}', "");
Expect(0, 8203, '\p{Is_Join_Control=-	T}', "");
Expect(1, 8203, '\p{^Is_Join_Control=-	T}', "");
Expect(1, 8203, '\P{Is_Join_Control=-	T}', "");
Expect(0, 8203, '\P{^Is_Join_Control=-	T}', "");
Error('\p{Is_Join_C=	 True/a/}');
Error('\P{Is_Join_C=	 True/a/}');
Expect(1, 8205, '\p{Is_Join_C=true}', "");
Expect(0, 8205, '\p{^Is_Join_C=true}', "");
Expect(0, 8205, '\P{Is_Join_C=true}', "");
Expect(1, 8205, '\P{^Is_Join_C=true}', "");
Expect(0, 8203, '\p{Is_Join_C=true}', "");
Expect(1, 8203, '\p{^Is_Join_C=true}', "");
Expect(1, 8203, '\P{Is_Join_C=true}', "");
Expect(0, 8203, '\P{^Is_Join_C=true}', "");
Expect(1, 8205, '\p{Is_Join_C=  true}', "");
Expect(0, 8205, '\p{^Is_Join_C=  true}', "");
Expect(0, 8205, '\P{Is_Join_C=  true}', "");
Expect(1, 8205, '\P{^Is_Join_C=  true}', "");
Expect(0, 8203, '\p{Is_Join_C=  true}', "");
Expect(1, 8203, '\p{^Is_Join_C=  true}', "");
Expect(1, 8203, '\P{Is_Join_C=  true}', "");
Expect(0, 8203, '\P{^Is_Join_C=  true}', "");
Error('\p{Join_Control: :=_No}');
Error('\P{Join_Control: :=_No}');
Expect(1, 8203, '\p{Join_Control=no}', "");
Expect(0, 8203, '\p{^Join_Control=no}', "");
Expect(0, 8203, '\P{Join_Control=no}', "");
Expect(1, 8203, '\P{^Join_Control=no}', "");
Expect(0, 8205, '\p{Join_Control=no}', "");
Expect(1, 8205, '\p{^Join_Control=no}', "");
Expect(1, 8205, '\P{Join_Control=no}', "");
Expect(0, 8205, '\P{^Join_Control=no}', "");
Expect(1, 8203, '\p{Join_Control:    No}', "");
Expect(0, 8203, '\p{^Join_Control:    No}', "");
Expect(0, 8203, '\P{Join_Control:    No}', "");
Expect(1, 8203, '\P{^Join_Control:    No}', "");
Expect(0, 8205, '\p{Join_Control:    No}', "");
Expect(1, 8205, '\p{^Join_Control:    No}', "");
Expect(1, 8205, '\P{Join_Control:    No}', "");
Expect(0, 8205, '\P{^Join_Control:    No}', "");
Error('\p{Join_C=/a/	_N}');
Error('\P{Join_C=/a/	_N}');
Expect(1, 8203, '\p{Join_C=n}', "");
Expect(0, 8203, '\p{^Join_C=n}', "");
Expect(0, 8203, '\P{Join_C=n}', "");
Expect(1, 8203, '\P{^Join_C=n}', "");
Expect(0, 8205, '\p{Join_C=n}', "");
Expect(1, 8205, '\p{^Join_C=n}', "");
Expect(1, 8205, '\P{Join_C=n}', "");
Expect(0, 8205, '\P{^Join_C=n}', "");
Expect(1, 8203, '\p{Join_C:_ N}', "");
Expect(0, 8203, '\p{^Join_C:_ N}', "");
Expect(0, 8203, '\P{Join_C:_ N}', "");
Expect(1, 8203, '\P{^Join_C:_ N}', "");
Expect(0, 8205, '\p{Join_C:_ N}', "");
Expect(1, 8205, '\p{^Join_C:_ N}', "");
Expect(1, 8205, '\P{Join_C:_ N}', "");
Expect(0, 8205, '\P{^Join_C:_ N}', "");
Error('\p{Is_Join_Control=	/a/F}');
Error('\P{Is_Join_Control=	/a/F}');
Expect(1, 8203, '\p{Is_Join_Control=f}', "");
Expect(0, 8203, '\p{^Is_Join_Control=f}', "");
Expect(0, 8203, '\P{Is_Join_Control=f}', "");
Expect(1, 8203, '\P{^Is_Join_Control=f}', "");
Expect(0, 8205, '\p{Is_Join_Control=f}', "");
Expect(1, 8205, '\p{^Is_Join_Control=f}', "");
Expect(1, 8205, '\P{Is_Join_Control=f}', "");
Expect(0, 8205, '\P{^Is_Join_Control=f}', "");
Expect(1, 8203, '\p{Is_Join_Control=	_F}', "");
Expect(0, 8203, '\p{^Is_Join_Control=	_F}', "");
Expect(0, 8203, '\P{Is_Join_Control=	_F}', "");
Expect(1, 8203, '\P{^Is_Join_Control=	_F}', "");
Expect(0, 8205, '\p{Is_Join_Control=	_F}', "");
Expect(1, 8205, '\p{^Is_Join_Control=	_F}', "");
Expect(1, 8205, '\P{Is_Join_Control=	_F}', "");
Expect(0, 8205, '\P{^Is_Join_Control=	_F}', "");
Error('\p{Is_Join_C=_false:=}');
Error('\P{Is_Join_C=_false:=}');
Expect(1, 8203, '\p{Is_Join_C=false}', "");
Expect(0, 8203, '\p{^Is_Join_C=false}', "");
Expect(0, 8203, '\P{Is_Join_C=false}', "");
Expect(1, 8203, '\P{^Is_Join_C=false}', "");
Expect(0, 8205, '\p{Is_Join_C=false}', "");
Expect(1, 8205, '\p{^Is_Join_C=false}', "");
Expect(1, 8205, '\P{Is_Join_C=false}', "");
Expect(0, 8205, '\P{^Is_Join_C=false}', "");
Expect(1, 8203, '\p{Is_Join_C=	false}', "");
Expect(0, 8203, '\p{^Is_Join_C=	false}', "");
Expect(0, 8203, '\P{Is_Join_C=	false}', "");
Expect(1, 8203, '\P{^Is_Join_C=	false}', "");
Expect(0, 8205, '\p{Is_Join_C=	false}', "");
Expect(1, 8205, '\p{^Is_Join_C=	false}', "");
Expect(1, 8205, '\P{Is_Join_C=	false}', "");
Expect(0, 8205, '\P{^Is_Join_C=	false}', "");
Error('\p{Other_Default_Ignorable_Code_Point= Yes/a/}');
Error('\P{Other_Default_Ignorable_Code_Point= Yes/a/}');
Expect(1, 847, '\p{Other_Default_Ignorable_Code_Point=yes}', 'deprecated');
Expect(0, 847, '\p{^Other_Default_Ignorable_Code_Point=yes}', 'deprecated');
Expect(0, 847, '\P{Other_Default_Ignorable_Code_Point=yes}', 'deprecated');
Expect(1, 847, '\P{^Other_Default_Ignorable_Code_Point=yes}', 'deprecated');
Expect(0, 846, '\p{Other_Default_Ignorable_Code_Point=yes}', 'deprecated');
Expect(1, 846, '\p{^Other_Default_Ignorable_Code_Point=yes}', 'deprecated');
Expect(1, 846, '\P{Other_Default_Ignorable_Code_Point=yes}', 'deprecated');
Expect(0, 846, '\P{^Other_Default_Ignorable_Code_Point=yes}', 'deprecated');
Expect(1, 847, '\p{Other_Default_Ignorable_Code_Point: 	 Yes}', 'deprecated');
Expect(0, 847, '\p{^Other_Default_Ignorable_Code_Point: 	 Yes}', 'deprecated');
Expect(0, 847, '\P{Other_Default_Ignorable_Code_Point: 	 Yes}', 'deprecated');
Expect(1, 847, '\P{^Other_Default_Ignorable_Code_Point: 	 Yes}', 'deprecated');
Expect(0, 846, '\p{Other_Default_Ignorable_Code_Point: 	 Yes}', 'deprecated');
Expect(1, 846, '\p{^Other_Default_Ignorable_Code_Point: 	 Yes}', 'deprecated');
Expect(1, 846, '\P{Other_Default_Ignorable_Code_Point: 	 Yes}', 'deprecated');
Expect(0, 846, '\P{^Other_Default_Ignorable_Code_Point: 	 Yes}', 'deprecated');
Error('\p{ODI=	/a/y}');
Error('\P{ODI=	/a/y}');
Expect(1, 847, '\p{ODI: y}', 'deprecated');
Expect(0, 847, '\p{^ODI: y}', 'deprecated');
Expect(0, 847, '\P{ODI: y}', 'deprecated');
Expect(1, 847, '\P{^ODI: y}', 'deprecated');
Expect(0, 846, '\p{ODI: y}', 'deprecated');
Expect(1, 846, '\p{^ODI: y}', 'deprecated');
Expect(1, 846, '\P{ODI: y}', 'deprecated');
Expect(0, 846, '\P{^ODI: y}', 'deprecated');
Expect(1, 847, '\p{ODI=-y}', 'deprecated');
Expect(0, 847, '\p{^ODI=-y}', 'deprecated');
Expect(0, 847, '\P{ODI=-y}', 'deprecated');
Expect(1, 847, '\P{^ODI=-y}', 'deprecated');
Expect(0, 846, '\p{ODI=-y}', 'deprecated');
Expect(1, 846, '\p{^ODI=-y}', 'deprecated');
Expect(1, 846, '\P{ODI=-y}', 'deprecated');
Expect(0, 846, '\P{^ODI=-y}', 'deprecated');
Error('\p{Is_Other_Default_Ignorable_Code_Point=	-T/a/}');
Error('\P{Is_Other_Default_Ignorable_Code_Point=	-T/a/}');
Expect(1, 847, '\p{Is_Other_Default_Ignorable_Code_Point=t}', 'deprecated');
Expect(0, 847, '\p{^Is_Other_Default_Ignorable_Code_Point=t}', 'deprecated');
Expect(0, 847, '\P{Is_Other_Default_Ignorable_Code_Point=t}', 'deprecated');
Expect(1, 847, '\P{^Is_Other_Default_Ignorable_Code_Point=t}', 'deprecated');
Expect(0, 846, '\p{Is_Other_Default_Ignorable_Code_Point=t}', 'deprecated');
Expect(1, 846, '\p{^Is_Other_Default_Ignorable_Code_Point=t}', 'deprecated');
Expect(1, 846, '\P{Is_Other_Default_Ignorable_Code_Point=t}', 'deprecated');
Expect(0, 846, '\P{^Is_Other_Default_Ignorable_Code_Point=t}', 'deprecated');
Expect(1, 847, '\p{Is_Other_Default_Ignorable_Code_Point=		T}', 'deprecated');
Expect(0, 847, '\p{^Is_Other_Default_Ignorable_Code_Point=		T}', 'deprecated');
Expect(0, 847, '\P{Is_Other_Default_Ignorable_Code_Point=		T}', 'deprecated');
Expect(1, 847, '\P{^Is_Other_Default_Ignorable_Code_Point=		T}', 'deprecated');
Expect(0, 846, '\p{Is_Other_Default_Ignorable_Code_Point=		T}', 'deprecated');
Expect(1, 846, '\p{^Is_Other_Default_Ignorable_Code_Point=		T}', 'deprecated');
Expect(1, 846, '\P{Is_Other_Default_Ignorable_Code_Point=		T}', 'deprecated');
Expect(0, 846, '\P{^Is_Other_Default_Ignorable_Code_Point=		T}', 'deprecated');
Error('\p{Is_ODI=	:=True}');
Error('\P{Is_ODI=	:=True}');
Expect(1, 847, '\p{Is_ODI=true}', 'deprecated');
Expect(0, 847, '\p{^Is_ODI=true}', 'deprecated');
Expect(0, 847, '\P{Is_ODI=true}', 'deprecated');
Expect(1, 847, '\P{^Is_ODI=true}', 'deprecated');
Expect(0, 846, '\p{Is_ODI=true}', 'deprecated');
Expect(1, 846, '\p{^Is_ODI=true}', 'deprecated');
Expect(1, 846, '\P{Is_ODI=true}', 'deprecated');
Expect(0, 846, '\P{^Is_ODI=true}', 'deprecated');
Expect(1, 847, '\p{Is_ODI=-true}', 'deprecated');
Expect(0, 847, '\p{^Is_ODI=-true}', 'deprecated');
Expect(0, 847, '\P{Is_ODI=-true}', 'deprecated');
Expect(1, 847, '\P{^Is_ODI=-true}', 'deprecated');
Expect(0, 846, '\p{Is_ODI=-true}', 'deprecated');
Expect(1, 846, '\p{^Is_ODI=-true}', 'deprecated');
Expect(1, 846, '\P{Is_ODI=-true}', 'deprecated');
Expect(0, 846, '\P{^Is_ODI=-true}', 'deprecated');
Error('\p{Other_Default_Ignorable_Code_Point=	no:=}');
Error('\P{Other_Default_Ignorable_Code_Point=	no:=}');
Expect(1, 846, '\p{Other_Default_Ignorable_Code_Point=no}', 'deprecated');
Expect(0, 846, '\p{^Other_Default_Ignorable_Code_Point=no}', 'deprecated');
Expect(0, 846, '\P{Other_Default_Ignorable_Code_Point=no}', 'deprecated');
Expect(1, 846, '\P{^Other_Default_Ignorable_Code_Point=no}', 'deprecated');
Expect(0, 847, '\p{Other_Default_Ignorable_Code_Point=no}', 'deprecated');
Expect(1, 847, '\p{^Other_Default_Ignorable_Code_Point=no}', 'deprecated');
Expect(1, 847, '\P{Other_Default_Ignorable_Code_Point=no}', 'deprecated');
Expect(0, 847, '\P{^Other_Default_Ignorable_Code_Point=no}', 'deprecated');
Expect(1, 846, '\p{Other_Default_Ignorable_Code_Point=-No}', 'deprecated');
Expect(0, 846, '\p{^Other_Default_Ignorable_Code_Point=-No}', 'deprecated');
Expect(0, 846, '\P{Other_Default_Ignorable_Code_Point=-No}', 'deprecated');
Expect(1, 846, '\P{^Other_Default_Ignorable_Code_Point=-No}', 'deprecated');
Expect(0, 847, '\p{Other_Default_Ignorable_Code_Point=-No}', 'deprecated');
Expect(1, 847, '\p{^Other_Default_Ignorable_Code_Point=-No}', 'deprecated');
Expect(1, 847, '\P{Other_Default_Ignorable_Code_Point=-No}', 'deprecated');
Expect(0, 847, '\P{^Other_Default_Ignorable_Code_Point=-No}', 'deprecated');
Error('\p{ODI=	 N:=}');
Error('\P{ODI=	 N:=}');
Expect(1, 846, '\p{ODI=n}', 'deprecated');
Expect(0, 846, '\p{^ODI=n}', 'deprecated');
Expect(0, 846, '\P{ODI=n}', 'deprecated');
Expect(1, 846, '\P{^ODI=n}', 'deprecated');
Expect(0, 847, '\p{ODI=n}', 'deprecated');
Expect(1, 847, '\p{^ODI=n}', 'deprecated');
Expect(1, 847, '\P{ODI=n}', 'deprecated');
Expect(0, 847, '\P{^ODI=n}', 'deprecated');
Expect(1, 846, '\p{ODI:   	N}', 'deprecated');
Expect(0, 846, '\p{^ODI:   	N}', 'deprecated');
Expect(0, 846, '\P{ODI:   	N}', 'deprecated');
Expect(1, 846, '\P{^ODI:   	N}', 'deprecated');
Expect(0, 847, '\p{ODI:   	N}', 'deprecated');
Expect(1, 847, '\p{^ODI:   	N}', 'deprecated');
Expect(1, 847, '\P{ODI:   	N}', 'deprecated');
Expect(0, 847, '\P{^ODI:   	N}', 'deprecated');
Error('\p{Is_Other_Default_Ignorable_Code_Point=-f:=}');
Error('\P{Is_Other_Default_Ignorable_Code_Point=-f:=}');
Expect(1, 846, '\p{Is_Other_Default_Ignorable_Code_Point=f}', 'deprecated');
Expect(0, 846, '\p{^Is_Other_Default_Ignorable_Code_Point=f}', 'deprecated');
Expect(0, 846, '\P{Is_Other_Default_Ignorable_Code_Point=f}', 'deprecated');
Expect(1, 846, '\P{^Is_Other_Default_Ignorable_Code_Point=f}', 'deprecated');
Expect(0, 847, '\p{Is_Other_Default_Ignorable_Code_Point=f}', 'deprecated');
Expect(1, 847, '\p{^Is_Other_Default_Ignorable_Code_Point=f}', 'deprecated');
Expect(1, 847, '\P{Is_Other_Default_Ignorable_Code_Point=f}', 'deprecated');
Expect(0, 847, '\P{^Is_Other_Default_Ignorable_Code_Point=f}', 'deprecated');
Expect(1, 846, '\p{Is_Other_Default_Ignorable_Code_Point=__F}', 'deprecated');
Expect(0, 846, '\p{^Is_Other_Default_Ignorable_Code_Point=__F}', 'deprecated');
Expect(0, 846, '\P{Is_Other_Default_Ignorable_Code_Point=__F}', 'deprecated');
Expect(1, 846, '\P{^Is_Other_Default_Ignorable_Code_Point=__F}', 'deprecated');
Expect(0, 847, '\p{Is_Other_Default_Ignorable_Code_Point=__F}', 'deprecated');
Expect(1, 847, '\p{^Is_Other_Default_Ignorable_Code_Point=__F}', 'deprecated');
Expect(1, 847, '\P{Is_Other_Default_Ignorable_Code_Point=__F}', 'deprecated');
Expect(0, 847, '\P{^Is_Other_Default_Ignorable_Code_Point=__F}', 'deprecated');
Error('\p{Is_ODI=:=_	False}');
Error('\P{Is_ODI=:=_	False}');
Expect(1, 846, '\p{Is_ODI=false}', 'deprecated');
Expect(0, 846, '\p{^Is_ODI=false}', 'deprecated');
Expect(0, 846, '\P{Is_ODI=false}', 'deprecated');
Expect(1, 846, '\P{^Is_ODI=false}', 'deprecated');
Expect(0, 847, '\p{Is_ODI=false}', 'deprecated');
Expect(1, 847, '\p{^Is_ODI=false}', 'deprecated');
Expect(1, 847, '\P{Is_ODI=false}', 'deprecated');
Expect(0, 847, '\P{^Is_ODI=false}', 'deprecated');
Expect(1, 846, '\p{Is_ODI=	 false}', 'deprecated');
Expect(0, 846, '\p{^Is_ODI=	 false}', 'deprecated');
Expect(0, 846, '\P{Is_ODI=	 false}', 'deprecated');
Expect(1, 846, '\P{^Is_ODI=	 false}', 'deprecated');
Expect(0, 847, '\p{Is_ODI=	 false}', 'deprecated');
Expect(1, 847, '\p{^Is_ODI=	 false}', 'deprecated');
Expect(1, 847, '\P{Is_ODI=	 false}', 'deprecated');
Expect(0, 847, '\P{^Is_ODI=	 false}', 'deprecated');
Error('\p{Cased=/a/YES}');
Error('\P{Cased=/a/YES}');
Expect(1, 90, '\p{Cased=yes}', "");
Expect(0, 90, '\p{^Cased=yes}', "");
Expect(0, 90, '\P{Cased=yes}', "");
Expect(1, 90, '\P{^Cased=yes}', "");
Expect(0, 64, '\p{Cased=yes}', "");
Expect(1, 64, '\p{^Cased=yes}', "");
Expect(1, 64, '\P{Cased=yes}', "");
Expect(0, 64, '\P{^Cased=yes}', "");
Expect(1, 90, '\p{Cased=_YES}', "");
Expect(0, 90, '\p{^Cased=_YES}', "");
Expect(0, 90, '\P{Cased=_YES}', "");
Expect(1, 90, '\P{^Cased=_YES}', "");
Expect(0, 64, '\p{Cased=_YES}', "");
Expect(1, 64, '\p{^Cased=_YES}', "");
Expect(1, 64, '\P{Cased=_YES}', "");
Expect(0, 64, '\P{^Cased=_YES}', "");
Error('\p{Is_Cased: -/a/Y}');
Error('\P{Is_Cased: -/a/Y}');
Expect(1, 90, '\p{Is_Cased=y}', "");
Expect(0, 90, '\p{^Is_Cased=y}', "");
Expect(0, 90, '\P{Is_Cased=y}', "");
Expect(1, 90, '\P{^Is_Cased=y}', "");
Expect(0, 64, '\p{Is_Cased=y}', "");
Expect(1, 64, '\p{^Is_Cased=y}', "");
Expect(1, 64, '\P{Is_Cased=y}', "");
Expect(0, 64, '\P{^Is_Cased=y}', "");
Expect(1, 90, '\p{Is_Cased=--y}', "");
Expect(0, 90, '\p{^Is_Cased=--y}', "");
Expect(0, 90, '\P{Is_Cased=--y}', "");
Expect(1, 90, '\P{^Is_Cased=--y}', "");
Expect(0, 64, '\p{Is_Cased=--y}', "");
Expect(1, 64, '\p{^Is_Cased=--y}', "");
Expect(1, 64, '\P{Is_Cased=--y}', "");
Expect(0, 64, '\P{^Is_Cased=--y}', "");
Error('\p{Cased=_/a/t}');
Error('\P{Cased=_/a/t}');
Expect(1, 90, '\p{Cased=t}', "");
Expect(0, 90, '\p{^Cased=t}', "");
Expect(0, 90, '\P{Cased=t}', "");
Expect(1, 90, '\P{^Cased=t}', "");
Expect(0, 64, '\p{Cased=t}', "");
Expect(1, 64, '\p{^Cased=t}', "");
Expect(1, 64, '\P{Cased=t}', "");
Expect(0, 64, '\P{^Cased=t}', "");
Expect(1, 90, '\p{Cased=- T}', "");
Expect(0, 90, '\p{^Cased=- T}', "");
Expect(0, 90, '\P{Cased=- T}', "");
Expect(1, 90, '\P{^Cased=- T}', "");
Expect(0, 64, '\p{Cased=- T}', "");
Expect(1, 64, '\p{^Cased=- T}', "");
Expect(1, 64, '\P{Cased=- T}', "");
Expect(0, 64, '\P{^Cased=- T}', "");
Error('\p{Is_Cased=	true:=}');
Error('\P{Is_Cased=	true:=}');
Expect(1, 90, '\p{Is_Cased=true}', "");
Expect(0, 90, '\p{^Is_Cased=true}', "");
Expect(0, 90, '\P{Is_Cased=true}', "");
Expect(1, 90, '\P{^Is_Cased=true}', "");
Expect(0, 64, '\p{Is_Cased=true}', "");
Expect(1, 64, '\p{^Is_Cased=true}', "");
Expect(1, 64, '\P{Is_Cased=true}', "");
Expect(0, 64, '\P{^Is_Cased=true}', "");
Expect(1, 90, '\p{Is_Cased=	 True}', "");
Expect(0, 90, '\p{^Is_Cased=	 True}', "");
Expect(0, 90, '\P{Is_Cased=	 True}', "");
Expect(1, 90, '\P{^Is_Cased=	 True}', "");
Expect(0, 64, '\p{Is_Cased=	 True}', "");
Expect(1, 64, '\p{^Is_Cased=	 True}', "");
Expect(1, 64, '\P{Is_Cased=	 True}', "");
Expect(0, 64, '\P{^Is_Cased=	 True}', "");
Error('\p{Cased:	:=	No}');
Error('\P{Cased:	:=	No}');
Expect(1, 64, '\p{Cased=no}', "");
Expect(0, 64, '\p{^Cased=no}', "");
Expect(0, 64, '\P{Cased=no}', "");
Expect(1, 64, '\P{^Cased=no}', "");
Expect(0, 90, '\p{Cased=no}', "");
Expect(1, 90, '\p{^Cased=no}', "");
Expect(1, 90, '\P{Cased=no}', "");
Expect(0, 90, '\P{^Cased=no}', "");
Expect(1, 64, '\p{Cased=-_no}', "");
Expect(0, 64, '\p{^Cased=-_no}', "");
Expect(0, 64, '\P{Cased=-_no}', "");
Expect(1, 64, '\P{^Cased=-_no}', "");
Expect(0, 90, '\p{Cased=-_no}', "");
Expect(1, 90, '\p{^Cased=-_no}', "");
Expect(1, 90, '\P{Cased=-_no}', "");
Expect(0, 90, '\P{^Cased=-_no}', "");
Error('\p{Is_Cased: /a/N}');
Error('\P{Is_Cased: /a/N}');
Expect(1, 64, '\p{Is_Cased=n}', "");
Expect(0, 64, '\p{^Is_Cased=n}', "");
Expect(0, 64, '\P{Is_Cased=n}', "");
Expect(1, 64, '\P{^Is_Cased=n}', "");
Expect(0, 90, '\p{Is_Cased=n}', "");
Expect(1, 90, '\p{^Is_Cased=n}', "");
Expect(1, 90, '\P{Is_Cased=n}', "");
Expect(0, 90, '\P{^Is_Cased=n}', "");
Expect(1, 64, '\p{Is_Cased: _N}', "");
Expect(0, 64, '\p{^Is_Cased: _N}', "");
Expect(0, 64, '\P{Is_Cased: _N}', "");
Expect(1, 64, '\P{^Is_Cased: _N}', "");
Expect(0, 90, '\p{Is_Cased: _N}', "");
Expect(1, 90, '\p{^Is_Cased: _N}', "");
Expect(1, 90, '\P{Is_Cased: _N}', "");
Expect(0, 90, '\P{^Is_Cased: _N}', "");
Error('\p{Cased=/a/ F}');
Error('\P{Cased=/a/ F}');
Expect(1, 64, '\p{Cased=f}', "");
Expect(0, 64, '\p{^Cased=f}', "");
Expect(0, 64, '\P{Cased=f}', "");
Expect(1, 64, '\P{^Cased=f}', "");
Expect(0, 90, '\p{Cased=f}', "");
Expect(1, 90, '\p{^Cased=f}', "");
Expect(1, 90, '\P{Cased=f}', "");
Expect(0, 90, '\P{^Cased=f}', "");
Expect(1, 64, '\p{Cased=	 f}', "");
Expect(0, 64, '\p{^Cased=	 f}', "");
Expect(0, 64, '\P{Cased=	 f}', "");
Expect(1, 64, '\P{^Cased=	 f}', "");
Expect(0, 90, '\p{Cased=	 f}', "");
Expect(1, 90, '\p{^Cased=	 f}', "");
Expect(1, 90, '\P{Cased=	 f}', "");
Expect(0, 90, '\P{^Cased=	 f}', "");
Error('\p{Is_Cased=_/a/FALSE}');
Error('\P{Is_Cased=_/a/FALSE}');
Expect(1, 64, '\p{Is_Cased:	false}', "");
Expect(0, 64, '\p{^Is_Cased:	false}', "");
Expect(0, 64, '\P{Is_Cased:	false}', "");
Expect(1, 64, '\P{^Is_Cased:	false}', "");
Expect(0, 90, '\p{Is_Cased:	false}', "");
Expect(1, 90, '\p{^Is_Cased:	false}', "");
Expect(1, 90, '\P{Is_Cased:	false}', "");
Expect(0, 90, '\P{^Is_Cased:	false}', "");
Expect(1, 64, '\p{Is_Cased=-False}', "");
Expect(0, 64, '\p{^Is_Cased=-False}', "");
Expect(0, 64, '\P{Is_Cased=-False}', "");
Expect(1, 64, '\P{^Is_Cased=-False}', "");
Expect(0, 90, '\p{Is_Cased=-False}', "");
Expect(1, 90, '\p{^Is_Cased=-False}', "");
Expect(1, 90, '\P{Is_Cased=-False}', "");
Expect(0, 90, '\P{^Is_Cased=-False}', "");
Error('\p{Joining_Type=__Transparent:=}');
Error('\P{Joining_Type=__Transparent:=}');
Expect(1, 173, '\p{Joining_Type=transparent}', "");
Expect(0, 173, '\p{^Joining_Type=transparent}', "");
Expect(0, 173, '\P{Joining_Type=transparent}', "");
Expect(1, 173, '\P{^Joining_Type=transparent}', "");
Expect(0, 172, '\p{Joining_Type=transparent}', "");
Expect(1, 172, '\p{^Joining_Type=transparent}', "");
Expect(1, 172, '\P{Joining_Type=transparent}', "");
Expect(0, 172, '\P{^Joining_Type=transparent}', "");
Expect(1, 173, '\p{Joining_Type=	 TRANSPARENT}', "");
Expect(0, 173, '\p{^Joining_Type=	 TRANSPARENT}', "");
Expect(0, 173, '\P{Joining_Type=	 TRANSPARENT}', "");
Expect(1, 173, '\P{^Joining_Type=	 TRANSPARENT}', "");
Expect(0, 172, '\p{Joining_Type=	 TRANSPARENT}', "");
Expect(1, 172, '\p{^Joining_Type=	 TRANSPARENT}', "");
Expect(1, 172, '\P{Joining_Type=	 TRANSPARENT}', "");
Expect(0, 172, '\P{^Joining_Type=	 TRANSPARENT}', "");
Error('\p{Jt= /a/t}');
Error('\P{Jt= /a/t}');
Expect(1, 173, '\p{Jt=t}', "");
Expect(0, 173, '\p{^Jt=t}', "");
Expect(0, 173, '\P{Jt=t}', "");
Expect(1, 173, '\P{^Jt=t}', "");
Expect(0, 172, '\p{Jt=t}', "");
Expect(1, 172, '\p{^Jt=t}', "");
Expect(1, 172, '\P{Jt=t}', "");
Expect(0, 172, '\P{^Jt=t}', "");
Expect(1, 173, '\p{Jt=	 T}', "");
Expect(0, 173, '\p{^Jt=	 T}', "");
Expect(0, 173, '\P{Jt=	 T}', "");
Expect(1, 173, '\P{^Jt=	 T}', "");
Expect(0, 172, '\p{Jt=	 T}', "");
Expect(1, 172, '\p{^Jt=	 T}', "");
Expect(1, 172, '\P{Jt=	 T}', "");
Expect(0, 172, '\P{^Jt=	 T}', "");
Error('\p{Is_Joining_Type=		TRANSPARENT/a/}');
Error('\P{Is_Joining_Type=		TRANSPARENT/a/}');
Expect(1, 173, '\p{Is_Joining_Type=transparent}', "");
Expect(0, 173, '\p{^Is_Joining_Type=transparent}', "");
Expect(0, 173, '\P{Is_Joining_Type=transparent}', "");
Expect(1, 173, '\P{^Is_Joining_Type=transparent}', "");
Expect(0, 172, '\p{Is_Joining_Type=transparent}', "");
Expect(1, 172, '\p{^Is_Joining_Type=transparent}', "");
Expect(1, 172, '\P{Is_Joining_Type=transparent}', "");
Expect(0, 172, '\P{^Is_Joining_Type=transparent}', "");
Expect(1, 173, '\p{Is_Joining_Type:   TRANSPARENT}', "");
Expect(0, 173, '\p{^Is_Joining_Type:   TRANSPARENT}', "");
Expect(0, 173, '\P{Is_Joining_Type:   TRANSPARENT}', "");
Expect(1, 173, '\P{^Is_Joining_Type:   TRANSPARENT}', "");
Expect(0, 172, '\p{Is_Joining_Type:   TRANSPARENT}', "");
Expect(1, 172, '\p{^Is_Joining_Type:   TRANSPARENT}', "");
Expect(1, 172, '\P{Is_Joining_Type:   TRANSPARENT}', "");
Expect(0, 172, '\P{^Is_Joining_Type:   TRANSPARENT}', "");
Error('\p{Is_Jt=/a/- T}');
Error('\P{Is_Jt=/a/- T}');
Expect(1, 173, '\p{Is_Jt:   t}', "");
Expect(0, 173, '\p{^Is_Jt:   t}', "");
Expect(0, 173, '\P{Is_Jt:   t}', "");
Expect(1, 173, '\P{^Is_Jt:   t}', "");
Expect(0, 172, '\p{Is_Jt:   t}', "");
Expect(1, 172, '\p{^Is_Jt:   t}', "");
Expect(1, 172, '\P{Is_Jt:   t}', "");
Expect(0, 172, '\P{^Is_Jt:   t}', "");
Expect(1, 173, '\p{Is_Jt:   T}', "");
Expect(0, 173, '\p{^Is_Jt:   T}', "");
Expect(0, 173, '\P{Is_Jt:   T}', "");
Expect(1, 173, '\P{^Is_Jt:   T}', "");
Expect(0, 172, '\p{Is_Jt:   T}', "");
Expect(1, 172, '\p{^Is_Jt:   T}', "");
Expect(1, 172, '\P{Is_Jt:   T}', "");
Expect(0, 172, '\P{^Is_Jt:   T}', "");
Error('\p{Joining_Type= /a/rightjoining}');
Error('\P{Joining_Type= /a/rightjoining}');
Expect(1, 1573, '\p{Joining_Type=rightjoining}', "");
Expect(0, 1573, '\p{^Joining_Type=rightjoining}', "");
Expect(0, 1573, '\P{Joining_Type=rightjoining}', "");
Expect(1, 1573, '\P{^Joining_Type=rightjoining}', "");
Expect(0, 1569, '\p{Joining_Type=rightjoining}', "");
Expect(1, 1569, '\p{^Joining_Type=rightjoining}', "");
Expect(1, 1569, '\P{Joining_Type=rightjoining}', "");
Expect(0, 1569, '\P{^Joining_Type=rightjoining}', "");
Expect(1, 1573, '\p{Joining_Type=_	right-JOINING}', "");
Expect(0, 1573, '\p{^Joining_Type=_	right-JOINING}', "");
Expect(0, 1573, '\P{Joining_Type=_	right-JOINING}', "");
Expect(1, 1573, '\P{^Joining_Type=_	right-JOINING}', "");
Expect(0, 1569, '\p{Joining_Type=_	right-JOINING}', "");
Expect(1, 1569, '\p{^Joining_Type=_	right-JOINING}', "");
Expect(1, 1569, '\P{Joining_Type=_	right-JOINING}', "");
Expect(0, 1569, '\P{^Joining_Type=_	right-JOINING}', "");
Error('\p{Jt=	/a/R}');
Error('\P{Jt=	/a/R}');
Expect(1, 1573, '\p{Jt=r}', "");
Expect(0, 1573, '\p{^Jt=r}', "");
Expect(0, 1573, '\P{Jt=r}', "");
Expect(1, 1573, '\P{^Jt=r}', "");
Expect(0, 1569, '\p{Jt=r}', "");
Expect(1, 1569, '\p{^Jt=r}', "");
Expect(1, 1569, '\P{Jt=r}', "");
Expect(0, 1569, '\P{^Jt=r}', "");
Expect(1, 1573, '\p{Jt=R}', "");
Expect(0, 1573, '\p{^Jt=R}', "");
Expect(0, 1573, '\P{Jt=R}', "");
Expect(1, 1573, '\P{^Jt=R}', "");
Expect(0, 1569, '\p{Jt=R}', "");
Expect(1, 1569, '\p{^Jt=R}', "");
Expect(1, 1569, '\P{Jt=R}', "");
Expect(0, 1569, '\P{^Jt=R}', "");
Error('\p{Is_Joining_Type=	_Right/a/joining}');
Error('\P{Is_Joining_Type=	_Right/a/joining}');
Expect(1, 1573, '\p{Is_Joining_Type:	rightjoining}', "");
Expect(0, 1573, '\p{^Is_Joining_Type:	rightjoining}', "");
Expect(0, 1573, '\P{Is_Joining_Type:	rightjoining}', "");
Expect(1, 1573, '\P{^Is_Joining_Type:	rightjoining}', "");
Expect(0, 1569, '\p{Is_Joining_Type:	rightjoining}', "");
Expect(1, 1569, '\p{^Is_Joining_Type:	rightjoining}', "");
Expect(1, 1569, '\P{Is_Joining_Type:	rightjoining}', "");
Expect(0, 1569, '\P{^Is_Joining_Type:	rightjoining}', "");
Expect(1, 1573, '\p{Is_Joining_Type= rightjoining}', "");
Expect(0, 1573, '\p{^Is_Joining_Type= rightjoining}', "");
Expect(0, 1573, '\P{Is_Joining_Type= rightjoining}', "");
Expect(1, 1573, '\P{^Is_Joining_Type= rightjoining}', "");
Expect(0, 1569, '\p{Is_Joining_Type= rightjoining}', "");
Expect(1, 1569, '\p{^Is_Joining_Type= rightjoining}', "");
Expect(1, 1569, '\P{Is_Joining_Type= rightjoining}', "");
Expect(0, 1569, '\P{^Is_Joining_Type= rightjoining}', "");
Error('\p{Is_Jt=--R/a/}');
Error('\P{Is_Jt=--R/a/}');
Expect(1, 1573, '\p{Is_Jt:r}', "");
Expect(0, 1573, '\p{^Is_Jt:r}', "");
Expect(0, 1573, '\P{Is_Jt:r}', "");
Expect(1, 1573, '\P{^Is_Jt:r}', "");
Expect(0, 1569, '\p{Is_Jt:r}', "");
Expect(1, 1569, '\p{^Is_Jt:r}', "");
Expect(1, 1569, '\P{Is_Jt:r}', "");
Expect(0, 1569, '\P{^Is_Jt:r}', "");
Error('\p{Joining_Type=/a/-_Join CAUSING}');
Error('\P{Joining_Type=/a/-_Join CAUSING}');
Expect(1, 1600, '\p{Joining_Type:joincausing}', "");
Expect(0, 1600, '\p{^Joining_Type:joincausing}', "");
Expect(0, 1600, '\P{Joining_Type:joincausing}', "");
Expect(1, 1600, '\P{^Joining_Type:joincausing}', "");
Expect(0, 1599, '\p{Joining_Type:joincausing}', "");
Expect(1, 1599, '\p{^Joining_Type:joincausing}', "");
Expect(1, 1599, '\P{Joining_Type:joincausing}', "");
Expect(0, 1599, '\P{^Joining_Type:joincausing}', "");
Expect(1, 1600, '\p{Joining_Type=_JOIN Causing}', "");
Expect(0, 1600, '\p{^Joining_Type=_JOIN Causing}', "");
Expect(0, 1600, '\P{Joining_Type=_JOIN Causing}', "");
Expect(1, 1600, '\P{^Joining_Type=_JOIN Causing}', "");
Expect(0, 1599, '\p{Joining_Type=_JOIN Causing}', "");
Expect(1, 1599, '\p{^Joining_Type=_JOIN Causing}', "");
Expect(1, 1599, '\P{Joining_Type=_JOIN Causing}', "");
Expect(0, 1599, '\P{^Joining_Type=_JOIN Causing}', "");
Error('\p{Jt:   /a/	C}');
Error('\P{Jt:   /a/	C}');
Expect(1, 1600, '\p{Jt=c}', "");
Expect(0, 1600, '\p{^Jt=c}', "");
Expect(0, 1600, '\P{Jt=c}', "");
Expect(1, 1600, '\P{^Jt=c}', "");
Expect(0, 1599, '\p{Jt=c}', "");
Expect(1, 1599, '\p{^Jt=c}', "");
Expect(1, 1599, '\P{Jt=c}', "");
Expect(0, 1599, '\P{^Jt=c}', "");
Expect(1, 1600, '\p{Jt:-C}', "");
Expect(0, 1600, '\p{^Jt:-C}', "");
Expect(0, 1600, '\P{Jt:-C}', "");
Expect(1, 1600, '\P{^Jt:-C}', "");
Expect(0, 1599, '\p{Jt:-C}', "");
Expect(1, 1599, '\p{^Jt:-C}', "");
Expect(1, 1599, '\P{Jt:-C}', "");
Expect(0, 1599, '\P{^Jt:-C}', "");
Error('\p{Is_Joining_Type=	 JOIN:=Causing}');
Error('\P{Is_Joining_Type=	 JOIN:=Causing}');
Expect(1, 1600, '\p{Is_Joining_Type: joincausing}', "");
Expect(0, 1600, '\p{^Is_Joining_Type: joincausing}', "");
Expect(0, 1600, '\P{Is_Joining_Type: joincausing}', "");
Expect(1, 1600, '\P{^Is_Joining_Type: joincausing}', "");
Expect(0, 1599, '\p{Is_Joining_Type: joincausing}', "");
Expect(1, 1599, '\p{^Is_Joining_Type: joincausing}', "");
Expect(1, 1599, '\P{Is_Joining_Type: joincausing}', "");
Expect(0, 1599, '\P{^Is_Joining_Type: joincausing}', "");
Expect(1, 1600, '\p{Is_Joining_Type= _Join causing}', "");
Expect(0, 1600, '\p{^Is_Joining_Type= _Join causing}', "");
Expect(0, 1600, '\P{Is_Joining_Type= _Join causing}', "");
Expect(1, 1600, '\P{^Is_Joining_Type= _Join causing}', "");
Expect(0, 1599, '\p{Is_Joining_Type= _Join causing}', "");
Expect(1, 1599, '\p{^Is_Joining_Type= _Join causing}', "");
Expect(1, 1599, '\P{Is_Joining_Type= _Join causing}', "");
Expect(0, 1599, '\P{^Is_Joining_Type= _Join causing}', "");
Error('\p{Is_Jt=:=		C}');
Error('\P{Is_Jt=:=		C}');
Expect(1, 1600, '\p{Is_Jt=c}', "");
Expect(0, 1600, '\p{^Is_Jt=c}', "");
Expect(0, 1600, '\P{Is_Jt=c}', "");
Expect(1, 1600, '\P{^Is_Jt=c}', "");
Expect(0, 1599, '\p{Is_Jt=c}', "");
Expect(1, 1599, '\p{^Is_Jt=c}', "");
Expect(1, 1599, '\P{Is_Jt=c}', "");
Expect(0, 1599, '\P{^Is_Jt=c}', "");
Expect(1, 1600, '\p{Is_Jt=	C}', "");
Expect(0, 1600, '\p{^Is_Jt=	C}', "");
Expect(0, 1600, '\P{Is_Jt=	C}', "");
Expect(1, 1600, '\P{^Is_Jt=	C}', "");
Expect(0, 1599, '\p{Is_Jt=	C}', "");
Expect(1, 1599, '\p{^Is_Jt=	C}', "");
Expect(1, 1599, '\P{Is_Jt=	C}', "");
Expect(0, 1599, '\P{^Is_Jt=	C}', "");
Error('\p{Joining_Type:	_	NON:=JOINING}');
Error('\P{Joining_Type:	_	NON:=JOINING}');
Expect(1, 172, '\p{Joining_Type=nonjoining}', "");
Expect(0, 172, '\p{^Joining_Type=nonjoining}', "");
Expect(0, 172, '\P{Joining_Type=nonjoining}', "");
Expect(1, 172, '\P{^Joining_Type=nonjoining}', "");
Expect(0, 173, '\p{Joining_Type=nonjoining}', "");
Expect(1, 173, '\p{^Joining_Type=nonjoining}', "");
Expect(1, 173, '\P{Joining_Type=nonjoining}', "");
Expect(0, 173, '\P{^Joining_Type=nonjoining}', "");
Expect(1, 172, '\p{Joining_Type=- NON	JOINING}', "");
Expect(0, 172, '\p{^Joining_Type=- NON	JOINING}', "");
Expect(0, 172, '\P{Joining_Type=- NON	JOINING}', "");
Expect(1, 172, '\P{^Joining_Type=- NON	JOINING}', "");
Expect(0, 173, '\p{Joining_Type=- NON	JOINING}', "");
Expect(1, 173, '\p{^Joining_Type=- NON	JOINING}', "");
Expect(1, 173, '\P{Joining_Type=- NON	JOINING}', "");
Expect(0, 173, '\P{^Joining_Type=- NON	JOINING}', "");
Error('\p{Jt=--U:=}');
Error('\P{Jt=--U:=}');
Expect(1, 172, '\p{Jt=u}', "");
Expect(0, 172, '\p{^Jt=u}', "");
Expect(0, 172, '\P{Jt=u}', "");
Expect(1, 172, '\P{^Jt=u}', "");
Expect(0, 173, '\p{Jt=u}', "");
Expect(1, 173, '\p{^Jt=u}', "");
Expect(1, 173, '\P{Jt=u}', "");
Expect(0, 173, '\P{^Jt=u}', "");
Expect(1, 172, '\p{Jt=_ U}', "");
Expect(0, 172, '\p{^Jt=_ U}', "");
Expect(0, 172, '\P{Jt=_ U}', "");
Expect(1, 172, '\P{^Jt=_ U}', "");
Expect(0, 173, '\p{Jt=_ U}', "");
Expect(1, 173, '\p{^Jt=_ U}', "");
Expect(1, 173, '\P{Jt=_ U}', "");
Expect(0, 173, '\P{^Jt=_ U}', "");
Error('\p{Is_Joining_Type=_Non:=Joining}');
Error('\P{Is_Joining_Type=_Non:=Joining}');
Expect(1, 172, '\p{Is_Joining_Type=nonjoining}', "");
Expect(0, 172, '\p{^Is_Joining_Type=nonjoining}', "");
Expect(0, 172, '\P{Is_Joining_Type=nonjoining}', "");
Expect(1, 172, '\P{^Is_Joining_Type=nonjoining}', "");
Expect(0, 173, '\p{Is_Joining_Type=nonjoining}', "");
Expect(1, 173, '\p{^Is_Joining_Type=nonjoining}', "");
Expect(1, 173, '\P{Is_Joining_Type=nonjoining}', "");
Expect(0, 173, '\P{^Is_Joining_Type=nonjoining}', "");
Expect(1, 172, '\p{Is_Joining_Type:    Non	Joining}', "");
Expect(0, 172, '\p{^Is_Joining_Type:    Non	Joining}', "");
Expect(0, 172, '\P{Is_Joining_Type:    Non	Joining}', "");
Expect(1, 172, '\P{^Is_Joining_Type:    Non	Joining}', "");
Expect(0, 173, '\p{Is_Joining_Type:    Non	Joining}', "");
Expect(1, 173, '\p{^Is_Joining_Type:    Non	Joining}', "");
Expect(1, 173, '\P{Is_Joining_Type:    Non	Joining}', "");
Expect(0, 173, '\P{^Is_Joining_Type:    Non	Joining}', "");
Error('\p{Is_Jt=	 U:=}');
Error('\P{Is_Jt=	 U:=}');
Expect(1, 172, '\p{Is_Jt=u}', "");
Expect(0, 172, '\p{^Is_Jt=u}', "");
Expect(0, 172, '\P{Is_Jt=u}', "");
Expect(1, 172, '\P{^Is_Jt=u}', "");
Expect(0, 173, '\p{Is_Jt=u}', "");
Expect(1, 173, '\p{^Is_Jt=u}', "");
Expect(1, 173, '\P{Is_Jt=u}', "");
Expect(0, 173, '\P{^Is_Jt=u}', "");
Expect(1, 172, '\p{Is_Jt: 	-u}', "");
Expect(0, 172, '\p{^Is_Jt: 	-u}', "");
Expect(0, 172, '\P{Is_Jt: 	-u}', "");
Expect(1, 172, '\P{^Is_Jt: 	-u}', "");
Expect(0, 173, '\p{Is_Jt: 	-u}', "");
Expect(1, 173, '\p{^Is_Jt: 	-u}', "");
Expect(1, 173, '\P{Is_Jt: 	-u}', "");
Expect(0, 173, '\P{^Is_Jt: 	-u}', "");
Error('\p{Joining_Type=- DUAL-joining:=}');
Error('\P{Joining_Type=- DUAL-joining:=}');
Expect(1, 1568, '\p{Joining_Type=dualjoining}', "");
Expect(0, 1568, '\p{^Joining_Type=dualjoining}', "");
Expect(0, 1568, '\P{Joining_Type=dualjoining}', "");
Expect(1, 1568, '\P{^Joining_Type=dualjoining}', "");
Expect(0, 1567, '\p{Joining_Type=dualjoining}', "");
Expect(1, 1567, '\p{^Joining_Type=dualjoining}', "");
Expect(1, 1567, '\P{Joining_Type=dualjoining}', "");
Expect(0, 1567, '\P{^Joining_Type=dualjoining}', "");
Expect(1, 1568, '\p{Joining_Type=- DUALJoining}', "");
Expect(0, 1568, '\p{^Joining_Type=- DUALJoining}', "");
Expect(0, 1568, '\P{Joining_Type=- DUALJoining}', "");
Expect(1, 1568, '\P{^Joining_Type=- DUALJoining}', "");
Expect(0, 1567, '\p{Joining_Type=- DUALJoining}', "");
Expect(1, 1567, '\p{^Joining_Type=- DUALJoining}', "");
Expect(1, 1567, '\P{Joining_Type=- DUALJoining}', "");
Expect(0, 1567, '\P{^Joining_Type=- DUALJoining}', "");
Error('\p{Jt: -	D/a/}');
Error('\P{Jt: -	D/a/}');
Expect(1, 1568, '\p{Jt=d}', "");
Expect(0, 1568, '\p{^Jt=d}', "");
Expect(0, 1568, '\P{Jt=d}', "");
Expect(1, 1568, '\P{^Jt=d}', "");
Expect(0, 1567, '\p{Jt=d}', "");
Expect(1, 1567, '\p{^Jt=d}', "");
Expect(1, 1567, '\P{Jt=d}', "");
Expect(0, 1567, '\P{^Jt=d}', "");
Expect(1, 1568, '\p{Jt=_D}', "");
Expect(0, 1568, '\p{^Jt=_D}', "");
Expect(0, 1568, '\P{Jt=_D}', "");
Expect(1, 1568, '\P{^Jt=_D}', "");
Expect(0, 1567, '\p{Jt=_D}', "");
Expect(1, 1567, '\p{^Jt=_D}', "");
Expect(1, 1567, '\P{Jt=_D}', "");
Expect(0, 1567, '\P{^Jt=_D}', "");
Error('\p{Is_Joining_Type=/a/	Dual_joining}');
Error('\P{Is_Joining_Type=/a/	Dual_joining}');
Expect(1, 1568, '\p{Is_Joining_Type=dualjoining}', "");
Expect(0, 1568, '\p{^Is_Joining_Type=dualjoining}', "");
Expect(0, 1568, '\P{Is_Joining_Type=dualjoining}', "");
Expect(1, 1568, '\P{^Is_Joining_Type=dualjoining}', "");
Expect(0, 1567, '\p{Is_Joining_Type=dualjoining}', "");
Expect(1, 1567, '\p{^Is_Joining_Type=dualjoining}', "");
Expect(1, 1567, '\P{Is_Joining_Type=dualjoining}', "");
Expect(0, 1567, '\P{^Is_Joining_Type=dualjoining}', "");
Expect(1, 1568, '\p{Is_Joining_Type=DualJoining}', "");
Expect(0, 1568, '\p{^Is_Joining_Type=DualJoining}', "");
Expect(0, 1568, '\P{Is_Joining_Type=DualJoining}', "");
Expect(1, 1568, '\P{^Is_Joining_Type=DualJoining}', "");
Expect(0, 1567, '\p{Is_Joining_Type=DualJoining}', "");
Expect(1, 1567, '\p{^Is_Joining_Type=DualJoining}', "");
Expect(1, 1567, '\P{Is_Joining_Type=DualJoining}', "");
Expect(0, 1567, '\P{^Is_Joining_Type=DualJoining}', "");
Error('\p{Is_Jt=/a/D}');
Error('\P{Is_Jt=/a/D}');
Expect(1, 1568, '\p{Is_Jt=d}', "");
Expect(0, 1568, '\p{^Is_Jt=d}', "");
Expect(0, 1568, '\P{Is_Jt=d}', "");
Expect(1, 1568, '\P{^Is_Jt=d}', "");
Expect(0, 1567, '\p{Is_Jt=d}', "");
Expect(1, 1567, '\p{^Is_Jt=d}', "");
Expect(1, 1567, '\P{Is_Jt=d}', "");
Expect(0, 1567, '\P{^Is_Jt=d}', "");
Expect(1, 1568, '\p{Is_Jt= d}', "");
Expect(0, 1568, '\p{^Is_Jt= d}', "");
Expect(0, 1568, '\P{Is_Jt= d}', "");
Expect(1, 1568, '\P{^Is_Jt= d}', "");
Expect(0, 1567, '\p{Is_Jt= d}', "");
Expect(1, 1567, '\p{^Is_Jt= d}', "");
Expect(1, 1567, '\P{Is_Jt= d}', "");
Expect(0, 1567, '\P{^Is_Jt= d}', "");
Error('\p{Joining_Type= :=Left Joining}');
Error('\P{Joining_Type= :=Left Joining}');
Expect(0, 1, '\p{Joining_Type=leftjoining}', "");
Expect(1, 1, '\p{^Joining_Type=leftjoining}', "");
Expect(1, 1, '\P{Joining_Type=leftjoining}', "");
Expect(0, 1, '\P{^Joining_Type=leftjoining}', "");
Expect(0, 1, '\p{Joining_Type=-	LeftJoining}', "");
Expect(1, 1, '\p{^Joining_Type=-	LeftJoining}', "");
Expect(1, 1, '\P{Joining_Type=-	LeftJoining}', "");
Expect(0, 1, '\P{^Joining_Type=-	LeftJoining}', "");
Error('\p{Jt=:=--L}');
Error('\P{Jt=:=--L}');
Expect(0, 1, '\p{Jt=l}', "");
Expect(1, 1, '\p{^Jt=l}', "");
Expect(1, 1, '\P{Jt=l}', "");
Expect(0, 1, '\P{^Jt=l}', "");
Expect(0, 1, '\p{Jt= 	L}', "");
Expect(1, 1, '\p{^Jt= 	L}', "");
Expect(1, 1, '\P{Jt= 	L}', "");
Expect(0, 1, '\P{^Jt= 	L}', "");
Error('\p{Is_Joining_Type=-LEFT-Joining:=}');
Error('\P{Is_Joining_Type=-LEFT-Joining:=}');
Expect(0, 1, '\p{Is_Joining_Type=leftjoining}', "");
Expect(1, 1, '\p{^Is_Joining_Type=leftjoining}', "");
Expect(1, 1, '\P{Is_Joining_Type=leftjoining}', "");
Expect(0, 1, '\P{^Is_Joining_Type=leftjoining}', "");
Expect(0, 1, '\p{Is_Joining_Type:	 Left	Joining}', "");
Expect(1, 1, '\p{^Is_Joining_Type:	 Left	Joining}', "");
Expect(1, 1, '\P{Is_Joining_Type:	 Left	Joining}', "");
Expect(0, 1, '\P{^Is_Joining_Type:	 Left	Joining}', "");
Error('\p{Is_Jt=:=_L}');
Error('\P{Is_Jt=:=_L}');
Expect(0, 1, '\p{Is_Jt=l}', "");
Expect(1, 1, '\p{^Is_Jt=l}', "");
Expect(1, 1, '\P{Is_Jt=l}', "");
Expect(0, 1, '\P{^Is_Jt=l}', "");
Expect(0, 1, '\p{Is_Jt= L}', "");
Expect(1, 1, '\p{^Is_Jt= L}', "");
Expect(1, 1, '\P{Is_Jt= L}', "");
Expect(0, 1, '\P{^Is_Jt= L}', "");
Error('\p{ID_Start=_:=YES}');
Error('\P{ID_Start=_:=YES}');
Expect(1, 90, '\p{ID_Start=yes}', "");
Expect(0, 90, '\p{^ID_Start=yes}', "");
Expect(0, 90, '\P{ID_Start=yes}', "");
Expect(1, 90, '\P{^ID_Start=yes}', "");
Expect(0, 64, '\p{ID_Start=yes}', "");
Expect(1, 64, '\p{^ID_Start=yes}', "");
Expect(1, 64, '\P{ID_Start=yes}', "");
Expect(0, 64, '\P{^ID_Start=yes}', "");
Expect(1, 90, '\p{ID_Start=	 yes}', "");
Expect(0, 90, '\p{^ID_Start=	 yes}', "");
Expect(0, 90, '\P{ID_Start=	 yes}', "");
Expect(1, 90, '\P{^ID_Start=	 yes}', "");
Expect(0, 64, '\p{ID_Start=	 yes}', "");
Expect(1, 64, '\p{^ID_Start=	 yes}', "");
Expect(1, 64, '\P{ID_Start=	 yes}', "");
Expect(0, 64, '\P{^ID_Start=	 yes}', "");
Error('\p{IDS:	/a/_-y}');
Error('\P{IDS:	/a/_-y}');
Expect(1, 90, '\p{IDS=y}', "");
Expect(0, 90, '\p{^IDS=y}', "");
Expect(0, 90, '\P{IDS=y}', "");
Expect(1, 90, '\P{^IDS=y}', "");
Expect(0, 64, '\p{IDS=y}', "");
Expect(1, 64, '\p{^IDS=y}', "");
Expect(1, 64, '\P{IDS=y}', "");
Expect(0, 64, '\P{^IDS=y}', "");
Expect(1, 90, '\p{IDS=-Y}', "");
Expect(0, 90, '\p{^IDS=-Y}', "");
Expect(0, 90, '\P{IDS=-Y}', "");
Expect(1, 90, '\P{^IDS=-Y}', "");
Expect(0, 64, '\p{IDS=-Y}', "");
Expect(1, 64, '\p{^IDS=-Y}', "");
Expect(1, 64, '\P{IDS=-Y}', "");
Expect(0, 64, '\P{^IDS=-Y}', "");
Error('\p{Is_ID_Start=	T/a/}');
Error('\P{Is_ID_Start=	T/a/}');
Expect(1, 90, '\p{Is_ID_Start=t}', "");
Expect(0, 90, '\p{^Is_ID_Start=t}', "");
Expect(0, 90, '\P{Is_ID_Start=t}', "");
Expect(1, 90, '\P{^Is_ID_Start=t}', "");
Expect(0, 64, '\p{Is_ID_Start=t}', "");
Expect(1, 64, '\p{^Is_ID_Start=t}', "");
Expect(1, 64, '\P{Is_ID_Start=t}', "");
Expect(0, 64, '\P{^Is_ID_Start=t}', "");
Expect(1, 90, '\p{Is_ID_Start=_ t}', "");
Expect(0, 90, '\p{^Is_ID_Start=_ t}', "");
Expect(0, 90, '\P{Is_ID_Start=_ t}', "");
Expect(1, 90, '\P{^Is_ID_Start=_ t}', "");
Expect(0, 64, '\p{Is_ID_Start=_ t}', "");
Expect(1, 64, '\p{^Is_ID_Start=_ t}', "");
Expect(1, 64, '\P{Is_ID_Start=_ t}', "");
Expect(0, 64, '\P{^Is_ID_Start=_ t}', "");
Error('\p{Is_IDS=:=	 True}');
Error('\P{Is_IDS=:=	 True}');
Expect(1, 90, '\p{Is_IDS=true}', "");
Expect(0, 90, '\p{^Is_IDS=true}', "");
Expect(0, 90, '\P{Is_IDS=true}', "");
Expect(1, 90, '\P{^Is_IDS=true}', "");
Expect(0, 64, '\p{Is_IDS=true}', "");
Expect(1, 64, '\p{^Is_IDS=true}', "");
Expect(1, 64, '\P{Is_IDS=true}', "");
Expect(0, 64, '\P{^Is_IDS=true}', "");
Expect(1, 90, '\p{Is_IDS= TRUE}', "");
Expect(0, 90, '\p{^Is_IDS= TRUE}', "");
Expect(0, 90, '\P{Is_IDS= TRUE}', "");
Expect(1, 90, '\P{^Is_IDS= TRUE}', "");
Expect(0, 64, '\p{Is_IDS= TRUE}', "");
Expect(1, 64, '\p{^Is_IDS= TRUE}', "");
Expect(1, 64, '\P{Is_IDS= TRUE}', "");
Expect(0, 64, '\P{^Is_IDS= TRUE}', "");
Error('\p{ID_Start=-_No:=}');
Error('\P{ID_Start=-_No:=}');
Expect(1, 64, '\p{ID_Start=no}', "");
Expect(0, 64, '\p{^ID_Start=no}', "");
Expect(0, 64, '\P{ID_Start=no}', "");
Expect(1, 64, '\P{^ID_Start=no}', "");
Expect(0, 90, '\p{ID_Start=no}', "");
Expect(1, 90, '\p{^ID_Start=no}', "");
Expect(1, 90, '\P{ID_Start=no}', "");
Expect(0, 90, '\P{^ID_Start=no}', "");
Expect(1, 64, '\p{ID_Start=	No}', "");
Expect(0, 64, '\p{^ID_Start=	No}', "");
Expect(0, 64, '\P{ID_Start=	No}', "");
Expect(1, 64, '\P{^ID_Start=	No}', "");
Expect(0, 90, '\p{ID_Start=	No}', "");
Expect(1, 90, '\p{^ID_Start=	No}', "");
Expect(1, 90, '\P{ID_Start=	No}', "");
Expect(0, 90, '\P{^ID_Start=	No}', "");
Error('\p{IDS=/a/_	N}');
Error('\P{IDS=/a/_	N}');
Expect(1, 64, '\p{IDS=n}', "");
Expect(0, 64, '\p{^IDS=n}', "");
Expect(0, 64, '\P{IDS=n}', "");
Expect(1, 64, '\P{^IDS=n}', "");
Expect(0, 90, '\p{IDS=n}', "");
Expect(1, 90, '\p{^IDS=n}', "");
Expect(1, 90, '\P{IDS=n}', "");
Expect(0, 90, '\P{^IDS=n}', "");
Expect(1, 64, '\p{IDS= N}', "");
Expect(0, 64, '\p{^IDS= N}', "");
Expect(0, 64, '\P{IDS= N}', "");
Expect(1, 64, '\P{^IDS= N}', "");
Expect(0, 90, '\p{IDS= N}', "");
Expect(1, 90, '\p{^IDS= N}', "");
Expect(1, 90, '\P{IDS= N}', "");
Expect(0, 90, '\P{^IDS= N}', "");
Error('\p{Is_ID_Start=	_F:=}');
Error('\P{Is_ID_Start=	_F:=}');
Expect(1, 64, '\p{Is_ID_Start=f}', "");
Expect(0, 64, '\p{^Is_ID_Start=f}', "");
Expect(0, 64, '\P{Is_ID_Start=f}', "");
Expect(1, 64, '\P{^Is_ID_Start=f}', "");
Expect(0, 90, '\p{Is_ID_Start=f}', "");
Expect(1, 90, '\p{^Is_ID_Start=f}', "");
Expect(1, 90, '\P{Is_ID_Start=f}', "");
Expect(0, 90, '\P{^Is_ID_Start=f}', "");
Expect(1, 64, '\p{Is_ID_Start=		f}', "");
Expect(0, 64, '\p{^Is_ID_Start=		f}', "");
Expect(0, 64, '\P{Is_ID_Start=		f}', "");
Expect(1, 64, '\P{^Is_ID_Start=		f}', "");
Expect(0, 90, '\p{Is_ID_Start=		f}', "");
Expect(1, 90, '\p{^Is_ID_Start=		f}', "");
Expect(1, 90, '\P{Is_ID_Start=		f}', "");
Expect(0, 90, '\P{^Is_ID_Start=		f}', "");
Error('\p{Is_IDS:	:=-	false}');
Error('\P{Is_IDS:	:=-	false}');
Expect(1, 64, '\p{Is_IDS=false}', "");
Expect(0, 64, '\p{^Is_IDS=false}', "");
Expect(0, 64, '\P{Is_IDS=false}', "");
Expect(1, 64, '\P{^Is_IDS=false}', "");
Expect(0, 90, '\p{Is_IDS=false}', "");
Expect(1, 90, '\p{^Is_IDS=false}', "");
Expect(1, 90, '\P{Is_IDS=false}', "");
Expect(0, 90, '\P{^Is_IDS=false}', "");
Expect(1, 64, '\p{Is_IDS= 	False}', "");
Expect(0, 64, '\p{^Is_IDS= 	False}', "");
Expect(0, 64, '\P{Is_IDS= 	False}', "");
Expect(1, 64, '\P{^Is_IDS= 	False}', "");
Expect(0, 90, '\p{Is_IDS= 	False}', "");
Expect(1, 90, '\p{^Is_IDS= 	False}', "");
Expect(1, 90, '\P{Is_IDS= 	False}', "");
Expect(0, 90, '\P{^Is_IDS= 	False}', "");
Error('\p{NFC_Quick_Check=-/a/Yes}');
Error('\P{NFC_Quick_Check=-/a/Yes}');
Expect(1, 767, '\p{NFC_Quick_Check=yes}', "");
Expect(0, 767, '\p{^NFC_Quick_Check=yes}', "");
Expect(0, 767, '\P{NFC_Quick_Check=yes}', "");
Expect(1, 767, '\P{^NFC_Quick_Check=yes}', "");
Expect(0, 772, '\p{NFC_Quick_Check=yes}', "");
Expect(1, 772, '\p{^NFC_Quick_Check=yes}', "");
Expect(1, 772, '\P{NFC_Quick_Check=yes}', "");
Expect(0, 772, '\P{^NFC_Quick_Check=yes}', "");
Expect(1, 767, '\p{NFC_Quick_Check=	yes}', "");
Expect(0, 767, '\p{^NFC_Quick_Check=	yes}', "");
Expect(0, 767, '\P{NFC_Quick_Check=	yes}', "");
Expect(1, 767, '\P{^NFC_Quick_Check=	yes}', "");
Expect(0, 772, '\p{NFC_Quick_Check=	yes}', "");
Expect(1, 772, '\p{^NFC_Quick_Check=	yes}', "");
Expect(1, 772, '\P{NFC_Quick_Check=	yes}', "");
Expect(0, 772, '\P{^NFC_Quick_Check=	yes}', "");
Error('\p{NFC_QC=:=  y}');
Error('\P{NFC_QC=:=  y}');
Expect(1, 767, '\p{NFC_QC=y}', "");
Expect(0, 767, '\p{^NFC_QC=y}', "");
Expect(0, 767, '\P{NFC_QC=y}', "");
Expect(1, 767, '\P{^NFC_QC=y}', "");
Expect(0, 772, '\p{NFC_QC=y}', "");
Expect(1, 772, '\p{^NFC_QC=y}', "");
Expect(1, 772, '\P{NFC_QC=y}', "");
Expect(0, 772, '\P{^NFC_QC=y}', "");
Expect(1, 767, '\p{NFC_QC=-Y}', "");
Expect(0, 767, '\p{^NFC_QC=-Y}', "");
Expect(0, 767, '\P{NFC_QC=-Y}', "");
Expect(1, 767, '\P{^NFC_QC=-Y}', "");
Expect(0, 772, '\p{NFC_QC=-Y}', "");
Expect(1, 772, '\p{^NFC_QC=-Y}', "");
Expect(1, 772, '\P{NFC_QC=-Y}', "");
Expect(0, 772, '\P{^NFC_QC=-Y}', "");
Error('\p{Is_NFC_Quick_Check=/a/ 	Yes}');
Error('\P{Is_NFC_Quick_Check=/a/ 	Yes}');
Expect(1, 767, '\p{Is_NFC_Quick_Check:	yes}', "");
Expect(0, 767, '\p{^Is_NFC_Quick_Check:	yes}', "");
Expect(0, 767, '\P{Is_NFC_Quick_Check:	yes}', "");
Expect(1, 767, '\P{^Is_NFC_Quick_Check:	yes}', "");
Expect(0, 772, '\p{Is_NFC_Quick_Check:	yes}', "");
Expect(1, 772, '\p{^Is_NFC_Quick_Check:	yes}', "");
Expect(1, 772, '\P{Is_NFC_Quick_Check:	yes}', "");
Expect(0, 772, '\P{^Is_NFC_Quick_Check:	yes}', "");
Expect(1, 767, '\p{Is_NFC_Quick_Check=	Yes}', "");
Expect(0, 767, '\p{^Is_NFC_Quick_Check=	Yes}', "");
Expect(0, 767, '\P{Is_NFC_Quick_Check=	Yes}', "");
Expect(1, 767, '\P{^Is_NFC_Quick_Check=	Yes}', "");
Expect(0, 772, '\p{Is_NFC_Quick_Check=	Yes}', "");
Expect(1, 772, '\p{^Is_NFC_Quick_Check=	Yes}', "");
Expect(1, 772, '\P{Is_NFC_Quick_Check=	Yes}', "");
Expect(0, 772, '\P{^Is_NFC_Quick_Check=	Yes}', "");
Error('\p{Is_NFC_QC= Y:=}');
Error('\P{Is_NFC_QC= Y:=}');
Expect(1, 767, '\p{Is_NFC_QC=y}', "");
Expect(0, 767, '\p{^Is_NFC_QC=y}', "");
Expect(0, 767, '\P{Is_NFC_QC=y}', "");
Expect(1, 767, '\P{^Is_NFC_QC=y}', "");
Expect(0, 772, '\p{Is_NFC_QC=y}', "");
Expect(1, 772, '\p{^Is_NFC_QC=y}', "");
Expect(1, 772, '\P{Is_NFC_QC=y}', "");
Expect(0, 772, '\P{^Is_NFC_QC=y}', "");
Expect(1, 767, '\p{Is_NFC_QC=- Y}', "");
Expect(0, 767, '\p{^Is_NFC_QC=- Y}', "");
Expect(0, 767, '\P{Is_NFC_QC=- Y}', "");
Expect(1, 767, '\P{^Is_NFC_QC=- Y}', "");
Expect(0, 772, '\p{Is_NFC_QC=- Y}', "");
Expect(1, 772, '\p{^Is_NFC_QC=- Y}', "");
Expect(1, 772, '\P{Is_NFC_QC=- Y}', "");
Expect(0, 772, '\P{^Is_NFC_QC=- Y}', "");
Error('\p{NFC_Quick_Check:   	No/a/}');
Error('\P{NFC_Quick_Check:   	No/a/}');
Expect(1, 833, '\p{NFC_Quick_Check=no}', "");
Expect(0, 833, '\p{^NFC_Quick_Check=no}', "");
Expect(0, 833, '\P{NFC_Quick_Check=no}', "");
Expect(1, 833, '\P{^NFC_Quick_Check=no}', "");
Expect(0, 831, '\p{NFC_Quick_Check=no}', "");
Expect(1, 831, '\p{^NFC_Quick_Check=no}', "");
Expect(1, 831, '\P{NFC_Quick_Check=no}', "");
Expect(0, 831, '\P{^NFC_Quick_Check=no}', "");
Expect(1, 833, '\p{NFC_Quick_Check=-no}', "");
Expect(0, 833, '\p{^NFC_Quick_Check=-no}', "");
Expect(0, 833, '\P{NFC_Quick_Check=-no}', "");
Expect(1, 833, '\P{^NFC_Quick_Check=-no}', "");
Expect(0, 831, '\p{NFC_Quick_Check=-no}', "");
Expect(1, 831, '\p{^NFC_Quick_Check=-no}', "");
Expect(1, 831, '\P{NFC_Quick_Check=-no}', "");
Expect(0, 831, '\P{^NFC_Quick_Check=-no}', "");
Error('\p{NFC_QC= -n:=}');
Error('\P{NFC_QC= -n:=}');
Expect(1, 833, '\p{NFC_QC=n}', "");
Expect(0, 833, '\p{^NFC_QC=n}', "");
Expect(0, 833, '\P{NFC_QC=n}', "");
Expect(1, 833, '\P{^NFC_QC=n}', "");
Expect(0, 831, '\p{NFC_QC=n}', "");
Expect(1, 831, '\p{^NFC_QC=n}', "");
Expect(1, 831, '\P{NFC_QC=n}', "");
Expect(0, 831, '\P{^NFC_QC=n}', "");
Expect(1, 833, '\p{NFC_QC=__n}', "");
Expect(0, 833, '\p{^NFC_QC=__n}', "");
Expect(0, 833, '\P{NFC_QC=__n}', "");
Expect(1, 833, '\P{^NFC_QC=__n}', "");
Expect(0, 831, '\p{NFC_QC=__n}', "");
Expect(1, 831, '\p{^NFC_QC=__n}', "");
Expect(1, 831, '\P{NFC_QC=__n}', "");
Expect(0, 831, '\P{^NFC_QC=__n}', "");
Error('\p{Is_NFC_Quick_Check=- no/a/}');
Error('\P{Is_NFC_Quick_Check=- no/a/}');
Expect(1, 833, '\p{Is_NFC_Quick_Check=no}', "");
Expect(0, 833, '\p{^Is_NFC_Quick_Check=no}', "");
Expect(0, 833, '\P{Is_NFC_Quick_Check=no}', "");
Expect(1, 833, '\P{^Is_NFC_Quick_Check=no}', "");
Expect(0, 831, '\p{Is_NFC_Quick_Check=no}', "");
Expect(1, 831, '\p{^Is_NFC_Quick_Check=no}', "");
Expect(1, 831, '\P{Is_NFC_Quick_Check=no}', "");
Expect(0, 831, '\P{^Is_NFC_Quick_Check=no}', "");
Expect(1, 833, '\p{Is_NFC_Quick_Check=_	No}', "");
Expect(0, 833, '\p{^Is_NFC_Quick_Check=_	No}', "");
Expect(0, 833, '\P{Is_NFC_Quick_Check=_	No}', "");
Expect(1, 833, '\P{^Is_NFC_Quick_Check=_	No}', "");
Expect(0, 831, '\p{Is_NFC_Quick_Check=_	No}', "");
Expect(1, 831, '\p{^Is_NFC_Quick_Check=_	No}', "");
Expect(1, 831, '\P{Is_NFC_Quick_Check=_	No}', "");
Expect(0, 831, '\P{^Is_NFC_Quick_Check=_	No}', "");
Error('\p{Is_NFC_QC=:=  n}');
Error('\P{Is_NFC_QC=:=  n}');
Expect(1, 833, '\p{Is_NFC_QC=n}', "");
Expect(0, 833, '\p{^Is_NFC_QC=n}', "");
Expect(0, 833, '\P{Is_NFC_QC=n}', "");
Expect(1, 833, '\P{^Is_NFC_QC=n}', "");
Expect(0, 831, '\p{Is_NFC_QC=n}', "");
Expect(1, 831, '\p{^Is_NFC_QC=n}', "");
Expect(1, 831, '\P{Is_NFC_QC=n}', "");
Expect(0, 831, '\P{^Is_NFC_QC=n}', "");
Expect(1, 833, '\p{Is_NFC_QC=N}', "");
Expect(0, 833, '\p{^Is_NFC_QC=N}', "");
Expect(0, 833, '\P{Is_NFC_QC=N}', "");
Expect(1, 833, '\P{^Is_NFC_QC=N}', "");
Expect(0, 831, '\p{Is_NFC_QC=N}', "");
Expect(1, 831, '\p{^Is_NFC_QC=N}', "");
Expect(1, 831, '\P{Is_NFC_QC=N}', "");
Expect(0, 831, '\P{^Is_NFC_QC=N}', "");
Error('\p{NFC_Quick_Check:   /a/MAYBE}');
Error('\P{NFC_Quick_Check:   /a/MAYBE}');
Expect(1, 772, '\p{NFC_Quick_Check=maybe}', "");
Expect(0, 772, '\p{^NFC_Quick_Check=maybe}', "");
Expect(0, 772, '\P{NFC_Quick_Check=maybe}', "");
Expect(1, 772, '\P{^NFC_Quick_Check=maybe}', "");
Expect(0, 767, '\p{NFC_Quick_Check=maybe}', "");
Expect(1, 767, '\p{^NFC_Quick_Check=maybe}', "");
Expect(1, 767, '\P{NFC_Quick_Check=maybe}', "");
Expect(0, 767, '\P{^NFC_Quick_Check=maybe}', "");
Expect(1, 772, '\p{NFC_Quick_Check= maybe}', "");
Expect(0, 772, '\p{^NFC_Quick_Check= maybe}', "");
Expect(0, 772, '\P{NFC_Quick_Check= maybe}', "");
Expect(1, 772, '\P{^NFC_Quick_Check= maybe}', "");
Expect(0, 767, '\p{NFC_Quick_Check= maybe}', "");
Expect(1, 767, '\p{^NFC_Quick_Check= maybe}', "");
Expect(1, 767, '\P{NFC_Quick_Check= maybe}', "");
Expect(0, 767, '\P{^NFC_Quick_Check= maybe}', "");
Error('\p{NFC_QC=_:=M}');
Error('\P{NFC_QC=_:=M}');
Expect(1, 772, '\p{NFC_QC=m}', "");
Expect(0, 772, '\p{^NFC_QC=m}', "");
Expect(0, 772, '\P{NFC_QC=m}', "");
Expect(1, 772, '\P{^NFC_QC=m}', "");
Expect(0, 767, '\p{NFC_QC=m}', "");
Expect(1, 767, '\p{^NFC_QC=m}', "");
Expect(1, 767, '\P{NFC_QC=m}', "");
Expect(0, 767, '\P{^NFC_QC=m}', "");
Expect(1, 772, '\p{NFC_QC=M}', "");
Expect(0, 772, '\p{^NFC_QC=M}', "");
Expect(0, 772, '\P{NFC_QC=M}', "");
Expect(1, 772, '\P{^NFC_QC=M}', "");
Expect(0, 767, '\p{NFC_QC=M}', "");
Expect(1, 767, '\p{^NFC_QC=M}', "");
Expect(1, 767, '\P{NFC_QC=M}', "");
Expect(0, 767, '\P{^NFC_QC=M}', "");
Error('\p{Is_NFC_Quick_Check=:=	 MAYBE}');
Error('\P{Is_NFC_Quick_Check=:=	 MAYBE}');
Expect(1, 772, '\p{Is_NFC_Quick_Check:maybe}', "");
Expect(0, 772, '\p{^Is_NFC_Quick_Check:maybe}', "");
Expect(0, 772, '\P{Is_NFC_Quick_Check:maybe}', "");
Expect(1, 772, '\P{^Is_NFC_Quick_Check:maybe}', "");
Expect(0, 767, '\p{Is_NFC_Quick_Check:maybe}', "");
Expect(1, 767, '\p{^Is_NFC_Quick_Check:maybe}', "");
Expect(1, 767, '\P{Is_NFC_Quick_Check:maybe}', "");
Expect(0, 767, '\P{^Is_NFC_Quick_Check:maybe}', "");
Expect(1, 772, '\p{Is_NFC_Quick_Check=	 maybe}', "");
Expect(0, 772, '\p{^Is_NFC_Quick_Check=	 maybe}', "");
Expect(0, 772, '\P{Is_NFC_Quick_Check=	 maybe}', "");
Expect(1, 772, '\P{^Is_NFC_Quick_Check=	 maybe}', "");
Expect(0, 767, '\p{Is_NFC_Quick_Check=	 maybe}', "");
Expect(1, 767, '\p{^Is_NFC_Quick_Check=	 maybe}', "");
Expect(1, 767, '\P{Is_NFC_Quick_Check=	 maybe}', "");
Expect(0, 767, '\P{^Is_NFC_Quick_Check=	 maybe}', "");
Error('\p{Is_NFC_QC=:=	M}');
Error('\P{Is_NFC_QC=:=	M}');
Expect(1, 772, '\p{Is_NFC_QC=m}', "");
Expect(0, 772, '\p{^Is_NFC_QC=m}', "");
Expect(0, 772, '\P{Is_NFC_QC=m}', "");
Expect(1, 772, '\P{^Is_NFC_QC=m}', "");
Expect(0, 767, '\p{Is_NFC_QC=m}', "");
Expect(1, 767, '\p{^Is_NFC_QC=m}', "");
Expect(1, 767, '\P{Is_NFC_QC=m}', "");
Expect(0, 767, '\P{^Is_NFC_QC=m}', "");
Expect(1, 772, '\p{Is_NFC_QC=  M}', "");
Expect(0, 772, '\p{^Is_NFC_QC=  M}', "");
Expect(0, 772, '\P{Is_NFC_QC=  M}', "");
Expect(1, 772, '\P{^Is_NFC_QC=  M}', "");
Expect(0, 767, '\p{Is_NFC_QC=  M}', "");
Expect(1, 767, '\p{^Is_NFC_QC=  M}', "");
Expect(1, 767, '\P{Is_NFC_QC=  M}', "");
Expect(0, 767, '\P{^Is_NFC_QC=  M}', "");
Error('\p{Word_Break:  :=newline}');
Error('\P{Word_Break:  :=newline}');
Expect(1, 12, '\p{Word_Break:newline}', "");
Expect(0, 12, '\p{^Word_Break:newline}', "");
Expect(0, 12, '\P{Word_Break:newline}', "");
Expect(1, 12, '\P{^Word_Break:newline}', "");
Expect(0, 10, '\p{Word_Break:newline}', "");
Expect(1, 10, '\p{^Word_Break:newline}', "");
Expect(1, 10, '\P{Word_Break:newline}', "");
Expect(0, 10, '\P{^Word_Break:newline}', "");
Expect(1, 12, '\p{Word_Break=_Newline}', "");
Expect(0, 12, '\p{^Word_Break=_Newline}', "");
Expect(0, 12, '\P{Word_Break=_Newline}', "");
Expect(1, 12, '\P{^Word_Break=_Newline}', "");
Expect(0, 10, '\p{Word_Break=_Newline}', "");
Expect(1, 10, '\p{^Word_Break=_Newline}', "");
Expect(1, 10, '\P{Word_Break=_Newline}', "");
Expect(0, 10, '\P{^Word_Break=_Newline}', "");
Error('\p{WB=_-NL:=}');
Error('\P{WB=_-NL:=}');
Expect(1, 12, '\p{WB=nl}', "");
Expect(0, 12, '\p{^WB=nl}', "");
Expect(0, 12, '\P{WB=nl}', "");
Expect(1, 12, '\P{^WB=nl}', "");
Expect(0, 10, '\p{WB=nl}', "");
Expect(1, 10, '\p{^WB=nl}', "");
Expect(1, 10, '\P{WB=nl}', "");
Expect(0, 10, '\P{^WB=nl}', "");
Expect(1, 12, '\p{WB:	--NL}', "");
Expect(0, 12, '\p{^WB:	--NL}', "");
Expect(0, 12, '\P{WB:	--NL}', "");
Expect(1, 12, '\P{^WB:	--NL}', "");
Expect(0, 10, '\p{WB:	--NL}', "");
Expect(1, 10, '\p{^WB:	--NL}', "");
Expect(1, 10, '\P{WB:	--NL}', "");
Expect(0, 10, '\P{^WB:	--NL}', "");
Error('\p{Is_Word_Break:		_NEWLINE/a/}');
Error('\P{Is_Word_Break:		_NEWLINE/a/}');
Expect(1, 12, '\p{Is_Word_Break=newline}', "");
Expect(0, 12, '\p{^Is_Word_Break=newline}', "");
Expect(0, 12, '\P{Is_Word_Break=newline}', "");
Expect(1, 12, '\P{^Is_Word_Break=newline}', "");
Expect(0, 10, '\p{Is_Word_Break=newline}', "");
Expect(1, 10, '\p{^Is_Word_Break=newline}', "");
Expect(1, 10, '\P{Is_Word_Break=newline}', "");
Expect(0, 10, '\P{^Is_Word_Break=newline}', "");
Expect(1, 12, '\p{Is_Word_Break=_NEWLINE}', "");
Expect(0, 12, '\p{^Is_Word_Break=_NEWLINE}', "");
Expect(0, 12, '\P{Is_Word_Break=_NEWLINE}', "");
Expect(1, 12, '\P{^Is_Word_Break=_NEWLINE}', "");
Expect(0, 10, '\p{Is_Word_Break=_NEWLINE}', "");
Expect(1, 10, '\p{^Is_Word_Break=_NEWLINE}', "");
Expect(1, 10, '\P{Is_Word_Break=_NEWLINE}', "");
Expect(0, 10, '\P{^Is_Word_Break=_NEWLINE}', "");
Error('\p{Is_WB=_:=nl}');
Error('\P{Is_WB=_:=nl}');
Expect(1, 12, '\p{Is_WB=nl}', "");
Expect(0, 12, '\p{^Is_WB=nl}', "");
Expect(0, 12, '\P{Is_WB=nl}', "");
Expect(1, 12, '\P{^Is_WB=nl}', "");
Expect(0, 10, '\p{Is_WB=nl}', "");
Expect(1, 10, '\p{^Is_WB=nl}', "");
Expect(1, 10, '\P{Is_WB=nl}', "");
Expect(0, 10, '\P{^Is_WB=nl}', "");
Expect(1, 12, '\p{Is_WB= -nl}', "");
Expect(0, 12, '\p{^Is_WB= -nl}', "");
Expect(0, 12, '\P{Is_WB= -nl}', "");
Expect(1, 12, '\P{^Is_WB= -nl}', "");
Expect(0, 10, '\p{Is_WB= -nl}', "");
Expect(1, 10, '\p{^Is_WB= -nl}', "");
Expect(1, 10, '\P{Is_WB= -nl}', "");
Expect(0, 10, '\P{^Is_WB= -nl}', "");
Error('\p{Word_Break=:=-ALetter}');
Error('\P{Word_Break=:=-ALetter}');
Expect(1, 90, '\p{Word_Break=aletter}', "");
Expect(0, 90, '\p{^Word_Break=aletter}', "");
Expect(0, 90, '\P{Word_Break=aletter}', "");
Expect(1, 90, '\P{^Word_Break=aletter}', "");
Expect(0, 64, '\p{Word_Break=aletter}', "");
Expect(1, 64, '\p{^Word_Break=aletter}', "");
Expect(1, 64, '\P{Word_Break=aletter}', "");
Expect(0, 64, '\P{^Word_Break=aletter}', "");
Expect(1, 90, '\p{Word_Break=_ ALetter}', "");
Expect(0, 90, '\p{^Word_Break=_ ALetter}', "");
Expect(0, 90, '\P{Word_Break=_ ALetter}', "");
Expect(1, 90, '\P{^Word_Break=_ ALetter}', "");
Expect(0, 64, '\p{Word_Break=_ ALetter}', "");
Expect(1, 64, '\p{^Word_Break=_ ALetter}', "");
Expect(1, 64, '\P{Word_Break=_ ALetter}', "");
Expect(0, 64, '\P{^Word_Break=_ ALetter}', "");
Error('\p{WB= :=LE}');
Error('\P{WB= :=LE}');
Expect(1, 90, '\p{WB=le}', "");
Expect(0, 90, '\p{^WB=le}', "");
Expect(0, 90, '\P{WB=le}', "");
Expect(1, 90, '\P{^WB=le}', "");
Expect(0, 64, '\p{WB=le}', "");
Expect(1, 64, '\p{^WB=le}', "");
Expect(1, 64, '\P{WB=le}', "");
Expect(0, 64, '\P{^WB=le}', "");
Expect(1, 90, '\p{WB= 	le}', "");
Expect(0, 90, '\p{^WB= 	le}', "");
Expect(0, 90, '\P{WB= 	le}', "");
Expect(1, 90, '\P{^WB= 	le}', "");
Expect(0, 64, '\p{WB= 	le}', "");
Expect(1, 64, '\p{^WB= 	le}', "");
Expect(1, 64, '\P{WB= 	le}', "");
Expect(0, 64, '\P{^WB= 	le}', "");
Error('\p{Is_Word_Break: -/a/ALetter}');
Error('\P{Is_Word_Break: -/a/ALetter}');
Expect(1, 90, '\p{Is_Word_Break=aletter}', "");
Expect(0, 90, '\p{^Is_Word_Break=aletter}', "");
Expect(0, 90, '\P{Is_Word_Break=aletter}', "");
Expect(1, 90, '\P{^Is_Word_Break=aletter}', "");
Expect(0, 64, '\p{Is_Word_Break=aletter}', "");
Expect(1, 64, '\p{^Is_Word_Break=aletter}', "");
Expect(1, 64, '\P{Is_Word_Break=aletter}', "");
Expect(0, 64, '\P{^Is_Word_Break=aletter}', "");
Expect(1, 90, '\p{Is_Word_Break: --ALETTER}', "");
Expect(0, 90, '\p{^Is_Word_Break: --ALETTER}', "");
Expect(0, 90, '\P{Is_Word_Break: --ALETTER}', "");
Expect(1, 90, '\P{^Is_Word_Break: --ALETTER}', "");
Expect(0, 64, '\p{Is_Word_Break: --ALETTER}', "");
Expect(1, 64, '\p{^Is_Word_Break: --ALETTER}', "");
Expect(1, 64, '\P{Is_Word_Break: --ALETTER}', "");
Expect(0, 64, '\P{^Is_Word_Break: --ALETTER}', "");
Error('\p{Is_WB=-	LE:=}');
Error('\P{Is_WB=-	LE:=}');
Expect(1, 90, '\p{Is_WB=le}', "");
Expect(0, 90, '\p{^Is_WB=le}', "");
Expect(0, 90, '\P{Is_WB=le}', "");
Expect(1, 90, '\P{^Is_WB=le}', "");
Expect(0, 64, '\p{Is_WB=le}', "");
Expect(1, 64, '\p{^Is_WB=le}', "");
Expect(1, 64, '\P{Is_WB=le}', "");
Expect(0, 64, '\P{^Is_WB=le}', "");
Expect(1, 90, '\p{Is_WB=_-LE}', "");
Expect(0, 90, '\p{^Is_WB=_-LE}', "");
Expect(0, 90, '\P{Is_WB=_-LE}', "");
Expect(1, 90, '\P{^Is_WB=_-LE}', "");
Expect(0, 64, '\p{Is_WB=_-LE}', "");
Expect(1, 64, '\p{^Is_WB=_-LE}', "");
Expect(1, 64, '\P{Is_WB=_-LE}', "");
Expect(0, 64, '\P{^Is_WB=_-LE}', "");
Error('\p{Word_Break=-:=CR}');
Error('\P{Word_Break=-:=CR}');
Expect(1, 13, '\p{Word_Break=cr}', "");
Expect(0, 13, '\p{^Word_Break=cr}', "");
Expect(0, 13, '\P{Word_Break=cr}', "");
Expect(1, 13, '\P{^Word_Break=cr}', "");
Expect(0, 12, '\p{Word_Break=cr}', "");
Expect(1, 12, '\p{^Word_Break=cr}', "");
Expect(1, 12, '\P{Word_Break=cr}', "");
Expect(0, 12, '\P{^Word_Break=cr}', "");
Expect(1, 13, '\p{Word_Break:    CR}', "");
Expect(0, 13, '\p{^Word_Break:    CR}', "");
Expect(0, 13, '\P{Word_Break:    CR}', "");
Expect(1, 13, '\P{^Word_Break:    CR}', "");
Expect(0, 12, '\p{Word_Break:    CR}', "");
Expect(1, 12, '\p{^Word_Break:    CR}', "");
Expect(1, 12, '\P{Word_Break:    CR}', "");
Expect(0, 12, '\P{^Word_Break:    CR}', "");
Error('\p{WB=/a/	 CR}');
Error('\P{WB=/a/	 CR}');
Expect(1, 13, '\p{WB=cr}', "");
Expect(0, 13, '\p{^WB=cr}', "");
Expect(0, 13, '\P{WB=cr}', "");
Expect(1, 13, '\P{^WB=cr}', "");
Expect(0, 12, '\p{WB=cr}', "");
Expect(1, 12, '\p{^WB=cr}', "");
Expect(1, 12, '\P{WB=cr}', "");
Expect(0, 12, '\P{^WB=cr}', "");
Expect(1, 13, '\p{WB=-	CR}', "");
Expect(0, 13, '\p{^WB=-	CR}', "");
Expect(0, 13, '\P{WB=-	CR}', "");
Expect(1, 13, '\P{^WB=-	CR}', "");
Expect(0, 12, '\p{WB=-	CR}', "");
Expect(1, 12, '\p{^WB=-	CR}', "");
Expect(1, 12, '\P{WB=-	CR}', "");
Expect(0, 12, '\P{^WB=-	CR}', "");
Error('\p{Is_Word_Break=-_CR/a/}');
Error('\P{Is_Word_Break=-_CR/a/}');
Expect(1, 13, '\p{Is_Word_Break=cr}', "");
Expect(0, 13, '\p{^Is_Word_Break=cr}', "");
Expect(0, 13, '\P{Is_Word_Break=cr}', "");
Expect(1, 13, '\P{^Is_Word_Break=cr}', "");
Expect(0, 12, '\p{Is_Word_Break=cr}', "");
Expect(1, 12, '\p{^Is_Word_Break=cr}', "");
Expect(1, 12, '\P{Is_Word_Break=cr}', "");
Expect(0, 12, '\P{^Is_Word_Break=cr}', "");
Expect(1, 13, '\p{Is_Word_Break=_-CR}', "");
Expect(0, 13, '\p{^Is_Word_Break=_-CR}', "");
Expect(0, 13, '\P{Is_Word_Break=_-CR}', "");
Expect(1, 13, '\P{^Is_Word_Break=_-CR}', "");
Expect(0, 12, '\p{Is_Word_Break=_-CR}', "");
Expect(1, 12, '\p{^Is_Word_Break=_-CR}', "");
Expect(1, 12, '\P{Is_Word_Break=_-CR}', "");
Expect(0, 12, '\P{^Is_Word_Break=_-CR}', "");
Error('\p{Is_WB=/a/ 	cr}');
Error('\P{Is_WB=/a/ 	cr}');
Expect(1, 13, '\p{Is_WB=cr}', "");
Expect(0, 13, '\p{^Is_WB=cr}', "");
Expect(0, 13, '\P{Is_WB=cr}', "");
Expect(1, 13, '\P{^Is_WB=cr}', "");
Expect(0, 12, '\p{Is_WB=cr}', "");
Expect(1, 12, '\p{^Is_WB=cr}', "");
Expect(1, 12, '\P{Is_WB=cr}', "");
Expect(0, 12, '\P{^Is_WB=cr}', "");
Expect(1, 13, '\p{Is_WB:   _ CR}', "");
Expect(0, 13, '\p{^Is_WB:   _ CR}', "");
Expect(0, 13, '\P{Is_WB:   _ CR}', "");
Expect(1, 13, '\P{^Is_WB:   _ CR}', "");
Expect(0, 12, '\p{Is_WB:   _ CR}', "");
Expect(1, 12, '\p{^Is_WB:   _ CR}', "");
Expect(1, 12, '\P{Is_WB:   _ CR}', "");
Expect(0, 12, '\P{^Is_WB:   _ CR}', "");
Error('\p{Word_Break=:=	Other}');
Error('\P{Word_Break=:=	Other}');
Expect(1, 9, '\p{Word_Break=other}', "");
Expect(0, 9, '\p{^Word_Break=other}', "");
Expect(0, 9, '\P{Word_Break=other}', "");
Expect(1, 9, '\P{^Word_Break=other}', "");
Expect(0, 13, '\p{Word_Break=other}', "");
Expect(1, 13, '\p{^Word_Break=other}', "");
Expect(1, 13, '\P{Word_Break=other}', "");
Expect(0, 13, '\P{^Word_Break=other}', "");
Expect(1, 9, '\p{Word_Break:   _Other}', "");
Expect(0, 9, '\p{^Word_Break:   _Other}', "");
Expect(0, 9, '\P{Word_Break:   _Other}', "");
Expect(1, 9, '\P{^Word_Break:   _Other}', "");
Expect(0, 13, '\p{Word_Break:   _Other}', "");
Expect(1, 13, '\p{^Word_Break:   _Other}', "");
Expect(1, 13, '\P{Word_Break:   _Other}', "");
Expect(0, 13, '\P{^Word_Break:   _Other}', "");
Error('\p{WB=	/a/xx}');
Error('\P{WB=	/a/xx}');
Expect(1, 9, '\p{WB=xx}', "");
Expect(0, 9, '\p{^WB=xx}', "");
Expect(0, 9, '\P{WB=xx}', "");
Expect(1, 9, '\P{^WB=xx}', "");
Expect(0, 13, '\p{WB=xx}', "");
Expect(1, 13, '\p{^WB=xx}', "");
Expect(1, 13, '\P{WB=xx}', "");
Expect(0, 13, '\P{^WB=xx}', "");
Expect(1, 9, '\p{WB=__XX}', "");
Expect(0, 9, '\p{^WB=__XX}', "");
Expect(0, 9, '\P{WB=__XX}', "");
Expect(1, 9, '\P{^WB=__XX}', "");
Expect(0, 13, '\p{WB=__XX}', "");
Expect(1, 13, '\p{^WB=__XX}', "");
Expect(1, 13, '\P{WB=__XX}', "");
Expect(0, 13, '\P{^WB=__XX}', "");
Error('\p{Is_Word_Break=/a/		OTHER}');
Error('\P{Is_Word_Break=/a/		OTHER}');
Expect(1, 9, '\p{Is_Word_Break: other}', "");
Expect(0, 9, '\p{^Is_Word_Break: other}', "");
Expect(0, 9, '\P{Is_Word_Break: other}', "");
Expect(1, 9, '\P{^Is_Word_Break: other}', "");
Expect(0, 13, '\p{Is_Word_Break: other}', "");
Expect(1, 13, '\p{^Is_Word_Break: other}', "");
Expect(1, 13, '\P{Is_Word_Break: other}', "");
Expect(0, 13, '\P{^Is_Word_Break: other}', "");
Expect(1, 9, '\p{Is_Word_Break= 	Other}', "");
Expect(0, 9, '\p{^Is_Word_Break= 	Other}', "");
Expect(0, 9, '\P{Is_Word_Break= 	Other}', "");
Expect(1, 9, '\P{^Is_Word_Break= 	Other}', "");
Expect(0, 13, '\p{Is_Word_Break= 	Other}', "");
Expect(1, 13, '\p{^Is_Word_Break= 	Other}', "");
Expect(1, 13, '\P{Is_Word_Break= 	Other}', "");
Expect(0, 13, '\P{^Is_Word_Break= 	Other}', "");
Error('\p{Is_WB=	_xx/a/}');
Error('\P{Is_WB=	_xx/a/}');
Expect(1, 9, '\p{Is_WB=xx}', "");
Expect(0, 9, '\p{^Is_WB=xx}', "");
Expect(0, 9, '\P{Is_WB=xx}', "");
Expect(1, 9, '\P{^Is_WB=xx}', "");
Expect(0, 13, '\p{Is_WB=xx}', "");
Expect(1, 13, '\p{^Is_WB=xx}', "");
Expect(1, 13, '\P{Is_WB=xx}', "");
Expect(0, 13, '\P{^Is_WB=xx}', "");
Expect(1, 9, '\p{Is_WB:	_XX}', "");
Expect(0, 9, '\p{^Is_WB:	_XX}', "");
Expect(0, 9, '\P{Is_WB:	_XX}', "");
Expect(1, 9, '\P{^Is_WB:	_XX}', "");
Expect(0, 13, '\p{Is_WB:	_XX}', "");
Expect(1, 13, '\p{^Is_WB:	_XX}', "");
Expect(1, 13, '\P{Is_WB:	_XX}', "");
Expect(0, 13, '\P{^Is_WB:	_XX}', "");
Error('\p{Word_Break: -_numeric/a/}');
Error('\P{Word_Break: -_numeric/a/}');
Expect(1, 57, '\p{Word_Break=numeric}', "");
Expect(0, 57, '\p{^Word_Break=numeric}', "");
Expect(0, 57, '\P{Word_Break=numeric}', "");
Expect(1, 57, '\P{^Word_Break=numeric}', "");
Expect(0, 47, '\p{Word_Break=numeric}', "");
Expect(1, 47, '\p{^Word_Break=numeric}', "");
Expect(1, 47, '\P{Word_Break=numeric}', "");
Expect(0, 47, '\P{^Word_Break=numeric}', "");
Expect(1, 57, '\p{Word_Break=	NUMERIC}', "");
Expect(0, 57, '\p{^Word_Break=	NUMERIC}', "");
Expect(0, 57, '\P{Word_Break=	NUMERIC}', "");
Expect(1, 57, '\P{^Word_Break=	NUMERIC}', "");
Expect(0, 47, '\p{Word_Break=	NUMERIC}', "");
Expect(1, 47, '\p{^Word_Break=	NUMERIC}', "");
Expect(1, 47, '\P{Word_Break=	NUMERIC}', "");
Expect(0, 47, '\P{^Word_Break=	NUMERIC}', "");
Error('\p{WB=:=-_NU}');
Error('\P{WB=:=-_NU}');
Expect(1, 57, '\p{WB=nu}', "");
Expect(0, 57, '\p{^WB=nu}', "");
Expect(0, 57, '\P{WB=nu}', "");
Expect(1, 57, '\P{^WB=nu}', "");
Expect(0, 47, '\p{WB=nu}', "");
Expect(1, 47, '\p{^WB=nu}', "");
Expect(1, 47, '\P{WB=nu}', "");
Expect(0, 47, '\P{^WB=nu}', "");
Expect(1, 57, '\p{WB:	-nu}', "");
Expect(0, 57, '\p{^WB:	-nu}', "");
Expect(0, 57, '\P{WB:	-nu}', "");
Expect(1, 57, '\P{^WB:	-nu}', "");
Expect(0, 47, '\p{WB:	-nu}', "");
Expect(1, 47, '\p{^WB:	-nu}', "");
Expect(1, 47, '\P{WB:	-nu}', "");
Expect(0, 47, '\P{^WB:	-nu}', "");
Error('\p{Is_Word_Break=__Numeric:=}');
Error('\P{Is_Word_Break=__Numeric:=}');
Expect(1, 57, '\p{Is_Word_Break:   numeric}', "");
Expect(0, 57, '\p{^Is_Word_Break:   numeric}', "");
Expect(0, 57, '\P{Is_Word_Break:   numeric}', "");
Expect(1, 57, '\P{^Is_Word_Break:   numeric}', "");
Expect(0, 47, '\p{Is_Word_Break:   numeric}', "");
Expect(1, 47, '\p{^Is_Word_Break:   numeric}', "");
Expect(1, 47, '\P{Is_Word_Break:   numeric}', "");
Expect(0, 47, '\P{^Is_Word_Break:   numeric}', "");
Expect(1, 57, '\p{Is_Word_Break:	_Numeric}', "");
Expect(0, 57, '\p{^Is_Word_Break:	_Numeric}', "");
Expect(0, 57, '\P{Is_Word_Break:	_Numeric}', "");
Expect(1, 57, '\P{^Is_Word_Break:	_Numeric}', "");
Expect(0, 47, '\p{Is_Word_Break:	_Numeric}', "");
Expect(1, 47, '\p{^Is_Word_Break:	_Numeric}', "");
Expect(1, 47, '\P{Is_Word_Break:	_Numeric}', "");
Expect(0, 47, '\P{^Is_Word_Break:	_Numeric}', "");
Error('\p{Is_WB=:=		NU}');
Error('\P{Is_WB=:=		NU}');
Expect(1, 57, '\p{Is_WB=nu}', "");
Expect(0, 57, '\p{^Is_WB=nu}', "");
Expect(0, 57, '\P{Is_WB=nu}', "");
Expect(1, 57, '\P{^Is_WB=nu}', "");
Expect(0, 47, '\p{Is_WB=nu}', "");
Expect(1, 47, '\p{^Is_WB=nu}', "");
Expect(1, 47, '\P{Is_WB=nu}', "");
Expect(0, 47, '\P{^Is_WB=nu}', "");
Expect(1, 57, '\p{Is_WB= -nu}', "");
Expect(0, 57, '\p{^Is_WB= -nu}', "");
Expect(0, 57, '\P{Is_WB= -nu}', "");
Expect(1, 57, '\P{^Is_WB= -nu}', "");
Expect(0, 47, '\p{Is_WB= -nu}', "");
Expect(1, 47, '\p{^Is_WB= -nu}', "");
Expect(1, 47, '\P{Is_WB= -nu}', "");
Expect(0, 47, '\P{^Is_WB= -nu}', "");
Error('\p{Word_Break=_	FORMAT:=}');
Error('\P{Word_Break=_	FORMAT:=}');
Expect(1, 173, '\p{Word_Break=format}', "");
Expect(0, 173, '\p{^Word_Break=format}', "");
Expect(0, 173, '\P{Word_Break=format}', "");
Expect(1, 173, '\P{^Word_Break=format}', "");
Expect(0, 172, '\p{Word_Break=format}', "");
Expect(1, 172, '\p{^Word_Break=format}', "");
Expect(1, 172, '\P{Word_Break=format}', "");
Expect(0, 172, '\P{^Word_Break=format}', "");
Expect(1, 173, '\p{Word_Break:	-	format}', "");
Expect(0, 173, '\p{^Word_Break:	-	format}', "");
Expect(0, 173, '\P{Word_Break:	-	format}', "");
Expect(1, 173, '\P{^Word_Break:	-	format}', "");
Expect(0, 172, '\p{Word_Break:	-	format}', "");
Expect(1, 172, '\p{^Word_Break:	-	format}', "");
Expect(1, 172, '\P{Word_Break:	-	format}', "");
Expect(0, 172, '\P{^Word_Break:	-	format}', "");
Error('\p{WB=-:=FO}');
Error('\P{WB=-:=FO}');
Expect(1, 173, '\p{WB=fo}', "");
Expect(0, 173, '\p{^WB=fo}', "");
Expect(0, 173, '\P{WB=fo}', "");
Expect(1, 173, '\P{^WB=fo}', "");
Expect(0, 172, '\p{WB=fo}', "");
Expect(1, 172, '\p{^WB=fo}', "");
Expect(1, 172, '\P{WB=fo}', "");
Expect(0, 172, '\P{^WB=fo}', "");
Expect(1, 173, '\p{WB=-FO}', "");
Expect(0, 173, '\p{^WB=-FO}', "");
Expect(0, 173, '\P{WB=-FO}', "");
Expect(1, 173, '\P{^WB=-FO}', "");
Expect(0, 172, '\p{WB=-FO}', "");
Expect(1, 172, '\p{^WB=-FO}', "");
Expect(1, 172, '\P{WB=-FO}', "");
Expect(0, 172, '\P{^WB=-FO}', "");
Error('\p{Is_Word_Break=/a/	_format}');
Error('\P{Is_Word_Break=/a/	_format}');
Expect(1, 173, '\p{Is_Word_Break=format}', "");
Expect(0, 173, '\p{^Is_Word_Break=format}', "");
Expect(0, 173, '\P{Is_Word_Break=format}', "");
Expect(1, 173, '\P{^Is_Word_Break=format}', "");
Expect(0, 172, '\p{Is_Word_Break=format}', "");
Expect(1, 172, '\p{^Is_Word_Break=format}', "");
Expect(1, 172, '\P{Is_Word_Break=format}', "");
Expect(0, 172, '\P{^Is_Word_Break=format}', "");
Expect(1, 173, '\p{Is_Word_Break= 	Format}', "");
Expect(0, 173, '\p{^Is_Word_Break= 	Format}', "");
Expect(0, 173, '\P{Is_Word_Break= 	Format}', "");
Expect(1, 173, '\P{^Is_Word_Break= 	Format}', "");
Expect(0, 172, '\p{Is_Word_Break= 	Format}', "");
Expect(1, 172, '\p{^Is_Word_Break= 	Format}', "");
Expect(1, 172, '\P{Is_Word_Break= 	Format}', "");
Expect(0, 172, '\P{^Is_Word_Break= 	Format}', "");
Error('\p{Is_WB=/a/	_FO}');
Error('\P{Is_WB=/a/	_FO}');
Expect(1, 173, '\p{Is_WB=fo}', "");
Expect(0, 173, '\p{^Is_WB=fo}', "");
Expect(0, 173, '\P{Is_WB=fo}', "");
Expect(1, 173, '\P{^Is_WB=fo}', "");
Expect(0, 172, '\p{Is_WB=fo}', "");
Expect(1, 172, '\p{^Is_WB=fo}', "");
Expect(1, 172, '\P{Is_WB=fo}', "");
Expect(0, 172, '\P{^Is_WB=fo}', "");
Expect(1, 173, '\p{Is_WB=		fo}', "");
Expect(0, 173, '\p{^Is_WB=		fo}', "");
Expect(0, 173, '\P{Is_WB=		fo}', "");
Expect(1, 173, '\P{^Is_WB=		fo}', "");
Expect(0, 172, '\p{Is_WB=		fo}', "");
Expect(1, 172, '\p{^Is_WB=		fo}', "");
Expect(1, 172, '\P{Is_WB=		fo}', "");
Expect(0, 172, '\P{^Is_WB=		fo}', "");
Error('\p{Word_Break=/a/  ExtendNumLet}');
Error('\P{Word_Break=/a/  ExtendNumLet}');
Expect(1, 95, '\p{Word_Break: extendnumlet}', "");
Expect(0, 95, '\p{^Word_Break: extendnumlet}', "");
Expect(0, 95, '\P{Word_Break: extendnumlet}', "");
Expect(1, 95, '\P{^Word_Break: extendnumlet}', "");
Expect(0, 94, '\p{Word_Break: extendnumlet}', "");
Expect(1, 94, '\p{^Word_Break: extendnumlet}', "");
Expect(1, 94, '\P{Word_Break: extendnumlet}', "");
Expect(0, 94, '\P{^Word_Break: extendnumlet}', "");
Expect(1, 95, '\p{Word_Break=-	EXTENDNUMLET}', "");
Expect(0, 95, '\p{^Word_Break=-	EXTENDNUMLET}', "");
Expect(0, 95, '\P{Word_Break=-	EXTENDNUMLET}', "");
Expect(1, 95, '\P{^Word_Break=-	EXTENDNUMLET}', "");
Expect(0, 94, '\p{Word_Break=-	EXTENDNUMLET}', "");
Expect(1, 94, '\p{^Word_Break=-	EXTENDNUMLET}', "");
Expect(1, 94, '\P{Word_Break=-	EXTENDNUMLET}', "");
Expect(0, 94, '\P{^Word_Break=-	EXTENDNUMLET}', "");
Error('\p{WB=_ex:=}');
Error('\P{WB=_ex:=}');
Expect(1, 95, '\p{WB=ex}', "");
Expect(0, 95, '\p{^WB=ex}', "");
Expect(0, 95, '\P{WB=ex}', "");
Expect(1, 95, '\P{^WB=ex}', "");
Expect(0, 94, '\p{WB=ex}', "");
Expect(1, 94, '\p{^WB=ex}', "");
Expect(1, 94, '\P{WB=ex}', "");
Expect(0, 94, '\P{^WB=ex}', "");
Expect(1, 95, '\p{WB=_	EX}', "");
Expect(0, 95, '\p{^WB=_	EX}', "");
Expect(0, 95, '\P{WB=_	EX}', "");
Expect(1, 95, '\P{^WB=_	EX}', "");
Expect(0, 94, '\p{WB=_	EX}', "");
Expect(1, 94, '\p{^WB=_	EX}', "");
Expect(1, 94, '\P{WB=_	EX}', "");
Expect(0, 94, '\P{^WB=_	EX}', "");
Error('\p{Is_Word_Break=	:=extendnumlet}');
Error('\P{Is_Word_Break=	:=extendnumlet}');
Expect(1, 95, '\p{Is_Word_Break=extendnumlet}', "");
Expect(0, 95, '\p{^Is_Word_Break=extendnumlet}', "");
Expect(0, 95, '\P{Is_Word_Break=extendnumlet}', "");
Expect(1, 95, '\P{^Is_Word_Break=extendnumlet}', "");
Expect(0, 94, '\p{Is_Word_Break=extendnumlet}', "");
Expect(1, 94, '\p{^Is_Word_Break=extendnumlet}', "");
Expect(1, 94, '\P{Is_Word_Break=extendnumlet}', "");
Expect(0, 94, '\P{^Is_Word_Break=extendnumlet}', "");
Expect(1, 95, '\p{Is_Word_Break=_EXTENDNUMLET}', "");
Expect(0, 95, '\p{^Is_Word_Break=_EXTENDNUMLET}', "");
Expect(0, 95, '\P{Is_Word_Break=_EXTENDNUMLET}', "");
Expect(1, 95, '\P{^Is_Word_Break=_EXTENDNUMLET}', "");
Expect(0, 94, '\p{Is_Word_Break=_EXTENDNUMLET}', "");
Expect(1, 94, '\p{^Is_Word_Break=_EXTENDNUMLET}', "");
Expect(1, 94, '\P{Is_Word_Break=_EXTENDNUMLET}', "");
Expect(0, 94, '\P{^Is_Word_Break=_EXTENDNUMLET}', "");
Error('\p{Is_WB=/a/	EX}');
Error('\P{Is_WB=/a/	EX}');
Expect(1, 95, '\p{Is_WB=ex}', "");
Expect(0, 95, '\p{^Is_WB=ex}', "");
Expect(0, 95, '\P{Is_WB=ex}', "");
Expect(1, 95, '\P{^Is_WB=ex}', "");
Expect(0, 94, '\p{Is_WB=ex}', "");
Expect(1, 94, '\p{^Is_WB=ex}', "");
Expect(1, 94, '\P{Is_WB=ex}', "");
Expect(0, 94, '\P{^Is_WB=ex}', "");
Expect(1, 95, '\p{Is_WB=-_EX}', "");
Expect(0, 95, '\p{^Is_WB=-_EX}', "");
Expect(0, 95, '\P{Is_WB=-_EX}', "");
Expect(1, 95, '\P{^Is_WB=-_EX}', "");
Expect(0, 94, '\p{Is_WB=-_EX}', "");
Expect(1, 94, '\p{^Is_WB=-_EX}', "");
Expect(1, 94, '\P{Is_WB=-_EX}', "");
Expect(0, 94, '\P{^Is_WB=-_EX}', "");
Error('\p{Word_Break=/a/ 	EXTEND}');
Error('\P{Word_Break=/a/ 	EXTEND}');
Expect(1, 879, '\p{Word_Break=extend}', "");
Expect(0, 879, '\p{^Word_Break=extend}', "");
Expect(0, 879, '\P{Word_Break=extend}', "");
Expect(1, 879, '\P{^Word_Break=extend}', "");
Expect(0, 767, '\p{Word_Break=extend}', "");
Expect(1, 767, '\p{^Word_Break=extend}', "");
Expect(1, 767, '\P{Word_Break=extend}', "");
Expect(0, 767, '\P{^Word_Break=extend}', "");
Expect(1, 879, '\p{Word_Break= EXTEND}', "");
Expect(0, 879, '\p{^Word_Break= EXTEND}', "");
Expect(0, 879, '\P{Word_Break= EXTEND}', "");
Expect(1, 879, '\P{^Word_Break= EXTEND}', "");
Expect(0, 767, '\p{Word_Break= EXTEND}', "");
Expect(1, 767, '\p{^Word_Break= EXTEND}', "");
Expect(1, 767, '\P{Word_Break= EXTEND}', "");
Expect(0, 767, '\P{^Word_Break= EXTEND}', "");
Error('\p{WB= Extend:=}');
Error('\P{WB= Extend:=}');
Expect(1, 879, '\p{WB=extend}', "");
Expect(0, 879, '\p{^WB=extend}', "");
Expect(0, 879, '\P{WB=extend}', "");
Expect(1, 879, '\P{^WB=extend}', "");
Expect(0, 767, '\p{WB=extend}', "");
Expect(1, 767, '\p{^WB=extend}', "");
Expect(1, 767, '\P{WB=extend}', "");
Expect(0, 767, '\P{^WB=extend}', "");
Expect(1, 879, '\p{WB=__Extend}', "");
Expect(0, 879, '\p{^WB=__Extend}', "");
Expect(0, 879, '\P{WB=__Extend}', "");
Expect(1, 879, '\P{^WB=__Extend}', "");
Expect(0, 767, '\p{WB=__Extend}', "");
Expect(1, 767, '\p{^WB=__Extend}', "");
Expect(1, 767, '\P{WB=__Extend}', "");
Expect(0, 767, '\P{^WB=__Extend}', "");
Error('\p{Is_Word_Break=_/a/EXTEND}');
Error('\P{Is_Word_Break=_/a/EXTEND}');
Expect(1, 879, '\p{Is_Word_Break=extend}', "");
Expect(0, 879, '\p{^Is_Word_Break=extend}', "");
Expect(0, 879, '\P{Is_Word_Break=extend}', "");
Expect(1, 879, '\P{^Is_Word_Break=extend}', "");
Expect(0, 767, '\p{Is_Word_Break=extend}', "");
Expect(1, 767, '\p{^Is_Word_Break=extend}', "");
Expect(1, 767, '\P{Is_Word_Break=extend}', "");
Expect(0, 767, '\P{^Is_Word_Break=extend}', "");
Expect(1, 879, '\p{Is_Word_Break=-extend}', "");
Expect(0, 879, '\p{^Is_Word_Break=-extend}', "");
Expect(0, 879, '\P{Is_Word_Break=-extend}', "");
Expect(1, 879, '\P{^Is_Word_Break=-extend}', "");
Expect(0, 767, '\p{Is_Word_Break=-extend}', "");
Expect(1, 767, '\p{^Is_Word_Break=-extend}', "");
Expect(1, 767, '\P{Is_Word_Break=-extend}', "");
Expect(0, 767, '\P{^Is_Word_Break=-extend}', "");
Error('\p{Is_WB=_/a/EXTEND}');
Error('\P{Is_WB=_/a/EXTEND}');
Expect(1, 879, '\p{Is_WB=extend}', "");
Expect(0, 879, '\p{^Is_WB=extend}', "");
Expect(0, 879, '\P{Is_WB=extend}', "");
Expect(1, 879, '\P{^Is_WB=extend}', "");
Expect(0, 767, '\p{Is_WB=extend}', "");
Expect(1, 767, '\p{^Is_WB=extend}', "");
Expect(1, 767, '\P{Is_WB=extend}', "");
Expect(0, 767, '\P{^Is_WB=extend}', "");
Expect(1, 879, '\p{Is_WB=	-Extend}', "");
Expect(0, 879, '\p{^Is_WB=	-Extend}', "");
Expect(0, 879, '\P{Is_WB=	-Extend}', "");
Expect(1, 879, '\P{^Is_WB=	-Extend}', "");
Expect(0, 767, '\p{Is_WB=	-Extend}', "");
Expect(1, 767, '\p{^Is_WB=	-Extend}', "");
Expect(1, 767, '\P{Is_WB=	-Extend}', "");
Expect(0, 767, '\P{^Is_WB=	-Extend}', "");
Error('\p{Word_Break=:=_MidLetter}');
Error('\P{Word_Break=:=_MidLetter}');
Expect(1, 58, '\p{Word_Break: midletter}', "");
Expect(0, 58, '\p{^Word_Break: midletter}', "");
Expect(0, 58, '\P{Word_Break: midletter}', "");
Expect(1, 58, '\P{^Word_Break: midletter}', "");
Expect(0, 57, '\p{Word_Break: midletter}', "");
Expect(1, 57, '\p{^Word_Break: midletter}', "");
Expect(1, 57, '\P{Word_Break: midletter}', "");
Expect(0, 57, '\P{^Word_Break: midletter}', "");
Expect(1, 58, '\p{Word_Break=_ MIDLETTER}', "");
Expect(0, 58, '\p{^Word_Break=_ MIDLETTER}', "");
Expect(0, 58, '\P{Word_Break=_ MIDLETTER}', "");
Expect(1, 58, '\P{^Word_Break=_ MIDLETTER}', "");
Expect(0, 57, '\p{Word_Break=_ MIDLETTER}', "");
Expect(1, 57, '\p{^Word_Break=_ MIDLETTER}', "");
Expect(1, 57, '\P{Word_Break=_ MIDLETTER}', "");
Expect(0, 57, '\P{^Word_Break=_ MIDLETTER}', "");
Error('\p{WB=:=-ml}');
Error('\P{WB=:=-ml}');
Expect(1, 58, '\p{WB:   ml}', "");
Expect(0, 58, '\p{^WB:   ml}', "");
Expect(0, 58, '\P{WB:   ml}', "");
Expect(1, 58, '\P{^WB:   ml}', "");
Expect(0, 57, '\p{WB:   ml}', "");
Expect(1, 57, '\p{^WB:   ml}', "");
Expect(1, 57, '\P{WB:   ml}', "");
Expect(0, 57, '\P{^WB:   ml}', "");
Expect(1, 58, '\p{WB=	 ML}', "");
Expect(0, 58, '\p{^WB=	 ML}', "");
Expect(0, 58, '\P{WB=	 ML}', "");
Expect(1, 58, '\P{^WB=	 ML}', "");
Expect(0, 57, '\p{WB=	 ML}', "");
Expect(1, 57, '\p{^WB=	 ML}', "");
Expect(1, 57, '\P{WB=	 ML}', "");
Expect(0, 57, '\P{^WB=	 ML}', "");
Error('\p{Is_Word_Break=-:=MidLetter}');
Error('\P{Is_Word_Break=-:=MidLetter}');
Expect(1, 58, '\p{Is_Word_Break:   midletter}', "");
Expect(0, 58, '\p{^Is_Word_Break:   midletter}', "");
Expect(0, 58, '\P{Is_Word_Break:   midletter}', "");
Expect(1, 58, '\P{^Is_Word_Break:   midletter}', "");
Expect(0, 57, '\p{Is_Word_Break:   midletter}', "");
Expect(1, 57, '\p{^Is_Word_Break:   midletter}', "");
Expect(1, 57, '\P{Is_Word_Break:   midletter}', "");
Expect(0, 57, '\P{^Is_Word_Break:   midletter}', "");
Expect(1, 58, '\p{Is_Word_Break=_	MidLetter}', "");
Expect(0, 58, '\p{^Is_Word_Break=_	MidLetter}', "");
Expect(0, 58, '\P{Is_Word_Break=_	MidLetter}', "");
Expect(1, 58, '\P{^Is_Word_Break=_	MidLetter}', "");
Expect(0, 57, '\p{Is_Word_Break=_	MidLetter}', "");
Expect(1, 57, '\p{^Is_Word_Break=_	MidLetter}', "");
Expect(1, 57, '\P{Is_Word_Break=_	MidLetter}', "");
Expect(0, 57, '\P{^Is_Word_Break=_	MidLetter}', "");
Error('\p{Is_WB=	ML:=}');
Error('\P{Is_WB=	ML:=}');
Expect(1, 58, '\p{Is_WB=ml}', "");
Expect(0, 58, '\p{^Is_WB=ml}', "");
Expect(0, 58, '\P{Is_WB=ml}', "");
Expect(1, 58, '\P{^Is_WB=ml}', "");
Expect(0, 57, '\p{Is_WB=ml}', "");
Expect(1, 57, '\p{^Is_WB=ml}', "");
Expect(1, 57, '\P{Is_WB=ml}', "");
Expect(0, 57, '\P{^Is_WB=ml}', "");
Expect(1, 58, '\p{Is_WB=--ml}', "");
Expect(0, 58, '\p{^Is_WB=--ml}', "");
Expect(0, 58, '\P{Is_WB=--ml}', "");
Expect(1, 58, '\P{^Is_WB=--ml}', "");
Expect(0, 57, '\p{Is_WB=--ml}', "");
Expect(1, 57, '\p{^Is_WB=--ml}', "");
Expect(1, 57, '\P{Is_WB=--ml}', "");
Expect(0, 57, '\P{^Is_WB=--ml}', "");
Error('\p{Word_Break=:=	-MidNumLet}');
Error('\P{Word_Break=:=	-MidNumLet}');
Expect(1, 39, '\p{Word_Break:midnumlet}', "");
Expect(0, 39, '\p{^Word_Break:midnumlet}', "");
Expect(0, 39, '\P{Word_Break:midnumlet}', "");
Expect(1, 39, '\P{^Word_Break:midnumlet}', "");
Expect(0, 38, '\p{Word_Break:midnumlet}', "");
Expect(1, 38, '\p{^Word_Break:midnumlet}', "");
Expect(1, 38, '\P{Word_Break:midnumlet}', "");
Expect(0, 38, '\P{^Word_Break:midnumlet}', "");
Error('\p{WB= /a/MB}');
Error('\P{WB= /a/MB}');
Expect(1, 39, '\p{WB=mb}', "");
Expect(0, 39, '\p{^WB=mb}', "");
Expect(0, 39, '\P{WB=mb}', "");
Expect(1, 39, '\P{^WB=mb}', "");
Expect(0, 38, '\p{WB=mb}', "");
Expect(1, 38, '\p{^WB=mb}', "");
Expect(1, 38, '\P{WB=mb}', "");
Expect(0, 38, '\P{^WB=mb}', "");
Expect(1, 39, '\p{WB=-	MB}', "");
Expect(0, 39, '\p{^WB=-	MB}', "");
Expect(0, 39, '\P{WB=-	MB}', "");
Expect(1, 39, '\P{^WB=-	MB}', "");
Expect(0, 38, '\p{WB=-	MB}', "");
Expect(1, 38, '\p{^WB=-	MB}', "");
Expect(1, 38, '\P{WB=-	MB}', "");
Expect(0, 38, '\P{^WB=-	MB}', "");
Error('\p{Is_Word_Break=/a/ MIDNUMLET}');
Error('\P{Is_Word_Break=/a/ MIDNUMLET}');
Expect(1, 39, '\p{Is_Word_Break: midnumlet}', "");
Expect(0, 39, '\p{^Is_Word_Break: midnumlet}', "");
Expect(0, 39, '\P{Is_Word_Break: midnumlet}', "");
Expect(1, 39, '\P{^Is_Word_Break: midnumlet}', "");
Expect(0, 38, '\p{Is_Word_Break: midnumlet}', "");
Expect(1, 38, '\p{^Is_Word_Break: midnumlet}', "");
Expect(1, 38, '\P{Is_Word_Break: midnumlet}', "");
Expect(0, 38, '\P{^Is_Word_Break: midnumlet}', "");
Expect(1, 39, '\p{Is_Word_Break: _-MIDNUMLET}', "");
Expect(0, 39, '\p{^Is_Word_Break: _-MIDNUMLET}', "");
Expect(0, 39, '\P{Is_Word_Break: _-MIDNUMLET}', "");
Expect(1, 39, '\P{^Is_Word_Break: _-MIDNUMLET}', "");
Expect(0, 38, '\p{Is_Word_Break: _-MIDNUMLET}', "");
Expect(1, 38, '\p{^Is_Word_Break: _-MIDNUMLET}', "");
Expect(1, 38, '\P{Is_Word_Break: _-MIDNUMLET}', "");
Expect(0, 38, '\P{^Is_Word_Break: _-MIDNUMLET}', "");
Error('\p{Is_WB=/a/MB}');
Error('\P{Is_WB=/a/MB}');
Expect(1, 39, '\p{Is_WB=mb}', "");
Expect(0, 39, '\p{^Is_WB=mb}', "");
Expect(0, 39, '\P{Is_WB=mb}', "");
Expect(1, 39, '\P{^Is_WB=mb}', "");
Expect(0, 38, '\p{Is_WB=mb}', "");
Expect(1, 38, '\p{^Is_WB=mb}', "");
Expect(1, 38, '\P{Is_WB=mb}', "");
Expect(0, 38, '\P{^Is_WB=mb}', "");
Expect(1, 39, '\p{Is_WB:_-MB}', "");
Expect(0, 39, '\p{^Is_WB:_-MB}', "");
Expect(0, 39, '\P{Is_WB:_-MB}', "");
Expect(1, 39, '\P{^Is_WB:_-MB}', "");
Expect(0, 38, '\p{Is_WB:_-MB}', "");
Expect(1, 38, '\p{^Is_WB:_-MB}', "");
Expect(1, 38, '\P{Is_WB:_-MB}', "");
Expect(0, 38, '\P{^Is_WB:_-MB}', "");
Error('\p{Word_Break= _MIDNUM/a/}');
Error('\P{Word_Break= _MIDNUM/a/}');
Expect(1, 44, '\p{Word_Break=midnum}', "");
Expect(0, 44, '\p{^Word_Break=midnum}', "");
Expect(0, 44, '\P{Word_Break=midnum}', "");
Expect(1, 44, '\P{^Word_Break=midnum}', "");
Expect(0, 43, '\p{Word_Break=midnum}', "");
Expect(1, 43, '\p{^Word_Break=midnum}', "");
Expect(1, 43, '\P{Word_Break=midnum}', "");
Expect(0, 43, '\P{^Word_Break=midnum}', "");
Expect(1, 44, '\p{Word_Break:		-MidNum}', "");
Expect(0, 44, '\p{^Word_Break:		-MidNum}', "");
Expect(0, 44, '\P{Word_Break:		-MidNum}', "");
Expect(1, 44, '\P{^Word_Break:		-MidNum}', "");
Expect(0, 43, '\p{Word_Break:		-MidNum}', "");
Expect(1, 43, '\p{^Word_Break:		-MidNum}', "");
Expect(1, 43, '\P{Word_Break:		-MidNum}', "");
Expect(0, 43, '\P{^Word_Break:		-MidNum}', "");
Error('\p{WB=--MN/a/}');
Error('\P{WB=--MN/a/}');
Expect(1, 44, '\p{WB:mn}', "");
Expect(0, 44, '\p{^WB:mn}', "");
Expect(0, 44, '\P{WB:mn}', "");
Expect(1, 44, '\P{^WB:mn}', "");
Expect(0, 43, '\p{WB:mn}', "");
Expect(1, 43, '\p{^WB:mn}', "");
Expect(1, 43, '\P{WB:mn}', "");
Expect(0, 43, '\P{^WB:mn}', "");
Expect(1, 44, '\p{WB=-mn}', "");
Expect(0, 44, '\p{^WB=-mn}', "");
Expect(0, 44, '\P{WB=-mn}', "");
Expect(1, 44, '\P{^WB=-mn}', "");
Expect(0, 43, '\p{WB=-mn}', "");
Expect(1, 43, '\p{^WB=-mn}', "");
Expect(1, 43, '\P{WB=-mn}', "");
Expect(0, 43, '\P{^WB=-mn}', "");
Error('\p{Is_Word_Break=/a/_	midnum}');
Error('\P{Is_Word_Break=/a/_	midnum}');
Expect(1, 44, '\p{Is_Word_Break=midnum}', "");
Expect(0, 44, '\p{^Is_Word_Break=midnum}', "");
Expect(0, 44, '\P{Is_Word_Break=midnum}', "");
Expect(1, 44, '\P{^Is_Word_Break=midnum}', "");
Expect(0, 43, '\p{Is_Word_Break=midnum}', "");
Expect(1, 43, '\p{^Is_Word_Break=midnum}', "");
Expect(1, 43, '\P{Is_Word_Break=midnum}', "");
Expect(0, 43, '\P{^Is_Word_Break=midnum}', "");
Expect(1, 44, '\p{Is_Word_Break=	MidNum}', "");
Expect(0, 44, '\p{^Is_Word_Break=	MidNum}', "");
Expect(0, 44, '\P{Is_Word_Break=	MidNum}', "");
Expect(1, 44, '\P{^Is_Word_Break=	MidNum}', "");
Expect(0, 43, '\p{Is_Word_Break=	MidNum}', "");
Expect(1, 43, '\p{^Is_Word_Break=	MidNum}', "");
Expect(1, 43, '\P{Is_Word_Break=	MidNum}', "");
Expect(0, 43, '\P{^Is_Word_Break=	MidNum}', "");
Error('\p{Is_WB=/a/	 MN}');
Error('\P{Is_WB=/a/	 MN}');
Expect(1, 44, '\p{Is_WB=mn}', "");
Expect(0, 44, '\p{^Is_WB=mn}', "");
Expect(0, 44, '\P{Is_WB=mn}', "");
Expect(1, 44, '\P{^Is_WB=mn}', "");
Expect(0, 43, '\p{Is_WB=mn}', "");
Expect(1, 43, '\p{^Is_WB=mn}', "");
Expect(1, 43, '\P{Is_WB=mn}', "");
Expect(0, 43, '\P{^Is_WB=mn}', "");
Expect(1, 44, '\p{Is_WB: mn}', "");
Expect(0, 44, '\p{^Is_WB: mn}', "");
Expect(0, 44, '\P{Is_WB: mn}', "");
Expect(1, 44, '\P{^Is_WB: mn}', "");
Expect(0, 43, '\p{Is_WB: mn}', "");
Expect(1, 43, '\p{^Is_WB: mn}', "");
Expect(1, 43, '\P{Is_WB: mn}', "");
Expect(0, 43, '\P{^Is_WB: mn}', "");
Error('\p{Word_Break=_:=Katakana}');
Error('\P{Word_Break=_:=Katakana}');
Expect(1, 12341, '\p{Word_Break=katakana}', "");
Expect(0, 12341, '\p{^Word_Break=katakana}', "");
Expect(0, 12341, '\P{Word_Break=katakana}', "");
Expect(1, 12341, '\P{^Word_Break=katakana}', "");
Expect(0, 12336, '\p{Word_Break=katakana}', "");
Expect(1, 12336, '\p{^Word_Break=katakana}', "");
Expect(1, 12336, '\P{Word_Break=katakana}', "");
Expect(0, 12336, '\P{^Word_Break=katakana}', "");
Expect(1, 12341, '\p{Word_Break=-	Katakana}', "");
Expect(0, 12341, '\p{^Word_Break=-	Katakana}', "");
Expect(0, 12341, '\P{Word_Break=-	Katakana}', "");
Expect(1, 12341, '\P{^Word_Break=-	Katakana}', "");
Expect(0, 12336, '\p{Word_Break=-	Katakana}', "");
Expect(1, 12336, '\p{^Word_Break=-	Katakana}', "");
Expect(1, 12336, '\P{Word_Break=-	Katakana}', "");
Expect(0, 12336, '\P{^Word_Break=-	Katakana}', "");
Error('\p{WB=/a/ 	ka}');
Error('\P{WB=/a/ 	ka}');
Expect(1, 12341, '\p{WB=ka}', "");
Expect(0, 12341, '\p{^WB=ka}', "");
Expect(0, 12341, '\P{WB=ka}', "");
Expect(1, 12341, '\P{^WB=ka}', "");
Expect(0, 12336, '\p{WB=ka}', "");
Expect(1, 12336, '\p{^WB=ka}', "");
Expect(1, 12336, '\P{WB=ka}', "");
Expect(0, 12336, '\P{^WB=ka}', "");
Expect(1, 12341, '\p{WB= _KA}', "");
Expect(0, 12341, '\p{^WB= _KA}', "");
Expect(0, 12341, '\P{WB= _KA}', "");
Expect(1, 12341, '\P{^WB= _KA}', "");
Expect(0, 12336, '\p{WB= _KA}', "");
Expect(1, 12336, '\p{^WB= _KA}', "");
Expect(1, 12336, '\P{WB= _KA}', "");
Expect(0, 12336, '\P{^WB= _KA}', "");
Error('\p{Is_Word_Break=/a/-katakana}');
Error('\P{Is_Word_Break=/a/-katakana}');
Expect(1, 12341, '\p{Is_Word_Break=katakana}', "");
Expect(0, 12341, '\p{^Is_Word_Break=katakana}', "");
Expect(0, 12341, '\P{Is_Word_Break=katakana}', "");
Expect(1, 12341, '\P{^Is_Word_Break=katakana}', "");
Expect(0, 12336, '\p{Is_Word_Break=katakana}', "");
Expect(1, 12336, '\p{^Is_Word_Break=katakana}', "");
Expect(1, 12336, '\P{Is_Word_Break=katakana}', "");
Expect(0, 12336, '\P{^Is_Word_Break=katakana}', "");
Expect(1, 12341, '\p{Is_Word_Break=	KATAKANA}', "");
Expect(0, 12341, '\p{^Is_Word_Break=	KATAKANA}', "");
Expect(0, 12341, '\P{Is_Word_Break=	KATAKANA}', "");
Expect(1, 12341, '\P{^Is_Word_Break=	KATAKANA}', "");
Expect(0, 12336, '\p{Is_Word_Break=	KATAKANA}', "");
Expect(1, 12336, '\p{^Is_Word_Break=	KATAKANA}', "");
Expect(1, 12336, '\P{Is_Word_Break=	KATAKANA}', "");
Expect(0, 12336, '\P{^Is_Word_Break=	KATAKANA}', "");
Error('\p{Is_WB=	-KA:=}');
Error('\P{Is_WB=	-KA:=}');
Expect(1, 12341, '\p{Is_WB=ka}', "");
Expect(0, 12341, '\p{^Is_WB=ka}', "");
Expect(0, 12341, '\P{Is_WB=ka}', "");
Expect(1, 12341, '\P{^Is_WB=ka}', "");
Expect(0, 12336, '\p{Is_WB=ka}', "");
Expect(1, 12336, '\p{^Is_WB=ka}', "");
Expect(1, 12336, '\P{Is_WB=ka}', "");
Expect(0, 12336, '\P{^Is_WB=ka}', "");
Expect(1, 12341, '\p{Is_WB=-_ka}', "");
Expect(0, 12341, '\p{^Is_WB=-_ka}', "");
Expect(0, 12341, '\P{Is_WB=-_ka}', "");
Expect(1, 12341, '\P{^Is_WB=-_ka}', "");
Expect(0, 12336, '\p{Is_WB=-_ka}', "");
Expect(1, 12336, '\p{^Is_WB=-_ka}', "");
Expect(1, 12336, '\P{Is_WB=-_ka}', "");
Expect(0, 12336, '\P{^Is_WB=-_ka}', "");
Error('\p{Word_Break=__lf:=}');
Error('\P{Word_Break=__lf:=}');
Expect(1, 10, '\p{Word_Break=lf}', "");
Expect(0, 10, '\p{^Word_Break=lf}', "");
Expect(0, 10, '\P{Word_Break=lf}', "");
Expect(1, 10, '\P{^Word_Break=lf}', "");
Expect(0, 9, '\p{Word_Break=lf}', "");
Expect(1, 9, '\p{^Word_Break=lf}', "");
Expect(1, 9, '\P{Word_Break=lf}', "");
Expect(0, 9, '\P{^Word_Break=lf}', "");
Expect(1, 10, '\p{Word_Break=		LF}', "");
Expect(0, 10, '\p{^Word_Break=		LF}', "");
Expect(0, 10, '\P{Word_Break=		LF}', "");
Expect(1, 10, '\P{^Word_Break=		LF}', "");
Expect(0, 9, '\p{Word_Break=		LF}', "");
Expect(1, 9, '\p{^Word_Break=		LF}', "");
Expect(1, 9, '\P{Word_Break=		LF}', "");
Expect(0, 9, '\P{^Word_Break=		LF}', "");
Error('\p{WB=:=- LF}');
Error('\P{WB=:=- LF}');
Expect(1, 10, '\p{WB:	lf}', "");
Expect(0, 10, '\p{^WB:	lf}', "");
Expect(0, 10, '\P{WB:	lf}', "");
Expect(1, 10, '\P{^WB:	lf}', "");
Expect(0, 9, '\p{WB:	lf}', "");
Expect(1, 9, '\p{^WB:	lf}', "");
Expect(1, 9, '\P{WB:	lf}', "");
Expect(0, 9, '\P{^WB:	lf}', "");
Expect(1, 10, '\p{WB=	LF}', "");
Expect(0, 10, '\p{^WB=	LF}', "");
Expect(0, 10, '\P{WB=	LF}', "");
Expect(1, 10, '\P{^WB=	LF}', "");
Expect(0, 9, '\p{WB=	LF}', "");
Expect(1, 9, '\p{^WB=	LF}', "");
Expect(1, 9, '\P{WB=	LF}', "");
Expect(0, 9, '\P{^WB=	LF}', "");
Error('\p{Is_Word_Break:	-:=LF}');
Error('\P{Is_Word_Break:	-:=LF}');
Expect(1, 10, '\p{Is_Word_Break=lf}', "");
Expect(0, 10, '\p{^Is_Word_Break=lf}', "");
Expect(0, 10, '\P{Is_Word_Break=lf}', "");
Expect(1, 10, '\P{^Is_Word_Break=lf}', "");
Expect(0, 9, '\p{Is_Word_Break=lf}', "");
Expect(1, 9, '\p{^Is_Word_Break=lf}', "");
Expect(1, 9, '\P{Is_Word_Break=lf}', "");
Expect(0, 9, '\P{^Is_Word_Break=lf}', "");
Expect(1, 10, '\p{Is_Word_Break=_ LF}', "");
Expect(0, 10, '\p{^Is_Word_Break=_ LF}', "");
Expect(0, 10, '\P{Is_Word_Break=_ LF}', "");
Expect(1, 10, '\P{^Is_Word_Break=_ LF}', "");
Expect(0, 9, '\p{Is_Word_Break=_ LF}', "");
Expect(1, 9, '\p{^Is_Word_Break=_ LF}', "");
Expect(1, 9, '\P{Is_Word_Break=_ LF}', "");
Expect(0, 9, '\P{^Is_Word_Break=_ LF}', "");
Error('\p{Is_WB= :=LF}');
Error('\P{Is_WB= :=LF}');
Expect(1, 10, '\p{Is_WB=lf}', "");
Expect(0, 10, '\p{^Is_WB=lf}', "");
Expect(0, 10, '\P{Is_WB=lf}', "");
Expect(1, 10, '\P{^Is_WB=lf}', "");
Expect(0, 9, '\p{Is_WB=lf}', "");
Expect(1, 9, '\p{^Is_WB=lf}', "");
Expect(1, 9, '\P{Is_WB=lf}', "");
Expect(0, 9, '\P{^Is_WB=lf}', "");
Expect(1, 10, '\p{Is_WB=_LF}', "");
Expect(0, 10, '\p{^Is_WB=_LF}', "");
Expect(0, 10, '\P{Is_WB=_LF}', "");
Expect(1, 10, '\P{^Is_WB=_LF}', "");
Expect(0, 9, '\p{Is_WB=_LF}', "");
Expect(1, 9, '\p{^Is_WB=_LF}', "");
Expect(1, 9, '\P{Is_WB=_LF}', "");
Expect(0, 9, '\P{^Is_WB=_LF}', "");
Error('\p{Changes_When_Casefolded=  Yes/a/}');
Error('\P{Changes_When_Casefolded=  Yes/a/}');
Expect(1, 90, '\p{Changes_When_Casefolded=yes}', "");
Expect(0, 90, '\p{^Changes_When_Casefolded=yes}', "");
Expect(0, 90, '\P{Changes_When_Casefolded=yes}', "");
Expect(1, 90, '\P{^Changes_When_Casefolded=yes}', "");
Expect(0, 64, '\p{Changes_When_Casefolded=yes}', "");
Expect(1, 64, '\p{^Changes_When_Casefolded=yes}', "");
Expect(1, 64, '\P{Changes_When_Casefolded=yes}', "");
Expect(0, 64, '\P{^Changes_When_Casefolded=yes}', "");
Expect(1, 90, '\p{Changes_When_Casefolded=	-Yes}', "");
Expect(0, 90, '\p{^Changes_When_Casefolded=	-Yes}', "");
Expect(0, 90, '\P{Changes_When_Casefolded=	-Yes}', "");
Expect(1, 90, '\P{^Changes_When_Casefolded=	-Yes}', "");
Expect(0, 64, '\p{Changes_When_Casefolded=	-Yes}', "");
Expect(1, 64, '\p{^Changes_When_Casefolded=	-Yes}', "");
Expect(1, 64, '\P{Changes_When_Casefolded=	-Yes}', "");
Expect(0, 64, '\P{^Changes_When_Casefolded=	-Yes}', "");
Error('\p{CWCF=- Y/a/}');
Error('\P{CWCF=- Y/a/}');
Expect(1, 90, '\p{CWCF=y}', "");
Expect(0, 90, '\p{^CWCF=y}', "");
Expect(0, 90, '\P{CWCF=y}', "");
Expect(1, 90, '\P{^CWCF=y}', "");
Expect(0, 64, '\p{CWCF=y}', "");
Expect(1, 64, '\p{^CWCF=y}', "");
Expect(1, 64, '\P{CWCF=y}', "");
Expect(0, 64, '\P{^CWCF=y}', "");
Expect(1, 90, '\p{CWCF= 	Y}', "");
Expect(0, 90, '\p{^CWCF= 	Y}', "");
Expect(0, 90, '\P{CWCF= 	Y}', "");
Expect(1, 90, '\P{^CWCF= 	Y}', "");
Expect(0, 64, '\p{CWCF= 	Y}', "");
Expect(1, 64, '\p{^CWCF= 	Y}', "");
Expect(1, 64, '\P{CWCF= 	Y}', "");
Expect(0, 64, '\P{^CWCF= 	Y}', "");
Error('\p{Is_Changes_When_Casefolded=		T/a/}');
Error('\P{Is_Changes_When_Casefolded=		T/a/}');
Expect(1, 90, '\p{Is_Changes_When_Casefolded=t}', "");
Expect(0, 90, '\p{^Is_Changes_When_Casefolded=t}', "");
Expect(0, 90, '\P{Is_Changes_When_Casefolded=t}', "");
Expect(1, 90, '\P{^Is_Changes_When_Casefolded=t}', "");
Expect(0, 64, '\p{Is_Changes_When_Casefolded=t}', "");
Expect(1, 64, '\p{^Is_Changes_When_Casefolded=t}', "");
Expect(1, 64, '\P{Is_Changes_When_Casefolded=t}', "");
Expect(0, 64, '\P{^Is_Changes_When_Casefolded=t}', "");
Expect(1, 90, '\p{Is_Changes_When_Casefolded=_ t}', "");
Expect(0, 90, '\p{^Is_Changes_When_Casefolded=_ t}', "");
Expect(0, 90, '\P{Is_Changes_When_Casefolded=_ t}', "");
Expect(1, 90, '\P{^Is_Changes_When_Casefolded=_ t}', "");
Expect(0, 64, '\p{Is_Changes_When_Casefolded=_ t}', "");
Expect(1, 64, '\p{^Is_Changes_When_Casefolded=_ t}', "");
Expect(1, 64, '\P{Is_Changes_When_Casefolded=_ t}', "");
Expect(0, 64, '\P{^Is_Changes_When_Casefolded=_ t}', "");
Error('\p{Is_CWCF=/a/ -True}');
Error('\P{Is_CWCF=/a/ -True}');
Expect(1, 90, '\p{Is_CWCF=true}', "");
Expect(0, 90, '\p{^Is_CWCF=true}', "");
Expect(0, 90, '\P{Is_CWCF=true}', "");
Expect(1, 90, '\P{^Is_CWCF=true}', "");
Expect(0, 64, '\p{Is_CWCF=true}', "");
Expect(1, 64, '\p{^Is_CWCF=true}', "");
Expect(1, 64, '\P{Is_CWCF=true}', "");
Expect(0, 64, '\P{^Is_CWCF=true}', "");
Expect(1, 90, '\p{Is_CWCF=-TRUE}', "");
Expect(0, 90, '\p{^Is_CWCF=-TRUE}', "");
Expect(0, 90, '\P{Is_CWCF=-TRUE}', "");
Expect(1, 90, '\P{^Is_CWCF=-TRUE}', "");
Expect(0, 64, '\p{Is_CWCF=-TRUE}', "");
Expect(1, 64, '\p{^Is_CWCF=-TRUE}', "");
Expect(1, 64, '\P{Is_CWCF=-TRUE}', "");
Expect(0, 64, '\P{^Is_CWCF=-TRUE}', "");
Error('\p{Changes_When_Casefolded:	No:=}');
Error('\P{Changes_When_Casefolded:	No:=}');
Expect(1, 64, '\p{Changes_When_Casefolded=no}', "");
Expect(0, 64, '\p{^Changes_When_Casefolded=no}', "");
Expect(0, 64, '\P{Changes_When_Casefolded=no}', "");
Expect(1, 64, '\P{^Changes_When_Casefolded=no}', "");
Expect(0, 90, '\p{Changes_When_Casefolded=no}', "");
Expect(1, 90, '\p{^Changes_When_Casefolded=no}', "");
Expect(1, 90, '\P{Changes_When_Casefolded=no}', "");
Expect(0, 90, '\P{^Changes_When_Casefolded=no}', "");
Expect(1, 64, '\p{Changes_When_Casefolded= -NO}', "");
Expect(0, 64, '\p{^Changes_When_Casefolded= -NO}', "");
Expect(0, 64, '\P{Changes_When_Casefolded= -NO}', "");
Expect(1, 64, '\P{^Changes_When_Casefolded= -NO}', "");
Expect(0, 90, '\p{Changes_When_Casefolded= -NO}', "");
Expect(1, 90, '\p{^Changes_When_Casefolded= -NO}', "");
Expect(1, 90, '\P{Changes_When_Casefolded= -NO}', "");
Expect(0, 90, '\P{^Changes_When_Casefolded= -NO}', "");
Error('\p{CWCF=/a/N}');
Error('\P{CWCF=/a/N}');
Expect(1, 64, '\p{CWCF=n}', "");
Expect(0, 64, '\p{^CWCF=n}', "");
Expect(0, 64, '\P{CWCF=n}', "");
Expect(1, 64, '\P{^CWCF=n}', "");
Expect(0, 90, '\p{CWCF=n}', "");
Expect(1, 90, '\p{^CWCF=n}', "");
Expect(1, 90, '\P{CWCF=n}', "");
Expect(0, 90, '\P{^CWCF=n}', "");
Expect(1, 64, '\p{CWCF: -	N}', "");
Expect(0, 64, '\p{^CWCF: -	N}', "");
Expect(0, 64, '\P{CWCF: -	N}', "");
Expect(1, 64, '\P{^CWCF: -	N}', "");
Expect(0, 90, '\p{CWCF: -	N}', "");
Expect(1, 90, '\p{^CWCF: -	N}', "");
Expect(1, 90, '\P{CWCF: -	N}', "");
Expect(0, 90, '\P{^CWCF: -	N}', "");
Error('\p{Is_Changes_When_Casefolded=	/a/f}');
Error('\P{Is_Changes_When_Casefolded=	/a/f}');
Expect(1, 64, '\p{Is_Changes_When_Casefolded=f}', "");
Expect(0, 64, '\p{^Is_Changes_When_Casefolded=f}', "");
Expect(0, 64, '\P{Is_Changes_When_Casefolded=f}', "");
Expect(1, 64, '\P{^Is_Changes_When_Casefolded=f}', "");
Expect(0, 90, '\p{Is_Changes_When_Casefolded=f}', "");
Expect(1, 90, '\p{^Is_Changes_When_Casefolded=f}', "");
Expect(1, 90, '\P{Is_Changes_When_Casefolded=f}', "");
Expect(0, 90, '\P{^Is_Changes_When_Casefolded=f}', "");
Expect(1, 64, '\p{Is_Changes_When_Casefolded=__f}', "");
Expect(0, 64, '\p{^Is_Changes_When_Casefolded=__f}', "");
Expect(0, 64, '\P{Is_Changes_When_Casefolded=__f}', "");
Expect(1, 64, '\P{^Is_Changes_When_Casefolded=__f}', "");
Expect(0, 90, '\p{Is_Changes_When_Casefolded=__f}', "");
Expect(1, 90, '\p{^Is_Changes_When_Casefolded=__f}', "");
Expect(1, 90, '\P{Is_Changes_When_Casefolded=__f}', "");
Expect(0, 90, '\P{^Is_Changes_When_Casefolded=__f}', "");
Error('\p{Is_CWCF= 	FALSE:=}');
Error('\P{Is_CWCF= 	FALSE:=}');
Expect(1, 64, '\p{Is_CWCF=false}', "");
Expect(0, 64, '\p{^Is_CWCF=false}', "");
Expect(0, 64, '\P{Is_CWCF=false}', "");
Expect(1, 64, '\P{^Is_CWCF=false}', "");
Expect(0, 90, '\p{Is_CWCF=false}', "");
Expect(1, 90, '\p{^Is_CWCF=false}', "");
Expect(1, 90, '\P{Is_CWCF=false}', "");
Expect(0, 90, '\P{^Is_CWCF=false}', "");
Expect(1, 64, '\p{Is_CWCF=-	FALSE}', "");
Expect(0, 64, '\p{^Is_CWCF=-	FALSE}', "");
Expect(0, 64, '\P{Is_CWCF=-	FALSE}', "");
Expect(1, 64, '\P{^Is_CWCF=-	FALSE}', "");
Expect(0, 90, '\p{Is_CWCF=-	FALSE}', "");
Expect(1, 90, '\p{^Is_CWCF=-	FALSE}', "");
Expect(1, 90, '\P{Is_CWCF=-	FALSE}', "");
Expect(0, 90, '\P{^Is_CWCF=-	FALSE}', "");
Error('\p{-gothic/a/}');
Error('\P{-gothic/a/}');
Expect(1, 66378, '\p{gothic}', "");
Expect(0, 66378, '\p{^gothic}', "");
Expect(0, 66378, '\P{gothic}', "");
Expect(1, 66378, '\P{^gothic}', "");
Expect(0, 66351, '\p{gothic}', "");
Expect(1, 66351, '\p{^gothic}', "");
Expect(1, 66351, '\P{gothic}', "");
Expect(0, 66351, '\P{^gothic}', "");
Expect(1, 66378, '\p{	_GOTHIC}', "");
Expect(0, 66378, '\p{^	_GOTHIC}', "");
Expect(0, 66378, '\P{	_GOTHIC}', "");
Expect(1, 66378, '\P{^	_GOTHIC}', "");
Expect(0, 66351, '\p{	_GOTHIC}', "");
Expect(1, 66351, '\p{^	_GOTHIC}', "");
Expect(1, 66351, '\P{	_GOTHIC}', "");
Expect(0, 66351, '\P{^	_GOTHIC}', "");
Error('\p{ /a/Is_GOTHIC}');
Error('\P{ /a/Is_GOTHIC}');
Expect(1, 66378, '\p{isgothic}', "");
Expect(0, 66378, '\p{^isgothic}', "");
Expect(0, 66378, '\P{isgothic}', "");
Expect(1, 66378, '\P{^isgothic}', "");
Expect(0, 66351, '\p{isgothic}', "");
Expect(1, 66351, '\p{^isgothic}', "");
Expect(1, 66351, '\P{isgothic}', "");
Expect(0, 66351, '\P{^isgothic}', "");
Expect(1, 66378, '\p{-_Is Gothic}', "");
Expect(0, 66378, '\p{^-_Is Gothic}', "");
Expect(0, 66378, '\P{-_Is Gothic}', "");
Expect(1, 66378, '\P{^-_Is Gothic}', "");
Expect(0, 66351, '\p{-_Is Gothic}', "");
Expect(1, 66351, '\p{^-_Is Gothic}', "");
Expect(1, 66351, '\P{-_Is Gothic}', "");
Expect(0, 66351, '\P{^-_Is Gothic}', "");
Error('\p{	/a/goth}');
Error('\P{	/a/goth}');
Expect(1, 66378, '\p{goth}', "");
Expect(0, 66378, '\p{^goth}', "");
Expect(0, 66378, '\P{goth}', "");
Expect(1, 66378, '\P{^goth}', "");
Expect(0, 66351, '\p{goth}', "");
Expect(1, 66351, '\p{^goth}', "");
Expect(1, 66351, '\P{goth}', "");
Expect(0, 66351, '\P{^goth}', "");
Expect(1, 66378, '\p{--Goth}', "");
Expect(0, 66378, '\p{^--Goth}', "");
Expect(0, 66378, '\P{--Goth}', "");
Expect(1, 66378, '\P{^--Goth}', "");
Expect(0, 66351, '\p{--Goth}', "");
Expect(1, 66351, '\p{^--Goth}', "");
Expect(1, 66351, '\P{--Goth}', "");
Expect(0, 66351, '\P{^--Goth}', "");
Error('\p{/a/	-ISGoth}');
Error('\P{/a/	-ISGoth}');
Expect(1, 66378, '\p{isgoth}', "");
Expect(0, 66378, '\p{^isgoth}', "");
Expect(0, 66378, '\P{isgoth}', "");
Expect(1, 66378, '\P{^isgoth}', "");
Expect(0, 66351, '\p{isgoth}', "");
Expect(1, 66351, '\p{^isgoth}', "");
Expect(1, 66351, '\P{isgoth}', "");
Expect(0, 66351, '\P{^isgoth}', "");
Expect(1, 66378, '\p{--is_GOTH}', "");
Expect(0, 66378, '\p{^--is_GOTH}', "");
Expect(0, 66378, '\P{--is_GOTH}', "");
Expect(1, 66378, '\P{^--is_GOTH}', "");
Expect(0, 66351, '\p{--is_GOTH}', "");
Expect(1, 66351, '\p{^--is_GOTH}', "");
Expect(1, 66351, '\P{--is_GOTH}', "");
Expect(0, 66351, '\P{^--is_GOTH}', "");
Error('\p{/a/_	BLANK}');
Error('\P{/a/_	BLANK}');
Expect(1, 9, '\p{blank}', "");
Expect(0, 9, '\p{^blank}', "");
Expect(0, 9, '\P{blank}', "");
Expect(1, 9, '\P{^blank}', "");
Expect(0, 8, '\p{blank}', "");
Expect(1, 8, '\p{^blank}', "");
Expect(1, 8, '\P{blank}', "");
Expect(0, 8, '\P{^blank}', "");
Expect(1, 9, '\p{-_blank}', "");
Expect(0, 9, '\p{^-_blank}', "");
Expect(0, 9, '\P{-_blank}', "");
Expect(1, 9, '\P{^-_blank}', "");
Expect(0, 8, '\p{-_blank}', "");
Expect(1, 8, '\p{^-_blank}', "");
Expect(1, 8, '\P{-_blank}', "");
Expect(0, 8, '\P{^-_blank}', "");
Error('\p{_HorizSpace/a/}');
Error('\P{_HorizSpace/a/}');
Expect(1, 9, '\p{horizspace}', "");
Expect(0, 9, '\p{^horizspace}', "");
Expect(0, 9, '\P{horizspace}', "");
Expect(1, 9, '\P{^horizspace}', "");
Expect(0, 8, '\p{horizspace}', "");
Expect(1, 8, '\p{^horizspace}', "");
Expect(1, 8, '\P{horizspace}', "");
Expect(0, 8, '\P{^horizspace}', "");
Expect(1, 9, '\p{ -HorizSpace}', "");
Expect(0, 9, '\p{^ -HorizSpace}', "");
Expect(0, 9, '\P{ -HorizSpace}', "");
Expect(1, 9, '\P{^ -HorizSpace}', "");
Expect(0, 8, '\p{ -HorizSpace}', "");
Expect(1, 8, '\p{^ -HorizSpace}', "");
Expect(1, 8, '\P{ -HorizSpace}', "");
Expect(0, 8, '\P{^ -HorizSpace}', "");
Error('\p{/a/XPosixBlank}');
Error('\P{/a/XPosixBlank}');
Expect(1, 9, '\p{xposixblank}', "");
Expect(0, 9, '\p{^xposixblank}', "");
Expect(0, 9, '\P{xposixblank}', "");
Expect(1, 9, '\P{^xposixblank}', "");
Expect(0, 8, '\p{xposixblank}', "");
Expect(1, 8, '\p{^xposixblank}', "");
Expect(1, 8, '\P{xposixblank}', "");
Expect(0, 8, '\P{^xposixblank}', "");
Expect(1, 9, '\p{	XPOSIXBLANK}', "");
Expect(0, 9, '\p{^	XPOSIXBLANK}', "");
Expect(0, 9, '\P{	XPOSIXBLANK}', "");
Expect(1, 9, '\P{^	XPOSIXBLANK}', "");
Expect(0, 8, '\p{	XPOSIXBLANK}', "");
Expect(1, 8, '\p{^	XPOSIXBLANK}', "");
Expect(1, 8, '\P{	XPOSIXBLANK}', "");
Expect(0, 8, '\P{^	XPOSIXBLANK}', "");
Error('\p{	_is_blank:=}');
Error('\P{	_is_blank:=}');
Expect(1, 9, '\p{isblank}', "");
Expect(0, 9, '\p{^isblank}', "");
Expect(0, 9, '\P{isblank}', "");
Expect(1, 9, '\P{^isblank}', "");
Expect(0, 8, '\p{isblank}', "");
Expect(1, 8, '\p{^isblank}', "");
Expect(1, 8, '\P{isblank}', "");
Expect(0, 8, '\P{^isblank}', "");
Expect(1, 9, '\p{_ Is Blank}', "");
Expect(0, 9, '\p{^_ Is Blank}', "");
Expect(0, 9, '\P{_ Is Blank}', "");
Expect(1, 9, '\P{^_ Is Blank}', "");
Expect(0, 8, '\p{_ Is Blank}', "");
Expect(1, 8, '\p{^_ Is Blank}', "");
Expect(1, 8, '\P{_ Is Blank}', "");
Expect(0, 8, '\P{^_ Is Blank}', "");
Error('\p{ 	Is	HorizSpace:=}');
Error('\P{ 	Is	HorizSpace:=}');
Expect(1, 9, '\p{ishorizspace}', "");
Expect(0, 9, '\p{^ishorizspace}', "");
Expect(0, 9, '\P{ishorizspace}', "");
Expect(1, 9, '\P{^ishorizspace}', "");
Expect(0, 8, '\p{ishorizspace}', "");
Expect(1, 8, '\p{^ishorizspace}', "");
Expect(1, 8, '\P{ishorizspace}', "");
Expect(0, 8, '\P{^ishorizspace}', "");
Expect(1, 9, '\p{_Is	horizspace}', "");
Expect(0, 9, '\p{^_Is	horizspace}', "");
Expect(0, 9, '\P{_Is	horizspace}', "");
Expect(1, 9, '\P{^_Is	horizspace}', "");
Expect(0, 8, '\p{_Is	horizspace}', "");
Expect(1, 8, '\p{^_Is	horizspace}', "");
Expect(1, 8, '\P{_Is	horizspace}', "");
Expect(0, 8, '\P{^_Is	horizspace}', "");
Error('\p{/a/-Is-XPosixBlank}');
Error('\P{/a/-Is-XPosixBlank}');
Expect(1, 9, '\p{isxposixblank}', "");
Expect(0, 9, '\p{^isxposixblank}', "");
Expect(0, 9, '\P{isxposixblank}', "");
Expect(1, 9, '\P{^isxposixblank}', "");
Expect(0, 8, '\p{isxposixblank}', "");
Expect(1, 8, '\p{^isxposixblank}', "");
Expect(1, 8, '\P{isxposixblank}', "");
Expect(0, 8, '\P{^isxposixblank}', "");
Expect(1, 9, '\p{_	Is-XPOSIXBLANK}', "");
Expect(0, 9, '\p{^_	Is-XPOSIXBLANK}', "");
Expect(0, 9, '\P{_	Is-XPOSIXBLANK}', "");
Expect(1, 9, '\P{^_	Is-XPOSIXBLANK}', "");
Expect(0, 8, '\p{_	Is-XPOSIXBLANK}', "");
Expect(1, 8, '\p{^_	Is-XPOSIXBLANK}', "");
Expect(1, 8, '\P{_	Is-XPOSIXBLANK}', "");
Expect(0, 8, '\P{^_	Is-XPOSIXBLANK}', "");
Error('\p{-/a/CombiningDIACRITICAL Marks}');
Error('\P{-/a/CombiningDIACRITICAL Marks}');
Expect(1, 879, '\p{combiningdiacriticalmarks}', "");
Expect(0, 879, '\p{^combiningdiacriticalmarks}', "");
Expect(0, 879, '\P{combiningdiacriticalmarks}', "");
Expect(1, 879, '\P{^combiningdiacriticalmarks}', "");
Expect(0, 767, '\p{combiningdiacriticalmarks}', "");
Expect(1, 767, '\p{^combiningdiacriticalmarks}', "");
Expect(1, 767, '\P{combiningdiacriticalmarks}', "");
Expect(0, 767, '\P{^combiningdiacriticalmarks}', "");
Expect(1, 879, '\p{- Combining diacritical	marks}', "");
Expect(0, 879, '\p{^- Combining diacritical	marks}', "");
Expect(0, 879, '\P{- Combining diacritical	marks}', "");
Expect(1, 879, '\P{^- Combining diacritical	marks}', "");
Expect(0, 767, '\p{- Combining diacritical	marks}', "");
Expect(1, 767, '\p{^- Combining diacritical	marks}', "");
Expect(1, 767, '\P{- Combining diacritical	marks}', "");
Expect(0, 767, '\P{^- Combining diacritical	marks}', "");
Error('\p{-:=IS	combining_diacritical_MARKS}');
Error('\P{-:=IS	combining_diacritical_MARKS}');
Expect(1, 879, '\p{iscombiningdiacriticalmarks}', "");
Expect(0, 879, '\p{^iscombiningdiacriticalmarks}', "");
Expect(0, 879, '\P{iscombiningdiacriticalmarks}', "");
Expect(1, 879, '\P{^iscombiningdiacriticalmarks}', "");
Expect(0, 767, '\p{iscombiningdiacriticalmarks}', "");
Expect(1, 767, '\p{^iscombiningdiacriticalmarks}', "");
Expect(1, 767, '\P{iscombiningdiacriticalmarks}', "");
Expect(0, 767, '\P{^iscombiningdiacriticalmarks}', "");
Expect(1, 879, '\p{--Is-Combining_Diacritical Marks}', "");
Expect(0, 879, '\p{^--Is-Combining_Diacritical Marks}', "");
Expect(0, 879, '\P{--Is-Combining_Diacritical Marks}', "");
Expect(1, 879, '\P{^--Is-Combining_Diacritical Marks}', "");
Expect(0, 767, '\p{--Is-Combining_Diacritical Marks}', "");
Expect(1, 767, '\p{^--Is-Combining_Diacritical Marks}', "");
Expect(1, 767, '\P{--Is-Combining_Diacritical Marks}', "");
Expect(0, 767, '\P{^--Is-Combining_Diacritical Marks}', "");
Error('\p{:=		In-COMBINING-Diacritical	MARKS}');
Error('\P{:=		In-COMBINING-Diacritical	MARKS}');
Expect(1, 879, '\p{incombiningdiacriticalmarks}', "");
Expect(0, 879, '\p{^incombiningdiacriticalmarks}', "");
Expect(0, 879, '\P{incombiningdiacriticalmarks}', "");
Expect(1, 879, '\P{^incombiningdiacriticalmarks}', "");
Expect(0, 767, '\p{incombiningdiacriticalmarks}', "");
Expect(1, 767, '\p{^incombiningdiacriticalmarks}', "");
Expect(1, 767, '\P{incombiningdiacriticalmarks}', "");
Expect(0, 767, '\P{^incombiningdiacriticalmarks}', "");
Expect(1, 879, '\p{-	in Combining Diacritical-marks}', "");
Expect(0, 879, '\p{^-	in Combining Diacritical-marks}', "");
Expect(0, 879, '\P{-	in Combining Diacritical-marks}', "");
Expect(1, 879, '\P{^-	in Combining Diacritical-marks}', "");
Expect(0, 767, '\p{-	in Combining Diacritical-marks}', "");
Expect(1, 767, '\p{^-	in Combining Diacritical-marks}', "");
Expect(1, 767, '\P{-	in Combining Diacritical-marks}', "");
Expect(0, 767, '\P{^-	in Combining Diacritical-marks}', "");
Error('\p{-/a/InscriptionalParthian}');
Error('\P{-/a/InscriptionalParthian}');
Expect(1, 68437, '\p{inscriptionalparthian}', "");
Expect(0, 68437, '\p{^inscriptionalparthian}', "");
Expect(0, 68437, '\P{inscriptionalparthian}', "");
Expect(1, 68437, '\P{^inscriptionalparthian}', "");
Expect(0, 68415, '\p{inscriptionalparthian}', "");
Expect(1, 68415, '\p{^inscriptionalparthian}', "");
Expect(1, 68415, '\P{inscriptionalparthian}', "");
Expect(0, 68415, '\P{^inscriptionalparthian}', "");
Expect(1, 68437, '\p{ -inscriptional_Parthian}', "");
Expect(0, 68437, '\p{^ -inscriptional_Parthian}', "");
Expect(0, 68437, '\P{ -inscriptional_Parthian}', "");
Expect(1, 68437, '\P{^ -inscriptional_Parthian}', "");
Expect(0, 68415, '\p{ -inscriptional_Parthian}', "");
Expect(1, 68415, '\p{^ -inscriptional_Parthian}', "");
Expect(1, 68415, '\P{ -inscriptional_Parthian}', "");
Expect(0, 68415, '\P{^ -inscriptional_Parthian}', "");
Error('\p{:= -Is Inscriptional	parthian}');
Error('\P{:= -Is Inscriptional	parthian}');
Expect(1, 68437, '\p{isinscriptionalparthian}', "");
Expect(0, 68437, '\p{^isinscriptionalparthian}', "");
Expect(0, 68437, '\P{isinscriptionalparthian}', "");
Expect(1, 68437, '\P{^isinscriptionalparthian}', "");
Expect(0, 68415, '\p{isinscriptionalparthian}', "");
Expect(1, 68415, '\p{^isinscriptionalparthian}', "");
Expect(1, 68415, '\P{isinscriptionalparthian}', "");
Expect(0, 68415, '\P{^isinscriptionalparthian}', "");
Expect(1, 68437, '\p{__is_inscriptional_PARTHIAN}', "");
Expect(0, 68437, '\p{^__is_inscriptional_PARTHIAN}', "");
Expect(0, 68437, '\P{__is_inscriptional_PARTHIAN}', "");
Expect(1, 68437, '\P{^__is_inscriptional_PARTHIAN}', "");
Expect(0, 68415, '\p{__is_inscriptional_PARTHIAN}', "");
Expect(1, 68415, '\p{^__is_inscriptional_PARTHIAN}', "");
Expect(1, 68415, '\P{__is_inscriptional_PARTHIAN}', "");
Expect(0, 68415, '\P{^__is_inscriptional_PARTHIAN}', "");
Error('\p{/a/		Prti}');
Error('\P{/a/		Prti}');
Expect(1, 68437, '\p{prti}', "");
Expect(0, 68437, '\p{^prti}', "");
Expect(0, 68437, '\P{prti}', "");
Expect(1, 68437, '\P{^prti}', "");
Expect(0, 68415, '\p{prti}', "");
Expect(1, 68415, '\p{^prti}', "");
Expect(1, 68415, '\P{prti}', "");
Expect(0, 68415, '\P{^prti}', "");
Expect(1, 68437, '\p{_prti}', "");
Expect(0, 68437, '\p{^_prti}', "");
Expect(0, 68437, '\P{_prti}', "");
Expect(1, 68437, '\P{^_prti}', "");
Expect(0, 68415, '\p{_prti}', "");
Expect(1, 68415, '\p{^_prti}', "");
Expect(1, 68415, '\P{_prti}', "");
Expect(0, 68415, '\P{^_prti}', "");
Error('\p{_Is/a/PRTI}');
Error('\P{_Is/a/PRTI}');
Expect(1, 68437, '\p{isprti}', "");
Expect(0, 68437, '\p{^isprti}', "");
Expect(0, 68437, '\P{isprti}', "");
Expect(1, 68437, '\P{^isprti}', "");
Expect(0, 68415, '\p{isprti}', "");
Expect(1, 68415, '\p{^isprti}', "");
Expect(1, 68415, '\P{isprti}', "");
Expect(0, 68415, '\P{^isprti}', "");
Expect(1, 68437, '\p{	 ISPRTI}', "");
Expect(0, 68437, '\p{^	 ISPRTI}', "");
Expect(0, 68437, '\P{	 ISPRTI}', "");
Expect(1, 68437, '\P{^	 ISPRTI}', "");
Expect(0, 68415, '\p{	 ISPRTI}', "");
Expect(1, 68415, '\p{^	 ISPRTI}', "");
Expect(1, 68415, '\P{	 ISPRTI}', "");
Expect(0, 68415, '\P{^	 ISPRTI}', "");
Error('\p{	_devanagari EXTENDED:=}');
Error('\P{	_devanagari EXTENDED:=}');
Expect(1, 43263, '\p{devanagariextended}', "");
Expect(0, 43263, '\p{^devanagariextended}', "");
Expect(0, 43263, '\P{devanagariextended}', "");
Expect(1, 43263, '\P{^devanagariextended}', "");
Expect(0, 43231, '\p{devanagariextended}', "");
Expect(1, 43231, '\p{^devanagariextended}', "");
Expect(1, 43231, '\P{devanagariextended}', "");
Expect(0, 43231, '\P{^devanagariextended}', "");
Expect(1, 43263, '\p{_-Devanagari Extended}', "");
Expect(0, 43263, '\p{^_-Devanagari Extended}', "");
Expect(0, 43263, '\P{_-Devanagari Extended}', "");
Expect(1, 43263, '\P{^_-Devanagari Extended}', "");
Expect(0, 43231, '\p{_-Devanagari Extended}', "");
Expect(1, 43231, '\p{^_-Devanagari Extended}', "");
Expect(1, 43231, '\P{_-Devanagari Extended}', "");
Expect(0, 43231, '\P{^_-Devanagari Extended}', "");
Error('\p{_:=IsDEVANAGARI_Extended}');
Error('\P{_:=IsDEVANAGARI_Extended}');
Expect(1, 43263, '\p{isdevanagariextended}', "");
Expect(0, 43263, '\p{^isdevanagariextended}', "");
Expect(0, 43263, '\P{isdevanagariextended}', "");
Expect(1, 43263, '\P{^isdevanagariextended}', "");
Expect(0, 43231, '\p{isdevanagariextended}', "");
Expect(1, 43231, '\p{^isdevanagariextended}', "");
Expect(1, 43231, '\P{isdevanagariextended}', "");
Expect(0, 43231, '\P{^isdevanagariextended}', "");
Expect(1, 43263, '\p{-is_DEVANAGARI	Extended}', "");
Expect(0, 43263, '\p{^-is_DEVANAGARI	Extended}', "");
Expect(0, 43263, '\P{-is_DEVANAGARI	Extended}', "");
Expect(1, 43263, '\P{^-is_DEVANAGARI	Extended}', "");
Expect(0, 43231, '\p{-is_DEVANAGARI	Extended}', "");
Expect(1, 43231, '\p{^-is_DEVANAGARI	Extended}', "");
Expect(1, 43231, '\P{-is_DEVANAGARI	Extended}', "");
Expect(0, 43231, '\P{^-is_DEVANAGARI	Extended}', "");
Error('\p{_/a/InDEVANAGARI Extended}');
Error('\P{_/a/InDEVANAGARI Extended}');
Expect(1, 43263, '\p{indevanagariextended}', "");
Expect(0, 43263, '\p{^indevanagariextended}', "");
Expect(0, 43263, '\P{indevanagariextended}', "");
Expect(1, 43263, '\P{^indevanagariextended}', "");
Expect(0, 43231, '\p{indevanagariextended}', "");
Expect(1, 43231, '\p{^indevanagariextended}', "");
Expect(1, 43231, '\P{indevanagariextended}', "");
Expect(0, 43231, '\P{^indevanagariextended}', "");
Expect(1, 43263, '\p{- in-DEVANAGARI	EXTENDED}', "");
Expect(0, 43263, '\p{^- in-DEVANAGARI	EXTENDED}', "");
Expect(0, 43263, '\P{- in-DEVANAGARI	EXTENDED}', "");
Expect(1, 43263, '\P{^- in-DEVANAGARI	EXTENDED}', "");
Expect(0, 43231, '\p{- in-DEVANAGARI	EXTENDED}', "");
Expect(1, 43231, '\p{^- in-DEVANAGARI	EXTENDED}', "");
Expect(1, 43231, '\P{- in-DEVANAGARI	EXTENDED}', "");
Expect(0, 43231, '\P{^- in-DEVANAGARI	EXTENDED}', "");
Error('\p{_/a/Ethiopic	SUPPLEMENT}');
Error('\P{_/a/Ethiopic	SUPPLEMENT}');
Expect(1, 5023, '\p{ethiopicsupplement}', "");
Expect(0, 5023, '\p{^ethiopicsupplement}', "");
Expect(0, 5023, '\P{ethiopicsupplement}', "");
Expect(1, 5023, '\P{^ethiopicsupplement}', "");
Expect(0, 4991, '\p{ethiopicsupplement}', "");
Expect(1, 4991, '\p{^ethiopicsupplement}', "");
Expect(1, 4991, '\P{ethiopicsupplement}', "");
Expect(0, 4991, '\P{^ethiopicsupplement}', "");
Expect(1, 5023, '\p{-Ethiopic	Supplement}', "");
Expect(0, 5023, '\p{^-Ethiopic	Supplement}', "");
Expect(0, 5023, '\P{-Ethiopic	Supplement}', "");
Expect(1, 5023, '\P{^-Ethiopic	Supplement}', "");
Expect(0, 4991, '\p{-Ethiopic	Supplement}', "");
Expect(1, 4991, '\p{^-Ethiopic	Supplement}', "");
Expect(1, 4991, '\P{-Ethiopic	Supplement}', "");
Expect(0, 4991, '\P{^-Ethiopic	Supplement}', "");
Error('\p{:= _is-ETHIOPIC_Supplement}');
Error('\P{:= _is-ETHIOPIC_Supplement}');
Expect(1, 5023, '\p{isethiopicsupplement}', "");
Expect(0, 5023, '\p{^isethiopicsupplement}', "");
Expect(0, 5023, '\P{isethiopicsupplement}', "");
Expect(1, 5023, '\P{^isethiopicsupplement}', "");
Expect(0, 4991, '\p{isethiopicsupplement}', "");
Expect(1, 4991, '\p{^isethiopicsupplement}', "");
Expect(1, 4991, '\P{isethiopicsupplement}', "");
Expect(0, 4991, '\P{^isethiopicsupplement}', "");
Expect(1, 5023, '\p{_-IS-Ethiopic	Supplement}', "");
Expect(0, 5023, '\p{^_-IS-Ethiopic	Supplement}', "");
Expect(0, 5023, '\P{_-IS-Ethiopic	Supplement}', "");
Expect(1, 5023, '\P{^_-IS-Ethiopic	Supplement}', "");
Expect(0, 4991, '\p{_-IS-Ethiopic	Supplement}', "");
Expect(1, 4991, '\p{^_-IS-Ethiopic	Supplement}', "");
Expect(1, 4991, '\P{_-IS-Ethiopic	Supplement}', "");
Expect(0, 4991, '\P{^_-IS-Ethiopic	Supplement}', "");
Error('\p{_ In:=Ethiopic_supplement}');
Error('\P{_ In:=Ethiopic_supplement}');
Expect(1, 5023, '\p{inethiopicsupplement}', "");
Expect(0, 5023, '\p{^inethiopicsupplement}', "");
Expect(0, 5023, '\P{inethiopicsupplement}', "");
Expect(1, 5023, '\P{^inethiopicsupplement}', "");
Expect(0, 4991, '\p{inethiopicsupplement}', "");
Expect(1, 4991, '\p{^inethiopicsupplement}', "");
Expect(1, 4991, '\P{inethiopicsupplement}', "");
Expect(0, 4991, '\P{^inethiopicsupplement}', "");
Expect(1, 5023, '\p{-In EthiopicSUPPLEMENT}', "");
Expect(0, 5023, '\p{^-In EthiopicSUPPLEMENT}', "");
Expect(0, 5023, '\P{-In EthiopicSUPPLEMENT}', "");
Expect(1, 5023, '\P{^-In EthiopicSUPPLEMENT}', "");
Expect(0, 4991, '\p{-In EthiopicSUPPLEMENT}', "");
Expect(1, 4991, '\p{^-In EthiopicSUPPLEMENT}', "");
Expect(1, 4991, '\P{-In EthiopicSUPPLEMENT}', "");
Expect(0, 4991, '\P{^-In EthiopicSUPPLEMENT}', "");
Error('\p{/a/ dingbats}');
Error('\P{/a/ dingbats}');
Expect(1, 10175, '\p{dingbats}', "");
Expect(0, 10175, '\p{^dingbats}', "");
Expect(0, 10175, '\P{dingbats}', "");
Expect(1, 10175, '\P{^dingbats}', "");
Expect(0, 9983, '\p{dingbats}', "");
Expect(1, 9983, '\p{^dingbats}', "");
Expect(1, 9983, '\P{dingbats}', "");
Expect(0, 9983, '\P{^dingbats}', "");
Expect(1, 10175, '\p{		Dingbats}', "");
Expect(0, 10175, '\p{^		Dingbats}', "");
Expect(0, 10175, '\P{		Dingbats}', "");
Expect(1, 10175, '\P{^		Dingbats}', "");
Expect(0, 9983, '\p{		Dingbats}', "");
Expect(1, 9983, '\p{^		Dingbats}', "");
Expect(1, 9983, '\P{		Dingbats}', "");
Expect(0, 9983, '\P{^		Dingbats}', "");
Error('\p{	/a/IS-DINGBATS}');
Error('\P{	/a/IS-DINGBATS}');
Expect(1, 10175, '\p{isdingbats}', "");
Expect(0, 10175, '\p{^isdingbats}', "");
Expect(0, 10175, '\P{isdingbats}', "");
Expect(1, 10175, '\P{^isdingbats}', "");
Expect(0, 9983, '\p{isdingbats}', "");
Expect(1, 9983, '\p{^isdingbats}', "");
Expect(1, 9983, '\P{isdingbats}', "");
Expect(0, 9983, '\P{^isdingbats}', "");
Expect(1, 10175, '\p{IS_dingbats}', "");
Expect(0, 10175, '\p{^IS_dingbats}', "");
Expect(0, 10175, '\P{IS_dingbats}', "");
Expect(1, 10175, '\P{^IS_dingbats}', "");
Expect(0, 9983, '\p{IS_dingbats}', "");
Expect(1, 9983, '\p{^IS_dingbats}', "");
Expect(1, 9983, '\P{IS_dingbats}', "");
Expect(0, 9983, '\P{^IS_dingbats}', "");
Error('\p{ :=IN_dingbats}');
Error('\P{ :=IN_dingbats}');
Expect(1, 10175, '\p{indingbats}', "");
Expect(0, 10175, '\p{^indingbats}', "");
Expect(0, 10175, '\P{indingbats}', "");
Expect(1, 10175, '\P{^indingbats}', "");
Expect(0, 9983, '\p{indingbats}', "");
Expect(1, 9983, '\p{^indingbats}', "");
Expect(1, 9983, '\P{indingbats}', "");
Expect(0, 9983, '\P{^indingbats}', "");
Expect(1, 10175, '\p{__In	dingbats}', "");
Expect(0, 10175, '\p{^__In	dingbats}', "");
Expect(0, 10175, '\P{__In	dingbats}', "");
Expect(1, 10175, '\P{^__In	dingbats}', "");
Expect(0, 9983, '\p{__In	dingbats}', "");
Expect(1, 9983, '\p{^__In	dingbats}', "");
Expect(1, 9983, '\P{__In	dingbats}', "");
Expect(0, 9983, '\P{^__In	dingbats}', "");
Error('\p{ -Logical	orderException/a/}');
Error('\P{ -Logical	orderException/a/}');
Expect(1, 3652, '\p{logicalorderexception}', "");
Expect(0, 3652, '\p{^logicalorderexception}', "");
Expect(0, 3652, '\P{logicalorderexception}', "");
Expect(1, 3652, '\P{^logicalorderexception}', "");
Expect(0, 3647, '\p{logicalorderexception}', "");
Expect(1, 3647, '\p{^logicalorderexception}', "");
Expect(1, 3647, '\P{logicalorderexception}', "");
Expect(0, 3647, '\P{^logicalorderexception}', "");
Expect(1, 3652, '\p{_-LogicalORDER exception}', "");
Expect(0, 3652, '\p{^_-LogicalORDER exception}', "");
Expect(0, 3652, '\P{_-LogicalORDER exception}', "");
Expect(1, 3652, '\P{^_-LogicalORDER exception}', "");
Expect(0, 3647, '\p{_-LogicalORDER exception}', "");
Expect(1, 3647, '\p{^_-LogicalORDER exception}', "");
Expect(1, 3647, '\P{_-LogicalORDER exception}', "");
Expect(0, 3647, '\P{^_-LogicalORDER exception}', "");
Error('\p{_	IsLogical/a/ORDER exception}');
Error('\P{_	IsLogical/a/ORDER exception}');
Expect(1, 3652, '\p{islogicalorderexception}', "");
Expect(0, 3652, '\p{^islogicalorderexception}', "");
Expect(0, 3652, '\P{islogicalorderexception}', "");
Expect(1, 3652, '\P{^islogicalorderexception}', "");
Expect(0, 3647, '\p{islogicalorderexception}', "");
Expect(1, 3647, '\p{^islogicalorderexception}', "");
Expect(1, 3647, '\P{islogicalorderexception}', "");
Expect(0, 3647, '\P{^islogicalorderexception}', "");
Expect(1, 3652, '\p{--IS_logical-ORDER	Exception}', "");
Expect(0, 3652, '\p{^--IS_logical-ORDER	Exception}', "");
Expect(0, 3652, '\P{--IS_logical-ORDER	Exception}', "");
Expect(1, 3652, '\P{^--IS_logical-ORDER	Exception}', "");
Expect(0, 3647, '\p{--IS_logical-ORDER	Exception}', "");
Expect(1, 3647, '\p{^--IS_logical-ORDER	Exception}', "");
Expect(1, 3647, '\P{--IS_logical-ORDER	Exception}', "");
Expect(0, 3647, '\P{^--IS_logical-ORDER	Exception}', "");
Error('\p{ LOE:=}');
Error('\P{ LOE:=}');
Expect(1, 3652, '\p{loe}', "");
Expect(0, 3652, '\p{^loe}', "");
Expect(0, 3652, '\P{loe}', "");
Expect(1, 3652, '\P{^loe}', "");
Expect(0, 3647, '\p{loe}', "");
Expect(1, 3647, '\p{^loe}', "");
Expect(1, 3647, '\P{loe}', "");
Expect(0, 3647, '\P{^loe}', "");
Expect(1, 3652, '\p{LOE}', "");
Expect(0, 3652, '\p{^LOE}', "");
Expect(0, 3652, '\P{LOE}', "");
Expect(1, 3652, '\P{^LOE}', "");
Expect(0, 3647, '\p{LOE}', "");
Expect(1, 3647, '\p{^LOE}', "");
Expect(1, 3647, '\P{LOE}', "");
Expect(0, 3647, '\P{^LOE}', "");
Error('\p{ Is/a/LOE}');
Error('\P{ Is/a/LOE}');
Expect(1, 3652, '\p{isloe}', "");
Expect(0, 3652, '\p{^isloe}', "");
Expect(0, 3652, '\P{isloe}', "");
Expect(1, 3652, '\P{^isloe}', "");
Expect(0, 3647, '\p{isloe}', "");
Expect(1, 3647, '\p{^isloe}', "");
Expect(1, 3647, '\P{isloe}', "");
Expect(0, 3647, '\P{^isloe}', "");
Expect(1, 3652, '\p{__Is-LOE}', "");
Expect(0, 3652, '\p{^__Is-LOE}', "");
Expect(0, 3652, '\P{__Is-LOE}', "");
Expect(1, 3652, '\P{^__Is-LOE}', "");
Expect(0, 3647, '\p{__Is-LOE}', "");
Expect(1, 3647, '\p{^__Is-LOE}', "");
Expect(1, 3647, '\P{__Is-LOE}', "");
Expect(0, 3647, '\P{^__Is-LOE}', "");
Error('\p{ 	in_lycian:=}');
Error('\P{ 	in_lycian:=}');
Expect(1, 66207, '\p{inlycian}', "");
Expect(0, 66207, '\p{^inlycian}', "");
Expect(0, 66207, '\P{inlycian}', "");
Expect(1, 66207, '\P{^inlycian}', "");
Expect(0, 66175, '\p{inlycian}', "");
Expect(1, 66175, '\p{^inlycian}', "");
Expect(1, 66175, '\P{inlycian}', "");
Expect(0, 66175, '\P{^inlycian}', "");
Expect(1, 66207, '\p{ _in lycian}', "");
Expect(0, 66207, '\p{^ _in lycian}', "");
Expect(0, 66207, '\P{ _in lycian}', "");
Expect(1, 66207, '\P{^ _in lycian}', "");
Expect(0, 66175, '\p{ _in lycian}', "");
Expect(1, 66175, '\p{^ _in lycian}', "");
Expect(1, 66175, '\P{ _in lycian}', "");
Expect(0, 66175, '\P{^ _in lycian}', "");
Error('\p{:=Vai}');
Error('\P{:=Vai}');
Expect(1, 42539, '\p{vai}', "");
Expect(0, 42539, '\p{^vai}', "");
Expect(0, 42539, '\P{vai}', "");
Expect(1, 42539, '\P{^vai}', "");
Expect(0, 42239, '\p{vai}', "");
Expect(1, 42239, '\p{^vai}', "");
Expect(1, 42239, '\P{vai}', "");
Expect(0, 42239, '\P{^vai}', "");
Expect(1, 42539, '\p{_Vai}', "");
Expect(0, 42539, '\p{^_Vai}', "");
Expect(0, 42539, '\P{_Vai}', "");
Expect(1, 42539, '\P{^_Vai}', "");
Expect(0, 42239, '\p{_Vai}', "");
Expect(1, 42239, '\p{^_Vai}', "");
Expect(1, 42239, '\P{_Vai}', "");
Expect(0, 42239, '\P{^_Vai}', "");
Error('\p{ _IS Vai/a/}');
Error('\P{ _IS Vai/a/}');
Expect(1, 42539, '\p{isvai}', "");
Expect(0, 42539, '\p{^isvai}', "");
Expect(0, 42539, '\P{isvai}', "");
Expect(1, 42539, '\P{^isvai}', "");
Expect(0, 42239, '\p{isvai}', "");
Expect(1, 42239, '\p{^isvai}', "");
Expect(1, 42239, '\P{isvai}', "");
Expect(0, 42239, '\P{^isvai}', "");
Expect(1, 42539, '\p{-_Is	vai}', "");
Expect(0, 42539, '\p{^-_Is	vai}', "");
Expect(0, 42539, '\P{-_Is	vai}', "");
Expect(1, 42539, '\P{^-_Is	vai}', "");
Expect(0, 42239, '\p{-_Is	vai}', "");
Expect(1, 42239, '\p{^-_Is	vai}', "");
Expect(1, 42239, '\P{-_Is	vai}', "");
Expect(0, 42239, '\P{^-_Is	vai}', "");
Error('\p{/a/	_Vaii}');
Error('\P{/a/	_Vaii}');
Expect(1, 42539, '\p{vaii}', "");
Expect(0, 42539, '\p{^vaii}', "");
Expect(0, 42539, '\P{vaii}', "");
Expect(1, 42539, '\P{^vaii}', "");
Expect(0, 42239, '\p{vaii}', "");
Expect(1, 42239, '\p{^vaii}', "");
Expect(1, 42239, '\P{vaii}', "");
Expect(0, 42239, '\P{^vaii}', "");
Expect(1, 42539, '\p{_ Vaii}', "");
Expect(0, 42539, '\p{^_ Vaii}', "");
Expect(0, 42539, '\P{_ Vaii}', "");
Expect(1, 42539, '\P{^_ Vaii}', "");
Expect(0, 42239, '\p{_ Vaii}', "");
Expect(1, 42239, '\p{^_ Vaii}', "");
Expect(1, 42239, '\P{_ Vaii}', "");
Expect(0, 42239, '\P{^_ Vaii}', "");
Error('\p{ IS_Vaii/a/}');
Error('\P{ IS_Vaii/a/}');
Expect(1, 42539, '\p{isvaii}', "");
Expect(0, 42539, '\p{^isvaii}', "");
Expect(0, 42539, '\P{isvaii}', "");
Expect(1, 42539, '\P{^isvaii}', "");
Expect(0, 42239, '\p{isvaii}', "");
Expect(1, 42239, '\p{^isvaii}', "");
Expect(1, 42239, '\P{isvaii}', "");
Expect(0, 42239, '\P{^isvaii}', "");
Expect(1, 42539, '\p{ Is	vaii}', "");
Expect(0, 42539, '\p{^ Is	vaii}', "");
Expect(0, 42539, '\P{ Is	vaii}', "");
Expect(1, 42539, '\P{^ Is	vaii}', "");
Expect(0, 42239, '\p{ Is	vaii}', "");
Expect(1, 42239, '\p{^ Is	vaii}', "");
Expect(1, 42239, '\P{ Is	vaii}', "");
Expect(0, 42239, '\P{^ Is	vaii}', "");
Error('\p{_SPACING:=mark}');
Error('\P{_SPACING:=mark}');
Expect(1, 2307, '\p{spacingmark}', "");
Expect(0, 2307, '\p{^spacingmark}', "");
Expect(0, 2307, '\P{spacingmark}', "");
Expect(1, 2307, '\P{^spacingmark}', "");
Expect(0, 2306, '\p{spacingmark}', "");
Expect(1, 2306, '\p{^spacingmark}', "");
Expect(1, 2306, '\P{spacingmark}', "");
Expect(0, 2306, '\P{^spacingmark}', "");
Expect(1, 2307, '\p{_SPACING mark}', "");
Expect(0, 2307, '\p{^_SPACING mark}', "");
Expect(0, 2307, '\P{_SPACING mark}', "");
Expect(1, 2307, '\P{^_SPACING mark}', "");
Expect(0, 2306, '\p{_SPACING mark}', "");
Expect(1, 2306, '\p{^_SPACING mark}', "");
Expect(1, 2306, '\P{_SPACING mark}', "");
Expect(0, 2306, '\P{^_SPACING mark}', "");
Error('\p{	Is:=Spacing	MARK}');
Error('\P{	Is:=Spacing	MARK}');
Expect(1, 2307, '\p{isspacingmark}', "");
Expect(0, 2307, '\p{^isspacingmark}', "");
Expect(0, 2307, '\P{isspacingmark}', "");
Expect(1, 2307, '\P{^isspacingmark}', "");
Expect(0, 2306, '\p{isspacingmark}', "");
Expect(1, 2306, '\p{^isspacingmark}', "");
Expect(1, 2306, '\P{isspacingmark}', "");
Expect(0, 2306, '\P{^isspacingmark}', "");
Expect(1, 2307, '\p{	is	Spacingmark}', "");
Expect(0, 2307, '\p{^	is	Spacingmark}', "");
Expect(0, 2307, '\P{	is	Spacingmark}', "");
Expect(1, 2307, '\P{^	is	Spacingmark}', "");
Expect(0, 2306, '\p{	is	Spacingmark}', "");
Expect(1, 2306, '\p{^	is	Spacingmark}', "");
Expect(1, 2306, '\P{	is	Spacingmark}', "");
Expect(0, 2306, '\P{^	is	Spacingmark}', "");
Error('\p{ _mc:=}');
Error('\P{ _mc:=}');
Expect(1, 2307, '\p{mc}', "");
Expect(0, 2307, '\p{^mc}', "");
Expect(0, 2307, '\P{mc}', "");
Expect(1, 2307, '\P{^mc}', "");
Expect(0, 2306, '\p{mc}', "");
Expect(1, 2306, '\p{^mc}', "");
Expect(1, 2306, '\P{mc}', "");
Expect(0, 2306, '\P{^mc}', "");
Expect(1, 2307, '\p{	-mc}', "");
Expect(0, 2307, '\p{^	-mc}', "");
Expect(0, 2307, '\P{	-mc}', "");
Expect(1, 2307, '\P{^	-mc}', "");
Expect(0, 2306, '\p{	-mc}', "");
Expect(1, 2306, '\p{^	-mc}', "");
Expect(1, 2306, '\P{	-mc}', "");
Expect(0, 2306, '\P{^	-mc}', "");
Error('\p{ :=is mc}');
Error('\P{ :=is mc}');
Expect(1, 2307, '\p{ismc}', "");
Expect(0, 2307, '\p{^ismc}', "");
Expect(0, 2307, '\P{ismc}', "");
Expect(1, 2307, '\P{^ismc}', "");
Expect(0, 2306, '\p{ismc}', "");
Expect(1, 2306, '\p{^ismc}', "");
Expect(1, 2306, '\P{ismc}', "");
Expect(0, 2306, '\P{^ismc}', "");
Expect(1, 2307, '\p{ _Is_mc}', "");
Expect(0, 2307, '\p{^ _Is_mc}', "");
Expect(0, 2307, '\P{ _Is_mc}', "");
Expect(1, 2307, '\P{^ _Is_mc}', "");
Expect(0, 2306, '\p{ _Is_mc}', "");
Expect(1, 2306, '\p{^ _Is_mc}', "");
Expect(1, 2306, '\P{ _Is_mc}', "");
Expect(0, 2306, '\P{^ _Is_mc}', "");
Error('\p{:= 	Lower}');
Error('\P{:= 	Lower}');
Expect(1, 122, '\p{lower}', "");
Expect(0, 122, '\p{^lower}', "");
Expect(0, 122, '\P{lower}', "");
Expect(1, 122, '\P{^lower}', "");
Expect(0, 96, '\p{lower}', "");
Expect(1, 96, '\p{^lower}', "");
Expect(1, 96, '\P{lower}', "");
Expect(0, 96, '\P{^lower}', "");
Expect(1, 122, '\p{_	Lower}', "");
Expect(0, 122, '\p{^_	Lower}', "");
Expect(0, 122, '\P{_	Lower}', "");
Expect(1, 122, '\P{^_	Lower}', "");
Expect(0, 96, '\p{_	Lower}', "");
Expect(1, 96, '\p{^_	Lower}', "");
Expect(1, 96, '\P{_	Lower}', "");
Expect(0, 96, '\P{^_	Lower}', "");
Error('\p{/a/_ XPOSIXLOWER}');
Error('\P{/a/_ XPOSIXLOWER}');
Expect(1, 122, '\p{xposixlower}', "");
Expect(0, 122, '\p{^xposixlower}', "");
Expect(0, 122, '\P{xposixlower}', "");
Expect(1, 122, '\P{^xposixlower}', "");
Expect(0, 96, '\p{xposixlower}', "");
Expect(1, 96, '\p{^xposixlower}', "");
Expect(1, 96, '\P{xposixlower}', "");
Expect(0, 96, '\P{^xposixlower}', "");
Expect(1, 122, '\p{	_XPOSIXLOWER}', "");
Expect(0, 122, '\p{^	_XPOSIXLOWER}', "");
Expect(0, 122, '\P{	_XPOSIXLOWER}', "");
Expect(1, 122, '\P{^	_XPOSIXLOWER}', "");
Expect(0, 96, '\p{	_XPOSIXLOWER}', "");
Expect(1, 96, '\p{^	_XPOSIXLOWER}', "");
Expect(1, 96, '\P{	_XPOSIXLOWER}', "");
Expect(0, 96, '\P{^	_XPOSIXLOWER}', "");
Error('\p{:=	 Is-Lower}');
Error('\P{:=	 Is-Lower}');
Expect(1, 122, '\p{islower}', "");
Expect(0, 122, '\p{^islower}', "");
Expect(0, 122, '\P{islower}', "");
Expect(1, 122, '\P{^islower}', "");
Expect(0, 96, '\p{islower}', "");
Expect(1, 96, '\p{^islower}', "");
Expect(1, 96, '\P{islower}', "");
Expect(0, 96, '\P{^islower}', "");
Expect(1, 122, '\p{	-IS-Lower}', "");
Expect(0, 122, '\p{^	-IS-Lower}', "");
Expect(0, 122, '\P{	-IS-Lower}', "");
Expect(1, 122, '\P{^	-IS-Lower}', "");
Expect(0, 96, '\p{	-IS-Lower}', "");
Expect(1, 96, '\p{^	-IS-Lower}', "");
Expect(1, 96, '\P{	-IS-Lower}', "");
Expect(0, 96, '\P{^	-IS-Lower}', "");
Error('\p{/a/_ IsXPOSIXLOWER}');
Error('\P{/a/_ IsXPOSIXLOWER}');
Expect(1, 122, '\p{isxposixlower}', "");
Expect(0, 122, '\p{^isxposixlower}', "");
Expect(0, 122, '\P{isxposixlower}', "");
Expect(1, 122, '\P{^isxposixlower}', "");
Expect(0, 96, '\p{isxposixlower}', "");
Expect(1, 96, '\p{^isxposixlower}', "");
Expect(1, 96, '\P{isxposixlower}', "");
Expect(0, 96, '\P{^isxposixlower}', "");
Expect(1, 122, '\p{ 	IS XPOSIXLOWER}', "");
Expect(0, 122, '\p{^ 	IS XPOSIXLOWER}', "");
Expect(0, 122, '\P{ 	IS XPOSIXLOWER}', "");
Expect(1, 122, '\P{^ 	IS XPOSIXLOWER}', "");
Expect(0, 96, '\p{ 	IS XPOSIXLOWER}', "");
Expect(1, 96, '\p{^ 	IS XPOSIXLOWER}', "");
Expect(1, 96, '\P{ 	IS XPOSIXLOWER}', "");
Expect(0, 96, '\P{^ 	IS XPOSIXLOWER}', "");
Error('\p{:=__Lowercase}');
Error('\P{:=__Lowercase}');
Expect(1, 122, '\p{lowercase}', "");
Expect(0, 122, '\p{^lowercase}', "");
Expect(0, 122, '\P{lowercase}', "");
Expect(1, 122, '\P{^lowercase}', "");
Expect(0, 96, '\p{lowercase}', "");
Expect(1, 96, '\p{^lowercase}', "");
Expect(1, 96, '\P{lowercase}', "");
Expect(0, 96, '\P{^lowercase}', "");
Expect(1, 122, '\p{		lowercase}', "");
Expect(0, 122, '\p{^		lowercase}', "");
Expect(0, 122, '\P{		lowercase}', "");
Expect(1, 122, '\P{^		lowercase}', "");
Expect(0, 96, '\p{		lowercase}', "");
Expect(1, 96, '\p{^		lowercase}', "");
Expect(1, 96, '\P{		lowercase}', "");
Expect(0, 96, '\P{^		lowercase}', "");
Error('\p{_	ISLOWERCASE/a/}');
Error('\P{_	ISLOWERCASE/a/}');
Expect(1, 122, '\p{islowercase}', "");
Expect(0, 122, '\p{^islowercase}', "");
Expect(0, 122, '\P{islowercase}', "");
Expect(1, 122, '\P{^islowercase}', "");
Expect(0, 96, '\p{islowercase}', "");
Expect(1, 96, '\p{^islowercase}', "");
Expect(1, 96, '\P{islowercase}', "");
Expect(0, 96, '\P{^islowercase}', "");
Expect(1, 122, '\p{-ISLOWERCASE}', "");
Expect(0, 122, '\p{^-ISLOWERCASE}', "");
Expect(0, 122, '\P{-ISLOWERCASE}', "");
Expect(1, 122, '\P{^-ISLOWERCASE}', "");
Expect(0, 96, '\p{-ISLOWERCASE}', "");
Expect(1, 96, '\p{^-ISLOWERCASE}', "");
Expect(1, 96, '\P{-ISLOWERCASE}', "");
Expect(0, 96, '\P{^-ISLOWERCASE}', "");
Error('\p{	/a/Ethiopic_ExtendedA}');
Error('\P{	/a/Ethiopic_ExtendedA}');
Expect(1, 43823, '\p{ethiopicextendeda}', "");
Expect(0, 43823, '\p{^ethiopicextendeda}', "");
Expect(0, 43823, '\P{ethiopicextendeda}', "");
Expect(1, 43823, '\P{^ethiopicextendeda}', "");
Expect(0, 43775, '\p{ethiopicextendeda}', "");
Expect(1, 43775, '\p{^ethiopicextendeda}', "");
Expect(1, 43775, '\P{ethiopicextendeda}', "");
Expect(0, 43775, '\P{^ethiopicextendeda}', "");
Expect(1, 43823, '\p{ -ETHIOPIC	Extended a}', "");
Expect(0, 43823, '\p{^ -ETHIOPIC	Extended a}', "");
Expect(0, 43823, '\P{ -ETHIOPIC	Extended a}', "");
Expect(1, 43823, '\P{^ -ETHIOPIC	Extended a}', "");
Expect(0, 43775, '\p{ -ETHIOPIC	Extended a}', "");
Expect(1, 43775, '\p{^ -ETHIOPIC	Extended a}', "");
Expect(1, 43775, '\P{ -ETHIOPIC	Extended a}', "");
Expect(0, 43775, '\P{^ -ETHIOPIC	Extended a}', "");
Error('\p{ _is/a/ETHIOPIC_extendedA}');
Error('\P{ _is/a/ETHIOPIC_extendedA}');
Expect(1, 43823, '\p{isethiopicextendeda}', "");
Expect(0, 43823, '\p{^isethiopicextendeda}', "");
Expect(0, 43823, '\P{isethiopicextendeda}', "");
Expect(1, 43823, '\P{^isethiopicextendeda}', "");
Expect(0, 43775, '\p{isethiopicextendeda}', "");
Expect(1, 43775, '\p{^isethiopicextendeda}', "");
Expect(1, 43775, '\P{isethiopicextendeda}', "");
Expect(0, 43775, '\P{^isethiopicextendeda}', "");
Expect(1, 43823, '\p{		is_ethiopicEXTENDEDa}', "");
Expect(0, 43823, '\p{^		is_ethiopicEXTENDEDa}', "");
Expect(0, 43823, '\P{		is_ethiopicEXTENDEDa}', "");
Expect(1, 43823, '\P{^		is_ethiopicEXTENDEDa}', "");
Expect(0, 43775, '\p{		is_ethiopicEXTENDEDa}', "");
Expect(1, 43775, '\p{^		is_ethiopicEXTENDEDa}', "");
Expect(1, 43775, '\P{		is_ethiopicEXTENDEDa}', "");
Expect(0, 43775, '\P{^		is_ethiopicEXTENDEDa}', "");
Error('\p{	:=in Ethiopic EXTENDEDa}');
Error('\P{	:=in Ethiopic EXTENDEDa}');
Expect(1, 43823, '\p{inethiopicextendeda}', "");
Expect(0, 43823, '\p{^inethiopicextendeda}', "");
Expect(0, 43823, '\P{inethiopicextendeda}', "");
Expect(1, 43823, '\P{^inethiopicextendeda}', "");
Expect(0, 43775, '\p{inethiopicextendeda}', "");
Expect(1, 43775, '\p{^inethiopicextendeda}', "");
Expect(1, 43775, '\P{inethiopicextendeda}', "");
Expect(0, 43775, '\P{^inethiopicextendeda}', "");
Expect(1, 43823, '\p{	_IN EthiopicExtended-A}', "");
Expect(0, 43823, '\p{^	_IN EthiopicExtended-A}', "");
Expect(0, 43823, '\P{	_IN EthiopicExtended-A}', "");
Expect(1, 43823, '\P{^	_IN EthiopicExtended-A}', "");
Expect(0, 43775, '\p{	_IN EthiopicExtended-A}', "");
Expect(1, 43775, '\p{^	_IN EthiopicExtended-A}', "");
Expect(1, 43775, '\P{	_IN EthiopicExtended-A}', "");
Expect(0, 43775, '\P{^	_IN EthiopicExtended-A}', "");
Error('\p{Expands_On_NFKD}');
Error('\P{Expands_On_NFKD}');
Error('\p{Is_Expands_On_NFKD}');
Error('\P{Is_Expands_On_NFKD}');
Error('\p{XO_NFKD}');
Error('\P{XO_NFKD}');
Error('\p{Is_XO_NFKD}');
Error('\P{Is_XO_NFKD}');
Error('\p{:=-_CLOSE-Punctuation}');
Error('\P{:=-_CLOSE-Punctuation}');
Expect(1, 41, '\p{closepunctuation}', "");
Expect(0, 41, '\p{^closepunctuation}', "");
Expect(0, 41, '\P{closepunctuation}', "");
Expect(1, 41, '\P{^closepunctuation}', "");
Expect(0, 40, '\p{closepunctuation}', "");
Expect(1, 40, '\p{^closepunctuation}', "");
Expect(1, 40, '\P{closepunctuation}', "");
Expect(0, 40, '\P{^closepunctuation}', "");
Expect(1, 41, '\p{ 	CLOSE	PUNCTUATION}', "");
Expect(0, 41, '\p{^ 	CLOSE	PUNCTUATION}', "");
Expect(0, 41, '\P{ 	CLOSE	PUNCTUATION}', "");
Expect(1, 41, '\P{^ 	CLOSE	PUNCTUATION}', "");
Expect(0, 40, '\p{ 	CLOSE	PUNCTUATION}', "");
Expect(1, 40, '\p{^ 	CLOSE	PUNCTUATION}', "");
Expect(1, 40, '\P{ 	CLOSE	PUNCTUATION}', "");
Expect(0, 40, '\P{^ 	CLOSE	PUNCTUATION}', "");
Error('\p{-	Is-CLOSEpunctuation/a/}');
Error('\P{-	Is-CLOSEpunctuation/a/}');
Expect(1, 41, '\p{isclosepunctuation}', "");
Expect(0, 41, '\p{^isclosepunctuation}', "");
Expect(0, 41, '\P{isclosepunctuation}', "");
Expect(1, 41, '\P{^isclosepunctuation}', "");
Expect(0, 40, '\p{isclosepunctuation}', "");
Expect(1, 40, '\p{^isclosepunctuation}', "");
Expect(1, 40, '\P{isclosepunctuation}', "");
Expect(0, 40, '\P{^isclosepunctuation}', "");
Expect(1, 41, '\p{_ Is-Close PUNCTUATION}', "");
Expect(0, 41, '\p{^_ Is-Close PUNCTUATION}', "");
Expect(0, 41, '\P{_ Is-Close PUNCTUATION}', "");
Expect(1, 41, '\P{^_ Is-Close PUNCTUATION}', "");
Expect(0, 40, '\p{_ Is-Close PUNCTUATION}', "");
Expect(1, 40, '\p{^_ Is-Close PUNCTUATION}', "");
Expect(1, 40, '\P{_ Is-Close PUNCTUATION}', "");
Expect(0, 40, '\P{^_ Is-Close PUNCTUATION}', "");
Error('\p{/a/_Pe}');
Error('\P{/a/_Pe}');
Expect(1, 41, '\p{pe}', "");
Expect(0, 41, '\p{^pe}', "");
Expect(0, 41, '\P{pe}', "");
Expect(1, 41, '\P{^pe}', "");
Expect(0, 40, '\p{pe}', "");
Expect(1, 40, '\p{^pe}', "");
Expect(1, 40, '\P{pe}', "");
Expect(0, 40, '\P{^pe}', "");
Expect(1, 41, '\p{-Pe}', "");
Expect(0, 41, '\p{^-Pe}', "");
Expect(0, 41, '\P{-Pe}', "");
Expect(1, 41, '\P{^-Pe}', "");
Expect(0, 40, '\p{-Pe}', "");
Expect(1, 40, '\p{^-Pe}', "");
Expect(1, 40, '\P{-Pe}', "");
Expect(0, 40, '\P{^-Pe}', "");
Error('\p{	-Is/a/Pe}');
Error('\P{	-Is/a/Pe}');
Expect(1, 41, '\p{ispe}', "");
Expect(0, 41, '\p{^ispe}', "");
Expect(0, 41, '\P{ispe}', "");
Expect(1, 41, '\P{^ispe}', "");
Expect(0, 40, '\p{ispe}', "");
Expect(1, 40, '\p{^ispe}', "");
Expect(1, 40, '\P{ispe}', "");
Expect(0, 40, '\P{^ispe}', "");
Expect(1, 41, '\p{-ispe}', "");
Expect(0, 41, '\p{^-ispe}', "");
Expect(0, 41, '\P{-ispe}', "");
Expect(1, 41, '\P{^-ispe}', "");
Expect(0, 40, '\p{-ispe}', "");
Expect(1, 40, '\p{^-ispe}', "");
Expect(1, 40, '\P{-ispe}', "");
Expect(0, 40, '\P{^-ispe}', "");
Error('\p{Expands_On_NFKC}');
Error('\P{Expands_On_NFKC}');
Error('\p{Is_Expands_On_NFKC}');
Error('\P{Is_Expands_On_NFKC}');
Error('\p{XO_NFKC}');
Error('\P{XO_NFKC}');
Error('\p{Is_XO_NFKC}');
Error('\P{Is_XO_NFKC}');
Error('\p{  Unknown:=}');
Error('\P{  Unknown:=}');
Expect(1, 889, '\p{unknown}', "");
Expect(0, 889, '\p{^unknown}', "");
Expect(0, 889, '\P{unknown}', "");
Expect(1, 889, '\P{^unknown}', "");
Expect(0, 887, '\p{unknown}', "");
Expect(1, 887, '\p{^unknown}', "");
Expect(1, 887, '\P{unknown}', "");
Expect(0, 887, '\P{^unknown}', "");
Expect(1, 889, '\p{__UNKNOWN}', "");
Expect(0, 889, '\p{^__UNKNOWN}', "");
Expect(0, 889, '\P{__UNKNOWN}', "");
Expect(1, 889, '\P{^__UNKNOWN}', "");
Expect(0, 887, '\p{__UNKNOWN}', "");
Expect(1, 887, '\p{^__UNKNOWN}', "");
Expect(1, 887, '\P{__UNKNOWN}', "");
Expect(0, 887, '\P{^__UNKNOWN}', "");
Error('\p{	Is	Unknown:=}');
Error('\P{	Is	Unknown:=}');
Expect(1, 889, '\p{isunknown}', "");
Expect(0, 889, '\p{^isunknown}', "");
Expect(0, 889, '\P{isunknown}', "");
Expect(1, 889, '\P{^isunknown}', "");
Expect(0, 887, '\p{isunknown}', "");
Expect(1, 887, '\p{^isunknown}', "");
Expect(1, 887, '\P{isunknown}', "");
Expect(0, 887, '\P{^isunknown}', "");
Expect(1, 889, '\p{-	is Unknown}', "");
Expect(0, 889, '\p{^-	is Unknown}', "");
Expect(0, 889, '\P{-	is Unknown}', "");
Expect(1, 889, '\P{^-	is Unknown}', "");
Expect(0, 887, '\p{-	is Unknown}', "");
Expect(1, 887, '\p{^-	is Unknown}', "");
Expect(1, 887, '\P{-	is Unknown}', "");
Expect(0, 887, '\P{^-	is Unknown}', "");
Error('\p{/a/_zzzz}');
Error('\P{/a/_zzzz}');
Expect(1, 889, '\p{zzzz}', "");
Expect(0, 889, '\p{^zzzz}', "");
Expect(0, 889, '\P{zzzz}', "");
Expect(1, 889, '\P{^zzzz}', "");
Expect(0, 887, '\p{zzzz}', "");
Expect(1, 887, '\p{^zzzz}', "");
Expect(1, 887, '\P{zzzz}', "");
Expect(0, 887, '\P{^zzzz}', "");
Expect(1, 889, '\p{	 ZZZZ}', "");
Expect(0, 889, '\p{^	 ZZZZ}', "");
Expect(0, 889, '\P{	 ZZZZ}', "");
Expect(1, 889, '\P{^	 ZZZZ}', "");
Expect(0, 887, '\p{	 ZZZZ}', "");
Expect(1, 887, '\p{^	 ZZZZ}', "");
Expect(1, 887, '\P{	 ZZZZ}', "");
Expect(0, 887, '\P{^	 ZZZZ}', "");
Error('\p{_	IS Zzzz/a/}');
Error('\P{_	IS Zzzz/a/}');
Expect(1, 889, '\p{iszzzz}', "");
Expect(0, 889, '\p{^iszzzz}', "");
Expect(0, 889, '\P{iszzzz}', "");
Expect(1, 889, '\P{^iszzzz}', "");
Expect(0, 887, '\p{iszzzz}', "");
Expect(1, 887, '\p{^iszzzz}', "");
Expect(1, 887, '\P{iszzzz}', "");
Expect(0, 887, '\P{^iszzzz}', "");
Expect(1, 889, '\p{	_is-Zzzz}', "");
Expect(0, 889, '\p{^	_is-Zzzz}', "");
Expect(0, 889, '\P{	_is-Zzzz}', "");
Expect(1, 889, '\P{^	_is-Zzzz}', "");
Expect(0, 887, '\p{	_is-Zzzz}', "");
Expect(1, 887, '\p{^	_is-Zzzz}', "");
Expect(1, 887, '\P{	_is-Zzzz}', "");
Expect(0, 887, '\P{^	_is-Zzzz}', "");
Error('\p{/a/In Brahmi}');
Error('\P{/a/In Brahmi}');
Expect(1, 69759, '\p{inbrahmi}', "");
Expect(0, 69759, '\p{^inbrahmi}', "");
Expect(0, 69759, '\P{inbrahmi}', "");
Expect(1, 69759, '\P{^inbrahmi}', "");
Expect(0, 69631, '\p{inbrahmi}', "");
Expect(1, 69631, '\p{^inbrahmi}', "");
Expect(1, 69631, '\P{inbrahmi}', "");
Expect(0, 69631, '\P{^inbrahmi}', "");
Expect(1, 69759, '\p{ 	in Brahmi}', "");
Expect(0, 69759, '\p{^ 	in Brahmi}', "");
Expect(0, 69759, '\P{ 	in Brahmi}', "");
Expect(1, 69759, '\P{^ 	in Brahmi}', "");
Expect(0, 69631, '\p{ 	in Brahmi}', "");
Expect(1, 69631, '\p{^ 	in Brahmi}', "");
Expect(1, 69631, '\P{ 	in Brahmi}', "");
Expect(0, 69631, '\P{^ 	in Brahmi}', "");
Error('\p{/a/_	LinearB-ideograms}');
Error('\P{/a/_	LinearB-ideograms}');
Expect(1, 65791, '\p{linearbideograms}', "");
Expect(0, 65791, '\p{^linearbideograms}', "");
Expect(0, 65791, '\P{linearbideograms}', "");
Expect(1, 65791, '\P{^linearbideograms}', "");
Expect(0, 65663, '\p{linearbideograms}', "");
Expect(1, 65663, '\p{^linearbideograms}', "");
Expect(1, 65663, '\P{linearbideograms}', "");
Expect(0, 65663, '\P{^linearbideograms}', "");
Expect(1, 65791, '\p{ linearbIdeograms}', "");
Expect(0, 65791, '\p{^ linearbIdeograms}', "");
Expect(0, 65791, '\P{ linearbIdeograms}', "");
Expect(1, 65791, '\P{^ linearbIdeograms}', "");
Expect(0, 65663, '\p{ linearbIdeograms}', "");
Expect(1, 65663, '\p{^ linearbIdeograms}', "");
Expect(1, 65663, '\P{ linearbIdeograms}', "");
Expect(0, 65663, '\P{^ linearbIdeograms}', "");
Error('\p{_:=Is	LINEAR-B_Ideograms}');
Error('\P{_:=Is	LINEAR-B_Ideograms}');
Expect(1, 65791, '\p{islinearbideograms}', "");
Expect(0, 65791, '\p{^islinearbideograms}', "");
Expect(0, 65791, '\P{islinearbideograms}', "");
Expect(1, 65791, '\P{^islinearbideograms}', "");
Expect(0, 65663, '\p{islinearbideograms}', "");
Expect(1, 65663, '\p{^islinearbideograms}', "");
Expect(1, 65663, '\P{islinearbideograms}', "");
Expect(0, 65663, '\P{^islinearbideograms}', "");
Expect(1, 65791, '\p{_-Is_Linear BIDEOGRAMS}', "");
Expect(0, 65791, '\p{^_-Is_Linear BIDEOGRAMS}', "");
Expect(0, 65791, '\P{_-Is_Linear BIDEOGRAMS}', "");
Expect(1, 65791, '\P{^_-Is_Linear BIDEOGRAMS}', "");
Expect(0, 65663, '\p{_-Is_Linear BIDEOGRAMS}', "");
Expect(1, 65663, '\p{^_-Is_Linear BIDEOGRAMS}', "");
Expect(1, 65663, '\P{_-Is_Linear BIDEOGRAMS}', "");
Expect(0, 65663, '\P{^_-Is_Linear BIDEOGRAMS}', "");
Error('\p{/a/ -in linearBIDEOGRAMS}');
Error('\P{/a/ -in linearBIDEOGRAMS}');
Expect(1, 65791, '\p{inlinearbideograms}', "");
Expect(0, 65791, '\p{^inlinearbideograms}', "");
Expect(0, 65791, '\P{inlinearbideograms}', "");
Expect(1, 65791, '\P{^inlinearbideograms}', "");
Expect(0, 65663, '\p{inlinearbideograms}', "");
Expect(1, 65663, '\p{^inlinearbideograms}', "");
Expect(1, 65663, '\P{inlinearbideograms}', "");
Expect(0, 65663, '\P{^inlinearbideograms}', "");
Expect(1, 65791, '\p{  In-Linear_b_Ideograms}', "");
Expect(0, 65791, '\p{^  In-Linear_b_Ideograms}', "");
Expect(0, 65791, '\P{  In-Linear_b_Ideograms}', "");
Expect(1, 65791, '\P{^  In-Linear_b_Ideograms}', "");
Expect(0, 65663, '\p{  In-Linear_b_Ideograms}', "");
Expect(1, 65663, '\p{^  In-Linear_b_Ideograms}', "");
Expect(1, 65663, '\P{  In-Linear_b_Ideograms}', "");
Expect(0, 65663, '\P{^  In-Linear_b_Ideograms}', "");
Error('\p{_:=Enclosed_ALPHANUMERICS}');
Error('\P{_:=Enclosed_ALPHANUMERICS}');
Expect(1, 9471, '\p{enclosedalphanumerics}', "");
Expect(0, 9471, '\p{^enclosedalphanumerics}', "");
Expect(0, 9471, '\P{enclosedalphanumerics}', "");
Expect(1, 9471, '\P{^enclosedalphanumerics}', "");
Expect(0, 9311, '\p{enclosedalphanumerics}', "");
Expect(1, 9311, '\p{^enclosedalphanumerics}', "");
Expect(1, 9311, '\P{enclosedalphanumerics}', "");
Expect(0, 9311, '\P{^enclosedalphanumerics}', "");
Expect(1, 9471, '\p{__Enclosed	Alphanumerics}', "");
Expect(0, 9471, '\p{^__Enclosed	Alphanumerics}', "");
Expect(0, 9471, '\P{__Enclosed	Alphanumerics}', "");
Expect(1, 9471, '\P{^__Enclosed	Alphanumerics}', "");
Expect(0, 9311, '\p{__Enclosed	Alphanumerics}', "");
Expect(1, 9311, '\p{^__Enclosed	Alphanumerics}', "");
Expect(1, 9311, '\P{__Enclosed	Alphanumerics}', "");
Expect(0, 9311, '\P{^__Enclosed	Alphanumerics}', "");
Error('\p{/a/ 	IS_enclosed_ALPHANUMERICS}');
Error('\P{/a/ 	IS_enclosed_ALPHANUMERICS}');
Expect(1, 9471, '\p{isenclosedalphanumerics}', "");
Expect(0, 9471, '\p{^isenclosedalphanumerics}', "");
Expect(0, 9471, '\P{isenclosedalphanumerics}', "");
Expect(1, 9471, '\P{^isenclosedalphanumerics}', "");
Expect(0, 9311, '\p{isenclosedalphanumerics}', "");
Expect(1, 9311, '\p{^isenclosedalphanumerics}', "");
Expect(1, 9311, '\P{isenclosedalphanumerics}', "");
Expect(0, 9311, '\P{^isenclosedalphanumerics}', "");
Expect(1, 9471, '\p{	-Is ENCLOSED ALPHANUMERICS}', "");
Expect(0, 9471, '\p{^	-Is ENCLOSED ALPHANUMERICS}', "");
Expect(0, 9471, '\P{	-Is ENCLOSED ALPHANUMERICS}', "");
Expect(1, 9471, '\P{^	-Is ENCLOSED ALPHANUMERICS}', "");
Expect(0, 9311, '\p{	-Is ENCLOSED ALPHANUMERICS}', "");
Expect(1, 9311, '\p{^	-Is ENCLOSED ALPHANUMERICS}', "");
Expect(1, 9311, '\P{	-Is ENCLOSED ALPHANUMERICS}', "");
Expect(0, 9311, '\P{^	-Is ENCLOSED ALPHANUMERICS}', "");
Error('\p{ :=In-EnclosedAlphanumerics}');
Error('\P{ :=In-EnclosedAlphanumerics}');
Expect(1, 9471, '\p{inenclosedalphanumerics}', "");
Expect(0, 9471, '\p{^inenclosedalphanumerics}', "");
Expect(0, 9471, '\P{inenclosedalphanumerics}', "");
Expect(1, 9471, '\P{^inenclosedalphanumerics}', "");
Expect(0, 9311, '\p{inenclosedalphanumerics}', "");
Expect(1, 9311, '\p{^inenclosedalphanumerics}', "");
Expect(1, 9311, '\P{inenclosedalphanumerics}', "");
Expect(0, 9311, '\P{^inenclosedalphanumerics}', "");
Expect(1, 9471, '\p{--In_enclosedALPHANUMERICS}', "");
Expect(0, 9471, '\p{^--In_enclosedALPHANUMERICS}', "");
Expect(0, 9471, '\P{--In_enclosedALPHANUMERICS}', "");
Expect(1, 9471, '\P{^--In_enclosedALPHANUMERICS}', "");
Expect(0, 9311, '\p{--In_enclosedALPHANUMERICS}', "");
Expect(1, 9311, '\p{^--In_enclosedALPHANUMERICS}', "");
Expect(1, 9311, '\P{--In_enclosedALPHANUMERICS}', "");
Expect(0, 9311, '\P{^--In_enclosedALPHANUMERICS}', "");
Error('\p{--Meetei Mayek/a/}');
Error('\P{--Meetei Mayek/a/}');
Expect(1, 44013, '\p{meeteimayek}', "");
Expect(0, 44013, '\p{^meeteimayek}', "");
Expect(0, 44013, '\P{meeteimayek}', "");
Expect(1, 44013, '\P{^meeteimayek}', "");
Expect(0, 43967, '\p{meeteimayek}', "");
Expect(1, 43967, '\p{^meeteimayek}', "");
Expect(1, 43967, '\P{meeteimayek}', "");
Expect(0, 43967, '\P{^meeteimayek}', "");
Expect(1, 44013, '\p{-Meetei Mayek}', "");
Expect(0, 44013, '\p{^-Meetei Mayek}', "");
Expect(0, 44013, '\P{-Meetei Mayek}', "");
Expect(1, 44013, '\P{^-Meetei Mayek}', "");
Expect(0, 43967, '\p{-Meetei Mayek}', "");
Expect(1, 43967, '\p{^-Meetei Mayek}', "");
Expect(1, 43967, '\P{-Meetei Mayek}', "");
Expect(0, 43967, '\P{^-Meetei Mayek}', "");
Error('\p{/a/_	Is MeeteiMayek}');
Error('\P{/a/_	Is MeeteiMayek}');
Expect(1, 44013, '\p{ismeeteimayek}', "");
Expect(0, 44013, '\p{^ismeeteimayek}', "");
Expect(0, 44013, '\P{ismeeteimayek}', "");
Expect(1, 44013, '\P{^ismeeteimayek}', "");
Expect(0, 43967, '\p{ismeeteimayek}', "");
Expect(1, 43967, '\p{^ismeeteimayek}', "");
Expect(1, 43967, '\P{ismeeteimayek}', "");
Expect(0, 43967, '\P{^ismeeteimayek}', "");
Expect(1, 44013, '\p{-Is_MEETEI	Mayek}', "");
Expect(0, 44013, '\p{^-Is_MEETEI	Mayek}', "");
Expect(0, 44013, '\P{-Is_MEETEI	Mayek}', "");
Expect(1, 44013, '\P{^-Is_MEETEI	Mayek}', "");
Expect(0, 43967, '\p{-Is_MEETEI	Mayek}', "");
Expect(1, 43967, '\p{^-Is_MEETEI	Mayek}', "");
Expect(1, 43967, '\P{-Is_MEETEI	Mayek}', "");
Expect(0, 43967, '\P{^-Is_MEETEI	Mayek}', "");
Error('\p{:= mtei}');
Error('\P{:= mtei}');
Expect(1, 44013, '\p{mtei}', "");
Expect(0, 44013, '\p{^mtei}', "");
Expect(0, 44013, '\P{mtei}', "");
Expect(1, 44013, '\P{^mtei}', "");
Expect(0, 43967, '\p{mtei}', "");
Expect(1, 43967, '\p{^mtei}', "");
Expect(1, 43967, '\P{mtei}', "");
Expect(0, 43967, '\P{^mtei}', "");
Expect(1, 44013, '\p{_MTEI}', "");
Expect(0, 44013, '\p{^_MTEI}', "");
Expect(0, 44013, '\P{_MTEI}', "");
Expect(1, 44013, '\P{^_MTEI}', "");
Expect(0, 43967, '\p{_MTEI}', "");
Expect(1, 43967, '\p{^_MTEI}', "");
Expect(1, 43967, '\P{_MTEI}', "");
Expect(0, 43967, '\P{^_MTEI}', "");
Error('\p{/a/-_Is Mtei}');
Error('\P{/a/-_Is Mtei}');
Expect(1, 44013, '\p{ismtei}', "");
Expect(0, 44013, '\p{^ismtei}', "");
Expect(0, 44013, '\P{ismtei}', "");
Expect(1, 44013, '\P{^ismtei}', "");
Expect(0, 43967, '\p{ismtei}', "");
Expect(1, 43967, '\p{^ismtei}', "");
Expect(1, 43967, '\P{ismtei}', "");
Expect(0, 43967, '\P{^ismtei}', "");
Expect(1, 44013, '\p{__Is mtei}', "");
Expect(0, 44013, '\p{^__Is mtei}', "");
Expect(0, 44013, '\P{__Is mtei}', "");
Expect(1, 44013, '\P{^__Is mtei}', "");
Expect(0, 43967, '\p{__Is mtei}', "");
Expect(1, 43967, '\p{^__Is mtei}', "");
Expect(1, 43967, '\P{__Is mtei}', "");
Expect(0, 43967, '\P{^__Is mtei}', "");
Error('\p{:=__EXTENDER}');
Error('\P{:=__EXTENDER}');
Expect(1, 183, '\p{extender}', "");
Expect(0, 183, '\p{^extender}', "");
Expect(0, 183, '\P{extender}', "");
Expect(1, 183, '\P{^extender}', "");
Expect(0, 182, '\p{extender}', "");
Expect(1, 182, '\p{^extender}', "");
Expect(1, 182, '\P{extender}', "");
Expect(0, 182, '\P{^extender}', "");
Expect(1, 183, '\p{	Extender}', "");
Expect(0, 183, '\p{^	Extender}', "");
Expect(0, 183, '\P{	Extender}', "");
Expect(1, 183, '\P{^	Extender}', "");
Expect(0, 182, '\p{	Extender}', "");
Expect(1, 182, '\p{^	Extender}', "");
Expect(1, 182, '\P{	Extender}', "");
Expect(0, 182, '\P{^	Extender}', "");
Error('\p{--Is	extender/a/}');
Error('\P{--Is	extender/a/}');
Expect(1, 183, '\p{isextender}', "");
Expect(0, 183, '\p{^isextender}', "");
Expect(0, 183, '\P{isextender}', "");
Expect(1, 183, '\P{^isextender}', "");
Expect(0, 182, '\p{isextender}', "");
Expect(1, 182, '\p{^isextender}', "");
Expect(1, 182, '\P{isextender}', "");
Expect(0, 182, '\P{^isextender}', "");
Expect(1, 183, '\p{	IsExtender}', "");
Expect(0, 183, '\p{^	IsExtender}', "");
Expect(0, 183, '\P{	IsExtender}', "");
Expect(1, 183, '\P{^	IsExtender}', "");
Expect(0, 182, '\p{	IsExtender}', "");
Expect(1, 182, '\p{^	IsExtender}', "");
Expect(1, 182, '\P{	IsExtender}', "");
Expect(0, 182, '\P{^	IsExtender}', "");
Error('\p{:=_ Ext}');
Error('\P{:=_ Ext}');
Expect(1, 183, '\p{ext}', "");
Expect(0, 183, '\p{^ext}', "");
Expect(0, 183, '\P{ext}', "");
Expect(1, 183, '\P{^ext}', "");
Expect(0, 182, '\p{ext}', "");
Expect(1, 182, '\p{^ext}', "");
Expect(1, 182, '\P{ext}', "");
Expect(0, 182, '\P{^ext}', "");
Expect(1, 183, '\p{-_Ext}', "");
Expect(0, 183, '\p{^-_Ext}', "");
Expect(0, 183, '\P{-_Ext}', "");
Expect(1, 183, '\P{^-_Ext}', "");
Expect(0, 182, '\p{-_Ext}', "");
Expect(1, 182, '\p{^-_Ext}', "");
Expect(1, 182, '\P{-_Ext}', "");
Expect(0, 182, '\P{^-_Ext}', "");
Error('\p{ _Is-Ext/a/}');
Error('\P{ _Is-Ext/a/}');
Expect(1, 183, '\p{isext}', "");
Expect(0, 183, '\p{^isext}', "");
Expect(0, 183, '\P{isext}', "");
Expect(1, 183, '\P{^isext}', "");
Expect(0, 182, '\p{isext}', "");
Expect(1, 182, '\p{^isext}', "");
Expect(1, 182, '\P{isext}', "");
Expect(0, 182, '\P{^isext}', "");
Expect(1, 183, '\p{_	is-Ext}', "");
Expect(0, 183, '\p{^_	is-Ext}', "");
Expect(0, 183, '\P{_	is-Ext}', "");
Expect(1, 183, '\P{^_	is-Ext}', "");
Expect(0, 182, '\p{_	is-Ext}', "");
Expect(1, 182, '\p{^_	is-Ext}', "");
Expect(1, 182, '\P{_	is-Ext}', "");
Expect(0, 182, '\P{^_	is-Ext}', "");
Error('\p{ /a/COMPOSITION	Exclusion}');
Error('\P{ /a/COMPOSITION	Exclusion}');
Expect(1, 2399, '\p{compositionexclusion}', "");
Expect(0, 2399, '\p{^compositionexclusion}', "");
Expect(0, 2399, '\P{compositionexclusion}', "");
Expect(1, 2399, '\P{^compositionexclusion}', "");
Expect(0, 2391, '\p{compositionexclusion}', "");
Expect(1, 2391, '\p{^compositionexclusion}', "");
Expect(1, 2391, '\P{compositionexclusion}', "");
Expect(0, 2391, '\P{^compositionexclusion}', "");
Expect(1, 2399, '\p{_-composition-exclusion}', "");
Expect(0, 2399, '\p{^_-composition-exclusion}', "");
Expect(0, 2399, '\P{_-composition-exclusion}', "");
Expect(1, 2399, '\P{^_-composition-exclusion}', "");
Expect(0, 2391, '\p{_-composition-exclusion}', "");
Expect(1, 2391, '\p{^_-composition-exclusion}', "");
Expect(1, 2391, '\P{_-composition-exclusion}', "");
Expect(0, 2391, '\P{^_-composition-exclusion}', "");
Error('\p{_:=IS-composition	Exclusion}');
Error('\P{_:=IS-composition	Exclusion}');
Expect(1, 2399, '\p{iscompositionexclusion}', "");
Expect(0, 2399, '\p{^iscompositionexclusion}', "");
Expect(0, 2399, '\P{iscompositionexclusion}', "");
Expect(1, 2399, '\P{^iscompositionexclusion}', "");
Expect(0, 2391, '\p{iscompositionexclusion}', "");
Expect(1, 2391, '\p{^iscompositionexclusion}', "");
Expect(1, 2391, '\P{iscompositionexclusion}', "");
Expect(0, 2391, '\P{^iscompositionexclusion}', "");
Expect(1, 2399, '\p{__is-COMPOSITION-Exclusion}', "");
Expect(0, 2399, '\p{^__is-COMPOSITION-Exclusion}', "");
Expect(0, 2399, '\P{__is-COMPOSITION-Exclusion}', "");
Expect(1, 2399, '\P{^__is-COMPOSITION-Exclusion}', "");
Expect(0, 2391, '\p{__is-COMPOSITION-Exclusion}', "");
Expect(1, 2391, '\p{^__is-COMPOSITION-Exclusion}', "");
Expect(1, 2391, '\P{__is-COMPOSITION-Exclusion}', "");
Expect(0, 2391, '\P{^__is-COMPOSITION-Exclusion}', "");
Error('\p{--CE/a/}');
Error('\P{--CE/a/}');
Expect(1, 2399, '\p{ce}', "");
Expect(0, 2399, '\p{^ce}', "");
Expect(0, 2399, '\P{ce}', "");
Expect(1, 2399, '\P{^ce}', "");
Expect(0, 2391, '\p{ce}', "");
Expect(1, 2391, '\p{^ce}', "");
Expect(1, 2391, '\P{ce}', "");
Expect(0, 2391, '\P{^ce}', "");
Expect(1, 2399, '\p{_-ce}', "");
Expect(0, 2399, '\p{^_-ce}', "");
Expect(0, 2399, '\P{_-ce}', "");
Expect(1, 2399, '\P{^_-ce}', "");
Expect(0, 2391, '\p{_-ce}', "");
Expect(1, 2391, '\p{^_-ce}', "");
Expect(1, 2391, '\P{_-ce}', "");
Expect(0, 2391, '\P{^_-ce}', "");
Error('\p{:=_Is-CE}');
Error('\P{:=_Is-CE}');
Expect(1, 2399, '\p{isce}', "");
Expect(0, 2399, '\p{^isce}', "");
Expect(0, 2399, '\P{isce}', "");
Expect(1, 2399, '\P{^isce}', "");
Expect(0, 2391, '\p{isce}', "");
Expect(1, 2391, '\p{^isce}', "");
Expect(1, 2391, '\P{isce}', "");
Expect(0, 2391, '\P{^isce}', "");
Expect(1, 2399, '\p{ _IS	ce}', "");
Expect(0, 2399, '\p{^ _IS	ce}', "");
Expect(0, 2399, '\P{ _IS	ce}', "");
Expect(1, 2399, '\P{^ _IS	ce}', "");
Expect(0, 2391, '\p{ _IS	ce}', "");
Expect(1, 2391, '\p{^ _IS	ce}', "");
Expect(1, 2391, '\P{ _IS	ce}', "");
Expect(0, 2391, '\P{^ _IS	ce}', "");
Error('\p{-/a/ENCLOSED-CJK	Letters_And_MONTHS}');
Error('\P{-/a/ENCLOSED-CJK	Letters_And_MONTHS}');
Expect(1, 13055, '\p{enclosedcjklettersandmonths}', "");
Expect(0, 13055, '\p{^enclosedcjklettersandmonths}', "");
Expect(0, 13055, '\P{enclosedcjklettersandmonths}', "");
Expect(1, 13055, '\P{^enclosedcjklettersandmonths}', "");
Expect(0, 12799, '\p{enclosedcjklettersandmonths}', "");
Expect(1, 12799, '\p{^enclosedcjklettersandmonths}', "");
Expect(1, 12799, '\P{enclosedcjklettersandmonths}', "");
Expect(0, 12799, '\P{^enclosedcjklettersandmonths}', "");
Expect(1, 13055, '\p{- EnclosedCJK_Letters AndMonths}', "");
Expect(0, 13055, '\p{^- EnclosedCJK_Letters AndMonths}', "");
Expect(0, 13055, '\P{- EnclosedCJK_Letters AndMonths}', "");
Expect(1, 13055, '\P{^- EnclosedCJK_Letters AndMonths}', "");
Expect(0, 12799, '\p{- EnclosedCJK_Letters AndMonths}', "");
Expect(1, 12799, '\p{^- EnclosedCJK_Letters AndMonths}', "");
Expect(1, 12799, '\P{- EnclosedCJK_Letters AndMonths}', "");
Expect(0, 12799, '\P{^- EnclosedCJK_Letters AndMonths}', "");
Error('\p{-/a/isEnclosedCJK LETTERS_AND-Months}');
Error('\P{-/a/isEnclosedCJK LETTERS_AND-Months}');
Expect(1, 13055, '\p{isenclosedcjklettersandmonths}', "");
Expect(0, 13055, '\p{^isenclosedcjklettersandmonths}', "");
Expect(0, 13055, '\P{isenclosedcjklettersandmonths}', "");
Expect(1, 13055, '\P{^isenclosedcjklettersandmonths}', "");
Expect(0, 12799, '\p{isenclosedcjklettersandmonths}', "");
Expect(1, 12799, '\p{^isenclosedcjklettersandmonths}', "");
Expect(1, 12799, '\P{isenclosedcjklettersandmonths}', "");
Expect(0, 12799, '\P{^isenclosedcjklettersandmonths}', "");
Expect(1, 13055, '\p{  Is_enclosed_cjkLetters_AND_MONTHS}', "");
Expect(0, 13055, '\p{^  Is_enclosed_cjkLetters_AND_MONTHS}', "");
Expect(0, 13055, '\P{  Is_enclosed_cjkLetters_AND_MONTHS}', "");
Expect(1, 13055, '\P{^  Is_enclosed_cjkLetters_AND_MONTHS}', "");
Expect(0, 12799, '\p{  Is_enclosed_cjkLetters_AND_MONTHS}', "");
Expect(1, 12799, '\p{^  Is_enclosed_cjkLetters_AND_MONTHS}', "");
Expect(1, 12799, '\P{  Is_enclosed_cjkLetters_AND_MONTHS}', "");
Expect(0, 12799, '\P{^  Is_enclosed_cjkLetters_AND_MONTHS}', "");
Error('\p{_InEnclosed CJK LettersAnd MONTHS/a/}');
Error('\P{_InEnclosed CJK LettersAnd MONTHS/a/}');
Expect(1, 13055, '\p{inenclosedcjklettersandmonths}', "");
Expect(0, 13055, '\p{^inenclosedcjklettersandmonths}', "");
Expect(0, 13055, '\P{inenclosedcjklettersandmonths}', "");
Expect(1, 13055, '\P{^inenclosedcjklettersandmonths}', "");
Expect(0, 12799, '\p{inenclosedcjklettersandmonths}', "");
Expect(1, 12799, '\p{^inenclosedcjklettersandmonths}', "");
Expect(1, 12799, '\P{inenclosedcjklettersandmonths}', "");
Expect(0, 12799, '\P{^inenclosedcjklettersandmonths}', "");
Expect(1, 13055, '\p{_-InenclosedCJK	Letters_AND-Months}', "");
Expect(0, 13055, '\p{^_-InenclosedCJK	Letters_AND-Months}', "");
Expect(0, 13055, '\P{_-InenclosedCJK	Letters_AND-Months}', "");
Expect(1, 13055, '\P{^_-InenclosedCJK	Letters_AND-Months}', "");
Expect(0, 12799, '\p{_-InenclosedCJK	Letters_AND-Months}', "");
Expect(1, 12799, '\p{^_-InenclosedCJK	Letters_AND-Months}', "");
Expect(1, 12799, '\P{_-InenclosedCJK	Letters_AND-Months}', "");
Expect(0, 12799, '\P{^_-InenclosedCJK	Letters_AND-Months}', "");
Error('\p{	Space/a/Separator}');
Error('\P{	Space/a/Separator}');
Expect(1, 32, '\p{spaceseparator}', "");
Expect(0, 32, '\p{^spaceseparator}', "");
Expect(0, 32, '\P{spaceseparator}', "");
Expect(1, 32, '\P{^spaceseparator}', "");
Expect(0, 31, '\p{spaceseparator}', "");
Expect(1, 31, '\p{^spaceseparator}', "");
Expect(1, 31, '\P{spaceseparator}', "");
Expect(0, 31, '\P{^spaceseparator}', "");
Expect(1, 32, '\p{-Space separator}', "");
Expect(0, 32, '\p{^-Space separator}', "");
Expect(0, 32, '\P{-Space separator}', "");
Expect(1, 32, '\P{^-Space separator}', "");
Expect(0, 31, '\p{-Space separator}', "");
Expect(1, 31, '\p{^-Space separator}', "");
Expect(1, 31, '\P{-Space separator}', "");
Expect(0, 31, '\P{^-Space separator}', "");
Error('\p{	/a/IsSpace	separator}');
Error('\P{	/a/IsSpace	separator}');
Expect(1, 32, '\p{isspaceseparator}', "");
Expect(0, 32, '\p{^isspaceseparator}', "");
Expect(0, 32, '\P{isspaceseparator}', "");
Expect(1, 32, '\P{^isspaceseparator}', "");
Expect(0, 31, '\p{isspaceseparator}', "");
Expect(1, 31, '\p{^isspaceseparator}', "");
Expect(1, 31, '\P{isspaceseparator}', "");
Expect(0, 31, '\P{^isspaceseparator}', "");
Expect(1, 32, '\p{__isSpace_SEPARATOR}', "");
Expect(0, 32, '\p{^__isSpace_SEPARATOR}', "");
Expect(0, 32, '\P{__isSpace_SEPARATOR}', "");
Expect(1, 32, '\P{^__isSpace_SEPARATOR}', "");
Expect(0, 31, '\p{__isSpace_SEPARATOR}', "");
Expect(1, 31, '\p{^__isSpace_SEPARATOR}', "");
Expect(1, 31, '\P{__isSpace_SEPARATOR}', "");
Expect(0, 31, '\P{^__isSpace_SEPARATOR}', "");
Error('\p{/a/zs}');
Error('\P{/a/zs}');
Expect(1, 32, '\p{zs}', "");
Expect(0, 32, '\p{^zs}', "");
Expect(0, 32, '\P{zs}', "");
Expect(1, 32, '\P{^zs}', "");
Expect(0, 31, '\p{zs}', "");
Expect(1, 31, '\p{^zs}', "");
Expect(1, 31, '\P{zs}', "");
Expect(0, 31, '\P{^zs}', "");
Expect(1, 32, '\p{_	ZS}', "");
Expect(0, 32, '\p{^_	ZS}', "");
Expect(0, 32, '\P{_	ZS}', "");
Expect(1, 32, '\P{^_	ZS}', "");
Expect(0, 31, '\p{_	ZS}', "");
Expect(1, 31, '\p{^_	ZS}', "");
Expect(1, 31, '\P{_	ZS}', "");
Expect(0, 31, '\P{^_	ZS}', "");
Error('\p{_/a/is-Zs}');
Error('\P{_/a/is-Zs}');
Expect(1, 32, '\p{iszs}', "");
Expect(0, 32, '\p{^iszs}', "");
Expect(0, 32, '\P{iszs}', "");
Expect(1, 32, '\P{^iszs}', "");
Expect(0, 31, '\p{iszs}', "");
Expect(1, 31, '\p{^iszs}', "");
Expect(1, 31, '\P{iszs}', "");
Expect(0, 31, '\P{^iszs}', "");
Expect(1, 32, '\p{	-Is	Zs}', "");
Expect(0, 32, '\p{^	-Is	Zs}', "");
Expect(0, 32, '\P{	-Is	Zs}', "");
Expect(1, 32, '\P{^	-Is	Zs}', "");
Expect(0, 31, '\p{	-Is	Zs}', "");
Expect(1, 31, '\p{^	-Is	Zs}', "");
Expect(1, 31, '\P{	-Is	Zs}', "");
Expect(0, 31, '\P{^	-Is	Zs}', "");
Error('\p{	 Supplemental:=Punctuation}');
Error('\P{	 Supplemental:=Punctuation}');
Expect(1, 11903, '\p{supplementalpunctuation}', "");
Expect(0, 11903, '\p{^supplementalpunctuation}', "");
Expect(0, 11903, '\P{supplementalpunctuation}', "");
Expect(1, 11903, '\P{^supplementalpunctuation}', "");
Expect(0, 11775, '\p{supplementalpunctuation}', "");
Expect(1, 11775, '\p{^supplementalpunctuation}', "");
Expect(1, 11775, '\P{supplementalpunctuation}', "");
Expect(0, 11775, '\P{^supplementalpunctuation}', "");
Expect(1, 11903, '\p{--SUPPLEMENTAL	Punctuation}', "");
Expect(0, 11903, '\p{^--SUPPLEMENTAL	Punctuation}', "");
Expect(0, 11903, '\P{--SUPPLEMENTAL	Punctuation}', "");
Expect(1, 11903, '\P{^--SUPPLEMENTAL	Punctuation}', "");
Expect(0, 11775, '\p{--SUPPLEMENTAL	Punctuation}', "");
Expect(1, 11775, '\p{^--SUPPLEMENTAL	Punctuation}', "");
Expect(1, 11775, '\P{--SUPPLEMENTAL	Punctuation}', "");
Expect(0, 11775, '\P{^--SUPPLEMENTAL	Punctuation}', "");
Error('\p{_:=Is-Supplemental	punctuation}');
Error('\P{_:=Is-Supplemental	punctuation}');
Expect(1, 11903, '\p{issupplementalpunctuation}', "");
Expect(0, 11903, '\p{^issupplementalpunctuation}', "");
Expect(0, 11903, '\P{issupplementalpunctuation}', "");
Expect(1, 11903, '\P{^issupplementalpunctuation}', "");
Expect(0, 11775, '\p{issupplementalpunctuation}', "");
Expect(1, 11775, '\p{^issupplementalpunctuation}', "");
Expect(1, 11775, '\P{issupplementalpunctuation}', "");
Expect(0, 11775, '\P{^issupplementalpunctuation}', "");
Expect(1, 11903, '\p{_Is	Supplemental-punctuation}', "");
Expect(0, 11903, '\p{^_Is	Supplemental-punctuation}', "");
Expect(0, 11903, '\P{_Is	Supplemental-punctuation}', "");
Expect(1, 11903, '\P{^_Is	Supplemental-punctuation}', "");
Expect(0, 11775, '\p{_Is	Supplemental-punctuation}', "");
Expect(1, 11775, '\p{^_Is	Supplemental-punctuation}', "");
Expect(1, 11775, '\P{_Is	Supplemental-punctuation}', "");
Expect(0, 11775, '\P{^_Is	Supplemental-punctuation}', "");
Error('\p{/a/IN_SUPPLEMENTAL PUNCTUATION}');
Error('\P{/a/IN_SUPPLEMENTAL PUNCTUATION}');
Expect(1, 11903, '\p{insupplementalpunctuation}', "");
Expect(0, 11903, '\p{^insupplementalpunctuation}', "");
Expect(0, 11903, '\P{insupplementalpunctuation}', "");
Expect(1, 11903, '\P{^insupplementalpunctuation}', "");
Expect(0, 11775, '\p{insupplementalpunctuation}', "");
Expect(1, 11775, '\p{^insupplementalpunctuation}', "");
Expect(1, 11775, '\P{insupplementalpunctuation}', "");
Expect(0, 11775, '\P{^insupplementalpunctuation}', "");
Expect(1, 11903, '\p{		IN-Supplementalpunctuation}', "");
Expect(0, 11903, '\p{^		IN-Supplementalpunctuation}', "");
Expect(0, 11903, '\P{		IN-Supplementalpunctuation}', "");
Expect(1, 11903, '\P{^		IN-Supplementalpunctuation}', "");
Expect(0, 11775, '\p{		IN-Supplementalpunctuation}', "");
Expect(1, 11775, '\p{^		IN-Supplementalpunctuation}', "");
Expect(1, 11775, '\P{		IN-Supplementalpunctuation}', "");
Expect(0, 11775, '\P{^		IN-Supplementalpunctuation}', "");
Error('\p{	KATAKANA-Phonetic/a/extensions}');
Error('\P{	KATAKANA-Phonetic/a/extensions}');
Expect(1, 12799, '\p{katakanaphoneticextensions}', "");
Expect(0, 12799, '\p{^katakanaphoneticextensions}', "");
Expect(0, 12799, '\P{katakanaphoneticextensions}', "");
Expect(1, 12799, '\P{^katakanaphoneticextensions}', "");
Expect(0, 12783, '\p{katakanaphoneticextensions}', "");
Expect(1, 12783, '\p{^katakanaphoneticextensions}', "");
Expect(1, 12783, '\P{katakanaphoneticextensions}', "");
Expect(0, 12783, '\P{^katakanaphoneticextensions}', "");
Expect(1, 12799, '\p{		KATAKANA	phonetic_EXTENSIONS}', "");
Expect(0, 12799, '\p{^		KATAKANA	phonetic_EXTENSIONS}', "");
Expect(0, 12799, '\P{		KATAKANA	phonetic_EXTENSIONS}', "");
Expect(1, 12799, '\P{^		KATAKANA	phonetic_EXTENSIONS}', "");
Expect(0, 12783, '\p{		KATAKANA	phonetic_EXTENSIONS}', "");
Expect(1, 12783, '\p{^		KATAKANA	phonetic_EXTENSIONS}', "");
Expect(1, 12783, '\P{		KATAKANA	phonetic_EXTENSIONS}', "");
Expect(0, 12783, '\P{^		KATAKANA	phonetic_EXTENSIONS}', "");
Error('\p{ 	Is/a/KatakanaPhoneticextensions}');
Error('\P{ 	Is/a/KatakanaPhoneticextensions}');
Expect(1, 12799, '\p{iskatakanaphoneticextensions}', "");
Expect(0, 12799, '\p{^iskatakanaphoneticextensions}', "");
Expect(0, 12799, '\P{iskatakanaphoneticextensions}', "");
Expect(1, 12799, '\P{^iskatakanaphoneticextensions}', "");
Expect(0, 12783, '\p{iskatakanaphoneticextensions}', "");
Expect(1, 12783, '\p{^iskatakanaphoneticextensions}', "");
Expect(1, 12783, '\P{iskatakanaphoneticextensions}', "");
Expect(0, 12783, '\P{^iskatakanaphoneticextensions}', "");
Expect(1, 12799, '\p{_	Is KatakanaPhonetic	Extensions}', "");
Expect(0, 12799, '\p{^_	Is KatakanaPhonetic	Extensions}', "");
Expect(0, 12799, '\P{_	Is KatakanaPhonetic	Extensions}', "");
Expect(1, 12799, '\P{^_	Is KatakanaPhonetic	Extensions}', "");
Expect(0, 12783, '\p{_	Is KatakanaPhonetic	Extensions}', "");
Expect(1, 12783, '\p{^_	Is KatakanaPhonetic	Extensions}', "");
Expect(1, 12783, '\P{_	Is KatakanaPhonetic	Extensions}', "");
Expect(0, 12783, '\P{^_	Is KatakanaPhonetic	Extensions}', "");
Error('\p{--In:=katakana_Phonetic-extensions}');
Error('\P{--In:=katakana_Phonetic-extensions}');
Expect(1, 12799, '\p{inkatakanaphoneticextensions}', "");
Expect(0, 12799, '\p{^inkatakanaphoneticextensions}', "");
Expect(0, 12799, '\P{inkatakanaphoneticextensions}', "");
Expect(1, 12799, '\P{^inkatakanaphoneticextensions}', "");
Expect(0, 12783, '\p{inkatakanaphoneticextensions}', "");
Expect(1, 12783, '\p{^inkatakanaphoneticextensions}', "");
Expect(1, 12783, '\P{inkatakanaphoneticextensions}', "");
Expect(0, 12783, '\P{^inkatakanaphoneticextensions}', "");
Expect(1, 12799, '\p{  In-katakanaPhonetic_Extensions}', "");
Expect(0, 12799, '\p{^  In-katakanaPhonetic_Extensions}', "");
Expect(0, 12799, '\P{  In-katakanaPhonetic_Extensions}', "");
Expect(1, 12799, '\P{^  In-katakanaPhonetic_Extensions}', "");
Expect(0, 12783, '\p{  In-katakanaPhonetic_Extensions}', "");
Expect(1, 12783, '\p{^  In-katakanaPhonetic_Extensions}', "");
Expect(1, 12783, '\P{  In-katakanaPhonetic_Extensions}', "");
Expect(0, 12783, '\P{^  In-katakanaPhonetic_Extensions}', "");
Error('\p{:=	Modifier symbol}');
Error('\P{:=	Modifier symbol}');
Expect(1, 94, '\p{modifiersymbol}', "");
Expect(0, 94, '\p{^modifiersymbol}', "");
Expect(0, 94, '\P{modifiersymbol}', "");
Expect(1, 94, '\P{^modifiersymbol}', "");
Expect(0, 93, '\p{modifiersymbol}', "");
Expect(1, 93, '\p{^modifiersymbol}', "");
Expect(1, 93, '\P{modifiersymbol}', "");
Expect(0, 93, '\P{^modifiersymbol}', "");
Expect(1, 94, '\p{_-ModifierSYMBOL}', "");
Expect(0, 94, '\p{^_-ModifierSYMBOL}', "");
Expect(0, 94, '\P{_-ModifierSYMBOL}', "");
Expect(1, 94, '\P{^_-ModifierSYMBOL}', "");
Expect(0, 93, '\p{_-ModifierSYMBOL}', "");
Expect(1, 93, '\p{^_-ModifierSYMBOL}', "");
Expect(1, 93, '\P{_-ModifierSYMBOL}', "");
Expect(0, 93, '\P{^_-ModifierSYMBOL}', "");
Error('\p{	/a/Is_Modifier	SYMBOL}');
Error('\P{	/a/Is_Modifier	SYMBOL}');
Expect(1, 94, '\p{ismodifiersymbol}', "");
Expect(0, 94, '\p{^ismodifiersymbol}', "");
Expect(0, 94, '\P{ismodifiersymbol}', "");
Expect(1, 94, '\P{^ismodifiersymbol}', "");
Expect(0, 93, '\p{ismodifiersymbol}', "");
Expect(1, 93, '\p{^ismodifiersymbol}', "");
Expect(1, 93, '\P{ismodifiersymbol}', "");
Expect(0, 93, '\P{^ismodifiersymbol}', "");
Expect(1, 94, '\p{ _Is modifierSymbol}', "");
Expect(0, 94, '\p{^ _Is modifierSymbol}', "");
Expect(0, 94, '\P{ _Is modifierSymbol}', "");
Expect(1, 94, '\P{^ _Is modifierSymbol}', "");
Expect(0, 93, '\p{ _Is modifierSymbol}', "");
Expect(1, 93, '\p{^ _Is modifierSymbol}', "");
Expect(1, 93, '\P{ _Is modifierSymbol}', "");
Expect(0, 93, '\P{^ _Is modifierSymbol}', "");
Error('\p{:=sk}');
Error('\P{:=sk}');
Expect(1, 94, '\p{sk}', "");
Expect(0, 94, '\p{^sk}', "");
Expect(0, 94, '\P{sk}', "");
Expect(1, 94, '\P{^sk}', "");
Expect(0, 93, '\p{sk}', "");
Expect(1, 93, '\p{^sk}', "");
Expect(1, 93, '\P{sk}', "");
Expect(0, 93, '\P{^sk}', "");
Expect(1, 94, '\p{_-sk}', "");
Expect(0, 94, '\p{^_-sk}', "");
Expect(0, 94, '\P{_-sk}', "");
Expect(1, 94, '\P{^_-sk}', "");
Expect(0, 93, '\p{_-sk}', "");
Expect(1, 93, '\p{^_-sk}', "");
Expect(1, 93, '\P{_-sk}', "");
Expect(0, 93, '\P{^_-sk}', "");
Error('\p{	Is_Sk/a/}');
Error('\P{	Is_Sk/a/}');
Expect(1, 94, '\p{issk}', "");
Expect(0, 94, '\p{^issk}', "");
Expect(0, 94, '\P{issk}', "");
Expect(1, 94, '\P{^issk}', "");
Expect(0, 93, '\p{issk}', "");
Expect(1, 93, '\p{^issk}', "");
Expect(1, 93, '\P{issk}', "");
Expect(0, 93, '\P{^issk}', "");
Expect(1, 94, '\p{-Is-Sk}', "");
Expect(0, 94, '\p{^-Is-Sk}', "");
Expect(0, 94, '\P{-Is-Sk}', "");
Expect(1, 94, '\P{^-Is-Sk}', "");
Expect(0, 93, '\p{-Is-Sk}', "");
Expect(1, 93, '\p{^-Is-Sk}', "");
Expect(1, 93, '\P{-Is-Sk}', "");
Expect(0, 93, '\P{^-Is-Sk}', "");
Error('\p{ /a/armenian}');
Error('\P{ /a/armenian}');
Expect(1, 1366, '\p{armenian}', "");
Expect(0, 1366, '\p{^armenian}', "");
Expect(0, 1366, '\P{armenian}', "");
Expect(1, 1366, '\P{^armenian}', "");
Expect(0, 1328, '\p{armenian}', "");
Expect(1, 1328, '\p{^armenian}', "");
Expect(1, 1328, '\P{armenian}', "");
Expect(0, 1328, '\P{^armenian}', "");
Expect(1, 1366, '\p{_-armenian}', "");
Expect(0, 1366, '\p{^_-armenian}', "");
Expect(0, 1366, '\P{_-armenian}', "");
Expect(1, 1366, '\P{^_-armenian}', "");
Expect(0, 1328, '\p{_-armenian}', "");
Expect(1, 1328, '\p{^_-armenian}', "");
Expect(1, 1328, '\P{_-armenian}', "");
Expect(0, 1328, '\P{^_-armenian}', "");
Error('\p{-	Is/a/Armenian}');
Error('\P{-	Is/a/Armenian}');
Expect(1, 1366, '\p{isarmenian}', "");
Expect(0, 1366, '\p{^isarmenian}', "");
Expect(0, 1366, '\P{isarmenian}', "");
Expect(1, 1366, '\P{^isarmenian}', "");
Expect(0, 1328, '\p{isarmenian}', "");
Expect(1, 1328, '\p{^isarmenian}', "");
Expect(1, 1328, '\P{isarmenian}', "");
Expect(0, 1328, '\P{^isarmenian}', "");
Expect(1, 1366, '\p{	isarmenian}', "");
Expect(0, 1366, '\p{^	isarmenian}', "");
Expect(0, 1366, '\P{	isarmenian}', "");
Expect(1, 1366, '\P{^	isarmenian}', "");
Expect(0, 1328, '\p{	isarmenian}', "");
Expect(1, 1328, '\p{^	isarmenian}', "");
Expect(1, 1328, '\P{	isarmenian}', "");
Expect(0, 1328, '\P{^	isarmenian}', "");
Error('\p{	-ARMN:=}');
Error('\P{	-ARMN:=}');
Expect(1, 1366, '\p{armn}', "");
Expect(0, 1366, '\p{^armn}', "");
Expect(0, 1366, '\P{armn}', "");
Expect(1, 1366, '\P{^armn}', "");
Expect(0, 1328, '\p{armn}', "");
Expect(1, 1328, '\p{^armn}', "");
Expect(1, 1328, '\P{armn}', "");
Expect(0, 1328, '\P{^armn}', "");
Expect(1, 1366, '\p{	Armn}', "");
Expect(0, 1366, '\p{^	Armn}', "");
Expect(0, 1366, '\P{	Armn}', "");
Expect(1, 1366, '\P{^	Armn}', "");
Expect(0, 1328, '\p{	Armn}', "");
Expect(1, 1328, '\p{^	Armn}', "");
Expect(1, 1328, '\P{	Armn}', "");
Expect(0, 1328, '\P{^	Armn}', "");
Error('\p{ :=is_Armn}');
Error('\P{ :=is_Armn}');
Expect(1, 1366, '\p{isarmn}', "");
Expect(0, 1366, '\p{^isarmn}', "");
Expect(0, 1366, '\P{isarmn}', "");
Expect(1, 1366, '\P{^isarmn}', "");
Expect(0, 1328, '\p{isarmn}', "");
Expect(1, 1328, '\p{^isarmn}', "");
Expect(1, 1328, '\P{isarmn}', "");
Expect(0, 1328, '\P{^isarmn}', "");
Expect(1, 1366, '\p{	IS-armn}', "");
Expect(0, 1366, '\p{^	IS-armn}', "");
Expect(0, 1366, '\P{	IS-armn}', "");
Expect(1, 1366, '\P{^	IS-armn}', "");
Expect(0, 1328, '\p{	IS-armn}', "");
Expect(1, 1328, '\p{^	IS-armn}', "");
Expect(1, 1328, '\P{	IS-armn}', "");
Expect(0, 1328, '\P{^	IS-armn}', "");
Error('\p{	/a/xidContinue}');
Error('\P{	/a/xidContinue}');
Expect(1, 57, '\p{xidcontinue}', "");
Expect(0, 57, '\p{^xidcontinue}', "");
Expect(0, 57, '\P{xidcontinue}', "");
Expect(1, 57, '\P{^xidcontinue}', "");
Expect(0, 47, '\p{xidcontinue}', "");
Expect(1, 47, '\p{^xidcontinue}', "");
Expect(1, 47, '\P{xidcontinue}', "");
Expect(0, 47, '\P{^xidcontinue}', "");
Expect(1, 57, '\p{_	XID-CONTINUE}', "");
Expect(0, 57, '\p{^_	XID-CONTINUE}', "");
Expect(0, 57, '\P{_	XID-CONTINUE}', "");
Expect(1, 57, '\P{^_	XID-CONTINUE}', "");
Expect(0, 47, '\p{_	XID-CONTINUE}', "");
Expect(1, 47, '\p{^_	XID-CONTINUE}', "");
Expect(1, 47, '\P{_	XID-CONTINUE}', "");
Expect(0, 47, '\P{^_	XID-CONTINUE}', "");
Error('\p{	Is:=XIDContinue}');
Error('\P{	Is:=XIDContinue}');
Expect(1, 57, '\p{isxidcontinue}', "");
Expect(0, 57, '\p{^isxidcontinue}', "");
Expect(0, 57, '\P{isxidcontinue}', "");
Expect(1, 57, '\P{^isxidcontinue}', "");
Expect(0, 47, '\p{isxidcontinue}', "");
Expect(1, 47, '\p{^isxidcontinue}', "");
Expect(1, 47, '\P{isxidcontinue}', "");
Expect(0, 47, '\P{^isxidcontinue}', "");
Expect(1, 57, '\p{-Is-XIDCONTINUE}', "");
Expect(0, 57, '\p{^-Is-XIDCONTINUE}', "");
Expect(0, 57, '\P{-Is-XIDCONTINUE}', "");
Expect(1, 57, '\P{^-Is-XIDCONTINUE}', "");
Expect(0, 47, '\p{-Is-XIDCONTINUE}', "");
Expect(1, 47, '\p{^-Is-XIDCONTINUE}', "");
Expect(1, 47, '\P{-Is-XIDCONTINUE}', "");
Expect(0, 47, '\P{^-Is-XIDCONTINUE}', "");
Error('\p{ :=XIDC}');
Error('\P{ :=XIDC}');
Expect(1, 57, '\p{xidc}', "");
Expect(0, 57, '\p{^xidc}', "");
Expect(0, 57, '\P{xidc}', "");
Expect(1, 57, '\P{^xidc}', "");
Expect(0, 47, '\p{xidc}', "");
Expect(1, 47, '\p{^xidc}', "");
Expect(1, 47, '\P{xidc}', "");
Expect(0, 47, '\P{^xidc}', "");
Expect(1, 57, '\p{-XIDC}', "");
Expect(0, 57, '\p{^-XIDC}', "");
Expect(0, 57, '\P{-XIDC}', "");
Expect(1, 57, '\P{^-XIDC}', "");
Expect(0, 47, '\p{-XIDC}', "");
Expect(1, 47, '\p{^-XIDC}', "");
Expect(1, 47, '\P{-XIDC}', "");
Expect(0, 47, '\P{^-XIDC}', "");
Error('\p{_	Is_XIDC/a/}');
Error('\P{_	Is_XIDC/a/}');
Expect(1, 57, '\p{isxidc}', "");
Expect(0, 57, '\p{^isxidc}', "");
Expect(0, 57, '\P{isxidc}', "");
Expect(1, 57, '\P{^isxidc}', "");
Expect(0, 47, '\p{isxidc}', "");
Expect(1, 47, '\p{^isxidc}', "");
Expect(1, 47, '\P{isxidc}', "");
Expect(0, 47, '\P{^isxidc}', "");
Expect(1, 57, '\p{ 	is-XIDC}', "");
Expect(0, 57, '\p{^ 	is-XIDC}', "");
Expect(0, 57, '\P{ 	is-XIDC}', "");
Expect(1, 57, '\P{^ 	is-XIDC}', "");
Expect(0, 47, '\p{ 	is-XIDC}', "");
Expect(1, 47, '\p{^ 	is-XIDC}', "");
Expect(1, 47, '\P{ 	is-XIDC}', "");
Expect(0, 47, '\P{^ 	is-XIDC}', "");
Error('\p{ 	Hyphen:=}');
Error('\P{ 	Hyphen:=}');
Expect(1, 45, '\p{hyphen}', 'deprecated');
Expect(0, 45, '\p{^hyphen}', 'deprecated');
Expect(0, 45, '\P{hyphen}', 'deprecated');
Expect(1, 45, '\P{^hyphen}', 'deprecated');
Expect(0, 44, '\p{hyphen}', 'deprecated');
Expect(1, 44, '\p{^hyphen}', 'deprecated');
Expect(1, 44, '\P{hyphen}', 'deprecated');
Expect(0, 44, '\P{^hyphen}', 'deprecated');
Expect(1, 45, '\p{_ Hyphen}', 'deprecated');
Expect(0, 45, '\p{^_ Hyphen}', 'deprecated');
Expect(0, 45, '\P{_ Hyphen}', 'deprecated');
Expect(1, 45, '\P{^_ Hyphen}', 'deprecated');
Expect(0, 44, '\p{_ Hyphen}', 'deprecated');
Expect(1, 44, '\p{^_ Hyphen}', 'deprecated');
Expect(1, 44, '\P{_ Hyphen}', 'deprecated');
Expect(0, 44, '\P{^_ Hyphen}', 'deprecated');
Error('\p{__Ishyphen/a/}');
Error('\P{__Ishyphen/a/}');
Expect(1, 45, '\p{ishyphen}', 'deprecated');
Expect(0, 45, '\p{^ishyphen}', 'deprecated');
Expect(0, 45, '\P{ishyphen}', 'deprecated');
Expect(1, 45, '\P{^ishyphen}', 'deprecated');
Expect(0, 44, '\p{ishyphen}', 'deprecated');
Expect(1, 44, '\p{^ishyphen}', 'deprecated');
Expect(1, 44, '\P{ishyphen}', 'deprecated');
Expect(0, 44, '\P{^ishyphen}', 'deprecated');
Expect(1, 45, '\p{ -Is	Hyphen}', 'deprecated');
Expect(0, 45, '\p{^ -Is	Hyphen}', 'deprecated');
Expect(0, 45, '\P{ -Is	Hyphen}', 'deprecated');
Expect(1, 45, '\P{^ -Is	Hyphen}', 'deprecated');
Expect(0, 44, '\p{ -Is	Hyphen}', 'deprecated');
Expect(1, 44, '\p{^ -Is	Hyphen}', 'deprecated');
Expect(1, 44, '\P{ -Is	Hyphen}', 'deprecated');
Expect(0, 44, '\P{^ -Is	Hyphen}', 'deprecated');
Error('\p{	 Unified/a/Canadian ABORIGINALSYLLABICS}');
Error('\P{	 Unified/a/Canadian ABORIGINALSYLLABICS}');
Expect(1, 5759, '\p{unifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5759, '\p{^unifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5759, '\P{unifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5759, '\P{^unifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5119, '\p{unifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5119, '\p{^unifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5119, '\P{unifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5119, '\P{^unifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5759, '\p{- UnifiedCanadian	ABORIGINALSYLLABICS}', "");
Expect(0, 5759, '\p{^- UnifiedCanadian	ABORIGINALSYLLABICS}', "");
Expect(0, 5759, '\P{- UnifiedCanadian	ABORIGINALSYLLABICS}', "");
Expect(1, 5759, '\P{^- UnifiedCanadian	ABORIGINALSYLLABICS}', "");
Expect(0, 5119, '\p{- UnifiedCanadian	ABORIGINALSYLLABICS}', "");
Expect(1, 5119, '\p{^- UnifiedCanadian	ABORIGINALSYLLABICS}', "");
Expect(1, 5119, '\P{- UnifiedCanadian	ABORIGINALSYLLABICS}', "");
Expect(0, 5119, '\P{^- UnifiedCanadian	ABORIGINALSYLLABICS}', "");
Error('\p{	:=IS UNIFIED	CANADIAN_ABORIGINAL	SYLLABICS}');
Error('\P{	:=IS UNIFIED	CANADIAN_ABORIGINAL	SYLLABICS}');
Expect(1, 5759, '\p{isunifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5759, '\p{^isunifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5759, '\P{isunifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5759, '\P{^isunifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5119, '\p{isunifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5119, '\p{^isunifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5119, '\P{isunifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5119, '\P{^isunifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5759, '\p{--IS_unified_canadian_ABORIGINALSyllabics}', "");
Expect(0, 5759, '\p{^--IS_unified_canadian_ABORIGINALSyllabics}', "");
Expect(0, 5759, '\P{--IS_unified_canadian_ABORIGINALSyllabics}', "");
Expect(1, 5759, '\P{^--IS_unified_canadian_ABORIGINALSyllabics}', "");
Expect(0, 5119, '\p{--IS_unified_canadian_ABORIGINALSyllabics}', "");
Expect(1, 5119, '\p{^--IS_unified_canadian_ABORIGINALSyllabics}', "");
Expect(1, 5119, '\P{--IS_unified_canadian_ABORIGINALSyllabics}', "");
Expect(0, 5119, '\P{^--IS_unified_canadian_ABORIGINALSyllabics}', "");
Error('\p{	In unified Canadian_ABORIGINAL syllabics:=}');
Error('\P{	In unified Canadian_ABORIGINAL syllabics:=}');
Expect(1, 5759, '\p{inunifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5759, '\p{^inunifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5759, '\P{inunifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5759, '\P{^inunifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5119, '\p{inunifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5119, '\p{^inunifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5119, '\P{inunifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5119, '\P{^inunifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5759, '\p{_ IN UnifiedCANADIAN_Aboriginal	syllabics}', "");
Expect(0, 5759, '\p{^_ IN UnifiedCANADIAN_Aboriginal	syllabics}', "");
Expect(0, 5759, '\P{_ IN UnifiedCANADIAN_Aboriginal	syllabics}', "");
Expect(1, 5759, '\P{^_ IN UnifiedCANADIAN_Aboriginal	syllabics}', "");
Expect(0, 5119, '\p{_ IN UnifiedCANADIAN_Aboriginal	syllabics}', "");
Expect(1, 5119, '\p{^_ IN UnifiedCANADIAN_Aboriginal	syllabics}', "");
Expect(1, 5119, '\P{_ IN UnifiedCANADIAN_Aboriginal	syllabics}', "");
Expect(0, 5119, '\P{^_ IN UnifiedCANADIAN_Aboriginal	syllabics}', "");
Error('\p{:= Canadian-SYLLABICS}');
Error('\P{:= Canadian-SYLLABICS}');
Expect(1, 5759, '\p{canadiansyllabics}', "");
Expect(0, 5759, '\p{^canadiansyllabics}', "");
Expect(0, 5759, '\P{canadiansyllabics}', "");
Expect(1, 5759, '\P{^canadiansyllabics}', "");
Expect(0, 5119, '\p{canadiansyllabics}', "");
Expect(1, 5119, '\p{^canadiansyllabics}', "");
Expect(1, 5119, '\P{canadiansyllabics}', "");
Expect(0, 5119, '\P{^canadiansyllabics}', "");
Expect(1, 5759, '\p{		Canadian-SYLLABICS}', "");
Expect(0, 5759, '\p{^		Canadian-SYLLABICS}', "");
Expect(0, 5759, '\P{		Canadian-SYLLABICS}', "");
Expect(1, 5759, '\P{^		Canadian-SYLLABICS}', "");
Expect(0, 5119, '\p{		Canadian-SYLLABICS}', "");
Expect(1, 5119, '\p{^		Canadian-SYLLABICS}', "");
Expect(1, 5119, '\P{		Canadian-SYLLABICS}', "");
Expect(0, 5119, '\P{^		Canadian-SYLLABICS}', "");
Error('\p{ 	is Canadian	Syllabics/a/}');
Error('\P{ 	is Canadian	Syllabics/a/}');
Expect(1, 5759, '\p{iscanadiansyllabics}', "");
Expect(0, 5759, '\p{^iscanadiansyllabics}', "");
Expect(0, 5759, '\P{iscanadiansyllabics}', "");
Expect(1, 5759, '\P{^iscanadiansyllabics}', "");
Expect(0, 5119, '\p{iscanadiansyllabics}', "");
Expect(1, 5119, '\p{^iscanadiansyllabics}', "");
Expect(1, 5119, '\P{iscanadiansyllabics}', "");
Expect(0, 5119, '\P{^iscanadiansyllabics}', "");
Expect(1, 5759, '\p{_ is	canadian	Syllabics}', "");
Expect(0, 5759, '\p{^_ is	canadian	Syllabics}', "");
Expect(0, 5759, '\P{_ is	canadian	Syllabics}', "");
Expect(1, 5759, '\P{^_ is	canadian	Syllabics}', "");
Expect(0, 5119, '\p{_ is	canadian	Syllabics}', "");
Expect(1, 5119, '\p{^_ is	canadian	Syllabics}', "");
Expect(1, 5119, '\P{_ is	canadian	Syllabics}', "");
Expect(0, 5119, '\P{^_ is	canadian	Syllabics}', "");
Error('\p{ In/a/Canadian	Syllabics}');
Error('\P{ In/a/Canadian	Syllabics}');
Expect(1, 5759, '\p{incanadiansyllabics}', "");
Expect(0, 5759, '\p{^incanadiansyllabics}', "");
Expect(0, 5759, '\P{incanadiansyllabics}', "");
Expect(1, 5759, '\P{^incanadiansyllabics}', "");
Expect(0, 5119, '\p{incanadiansyllabics}', "");
Expect(1, 5119, '\p{^incanadiansyllabics}', "");
Expect(1, 5119, '\P{incanadiansyllabics}', "");
Expect(0, 5119, '\P{^incanadiansyllabics}', "");
Expect(1, 5759, '\p{_ in_CANADIAN_Syllabics}', "");
Expect(0, 5759, '\p{^_ in_CANADIAN_Syllabics}', "");
Expect(0, 5759, '\P{_ in_CANADIAN_Syllabics}', "");
Expect(1, 5759, '\P{^_ in_CANADIAN_Syllabics}', "");
Expect(0, 5119, '\p{_ in_CANADIAN_Syllabics}', "");
Expect(1, 5119, '\p{^_ in_CANADIAN_Syllabics}', "");
Expect(1, 5119, '\P{_ in_CANADIAN_Syllabics}', "");
Expect(0, 5119, '\P{^_ in_CANADIAN_Syllabics}', "");
Error('\p{	-Egyptian:=hieroglyphs}');
Error('\P{	-Egyptian:=hieroglyphs}');
Expect(1, 78894, '\p{egyptianhieroglyphs}', "");
Expect(0, 78894, '\p{^egyptianhieroglyphs}', "");
Expect(0, 78894, '\P{egyptianhieroglyphs}', "");
Expect(1, 78894, '\P{^egyptianhieroglyphs}', "");
Expect(0, 77823, '\p{egyptianhieroglyphs}', "");
Expect(1, 77823, '\p{^egyptianhieroglyphs}', "");
Expect(1, 77823, '\P{egyptianhieroglyphs}', "");
Expect(0, 77823, '\P{^egyptianhieroglyphs}', "");
Expect(1, 78894, '\p{  EgyptianHieroglyphs}', "");
Expect(0, 78894, '\p{^  EgyptianHieroglyphs}', "");
Expect(0, 78894, '\P{  EgyptianHieroglyphs}', "");
Expect(1, 78894, '\P{^  EgyptianHieroglyphs}', "");
Expect(0, 77823, '\p{  EgyptianHieroglyphs}', "");
Expect(1, 77823, '\p{^  EgyptianHieroglyphs}', "");
Expect(1, 77823, '\P{  EgyptianHieroglyphs}', "");
Expect(0, 77823, '\P{^  EgyptianHieroglyphs}', "");
Error('\p{	/a/IS Egyptian-Hieroglyphs}');
Error('\P{	/a/IS Egyptian-Hieroglyphs}');
Expect(1, 78894, '\p{isegyptianhieroglyphs}', "");
Expect(0, 78894, '\p{^isegyptianhieroglyphs}', "");
Expect(0, 78894, '\P{isegyptianhieroglyphs}', "");
Expect(1, 78894, '\P{^isegyptianhieroglyphs}', "");
Expect(0, 77823, '\p{isegyptianhieroglyphs}', "");
Expect(1, 77823, '\p{^isegyptianhieroglyphs}', "");
Expect(1, 77823, '\P{isegyptianhieroglyphs}', "");
Expect(0, 77823, '\P{^isegyptianhieroglyphs}', "");
Expect(1, 78894, '\p{	 is-EGYPTIAN_hieroglyphs}', "");
Expect(0, 78894, '\p{^	 is-EGYPTIAN_hieroglyphs}', "");
Expect(0, 78894, '\P{	 is-EGYPTIAN_hieroglyphs}', "");
Expect(1, 78894, '\P{^	 is-EGYPTIAN_hieroglyphs}', "");
Expect(0, 77823, '\p{	 is-EGYPTIAN_hieroglyphs}', "");
Expect(1, 77823, '\p{^	 is-EGYPTIAN_hieroglyphs}', "");
Expect(1, 77823, '\P{	 is-EGYPTIAN_hieroglyphs}', "");
Expect(0, 77823, '\P{^	 is-EGYPTIAN_hieroglyphs}', "");
Error('\p{	-Egyp:=}');
Error('\P{	-Egyp:=}');
Expect(1, 78894, '\p{egyp}', "");
Expect(0, 78894, '\p{^egyp}', "");
Expect(0, 78894, '\P{egyp}', "");
Expect(1, 78894, '\P{^egyp}', "");
Expect(0, 77823, '\p{egyp}', "");
Expect(1, 77823, '\p{^egyp}', "");
Expect(1, 77823, '\P{egyp}', "");
Expect(0, 77823, '\P{^egyp}', "");
Expect(1, 78894, '\p{-egyp}', "");
Expect(0, 78894, '\p{^-egyp}', "");
Expect(0, 78894, '\P{-egyp}', "");
Expect(1, 78894, '\P{^-egyp}', "");
Expect(0, 77823, '\p{-egyp}', "");
Expect(1, 77823, '\p{^-egyp}', "");
Expect(1, 77823, '\P{-egyp}', "");
Expect(0, 77823, '\P{^-egyp}', "");
Error('\p{/a/_IS	EGYP}');
Error('\P{/a/_IS	EGYP}');
Expect(1, 78894, '\p{isegyp}', "");
Expect(0, 78894, '\p{^isegyp}', "");
Expect(0, 78894, '\P{isegyp}', "");
Expect(1, 78894, '\P{^isegyp}', "");
Expect(0, 77823, '\p{isegyp}', "");
Expect(1, 77823, '\p{^isegyp}', "");
Expect(1, 77823, '\P{isegyp}', "");
Expect(0, 77823, '\P{^isegyp}', "");
Expect(1, 78894, '\p{	 ISEGYP}', "");
Expect(0, 78894, '\p{^	 ISEGYP}', "");
Expect(0, 78894, '\P{	 ISEGYP}', "");
Expect(1, 78894, '\P{^	 ISEGYP}', "");
Expect(0, 77823, '\p{	 ISEGYP}', "");
Expect(1, 77823, '\p{^	 ISEGYP}', "");
Expect(1, 77823, '\P{	 ISEGYP}', "");
Expect(0, 77823, '\P{^	 ISEGYP}', "");
Error('\p{/a/ -AEGEANNUMBERS}');
Error('\P{/a/ -AEGEANNUMBERS}');
Expect(1, 65855, '\p{aegeannumbers}', "");
Expect(0, 65855, '\p{^aegeannumbers}', "");
Expect(0, 65855, '\P{aegeannumbers}', "");
Expect(1, 65855, '\P{^aegeannumbers}', "");
Expect(0, 65791, '\p{aegeannumbers}', "");
Expect(1, 65791, '\p{^aegeannumbers}', "");
Expect(1, 65791, '\P{aegeannumbers}', "");
Expect(0, 65791, '\P{^aegeannumbers}', "");
Expect(1, 65855, '\p{- Aegean-NUMBERS}', "");
Expect(0, 65855, '\p{^- Aegean-NUMBERS}', "");
Expect(0, 65855, '\P{- Aegean-NUMBERS}', "");
Expect(1, 65855, '\P{^- Aegean-NUMBERS}', "");
Expect(0, 65791, '\p{- Aegean-NUMBERS}', "");
Expect(1, 65791, '\p{^- Aegean-NUMBERS}', "");
Expect(1, 65791, '\P{- Aegean-NUMBERS}', "");
Expect(0, 65791, '\P{^- Aegean-NUMBERS}', "");
Error('\p{_	Is-aegean	Numbers/a/}');
Error('\P{_	Is-aegean	Numbers/a/}');
Expect(1, 65855, '\p{isaegeannumbers}', "");
Expect(0, 65855, '\p{^isaegeannumbers}', "");
Expect(0, 65855, '\P{isaegeannumbers}', "");
Expect(1, 65855, '\P{^isaegeannumbers}', "");
Expect(0, 65791, '\p{isaegeannumbers}', "");
Expect(1, 65791, '\p{^isaegeannumbers}', "");
Expect(1, 65791, '\P{isaegeannumbers}', "");
Expect(0, 65791, '\P{^isaegeannumbers}', "");
Expect(1, 65855, '\p{		IS	Aegean-Numbers}', "");
Expect(0, 65855, '\p{^		IS	Aegean-Numbers}', "");
Expect(0, 65855, '\P{		IS	Aegean-Numbers}', "");
Expect(1, 65855, '\P{^		IS	Aegean-Numbers}', "");
Expect(0, 65791, '\p{		IS	Aegean-Numbers}', "");
Expect(1, 65791, '\p{^		IS	Aegean-Numbers}', "");
Expect(1, 65791, '\P{		IS	Aegean-Numbers}', "");
Expect(0, 65791, '\P{^		IS	Aegean-Numbers}', "");
Error('\p{_:=IN Aegean-numbers}');
Error('\P{_:=IN Aegean-numbers}');
Expect(1, 65855, '\p{inaegeannumbers}', "");
Expect(0, 65855, '\p{^inaegeannumbers}', "");
Expect(0, 65855, '\P{inaegeannumbers}', "");
Expect(1, 65855, '\P{^inaegeannumbers}', "");
Expect(0, 65791, '\p{inaegeannumbers}', "");
Expect(1, 65791, '\p{^inaegeannumbers}', "");
Expect(1, 65791, '\P{inaegeannumbers}', "");
Expect(0, 65791, '\P{^inaegeannumbers}', "");
Expect(1, 65855, '\p{  In AegeanNumbers}', "");
Expect(0, 65855, '\p{^  In AegeanNumbers}', "");
Expect(0, 65855, '\P{  In AegeanNumbers}', "");
Expect(1, 65855, '\P{^  In AegeanNumbers}', "");
Expect(0, 65791, '\p{  In AegeanNumbers}', "");
Expect(1, 65791, '\p{^  In AegeanNumbers}', "");
Expect(1, 65791, '\P{  In AegeanNumbers}', "");
Expect(0, 65791, '\P{^  In AegeanNumbers}', "");
Error('\p{  BIDI:=Control}');
Error('\P{  BIDI:=Control}');
Expect(1, 8207, '\p{bidicontrol}', "");
Expect(0, 8207, '\p{^bidicontrol}', "");
Expect(0, 8207, '\P{bidicontrol}', "");
Expect(1, 8207, '\P{^bidicontrol}', "");
Expect(0, 8205, '\p{bidicontrol}', "");
Expect(1, 8205, '\p{^bidicontrol}', "");
Expect(1, 8205, '\P{bidicontrol}', "");
Expect(0, 8205, '\P{^bidicontrol}', "");
Expect(1, 8207, '\p{Bidi	Control}', "");
Expect(0, 8207, '\p{^Bidi	Control}', "");
Expect(0, 8207, '\P{Bidi	Control}', "");
Expect(1, 8207, '\P{^Bidi	Control}', "");
Expect(0, 8205, '\p{Bidi	Control}', "");
Expect(1, 8205, '\p{^Bidi	Control}', "");
Expect(1, 8205, '\P{Bidi	Control}', "");
Expect(0, 8205, '\P{^Bidi	Control}', "");
Error('\p{ -isBidi	CONTROL/a/}');
Error('\P{ -isBidi	CONTROL/a/}');
Expect(1, 8207, '\p{isbidicontrol}', "");
Expect(0, 8207, '\p{^isbidicontrol}', "");
Expect(0, 8207, '\P{isbidicontrol}', "");
Expect(1, 8207, '\P{^isbidicontrol}', "");
Expect(0, 8205, '\p{isbidicontrol}', "");
Expect(1, 8205, '\p{^isbidicontrol}', "");
Expect(1, 8205, '\P{isbidicontrol}', "");
Expect(0, 8205, '\P{^isbidicontrol}', "");
Expect(1, 8207, '\p{	-Is BidiControl}', "");
Expect(0, 8207, '\p{^	-Is BidiControl}', "");
Expect(0, 8207, '\P{	-Is BidiControl}', "");
Expect(1, 8207, '\P{^	-Is BidiControl}', "");
Expect(0, 8205, '\p{	-Is BidiControl}', "");
Expect(1, 8205, '\p{^	-Is BidiControl}', "");
Expect(1, 8205, '\P{	-Is BidiControl}', "");
Expect(0, 8205, '\P{^	-Is BidiControl}', "");
Error('\p{:=BIDIC}');
Error('\P{:=BIDIC}');
Expect(1, 8207, '\p{bidic}', "");
Expect(0, 8207, '\p{^bidic}', "");
Expect(0, 8207, '\P{bidic}', "");
Expect(1, 8207, '\P{^bidic}', "");
Expect(0, 8205, '\p{bidic}', "");
Expect(1, 8205, '\p{^bidic}', "");
Expect(1, 8205, '\P{bidic}', "");
Expect(0, 8205, '\P{^bidic}', "");
Expect(1, 8207, '\p{	-Bidi-c}', "");
Expect(0, 8207, '\p{^	-Bidi-c}', "");
Expect(0, 8207, '\P{	-Bidi-c}', "");
Expect(1, 8207, '\P{^	-Bidi-c}', "");
Expect(0, 8205, '\p{	-Bidi-c}', "");
Expect(1, 8205, '\p{^	-Bidi-c}', "");
Expect(1, 8205, '\P{	-Bidi-c}', "");
Expect(0, 8205, '\P{^	-Bidi-c}', "");
Error('\p{-:=IsBIDI_C}');
Error('\P{-:=IsBIDI_C}');
Expect(1, 8207, '\p{isbidic}', "");
Expect(0, 8207, '\p{^isbidic}', "");
Expect(0, 8207, '\P{isbidic}', "");
Expect(1, 8207, '\P{^isbidic}', "");
Expect(0, 8205, '\p{isbidic}', "");
Expect(1, 8205, '\p{^isbidic}', "");
Expect(1, 8205, '\P{isbidic}', "");
Expect(0, 8205, '\P{^isbidic}', "");
Expect(1, 8207, '\p{ Is_bidi-C}', "");
Expect(0, 8207, '\p{^ Is_bidi-C}', "");
Expect(0, 8207, '\P{ Is_bidi-C}', "");
Expect(1, 8207, '\P{^ Is_bidi-C}', "");
Expect(0, 8205, '\p{ Is_bidi-C}', "");
Expect(1, 8205, '\p{^ Is_bidi-C}', "");
Expect(1, 8205, '\P{ Is_bidi-C}', "");
Expect(0, 8205, '\P{^ Is_bidi-C}', "");
Error('\p{ /a/COMBINING Diacritical MARKS_ForSymbols}');
Error('\P{ /a/COMBINING Diacritical MARKS_ForSymbols}');
Expect(1, 8447, '\p{combiningdiacriticalmarksforsymbols}', "");
Expect(0, 8447, '\p{^combiningdiacriticalmarksforsymbols}', "");
Expect(0, 8447, '\P{combiningdiacriticalmarksforsymbols}', "");
Expect(1, 8447, '\P{^combiningdiacriticalmarksforsymbols}', "");
Expect(0, 8399, '\p{combiningdiacriticalmarksforsymbols}', "");
Expect(1, 8399, '\p{^combiningdiacriticalmarksforsymbols}', "");
Expect(1, 8399, '\P{combiningdiacriticalmarksforsymbols}', "");
Expect(0, 8399, '\P{^combiningdiacriticalmarksforsymbols}', "");
Expect(1, 8447, '\p{  Combining Diacritical Marks	for-symbols}', "");
Expect(0, 8447, '\p{^  Combining Diacritical Marks	for-symbols}', "");
Expect(0, 8447, '\P{  Combining Diacritical Marks	for-symbols}', "");
Expect(1, 8447, '\P{^  Combining Diacritical Marks	for-symbols}', "");
Expect(0, 8399, '\p{  Combining Diacritical Marks	for-symbols}', "");
Expect(1, 8399, '\p{^  Combining Diacritical Marks	for-symbols}', "");
Expect(1, 8399, '\P{  Combining Diacritical Marks	for-symbols}', "");
Expect(0, 8399, '\P{^  Combining Diacritical Marks	for-symbols}', "");
Error('\p{ is-Combining:=diacritical-Marks-For_symbols}');
Error('\P{ is-Combining:=diacritical-Marks-For_symbols}');
Expect(1, 8447, '\p{iscombiningdiacriticalmarksforsymbols}', "");
Expect(0, 8447, '\p{^iscombiningdiacriticalmarksforsymbols}', "");
Expect(0, 8447, '\P{iscombiningdiacriticalmarksforsymbols}', "");
Expect(1, 8447, '\P{^iscombiningdiacriticalmarksforsymbols}', "");
Expect(0, 8399, '\p{iscombiningdiacriticalmarksforsymbols}', "");
Expect(1, 8399, '\p{^iscombiningdiacriticalmarksforsymbols}', "");
Expect(1, 8399, '\P{iscombiningdiacriticalmarksforsymbols}', "");
Expect(0, 8399, '\P{^iscombiningdiacriticalmarksforsymbols}', "");
Expect(1, 8447, '\p{	Is-COMBINING-Diacritical-MarksFor symbols}', "");
Expect(0, 8447, '\p{^	Is-COMBINING-Diacritical-MarksFor symbols}', "");
Expect(0, 8447, '\P{	Is-COMBINING-Diacritical-MarksFor symbols}', "");
Expect(1, 8447, '\P{^	Is-COMBINING-Diacritical-MarksFor symbols}', "");
Expect(0, 8399, '\p{	Is-COMBINING-Diacritical-MarksFor symbols}', "");
Expect(1, 8399, '\p{^	Is-COMBINING-Diacritical-MarksFor symbols}', "");
Expect(1, 8399, '\P{	Is-COMBINING-Diacritical-MarksFor symbols}', "");
Expect(0, 8399, '\P{^	Is-COMBINING-Diacritical-MarksFor symbols}', "");
Error('\p{	In	COMBINING-Diacritical MarksFOR-SYMBOLS/a/}');
Error('\P{	In	COMBINING-Diacritical MarksFOR-SYMBOLS/a/}');
Expect(1, 8447, '\p{incombiningdiacriticalmarksforsymbols}', "");
Expect(0, 8447, '\p{^incombiningdiacriticalmarksforsymbols}', "");
Expect(0, 8447, '\P{incombiningdiacriticalmarksforsymbols}', "");
Expect(1, 8447, '\P{^incombiningdiacriticalmarksforsymbols}', "");
Expect(0, 8399, '\p{incombiningdiacriticalmarksforsymbols}', "");
Expect(1, 8399, '\p{^incombiningdiacriticalmarksforsymbols}', "");
Expect(1, 8399, '\P{incombiningdiacriticalmarksforsymbols}', "");
Expect(0, 8399, '\P{^incombiningdiacriticalmarksforsymbols}', "");
Expect(1, 8447, '\p{	INCombining	DIACRITICAL_MARKS-forSymbols}', "");
Expect(0, 8447, '\p{^	INCombining	DIACRITICAL_MARKS-forSymbols}', "");
Expect(0, 8447, '\P{	INCombining	DIACRITICAL_MARKS-forSymbols}', "");
Expect(1, 8447, '\P{^	INCombining	DIACRITICAL_MARKS-forSymbols}', "");
Expect(0, 8399, '\p{	INCombining	DIACRITICAL_MARKS-forSymbols}', "");
Expect(1, 8399, '\p{^	INCombining	DIACRITICAL_MARKS-forSymbols}', "");
Expect(1, 8399, '\P{	INCombining	DIACRITICAL_MARKS-forSymbols}', "");
Expect(0, 8399, '\P{^	INCombining	DIACRITICAL_MARKS-forSymbols}', "");
Error('\p{/a/-_COMBININGMARKS-For-SYMBOLS}');
Error('\P{/a/-_COMBININGMARKS-For-SYMBOLS}');
Expect(1, 8447, '\p{combiningmarksforsymbols}', "");
Expect(0, 8447, '\p{^combiningmarksforsymbols}', "");
Expect(0, 8447, '\P{combiningmarksforsymbols}', "");
Expect(1, 8447, '\P{^combiningmarksforsymbols}', "");
Expect(0, 8399, '\p{combiningmarksforsymbols}', "");
Expect(1, 8399, '\p{^combiningmarksforsymbols}', "");
Expect(1, 8399, '\P{combiningmarksforsymbols}', "");
Expect(0, 8399, '\P{^combiningmarksforsymbols}', "");
Expect(1, 8447, '\p{_combining-MARKS for SYMBOLS}', "");
Expect(0, 8447, '\p{^_combining-MARKS for SYMBOLS}', "");
Expect(0, 8447, '\P{_combining-MARKS for SYMBOLS}', "");
Expect(1, 8447, '\P{^_combining-MARKS for SYMBOLS}', "");
Expect(0, 8399, '\p{_combining-MARKS for SYMBOLS}', "");
Expect(1, 8399, '\p{^_combining-MARKS for SYMBOLS}', "");
Expect(1, 8399, '\P{_combining-MARKS for SYMBOLS}', "");
Expect(0, 8399, '\P{^_combining-MARKS for SYMBOLS}', "");
Error('\p{ /a/IsCombining	marks_for-Symbols}');
Error('\P{ /a/IsCombining	marks_for-Symbols}');
Expect(1, 8447, '\p{iscombiningmarksforsymbols}', "");
Expect(0, 8447, '\p{^iscombiningmarksforsymbols}', "");
Expect(0, 8447, '\P{iscombiningmarksforsymbols}', "");
Expect(1, 8447, '\P{^iscombiningmarksforsymbols}', "");
Expect(0, 8399, '\p{iscombiningmarksforsymbols}', "");
Expect(1, 8399, '\p{^iscombiningmarksforsymbols}', "");
Expect(1, 8399, '\P{iscombiningmarksforsymbols}', "");
Expect(0, 8399, '\P{^iscombiningmarksforsymbols}', "");
Expect(1, 8447, '\p{	_IS-COMBINING Marks	forSymbols}', "");
Expect(0, 8447, '\p{^	_IS-COMBINING Marks	forSymbols}', "");
Expect(0, 8447, '\P{	_IS-COMBINING Marks	forSymbols}', "");
Expect(1, 8447, '\P{^	_IS-COMBINING Marks	forSymbols}', "");
Expect(0, 8399, '\p{	_IS-COMBINING Marks	forSymbols}', "");
Expect(1, 8399, '\p{^	_IS-COMBINING Marks	forSymbols}', "");
Expect(1, 8399, '\P{	_IS-COMBINING Marks	forSymbols}', "");
Expect(0, 8399, '\P{^	_IS-COMBINING Marks	forSymbols}', "");
Error('\p{ In:=combining_Marks-for_SYMBOLS}');
Error('\P{ In:=combining_Marks-for_SYMBOLS}');
Expect(1, 8447, '\p{incombiningmarksforsymbols}', "");
Expect(0, 8447, '\p{^incombiningmarksforsymbols}', "");
Expect(0, 8447, '\P{incombiningmarksforsymbols}', "");
Expect(1, 8447, '\P{^incombiningmarksforsymbols}', "");
Expect(0, 8399, '\p{incombiningmarksforsymbols}', "");
Expect(1, 8399, '\p{^incombiningmarksforsymbols}', "");
Expect(1, 8399, '\P{incombiningmarksforsymbols}', "");
Expect(0, 8399, '\P{^incombiningmarksforsymbols}', "");
Expect(1, 8447, '\p{-_inCombining	marksfor_SYMBOLS}', "");
Expect(0, 8447, '\p{^-_inCombining	marksfor_SYMBOLS}', "");
Expect(0, 8447, '\P{-_inCombining	marksfor_SYMBOLS}', "");
Expect(1, 8447, '\P{^-_inCombining	marksfor_SYMBOLS}', "");
Expect(0, 8399, '\p{-_inCombining	marksfor_SYMBOLS}', "");
Expect(1, 8399, '\p{^-_inCombining	marksfor_SYMBOLS}', "");
Expect(1, 8399, '\P{-_inCombining	marksfor_SYMBOLS}', "");
Expect(0, 8399, '\P{^-_inCombining	marksfor_SYMBOLS}', "");
Error('\p{/a/ smallForm_variants}');
Error('\P{/a/ smallForm_variants}');
Expect(1, 65135, '\p{smallformvariants}', "");
Expect(0, 65135, '\p{^smallformvariants}', "");
Expect(0, 65135, '\P{smallformvariants}', "");
Expect(1, 65135, '\P{^smallformvariants}', "");
Expect(0, 65103, '\p{smallformvariants}', "");
Expect(1, 65103, '\p{^smallformvariants}', "");
Expect(1, 65103, '\P{smallformvariants}', "");
Expect(0, 65103, '\P{^smallformvariants}', "");
Expect(1, 65135, '\p{--small_Form variants}', "");
Expect(0, 65135, '\p{^--small_Form variants}', "");
Expect(0, 65135, '\P{--small_Form variants}', "");
Expect(1, 65135, '\P{^--small_Form variants}', "");
Expect(0, 65103, '\p{--small_Form variants}', "");
Expect(1, 65103, '\p{^--small_Form variants}', "");
Expect(1, 65103, '\P{--small_Form variants}', "");
Expect(0, 65103, '\P{^--small_Form variants}', "");
Error('\p{ :=Is small-FormVARIANTS}');
Error('\P{ :=Is small-FormVARIANTS}');
Expect(1, 65135, '\p{issmallformvariants}', "");
Expect(0, 65135, '\p{^issmallformvariants}', "");
Expect(0, 65135, '\P{issmallformvariants}', "");
Expect(1, 65135, '\P{^issmallformvariants}', "");
Expect(0, 65103, '\p{issmallformvariants}', "");
Expect(1, 65103, '\p{^issmallformvariants}', "");
Expect(1, 65103, '\P{issmallformvariants}', "");
Expect(0, 65103, '\P{^issmallformvariants}', "");
Expect(1, 65135, '\p{	 IS-SMALL FormVariants}', "");
Expect(0, 65135, '\p{^	 IS-SMALL FormVariants}', "");
Expect(0, 65135, '\P{	 IS-SMALL FormVariants}', "");
Expect(1, 65135, '\P{^	 IS-SMALL FormVariants}', "");
Expect(0, 65103, '\p{	 IS-SMALL FormVariants}', "");
Expect(1, 65103, '\p{^	 IS-SMALL FormVariants}', "");
Expect(1, 65103, '\P{	 IS-SMALL FormVariants}', "");
Expect(0, 65103, '\P{^	 IS-SMALL FormVariants}', "");
Error('\p{:=	IN-smallForm-Variants}');
Error('\P{:=	IN-smallForm-Variants}');
Expect(1, 65135, '\p{insmallformvariants}', "");
Expect(0, 65135, '\p{^insmallformvariants}', "");
Expect(0, 65135, '\P{insmallformvariants}', "");
Expect(1, 65135, '\P{^insmallformvariants}', "");
Expect(0, 65103, '\p{insmallformvariants}', "");
Expect(1, 65103, '\p{^insmallformvariants}', "");
Expect(1, 65103, '\P{insmallformvariants}', "");
Expect(0, 65103, '\P{^insmallformvariants}', "");
Expect(1, 65135, '\p{-In SMALL FORM	VARIANTS}', "");
Expect(0, 65135, '\p{^-In SMALL FORM	VARIANTS}', "");
Expect(0, 65135, '\P{-In SMALL FORM	VARIANTS}', "");
Expect(1, 65135, '\P{^-In SMALL FORM	VARIANTS}', "");
Expect(0, 65103, '\p{-In SMALL FORM	VARIANTS}', "");
Expect(1, 65103, '\p{^-In SMALL FORM	VARIANTS}', "");
Expect(1, 65103, '\P{-In SMALL FORM	VARIANTS}', "");
Expect(0, 65103, '\P{^-In SMALL FORM	VARIANTS}', "");
Error('\p{_ Tai:=THAM}');
Error('\P{_ Tai:=THAM}');
Expect(1, 6750, '\p{taitham}', "");
Expect(0, 6750, '\p{^taitham}', "");
Expect(0, 6750, '\P{taitham}', "");
Expect(1, 6750, '\P{^taitham}', "");
Expect(0, 6687, '\p{taitham}', "");
Expect(1, 6687, '\p{^taitham}', "");
Expect(1, 6687, '\P{taitham}', "");
Expect(0, 6687, '\P{^taitham}', "");
Expect(1, 6750, '\p{ _TaiTham}', "");
Expect(0, 6750, '\p{^ _TaiTham}', "");
Expect(0, 6750, '\P{ _TaiTham}', "");
Expect(1, 6750, '\P{^ _TaiTham}', "");
Expect(0, 6687, '\p{ _TaiTham}', "");
Expect(1, 6687, '\p{^ _TaiTham}', "");
Expect(1, 6687, '\P{ _TaiTham}', "");
Expect(0, 6687, '\P{^ _TaiTham}', "");
Error('\p{__Is_Taitham/a/}');
Error('\P{__Is_Taitham/a/}');
Expect(1, 6750, '\p{istaitham}', "");
Expect(0, 6750, '\p{^istaitham}', "");
Expect(0, 6750, '\P{istaitham}', "");
Expect(1, 6750, '\P{^istaitham}', "");
Expect(0, 6687, '\p{istaitham}', "");
Expect(1, 6687, '\p{^istaitham}', "");
Expect(1, 6687, '\P{istaitham}', "");
Expect(0, 6687, '\P{^istaitham}', "");
Expect(1, 6750, '\p{	 is_Tai THAM}', "");
Expect(0, 6750, '\p{^	 is_Tai THAM}', "");
Expect(0, 6750, '\P{	 is_Tai THAM}', "");
Expect(1, 6750, '\P{^	 is_Tai THAM}', "");
Expect(0, 6687, '\p{	 is_Tai THAM}', "");
Expect(1, 6687, '\p{^	 is_Tai THAM}', "");
Expect(1, 6687, '\P{	 is_Tai THAM}', "");
Expect(0, 6687, '\P{^	 is_Tai THAM}', "");
Error('\p{:=	_Lana}');
Error('\P{:=	_Lana}');
Expect(1, 6750, '\p{lana}', "");
Expect(0, 6750, '\p{^lana}', "");
Expect(0, 6750, '\P{lana}', "");
Expect(1, 6750, '\P{^lana}', "");
Expect(0, 6687, '\p{lana}', "");
Expect(1, 6687, '\p{^lana}', "");
Expect(1, 6687, '\P{lana}', "");
Expect(0, 6687, '\P{^lana}', "");
Expect(1, 6750, '\p{_Lana}', "");
Expect(0, 6750, '\p{^_Lana}', "");
Expect(0, 6750, '\P{_Lana}', "");
Expect(1, 6750, '\P{^_Lana}', "");
Expect(0, 6687, '\p{_Lana}', "");
Expect(1, 6687, '\p{^_Lana}', "");
Expect(1, 6687, '\P{_Lana}', "");
Expect(0, 6687, '\P{^_Lana}', "");
Error('\p{-is	LANA:=}');
Error('\P{-is	LANA:=}');
Expect(1, 6750, '\p{islana}', "");
Expect(0, 6750, '\p{^islana}', "");
Expect(0, 6750, '\P{islana}', "");
Expect(1, 6750, '\P{^islana}', "");
Expect(0, 6687, '\p{islana}', "");
Expect(1, 6687, '\p{^islana}', "");
Expect(1, 6687, '\P{islana}', "");
Expect(0, 6687, '\P{^islana}', "");
Expect(1, 6750, '\p{-ISLana}', "");
Expect(0, 6750, '\p{^-ISLana}', "");
Expect(0, 6750, '\P{-ISLana}', "");
Expect(1, 6750, '\P{^-ISLana}', "");
Expect(0, 6687, '\p{-ISLana}', "");
Expect(1, 6687, '\p{^-ISLana}', "");
Expect(1, 6687, '\P{-ISLana}', "");
Expect(0, 6687, '\P{^-ISLana}', "");
Error('\p{_/a/nko}');
Error('\P{_/a/nko}');
Expect(1, 2042, '\p{nko}', "");
Expect(0, 2042, '\p{^nko}', "");
Expect(0, 2042, '\P{nko}', "");
Expect(1, 2042, '\P{^nko}', "");
Expect(0, 1983, '\p{nko}', "");
Expect(1, 1983, '\p{^nko}', "");
Expect(1, 1983, '\P{nko}', "");
Expect(0, 1983, '\P{^nko}', "");
Expect(1, 2042, '\p{-_nko}', "");
Expect(0, 2042, '\p{^-_nko}', "");
Expect(0, 2042, '\P{-_nko}', "");
Expect(1, 2042, '\P{^-_nko}', "");
Expect(0, 1983, '\p{-_nko}', "");
Expect(1, 1983, '\p{^-_nko}', "");
Expect(1, 1983, '\P{-_nko}', "");
Expect(0, 1983, '\P{^-_nko}', "");
Error('\p{-_ISNko/a/}');
Error('\P{-_ISNko/a/}');
Expect(1, 2042, '\p{isnko}', "");
Expect(0, 2042, '\p{^isnko}', "");
Expect(0, 2042, '\P{isnko}', "");
Expect(1, 2042, '\P{^isnko}', "");
Expect(0, 1983, '\p{isnko}', "");
Expect(1, 1983, '\p{^isnko}', "");
Expect(1, 1983, '\P{isnko}', "");
Expect(0, 1983, '\P{^isnko}', "");
Expect(1, 2042, '\p{ is_NKO}', "");
Expect(0, 2042, '\p{^ is_NKO}', "");
Expect(0, 2042, '\P{ is_NKO}', "");
Expect(1, 2042, '\P{^ is_NKO}', "");
Expect(0, 1983, '\p{ is_NKO}', "");
Expect(1, 1983, '\p{^ is_NKO}', "");
Expect(1, 1983, '\P{ is_NKO}', "");
Expect(0, 1983, '\P{^ is_NKO}', "");
Error('\p{:= _Nkoo}');
Error('\P{:= _Nkoo}');
Expect(1, 2042, '\p{nkoo}', "");
Expect(0, 2042, '\p{^nkoo}', "");
Expect(0, 2042, '\P{nkoo}', "");
Expect(1, 2042, '\P{^nkoo}', "");
Expect(0, 1983, '\p{nkoo}', "");
Expect(1, 1983, '\p{^nkoo}', "");
Expect(1, 1983, '\P{nkoo}', "");
Expect(0, 1983, '\P{^nkoo}', "");
Expect(1, 2042, '\p{ nkoo}', "");
Expect(0, 2042, '\p{^ nkoo}', "");
Expect(0, 2042, '\P{ nkoo}', "");
Expect(1, 2042, '\P{^ nkoo}', "");
Expect(0, 1983, '\p{ nkoo}', "");
Expect(1, 1983, '\p{^ nkoo}', "");
Expect(1, 1983, '\P{ nkoo}', "");
Expect(0, 1983, '\P{^ nkoo}', "");
Error('\p{/a/ -IsNkoo}');
Error('\P{/a/ -IsNkoo}');
Expect(1, 2042, '\p{isnkoo}', "");
Expect(0, 2042, '\p{^isnkoo}', "");
Expect(0, 2042, '\P{isnkoo}', "");
Expect(1, 2042, '\P{^isnkoo}', "");
Expect(0, 1983, '\p{isnkoo}', "");
Expect(1, 1983, '\p{^isnkoo}', "");
Expect(1, 1983, '\P{isnkoo}', "");
Expect(0, 1983, '\P{^isnkoo}', "");
Expect(1, 2042, '\p{_is	NKOO}', "");
Expect(0, 2042, '\p{^_is	NKOO}', "");
Expect(0, 2042, '\P{_is	NKOO}', "");
Expect(1, 2042, '\P{^_is	NKOO}', "");
Expect(0, 1983, '\p{_is	NKOO}', "");
Expect(1, 1983, '\p{^_is	NKOO}', "");
Expect(1, 1983, '\P{_is	NKOO}', "");
Expect(0, 1983, '\P{^_is	NKOO}', "");
Error('\p{/a/		Mathematical_Alphanumeric Symbols}');
Error('\P{/a/		Mathematical_Alphanumeric Symbols}');
Expect(1, 120831, '\p{mathematicalalphanumericsymbols}', "");
Expect(0, 120831, '\p{^mathematicalalphanumericsymbols}', "");
Expect(0, 120831, '\P{mathematicalalphanumericsymbols}', "");
Expect(1, 120831, '\P{^mathematicalalphanumericsymbols}', "");
Expect(0, 119807, '\p{mathematicalalphanumericsymbols}', "");
Expect(1, 119807, '\p{^mathematicalalphanumericsymbols}', "");
Expect(1, 119807, '\P{mathematicalalphanumericsymbols}', "");
Expect(0, 119807, '\P{^mathematicalalphanumericsymbols}', "");
Expect(1, 120831, '\p{	MathematicalAlphanumeric_SYMBOLS}', "");
Expect(0, 120831, '\p{^	MathematicalAlphanumeric_SYMBOLS}', "");
Expect(0, 120831, '\P{	MathematicalAlphanumeric_SYMBOLS}', "");
Expect(1, 120831, '\P{^	MathematicalAlphanumeric_SYMBOLS}', "");
Expect(0, 119807, '\p{	MathematicalAlphanumeric_SYMBOLS}', "");
Expect(1, 119807, '\p{^	MathematicalAlphanumeric_SYMBOLS}', "");
Expect(1, 119807, '\P{	MathematicalAlphanumeric_SYMBOLS}', "");
Expect(0, 119807, '\P{^	MathematicalAlphanumeric_SYMBOLS}', "");
Error('\p{  IS_Mathematical ALPHANUMERIC-Symbols:=}');
Error('\P{  IS_Mathematical ALPHANUMERIC-Symbols:=}');
Expect(1, 120831, '\p{ismathematicalalphanumericsymbols}', "");
Expect(0, 120831, '\p{^ismathematicalalphanumericsymbols}', "");
Expect(0, 120831, '\P{ismathematicalalphanumericsymbols}', "");
Expect(1, 120831, '\P{^ismathematicalalphanumericsymbols}', "");
Expect(0, 119807, '\p{ismathematicalalphanumericsymbols}', "");
Expect(1, 119807, '\p{^ismathematicalalphanumericsymbols}', "");
Expect(1, 119807, '\P{ismathematicalalphanumericsymbols}', "");
Expect(0, 119807, '\P{^ismathematicalalphanumericsymbols}', "");
Expect(1, 120831, '\p{--ISmathematical	alphanumeric-Symbols}', "");
Expect(0, 120831, '\p{^--ISmathematical	alphanumeric-Symbols}', "");
Expect(0, 120831, '\P{--ISmathematical	alphanumeric-Symbols}', "");
Expect(1, 120831, '\P{^--ISmathematical	alphanumeric-Symbols}', "");
Expect(0, 119807, '\p{--ISmathematical	alphanumeric-Symbols}', "");
Expect(1, 119807, '\p{^--ISmathematical	alphanumeric-Symbols}', "");
Expect(1, 119807, '\P{--ISmathematical	alphanumeric-Symbols}', "");
Expect(0, 119807, '\P{^--ISmathematical	alphanumeric-Symbols}', "");
Error('\p{_/a/In Mathematical_Alphanumeric-Symbols}');
Error('\P{_/a/In Mathematical_Alphanumeric-Symbols}');
Expect(1, 120831, '\p{inmathematicalalphanumericsymbols}', "");
Expect(0, 120831, '\p{^inmathematicalalphanumericsymbols}', "");
Expect(0, 120831, '\P{inmathematicalalphanumericsymbols}', "");
Expect(1, 120831, '\P{^inmathematicalalphanumericsymbols}', "");
Expect(0, 119807, '\p{inmathematicalalphanumericsymbols}', "");
Expect(1, 119807, '\p{^inmathematicalalphanumericsymbols}', "");
Expect(1, 119807, '\P{inmathematicalalphanumericsymbols}', "");
Expect(0, 119807, '\P{^inmathematicalalphanumericsymbols}', "");
Expect(1, 120831, '\p{-_Inmathematical alphanumeric Symbols}', "");
Expect(0, 120831, '\p{^-_Inmathematical alphanumeric Symbols}', "");
Expect(0, 120831, '\P{-_Inmathematical alphanumeric Symbols}', "");
Expect(1, 120831, '\P{^-_Inmathematical alphanumeric Symbols}', "");
Expect(0, 119807, '\p{-_Inmathematical alphanumeric Symbols}', "");
Expect(1, 119807, '\p{^-_Inmathematical alphanumeric Symbols}', "");
Expect(1, 119807, '\P{-_Inmathematical alphanumeric Symbols}', "");
Expect(0, 119807, '\P{^-_Inmathematical alphanumeric Symbols}', "");
Error('\p{/a/  Lydian}');
Error('\P{/a/  Lydian}');
Expect(1, 67897, '\p{lydian}', "");
Expect(0, 67897, '\p{^lydian}', "");
Expect(0, 67897, '\P{lydian}', "");
Expect(1, 67897, '\P{^lydian}', "");
Expect(0, 67871, '\p{lydian}', "");
Expect(1, 67871, '\p{^lydian}', "");
Expect(1, 67871, '\P{lydian}', "");
Expect(0, 67871, '\P{^lydian}', "");
Expect(1, 67897, '\p{_-Lydian}', "");
Expect(0, 67897, '\p{^_-Lydian}', "");
Expect(0, 67897, '\P{_-Lydian}', "");
Expect(1, 67897, '\P{^_-Lydian}', "");
Expect(0, 67871, '\p{_-Lydian}', "");
Expect(1, 67871, '\p{^_-Lydian}', "");
Expect(1, 67871, '\P{_-Lydian}', "");
Expect(0, 67871, '\P{^_-Lydian}', "");
Error('\p{/a/ is-lydian}');
Error('\P{/a/ is-lydian}');
Expect(1, 67897, '\p{islydian}', "");
Expect(0, 67897, '\p{^islydian}', "");
Expect(0, 67897, '\P{islydian}', "");
Expect(1, 67897, '\P{^islydian}', "");
Expect(0, 67871, '\p{islydian}', "");
Expect(1, 67871, '\p{^islydian}', "");
Expect(1, 67871, '\P{islydian}', "");
Expect(0, 67871, '\P{^islydian}', "");
Expect(1, 67897, '\p{	islydian}', "");
Expect(0, 67897, '\p{^	islydian}', "");
Expect(0, 67897, '\P{	islydian}', "");
Expect(1, 67897, '\P{^	islydian}', "");
Expect(0, 67871, '\p{	islydian}', "");
Expect(1, 67871, '\p{^	islydian}', "");
Expect(1, 67871, '\P{	islydian}', "");
Expect(0, 67871, '\P{^	islydian}', "");
Error('\p{	Lydi/a/}');
Error('\P{	Lydi/a/}');
Expect(1, 67897, '\p{lydi}', "");
Expect(0, 67897, '\p{^lydi}', "");
Expect(0, 67897, '\P{lydi}', "");
Expect(1, 67897, '\P{^lydi}', "");
Expect(0, 67871, '\p{lydi}', "");
Expect(1, 67871, '\p{^lydi}', "");
Expect(1, 67871, '\P{lydi}', "");
Expect(0, 67871, '\P{^lydi}', "");
Expect(1, 67897, '\p{_ Lydi}', "");
Expect(0, 67897, '\p{^_ Lydi}', "");
Expect(0, 67897, '\P{_ Lydi}', "");
Expect(1, 67897, '\P{^_ Lydi}', "");
Expect(0, 67871, '\p{_ Lydi}', "");
Expect(1, 67871, '\p{^_ Lydi}', "");
Expect(1, 67871, '\P{_ Lydi}', "");
Expect(0, 67871, '\P{^_ Lydi}', "");
Error('\p{-:=is LYDI}');
Error('\P{-:=is LYDI}');
Expect(1, 67897, '\p{islydi}', "");
Expect(0, 67897, '\p{^islydi}', "");
Expect(0, 67897, '\P{islydi}', "");
Expect(1, 67897, '\P{^islydi}', "");
Expect(0, 67871, '\p{islydi}', "");
Expect(1, 67871, '\p{^islydi}', "");
Expect(1, 67871, '\P{islydi}', "");
Expect(0, 67871, '\P{^islydi}', "");
Expect(1, 67897, '\p{__Is-Lydi}', "");
Expect(0, 67897, '\p{^__Is-Lydi}', "");
Expect(0, 67897, '\P{__Is-Lydi}', "");
Expect(1, 67897, '\P{^__Is-Lydi}', "");
Expect(0, 67871, '\p{__Is-Lydi}', "");
Expect(1, 67871, '\p{^__Is-Lydi}', "");
Expect(1, 67871, '\P{__Is-Lydi}', "");
Expect(0, 67871, '\P{^__Is-Lydi}', "");
Error('\p{_-GEORGIAN/a/supplement}');
Error('\P{_-GEORGIAN/a/supplement}');
Expect(1, 11567, '\p{georgiansupplement}', "");
Expect(0, 11567, '\p{^georgiansupplement}', "");
Expect(0, 11567, '\P{georgiansupplement}', "");
Expect(1, 11567, '\P{^georgiansupplement}', "");
Expect(0, 11519, '\p{georgiansupplement}', "");
Expect(1, 11519, '\p{^georgiansupplement}', "");
Expect(1, 11519, '\P{georgiansupplement}', "");
Expect(0, 11519, '\P{^georgiansupplement}', "");
Expect(1, 11567, '\p{	 Georgian	Supplement}', "");
Expect(0, 11567, '\p{^	 Georgian	Supplement}', "");
Expect(0, 11567, '\P{	 Georgian	Supplement}', "");
Expect(1, 11567, '\P{^	 Georgian	Supplement}', "");
Expect(0, 11519, '\p{	 Georgian	Supplement}', "");
Expect(1, 11519, '\p{^	 Georgian	Supplement}', "");
Expect(1, 11519, '\P{	 Georgian	Supplement}', "");
Expect(0, 11519, '\P{^	 Georgian	Supplement}', "");
Error('\p{	/a/IS_georgian	Supplement}');
Error('\P{	/a/IS_georgian	Supplement}');
Expect(1, 11567, '\p{isgeorgiansupplement}', "");
Expect(0, 11567, '\p{^isgeorgiansupplement}', "");
Expect(0, 11567, '\P{isgeorgiansupplement}', "");
Expect(1, 11567, '\P{^isgeorgiansupplement}', "");
Expect(0, 11519, '\p{isgeorgiansupplement}', "");
Expect(1, 11519, '\p{^isgeorgiansupplement}', "");
Expect(1, 11519, '\P{isgeorgiansupplement}', "");
Expect(0, 11519, '\P{^isgeorgiansupplement}', "");
Expect(1, 11567, '\p{-Is_GEORGIAN supplement}', "");
Expect(0, 11567, '\p{^-Is_GEORGIAN supplement}', "");
Expect(0, 11567, '\P{-Is_GEORGIAN supplement}', "");
Expect(1, 11567, '\P{^-Is_GEORGIAN supplement}', "");
Expect(0, 11519, '\p{-Is_GEORGIAN supplement}', "");
Expect(1, 11519, '\p{^-Is_GEORGIAN supplement}', "");
Expect(1, 11519, '\P{-Is_GEORGIAN supplement}', "");
Expect(0, 11519, '\P{^-Is_GEORGIAN supplement}', "");
Error('\p{ 	IN_GEORGIAN-Supplement:=}');
Error('\P{ 	IN_GEORGIAN-Supplement:=}');
Expect(1, 11567, '\p{ingeorgiansupplement}', "");
Expect(0, 11567, '\p{^ingeorgiansupplement}', "");
Expect(0, 11567, '\P{ingeorgiansupplement}', "");
Expect(1, 11567, '\P{^ingeorgiansupplement}', "");
Expect(0, 11519, '\p{ingeorgiansupplement}', "");
Expect(1, 11519, '\p{^ingeorgiansupplement}', "");
Expect(1, 11519, '\P{ingeorgiansupplement}', "");
Expect(0, 11519, '\P{^ingeorgiansupplement}', "");
Expect(1, 11567, '\p{ -InGEORGIAN_Supplement}', "");
Expect(0, 11567, '\p{^ -InGEORGIAN_Supplement}', "");
Expect(0, 11567, '\P{ -InGEORGIAN_Supplement}', "");
Expect(1, 11567, '\P{^ -InGEORGIAN_Supplement}', "");
Expect(0, 11519, '\p{ -InGEORGIAN_Supplement}', "");
Expect(1, 11519, '\p{^ -InGEORGIAN_Supplement}', "");
Expect(1, 11519, '\P{ -InGEORGIAN_Supplement}', "");
Expect(0, 11519, '\P{^ -InGEORGIAN_Supplement}', "");
Error('\p{_Letter/a/}');
Error('\P{_Letter/a/}');
Expect(1, 90, '\p{letter}', "");
Expect(0, 90, '\p{^letter}', "");
Expect(0, 90, '\P{letter}', "");
Expect(1, 90, '\P{^letter}', "");
Expect(0, 64, '\p{letter}', "");
Expect(1, 64, '\p{^letter}', "");
Expect(1, 64, '\P{letter}', "");
Expect(0, 64, '\P{^letter}', "");
Error('\p{/a/_	is_Letter}');
Error('\P{/a/_	is_Letter}');
Expect(1, 90, '\p{isletter}', "");
Expect(0, 90, '\p{^isletter}', "");
Expect(0, 90, '\P{isletter}', "");
Expect(1, 90, '\P{^isletter}', "");
Expect(0, 64, '\p{isletter}', "");
Expect(1, 64, '\p{^isletter}', "");
Expect(1, 64, '\P{isletter}', "");
Expect(0, 64, '\P{^isletter}', "");
Expect(1, 90, '\p{ -Is-Letter}', "");
Expect(0, 90, '\p{^ -Is-Letter}', "");
Expect(0, 90, '\P{ -Is-Letter}', "");
Expect(1, 90, '\P{^ -Is-Letter}', "");
Expect(0, 64, '\p{ -Is-Letter}', "");
Expect(1, 64, '\p{^ -Is-Letter}', "");
Expect(1, 64, '\P{ -Is-Letter}', "");
Expect(0, 64, '\P{^ -Is-Letter}', "");
Error('\p{	:=L}');
Error('\P{	:=L}');
Expect(1, 90, '\p{l}', "");
Expect(0, 90, '\p{^l}', "");
Expect(0, 90, '\P{l}', "");
Expect(1, 90, '\P{^l}', "");
Expect(0, 64, '\p{l}', "");
Expect(1, 64, '\p{^l}', "");
Expect(1, 64, '\P{l}', "");
Expect(0, 64, '\P{^l}', "");
Expect(1, 90, '\p{ L}', "");
Expect(0, 90, '\p{^ L}', "");
Expect(0, 90, '\P{ L}', "");
Expect(1, 90, '\P{^ L}', "");
Expect(0, 64, '\p{ L}', "");
Expect(1, 64, '\p{^ L}', "");
Expect(1, 64, '\P{ L}', "");
Expect(0, 64, '\P{^ L}', "");
Error('\p{ :=IS L}');
Error('\P{ :=IS L}');
Expect(1, 90, '\p{isl}', "");
Expect(0, 90, '\p{^isl}', "");
Expect(0, 90, '\P{isl}', "");
Expect(1, 90, '\P{^isl}', "");
Expect(0, 64, '\p{isl}', "");
Expect(1, 64, '\p{^isl}', "");
Expect(1, 64, '\P{isl}', "");
Expect(0, 64, '\P{^isl}', "");
Expect(1, 90, '\p{-Is-l}', "");
Expect(0, 90, '\p{^-Is-l}', "");
Expect(0, 90, '\P{-Is-l}', "");
Expect(1, 90, '\P{^-Is-l}', "");
Expect(0, 64, '\p{-Is-l}', "");
Expect(1, 64, '\p{^-Is-l}', "");
Expect(1, 64, '\P{-Is-l}', "");
Expect(0, 64, '\P{^-Is-l}', "");
Error('\p{--CYRILLICExtendedB/a/}');
Error('\P{--CYRILLICExtendedB/a/}');
Expect(1, 42655, '\p{cyrillicextendedb}', "");
Expect(0, 42655, '\p{^cyrillicextendedb}', "");
Expect(0, 42655, '\P{cyrillicextendedb}', "");
Expect(1, 42655, '\P{^cyrillicextendedb}', "");
Expect(0, 42559, '\p{cyrillicextendedb}', "");
Expect(1, 42559, '\p{^cyrillicextendedb}', "");
Expect(1, 42559, '\P{cyrillicextendedb}', "");
Expect(0, 42559, '\P{^cyrillicextendedb}', "");
Expect(1, 42655, '\p{- cyrillic Extended B}', "");
Expect(0, 42655, '\p{^- cyrillic Extended B}', "");
Expect(0, 42655, '\P{- cyrillic Extended B}', "");
Expect(1, 42655, '\P{^- cyrillic Extended B}', "");
Expect(0, 42559, '\p{- cyrillic Extended B}', "");
Expect(1, 42559, '\p{^- cyrillic Extended B}', "");
Expect(1, 42559, '\P{- cyrillic Extended B}', "");
Expect(0, 42559, '\P{^- cyrillic Extended B}', "");
Error('\p{/a/	-Is	CYRILLIC	Extended_B}');
Error('\P{/a/	-Is	CYRILLIC	Extended_B}');
Expect(1, 42655, '\p{iscyrillicextendedb}', "");
Expect(0, 42655, '\p{^iscyrillicextendedb}', "");
Expect(0, 42655, '\P{iscyrillicextendedb}', "");
Expect(1, 42655, '\P{^iscyrillicextendedb}', "");
Expect(0, 42559, '\p{iscyrillicextendedb}', "");
Expect(1, 42559, '\p{^iscyrillicextendedb}', "");
Expect(1, 42559, '\P{iscyrillicextendedb}', "");
Expect(0, 42559, '\P{^iscyrillicextendedb}', "");
Expect(1, 42655, '\p{	is Cyrillic EXTENDED	B}', "");
Expect(0, 42655, '\p{^	is Cyrillic EXTENDED	B}', "");
Expect(0, 42655, '\P{	is Cyrillic EXTENDED	B}', "");
Expect(1, 42655, '\P{^	is Cyrillic EXTENDED	B}', "");
Expect(0, 42559, '\p{	is Cyrillic EXTENDED	B}', "");
Expect(1, 42559, '\p{^	is Cyrillic EXTENDED	B}', "");
Expect(1, 42559, '\P{	is Cyrillic EXTENDED	B}', "");
Expect(0, 42559, '\P{^	is Cyrillic EXTENDED	B}', "");
Error('\p{/a/__INCyrillic	extended_b}');
Error('\P{/a/__INCyrillic	extended_b}');
Expect(1, 42655, '\p{incyrillicextendedb}', "");
Expect(0, 42655, '\p{^incyrillicextendedb}', "");
Expect(0, 42655, '\P{incyrillicextendedb}', "");
Expect(1, 42655, '\P{^incyrillicextendedb}', "");
Expect(0, 42559, '\p{incyrillicextendedb}', "");
Expect(1, 42559, '\p{^incyrillicextendedb}', "");
Expect(1, 42559, '\P{incyrillicextendedb}', "");
Expect(0, 42559, '\P{^incyrillicextendedb}', "");
Expect(1, 42655, '\p{--Incyrillic	Extended	B}', "");
Expect(0, 42655, '\p{^--Incyrillic	Extended	B}', "");
Expect(0, 42655, '\P{--Incyrillic	Extended	B}', "");
Expect(1, 42655, '\P{^--Incyrillic	Extended	B}', "");
Expect(0, 42559, '\p{--Incyrillic	Extended	B}', "");
Expect(1, 42559, '\p{^--Incyrillic	Extended	B}', "");
Expect(1, 42559, '\P{--Incyrillic	Extended	B}', "");
Expect(0, 42559, '\P{^--Incyrillic	Extended	B}', "");
Error('\p{:= emoticons}');
Error('\P{:= emoticons}');
Expect(1, 128591, '\p{emoticons}', "");
Expect(0, 128591, '\p{^emoticons}', "");
Expect(0, 128591, '\P{emoticons}', "");
Expect(1, 128591, '\P{^emoticons}', "");
Expect(0, 128511, '\p{emoticons}', "");
Expect(1, 128511, '\p{^emoticons}', "");
Expect(1, 128511, '\P{emoticons}', "");
Expect(0, 128511, '\P{^emoticons}', "");
Expect(1, 128591, '\p{	-EMOTICONS}', "");
Expect(0, 128591, '\p{^	-EMOTICONS}', "");
Expect(0, 128591, '\P{	-EMOTICONS}', "");
Expect(1, 128591, '\P{^	-EMOTICONS}', "");
Expect(0, 128511, '\p{	-EMOTICONS}', "");
Expect(1, 128511, '\p{^	-EMOTICONS}', "");
Expect(1, 128511, '\P{	-EMOTICONS}', "");
Expect(0, 128511, '\P{^	-EMOTICONS}', "");
Error('\p{/a/is_Emoticons}');
Error('\P{/a/is_Emoticons}');
Expect(1, 128591, '\p{isemoticons}', "");
Expect(0, 128591, '\p{^isemoticons}', "");
Expect(0, 128591, '\P{isemoticons}', "");
Expect(1, 128591, '\P{^isemoticons}', "");
Expect(0, 128511, '\p{isemoticons}', "");
Expect(1, 128511, '\p{^isemoticons}', "");
Expect(1, 128511, '\P{isemoticons}', "");
Expect(0, 128511, '\P{^isemoticons}', "");
Expect(1, 128591, '\p{- IS EMOTICONS}', "");
Expect(0, 128591, '\p{^- IS EMOTICONS}', "");
Expect(0, 128591, '\P{- IS EMOTICONS}', "");
Expect(1, 128591, '\P{^- IS EMOTICONS}', "");
Expect(0, 128511, '\p{- IS EMOTICONS}', "");
Expect(1, 128511, '\p{^- IS EMOTICONS}', "");
Expect(1, 128511, '\P{- IS EMOTICONS}', "");
Expect(0, 128511, '\P{^- IS EMOTICONS}', "");
Error('\p{	-inEMOTICONS:=}');
Error('\P{	-inEMOTICONS:=}');
Expect(1, 128591, '\p{inemoticons}', "");
Expect(0, 128591, '\p{^inemoticons}', "");
Expect(0, 128591, '\P{inemoticons}', "");
Expect(1, 128591, '\P{^inemoticons}', "");
Expect(0, 128511, '\p{inemoticons}', "");
Expect(1, 128511, '\p{^inemoticons}', "");
Expect(1, 128511, '\P{inemoticons}', "");
Expect(0, 128511, '\P{^inemoticons}', "");
Expect(1, 128591, '\p{-in	Emoticons}', "");
Expect(0, 128591, '\p{^-in	Emoticons}', "");
Expect(0, 128591, '\P{-in	Emoticons}', "");
Expect(1, 128591, '\P{^-in	Emoticons}', "");
Expect(0, 128511, '\p{-in	Emoticons}', "");
Expect(1, 128511, '\p{^-in	Emoticons}', "");
Expect(1, 128511, '\P{-in	Emoticons}', "");
Expect(0, 128511, '\P{^-in	Emoticons}', "");
Error('\p{:= HEBREW}');
Error('\P{:= HEBREW}');
Expect(1, 1479, '\p{hebrew}', "");
Expect(0, 1479, '\p{^hebrew}', "");
Expect(0, 1479, '\P{hebrew}', "");
Expect(1, 1479, '\P{^hebrew}', "");
Expect(0, 1424, '\p{hebrew}', "");
Expect(1, 1424, '\p{^hebrew}', "");
Expect(1, 1424, '\P{hebrew}', "");
Expect(0, 1424, '\P{^hebrew}', "");
Expect(1, 1479, '\p{ -hebrew}', "");
Expect(0, 1479, '\p{^ -hebrew}', "");
Expect(0, 1479, '\P{ -hebrew}', "");
Expect(1, 1479, '\P{^ -hebrew}', "");
Expect(0, 1424, '\p{ -hebrew}', "");
Expect(1, 1424, '\p{^ -hebrew}', "");
Expect(1, 1424, '\P{ -hebrew}', "");
Expect(0, 1424, '\P{^ -hebrew}', "");
Error('\p{:=ISHEBREW}');
Error('\P{:=ISHEBREW}');
Expect(1, 1479, '\p{ishebrew}', "");
Expect(0, 1479, '\p{^ishebrew}', "");
Expect(0, 1479, '\P{ishebrew}', "");
Expect(1, 1479, '\P{^ishebrew}', "");
Expect(0, 1424, '\p{ishebrew}', "");
Expect(1, 1424, '\p{^ishebrew}', "");
Expect(1, 1424, '\P{ishebrew}', "");
Expect(0, 1424, '\P{^ishebrew}', "");
Expect(1, 1479, '\p{ _IS-HEBREW}', "");
Expect(0, 1479, '\p{^ _IS-HEBREW}', "");
Expect(0, 1479, '\P{ _IS-HEBREW}', "");
Expect(1, 1479, '\P{^ _IS-HEBREW}', "");
Expect(0, 1424, '\p{ _IS-HEBREW}', "");
Expect(1, 1424, '\p{^ _IS-HEBREW}', "");
Expect(1, 1424, '\P{ _IS-HEBREW}', "");
Expect(0, 1424, '\P{^ _IS-HEBREW}', "");
Error('\p{_-hebr/a/}');
Error('\P{_-hebr/a/}');
Expect(1, 1479, '\p{hebr}', "");
Expect(0, 1479, '\p{^hebr}', "");
Expect(0, 1479, '\P{hebr}', "");
Expect(1, 1479, '\P{^hebr}', "");
Expect(0, 1424, '\p{hebr}', "");
Expect(1, 1424, '\p{^hebr}', "");
Expect(1, 1424, '\P{hebr}', "");
Expect(0, 1424, '\P{^hebr}', "");
Expect(1, 1479, '\p{-_Hebr}', "");
Expect(0, 1479, '\p{^-_Hebr}', "");
Expect(0, 1479, '\P{-_Hebr}', "");
Expect(1, 1479, '\P{^-_Hebr}', "");
Expect(0, 1424, '\p{-_Hebr}', "");
Expect(1, 1424, '\p{^-_Hebr}', "");
Expect(1, 1424, '\P{-_Hebr}', "");
Expect(0, 1424, '\P{^-_Hebr}', "");
Error('\p{		Is/a/Hebr}');
Error('\P{		Is/a/Hebr}');
Expect(1, 1479, '\p{ishebr}', "");
Expect(0, 1479, '\p{^ishebr}', "");
Expect(0, 1479, '\P{ishebr}', "");
Expect(1, 1479, '\P{^ishebr}', "");
Expect(0, 1424, '\p{ishebr}', "");
Expect(1, 1424, '\p{^ishebr}', "");
Expect(1, 1424, '\P{ishebr}', "");
Expect(0, 1424, '\P{^ishebr}', "");
Expect(1, 1479, '\p{-IS-hebr}', "");
Expect(0, 1479, '\p{^-IS-hebr}', "");
Expect(0, 1479, '\P{-IS-hebr}', "");
Expect(1, 1479, '\P{^-IS-hebr}', "");
Expect(0, 1424, '\p{-IS-hebr}', "");
Expect(1, 1424, '\p{^-IS-hebr}', "");
Expect(1, 1424, '\P{-IS-hebr}', "");
Expect(0, 1424, '\P{^-IS-hebr}', "");
Error('\p{ /a/Title}');
Error('\P{ /a/Title}');
Expect(1, 453, '\p{title}', "");
Expect(0, 453, '\p{^title}', "");
Expect(0, 453, '\P{title}', "");
Expect(1, 453, '\P{^title}', "");
Expect(0, 452, '\p{title}', "");
Expect(1, 452, '\p{^title}', "");
Expect(1, 452, '\P{title}', "");
Expect(0, 452, '\P{^title}', "");
Expect(1, 453, '\p{  title}', "");
Expect(0, 453, '\p{^  title}', "");
Expect(0, 453, '\P{  title}', "");
Expect(1, 453, '\P{^  title}', "");
Expect(0, 452, '\p{  title}', "");
Expect(1, 452, '\p{^  title}', "");
Expect(1, 452, '\P{  title}', "");
Expect(0, 452, '\P{^  title}', "");
Error('\p{/a/		Titlecase}');
Error('\P{/a/		Titlecase}');
Expect(1, 453, '\p{titlecase}', "");
Expect(0, 453, '\p{^titlecase}', "");
Expect(0, 453, '\P{titlecase}', "");
Expect(1, 453, '\P{^titlecase}', "");
Expect(0, 452, '\p{titlecase}', "");
Expect(1, 452, '\p{^titlecase}', "");
Expect(1, 452, '\P{titlecase}', "");
Expect(0, 452, '\P{^titlecase}', "");
Expect(1, 453, '\p{	TITLECASE}', "");
Expect(0, 453, '\p{^	TITLECASE}', "");
Expect(0, 453, '\P{	TITLECASE}', "");
Expect(1, 453, '\P{^	TITLECASE}', "");
Expect(0, 452, '\p{	TITLECASE}', "");
Expect(1, 452, '\p{^	TITLECASE}', "");
Expect(1, 452, '\P{	TITLECASE}', "");
Expect(0, 452, '\P{^	TITLECASE}', "");
Error('\p{_-Is_title/a/}');
Error('\P{_-Is_title/a/}');
Expect(1, 453, '\p{istitle}', "");
Expect(0, 453, '\p{^istitle}', "");
Expect(0, 453, '\P{istitle}', "");
Expect(1, 453, '\P{^istitle}', "");
Expect(0, 452, '\p{istitle}', "");
Expect(1, 452, '\p{^istitle}', "");
Expect(1, 452, '\P{istitle}', "");
Expect(0, 452, '\P{^istitle}', "");
Expect(1, 453, '\p{--IS-TITLE}', "");
Expect(0, 453, '\p{^--IS-TITLE}', "");
Expect(0, 453, '\P{--IS-TITLE}', "");
Expect(1, 453, '\P{^--IS-TITLE}', "");
Expect(0, 452, '\p{--IS-TITLE}', "");
Expect(1, 452, '\p{^--IS-TITLE}', "");
Expect(1, 452, '\P{--IS-TITLE}', "");
Expect(0, 452, '\P{^--IS-TITLE}', "");
Error('\p{	_Is/a/TITLECASE}');
Error('\P{	_Is/a/TITLECASE}');
Expect(1, 453, '\p{istitlecase}', "");
Expect(0, 453, '\p{^istitlecase}', "");
Expect(0, 453, '\P{istitlecase}', "");
Expect(1, 453, '\P{^istitlecase}', "");
Expect(0, 452, '\p{istitlecase}', "");
Expect(1, 452, '\p{^istitlecase}', "");
Expect(1, 452, '\P{istitlecase}', "");
Expect(0, 452, '\P{^istitlecase}', "");
Expect(1, 453, '\p{_	IS	Titlecase}', "");
Expect(0, 453, '\p{^_	IS	Titlecase}', "");
Expect(0, 453, '\P{_	IS	Titlecase}', "");
Expect(1, 453, '\P{^_	IS	Titlecase}', "");
Expect(0, 452, '\p{_	IS	Titlecase}', "");
Expect(1, 452, '\p{^_	IS	Titlecase}', "");
Expect(1, 452, '\P{_	IS	Titlecase}', "");
Expect(0, 452, '\P{^_	IS	Titlecase}', "");
Error('\p{/a/-_IN-Hiragana}');
Error('\P{/a/-_IN-Hiragana}');
Expect(1, 12447, '\p{inhiragana}', "");
Expect(0, 12447, '\p{^inhiragana}', "");
Expect(0, 12447, '\P{inhiragana}', "");
Expect(1, 12447, '\P{^inhiragana}', "");
Expect(0, 12351, '\p{inhiragana}', "");
Expect(1, 12351, '\p{^inhiragana}', "");
Expect(1, 12351, '\P{inhiragana}', "");
Expect(0, 12351, '\P{^inhiragana}', "");
Expect(1, 12447, '\p{-inhiragana}', "");
Expect(0, 12447, '\p{^-inhiragana}', "");
Expect(0, 12447, '\P{-inhiragana}', "");
Expect(1, 12447, '\P{^-inhiragana}', "");
Expect(0, 12351, '\p{-inhiragana}', "");
Expect(1, 12351, '\p{^-inhiragana}', "");
Expect(1, 12351, '\P{-inhiragana}', "");
Expect(0, 12351, '\P{^-inhiragana}', "");
Error('\p{/a/LATIN}');
Error('\P{/a/LATIN}');
Expect(1, 90, '\p{latin}', "");
Expect(0, 90, '\p{^latin}', "");
Expect(0, 90, '\P{latin}', "");
Expect(1, 90, '\P{^latin}', "");
Expect(0, 64, '\p{latin}', "");
Expect(1, 64, '\p{^latin}', "");
Expect(1, 64, '\P{latin}', "");
Expect(0, 64, '\P{^latin}', "");
Expect(1, 90, '\p{	LATIN}', "");
Expect(0, 90, '\p{^	LATIN}', "");
Expect(0, 90, '\P{	LATIN}', "");
Expect(1, 90, '\P{^	LATIN}', "");
Expect(0, 64, '\p{	LATIN}', "");
Expect(1, 64, '\p{^	LATIN}', "");
Expect(1, 64, '\P{	LATIN}', "");
Expect(0, 64, '\P{^	LATIN}', "");
Error('\p{/a/_IS	Latin}');
Error('\P{/a/_IS	Latin}');
Expect(1, 90, '\p{islatin}', "");
Expect(0, 90, '\p{^islatin}', "");
Expect(0, 90, '\P{islatin}', "");
Expect(1, 90, '\P{^islatin}', "");
Expect(0, 64, '\p{islatin}', "");
Expect(1, 64, '\p{^islatin}', "");
Expect(1, 64, '\P{islatin}', "");
Expect(0, 64, '\P{^islatin}', "");
Expect(1, 90, '\p{  IS-Latin}', "");
Expect(0, 90, '\p{^  IS-Latin}', "");
Expect(0, 90, '\P{  IS-Latin}', "");
Expect(1, 90, '\P{^  IS-Latin}', "");
Expect(0, 64, '\p{  IS-Latin}', "");
Expect(1, 64, '\p{^  IS-Latin}', "");
Expect(1, 64, '\P{  IS-Latin}', "");
Expect(0, 64, '\P{^  IS-Latin}', "");
Error('\p{__latn/a/}');
Error('\P{__latn/a/}');
Expect(1, 90, '\p{latn}', "");
Expect(0, 90, '\p{^latn}', "");
Expect(0, 90, '\P{latn}', "");
Expect(1, 90, '\P{^latn}', "");
Expect(0, 64, '\p{latn}', "");
Expect(1, 64, '\p{^latn}', "");
Expect(1, 64, '\P{latn}', "");
Expect(0, 64, '\P{^latn}', "");
Expect(1, 90, '\p{ 	LATN}', "");
Expect(0, 90, '\p{^ 	LATN}', "");
Expect(0, 90, '\P{ 	LATN}', "");
Expect(1, 90, '\P{^ 	LATN}', "");
Expect(0, 64, '\p{ 	LATN}', "");
Expect(1, 64, '\p{^ 	LATN}', "");
Expect(1, 64, '\P{ 	LATN}', "");
Expect(0, 64, '\P{^ 	LATN}', "");
Error('\p{	Is:=latn}');
Error('\P{	Is:=latn}');
Expect(1, 90, '\p{islatn}', "");
Expect(0, 90, '\p{^islatn}', "");
Expect(0, 90, '\P{islatn}', "");
Expect(1, 90, '\P{^islatn}', "");
Expect(0, 64, '\p{islatn}', "");
Expect(1, 64, '\p{^islatn}', "");
Expect(1, 64, '\P{islatn}', "");
Expect(0, 64, '\P{^islatn}', "");
Expect(1, 90, '\p{ _is Latn}', "");
Expect(0, 90, '\p{^ _is Latn}', "");
Expect(0, 90, '\P{ _is Latn}', "");
Expect(1, 90, '\P{^ _is Latn}', "");
Expect(0, 64, '\p{ _is Latn}', "");
Expect(1, 64, '\p{^ _is Latn}', "");
Expect(1, 64, '\P{ _is Latn}', "");
Expect(0, 64, '\P{^ _is Latn}', "");
Error('\p{:=	Enclosing	MARK}');
Error('\P{:=	Enclosing	MARK}');
Expect(1, 1161, '\p{enclosingmark}', "");
Expect(0, 1161, '\p{^enclosingmark}', "");
Expect(0, 1161, '\P{enclosingmark}', "");
Expect(1, 1161, '\P{^enclosingmark}', "");
Expect(0, 1159, '\p{enclosingmark}', "");
Expect(1, 1159, '\p{^enclosingmark}', "");
Expect(1, 1159, '\P{enclosingmark}', "");
Expect(0, 1159, '\P{^enclosingmark}', "");
Expect(1, 1161, '\p{-Enclosingmark}', "");
Expect(0, 1161, '\p{^-Enclosingmark}', "");
Expect(0, 1161, '\P{-Enclosingmark}', "");
Expect(1, 1161, '\P{^-Enclosingmark}', "");
Expect(0, 1159, '\p{-Enclosingmark}', "");
Expect(1, 1159, '\p{^-Enclosingmark}', "");
Expect(1, 1159, '\P{-Enclosingmark}', "");
Expect(0, 1159, '\P{^-Enclosingmark}', "");
Error('\p{	:=Is_EnclosingMark}');
Error('\P{	:=Is_EnclosingMark}');
Expect(1, 1161, '\p{isenclosingmark}', "");
Expect(0, 1161, '\p{^isenclosingmark}', "");
Expect(0, 1161, '\P{isenclosingmark}', "");
Expect(1, 1161, '\P{^isenclosingmark}', "");
Expect(0, 1159, '\p{isenclosingmark}', "");
Expect(1, 1159, '\p{^isenclosingmark}', "");
Expect(1, 1159, '\P{isenclosingmark}', "");
Expect(0, 1159, '\P{^isenclosingmark}', "");
Expect(1, 1161, '\p{_Is-ENCLOSING-mark}', "");
Expect(0, 1161, '\p{^_Is-ENCLOSING-mark}', "");
Expect(0, 1161, '\P{_Is-ENCLOSING-mark}', "");
Expect(1, 1161, '\P{^_Is-ENCLOSING-mark}', "");
Expect(0, 1159, '\p{_Is-ENCLOSING-mark}', "");
Expect(1, 1159, '\p{^_Is-ENCLOSING-mark}', "");
Expect(1, 1159, '\P{_Is-ENCLOSING-mark}', "");
Expect(0, 1159, '\P{^_Is-ENCLOSING-mark}', "");
Error('\p{	ME/a/}');
Error('\P{	ME/a/}');
Expect(1, 1161, '\p{me}', "");
Expect(0, 1161, '\p{^me}', "");
Expect(0, 1161, '\P{me}', "");
Expect(1, 1161, '\P{^me}', "");
Expect(0, 1159, '\p{me}', "");
Expect(1, 1159, '\p{^me}', "");
Expect(1, 1159, '\P{me}', "");
Expect(0, 1159, '\P{^me}', "");
Expect(1, 1161, '\p{		Me}', "");
Expect(0, 1161, '\p{^		Me}', "");
Expect(0, 1161, '\P{		Me}', "");
Expect(1, 1161, '\P{^		Me}', "");
Expect(0, 1159, '\p{		Me}', "");
Expect(1, 1159, '\p{^		Me}', "");
Expect(1, 1159, '\P{		Me}', "");
Expect(0, 1159, '\P{^		Me}', "");
Error('\p{:=--Is-ME}');
Error('\P{:=--Is-ME}');
Expect(1, 1161, '\p{isme}', "");
Expect(0, 1161, '\p{^isme}', "");
Expect(0, 1161, '\P{isme}', "");
Expect(1, 1161, '\P{^isme}', "");
Expect(0, 1159, '\p{isme}', "");
Expect(1, 1159, '\p{^isme}', "");
Expect(1, 1159, '\P{isme}', "");
Expect(0, 1159, '\P{^isme}', "");
Expect(1, 1161, '\p{-is_Me}', "");
Expect(0, 1161, '\p{^-is_Me}', "");
Expect(0, 1161, '\P{-is_Me}', "");
Expect(1, 1161, '\P{^-is_Me}', "");
Expect(0, 1159, '\p{-is_Me}', "");
Expect(1, 1159, '\p{^-is_Me}', "");
Expect(1, 1159, '\P{-is_Me}', "");
Expect(0, 1159, '\P{^-is_Me}', "");
Error('\p{ /a/Format}');
Error('\P{ /a/Format}');
Expect(1, 173, '\p{format}', "");
Expect(0, 173, '\p{^format}', "");
Expect(0, 173, '\P{format}', "");
Expect(1, 173, '\P{^format}', "");
Expect(0, 172, '\p{format}', "");
Expect(1, 172, '\p{^format}', "");
Expect(1, 172, '\P{format}', "");
Expect(0, 172, '\P{^format}', "");
Expect(1, 173, '\p{_Format}', "");
Expect(0, 173, '\p{^_Format}', "");
Expect(0, 173, '\P{_Format}', "");
Expect(1, 173, '\P{^_Format}', "");
Expect(0, 172, '\p{_Format}', "");
Expect(1, 172, '\p{^_Format}', "");
Expect(1, 172, '\P{_Format}', "");
Expect(0, 172, '\P{^_Format}', "");
Error('\p{ :=is_format}');
Error('\P{ :=is_format}');
Expect(1, 173, '\p{isformat}', "");
Expect(0, 173, '\p{^isformat}', "");
Expect(0, 173, '\P{isformat}', "");
Expect(1, 173, '\P{^isformat}', "");
Expect(0, 172, '\p{isformat}', "");
Expect(1, 172, '\p{^isformat}', "");
Expect(1, 172, '\P{isformat}', "");
Expect(0, 172, '\P{^isformat}', "");
Expect(1, 173, '\p{_IsFormat}', "");
Expect(0, 173, '\p{^_IsFormat}', "");
Expect(0, 173, '\P{_IsFormat}', "");
Expect(1, 173, '\P{^_IsFormat}', "");
Expect(0, 172, '\p{_IsFormat}', "");
Expect(1, 172, '\p{^_IsFormat}', "");
Expect(1, 172, '\P{_IsFormat}', "");
Expect(0, 172, '\P{^_IsFormat}', "");
Error('\p{_:=cf}');
Error('\P{_:=cf}');
Expect(1, 173, '\p{cf}', "");
Expect(0, 173, '\p{^cf}', "");
Expect(0, 173, '\P{cf}', "");
Expect(1, 173, '\P{^cf}', "");
Expect(0, 172, '\p{cf}', "");
Expect(1, 172, '\p{^cf}', "");
Expect(1, 172, '\P{cf}', "");
Expect(0, 172, '\P{^cf}', "");
Expect(1, 173, '\p{-Cf}', "");
Expect(0, 173, '\p{^-Cf}', "");
Expect(0, 173, '\P{-Cf}', "");
Expect(1, 173, '\P{^-Cf}', "");
Expect(0, 172, '\p{-Cf}', "");
Expect(1, 172, '\p{^-Cf}', "");
Expect(1, 172, '\P{-Cf}', "");
Expect(0, 172, '\P{^-Cf}', "");
Error('\p{:= Iscf}');
Error('\P{:= Iscf}');
Expect(1, 173, '\p{iscf}', "");
Expect(0, 173, '\p{^iscf}', "");
Expect(0, 173, '\P{iscf}', "");
Expect(1, 173, '\P{^iscf}', "");
Expect(0, 172, '\p{iscf}', "");
Expect(1, 172, '\p{^iscf}', "");
Expect(1, 172, '\P{iscf}', "");
Expect(0, 172, '\P{^iscf}', "");
Expect(1, 173, '\p{--is	Cf}', "");
Expect(0, 173, '\p{^--is	Cf}', "");
Expect(0, 173, '\P{--is	Cf}', "");
Expect(1, 173, '\P{^--is	Cf}', "");
Expect(0, 172, '\p{--is	Cf}', "");
Expect(1, 172, '\p{^--is	Cf}', "");
Expect(1, 172, '\P{--is	Cf}', "");
Expect(0, 172, '\P{^--is	Cf}', "");
Error('\p{Other:=Number}');
Error('\P{Other:=Number}');
Expect(1, 179, '\p{othernumber}', "");
Expect(0, 179, '\p{^othernumber}', "");
Expect(0, 179, '\P{othernumber}', "");
Expect(1, 179, '\P{^othernumber}', "");
Expect(0, 177, '\p{othernumber}', "");
Expect(1, 177, '\p{^othernumber}', "");
Expect(1, 177, '\P{othernumber}', "");
Expect(0, 177, '\P{^othernumber}', "");
Expect(1, 179, '\p{- OTHER NUMBER}', "");
Expect(0, 179, '\p{^- OTHER NUMBER}', "");
Expect(0, 179, '\P{- OTHER NUMBER}', "");
Expect(1, 179, '\P{^- OTHER NUMBER}', "");
Expect(0, 177, '\p{- OTHER NUMBER}', "");
Expect(1, 177, '\p{^- OTHER NUMBER}', "");
Expect(1, 177, '\P{- OTHER NUMBER}', "");
Expect(0, 177, '\P{^- OTHER NUMBER}', "");
Error('\p{/a/Is	Other-Number}');
Error('\P{/a/Is	Other-Number}');
Expect(1, 179, '\p{isothernumber}', "");
Expect(0, 179, '\p{^isothernumber}', "");
Expect(0, 179, '\P{isothernumber}', "");
Expect(1, 179, '\P{^isothernumber}', "");
Expect(0, 177, '\p{isothernumber}', "");
Expect(1, 177, '\p{^isothernumber}', "");
Expect(1, 177, '\P{isothernumber}', "");
Expect(0, 177, '\P{^isothernumber}', "");
Expect(1, 179, '\p{is	Other-number}', "");
Expect(0, 179, '\p{^is	Other-number}', "");
Expect(0, 179, '\P{is	Other-number}', "");
Expect(1, 179, '\P{^is	Other-number}', "");
Expect(0, 177, '\p{is	Other-number}', "");
Expect(1, 177, '\p{^is	Other-number}', "");
Expect(1, 177, '\P{is	Other-number}', "");
Expect(0, 177, '\P{^is	Other-number}', "");
Error('\p{_ No:=}');
Error('\P{_ No:=}');
Expect(1, 179, '\p{no}', "");
Expect(0, 179, '\p{^no}', "");
Expect(0, 179, '\P{no}', "");
Expect(1, 179, '\P{^no}', "");
Expect(0, 177, '\p{no}', "");
Expect(1, 177, '\p{^no}', "");
Expect(1, 177, '\P{no}', "");
Expect(0, 177, '\P{^no}', "");
Expect(1, 179, '\p{__No}', "");
Expect(0, 179, '\p{^__No}', "");
Expect(0, 179, '\P{__No}', "");
Expect(1, 179, '\P{^__No}', "");
Expect(0, 177, '\p{__No}', "");
Expect(1, 177, '\p{^__No}', "");
Expect(1, 177, '\P{__No}', "");
Expect(0, 177, '\P{^__No}', "");
Error('\p{:=-Is	No}');
Error('\P{:=-Is	No}');
Expect(1, 179, '\p{isno}', "");
Expect(0, 179, '\p{^isno}', "");
Expect(0, 179, '\P{isno}', "");
Expect(1, 179, '\P{^isno}', "");
Expect(0, 177, '\p{isno}', "");
Expect(1, 177, '\p{^isno}', "");
Expect(1, 177, '\P{isno}', "");
Expect(0, 177, '\P{^isno}', "");
Expect(1, 179, '\p{ -IS	No}', "");
Expect(0, 179, '\p{^ -IS	No}', "");
Expect(0, 179, '\P{ -IS	No}', "");
Expect(1, 179, '\P{^ -IS	No}', "");
Expect(0, 177, '\p{ -IS	No}', "");
Expect(1, 177, '\p{^ -IS	No}', "");
Expect(1, 177, '\P{ -IS	No}', "");
Expect(0, 177, '\P{^ -IS	No}', "");
Error('\p{ Latin:=1SUPPLEMENT}');
Error('\P{ Latin:=1SUPPLEMENT}');
Expect(1, 255, '\p{latin1supplement}', "");
Expect(0, 255, '\p{^latin1supplement}', "");
Expect(0, 255, '\P{latin1supplement}', "");
Expect(1, 255, '\P{^latin1supplement}', "");
Expect(0, 127, '\p{latin1supplement}', "");
Expect(1, 127, '\p{^latin1supplement}', "");
Expect(1, 127, '\P{latin1supplement}', "");
Expect(0, 127, '\P{^latin1supplement}', "");
Expect(1, 255, '\p{-Latin 1	Supplement}', "");
Expect(0, 255, '\p{^-Latin 1	Supplement}', "");
Expect(0, 255, '\P{-Latin 1	Supplement}', "");
Expect(1, 255, '\P{^-Latin 1	Supplement}', "");
Expect(0, 127, '\p{-Latin 1	Supplement}', "");
Expect(1, 127, '\p{^-Latin 1	Supplement}', "");
Expect(1, 127, '\P{-Latin 1	Supplement}', "");
Expect(0, 127, '\P{^-Latin 1	Supplement}', "");
Error('\p{-	Is:=Latin 1 supplement}');
Error('\P{-	Is:=Latin 1 supplement}');
Expect(1, 255, '\p{islatin1supplement}', "");
Expect(0, 255, '\p{^islatin1supplement}', "");
Expect(0, 255, '\P{islatin1supplement}', "");
Expect(1, 255, '\P{^islatin1supplement}', "");
Expect(0, 127, '\p{islatin1supplement}', "");
Expect(1, 127, '\p{^islatin1supplement}', "");
Expect(1, 127, '\P{islatin1supplement}', "");
Expect(0, 127, '\P{^islatin1supplement}', "");
Expect(1, 255, '\p{_isLatin	1Supplement}', "");
Expect(0, 255, '\p{^_isLatin	1Supplement}', "");
Expect(0, 255, '\P{_isLatin	1Supplement}', "");
Expect(1, 255, '\P{^_isLatin	1Supplement}', "");
Expect(0, 127, '\p{_isLatin	1Supplement}', "");
Expect(1, 127, '\p{^_isLatin	1Supplement}', "");
Expect(1, 127, '\P{_isLatin	1Supplement}', "");
Expect(0, 127, '\P{^_isLatin	1Supplement}', "");
Error('\p{/a/InLatin_1-supplement}');
Error('\P{/a/InLatin_1-supplement}');
Expect(1, 255, '\p{inlatin1supplement}', "");
Expect(0, 255, '\p{^inlatin1supplement}', "");
Expect(0, 255, '\P{inlatin1supplement}', "");
Expect(1, 255, '\P{^inlatin1supplement}', "");
Expect(0, 127, '\p{inlatin1supplement}', "");
Expect(1, 127, '\p{^inlatin1supplement}', "");
Expect(1, 127, '\P{inlatin1supplement}', "");
Expect(0, 127, '\P{^inlatin1supplement}', "");
Expect(1, 255, '\p{__IN-LATIN_1	Supplement}', "");
Expect(0, 255, '\p{^__IN-LATIN_1	Supplement}', "");
Expect(0, 255, '\P{__IN-LATIN_1	Supplement}', "");
Expect(1, 255, '\P{^__IN-LATIN_1	Supplement}', "");
Expect(0, 127, '\p{__IN-LATIN_1	Supplement}', "");
Expect(1, 127, '\p{^__IN-LATIN_1	Supplement}', "");
Expect(1, 127, '\P{__IN-LATIN_1	Supplement}', "");
Expect(0, 127, '\P{^__IN-LATIN_1	Supplement}', "");
Error('\p{	/a/Latin 1}');
Error('\P{	/a/Latin 1}');
Expect(1, 255, '\p{latin1}', "");
Expect(0, 255, '\p{^latin1}', "");
Expect(0, 255, '\P{latin1}', "");
Expect(1, 255, '\P{^latin1}', "");
Expect(0, 127, '\p{latin1}', "");
Expect(1, 127, '\p{^latin1}', "");
Expect(1, 127, '\P{latin1}', "");
Expect(0, 127, '\P{^latin1}', "");
Expect(1, 255, '\p{-LATIN	1}', "");
Expect(0, 255, '\p{^-LATIN	1}', "");
Expect(0, 255, '\P{-LATIN	1}', "");
Expect(1, 255, '\P{^-LATIN	1}', "");
Expect(0, 127, '\p{-LATIN	1}', "");
Expect(1, 127, '\p{^-LATIN	1}', "");
Expect(1, 127, '\P{-LATIN	1}', "");
Expect(0, 127, '\P{^-LATIN	1}', "");
Error('\p{-Is	LATIN_1:=}');
Error('\P{-Is	LATIN_1:=}');
Expect(1, 255, '\p{islatin1}', "");
Expect(0, 255, '\p{^islatin1}', "");
Expect(0, 255, '\P{islatin1}', "");
Expect(1, 255, '\P{^islatin1}', "");
Expect(0, 127, '\p{islatin1}', "");
Expect(1, 127, '\p{^islatin1}', "");
Expect(1, 127, '\P{islatin1}', "");
Expect(0, 127, '\P{^islatin1}', "");
Expect(1, 255, '\p{	Is	LATIN-1}', "");
Expect(0, 255, '\p{^	Is	LATIN-1}', "");
Expect(0, 255, '\P{	Is	LATIN-1}', "");
Expect(1, 255, '\P{^	Is	LATIN-1}', "");
Expect(0, 127, '\p{	Is	LATIN-1}', "");
Expect(1, 127, '\p{^	Is	LATIN-1}', "");
Expect(1, 127, '\P{	Is	LATIN-1}', "");
Expect(0, 127, '\P{^	Is	LATIN-1}', "");
Error('\p{		in_Latin-1:=}');
Error('\P{		in_Latin-1:=}');
Expect(1, 255, '\p{inlatin1}', "");
Expect(0, 255, '\p{^inlatin1}', "");
Expect(0, 255, '\P{inlatin1}', "");
Expect(1, 255, '\P{^inlatin1}', "");
Expect(0, 127, '\p{inlatin1}', "");
Expect(1, 127, '\p{^inlatin1}', "");
Expect(1, 127, '\P{inlatin1}', "");
Expect(0, 127, '\P{^inlatin1}', "");
Expect(1, 255, '\p{	IN	Latin 1}', "");
Expect(0, 255, '\p{^	IN	Latin 1}', "");
Expect(0, 255, '\P{	IN	Latin 1}', "");
Expect(1, 255, '\P{^	IN	Latin 1}', "");
Expect(0, 127, '\p{	IN	Latin 1}', "");
Expect(1, 127, '\p{^	IN	Latin 1}', "");
Expect(1, 127, '\P{	IN	Latin 1}', "");
Expect(0, 127, '\P{^	IN	Latin 1}', "");
Error('\p{ -tamil:=}');
Error('\P{ -tamil:=}');
Expect(1, 2947, '\p{tamil}', "");
Expect(0, 2947, '\p{^tamil}', "");
Expect(0, 2947, '\P{tamil}', "");
Expect(1, 2947, '\P{^tamil}', "");
Expect(0, 2945, '\p{tamil}', "");
Expect(1, 2945, '\p{^tamil}', "");
Expect(1, 2945, '\P{tamil}', "");
Expect(0, 2945, '\P{^tamil}', "");
Expect(1, 2947, '\p{	tamil}', "");
Expect(0, 2947, '\p{^	tamil}', "");
Expect(0, 2947, '\P{	tamil}', "");
Expect(1, 2947, '\P{^	tamil}', "");
Expect(0, 2945, '\p{	tamil}', "");
Expect(1, 2945, '\p{^	tamil}', "");
Expect(1, 2945, '\P{	tamil}', "");
Expect(0, 2945, '\P{^	tamil}', "");
Error('\p{-	ISTAMIL:=}');
Error('\P{-	ISTAMIL:=}');
Expect(1, 2947, '\p{istamil}', "");
Expect(0, 2947, '\p{^istamil}', "");
Expect(0, 2947, '\P{istamil}', "");
Expect(1, 2947, '\P{^istamil}', "");
Expect(0, 2945, '\p{istamil}', "");
Expect(1, 2945, '\p{^istamil}', "");
Expect(1, 2945, '\P{istamil}', "");
Expect(0, 2945, '\P{^istamil}', "");
Expect(1, 2947, '\p{ -IS_Tamil}', "");
Expect(0, 2947, '\p{^ -IS_Tamil}', "");
Expect(0, 2947, '\P{ -IS_Tamil}', "");
Expect(1, 2947, '\P{^ -IS_Tamil}', "");
Expect(0, 2945, '\p{ -IS_Tamil}', "");
Expect(1, 2945, '\p{^ -IS_Tamil}', "");
Expect(1, 2945, '\P{ -IS_Tamil}', "");
Expect(0, 2945, '\P{^ -IS_Tamil}', "");
Error('\p{ _Taml/a/}');
Error('\P{ _Taml/a/}');
Expect(1, 2947, '\p{taml}', "");
Expect(0, 2947, '\p{^taml}', "");
Expect(0, 2947, '\P{taml}', "");
Expect(1, 2947, '\P{^taml}', "");
Expect(0, 2945, '\p{taml}', "");
Expect(1, 2945, '\p{^taml}', "");
Expect(1, 2945, '\P{taml}', "");
Expect(0, 2945, '\P{^taml}', "");
Expect(1, 2947, '\p{ 	Taml}', "");
Expect(0, 2947, '\p{^ 	Taml}', "");
Expect(0, 2947, '\P{ 	Taml}', "");
Expect(1, 2947, '\P{^ 	Taml}', "");
Expect(0, 2945, '\p{ 	Taml}', "");
Expect(1, 2945, '\p{^ 	Taml}', "");
Expect(1, 2945, '\P{ 	Taml}', "");
Expect(0, 2945, '\P{^ 	Taml}', "");
Error('\p{_/a/Is taml}');
Error('\P{_/a/Is taml}');
Expect(1, 2947, '\p{istaml}', "");
Expect(0, 2947, '\p{^istaml}', "");
Expect(0, 2947, '\P{istaml}', "");
Expect(1, 2947, '\P{^istaml}', "");
Expect(0, 2945, '\p{istaml}', "");
Expect(1, 2945, '\p{^istaml}', "");
Expect(1, 2945, '\P{istaml}', "");
Expect(0, 2945, '\P{^istaml}', "");
Expect(1, 2947, '\p{	Is-taml}', "");
Expect(0, 2947, '\p{^	Is-taml}', "");
Expect(0, 2947, '\P{	Is-taml}', "");
Expect(1, 2947, '\P{^	Is-taml}', "");
Expect(0, 2945, '\p{	Is-taml}', "");
Expect(1, 2945, '\p{^	Is-taml}', "");
Expect(1, 2945, '\P{	Is-taml}', "");
Expect(0, 2945, '\P{^	Is-taml}', "");
Error('\p{	:=Shavian}');
Error('\P{	:=Shavian}');
Expect(1, 66687, '\p{shavian}', "");
Expect(0, 66687, '\p{^shavian}', "");
Expect(0, 66687, '\P{shavian}', "");
Expect(1, 66687, '\P{^shavian}', "");
Expect(0, 66639, '\p{shavian}', "");
Expect(1, 66639, '\p{^shavian}', "");
Expect(1, 66639, '\P{shavian}', "");
Expect(0, 66639, '\P{^shavian}', "");
Expect(1, 66687, '\p{-	shavian}', "");
Expect(0, 66687, '\p{^-	shavian}', "");
Expect(0, 66687, '\P{-	shavian}', "");
Expect(1, 66687, '\P{^-	shavian}', "");
Expect(0, 66639, '\p{-	shavian}', "");
Expect(1, 66639, '\p{^-	shavian}', "");
Expect(1, 66639, '\P{-	shavian}', "");
Expect(0, 66639, '\P{^-	shavian}', "");
Error('\p{/a/is_shavian}');
Error('\P{/a/is_shavian}');
Expect(1, 66687, '\p{isshavian}', "");
Expect(0, 66687, '\p{^isshavian}', "");
Expect(0, 66687, '\P{isshavian}', "");
Expect(1, 66687, '\P{^isshavian}', "");
Expect(0, 66639, '\p{isshavian}', "");
Expect(1, 66639, '\p{^isshavian}', "");
Expect(1, 66639, '\P{isshavian}', "");
Expect(0, 66639, '\P{^isshavian}', "");
Expect(1, 66687, '\p{	_IS_shavian}', "");
Expect(0, 66687, '\p{^	_IS_shavian}', "");
Expect(0, 66687, '\P{	_IS_shavian}', "");
Expect(1, 66687, '\P{^	_IS_shavian}', "");
Expect(0, 66639, '\p{	_IS_shavian}', "");
Expect(1, 66639, '\p{^	_IS_shavian}', "");
Expect(1, 66639, '\P{	_IS_shavian}', "");
Expect(0, 66639, '\P{^	_IS_shavian}', "");
Error('\p{:=-	SHAW}');
Error('\P{:=-	SHAW}');
Expect(1, 66687, '\p{shaw}', "");
Expect(0, 66687, '\p{^shaw}', "");
Expect(0, 66687, '\P{shaw}', "");
Expect(1, 66687, '\P{^shaw}', "");
Expect(0, 66639, '\p{shaw}', "");
Expect(1, 66639, '\p{^shaw}', "");
Expect(1, 66639, '\P{shaw}', "");
Expect(0, 66639, '\P{^shaw}', "");
Expect(1, 66687, '\p{- Shaw}', "");
Expect(0, 66687, '\p{^- Shaw}', "");
Expect(0, 66687, '\P{- Shaw}', "");
Expect(1, 66687, '\P{^- Shaw}', "");
Expect(0, 66639, '\p{- Shaw}', "");
Expect(1, 66639, '\p{^- Shaw}', "");
Expect(1, 66639, '\P{- Shaw}', "");
Expect(0, 66639, '\P{^- Shaw}', "");
Error('\p{-_IS	shaw:=}');
Error('\P{-_IS	shaw:=}');
Expect(1, 66687, '\p{isshaw}', "");
Expect(0, 66687, '\p{^isshaw}', "");
Expect(0, 66687, '\P{isshaw}', "");
Expect(1, 66687, '\P{^isshaw}', "");
Expect(0, 66639, '\p{isshaw}', "");
Expect(1, 66639, '\p{^isshaw}', "");
Expect(1, 66639, '\P{isshaw}', "");
Expect(0, 66639, '\P{^isshaw}', "");
Expect(1, 66687, '\p{_ Is	Shaw}', "");
Expect(0, 66687, '\p{^_ Is	Shaw}', "");
Expect(0, 66687, '\P{_ Is	Shaw}', "");
Expect(1, 66687, '\P{^_ Is	Shaw}', "");
Expect(0, 66639, '\p{_ Is	Shaw}', "");
Expect(1, 66639, '\p{^_ Is	Shaw}', "");
Expect(1, 66639, '\P{_ Is	Shaw}', "");
Expect(0, 66639, '\P{^_ Is	Shaw}', "");
Error('\p{:=IPA-Extensions}');
Error('\P{:=IPA-Extensions}');
Expect(1, 687, '\p{ipaextensions}', "");
Expect(0, 687, '\p{^ipaextensions}', "");
Expect(0, 687, '\P{ipaextensions}', "");
Expect(1, 687, '\P{^ipaextensions}', "");
Expect(0, 591, '\p{ipaextensions}', "");
Expect(1, 591, '\p{^ipaextensions}', "");
Expect(1, 591, '\P{ipaextensions}', "");
Expect(0, 591, '\P{^ipaextensions}', "");
Expect(1, 687, '\p{ IPA_EXTENSIONS}', "");
Expect(0, 687, '\p{^ IPA_EXTENSIONS}', "");
Expect(0, 687, '\P{ IPA_EXTENSIONS}', "");
Expect(1, 687, '\P{^ IPA_EXTENSIONS}', "");
Expect(0, 591, '\p{ IPA_EXTENSIONS}', "");
Expect(1, 591, '\p{^ IPA_EXTENSIONS}', "");
Expect(1, 591, '\P{ IPA_EXTENSIONS}', "");
Expect(0, 591, '\P{^ IPA_EXTENSIONS}', "");
Error('\p{	 is-IPA	Extensions:=}');
Error('\P{	 is-IPA	Extensions:=}');
Expect(1, 687, '\p{isipaextensions}', "");
Expect(0, 687, '\p{^isipaextensions}', "");
Expect(0, 687, '\P{isipaextensions}', "");
Expect(1, 687, '\P{^isipaextensions}', "");
Expect(0, 591, '\p{isipaextensions}', "");
Expect(1, 591, '\p{^isipaextensions}', "");
Expect(1, 591, '\P{isipaextensions}', "");
Expect(0, 591, '\P{^isipaextensions}', "");
Expect(1, 687, '\p{	_isipa extensions}', "");
Expect(0, 687, '\p{^	_isipa extensions}', "");
Expect(0, 687, '\P{	_isipa extensions}', "");
Expect(1, 687, '\P{^	_isipa extensions}', "");
Expect(0, 591, '\p{	_isipa extensions}', "");
Expect(1, 591, '\p{^	_isipa extensions}', "");
Expect(1, 591, '\P{	_isipa extensions}', "");
Expect(0, 591, '\P{^	_isipa extensions}', "");
Error('\p{	in IPA:=Extensions}');
Error('\P{	in IPA:=Extensions}');
Expect(1, 687, '\p{inipaextensions}', "");
Expect(0, 687, '\p{^inipaextensions}', "");
Expect(0, 687, '\P{inipaextensions}', "");
Expect(1, 687, '\P{^inipaextensions}', "");
Expect(0, 591, '\p{inipaextensions}', "");
Expect(1, 591, '\p{^inipaextensions}', "");
Expect(1, 591, '\P{inipaextensions}', "");
Expect(0, 591, '\P{^inipaextensions}', "");
Expect(1, 687, '\p{In IPA	extensions}', "");
Expect(0, 687, '\p{^In IPA	extensions}', "");
Expect(0, 687, '\P{In IPA	extensions}', "");
Expect(1, 687, '\P{^In IPA	extensions}', "");
Expect(0, 591, '\p{In IPA	extensions}', "");
Expect(1, 591, '\p{^In IPA	extensions}', "");
Expect(1, 591, '\P{In IPA	extensions}', "");
Expect(0, 591, '\P{^In IPA	extensions}', "");
Error('\p{ Hiragana:=}');
Error('\P{ Hiragana:=}');
Expect(1, 12438, '\p{hiragana}', "");
Expect(0, 12438, '\p{^hiragana}', "");
Expect(0, 12438, '\P{hiragana}', "");
Expect(1, 12438, '\P{^hiragana}', "");
Expect(0, 12352, '\p{hiragana}', "");
Expect(1, 12352, '\p{^hiragana}', "");
Expect(1, 12352, '\P{hiragana}', "");
Expect(0, 12352, '\P{^hiragana}', "");
Expect(1, 12438, '\p{-_Hiragana}', "");
Expect(0, 12438, '\p{^-_Hiragana}', "");
Expect(0, 12438, '\P{-_Hiragana}', "");
Expect(1, 12438, '\P{^-_Hiragana}', "");
Expect(0, 12352, '\p{-_Hiragana}', "");
Expect(1, 12352, '\p{^-_Hiragana}', "");
Expect(1, 12352, '\P{-_Hiragana}', "");
Expect(0, 12352, '\P{^-_Hiragana}', "");
Error('\p{ 	IS:=Hiragana}');
Error('\P{ 	IS:=Hiragana}');
Expect(1, 12438, '\p{ishiragana}', "");
Expect(0, 12438, '\p{^ishiragana}', "");
Expect(0, 12438, '\P{ishiragana}', "");
Expect(1, 12438, '\P{^ishiragana}', "");
Expect(0, 12352, '\p{ishiragana}', "");
Expect(1, 12352, '\p{^ishiragana}', "");
Expect(1, 12352, '\P{ishiragana}', "");
Expect(0, 12352, '\P{^ishiragana}', "");
Expect(1, 12438, '\p{-_is	Hiragana}', "");
Expect(0, 12438, '\p{^-_is	Hiragana}', "");
Expect(0, 12438, '\P{-_is	Hiragana}', "");
Expect(1, 12438, '\P{^-_is	Hiragana}', "");
Expect(0, 12352, '\p{-_is	Hiragana}', "");
Expect(1, 12352, '\p{^-_is	Hiragana}', "");
Expect(1, 12352, '\P{-_is	Hiragana}', "");
Expect(0, 12352, '\P{^-_is	Hiragana}', "");
Error('\p{/a/ _Hira}');
Error('\P{/a/ _Hira}');
Expect(1, 12438, '\p{hira}', "");
Expect(0, 12438, '\p{^hira}', "");
Expect(0, 12438, '\P{hira}', "");
Expect(1, 12438, '\P{^hira}', "");
Expect(0, 12352, '\p{hira}', "");
Expect(1, 12352, '\p{^hira}', "");
Expect(1, 12352, '\P{hira}', "");
Expect(0, 12352, '\P{^hira}', "");
Expect(1, 12438, '\p{	Hira}', "");
Expect(0, 12438, '\p{^	Hira}', "");
Expect(0, 12438, '\P{	Hira}', "");
Expect(1, 12438, '\P{^	Hira}', "");
Expect(0, 12352, '\p{	Hira}', "");
Expect(1, 12352, '\p{^	Hira}', "");
Expect(1, 12352, '\P{	Hira}', "");
Expect(0, 12352, '\P{^	Hira}', "");
Error('\p{-is/a/Hira}');
Error('\P{-is/a/Hira}');
Expect(1, 12438, '\p{ishira}', "");
Expect(0, 12438, '\p{^ishira}', "");
Expect(0, 12438, '\P{ishira}', "");
Expect(1, 12438, '\P{^ishira}', "");
Expect(0, 12352, '\p{ishira}', "");
Expect(1, 12352, '\p{^ishira}', "");
Expect(1, 12352, '\P{ishira}', "");
Expect(0, 12352, '\P{^ishira}', "");
Expect(1, 12438, '\p{_	IS	Hira}', "");
Expect(0, 12438, '\p{^_	IS	Hira}', "");
Expect(0, 12438, '\P{_	IS	Hira}', "");
Expect(1, 12438, '\P{^_	IS	Hira}', "");
Expect(0, 12352, '\p{_	IS	Hira}', "");
Expect(1, 12352, '\p{^_	IS	Hira}', "");
Expect(1, 12352, '\P{_	IS	Hira}', "");
Expect(0, 12352, '\P{^_	IS	Hira}', "");
Error('\p{_:=greek}');
Error('\P{_:=greek}');
Expect(1, 883, '\p{greek}', "");
Expect(0, 883, '\p{^greek}', "");
Expect(0, 883, '\P{greek}', "");
Expect(1, 883, '\P{^greek}', "");
Expect(0, 879, '\p{greek}', "");
Expect(1, 879, '\p{^greek}', "");
Expect(1, 879, '\P{greek}', "");
Expect(0, 879, '\P{^greek}', "");
Expect(1, 883, '\p{-Greek}', "");
Expect(0, 883, '\p{^-Greek}', "");
Expect(0, 883, '\P{-Greek}', "");
Expect(1, 883, '\P{^-Greek}', "");
Expect(0, 879, '\p{-Greek}', "");
Expect(1, 879, '\p{^-Greek}', "");
Expect(1, 879, '\P{-Greek}', "");
Expect(0, 879, '\P{^-Greek}', "");
Error('\p{:=-	is	Greek}');
Error('\P{:=-	is	Greek}');
Expect(1, 883, '\p{isgreek}', "");
Expect(0, 883, '\p{^isgreek}', "");
Expect(0, 883, '\P{isgreek}', "");
Expect(1, 883, '\P{^isgreek}', "");
Expect(0, 879, '\p{isgreek}', "");
Expect(1, 879, '\p{^isgreek}', "");
Expect(1, 879, '\P{isgreek}', "");
Expect(0, 879, '\P{^isgreek}', "");
Expect(1, 883, '\p{_	Is-Greek}', "");
Expect(0, 883, '\p{^_	Is-Greek}', "");
Expect(0, 883, '\P{_	Is-Greek}', "");
Expect(1, 883, '\P{^_	Is-Greek}', "");
Expect(0, 879, '\p{_	Is-Greek}', "");
Expect(1, 879, '\p{^_	Is-Greek}', "");
Expect(1, 879, '\P{_	Is-Greek}', "");
Expect(0, 879, '\P{^_	Is-Greek}', "");
Error('\p{-_GREK/a/}');
Error('\P{-_GREK/a/}');
Expect(1, 883, '\p{grek}', "");
Expect(0, 883, '\p{^grek}', "");
Expect(0, 883, '\P{grek}', "");
Expect(1, 883, '\P{^grek}', "");
Expect(0, 879, '\p{grek}', "");
Expect(1, 879, '\p{^grek}', "");
Expect(1, 879, '\P{grek}', "");
Expect(0, 879, '\P{^grek}', "");
Expect(1, 883, '\p{	Grek}', "");
Expect(0, 883, '\p{^	Grek}', "");
Expect(0, 883, '\P{	Grek}', "");
Expect(1, 883, '\P{^	Grek}', "");
Expect(0, 879, '\p{	Grek}', "");
Expect(1, 879, '\p{^	Grek}', "");
Expect(1, 879, '\P{	Grek}', "");
Expect(0, 879, '\P{^	Grek}', "");
Error('\p{:=_is_grek}');
Error('\P{:=_is_grek}');
Expect(1, 883, '\p{isgrek}', "");
Expect(0, 883, '\p{^isgrek}', "");
Expect(0, 883, '\P{isgrek}', "");
Expect(1, 883, '\P{^isgrek}', "");
Expect(0, 879, '\p{isgrek}', "");
Expect(1, 879, '\p{^isgrek}', "");
Expect(1, 879, '\P{isgrek}', "");
Expect(0, 879, '\P{^isgrek}', "");
Expect(1, 883, '\p{--Is	grek}', "");
Expect(0, 883, '\p{^--Is	grek}', "");
Expect(0, 883, '\P{--Is	grek}', "");
Expect(1, 883, '\P{^--Is	grek}', "");
Expect(0, 879, '\p{--Is	grek}', "");
Expect(1, 879, '\p{^--Is	grek}', "");
Expect(1, 879, '\P{--Is	grek}', "");
Expect(0, 879, '\P{^--Is	grek}', "");
Error('\p{-:=IN thai}');
Error('\P{-:=IN thai}');
Expect(1, 3711, '\p{inthai}', "");
Expect(0, 3711, '\p{^inthai}', "");
Expect(0, 3711, '\P{inthai}', "");
Expect(1, 3711, '\P{^inthai}', "");
Expect(0, 3583, '\p{inthai}', "");
Expect(1, 3583, '\p{^inthai}', "");
Expect(1, 3583, '\P{inthai}', "");
Expect(0, 3583, '\P{^inthai}', "");
Expect(1, 3711, '\p{_	In-thai}', "");
Expect(0, 3711, '\p{^_	In-thai}', "");
Expect(0, 3711, '\P{_	In-thai}', "");
Expect(1, 3711, '\P{^_	In-thai}', "");
Expect(0, 3583, '\p{_	In-thai}', "");
Expect(1, 3583, '\p{^_	In-thai}', "");
Expect(1, 3583, '\P{_	In-thai}', "");
Expect(0, 3583, '\P{^_	In-thai}', "");
Error('\p{ :=alchemicalSYMBOLS}');
Error('\P{ :=alchemicalSYMBOLS}');
Expect(1, 128895, '\p{alchemicalsymbols}', "");
Expect(0, 128895, '\p{^alchemicalsymbols}', "");
Expect(0, 128895, '\P{alchemicalsymbols}', "");
Expect(1, 128895, '\P{^alchemicalsymbols}', "");
Expect(0, 128767, '\p{alchemicalsymbols}', "");
Expect(1, 128767, '\p{^alchemicalsymbols}', "");
Expect(1, 128767, '\P{alchemicalsymbols}', "");
Expect(0, 128767, '\P{^alchemicalsymbols}', "");
Expect(1, 128895, '\p{- alchemical	symbols}', "");
Expect(0, 128895, '\p{^- alchemical	symbols}', "");
Expect(0, 128895, '\P{- alchemical	symbols}', "");
Expect(1, 128895, '\P{^- alchemical	symbols}', "");
Expect(0, 128767, '\p{- alchemical	symbols}', "");
Expect(1, 128767, '\p{^- alchemical	symbols}', "");
Expect(1, 128767, '\P{- alchemical	symbols}', "");
Expect(0, 128767, '\P{^- alchemical	symbols}', "");
Error('\p{:=IS-AlchemicalSymbols}');
Error('\P{:=IS-AlchemicalSymbols}');
Expect(1, 128895, '\p{isalchemicalsymbols}', "");
Expect(0, 128895, '\p{^isalchemicalsymbols}', "");
Expect(0, 128895, '\P{isalchemicalsymbols}', "");
Expect(1, 128895, '\P{^isalchemicalsymbols}', "");
Expect(0, 128767, '\p{isalchemicalsymbols}', "");
Expect(1, 128767, '\p{^isalchemicalsymbols}', "");
Expect(1, 128767, '\P{isalchemicalsymbols}', "");
Expect(0, 128767, '\P{^isalchemicalsymbols}', "");
Expect(1, 128895, '\p{__is-alchemical-SYMBOLS}', "");
Expect(0, 128895, '\p{^__is-alchemical-SYMBOLS}', "");
Expect(0, 128895, '\P{__is-alchemical-SYMBOLS}', "");
Expect(1, 128895, '\P{^__is-alchemical-SYMBOLS}', "");
Expect(0, 128767, '\p{__is-alchemical-SYMBOLS}', "");
Expect(1, 128767, '\p{^__is-alchemical-SYMBOLS}', "");
Expect(1, 128767, '\P{__is-alchemical-SYMBOLS}', "");
Expect(0, 128767, '\P{^__is-alchemical-SYMBOLS}', "");
Error('\p{:=-inalchemical Symbols}');
Error('\P{:=-inalchemical Symbols}');
Expect(1, 128895, '\p{inalchemicalsymbols}', "");
Expect(0, 128895, '\p{^inalchemicalsymbols}', "");
Expect(0, 128895, '\P{inalchemicalsymbols}', "");
Expect(1, 128895, '\P{^inalchemicalsymbols}', "");
Expect(0, 128767, '\p{inalchemicalsymbols}', "");
Expect(1, 128767, '\p{^inalchemicalsymbols}', "");
Expect(1, 128767, '\P{inalchemicalsymbols}', "");
Expect(0, 128767, '\P{^inalchemicalsymbols}', "");
Expect(1, 128895, '\p{ 	in-alchemicalSYMBOLS}', "");
Expect(0, 128895, '\p{^ 	in-alchemicalSYMBOLS}', "");
Expect(0, 128895, '\P{ 	in-alchemicalSYMBOLS}', "");
Expect(1, 128895, '\P{^ 	in-alchemicalSYMBOLS}', "");
Expect(0, 128767, '\p{ 	in-alchemicalSYMBOLS}', "");
Expect(1, 128767, '\p{^ 	in-alchemicalSYMBOLS}', "");
Expect(1, 128767, '\P{ 	in-alchemicalSYMBOLS}', "");
Expect(0, 128767, '\P{^ 	in-alchemicalSYMBOLS}', "");
Error('\p{		line Separator/a/}');
Error('\P{		line Separator/a/}');
Expect(1, 8232, '\p{lineseparator}', "");
Expect(0, 8232, '\p{^lineseparator}', "");
Expect(0, 8232, '\P{lineseparator}', "");
Expect(1, 8232, '\P{^lineseparator}', "");
Expect(0, 8231, '\p{lineseparator}', "");
Expect(1, 8231, '\p{^lineseparator}', "");
Expect(1, 8231, '\P{lineseparator}', "");
Expect(0, 8231, '\P{^lineseparator}', "");
Expect(1, 8232, '\p{ -line_Separator}', "");
Expect(0, 8232, '\p{^ -line_Separator}', "");
Expect(0, 8232, '\P{ -line_Separator}', "");
Expect(1, 8232, '\P{^ -line_Separator}', "");
Expect(0, 8231, '\p{ -line_Separator}', "");
Expect(1, 8231, '\p{^ -line_Separator}', "");
Expect(1, 8231, '\P{ -line_Separator}', "");
Expect(0, 8231, '\P{^ -line_Separator}', "");
Error('\p{	Is:=Line	SEPARATOR}');
Error('\P{	Is:=Line	SEPARATOR}');
Expect(1, 8232, '\p{islineseparator}', "");
Expect(0, 8232, '\p{^islineseparator}', "");
Expect(0, 8232, '\P{islineseparator}', "");
Expect(1, 8232, '\P{^islineseparator}', "");
Expect(0, 8231, '\p{islineseparator}', "");
Expect(1, 8231, '\p{^islineseparator}', "");
Expect(1, 8231, '\P{islineseparator}', "");
Expect(0, 8231, '\P{^islineseparator}', "");
Expect(1, 8232, '\p{ _Is_Line-separator}', "");
Expect(0, 8232, '\p{^ _Is_Line-separator}', "");
Expect(0, 8232, '\P{ _Is_Line-separator}', "");
Expect(1, 8232, '\P{^ _Is_Line-separator}', "");
Expect(0, 8231, '\p{ _Is_Line-separator}', "");
Expect(1, 8231, '\p{^ _Is_Line-separator}', "");
Expect(1, 8231, '\P{ _Is_Line-separator}', "");
Expect(0, 8231, '\P{^ _Is_Line-separator}', "");
Error('\p{/a/_zl}');
Error('\P{/a/_zl}');
Expect(1, 8232, '\p{zl}', "");
Expect(0, 8232, '\p{^zl}', "");
Expect(0, 8232, '\P{zl}', "");
Expect(1, 8232, '\P{^zl}', "");
Expect(0, 8231, '\p{zl}', "");
Expect(1, 8231, '\p{^zl}', "");
Expect(1, 8231, '\P{zl}', "");
Expect(0, 8231, '\P{^zl}', "");
Expect(1, 8232, '\p{__zl}', "");
Expect(0, 8232, '\p{^__zl}', "");
Expect(0, 8232, '\P{__zl}', "");
Expect(1, 8232, '\P{^__zl}', "");
Expect(0, 8231, '\p{__zl}', "");
Expect(1, 8231, '\p{^__zl}', "");
Expect(1, 8231, '\P{__zl}', "");
Expect(0, 8231, '\P{^__zl}', "");
Error('\p{_is	Zl/a/}');
Error('\P{_is	Zl/a/}');
Expect(1, 8232, '\p{iszl}', "");
Expect(0, 8232, '\p{^iszl}', "");
Expect(0, 8232, '\P{iszl}', "");
Expect(1, 8232, '\P{^iszl}', "");
Expect(0, 8231, '\p{iszl}', "");
Expect(1, 8231, '\p{^iszl}', "");
Expect(1, 8231, '\P{iszl}', "");
Expect(0, 8231, '\P{^iszl}', "");
Expect(1, 8232, '\p{		Is-Zl}', "");
Expect(0, 8232, '\p{^		Is-Zl}', "");
Expect(0, 8232, '\P{		Is-Zl}', "");
Expect(1, 8232, '\P{^		Is-Zl}', "");
Expect(0, 8231, '\p{		Is-Zl}', "");
Expect(1, 8231, '\p{^		Is-Zl}', "");
Expect(1, 8231, '\P{		Is-Zl}', "");
Expect(0, 8231, '\P{^		Is-Zl}', "");
Error('\p{:=OL	chiki}');
Error('\P{:=OL	chiki}');
Expect(1, 7295, '\p{olchiki}', "");
Expect(0, 7295, '\p{^olchiki}', "");
Expect(0, 7295, '\P{olchiki}', "");
Expect(1, 7295, '\P{^olchiki}', "");
Expect(0, 7247, '\p{olchiki}', "");
Expect(1, 7247, '\p{^olchiki}', "");
Expect(1, 7247, '\P{olchiki}', "");
Expect(0, 7247, '\P{^olchiki}', "");
Expect(1, 7295, '\p{_ ol Chiki}', "");
Expect(0, 7295, '\p{^_ ol Chiki}', "");
Expect(0, 7295, '\P{_ ol Chiki}', "");
Expect(1, 7295, '\P{^_ ol Chiki}', "");
Expect(0, 7247, '\p{_ ol Chiki}', "");
Expect(1, 7247, '\p{^_ ol Chiki}', "");
Expect(1, 7247, '\P{_ ol Chiki}', "");
Expect(0, 7247, '\P{^_ ol Chiki}', "");
Error('\p{_-Is:=Ol-chiki}');
Error('\P{_-Is:=Ol-chiki}');
Expect(1, 7295, '\p{isolchiki}', "");
Expect(0, 7295, '\p{^isolchiki}', "");
Expect(0, 7295, '\P{isolchiki}', "");
Expect(1, 7295, '\P{^isolchiki}', "");
Expect(0, 7247, '\p{isolchiki}', "");
Expect(1, 7247, '\p{^isolchiki}', "");
Expect(1, 7247, '\P{isolchiki}', "");
Expect(0, 7247, '\P{^isolchiki}', "");
Expect(1, 7295, '\p{ Is-OL Chiki}', "");
Expect(0, 7295, '\p{^ Is-OL Chiki}', "");
Expect(0, 7295, '\P{ Is-OL Chiki}', "");
Expect(1, 7295, '\P{^ Is-OL Chiki}', "");
Expect(0, 7247, '\p{ Is-OL Chiki}', "");
Expect(1, 7247, '\p{^ Is-OL Chiki}', "");
Expect(1, 7247, '\P{ Is-OL Chiki}', "");
Expect(0, 7247, '\P{^ Is-OL Chiki}', "");
Error('\p{		Olck:=}');
Error('\P{		Olck:=}');
Expect(1, 7295, '\p{olck}', "");
Expect(0, 7295, '\p{^olck}', "");
Expect(0, 7295, '\P{olck}', "");
Expect(1, 7295, '\P{^olck}', "");
Expect(0, 7247, '\p{olck}', "");
Expect(1, 7247, '\p{^olck}', "");
Expect(1, 7247, '\P{olck}', "");
Expect(0, 7247, '\P{^olck}', "");
Expect(1, 7295, '\p{- OLCK}', "");
Expect(0, 7295, '\p{^- OLCK}', "");
Expect(0, 7295, '\P{- OLCK}', "");
Expect(1, 7295, '\P{^- OLCK}', "");
Expect(0, 7247, '\p{- OLCK}', "");
Expect(1, 7247, '\p{^- OLCK}', "");
Expect(1, 7247, '\P{- OLCK}', "");
Expect(0, 7247, '\P{^- OLCK}', "");
Error('\p{		IsOlck:=}');
Error('\P{		IsOlck:=}');
Expect(1, 7295, '\p{isolck}', "");
Expect(0, 7295, '\p{^isolck}', "");
Expect(0, 7295, '\P{isolck}', "");
Expect(1, 7295, '\P{^isolck}', "");
Expect(0, 7247, '\p{isolck}', "");
Expect(1, 7247, '\p{^isolck}', "");
Expect(1, 7247, '\P{isolck}', "");
Expect(0, 7247, '\P{^isolck}', "");
Expect(1, 7295, '\p{is_Olck}', "");
Expect(0, 7295, '\p{^is_Olck}', "");
Expect(0, 7295, '\P{is_Olck}', "");
Expect(1, 7295, '\P{^is_Olck}', "");
Expect(0, 7247, '\p{is_Olck}', "");
Expect(1, 7247, '\p{^is_Olck}', "");
Expect(1, 7247, '\P{is_Olck}', "");
Expect(0, 7247, '\P{^is_Olck}', "");
Error('\p{:=- BamumSupplement}');
Error('\P{:=- BamumSupplement}');
Expect(1, 92735, '\p{bamumsupplement}', "");
Expect(0, 92735, '\p{^bamumsupplement}', "");
Expect(0, 92735, '\P{bamumsupplement}', "");
Expect(1, 92735, '\P{^bamumsupplement}', "");
Expect(0, 92159, '\p{bamumsupplement}', "");
Expect(1, 92159, '\p{^bamumsupplement}', "");
Expect(1, 92159, '\P{bamumsupplement}', "");
Expect(0, 92159, '\P{^bamumsupplement}', "");
Expect(1, 92735, '\p{_	BamumSUPPLEMENT}', "");
Expect(0, 92735, '\p{^_	BamumSUPPLEMENT}', "");
Expect(0, 92735, '\P{_	BamumSUPPLEMENT}', "");
Expect(1, 92735, '\P{^_	BamumSUPPLEMENT}', "");
Expect(0, 92159, '\p{_	BamumSUPPLEMENT}', "");
Expect(1, 92159, '\p{^_	BamumSUPPLEMENT}', "");
Expect(1, 92159, '\P{_	BamumSUPPLEMENT}', "");
Expect(0, 92159, '\P{^_	BamumSUPPLEMENT}', "");
Error('\p{-is BAMUM/a/SUPPLEMENT}');
Error('\P{-is BAMUM/a/SUPPLEMENT}');
Expect(1, 92735, '\p{isbamumsupplement}', "");
Expect(0, 92735, '\p{^isbamumsupplement}', "");
Expect(0, 92735, '\P{isbamumsupplement}', "");
Expect(1, 92735, '\P{^isbamumsupplement}', "");
Expect(0, 92159, '\p{isbamumsupplement}', "");
Expect(1, 92159, '\p{^isbamumsupplement}', "");
Expect(1, 92159, '\P{isbamumsupplement}', "");
Expect(0, 92159, '\P{^isbamumsupplement}', "");
Expect(1, 92735, '\p{ 	IS_BAMUM	SUPPLEMENT}', "");
Expect(0, 92735, '\p{^ 	IS_BAMUM	SUPPLEMENT}', "");
Expect(0, 92735, '\P{ 	IS_BAMUM	SUPPLEMENT}', "");
Expect(1, 92735, '\P{^ 	IS_BAMUM	SUPPLEMENT}', "");
Expect(0, 92159, '\p{ 	IS_BAMUM	SUPPLEMENT}', "");
Expect(1, 92159, '\p{^ 	IS_BAMUM	SUPPLEMENT}', "");
Expect(1, 92159, '\P{ 	IS_BAMUM	SUPPLEMENT}', "");
Expect(0, 92159, '\P{^ 	IS_BAMUM	SUPPLEMENT}', "");
Error('\p{	INbamum-supplement:=}');
Error('\P{	INbamum-supplement:=}');
Expect(1, 92735, '\p{inbamumsupplement}', "");
Expect(0, 92735, '\p{^inbamumsupplement}', "");
Expect(0, 92735, '\P{inbamumsupplement}', "");
Expect(1, 92735, '\P{^inbamumsupplement}', "");
Expect(0, 92159, '\p{inbamumsupplement}', "");
Expect(1, 92159, '\p{^inbamumsupplement}', "");
Expect(1, 92159, '\P{inbamumsupplement}', "");
Expect(0, 92159, '\P{^inbamumsupplement}', "");
Expect(1, 92735, '\p{_-In-bamum	Supplement}', "");
Expect(0, 92735, '\p{^_-In-bamum	Supplement}', "");
Expect(0, 92735, '\P{_-In-bamum	Supplement}', "");
Expect(1, 92735, '\P{^_-In-bamum	Supplement}', "");
Expect(0, 92159, '\p{_-In-bamum	Supplement}', "");
Expect(1, 92159, '\p{^_-In-bamum	Supplement}', "");
Expect(1, 92159, '\P{_-In-bamum	Supplement}', "");
Expect(0, 92159, '\P{^_-In-bamum	Supplement}', "");
Error('\p{-_Tai-viet/a/}');
Error('\P{-_Tai-viet/a/}');
Expect(1, 43714, '\p{taiviet}', "");
Expect(0, 43714, '\p{^taiviet}', "");
Expect(0, 43714, '\P{taiviet}', "");
Expect(1, 43714, '\P{^taiviet}', "");
Expect(0, 43647, '\p{taiviet}', "");
Expect(1, 43647, '\p{^taiviet}', "");
Expect(1, 43647, '\P{taiviet}', "");
Expect(0, 43647, '\P{^taiviet}', "");
Expect(1, 43714, '\p{-	TAI-VIET}', "");
Expect(0, 43714, '\p{^-	TAI-VIET}', "");
Expect(0, 43714, '\P{-	TAI-VIET}', "");
Expect(1, 43714, '\P{^-	TAI-VIET}', "");
Expect(0, 43647, '\p{-	TAI-VIET}', "");
Expect(1, 43647, '\p{^-	TAI-VIET}', "");
Expect(1, 43647, '\P{-	TAI-VIET}', "");
Expect(0, 43647, '\P{^-	TAI-VIET}', "");
Error('\p{-Is:=Tai_Viet}');
Error('\P{-Is:=Tai_Viet}');
Expect(1, 43714, '\p{istaiviet}', "");
Expect(0, 43714, '\p{^istaiviet}', "");
Expect(0, 43714, '\P{istaiviet}', "");
Expect(1, 43714, '\P{^istaiviet}', "");
Expect(0, 43647, '\p{istaiviet}', "");
Expect(1, 43647, '\p{^istaiviet}', "");
Expect(1, 43647, '\P{istaiviet}', "");
Expect(0, 43647, '\P{^istaiviet}', "");
Expect(1, 43714, '\p{Is_tai	Viet}', "");
Expect(0, 43714, '\p{^Is_tai	Viet}', "");
Expect(0, 43714, '\P{Is_tai	Viet}', "");
Expect(1, 43714, '\P{^Is_tai	Viet}', "");
Expect(0, 43647, '\p{Is_tai	Viet}', "");
Expect(1, 43647, '\p{^Is_tai	Viet}', "");
Expect(1, 43647, '\P{Is_tai	Viet}', "");
Expect(0, 43647, '\P{^Is_tai	Viet}', "");
Error('\p{--Tavt/a/}');
Error('\P{--Tavt/a/}');
Expect(1, 43714, '\p{tavt}', "");
Expect(0, 43714, '\p{^tavt}', "");
Expect(0, 43714, '\P{tavt}', "");
Expect(1, 43714, '\P{^tavt}', "");
Expect(0, 43647, '\p{tavt}', "");
Expect(1, 43647, '\p{^tavt}', "");
Expect(1, 43647, '\P{tavt}', "");
Expect(0, 43647, '\P{^tavt}', "");
Expect(1, 43714, '\p{--Tavt}', "");
Expect(0, 43714, '\p{^--Tavt}', "");
Expect(0, 43714, '\P{--Tavt}', "");
Expect(1, 43714, '\P{^--Tavt}', "");
Expect(0, 43647, '\p{--Tavt}', "");
Expect(1, 43647, '\p{^--Tavt}', "");
Expect(1, 43647, '\P{--Tavt}', "");
Expect(0, 43647, '\P{^--Tavt}', "");
Error('\p{- Is	Tavt:=}');
Error('\P{- Is	Tavt:=}');
Expect(1, 43714, '\p{istavt}', "");
Expect(0, 43714, '\p{^istavt}', "");
Expect(0, 43714, '\P{istavt}', "");
Expect(1, 43714, '\P{^istavt}', "");
Expect(0, 43647, '\p{istavt}', "");
Expect(1, 43647, '\p{^istavt}', "");
Expect(1, 43647, '\P{istavt}', "");
Expect(0, 43647, '\P{^istavt}', "");
Expect(1, 43714, '\p{	_Is	tavt}', "");
Expect(0, 43714, '\p{^	_Is	tavt}', "");
Expect(0, 43714, '\P{	_Is	tavt}', "");
Expect(1, 43714, '\P{^	_Is	tavt}', "");
Expect(0, 43647, '\p{	_Is	tavt}', "");
Expect(1, 43647, '\p{^	_Is	tavt}', "");
Expect(1, 43647, '\P{	_Is	tavt}', "");
Expect(0, 43647, '\P{^	_Is	tavt}', "");
Error('\p{/a/--Thai}');
Error('\P{/a/--Thai}');
Expect(1, 3642, '\p{thai}', "");
Expect(0, 3642, '\p{^thai}', "");
Expect(0, 3642, '\P{thai}', "");
Expect(1, 3642, '\P{^thai}', "");
Expect(0, 3584, '\p{thai}', "");
Expect(1, 3584, '\p{^thai}', "");
Expect(1, 3584, '\P{thai}', "");
Expect(0, 3584, '\P{^thai}', "");
Expect(1, 3642, '\p{- Thai}', "");
Expect(0, 3642, '\p{^- Thai}', "");
Expect(0, 3642, '\P{- Thai}', "");
Expect(1, 3642, '\P{^- Thai}', "");
Expect(0, 3584, '\p{- Thai}', "");
Expect(1, 3584, '\p{^- Thai}', "");
Expect(1, 3584, '\P{- Thai}', "");
Expect(0, 3584, '\P{^- Thai}', "");
Error('\p{_-IS-Thai:=}');
Error('\P{_-IS-Thai:=}');
Expect(1, 3642, '\p{isthai}', "");
Expect(0, 3642, '\p{^isthai}', "");
Expect(0, 3642, '\P{isthai}', "");
Expect(1, 3642, '\P{^isthai}', "");
Expect(0, 3584, '\p{isthai}', "");
Expect(1, 3584, '\p{^isthai}', "");
Expect(1, 3584, '\P{isthai}', "");
Expect(0, 3584, '\P{^isthai}', "");
Expect(1, 3642, '\p{-_Isthai}', "");
Expect(0, 3642, '\p{^-_Isthai}', "");
Expect(0, 3642, '\P{-_Isthai}', "");
Expect(1, 3642, '\P{^-_Isthai}', "");
Expect(0, 3584, '\p{-_Isthai}', "");
Expect(1, 3584, '\p{^-_Isthai}', "");
Expect(1, 3584, '\P{-_Isthai}', "");
Expect(0, 3584, '\P{^-_Isthai}', "");
Error('\p{/a/		ASCII}');
Error('\P{/a/		ASCII}');
Expect(1, 127, '\p{ascii}', "");
Expect(0, 127, '\p{^ascii}', "");
Expect(0, 127, '\P{ascii}', "");
Expect(1, 127, '\P{^ascii}', "");
Expect(0, 128, '\p{ascii}', "");
Expect(1, 128, '\p{^ascii}', "");
Expect(1, 128, '\P{ascii}', "");
Expect(0, 128, '\P{^ascii}', "");
Expect(1, 127, '\p{	 ascii}', "");
Expect(0, 127, '\p{^	 ascii}', "");
Expect(0, 127, '\P{	 ascii}', "");
Expect(1, 127, '\P{^	 ascii}', "");
Expect(0, 128, '\p{	 ascii}', "");
Expect(1, 128, '\p{^	 ascii}', "");
Expect(1, 128, '\P{	 ascii}', "");
Expect(0, 128, '\P{^	 ascii}', "");
Error('\p{/a/_	Is-ASCII}');
Error('\P{/a/_	Is-ASCII}');
Expect(1, 127, '\p{isascii}', "");
Expect(0, 127, '\p{^isascii}', "");
Expect(0, 127, '\P{isascii}', "");
Expect(1, 127, '\P{^isascii}', "");
Expect(0, 128, '\p{isascii}', "");
Expect(1, 128, '\p{^isascii}', "");
Expect(1, 128, '\P{isascii}', "");
Expect(0, 128, '\P{^isascii}', "");
Expect(1, 127, '\p{_	ISASCII}', "");
Expect(0, 127, '\p{^_	ISASCII}', "");
Expect(0, 127, '\P{_	ISASCII}', "");
Expect(1, 127, '\P{^_	ISASCII}', "");
Expect(0, 128, '\p{_	ISASCII}', "");
Expect(1, 128, '\p{^_	ISASCII}', "");
Expect(1, 128, '\P{_	ISASCII}', "");
Expect(0, 128, '\P{^_	ISASCII}', "");
Error('\p{ basic-latin/a/}');
Error('\P{ basic-latin/a/}');
Expect(1, 127, '\p{basiclatin}', "");
Expect(0, 127, '\p{^basiclatin}', "");
Expect(0, 127, '\P{basiclatin}', "");
Expect(1, 127, '\P{^basiclatin}', "");
Expect(0, 128, '\p{basiclatin}', "");
Expect(1, 128, '\p{^basiclatin}', "");
Expect(1, 128, '\P{basiclatin}', "");
Expect(0, 128, '\P{^basiclatin}', "");
Expect(1, 127, '\p{ -Basic Latin}', "");
Expect(0, 127, '\p{^ -Basic Latin}', "");
Expect(0, 127, '\P{ -Basic Latin}', "");
Expect(1, 127, '\P{^ -Basic Latin}', "");
Expect(0, 128, '\p{ -Basic Latin}', "");
Expect(1, 128, '\p{^ -Basic Latin}', "");
Expect(1, 128, '\P{ -Basic Latin}', "");
Expect(0, 128, '\P{^ -Basic Latin}', "");
Error('\p{_/a/Is-BASICLatin}');
Error('\P{_/a/Is-BASICLatin}');
Expect(1, 127, '\p{isbasiclatin}', "");
Expect(0, 127, '\p{^isbasiclatin}', "");
Expect(0, 127, '\P{isbasiclatin}', "");
Expect(1, 127, '\P{^isbasiclatin}', "");
Expect(0, 128, '\p{isbasiclatin}', "");
Expect(1, 128, '\p{^isbasiclatin}', "");
Expect(1, 128, '\P{isbasiclatin}', "");
Expect(0, 128, '\P{^isbasiclatin}', "");
Expect(1, 127, '\p{  Is Basic_Latin}', "");
Expect(0, 127, '\p{^  Is Basic_Latin}', "");
Expect(0, 127, '\P{  Is Basic_Latin}', "");
Expect(1, 127, '\P{^  Is Basic_Latin}', "");
Expect(0, 128, '\p{  Is Basic_Latin}', "");
Expect(1, 128, '\p{^  Is Basic_Latin}', "");
Expect(1, 128, '\P{  Is Basic_Latin}', "");
Expect(0, 128, '\P{^  Is Basic_Latin}', "");
Error('\p{/a/ INbasic_Latin}');
Error('\P{/a/ INbasic_Latin}');
Expect(1, 127, '\p{inbasiclatin}', "");
Expect(0, 127, '\p{^inbasiclatin}', "");
Expect(0, 127, '\P{inbasiclatin}', "");
Expect(1, 127, '\P{^inbasiclatin}', "");
Expect(0, 128, '\p{inbasiclatin}', "");
Expect(1, 128, '\p{^inbasiclatin}', "");
Expect(1, 128, '\P{inbasiclatin}', "");
Expect(0, 128, '\P{^inbasiclatin}', "");
Expect(1, 127, '\p{_In BASIC_latin}', "");
Expect(0, 127, '\p{^_In BASIC_latin}', "");
Expect(0, 127, '\P{_In BASIC_latin}', "");
Expect(1, 127, '\P{^_In BASIC_latin}', "");
Expect(0, 128, '\p{_In BASIC_latin}', "");
Expect(1, 128, '\p{^_In BASIC_latin}', "");
Expect(1, 128, '\P{_In BASIC_latin}', "");
Expect(0, 128, '\P{^_In BASIC_latin}', "");
Error('\p{ IN_ASCII/a/}');
Error('\P{ IN_ASCII/a/}');
Expect(1, 127, '\p{inascii}', "");
Expect(0, 127, '\p{^inascii}', "");
Expect(0, 127, '\P{inascii}', "");
Expect(1, 127, '\P{^inascii}', "");
Expect(0, 128, '\p{inascii}', "");
Expect(1, 128, '\p{^inascii}', "");
Expect(1, 128, '\P{inascii}', "");
Expect(0, 128, '\P{^inascii}', "");
Expect(1, 127, '\p{	-IN ASCII}', "");
Expect(0, 127, '\p{^	-IN ASCII}', "");
Expect(0, 127, '\P{	-IN ASCII}', "");
Expect(1, 127, '\P{^	-IN ASCII}', "");
Expect(0, 128, '\p{	-IN ASCII}', "");
Expect(1, 128, '\p{^	-IN ASCII}', "");
Expect(1, 128, '\P{	-IN ASCII}', "");
Expect(0, 128, '\P{^	-IN ASCII}', "");
Error('\p{ 	yi:=SYLLABLES}');
Error('\P{ 	yi:=SYLLABLES}');
Expect(1, 42127, '\p{yisyllables}', "");
Expect(0, 42127, '\p{^yisyllables}', "");
Expect(0, 42127, '\P{yisyllables}', "");
Expect(1, 42127, '\P{^yisyllables}', "");
Expect(0, 40959, '\p{yisyllables}', "");
Expect(1, 40959, '\p{^yisyllables}', "");
Expect(1, 40959, '\P{yisyllables}', "");
Expect(0, 40959, '\P{^yisyllables}', "");
Expect(1, 42127, '\p{__Yi	syllables}', "");
Expect(0, 42127, '\p{^__Yi	syllables}', "");
Expect(0, 42127, '\P{__Yi	syllables}', "");
Expect(1, 42127, '\P{^__Yi	syllables}', "");
Expect(0, 40959, '\p{__Yi	syllables}', "");
Expect(1, 40959, '\p{^__Yi	syllables}', "");
Expect(1, 40959, '\P{__Yi	syllables}', "");
Expect(0, 40959, '\P{^__Yi	syllables}', "");
Error('\p{- Is:=Yi Syllables}');
Error('\P{- Is:=Yi Syllables}');
Expect(1, 42127, '\p{isyisyllables}', "");
Expect(0, 42127, '\p{^isyisyllables}', "");
Expect(0, 42127, '\P{isyisyllables}', "");
Expect(1, 42127, '\P{^isyisyllables}', "");
Expect(0, 40959, '\p{isyisyllables}', "");
Expect(1, 40959, '\p{^isyisyllables}', "");
Expect(1, 40959, '\P{isyisyllables}', "");
Expect(0, 40959, '\P{^isyisyllables}', "");
Expect(1, 42127, '\p{-	Isyi_Syllables}', "");
Expect(0, 42127, '\p{^-	Isyi_Syllables}', "");
Expect(0, 42127, '\P{-	Isyi_Syllables}', "");
Expect(1, 42127, '\P{^-	Isyi_Syllables}', "");
Expect(0, 40959, '\p{-	Isyi_Syllables}', "");
Expect(1, 40959, '\p{^-	Isyi_Syllables}', "");
Expect(1, 40959, '\P{-	Isyi_Syllables}', "");
Expect(0, 40959, '\P{^-	Isyi_Syllables}', "");
Error('\p{_in	yi-Syllables:=}');
Error('\P{_in	yi-Syllables:=}');
Expect(1, 42127, '\p{inyisyllables}', "");
Expect(0, 42127, '\p{^inyisyllables}', "");
Expect(0, 42127, '\P{inyisyllables}', "");
Expect(1, 42127, '\P{^inyisyllables}', "");
Expect(0, 40959, '\p{inyisyllables}', "");
Expect(1, 40959, '\p{^inyisyllables}', "");
Expect(1, 40959, '\P{inyisyllables}', "");
Expect(0, 40959, '\P{^inyisyllables}', "");
Expect(1, 42127, '\p{ _INyi_Syllables}', "");
Expect(0, 42127, '\p{^ _INyi_Syllables}', "");
Expect(0, 42127, '\P{ _INyi_Syllables}', "");
Expect(1, 42127, '\P{^ _INyi_Syllables}', "");
Expect(0, 40959, '\p{ _INyi_Syllables}', "");
Expect(1, 40959, '\p{^ _INyi_Syllables}', "");
Expect(1, 40959, '\P{ _INyi_Syllables}', "");
Expect(0, 40959, '\P{^ _INyi_Syllables}', "");
Error('\p{:=punct}');
Error('\P{:=punct}');
Expect(1, 35, '\p{punct}', "");
Expect(0, 35, '\p{^punct}', "");
Expect(0, 35, '\P{punct}', "");
Expect(1, 35, '\P{^punct}', "");
Expect(0, 32, '\p{punct}', "");
Expect(1, 32, '\p{^punct}', "");
Expect(1, 32, '\P{punct}', "");
Expect(0, 32, '\P{^punct}', "");
Expect(1, 35, '\p{_Punct}', "");
Expect(0, 35, '\p{^_Punct}', "");
Expect(0, 35, '\P{_Punct}', "");
Expect(1, 35, '\P{^_Punct}', "");
Expect(0, 32, '\p{_Punct}', "");
Expect(1, 32, '\p{^_Punct}', "");
Expect(1, 32, '\P{_Punct}', "");
Expect(0, 32, '\P{^_Punct}', "");
Error('\p{-	Is_PUNCT:=}');
Error('\P{-	Is_PUNCT:=}');
Expect(1, 35, '\p{ispunct}', "");
Expect(0, 35, '\p{^ispunct}', "");
Expect(0, 35, '\P{ispunct}', "");
Expect(1, 35, '\P{^ispunct}', "");
Expect(0, 32, '\p{ispunct}', "");
Expect(1, 32, '\p{^ispunct}', "");
Expect(1, 32, '\P{ispunct}', "");
Expect(0, 32, '\P{^ispunct}', "");
Expect(1, 35, '\p{-isPunct}', "");
Expect(0, 35, '\p{^-isPunct}', "");
Expect(0, 35, '\P{-isPunct}', "");
Expect(1, 35, '\P{^-isPunct}', "");
Expect(0, 32, '\p{-isPunct}', "");
Expect(1, 32, '\p{^-isPunct}', "");
Expect(1, 32, '\P{-isPunct}', "");
Expect(0, 32, '\P{^-isPunct}', "");
Error('\p{/a/ punctuation}');
Error('\P{/a/ punctuation}');
Expect(1, 35, '\p{punctuation}', "");
Expect(0, 35, '\p{^punctuation}', "");
Expect(0, 35, '\P{punctuation}', "");
Expect(1, 35, '\P{^punctuation}', "");
Expect(0, 32, '\p{punctuation}', "");
Expect(1, 32, '\p{^punctuation}', "");
Expect(1, 32, '\P{punctuation}', "");
Expect(0, 32, '\P{^punctuation}', "");
Expect(1, 35, '\p{- PUNCTUATION}', "");
Expect(0, 35, '\p{^- PUNCTUATION}', "");
Expect(0, 35, '\P{- PUNCTUATION}', "");
Expect(1, 35, '\P{^- PUNCTUATION}', "");
Expect(0, 32, '\p{- PUNCTUATION}', "");
Expect(1, 32, '\p{^- PUNCTUATION}', "");
Expect(1, 32, '\P{- PUNCTUATION}', "");
Expect(0, 32, '\P{^- PUNCTUATION}', "");
Error('\p{:=	 Is_punctuation}');
Error('\P{:=	 Is_punctuation}');
Expect(1, 35, '\p{ispunctuation}', "");
Expect(0, 35, '\p{^ispunctuation}', "");
Expect(0, 35, '\P{ispunctuation}', "");
Expect(1, 35, '\P{^ispunctuation}', "");
Expect(0, 32, '\p{ispunctuation}', "");
Expect(1, 32, '\p{^ispunctuation}', "");
Expect(1, 32, '\P{ispunctuation}', "");
Expect(0, 32, '\P{^ispunctuation}', "");
Expect(1, 35, '\p{--Is_punctuation}', "");
Expect(0, 35, '\p{^--Is_punctuation}', "");
Expect(0, 35, '\P{--Is_punctuation}', "");
Expect(1, 35, '\P{^--Is_punctuation}', "");
Expect(0, 32, '\p{--Is_punctuation}', "");
Expect(1, 32, '\p{^--Is_punctuation}', "");
Expect(1, 32, '\P{--Is_punctuation}', "");
Expect(0, 32, '\P{^--Is_punctuation}', "");
Error('\p{_-P:=}');
Error('\P{_-P:=}');
Expect(1, 35, '\p{p}', "");
Expect(0, 35, '\p{^p}', "");
Expect(0, 35, '\P{p}', "");
Expect(1, 35, '\P{^p}', "");
Expect(0, 32, '\p{p}', "");
Expect(1, 32, '\p{^p}', "");
Expect(1, 32, '\P{p}', "");
Expect(0, 32, '\P{^p}', "");
Expect(1, 35, '\p{-P}', "");
Expect(0, 35, '\p{^-P}', "");
Expect(0, 35, '\P{-P}', "");
Expect(1, 35, '\P{^-P}', "");
Expect(0, 32, '\p{-P}', "");
Expect(1, 32, '\p{^-P}', "");
Expect(1, 32, '\P{-P}', "");
Expect(0, 32, '\P{^-P}', "");
Error('\p{	/a/IsP}');
Error('\P{	/a/IsP}');
Expect(1, 35, '\p{isp}', "");
Expect(0, 35, '\p{^isp}', "");
Expect(0, 35, '\P{isp}', "");
Expect(1, 35, '\P{^isp}', "");
Expect(0, 32, '\p{isp}', "");
Expect(1, 32, '\p{^isp}', "");
Expect(1, 32, '\P{isp}', "");
Expect(0, 32, '\P{^isp}', "");
Expect(1, 35, '\p{_Is-P}', "");
Expect(0, 35, '\p{^_Is-P}', "");
Expect(0, 35, '\P{_Is-P}', "");
Expect(1, 35, '\P{^_Is-P}', "");
Expect(0, 32, '\p{_Is-P}', "");
Expect(1, 32, '\p{^_Is-P}', "");
Expect(1, 32, '\P{_Is-P}', "");
Expect(0, 32, '\P{^_Is-P}', "");
Error('\p{Expands_On_NFD}');
Error('\P{Expands_On_NFD}');
Error('\p{Is_Expands_On_NFD}');
Error('\P{Is_Expands_On_NFD}');
Error('\p{XO_NFD}');
Error('\P{XO_NFD}');
Error('\p{Is_XO_NFD}');
Error('\P{Is_XO_NFD}');
Error('\p{-_SuperscriptsAnd:=Subscripts}');
Error('\P{-_SuperscriptsAnd:=Subscripts}');
Expect(1, 8351, '\p{superscriptsandsubscripts}', "");
Expect(0, 8351, '\p{^superscriptsandsubscripts}', "");
Expect(0, 8351, '\P{superscriptsandsubscripts}', "");
Expect(1, 8351, '\P{^superscriptsandsubscripts}', "");
Expect(0, 8303, '\p{superscriptsandsubscripts}', "");
Expect(1, 8303, '\p{^superscriptsandsubscripts}', "");
Expect(1, 8303, '\P{superscriptsandsubscripts}', "");
Expect(0, 8303, '\P{^superscriptsandsubscripts}', "");
Expect(1, 8351, '\p{ _Superscripts-And-SUBSCRIPTS}', "");
Expect(0, 8351, '\p{^ _Superscripts-And-SUBSCRIPTS}', "");
Expect(0, 8351, '\P{ _Superscripts-And-SUBSCRIPTS}', "");
Expect(1, 8351, '\P{^ _Superscripts-And-SUBSCRIPTS}', "");
Expect(0, 8303, '\p{ _Superscripts-And-SUBSCRIPTS}', "");
Expect(1, 8303, '\p{^ _Superscripts-And-SUBSCRIPTS}', "");
Expect(1, 8303, '\P{ _Superscripts-And-SUBSCRIPTS}', "");
Expect(0, 8303, '\P{^ _Superscripts-And-SUBSCRIPTS}', "");
Error('\p{:=Is	Superscripts-andSubscripts}');
Error('\P{:=Is	Superscripts-andSubscripts}');
Expect(1, 8351, '\p{issuperscriptsandsubscripts}', "");
Expect(0, 8351, '\p{^issuperscriptsandsubscripts}', "");
Expect(0, 8351, '\P{issuperscriptsandsubscripts}', "");
Expect(1, 8351, '\P{^issuperscriptsandsubscripts}', "");
Expect(0, 8303, '\p{issuperscriptsandsubscripts}', "");
Expect(1, 8303, '\p{^issuperscriptsandsubscripts}', "");
Expect(1, 8303, '\P{issuperscriptsandsubscripts}', "");
Expect(0, 8303, '\P{^issuperscriptsandsubscripts}', "");
Expect(1, 8351, '\p{	_Is_superscripts_And_Subscripts}', "");
Expect(0, 8351, '\p{^	_Is_superscripts_And_Subscripts}', "");
Expect(0, 8351, '\P{	_Is_superscripts_And_Subscripts}', "");
Expect(1, 8351, '\P{^	_Is_superscripts_And_Subscripts}', "");
Expect(0, 8303, '\p{	_Is_superscripts_And_Subscripts}', "");
Expect(1, 8303, '\p{^	_Is_superscripts_And_Subscripts}', "");
Expect(1, 8303, '\P{	_Is_superscripts_And_Subscripts}', "");
Expect(0, 8303, '\P{^	_Is_superscripts_And_Subscripts}', "");
Error('\p{	/a/inSuperscripts	And_SUBSCRIPTS}');
Error('\P{	/a/inSuperscripts	And_SUBSCRIPTS}');
Expect(1, 8351, '\p{insuperscriptsandsubscripts}', "");
Expect(0, 8351, '\p{^insuperscriptsandsubscripts}', "");
Expect(0, 8351, '\P{insuperscriptsandsubscripts}', "");
Expect(1, 8351, '\P{^insuperscriptsandsubscripts}', "");
Expect(0, 8303, '\p{insuperscriptsandsubscripts}', "");
Expect(1, 8303, '\p{^insuperscriptsandsubscripts}', "");
Expect(1, 8303, '\P{insuperscriptsandsubscripts}', "");
Expect(0, 8303, '\P{^insuperscriptsandsubscripts}', "");
Expect(1, 8351, '\p{	Insuperscripts	And_subscripts}', "");
Expect(0, 8351, '\p{^	Insuperscripts	And_subscripts}', "");
Expect(0, 8351, '\P{	Insuperscripts	And_subscripts}', "");
Expect(1, 8351, '\P{^	Insuperscripts	And_subscripts}', "");
Expect(0, 8303, '\p{	Insuperscripts	And_subscripts}', "");
Expect(1, 8303, '\p{^	Insuperscripts	And_subscripts}', "");
Expect(1, 8303, '\P{	Insuperscripts	And_subscripts}', "");
Expect(0, 8303, '\P{^	Insuperscripts	And_subscripts}', "");
Error('\p{in/a/Balinese}');
Error('\P{in/a/Balinese}');
Expect(1, 7039, '\p{inbalinese}', "");
Expect(0, 7039, '\p{^inbalinese}', "");
Expect(0, 7039, '\P{inbalinese}', "");
Expect(1, 7039, '\P{^inbalinese}', "");
Expect(0, 6911, '\p{inbalinese}', "");
Expect(1, 6911, '\p{^inbalinese}', "");
Expect(1, 6911, '\P{inbalinese}', "");
Expect(0, 6911, '\P{^inbalinese}', "");
Expect(1, 7039, '\p{ _In	BALINESE}', "");
Expect(0, 7039, '\p{^ _In	BALINESE}', "");
Expect(0, 7039, '\P{ _In	BALINESE}', "");
Expect(1, 7039, '\P{^ _In	BALINESE}', "");
Expect(0, 6911, '\p{ _In	BALINESE}', "");
Expect(1, 6911, '\p{^ _In	BALINESE}', "");
Expect(1, 6911, '\P{ _In	BALINESE}', "");
Expect(0, 6911, '\P{^ _In	BALINESE}', "");
Error('\p{deprecated/a/}');
Error('\P{deprecated/a/}');
Expect(1, 329, '\p{deprecated}', "");
Expect(0, 329, '\p{^deprecated}', "");
Expect(0, 329, '\P{deprecated}', "");
Expect(1, 329, '\P{^deprecated}', "");
Expect(0, 328, '\p{deprecated}', "");
Expect(1, 328, '\p{^deprecated}', "");
Expect(1, 328, '\P{deprecated}', "");
Expect(0, 328, '\P{^deprecated}', "");
Expect(1, 329, '\p{ _Deprecated}', "");
Expect(0, 329, '\p{^ _Deprecated}', "");
Expect(0, 329, '\P{ _Deprecated}', "");
Expect(1, 329, '\P{^ _Deprecated}', "");
Expect(0, 328, '\p{ _Deprecated}', "");
Expect(1, 328, '\p{^ _Deprecated}', "");
Expect(1, 328, '\P{ _Deprecated}', "");
Expect(0, 328, '\P{^ _Deprecated}', "");
Error('\p{:=  is Deprecated}');
Error('\P{:=  is Deprecated}');
Expect(1, 329, '\p{isdeprecated}', "");
Expect(0, 329, '\p{^isdeprecated}', "");
Expect(0, 329, '\P{isdeprecated}', "");
Expect(1, 329, '\P{^isdeprecated}', "");
Expect(0, 328, '\p{isdeprecated}', "");
Expect(1, 328, '\p{^isdeprecated}', "");
Expect(1, 328, '\P{isdeprecated}', "");
Expect(0, 328, '\P{^isdeprecated}', "");
Expect(1, 329, '\p{ is-Deprecated}', "");
Expect(0, 329, '\p{^ is-Deprecated}', "");
Expect(0, 329, '\P{ is-Deprecated}', "");
Expect(1, 329, '\P{^ is-Deprecated}', "");
Expect(0, 328, '\p{ is-Deprecated}', "");
Expect(1, 328, '\p{^ is-Deprecated}', "");
Expect(1, 328, '\P{ is-Deprecated}', "");
Expect(0, 328, '\P{^ is-Deprecated}', "");
Error('\p{ -Dep/a/}');
Error('\P{ -Dep/a/}');
Expect(1, 329, '\p{dep}', "");
Expect(0, 329, '\p{^dep}', "");
Expect(0, 329, '\P{dep}', "");
Expect(1, 329, '\P{^dep}', "");
Expect(0, 328, '\p{dep}', "");
Expect(1, 328, '\p{^dep}', "");
Expect(1, 328, '\P{dep}', "");
Expect(0, 328, '\P{^dep}', "");
Expect(1, 329, '\p{_DEP}', "");
Expect(0, 329, '\p{^_DEP}', "");
Expect(0, 329, '\P{_DEP}', "");
Expect(1, 329, '\P{^_DEP}', "");
Expect(0, 328, '\p{_DEP}', "");
Expect(1, 328, '\p{^_DEP}', "");
Expect(1, 328, '\P{_DEP}', "");
Expect(0, 328, '\P{^_DEP}', "");
Error('\p{ :=IsDEP}');
Error('\P{ :=IsDEP}');
Expect(1, 329, '\p{isdep}', "");
Expect(0, 329, '\p{^isdep}', "");
Expect(0, 329, '\P{isdep}', "");
Expect(1, 329, '\P{^isdep}', "");
Expect(0, 328, '\p{isdep}', "");
Expect(1, 328, '\p{^isdep}', "");
Expect(1, 328, '\P{isdep}', "");
Expect(0, 328, '\P{^isdep}', "");
Expect(1, 329, '\p{	Is DEP}', "");
Expect(0, 329, '\p{^	Is DEP}', "");
Expect(0, 329, '\P{	Is DEP}', "");
Expect(1, 329, '\P{^	Is DEP}', "");
Expect(0, 328, '\p{	Is DEP}', "");
Expect(1, 328, '\p{^	Is DEP}', "");
Expect(1, 328, '\P{	Is DEP}', "");
Expect(0, 328, '\P{^	Is DEP}', "");
Error('\p{-:=myanmar}');
Error('\P{-:=myanmar}');
Expect(1, 4255, '\p{myanmar}', "");
Expect(0, 4255, '\p{^myanmar}', "");
Expect(0, 4255, '\P{myanmar}', "");
Expect(1, 4255, '\P{^myanmar}', "");
Expect(0, 4095, '\p{myanmar}', "");
Expect(1, 4095, '\p{^myanmar}', "");
Expect(1, 4095, '\P{myanmar}', "");
Expect(0, 4095, '\P{^myanmar}', "");
Expect(1, 4255, '\p{ Myanmar}', "");
Expect(0, 4255, '\p{^ Myanmar}', "");
Expect(0, 4255, '\P{ Myanmar}', "");
Expect(1, 4255, '\P{^ Myanmar}', "");
Expect(0, 4095, '\p{ Myanmar}', "");
Expect(1, 4095, '\p{^ Myanmar}', "");
Expect(1, 4095, '\P{ Myanmar}', "");
Expect(0, 4095, '\P{^ Myanmar}', "");
Error('\p{ Is	Myanmar/a/}');
Error('\P{ Is	Myanmar/a/}');
Expect(1, 4255, '\p{ismyanmar}', "");
Expect(0, 4255, '\p{^ismyanmar}', "");
Expect(0, 4255, '\P{ismyanmar}', "");
Expect(1, 4255, '\P{^ismyanmar}', "");
Expect(0, 4095, '\p{ismyanmar}', "");
Expect(1, 4095, '\p{^ismyanmar}', "");
Expect(1, 4095, '\P{ismyanmar}', "");
Expect(0, 4095, '\P{^ismyanmar}', "");
Expect(1, 4255, '\p{--is_MYANMAR}', "");
Expect(0, 4255, '\p{^--is_MYANMAR}', "");
Expect(0, 4255, '\P{--is_MYANMAR}', "");
Expect(1, 4255, '\P{^--is_MYANMAR}', "");
Expect(0, 4095, '\p{--is_MYANMAR}', "");
Expect(1, 4095, '\p{^--is_MYANMAR}', "");
Expect(1, 4095, '\P{--is_MYANMAR}', "");
Expect(0, 4095, '\P{^--is_MYANMAR}', "");
Error('\p{/a/-Mymr}');
Error('\P{/a/-Mymr}');
Expect(1, 4255, '\p{mymr}', "");
Expect(0, 4255, '\p{^mymr}', "");
Expect(0, 4255, '\P{mymr}', "");
Expect(1, 4255, '\P{^mymr}', "");
Expect(0, 4095, '\p{mymr}', "");
Expect(1, 4095, '\p{^mymr}', "");
Expect(1, 4095, '\P{mymr}', "");
Expect(0, 4095, '\P{^mymr}', "");
Expect(1, 4255, '\p{	-mymr}', "");
Expect(0, 4255, '\p{^	-mymr}', "");
Expect(0, 4255, '\P{	-mymr}', "");
Expect(1, 4255, '\P{^	-mymr}', "");
Expect(0, 4095, '\p{	-mymr}', "");
Expect(1, 4095, '\p{^	-mymr}', "");
Expect(1, 4095, '\P{	-mymr}', "");
Expect(0, 4095, '\P{^	-mymr}', "");
Error('\p{:= _Is	MYMR}');
Error('\P{:= _Is	MYMR}');
Expect(1, 4255, '\p{ismymr}', "");
Expect(0, 4255, '\p{^ismymr}', "");
Expect(0, 4255, '\P{ismymr}', "");
Expect(1, 4255, '\P{^ismymr}', "");
Expect(0, 4095, '\p{ismymr}', "");
Expect(1, 4095, '\p{^ismymr}', "");
Expect(1, 4095, '\P{ismymr}', "");
Expect(0, 4095, '\P{^ismymr}', "");
Expect(1, 4255, '\p{_-is Mymr}', "");
Expect(0, 4255, '\p{^_-is Mymr}', "");
Expect(0, 4255, '\P{_-is Mymr}', "");
Expect(1, 4255, '\P{^_-is Mymr}', "");
Expect(0, 4095, '\p{_-is Mymr}', "");
Expect(1, 4095, '\p{^_-is Mymr}', "");
Expect(1, 4095, '\P{_-is Mymr}', "");
Expect(0, 4095, '\P{^_-is Mymr}', "");
Error('\p{-_Initial:=PUNCTUATION}');
Error('\P{-_Initial:=PUNCTUATION}');
Expect(1, 171, '\p{initialpunctuation}', "");
Expect(0, 171, '\p{^initialpunctuation}', "");
Expect(0, 171, '\P{initialpunctuation}', "");
Expect(1, 171, '\P{^initialpunctuation}', "");
Expect(0, 170, '\p{initialpunctuation}', "");
Expect(1, 170, '\p{^initialpunctuation}', "");
Expect(1, 170, '\P{initialpunctuation}', "");
Expect(0, 170, '\P{^initialpunctuation}', "");
Expect(1, 171, '\p{		Initial_Punctuation}', "");
Expect(0, 171, '\p{^		Initial_Punctuation}', "");
Expect(0, 171, '\P{		Initial_Punctuation}', "");
Expect(1, 171, '\P{^		Initial_Punctuation}', "");
Expect(0, 170, '\p{		Initial_Punctuation}', "");
Expect(1, 170, '\p{^		Initial_Punctuation}', "");
Expect(1, 170, '\P{		Initial_Punctuation}', "");
Expect(0, 170, '\P{^		Initial_Punctuation}', "");
Error('\p{-:=IS	Initialpunctuation}');
Error('\P{-:=IS	Initialpunctuation}');
Expect(1, 171, '\p{isinitialpunctuation}', "");
Expect(0, 171, '\p{^isinitialpunctuation}', "");
Expect(0, 171, '\P{isinitialpunctuation}', "");
Expect(1, 171, '\P{^isinitialpunctuation}', "");
Expect(0, 170, '\p{isinitialpunctuation}', "");
Expect(1, 170, '\p{^isinitialpunctuation}', "");
Expect(1, 170, '\P{isinitialpunctuation}', "");
Expect(0, 170, '\P{^isinitialpunctuation}', "");
Expect(1, 171, '\p{-IS	initial PUNCTUATION}', "");
Expect(0, 171, '\p{^-IS	initial PUNCTUATION}', "");
Expect(0, 171, '\P{-IS	initial PUNCTUATION}', "");
Expect(1, 171, '\P{^-IS	initial PUNCTUATION}', "");
Expect(0, 170, '\p{-IS	initial PUNCTUATION}', "");
Expect(1, 170, '\p{^-IS	initial PUNCTUATION}', "");
Expect(1, 170, '\P{-IS	initial PUNCTUATION}', "");
Expect(0, 170, '\P{^-IS	initial PUNCTUATION}', "");
Error('\p{-Pi/a/}');
Error('\P{-Pi/a/}');
Expect(1, 171, '\p{pi}', "");
Expect(0, 171, '\p{^pi}', "");
Expect(0, 171, '\P{pi}', "");
Expect(1, 171, '\P{^pi}', "");
Expect(0, 170, '\p{pi}', "");
Expect(1, 170, '\p{^pi}', "");
Expect(1, 170, '\P{pi}', "");
Expect(0, 170, '\P{^pi}', "");
Expect(1, 171, '\p{_Pi}', "");
Expect(0, 171, '\p{^_Pi}', "");
Expect(0, 171, '\P{_Pi}', "");
Expect(1, 171, '\P{^_Pi}', "");
Expect(0, 170, '\p{_Pi}', "");
Expect(1, 170, '\p{^_Pi}', "");
Expect(1, 170, '\P{_Pi}', "");
Expect(0, 170, '\P{^_Pi}', "");
Error('\p{_-IS/a/Pi}');
Error('\P{_-IS/a/Pi}');
Expect(1, 171, '\p{ispi}', "");
Expect(0, 171, '\p{^ispi}', "");
Expect(0, 171, '\P{ispi}', "");
Expect(1, 171, '\P{^ispi}', "");
Expect(0, 170, '\p{ispi}', "");
Expect(1, 170, '\p{^ispi}', "");
Expect(1, 170, '\P{ispi}', "");
Expect(0, 170, '\P{^ispi}', "");
Expect(1, 171, '\p{		isPI}', "");
Expect(0, 171, '\p{^		isPI}', "");
Expect(0, 171, '\P{		isPI}', "");
Expect(1, 171, '\P{^		isPI}', "");
Expect(0, 170, '\p{		isPI}', "");
Expect(1, 170, '\p{^		isPI}', "");
Expect(1, 170, '\P{		isPI}', "");
Expect(0, 170, '\P{^		isPI}', "");
Error('\p{:=-Common}');
Error('\P{:=-Common}');
Expect(1, 64, '\p{common}', "");
Expect(0, 64, '\p{^common}', "");
Expect(0, 64, '\P{common}', "");
Expect(1, 64, '\P{^common}', "");
Expect(0, 90, '\p{common}', "");
Expect(1, 90, '\p{^common}', "");
Expect(1, 90, '\P{common}', "");
Expect(0, 90, '\P{^common}', "");
Expect(1, 64, '\p{  common}', "");
Expect(0, 64, '\p{^  common}', "");
Expect(0, 64, '\P{  common}', "");
Expect(1, 64, '\P{^  common}', "");
Expect(0, 90, '\p{  common}', "");
Expect(1, 90, '\p{^  common}', "");
Expect(1, 90, '\P{  common}', "");
Expect(0, 90, '\P{^  common}', "");
Error('\p{ 	Is	Common:=}');
Error('\P{ 	Is	Common:=}');
Expect(1, 64, '\p{iscommon}', "");
Expect(0, 64, '\p{^iscommon}', "");
Expect(0, 64, '\P{iscommon}', "");
Expect(1, 64, '\P{^iscommon}', "");
Expect(0, 90, '\p{iscommon}', "");
Expect(1, 90, '\p{^iscommon}', "");
Expect(1, 90, '\P{iscommon}', "");
Expect(0, 90, '\P{^iscommon}', "");
Expect(1, 64, '\p{_ is_common}', "");
Expect(0, 64, '\p{^_ is_common}', "");
Expect(0, 64, '\P{_ is_common}', "");
Expect(1, 64, '\P{^_ is_common}', "");
Expect(0, 90, '\p{_ is_common}', "");
Expect(1, 90, '\p{^_ is_common}', "");
Expect(1, 90, '\P{_ is_common}', "");
Expect(0, 90, '\P{^_ is_common}', "");
Error('\p{-/a/Zyyy}');
Error('\P{-/a/Zyyy}');
Expect(1, 64, '\p{zyyy}', "");
Expect(0, 64, '\p{^zyyy}', "");
Expect(0, 64, '\P{zyyy}', "");
Expect(1, 64, '\P{^zyyy}', "");
Expect(0, 90, '\p{zyyy}', "");
Expect(1, 90, '\p{^zyyy}', "");
Expect(1, 90, '\P{zyyy}', "");
Expect(0, 90, '\P{^zyyy}', "");
Expect(1, 64, '\p{	Zyyy}', "");
Expect(0, 64, '\p{^	Zyyy}', "");
Expect(0, 64, '\P{	Zyyy}', "");
Expect(1, 64, '\P{^	Zyyy}', "");
Expect(0, 90, '\p{	Zyyy}', "");
Expect(1, 90, '\p{^	Zyyy}', "");
Expect(1, 90, '\P{	Zyyy}', "");
Expect(0, 90, '\P{^	Zyyy}', "");
Error('\p{	_ISzyyy/a/}');
Error('\P{	_ISzyyy/a/}');
Expect(1, 64, '\p{iszyyy}', "");
Expect(0, 64, '\p{^iszyyy}', "");
Expect(0, 64, '\P{iszyyy}', "");
Expect(1, 64, '\P{^iszyyy}', "");
Expect(0, 90, '\p{iszyyy}', "");
Expect(1, 90, '\p{^iszyyy}', "");
Expect(1, 90, '\P{iszyyy}', "");
Expect(0, 90, '\P{^iszyyy}', "");
Expect(1, 64, '\p{ -Is_Zyyy}', "");
Expect(0, 64, '\p{^ -Is_Zyyy}', "");
Expect(0, 64, '\P{ -Is_Zyyy}', "");
Expect(1, 64, '\P{^ -Is_Zyyy}', "");
Expect(0, 90, '\p{ -Is_Zyyy}', "");
Expect(1, 90, '\p{^ -Is_Zyyy}', "");
Expect(1, 90, '\P{ -Is_Zyyy}', "");
Expect(0, 90, '\P{^ -Is_Zyyy}', "");
Error('\p{/a/ -HANGUL	jamo}');
Error('\P{/a/ -HANGUL	jamo}');
Expect(1, 4607, '\p{hanguljamo}', "");
Expect(0, 4607, '\p{^hanguljamo}', "");
Expect(0, 4607, '\P{hanguljamo}', "");
Expect(1, 4607, '\P{^hanguljamo}', "");
Expect(0, 4351, '\p{hanguljamo}', "");
Expect(1, 4351, '\p{^hanguljamo}', "");
Expect(1, 4351, '\P{hanguljamo}', "");
Expect(0, 4351, '\P{^hanguljamo}', "");
Expect(1, 4607, '\p{_	Hangul	Jamo}', "");
Expect(0, 4607, '\p{^_	Hangul	Jamo}', "");
Expect(0, 4607, '\P{_	Hangul	Jamo}', "");
Expect(1, 4607, '\P{^_	Hangul	Jamo}', "");
Expect(0, 4351, '\p{_	Hangul	Jamo}', "");
Expect(1, 4351, '\p{^_	Hangul	Jamo}', "");
Expect(1, 4351, '\P{_	Hangul	Jamo}', "");
Expect(0, 4351, '\P{^_	Hangul	Jamo}', "");
Error('\p{ /a/is_Hangul-Jamo}');
Error('\P{ /a/is_Hangul-Jamo}');
Expect(1, 4607, '\p{ishanguljamo}', "");
Expect(0, 4607, '\p{^ishanguljamo}', "");
Expect(0, 4607, '\P{ishanguljamo}', "");
Expect(1, 4607, '\P{^ishanguljamo}', "");
Expect(0, 4351, '\p{ishanguljamo}', "");
Expect(1, 4351, '\p{^ishanguljamo}', "");
Expect(1, 4351, '\P{ishanguljamo}', "");
Expect(0, 4351, '\P{^ishanguljamo}', "");
Expect(1, 4607, '\p{	 Is hangul	jamo}', "");
Expect(0, 4607, '\p{^	 Is hangul	jamo}', "");
Expect(0, 4607, '\P{	 Is hangul	jamo}', "");
Expect(1, 4607, '\P{^	 Is hangul	jamo}', "");
Expect(0, 4351, '\p{	 Is hangul	jamo}', "");
Expect(1, 4351, '\p{^	 Is hangul	jamo}', "");
Expect(1, 4351, '\P{	 Is hangul	jamo}', "");
Expect(0, 4351, '\P{^	 Is hangul	jamo}', "");
Error('\p{-In/a/HANGUL	JAMO}');
Error('\P{-In/a/HANGUL	JAMO}');
Expect(1, 4607, '\p{inhanguljamo}', "");
Expect(0, 4607, '\p{^inhanguljamo}', "");
Expect(0, 4607, '\P{inhanguljamo}', "");
Expect(1, 4607, '\P{^inhanguljamo}', "");
Expect(0, 4351, '\p{inhanguljamo}', "");
Expect(1, 4351, '\p{^inhanguljamo}', "");
Expect(1, 4351, '\P{inhanguljamo}', "");
Expect(0, 4351, '\P{^inhanguljamo}', "");
Expect(1, 4607, '\p{ In	Hangul Jamo}', "");
Expect(0, 4607, '\p{^ In	Hangul Jamo}', "");
Expect(0, 4607, '\P{ In	Hangul Jamo}', "");
Expect(1, 4607, '\P{^ In	Hangul Jamo}', "");
Expect(0, 4351, '\p{ In	Hangul Jamo}', "");
Expect(1, 4351, '\p{^ In	Hangul Jamo}', "");
Expect(1, 4351, '\P{ In	Hangul Jamo}', "");
Expect(0, 4351, '\P{^ In	Hangul Jamo}', "");
Error('\p{-:=changesWhen-LOWERCASED}');
Error('\P{-:=changesWhen-LOWERCASED}');
Expect(1, 90, '\p{changeswhenlowercased}', "");
Expect(0, 90, '\p{^changeswhenlowercased}', "");
Expect(0, 90, '\P{changeswhenlowercased}', "");
Expect(1, 90, '\P{^changeswhenlowercased}', "");
Expect(0, 64, '\p{changeswhenlowercased}', "");
Expect(1, 64, '\p{^changeswhenlowercased}', "");
Expect(1, 64, '\P{changeswhenlowercased}', "");
Expect(0, 64, '\P{^changeswhenlowercased}', "");
Expect(1, 90, '\p{_	changes WHENLOWERCASED}', "");
Expect(0, 90, '\p{^_	changes WHENLOWERCASED}', "");
Expect(0, 90, '\P{_	changes WHENLOWERCASED}', "");
Expect(1, 90, '\P{^_	changes WHENLOWERCASED}', "");
Expect(0, 64, '\p{_	changes WHENLOWERCASED}', "");
Expect(1, 64, '\p{^_	changes WHENLOWERCASED}', "");
Expect(1, 64, '\P{_	changes WHENLOWERCASED}', "");
Expect(0, 64, '\P{^_	changes WHENLOWERCASED}', "");
Error('\p{-IS_CHANGES/a/when	Lowercased}');
Error('\P{-IS_CHANGES/a/when	Lowercased}');
Expect(1, 90, '\p{ischangeswhenlowercased}', "");
Expect(0, 90, '\p{^ischangeswhenlowercased}', "");
Expect(0, 90, '\P{ischangeswhenlowercased}', "");
Expect(1, 90, '\P{^ischangeswhenlowercased}', "");
Expect(0, 64, '\p{ischangeswhenlowercased}', "");
Expect(1, 64, '\p{^ischangeswhenlowercased}', "");
Expect(1, 64, '\P{ischangeswhenlowercased}', "");
Expect(0, 64, '\P{^ischangeswhenlowercased}', "");
Expect(1, 90, '\p{  Is-ChangesWHENlowercased}', "");
Expect(0, 90, '\p{^  Is-ChangesWHENlowercased}', "");
Expect(0, 90, '\P{  Is-ChangesWHENlowercased}', "");
Expect(1, 90, '\P{^  Is-ChangesWHENlowercased}', "");
Expect(0, 64, '\p{  Is-ChangesWHENlowercased}', "");
Expect(1, 64, '\p{^  Is-ChangesWHENlowercased}', "");
Expect(1, 64, '\P{  Is-ChangesWHENlowercased}', "");
Expect(0, 64, '\P{^  Is-ChangesWHENlowercased}', "");
Error('\p{_	cwl:=}');
Error('\P{_	cwl:=}');
Expect(1, 90, '\p{cwl}', "");
Expect(0, 90, '\p{^cwl}', "");
Expect(0, 90, '\P{cwl}', "");
Expect(1, 90, '\P{^cwl}', "");
Expect(0, 64, '\p{cwl}', "");
Expect(1, 64, '\p{^cwl}', "");
Expect(1, 64, '\P{cwl}', "");
Expect(0, 64, '\P{^cwl}', "");
Expect(1, 90, '\p{__CWL}', "");
Expect(0, 90, '\p{^__CWL}', "");
Expect(0, 90, '\P{__CWL}', "");
Expect(1, 90, '\P{^__CWL}', "");
Expect(0, 64, '\p{__CWL}', "");
Expect(1, 64, '\p{^__CWL}', "");
Expect(1, 64, '\P{__CWL}', "");
Expect(0, 64, '\P{^__CWL}', "");
Error('\p{/a/Is CWL}');
Error('\P{/a/Is CWL}');
Expect(1, 90, '\p{iscwl}', "");
Expect(0, 90, '\p{^iscwl}', "");
Expect(0, 90, '\P{iscwl}', "");
Expect(1, 90, '\P{^iscwl}', "");
Expect(0, 64, '\p{iscwl}', "");
Expect(1, 64, '\p{^iscwl}', "");
Expect(1, 64, '\P{iscwl}', "");
Expect(0, 64, '\P{^iscwl}', "");
Expect(1, 90, '\p{ ISCWL}', "");
Expect(0, 90, '\p{^ ISCWL}', "");
Expect(0, 90, '\P{ ISCWL}', "");
Expect(1, 90, '\P{^ ISCWL}', "");
Expect(0, 64, '\p{ ISCWL}', "");
Expect(1, 64, '\p{^ ISCWL}', "");
Expect(1, 64, '\P{ ISCWL}', "");
Expect(0, 64, '\P{^ ISCWL}', "");
Error('\p{ /a/canadianABORIGINAL}');
Error('\P{ /a/canadianABORIGINAL}');
Expect(1, 5759, '\p{canadianaboriginal}', "");
Expect(0, 5759, '\p{^canadianaboriginal}', "");
Expect(0, 5759, '\P{canadianaboriginal}', "");
Expect(1, 5759, '\P{^canadianaboriginal}', "");
Expect(0, 5119, '\p{canadianaboriginal}', "");
Expect(1, 5119, '\p{^canadianaboriginal}', "");
Expect(1, 5119, '\P{canadianaboriginal}', "");
Expect(0, 5119, '\P{^canadianaboriginal}', "");
Expect(1, 5759, '\p{__canadianaboriginal}', "");
Expect(0, 5759, '\p{^__canadianaboriginal}', "");
Expect(0, 5759, '\P{__canadianaboriginal}', "");
Expect(1, 5759, '\P{^__canadianaboriginal}', "");
Expect(0, 5119, '\p{__canadianaboriginal}', "");
Expect(1, 5119, '\p{^__canadianaboriginal}', "");
Expect(1, 5119, '\P{__canadianaboriginal}', "");
Expect(0, 5119, '\P{^__canadianaboriginal}', "");
Error('\p{ :=IS-Canadian	ABORIGINAL}');
Error('\P{ :=IS-Canadian	ABORIGINAL}');
Expect(1, 5759, '\p{iscanadianaboriginal}', "");
Expect(0, 5759, '\p{^iscanadianaboriginal}', "");
Expect(0, 5759, '\P{iscanadianaboriginal}', "");
Expect(1, 5759, '\P{^iscanadianaboriginal}', "");
Expect(0, 5119, '\p{iscanadianaboriginal}', "");
Expect(1, 5119, '\p{^iscanadianaboriginal}', "");
Expect(1, 5119, '\P{iscanadianaboriginal}', "");
Expect(0, 5119, '\P{^iscanadianaboriginal}', "");
Expect(1, 5759, '\p{  is Canadian Aboriginal}', "");
Expect(0, 5759, '\p{^  is Canadian Aboriginal}', "");
Expect(0, 5759, '\P{  is Canadian Aboriginal}', "");
Expect(1, 5759, '\P{^  is Canadian Aboriginal}', "");
Expect(0, 5119, '\p{  is Canadian Aboriginal}', "");
Expect(1, 5119, '\p{^  is Canadian Aboriginal}', "");
Expect(1, 5119, '\P{  is Canadian Aboriginal}', "");
Expect(0, 5119, '\P{^  is Canadian Aboriginal}', "");
Error('\p{ :=Cans}');
Error('\P{ :=Cans}');
Expect(1, 5759, '\p{cans}', "");
Expect(0, 5759, '\p{^cans}', "");
Expect(0, 5759, '\P{cans}', "");
Expect(1, 5759, '\P{^cans}', "");
Expect(0, 5119, '\p{cans}', "");
Expect(1, 5119, '\p{^cans}', "");
Expect(1, 5119, '\P{cans}', "");
Expect(0, 5119, '\P{^cans}', "");
Expect(1, 5759, '\p{_-CANS}', "");
Expect(0, 5759, '\p{^_-CANS}', "");
Expect(0, 5759, '\P{_-CANS}', "");
Expect(1, 5759, '\P{^_-CANS}', "");
Expect(0, 5119, '\p{_-CANS}', "");
Expect(1, 5119, '\p{^_-CANS}', "");
Expect(1, 5119, '\P{_-CANS}', "");
Expect(0, 5119, '\P{^_-CANS}', "");
Error('\p{- IsCans:=}');
Error('\P{- IsCans:=}');
Expect(1, 5759, '\p{iscans}', "");
Expect(0, 5759, '\p{^iscans}', "");
Expect(0, 5759, '\P{iscans}', "");
Expect(1, 5759, '\P{^iscans}', "");
Expect(0, 5119, '\p{iscans}', "");
Expect(1, 5119, '\p{^iscans}', "");
Expect(1, 5119, '\P{iscans}', "");
Expect(0, 5119, '\P{^iscans}', "");
Expect(1, 5759, '\p{isCANS}', "");
Expect(0, 5759, '\p{^isCANS}', "");
Expect(0, 5759, '\P{isCANS}', "");
Expect(1, 5759, '\P{^isCANS}', "");
Expect(0, 5119, '\p{isCANS}', "");
Expect(1, 5119, '\p{^isCANS}', "");
Expect(1, 5119, '\P{isCANS}', "");
Expect(0, 5119, '\P{^isCANS}', "");
Error('\p{_/a/PATTERN_SYNTAX}');
Error('\P{_/a/PATTERN_SYNTAX}');
Expect(1, 47, '\p{patternsyntax}', "");
Expect(0, 47, '\p{^patternsyntax}', "");
Expect(0, 47, '\P{patternsyntax}', "");
Expect(1, 47, '\P{^patternsyntax}', "");
Expect(0, 32, '\p{patternsyntax}', "");
Expect(1, 32, '\p{^patternsyntax}', "");
Expect(1, 32, '\P{patternsyntax}', "");
Expect(0, 32, '\P{^patternsyntax}', "");
Expect(1, 47, '\p{ patternSyntax}', "");
Expect(0, 47, '\p{^ patternSyntax}', "");
Expect(0, 47, '\P{ patternSyntax}', "");
Expect(1, 47, '\P{^ patternSyntax}', "");
Expect(0, 32, '\p{ patternSyntax}', "");
Expect(1, 32, '\p{^ patternSyntax}', "");
Expect(1, 32, '\P{ patternSyntax}', "");
Expect(0, 32, '\P{^ patternSyntax}', "");
Error('\p{	/a/Is	PATTERN_SYNTAX}');
Error('\P{	/a/Is	PATTERN_SYNTAX}');
Expect(1, 47, '\p{ispatternsyntax}', "");
Expect(0, 47, '\p{^ispatternsyntax}', "");
Expect(0, 47, '\P{ispatternsyntax}', "");
Expect(1, 47, '\P{^ispatternsyntax}', "");
Expect(0, 32, '\p{ispatternsyntax}', "");
Expect(1, 32, '\p{^ispatternsyntax}', "");
Expect(1, 32, '\P{ispatternsyntax}', "");
Expect(0, 32, '\P{^ispatternsyntax}', "");
Expect(1, 47, '\p{ _IS	PATTERN syntax}', "");
Expect(0, 47, '\p{^ _IS	PATTERN syntax}', "");
Expect(0, 47, '\P{ _IS	PATTERN syntax}', "");
Expect(1, 47, '\P{^ _IS	PATTERN syntax}', "");
Expect(0, 32, '\p{ _IS	PATTERN syntax}', "");
Expect(1, 32, '\p{^ _IS	PATTERN syntax}', "");
Expect(1, 32, '\P{ _IS	PATTERN syntax}', "");
Expect(0, 32, '\P{^ _IS	PATTERN syntax}', "");
Error('\p{:=_	pat syn}');
Error('\P{:=_	pat syn}');
Expect(1, 47, '\p{patsyn}', "");
Expect(0, 47, '\p{^patsyn}', "");
Expect(0, 47, '\P{patsyn}', "");
Expect(1, 47, '\P{^patsyn}', "");
Expect(0, 32, '\p{patsyn}', "");
Expect(1, 32, '\p{^patsyn}', "");
Expect(1, 32, '\P{patsyn}', "");
Expect(0, 32, '\P{^patsyn}', "");
Expect(1, 47, '\p{_Pat SYN}', "");
Expect(0, 47, '\p{^_Pat SYN}', "");
Expect(0, 47, '\P{_Pat SYN}', "");
Expect(1, 47, '\P{^_Pat SYN}', "");
Expect(0, 32, '\p{_Pat SYN}', "");
Expect(1, 32, '\p{^_Pat SYN}', "");
Expect(1, 32, '\P{_Pat SYN}', "");
Expect(0, 32, '\P{^_Pat SYN}', "");
Error('\p{--Is/a/PAT	Syn}');
Error('\P{--Is/a/PAT	Syn}');
Expect(1, 47, '\p{ispatsyn}', "");
Expect(0, 47, '\p{^ispatsyn}', "");
Expect(0, 47, '\P{ispatsyn}', "");
Expect(1, 47, '\P{^ispatsyn}', "");
Expect(0, 32, '\p{ispatsyn}', "");
Expect(1, 32, '\p{^ispatsyn}', "");
Expect(1, 32, '\P{ispatsyn}', "");
Expect(0, 32, '\P{^ispatsyn}', "");
Expect(1, 47, '\p{-Is Pat Syn}', "");
Expect(0, 47, '\p{^-Is Pat Syn}', "");
Expect(0, 47, '\P{-Is Pat Syn}', "");
Expect(1, 47, '\P{^-Is Pat Syn}', "");
Expect(0, 32, '\p{-Is Pat Syn}', "");
Expect(1, 32, '\p{^-Is Pat Syn}', "");
Expect(1, 32, '\P{-Is Pat Syn}', "");
Expect(0, 32, '\P{^-Is Pat Syn}', "");
Error('\p{ -Other:=}');
Error('\P{ -Other:=}');
Expect(1, 31, '\p{other}', "");
Expect(0, 31, '\p{^other}', "");
Expect(0, 31, '\P{other}', "");
Expect(1, 31, '\P{^other}', "");
Expect(0, 126, '\p{other}', "");
Expect(1, 126, '\p{^other}', "");
Expect(1, 126, '\P{other}', "");
Expect(0, 126, '\P{^other}', "");
Expect(1, 31, '\p{		OTHER}', "");
Expect(0, 31, '\p{^		OTHER}', "");
Expect(0, 31, '\P{		OTHER}', "");
Expect(1, 31, '\P{^		OTHER}', "");
Expect(0, 126, '\p{		OTHER}', "");
Expect(1, 126, '\p{^		OTHER}', "");
Expect(1, 126, '\P{		OTHER}', "");
Expect(0, 126, '\P{^		OTHER}', "");
Error('\p{	/a/IS OTHER}');
Error('\P{	/a/IS OTHER}');
Expect(1, 31, '\p{isother}', "");
Expect(0, 31, '\p{^isother}', "");
Expect(0, 31, '\P{isother}', "");
Expect(1, 31, '\P{^isother}', "");
Expect(0, 126, '\p{isother}', "");
Expect(1, 126, '\p{^isother}', "");
Expect(1, 126, '\P{isother}', "");
Expect(0, 126, '\P{^isother}', "");
Expect(1, 31, '\p{	Isother}', "");
Expect(0, 31, '\p{^	Isother}', "");
Expect(0, 31, '\P{	Isother}', "");
Expect(1, 31, '\P{^	Isother}', "");
Expect(0, 126, '\p{	Isother}', "");
Expect(1, 126, '\p{^	Isother}', "");
Expect(1, 126, '\P{	Isother}', "");
Expect(0, 126, '\P{^	Isother}', "");
Error('\p{/a/C}');
Error('\P{/a/C}');
Expect(1, 31, '\p{c}', "");
Expect(0, 31, '\p{^c}', "");
Expect(0, 31, '\P{c}', "");
Expect(1, 31, '\P{^c}', "");
Expect(0, 126, '\p{c}', "");
Expect(1, 126, '\p{^c}', "");
Expect(1, 126, '\P{c}', "");
Expect(0, 126, '\P{^c}', "");
Expect(1, 31, '\p{	C}', "");
Expect(0, 31, '\p{^	C}', "");
Expect(0, 31, '\P{	C}', "");
Expect(1, 31, '\P{^	C}', "");
Expect(0, 126, '\p{	C}', "");
Expect(1, 126, '\p{^	C}', "");
Expect(1, 126, '\P{	C}', "");
Expect(0, 126, '\P{^	C}', "");
Error('\p{/a/	 IsC}');
Error('\P{/a/	 IsC}');
Expect(1, 31, '\p{isc}', "");
Expect(0, 31, '\p{^isc}', "");
Expect(0, 31, '\P{isc}', "");
Expect(1, 31, '\P{^isc}', "");
Expect(0, 126, '\p{isc}', "");
Expect(1, 126, '\p{^isc}', "");
Expect(1, 126, '\P{isc}', "");
Expect(0, 126, '\P{^isc}', "");
Expect(1, 31, '\p{_Is C}', "");
Expect(0, 31, '\p{^_Is C}', "");
Expect(0, 31, '\P{_Is C}', "");
Expect(1, 31, '\P{^_Is C}', "");
Expect(0, 126, '\p{_Is C}', "");
Expect(1, 126, '\p{^_Is C}', "");
Expect(1, 126, '\P{_Is C}', "");
Expect(0, 126, '\P{^_Is C}', "");
Error('\p{/a/	_variation_Selector}');
Error('\P{/a/	_variation_Selector}');
Expect(1, 6157, '\p{variationselector}', "");
Expect(0, 6157, '\p{^variationselector}', "");
Expect(0, 6157, '\P{variationselector}', "");
Expect(1, 6157, '\P{^variationselector}', "");
Expect(0, 6154, '\p{variationselector}', "");
Expect(1, 6154, '\p{^variationselector}', "");
Expect(1, 6154, '\P{variationselector}', "");
Expect(0, 6154, '\P{^variationselector}', "");
Expect(1, 6157, '\p{-variationselector}', "");
Expect(0, 6157, '\p{^-variationselector}', "");
Expect(0, 6157, '\P{-variationselector}', "");
Expect(1, 6157, '\P{^-variationselector}', "");
Expect(0, 6154, '\p{-variationselector}', "");
Expect(1, 6154, '\p{^-variationselector}', "");
Expect(1, 6154, '\P{-variationselector}', "");
Expect(0, 6154, '\P{^-variationselector}', "");
Error('\p{ -Is/a/VARIATIONselector}');
Error('\P{ -Is/a/VARIATIONselector}');
Expect(1, 6157, '\p{isvariationselector}', "");
Expect(0, 6157, '\p{^isvariationselector}', "");
Expect(0, 6157, '\P{isvariationselector}', "");
Expect(1, 6157, '\P{^isvariationselector}', "");
Expect(0, 6154, '\p{isvariationselector}', "");
Expect(1, 6154, '\p{^isvariationselector}', "");
Expect(1, 6154, '\P{isvariationselector}', "");
Expect(0, 6154, '\P{^isvariationselector}', "");
Expect(1, 6157, '\p{-	Is_VARIATION_selector}', "");
Expect(0, 6157, '\p{^-	Is_VARIATION_selector}', "");
Expect(0, 6157, '\P{-	Is_VARIATION_selector}', "");
Expect(1, 6157, '\P{^-	Is_VARIATION_selector}', "");
Expect(0, 6154, '\p{-	Is_VARIATION_selector}', "");
Expect(1, 6154, '\p{^-	Is_VARIATION_selector}', "");
Expect(1, 6154, '\P{-	Is_VARIATION_selector}', "");
Expect(0, 6154, '\P{^-	Is_VARIATION_selector}', "");
Error('\p{/a/_VS}');
Error('\P{/a/_VS}');
Expect(1, 6157, '\p{vs}', "");
Expect(0, 6157, '\p{^vs}', "");
Expect(0, 6157, '\P{vs}', "");
Expect(1, 6157, '\P{^vs}', "");
Expect(0, 6154, '\p{vs}', "");
Expect(1, 6154, '\p{^vs}', "");
Expect(1, 6154, '\P{vs}', "");
Expect(0, 6154, '\P{^vs}', "");
Expect(1, 6157, '\p{	-VS}', "");
Expect(0, 6157, '\p{^	-VS}', "");
Expect(0, 6157, '\P{	-VS}', "");
Expect(1, 6157, '\P{^	-VS}', "");
Expect(0, 6154, '\p{	-VS}', "");
Expect(1, 6154, '\p{^	-VS}', "");
Expect(1, 6154, '\P{	-VS}', "");
Expect(0, 6154, '\P{^	-VS}', "");
Error('\p{  Is:=VS}');
Error('\P{  Is:=VS}');
Expect(1, 6157, '\p{isvs}', "");
Expect(0, 6157, '\p{^isvs}', "");
Expect(0, 6157, '\P{isvs}', "");
Expect(1, 6157, '\P{^isvs}', "");
Expect(0, 6154, '\p{isvs}', "");
Expect(1, 6154, '\p{^isvs}', "");
Expect(1, 6154, '\P{isvs}', "");
Expect(0, 6154, '\P{^isvs}', "");
Expect(1, 6157, '\p{		Is_VS}', "");
Expect(0, 6157, '\p{^		Is_VS}', "");
Expect(0, 6157, '\P{		Is_VS}', "");
Expect(1, 6157, '\P{^		Is_VS}', "");
Expect(0, 6154, '\p{		Is_VS}', "");
Expect(1, 6154, '\p{^		Is_VS}', "");
Expect(1, 6154, '\P{		Is_VS}', "");
Expect(0, 6154, '\P{^		Is_VS}', "");
Error('\p{ CYPRIOT_SYLLABARY:=}');
Error('\P{ CYPRIOT_SYLLABARY:=}');
Expect(1, 67647, '\p{cypriotsyllabary}', "");
Expect(0, 67647, '\p{^cypriotsyllabary}', "");
Expect(0, 67647, '\P{cypriotsyllabary}', "");
Expect(1, 67647, '\P{^cypriotsyllabary}', "");
Expect(0, 67583, '\p{cypriotsyllabary}', "");
Expect(1, 67583, '\p{^cypriotsyllabary}', "");
Expect(1, 67583, '\P{cypriotsyllabary}', "");
Expect(0, 67583, '\P{^cypriotsyllabary}', "");
Expect(1, 67647, '\p{--Cypriot	Syllabary}', "");
Expect(0, 67647, '\p{^--Cypriot	Syllabary}', "");
Expect(0, 67647, '\P{--Cypriot	Syllabary}', "");
Expect(1, 67647, '\P{^--Cypriot	Syllabary}', "");
Expect(0, 67583, '\p{--Cypriot	Syllabary}', "");
Expect(1, 67583, '\p{^--Cypriot	Syllabary}', "");
Expect(1, 67583, '\P{--Cypriot	Syllabary}', "");
Expect(0, 67583, '\P{^--Cypriot	Syllabary}', "");
Error('\p{ -Is:=Cypriot	Syllabary}');
Error('\P{ -Is:=Cypriot	Syllabary}');
Expect(1, 67647, '\p{iscypriotsyllabary}', "");
Expect(0, 67647, '\p{^iscypriotsyllabary}', "");
Expect(0, 67647, '\P{iscypriotsyllabary}', "");
Expect(1, 67647, '\P{^iscypriotsyllabary}', "");
Expect(0, 67583, '\p{iscypriotsyllabary}', "");
Expect(1, 67583, '\p{^iscypriotsyllabary}', "");
Expect(1, 67583, '\P{iscypriotsyllabary}', "");
Expect(0, 67583, '\P{^iscypriotsyllabary}', "");
Expect(1, 67647, '\p{		is	CYPRIOT Syllabary}', "");
Expect(0, 67647, '\p{^		is	CYPRIOT Syllabary}', "");
Expect(0, 67647, '\P{		is	CYPRIOT Syllabary}', "");
Expect(1, 67647, '\P{^		is	CYPRIOT Syllabary}', "");
Expect(0, 67583, '\p{		is	CYPRIOT Syllabary}', "");
Expect(1, 67583, '\p{^		is	CYPRIOT Syllabary}', "");
Expect(1, 67583, '\P{		is	CYPRIOT Syllabary}', "");
Expect(0, 67583, '\P{^		is	CYPRIOT Syllabary}', "");
Error('\p{/a/_IN-Cypriot_SYLLABARY}');
Error('\P{/a/_IN-Cypriot_SYLLABARY}');
Expect(1, 67647, '\p{incypriotsyllabary}', "");
Expect(0, 67647, '\p{^incypriotsyllabary}', "");
Expect(0, 67647, '\P{incypriotsyllabary}', "");
Expect(1, 67647, '\P{^incypriotsyllabary}', "");
Expect(0, 67583, '\p{incypriotsyllabary}', "");
Expect(1, 67583, '\p{^incypriotsyllabary}', "");
Expect(1, 67583, '\P{incypriotsyllabary}', "");
Expect(0, 67583, '\P{^incypriotsyllabary}', "");
Expect(1, 67647, '\p{	-InCypriot-Syllabary}', "");
Expect(0, 67647, '\p{^	-InCypriot-Syllabary}', "");
Expect(0, 67647, '\P{	-InCypriot-Syllabary}', "");
Expect(1, 67647, '\P{^	-InCypriot-Syllabary}', "");
Expect(0, 67583, '\p{	-InCypriot-Syllabary}', "");
Expect(1, 67583, '\p{^	-InCypriot-Syllabary}', "");
Expect(1, 67583, '\P{	-InCypriot-Syllabary}', "");
Expect(0, 67583, '\P{^	-InCypriot-Syllabary}', "");
Error('\p{	coptic/a/}');
Error('\P{	coptic/a/}');
Expect(1, 1007, '\p{coptic}', "");
Expect(0, 1007, '\p{^coptic}', "");
Expect(0, 1007, '\P{coptic}', "");
Expect(1, 1007, '\P{^coptic}', "");
Expect(0, 993, '\p{coptic}', "");
Expect(1, 993, '\p{^coptic}', "");
Expect(1, 993, '\P{coptic}', "");
Expect(0, 993, '\P{^coptic}', "");
Expect(1, 1007, '\p{_-coptic}', "");
Expect(0, 1007, '\p{^_-coptic}', "");
Expect(0, 1007, '\P{_-coptic}', "");
Expect(1, 1007, '\P{^_-coptic}', "");
Expect(0, 993, '\p{_-coptic}', "");
Expect(1, 993, '\p{^_-coptic}', "");
Expect(1, 993, '\P{_-coptic}', "");
Expect(0, 993, '\P{^_-coptic}', "");
Error('\p{ :=Is_Coptic}');
Error('\P{ :=Is_Coptic}');
Expect(1, 1007, '\p{iscoptic}', "");
Expect(0, 1007, '\p{^iscoptic}', "");
Expect(0, 1007, '\P{iscoptic}', "");
Expect(1, 1007, '\P{^iscoptic}', "");
Expect(0, 993, '\p{iscoptic}', "");
Expect(1, 993, '\p{^iscoptic}', "");
Expect(1, 993, '\P{iscoptic}', "");
Expect(0, 993, '\P{^iscoptic}', "");
Expect(1, 1007, '\p{ _is coptic}', "");
Expect(0, 1007, '\p{^ _is coptic}', "");
Expect(0, 1007, '\P{ _is coptic}', "");
Expect(1, 1007, '\P{^ _is coptic}', "");
Expect(0, 993, '\p{ _is coptic}', "");
Expect(1, 993, '\p{^ _is coptic}', "");
Expect(1, 993, '\P{ _is coptic}', "");
Expect(0, 993, '\P{^ _is coptic}', "");
Error('\p{/a/ Copt}');
Error('\P{/a/ Copt}');
Expect(1, 1007, '\p{copt}', "");
Expect(0, 1007, '\p{^copt}', "");
Expect(0, 1007, '\P{copt}', "");
Expect(1, 1007, '\P{^copt}', "");
Expect(0, 993, '\p{copt}', "");
Expect(1, 993, '\p{^copt}', "");
Expect(1, 993, '\P{copt}', "");
Expect(0, 993, '\P{^copt}', "");
Expect(1, 1007, '\p{_-Copt}', "");
Expect(0, 1007, '\p{^_-Copt}', "");
Expect(0, 1007, '\P{_-Copt}', "");
Expect(1, 1007, '\P{^_-Copt}', "");
Expect(0, 993, '\p{_-Copt}', "");
Expect(1, 993, '\p{^_-Copt}', "");
Expect(1, 993, '\P{_-Copt}', "");
Expect(0, 993, '\P{^_-Copt}', "");
Error('\p{_ Is/a/copt}');
Error('\P{_ Is/a/copt}');
Expect(1, 1007, '\p{iscopt}', "");
Expect(0, 1007, '\p{^iscopt}', "");
Expect(0, 1007, '\P{iscopt}', "");
Expect(1, 1007, '\P{^iscopt}', "");
Expect(0, 993, '\p{iscopt}', "");
Expect(1, 993, '\p{^iscopt}', "");
Expect(1, 993, '\P{iscopt}', "");
Expect(0, 993, '\P{^iscopt}', "");
Expect(1, 1007, '\p{-_Is-COPT}', "");
Expect(0, 1007, '\p{^-_Is-COPT}', "");
Expect(0, 1007, '\P{-_Is-COPT}', "");
Expect(1, 1007, '\P{^-_Is-COPT}', "");
Expect(0, 993, '\p{-_Is-COPT}', "");
Expect(1, 993, '\p{^-_Is-COPT}', "");
Expect(1, 993, '\P{-_Is-COPT}', "");
Expect(0, 993, '\P{^-_Is-COPT}', "");
Error('\p{-QAAC/a/}');
Error('\P{-QAAC/a/}');
Expect(1, 1007, '\p{qaac}', "");
Expect(0, 1007, '\p{^qaac}', "");
Expect(0, 1007, '\P{qaac}', "");
Expect(1, 1007, '\P{^qaac}', "");
Expect(0, 993, '\p{qaac}', "");
Expect(1, 993, '\p{^qaac}', "");
Expect(1, 993, '\P{qaac}', "");
Expect(0, 993, '\P{^qaac}', "");
Expect(1, 1007, '\p{	qaac}', "");
Expect(0, 1007, '\p{^	qaac}', "");
Expect(0, 1007, '\P{	qaac}', "");
Expect(1, 1007, '\P{^	qaac}', "");
Expect(0, 993, '\p{	qaac}', "");
Expect(1, 993, '\p{^	qaac}', "");
Expect(1, 993, '\P{	qaac}', "");
Expect(0, 993, '\P{^	qaac}', "");
Error('\p{	 Is QAAC:=}');
Error('\P{	 Is QAAC:=}');
Expect(1, 1007, '\p{isqaac}', "");
Expect(0, 1007, '\p{^isqaac}', "");
Expect(0, 1007, '\P{isqaac}', "");
Expect(1, 1007, '\P{^isqaac}', "");
Expect(0, 993, '\p{isqaac}', "");
Expect(1, 993, '\p{^isqaac}', "");
Expect(1, 993, '\P{isqaac}', "");
Expect(0, 993, '\P{^isqaac}', "");
Expect(1, 1007, '\p{ Is-Qaac}', "");
Expect(0, 1007, '\p{^ Is-Qaac}', "");
Expect(0, 1007, '\P{ Is-Qaac}', "");
Expect(1, 1007, '\P{^ Is-Qaac}', "");
Expect(0, 993, '\p{ Is-Qaac}', "");
Expect(1, 993, '\p{^ Is-Qaac}', "");
Expect(1, 993, '\P{ Is-Qaac}', "");
Expect(0, 993, '\P{^ Is-Qaac}', "");
Error('\p{/a/ -SUPPLEMENTAL-arrows-b}');
Error('\P{/a/ -SUPPLEMENTAL-arrows-b}');
Expect(1, 10623, '\p{supplementalarrowsb}', "");
Expect(0, 10623, '\p{^supplementalarrowsb}', "");
Expect(0, 10623, '\P{supplementalarrowsb}', "");
Expect(1, 10623, '\P{^supplementalarrowsb}', "");
Expect(0, 10495, '\p{supplementalarrowsb}', "");
Expect(1, 10495, '\p{^supplementalarrowsb}', "");
Expect(1, 10495, '\P{supplementalarrowsb}', "");
Expect(0, 10495, '\P{^supplementalarrowsb}', "");
Expect(1, 10623, '\p{-supplementalArrowsB}', "");
Expect(0, 10623, '\p{^-supplementalArrowsB}', "");
Expect(0, 10623, '\P{-supplementalArrowsB}', "");
Expect(1, 10623, '\P{^-supplementalArrowsB}', "");
Expect(0, 10495, '\p{-supplementalArrowsB}', "");
Expect(1, 10495, '\p{^-supplementalArrowsB}', "");
Expect(1, 10495, '\P{-supplementalArrowsB}', "");
Expect(0, 10495, '\P{^-supplementalArrowsB}', "");
Error('\p{	:=IS Supplemental-arrows	B}');
Error('\P{	:=IS Supplemental-arrows	B}');
Expect(1, 10623, '\p{issupplementalarrowsb}', "");
Expect(0, 10623, '\p{^issupplementalarrowsb}', "");
Expect(0, 10623, '\P{issupplementalarrowsb}', "");
Expect(1, 10623, '\P{^issupplementalarrowsb}', "");
Expect(0, 10495, '\p{issupplementalarrowsb}', "");
Expect(1, 10495, '\p{^issupplementalarrowsb}', "");
Expect(1, 10495, '\P{issupplementalarrowsb}', "");
Expect(0, 10495, '\P{^issupplementalarrowsb}', "");
Expect(1, 10623, '\p{_Is_SUPPLEMENTALArrows	B}', "");
Expect(0, 10623, '\p{^_Is_SUPPLEMENTALArrows	B}', "");
Expect(0, 10623, '\P{_Is_SUPPLEMENTALArrows	B}', "");
Expect(1, 10623, '\P{^_Is_SUPPLEMENTALArrows	B}', "");
Expect(0, 10495, '\p{_Is_SUPPLEMENTALArrows	B}', "");
Expect(1, 10495, '\p{^_Is_SUPPLEMENTALArrows	B}', "");
Expect(1, 10495, '\P{_Is_SUPPLEMENTALArrows	B}', "");
Expect(0, 10495, '\P{^_Is_SUPPLEMENTALArrows	B}', "");
Error('\p{_in_supplemental/a/Arrows B}');
Error('\P{_in_supplemental/a/Arrows B}');
Expect(1, 10623, '\p{insupplementalarrowsb}', "");
Expect(0, 10623, '\p{^insupplementalarrowsb}', "");
Expect(0, 10623, '\P{insupplementalarrowsb}', "");
Expect(1, 10623, '\P{^insupplementalarrowsb}', "");
Expect(0, 10495, '\p{insupplementalarrowsb}', "");
Expect(1, 10495, '\p{^insupplementalarrowsb}', "");
Expect(1, 10495, '\P{insupplementalarrowsb}', "");
Expect(0, 10495, '\P{^insupplementalarrowsb}', "");
Expect(1, 10623, '\p{	_In_SUPPLEMENTAL	Arrows B}', "");
Expect(0, 10623, '\p{^	_In_SUPPLEMENTAL	Arrows B}', "");
Expect(0, 10623, '\P{	_In_SUPPLEMENTAL	Arrows B}', "");
Expect(1, 10623, '\P{^	_In_SUPPLEMENTAL	Arrows B}', "");
Expect(0, 10495, '\p{	_In_SUPPLEMENTAL	Arrows B}', "");
Expect(1, 10495, '\p{^	_In_SUPPLEMENTAL	Arrows B}', "");
Expect(1, 10495, '\P{	_In_SUPPLEMENTAL	Arrows B}', "");
Expect(0, 10495, '\P{^	_In_SUPPLEMENTAL	Arrows B}', "");
Error('\p{Expands_On_NFC}');
Error('\P{Expands_On_NFC}');
Error('\p{Is_Expands_On_NFC}');
Error('\P{Is_Expands_On_NFC}');
Error('\p{XO_NFC}');
Error('\P{XO_NFC}');
Error('\p{Is_XO_NFC}');
Error('\P{Is_XO_NFC}');
Error('\p{	INHERITED:=}');
Error('\P{	INHERITED:=}');
Expect(1, 879, '\p{inherited}', "");
Expect(0, 879, '\p{^inherited}', "");
Expect(0, 879, '\P{inherited}', "");
Expect(1, 879, '\P{^inherited}', "");
Expect(0, 767, '\p{inherited}', "");
Expect(1, 767, '\p{^inherited}', "");
Expect(1, 767, '\P{inherited}', "");
Expect(0, 767, '\P{^inherited}', "");
Expect(1, 879, '\p{_Inherited}', "");
Expect(0, 879, '\p{^_Inherited}', "");
Expect(0, 879, '\P{_Inherited}', "");
Expect(1, 879, '\P{^_Inherited}', "");
Expect(0, 767, '\p{_Inherited}', "");
Expect(1, 767, '\p{^_Inherited}', "");
Expect(1, 767, '\P{_Inherited}', "");
Expect(0, 767, '\P{^_Inherited}', "");
Error('\p{/a/ -Is_Inherited}');
Error('\P{/a/ -Is_Inherited}');
Expect(1, 879, '\p{isinherited}', "");
Expect(0, 879, '\p{^isinherited}', "");
Expect(0, 879, '\P{isinherited}', "");
Expect(1, 879, '\P{^isinherited}', "");
Expect(0, 767, '\p{isinherited}', "");
Expect(1, 767, '\p{^isinherited}', "");
Expect(1, 767, '\P{isinherited}', "");
Expect(0, 767, '\P{^isinherited}', "");
Expect(1, 879, '\p{_is Inherited}', "");
Expect(0, 879, '\p{^_is Inherited}', "");
Expect(0, 879, '\P{_is Inherited}', "");
Expect(1, 879, '\P{^_is Inherited}', "");
Expect(0, 767, '\p{_is Inherited}', "");
Expect(1, 767, '\p{^_is Inherited}', "");
Expect(1, 767, '\P{_is Inherited}', "");
Expect(0, 767, '\P{^_is Inherited}', "");
Error('\p{:=ZINH}');
Error('\P{:=ZINH}');
Expect(1, 879, '\p{zinh}', "");
Expect(0, 879, '\p{^zinh}', "");
Expect(0, 879, '\P{zinh}', "");
Expect(1, 879, '\P{^zinh}', "");
Expect(0, 767, '\p{zinh}', "");
Expect(1, 767, '\p{^zinh}', "");
Expect(1, 767, '\P{zinh}', "");
Expect(0, 767, '\P{^zinh}', "");
Expect(1, 879, '\p{	Zinh}', "");
Expect(0, 879, '\p{^	Zinh}', "");
Expect(0, 879, '\P{	Zinh}', "");
Expect(1, 879, '\P{^	Zinh}', "");
Expect(0, 767, '\p{	Zinh}', "");
Expect(1, 767, '\p{^	Zinh}', "");
Expect(1, 767, '\P{	Zinh}', "");
Expect(0, 767, '\P{^	Zinh}', "");
Error('\p{ IS:=zinh}');
Error('\P{ IS:=zinh}');
Expect(1, 879, '\p{iszinh}', "");
Expect(0, 879, '\p{^iszinh}', "");
Expect(0, 879, '\P{iszinh}', "");
Expect(1, 879, '\P{^iszinh}', "");
Expect(0, 767, '\p{iszinh}', "");
Expect(1, 767, '\p{^iszinh}', "");
Expect(1, 767, '\P{iszinh}', "");
Expect(0, 767, '\P{^iszinh}', "");
Expect(1, 879, '\p{	isZinh}', "");
Expect(0, 879, '\p{^	isZinh}', "");
Expect(0, 879, '\P{	isZinh}', "");
Expect(1, 879, '\P{^	isZinh}', "");
Expect(0, 767, '\p{	isZinh}', "");
Expect(1, 767, '\p{^	isZinh}', "");
Expect(1, 767, '\P{	isZinh}', "");
Expect(0, 767, '\P{^	isZinh}', "");
Error('\p{-/a/Qaai}');
Error('\P{-/a/Qaai}');
Expect(1, 879, '\p{qaai}', "");
Expect(0, 879, '\p{^qaai}', "");
Expect(0, 879, '\P{qaai}', "");
Expect(1, 879, '\P{^qaai}', "");
Expect(0, 767, '\p{qaai}', "");
Expect(1, 767, '\p{^qaai}', "");
Expect(1, 767, '\P{qaai}', "");
Expect(0, 767, '\P{^qaai}', "");
Expect(1, 879, '\p{-qaai}', "");
Expect(0, 879, '\p{^-qaai}', "");
Expect(0, 879, '\P{-qaai}', "");
Expect(1, 879, '\P{^-qaai}', "");
Expect(0, 767, '\p{-qaai}', "");
Expect(1, 767, '\p{^-qaai}', "");
Expect(1, 767, '\P{-qaai}', "");
Expect(0, 767, '\P{^-qaai}', "");
Error('\p{ _Is_Qaai:=}');
Error('\P{ _Is_Qaai:=}');
Expect(1, 879, '\p{isqaai}', "");
Expect(0, 879, '\p{^isqaai}', "");
Expect(0, 879, '\P{isqaai}', "");
Expect(1, 879, '\P{^isqaai}', "");
Expect(0, 767, '\p{isqaai}', "");
Expect(1, 767, '\p{^isqaai}', "");
Expect(1, 767, '\P{isqaai}', "");
Expect(0, 767, '\P{^isqaai}', "");
Expect(1, 879, '\p{_ is_QAAI}', "");
Expect(0, 879, '\p{^_ is_QAAI}', "");
Expect(0, 879, '\P{_ is_QAAI}', "");
Expect(1, 879, '\P{^_ is_QAAI}', "");
Expect(0, 767, '\p{_ is_QAAI}', "");
Expect(1, 767, '\p{^_ is_QAAI}', "");
Expect(1, 767, '\P{_ is_QAAI}', "");
Expect(0, 767, '\P{^_ is_QAAI}', "");
Error('\p{ otherMATH:=}');
Error('\P{ otherMATH:=}');
Expect(1, 94, '\p{othermath}', 'deprecated');
Expect(0, 94, '\p{^othermath}', 'deprecated');
Expect(0, 94, '\P{othermath}', 'deprecated');
Expect(1, 94, '\P{^othermath}', 'deprecated');
Expect(0, 93, '\p{othermath}', 'deprecated');
Expect(1, 93, '\p{^othermath}', 'deprecated');
Expect(1, 93, '\P{othermath}', 'deprecated');
Expect(0, 93, '\P{^othermath}', 'deprecated');
Expect(1, 94, '\p{_OTHER-math}', 'deprecated');
Expect(0, 94, '\p{^_OTHER-math}', 'deprecated');
Expect(0, 94, '\P{_OTHER-math}', 'deprecated');
Expect(1, 94, '\P{^_OTHER-math}', 'deprecated');
Expect(0, 93, '\p{_OTHER-math}', 'deprecated');
Expect(1, 93, '\p{^_OTHER-math}', 'deprecated');
Expect(1, 93, '\P{_OTHER-math}', 'deprecated');
Expect(0, 93, '\P{^_OTHER-math}', 'deprecated');
Error('\p{IS other_MATH/a/}');
Error('\P{IS other_MATH/a/}');
Expect(1, 94, '\p{isothermath}', 'deprecated');
Expect(0, 94, '\p{^isothermath}', 'deprecated');
Expect(0, 94, '\P{isothermath}', 'deprecated');
Expect(1, 94, '\P{^isothermath}', 'deprecated');
Expect(0, 93, '\p{isothermath}', 'deprecated');
Expect(1, 93, '\p{^isothermath}', 'deprecated');
Expect(1, 93, '\P{isothermath}', 'deprecated');
Expect(0, 93, '\P{^isothermath}', 'deprecated');
Expect(1, 94, '\p{  is_OTHER_math}', 'deprecated');
Expect(0, 94, '\p{^  is_OTHER_math}', 'deprecated');
Expect(0, 94, '\P{  is_OTHER_math}', 'deprecated');
Expect(1, 94, '\P{^  is_OTHER_math}', 'deprecated');
Expect(0, 93, '\p{  is_OTHER_math}', 'deprecated');
Expect(1, 93, '\p{^  is_OTHER_math}', 'deprecated');
Expect(1, 93, '\P{  is_OTHER_math}', 'deprecated');
Expect(0, 93, '\P{^  is_OTHER_math}', 'deprecated');
Error('\p{/a/_OMath}');
Error('\P{/a/_OMath}');
Expect(1, 94, '\p{omath}', 'deprecated');
Expect(0, 94, '\p{^omath}', 'deprecated');
Expect(0, 94, '\P{omath}', 'deprecated');
Expect(1, 94, '\P{^omath}', 'deprecated');
Expect(0, 93, '\p{omath}', 'deprecated');
Expect(1, 93, '\p{^omath}', 'deprecated');
Expect(1, 93, '\P{omath}', 'deprecated');
Expect(0, 93, '\P{^omath}', 'deprecated');
Expect(1, 94, '\p{_OMATH}', 'deprecated');
Expect(0, 94, '\p{^_OMATH}', 'deprecated');
Expect(0, 94, '\P{_OMATH}', 'deprecated');
Expect(1, 94, '\P{^_OMATH}', 'deprecated');
Expect(0, 93, '\p{_OMATH}', 'deprecated');
Expect(1, 93, '\p{^_OMATH}', 'deprecated');
Expect(1, 93, '\P{_OMATH}', 'deprecated');
Expect(0, 93, '\P{^_OMATH}', 'deprecated');
Error('\p{-_is:=OMATH}');
Error('\P{-_is:=OMATH}');
Expect(1, 94, '\p{isomath}', 'deprecated');
Expect(0, 94, '\p{^isomath}', 'deprecated');
Expect(0, 94, '\P{isomath}', 'deprecated');
Expect(1, 94, '\P{^isomath}', 'deprecated');
Expect(0, 93, '\p{isomath}', 'deprecated');
Expect(1, 93, '\p{^isomath}', 'deprecated');
Expect(1, 93, '\P{isomath}', 'deprecated');
Expect(0, 93, '\P{^isomath}', 'deprecated');
Expect(1, 94, '\p{ 	Is OMath}', 'deprecated');
Expect(0, 94, '\p{^ 	Is OMath}', 'deprecated');
Expect(0, 94, '\P{ 	Is OMath}', 'deprecated');
Expect(1, 94, '\P{^ 	Is OMath}', 'deprecated');
Expect(0, 93, '\p{ 	Is OMath}', 'deprecated');
Expect(1, 93, '\p{^ 	Is OMath}', 'deprecated');
Expect(1, 93, '\P{ 	Is OMath}', 'deprecated');
Expect(0, 93, '\P{^ 	Is OMath}', 'deprecated');
Error('\p{-	CJKunified:=Ideographs_ExtensionC}');
Error('\P{-	CJKunified:=Ideographs_ExtensionC}');
Expect(1, 177983, '\p{cjkunifiedideographsextensionc}', "");
Expect(0, 177983, '\p{^cjkunifiedideographsextensionc}', "");
Expect(0, 177983, '\P{cjkunifiedideographsextensionc}', "");
Expect(1, 177983, '\P{^cjkunifiedideographsextensionc}', "");
Expect(0, 173823, '\p{cjkunifiedideographsextensionc}', "");
Expect(1, 173823, '\p{^cjkunifiedideographsextensionc}', "");
Expect(1, 173823, '\P{cjkunifiedideographsextensionc}', "");
Expect(0, 173823, '\P{^cjkunifiedideographsextensionc}', "");
Expect(1, 177983, '\p{- cjkUnifiedIdeographsEXTENSION_c}', "");
Expect(0, 177983, '\p{^- cjkUnifiedIdeographsEXTENSION_c}', "");
Expect(0, 177983, '\P{- cjkUnifiedIdeographsEXTENSION_c}', "");
Expect(1, 177983, '\P{^- cjkUnifiedIdeographsEXTENSION_c}', "");
Expect(0, 173823, '\p{- cjkUnifiedIdeographsEXTENSION_c}', "");
Expect(1, 173823, '\p{^- cjkUnifiedIdeographsEXTENSION_c}', "");
Expect(1, 173823, '\P{- cjkUnifiedIdeographsEXTENSION_c}', "");
Expect(0, 173823, '\P{^- cjkUnifiedIdeographsEXTENSION_c}', "");
Error('\p{- is:=CJK_unifiedIdeographs	EXTENSION	c}');
Error('\P{- is:=CJK_unifiedIdeographs	EXTENSION	c}');
Expect(1, 177983, '\p{iscjkunifiedideographsextensionc}', "");
Expect(0, 177983, '\p{^iscjkunifiedideographsextensionc}', "");
Expect(0, 177983, '\P{iscjkunifiedideographsextensionc}', "");
Expect(1, 177983, '\P{^iscjkunifiedideographsextensionc}', "");
Expect(0, 173823, '\p{iscjkunifiedideographsextensionc}', "");
Expect(1, 173823, '\p{^iscjkunifiedideographsextensionc}', "");
Expect(1, 173823, '\P{iscjkunifiedideographsextensionc}', "");
Expect(0, 173823, '\P{^iscjkunifiedideographsextensionc}', "");
Expect(1, 177983, '\p{--IsCJK-Unified Ideographs ExtensionC}', "");
Expect(0, 177983, '\p{^--IsCJK-Unified Ideographs ExtensionC}', "");
Expect(0, 177983, '\P{--IsCJK-Unified Ideographs ExtensionC}', "");
Expect(1, 177983, '\P{^--IsCJK-Unified Ideographs ExtensionC}', "");
Expect(0, 173823, '\p{--IsCJK-Unified Ideographs ExtensionC}', "");
Expect(1, 173823, '\p{^--IsCJK-Unified Ideographs ExtensionC}', "");
Expect(1, 173823, '\P{--IsCJK-Unified Ideographs ExtensionC}', "");
Expect(0, 173823, '\P{^--IsCJK-Unified Ideographs ExtensionC}', "");
Error('\p{-/a/in	CJK Unified ideographs_Extension C}');
Error('\P{-/a/in	CJK Unified ideographs_Extension C}');
Expect(1, 177983, '\p{incjkunifiedideographsextensionc}', "");
Expect(0, 177983, '\p{^incjkunifiedideographsextensionc}', "");
Expect(0, 177983, '\P{incjkunifiedideographsextensionc}', "");
Expect(1, 177983, '\P{^incjkunifiedideographsextensionc}', "");
Expect(0, 173823, '\p{incjkunifiedideographsextensionc}', "");
Expect(1, 173823, '\p{^incjkunifiedideographsextensionc}', "");
Expect(1, 173823, '\P{incjkunifiedideographsextensionc}', "");
Expect(0, 173823, '\P{^incjkunifiedideographsextensionc}', "");
Expect(1, 177983, '\p{  In	CJK_unified Ideographs Extension_C}', "");
Expect(0, 177983, '\p{^  In	CJK_unified Ideographs Extension_C}', "");
Expect(0, 177983, '\P{  In	CJK_unified Ideographs Extension_C}', "");
Expect(1, 177983, '\P{^  In	CJK_unified Ideographs Extension_C}', "");
Expect(0, 173823, '\p{  In	CJK_unified Ideographs Extension_C}', "");
Expect(1, 173823, '\p{^  In	CJK_unified Ideographs Extension_C}', "");
Expect(1, 173823, '\P{  In	CJK_unified Ideographs Extension_C}', "");
Expect(0, 173823, '\P{^  In	CJK_unified Ideographs Extension_C}', "");
Error('\p{/a/ _LATIN	EXTENDED-ADDITIONAL}');
Error('\P{/a/ _LATIN	EXTENDED-ADDITIONAL}');
Expect(1, 7935, '\p{latinextendedadditional}', "");
Expect(0, 7935, '\p{^latinextendedadditional}', "");
Expect(0, 7935, '\P{latinextendedadditional}', "");
Expect(1, 7935, '\P{^latinextendedadditional}', "");
Expect(0, 7679, '\p{latinextendedadditional}', "");
Expect(1, 7679, '\p{^latinextendedadditional}', "");
Expect(1, 7679, '\P{latinextendedadditional}', "");
Expect(0, 7679, '\P{^latinextendedadditional}', "");
Expect(1, 7935, '\p{	-LATINEXTENDED_Additional}', "");
Expect(0, 7935, '\p{^	-LATINEXTENDED_Additional}', "");
Expect(0, 7935, '\P{	-LATINEXTENDED_Additional}', "");
Expect(1, 7935, '\P{^	-LATINEXTENDED_Additional}', "");
Expect(0, 7679, '\p{	-LATINEXTENDED_Additional}', "");
Expect(1, 7679, '\p{^	-LATINEXTENDED_Additional}', "");
Expect(1, 7679, '\P{	-LATINEXTENDED_Additional}', "");
Expect(0, 7679, '\P{^	-LATINEXTENDED_Additional}', "");
Error('\p{  is/a/latin-Extended_Additional}');
Error('\P{  is/a/latin-Extended_Additional}');
Expect(1, 7935, '\p{islatinextendedadditional}', "");
Expect(0, 7935, '\p{^islatinextendedadditional}', "");
Expect(0, 7935, '\P{islatinextendedadditional}', "");
Expect(1, 7935, '\P{^islatinextendedadditional}', "");
Expect(0, 7679, '\p{islatinextendedadditional}', "");
Expect(1, 7679, '\p{^islatinextendedadditional}', "");
Expect(1, 7679, '\P{islatinextendedadditional}', "");
Expect(0, 7679, '\P{^islatinextendedadditional}', "");
Expect(1, 7935, '\p{-	is Latin-extended Additional}', "");
Expect(0, 7935, '\p{^-	is Latin-extended Additional}', "");
Expect(0, 7935, '\P{-	is Latin-extended Additional}', "");
Expect(1, 7935, '\P{^-	is Latin-extended Additional}', "");
Expect(0, 7679, '\p{-	is Latin-extended Additional}', "");
Expect(1, 7679, '\p{^-	is Latin-extended Additional}', "");
Expect(1, 7679, '\P{-	is Latin-extended Additional}', "");
Expect(0, 7679, '\P{^-	is Latin-extended Additional}', "");
Error('\p{_:=In Latin_EXTENDED additional}');
Error('\P{_:=In Latin_EXTENDED additional}');
Expect(1, 7935, '\p{inlatinextendedadditional}', "");
Expect(0, 7935, '\p{^inlatinextendedadditional}', "");
Expect(0, 7935, '\P{inlatinextendedadditional}', "");
Expect(1, 7935, '\P{^inlatinextendedadditional}', "");
Expect(0, 7679, '\p{inlatinextendedadditional}', "");
Expect(1, 7679, '\p{^inlatinextendedadditional}', "");
Expect(1, 7679, '\P{inlatinextendedadditional}', "");
Expect(0, 7679, '\P{^inlatinextendedadditional}', "");
Expect(1, 7935, '\p{ In LATIN_Extendedadditional}', "");
Expect(0, 7935, '\p{^ In LATIN_Extendedadditional}', "");
Expect(0, 7935, '\P{ In LATIN_Extendedadditional}', "");
Expect(1, 7935, '\P{^ In LATIN_Extendedadditional}', "");
Expect(0, 7679, '\p{ In LATIN_Extendedadditional}', "");
Expect(1, 7679, '\p{^ In LATIN_Extendedadditional}', "");
Expect(1, 7679, '\P{ In LATIN_Extendedadditional}', "");
Expect(0, 7679, '\P{^ In LATIN_Extendedadditional}', "");
Error('\p{:=_kannada}');
Error('\P{:=_kannada}');
Expect(1, 3203, '\p{kannada}', "");
Expect(0, 3203, '\p{^kannada}', "");
Expect(0, 3203, '\P{kannada}', "");
Expect(1, 3203, '\P{^kannada}', "");
Expect(0, 3201, '\p{kannada}', "");
Expect(1, 3201, '\p{^kannada}', "");
Expect(1, 3201, '\P{kannada}', "");
Expect(0, 3201, '\P{^kannada}', "");
Expect(1, 3203, '\p{ KANNADA}', "");
Expect(0, 3203, '\p{^ KANNADA}', "");
Expect(0, 3203, '\P{ KANNADA}', "");
Expect(1, 3203, '\P{^ KANNADA}', "");
Expect(0, 3201, '\p{ KANNADA}', "");
Expect(1, 3201, '\p{^ KANNADA}', "");
Expect(1, 3201, '\P{ KANNADA}', "");
Expect(0, 3201, '\P{^ KANNADA}', "");
Error('\p{ /a/IS_Kannada}');
Error('\P{ /a/IS_Kannada}');
Expect(1, 3203, '\p{iskannada}', "");
Expect(0, 3203, '\p{^iskannada}', "");
Expect(0, 3203, '\P{iskannada}', "");
Expect(1, 3203, '\P{^iskannada}', "");
Expect(0, 3201, '\p{iskannada}', "");
Expect(1, 3201, '\p{^iskannada}', "");
Expect(1, 3201, '\P{iskannada}', "");
Expect(0, 3201, '\P{^iskannada}', "");
Expect(1, 3203, '\p{-_is	kannada}', "");
Expect(0, 3203, '\p{^-_is	kannada}', "");
Expect(0, 3203, '\P{-_is	kannada}', "");
Expect(1, 3203, '\P{^-_is	kannada}', "");
Expect(0, 3201, '\p{-_is	kannada}', "");
Expect(1, 3201, '\p{^-_is	kannada}', "");
Expect(1, 3201, '\P{-_is	kannada}', "");
Expect(0, 3201, '\P{^-_is	kannada}', "");
Error('\p{ :=Knda}');
Error('\P{ :=Knda}');
Expect(1, 3203, '\p{knda}', "");
Expect(0, 3203, '\p{^knda}', "");
Expect(0, 3203, '\P{knda}', "");
Expect(1, 3203, '\P{^knda}', "");
Expect(0, 3201, '\p{knda}', "");
Expect(1, 3201, '\p{^knda}', "");
Expect(1, 3201, '\P{knda}', "");
Expect(0, 3201, '\P{^knda}', "");
Expect(1, 3203, '\p{-_KNDA}', "");
Expect(0, 3203, '\p{^-_KNDA}', "");
Expect(0, 3203, '\P{-_KNDA}', "");
Expect(1, 3203, '\P{^-_KNDA}', "");
Expect(0, 3201, '\p{-_KNDA}', "");
Expect(1, 3201, '\p{^-_KNDA}', "");
Expect(1, 3201, '\P{-_KNDA}', "");
Expect(0, 3201, '\P{^-_KNDA}', "");
Error('\p{	_Is knda/a/}');
Error('\P{	_Is knda/a/}');
Expect(1, 3203, '\p{isknda}', "");
Expect(0, 3203, '\p{^isknda}', "");
Expect(0, 3203, '\P{isknda}', "");
Expect(1, 3203, '\P{^isknda}', "");
Expect(0, 3201, '\p{isknda}', "");
Expect(1, 3201, '\p{^isknda}', "");
Expect(1, 3201, '\P{isknda}', "");
Expect(0, 3201, '\P{^isknda}', "");
Expect(1, 3203, '\p{		IS Knda}', "");
Expect(0, 3203, '\p{^		IS Knda}', "");
Expect(0, 3203, '\P{		IS Knda}', "");
Expect(1, 3203, '\P{^		IS Knda}', "");
Expect(0, 3201, '\p{		IS Knda}', "");
Expect(1, 3201, '\p{^		IS Knda}', "");
Expect(1, 3201, '\P{		IS Knda}', "");
Expect(0, 3201, '\P{^		IS Knda}', "");
Error('\p{-:=LAO}');
Error('\P{-:=LAO}');
Expect(1, 3714, '\p{lao}', "");
Expect(0, 3714, '\p{^lao}', "");
Expect(0, 3714, '\P{lao}', "");
Expect(1, 3714, '\P{^lao}', "");
Expect(0, 3712, '\p{lao}', "");
Expect(1, 3712, '\p{^lao}', "");
Expect(1, 3712, '\P{lao}', "");
Expect(0, 3712, '\P{^lao}', "");
Expect(1, 3714, '\p{_	LAO}', "");
Expect(0, 3714, '\p{^_	LAO}', "");
Expect(0, 3714, '\P{_	LAO}', "");
Expect(1, 3714, '\P{^_	LAO}', "");
Expect(0, 3712, '\p{_	LAO}', "");
Expect(1, 3712, '\p{^_	LAO}', "");
Expect(1, 3712, '\P{_	LAO}', "");
Expect(0, 3712, '\P{^_	LAO}', "");
Error('\p{	Is-Lao:=}');
Error('\P{	Is-Lao:=}');
Expect(1, 3714, '\p{islao}', "");
Expect(0, 3714, '\p{^islao}', "");
Expect(0, 3714, '\P{islao}', "");
Expect(1, 3714, '\P{^islao}', "");
Expect(0, 3712, '\p{islao}', "");
Expect(1, 3712, '\p{^islao}', "");
Expect(1, 3712, '\P{islao}', "");
Expect(0, 3712, '\P{^islao}', "");
Expect(1, 3714, '\p{ _Is Lao}', "");
Expect(0, 3714, '\p{^ _Is Lao}', "");
Expect(0, 3714, '\P{ _Is Lao}', "");
Expect(1, 3714, '\P{^ _Is Lao}', "");
Expect(0, 3712, '\p{ _Is Lao}', "");
Expect(1, 3712, '\p{^ _Is Lao}', "");
Expect(1, 3712, '\P{ _Is Lao}', "");
Expect(0, 3712, '\P{^ _Is Lao}', "");
Error('\p{ :=laoo}');
Error('\P{ :=laoo}');
Expect(1, 3714, '\p{laoo}', "");
Expect(0, 3714, '\p{^laoo}', "");
Expect(0, 3714, '\P{laoo}', "");
Expect(1, 3714, '\P{^laoo}', "");
Expect(0, 3712, '\p{laoo}', "");
Expect(1, 3712, '\p{^laoo}', "");
Expect(1, 3712, '\P{laoo}', "");
Expect(0, 3712, '\P{^laoo}', "");
Expect(1, 3714, '\p{  laoo}', "");
Expect(0, 3714, '\p{^  laoo}', "");
Expect(0, 3714, '\P{  laoo}', "");
Expect(1, 3714, '\P{^  laoo}', "");
Expect(0, 3712, '\p{  laoo}', "");
Expect(1, 3712, '\p{^  laoo}', "");
Expect(1, 3712, '\P{  laoo}', "");
Expect(0, 3712, '\P{^  laoo}', "");
Error('\p{	-IS/a/Laoo}');
Error('\P{	-IS/a/Laoo}');
Expect(1, 3714, '\p{islaoo}', "");
Expect(0, 3714, '\p{^islaoo}', "");
Expect(0, 3714, '\P{islaoo}', "");
Expect(1, 3714, '\P{^islaoo}', "");
Expect(0, 3712, '\p{islaoo}', "");
Expect(1, 3712, '\p{^islaoo}', "");
Expect(1, 3712, '\P{islaoo}', "");
Expect(0, 3712, '\P{^islaoo}', "");
Expect(1, 3714, '\p{__Is Laoo}', "");
Expect(0, 3714, '\p{^__Is Laoo}', "");
Expect(0, 3714, '\P{__Is Laoo}', "");
Expect(1, 3714, '\P{^__Is Laoo}', "");
Expect(0, 3712, '\p{__Is Laoo}', "");
Expect(1, 3712, '\p{^__Is Laoo}', "");
Expect(1, 3712, '\P{__Is Laoo}', "");
Expect(0, 3712, '\P{^__Is Laoo}', "");
Error('\p{ :=PerlWord}');
Error('\P{ :=PerlWord}');
Expect(1, 57, '\p{perlword}', "");
Expect(0, 57, '\p{^perlword}', "");
Expect(0, 57, '\P{perlword}', "");
Expect(1, 57, '\P{^perlword}', "");
Expect(0, 47, '\p{perlword}', "");
Expect(1, 47, '\p{^perlword}', "");
Expect(1, 47, '\P{perlword}', "");
Expect(0, 47, '\P{^perlword}', "");
Expect(1, 57, '\p{_	PerlWord}', "");
Expect(0, 57, '\p{^_	PerlWord}', "");
Expect(0, 57, '\P{_	PerlWord}', "");
Expect(1, 57, '\P{^_	PerlWord}', "");
Expect(0, 47, '\p{_	PerlWord}', "");
Expect(1, 47, '\p{^_	PerlWord}', "");
Expect(1, 47, '\P{_	PerlWord}', "");
Expect(0, 47, '\P{^_	PerlWord}', "");
Error('\p{:=POSIXWORD}');
Error('\P{:=POSIXWORD}');
Expect(1, 57, '\p{posixword}', "");
Expect(0, 57, '\p{^posixword}', "");
Expect(0, 57, '\P{posixword}', "");
Expect(1, 57, '\P{^posixword}', "");
Expect(0, 47, '\p{posixword}', "");
Expect(1, 47, '\p{^posixword}', "");
Expect(1, 47, '\P{posixword}', "");
Expect(0, 47, '\P{^posixword}', "");
Expect(1, 57, '\p{- posixword}', "");
Expect(0, 57, '\p{^- posixword}', "");
Expect(0, 57, '\P{- posixword}', "");
Expect(1, 57, '\P{^- posixword}', "");
Expect(0, 47, '\p{- posixword}', "");
Expect(1, 47, '\p{^- posixword}', "");
Expect(1, 47, '\P{- posixword}', "");
Expect(0, 47, '\P{^- posixword}', "");
Error('\p{	 IS PerlWord/a/}');
Error('\P{	 IS PerlWord/a/}');
Expect(1, 57, '\p{isperlword}', "");
Expect(0, 57, '\p{^isperlword}', "");
Expect(0, 57, '\P{isperlword}', "");
Expect(1, 57, '\P{^isperlword}', "");
Expect(0, 47, '\p{isperlword}', "");
Expect(1, 47, '\p{^isperlword}', "");
Expect(1, 47, '\P{isperlword}', "");
Expect(0, 47, '\P{^isperlword}', "");
Expect(1, 57, '\p{ Is PerlWord}', "");
Expect(0, 57, '\p{^ Is PerlWord}', "");
Expect(0, 57, '\P{ Is PerlWord}', "");
Expect(1, 57, '\P{^ Is PerlWord}', "");
Expect(0, 47, '\p{ Is PerlWord}', "");
Expect(1, 47, '\p{^ Is PerlWord}', "");
Expect(1, 47, '\P{ Is PerlWord}', "");
Expect(0, 47, '\P{^ Is PerlWord}', "");
Error('\p{__is:=posixword}');
Error('\P{__is:=posixword}');
Expect(1, 57, '\p{isposixword}', "");
Expect(0, 57, '\p{^isposixword}', "");
Expect(0, 57, '\P{isposixword}', "");
Expect(1, 57, '\P{^isposixword}', "");
Expect(0, 47, '\p{isposixword}', "");
Expect(1, 47, '\p{^isposixword}', "");
Expect(1, 47, '\P{isposixword}', "");
Expect(0, 47, '\P{^isposixword}', "");
Expect(1, 57, '\p{ Is_posixword}', "");
Expect(0, 57, '\p{^ Is_posixword}', "");
Expect(0, 57, '\P{ Is_posixword}', "");
Expect(1, 57, '\P{^ Is_posixword}', "");
Expect(0, 47, '\p{ Is_posixword}', "");
Expect(1, 47, '\p{^ Is_posixword}', "");
Expect(1, 47, '\P{ Is_posixword}', "");
Expect(0, 47, '\P{^ Is_posixword}', "");
Error('\p{_digit/a/}');
Error('\P{_digit/a/}');
Expect(1, 57, '\p{digit}', "");
Expect(0, 57, '\p{^digit}', "");
Expect(0, 57, '\P{digit}', "");
Expect(1, 57, '\P{^digit}', "");
Expect(0, 47, '\p{digit}', "");
Expect(1, 47, '\p{^digit}', "");
Expect(1, 47, '\P{digit}', "");
Expect(0, 47, '\P{^digit}', "");
Expect(1, 57, '\p{--Digit}', "");
Expect(0, 57, '\p{^--Digit}', "");
Expect(0, 57, '\P{--Digit}', "");
Expect(1, 57, '\P{^--Digit}', "");
Expect(0, 47, '\p{--Digit}', "");
Expect(1, 47, '\p{^--Digit}', "");
Expect(1, 47, '\P{--Digit}', "");
Expect(0, 47, '\P{^--Digit}', "");
Error('\p{/a/xposixdigit}');
Error('\P{/a/xposixdigit}');
Expect(1, 57, '\p{xposixdigit}', "");
Expect(0, 57, '\p{^xposixdigit}', "");
Expect(0, 57, '\P{xposixdigit}', "");
Expect(1, 57, '\P{^xposixdigit}', "");
Expect(0, 47, '\p{xposixdigit}', "");
Expect(1, 47, '\p{^xposixdigit}', "");
Expect(1, 47, '\P{xposixdigit}', "");
Expect(0, 47, '\P{^xposixdigit}', "");
Expect(1, 57, '\p{-	XPosixDigit}', "");
Expect(0, 57, '\p{^-	XPosixDigit}', "");
Expect(0, 57, '\P{-	XPosixDigit}', "");
Expect(1, 57, '\P{^-	XPosixDigit}', "");
Expect(0, 47, '\p{-	XPosixDigit}', "");
Expect(1, 47, '\p{^-	XPosixDigit}', "");
Expect(1, 47, '\P{-	XPosixDigit}', "");
Expect(0, 47, '\P{^-	XPosixDigit}', "");
Error('\p{/a/	 IsDigit}');
Error('\P{/a/	 IsDigit}');
Expect(1, 57, '\p{isdigit}', "");
Expect(0, 57, '\p{^isdigit}', "");
Expect(0, 57, '\P{isdigit}', "");
Expect(1, 57, '\P{^isdigit}', "");
Expect(0, 47, '\p{isdigit}', "");
Expect(1, 47, '\p{^isdigit}', "");
Expect(1, 47, '\P{isdigit}', "");
Expect(0, 47, '\P{^isdigit}', "");
Expect(1, 57, '\p{-	ISDigit}', "");
Expect(0, 57, '\p{^-	ISDigit}', "");
Expect(0, 57, '\P{-	ISDigit}', "");
Expect(1, 57, '\P{^-	ISDigit}', "");
Expect(0, 47, '\p{-	ISDigit}', "");
Expect(1, 47, '\p{^-	ISDigit}', "");
Expect(1, 47, '\P{-	ISDigit}', "");
Expect(0, 47, '\P{^-	ISDigit}', "");
Error('\p{:= _Is_XPosixDigit}');
Error('\P{:= _Is_XPosixDigit}');
Expect(1, 57, '\p{isxposixdigit}', "");
Expect(0, 57, '\p{^isxposixdigit}', "");
Expect(0, 57, '\P{isxposixdigit}', "");
Expect(1, 57, '\P{^isxposixdigit}', "");
Expect(0, 47, '\p{isxposixdigit}', "");
Expect(1, 47, '\p{^isxposixdigit}', "");
Expect(1, 47, '\P{isxposixdigit}', "");
Expect(0, 47, '\P{^isxposixdigit}', "");
Expect(1, 57, '\p{	is_XPOSIXDIGIT}', "");
Expect(0, 57, '\p{^	is_XPOSIXDIGIT}', "");
Expect(0, 57, '\P{	is_XPOSIXDIGIT}', "");
Expect(1, 57, '\P{^	is_XPOSIXDIGIT}', "");
Expect(0, 47, '\p{	is_XPOSIXDIGIT}', "");
Expect(1, 47, '\p{^	is_XPOSIXDIGIT}', "");
Expect(1, 47, '\P{	is_XPOSIXDIGIT}', "");
Expect(0, 47, '\P{^	is_XPOSIXDIGIT}', "");
Error('\p{	:=DecimalNUMBER}');
Error('\P{	:=DecimalNUMBER}');
Expect(1, 57, '\p{decimalnumber}', "");
Expect(0, 57, '\p{^decimalnumber}', "");
Expect(0, 57, '\P{decimalnumber}', "");
Expect(1, 57, '\P{^decimalnumber}', "");
Expect(0, 47, '\p{decimalnumber}', "");
Expect(1, 47, '\p{^decimalnumber}', "");
Expect(1, 47, '\P{decimalnumber}', "");
Expect(0, 47, '\P{^decimalnumber}', "");
Expect(1, 57, '\p{-_DECIMAL	NUMBER}', "");
Expect(0, 57, '\p{^-_DECIMAL	NUMBER}', "");
Expect(0, 57, '\P{-_DECIMAL	NUMBER}', "");
Expect(1, 57, '\P{^-_DECIMAL	NUMBER}', "");
Expect(0, 47, '\p{-_DECIMAL	NUMBER}', "");
Expect(1, 47, '\p{^-_DECIMAL	NUMBER}', "");
Expect(1, 47, '\P{-_DECIMAL	NUMBER}', "");
Expect(0, 47, '\P{^-_DECIMAL	NUMBER}', "");
Error('\p{	-Is Decimal_Number/a/}');
Error('\P{	-Is Decimal_Number/a/}');
Expect(1, 57, '\p{isdecimalnumber}', "");
Expect(0, 57, '\p{^isdecimalnumber}', "");
Expect(0, 57, '\P{isdecimalnumber}', "");
Expect(1, 57, '\P{^isdecimalnumber}', "");
Expect(0, 47, '\p{isdecimalnumber}', "");
Expect(1, 47, '\p{^isdecimalnumber}', "");
Expect(1, 47, '\P{isdecimalnumber}', "");
Expect(0, 47, '\P{^isdecimalnumber}', "");
Expect(1, 57, '\p{__isdecimal-NUMBER}', "");
Expect(0, 57, '\p{^__isdecimal-NUMBER}', "");
Expect(0, 57, '\P{__isdecimal-NUMBER}', "");
Expect(1, 57, '\P{^__isdecimal-NUMBER}', "");
Expect(0, 47, '\p{__isdecimal-NUMBER}', "");
Expect(1, 47, '\p{^__isdecimal-NUMBER}', "");
Expect(1, 47, '\P{__isdecimal-NUMBER}', "");
Expect(0, 47, '\P{^__isdecimal-NUMBER}', "");
Error('\p{:=nd}');
Error('\P{:=nd}');
Expect(1, 57, '\p{nd}', "");
Expect(0, 57, '\p{^nd}', "");
Expect(0, 57, '\P{nd}', "");
Expect(1, 57, '\P{^nd}', "");
Expect(0, 47, '\p{nd}', "");
Expect(1, 47, '\p{^nd}', "");
Expect(1, 47, '\P{nd}', "");
Expect(0, 47, '\P{^nd}', "");
Expect(1, 57, '\p{_ ND}', "");
Expect(0, 57, '\p{^_ ND}', "");
Expect(0, 57, '\P{_ ND}', "");
Expect(1, 57, '\P{^_ ND}', "");
Expect(0, 47, '\p{_ ND}', "");
Expect(1, 47, '\p{^_ ND}', "");
Expect(1, 47, '\P{_ ND}', "");
Expect(0, 47, '\P{^_ ND}', "");
Error('\p{:=_isNd}');
Error('\P{:=_isNd}');
Expect(1, 57, '\p{isnd}', "");
Expect(0, 57, '\p{^isnd}', "");
Expect(0, 57, '\P{isnd}', "");
Expect(1, 57, '\P{^isnd}', "");
Expect(0, 47, '\p{isnd}', "");
Expect(1, 47, '\p{^isnd}', "");
Expect(1, 47, '\P{isnd}', "");
Expect(0, 47, '\P{^isnd}', "");
Expect(1, 57, '\p{ 	Isnd}', "");
Expect(0, 57, '\p{^ 	Isnd}', "");
Expect(0, 57, '\P{ 	Isnd}', "");
Expect(1, 57, '\P{^ 	Isnd}', "");
Expect(0, 47, '\p{ 	Isnd}', "");
Expect(1, 47, '\p{^ 	Isnd}', "");
Expect(1, 47, '\P{ 	Isnd}', "");
Expect(0, 47, '\P{^ 	Isnd}', "");
Error('\p{	-MISCELLANEOUS	SYMBOLS	AND/a/Pictographs}');
Error('\P{	-MISCELLANEOUS	SYMBOLS	AND/a/Pictographs}');
Expect(1, 128511, '\p{miscellaneoussymbolsandpictographs}', "");
Expect(0, 128511, '\p{^miscellaneoussymbolsandpictographs}', "");
Expect(0, 128511, '\P{miscellaneoussymbolsandpictographs}', "");
Expect(1, 128511, '\P{^miscellaneoussymbolsandpictographs}', "");
Expect(0, 127743, '\p{miscellaneoussymbolsandpictographs}', "");
Expect(1, 127743, '\p{^miscellaneoussymbolsandpictographs}', "");
Expect(1, 127743, '\P{miscellaneoussymbolsandpictographs}', "");
Expect(0, 127743, '\P{^miscellaneoussymbolsandpictographs}', "");
Expect(1, 128511, '\p{--MISCELLANEOUSSymbols-And Pictographs}', "");
Expect(0, 128511, '\p{^--MISCELLANEOUSSymbols-And Pictographs}', "");
Expect(0, 128511, '\P{--MISCELLANEOUSSymbols-And Pictographs}', "");
Expect(1, 128511, '\P{^--MISCELLANEOUSSymbols-And Pictographs}', "");
Expect(0, 127743, '\p{--MISCELLANEOUSSymbols-And Pictographs}', "");
Expect(1, 127743, '\p{^--MISCELLANEOUSSymbols-And Pictographs}', "");
Expect(1, 127743, '\P{--MISCELLANEOUSSymbols-And Pictographs}', "");
Expect(0, 127743, '\P{^--MISCELLANEOUSSymbols-And Pictographs}', "");
Error('\p{-is	miscellaneous_SYMBOLS:=And-Pictographs}');
Error('\P{-is	miscellaneous_SYMBOLS:=And-Pictographs}');
Expect(1, 128511, '\p{ismiscellaneoussymbolsandpictographs}', "");
Expect(0, 128511, '\p{^ismiscellaneoussymbolsandpictographs}', "");
Expect(0, 128511, '\P{ismiscellaneoussymbolsandpictographs}', "");
Expect(1, 128511, '\P{^ismiscellaneoussymbolsandpictographs}', "");
Expect(0, 127743, '\p{ismiscellaneoussymbolsandpictographs}', "");
Expect(1, 127743, '\p{^ismiscellaneoussymbolsandpictographs}', "");
Expect(1, 127743, '\P{ismiscellaneoussymbolsandpictographs}', "");
Expect(0, 127743, '\P{^ismiscellaneoussymbolsandpictographs}', "");
Expect(1, 128511, '\p{  IS-Miscellaneous_Symbols	Andpictographs}', "");
Expect(0, 128511, '\p{^  IS-Miscellaneous_Symbols	Andpictographs}', "");
Expect(0, 128511, '\P{  IS-Miscellaneous_Symbols	Andpictographs}', "");
Expect(1, 128511, '\P{^  IS-Miscellaneous_Symbols	Andpictographs}', "");
Expect(0, 127743, '\p{  IS-Miscellaneous_Symbols	Andpictographs}', "");
Expect(1, 127743, '\p{^  IS-Miscellaneous_Symbols	Andpictographs}', "");
Expect(1, 127743, '\P{  IS-Miscellaneous_Symbols	Andpictographs}', "");
Expect(0, 127743, '\P{^  IS-Miscellaneous_Symbols	Andpictographs}', "");
Error('\p{ :=inMISCELLANEOUSSymbols	AndPICTOGRAPHS}');
Error('\P{ :=inMISCELLANEOUSSymbols	AndPICTOGRAPHS}');
Expect(1, 128511, '\p{inmiscellaneoussymbolsandpictographs}', "");
Expect(0, 128511, '\p{^inmiscellaneoussymbolsandpictographs}', "");
Expect(0, 128511, '\P{inmiscellaneoussymbolsandpictographs}', "");
Expect(1, 128511, '\P{^inmiscellaneoussymbolsandpictographs}', "");
Expect(0, 127743, '\p{inmiscellaneoussymbolsandpictographs}', "");
Expect(1, 127743, '\p{^inmiscellaneoussymbolsandpictographs}', "");
Expect(1, 127743, '\P{inmiscellaneoussymbolsandpictographs}', "");
Expect(0, 127743, '\P{^inmiscellaneoussymbolsandpictographs}', "");
Expect(1, 128511, '\p{-In miscellaneous-SYMBOLS	And_pictographs}', "");
Expect(0, 128511, '\p{^-In miscellaneous-SYMBOLS	And_pictographs}', "");
Expect(0, 128511, '\P{-In miscellaneous-SYMBOLS	And_pictographs}', "");
Expect(1, 128511, '\P{^-In miscellaneous-SYMBOLS	And_pictographs}', "");
Expect(0, 127743, '\p{-In miscellaneous-SYMBOLS	And_pictographs}', "");
Expect(1, 127743, '\p{^-In miscellaneous-SYMBOLS	And_pictographs}', "");
Expect(1, 127743, '\P{-In miscellaneous-SYMBOLS	And_pictographs}', "");
Expect(0, 127743, '\P{^-In miscellaneous-SYMBOLS	And_pictographs}', "");
Error('\p{ 	Osmanya:=}');
Error('\P{ 	Osmanya:=}');
Expect(1, 66717, '\p{osmanya}', "");
Expect(0, 66717, '\p{^osmanya}', "");
Expect(0, 66717, '\P{osmanya}', "");
Expect(1, 66717, '\P{^osmanya}', "");
Expect(0, 66687, '\p{osmanya}', "");
Expect(1, 66687, '\p{^osmanya}', "");
Expect(1, 66687, '\P{osmanya}', "");
Expect(0, 66687, '\P{^osmanya}', "");
Expect(1, 66717, '\p{OSMANYA}', "");
Expect(0, 66717, '\p{^OSMANYA}', "");
Expect(0, 66717, '\P{OSMANYA}', "");
Expect(1, 66717, '\P{^OSMANYA}', "");
Expect(0, 66687, '\p{OSMANYA}', "");
Expect(1, 66687, '\p{^OSMANYA}', "");
Expect(1, 66687, '\P{OSMANYA}', "");
Expect(0, 66687, '\P{^OSMANYA}', "");
Error('\p{:=_IsOsmanya}');
Error('\P{:=_IsOsmanya}');
Expect(1, 66717, '\p{isosmanya}', "");
Expect(0, 66717, '\p{^isosmanya}', "");
Expect(0, 66717, '\P{isosmanya}', "");
Expect(1, 66717, '\P{^isosmanya}', "");
Expect(0, 66687, '\p{isosmanya}', "");
Expect(1, 66687, '\p{^isosmanya}', "");
Expect(1, 66687, '\P{isosmanya}', "");
Expect(0, 66687, '\P{^isosmanya}', "");
Expect(1, 66717, '\p{ IsOsmanya}', "");
Expect(0, 66717, '\p{^ IsOsmanya}', "");
Expect(0, 66717, '\P{ IsOsmanya}', "");
Expect(1, 66717, '\P{^ IsOsmanya}', "");
Expect(0, 66687, '\p{ IsOsmanya}', "");
Expect(1, 66687, '\p{^ IsOsmanya}', "");
Expect(1, 66687, '\P{ IsOsmanya}', "");
Expect(0, 66687, '\P{^ IsOsmanya}', "");
Error('\p{/a/-_Osma}');
Error('\P{/a/-_Osma}');
Expect(1, 66717, '\p{osma}', "");
Expect(0, 66717, '\p{^osma}', "");
Expect(0, 66717, '\P{osma}', "");
Expect(1, 66717, '\P{^osma}', "");
Expect(0, 66687, '\p{osma}', "");
Expect(1, 66687, '\p{^osma}', "");
Expect(1, 66687, '\P{osma}', "");
Expect(0, 66687, '\P{^osma}', "");
Expect(1, 66717, '\p{  Osma}', "");
Expect(0, 66717, '\p{^  Osma}', "");
Expect(0, 66717, '\P{  Osma}', "");
Expect(1, 66717, '\P{^  Osma}', "");
Expect(0, 66687, '\p{  Osma}', "");
Expect(1, 66687, '\p{^  Osma}', "");
Expect(1, 66687, '\P{  Osma}', "");
Expect(0, 66687, '\P{^  Osma}', "");
Error('\p{		Is:=Osma}');
Error('\P{		Is:=Osma}');
Expect(1, 66717, '\p{isosma}', "");
Expect(0, 66717, '\p{^isosma}', "");
Expect(0, 66717, '\P{isosma}', "");
Expect(1, 66717, '\P{^isosma}', "");
Expect(0, 66687, '\p{isosma}', "");
Expect(1, 66687, '\p{^isosma}', "");
Expect(1, 66687, '\P{isosma}', "");
Expect(0, 66687, '\P{^isosma}', "");
Expect(1, 66717, '\p{	_is-osma}', "");
Expect(0, 66717, '\p{^	_is-osma}', "");
Expect(0, 66717, '\P{	_is-osma}', "");
Expect(1, 66717, '\P{^	_is-osma}', "");
Expect(0, 66687, '\p{	_is-osma}', "");
Expect(1, 66687, '\p{^	_is-osma}', "");
Expect(1, 66687, '\P{	_is-osma}', "");
Expect(0, 66687, '\P{^	_is-osma}', "");
Error('\p{-/a/Unified Ideograph}');
Error('\P{-/a/Unified Ideograph}');
Expect(1, 19893, '\p{unifiedideograph}', "");
Expect(0, 19893, '\p{^unifiedideograph}', "");
Expect(0, 19893, '\P{unifiedideograph}', "");
Expect(1, 19893, '\P{^unifiedideograph}', "");
Expect(0, 13311, '\p{unifiedideograph}', "");
Expect(1, 13311, '\p{^unifiedideograph}', "");
Expect(1, 13311, '\P{unifiedideograph}', "");
Expect(0, 13311, '\P{^unifiedideograph}', "");
Expect(1, 19893, '\p{	unified-ideograph}', "");
Expect(0, 19893, '\p{^	unified-ideograph}', "");
Expect(0, 19893, '\P{	unified-ideograph}', "");
Expect(1, 19893, '\P{^	unified-ideograph}', "");
Expect(0, 13311, '\p{	unified-ideograph}', "");
Expect(1, 13311, '\p{^	unified-ideograph}', "");
Expect(1, 13311, '\P{	unified-ideograph}', "");
Expect(0, 13311, '\P{^	unified-ideograph}', "");
Error('\p{ Is/a/UnifiedIdeograph}');
Error('\P{ Is/a/UnifiedIdeograph}');
Expect(1, 19893, '\p{isunifiedideograph}', "");
Expect(0, 19893, '\p{^isunifiedideograph}', "");
Expect(0, 19893, '\P{isunifiedideograph}', "");
Expect(1, 19893, '\P{^isunifiedideograph}', "");
Expect(0, 13311, '\p{isunifiedideograph}', "");
Expect(1, 13311, '\p{^isunifiedideograph}', "");
Expect(1, 13311, '\P{isunifiedideograph}', "");
Expect(0, 13311, '\P{^isunifiedideograph}', "");
Expect(1, 19893, '\p{ IsUnified-Ideograph}', "");
Expect(0, 19893, '\p{^ IsUnified-Ideograph}', "");
Expect(0, 19893, '\P{ IsUnified-Ideograph}', "");
Expect(1, 19893, '\P{^ IsUnified-Ideograph}', "");
Expect(0, 13311, '\p{ IsUnified-Ideograph}', "");
Expect(1, 13311, '\p{^ IsUnified-Ideograph}', "");
Expect(1, 13311, '\P{ IsUnified-Ideograph}', "");
Expect(0, 13311, '\P{^ IsUnified-Ideograph}', "");
Error('\p{:=UIdeo}');
Error('\P{:=UIdeo}');
Expect(1, 19893, '\p{uideo}', "");
Expect(0, 19893, '\p{^uideo}', "");
Expect(0, 19893, '\P{uideo}', "");
Expect(1, 19893, '\P{^uideo}', "");
Expect(0, 13311, '\p{uideo}', "");
Expect(1, 13311, '\p{^uideo}', "");
Expect(1, 13311, '\P{uideo}', "");
Expect(0, 13311, '\P{^uideo}', "");
Expect(1, 19893, '\p{	UIDEO}', "");
Expect(0, 19893, '\p{^	UIDEO}', "");
Expect(0, 19893, '\P{	UIDEO}', "");
Expect(1, 19893, '\P{^	UIDEO}', "");
Expect(0, 13311, '\p{	UIDEO}', "");
Expect(1, 13311, '\p{^	UIDEO}', "");
Expect(1, 13311, '\P{	UIDEO}', "");
Expect(0, 13311, '\P{^	UIDEO}', "");
Error('\p{-/a/Is uideo}');
Error('\P{-/a/Is uideo}');
Expect(1, 19893, '\p{isuideo}', "");
Expect(0, 19893, '\p{^isuideo}', "");
Expect(0, 19893, '\P{isuideo}', "");
Expect(1, 19893, '\P{^isuideo}', "");
Expect(0, 13311, '\p{isuideo}', "");
Expect(1, 13311, '\p{^isuideo}', "");
Expect(1, 13311, '\P{isuideo}', "");
Expect(0, 13311, '\P{^isuideo}', "");
Expect(1, 19893, '\p{	_Is	UIDEO}', "");
Expect(0, 19893, '\p{^	_Is	UIDEO}', "");
Expect(0, 19893, '\P{	_Is	UIDEO}', "");
Expect(1, 19893, '\P{^	_Is	UIDEO}', "");
Expect(0, 13311, '\p{	_Is	UIDEO}', "");
Expect(1, 13311, '\p{^	_Is	UIDEO}', "");
Expect(1, 13311, '\P{	_Is	UIDEO}', "");
Expect(0, 13311, '\P{^	_Is	UIDEO}', "");
Error('\p{:=Bopomofo}');
Error('\P{:=Bopomofo}');
Expect(1, 747, '\p{bopomofo}', "");
Expect(0, 747, '\p{^bopomofo}', "");
Expect(0, 747, '\P{bopomofo}', "");
Expect(1, 747, '\P{^bopomofo}', "");
Expect(0, 745, '\p{bopomofo}', "");
Expect(1, 745, '\p{^bopomofo}', "");
Expect(1, 745, '\P{bopomofo}', "");
Expect(0, 745, '\P{^bopomofo}', "");
Expect(1, 747, '\p{-Bopomofo}', "");
Expect(0, 747, '\p{^-Bopomofo}', "");
Expect(0, 747, '\P{-Bopomofo}', "");
Expect(1, 747, '\P{^-Bopomofo}', "");
Expect(0, 745, '\p{-Bopomofo}', "");
Expect(1, 745, '\p{^-Bopomofo}', "");
Expect(1, 745, '\P{-Bopomofo}', "");
Expect(0, 745, '\P{^-Bopomofo}', "");
Error('\p{ 	is/a/Bopomofo}');
Error('\P{ 	is/a/Bopomofo}');
Expect(1, 747, '\p{isbopomofo}', "");
Expect(0, 747, '\p{^isbopomofo}', "");
Expect(0, 747, '\P{isbopomofo}', "");
Expect(1, 747, '\P{^isbopomofo}', "");
Expect(0, 745, '\p{isbopomofo}', "");
Expect(1, 745, '\p{^isbopomofo}', "");
Expect(1, 745, '\P{isbopomofo}', "");
Expect(0, 745, '\P{^isbopomofo}', "");
Expect(1, 747, '\p{ 	IsBopomofo}', "");
Expect(0, 747, '\p{^ 	IsBopomofo}', "");
Expect(0, 747, '\P{ 	IsBopomofo}', "");
Expect(1, 747, '\P{^ 	IsBopomofo}', "");
Expect(0, 745, '\p{ 	IsBopomofo}', "");
Expect(1, 745, '\p{^ 	IsBopomofo}', "");
Expect(1, 745, '\P{ 	IsBopomofo}', "");
Expect(0, 745, '\P{^ 	IsBopomofo}', "");
Error('\p{__Bopo/a/}');
Error('\P{__Bopo/a/}');
Expect(1, 747, '\p{bopo}', "");
Expect(0, 747, '\p{^bopo}', "");
Expect(0, 747, '\P{bopo}', "");
Expect(1, 747, '\P{^bopo}', "");
Expect(0, 745, '\p{bopo}', "");
Expect(1, 745, '\p{^bopo}', "");
Expect(1, 745, '\P{bopo}', "");
Expect(0, 745, '\P{^bopo}', "");
Expect(1, 747, '\p{  BOPO}', "");
Expect(0, 747, '\p{^  BOPO}', "");
Expect(0, 747, '\P{  BOPO}', "");
Expect(1, 747, '\P{^  BOPO}', "");
Expect(0, 745, '\p{  BOPO}', "");
Expect(1, 745, '\p{^  BOPO}', "");
Expect(1, 745, '\P{  BOPO}', "");
Expect(0, 745, '\P{^  BOPO}', "");
Error('\p{-IS	Bopo:=}');
Error('\P{-IS	Bopo:=}');
Expect(1, 747, '\p{isbopo}', "");
Expect(0, 747, '\p{^isbopo}', "");
Expect(0, 747, '\P{isbopo}', "");
Expect(1, 747, '\P{^isbopo}', "");
Expect(0, 745, '\p{isbopo}', "");
Expect(1, 745, '\p{^isbopo}', "");
Expect(1, 745, '\P{isbopo}', "");
Expect(0, 745, '\P{^isbopo}', "");
Expect(1, 747, '\p{-IS-Bopo}', "");
Expect(0, 747, '\p{^-IS-Bopo}', "");
Expect(0, 747, '\P{-IS-Bopo}', "");
Expect(1, 747, '\P{^-IS-Bopo}', "");
Expect(0, 745, '\p{-IS-Bopo}', "");
Expect(1, 745, '\p{^-IS-Bopo}', "");
Expect(1, 745, '\P{-IS-Bopo}', "");
Expect(0, 745, '\P{^-IS-Bopo}', "");
Error('\p{	-miscellaneous-TECHNICAL:=}');
Error('\P{	-miscellaneous-TECHNICAL:=}');
Expect(1, 9215, '\p{miscellaneoustechnical}', "");
Expect(0, 9215, '\p{^miscellaneoustechnical}', "");
Expect(0, 9215, '\P{miscellaneoustechnical}', "");
Expect(1, 9215, '\P{^miscellaneoustechnical}', "");
Expect(0, 8959, '\p{miscellaneoustechnical}', "");
Expect(1, 8959, '\p{^miscellaneoustechnical}', "");
Expect(1, 8959, '\P{miscellaneoustechnical}', "");
Expect(0, 8959, '\P{^miscellaneoustechnical}', "");
Expect(1, 9215, '\p{ 	miscellaneousTechnical}', "");
Expect(0, 9215, '\p{^ 	miscellaneousTechnical}', "");
Expect(0, 9215, '\P{ 	miscellaneousTechnical}', "");
Expect(1, 9215, '\P{^ 	miscellaneousTechnical}', "");
Expect(0, 8959, '\p{ 	miscellaneousTechnical}', "");
Expect(1, 8959, '\p{^ 	miscellaneousTechnical}', "");
Expect(1, 8959, '\P{ 	miscellaneousTechnical}', "");
Expect(0, 8959, '\P{^ 	miscellaneousTechnical}', "");
Error('\p{/a/		IS MiscellaneousTechnical}');
Error('\P{/a/		IS MiscellaneousTechnical}');
Expect(1, 9215, '\p{ismiscellaneoustechnical}', "");
Expect(0, 9215, '\p{^ismiscellaneoustechnical}', "");
Expect(0, 9215, '\P{ismiscellaneoustechnical}', "");
Expect(1, 9215, '\P{^ismiscellaneoustechnical}', "");
Expect(0, 8959, '\p{ismiscellaneoustechnical}', "");
Expect(1, 8959, '\p{^ismiscellaneoustechnical}', "");
Expect(1, 8959, '\P{ismiscellaneoustechnical}', "");
Expect(0, 8959, '\P{^ismiscellaneoustechnical}', "");
Expect(1, 9215, '\p{__IsMiscellaneousTechnical}', "");
Expect(0, 9215, '\p{^__IsMiscellaneousTechnical}', "");
Expect(0, 9215, '\P{__IsMiscellaneousTechnical}', "");
Expect(1, 9215, '\P{^__IsMiscellaneousTechnical}', "");
Expect(0, 8959, '\p{__IsMiscellaneousTechnical}', "");
Expect(1, 8959, '\p{^__IsMiscellaneousTechnical}', "");
Expect(1, 8959, '\P{__IsMiscellaneousTechnical}', "");
Expect(0, 8959, '\P{^__IsMiscellaneousTechnical}', "");
Error('\p{ /a/IN miscellaneous technical}');
Error('\P{ /a/IN miscellaneous technical}');
Expect(1, 9215, '\p{inmiscellaneoustechnical}', "");
Expect(0, 9215, '\p{^inmiscellaneoustechnical}', "");
Expect(0, 9215, '\P{inmiscellaneoustechnical}', "");
Expect(1, 9215, '\P{^inmiscellaneoustechnical}', "");
Expect(0, 8959, '\p{inmiscellaneoustechnical}', "");
Expect(1, 8959, '\p{^inmiscellaneoustechnical}', "");
Expect(1, 8959, '\P{inmiscellaneoustechnical}', "");
Expect(0, 8959, '\P{^inmiscellaneoustechnical}', "");
Expect(1, 9215, '\p{--In-MISCELLANEOUS_Technical}', "");
Expect(0, 9215, '\p{^--In-MISCELLANEOUS_Technical}', "");
Expect(0, 9215, '\P{--In-MISCELLANEOUS_Technical}', "");
Expect(1, 9215, '\P{^--In-MISCELLANEOUS_Technical}', "");
Expect(0, 8959, '\p{--In-MISCELLANEOUS_Technical}', "");
Expect(1, 8959, '\p{^--In-MISCELLANEOUS_Technical}', "");
Expect(1, 8959, '\P{--In-MISCELLANEOUS_Technical}', "");
Expect(0, 8959, '\P{^--In-MISCELLANEOUS_Technical}', "");
Error('\p{_ Mahjong:=tiles}');
Error('\P{_ Mahjong:=tiles}');
Expect(1, 127023, '\p{mahjongtiles}', "");
Expect(0, 127023, '\p{^mahjongtiles}', "");
Expect(0, 127023, '\P{mahjongtiles}', "");
Expect(1, 127023, '\P{^mahjongtiles}', "");
Expect(0, 126975, '\p{mahjongtiles}', "");
Expect(1, 126975, '\p{^mahjongtiles}', "");
Expect(1, 126975, '\P{mahjongtiles}', "");
Expect(0, 126975, '\P{^mahjongtiles}', "");
Expect(1, 127023, '\p{ Mahjong TILES}', "");
Expect(0, 127023, '\p{^ Mahjong TILES}', "");
Expect(0, 127023, '\P{ Mahjong TILES}', "");
Expect(1, 127023, '\P{^ Mahjong TILES}', "");
Expect(0, 126975, '\p{ Mahjong TILES}', "");
Expect(1, 126975, '\p{^ Mahjong TILES}', "");
Expect(1, 126975, '\P{ Mahjong TILES}', "");
Expect(0, 126975, '\P{^ Mahjong TILES}', "");
Error('\p{	_IS-Mahjong:=Tiles}');
Error('\P{	_IS-Mahjong:=Tiles}');
Expect(1, 127023, '\p{ismahjongtiles}', "");
Expect(0, 127023, '\p{^ismahjongtiles}', "");
Expect(0, 127023, '\P{ismahjongtiles}', "");
Expect(1, 127023, '\P{^ismahjongtiles}', "");
Expect(0, 126975, '\p{ismahjongtiles}', "");
Expect(1, 126975, '\p{^ismahjongtiles}', "");
Expect(1, 126975, '\P{ismahjongtiles}', "");
Expect(0, 126975, '\P{^ismahjongtiles}', "");
Expect(1, 127023, '\p{	IsMAHJONG Tiles}', "");
Expect(0, 127023, '\p{^	IsMAHJONG Tiles}', "");
Expect(0, 127023, '\P{	IsMAHJONG Tiles}', "");
Expect(1, 127023, '\P{^	IsMAHJONG Tiles}', "");
Expect(0, 126975, '\p{	IsMAHJONG Tiles}', "");
Expect(1, 126975, '\p{^	IsMAHJONG Tiles}', "");
Expect(1, 126975, '\P{	IsMAHJONG Tiles}', "");
Expect(0, 126975, '\P{^	IsMAHJONG Tiles}', "");
Error('\p{ /a/IN	Mahjong_Tiles}');
Error('\P{ /a/IN	Mahjong_Tiles}');
Expect(1, 127023, '\p{inmahjongtiles}', "");
Expect(0, 127023, '\p{^inmahjongtiles}', "");
Expect(0, 127023, '\P{inmahjongtiles}', "");
Expect(1, 127023, '\P{^inmahjongtiles}', "");
Expect(0, 126975, '\p{inmahjongtiles}', "");
Expect(1, 126975, '\p{^inmahjongtiles}', "");
Expect(1, 126975, '\P{inmahjongtiles}', "");
Expect(0, 126975, '\P{^inmahjongtiles}', "");
Expect(1, 127023, '\p{_INMahjong Tiles}', "");
Expect(0, 127023, '\p{^_INMahjong Tiles}', "");
Expect(0, 127023, '\P{_INMahjong Tiles}', "");
Expect(1, 127023, '\P{^_INMahjong Tiles}', "");
Expect(0, 126975, '\p{_INMahjong Tiles}', "");
Expect(1, 126975, '\p{^_INMahjong Tiles}', "");
Expect(1, 126975, '\P{_INMahjong Tiles}', "");
Expect(0, 126975, '\P{^_INMahjong Tiles}', "");
Error('\p{:=__MISCELLANEOUS_MATHEMATICALSYMBOLS B}');
Error('\P{:=__MISCELLANEOUS_MATHEMATICALSYMBOLS B}');
Expect(1, 10751, '\p{miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10751, '\p{^miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10751, '\P{miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10751, '\P{^miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10623, '\p{miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10623, '\p{^miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10623, '\P{miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10623, '\P{^miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10751, '\p{_Miscellaneous-mathematical-SymbolsB}', "");
Expect(0, 10751, '\p{^_Miscellaneous-mathematical-SymbolsB}', "");
Expect(0, 10751, '\P{_Miscellaneous-mathematical-SymbolsB}', "");
Expect(1, 10751, '\P{^_Miscellaneous-mathematical-SymbolsB}', "");
Expect(0, 10623, '\p{_Miscellaneous-mathematical-SymbolsB}', "");
Expect(1, 10623, '\p{^_Miscellaneous-mathematical-SymbolsB}', "");
Expect(1, 10623, '\P{_Miscellaneous-mathematical-SymbolsB}', "");
Expect(0, 10623, '\P{^_Miscellaneous-mathematical-SymbolsB}', "");
Error('\p{-	Is Miscellaneous/a/mathematical	SymbolsB}');
Error('\P{-	Is Miscellaneous/a/mathematical	SymbolsB}');
Expect(1, 10751, '\p{ismiscellaneousmathematicalsymbolsb}', "");
Expect(0, 10751, '\p{^ismiscellaneousmathematicalsymbolsb}', "");
Expect(0, 10751, '\P{ismiscellaneousmathematicalsymbolsb}', "");
Expect(1, 10751, '\P{^ismiscellaneousmathematicalsymbolsb}', "");
Expect(0, 10623, '\p{ismiscellaneousmathematicalsymbolsb}', "");
Expect(1, 10623, '\p{^ismiscellaneousmathematicalsymbolsb}', "");
Expect(1, 10623, '\P{ismiscellaneousmathematicalsymbolsb}', "");
Expect(0, 10623, '\P{^ismiscellaneousmathematicalsymbolsb}', "");
Expect(1, 10751, '\p{-	Is Miscellaneous mathematical Symbols	B}', "");
Expect(0, 10751, '\p{^-	Is Miscellaneous mathematical Symbols	B}', "");
Expect(0, 10751, '\P{-	Is Miscellaneous mathematical Symbols	B}', "");
Expect(1, 10751, '\P{^-	Is Miscellaneous mathematical Symbols	B}', "");
Expect(0, 10623, '\p{-	Is Miscellaneous mathematical Symbols	B}', "");
Expect(1, 10623, '\p{^-	Is Miscellaneous mathematical Symbols	B}', "");
Expect(1, 10623, '\P{-	Is Miscellaneous mathematical Symbols	B}', "");
Expect(0, 10623, '\P{^-	Is Miscellaneous mathematical Symbols	B}', "");
Error('\p{	-IN miscellaneous/a/Mathematical_symbols-B}');
Error('\P{	-IN miscellaneous/a/Mathematical_symbols-B}');
Expect(1, 10751, '\p{inmiscellaneousmathematicalsymbolsb}', "");
Expect(0, 10751, '\p{^inmiscellaneousmathematicalsymbolsb}', "");
Expect(0, 10751, '\P{inmiscellaneousmathematicalsymbolsb}', "");
Expect(1, 10751, '\P{^inmiscellaneousmathematicalsymbolsb}', "");
Expect(0, 10623, '\p{inmiscellaneousmathematicalsymbolsb}', "");
Expect(1, 10623, '\p{^inmiscellaneousmathematicalsymbolsb}', "");
Expect(1, 10623, '\P{inmiscellaneousmathematicalsymbolsb}', "");
Expect(0, 10623, '\P{^inmiscellaneousmathematicalsymbolsb}', "");
Expect(1, 10751, '\p{InMISCELLANEOUSmathematical_Symbols-B}', "");
Expect(0, 10751, '\p{^InMISCELLANEOUSmathematical_Symbols-B}', "");
Expect(0, 10751, '\P{InMISCELLANEOUSmathematical_Symbols-B}', "");
Expect(1, 10751, '\P{^InMISCELLANEOUSmathematical_Symbols-B}', "");
Expect(0, 10623, '\p{InMISCELLANEOUSmathematical_Symbols-B}', "");
Expect(1, 10623, '\p{^InMISCELLANEOUSmathematical_Symbols-B}', "");
Expect(1, 10623, '\P{InMISCELLANEOUSmathematical_Symbols-B}', "");
Expect(0, 10623, '\P{^InMISCELLANEOUSmathematical_Symbols-B}', "");
Error('\p{-ENCLOSED:=Ideographic-Supplement}');
Error('\P{-ENCLOSED:=Ideographic-Supplement}');
Expect(1, 127743, '\p{enclosedideographicsupplement}', "");
Expect(0, 127743, '\p{^enclosedideographicsupplement}', "");
Expect(0, 127743, '\P{enclosedideographicsupplement}', "");
Expect(1, 127743, '\P{^enclosedideographicsupplement}', "");
Expect(0, 127487, '\p{enclosedideographicsupplement}', "");
Expect(1, 127487, '\p{^enclosedideographicsupplement}', "");
Expect(1, 127487, '\P{enclosedideographicsupplement}', "");
Expect(0, 127487, '\P{^enclosedideographicsupplement}', "");
Expect(1, 127743, '\p{	ENCLOSED-Ideographicsupplement}', "");
Expect(0, 127743, '\p{^	ENCLOSED-Ideographicsupplement}', "");
Expect(0, 127743, '\P{	ENCLOSED-Ideographicsupplement}', "");
Expect(1, 127743, '\P{^	ENCLOSED-Ideographicsupplement}', "");
Expect(0, 127487, '\p{	ENCLOSED-Ideographicsupplement}', "");
Expect(1, 127487, '\p{^	ENCLOSED-Ideographicsupplement}', "");
Expect(1, 127487, '\P{	ENCLOSED-Ideographicsupplement}', "");
Expect(0, 127487, '\P{^	ENCLOSED-Ideographicsupplement}', "");
Error('\p{-	IS:=EnclosedIdeographicsupplement}');
Error('\P{-	IS:=EnclosedIdeographicsupplement}');
Expect(1, 127743, '\p{isenclosedideographicsupplement}', "");
Expect(0, 127743, '\p{^isenclosedideographicsupplement}', "");
Expect(0, 127743, '\P{isenclosedideographicsupplement}', "");
Expect(1, 127743, '\P{^isenclosedideographicsupplement}', "");
Expect(0, 127487, '\p{isenclosedideographicsupplement}', "");
Expect(1, 127487, '\p{^isenclosedideographicsupplement}', "");
Expect(1, 127487, '\P{isenclosedideographicsupplement}', "");
Expect(0, 127487, '\P{^isenclosedideographicsupplement}', "");
Expect(1, 127743, '\p{	 is-ENCLOSED	Ideographic_Supplement}', "");
Expect(0, 127743, '\p{^	 is-ENCLOSED	Ideographic_Supplement}', "");
Expect(0, 127743, '\P{	 is-ENCLOSED	Ideographic_Supplement}', "");
Expect(1, 127743, '\P{^	 is-ENCLOSED	Ideographic_Supplement}', "");
Expect(0, 127487, '\p{	 is-ENCLOSED	Ideographic_Supplement}', "");
Expect(1, 127487, '\p{^	 is-ENCLOSED	Ideographic_Supplement}', "");
Expect(1, 127487, '\P{	 is-ENCLOSED	Ideographic_Supplement}', "");
Expect(0, 127487, '\P{^	 is-ENCLOSED	Ideographic_Supplement}', "");
Error('\p{	:=In-enclosedIdeographic_supplement}');
Error('\P{	:=In-enclosedIdeographic_supplement}');
Expect(1, 127743, '\p{inenclosedideographicsupplement}', "");
Expect(0, 127743, '\p{^inenclosedideographicsupplement}', "");
Expect(0, 127743, '\P{inenclosedideographicsupplement}', "");
Expect(1, 127743, '\P{^inenclosedideographicsupplement}', "");
Expect(0, 127487, '\p{inenclosedideographicsupplement}', "");
Expect(1, 127487, '\p{^inenclosedideographicsupplement}', "");
Expect(1, 127487, '\P{inenclosedideographicsupplement}', "");
Expect(0, 127487, '\P{^inenclosedideographicsupplement}', "");
Expect(1, 127743, '\p{-	Inenclosed-IDEOGRAPHIC_SUPPLEMENT}', "");
Expect(0, 127743, '\p{^-	Inenclosed-IDEOGRAPHIC_SUPPLEMENT}', "");
Expect(0, 127743, '\P{-	Inenclosed-IDEOGRAPHIC_SUPPLEMENT}', "");
Expect(1, 127743, '\P{^-	Inenclosed-IDEOGRAPHIC_SUPPLEMENT}', "");
Expect(0, 127487, '\p{-	Inenclosed-IDEOGRAPHIC_SUPPLEMENT}', "");
Expect(1, 127487, '\p{^-	Inenclosed-IDEOGRAPHIC_SUPPLEMENT}', "");
Expect(1, 127487, '\P{-	Inenclosed-IDEOGRAPHIC_SUPPLEMENT}', "");
Expect(0, 127487, '\P{^-	Inenclosed-IDEOGRAPHIC_SUPPLEMENT}', "");
Error('\p{ :=MALAYALAM}');
Error('\P{ :=MALAYALAM}');
Expect(1, 3331, '\p{malayalam}', "");
Expect(0, 3331, '\p{^malayalam}', "");
Expect(0, 3331, '\P{malayalam}', "");
Expect(1, 3331, '\P{^malayalam}', "");
Expect(0, 3329, '\p{malayalam}', "");
Expect(1, 3329, '\p{^malayalam}', "");
Expect(1, 3329, '\P{malayalam}', "");
Expect(0, 3329, '\P{^malayalam}', "");
Expect(1, 3331, '\p{	-Malayalam}', "");
Expect(0, 3331, '\p{^	-Malayalam}', "");
Expect(0, 3331, '\P{	-Malayalam}', "");
Expect(1, 3331, '\P{^	-Malayalam}', "");
Expect(0, 3329, '\p{	-Malayalam}', "");
Expect(1, 3329, '\p{^	-Malayalam}', "");
Expect(1, 3329, '\P{	-Malayalam}', "");
Expect(0, 3329, '\P{^	-Malayalam}', "");
Error('\p{__Is:=malayalam}');
Error('\P{__Is:=malayalam}');
Expect(1, 3331, '\p{ismalayalam}', "");
Expect(0, 3331, '\p{^ismalayalam}', "");
Expect(0, 3331, '\P{ismalayalam}', "");
Expect(1, 3331, '\P{^ismalayalam}', "");
Expect(0, 3329, '\p{ismalayalam}', "");
Expect(1, 3329, '\p{^ismalayalam}', "");
Expect(1, 3329, '\P{ismalayalam}', "");
Expect(0, 3329, '\P{^ismalayalam}', "");
Expect(1, 3331, '\p{_ isMALAYALAM}', "");
Expect(0, 3331, '\p{^_ isMALAYALAM}', "");
Expect(0, 3331, '\P{_ isMALAYALAM}', "");
Expect(1, 3331, '\P{^_ isMALAYALAM}', "");
Expect(0, 3329, '\p{_ isMALAYALAM}', "");
Expect(1, 3329, '\p{^_ isMALAYALAM}', "");
Expect(1, 3329, '\P{_ isMALAYALAM}', "");
Expect(0, 3329, '\P{^_ isMALAYALAM}', "");
Error('\p{/a/Mlym}');
Error('\P{/a/Mlym}');
Expect(1, 3331, '\p{mlym}', "");
Expect(0, 3331, '\p{^mlym}', "");
Expect(0, 3331, '\P{mlym}', "");
Expect(1, 3331, '\P{^mlym}', "");
Expect(0, 3329, '\p{mlym}', "");
Expect(1, 3329, '\p{^mlym}', "");
Expect(1, 3329, '\P{mlym}', "");
Expect(0, 3329, '\P{^mlym}', "");
Expect(1, 3331, '\p{	-mlym}', "");
Expect(0, 3331, '\p{^	-mlym}', "");
Expect(0, 3331, '\P{	-mlym}', "");
Expect(1, 3331, '\P{^	-mlym}', "");
Expect(0, 3329, '\p{	-mlym}', "");
Expect(1, 3329, '\p{^	-mlym}', "");
Expect(1, 3329, '\P{	-mlym}', "");
Expect(0, 3329, '\P{^	-mlym}', "");
Error('\p{/a/-Is Mlym}');
Error('\P{/a/-Is Mlym}');
Expect(1, 3331, '\p{ismlym}', "");
Expect(0, 3331, '\p{^ismlym}', "");
Expect(0, 3331, '\P{ismlym}', "");
Expect(1, 3331, '\P{^ismlym}', "");
Expect(0, 3329, '\p{ismlym}', "");
Expect(1, 3329, '\p{^ismlym}', "");
Expect(1, 3329, '\P{ismlym}', "");
Expect(0, 3329, '\P{^ismlym}', "");
Expect(1, 3331, '\p{__Is-Mlym}', "");
Expect(0, 3331, '\p{^__Is-Mlym}', "");
Expect(0, 3331, '\P{__Is-Mlym}', "");
Expect(1, 3331, '\P{^__Is-Mlym}', "");
Expect(0, 3329, '\p{__Is-Mlym}', "");
Expect(1, 3329, '\p{^__Is-Mlym}', "");
Expect(1, 3329, '\P{__Is-Mlym}', "");
Expect(0, 3329, '\P{^__Is-Mlym}', "");
Error('\p{:=		VEDIC-Extensions}');
Error('\P{:=		VEDIC-Extensions}');
Expect(1, 7423, '\p{vedicextensions}', "");
Expect(0, 7423, '\p{^vedicextensions}', "");
Expect(0, 7423, '\P{vedicextensions}', "");
Expect(1, 7423, '\P{^vedicextensions}', "");
Expect(0, 7375, '\p{vedicextensions}', "");
Expect(1, 7375, '\p{^vedicextensions}', "");
Expect(1, 7375, '\P{vedicextensions}', "");
Expect(0, 7375, '\P{^vedicextensions}', "");
Expect(1, 7423, '\p{	-vedicExtensions}', "");
Expect(0, 7423, '\p{^	-vedicExtensions}', "");
Expect(0, 7423, '\P{	-vedicExtensions}', "");
Expect(1, 7423, '\P{^	-vedicExtensions}', "");
Expect(0, 7375, '\p{	-vedicExtensions}', "");
Expect(1, 7375, '\p{^	-vedicExtensions}', "");
Expect(1, 7375, '\P{	-vedicExtensions}', "");
Expect(0, 7375, '\P{^	-vedicExtensions}', "");
Error('\p{-:=is_Vedic-Extensions}');
Error('\P{-:=is_Vedic-Extensions}');
Expect(1, 7423, '\p{isvedicextensions}', "");
Expect(0, 7423, '\p{^isvedicextensions}', "");
Expect(0, 7423, '\P{isvedicextensions}', "");
Expect(1, 7423, '\P{^isvedicextensions}', "");
Expect(0, 7375, '\p{isvedicextensions}', "");
Expect(1, 7375, '\p{^isvedicextensions}', "");
Expect(1, 7375, '\P{isvedicextensions}', "");
Expect(0, 7375, '\P{^isvedicextensions}', "");
Expect(1, 7423, '\p{ -IsVedic_extensions}', "");
Expect(0, 7423, '\p{^ -IsVedic_extensions}', "");
Expect(0, 7423, '\P{ -IsVedic_extensions}', "");
Expect(1, 7423, '\P{^ -IsVedic_extensions}', "");
Expect(0, 7375, '\p{ -IsVedic_extensions}', "");
Expect(1, 7375, '\p{^ -IsVedic_extensions}', "");
Expect(1, 7375, '\P{ -IsVedic_extensions}', "");
Expect(0, 7375, '\P{^ -IsVedic_extensions}', "");
Error('\p{:=	 In_Vedic-Extensions}');
Error('\P{:=	 In_Vedic-Extensions}');
Expect(1, 7423, '\p{invedicextensions}', "");
Expect(0, 7423, '\p{^invedicextensions}', "");
Expect(0, 7423, '\P{invedicextensions}', "");
Expect(1, 7423, '\P{^invedicextensions}', "");
Expect(0, 7375, '\p{invedicextensions}', "");
Expect(1, 7375, '\p{^invedicextensions}', "");
Expect(1, 7375, '\P{invedicextensions}', "");
Expect(0, 7375, '\P{^invedicextensions}', "");
Expect(1, 7423, '\p{In_vedic-Extensions}', "");
Expect(0, 7423, '\p{^In_vedic-Extensions}', "");
Expect(0, 7423, '\P{In_vedic-Extensions}', "");
Expect(1, 7423, '\P{^In_vedic-Extensions}', "");
Expect(0, 7375, '\p{In_vedic-Extensions}', "");
Expect(1, 7375, '\p{^In_vedic-Extensions}', "");
Expect(1, 7375, '\P{In_vedic-Extensions}', "");
Expect(0, 7375, '\P{^In_vedic-Extensions}', "");
Error('\p{_ OLD:=TURKIC}');
Error('\P{_ OLD:=TURKIC}');
Expect(1, 68680, '\p{oldturkic}', "");
Expect(0, 68680, '\p{^oldturkic}', "");
Expect(0, 68680, '\P{oldturkic}', "");
Expect(1, 68680, '\P{^oldturkic}', "");
Expect(0, 68607, '\p{oldturkic}', "");
Expect(1, 68607, '\p{^oldturkic}', "");
Expect(1, 68607, '\P{oldturkic}', "");
Expect(0, 68607, '\P{^oldturkic}', "");
Expect(1, 68680, '\p{	 old-Turkic}', "");
Expect(0, 68680, '\p{^	 old-Turkic}', "");
Expect(0, 68680, '\P{	 old-Turkic}', "");
Expect(1, 68680, '\P{^	 old-Turkic}', "");
Expect(0, 68607, '\p{	 old-Turkic}', "");
Expect(1, 68607, '\p{^	 old-Turkic}', "");
Expect(1, 68607, '\P{	 old-Turkic}', "");
Expect(0, 68607, '\P{^	 old-Turkic}', "");
Error('\p{-/a/IsOld turkic}');
Error('\P{-/a/IsOld turkic}');
Expect(1, 68680, '\p{isoldturkic}', "");
Expect(0, 68680, '\p{^isoldturkic}', "");
Expect(0, 68680, '\P{isoldturkic}', "");
Expect(1, 68680, '\P{^isoldturkic}', "");
Expect(0, 68607, '\p{isoldturkic}', "");
Expect(1, 68607, '\p{^isoldturkic}', "");
Expect(1, 68607, '\P{isoldturkic}', "");
Expect(0, 68607, '\P{^isoldturkic}', "");
Expect(1, 68680, '\p{-	IsOLD-TURKIC}', "");
Expect(0, 68680, '\p{^-	IsOLD-TURKIC}', "");
Expect(0, 68680, '\P{-	IsOLD-TURKIC}', "");
Expect(1, 68680, '\P{^-	IsOLD-TURKIC}', "");
Expect(0, 68607, '\p{-	IsOLD-TURKIC}', "");
Expect(1, 68607, '\p{^-	IsOLD-TURKIC}', "");
Expect(1, 68607, '\P{-	IsOLD-TURKIC}', "");
Expect(0, 68607, '\P{^-	IsOLD-TURKIC}', "");
Error('\p{:=	Orkh}');
Error('\P{:=	Orkh}');
Expect(1, 68680, '\p{orkh}', "");
Expect(0, 68680, '\p{^orkh}', "");
Expect(0, 68680, '\P{orkh}', "");
Expect(1, 68680, '\P{^orkh}', "");
Expect(0, 68607, '\p{orkh}', "");
Expect(1, 68607, '\p{^orkh}', "");
Expect(1, 68607, '\P{orkh}', "");
Expect(0, 68607, '\P{^orkh}', "");
Expect(1, 68680, '\p{-_Orkh}', "");
Expect(0, 68680, '\p{^-_Orkh}', "");
Expect(0, 68680, '\P{-_Orkh}', "");
Expect(1, 68680, '\P{^-_Orkh}', "");
Expect(0, 68607, '\p{-_Orkh}', "");
Expect(1, 68607, '\p{^-_Orkh}', "");
Expect(1, 68607, '\P{-_Orkh}', "");
Expect(0, 68607, '\P{^-_Orkh}', "");
Error('\p{	:=is ORKH}');
Error('\P{	:=is ORKH}');
Expect(1, 68680, '\p{isorkh}', "");
Expect(0, 68680, '\p{^isorkh}', "");
Expect(0, 68680, '\P{isorkh}', "");
Expect(1, 68680, '\P{^isorkh}', "");
Expect(0, 68607, '\p{isorkh}', "");
Expect(1, 68607, '\p{^isorkh}', "");
Expect(1, 68607, '\P{isorkh}', "");
Expect(0, 68607, '\P{^isorkh}', "");
Expect(1, 68680, '\p{	Is	Orkh}', "");
Expect(0, 68680, '\p{^	Is	Orkh}', "");
Expect(0, 68680, '\P{	Is	Orkh}', "");
Expect(1, 68680, '\P{^	Is	Orkh}', "");
Expect(0, 68607, '\p{	Is	Orkh}', "");
Expect(1, 68607, '\p{^	Is	Orkh}', "");
Expect(1, 68607, '\P{	Is	Orkh}', "");
Expect(0, 68607, '\P{^	Is	Orkh}', "");
Error('\p{ :=NonspacingMARK}');
Error('\P{ :=NonspacingMARK}');
Expect(1, 879, '\p{nonspacingmark}', "");
Expect(0, 879, '\p{^nonspacingmark}', "");
Expect(0, 879, '\P{nonspacingmark}', "");
Expect(1, 879, '\P{^nonspacingmark}', "");
Expect(0, 767, '\p{nonspacingmark}', "");
Expect(1, 767, '\p{^nonspacingmark}', "");
Expect(1, 767, '\P{nonspacingmark}', "");
Expect(0, 767, '\P{^nonspacingmark}', "");
Expect(1, 879, '\p{-	NonspacingMark}', "");
Expect(0, 879, '\p{^-	NonspacingMark}', "");
Expect(0, 879, '\P{-	NonspacingMark}', "");
Expect(1, 879, '\P{^-	NonspacingMark}', "");
Expect(0, 767, '\p{-	NonspacingMark}', "");
Expect(1, 767, '\p{^-	NonspacingMark}', "");
Expect(1, 767, '\P{-	NonspacingMark}', "");
Expect(0, 767, '\P{^-	NonspacingMark}', "");
Error('\p{- Is_nonspacingmark/a/}');
Error('\P{- Is_nonspacingmark/a/}');
Expect(1, 879, '\p{isnonspacingmark}', "");
Expect(0, 879, '\p{^isnonspacingmark}', "");
Expect(0, 879, '\P{isnonspacingmark}', "");
Expect(1, 879, '\P{^isnonspacingmark}', "");
Expect(0, 767, '\p{isnonspacingmark}', "");
Expect(1, 767, '\p{^isnonspacingmark}', "");
Expect(1, 767, '\P{isnonspacingmark}', "");
Expect(0, 767, '\P{^isnonspacingmark}', "");
Expect(1, 879, '\p{		is_nonspacing_MARK}', "");
Expect(0, 879, '\p{^		is_nonspacing_MARK}', "");
Expect(0, 879, '\P{		is_nonspacing_MARK}', "");
Expect(1, 879, '\P{^		is_nonspacing_MARK}', "");
Expect(0, 767, '\p{		is_nonspacing_MARK}', "");
Expect(1, 767, '\p{^		is_nonspacing_MARK}', "");
Expect(1, 767, '\P{		is_nonspacing_MARK}', "");
Expect(0, 767, '\P{^		is_nonspacing_MARK}', "");
Error('\p{:=	MN}');
Error('\P{:=	MN}');
Expect(1, 879, '\p{mn}', "");
Expect(0, 879, '\p{^mn}', "");
Expect(0, 879, '\P{mn}', "");
Expect(1, 879, '\P{^mn}', "");
Expect(0, 767, '\p{mn}', "");
Expect(1, 767, '\p{^mn}', "");
Expect(1, 767, '\P{mn}', "");
Expect(0, 767, '\P{^mn}', "");
Expect(1, 879, '\p{	Mn}', "");
Expect(0, 879, '\p{^	Mn}', "");
Expect(0, 879, '\P{	Mn}', "");
Expect(1, 879, '\P{^	Mn}', "");
Expect(0, 767, '\p{	Mn}', "");
Expect(1, 767, '\p{^	Mn}', "");
Expect(1, 767, '\P{	Mn}', "");
Expect(0, 767, '\P{^	Mn}', "");
Error('\p{-Is/a/mn}');
Error('\P{-Is/a/mn}');
Expect(1, 879, '\p{ismn}', "");
Expect(0, 879, '\p{^ismn}', "");
Expect(0, 879, '\P{ismn}', "");
Expect(1, 879, '\P{^ismn}', "");
Expect(0, 767, '\p{ismn}', "");
Expect(1, 767, '\p{^ismn}', "");
Expect(1, 767, '\P{ismn}', "");
Expect(0, 767, '\P{^ismn}', "");
Expect(1, 879, '\p{ _Is MN}', "");
Expect(0, 879, '\p{^ _Is MN}', "");
Expect(0, 879, '\P{ _Is MN}', "");
Expect(1, 879, '\P{^ _Is MN}', "");
Expect(0, 767, '\p{ _Is MN}', "");
Expect(1, 767, '\p{^ _Is MN}', "");
Expect(1, 767, '\P{ _Is MN}', "");
Expect(0, 767, '\P{^ _Is MN}', "");
Error('\p{	/a/Transport-AndMap_Symbols}');
Error('\P{	/a/Transport-AndMap_Symbols}');
Expect(1, 128767, '\p{transportandmapsymbols}', "");
Expect(0, 128767, '\p{^transportandmapsymbols}', "");
Expect(0, 128767, '\P{transportandmapsymbols}', "");
Expect(1, 128767, '\P{^transportandmapsymbols}', "");
Expect(0, 128639, '\p{transportandmapsymbols}', "");
Expect(1, 128639, '\p{^transportandmapsymbols}', "");
Expect(1, 128639, '\P{transportandmapsymbols}', "");
Expect(0, 128639, '\P{^transportandmapsymbols}', "");
Expect(1, 128767, '\p{		Transport-ANDmapSymbols}', "");
Expect(0, 128767, '\p{^		Transport-ANDmapSymbols}', "");
Expect(0, 128767, '\P{		Transport-ANDmapSymbols}', "");
Expect(1, 128767, '\P{^		Transport-ANDmapSymbols}', "");
Expect(0, 128639, '\p{		Transport-ANDmapSymbols}', "");
Expect(1, 128639, '\p{^		Transport-ANDmapSymbols}', "");
Expect(1, 128639, '\P{		Transport-ANDmapSymbols}', "");
Expect(0, 128639, '\P{^		Transport-ANDmapSymbols}', "");
Error('\p{_:=IS-transport-And_MAP-Symbols}');
Error('\P{_:=IS-transport-And_MAP-Symbols}');
Expect(1, 128767, '\p{istransportandmapsymbols}', "");
Expect(0, 128767, '\p{^istransportandmapsymbols}', "");
Expect(0, 128767, '\P{istransportandmapsymbols}', "");
Expect(1, 128767, '\P{^istransportandmapsymbols}', "");
Expect(0, 128639, '\p{istransportandmapsymbols}', "");
Expect(1, 128639, '\p{^istransportandmapsymbols}', "");
Expect(1, 128639, '\P{istransportandmapsymbols}', "");
Expect(0, 128639, '\P{^istransportandmapsymbols}', "");
Expect(1, 128767, '\p{_-Is_TRANSPORT	AND MAP	SYMBOLS}', "");
Expect(0, 128767, '\p{^_-Is_TRANSPORT	AND MAP	SYMBOLS}', "");
Expect(0, 128767, '\P{_-Is_TRANSPORT	AND MAP	SYMBOLS}', "");
Expect(1, 128767, '\P{^_-Is_TRANSPORT	AND MAP	SYMBOLS}', "");
Expect(0, 128639, '\p{_-Is_TRANSPORT	AND MAP	SYMBOLS}', "");
Expect(1, 128639, '\p{^_-Is_TRANSPORT	AND MAP	SYMBOLS}', "");
Expect(1, 128639, '\P{_-Is_TRANSPORT	AND MAP	SYMBOLS}', "");
Expect(0, 128639, '\P{^_-Is_TRANSPORT	AND MAP	SYMBOLS}', "");
Error('\p{-_InTRANSPORT:=and MAPSYMBOLS}');
Error('\P{-_InTRANSPORT:=and MAPSYMBOLS}');
Expect(1, 128767, '\p{intransportandmapsymbols}', "");
Expect(0, 128767, '\p{^intransportandmapsymbols}', "");
Expect(0, 128767, '\P{intransportandmapsymbols}', "");
Expect(1, 128767, '\P{^intransportandmapsymbols}', "");
Expect(0, 128639, '\p{intransportandmapsymbols}', "");
Expect(1, 128639, '\p{^intransportandmapsymbols}', "");
Expect(1, 128639, '\P{intransportandmapsymbols}', "");
Expect(0, 128639, '\P{^intransportandmapsymbols}', "");
Expect(1, 128767, '\p{in	Transport and	map	Symbols}', "");
Expect(0, 128767, '\p{^in	Transport and	map	Symbols}', "");
Expect(0, 128767, '\P{in	Transport and	map	Symbols}', "");
Expect(1, 128767, '\P{^in	Transport and	map	Symbols}', "");
Expect(0, 128639, '\p{in	Transport and	map	Symbols}', "");
Expect(1, 128639, '\p{^in	Transport and	map	Symbols}', "");
Expect(1, 128639, '\P{in	Transport and	map	Symbols}', "");
Expect(0, 128639, '\P{^in	Transport and	map	Symbols}', "");
Error('\p{/a/--LISU}');
Error('\P{/a/--LISU}');
Expect(1, 42239, '\p{lisu}', "");
Expect(0, 42239, '\p{^lisu}', "");
Expect(0, 42239, '\P{lisu}', "");
Expect(1, 42239, '\P{^lisu}', "");
Expect(0, 42191, '\p{lisu}', "");
Expect(1, 42191, '\p{^lisu}', "");
Expect(1, 42191, '\P{lisu}', "");
Expect(0, 42191, '\P{^lisu}', "");
Expect(1, 42239, '\p{_Lisu}', "");
Expect(0, 42239, '\p{^_Lisu}', "");
Expect(0, 42239, '\P{_Lisu}', "");
Expect(1, 42239, '\P{^_Lisu}', "");
Expect(0, 42191, '\p{_Lisu}', "");
Expect(1, 42191, '\p{^_Lisu}', "");
Expect(1, 42191, '\P{_Lisu}', "");
Expect(0, 42191, '\P{^_Lisu}', "");
Error('\p{:=-Is LISU}');
Error('\P{:=-Is LISU}');
Expect(1, 42239, '\p{islisu}', "");
Expect(0, 42239, '\p{^islisu}', "");
Expect(0, 42239, '\P{islisu}', "");
Expect(1, 42239, '\P{^islisu}', "");
Expect(0, 42191, '\p{islisu}', "");
Expect(1, 42191, '\p{^islisu}', "");
Expect(1, 42191, '\P{islisu}', "");
Expect(0, 42191, '\P{^islisu}', "");
Expect(1, 42239, '\p{-	IsLISU}', "");
Expect(0, 42239, '\p{^-	IsLISU}', "");
Expect(0, 42239, '\P{-	IsLISU}', "");
Expect(1, 42239, '\P{^-	IsLISU}', "");
Expect(0, 42191, '\p{-	IsLISU}', "");
Expect(1, 42191, '\p{^-	IsLISU}', "");
Expect(1, 42191, '\P{-	IsLISU}', "");
Expect(0, 42191, '\P{^-	IsLISU}', "");
Error('\p{ _FULLCompositionExclusion/a/}');
Error('\P{ _FULLCompositionExclusion/a/}');
Expect(1, 833, '\p{fullcompositionexclusion}', "");
Expect(0, 833, '\p{^fullcompositionexclusion}', "");
Expect(0, 833, '\P{fullcompositionexclusion}', "");
Expect(1, 833, '\P{^fullcompositionexclusion}', "");
Expect(0, 831, '\p{fullcompositionexclusion}', "");
Expect(1, 831, '\p{^fullcompositionexclusion}', "");
Expect(1, 831, '\P{fullcompositionexclusion}', "");
Expect(0, 831, '\P{^fullcompositionexclusion}', "");
Expect(1, 833, '\p{_FullComposition_EXCLUSION}', "");
Expect(0, 833, '\p{^_FullComposition_EXCLUSION}', "");
Expect(0, 833, '\P{_FullComposition_EXCLUSION}', "");
Expect(1, 833, '\P{^_FullComposition_EXCLUSION}', "");
Expect(0, 831, '\p{_FullComposition_EXCLUSION}', "");
Expect(1, 831, '\p{^_FullComposition_EXCLUSION}', "");
Expect(1, 831, '\P{_FullComposition_EXCLUSION}', "");
Expect(0, 831, '\P{^_FullComposition_EXCLUSION}', "");
Error('\p{	 IS:=full_Compositionexclusion}');
Error('\P{	 IS:=full_Compositionexclusion}');
Expect(1, 833, '\p{isfullcompositionexclusion}', "");
Expect(0, 833, '\p{^isfullcompositionexclusion}', "");
Expect(0, 833, '\P{isfullcompositionexclusion}', "");
Expect(1, 833, '\P{^isfullcompositionexclusion}', "");
Expect(0, 831, '\p{isfullcompositionexclusion}', "");
Expect(1, 831, '\p{^isfullcompositionexclusion}', "");
Expect(1, 831, '\P{isfullcompositionexclusion}', "");
Expect(0, 831, '\P{^isfullcompositionexclusion}', "");
Expect(1, 833, '\p{		Is	Fullcomposition_EXCLUSION}', "");
Expect(0, 833, '\p{^		Is	Fullcomposition_EXCLUSION}', "");
Expect(0, 833, '\P{		Is	Fullcomposition_EXCLUSION}', "");
Expect(1, 833, '\P{^		Is	Fullcomposition_EXCLUSION}', "");
Expect(0, 831, '\p{		Is	Fullcomposition_EXCLUSION}', "");
Expect(1, 831, '\p{^		Is	Fullcomposition_EXCLUSION}', "");
Expect(1, 831, '\P{		Is	Fullcomposition_EXCLUSION}', "");
Expect(0, 831, '\P{^		Is	Fullcomposition_EXCLUSION}', "");
Error('\p{:=		Comp	EX}');
Error('\P{:=		Comp	EX}');
Expect(1, 833, '\p{compex}', "");
Expect(0, 833, '\p{^compex}', "");
Expect(0, 833, '\P{compex}', "");
Expect(1, 833, '\P{^compex}', "");
Expect(0, 831, '\p{compex}', "");
Expect(1, 831, '\p{^compex}', "");
Expect(1, 831, '\P{compex}', "");
Expect(0, 831, '\P{^compex}', "");
Expect(1, 833, '\p{Comp-EX}', "");
Expect(0, 833, '\p{^Comp-EX}', "");
Expect(0, 833, '\P{Comp-EX}', "");
Expect(1, 833, '\P{^Comp-EX}', "");
Expect(0, 831, '\p{Comp-EX}', "");
Expect(1, 831, '\p{^Comp-EX}', "");
Expect(1, 831, '\P{Comp-EX}', "");
Expect(0, 831, '\P{^Comp-EX}', "");
Error('\p{--is/a/COMP Ex}');
Error('\P{--is/a/COMP Ex}');
Expect(1, 833, '\p{iscompex}', "");
Expect(0, 833, '\p{^iscompex}', "");
Expect(0, 833, '\P{iscompex}', "");
Expect(1, 833, '\P{^iscompex}', "");
Expect(0, 831, '\p{iscompex}', "");
Expect(1, 831, '\p{^iscompex}', "");
Expect(1, 831, '\P{iscompex}', "");
Expect(0, 831, '\P{^iscompex}', "");
Expect(1, 833, '\p{_ IS_COMP	Ex}', "");
Expect(0, 833, '\p{^_ IS_COMP	Ex}', "");
Expect(0, 833, '\P{_ IS_COMP	Ex}', "");
Expect(1, 833, '\P{^_ IS_COMP	Ex}', "");
Expect(0, 831, '\p{_ IS_COMP	Ex}', "");
Expect(1, 831, '\p{^_ IS_COMP	Ex}', "");
Expect(1, 831, '\P{_ IS_COMP	Ex}', "");
Expect(0, 831, '\P{^_ IS_COMP	Ex}', "");
Error('\p{:= 	JOINControl}');
Error('\P{:= 	JOINControl}');
Expect(1, 8205, '\p{joincontrol}', "");
Expect(0, 8205, '\p{^joincontrol}', "");
Expect(0, 8205, '\P{joincontrol}', "");
Expect(1, 8205, '\P{^joincontrol}', "");
Expect(0, 8203, '\p{joincontrol}', "");
Expect(1, 8203, '\p{^joincontrol}', "");
Expect(1, 8203, '\P{joincontrol}', "");
Expect(0, 8203, '\P{^joincontrol}', "");
Expect(1, 8205, '\p{	-Join-control}', "");
Expect(0, 8205, '\p{^	-Join-control}', "");
Expect(0, 8205, '\P{	-Join-control}', "");
Expect(1, 8205, '\P{^	-Join-control}', "");
Expect(0, 8203, '\p{	-Join-control}', "");
Expect(1, 8203, '\p{^	-Join-control}', "");
Expect(1, 8203, '\P{	-Join-control}', "");
Expect(0, 8203, '\P{^	-Join-control}', "");
Error('\p{:=_isJoin Control}');
Error('\P{:=_isJoin Control}');
Expect(1, 8205, '\p{isjoincontrol}', "");
Expect(0, 8205, '\p{^isjoincontrol}', "");
Expect(0, 8205, '\P{isjoincontrol}', "");
Expect(1, 8205, '\P{^isjoincontrol}', "");
Expect(0, 8203, '\p{isjoincontrol}', "");
Expect(1, 8203, '\p{^isjoincontrol}', "");
Expect(1, 8203, '\P{isjoincontrol}', "");
Expect(0, 8203, '\P{^isjoincontrol}', "");
Expect(1, 8205, '\p{-	isJOIN_CONTROL}', "");
Expect(0, 8205, '\p{^-	isJOIN_CONTROL}', "");
Expect(0, 8205, '\P{-	isJOIN_CONTROL}', "");
Expect(1, 8205, '\P{^-	isJOIN_CONTROL}', "");
Expect(0, 8203, '\p{-	isJOIN_CONTROL}', "");
Expect(1, 8203, '\p{^-	isJOIN_CONTROL}', "");
Expect(1, 8203, '\P{-	isJOIN_CONTROL}', "");
Expect(0, 8203, '\P{^-	isJOIN_CONTROL}', "");
Error('\p{:=joinC}');
Error('\P{:=joinC}');
Expect(1, 8205, '\p{joinc}', "");
Expect(0, 8205, '\p{^joinc}', "");
Expect(0, 8205, '\P{joinc}', "");
Expect(1, 8205, '\P{^joinc}', "");
Expect(0, 8203, '\p{joinc}', "");
Expect(1, 8203, '\p{^joinc}', "");
Expect(1, 8203, '\P{joinc}', "");
Expect(0, 8203, '\P{^joinc}', "");
Expect(1, 8205, '\p{JOINC}', "");
Expect(0, 8205, '\p{^JOINC}', "");
Expect(0, 8205, '\P{JOINC}', "");
Expect(1, 8205, '\P{^JOINC}', "");
Expect(0, 8203, '\p{JOINC}', "");
Expect(1, 8203, '\p{^JOINC}', "");
Expect(1, 8203, '\P{JOINC}', "");
Expect(0, 8203, '\P{^JOINC}', "");
Error('\p{isJOIN	C:=}');
Error('\P{isJOIN	C:=}');
Expect(1, 8205, '\p{isjoinc}', "");
Expect(0, 8205, '\p{^isjoinc}', "");
Expect(0, 8205, '\P{isjoinc}', "");
Expect(1, 8205, '\P{^isjoinc}', "");
Expect(0, 8203, '\p{isjoinc}', "");
Expect(1, 8203, '\p{^isjoinc}', "");
Expect(1, 8203, '\P{isjoinc}', "");
Expect(0, 8203, '\P{^isjoinc}', "");
Expect(1, 8205, '\p{Is join-C}', "");
Expect(0, 8205, '\p{^Is join-C}', "");
Expect(0, 8205, '\P{Is join-C}', "");
Expect(1, 8205, '\P{^Is join-C}', "");
Expect(0, 8203, '\p{Is join-C}', "");
Expect(1, 8203, '\p{^Is join-C}', "");
Expect(1, 8203, '\P{Is join-C}', "");
Expect(0, 8203, '\P{^Is join-C}', "");
Error('\p{-_Upper:=}');
Error('\P{-_Upper:=}');
Expect(1, 90, '\p{upper}', "");
Expect(0, 90, '\p{^upper}', "");
Expect(0, 90, '\P{upper}', "");
Expect(1, 90, '\P{^upper}', "");
Expect(0, 64, '\p{upper}', "");
Expect(1, 64, '\p{^upper}', "");
Expect(1, 64, '\P{upper}', "");
Expect(0, 64, '\P{^upper}', "");
Expect(1, 90, '\p{_	Upper}', "");
Expect(0, 90, '\p{^_	Upper}', "");
Expect(0, 90, '\P{_	Upper}', "");
Expect(1, 90, '\P{^_	Upper}', "");
Expect(0, 64, '\p{_	Upper}', "");
Expect(1, 64, '\p{^_	Upper}', "");
Expect(1, 64, '\P{_	Upper}', "");
Expect(0, 64, '\P{^_	Upper}', "");
Error('\p{_/a/XPosixUpper}');
Error('\P{_/a/XPosixUpper}');
Expect(1, 90, '\p{xposixupper}', "");
Expect(0, 90, '\p{^xposixupper}', "");
Expect(0, 90, '\P{xposixupper}', "");
Expect(1, 90, '\P{^xposixupper}', "");
Expect(0, 64, '\p{xposixupper}', "");
Expect(1, 64, '\p{^xposixupper}', "");
Expect(1, 64, '\P{xposixupper}', "");
Expect(0, 64, '\P{^xposixupper}', "");
Expect(1, 90, '\p{-	xposixupper}', "");
Expect(0, 90, '\p{^-	xposixupper}', "");
Expect(0, 90, '\P{-	xposixupper}', "");
Expect(1, 90, '\P{^-	xposixupper}', "");
Expect(0, 64, '\p{-	xposixupper}', "");
Expect(1, 64, '\p{^-	xposixupper}', "");
Expect(1, 64, '\P{-	xposixupper}', "");
Expect(0, 64, '\P{^-	xposixupper}', "");
Error('\p{/a/_IsUPPER}');
Error('\P{/a/_IsUPPER}');
Expect(1, 90, '\p{isupper}', "");
Expect(0, 90, '\p{^isupper}', "");
Expect(0, 90, '\P{isupper}', "");
Expect(1, 90, '\P{^isupper}', "");
Expect(0, 64, '\p{isupper}', "");
Expect(1, 64, '\p{^isupper}', "");
Expect(1, 64, '\P{isupper}', "");
Expect(0, 64, '\P{^isupper}', "");
Expect(1, 90, '\p{- Is	UPPER}', "");
Expect(0, 90, '\p{^- Is	UPPER}', "");
Expect(0, 90, '\P{- Is	UPPER}', "");
Expect(1, 90, '\P{^- Is	UPPER}', "");
Expect(0, 64, '\p{- Is	UPPER}', "");
Expect(1, 64, '\p{^- Is	UPPER}', "");
Expect(1, 64, '\P{- Is	UPPER}', "");
Expect(0, 64, '\P{^- Is	UPPER}', "");
Error('\p{-_ISxposixupper/a/}');
Error('\P{-_ISxposixupper/a/}');
Expect(1, 90, '\p{isxposixupper}', "");
Expect(0, 90, '\p{^isxposixupper}', "");
Expect(0, 90, '\P{isxposixupper}', "");
Expect(1, 90, '\P{^isxposixupper}', "");
Expect(0, 64, '\p{isxposixupper}', "");
Expect(1, 64, '\p{^isxposixupper}', "");
Expect(1, 64, '\P{isxposixupper}', "");
Expect(0, 64, '\P{^isxposixupper}', "");
Expect(1, 90, '\p{-ISXPosixUpper}', "");
Expect(0, 90, '\p{^-ISXPosixUpper}', "");
Expect(0, 90, '\P{-ISXPosixUpper}', "");
Expect(1, 90, '\P{^-ISXPosixUpper}', "");
Expect(0, 64, '\p{-ISXPosixUpper}', "");
Expect(1, 64, '\p{^-ISXPosixUpper}', "");
Expect(1, 64, '\P{-ISXPosixUpper}', "");
Expect(0, 64, '\P{^-ISXPosixUpper}', "");
Error('\p{-:=Uppercase}');
Error('\P{-:=Uppercase}');
Expect(1, 90, '\p{uppercase}', "");
Expect(0, 90, '\p{^uppercase}', "");
Expect(0, 90, '\P{uppercase}', "");
Expect(1, 90, '\P{^uppercase}', "");
Expect(0, 64, '\p{uppercase}', "");
Expect(1, 64, '\p{^uppercase}', "");
Expect(1, 64, '\P{uppercase}', "");
Expect(0, 64, '\P{^uppercase}', "");
Expect(1, 90, '\p{-_uppercase}', "");
Expect(0, 90, '\p{^-_uppercase}', "");
Expect(0, 90, '\P{-_uppercase}', "");
Expect(1, 90, '\P{^-_uppercase}', "");
Expect(0, 64, '\p{-_uppercase}', "");
Expect(1, 64, '\p{^-_uppercase}', "");
Expect(1, 64, '\P{-_uppercase}', "");
Expect(0, 64, '\P{^-_uppercase}', "");
Error('\p{-:=IS	Uppercase}');
Error('\P{-:=IS	Uppercase}');
Expect(1, 90, '\p{isuppercase}', "");
Expect(0, 90, '\p{^isuppercase}', "");
Expect(0, 90, '\P{isuppercase}', "");
Expect(1, 90, '\P{^isuppercase}', "");
Expect(0, 64, '\p{isuppercase}', "");
Expect(1, 64, '\p{^isuppercase}', "");
Expect(1, 64, '\P{isuppercase}', "");
Expect(0, 64, '\P{^isuppercase}', "");
Expect(1, 90, '\p{_-Is Uppercase}', "");
Expect(0, 90, '\p{^_-Is Uppercase}', "");
Expect(0, 90, '\P{_-Is Uppercase}', "");
Expect(1, 90, '\P{^_-Is Uppercase}', "");
Expect(0, 64, '\p{_-Is Uppercase}', "");
Expect(1, 64, '\p{^_-Is Uppercase}', "");
Expect(1, 64, '\P{_-Is Uppercase}', "");
Expect(0, 64, '\P{^_-Is Uppercase}', "");
Error('\p{ -Braille_Patterns/a/}');
Error('\P{ -Braille_Patterns/a/}');
Expect(1, 10495, '\p{braillepatterns}', "");
Expect(0, 10495, '\p{^braillepatterns}', "");
Expect(0, 10495, '\P{braillepatterns}', "");
Expect(1, 10495, '\P{^braillepatterns}', "");
Expect(0, 10239, '\p{braillepatterns}', "");
Expect(1, 10239, '\p{^braillepatterns}', "");
Expect(1, 10239, '\P{braillepatterns}', "");
Expect(0, 10239, '\P{^braillepatterns}', "");
Expect(1, 10495, '\p{  braille	patterns}', "");
Expect(0, 10495, '\p{^  braille	patterns}', "");
Expect(0, 10495, '\P{  braille	patterns}', "");
Expect(1, 10495, '\P{^  braille	patterns}', "");
Expect(0, 10239, '\p{  braille	patterns}', "");
Expect(1, 10239, '\p{^  braille	patterns}', "");
Expect(1, 10239, '\P{  braille	patterns}', "");
Expect(0, 10239, '\P{^  braille	patterns}', "");
Error('\p{	:=Is_BRAILLEPatterns}');
Error('\P{	:=Is_BRAILLEPatterns}');
Expect(1, 10495, '\p{isbraillepatterns}', "");
Expect(0, 10495, '\p{^isbraillepatterns}', "");
Expect(0, 10495, '\P{isbraillepatterns}', "");
Expect(1, 10495, '\P{^isbraillepatterns}', "");
Expect(0, 10239, '\p{isbraillepatterns}', "");
Expect(1, 10239, '\p{^isbraillepatterns}', "");
Expect(1, 10239, '\P{isbraillepatterns}', "");
Expect(0, 10239, '\P{^isbraillepatterns}', "");
Expect(1, 10495, '\p{ -Is-Braille patterns}', "");
Expect(0, 10495, '\p{^ -Is-Braille patterns}', "");
Expect(0, 10495, '\P{ -Is-Braille patterns}', "");
Expect(1, 10495, '\P{^ -Is-Braille patterns}', "");
Expect(0, 10239, '\p{ -Is-Braille patterns}', "");
Expect(1, 10239, '\p{^ -Is-Braille patterns}', "");
Expect(1, 10239, '\P{ -Is-Braille patterns}', "");
Expect(0, 10239, '\P{^ -Is-Braille patterns}', "");
Error('\p{-	In/a/braille	PATTERNS}');
Error('\P{-	In/a/braille	PATTERNS}');
Expect(1, 10495, '\p{inbraillepatterns}', "");
Expect(0, 10495, '\p{^inbraillepatterns}', "");
Expect(0, 10495, '\P{inbraillepatterns}', "");
Expect(1, 10495, '\P{^inbraillepatterns}', "");
Expect(0, 10239, '\p{inbraillepatterns}', "");
Expect(1, 10239, '\p{^inbraillepatterns}', "");
Expect(1, 10239, '\P{inbraillepatterns}', "");
Expect(0, 10239, '\P{^inbraillepatterns}', "");
Expect(1, 10495, '\p{	 In-BRAILLEpatterns}', "");
Expect(0, 10495, '\p{^	 In-BRAILLEpatterns}', "");
Expect(0, 10495, '\P{	 In-BRAILLEpatterns}', "");
Expect(1, 10495, '\P{^	 In-BRAILLEpatterns}', "");
Expect(0, 10239, '\p{	 In-BRAILLEpatterns}', "");
Expect(1, 10239, '\p{^	 In-BRAILLEpatterns}', "");
Expect(1, 10239, '\P{	 In-BRAILLEpatterns}', "");
Expect(0, 10239, '\P{^	 In-BRAILLEpatterns}', "");
Error('\p{/a/Katakana}');
Error('\P{/a/Katakana}');
Expect(1, 12538, '\p{katakana}', "");
Expect(0, 12538, '\p{^katakana}', "");
Expect(0, 12538, '\P{katakana}', "");
Expect(1, 12538, '\P{^katakana}', "");
Expect(0, 12448, '\p{katakana}', "");
Expect(1, 12448, '\p{^katakana}', "");
Expect(1, 12448, '\P{katakana}', "");
Expect(0, 12448, '\P{^katakana}', "");
Expect(1, 12538, '\p{		Katakana}', "");
Expect(0, 12538, '\p{^		Katakana}', "");
Expect(0, 12538, '\P{		Katakana}', "");
Expect(1, 12538, '\P{^		Katakana}', "");
Expect(0, 12448, '\p{		Katakana}', "");
Expect(1, 12448, '\p{^		Katakana}', "");
Expect(1, 12448, '\P{		Katakana}', "");
Expect(0, 12448, '\P{^		Katakana}', "");
Error('\p{-_is/a/Katakana}');
Error('\P{-_is/a/Katakana}');
Expect(1, 12538, '\p{iskatakana}', "");
Expect(0, 12538, '\p{^iskatakana}', "");
Expect(0, 12538, '\P{iskatakana}', "");
Expect(1, 12538, '\P{^iskatakana}', "");
Expect(0, 12448, '\p{iskatakana}', "");
Expect(1, 12448, '\p{^iskatakana}', "");
Expect(1, 12448, '\P{iskatakana}', "");
Expect(0, 12448, '\P{^iskatakana}', "");
Expect(1, 12538, '\p{ _IsKatakana}', "");
Expect(0, 12538, '\p{^ _IsKatakana}', "");
Expect(0, 12538, '\P{ _IsKatakana}', "");
Expect(1, 12538, '\P{^ _IsKatakana}', "");
Expect(0, 12448, '\p{ _IsKatakana}', "");
Expect(1, 12448, '\p{^ _IsKatakana}', "");
Expect(1, 12448, '\P{ _IsKatakana}', "");
Expect(0, 12448, '\P{^ _IsKatakana}', "");
Error('\p{	Kana/a/}');
Error('\P{	Kana/a/}');
Expect(1, 12538, '\p{kana}', "");
Expect(0, 12538, '\p{^kana}', "");
Expect(0, 12538, '\P{kana}', "");
Expect(1, 12538, '\P{^kana}', "");
Expect(0, 12448, '\p{kana}', "");
Expect(1, 12448, '\p{^kana}', "");
Expect(1, 12448, '\P{kana}', "");
Expect(0, 12448, '\P{^kana}', "");
Expect(1, 12538, '\p{__KANA}', "");
Expect(0, 12538, '\p{^__KANA}', "");
Expect(0, 12538, '\P{__KANA}', "");
Expect(1, 12538, '\P{^__KANA}', "");
Expect(0, 12448, '\p{__KANA}', "");
Expect(1, 12448, '\p{^__KANA}', "");
Expect(1, 12448, '\P{__KANA}', "");
Expect(0, 12448, '\P{^__KANA}', "");
Error('\p{:=  Is-kana}');
Error('\P{:=  Is-kana}');
Expect(1, 12538, '\p{iskana}', "");
Expect(0, 12538, '\p{^iskana}', "");
Expect(0, 12538, '\P{iskana}', "");
Expect(1, 12538, '\P{^iskana}', "");
Expect(0, 12448, '\p{iskana}', "");
Expect(1, 12448, '\p{^iskana}', "");
Expect(1, 12448, '\P{iskana}', "");
Expect(0, 12448, '\P{^iskana}', "");
Expect(1, 12538, '\p{__Iskana}', "");
Expect(0, 12538, '\p{^__Iskana}', "");
Expect(0, 12538, '\P{__Iskana}', "");
Expect(1, 12538, '\P{^__Iskana}', "");
Expect(0, 12448, '\p{__Iskana}', "");
Expect(1, 12448, '\p{^__Iskana}', "");
Expect(1, 12448, '\P{__Iskana}', "");
Expect(0, 12448, '\P{^__Iskana}', "");
Error('\p{ :=PATTERNwhite space}');
Error('\P{ :=PATTERNwhite space}');
Expect(1, 13, '\p{patternwhitespace}', "");
Expect(0, 13, '\p{^patternwhitespace}', "");
Expect(0, 13, '\P{patternwhitespace}', "");
Expect(1, 13, '\P{^patternwhitespace}', "");
Expect(0, 8, '\p{patternwhitespace}', "");
Expect(1, 8, '\p{^patternwhitespace}', "");
Expect(1, 8, '\P{patternwhitespace}', "");
Expect(0, 8, '\P{^patternwhitespace}', "");
Expect(1, 13, '\p{	Pattern_White-space}', "");
Expect(0, 13, '\p{^	Pattern_White-space}', "");
Expect(0, 13, '\P{	Pattern_White-space}', "");
Expect(1, 13, '\P{^	Pattern_White-space}', "");
Expect(0, 8, '\p{	Pattern_White-space}', "");
Expect(1, 8, '\p{^	Pattern_White-space}', "");
Expect(1, 8, '\P{	Pattern_White-space}', "");
Expect(0, 8, '\P{^	Pattern_White-space}', "");
Error('\p{		Is Pattern	White-space:=}');
Error('\P{		Is Pattern	White-space:=}');
Expect(1, 13, '\p{ispatternwhitespace}', "");
Expect(0, 13, '\p{^ispatternwhitespace}', "");
Expect(0, 13, '\P{ispatternwhitespace}', "");
Expect(1, 13, '\P{^ispatternwhitespace}', "");
Expect(0, 8, '\p{ispatternwhitespace}', "");
Expect(1, 8, '\p{^ispatternwhitespace}', "");
Expect(1, 8, '\P{ispatternwhitespace}', "");
Expect(0, 8, '\P{^ispatternwhitespace}', "");
Expect(1, 13, '\p{_isPattern	white-SPACE}', "");
Expect(0, 13, '\p{^_isPattern	white-SPACE}', "");
Expect(0, 13, '\P{_isPattern	white-SPACE}', "");
Expect(1, 13, '\P{^_isPattern	white-SPACE}', "");
Expect(0, 8, '\p{_isPattern	white-SPACE}', "");
Expect(1, 8, '\p{^_isPattern	white-SPACE}', "");
Expect(1, 8, '\P{_isPattern	white-SPACE}', "");
Expect(0, 8, '\P{^_isPattern	white-SPACE}', "");
Error('\p{	:=Pat WS}');
Error('\P{	:=Pat WS}');
Expect(1, 13, '\p{patws}', "");
Expect(0, 13, '\p{^patws}', "");
Expect(0, 13, '\P{patws}', "");
Expect(1, 13, '\P{^patws}', "");
Expect(0, 8, '\p{patws}', "");
Expect(1, 8, '\p{^patws}', "");
Expect(1, 8, '\P{patws}', "");
Expect(0, 8, '\P{^patws}', "");
Expect(1, 13, '\p{	_Pat_WS}', "");
Expect(0, 13, '\p{^	_Pat_WS}', "");
Expect(0, 13, '\P{	_Pat_WS}', "");
Expect(1, 13, '\P{^	_Pat_WS}', "");
Expect(0, 8, '\p{	_Pat_WS}', "");
Expect(1, 8, '\p{^	_Pat_WS}', "");
Expect(1, 8, '\P{	_Pat_WS}', "");
Expect(0, 8, '\P{^	_Pat_WS}', "");
Error('\p{  is:=Pat WS}');
Error('\P{  is:=Pat WS}');
Expect(1, 13, '\p{ispatws}', "");
Expect(0, 13, '\p{^ispatws}', "");
Expect(0, 13, '\P{ispatws}', "");
Expect(1, 13, '\P{^ispatws}', "");
Expect(0, 8, '\p{ispatws}', "");
Expect(1, 8, '\p{^ispatws}', "");
Expect(1, 8, '\P{ispatws}', "");
Expect(0, 8, '\P{^ispatws}', "");
Expect(1, 13, '\p{ _Is-Pat-WS}', "");
Expect(0, 13, '\p{^ _Is-Pat-WS}', "");
Expect(0, 13, '\P{ _Is-Pat-WS}', "");
Expect(1, 13, '\P{^ _Is-Pat-WS}', "");
Expect(0, 8, '\p{ _Is-Pat-WS}', "");
Expect(1, 8, '\p{^ _Is-Pat-WS}', "");
Expect(1, 8, '\P{ _Is-Pat-WS}', "");
Expect(0, 8, '\P{^ _Is-Pat-WS}', "");
Error('\p{:=  noncharacter-Codepoint}');
Error('\P{:=  noncharacter-Codepoint}');
Expect(1, 65007, '\p{noncharactercodepoint}', "");
Expect(0, 65007, '\p{^noncharactercodepoint}', "");
Expect(0, 65007, '\P{noncharactercodepoint}', "");
Expect(1, 65007, '\P{^noncharactercodepoint}', "");
Expect(0, 64975, '\p{noncharactercodepoint}', "");
Expect(1, 64975, '\p{^noncharactercodepoint}', "");
Expect(1, 64975, '\P{noncharactercodepoint}', "");
Expect(0, 64975, '\P{^noncharactercodepoint}', "");
Expect(1, 65007, '\p{_	NONCHARACTER-Code	point}', "");
Expect(0, 65007, '\p{^_	NONCHARACTER-Code	point}', "");
Expect(0, 65007, '\P{_	NONCHARACTER-Code	point}', "");
Expect(1, 65007, '\P{^_	NONCHARACTER-Code	point}', "");
Expect(0, 64975, '\p{_	NONCHARACTER-Code	point}', "");
Expect(1, 64975, '\p{^_	NONCHARACTER-Code	point}', "");
Expect(1, 64975, '\P{_	NONCHARACTER-Code	point}', "");
Expect(0, 64975, '\P{^_	NONCHARACTER-Code	point}', "");
Error('\p{-/a/Is_NoncharacterCODEpoint}');
Error('\P{-/a/Is_NoncharacterCODEpoint}');
Expect(1, 65007, '\p{isnoncharactercodepoint}', "");
Expect(0, 65007, '\p{^isnoncharactercodepoint}', "");
Expect(0, 65007, '\P{isnoncharactercodepoint}', "");
Expect(1, 65007, '\P{^isnoncharactercodepoint}', "");
Expect(0, 64975, '\p{isnoncharactercodepoint}', "");
Expect(1, 64975, '\p{^isnoncharactercodepoint}', "");
Expect(1, 64975, '\P{isnoncharactercodepoint}', "");
Expect(0, 64975, '\P{^isnoncharactercodepoint}', "");
Expect(1, 65007, '\p{_Is_noncharacter	code point}', "");
Expect(0, 65007, '\p{^_Is_noncharacter	code point}', "");
Expect(0, 65007, '\P{_Is_noncharacter	code point}', "");
Expect(1, 65007, '\P{^_Is_noncharacter	code point}', "");
Expect(0, 64975, '\p{_Is_noncharacter	code point}', "");
Expect(1, 64975, '\p{^_Is_noncharacter	code point}', "");
Expect(1, 64975, '\P{_Is_noncharacter	code point}', "");
Expect(0, 64975, '\P{^_Is_noncharacter	code point}', "");
Error('\p{ :=NCHAR}');
Error('\P{ :=NCHAR}');
Expect(1, 65007, '\p{nchar}', "");
Expect(0, 65007, '\p{^nchar}', "");
Expect(0, 65007, '\P{nchar}', "");
Expect(1, 65007, '\P{^nchar}', "");
Expect(0, 64975, '\p{nchar}', "");
Expect(1, 64975, '\p{^nchar}', "");
Expect(1, 64975, '\P{nchar}', "");
Expect(0, 64975, '\P{^nchar}', "");
Expect(1, 65007, '\p{ NCHAR}', "");
Expect(0, 65007, '\p{^ NCHAR}', "");
Expect(0, 65007, '\P{ NCHAR}', "");
Expect(1, 65007, '\P{^ NCHAR}', "");
Expect(0, 64975, '\p{ NCHAR}', "");
Expect(1, 64975, '\p{^ NCHAR}', "");
Expect(1, 64975, '\P{ NCHAR}', "");
Expect(0, 64975, '\P{^ NCHAR}', "");
Error('\p{-/a/Is	NCHAR}');
Error('\P{-/a/Is	NCHAR}');
Expect(1, 65007, '\p{isnchar}', "");
Expect(0, 65007, '\p{^isnchar}', "");
Expect(0, 65007, '\P{isnchar}', "");
Expect(1, 65007, '\P{^isnchar}', "");
Expect(0, 64975, '\p{isnchar}', "");
Expect(1, 64975, '\p{^isnchar}', "");
Expect(1, 64975, '\P{isnchar}', "");
Expect(0, 64975, '\P{^isnchar}', "");
Expect(1, 65007, '\p{--IS-NCHAR}', "");
Expect(0, 65007, '\p{^--IS-NCHAR}', "");
Expect(0, 65007, '\P{--IS-NCHAR}', "");
Expect(1, 65007, '\P{^--IS-NCHAR}', "");
Expect(0, 64975, '\p{--IS-NCHAR}', "");
Expect(1, 64975, '\p{^--IS-NCHAR}', "");
Expect(1, 64975, '\P{--IS-NCHAR}', "");
Expect(0, 64975, '\P{^--IS-NCHAR}', "");
Error('\p{ 	in:=Ogham}');
Error('\P{ 	in:=Ogham}');
Expect(1, 5791, '\p{inogham}', "");
Expect(0, 5791, '\p{^inogham}', "");
Expect(0, 5791, '\P{inogham}', "");
Expect(1, 5791, '\P{^inogham}', "");
Expect(0, 5759, '\p{inogham}', "");
Expect(1, 5759, '\p{^inogham}', "");
Expect(1, 5759, '\P{inogham}', "");
Expect(0, 5759, '\P{^inogham}', "");
Expect(1, 5791, '\p{  in ogham}', "");
Expect(0, 5791, '\p{^  in ogham}', "");
Expect(0, 5791, '\P{  in ogham}', "");
Expect(1, 5791, '\P{^  in ogham}', "");
Expect(0, 5759, '\p{  in ogham}', "");
Expect(1, 5759, '\p{^  in ogham}', "");
Expect(1, 5759, '\P{  in ogham}', "");
Expect(0, 5759, '\P{^  in ogham}', "");
Error('\p{:=word}');
Error('\P{:=word}');
Expect(1, 57, '\p{word}', "");
Expect(0, 57, '\p{^word}', "");
Expect(0, 57, '\P{word}', "");
Expect(1, 57, '\P{^word}', "");
Expect(0, 47, '\p{word}', "");
Expect(1, 47, '\p{^word}', "");
Expect(1, 47, '\P{word}', "");
Expect(0, 47, '\P{^word}', "");
Expect(1, 57, '\p{-Word}', "");
Expect(0, 57, '\p{^-Word}', "");
Expect(0, 57, '\P{-Word}', "");
Expect(1, 57, '\P{^-Word}', "");
Expect(0, 47, '\p{-Word}', "");
Expect(1, 47, '\p{^-Word}', "");
Expect(1, 47, '\P{-Word}', "");
Expect(0, 47, '\P{^-Word}', "");
Error('\p{_ XPOSIXWORD/a/}');
Error('\P{_ XPOSIXWORD/a/}');
Expect(1, 57, '\p{xposixword}', "");
Expect(0, 57, '\p{^xposixword}', "");
Expect(0, 57, '\P{xposixword}', "");
Expect(1, 57, '\P{^xposixword}', "");
Expect(0, 47, '\p{xposixword}', "");
Expect(1, 47, '\p{^xposixword}', "");
Expect(1, 47, '\P{xposixword}', "");
Expect(0, 47, '\P{^xposixword}', "");
Expect(1, 57, '\p{	XPosixWord}', "");
Expect(0, 57, '\p{^	XPosixWord}', "");
Expect(0, 57, '\P{	XPosixWord}', "");
Expect(1, 57, '\P{^	XPosixWord}', "");
Expect(0, 47, '\p{	XPosixWord}', "");
Expect(1, 47, '\p{^	XPosixWord}', "");
Expect(1, 47, '\P{	XPosixWord}', "");
Expect(0, 47, '\P{^	XPosixWord}', "");
Error('\p{:=_ISword}');
Error('\P{:=_ISword}');
Expect(1, 57, '\p{isword}', "");
Expect(0, 57, '\p{^isword}', "");
Expect(0, 57, '\P{isword}', "");
Expect(1, 57, '\P{^isword}', "");
Expect(0, 47, '\p{isword}', "");
Expect(1, 47, '\p{^isword}', "");
Expect(1, 47, '\P{isword}', "");
Expect(0, 47, '\P{^isword}', "");
Expect(1, 57, '\p{--is Word}', "");
Expect(0, 57, '\p{^--is Word}', "");
Expect(0, 57, '\P{--is Word}', "");
Expect(1, 57, '\P{^--is Word}', "");
Expect(0, 47, '\p{--is Word}', "");
Expect(1, 47, '\p{^--is Word}', "");
Expect(1, 47, '\P{--is Word}', "");
Expect(0, 47, '\P{^--is Word}', "");
Error('\p{:=_Is XPosixWord}');
Error('\P{:=_Is XPosixWord}');
Expect(1, 57, '\p{isxposixword}', "");
Expect(0, 57, '\p{^isxposixword}', "");
Expect(0, 57, '\P{isxposixword}', "");
Expect(1, 57, '\P{^isxposixword}', "");
Expect(0, 47, '\p{isxposixword}', "");
Expect(1, 47, '\p{^isxposixword}', "");
Expect(1, 47, '\P{isxposixword}', "");
Expect(0, 47, '\P{^isxposixword}', "");
Expect(1, 57, '\p{Is	XPosixWord}', "");
Expect(0, 57, '\p{^Is	XPosixWord}', "");
Expect(0, 57, '\P{Is	XPosixWord}', "");
Expect(1, 57, '\P{^Is	XPosixWord}', "");
Expect(0, 47, '\p{Is	XPosixWord}', "");
Expect(1, 47, '\p{^Is	XPosixWord}', "");
Expect(1, 47, '\P{Is	XPosixWord}', "");
Expect(0, 47, '\P{^Is	XPosixWord}', "");
Error('\p{ old_South/a/Arabian}');
Error('\P{ old_South/a/Arabian}');
Expect(1, 68223, '\p{oldsoutharabian}', "");
Expect(0, 68223, '\p{^oldsoutharabian}', "");
Expect(0, 68223, '\P{oldsoutharabian}', "");
Expect(1, 68223, '\P{^oldsoutharabian}', "");
Expect(0, 68191, '\p{oldsoutharabian}', "");
Expect(1, 68191, '\p{^oldsoutharabian}', "");
Expect(1, 68191, '\P{oldsoutharabian}', "");
Expect(0, 68191, '\P{^oldsoutharabian}', "");
Expect(1, 68223, '\p{	 old	south-Arabian}', "");
Expect(0, 68223, '\p{^	 old	south-Arabian}', "");
Expect(0, 68223, '\P{	 old	south-Arabian}', "");
Expect(1, 68223, '\P{^	 old	south-Arabian}', "");
Expect(0, 68191, '\p{	 old	south-Arabian}', "");
Expect(1, 68191, '\p{^	 old	south-Arabian}', "");
Expect(1, 68191, '\P{	 old	south-Arabian}', "");
Expect(0, 68191, '\P{^	 old	south-Arabian}', "");
Error('\p{-/a/is	Old SOUTHArabian}');
Error('\P{-/a/is	Old SOUTHArabian}');
Expect(1, 68223, '\p{isoldsoutharabian}', "");
Expect(0, 68223, '\p{^isoldsoutharabian}', "");
Expect(0, 68223, '\P{isoldsoutharabian}', "");
Expect(1, 68223, '\P{^isoldsoutharabian}', "");
Expect(0, 68191, '\p{isoldsoutharabian}', "");
Expect(1, 68191, '\p{^isoldsoutharabian}', "");
Expect(1, 68191, '\P{isoldsoutharabian}', "");
Expect(0, 68191, '\P{^isoldsoutharabian}', "");
Expect(1, 68223, '\p{	is	Old SOUTHARABIAN}', "");
Expect(0, 68223, '\p{^	is	Old SOUTHARABIAN}', "");
Expect(0, 68223, '\P{	is	Old SOUTHARABIAN}', "");
Expect(1, 68223, '\P{^	is	Old SOUTHARABIAN}', "");
Expect(0, 68191, '\p{	is	Old SOUTHARABIAN}', "");
Expect(1, 68191, '\p{^	is	Old SOUTHARABIAN}', "");
Expect(1, 68191, '\P{	is	Old SOUTHARABIAN}', "");
Expect(0, 68191, '\P{^	is	Old SOUTHARABIAN}', "");
Error('\p{-sarb/a/}');
Error('\P{-sarb/a/}');
Expect(1, 68223, '\p{sarb}', "");
Expect(0, 68223, '\p{^sarb}', "");
Expect(0, 68223, '\P{sarb}', "");
Expect(1, 68223, '\P{^sarb}', "");
Expect(0, 68191, '\p{sarb}', "");
Expect(1, 68191, '\p{^sarb}', "");
Expect(1, 68191, '\P{sarb}', "");
Expect(0, 68191, '\P{^sarb}', "");
Expect(1, 68223, '\p{	-sarb}', "");
Expect(0, 68223, '\p{^	-sarb}', "");
Expect(0, 68223, '\P{	-sarb}', "");
Expect(1, 68223, '\P{^	-sarb}', "");
Expect(0, 68191, '\p{	-sarb}', "");
Expect(1, 68191, '\p{^	-sarb}', "");
Expect(1, 68191, '\P{	-sarb}', "");
Expect(0, 68191, '\P{^	-sarb}', "");
Error('\p{ :=Is-Sarb}');
Error('\P{ :=Is-Sarb}');
Expect(1, 68223, '\p{issarb}', "");
Expect(0, 68223, '\p{^issarb}', "");
Expect(0, 68223, '\P{issarb}', "");
Expect(1, 68223, '\P{^issarb}', "");
Expect(0, 68191, '\p{issarb}', "");
Expect(1, 68191, '\p{^issarb}', "");
Expect(1, 68191, '\P{issarb}', "");
Expect(0, 68191, '\P{^issarb}', "");
Expect(1, 68223, '\p{	_Is sarb}', "");
Expect(0, 68223, '\p{^	_Is sarb}', "");
Expect(0, 68223, '\P{	_Is sarb}', "");
Expect(1, 68223, '\P{^	_Is sarb}', "");
Expect(0, 68191, '\p{	_Is sarb}', "");
Expect(1, 68191, '\p{^	_Is sarb}', "");
Expect(1, 68191, '\P{	_Is sarb}', "");
Expect(0, 68191, '\P{^	_Is sarb}', "");
Error('\p{:=-	Batak}');
Error('\P{:=-	Batak}');
Expect(1, 7155, '\p{batak}', "");
Expect(0, 7155, '\p{^batak}', "");
Expect(0, 7155, '\P{batak}', "");
Expect(1, 7155, '\P{^batak}', "");
Expect(0, 7103, '\p{batak}', "");
Expect(1, 7103, '\p{^batak}', "");
Expect(1, 7103, '\P{batak}', "");
Expect(0, 7103, '\P{^batak}', "");
Expect(1, 7155, '\p{-batak}', "");
Expect(0, 7155, '\p{^-batak}', "");
Expect(0, 7155, '\P{-batak}', "");
Expect(1, 7155, '\P{^-batak}', "");
Expect(0, 7103, '\p{-batak}', "");
Expect(1, 7103, '\p{^-batak}', "");
Expect(1, 7103, '\P{-batak}', "");
Expect(0, 7103, '\P{^-batak}', "");
Error('\p{ _is:=batak}');
Error('\P{ _is:=batak}');
Expect(1, 7155, '\p{isbatak}', "");
Expect(0, 7155, '\p{^isbatak}', "");
Expect(0, 7155, '\P{isbatak}', "");
Expect(1, 7155, '\P{^isbatak}', "");
Expect(0, 7103, '\p{isbatak}', "");
Expect(1, 7103, '\p{^isbatak}', "");
Expect(1, 7103, '\P{isbatak}', "");
Expect(0, 7103, '\P{^isbatak}', "");
Expect(1, 7155, '\p{_-IS	batak}', "");
Expect(0, 7155, '\p{^_-IS	batak}', "");
Expect(0, 7155, '\P{_-IS	batak}', "");
Expect(1, 7155, '\P{^_-IS	batak}', "");
Expect(0, 7103, '\p{_-IS	batak}', "");
Expect(1, 7103, '\p{^_-IS	batak}', "");
Expect(1, 7103, '\P{_-IS	batak}', "");
Expect(0, 7103, '\P{^_-IS	batak}', "");
Error('\p{	/a/Batk}');
Error('\P{	/a/Batk}');
Expect(1, 7155, '\p{batk}', "");
Expect(0, 7155, '\p{^batk}', "");
Expect(0, 7155, '\P{batk}', "");
Expect(1, 7155, '\P{^batk}', "");
Expect(0, 7103, '\p{batk}', "");
Expect(1, 7103, '\p{^batk}', "");
Expect(1, 7103, '\P{batk}', "");
Expect(0, 7103, '\P{^batk}', "");
Expect(1, 7155, '\p{-	batk}', "");
Expect(0, 7155, '\p{^-	batk}', "");
Expect(0, 7155, '\P{-	batk}', "");
Expect(1, 7155, '\P{^-	batk}', "");
Expect(0, 7103, '\p{-	batk}', "");
Expect(1, 7103, '\p{^-	batk}', "");
Expect(1, 7103, '\P{-	batk}', "");
Expect(0, 7103, '\P{^-	batk}', "");
Error('\p{/a/	-Is_Batk}');
Error('\P{/a/	-Is_Batk}');
Expect(1, 7155, '\p{isbatk}', "");
Expect(0, 7155, '\p{^isbatk}', "");
Expect(0, 7155, '\P{isbatk}', "");
Expect(1, 7155, '\P{^isbatk}', "");
Expect(0, 7103, '\p{isbatk}', "");
Expect(1, 7103, '\p{^isbatk}', "");
Expect(1, 7103, '\P{isbatk}', "");
Expect(0, 7103, '\P{^isbatk}', "");
Expect(1, 7155, '\p{_Is-BATK}', "");
Expect(0, 7155, '\p{^_Is-BATK}', "");
Expect(0, 7155, '\P{_Is-BATK}', "");
Expect(1, 7155, '\P{^_Is-BATK}', "");
Expect(0, 7103, '\p{_Is-BATK}', "");
Expect(1, 7103, '\p{^_Is-BATK}', "");
Expect(1, 7103, '\P{_Is-BATK}', "");
Expect(0, 7103, '\P{^_Is-BATK}', "");
Error('\p{/a/ ALPHABETIC_Presentation-FORMS}');
Error('\P{/a/ ALPHABETIC_Presentation-FORMS}');
Expect(1, 64335, '\p{alphabeticpresentationforms}', "");
Expect(0, 64335, '\p{^alphabeticpresentationforms}', "");
Expect(0, 64335, '\P{alphabeticpresentationforms}', "");
Expect(1, 64335, '\P{^alphabeticpresentationforms}', "");
Expect(0, 64255, '\p{alphabeticpresentationforms}', "");
Expect(1, 64255, '\p{^alphabeticpresentationforms}', "");
Expect(1, 64255, '\P{alphabeticpresentationforms}', "");
Expect(0, 64255, '\P{^alphabeticpresentationforms}', "");
Expect(1, 64335, '\p{	Alphabetic-Presentation	Forms}', "");
Expect(0, 64335, '\p{^	Alphabetic-Presentation	Forms}', "");
Expect(0, 64335, '\P{	Alphabetic-Presentation	Forms}', "");
Expect(1, 64335, '\P{^	Alphabetic-Presentation	Forms}', "");
Expect(0, 64255, '\p{	Alphabetic-Presentation	Forms}', "");
Expect(1, 64255, '\p{^	Alphabetic-Presentation	Forms}', "");
Expect(1, 64255, '\P{	Alphabetic-Presentation	Forms}', "");
Expect(0, 64255, '\P{^	Alphabetic-Presentation	Forms}', "");
Error('\p{-Is/a/Alphabetic	presentation	FORMS}');
Error('\P{-Is/a/Alphabetic	presentation	FORMS}');
Expect(1, 64335, '\p{isalphabeticpresentationforms}', "");
Expect(0, 64335, '\p{^isalphabeticpresentationforms}', "");
Expect(0, 64335, '\P{isalphabeticpresentationforms}', "");
Expect(1, 64335, '\P{^isalphabeticpresentationforms}', "");
Expect(0, 64255, '\p{isalphabeticpresentationforms}', "");
Expect(1, 64255, '\p{^isalphabeticpresentationforms}', "");
Expect(1, 64255, '\P{isalphabeticpresentationforms}', "");
Expect(0, 64255, '\P{^isalphabeticpresentationforms}', "");
Expect(1, 64335, '\p{- is Alphabetic_presentation_forms}', "");
Expect(0, 64335, '\p{^- is Alphabetic_presentation_forms}', "");
Expect(0, 64335, '\P{- is Alphabetic_presentation_forms}', "");
Expect(1, 64335, '\P{^- is Alphabetic_presentation_forms}', "");
Expect(0, 64255, '\p{- is Alphabetic_presentation_forms}', "");
Expect(1, 64255, '\p{^- is Alphabetic_presentation_forms}', "");
Expect(1, 64255, '\P{- is Alphabetic_presentation_forms}', "");
Expect(0, 64255, '\P{^- is Alphabetic_presentation_forms}', "");
Error('\p{ IN/a/alphabetic_Presentation-Forms}');
Error('\P{ IN/a/alphabetic_Presentation-Forms}');
Expect(1, 64335, '\p{inalphabeticpresentationforms}', "");
Expect(0, 64335, '\p{^inalphabeticpresentationforms}', "");
Expect(0, 64335, '\P{inalphabeticpresentationforms}', "");
Expect(1, 64335, '\P{^inalphabeticpresentationforms}', "");
Expect(0, 64255, '\p{inalphabeticpresentationforms}', "");
Expect(1, 64255, '\p{^inalphabeticpresentationforms}', "");
Expect(1, 64255, '\P{inalphabeticpresentationforms}', "");
Expect(0, 64255, '\P{^inalphabeticpresentationforms}', "");
Expect(1, 64335, '\p{		In alphabetic presentation-forms}', "");
Expect(0, 64335, '\p{^		In alphabetic presentation-forms}', "");
Expect(0, 64335, '\P{		In alphabetic presentation-forms}', "");
Expect(1, 64335, '\P{^		In alphabetic presentation-forms}', "");
Expect(0, 64255, '\p{		In alphabetic presentation-forms}', "");
Expect(1, 64255, '\p{^		In alphabetic presentation-forms}', "");
Expect(1, 64255, '\P{		In alphabetic presentation-forms}', "");
Expect(0, 64255, '\P{^		In alphabetic presentation-forms}', "");
Error('\p{:=dominoTILES}');
Error('\P{:=dominoTILES}');
Expect(1, 127135, '\p{dominotiles}', "");
Expect(0, 127135, '\p{^dominotiles}', "");
Expect(0, 127135, '\P{dominotiles}', "");
Expect(1, 127135, '\P{^dominotiles}', "");
Expect(0, 127023, '\p{dominotiles}', "");
Expect(1, 127023, '\p{^dominotiles}', "");
Expect(1, 127023, '\P{dominotiles}', "");
Expect(0, 127023, '\P{^dominotiles}', "");
Expect(1, 127135, '\p{-_domino-Tiles}', "");
Expect(0, 127135, '\p{^-_domino-Tiles}', "");
Expect(0, 127135, '\P{-_domino-Tiles}', "");
Expect(1, 127135, '\P{^-_domino-Tiles}', "");
Expect(0, 127023, '\p{-_domino-Tiles}', "");
Expect(1, 127023, '\p{^-_domino-Tiles}', "");
Expect(1, 127023, '\P{-_domino-Tiles}', "");
Expect(0, 127023, '\P{^-_domino-Tiles}', "");
Error('\p{/a/-	Isdomino-Tiles}');
Error('\P{/a/-	Isdomino-Tiles}');
Expect(1, 127135, '\p{isdominotiles}', "");
Expect(0, 127135, '\p{^isdominotiles}', "");
Expect(0, 127135, '\P{isdominotiles}', "");
Expect(1, 127135, '\P{^isdominotiles}', "");
Expect(0, 127023, '\p{isdominotiles}', "");
Expect(1, 127023, '\p{^isdominotiles}', "");
Expect(1, 127023, '\P{isdominotiles}', "");
Expect(0, 127023, '\P{^isdominotiles}', "");
Expect(1, 127135, '\p{- IsDOMINO	Tiles}', "");
Expect(0, 127135, '\p{^- IsDOMINO	Tiles}', "");
Expect(0, 127135, '\P{- IsDOMINO	Tiles}', "");
Expect(1, 127135, '\P{^- IsDOMINO	Tiles}', "");
Expect(0, 127023, '\p{- IsDOMINO	Tiles}', "");
Expect(1, 127023, '\p{^- IsDOMINO	Tiles}', "");
Expect(1, 127023, '\P{- IsDOMINO	Tiles}', "");
Expect(0, 127023, '\P{^- IsDOMINO	Tiles}', "");
Error('\p{__IN:=DOMINOTiles}');
Error('\P{__IN:=DOMINOTiles}');
Expect(1, 127135, '\p{indominotiles}', "");
Expect(0, 127135, '\p{^indominotiles}', "");
Expect(0, 127135, '\P{indominotiles}', "");
Expect(1, 127135, '\P{^indominotiles}', "");
Expect(0, 127023, '\p{indominotiles}', "");
Expect(1, 127023, '\p{^indominotiles}', "");
Expect(1, 127023, '\P{indominotiles}', "");
Expect(0, 127023, '\P{^indominotiles}', "");
Expect(1, 127135, '\p{_-In	Domino Tiles}', "");
Expect(0, 127135, '\p{^_-In	Domino Tiles}', "");
Expect(0, 127135, '\P{_-In	Domino Tiles}', "");
Expect(1, 127135, '\P{^_-In	Domino Tiles}', "");
Expect(0, 127023, '\p{_-In	Domino Tiles}', "");
Expect(1, 127023, '\p{^_-In	Domino Tiles}', "");
Expect(1, 127023, '\P{_-In	Domino Tiles}', "");
Expect(0, 127023, '\P{^_-In	Domino Tiles}', "");
Error('\p{:=IN KAYAH Li}');
Error('\P{:=IN KAYAH Li}');
Expect(1, 43311, '\p{inkayahli}', "");
Expect(0, 43311, '\p{^inkayahli}', "");
Expect(0, 43311, '\P{inkayahli}', "");
Expect(1, 43311, '\P{^inkayahli}', "");
Expect(0, 43263, '\p{inkayahli}', "");
Expect(1, 43263, '\p{^inkayahli}', "");
Expect(1, 43263, '\P{inkayahli}', "");
Expect(0, 43263, '\P{^inkayahli}', "");
Expect(1, 43311, '\p{-_in Kayah_li}', "");
Expect(0, 43311, '\p{^-_in Kayah_li}', "");
Expect(0, 43311, '\P{-_in Kayah_li}', "");
Expect(1, 43311, '\P{^-_in Kayah_li}', "");
Expect(0, 43263, '\p{-_in Kayah_li}', "");
Expect(1, 43263, '\p{^-_in Kayah_li}', "");
Expect(1, 43263, '\P{-_in Kayah_li}', "");
Expect(0, 43263, '\P{^-_in Kayah_li}', "");
Error('\p{ :=Uppercase Letter}');
Error('\P{ :=Uppercase Letter}');
Expect(1, 90, '\p{uppercaseletter}', "");
Expect(0, 90, '\p{^uppercaseletter}', "");
Expect(0, 90, '\P{uppercaseletter}', "");
Expect(1, 90, '\P{^uppercaseletter}', "");
Expect(0, 64, '\p{uppercaseletter}', "");
Expect(1, 64, '\p{^uppercaseletter}', "");
Expect(1, 64, '\P{uppercaseletter}', "");
Expect(0, 64, '\P{^uppercaseletter}', "");
Expect(1, 90, '\p{	Uppercase_letter}', "");
Expect(0, 90, '\p{^	Uppercase_letter}', "");
Expect(0, 90, '\P{	Uppercase_letter}', "");
Expect(1, 90, '\P{^	Uppercase_letter}', "");
Expect(0, 64, '\p{	Uppercase_letter}', "");
Expect(1, 64, '\p{^	Uppercase_letter}', "");
Expect(1, 64, '\P{	Uppercase_letter}', "");
Expect(0, 64, '\P{^	Uppercase_letter}', "");
Error('\p{_IS	Uppercase:=Letter}');
Error('\P{_IS	Uppercase:=Letter}');
Expect(1, 90, '\p{isuppercaseletter}', "");
Expect(0, 90, '\p{^isuppercaseletter}', "");
Expect(0, 90, '\P{isuppercaseletter}', "");
Expect(1, 90, '\P{^isuppercaseletter}', "");
Expect(0, 64, '\p{isuppercaseletter}', "");
Expect(1, 64, '\p{^isuppercaseletter}', "");
Expect(1, 64, '\P{isuppercaseletter}', "");
Expect(0, 64, '\P{^isuppercaseletter}', "");
Expect(1, 90, '\p{_	Is UppercaseLETTER}', "");
Expect(0, 90, '\p{^_	Is UppercaseLETTER}', "");
Expect(0, 90, '\P{_	Is UppercaseLETTER}', "");
Expect(1, 90, '\P{^_	Is UppercaseLETTER}', "");
Expect(0, 64, '\p{_	Is UppercaseLETTER}', "");
Expect(1, 64, '\p{^_	Is UppercaseLETTER}', "");
Expect(1, 64, '\P{_	Is UppercaseLETTER}', "");
Expect(0, 64, '\P{^_	Is UppercaseLETTER}', "");
Error('\p{/a/_Lu}');
Error('\P{/a/_Lu}');
Expect(1, 90, '\p{lu}', "");
Expect(0, 90, '\p{^lu}', "");
Expect(0, 90, '\P{lu}', "");
Expect(1, 90, '\P{^lu}', "");
Expect(0, 64, '\p{lu}', "");
Expect(1, 64, '\p{^lu}', "");
Expect(1, 64, '\P{lu}', "");
Expect(0, 64, '\P{^lu}', "");
Expect(1, 90, '\p{Lu}', "");
Expect(0, 90, '\p{^Lu}', "");
Expect(0, 90, '\P{Lu}', "");
Expect(1, 90, '\P{^Lu}', "");
Expect(0, 64, '\p{Lu}', "");
Expect(1, 64, '\p{^Lu}', "");
Expect(1, 64, '\P{Lu}', "");
Expect(0, 64, '\P{^Lu}', "");
Error('\p{  isLU:=}');
Error('\P{  isLU:=}');
Expect(1, 90, '\p{islu}', "");
Expect(0, 90, '\p{^islu}', "");
Expect(0, 90, '\P{islu}', "");
Expect(1, 90, '\P{^islu}', "");
Expect(0, 64, '\p{islu}', "");
Expect(1, 64, '\p{^islu}', "");
Expect(1, 64, '\P{islu}', "");
Expect(0, 64, '\P{^islu}', "");
Expect(1, 90, '\p{ ISLu}', "");
Expect(0, 90, '\p{^ ISLu}', "");
Expect(0, 90, '\P{ ISLu}', "");
Expect(1, 90, '\P{^ ISLu}', "");
Expect(0, 64, '\p{ ISLu}', "");
Expect(1, 64, '\p{^ ISLu}', "");
Expect(1, 64, '\P{ ISLu}', "");
Expect(0, 64, '\P{^ ISLu}', "");
Error('\p{	:=Tai Le}');
Error('\P{	:=Tai Le}');
Expect(1, 6509, '\p{taile}', "");
Expect(0, 6509, '\p{^taile}', "");
Expect(0, 6509, '\P{taile}', "");
Expect(1, 6509, '\P{^taile}', "");
Expect(0, 6479, '\p{taile}', "");
Expect(1, 6479, '\p{^taile}', "");
Expect(1, 6479, '\P{taile}', "");
Expect(0, 6479, '\P{^taile}', "");
Expect(1, 6509, '\p{_Tai le}', "");
Expect(0, 6509, '\p{^_Tai le}', "");
Expect(0, 6509, '\P{_Tai le}', "");
Expect(1, 6509, '\P{^_Tai le}', "");
Expect(0, 6479, '\p{_Tai le}', "");
Expect(1, 6479, '\p{^_Tai le}', "");
Expect(1, 6479, '\P{_Tai le}', "");
Expect(0, 6479, '\P{^_Tai le}', "");
Error('\p{ -Is-Tai/a/le}');
Error('\P{ -Is-Tai/a/le}');
Expect(1, 6509, '\p{istaile}', "");
Expect(0, 6509, '\p{^istaile}', "");
Expect(0, 6509, '\P{istaile}', "");
Expect(1, 6509, '\P{^istaile}', "");
Expect(0, 6479, '\p{istaile}', "");
Expect(1, 6479, '\p{^istaile}', "");
Expect(1, 6479, '\P{istaile}', "");
Expect(0, 6479, '\P{^istaile}', "");
Expect(1, 6509, '\p{-isTAIle}', "");
Expect(0, 6509, '\p{^-isTAIle}', "");
Expect(0, 6509, '\P{-isTAIle}', "");
Expect(1, 6509, '\P{^-isTAIle}', "");
Expect(0, 6479, '\p{-isTAIle}', "");
Expect(1, 6479, '\p{^-isTAIle}', "");
Expect(1, 6479, '\P{-isTAIle}', "");
Expect(0, 6479, '\P{^-isTAIle}', "");
Error('\p{:=-_tale}');
Error('\P{:=-_tale}');
Expect(1, 6509, '\p{tale}', "");
Expect(0, 6509, '\p{^tale}', "");
Expect(0, 6509, '\P{tale}', "");
Expect(1, 6509, '\P{^tale}', "");
Expect(0, 6479, '\p{tale}', "");
Expect(1, 6479, '\p{^tale}', "");
Expect(1, 6479, '\P{tale}', "");
Expect(0, 6479, '\P{^tale}', "");
Expect(1, 6509, '\p{  Tale}', "");
Expect(0, 6509, '\p{^  Tale}', "");
Expect(0, 6509, '\P{  Tale}', "");
Expect(1, 6509, '\P{^  Tale}', "");
Expect(0, 6479, '\p{  Tale}', "");
Expect(1, 6479, '\p{^  Tale}', "");
Expect(1, 6479, '\P{  Tale}', "");
Expect(0, 6479, '\P{^  Tale}', "");
Error('\p{:=-	Is_TALE}');
Error('\P{:=-	Is_TALE}');
Expect(1, 6509, '\p{istale}', "");
Expect(0, 6509, '\p{^istale}', "");
Expect(0, 6509, '\P{istale}', "");
Expect(1, 6509, '\P{^istale}', "");
Expect(0, 6479, '\p{istale}', "");
Expect(1, 6479, '\p{^istale}', "");
Expect(1, 6479, '\P{istale}', "");
Expect(0, 6479, '\P{^istale}', "");
Expect(1, 6509, '\p{-is	tale}', "");
Expect(0, 6509, '\p{^-is	tale}', "");
Expect(0, 6509, '\P{-is	tale}', "");
Expect(1, 6509, '\P{^-is	tale}', "");
Expect(0, 6479, '\p{-is	tale}', "");
Expect(1, 6479, '\p{^-is	tale}', "");
Expect(1, 6479, '\P{-is	tale}', "");
Expect(0, 6479, '\P{^-is	tale}', "");
Error('\p{ -ASCII hex/a/DIGIT}');
Error('\P{ -ASCII hex/a/DIGIT}');
Expect(1, 57, '\p{asciihexdigit}', "");
Expect(0, 57, '\p{^asciihexdigit}', "");
Expect(0, 57, '\P{asciihexdigit}', "");
Expect(1, 57, '\P{^asciihexdigit}', "");
Expect(0, 47, '\p{asciihexdigit}', "");
Expect(1, 47, '\p{^asciihexdigit}', "");
Expect(1, 47, '\P{asciihexdigit}', "");
Expect(0, 47, '\P{^asciihexdigit}', "");
Expect(1, 57, '\p{__ASCII-HEX	Digit}', "");
Expect(0, 57, '\p{^__ASCII-HEX	Digit}', "");
Expect(0, 57, '\P{__ASCII-HEX	Digit}', "");
Expect(1, 57, '\P{^__ASCII-HEX	Digit}', "");
Expect(0, 47, '\p{__ASCII-HEX	Digit}', "");
Expect(1, 47, '\p{^__ASCII-HEX	Digit}', "");
Expect(1, 47, '\P{__ASCII-HEX	Digit}', "");
Expect(0, 47, '\P{^__ASCII-HEX	Digit}', "");
Error('\p{Is:=ASCII hexDIGIT}');
Error('\P{Is:=ASCII hexDIGIT}');
Expect(1, 57, '\p{isasciihexdigit}', "");
Expect(0, 57, '\p{^isasciihexdigit}', "");
Expect(0, 57, '\P{isasciihexdigit}', "");
Expect(1, 57, '\P{^isasciihexdigit}', "");
Expect(0, 47, '\p{isasciihexdigit}', "");
Expect(1, 47, '\p{^isasciihexdigit}', "");
Expect(1, 47, '\P{isasciihexdigit}', "");
Expect(0, 47, '\P{^isasciihexdigit}', "");
Expect(1, 57, '\p{_	IS	ASCII hex-Digit}', "");
Expect(0, 57, '\p{^_	IS	ASCII hex-Digit}', "");
Expect(0, 57, '\P{_	IS	ASCII hex-Digit}', "");
Expect(1, 57, '\P{^_	IS	ASCII hex-Digit}', "");
Expect(0, 47, '\p{_	IS	ASCII hex-Digit}', "");
Expect(1, 47, '\p{^_	IS	ASCII hex-Digit}', "");
Expect(1, 47, '\P{_	IS	ASCII hex-Digit}', "");
Expect(0, 47, '\P{^_	IS	ASCII hex-Digit}', "");
Error('\p{:=_AHex}');
Error('\P{:=_AHex}');
Expect(1, 57, '\p{ahex}', "");
Expect(0, 57, '\p{^ahex}', "");
Expect(0, 57, '\P{ahex}', "");
Expect(1, 57, '\P{^ahex}', "");
Expect(0, 47, '\p{ahex}', "");
Expect(1, 47, '\p{^ahex}', "");
Expect(1, 47, '\P{ahex}', "");
Expect(0, 47, '\P{^ahex}', "");
Expect(1, 57, '\p{	-AHEX}', "");
Expect(0, 57, '\p{^	-AHEX}', "");
Expect(0, 57, '\P{	-AHEX}', "");
Expect(1, 57, '\P{^	-AHEX}', "");
Expect(0, 47, '\p{	-AHEX}', "");
Expect(1, 47, '\p{^	-AHEX}', "");
Expect(1, 47, '\P{	-AHEX}', "");
Expect(0, 47, '\P{^	-AHEX}', "");
Error('\p{	/a/is-ahex}');
Error('\P{	/a/is-ahex}');
Expect(1, 57, '\p{isahex}', "");
Expect(0, 57, '\p{^isahex}', "");
Expect(0, 57, '\P{isahex}', "");
Expect(1, 57, '\P{^isahex}', "");
Expect(0, 47, '\p{isahex}', "");
Expect(1, 47, '\p{^isahex}', "");
Expect(1, 47, '\P{isahex}', "");
Expect(0, 47, '\P{^isahex}', "");
Expect(1, 57, '\p{ 	ISAHex}', "");
Expect(0, 57, '\p{^ 	ISAHex}', "");
Expect(0, 57, '\P{ 	ISAHex}', "");
Expect(1, 57, '\P{^ 	ISAHex}', "");
Expect(0, 47, '\p{ 	ISAHex}', "");
Expect(1, 47, '\p{^ 	ISAHex}', "");
Expect(1, 47, '\P{ 	ISAHex}', "");
Expect(0, 47, '\P{^ 	ISAHex}', "");
Error('\p{_	MANDAIC/a/}');
Error('\P{_	MANDAIC/a/}');
Expect(1, 2139, '\p{mandaic}', "");
Expect(0, 2139, '\p{^mandaic}', "");
Expect(0, 2139, '\P{mandaic}', "");
Expect(1, 2139, '\P{^mandaic}', "");
Expect(0, 2111, '\p{mandaic}', "");
Expect(1, 2111, '\p{^mandaic}', "");
Expect(1, 2111, '\P{mandaic}', "");
Expect(0, 2111, '\P{^mandaic}', "");
Expect(1, 2139, '\p{Mandaic}', "");
Expect(0, 2139, '\p{^Mandaic}', "");
Expect(0, 2139, '\P{Mandaic}', "");
Expect(1, 2139, '\P{^Mandaic}', "");
Expect(0, 2111, '\p{Mandaic}', "");
Expect(1, 2111, '\p{^Mandaic}', "");
Expect(1, 2111, '\P{Mandaic}', "");
Expect(0, 2111, '\P{^Mandaic}', "");
Error('\p{--Is-mandaic:=}');
Error('\P{--Is-mandaic:=}');
Expect(1, 2139, '\p{ismandaic}', "");
Expect(0, 2139, '\p{^ismandaic}', "");
Expect(0, 2139, '\P{ismandaic}', "");
Expect(1, 2139, '\P{^ismandaic}', "");
Expect(0, 2111, '\p{ismandaic}', "");
Expect(1, 2111, '\p{^ismandaic}', "");
Expect(1, 2111, '\P{ismandaic}', "");
Expect(0, 2111, '\P{^ismandaic}', "");
Expect(1, 2139, '\p{_-Is Mandaic}', "");
Expect(0, 2139, '\p{^_-Is Mandaic}', "");
Expect(0, 2139, '\P{_-Is Mandaic}', "");
Expect(1, 2139, '\P{^_-Is Mandaic}', "");
Expect(0, 2111, '\p{_-Is Mandaic}', "");
Expect(1, 2111, '\p{^_-Is Mandaic}', "");
Expect(1, 2111, '\P{_-Is Mandaic}', "");
Expect(0, 2111, '\P{^_-Is Mandaic}', "");
Error('\p{:=_ MAND}');
Error('\P{:=_ MAND}');
Expect(1, 2139, '\p{mand}', "");
Expect(0, 2139, '\p{^mand}', "");
Expect(0, 2139, '\P{mand}', "");
Expect(1, 2139, '\P{^mand}', "");
Expect(0, 2111, '\p{mand}', "");
Expect(1, 2111, '\p{^mand}', "");
Expect(1, 2111, '\P{mand}', "");
Expect(0, 2111, '\P{^mand}', "");
Expect(1, 2139, '\p{  mand}', "");
Expect(0, 2139, '\p{^  mand}', "");
Expect(0, 2139, '\P{  mand}', "");
Expect(1, 2139, '\P{^  mand}', "");
Expect(0, 2111, '\p{  mand}', "");
Expect(1, 2111, '\p{^  mand}', "");
Expect(1, 2111, '\P{  mand}', "");
Expect(0, 2111, '\P{^  mand}', "");
Error('\p{:=		Is MAND}');
Error('\P{:=		Is MAND}');
Expect(1, 2139, '\p{ismand}', "");
Expect(0, 2139, '\p{^ismand}', "");
Expect(0, 2139, '\P{ismand}', "");
Expect(1, 2139, '\P{^ismand}', "");
Expect(0, 2111, '\p{ismand}', "");
Expect(1, 2111, '\p{^ismand}', "");
Expect(1, 2111, '\P{ismand}', "");
Expect(0, 2111, '\P{^ismand}', "");
Expect(1, 2139, '\p{Ismand}', "");
Expect(0, 2139, '\p{^Ismand}', "");
Expect(0, 2139, '\P{Ismand}', "");
Expect(1, 2139, '\P{^Ismand}', "");
Expect(0, 2111, '\p{Ismand}', "");
Expect(1, 2111, '\p{^Ismand}', "");
Expect(1, 2111, '\P{Ismand}', "");
Expect(0, 2111, '\P{^Ismand}', "");
Error('\p{	REJANG/a/}');
Error('\P{	REJANG/a/}');
Expect(1, 43347, '\p{rejang}', "");
Expect(0, 43347, '\p{^rejang}', "");
Expect(0, 43347, '\P{rejang}', "");
Expect(1, 43347, '\P{^rejang}', "");
Expect(0, 43311, '\p{rejang}', "");
Expect(1, 43311, '\p{^rejang}', "");
Expect(1, 43311, '\P{rejang}', "");
Expect(0, 43311, '\P{^rejang}', "");
Expect(1, 43347, '\p{-Rejang}', "");
Expect(0, 43347, '\p{^-Rejang}', "");
Expect(0, 43347, '\P{-Rejang}', "");
Expect(1, 43347, '\P{^-Rejang}', "");
Expect(0, 43311, '\p{-Rejang}', "");
Expect(1, 43311, '\p{^-Rejang}', "");
Expect(1, 43311, '\P{-Rejang}', "");
Expect(0, 43311, '\P{^-Rejang}', "");
Error('\p{/a/__Is_Rejang}');
Error('\P{/a/__Is_Rejang}');
Expect(1, 43347, '\p{isrejang}', "");
Expect(0, 43347, '\p{^isrejang}', "");
Expect(0, 43347, '\P{isrejang}', "");
Expect(1, 43347, '\P{^isrejang}', "");
Expect(0, 43311, '\p{isrejang}', "");
Expect(1, 43311, '\p{^isrejang}', "");
Expect(1, 43311, '\P{isrejang}', "");
Expect(0, 43311, '\P{^isrejang}', "");
Expect(1, 43347, '\p{	Is_REJANG}', "");
Expect(0, 43347, '\p{^	Is_REJANG}', "");
Expect(0, 43347, '\P{	Is_REJANG}', "");
Expect(1, 43347, '\P{^	Is_REJANG}', "");
Expect(0, 43311, '\p{	Is_REJANG}', "");
Expect(1, 43311, '\p{^	Is_REJANG}', "");
Expect(1, 43311, '\P{	Is_REJANG}', "");
Expect(0, 43311, '\P{^	Is_REJANG}', "");
Error('\p{-	rjng/a/}');
Error('\P{-	rjng/a/}');
Expect(1, 43347, '\p{rjng}', "");
Expect(0, 43347, '\p{^rjng}', "");
Expect(0, 43347, '\P{rjng}', "");
Expect(1, 43347, '\P{^rjng}', "");
Expect(0, 43311, '\p{rjng}', "");
Expect(1, 43311, '\p{^rjng}', "");
Expect(1, 43311, '\P{rjng}', "");
Expect(0, 43311, '\P{^rjng}', "");
Expect(1, 43347, '\p{	RJNG}', "");
Expect(0, 43347, '\p{^	RJNG}', "");
Expect(0, 43347, '\P{	RJNG}', "");
Expect(1, 43347, '\P{^	RJNG}', "");
Expect(0, 43311, '\p{	RJNG}', "");
Expect(1, 43311, '\p{^	RJNG}', "");
Expect(1, 43311, '\P{	RJNG}', "");
Expect(0, 43311, '\P{^	RJNG}', "");
Error('\p{	:=Is rjng}');
Error('\P{	:=Is rjng}');
Expect(1, 43347, '\p{isrjng}', "");
Expect(0, 43347, '\p{^isrjng}', "");
Expect(0, 43347, '\P{isrjng}', "");
Expect(1, 43347, '\P{^isrjng}', "");
Expect(0, 43311, '\p{isrjng}', "");
Expect(1, 43311, '\p{^isrjng}', "");
Expect(1, 43311, '\P{isrjng}', "");
Expect(0, 43311, '\P{^isrjng}', "");
Expect(1, 43347, '\p{	_IS-rjng}', "");
Expect(0, 43347, '\p{^	_IS-rjng}', "");
Expect(0, 43347, '\P{	_IS-rjng}', "");
Expect(1, 43347, '\P{^	_IS-rjng}', "");
Expect(0, 43311, '\p{	_IS-rjng}', "");
Expect(1, 43311, '\p{^	_IS-rjng}', "");
Expect(1, 43311, '\P{	_IS-rjng}', "");
Expect(0, 43311, '\P{^	_IS-rjng}', "");
Error('\p{/a/Unified-CANADIAN-Aboriginal	syllabicsExtended}');
Error('\P{/a/Unified-CANADIAN-Aboriginal	syllabicsExtended}');
Expect(1, 6399, '\p{unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6399, '\p{^unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6399, '\P{unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6399, '\P{^unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6319, '\p{unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6319, '\p{^unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6319, '\P{unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6319, '\P{^unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6399, '\p{-_unified CANADIANABORIGINAL SYLLABICS Extended}', "");
Expect(0, 6399, '\p{^-_unified CANADIANABORIGINAL SYLLABICS Extended}', "");
Expect(0, 6399, '\P{-_unified CANADIANABORIGINAL SYLLABICS Extended}', "");
Expect(1, 6399, '\P{^-_unified CANADIANABORIGINAL SYLLABICS Extended}', "");
Expect(0, 6319, '\p{-_unified CANADIANABORIGINAL SYLLABICS Extended}', "");
Expect(1, 6319, '\p{^-_unified CANADIANABORIGINAL SYLLABICS Extended}', "");
Expect(1, 6319, '\P{-_unified CANADIANABORIGINAL SYLLABICS Extended}', "");
Expect(0, 6319, '\P{^-_unified CANADIANABORIGINAL SYLLABICS Extended}', "");
Error('\p{--Is-unified CANADIAN_ABORIGINAL	Syllabics/a/EXTENDED}');
Error('\P{--Is-unified CANADIAN_ABORIGINAL	Syllabics/a/EXTENDED}');
Expect(1, 6399, '\p{isunifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6399, '\p{^isunifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6399, '\P{isunifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6399, '\P{^isunifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6319, '\p{isunifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6319, '\p{^isunifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6319, '\P{isunifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6319, '\P{^isunifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6399, '\p{-_Is_Unified	CANADIAN_aboriginal_SYLLABICS EXTENDED}', "");
Expect(0, 6399, '\p{^-_Is_Unified	CANADIAN_aboriginal_SYLLABICS EXTENDED}', "");
Expect(0, 6399, '\P{-_Is_Unified	CANADIAN_aboriginal_SYLLABICS EXTENDED}', "");
Expect(1, 6399, '\P{^-_Is_Unified	CANADIAN_aboriginal_SYLLABICS EXTENDED}', "");
Expect(0, 6319, '\p{-_Is_Unified	CANADIAN_aboriginal_SYLLABICS EXTENDED}', "");
Expect(1, 6319, '\p{^-_Is_Unified	CANADIAN_aboriginal_SYLLABICS EXTENDED}', "");
Expect(1, 6319, '\P{-_Is_Unified	CANADIAN_aboriginal_SYLLABICS EXTENDED}', "");
Expect(0, 6319, '\P{^-_Is_Unified	CANADIAN_aboriginal_SYLLABICS EXTENDED}', "");
Error('\p{-InUnifiedCanadian aboriginal:=syllabicsExtended}');
Error('\P{-InUnifiedCanadian aboriginal:=syllabicsExtended}');
Expect(1, 6399, '\p{inunifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6399, '\p{^inunifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6399, '\P{inunifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6399, '\P{^inunifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6319, '\p{inunifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6319, '\p{^inunifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6319, '\P{inunifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6319, '\P{^inunifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6399, '\p{--In_unified canadian Aboriginal Syllabics_Extended}', "");
Expect(0, 6399, '\p{^--In_unified canadian Aboriginal Syllabics_Extended}', "");
Expect(0, 6399, '\P{--In_unified canadian Aboriginal Syllabics_Extended}', "");
Expect(1, 6399, '\P{^--In_unified canadian Aboriginal Syllabics_Extended}', "");
Expect(0, 6319, '\p{--In_unified canadian Aboriginal Syllabics_Extended}', "");
Expect(1, 6319, '\p{^--In_unified canadian Aboriginal Syllabics_Extended}', "");
Expect(1, 6319, '\P{--In_unified canadian Aboriginal Syllabics_Extended}', "");
Expect(0, 6319, '\P{^--In_unified canadian Aboriginal Syllabics_Extended}', "");
Error('\p{/a/Glagolitic}');
Error('\P{/a/Glagolitic}');
Expect(1, 11310, '\p{glagolitic}', "");
Expect(0, 11310, '\p{^glagolitic}', "");
Expect(0, 11310, '\P{glagolitic}', "");
Expect(1, 11310, '\P{^glagolitic}', "");
Expect(0, 11263, '\p{glagolitic}', "");
Expect(1, 11263, '\p{^glagolitic}', "");
Expect(1, 11263, '\P{glagolitic}', "");
Expect(0, 11263, '\P{^glagolitic}', "");
Expect(1, 11310, '\p{_-glagolitic}', "");
Expect(0, 11310, '\p{^_-glagolitic}', "");
Expect(0, 11310, '\P{_-glagolitic}', "");
Expect(1, 11310, '\P{^_-glagolitic}', "");
Expect(0, 11263, '\p{_-glagolitic}', "");
Expect(1, 11263, '\p{^_-glagolitic}', "");
Expect(1, 11263, '\P{_-glagolitic}', "");
Expect(0, 11263, '\P{^_-glagolitic}', "");
Error('\p{_/a/IsGlagolitic}');
Error('\P{_/a/IsGlagolitic}');
Expect(1, 11310, '\p{isglagolitic}', "");
Expect(0, 11310, '\p{^isglagolitic}', "");
Expect(0, 11310, '\P{isglagolitic}', "");
Expect(1, 11310, '\P{^isglagolitic}', "");
Expect(0, 11263, '\p{isglagolitic}', "");
Expect(1, 11263, '\p{^isglagolitic}', "");
Expect(1, 11263, '\P{isglagolitic}', "");
Expect(0, 11263, '\P{^isglagolitic}', "");
Expect(1, 11310, '\p{ _IS_Glagolitic}', "");
Expect(0, 11310, '\p{^ _IS_Glagolitic}', "");
Expect(0, 11310, '\P{ _IS_Glagolitic}', "");
Expect(1, 11310, '\P{^ _IS_Glagolitic}', "");
Expect(0, 11263, '\p{ _IS_Glagolitic}', "");
Expect(1, 11263, '\p{^ _IS_Glagolitic}', "");
Expect(1, 11263, '\P{ _IS_Glagolitic}', "");
Expect(0, 11263, '\P{^ _IS_Glagolitic}', "");
Error('\p{_:=Glag}');
Error('\P{_:=Glag}');
Expect(1, 11310, '\p{glag}', "");
Expect(0, 11310, '\p{^glag}', "");
Expect(0, 11310, '\P{glag}', "");
Expect(1, 11310, '\P{^glag}', "");
Expect(0, 11263, '\p{glag}', "");
Expect(1, 11263, '\p{^glag}', "");
Expect(1, 11263, '\P{glag}', "");
Expect(0, 11263, '\P{^glag}', "");
Expect(1, 11310, '\p{--Glag}', "");
Expect(0, 11310, '\p{^--Glag}', "");
Expect(0, 11310, '\P{--Glag}', "");
Expect(1, 11310, '\P{^--Glag}', "");
Expect(0, 11263, '\p{--Glag}', "");
Expect(1, 11263, '\p{^--Glag}', "");
Expect(1, 11263, '\P{--Glag}', "");
Expect(0, 11263, '\P{^--Glag}', "");
Error('\p{- IS_Glag/a/}');
Error('\P{- IS_Glag/a/}');
Expect(1, 11310, '\p{isglag}', "");
Expect(0, 11310, '\p{^isglag}', "");
Expect(0, 11310, '\P{isglag}', "");
Expect(1, 11310, '\P{^isglag}', "");
Expect(0, 11263, '\p{isglag}', "");
Expect(1, 11263, '\p{^isglag}', "");
Expect(1, 11263, '\P{isglag}', "");
Expect(0, 11263, '\P{^isglag}', "");
Expect(1, 11310, '\p{- IsGlag}', "");
Expect(0, 11310, '\p{^- IsGlag}', "");
Expect(0, 11310, '\P{- IsGlag}', "");
Expect(1, 11310, '\P{^- IsGlag}', "");
Expect(0, 11263, '\p{- IsGlag}', "");
Expect(1, 11263, '\p{^- IsGlag}', "");
Expect(1, 11263, '\P{- IsGlag}', "");
Expect(0, 11263, '\P{^- IsGlag}', "");
Error('\p{/a/	-In OL-Chiki}');
Error('\P{/a/	-In OL-Chiki}');
Expect(1, 7295, '\p{inolchiki}', "");
Expect(0, 7295, '\p{^inolchiki}', "");
Expect(0, 7295, '\P{inolchiki}', "");
Expect(1, 7295, '\P{^inolchiki}', "");
Expect(0, 7247, '\p{inolchiki}', "");
Expect(1, 7247, '\p{^inolchiki}', "");
Expect(1, 7247, '\P{inolchiki}', "");
Expect(0, 7247, '\P{^inolchiki}', "");
Expect(1, 7295, '\p{ IN_OL CHIKI}', "");
Expect(0, 7295, '\p{^ IN_OL CHIKI}', "");
Expect(0, 7295, '\P{ IN_OL CHIKI}', "");
Expect(1, 7295, '\P{^ IN_OL CHIKI}', "");
Expect(0, 7247, '\p{ IN_OL CHIKI}', "");
Expect(1, 7247, '\p{^ IN_OL CHIKI}', "");
Expect(1, 7247, '\P{ IN_OL CHIKI}', "");
Expect(0, 7247, '\P{^ IN_OL CHIKI}', "");
Error('\p{:=CJK_strokes}');
Error('\P{:=CJK_strokes}');
Expect(1, 12783, '\p{cjkstrokes}', "");
Expect(0, 12783, '\p{^cjkstrokes}', "");
Expect(0, 12783, '\P{cjkstrokes}', "");
Expect(1, 12783, '\P{^cjkstrokes}', "");
Expect(0, 12735, '\p{cjkstrokes}', "");
Expect(1, 12735, '\p{^cjkstrokes}', "");
Expect(1, 12735, '\P{cjkstrokes}', "");
Expect(0, 12735, '\P{^cjkstrokes}', "");
Expect(1, 12783, '\p{__CJK	Strokes}', "");
Expect(0, 12783, '\p{^__CJK	Strokes}', "");
Expect(0, 12783, '\P{__CJK	Strokes}', "");
Expect(1, 12783, '\P{^__CJK	Strokes}', "");
Expect(0, 12735, '\p{__CJK	Strokes}', "");
Expect(1, 12735, '\p{^__CJK	Strokes}', "");
Expect(1, 12735, '\P{__CJK	Strokes}', "");
Expect(0, 12735, '\P{^__CJK	Strokes}', "");
Error('\p{ Is_CJK:=strokes}');
Error('\P{ Is_CJK:=strokes}');
Expect(1, 12783, '\p{iscjkstrokes}', "");
Expect(0, 12783, '\p{^iscjkstrokes}', "");
Expect(0, 12783, '\P{iscjkstrokes}', "");
Expect(1, 12783, '\P{^iscjkstrokes}', "");
Expect(0, 12735, '\p{iscjkstrokes}', "");
Expect(1, 12735, '\p{^iscjkstrokes}', "");
Expect(1, 12735, '\P{iscjkstrokes}', "");
Expect(0, 12735, '\P{^iscjkstrokes}', "");
Expect(1, 12783, '\p{ -IS	CJKStrokes}', "");
Expect(0, 12783, '\p{^ -IS	CJKStrokes}', "");
Expect(0, 12783, '\P{ -IS	CJKStrokes}', "");
Expect(1, 12783, '\P{^ -IS	CJKStrokes}', "");
Expect(0, 12735, '\p{ -IS	CJKStrokes}', "");
Expect(1, 12735, '\p{^ -IS	CJKStrokes}', "");
Expect(1, 12735, '\P{ -IS	CJKStrokes}', "");
Expect(0, 12735, '\P{^ -IS	CJKStrokes}', "");
Error('\p{	In-cjk_Strokes:=}');
Error('\P{	In-cjk_Strokes:=}');
Expect(1, 12783, '\p{incjkstrokes}', "");
Expect(0, 12783, '\p{^incjkstrokes}', "");
Expect(0, 12783, '\P{incjkstrokes}', "");
Expect(1, 12783, '\P{^incjkstrokes}', "");
Expect(0, 12735, '\p{incjkstrokes}', "");
Expect(1, 12735, '\p{^incjkstrokes}', "");
Expect(1, 12735, '\P{incjkstrokes}', "");
Expect(0, 12735, '\P{^incjkstrokes}', "");
Expect(1, 12783, '\p{	 In CJK_STROKES}', "");
Expect(0, 12783, '\p{^	 In CJK_STROKES}', "");
Expect(0, 12783, '\P{	 In CJK_STROKES}', "");
Expect(1, 12783, '\P{^	 In CJK_STROKES}', "");
Expect(0, 12735, '\p{	 In CJK_STROKES}', "");
Expect(1, 12735, '\p{^	 In CJK_STROKES}', "");
Expect(1, 12735, '\P{	 In CJK_STROKES}', "");
Expect(0, 12735, '\P{^	 In CJK_STROKES}', "");
Error('\p{:= _In_Mandaic}');
Error('\P{:= _In_Mandaic}');
Expect(1, 2143, '\p{inmandaic}', "");
Expect(0, 2143, '\p{^inmandaic}', "");
Expect(0, 2143, '\P{inmandaic}', "");
Expect(1, 2143, '\P{^inmandaic}', "");
Expect(0, 2111, '\p{inmandaic}', "");
Expect(1, 2111, '\p{^inmandaic}', "");
Expect(1, 2111, '\P{inmandaic}', "");
Expect(0, 2111, '\P{^inmandaic}', "");
Expect(1, 2143, '\p{-IN mandaic}', "");
Expect(0, 2143, '\p{^-IN mandaic}', "");
Expect(0, 2143, '\P{-IN mandaic}', "");
Expect(1, 2143, '\P{^-IN mandaic}', "");
Expect(0, 2111, '\p{-IN mandaic}', "");
Expect(1, 2111, '\p{^-IN mandaic}', "");
Expect(1, 2111, '\P{-IN mandaic}', "");
Expect(0, 2111, '\P{^-IN mandaic}', "");
Error('\p{-/a/Sinhala}');
Error('\P{-/a/Sinhala}');
Expect(1, 3459, '\p{sinhala}', "");
Expect(0, 3459, '\p{^sinhala}', "");
Expect(0, 3459, '\P{sinhala}', "");
Expect(1, 3459, '\P{^sinhala}', "");
Expect(0, 3457, '\p{sinhala}', "");
Expect(1, 3457, '\p{^sinhala}', "");
Expect(1, 3457, '\P{sinhala}', "");
Expect(0, 3457, '\P{^sinhala}', "");
Expect(1, 3459, '\p{ -Sinhala}', "");
Expect(0, 3459, '\p{^ -Sinhala}', "");
Expect(0, 3459, '\P{ -Sinhala}', "");
Expect(1, 3459, '\P{^ -Sinhala}', "");
Expect(0, 3457, '\p{ -Sinhala}', "");
Expect(1, 3457, '\p{^ -Sinhala}', "");
Expect(1, 3457, '\P{ -Sinhala}', "");
Expect(0, 3457, '\P{^ -Sinhala}', "");
Error('\p{:=_Is_sinhala}');
Error('\P{:=_Is_sinhala}');
Expect(1, 3459, '\p{issinhala}', "");
Expect(0, 3459, '\p{^issinhala}', "");
Expect(0, 3459, '\P{issinhala}', "");
Expect(1, 3459, '\P{^issinhala}', "");
Expect(0, 3457, '\p{issinhala}', "");
Expect(1, 3457, '\p{^issinhala}', "");
Expect(1, 3457, '\P{issinhala}', "");
Expect(0, 3457, '\P{^issinhala}', "");
Expect(1, 3459, '\p{  IsSinhala}', "");
Expect(0, 3459, '\p{^  IsSinhala}', "");
Expect(0, 3459, '\P{  IsSinhala}', "");
Expect(1, 3459, '\P{^  IsSinhala}', "");
Expect(0, 3457, '\p{  IsSinhala}', "");
Expect(1, 3457, '\p{^  IsSinhala}', "");
Expect(1, 3457, '\P{  IsSinhala}', "");
Expect(0, 3457, '\P{^  IsSinhala}', "");
Error('\p{ :=SINH}');
Error('\P{ :=SINH}');
Expect(1, 3459, '\p{sinh}', "");
Expect(0, 3459, '\p{^sinh}', "");
Expect(0, 3459, '\P{sinh}', "");
Expect(1, 3459, '\P{^sinh}', "");
Expect(0, 3457, '\p{sinh}', "");
Expect(1, 3457, '\p{^sinh}', "");
Expect(1, 3457, '\P{sinh}', "");
Expect(0, 3457, '\P{^sinh}', "");
Expect(1, 3459, '\p{ 	Sinh}', "");
Expect(0, 3459, '\p{^ 	Sinh}', "");
Expect(0, 3459, '\P{ 	Sinh}', "");
Expect(1, 3459, '\P{^ 	Sinh}', "");
Expect(0, 3457, '\p{ 	Sinh}', "");
Expect(1, 3457, '\p{^ 	Sinh}', "");
Expect(1, 3457, '\P{ 	Sinh}', "");
Expect(0, 3457, '\P{^ 	Sinh}', "");
Error('\p{ :=issinh}');
Error('\P{ :=issinh}');
Expect(1, 3459, '\p{issinh}', "");
Expect(0, 3459, '\p{^issinh}', "");
Expect(0, 3459, '\P{issinh}', "");
Expect(1, 3459, '\P{^issinh}', "");
Expect(0, 3457, '\p{issinh}', "");
Expect(1, 3457, '\p{^issinh}', "");
Expect(1, 3457, '\P{issinh}', "");
Expect(0, 3457, '\P{^issinh}', "");
Expect(1, 3459, '\p{  Is	Sinh}', "");
Expect(0, 3459, '\p{^  Is	Sinh}', "");
Expect(0, 3459, '\P{  Is	Sinh}', "");
Expect(1, 3459, '\P{^  Is	Sinh}', "");
Expect(0, 3457, '\p{  Is	Sinh}', "");
Expect(1, 3457, '\p{^  Is	Sinh}', "");
Expect(1, 3457, '\P{  Is	Sinh}', "");
Expect(0, 3457, '\P{^  Is	Sinh}', "");
Error('\p{PosixXDigit/a/}');
Error('\P{PosixXDigit/a/}');
Expect(1, 57, '\p{posixxdigit}', "");
Expect(0, 57, '\p{^posixxdigit}', "");
Expect(0, 57, '\P{posixxdigit}', "");
Expect(1, 57, '\P{^posixxdigit}', "");
Expect(0, 47, '\p{posixxdigit}', "");
Expect(1, 47, '\p{^posixxdigit}', "");
Expect(1, 47, '\P{posixxdigit}', "");
Expect(0, 47, '\P{^posixxdigit}', "");
Expect(1, 57, '\p{	posixxdigit}', "");
Expect(0, 57, '\p{^	posixxdigit}', "");
Expect(0, 57, '\P{	posixxdigit}', "");
Expect(1, 57, '\P{^	posixxdigit}', "");
Expect(0, 47, '\p{	posixxdigit}', "");
Expect(1, 47, '\p{^	posixxdigit}', "");
Expect(1, 47, '\P{	posixxdigit}', "");
Expect(0, 47, '\P{^	posixxdigit}', "");
Error('\p{	-IS-PosixXDigit:=}');
Error('\P{	-IS-PosixXDigit:=}');
Expect(1, 57, '\p{isposixxdigit}', "");
Expect(0, 57, '\p{^isposixxdigit}', "");
Expect(0, 57, '\P{isposixxdigit}', "");
Expect(1, 57, '\P{^isposixxdigit}', "");
Expect(0, 47, '\p{isposixxdigit}', "");
Expect(1, 47, '\p{^isposixxdigit}', "");
Expect(1, 47, '\P{isposixxdigit}', "");
Expect(0, 47, '\P{^isposixxdigit}', "");
Expect(1, 57, '\p{-Is	posixxdigit}', "");
Expect(0, 57, '\p{^-Is	posixxdigit}', "");
Expect(0, 57, '\P{-Is	posixxdigit}', "");
Expect(1, 57, '\P{^-Is	posixxdigit}', "");
Expect(0, 47, '\p{-Is	posixxdigit}', "");
Expect(1, 47, '\p{^-Is	posixxdigit}', "");
Expect(1, 47, '\P{-Is	posixxdigit}', "");
Expect(0, 47, '\P{^-Is	posixxdigit}', "");
Error('\p{		UGARITIC:=}');
Error('\P{		UGARITIC:=}');
Expect(1, 66461, '\p{ugaritic}', "");
Expect(0, 66461, '\p{^ugaritic}', "");
Expect(0, 66461, '\P{ugaritic}', "");
Expect(1, 66461, '\P{^ugaritic}', "");
Expect(0, 66431, '\p{ugaritic}', "");
Expect(1, 66431, '\p{^ugaritic}', "");
Expect(1, 66431, '\P{ugaritic}', "");
Expect(0, 66431, '\P{^ugaritic}', "");
Expect(1, 66461, '\p{	_UGARITIC}', "");
Expect(0, 66461, '\p{^	_UGARITIC}', "");
Expect(0, 66461, '\P{	_UGARITIC}', "");
Expect(1, 66461, '\P{^	_UGARITIC}', "");
Expect(0, 66431, '\p{	_UGARITIC}', "");
Expect(1, 66431, '\p{^	_UGARITIC}', "");
Expect(1, 66431, '\P{	_UGARITIC}', "");
Expect(0, 66431, '\P{^	_UGARITIC}', "");
Error('\p{_:=is	Ugaritic}');
Error('\P{_:=is	Ugaritic}');
Expect(1, 66461, '\p{isugaritic}', "");
Expect(0, 66461, '\p{^isugaritic}', "");
Expect(0, 66461, '\P{isugaritic}', "");
Expect(1, 66461, '\P{^isugaritic}', "");
Expect(0, 66431, '\p{isugaritic}', "");
Expect(1, 66431, '\p{^isugaritic}', "");
Expect(1, 66431, '\P{isugaritic}', "");
Expect(0, 66431, '\P{^isugaritic}', "");
Expect(1, 66461, '\p{	 Is	ugaritic}', "");
Expect(0, 66461, '\p{^	 Is	ugaritic}', "");
Expect(0, 66461, '\P{	 Is	ugaritic}', "");
Expect(1, 66461, '\P{^	 Is	ugaritic}', "");
Expect(0, 66431, '\p{	 Is	ugaritic}', "");
Expect(1, 66431, '\p{^	 Is	ugaritic}', "");
Expect(1, 66431, '\P{	 Is	ugaritic}', "");
Expect(0, 66431, '\P{^	 Is	ugaritic}', "");
Error('\p{  Ugar:=}');
Error('\P{  Ugar:=}');
Expect(1, 66461, '\p{ugar}', "");
Expect(0, 66461, '\p{^ugar}', "");
Expect(0, 66461, '\P{ugar}', "");
Expect(1, 66461, '\P{^ugar}', "");
Expect(0, 66431, '\p{ugar}', "");
Expect(1, 66431, '\p{^ugar}', "");
Expect(1, 66431, '\P{ugar}', "");
Expect(0, 66431, '\P{^ugar}', "");
Expect(1, 66461, '\p{- Ugar}', "");
Expect(0, 66461, '\p{^- Ugar}', "");
Expect(0, 66461, '\P{- Ugar}', "");
Expect(1, 66461, '\P{^- Ugar}', "");
Expect(0, 66431, '\p{- Ugar}', "");
Expect(1, 66431, '\p{^- Ugar}', "");
Expect(1, 66431, '\P{- Ugar}', "");
Expect(0, 66431, '\P{^- Ugar}', "");
Error('\p{  Is_ugar/a/}');
Error('\P{  Is_ugar/a/}');
Expect(1, 66461, '\p{isugar}', "");
Expect(0, 66461, '\p{^isugar}', "");
Expect(0, 66461, '\P{isugar}', "");
Expect(1, 66461, '\P{^isugar}', "");
Expect(0, 66431, '\p{isugar}', "");
Expect(1, 66431, '\p{^isugar}', "");
Expect(1, 66431, '\P{isugar}', "");
Expect(0, 66431, '\P{^isugar}', "");
Expect(1, 66461, '\p{ Is-UGAR}', "");
Expect(0, 66461, '\p{^ Is-UGAR}', "");
Expect(0, 66461, '\P{ Is-UGAR}', "");
Expect(1, 66461, '\P{^ Is-UGAR}', "");
Expect(0, 66431, '\p{ Is-UGAR}', "");
Expect(1, 66431, '\p{^ Is-UGAR}', "");
Expect(1, 66431, '\P{ Is-UGAR}', "");
Expect(0, 66431, '\P{^ Is-UGAR}', "");
Error('\p{:=	 XPERLSPACE}');
Error('\P{:=	 XPERLSPACE}');
Expect(1, 10, '\p{xperlspace}', "");
Expect(0, 10, '\p{^xperlspace}', "");
Expect(0, 10, '\P{xperlspace}', "");
Expect(1, 10, '\P{^xperlspace}', "");
Expect(0, 8, '\p{xperlspace}', "");
Expect(1, 8, '\p{^xperlspace}', "");
Expect(1, 8, '\P{xperlspace}', "");
Expect(0, 8, '\P{^xperlspace}', "");
Expect(1, 10, '\p{_XPERLSPACE}', "");
Expect(0, 10, '\p{^_XPERLSPACE}', "");
Expect(0, 10, '\P{_XPERLSPACE}', "");
Expect(1, 10, '\P{^_XPERLSPACE}', "");
Expect(0, 8, '\p{_XPERLSPACE}', "");
Expect(1, 8, '\p{^_XPERLSPACE}', "");
Expect(1, 8, '\P{_XPERLSPACE}', "");
Expect(0, 8, '\P{^_XPERLSPACE}', "");
Error('\p{:= 	spaceperl}');
Error('\P{:= 	spaceperl}');
Expect(1, 10, '\p{spaceperl}', "");
Expect(0, 10, '\p{^spaceperl}', "");
Expect(0, 10, '\P{spaceperl}', "");
Expect(1, 10, '\P{^spaceperl}', "");
Expect(0, 8, '\p{spaceperl}', "");
Expect(1, 8, '\p{^spaceperl}', "");
Expect(1, 8, '\P{spaceperl}', "");
Expect(0, 8, '\P{^spaceperl}', "");
Expect(1, 10, '\p{-spaceperl}', "");
Expect(0, 10, '\p{^-spaceperl}', "");
Expect(0, 10, '\P{-spaceperl}', "");
Expect(1, 10, '\P{^-spaceperl}', "");
Expect(0, 8, '\p{-spaceperl}', "");
Expect(1, 8, '\p{^-spaceperl}', "");
Expect(1, 8, '\P{-spaceperl}', "");
Expect(0, 8, '\P{^-spaceperl}', "");
Error('\p{/a/- ISXPERLSPACE}');
Error('\P{/a/- ISXPERLSPACE}');
Expect(1, 10, '\p{isxperlspace}', "");
Expect(0, 10, '\p{^isxperlspace}', "");
Expect(0, 10, '\P{isxperlspace}', "");
Expect(1, 10, '\P{^isxperlspace}', "");
Expect(0, 8, '\p{isxperlspace}', "");
Expect(1, 8, '\p{^isxperlspace}', "");
Expect(1, 8, '\P{isxperlspace}', "");
Expect(0, 8, '\P{^isxperlspace}', "");
Expect(1, 10, '\p{-Is-XPERLSPACE}', "");
Expect(0, 10, '\p{^-Is-XPERLSPACE}', "");
Expect(0, 10, '\P{-Is-XPERLSPACE}', "");
Expect(1, 10, '\P{^-Is-XPERLSPACE}', "");
Expect(0, 8, '\p{-Is-XPERLSPACE}', "");
Expect(1, 8, '\p{^-Is-XPERLSPACE}', "");
Expect(1, 8, '\P{-Is-XPERLSPACE}', "");
Expect(0, 8, '\P{^-Is-XPERLSPACE}', "");
Error('\p{-_Is/a/SpacePerl}');
Error('\P{-_Is/a/SpacePerl}');
Expect(1, 10, '\p{isspaceperl}', "");
Expect(0, 10, '\p{^isspaceperl}', "");
Expect(0, 10, '\P{isspaceperl}', "");
Expect(1, 10, '\P{^isspaceperl}', "");
Expect(0, 8, '\p{isspaceperl}', "");
Expect(1, 8, '\p{^isspaceperl}', "");
Expect(1, 8, '\P{isspaceperl}', "");
Expect(0, 8, '\P{^isspaceperl}', "");
Expect(1, 10, '\p{_	Is_spaceperl}', "");
Expect(0, 10, '\p{^_	Is_spaceperl}', "");
Expect(0, 10, '\P{_	Is_spaceperl}', "");
Expect(1, 10, '\P{^_	Is_spaceperl}', "");
Expect(0, 8, '\p{_	Is_spaceperl}', "");
Expect(1, 8, '\p{^_	Is_spaceperl}', "");
Expect(1, 8, '\P{_	Is_spaceperl}', "");
Expect(0, 8, '\P{^_	Is_spaceperl}', "");
Error('\p{		ogham/a/}');
Error('\P{		ogham/a/}');
Expect(1, 5788, '\p{ogham}', "");
Expect(0, 5788, '\p{^ogham}', "");
Expect(0, 5788, '\P{ogham}', "");
Expect(1, 5788, '\P{^ogham}', "");
Expect(0, 5759, '\p{ogham}', "");
Expect(1, 5759, '\p{^ogham}', "");
Expect(1, 5759, '\P{ogham}', "");
Expect(0, 5759, '\P{^ogham}', "");
Expect(1, 5788, '\p{	-Ogham}', "");
Expect(0, 5788, '\p{^	-Ogham}', "");
Expect(0, 5788, '\P{	-Ogham}', "");
Expect(1, 5788, '\P{^	-Ogham}', "");
Expect(0, 5759, '\p{	-Ogham}', "");
Expect(1, 5759, '\p{^	-Ogham}', "");
Expect(1, 5759, '\P{	-Ogham}', "");
Expect(0, 5759, '\P{^	-Ogham}', "");
Error('\p{_ IS/a/ogham}');
Error('\P{_ IS/a/ogham}');
Expect(1, 5788, '\p{isogham}', "");
Expect(0, 5788, '\p{^isogham}', "");
Expect(0, 5788, '\P{isogham}', "");
Expect(1, 5788, '\P{^isogham}', "");
Expect(0, 5759, '\p{isogham}', "");
Expect(1, 5759, '\p{^isogham}', "");
Expect(1, 5759, '\P{isogham}', "");
Expect(0, 5759, '\P{^isogham}', "");
Expect(1, 5788, '\p{-	Is_ogham}', "");
Expect(0, 5788, '\p{^-	Is_ogham}', "");
Expect(0, 5788, '\P{-	Is_ogham}', "");
Expect(1, 5788, '\P{^-	Is_ogham}', "");
Expect(0, 5759, '\p{-	Is_ogham}', "");
Expect(1, 5759, '\p{^-	Is_ogham}', "");
Expect(1, 5759, '\P{-	Is_ogham}', "");
Expect(0, 5759, '\P{^-	Is_ogham}', "");
Error('\p{ -OGAM/a/}');
Error('\P{ -OGAM/a/}');
Expect(1, 5788, '\p{ogam}', "");
Expect(0, 5788, '\p{^ogam}', "");
Expect(0, 5788, '\P{ogam}', "");
Expect(1, 5788, '\P{^ogam}', "");
Expect(0, 5759, '\p{ogam}', "");
Expect(1, 5759, '\p{^ogam}', "");
Expect(1, 5759, '\P{ogam}', "");
Expect(0, 5759, '\P{^ogam}', "");
Expect(1, 5788, '\p{	 Ogam}', "");
Expect(0, 5788, '\p{^	 Ogam}', "");
Expect(0, 5788, '\P{	 Ogam}', "");
Expect(1, 5788, '\P{^	 Ogam}', "");
Expect(0, 5759, '\p{	 Ogam}', "");
Expect(1, 5759, '\p{^	 Ogam}', "");
Expect(1, 5759, '\P{	 Ogam}', "");
Expect(0, 5759, '\P{^	 Ogam}', "");
Error('\p{:=--ISogam}');
Error('\P{:=--ISogam}');
Expect(1, 5788, '\p{isogam}', "");
Expect(0, 5788, '\p{^isogam}', "");
Expect(0, 5788, '\P{isogam}', "");
Expect(1, 5788, '\P{^isogam}', "");
Expect(0, 5759, '\p{isogam}', "");
Expect(1, 5759, '\p{^isogam}', "");
Expect(1, 5759, '\P{isogam}', "");
Expect(0, 5759, '\P{^isogam}', "");
Expect(1, 5788, '\p{	Is_ogam}', "");
Expect(0, 5788, '\p{^	Is_ogam}', "");
Expect(0, 5788, '\P{	Is_ogam}', "");
Expect(1, 5788, '\P{^	Is_ogam}', "");
Expect(0, 5759, '\p{	Is_ogam}', "");
Expect(1, 5759, '\p{^	Is_ogam}', "");
Expect(1, 5759, '\P{	Is_ogam}', "");
Expect(0, 5759, '\P{^	Is_ogam}', "");
Error('\p{-_Bengali/a/}');
Error('\P{-_Bengali/a/}');
Expect(1, 2435, '\p{bengali}', "");
Expect(0, 2435, '\p{^bengali}', "");
Expect(0, 2435, '\P{bengali}', "");
Expect(1, 2435, '\P{^bengali}', "");
Expect(0, 2432, '\p{bengali}', "");
Expect(1, 2432, '\p{^bengali}', "");
Expect(1, 2432, '\P{bengali}', "");
Expect(0, 2432, '\P{^bengali}', "");
Expect(1, 2435, '\p{-_BENGALI}', "");
Expect(0, 2435, '\p{^-_BENGALI}', "");
Expect(0, 2435, '\P{-_BENGALI}', "");
Expect(1, 2435, '\P{^-_BENGALI}', "");
Expect(0, 2432, '\p{-_BENGALI}', "");
Expect(1, 2432, '\p{^-_BENGALI}', "");
Expect(1, 2432, '\P{-_BENGALI}', "");
Expect(0, 2432, '\P{^-_BENGALI}', "");
Error('\p{:=_-Is	BENGALI}');
Error('\P{:=_-Is	BENGALI}');
Expect(1, 2435, '\p{isbengali}', "");
Expect(0, 2435, '\p{^isbengali}', "");
Expect(0, 2435, '\P{isbengali}', "");
Expect(1, 2435, '\P{^isbengali}', "");
Expect(0, 2432, '\p{isbengali}', "");
Expect(1, 2432, '\p{^isbengali}', "");
Expect(1, 2432, '\P{isbengali}', "");
Expect(0, 2432, '\P{^isbengali}', "");
Expect(1, 2435, '\p{ is-Bengali}', "");
Expect(0, 2435, '\p{^ is-Bengali}', "");
Expect(0, 2435, '\P{ is-Bengali}', "");
Expect(1, 2435, '\P{^ is-Bengali}', "");
Expect(0, 2432, '\p{ is-Bengali}', "");
Expect(1, 2432, '\p{^ is-Bengali}', "");
Expect(1, 2432, '\P{ is-Bengali}', "");
Expect(0, 2432, '\P{^ is-Bengali}', "");
Error('\p{:=--Beng}');
Error('\P{:=--Beng}');
Expect(1, 2435, '\p{beng}', "");
Expect(0, 2435, '\p{^beng}', "");
Expect(0, 2435, '\P{beng}', "");
Expect(1, 2435, '\P{^beng}', "");
Expect(0, 2432, '\p{beng}', "");
Expect(1, 2432, '\p{^beng}', "");
Expect(1, 2432, '\P{beng}', "");
Expect(0, 2432, '\P{^beng}', "");
Expect(1, 2435, '\p{_-BENG}', "");
Expect(0, 2435, '\p{^_-BENG}', "");
Expect(0, 2435, '\P{_-BENG}', "");
Expect(1, 2435, '\P{^_-BENG}', "");
Expect(0, 2432, '\p{_-BENG}', "");
Expect(1, 2432, '\p{^_-BENG}', "");
Expect(1, 2432, '\P{_-BENG}', "");
Expect(0, 2432, '\P{^_-BENG}', "");
Error('\p{-/a/IsBeng}');
Error('\P{-/a/IsBeng}');
Expect(1, 2435, '\p{isbeng}', "");
Expect(0, 2435, '\p{^isbeng}', "");
Expect(0, 2435, '\P{isbeng}', "");
Expect(1, 2435, '\P{^isbeng}', "");
Expect(0, 2432, '\p{isbeng}', "");
Expect(1, 2432, '\p{^isbeng}', "");
Expect(1, 2432, '\P{isbeng}', "");
Expect(0, 2432, '\P{^isbeng}', "");
Expect(1, 2435, '\p{_Is_Beng}', "");
Expect(0, 2435, '\p{^_Is_Beng}', "");
Expect(0, 2435, '\P{_Is_Beng}', "");
Expect(1, 2435, '\P{^_Is_Beng}', "");
Expect(0, 2432, '\p{_Is_Beng}', "");
Expect(1, 2432, '\p{^_Is_Beng}', "");
Expect(1, 2432, '\P{_Is_Beng}', "");
Expect(0, 2432, '\P{^_Is_Beng}', "");
Error('\p{ /a/Diacritic}');
Error('\P{ /a/Diacritic}');
Expect(1, 94, '\p{diacritic}', "");
Expect(0, 94, '\p{^diacritic}', "");
Expect(0, 94, '\P{diacritic}', "");
Expect(1, 94, '\P{^diacritic}', "");
Expect(0, 93, '\p{diacritic}', "");
Expect(1, 93, '\p{^diacritic}', "");
Expect(1, 93, '\P{diacritic}', "");
Expect(0, 93, '\P{^diacritic}', "");
Expect(1, 94, '\p{ 	diacritic}', "");
Expect(0, 94, '\p{^ 	diacritic}', "");
Expect(0, 94, '\P{ 	diacritic}', "");
Expect(1, 94, '\P{^ 	diacritic}', "");
Expect(0, 93, '\p{ 	diacritic}', "");
Expect(1, 93, '\p{^ 	diacritic}', "");
Expect(1, 93, '\P{ 	diacritic}', "");
Expect(0, 93, '\P{^ 	diacritic}', "");
Error('\p{_/a/IsDIACRITIC}');
Error('\P{_/a/IsDIACRITIC}');
Expect(1, 94, '\p{isdiacritic}', "");
Expect(0, 94, '\p{^isdiacritic}', "");
Expect(0, 94, '\P{isdiacritic}', "");
Expect(1, 94, '\P{^isdiacritic}', "");
Expect(0, 93, '\p{isdiacritic}', "");
Expect(1, 93, '\p{^isdiacritic}', "");
Expect(1, 93, '\P{isdiacritic}', "");
Expect(0, 93, '\P{^isdiacritic}', "");
Expect(1, 94, '\p{-_is diacritic}', "");
Expect(0, 94, '\p{^-_is diacritic}', "");
Expect(0, 94, '\P{-_is diacritic}', "");
Expect(1, 94, '\P{^-_is diacritic}', "");
Expect(0, 93, '\p{-_is diacritic}', "");
Expect(1, 93, '\p{^-_is diacritic}', "");
Expect(1, 93, '\P{-_is diacritic}', "");
Expect(0, 93, '\P{^-_is diacritic}', "");
Error('\p{/a/DIA}');
Error('\P{/a/DIA}');
Expect(1, 94, '\p{dia}', "");
Expect(0, 94, '\p{^dia}', "");
Expect(0, 94, '\P{dia}', "");
Expect(1, 94, '\P{^dia}', "");
Expect(0, 93, '\p{dia}', "");
Expect(1, 93, '\p{^dia}', "");
Expect(1, 93, '\P{dia}', "");
Expect(0, 93, '\P{^dia}', "");
Expect(1, 94, '\p{_dia}', "");
Expect(0, 94, '\p{^_dia}', "");
Expect(0, 94, '\P{_dia}', "");
Expect(1, 94, '\P{^_dia}', "");
Expect(0, 93, '\p{_dia}', "");
Expect(1, 93, '\p{^_dia}', "");
Expect(1, 93, '\P{_dia}', "");
Expect(0, 93, '\P{^_dia}', "");
Error('\p{	Is/a/Dia}');
Error('\P{	Is/a/Dia}');
Expect(1, 94, '\p{isdia}', "");
Expect(0, 94, '\p{^isdia}', "");
Expect(0, 94, '\P{isdia}', "");
Expect(1, 94, '\P{^isdia}', "");
Expect(0, 93, '\p{isdia}', "");
Expect(1, 93, '\p{^isdia}', "");
Expect(1, 93, '\P{isdia}', "");
Expect(0, 93, '\P{^isdia}', "");
Expect(1, 94, '\p{	Is	DIA}', "");
Expect(0, 94, '\p{^	Is	DIA}', "");
Expect(0, 94, '\P{	Is	DIA}', "");
Expect(1, 94, '\P{^	Is	DIA}', "");
Expect(0, 93, '\p{	Is	DIA}', "");
Expect(1, 93, '\p{^	Is	DIA}', "");
Expect(1, 93, '\P{	Is	DIA}', "");
Expect(0, 93, '\P{^	Is	DIA}', "");
Error('\p{LOWERCASE_Letter:=}');
Error('\P{LOWERCASE_Letter:=}');
Expect(1, 122, '\p{lowercaseletter}', "");
Expect(0, 122, '\p{^lowercaseletter}', "");
Expect(0, 122, '\P{lowercaseletter}', "");
Expect(1, 122, '\P{^lowercaseletter}', "");
Expect(0, 96, '\p{lowercaseletter}', "");
Expect(1, 96, '\p{^lowercaseletter}', "");
Expect(1, 96, '\P{lowercaseletter}', "");
Expect(0, 96, '\P{^lowercaseletter}', "");
Expect(1, 122, '\p{__lowercase	Letter}', "");
Expect(0, 122, '\p{^__lowercase	Letter}', "");
Expect(0, 122, '\P{__lowercase	Letter}', "");
Expect(1, 122, '\P{^__lowercase	Letter}', "");
Expect(0, 96, '\p{__lowercase	Letter}', "");
Expect(1, 96, '\p{^__lowercase	Letter}', "");
Expect(1, 96, '\P{__lowercase	Letter}', "");
Expect(0, 96, '\P{^__lowercase	Letter}', "");
Error('\p{		Is/a/Lowercase-LETTER}');
Error('\P{		Is/a/Lowercase-LETTER}');
Expect(1, 122, '\p{islowercaseletter}', "");
Expect(0, 122, '\p{^islowercaseletter}', "");
Expect(0, 122, '\P{islowercaseletter}', "");
Expect(1, 122, '\P{^islowercaseletter}', "");
Expect(0, 96, '\p{islowercaseletter}', "");
Expect(1, 96, '\p{^islowercaseletter}', "");
Expect(1, 96, '\P{islowercaseletter}', "");
Expect(0, 96, '\P{^islowercaseletter}', "");
Expect(1, 122, '\p{_-Is Lowercase-Letter}', "");
Expect(0, 122, '\p{^_-Is Lowercase-Letter}', "");
Expect(0, 122, '\P{_-Is Lowercase-Letter}', "");
Expect(1, 122, '\P{^_-Is Lowercase-Letter}', "");
Expect(0, 96, '\p{_-Is Lowercase-Letter}', "");
Expect(1, 96, '\p{^_-Is Lowercase-Letter}', "");
Expect(1, 96, '\P{_-Is Lowercase-Letter}', "");
Expect(0, 96, '\P{^_-Is Lowercase-Letter}', "");
Error('\p{	:=Ll}');
Error('\P{	:=Ll}');
Expect(1, 122, '\p{ll}', "");
Expect(0, 122, '\p{^ll}', "");
Expect(0, 122, '\P{ll}', "");
Expect(1, 122, '\P{^ll}', "");
Expect(0, 96, '\p{ll}', "");
Expect(1, 96, '\p{^ll}', "");
Expect(1, 96, '\P{ll}', "");
Expect(0, 96, '\P{^ll}', "");
Expect(1, 122, '\p{ -Ll}', "");
Expect(0, 122, '\p{^ -Ll}', "");
Expect(0, 122, '\P{ -Ll}', "");
Expect(1, 122, '\P{^ -Ll}', "");
Expect(0, 96, '\p{ -Ll}', "");
Expect(1, 96, '\p{^ -Ll}', "");
Expect(1, 96, '\P{ -Ll}', "");
Expect(0, 96, '\P{^ -Ll}', "");
Error('\p{-/a/Is LL}');
Error('\P{-/a/Is LL}');
Expect(1, 122, '\p{isll}', "");
Expect(0, 122, '\p{^isll}', "");
Expect(0, 122, '\P{isll}', "");
Expect(1, 122, '\P{^isll}', "");
Expect(0, 96, '\p{isll}', "");
Expect(1, 96, '\p{^isll}', "");
Expect(1, 96, '\P{isll}', "");
Expect(0, 96, '\P{^isll}', "");
Expect(1, 122, '\p{_ is Ll}', "");
Expect(0, 122, '\p{^_ is Ll}', "");
Expect(0, 122, '\P{_ is Ll}', "");
Expect(1, 122, '\P{^_ is Ll}', "");
Expect(0, 96, '\p{_ is Ll}', "");
Expect(1, 96, '\p{^_ is Ll}', "");
Expect(1, 96, '\P{_ is Ll}', "");
Expect(0, 96, '\P{^_ is Ll}', "");
Error('\p{_ hangul/a/compatibility JAMO}');
Error('\P{_ hangul/a/compatibility JAMO}');
Expect(1, 12687, '\p{hangulcompatibilityjamo}', "");
Expect(0, 12687, '\p{^hangulcompatibilityjamo}', "");
Expect(0, 12687, '\P{hangulcompatibilityjamo}', "");
Expect(1, 12687, '\P{^hangulcompatibilityjamo}', "");
Expect(0, 12591, '\p{hangulcompatibilityjamo}', "");
Expect(1, 12591, '\p{^hangulcompatibilityjamo}', "");
Expect(1, 12591, '\P{hangulcompatibilityjamo}', "");
Expect(0, 12591, '\P{^hangulcompatibilityjamo}', "");
Expect(1, 12687, '\p{  HANGUL	Compatibility_JAMO}', "");
Expect(0, 12687, '\p{^  HANGUL	Compatibility_JAMO}', "");
Expect(0, 12687, '\P{  HANGUL	Compatibility_JAMO}', "");
Expect(1, 12687, '\P{^  HANGUL	Compatibility_JAMO}', "");
Expect(0, 12591, '\p{  HANGUL	Compatibility_JAMO}', "");
Expect(1, 12591, '\p{^  HANGUL	Compatibility_JAMO}', "");
Expect(1, 12591, '\P{  HANGUL	Compatibility_JAMO}', "");
Expect(0, 12591, '\P{^  HANGUL	Compatibility_JAMO}', "");
Error('\p{	Is/a/Hangul COMPATIBILITY_JAMO}');
Error('\P{	Is/a/Hangul COMPATIBILITY_JAMO}');
Expect(1, 12687, '\p{ishangulcompatibilityjamo}', "");
Expect(0, 12687, '\p{^ishangulcompatibilityjamo}', "");
Expect(0, 12687, '\P{ishangulcompatibilityjamo}', "");
Expect(1, 12687, '\P{^ishangulcompatibilityjamo}', "");
Expect(0, 12591, '\p{ishangulcompatibilityjamo}', "");
Expect(1, 12591, '\p{^ishangulcompatibilityjamo}', "");
Expect(1, 12591, '\P{ishangulcompatibilityjamo}', "");
Expect(0, 12591, '\P{^ishangulcompatibilityjamo}', "");
Expect(1, 12687, '\p{  is-hangul COMPATIBILITY-Jamo}', "");
Expect(0, 12687, '\p{^  is-hangul COMPATIBILITY-Jamo}', "");
Expect(0, 12687, '\P{  is-hangul COMPATIBILITY-Jamo}', "");
Expect(1, 12687, '\P{^  is-hangul COMPATIBILITY-Jamo}', "");
Expect(0, 12591, '\p{  is-hangul COMPATIBILITY-Jamo}', "");
Expect(1, 12591, '\p{^  is-hangul COMPATIBILITY-Jamo}', "");
Expect(1, 12591, '\P{  is-hangul COMPATIBILITY-Jamo}', "");
Expect(0, 12591, '\P{^  is-hangul COMPATIBILITY-Jamo}', "");
Error('\p{_/a/INhangulCompatibility Jamo}');
Error('\P{_/a/INhangulCompatibility Jamo}');
Expect(1, 12687, '\p{inhangulcompatibilityjamo}', "");
Expect(0, 12687, '\p{^inhangulcompatibilityjamo}', "");
Expect(0, 12687, '\P{inhangulcompatibilityjamo}', "");
Expect(1, 12687, '\P{^inhangulcompatibilityjamo}', "");
Expect(0, 12591, '\p{inhangulcompatibilityjamo}', "");
Expect(1, 12591, '\p{^inhangulcompatibilityjamo}', "");
Expect(1, 12591, '\P{inhangulcompatibilityjamo}', "");
Expect(0, 12591, '\P{^inhangulcompatibilityjamo}', "");
Expect(1, 12687, '\p{_inHANGULCOMPATIBILITY-JAMO}', "");
Expect(0, 12687, '\p{^_inHANGULCOMPATIBILITY-JAMO}', "");
Expect(0, 12687, '\P{_inHANGULCOMPATIBILITY-JAMO}', "");
Expect(1, 12687, '\P{^_inHANGULCOMPATIBILITY-JAMO}', "");
Expect(0, 12591, '\p{_inHANGULCOMPATIBILITY-JAMO}', "");
Expect(1, 12591, '\p{^_inHANGULCOMPATIBILITY-JAMO}', "");
Expect(1, 12591, '\P{_inHANGULCOMPATIBILITY-JAMO}', "");
Expect(0, 12591, '\P{^_inHANGULCOMPATIBILITY-JAMO}', "");
Error('\p{-:=musical_Symbols}');
Error('\P{-:=musical_Symbols}');
Expect(1, 119295, '\p{musicalsymbols}', "");
Expect(0, 119295, '\p{^musicalsymbols}', "");
Expect(0, 119295, '\P{musicalsymbols}', "");
Expect(1, 119295, '\P{^musicalsymbols}', "");
Expect(0, 119039, '\p{musicalsymbols}', "");
Expect(1, 119039, '\p{^musicalsymbols}', "");
Expect(1, 119039, '\P{musicalsymbols}', "");
Expect(0, 119039, '\P{^musicalsymbols}', "");
Expect(1, 119295, '\p{ _MUSICAL	Symbols}', "");
Expect(0, 119295, '\p{^ _MUSICAL	Symbols}', "");
Expect(0, 119295, '\P{ _MUSICAL	Symbols}', "");
Expect(1, 119295, '\P{^ _MUSICAL	Symbols}', "");
Expect(0, 119039, '\p{ _MUSICAL	Symbols}', "");
Expect(1, 119039, '\p{^ _MUSICAL	Symbols}', "");
Expect(1, 119039, '\P{ _MUSICAL	Symbols}', "");
Expect(0, 119039, '\P{^ _MUSICAL	Symbols}', "");
Error('\p{_is/a/musical Symbols}');
Error('\P{_is/a/musical Symbols}');
Expect(1, 119295, '\p{ismusicalsymbols}', "");
Expect(0, 119295, '\p{^ismusicalsymbols}', "");
Expect(0, 119295, '\P{ismusicalsymbols}', "");
Expect(1, 119295, '\P{^ismusicalsymbols}', "");
Expect(0, 119039, '\p{ismusicalsymbols}', "");
Expect(1, 119039, '\p{^ismusicalsymbols}', "");
Expect(1, 119039, '\P{ismusicalsymbols}', "");
Expect(0, 119039, '\P{^ismusicalsymbols}', "");
Expect(1, 119295, '\p{-_is_Musical-SYMBOLS}', "");
Expect(0, 119295, '\p{^-_is_Musical-SYMBOLS}', "");
Expect(0, 119295, '\P{-_is_Musical-SYMBOLS}', "");
Expect(1, 119295, '\P{^-_is_Musical-SYMBOLS}', "");
Expect(0, 119039, '\p{-_is_Musical-SYMBOLS}', "");
Expect(1, 119039, '\p{^-_is_Musical-SYMBOLS}', "");
Expect(1, 119039, '\P{-_is_Musical-SYMBOLS}', "");
Expect(0, 119039, '\P{^-_is_Musical-SYMBOLS}', "");
Error('\p{-:=In Musical_Symbols}');
Error('\P{-:=In Musical_Symbols}');
Expect(1, 119295, '\p{inmusicalsymbols}', "");
Expect(0, 119295, '\p{^inmusicalsymbols}', "");
Expect(0, 119295, '\P{inmusicalsymbols}', "");
Expect(1, 119295, '\P{^inmusicalsymbols}', "");
Expect(0, 119039, '\p{inmusicalsymbols}', "");
Expect(1, 119039, '\p{^inmusicalsymbols}', "");
Expect(1, 119039, '\P{inmusicalsymbols}', "");
Expect(0, 119039, '\P{^inmusicalsymbols}', "");
Expect(1, 119295, '\p{	 In Musical_SYMBOLS}', "");
Expect(0, 119295, '\p{^	 In Musical_SYMBOLS}', "");
Expect(0, 119295, '\P{	 In Musical_SYMBOLS}', "");
Expect(1, 119295, '\P{^	 In Musical_SYMBOLS}', "");
Expect(0, 119039, '\p{	 In Musical_SYMBOLS}', "");
Expect(1, 119039, '\p{^	 In Musical_SYMBOLS}', "");
Expect(1, 119039, '\P{	 In Musical_SYMBOLS}', "");
Expect(0, 119039, '\P{^	 In Musical_SYMBOLS}', "");
Error('\p{/a/ _Tags}');
Error('\P{/a/ _Tags}');
Expect(1, 917631, '\p{tags}', "");
Expect(0, 917631, '\p{^tags}', "");
Expect(0, 917631, '\P{tags}', "");
Expect(1, 917631, '\P{^tags}', "");
Expect(0, 1, '\p{tags}', "");
Expect(1, 1, '\p{^tags}', "");
Expect(1, 1, '\P{tags}', "");
Expect(0, 1, '\P{^tags}', "");
Expect(1, 917631, '\p{--tags}', "");
Expect(0, 917631, '\p{^--tags}', "");
Expect(0, 917631, '\P{--tags}', "");
Expect(1, 917631, '\P{^--tags}', "");
Expect(0, 1, '\p{--tags}', "");
Expect(1, 1, '\p{^--tags}', "");
Expect(1, 1, '\P{--tags}', "");
Expect(0, 1, '\P{^--tags}', "");
Error('\p{-:=is	Tags}');
Error('\P{-:=is	Tags}');
Expect(1, 917631, '\p{istags}', "");
Expect(0, 917631, '\p{^istags}', "");
Expect(0, 917631, '\P{istags}', "");
Expect(1, 917631, '\P{^istags}', "");
Expect(0, 1, '\p{istags}', "");
Expect(1, 1, '\p{^istags}', "");
Expect(1, 1, '\P{istags}', "");
Expect(0, 1, '\P{^istags}', "");
Expect(1, 917631, '\p{ -is tags}', "");
Expect(0, 917631, '\p{^ -is tags}', "");
Expect(0, 917631, '\P{ -is tags}', "");
Expect(1, 917631, '\P{^ -is tags}', "");
Expect(0, 1, '\p{ -is tags}', "");
Expect(1, 1, '\p{^ -is tags}', "");
Expect(1, 1, '\P{ -is tags}', "");
Expect(0, 1, '\P{^ -is tags}', "");
Error('\p{/a/ In Tags}');
Error('\P{/a/ In Tags}');
Expect(1, 917631, '\p{intags}', "");
Expect(0, 917631, '\p{^intags}', "");
Expect(0, 917631, '\P{intags}', "");
Expect(1, 917631, '\P{^intags}', "");
Expect(0, 1, '\p{intags}', "");
Expect(1, 1, '\p{^intags}', "");
Expect(1, 1, '\P{intags}', "");
Expect(0, 1, '\P{^intags}', "");
Expect(1, 917631, '\p{-	IN_Tags}', "");
Expect(0, 917631, '\p{^-	IN_Tags}', "");
Expect(0, 917631, '\P{-	IN_Tags}', "");
Expect(1, 917631, '\P{^-	IN_Tags}', "");
Expect(0, 1, '\p{-	IN_Tags}', "");
Expect(1, 1, '\p{^-	IN_Tags}', "");
Expect(1, 1, '\P{-	IN_Tags}', "");
Expect(0, 1, '\P{^-	IN_Tags}', "");
Error('\p{	_SEPARATOR:=}');
Error('\P{	_SEPARATOR:=}');
Expect(1, 32, '\p{separator}', "");
Expect(0, 32, '\p{^separator}', "");
Expect(0, 32, '\P{separator}', "");
Expect(1, 32, '\P{^separator}', "");
Expect(0, 31, '\p{separator}', "");
Expect(1, 31, '\p{^separator}', "");
Expect(1, 31, '\P{separator}', "");
Expect(0, 31, '\P{^separator}', "");
Expect(1, 32, '\p{_Separator}', "");
Expect(0, 32, '\p{^_Separator}', "");
Expect(0, 32, '\P{_Separator}', "");
Expect(1, 32, '\P{^_Separator}', "");
Expect(0, 31, '\p{_Separator}', "");
Expect(1, 31, '\p{^_Separator}', "");
Expect(1, 31, '\P{_Separator}', "");
Expect(0, 31, '\P{^_Separator}', "");
Error('\p{	is/a/Separator}');
Error('\P{	is/a/Separator}');
Expect(1, 32, '\p{isseparator}', "");
Expect(0, 32, '\p{^isseparator}', "");
Expect(0, 32, '\P{isseparator}', "");
Expect(1, 32, '\P{^isseparator}', "");
Expect(0, 31, '\p{isseparator}', "");
Expect(1, 31, '\p{^isseparator}', "");
Expect(1, 31, '\P{isseparator}', "");
Expect(0, 31, '\P{^isseparator}', "");
Expect(1, 32, '\p{IS	Separator}', "");
Expect(0, 32, '\p{^IS	Separator}', "");
Expect(0, 32, '\P{IS	Separator}', "");
Expect(1, 32, '\P{^IS	Separator}', "");
Expect(0, 31, '\p{IS	Separator}', "");
Expect(1, 31, '\p{^IS	Separator}', "");
Expect(1, 31, '\P{IS	Separator}', "");
Expect(0, 31, '\P{^IS	Separator}', "");
Error('\p{- Z:=}');
Error('\P{- Z:=}');
Expect(1, 32, '\p{z}', "");
Expect(0, 32, '\p{^z}', "");
Expect(0, 32, '\P{z}', "");
Expect(1, 32, '\P{^z}', "");
Expect(0, 31, '\p{z}', "");
Expect(1, 31, '\p{^z}', "");
Expect(1, 31, '\P{z}', "");
Expect(0, 31, '\P{^z}', "");
Expect(1, 32, '\p{ _Z}', "");
Expect(0, 32, '\p{^ _Z}', "");
Expect(0, 32, '\P{ _Z}', "");
Expect(1, 32, '\P{^ _Z}', "");
Expect(0, 31, '\p{ _Z}', "");
Expect(1, 31, '\p{^ _Z}', "");
Expect(1, 31, '\P{ _Z}', "");
Expect(0, 31, '\P{^ _Z}', "");
Error('\p{-/a/is	Z}');
Error('\P{-/a/is	Z}');
Expect(1, 32, '\p{isz}', "");
Expect(0, 32, '\p{^isz}', "");
Expect(0, 32, '\P{isz}', "");
Expect(1, 32, '\P{^isz}', "");
Expect(0, 31, '\p{isz}', "");
Expect(1, 31, '\p{^isz}', "");
Expect(1, 31, '\P{isz}', "");
Expect(0, 31, '\P{^isz}', "");
Expect(1, 32, '\p{	 IS-Z}', "");
Expect(0, 32, '\p{^	 IS-Z}', "");
Expect(0, 32, '\P{	 IS-Z}', "");
Expect(1, 32, '\P{^	 IS-Z}', "");
Expect(0, 31, '\p{	 IS-Z}', "");
Expect(1, 31, '\p{^	 IS-Z}', "");
Expect(1, 31, '\P{	 IS-Z}', "");
Expect(0, 31, '\P{^	 IS-Z}', "");
Error('\p{-/a/ancientGreek MusicalNOTATION}');
Error('\P{-/a/ancientGreek MusicalNOTATION}');
Expect(1, 119375, '\p{ancientgreekmusicalnotation}', "");
Expect(0, 119375, '\p{^ancientgreekmusicalnotation}', "");
Expect(0, 119375, '\P{ancientgreekmusicalnotation}', "");
Expect(1, 119375, '\P{^ancientgreekmusicalnotation}', "");
Expect(0, 119295, '\p{ancientgreekmusicalnotation}', "");
Expect(1, 119295, '\p{^ancientgreekmusicalnotation}', "");
Expect(1, 119295, '\P{ancientgreekmusicalnotation}', "");
Expect(0, 119295, '\P{^ancientgreekmusicalnotation}', "");
Expect(1, 119375, '\p{__ancient_Greek-MUSICAL-Notation}', "");
Expect(0, 119375, '\p{^__ancient_Greek-MUSICAL-Notation}', "");
Expect(0, 119375, '\P{__ancient_Greek-MUSICAL-Notation}', "");
Expect(1, 119375, '\P{^__ancient_Greek-MUSICAL-Notation}', "");
Expect(0, 119295, '\p{__ancient_Greek-MUSICAL-Notation}', "");
Expect(1, 119295, '\p{^__ancient_Greek-MUSICAL-Notation}', "");
Expect(1, 119295, '\P{__ancient_Greek-MUSICAL-Notation}', "");
Expect(0, 119295, '\P{^__ancient_Greek-MUSICAL-Notation}', "");
Error('\p{-_isANCIENT/a/Greek	Musical	Notation}');
Error('\P{-_isANCIENT/a/Greek	Musical	Notation}');
Expect(1, 119375, '\p{isancientgreekmusicalnotation}', "");
Expect(0, 119375, '\p{^isancientgreekmusicalnotation}', "");
Expect(0, 119375, '\P{isancientgreekmusicalnotation}', "");
Expect(1, 119375, '\P{^isancientgreekmusicalnotation}', "");
Expect(0, 119295, '\p{isancientgreekmusicalnotation}', "");
Expect(1, 119295, '\p{^isancientgreekmusicalnotation}', "");
Expect(1, 119295, '\P{isancientgreekmusicalnotation}', "");
Expect(0, 119295, '\P{^isancientgreekmusicalnotation}', "");
Expect(1, 119375, '\p{	IS ANCIENT GreekMusical	notation}', "");
Expect(0, 119375, '\p{^	IS ANCIENT GreekMusical	notation}', "");
Expect(0, 119375, '\P{	IS ANCIENT GreekMusical	notation}', "");
Expect(1, 119375, '\P{^	IS ANCIENT GreekMusical	notation}', "");
Expect(0, 119295, '\p{	IS ANCIENT GreekMusical	notation}', "");
Expect(1, 119295, '\p{^	IS ANCIENT GreekMusical	notation}', "");
Expect(1, 119295, '\P{	IS ANCIENT GreekMusical	notation}', "");
Expect(0, 119295, '\P{^	IS ANCIENT GreekMusical	notation}', "");
Error('\p{:=In	Ancient	Greek Musical-Notation}');
Error('\P{:=In	Ancient	Greek Musical-Notation}');
Expect(1, 119375, '\p{inancientgreekmusicalnotation}', "");
Expect(0, 119375, '\p{^inancientgreekmusicalnotation}', "");
Expect(0, 119375, '\P{inancientgreekmusicalnotation}', "");
Expect(1, 119375, '\P{^inancientgreekmusicalnotation}', "");
Expect(0, 119295, '\p{inancientgreekmusicalnotation}', "");
Expect(1, 119295, '\p{^inancientgreekmusicalnotation}', "");
Expect(1, 119295, '\P{inancientgreekmusicalnotation}', "");
Expect(0, 119295, '\P{^inancientgreekmusicalnotation}', "");
Expect(1, 119375, '\p{-In-ANCIENT	GREEKMusicalNOTATION}', "");
Expect(0, 119375, '\p{^-In-ANCIENT	GREEKMusicalNOTATION}', "");
Expect(0, 119375, '\P{-In-ANCIENT	GREEKMusicalNOTATION}', "");
Expect(1, 119375, '\P{^-In-ANCIENT	GREEKMusicalNOTATION}', "");
Expect(0, 119295, '\p{-In-ANCIENT	GREEKMusicalNOTATION}', "");
Expect(1, 119295, '\p{^-In-ANCIENT	GREEKMusicalNOTATION}', "");
Expect(1, 119295, '\P{-In-ANCIENT	GREEKMusicalNOTATION}', "");
Expect(0, 119295, '\P{^-In-ANCIENT	GREEKMusicalNOTATION}', "");
Error('\p{/a/ SPACE}');
Error('\P{/a/ SPACE}');
Expect(1, 13, '\p{space}', "");
Expect(0, 13, '\p{^space}', "");
Expect(0, 13, '\P{space}', "");
Expect(1, 13, '\P{^space}', "");
Expect(0, 8, '\p{space}', "");
Expect(1, 8, '\p{^space}', "");
Expect(1, 8, '\P{space}', "");
Expect(0, 8, '\P{^space}', "");
Expect(1, 13, '\p{-	SPACE}', "");
Expect(0, 13, '\p{^-	SPACE}', "");
Expect(0, 13, '\P{-	SPACE}', "");
Expect(1, 13, '\P{^-	SPACE}', "");
Expect(0, 8, '\p{-	SPACE}', "");
Expect(1, 8, '\p{^-	SPACE}', "");
Expect(1, 8, '\P{-	SPACE}', "");
Expect(0, 8, '\P{^-	SPACE}', "");
Error('\p{:=	XPOSIXSPACE}');
Error('\P{:=	XPOSIXSPACE}');
Expect(1, 13, '\p{xposixspace}', "");
Expect(0, 13, '\p{^xposixspace}', "");
Expect(0, 13, '\P{xposixspace}', "");
Expect(1, 13, '\P{^xposixspace}', "");
Expect(0, 8, '\p{xposixspace}', "");
Expect(1, 8, '\p{^xposixspace}', "");
Expect(1, 8, '\P{xposixspace}', "");
Expect(0, 8, '\P{^xposixspace}', "");
Expect(1, 13, '\p{		XPosixSpace}', "");
Expect(0, 13, '\p{^		XPosixSpace}', "");
Expect(0, 13, '\P{		XPosixSpace}', "");
Expect(1, 13, '\P{^		XPosixSpace}', "");
Expect(0, 8, '\p{		XPosixSpace}', "");
Expect(1, 8, '\p{^		XPosixSpace}', "");
Expect(1, 8, '\P{		XPosixSpace}', "");
Expect(0, 8, '\P{^		XPosixSpace}', "");
Error('\p{:=-Is Space}');
Error('\P{:=-Is Space}');
Expect(1, 13, '\p{isspace}', "");
Expect(0, 13, '\p{^isspace}', "");
Expect(0, 13, '\P{isspace}', "");
Expect(1, 13, '\P{^isspace}', "");
Expect(0, 8, '\p{isspace}', "");
Expect(1, 8, '\p{^isspace}', "");
Expect(1, 8, '\P{isspace}', "");
Expect(0, 8, '\P{^isspace}', "");
Expect(1, 13, '\p{ 	Is	Space}', "");
Expect(0, 13, '\p{^ 	Is	Space}', "");
Expect(0, 13, '\P{ 	Is	Space}', "");
Expect(1, 13, '\P{^ 	Is	Space}', "");
Expect(0, 8, '\p{ 	Is	Space}', "");
Expect(1, 8, '\p{^ 	Is	Space}', "");
Expect(1, 8, '\P{ 	Is	Space}', "");
Expect(0, 8, '\P{^ 	Is	Space}', "");
Error('\p{-	IS:=XPosixSpace}');
Error('\P{-	IS:=XPosixSpace}');
Expect(1, 13, '\p{isxposixspace}', "");
Expect(0, 13, '\p{^isxposixspace}', "");
Expect(0, 13, '\P{isxposixspace}', "");
Expect(1, 13, '\P{^isxposixspace}', "");
Expect(0, 8, '\p{isxposixspace}', "");
Expect(1, 8, '\p{^isxposixspace}', "");
Expect(1, 8, '\P{isxposixspace}', "");
Expect(0, 8, '\P{^isxposixspace}', "");
Expect(1, 13, '\p{_Is_XPOSIXSPACE}', "");
Expect(0, 13, '\p{^_Is_XPOSIXSPACE}', "");
Expect(0, 13, '\P{_Is_XPOSIXSPACE}', "");
Expect(1, 13, '\P{^_Is_XPOSIXSPACE}', "");
Expect(0, 8, '\p{_Is_XPOSIXSPACE}', "");
Expect(1, 8, '\p{^_Is_XPOSIXSPACE}', "");
Expect(1, 8, '\P{_Is_XPOSIXSPACE}', "");
Expect(0, 8, '\P{^_Is_XPOSIXSPACE}', "");
Error('\p{:=	_POSIXBLANK}');
Error('\P{:=	_POSIXBLANK}');
Expect(1, 9, '\p{posixblank}', "");
Expect(0, 9, '\p{^posixblank}', "");
Expect(0, 9, '\P{posixblank}', "");
Expect(1, 9, '\P{^posixblank}', "");
Expect(0, 8, '\p{posixblank}', "");
Expect(1, 8, '\p{^posixblank}', "");
Expect(1, 8, '\P{posixblank}', "");
Expect(0, 8, '\P{^posixblank}', "");
Expect(1, 9, '\p{ -POSIXBLANK}', "");
Expect(0, 9, '\p{^ -POSIXBLANK}', "");
Expect(0, 9, '\P{ -POSIXBLANK}', "");
Expect(1, 9, '\P{^ -POSIXBLANK}', "");
Expect(0, 8, '\p{ -POSIXBLANK}', "");
Expect(1, 8, '\p{^ -POSIXBLANK}', "");
Expect(1, 8, '\P{ -POSIXBLANK}', "");
Expect(0, 8, '\P{^ -POSIXBLANK}', "");
Error('\p{	 Is/a/PosixBlank}');
Error('\P{	 Is/a/PosixBlank}');
Expect(1, 9, '\p{isposixblank}', "");
Expect(0, 9, '\p{^isposixblank}', "");
Expect(0, 9, '\P{isposixblank}', "");
Expect(1, 9, '\P{^isposixblank}', "");
Expect(0, 8, '\p{isposixblank}', "");
Expect(1, 8, '\p{^isposixblank}', "");
Expect(1, 8, '\P{isposixblank}', "");
Expect(0, 8, '\P{^isposixblank}', "");
Expect(1, 9, '\p{_ IS	PosixBlank}', "");
Expect(0, 9, '\p{^_ IS	PosixBlank}', "");
Expect(0, 9, '\P{_ IS	PosixBlank}', "");
Expect(1, 9, '\P{^_ IS	PosixBlank}', "");
Expect(0, 8, '\p{_ IS	PosixBlank}', "");
Expect(1, 8, '\p{^_ IS	PosixBlank}', "");
Expect(1, 8, '\P{_ IS	PosixBlank}', "");
Expect(0, 8, '\P{^_ IS	PosixBlank}', "");
Error('\p{	:=In_SINHALA}');
Error('\P{	:=In_SINHALA}');
Expect(1, 3583, '\p{insinhala}', "");
Expect(0, 3583, '\p{^insinhala}', "");
Expect(0, 3583, '\P{insinhala}', "");
Expect(1, 3583, '\P{^insinhala}', "");
Expect(0, 3455, '\p{insinhala}', "");
Expect(1, 3455, '\p{^insinhala}', "");
Expect(1, 3455, '\P{insinhala}', "");
Expect(0, 3455, '\P{^insinhala}', "");
Expect(1, 3583, '\p{- In Sinhala}', "");
Expect(0, 3583, '\p{^- In Sinhala}', "");
Expect(0, 3583, '\P{- In Sinhala}', "");
Expect(1, 3583, '\P{^- In Sinhala}', "");
Expect(0, 3455, '\p{- In Sinhala}', "");
Expect(1, 3455, '\p{^- In Sinhala}', "");
Expect(1, 3455, '\P{- In Sinhala}', "");
Expect(0, 3455, '\P{^- In Sinhala}', "");
Error('\p{_	Mongolian/a/}');
Error('\P{_	Mongolian/a/}');
Expect(1, 6145, '\p{mongolian}', "");
Expect(0, 6145, '\p{^mongolian}', "");
Expect(0, 6145, '\P{mongolian}', "");
Expect(1, 6145, '\P{^mongolian}', "");
Expect(0, 6143, '\p{mongolian}', "");
Expect(1, 6143, '\p{^mongolian}', "");
Expect(1, 6143, '\P{mongolian}', "");
Expect(0, 6143, '\P{^mongolian}', "");
Expect(1, 6145, '\p{_ mongolian}', "");
Expect(0, 6145, '\p{^_ mongolian}', "");
Expect(0, 6145, '\P{_ mongolian}', "");
Expect(1, 6145, '\P{^_ mongolian}', "");
Expect(0, 6143, '\p{_ mongolian}', "");
Expect(1, 6143, '\p{^_ mongolian}', "");
Expect(1, 6143, '\P{_ mongolian}', "");
Expect(0, 6143, '\P{^_ mongolian}', "");
Error('\p{ is_MONGOLIAN:=}');
Error('\P{ is_MONGOLIAN:=}');
Expect(1, 6145, '\p{ismongolian}', "");
Expect(0, 6145, '\p{^ismongolian}', "");
Expect(0, 6145, '\P{ismongolian}', "");
Expect(1, 6145, '\P{^ismongolian}', "");
Expect(0, 6143, '\p{ismongolian}', "");
Expect(1, 6143, '\p{^ismongolian}', "");
Expect(1, 6143, '\P{ismongolian}', "");
Expect(0, 6143, '\P{^ismongolian}', "");
Expect(1, 6145, '\p{	_Is	MONGOLIAN}', "");
Expect(0, 6145, '\p{^	_Is	MONGOLIAN}', "");
Expect(0, 6145, '\P{	_Is	MONGOLIAN}', "");
Expect(1, 6145, '\P{^	_Is	MONGOLIAN}', "");
Expect(0, 6143, '\p{	_Is	MONGOLIAN}', "");
Expect(1, 6143, '\p{^	_Is	MONGOLIAN}', "");
Expect(1, 6143, '\P{	_Is	MONGOLIAN}', "");
Expect(0, 6143, '\P{^	_Is	MONGOLIAN}', "");
Error('\p{/a/	-mong}');
Error('\P{/a/	-mong}');
Expect(1, 6145, '\p{mong}', "");
Expect(0, 6145, '\p{^mong}', "");
Expect(0, 6145, '\P{mong}', "");
Expect(1, 6145, '\P{^mong}', "");
Expect(0, 6143, '\p{mong}', "");
Expect(1, 6143, '\p{^mong}', "");
Expect(1, 6143, '\P{mong}', "");
Expect(0, 6143, '\P{^mong}', "");
Expect(1, 6145, '\p{		mong}', "");
Expect(0, 6145, '\p{^		mong}', "");
Expect(0, 6145, '\P{		mong}', "");
Expect(1, 6145, '\P{^		mong}', "");
Expect(0, 6143, '\p{		mong}', "");
Expect(1, 6143, '\p{^		mong}', "");
Expect(1, 6143, '\P{		mong}', "");
Expect(0, 6143, '\P{^		mong}', "");
Error('\p{	 Is	mong:=}');
Error('\P{	 Is	mong:=}');
Expect(1, 6145, '\p{ismong}', "");
Expect(0, 6145, '\p{^ismong}', "");
Expect(0, 6145, '\P{ismong}', "");
Expect(1, 6145, '\P{^ismong}', "");
Expect(0, 6143, '\p{ismong}', "");
Expect(1, 6143, '\p{^ismong}', "");
Expect(1, 6143, '\P{ismong}', "");
Expect(0, 6143, '\P{^ismong}', "");
Expect(1, 6145, '\p{	-Is-Mong}', "");
Expect(0, 6145, '\p{^	-Is-Mong}', "");
Expect(0, 6145, '\P{	-Is-Mong}', "");
Expect(1, 6145, '\P{^	-Is-Mong}', "");
Expect(0, 6143, '\p{	-Is-Mong}', "");
Expect(1, 6143, '\p{^	-Is-Mong}', "");
Expect(1, 6143, '\P{	-Is-Mong}', "");
Expect(0, 6143, '\P{^	-Is-Mong}', "");
Error('\p{-/a/CHEROKEE}');
Error('\P{-/a/CHEROKEE}');
Expect(1, 5108, '\p{cherokee}', "");
Expect(0, 5108, '\p{^cherokee}', "");
Expect(0, 5108, '\P{cherokee}', "");
Expect(1, 5108, '\P{^cherokee}', "");
Expect(0, 5023, '\p{cherokee}', "");
Expect(1, 5023, '\p{^cherokee}', "");
Expect(1, 5023, '\P{cherokee}', "");
Expect(0, 5023, '\P{^cherokee}', "");
Error('\p{	/a/Is_cherokee}');
Error('\P{	/a/Is_cherokee}');
Expect(1, 5108, '\p{ischerokee}', "");
Expect(0, 5108, '\p{^ischerokee}', "");
Expect(0, 5108, '\P{ischerokee}', "");
Expect(1, 5108, '\P{^ischerokee}', "");
Expect(0, 5023, '\p{ischerokee}', "");
Expect(1, 5023, '\p{^ischerokee}', "");
Expect(1, 5023, '\P{ischerokee}', "");
Expect(0, 5023, '\P{^ischerokee}', "");
Expect(1, 5108, '\p{ Is CHEROKEE}', "");
Expect(0, 5108, '\p{^ Is CHEROKEE}', "");
Expect(0, 5108, '\P{ Is CHEROKEE}', "");
Expect(1, 5108, '\P{^ Is CHEROKEE}', "");
Expect(0, 5023, '\p{ Is CHEROKEE}', "");
Expect(1, 5023, '\p{^ Is CHEROKEE}', "");
Expect(1, 5023, '\P{ Is CHEROKEE}', "");
Expect(0, 5023, '\P{^ Is CHEROKEE}', "");
Error('\p{/a/cher}');
Error('\P{/a/cher}');
Expect(1, 5108, '\p{cher}', "");
Expect(0, 5108, '\p{^cher}', "");
Expect(0, 5108, '\P{cher}', "");
Expect(1, 5108, '\P{^cher}', "");
Expect(0, 5023, '\p{cher}', "");
Expect(1, 5023, '\p{^cher}', "");
Expect(1, 5023, '\P{cher}', "");
Expect(0, 5023, '\P{^cher}', "");
Expect(1, 5108, '\p{	_Cher}', "");
Expect(0, 5108, '\p{^	_Cher}', "");
Expect(0, 5108, '\P{	_Cher}', "");
Expect(1, 5108, '\P{^	_Cher}', "");
Expect(0, 5023, '\p{	_Cher}', "");
Expect(1, 5023, '\p{^	_Cher}', "");
Expect(1, 5023, '\P{	_Cher}', "");
Expect(0, 5023, '\P{^	_Cher}', "");
Error('\p{ /a/IS-Cher}');
Error('\P{ /a/IS-Cher}');
Expect(1, 5108, '\p{ischer}', "");
Expect(0, 5108, '\p{^ischer}', "");
Expect(0, 5108, '\P{ischer}', "");
Expect(1, 5108, '\P{^ischer}', "");
Expect(0, 5023, '\p{ischer}', "");
Expect(1, 5023, '\p{^ischer}', "");
Expect(1, 5023, '\P{ischer}', "");
Expect(0, 5023, '\P{^ischer}', "");
Expect(1, 5108, '\p{	_Is	Cher}', "");
Expect(0, 5108, '\p{^	_Is	Cher}', "");
Expect(0, 5108, '\P{	_Is	Cher}', "");
Expect(1, 5108, '\P{^	_Is	Cher}', "");
Expect(0, 5023, '\p{	_Is	Cher}', "");
Expect(1, 5023, '\p{^	_Is	Cher}', "");
Expect(1, 5023, '\P{	_Is	Cher}', "");
Expect(0, 5023, '\P{^	_Is	Cher}', "");
Error('\p{/a/SAMARITAN}');
Error('\P{/a/SAMARITAN}');
Expect(1, 2093, '\p{samaritan}', "");
Expect(0, 2093, '\p{^samaritan}', "");
Expect(0, 2093, '\P{samaritan}', "");
Expect(1, 2093, '\P{^samaritan}', "");
Expect(0, 2047, '\p{samaritan}', "");
Expect(1, 2047, '\p{^samaritan}', "");
Expect(1, 2047, '\P{samaritan}', "");
Expect(0, 2047, '\P{^samaritan}', "");
Expect(1, 2093, '\p{	_Samaritan}', "");
Expect(0, 2093, '\p{^	_Samaritan}', "");
Expect(0, 2093, '\P{	_Samaritan}', "");
Expect(1, 2093, '\P{^	_Samaritan}', "");
Expect(0, 2047, '\p{	_Samaritan}', "");
Expect(1, 2047, '\p{^	_Samaritan}', "");
Expect(1, 2047, '\P{	_Samaritan}', "");
Expect(0, 2047, '\P{^	_Samaritan}', "");
Error('\p{ IS	samaritan/a/}');
Error('\P{ IS	samaritan/a/}');
Expect(1, 2093, '\p{issamaritan}', "");
Expect(0, 2093, '\p{^issamaritan}', "");
Expect(0, 2093, '\P{issamaritan}', "");
Expect(1, 2093, '\P{^issamaritan}', "");
Expect(0, 2047, '\p{issamaritan}', "");
Expect(1, 2047, '\p{^issamaritan}', "");
Expect(1, 2047, '\P{issamaritan}', "");
Expect(0, 2047, '\P{^issamaritan}', "");
Expect(1, 2093, '\p{- IS-Samaritan}', "");
Expect(0, 2093, '\p{^- IS-Samaritan}', "");
Expect(0, 2093, '\P{- IS-Samaritan}', "");
Expect(1, 2093, '\P{^- IS-Samaritan}', "");
Expect(0, 2047, '\p{- IS-Samaritan}', "");
Expect(1, 2047, '\p{^- IS-Samaritan}', "");
Expect(1, 2047, '\P{- IS-Samaritan}', "");
Expect(0, 2047, '\P{^- IS-Samaritan}', "");
Error('\p{	:=samr}');
Error('\P{	:=samr}');
Expect(1, 2093, '\p{samr}', "");
Expect(0, 2093, '\p{^samr}', "");
Expect(0, 2093, '\P{samr}', "");
Expect(1, 2093, '\P{^samr}', "");
Expect(0, 2047, '\p{samr}', "");
Expect(1, 2047, '\p{^samr}', "");
Expect(1, 2047, '\P{samr}', "");
Expect(0, 2047, '\P{^samr}', "");
Expect(1, 2093, '\p{ SAMR}', "");
Expect(0, 2093, '\p{^ SAMR}', "");
Expect(0, 2093, '\P{ SAMR}', "");
Expect(1, 2093, '\P{^ SAMR}', "");
Expect(0, 2047, '\p{ SAMR}', "");
Expect(1, 2047, '\p{^ SAMR}', "");
Expect(1, 2047, '\P{ SAMR}', "");
Expect(0, 2047, '\P{^ SAMR}', "");
Error('\p{:=Is_Samr}');
Error('\P{:=Is_Samr}');
Expect(1, 2093, '\p{issamr}', "");
Expect(0, 2093, '\p{^issamr}', "");
Expect(0, 2093, '\P{issamr}', "");
Expect(1, 2093, '\P{^issamr}', "");
Expect(0, 2047, '\p{issamr}', "");
Expect(1, 2047, '\p{^issamr}', "");
Expect(1, 2047, '\P{issamr}', "");
Expect(0, 2047, '\P{^issamr}', "");
Expect(1, 2093, '\p{- IS-SAMR}', "");
Expect(0, 2093, '\p{^- IS-SAMR}', "");
Expect(0, 2093, '\P{- IS-SAMR}', "");
Expect(1, 2093, '\P{^- IS-SAMR}', "");
Expect(0, 2047, '\p{- IS-SAMR}', "");
Expect(1, 2047, '\p{^- IS-SAMR}', "");
Expect(1, 2047, '\P{- IS-SAMR}', "");
Expect(0, 2047, '\P{^- IS-SAMR}', "");
Error('\p{:=	 Other	Punctuation}');
Error('\P{:=	 Other	Punctuation}');
Expect(1, 35, '\p{otherpunctuation}', "");
Expect(0, 35, '\p{^otherpunctuation}', "");
Expect(0, 35, '\P{otherpunctuation}', "");
Expect(1, 35, '\P{^otherpunctuation}', "");
Expect(0, 32, '\p{otherpunctuation}', "");
Expect(1, 32, '\p{^otherpunctuation}', "");
Expect(1, 32, '\P{otherpunctuation}', "");
Expect(0, 32, '\P{^otherpunctuation}', "");
Expect(1, 35, '\p{_-otherPUNCTUATION}', "");
Expect(0, 35, '\p{^_-otherPUNCTUATION}', "");
Expect(0, 35, '\P{_-otherPUNCTUATION}', "");
Expect(1, 35, '\P{^_-otherPUNCTUATION}', "");
Expect(0, 32, '\p{_-otherPUNCTUATION}', "");
Expect(1, 32, '\p{^_-otherPUNCTUATION}', "");
Expect(1, 32, '\P{_-otherPUNCTUATION}', "");
Expect(0, 32, '\P{^_-otherPUNCTUATION}', "");
Error('\p{ /a/Is-Other-Punctuation}');
Error('\P{ /a/Is-Other-Punctuation}');
Expect(1, 35, '\p{isotherpunctuation}', "");
Expect(0, 35, '\p{^isotherpunctuation}', "");
Expect(0, 35, '\P{isotherpunctuation}', "");
Expect(1, 35, '\P{^isotherpunctuation}', "");
Expect(0, 32, '\p{isotherpunctuation}', "");
Expect(1, 32, '\p{^isotherpunctuation}', "");
Expect(1, 32, '\P{isotherpunctuation}', "");
Expect(0, 32, '\P{^isotherpunctuation}', "");
Expect(1, 35, '\p{ is_other	PUNCTUATION}', "");
Expect(0, 35, '\p{^ is_other	PUNCTUATION}', "");
Expect(0, 35, '\P{ is_other	PUNCTUATION}', "");
Expect(1, 35, '\P{^ is_other	PUNCTUATION}', "");
Expect(0, 32, '\p{ is_other	PUNCTUATION}', "");
Expect(1, 32, '\p{^ is_other	PUNCTUATION}', "");
Expect(1, 32, '\P{ is_other	PUNCTUATION}', "");
Expect(0, 32, '\P{^ is_other	PUNCTUATION}', "");
Error('\p{ -Po/a/}');
Error('\P{ -Po/a/}');
Expect(1, 35, '\p{po}', "");
Expect(0, 35, '\p{^po}', "");
Expect(0, 35, '\P{po}', "");
Expect(1, 35, '\P{^po}', "");
Expect(0, 32, '\p{po}', "");
Expect(1, 32, '\p{^po}', "");
Expect(1, 32, '\P{po}', "");
Expect(0, 32, '\P{^po}', "");
Expect(1, 35, '\p{  PO}', "");
Expect(0, 35, '\p{^  PO}', "");
Expect(0, 35, '\P{  PO}', "");
Expect(1, 35, '\P{^  PO}', "");
Expect(0, 32, '\p{  PO}', "");
Expect(1, 32, '\p{^  PO}', "");
Expect(1, 32, '\P{  PO}', "");
Expect(0, 32, '\P{^  PO}', "");
Error('\p{_IS-po/a/}');
Error('\P{_IS-po/a/}');
Expect(1, 35, '\p{ispo}', "");
Expect(0, 35, '\p{^ispo}', "");
Expect(0, 35, '\P{ispo}', "");
Expect(1, 35, '\P{^ispo}', "");
Expect(0, 32, '\p{ispo}', "");
Expect(1, 32, '\p{^ispo}', "");
Expect(1, 32, '\P{ispo}', "");
Expect(0, 32, '\P{^ispo}', "");
Expect(1, 35, '\p{	_is-po}', "");
Expect(0, 35, '\p{^	_is-po}', "");
Expect(0, 35, '\P{	_is-po}', "");
Expect(1, 35, '\P{^	_is-po}', "");
Expect(0, 32, '\p{	_is-po}', "");
Expect(1, 32, '\p{^	_is-po}', "");
Expect(1, 32, '\P{	_is-po}', "");
Expect(0, 32, '\P{^	_is-po}', "");
Error('\p{:= caseIgnorable}');
Error('\P{:= caseIgnorable}');
Expect(1, 39, '\p{caseignorable}', "");
Expect(0, 39, '\p{^caseignorable}', "");
Expect(0, 39, '\P{caseignorable}', "");
Expect(1, 39, '\P{^caseignorable}', "");
Expect(0, 38, '\p{caseignorable}', "");
Expect(1, 38, '\p{^caseignorable}', "");
Expect(1, 38, '\P{caseignorable}', "");
Expect(0, 38, '\P{^caseignorable}', "");
Expect(1, 39, '\p{	CASE_Ignorable}', "");
Expect(0, 39, '\p{^	CASE_Ignorable}', "");
Expect(0, 39, '\P{	CASE_Ignorable}', "");
Expect(1, 39, '\P{^	CASE_Ignorable}', "");
Expect(0, 38, '\p{	CASE_Ignorable}', "");
Expect(1, 38, '\p{^	CASE_Ignorable}', "");
Expect(1, 38, '\P{	CASE_Ignorable}', "");
Expect(0, 38, '\P{^	CASE_Ignorable}', "");
Error('\p{:=-	IS_Case Ignorable}');
Error('\P{:=-	IS_Case Ignorable}');
Expect(1, 39, '\p{iscaseignorable}', "");
Expect(0, 39, '\p{^iscaseignorable}', "");
Expect(0, 39, '\P{iscaseignorable}', "");
Expect(1, 39, '\P{^iscaseignorable}', "");
Expect(0, 38, '\p{iscaseignorable}', "");
Expect(1, 38, '\p{^iscaseignorable}', "");
Expect(1, 38, '\P{iscaseignorable}', "");
Expect(0, 38, '\P{^iscaseignorable}', "");
Expect(1, 39, '\p{  Is-CASE	IGNORABLE}', "");
Expect(0, 39, '\p{^  Is-CASE	IGNORABLE}', "");
Expect(0, 39, '\P{  Is-CASE	IGNORABLE}', "");
Expect(1, 39, '\P{^  Is-CASE	IGNORABLE}', "");
Expect(0, 38, '\p{  Is-CASE	IGNORABLE}', "");
Expect(1, 38, '\p{^  Is-CASE	IGNORABLE}', "");
Expect(1, 38, '\P{  Is-CASE	IGNORABLE}', "");
Expect(0, 38, '\P{^  Is-CASE	IGNORABLE}', "");
Error('\p{/a/ _CI}');
Error('\P{/a/ _CI}');
Expect(1, 39, '\p{ci}', "");
Expect(0, 39, '\p{^ci}', "");
Expect(0, 39, '\P{ci}', "");
Expect(1, 39, '\P{^ci}', "");
Expect(0, 38, '\p{ci}', "");
Expect(1, 38, '\p{^ci}', "");
Expect(1, 38, '\P{ci}', "");
Expect(0, 38, '\P{^ci}', "");
Expect(1, 39, '\p{__CI}', "");
Expect(0, 39, '\p{^__CI}', "");
Expect(0, 39, '\P{__CI}', "");
Expect(1, 39, '\P{^__CI}', "");
Expect(0, 38, '\p{__CI}', "");
Expect(1, 38, '\p{^__CI}', "");
Expect(1, 38, '\P{__CI}', "");
Expect(0, 38, '\P{^__CI}', "");
Error('\p{-:=Is-CI}');
Error('\P{-:=Is-CI}');
Expect(1, 39, '\p{isci}', "");
Expect(0, 39, '\p{^isci}', "");
Expect(0, 39, '\P{isci}', "");
Expect(1, 39, '\P{^isci}', "");
Expect(0, 38, '\p{isci}', "");
Expect(1, 38, '\p{^isci}', "");
Expect(1, 38, '\P{isci}', "");
Expect(0, 38, '\P{^isci}', "");
Expect(1, 39, '\p{ -Is ci}', "");
Expect(0, 39, '\p{^ -Is ci}', "");
Expect(0, 39, '\P{ -Is ci}', "");
Expect(1, 39, '\P{^ -Is ci}', "");
Expect(0, 38, '\p{ -Is ci}', "");
Expect(1, 38, '\p{^ -Is ci}', "");
Expect(1, 38, '\P{ -Is ci}', "");
Expect(0, 38, '\P{^ -Is ci}', "");
Error('\p{_ Case_ignorable/a/}');
Error('\P{_ Case_ignorable/a/}');
Expect(1, 39, '\p{_case_IGNORABLE}', "");
Expect(0, 39, '\p{^_case_IGNORABLE}', "");
Expect(0, 39, '\P{_case_IGNORABLE}', "");
Expect(1, 39, '\P{^_case_IGNORABLE}', "");
Expect(0, 38, '\p{_case_IGNORABLE}', "");
Expect(1, 38, '\p{^_case_IGNORABLE}', "");
Expect(1, 38, '\P{_case_IGNORABLE}', "");
Expect(0, 38, '\P{^_case_IGNORABLE}', "");
Error('\p{	Changes_When:=nfkc_Casefolded}');
Error('\P{	Changes_When:=nfkc_Casefolded}');
Expect(1, 90, '\p{changeswhennfkccasefolded}', "");
Expect(0, 90, '\p{^changeswhennfkccasefolded}', "");
Expect(0, 90, '\P{changeswhennfkccasefolded}', "");
Expect(1, 90, '\P{^changeswhennfkccasefolded}', "");
Expect(0, 64, '\p{changeswhennfkccasefolded}', "");
Expect(1, 64, '\p{^changeswhennfkccasefolded}', "");
Expect(1, 64, '\P{changeswhennfkccasefolded}', "");
Expect(0, 64, '\P{^changeswhennfkccasefolded}', "");
Expect(1, 90, '\p{_-Changes_When_NFKC	casefolded}', "");
Expect(0, 90, '\p{^_-Changes_When_NFKC	casefolded}', "");
Expect(0, 90, '\P{_-Changes_When_NFKC	casefolded}', "");
Expect(1, 90, '\P{^_-Changes_When_NFKC	casefolded}', "");
Expect(0, 64, '\p{_-Changes_When_NFKC	casefolded}', "");
Expect(1, 64, '\p{^_-Changes_When_NFKC	casefolded}', "");
Expect(1, 64, '\P{_-Changes_When_NFKC	casefolded}', "");
Expect(0, 64, '\P{^_-Changes_When_NFKC	casefolded}', "");
Error('\p{-_IS:=CHANGES whenNFKC_CASEFOLDED}');
Error('\P{-_IS:=CHANGES whenNFKC_CASEFOLDED}');
Expect(1, 90, '\p{ischangeswhennfkccasefolded}', "");
Expect(0, 90, '\p{^ischangeswhennfkccasefolded}', "");
Expect(0, 90, '\P{ischangeswhennfkccasefolded}', "");
Expect(1, 90, '\P{^ischangeswhennfkccasefolded}', "");
Expect(0, 64, '\p{ischangeswhennfkccasefolded}', "");
Expect(1, 64, '\p{^ischangeswhennfkccasefolded}', "");
Expect(1, 64, '\P{ischangeswhennfkccasefolded}', "");
Expect(0, 64, '\P{^ischangeswhennfkccasefolded}', "");
Expect(1, 90, '\p{	-IS_CHANGES-When	nfkccasefolded}', "");
Expect(0, 90, '\p{^	-IS_CHANGES-When	nfkccasefolded}', "");
Expect(0, 90, '\P{	-IS_CHANGES-When	nfkccasefolded}', "");
Expect(1, 90, '\P{^	-IS_CHANGES-When	nfkccasefolded}', "");
Expect(0, 64, '\p{	-IS_CHANGES-When	nfkccasefolded}', "");
Expect(1, 64, '\p{^	-IS_CHANGES-When	nfkccasefolded}', "");
Expect(1, 64, '\P{	-IS_CHANGES-When	nfkccasefolded}', "");
Expect(0, 64, '\P{^	-IS_CHANGES-When	nfkccasefolded}', "");
Error('\p{	CWKCF:=}');
Error('\P{	CWKCF:=}');
Expect(1, 90, '\p{cwkcf}', "");
Expect(0, 90, '\p{^cwkcf}', "");
Expect(0, 90, '\P{cwkcf}', "");
Expect(1, 90, '\P{^cwkcf}', "");
Expect(0, 64, '\p{cwkcf}', "");
Expect(1, 64, '\p{^cwkcf}', "");
Expect(1, 64, '\P{cwkcf}', "");
Expect(0, 64, '\P{^cwkcf}', "");
Expect(1, 90, '\p{ CWKCF}', "");
Expect(0, 90, '\p{^ CWKCF}', "");
Expect(0, 90, '\P{ CWKCF}', "");
Expect(1, 90, '\P{^ CWKCF}', "");
Expect(0, 64, '\p{ CWKCF}', "");
Expect(1, 64, '\p{^ CWKCF}', "");
Expect(1, 64, '\P{ CWKCF}', "");
Expect(0, 64, '\P{^ CWKCF}', "");
Error('\p{-:=Is	CWKCF}');
Error('\P{-:=Is	CWKCF}');
Expect(1, 90, '\p{iscwkcf}', "");
Expect(0, 90, '\p{^iscwkcf}', "");
Expect(0, 90, '\P{iscwkcf}', "");
Expect(1, 90, '\P{^iscwkcf}', "");
Expect(0, 64, '\p{iscwkcf}', "");
Expect(1, 64, '\p{^iscwkcf}', "");
Expect(1, 64, '\P{iscwkcf}', "");
Expect(0, 64, '\P{^iscwkcf}', "");
Expect(1, 90, '\p{--is_CWKCF}', "");
Expect(0, 90, '\p{^--is_CWKCF}', "");
Expect(0, 90, '\P{--is_CWKCF}', "");
Expect(1, 90, '\P{^--is_CWKCF}', "");
Expect(0, 64, '\p{--is_CWKCF}', "");
Expect(1, 64, '\p{^--is_CWKCF}', "");
Expect(1, 64, '\P{--is_CWKCF}', "");
Expect(0, 64, '\P{^--is_CWKCF}', "");
Error('\p{_In	Cherokee:=}');
Error('\P{_In	Cherokee:=}');
Expect(1, 5119, '\p{incherokee}', "");
Expect(0, 5119, '\p{^incherokee}', "");
Expect(0, 5119, '\P{incherokee}', "");
Expect(1, 5119, '\P{^incherokee}', "");
Expect(0, 5023, '\p{incherokee}', "");
Expect(1, 5023, '\p{^incherokee}', "");
Expect(1, 5023, '\P{incherokee}', "");
Expect(0, 5023, '\P{^incherokee}', "");
Expect(1, 5119, '\p{__in cherokee}', "");
Expect(0, 5119, '\p{^__in cherokee}', "");
Expect(0, 5119, '\P{__in cherokee}', "");
Expect(1, 5119, '\P{^__in cherokee}', "");
Expect(0, 5023, '\p{__in cherokee}', "");
Expect(1, 5023, '\p{^__in cherokee}', "");
Expect(1, 5023, '\P{__in cherokee}', "");
Expect(0, 5023, '\P{^__in cherokee}', "");
Error('\p{	Ethiopic:=}');
Error('\P{	Ethiopic:=}');
Expect(1, 4680, '\p{ethiopic}', "");
Expect(0, 4680, '\p{^ethiopic}', "");
Expect(0, 4680, '\P{ethiopic}', "");
Expect(1, 4680, '\P{^ethiopic}', "");
Expect(0, 4607, '\p{ethiopic}', "");
Expect(1, 4607, '\p{^ethiopic}', "");
Expect(1, 4607, '\P{ethiopic}', "");
Expect(0, 4607, '\P{^ethiopic}', "");
Expect(1, 4680, '\p{	Ethiopic}', "");
Expect(0, 4680, '\p{^	Ethiopic}', "");
Expect(0, 4680, '\P{	Ethiopic}', "");
Expect(1, 4680, '\P{^	Ethiopic}', "");
Expect(0, 4607, '\p{	Ethiopic}', "");
Expect(1, 4607, '\p{^	Ethiopic}', "");
Expect(1, 4607, '\P{	Ethiopic}', "");
Expect(0, 4607, '\P{^	Ethiopic}', "");
Error('\p{Is:=Ethiopic}');
Error('\P{Is:=Ethiopic}');
Expect(1, 4680, '\p{isethiopic}', "");
Expect(0, 4680, '\p{^isethiopic}', "");
Expect(0, 4680, '\P{isethiopic}', "");
Expect(1, 4680, '\P{^isethiopic}', "");
Expect(0, 4607, '\p{isethiopic}', "");
Expect(1, 4607, '\p{^isethiopic}', "");
Expect(1, 4607, '\P{isethiopic}', "");
Expect(0, 4607, '\P{^isethiopic}', "");
Expect(1, 4680, '\p{- Is Ethiopic}', "");
Expect(0, 4680, '\p{^- Is Ethiopic}', "");
Expect(0, 4680, '\P{- Is Ethiopic}', "");
Expect(1, 4680, '\P{^- Is Ethiopic}', "");
Expect(0, 4607, '\p{- Is Ethiopic}', "");
Expect(1, 4607, '\p{^- Is Ethiopic}', "");
Expect(1, 4607, '\P{- Is Ethiopic}', "");
Expect(0, 4607, '\P{^- Is Ethiopic}', "");
Error('\p{Ethi/a/}');
Error('\P{Ethi/a/}');
Expect(1, 4680, '\p{ethi}', "");
Expect(0, 4680, '\p{^ethi}', "");
Expect(0, 4680, '\P{ethi}', "");
Expect(1, 4680, '\P{^ethi}', "");
Expect(0, 4607, '\p{ethi}', "");
Expect(1, 4607, '\p{^ethi}', "");
Expect(1, 4607, '\P{ethi}', "");
Expect(0, 4607, '\P{^ethi}', "");
Expect(1, 4680, '\p{- Ethi}', "");
Expect(0, 4680, '\p{^- Ethi}', "");
Expect(0, 4680, '\P{- Ethi}', "");
Expect(1, 4680, '\P{^- Ethi}', "");
Expect(0, 4607, '\p{- Ethi}', "");
Expect(1, 4607, '\p{^- Ethi}', "");
Expect(1, 4607, '\P{- Ethi}', "");
Expect(0, 4607, '\P{^- Ethi}', "");
Error('\p{	IS:=ETHI}');
Error('\P{	IS:=ETHI}');
Expect(1, 4680, '\p{isethi}', "");
Expect(0, 4680, '\p{^isethi}', "");
Expect(0, 4680, '\P{isethi}', "");
Expect(1, 4680, '\P{^isethi}', "");
Expect(0, 4607, '\p{isethi}', "");
Expect(1, 4607, '\p{^isethi}', "");
Expect(1, 4607, '\P{isethi}', "");
Expect(0, 4607, '\P{^isethi}', "");
Expect(1, 4680, '\p{_	Is ETHI}', "");
Expect(0, 4680, '\p{^_	Is ETHI}', "");
Expect(0, 4680, '\P{_	Is ETHI}', "");
Expect(1, 4680, '\P{^_	Is ETHI}', "");
Expect(0, 4607, '\p{_	Is ETHI}', "");
Expect(1, 4607, '\p{^_	Is ETHI}', "");
Expect(1, 4607, '\P{_	Is ETHI}', "");
Expect(0, 4607, '\P{^_	Is ETHI}', "");
Error('\p{:=-X Begin}');
Error('\P{:=-X Begin}');
Expect(1, 126, '\p{_X_BEGIN}', "");
Expect(0, 126, '\p{^_X_BEGIN}', "");
Expect(0, 126, '\P{_X_BEGIN}', "");
Expect(1, 126, '\P{^_X_BEGIN}', "");
Expect(0, 31, '\p{_X_BEGIN}', "");
Expect(1, 31, '\p{^_X_BEGIN}', "");
Expect(1, 31, '\P{_X_BEGIN}', "");
Expect(0, 31, '\P{^_X_BEGIN}', "");
Error('\p{ -yi:=}');
Error('\P{ -yi:=}');
Expect(1, 42124, '\p{yi}', "");
Expect(0, 42124, '\p{^yi}', "");
Expect(0, 42124, '\P{yi}', "");
Expect(1, 42124, '\P{^yi}', "");
Expect(0, 40959, '\p{yi}', "");
Expect(1, 40959, '\p{^yi}', "");
Expect(1, 40959, '\P{yi}', "");
Expect(0, 40959, '\P{^yi}', "");
Expect(1, 42124, '\p{	 Yi}', "");
Expect(0, 42124, '\p{^	 Yi}', "");
Expect(0, 42124, '\P{	 Yi}', "");
Expect(1, 42124, '\P{^	 Yi}', "");
Expect(0, 40959, '\p{	 Yi}', "");
Expect(1, 40959, '\p{^	 Yi}', "");
Expect(1, 40959, '\P{	 Yi}', "");
Expect(0, 40959, '\P{^	 Yi}', "");
Error('\p{--is-yi:=}');
Error('\P{--is-yi:=}');
Expect(1, 42124, '\p{isyi}', "");
Expect(0, 42124, '\p{^isyi}', "");
Expect(0, 42124, '\P{isyi}', "");
Expect(1, 42124, '\P{^isyi}', "");
Expect(0, 40959, '\p{isyi}', "");
Expect(1, 40959, '\p{^isyi}', "");
Expect(1, 40959, '\P{isyi}', "");
Expect(0, 40959, '\P{^isyi}', "");
Expect(1, 42124, '\p{_Is_Yi}', "");
Expect(0, 42124, '\p{^_Is_Yi}', "");
Expect(0, 42124, '\P{_Is_Yi}', "");
Expect(1, 42124, '\P{^_Is_Yi}', "");
Expect(0, 40959, '\p{_Is_Yi}', "");
Expect(1, 40959, '\p{^_Is_Yi}', "");
Expect(1, 40959, '\P{_Is_Yi}', "");
Expect(0, 40959, '\P{^_Is_Yi}', "");
Error('\p{:=- Yiii}');
Error('\P{:=- Yiii}');
Expect(1, 42124, '\p{yiii}', "");
Expect(0, 42124, '\p{^yiii}', "");
Expect(0, 42124, '\P{yiii}', "");
Expect(1, 42124, '\P{^yiii}', "");
Expect(0, 40959, '\p{yiii}', "");
Expect(1, 40959, '\p{^yiii}', "");
Expect(1, 40959, '\P{yiii}', "");
Expect(0, 40959, '\P{^yiii}', "");
Expect(1, 42124, '\p{Yiii}', "");
Expect(0, 42124, '\p{^Yiii}', "");
Expect(0, 42124, '\P{Yiii}', "");
Expect(1, 42124, '\P{^Yiii}', "");
Expect(0, 40959, '\p{Yiii}', "");
Expect(1, 40959, '\p{^Yiii}', "");
Expect(1, 40959, '\P{Yiii}', "");
Expect(0, 40959, '\P{^Yiii}', "");
Error('\p{_ IS_Yiii/a/}');
Error('\P{_ IS_Yiii/a/}');
Expect(1, 42124, '\p{isyiii}', "");
Expect(0, 42124, '\p{^isyiii}', "");
Expect(0, 42124, '\P{isyiii}', "");
Expect(1, 42124, '\P{^isyiii}', "");
Expect(0, 40959, '\p{isyiii}', "");
Expect(1, 40959, '\p{^isyiii}', "");
Expect(1, 40959, '\P{isyiii}', "");
Expect(0, 40959, '\P{^isyiii}', "");
Expect(1, 42124, '\p{ -IS Yiii}', "");
Expect(0, 42124, '\p{^ -IS Yiii}', "");
Expect(0, 42124, '\P{ -IS Yiii}', "");
Expect(1, 42124, '\P{^ -IS Yiii}', "");
Expect(0, 40959, '\p{ -IS Yiii}', "");
Expect(1, 40959, '\p{^ -IS Yiii}', "");
Expect(1, 40959, '\P{ -IS Yiii}', "");
Expect(0, 40959, '\P{^ -IS Yiii}', "");
Error('\p{/a/	-GURMUKHI}');
Error('\P{/a/	-GURMUKHI}');
Expect(1, 2563, '\p{gurmukhi}', "");
Expect(0, 2563, '\p{^gurmukhi}', "");
Expect(0, 2563, '\P{gurmukhi}', "");
Expect(1, 2563, '\P{^gurmukhi}', "");
Expect(0, 2560, '\p{gurmukhi}', "");
Expect(1, 2560, '\p{^gurmukhi}', "");
Expect(1, 2560, '\P{gurmukhi}', "");
Expect(0, 2560, '\P{^gurmukhi}', "");
Expect(1, 2563, '\p{--GURMUKHI}', "");
Expect(0, 2563, '\p{^--GURMUKHI}', "");
Expect(0, 2563, '\P{--GURMUKHI}', "");
Expect(1, 2563, '\P{^--GURMUKHI}', "");
Expect(0, 2560, '\p{--GURMUKHI}', "");
Expect(1, 2560, '\p{^--GURMUKHI}', "");
Expect(1, 2560, '\P{--GURMUKHI}', "");
Expect(0, 2560, '\P{^--GURMUKHI}', "");
Error('\p{:=Is Gurmukhi}');
Error('\P{:=Is Gurmukhi}');
Expect(1, 2563, '\p{isgurmukhi}', "");
Expect(0, 2563, '\p{^isgurmukhi}', "");
Expect(0, 2563, '\P{isgurmukhi}', "");
Expect(1, 2563, '\P{^isgurmukhi}', "");
Expect(0, 2560, '\p{isgurmukhi}', "");
Expect(1, 2560, '\p{^isgurmukhi}', "");
Expect(1, 2560, '\P{isgurmukhi}', "");
Expect(0, 2560, '\P{^isgurmukhi}', "");
Expect(1, 2563, '\p{is	GURMUKHI}', "");
Expect(0, 2563, '\p{^is	GURMUKHI}', "");
Expect(0, 2563, '\P{is	GURMUKHI}', "");
Expect(1, 2563, '\P{^is	GURMUKHI}', "");
Expect(0, 2560, '\p{is	GURMUKHI}', "");
Expect(1, 2560, '\p{^is	GURMUKHI}', "");
Expect(1, 2560, '\P{is	GURMUKHI}', "");
Expect(0, 2560, '\P{^is	GURMUKHI}', "");
Error('\p{:=Guru}');
Error('\P{:=Guru}');
Expect(1, 2563, '\p{guru}', "");
Expect(0, 2563, '\p{^guru}', "");
Expect(0, 2563, '\P{guru}', "");
Expect(1, 2563, '\P{^guru}', "");
Expect(0, 2560, '\p{guru}', "");
Expect(1, 2560, '\p{^guru}', "");
Expect(1, 2560, '\P{guru}', "");
Expect(0, 2560, '\P{^guru}', "");
Expect(1, 2563, '\p{		GURU}', "");
Expect(0, 2563, '\p{^		GURU}', "");
Expect(0, 2563, '\P{		GURU}', "");
Expect(1, 2563, '\P{^		GURU}', "");
Expect(0, 2560, '\p{		GURU}', "");
Expect(1, 2560, '\p{^		GURU}', "");
Expect(1, 2560, '\P{		GURU}', "");
Expect(0, 2560, '\P{^		GURU}', "");
Error('\p{--Is:=Guru}');
Error('\P{--Is:=Guru}');
Expect(1, 2563, '\p{isguru}', "");
Expect(0, 2563, '\p{^isguru}', "");
Expect(0, 2563, '\P{isguru}', "");
Expect(1, 2563, '\P{^isguru}', "");
Expect(0, 2560, '\p{isguru}', "");
Expect(1, 2560, '\p{^isguru}', "");
Expect(1, 2560, '\P{isguru}', "");
Expect(0, 2560, '\P{^isguru}', "");
Expect(1, 2563, '\p{	Is	guru}', "");
Expect(0, 2563, '\p{^	Is	guru}', "");
Expect(0, 2563, '\P{	Is	guru}', "");
Expect(1, 2563, '\P{^	Is	guru}', "");
Expect(0, 2560, '\p{	Is	guru}', "");
Expect(1, 2560, '\p{^	Is	guru}', "");
Expect(1, 2560, '\P{	Is	guru}', "");
Expect(0, 2560, '\P{^	Is	guru}', "");
Error('\p{/a/Latin	ExtendedB}');
Error('\P{/a/Latin	ExtendedB}');
Expect(1, 591, '\p{latinextendedb}', "");
Expect(0, 591, '\p{^latinextendedb}', "");
Expect(0, 591, '\P{latinextendedb}', "");
Expect(1, 591, '\P{^latinextendedb}', "");
Expect(0, 383, '\p{latinextendedb}', "");
Expect(1, 383, '\p{^latinextendedb}', "");
Expect(1, 383, '\P{latinextendedb}', "");
Expect(0, 383, '\P{^latinextendedb}', "");
Expect(1, 591, '\p{ Latin	Extended B}', "");
Expect(0, 591, '\p{^ Latin	Extended B}', "");
Expect(0, 591, '\P{ Latin	Extended B}', "");
Expect(1, 591, '\P{^ Latin	Extended B}', "");
Expect(0, 383, '\p{ Latin	Extended B}', "");
Expect(1, 383, '\p{^ Latin	Extended B}', "");
Expect(1, 383, '\P{ Latin	Extended B}', "");
Expect(0, 383, '\P{^ Latin	Extended B}', "");
Error('\p{-:=isLATIN	Extended_B}');
Error('\P{-:=isLATIN	Extended_B}');
Expect(1, 591, '\p{islatinextendedb}', "");
Expect(0, 591, '\p{^islatinextendedb}', "");
Expect(0, 591, '\P{islatinextendedb}', "");
Expect(1, 591, '\P{^islatinextendedb}', "");
Expect(0, 383, '\p{islatinextendedb}', "");
Expect(1, 383, '\p{^islatinextendedb}', "");
Expect(1, 383, '\P{islatinextendedb}', "");
Expect(0, 383, '\P{^islatinextendedb}', "");
Expect(1, 591, '\p{_	Is_LATIN_EXTENDED B}', "");
Expect(0, 591, '\p{^_	Is_LATIN_EXTENDED B}', "");
Expect(0, 591, '\P{_	Is_LATIN_EXTENDED B}', "");
Expect(1, 591, '\P{^_	Is_LATIN_EXTENDED B}', "");
Expect(0, 383, '\p{_	Is_LATIN_EXTENDED B}', "");
Expect(1, 383, '\p{^_	Is_LATIN_EXTENDED B}', "");
Expect(1, 383, '\P{_	Is_LATIN_EXTENDED B}', "");
Expect(0, 383, '\P{^_	Is_LATIN_EXTENDED B}', "");
Error('\p{:=	-in_Latin	extended	B}');
Error('\P{:=	-in_Latin	extended	B}');
Expect(1, 591, '\p{inlatinextendedb}', "");
Expect(0, 591, '\p{^inlatinextendedb}', "");
Expect(0, 591, '\P{inlatinextendedb}', "");
Expect(1, 591, '\P{^inlatinextendedb}', "");
Expect(0, 383, '\p{inlatinextendedb}', "");
Expect(1, 383, '\p{^inlatinextendedb}', "");
Expect(1, 383, '\P{inlatinextendedb}', "");
Expect(0, 383, '\P{^inlatinextendedb}', "");
Expect(1, 591, '\p{ -In LatinextendedB}', "");
Expect(0, 591, '\p{^ -In LatinextendedB}', "");
Expect(0, 591, '\P{ -In LatinextendedB}', "");
Expect(1, 591, '\P{^ -In LatinextendedB}', "");
Expect(0, 383, '\p{ -In LatinextendedB}', "");
Expect(1, 383, '\p{^ -In LatinextendedB}', "");
Expect(1, 383, '\P{ -In LatinextendedB}', "");
Expect(0, 383, '\P{^ -In LatinextendedB}', "");
Error('\p{:=	 Cyrillic}');
Error('\P{:=	 Cyrillic}');
Expect(1, 1156, '\p{cyrillic}', "");
Expect(0, 1156, '\p{^cyrillic}', "");
Expect(0, 1156, '\P{cyrillic}', "");
Expect(1, 1156, '\P{^cyrillic}', "");
Expect(0, 1023, '\p{cyrillic}', "");
Expect(1, 1023, '\p{^cyrillic}', "");
Expect(1, 1023, '\P{cyrillic}', "");
Expect(0, 1023, '\P{^cyrillic}', "");
Expect(1, 1156, '\p{__cyrillic}', "");
Expect(0, 1156, '\p{^__cyrillic}', "");
Expect(0, 1156, '\P{__cyrillic}', "");
Expect(1, 1156, '\P{^__cyrillic}', "");
Expect(0, 1023, '\p{__cyrillic}', "");
Expect(1, 1023, '\p{^__cyrillic}', "");
Expect(1, 1023, '\P{__cyrillic}', "");
Expect(0, 1023, '\P{^__cyrillic}', "");
Error('\p{-/a/IsCyrillic}');
Error('\P{-/a/IsCyrillic}');
Expect(1, 1156, '\p{iscyrillic}', "");
Expect(0, 1156, '\p{^iscyrillic}', "");
Expect(0, 1156, '\P{iscyrillic}', "");
Expect(1, 1156, '\P{^iscyrillic}', "");
Expect(0, 1023, '\p{iscyrillic}', "");
Expect(1, 1023, '\p{^iscyrillic}', "");
Expect(1, 1023, '\P{iscyrillic}', "");
Expect(0, 1023, '\P{^iscyrillic}', "");
Expect(1, 1156, '\p{-Is-CYRILLIC}', "");
Expect(0, 1156, '\p{^-Is-CYRILLIC}', "");
Expect(0, 1156, '\P{-Is-CYRILLIC}', "");
Expect(1, 1156, '\P{^-Is-CYRILLIC}', "");
Expect(0, 1023, '\p{-Is-CYRILLIC}', "");
Expect(1, 1023, '\p{^-Is-CYRILLIC}', "");
Expect(1, 1023, '\P{-Is-CYRILLIC}', "");
Expect(0, 1023, '\P{^-Is-CYRILLIC}', "");
Error('\p{-:=Cyrl}');
Error('\P{-:=Cyrl}');
Expect(1, 1156, '\p{cyrl}', "");
Expect(0, 1156, '\p{^cyrl}', "");
Expect(0, 1156, '\P{cyrl}', "");
Expect(1, 1156, '\P{^cyrl}', "");
Expect(0, 1023, '\p{cyrl}', "");
Expect(1, 1023, '\p{^cyrl}', "");
Expect(1, 1023, '\P{cyrl}', "");
Expect(0, 1023, '\P{^cyrl}', "");
Expect(1, 1156, '\p{ CYRL}', "");
Expect(0, 1156, '\p{^ CYRL}', "");
Expect(0, 1156, '\P{ CYRL}', "");
Expect(1, 1156, '\P{^ CYRL}', "");
Expect(0, 1023, '\p{ CYRL}', "");
Expect(1, 1023, '\p{^ CYRL}', "");
Expect(1, 1023, '\P{ CYRL}', "");
Expect(0, 1023, '\P{^ CYRL}', "");
Error('\p{-IS Cyrl:=}');
Error('\P{-IS Cyrl:=}');
Expect(1, 1156, '\p{iscyrl}', "");
Expect(0, 1156, '\p{^iscyrl}', "");
Expect(0, 1156, '\P{iscyrl}', "");
Expect(1, 1156, '\P{^iscyrl}', "");
Expect(0, 1023, '\p{iscyrl}', "");
Expect(1, 1023, '\p{^iscyrl}', "");
Expect(1, 1023, '\P{iscyrl}', "");
Expect(0, 1023, '\P{^iscyrl}', "");
Expect(1, 1156, '\p{_	IScyrl}', "");
Expect(0, 1156, '\p{^_	IScyrl}', "");
Expect(0, 1156, '\P{_	IScyrl}', "");
Expect(1, 1156, '\P{^_	IScyrl}', "");
Expect(0, 1023, '\p{_	IScyrl}', "");
Expect(1, 1023, '\p{^_	IScyrl}', "");
Expect(1, 1023, '\P{_	IScyrl}', "");
Expect(0, 1023, '\P{^_	IScyrl}', "");
Error('\p{	-Latin:=Extended-C}');
Error('\P{	-Latin:=Extended-C}');
Expect(1, 11391, '\p{latinextendedc}', "");
Expect(0, 11391, '\p{^latinextendedc}', "");
Expect(0, 11391, '\P{latinextendedc}', "");
Expect(1, 11391, '\P{^latinextendedc}', "");
Expect(0, 11359, '\p{latinextendedc}', "");
Expect(1, 11359, '\p{^latinextendedc}', "");
Expect(1, 11359, '\P{latinextendedc}', "");
Expect(0, 11359, '\P{^latinextendedc}', "");
Expect(1, 11391, '\p{ -LatinExtended c}', "");
Expect(0, 11391, '\p{^ -LatinExtended c}', "");
Expect(0, 11391, '\P{ -LatinExtended c}', "");
Expect(1, 11391, '\P{^ -LatinExtended c}', "");
Expect(0, 11359, '\p{ -LatinExtended c}', "");
Expect(1, 11359, '\p{^ -LatinExtended c}', "");
Expect(1, 11359, '\P{ -LatinExtended c}', "");
Expect(0, 11359, '\P{^ -LatinExtended c}', "");
Error('\p{	-Is:=latinextendedc}');
Error('\P{	-Is:=latinextendedc}');
Expect(1, 11391, '\p{islatinextendedc}', "");
Expect(0, 11391, '\p{^islatinextendedc}', "");
Expect(0, 11391, '\P{islatinextendedc}', "");
Expect(1, 11391, '\P{^islatinextendedc}', "");
Expect(0, 11359, '\p{islatinextendedc}', "");
Expect(1, 11359, '\p{^islatinextendedc}', "");
Expect(1, 11359, '\P{islatinextendedc}', "");
Expect(0, 11359, '\P{^islatinextendedc}', "");
Expect(1, 11391, '\p{_IS_Latin	EXTENDEDC}', "");
Expect(0, 11391, '\p{^_IS_Latin	EXTENDEDC}', "");
Expect(0, 11391, '\P{_IS_Latin	EXTENDEDC}', "");
Expect(1, 11391, '\P{^_IS_Latin	EXTENDEDC}', "");
Expect(0, 11359, '\p{_IS_Latin	EXTENDEDC}', "");
Expect(1, 11359, '\p{^_IS_Latin	EXTENDEDC}', "");
Expect(1, 11359, '\P{_IS_Latin	EXTENDEDC}', "");
Expect(0, 11359, '\P{^_IS_Latin	EXTENDEDC}', "");
Error('\p{ /a/IN	Latin Extended C}');
Error('\P{ /a/IN	Latin Extended C}');
Expect(1, 11391, '\p{inlatinextendedc}', "");
Expect(0, 11391, '\p{^inlatinextendedc}', "");
Expect(0, 11391, '\P{inlatinextendedc}', "");
Expect(1, 11391, '\P{^inlatinextendedc}', "");
Expect(0, 11359, '\p{inlatinextendedc}', "");
Expect(1, 11359, '\p{^inlatinextendedc}', "");
Expect(1, 11359, '\P{inlatinextendedc}', "");
Expect(0, 11359, '\P{^inlatinextendedc}', "");
Expect(1, 11391, '\p{		InLatin-ExtendedC}', "");
Expect(0, 11391, '\p{^		InLatin-ExtendedC}', "");
Expect(0, 11391, '\P{		InLatin-ExtendedC}', "");
Expect(1, 11391, '\P{^		InLatin-ExtendedC}', "");
Expect(0, 11359, '\p{		InLatin-ExtendedC}', "");
Expect(1, 11359, '\p{^		InLatin-ExtendedC}', "");
Expect(1, 11359, '\P{		InLatin-ExtendedC}', "");
Expect(0, 11359, '\P{^		InLatin-ExtendedC}', "");
Error('\p{	-CJK:=UNIFIED	IDEOGRAPHS	EXTENSIONd}');
Error('\P{	-CJK:=UNIFIED	IDEOGRAPHS	EXTENSIONd}');
Expect(1, 178207, '\p{cjkunifiedideographsextensiond}', "");
Expect(0, 178207, '\p{^cjkunifiedideographsextensiond}', "");
Expect(0, 178207, '\P{cjkunifiedideographsextensiond}', "");
Expect(1, 178207, '\P{^cjkunifiedideographsextensiond}', "");
Expect(0, 177983, '\p{cjkunifiedideographsextensiond}', "");
Expect(1, 177983, '\p{^cjkunifiedideographsextensiond}', "");
Expect(1, 177983, '\P{cjkunifiedideographsextensiond}', "");
Expect(0, 177983, '\P{^cjkunifiedideographsextensiond}', "");
Expect(1, 178207, '\p{_ CJK_UNIFIED IDEOGRAPHS	Extension_D}', "");
Expect(0, 178207, '\p{^_ CJK_UNIFIED IDEOGRAPHS	Extension_D}', "");
Expect(0, 178207, '\P{_ CJK_UNIFIED IDEOGRAPHS	Extension_D}', "");
Expect(1, 178207, '\P{^_ CJK_UNIFIED IDEOGRAPHS	Extension_D}', "");
Expect(0, 177983, '\p{_ CJK_UNIFIED IDEOGRAPHS	Extension_D}', "");
Expect(1, 177983, '\p{^_ CJK_UNIFIED IDEOGRAPHS	Extension_D}', "");
Expect(1, 177983, '\P{_ CJK_UNIFIED IDEOGRAPHS	Extension_D}', "");
Expect(0, 177983, '\P{^_ CJK_UNIFIED IDEOGRAPHS	Extension_D}', "");
Error('\p{/a/IsCJK_UnifiedIdeographs	extensionD}');
Error('\P{/a/IsCJK_UnifiedIdeographs	extensionD}');
Expect(1, 178207, '\p{iscjkunifiedideographsextensiond}', "");
Expect(0, 178207, '\p{^iscjkunifiedideographsextensiond}', "");
Expect(0, 178207, '\P{iscjkunifiedideographsextensiond}', "");
Expect(1, 178207, '\P{^iscjkunifiedideographsextensiond}', "");
Expect(0, 177983, '\p{iscjkunifiedideographsextensiond}', "");
Expect(1, 177983, '\p{^iscjkunifiedideographsextensiond}', "");
Expect(1, 177983, '\P{iscjkunifiedideographsextensiond}', "");
Expect(0, 177983, '\P{^iscjkunifiedideographsextensiond}', "");
Expect(1, 178207, '\p{ Is-cjkUnified_IDEOGRAPHS-ExtensionD}', "");
Expect(0, 178207, '\p{^ Is-cjkUnified_IDEOGRAPHS-ExtensionD}', "");
Expect(0, 178207, '\P{ Is-cjkUnified_IDEOGRAPHS-ExtensionD}', "");
Expect(1, 178207, '\P{^ Is-cjkUnified_IDEOGRAPHS-ExtensionD}', "");
Expect(0, 177983, '\p{ Is-cjkUnified_IDEOGRAPHS-ExtensionD}', "");
Expect(1, 177983, '\p{^ Is-cjkUnified_IDEOGRAPHS-ExtensionD}', "");
Expect(1, 177983, '\P{ Is-cjkUnified_IDEOGRAPHS-ExtensionD}', "");
Expect(0, 177983, '\P{^ Is-cjkUnified_IDEOGRAPHS-ExtensionD}', "");
Error('\p{_	In CJK_Unified:=IDEOGRAPHS-Extensiond}');
Error('\P{_	In CJK_Unified:=IDEOGRAPHS-Extensiond}');
Expect(1, 178207, '\p{incjkunifiedideographsextensiond}', "");
Expect(0, 178207, '\p{^incjkunifiedideographsextensiond}', "");
Expect(0, 178207, '\P{incjkunifiedideographsextensiond}', "");
Expect(1, 178207, '\P{^incjkunifiedideographsextensiond}', "");
Expect(0, 177983, '\p{incjkunifiedideographsextensiond}', "");
Expect(1, 177983, '\p{^incjkunifiedideographsextensiond}', "");
Expect(1, 177983, '\P{incjkunifiedideographsextensiond}', "");
Expect(0, 177983, '\P{^incjkunifiedideographsextensiond}', "");
Expect(1, 178207, '\p{ IN_CJK	UnifiedIDEOGRAPHS-extension_D}', "");
Expect(0, 178207, '\p{^ IN_CJK	UnifiedIDEOGRAPHS-extension_D}', "");
Expect(0, 178207, '\P{ IN_CJK	UnifiedIDEOGRAPHS-extension_D}', "");
Expect(1, 178207, '\P{^ IN_CJK	UnifiedIDEOGRAPHS-extension_D}', "");
Expect(0, 177983, '\p{ IN_CJK	UnifiedIDEOGRAPHS-extension_D}', "");
Expect(1, 177983, '\p{^ IN_CJK	UnifiedIDEOGRAPHS-extension_D}', "");
Expect(1, 177983, '\P{ IN_CJK	UnifiedIDEOGRAPHS-extension_D}', "");
Expect(0, 177983, '\P{^ IN_CJK	UnifiedIDEOGRAPHS-extension_D}', "");
Error('\p{:= 	In	Rejang}');
Error('\P{:= 	In	Rejang}');
Expect(1, 43359, '\p{inrejang}', "");
Expect(0, 43359, '\p{^inrejang}', "");
Expect(0, 43359, '\P{inrejang}', "");
Expect(1, 43359, '\P{^inrejang}', "");
Expect(0, 43311, '\p{inrejang}', "");
Expect(1, 43311, '\p{^inrejang}', "");
Expect(1, 43311, '\P{inrejang}', "");
Expect(0, 43311, '\P{^inrejang}', "");
Expect(1, 43359, '\p{-in	rejang}', "");
Expect(0, 43359, '\p{^-in	rejang}', "");
Expect(0, 43359, '\P{-in	rejang}', "");
Expect(1, 43359, '\P{^-in	rejang}', "");
Expect(0, 43311, '\p{-in	rejang}', "");
Expect(1, 43311, '\p{^-in	rejang}', "");
Expect(1, 43311, '\P{-in	rejang}', "");
Expect(0, 43311, '\P{^-in	rejang}', "");
Error('\p{-_COMBININGDiacritical:=Marks supplement}');
Error('\P{-_COMBININGDiacritical:=Marks supplement}');
Expect(1, 7679, '\p{combiningdiacriticalmarkssupplement}', "");
Expect(0, 7679, '\p{^combiningdiacriticalmarkssupplement}', "");
Expect(0, 7679, '\P{combiningdiacriticalmarkssupplement}', "");
Expect(1, 7679, '\P{^combiningdiacriticalmarkssupplement}', "");
Expect(0, 7615, '\p{combiningdiacriticalmarkssupplement}', "");
Expect(1, 7615, '\p{^combiningdiacriticalmarkssupplement}', "");
Expect(1, 7615, '\P{combiningdiacriticalmarkssupplement}', "");
Expect(0, 7615, '\P{^combiningdiacriticalmarkssupplement}', "");
Expect(1, 7679, '\p{COMBINING-Diacritical-Marks_Supplement}', "");
Expect(0, 7679, '\p{^COMBINING-Diacritical-Marks_Supplement}', "");
Expect(0, 7679, '\P{COMBINING-Diacritical-Marks_Supplement}', "");
Expect(1, 7679, '\P{^COMBINING-Diacritical-Marks_Supplement}', "");
Expect(0, 7615, '\p{COMBINING-Diacritical-Marks_Supplement}', "");
Expect(1, 7615, '\p{^COMBINING-Diacritical-Marks_Supplement}', "");
Expect(1, 7615, '\P{COMBINING-Diacritical-Marks_Supplement}', "");
Expect(0, 7615, '\P{^COMBINING-Diacritical-Marks_Supplement}', "");
Error('\p{/a/ Is	combining-Diacritical-marks	SUPPLEMENT}');
Error('\P{/a/ Is	combining-Diacritical-marks	SUPPLEMENT}');
Expect(1, 7679, '\p{iscombiningdiacriticalmarkssupplement}', "");
Expect(0, 7679, '\p{^iscombiningdiacriticalmarkssupplement}', "");
Expect(0, 7679, '\P{iscombiningdiacriticalmarkssupplement}', "");
Expect(1, 7679, '\P{^iscombiningdiacriticalmarkssupplement}', "");
Expect(0, 7615, '\p{iscombiningdiacriticalmarkssupplement}', "");
Expect(1, 7615, '\p{^iscombiningdiacriticalmarkssupplement}', "");
Expect(1, 7615, '\P{iscombiningdiacriticalmarkssupplement}', "");
Expect(0, 7615, '\P{^iscombiningdiacriticalmarkssupplement}', "");
Expect(1, 7679, '\p{ _IScombining-diacritical_marks Supplement}', "");
Expect(0, 7679, '\p{^ _IScombining-diacritical_marks Supplement}', "");
Expect(0, 7679, '\P{ _IScombining-diacritical_marks Supplement}', "");
Expect(1, 7679, '\P{^ _IScombining-diacritical_marks Supplement}', "");
Expect(0, 7615, '\p{ _IScombining-diacritical_marks Supplement}', "");
Expect(1, 7615, '\p{^ _IScombining-diacritical_marks Supplement}', "");
Expect(1, 7615, '\P{ _IScombining-diacritical_marks Supplement}', "");
Expect(0, 7615, '\P{^ _IScombining-diacritical_marks Supplement}', "");
Error('\p{	 In_Combining/a/Diacritical_Marks_Supplement}');
Error('\P{	 In_Combining/a/Diacritical_Marks_Supplement}');
Expect(1, 7679, '\p{incombiningdiacriticalmarkssupplement}', "");
Expect(0, 7679, '\p{^incombiningdiacriticalmarkssupplement}', "");
Expect(0, 7679, '\P{incombiningdiacriticalmarkssupplement}', "");
Expect(1, 7679, '\P{^incombiningdiacriticalmarkssupplement}', "");
Expect(0, 7615, '\p{incombiningdiacriticalmarkssupplement}', "");
Expect(1, 7615, '\p{^incombiningdiacriticalmarkssupplement}', "");
Expect(1, 7615, '\P{incombiningdiacriticalmarkssupplement}', "");
Expect(0, 7615, '\P{^incombiningdiacriticalmarkssupplement}', "");
Expect(1, 7679, '\p{_In-Combining Diacritical MARKSSupplement}', "");
Expect(0, 7679, '\p{^_In-Combining Diacritical MARKSSupplement}', "");
Expect(0, 7679, '\P{_In-Combining Diacritical MARKSSupplement}', "");
Expect(1, 7679, '\P{^_In-Combining Diacritical MARKSSupplement}', "");
Expect(0, 7615, '\p{_In-Combining Diacritical MARKSSupplement}', "");
Expect(1, 7615, '\p{^_In-Combining Diacritical MARKSSupplement}', "");
Expect(1, 7615, '\P{_In-Combining Diacritical MARKSSupplement}', "");
Expect(0, 7615, '\P{^_In-Combining Diacritical MARKSSupplement}', "");
Error('\p{:= 	STerm}');
Error('\P{:= 	STerm}');
Expect(1, 33, '\p{sterm}', "");
Expect(0, 33, '\p{^sterm}', "");
Expect(0, 33, '\P{sterm}', "");
Expect(1, 33, '\P{^sterm}', "");
Expect(0, 32, '\p{sterm}', "");
Expect(1, 32, '\p{^sterm}', "");
Expect(1, 32, '\P{sterm}', "");
Expect(0, 32, '\P{^sterm}', "");
Expect(1, 33, '\p{		sterm}', "");
Expect(0, 33, '\p{^		sterm}', "");
Expect(0, 33, '\P{		sterm}', "");
Expect(1, 33, '\P{^		sterm}', "");
Expect(0, 32, '\p{		sterm}', "");
Expect(1, 32, '\p{^		sterm}', "");
Expect(1, 32, '\P{		sterm}', "");
Expect(0, 32, '\P{^		sterm}', "");
Error('\p{:=	 ISsterm}');
Error('\P{:=	 ISsterm}');
Expect(1, 33, '\p{issterm}', "");
Expect(0, 33, '\p{^issterm}', "");
Expect(0, 33, '\P{issterm}', "");
Expect(1, 33, '\P{^issterm}', "");
Expect(0, 32, '\p{issterm}', "");
Expect(1, 32, '\p{^issterm}', "");
Expect(1, 32, '\P{issterm}', "");
Expect(0, 32, '\P{^issterm}', "");
Expect(1, 33, '\p{	 Is STerm}', "");
Expect(0, 33, '\p{^	 Is STerm}', "");
Expect(0, 33, '\P{	 Is STerm}', "");
Expect(1, 33, '\P{^	 Is STerm}', "");
Expect(0, 32, '\p{	 Is STerm}', "");
Expect(1, 32, '\p{^	 Is STerm}', "");
Expect(1, 32, '\P{	 Is STerm}', "");
Expect(0, 32, '\P{^	 Is STerm}', "");
Error('\p{ 	In_Kannada:=}');
Error('\P{ 	In_Kannada:=}');
Expect(1, 3327, '\p{inkannada}', "");
Expect(0, 3327, '\p{^inkannada}', "");
Expect(0, 3327, '\P{inkannada}', "");
Expect(1, 3327, '\P{^inkannada}', "");
Expect(0, 3199, '\p{inkannada}', "");
Expect(1, 3199, '\p{^inkannada}', "");
Expect(1, 3199, '\P{inkannada}', "");
Expect(0, 3199, '\P{^inkannada}', "");
Expect(1, 3327, '\p{ 	In	Kannada}', "");
Expect(0, 3327, '\p{^ 	In	Kannada}', "");
Expect(0, 3327, '\P{ 	In	Kannada}', "");
Expect(1, 3327, '\P{^ 	In	Kannada}', "");
Expect(0, 3199, '\p{ 	In	Kannada}', "");
Expect(1, 3199, '\p{^ 	In	Kannada}', "");
Expect(1, 3199, '\P{ 	In	Kannada}', "");
Expect(0, 3199, '\P{^ 	In	Kannada}', "");
Error('\p{  SOFT/a/Dotted}');
Error('\P{  SOFT/a/Dotted}');
Expect(1, 106, '\p{softdotted}', "");
Expect(0, 106, '\p{^softdotted}', "");
Expect(0, 106, '\P{softdotted}', "");
Expect(1, 106, '\P{^softdotted}', "");
Expect(0, 104, '\p{softdotted}', "");
Expect(1, 104, '\p{^softdotted}', "");
Expect(1, 104, '\P{softdotted}', "");
Expect(0, 104, '\P{^softdotted}', "");
Expect(1, 106, '\p{-Soft-Dotted}', "");
Expect(0, 106, '\p{^-Soft-Dotted}', "");
Expect(0, 106, '\P{-Soft-Dotted}', "");
Expect(1, 106, '\P{^-Soft-Dotted}', "");
Expect(0, 104, '\p{-Soft-Dotted}', "");
Expect(1, 104, '\p{^-Soft-Dotted}', "");
Expect(1, 104, '\P{-Soft-Dotted}', "");
Expect(0, 104, '\P{^-Soft-Dotted}', "");
Error('\p{_ Issoft_Dotted:=}');
Error('\P{_ Issoft_Dotted:=}');
Expect(1, 106, '\p{issoftdotted}', "");
Expect(0, 106, '\p{^issoftdotted}', "");
Expect(0, 106, '\P{issoftdotted}', "");
Expect(1, 106, '\P{^issoftdotted}', "");
Expect(0, 104, '\p{issoftdotted}', "");
Expect(1, 104, '\p{^issoftdotted}', "");
Expect(1, 104, '\P{issoftdotted}', "");
Expect(0, 104, '\P{^issoftdotted}', "");
Expect(1, 106, '\p{	_IS_SOFTDOTTED}', "");
Expect(0, 106, '\p{^	_IS_SOFTDOTTED}', "");
Expect(0, 106, '\P{	_IS_SOFTDOTTED}', "");
Expect(1, 106, '\P{^	_IS_SOFTDOTTED}', "");
Expect(0, 104, '\p{	_IS_SOFTDOTTED}', "");
Expect(1, 104, '\p{^	_IS_SOFTDOTTED}', "");
Expect(1, 104, '\P{	_IS_SOFTDOTTED}', "");
Expect(0, 104, '\P{^	_IS_SOFTDOTTED}', "");
Error('\p{:=	SD}');
Error('\P{:=	SD}');
Expect(1, 106, '\p{sd}', "");
Expect(0, 106, '\p{^sd}', "");
Expect(0, 106, '\P{sd}', "");
Expect(1, 106, '\P{^sd}', "");
Expect(0, 104, '\p{sd}', "");
Expect(1, 104, '\p{^sd}', "");
Expect(1, 104, '\P{sd}', "");
Expect(0, 104, '\P{^sd}', "");
Expect(1, 106, '\p{		SD}', "");
Expect(0, 106, '\p{^		SD}', "");
Expect(0, 106, '\P{		SD}', "");
Expect(1, 106, '\P{^		SD}', "");
Expect(0, 104, '\p{		SD}', "");
Expect(1, 104, '\p{^		SD}', "");
Expect(1, 104, '\P{		SD}', "");
Expect(0, 104, '\P{^		SD}', "");
Error('\p{	:=Is	SD}');
Error('\P{	:=Is	SD}');
Expect(1, 106, '\p{issd}', "");
Expect(0, 106, '\p{^issd}', "");
Expect(0, 106, '\P{issd}', "");
Expect(1, 106, '\P{^issd}', "");
Expect(0, 104, '\p{issd}', "");
Expect(1, 104, '\p{^issd}', "");
Expect(1, 104, '\P{issd}', "");
Expect(0, 104, '\P{^issd}', "");
Expect(1, 106, '\p{		Is	sd}', "");
Expect(0, 106, '\p{^		Is	sd}', "");
Expect(0, 106, '\P{		Is	sd}', "");
Expect(1, 106, '\P{^		Is	sd}', "");
Expect(0, 104, '\p{		Is	sd}', "");
Expect(1, 104, '\p{^		Is	sd}', "");
Expect(1, 104, '\P{		Is	sd}', "");
Expect(0, 104, '\P{^		Is	sd}', "");
Error('\p{		canondcij/a/}');
Error('\P{		canondcij/a/}');
Expect(1, 106, '\p{_CanonDCIJ}', "");
Expect(0, 106, '\p{^_CanonDCIJ}', "");
Expect(0, 106, '\P{_CanonDCIJ}', "");
Expect(1, 106, '\P{^_CanonDCIJ}', "");
Expect(0, 104, '\p{_CanonDCIJ}', "");
Expect(1, 104, '\p{^_CanonDCIJ}', "");
Expect(1, 104, '\P{_CanonDCIJ}', "");
Expect(0, 104, '\P{^_CanonDCIJ}', "");
Error('\p{ 	AVESTAN:=}');
Error('\P{ 	AVESTAN:=}');
Expect(1, 68405, '\p{avestan}', "");
Expect(0, 68405, '\p{^avestan}', "");
Expect(0, 68405, '\P{avestan}', "");
Expect(1, 68405, '\P{^avestan}', "");
Expect(0, 68351, '\p{avestan}', "");
Expect(1, 68351, '\p{^avestan}', "");
Expect(1, 68351, '\P{avestan}', "");
Expect(0, 68351, '\P{^avestan}', "");
Expect(1, 68405, '\p{Avestan}', "");
Expect(0, 68405, '\p{^Avestan}', "");
Expect(0, 68405, '\P{Avestan}', "");
Expect(1, 68405, '\P{^Avestan}', "");
Expect(0, 68351, '\p{Avestan}', "");
Expect(1, 68351, '\p{^Avestan}', "");
Expect(1, 68351, '\P{Avestan}', "");
Expect(0, 68351, '\P{^Avestan}', "");
Error('\p{-/a/Isavestan}');
Error('\P{-/a/Isavestan}');
Expect(1, 68405, '\p{isavestan}', "");
Expect(0, 68405, '\p{^isavestan}', "");
Expect(0, 68405, '\P{isavestan}', "");
Expect(1, 68405, '\P{^isavestan}', "");
Expect(0, 68351, '\p{isavestan}', "");
Expect(1, 68351, '\p{^isavestan}', "");
Expect(1, 68351, '\P{isavestan}', "");
Expect(0, 68351, '\P{^isavestan}', "");
Expect(1, 68405, '\p{_ Is_Avestan}', "");
Expect(0, 68405, '\p{^_ Is_Avestan}', "");
Expect(0, 68405, '\P{_ Is_Avestan}', "");
Expect(1, 68405, '\P{^_ Is_Avestan}', "");
Expect(0, 68351, '\p{_ Is_Avestan}', "");
Expect(1, 68351, '\p{^_ Is_Avestan}', "");
Expect(1, 68351, '\P{_ Is_Avestan}', "");
Expect(0, 68351, '\P{^_ Is_Avestan}', "");
Error('\p{/a/-_Avst}');
Error('\P{/a/-_Avst}');
Expect(1, 68405, '\p{avst}', "");
Expect(0, 68405, '\p{^avst}', "");
Expect(0, 68405, '\P{avst}', "");
Expect(1, 68405, '\P{^avst}', "");
Expect(0, 68351, '\p{avst}', "");
Expect(1, 68351, '\p{^avst}', "");
Expect(1, 68351, '\P{avst}', "");
Expect(0, 68351, '\P{^avst}', "");
Expect(1, 68405, '\p{	 Avst}', "");
Expect(0, 68405, '\p{^	 Avst}', "");
Expect(0, 68405, '\P{	 Avst}', "");
Expect(1, 68405, '\P{^	 Avst}', "");
Expect(0, 68351, '\p{	 Avst}', "");
Expect(1, 68351, '\p{^	 Avst}', "");
Expect(1, 68351, '\P{	 Avst}', "");
Expect(0, 68351, '\P{^	 Avst}', "");
Error('\p{	IsAVST:=}');
Error('\P{	IsAVST:=}');
Expect(1, 68405, '\p{isavst}', "");
Expect(0, 68405, '\p{^isavst}', "");
Expect(0, 68405, '\P{isavst}', "");
Expect(1, 68405, '\P{^isavst}', "");
Expect(0, 68351, '\p{isavst}', "");
Expect(1, 68351, '\p{^isavst}', "");
Expect(1, 68351, '\P{isavst}', "");
Expect(0, 68351, '\P{^isavst}', "");
Expect(1, 68405, '\p{  is-Avst}', "");
Expect(0, 68405, '\p{^  is-Avst}', "");
Expect(0, 68405, '\P{  is-Avst}', "");
Expect(1, 68405, '\P{^  is-Avst}', "");
Expect(0, 68351, '\p{  is-Avst}', "");
Expect(1, 68351, '\p{^  is-Avst}', "");
Expect(1, 68351, '\P{  is-Avst}', "");
Expect(0, 68351, '\P{^  is-Avst}', "");
Error('\p{_ CONTROL:=Pictures}');
Error('\P{_ CONTROL:=Pictures}');
Expect(1, 9279, '\p{controlpictures}', "");
Expect(0, 9279, '\p{^controlpictures}', "");
Expect(0, 9279, '\P{controlpictures}', "");
Expect(1, 9279, '\P{^controlpictures}', "");
Expect(0, 9215, '\p{controlpictures}', "");
Expect(1, 9215, '\p{^controlpictures}', "");
Expect(1, 9215, '\P{controlpictures}', "");
Expect(0, 9215, '\P{^controlpictures}', "");
Expect(1, 9279, '\p{-Control-Pictures}', "");
Expect(0, 9279, '\p{^-Control-Pictures}', "");
Expect(0, 9279, '\P{-Control-Pictures}', "");
Expect(1, 9279, '\P{^-Control-Pictures}', "");
Expect(0, 9215, '\p{-Control-Pictures}', "");
Expect(1, 9215, '\p{^-Control-Pictures}', "");
Expect(1, 9215, '\P{-Control-Pictures}', "");
Expect(0, 9215, '\P{^-Control-Pictures}', "");
Error('\p{-isCONTROL/a/pictures}');
Error('\P{-isCONTROL/a/pictures}');
Expect(1, 9279, '\p{iscontrolpictures}', "");
Expect(0, 9279, '\p{^iscontrolpictures}', "");
Expect(0, 9279, '\P{iscontrolpictures}', "");
Expect(1, 9279, '\P{^iscontrolpictures}', "");
Expect(0, 9215, '\p{iscontrolpictures}', "");
Expect(1, 9215, '\p{^iscontrolpictures}', "");
Expect(1, 9215, '\P{iscontrolpictures}', "");
Expect(0, 9215, '\P{^iscontrolpictures}', "");
Expect(1, 9279, '\p{-_Iscontrol_pictures}', "");
Expect(0, 9279, '\p{^-_Iscontrol_pictures}', "");
Expect(0, 9279, '\P{-_Iscontrol_pictures}', "");
Expect(1, 9279, '\P{^-_Iscontrol_pictures}', "");
Expect(0, 9215, '\p{-_Iscontrol_pictures}', "");
Expect(1, 9215, '\p{^-_Iscontrol_pictures}', "");
Expect(1, 9215, '\P{-_Iscontrol_pictures}', "");
Expect(0, 9215, '\P{^-_Iscontrol_pictures}', "");
Error('\p{  In_Control:=pictures}');
Error('\P{  In_Control:=pictures}');
Expect(1, 9279, '\p{incontrolpictures}', "");
Expect(0, 9279, '\p{^incontrolpictures}', "");
Expect(0, 9279, '\P{incontrolpictures}', "");
Expect(1, 9279, '\P{^incontrolpictures}', "");
Expect(0, 9215, '\p{incontrolpictures}', "");
Expect(1, 9215, '\p{^incontrolpictures}', "");
Expect(1, 9215, '\P{incontrolpictures}', "");
Expect(0, 9215, '\P{^incontrolpictures}', "");
Expect(1, 9279, '\p{ in_CONTROL-Pictures}', "");
Expect(0, 9279, '\p{^ in_CONTROL-Pictures}', "");
Expect(0, 9279, '\P{ in_CONTROL-Pictures}', "");
Expect(1, 9279, '\P{^ in_CONTROL-Pictures}', "");
Expect(0, 9215, '\p{ in_CONTROL-Pictures}', "");
Expect(1, 9215, '\p{^ in_CONTROL-Pictures}', "");
Expect(1, 9215, '\P{ in_CONTROL-Pictures}', "");
Expect(0, 9215, '\P{^ in_CONTROL-Pictures}', "");
Error('\p{_	latin-extended_a/a/}');
Error('\P{_	latin-extended_a/a/}');
Expect(1, 383, '\p{latinextendeda}', "");
Expect(0, 383, '\p{^latinextendeda}', "");
Expect(0, 383, '\P{latinextendeda}', "");
Expect(1, 383, '\P{^latinextendeda}', "");
Expect(0, 255, '\p{latinextendeda}', "");
Expect(1, 255, '\p{^latinextendeda}', "");
Expect(1, 255, '\P{latinextendeda}', "");
Expect(0, 255, '\P{^latinextendeda}', "");
Expect(1, 383, '\p{ _LATIN	extended A}', "");
Expect(0, 383, '\p{^ _LATIN	extended A}', "");
Expect(0, 383, '\P{ _LATIN	extended A}', "");
Expect(1, 383, '\P{^ _LATIN	extended A}', "");
Expect(0, 255, '\p{ _LATIN	extended A}', "");
Expect(1, 255, '\p{^ _LATIN	extended A}', "");
Expect(1, 255, '\P{ _LATIN	extended A}', "");
Expect(0, 255, '\P{^ _LATIN	extended A}', "");
Error('\p{-:=ISLatin extended A}');
Error('\P{-:=ISLatin extended A}');
Expect(1, 383, '\p{islatinextendeda}', "");
Expect(0, 383, '\p{^islatinextendeda}', "");
Expect(0, 383, '\P{islatinextendeda}', "");
Expect(1, 383, '\P{^islatinextendeda}', "");
Expect(0, 255, '\p{islatinextendeda}', "");
Expect(1, 255, '\p{^islatinextendeda}', "");
Expect(1, 255, '\P{islatinextendeda}', "");
Expect(0, 255, '\P{^islatinextendeda}', "");
Expect(1, 383, '\p{	is	Latin-EXTENDEDA}', "");
Expect(0, 383, '\p{^	is	Latin-EXTENDEDA}', "");
Expect(0, 383, '\P{	is	Latin-EXTENDEDA}', "");
Expect(1, 383, '\P{^	is	Latin-EXTENDEDA}', "");
Expect(0, 255, '\p{	is	Latin-EXTENDEDA}', "");
Expect(1, 255, '\p{^	is	Latin-EXTENDEDA}', "");
Expect(1, 255, '\P{	is	Latin-EXTENDEDA}', "");
Expect(0, 255, '\P{^	is	Latin-EXTENDEDA}', "");
Error('\p{	In/a/latin-EXTENDED	a}');
Error('\P{	In/a/latin-EXTENDED	a}');
Expect(1, 383, '\p{inlatinextendeda}', "");
Expect(0, 383, '\p{^inlatinextendeda}', "");
Expect(0, 383, '\P{inlatinextendeda}', "");
Expect(1, 383, '\P{^inlatinextendeda}', "");
Expect(0, 255, '\p{inlatinextendeda}', "");
Expect(1, 255, '\p{^inlatinextendeda}', "");
Expect(1, 255, '\P{inlatinextendeda}', "");
Expect(0, 255, '\P{^inlatinextendeda}', "");
Expect(1, 383, '\p{-in_Latin_extended_a}', "");
Expect(0, 383, '\p{^-in_Latin_extended_a}', "");
Expect(0, 383, '\P{-in_Latin_extended_a}', "");
Expect(1, 383, '\P{^-in_Latin_extended_a}', "");
Expect(0, 255, '\p{-in_Latin_extended_a}', "");
Expect(1, 255, '\p{^-in_Latin_extended_a}', "");
Expect(1, 255, '\P{-in_Latin_extended_a}', "");
Expect(0, 255, '\P{^-in_Latin_extended_a}', "");
Error('\p{-	gujarati:=}');
Error('\P{-	gujarati:=}');
Expect(1, 2691, '\p{gujarati}', "");
Expect(0, 2691, '\p{^gujarati}', "");
Expect(0, 2691, '\P{gujarati}', "");
Expect(1, 2691, '\P{^gujarati}', "");
Expect(0, 2688, '\p{gujarati}', "");
Expect(1, 2688, '\p{^gujarati}', "");
Expect(1, 2688, '\P{gujarati}', "");
Expect(0, 2688, '\P{^gujarati}', "");
Expect(1, 2691, '\p{_gujarati}', "");
Expect(0, 2691, '\p{^_gujarati}', "");
Expect(0, 2691, '\P{_gujarati}', "");
Expect(1, 2691, '\P{^_gujarati}', "");
Expect(0, 2688, '\p{_gujarati}', "");
Expect(1, 2688, '\p{^_gujarati}', "");
Expect(1, 2688, '\P{_gujarati}', "");
Expect(0, 2688, '\P{^_gujarati}', "");
Error('\p{_/a/Is_gujarati}');
Error('\P{_/a/Is_gujarati}');
Expect(1, 2691, '\p{isgujarati}', "");
Expect(0, 2691, '\p{^isgujarati}', "");
Expect(0, 2691, '\P{isgujarati}', "");
Expect(1, 2691, '\P{^isgujarati}', "");
Expect(0, 2688, '\p{isgujarati}', "");
Expect(1, 2688, '\p{^isgujarati}', "");
Expect(1, 2688, '\P{isgujarati}', "");
Expect(0, 2688, '\P{^isgujarati}', "");
Expect(1, 2691, '\p{-_ISGujarati}', "");
Expect(0, 2691, '\p{^-_ISGujarati}', "");
Expect(0, 2691, '\P{-_ISGujarati}', "");
Expect(1, 2691, '\P{^-_ISGujarati}', "");
Expect(0, 2688, '\p{-_ISGujarati}', "");
Expect(1, 2688, '\p{^-_ISGujarati}', "");
Expect(1, 2688, '\P{-_ISGujarati}', "");
Expect(0, 2688, '\P{^-_ISGujarati}', "");
Error('\p{ Gujr:=}');
Error('\P{ Gujr:=}');
Expect(1, 2691, '\p{gujr}', "");
Expect(0, 2691, '\p{^gujr}', "");
Expect(0, 2691, '\P{gujr}', "");
Expect(1, 2691, '\P{^gujr}', "");
Expect(0, 2688, '\p{gujr}', "");
Expect(1, 2688, '\p{^gujr}', "");
Expect(1, 2688, '\P{gujr}', "");
Expect(0, 2688, '\P{^gujr}', "");
Expect(1, 2691, '\p{	-Gujr}', "");
Expect(0, 2691, '\p{^	-Gujr}', "");
Expect(0, 2691, '\P{	-Gujr}', "");
Expect(1, 2691, '\P{^	-Gujr}', "");
Expect(0, 2688, '\p{	-Gujr}', "");
Expect(1, 2688, '\p{^	-Gujr}', "");
Expect(1, 2688, '\P{	-Gujr}', "");
Expect(0, 2688, '\P{^	-Gujr}', "");
Error('\p{ is/a/GUJR}');
Error('\P{ is/a/GUJR}');
Expect(1, 2691, '\p{isgujr}', "");
Expect(0, 2691, '\p{^isgujr}', "");
Expect(0, 2691, '\P{isgujr}', "");
Expect(1, 2691, '\P{^isgujr}', "");
Expect(0, 2688, '\p{isgujr}', "");
Expect(1, 2688, '\p{^isgujr}', "");
Expect(1, 2688, '\P{isgujr}', "");
Expect(0, 2688, '\P{^isgujr}', "");
Expect(1, 2691, '\p{	ISgujr}', "");
Expect(0, 2691, '\p{^	ISgujr}', "");
Expect(0, 2691, '\P{	ISgujr}', "");
Expect(1, 2691, '\P{^	ISgujr}', "");
Expect(0, 2688, '\p{	ISgujr}', "");
Expect(1, 2688, '\p{^	ISgujr}', "");
Expect(1, 2688, '\P{	ISgujr}', "");
Expect(0, 2688, '\P{^	ISgujr}', "");
Error('\p{:= In-ORIYA}');
Error('\P{:= In-ORIYA}');
Expect(1, 2943, '\p{inoriya}', "");
Expect(0, 2943, '\p{^inoriya}', "");
Expect(0, 2943, '\P{inoriya}', "");
Expect(1, 2943, '\P{^inoriya}', "");
Expect(0, 2815, '\p{inoriya}', "");
Expect(1, 2815, '\p{^inoriya}', "");
Expect(1, 2815, '\P{inoriya}', "");
Expect(0, 2815, '\P{^inoriya}', "");
Expect(1, 2943, '\p{  In_Oriya}', "");
Expect(0, 2943, '\p{^  In_Oriya}', "");
Expect(0, 2943, '\P{  In_Oriya}', "");
Expect(1, 2943, '\P{^  In_Oriya}', "");
Expect(0, 2815, '\p{  In_Oriya}', "");
Expect(1, 2815, '\p{^  In_Oriya}', "");
Expect(1, 2815, '\P{  In_Oriya}', "");
Expect(0, 2815, '\P{^  In_Oriya}', "");
Error('\p{ :=CJKUnifiedIDEOGRAPHS}');
Error('\P{ :=CJKUnifiedIDEOGRAPHS}');
Expect(1, 40959, '\p{cjkunifiedideographs}', "");
Expect(0, 40959, '\p{^cjkunifiedideographs}', "");
Expect(0, 40959, '\P{cjkunifiedideographs}', "");
Expect(1, 40959, '\P{^cjkunifiedideographs}', "");
Expect(0, 19967, '\p{cjkunifiedideographs}', "");
Expect(1, 19967, '\p{^cjkunifiedideographs}', "");
Expect(1, 19967, '\P{cjkunifiedideographs}', "");
Expect(0, 19967, '\P{^cjkunifiedideographs}', "");
Expect(1, 40959, '\p{ CJK	UnifiedIdeographs}', "");
Expect(0, 40959, '\p{^ CJK	UnifiedIdeographs}', "");
Expect(0, 40959, '\P{ CJK	UnifiedIdeographs}', "");
Expect(1, 40959, '\P{^ CJK	UnifiedIdeographs}', "");
Expect(0, 19967, '\p{ CJK	UnifiedIdeographs}', "");
Expect(1, 19967, '\p{^ CJK	UnifiedIdeographs}', "");
Expect(1, 19967, '\P{ CJK	UnifiedIdeographs}', "");
Expect(0, 19967, '\P{^ CJK	UnifiedIdeographs}', "");
Error('\p{_/a/is cjk UNIFIED Ideographs}');
Error('\P{_/a/is cjk UNIFIED Ideographs}');
Expect(1, 40959, '\p{iscjkunifiedideographs}', "");
Expect(0, 40959, '\p{^iscjkunifiedideographs}', "");
Expect(0, 40959, '\P{iscjkunifiedideographs}', "");
Expect(1, 40959, '\P{^iscjkunifiedideographs}', "");
Expect(0, 19967, '\p{iscjkunifiedideographs}', "");
Expect(1, 19967, '\p{^iscjkunifiedideographs}', "");
Expect(1, 19967, '\P{iscjkunifiedideographs}', "");
Expect(0, 19967, '\P{^iscjkunifiedideographs}', "");
Expect(1, 40959, '\p{- iscjk	unified	IDEOGRAPHS}', "");
Expect(0, 40959, '\p{^- iscjk	unified	IDEOGRAPHS}', "");
Expect(0, 40959, '\P{- iscjk	unified	IDEOGRAPHS}', "");
Expect(1, 40959, '\P{^- iscjk	unified	IDEOGRAPHS}', "");
Expect(0, 19967, '\p{- iscjk	unified	IDEOGRAPHS}', "");
Expect(1, 19967, '\p{^- iscjk	unified	IDEOGRAPHS}', "");
Expect(1, 19967, '\P{- iscjk	unified	IDEOGRAPHS}', "");
Expect(0, 19967, '\P{^- iscjk	unified	IDEOGRAPHS}', "");
Error('\p{:=IN cjkUNIFIEDIDEOGRAPHS}');
Error('\P{:=IN cjkUNIFIEDIDEOGRAPHS}');
Expect(1, 40959, '\p{incjkunifiedideographs}', "");
Expect(0, 40959, '\p{^incjkunifiedideographs}', "");
Expect(0, 40959, '\P{incjkunifiedideographs}', "");
Expect(1, 40959, '\P{^incjkunifiedideographs}', "");
Expect(0, 19967, '\p{incjkunifiedideographs}', "");
Expect(1, 19967, '\p{^incjkunifiedideographs}', "");
Expect(1, 19967, '\P{incjkunifiedideographs}', "");
Expect(0, 19967, '\P{^incjkunifiedideographs}', "");
Expect(1, 40959, '\p{ -In_CJK_Unified_Ideographs}', "");
Expect(0, 40959, '\p{^ -In_CJK_Unified_Ideographs}', "");
Expect(0, 40959, '\P{ -In_CJK_Unified_Ideographs}', "");
Expect(1, 40959, '\P{^ -In_CJK_Unified_Ideographs}', "");
Expect(0, 19967, '\p{ -In_CJK_Unified_Ideographs}', "");
Expect(1, 19967, '\p{^ -In_CJK_Unified_Ideographs}', "");
Expect(1, 19967, '\P{ -In_CJK_Unified_Ideographs}', "");
Expect(0, 19967, '\P{^ -In_CJK_Unified_Ideographs}', "");
Error('\p{:= 	ID-Continue}');
Error('\P{:= 	ID-Continue}');
Expect(1, 57, '\p{idcontinue}', "");
Expect(0, 57, '\p{^idcontinue}', "");
Expect(0, 57, '\P{idcontinue}', "");
Expect(1, 57, '\P{^idcontinue}', "");
Expect(0, 47, '\p{idcontinue}', "");
Expect(1, 47, '\p{^idcontinue}', "");
Expect(1, 47, '\P{idcontinue}', "");
Expect(0, 47, '\P{^idcontinue}', "");
Expect(1, 57, '\p{ id-continue}', "");
Expect(0, 57, '\p{^ id-continue}', "");
Expect(0, 57, '\P{ id-continue}', "");
Expect(1, 57, '\P{^ id-continue}', "");
Expect(0, 47, '\p{ id-continue}', "");
Expect(1, 47, '\p{^ id-continue}', "");
Expect(1, 47, '\P{ id-continue}', "");
Expect(0, 47, '\P{^ id-continue}', "");
Error('\p{  Is	IDContinue:=}');
Error('\P{  Is	IDContinue:=}');
Expect(1, 57, '\p{isidcontinue}', "");
Expect(0, 57, '\p{^isidcontinue}', "");
Expect(0, 57, '\P{isidcontinue}', "");
Expect(1, 57, '\P{^isidcontinue}', "");
Expect(0, 47, '\p{isidcontinue}', "");
Expect(1, 47, '\p{^isidcontinue}', "");
Expect(1, 47, '\P{isidcontinue}', "");
Expect(0, 47, '\P{^isidcontinue}', "");
Expect(1, 57, '\p{ 	is_ID	Continue}', "");
Expect(0, 57, '\p{^ 	is_ID	Continue}', "");
Expect(0, 57, '\P{ 	is_ID	Continue}', "");
Expect(1, 57, '\P{^ 	is_ID	Continue}', "");
Expect(0, 47, '\p{ 	is_ID	Continue}', "");
Expect(1, 47, '\p{^ 	is_ID	Continue}', "");
Expect(1, 47, '\P{ 	is_ID	Continue}', "");
Expect(0, 47, '\P{^ 	is_ID	Continue}', "");
Error('\p{-:=IDC}');
Error('\P{-:=IDC}');
Expect(1, 57, '\p{idc}', "");
Expect(0, 57, '\p{^idc}', "");
Expect(0, 57, '\P{idc}', "");
Expect(1, 57, '\P{^idc}', "");
Expect(0, 47, '\p{idc}', "");
Expect(1, 47, '\p{^idc}', "");
Expect(1, 47, '\P{idc}', "");
Expect(0, 47, '\P{^idc}', "");
Expect(1, 57, '\p{_-IDC}', "");
Expect(0, 57, '\p{^_-IDC}', "");
Expect(0, 57, '\P{_-IDC}', "");
Expect(1, 57, '\P{^_-IDC}', "");
Expect(0, 47, '\p{_-IDC}', "");
Expect(1, 47, '\p{^_-IDC}', "");
Expect(1, 47, '\P{_-IDC}', "");
Expect(0, 47, '\P{^_-IDC}', "");
Error('\p{/a/ _Is_IDC}');
Error('\P{/a/ _Is_IDC}');
Expect(1, 57, '\p{isidc}', "");
Expect(0, 57, '\p{^isidc}', "");
Expect(0, 57, '\P{isidc}', "");
Expect(1, 57, '\P{^isidc}', "");
Expect(0, 47, '\p{isidc}', "");
Expect(1, 47, '\p{^isidc}', "");
Expect(1, 47, '\P{isidc}', "");
Expect(0, 47, '\P{^isidc}', "");
Expect(1, 57, '\p{ is_IDC}', "");
Expect(0, 57, '\p{^ is_IDC}', "");
Expect(0, 57, '\P{ is_IDC}', "");
Expect(1, 57, '\P{^ is_IDC}', "");
Expect(0, 47, '\p{ is_IDC}', "");
Expect(1, 47, '\p{^ is_IDC}', "");
Expect(1, 47, '\P{ is_IDC}', "");
Expect(0, 47, '\P{^ is_IDC}', "");
Error('\p{/a/ 	in_GLAGOLITIC}');
Error('\P{/a/ 	in_GLAGOLITIC}');
Expect(1, 11359, '\p{inglagolitic}', "");
Expect(0, 11359, '\p{^inglagolitic}', "");
Expect(0, 11359, '\P{inglagolitic}', "");
Expect(1, 11359, '\P{^inglagolitic}', "");
Expect(0, 11263, '\p{inglagolitic}', "");
Expect(1, 11263, '\p{^inglagolitic}', "");
Expect(1, 11263, '\P{inglagolitic}', "");
Expect(0, 11263, '\P{^inglagolitic}', "");
Expect(1, 11359, '\p{_-In	Glagolitic}', "");
Expect(0, 11359, '\p{^_-In	Glagolitic}', "");
Expect(0, 11359, '\P{_-In	Glagolitic}', "");
Expect(1, 11359, '\P{^_-In	Glagolitic}', "");
Expect(0, 11263, '\p{_-In	Glagolitic}', "");
Expect(1, 11263, '\p{^_-In	Glagolitic}', "");
Expect(1, 11263, '\P{_-In	Glagolitic}', "");
Expect(0, 11263, '\P{^_-In	Glagolitic}', "");
Error('\p{_	OPEN_Punctuation/a/}');
Error('\P{_	OPEN_Punctuation/a/}');
Expect(1, 40, '\p{openpunctuation}', "");
Expect(0, 40, '\p{^openpunctuation}', "");
Expect(0, 40, '\P{openpunctuation}', "");
Expect(1, 40, '\P{^openpunctuation}', "");
Expect(0, 39, '\p{openpunctuation}', "");
Expect(1, 39, '\p{^openpunctuation}', "");
Expect(1, 39, '\P{openpunctuation}', "");
Expect(0, 39, '\P{^openpunctuation}', "");
Expect(1, 40, '\p{		open	PUNCTUATION}', "");
Expect(0, 40, '\p{^		open	PUNCTUATION}', "");
Expect(0, 40, '\P{		open	PUNCTUATION}', "");
Expect(1, 40, '\P{^		open	PUNCTUATION}', "");
Expect(0, 39, '\p{		open	PUNCTUATION}', "");
Expect(1, 39, '\p{^		open	PUNCTUATION}', "");
Expect(1, 39, '\P{		open	PUNCTUATION}', "");
Expect(0, 39, '\P{^		open	PUNCTUATION}', "");
Error('\p{_/a/Is-OPENPunctuation}');
Error('\P{_/a/Is-OPENPunctuation}');
Expect(1, 40, '\p{isopenpunctuation}', "");
Expect(0, 40, '\p{^isopenpunctuation}', "");
Expect(0, 40, '\P{isopenpunctuation}', "");
Expect(1, 40, '\P{^isopenpunctuation}', "");
Expect(0, 39, '\p{isopenpunctuation}', "");
Expect(1, 39, '\p{^isopenpunctuation}', "");
Expect(1, 39, '\P{isopenpunctuation}', "");
Expect(0, 39, '\P{^isopenpunctuation}', "");
Expect(1, 40, '\p{	Is OpenPunctuation}', "");
Expect(0, 40, '\p{^	Is OpenPunctuation}', "");
Expect(0, 40, '\P{	Is OpenPunctuation}', "");
Expect(1, 40, '\P{^	Is OpenPunctuation}', "");
Expect(0, 39, '\p{	Is OpenPunctuation}', "");
Expect(1, 39, '\p{^	Is OpenPunctuation}', "");
Expect(1, 39, '\P{	Is OpenPunctuation}', "");
Expect(0, 39, '\P{^	Is OpenPunctuation}', "");
Error('\p{	/a/Ps}');
Error('\P{	/a/Ps}');
Expect(1, 40, '\p{ps}', "");
Expect(0, 40, '\p{^ps}', "");
Expect(0, 40, '\P{ps}', "");
Expect(1, 40, '\P{^ps}', "");
Expect(0, 39, '\p{ps}', "");
Expect(1, 39, '\p{^ps}', "");
Expect(1, 39, '\P{ps}', "");
Expect(0, 39, '\P{^ps}', "");
Expect(1, 40, '\p{	_PS}', "");
Expect(0, 40, '\p{^	_PS}', "");
Expect(0, 40, '\P{	_PS}', "");
Expect(1, 40, '\P{^	_PS}', "");
Expect(0, 39, '\p{	_PS}', "");
Expect(1, 39, '\p{^	_PS}', "");
Expect(1, 39, '\P{	_PS}', "");
Expect(0, 39, '\P{^	_PS}', "");
Error('\p{ Is	ps:=}');
Error('\P{ Is	ps:=}');
Expect(1, 40, '\p{isps}', "");
Expect(0, 40, '\p{^isps}', "");
Expect(0, 40, '\P{isps}', "");
Expect(1, 40, '\P{^isps}', "");
Expect(0, 39, '\p{isps}', "");
Expect(1, 39, '\p{^isps}', "");
Expect(1, 39, '\P{isps}', "");
Expect(0, 39, '\P{^isps}', "");
Expect(1, 40, '\p{ 	Is	ps}', "");
Expect(0, 40, '\p{^ 	Is	ps}', "");
Expect(0, 40, '\P{ 	Is	ps}', "");
Expect(1, 40, '\P{^ 	Is	ps}', "");
Expect(0, 39, '\p{ 	Is	ps}', "");
Expect(1, 39, '\p{^ 	Is	ps}', "");
Expect(1, 39, '\P{ 	Is	ps}', "");
Expect(0, 39, '\P{^ 	Is	ps}', "");
Error('\p{	-hangul:=}');
Error('\P{	-hangul:=}');
Expect(1, 4607, '\p{hangul}', "");
Expect(0, 4607, '\p{^hangul}', "");
Expect(0, 4607, '\P{hangul}', "");
Expect(1, 4607, '\P{^hangul}', "");
Expect(0, 4351, '\p{hangul}', "");
Expect(1, 4351, '\p{^hangul}', "");
Expect(1, 4351, '\P{hangul}', "");
Expect(0, 4351, '\P{^hangul}', "");
Expect(1, 4607, '\p{_Hangul}', "");
Expect(0, 4607, '\p{^_Hangul}', "");
Expect(0, 4607, '\P{_Hangul}', "");
Expect(1, 4607, '\P{^_Hangul}', "");
Expect(0, 4351, '\p{_Hangul}', "");
Expect(1, 4351, '\p{^_Hangul}', "");
Expect(1, 4351, '\P{_Hangul}', "");
Expect(0, 4351, '\P{^_Hangul}', "");
Error('\p{	Is/a/HANGUL}');
Error('\P{	Is/a/HANGUL}');
Expect(1, 4607, '\p{ishangul}', "");
Expect(0, 4607, '\p{^ishangul}', "");
Expect(0, 4607, '\P{ishangul}', "");
Expect(1, 4607, '\P{^ishangul}', "");
Expect(0, 4351, '\p{ishangul}', "");
Expect(1, 4351, '\p{^ishangul}', "");
Expect(1, 4351, '\P{ishangul}', "");
Expect(0, 4351, '\P{^ishangul}', "");
Expect(1, 4607, '\p{_IsHANGUL}', "");
Expect(0, 4607, '\p{^_IsHANGUL}', "");
Expect(0, 4607, '\P{_IsHANGUL}', "");
Expect(1, 4607, '\P{^_IsHANGUL}', "");
Expect(0, 4351, '\p{_IsHANGUL}', "");
Expect(1, 4351, '\p{^_IsHANGUL}', "");
Expect(1, 4351, '\P{_IsHANGUL}', "");
Expect(0, 4351, '\P{^_IsHANGUL}', "");
Error('\p{_/a/HANG}');
Error('\P{_/a/HANG}');
Expect(1, 4607, '\p{hang}', "");
Expect(0, 4607, '\p{^hang}', "");
Expect(0, 4607, '\P{hang}', "");
Expect(1, 4607, '\P{^hang}', "");
Expect(0, 4351, '\p{hang}', "");
Expect(1, 4351, '\p{^hang}', "");
Expect(1, 4351, '\P{hang}', "");
Expect(0, 4351, '\P{^hang}', "");
Expect(1, 4607, '\p{ _HANG}', "");
Expect(0, 4607, '\p{^ _HANG}', "");
Expect(0, 4607, '\P{ _HANG}', "");
Expect(1, 4607, '\P{^ _HANG}', "");
Expect(0, 4351, '\p{ _HANG}', "");
Expect(1, 4351, '\p{^ _HANG}', "");
Expect(1, 4351, '\P{ _HANG}', "");
Expect(0, 4351, '\P{^ _HANG}', "");
Error('\p{	/a/is Hang}');
Error('\P{	/a/is Hang}');
Expect(1, 4607, '\p{ishang}', "");
Expect(0, 4607, '\p{^ishang}', "");
Expect(0, 4607, '\P{ishang}', "");
Expect(1, 4607, '\P{^ishang}', "");
Expect(0, 4351, '\p{ishang}', "");
Expect(1, 4351, '\p{^ishang}', "");
Expect(1, 4351, '\P{ishang}', "");
Expect(0, 4351, '\P{^ishang}', "");
Expect(1, 4607, '\p{--IS-HANG}', "");
Expect(0, 4607, '\p{^--IS-HANG}', "");
Expect(0, 4607, '\P{--IS-HANG}', "");
Expect(1, 4607, '\P{^--IS-HANG}', "");
Expect(0, 4351, '\p{--IS-HANG}', "");
Expect(1, 4351, '\p{^--IS-HANG}', "");
Expect(1, 4351, '\P{--IS-HANG}', "");
Expect(0, 4351, '\P{^--IS-HANG}', "");
Error('\p{:=	_Cypriot}');
Error('\P{:=	_Cypriot}');
Expect(1, 67589, '\p{cypriot}', "");
Expect(0, 67589, '\p{^cypriot}', "");
Expect(0, 67589, '\P{cypriot}', "");
Expect(1, 67589, '\P{^cypriot}', "");
Expect(0, 67583, '\p{cypriot}', "");
Expect(1, 67583, '\p{^cypriot}', "");
Expect(1, 67583, '\P{cypriot}', "");
Expect(0, 67583, '\P{^cypriot}', "");
Expect(1, 67589, '\p{-Cypriot}', "");
Expect(0, 67589, '\p{^-Cypriot}', "");
Expect(0, 67589, '\P{-Cypriot}', "");
Expect(1, 67589, '\P{^-Cypriot}', "");
Expect(0, 67583, '\p{-Cypriot}', "");
Expect(1, 67583, '\p{^-Cypriot}', "");
Expect(1, 67583, '\P{-Cypriot}', "");
Expect(0, 67583, '\P{^-Cypriot}', "");
Error('\p{  IS:=Cypriot}');
Error('\P{  IS:=Cypriot}');
Expect(1, 67589, '\p{iscypriot}', "");
Expect(0, 67589, '\p{^iscypriot}', "");
Expect(0, 67589, '\P{iscypriot}', "");
Expect(1, 67589, '\P{^iscypriot}', "");
Expect(0, 67583, '\p{iscypriot}', "");
Expect(1, 67583, '\p{^iscypriot}', "");
Expect(1, 67583, '\P{iscypriot}', "");
Expect(0, 67583, '\P{^iscypriot}', "");
Expect(1, 67589, '\p{-	is-Cypriot}', "");
Expect(0, 67589, '\p{^-	is-Cypriot}', "");
Expect(0, 67589, '\P{-	is-Cypriot}', "");
Expect(1, 67589, '\P{^-	is-Cypriot}', "");
Expect(0, 67583, '\p{-	is-Cypriot}', "");
Expect(1, 67583, '\p{^-	is-Cypriot}', "");
Expect(1, 67583, '\P{-	is-Cypriot}', "");
Expect(0, 67583, '\P{^-	is-Cypriot}', "");
Error('\p{ CPRT/a/}');
Error('\P{ CPRT/a/}');
Expect(1, 67589, '\p{cprt}', "");
Expect(0, 67589, '\p{^cprt}', "");
Expect(0, 67589, '\P{cprt}', "");
Expect(1, 67589, '\P{^cprt}', "");
Expect(0, 67583, '\p{cprt}', "");
Expect(1, 67583, '\p{^cprt}', "");
Expect(1, 67583, '\P{cprt}', "");
Expect(0, 67583, '\P{^cprt}', "");
Expect(1, 67589, '\p{ -Cprt}', "");
Expect(0, 67589, '\p{^ -Cprt}', "");
Expect(0, 67589, '\P{ -Cprt}', "");
Expect(1, 67589, '\P{^ -Cprt}', "");
Expect(0, 67583, '\p{ -Cprt}', "");
Expect(1, 67583, '\p{^ -Cprt}', "");
Expect(1, 67583, '\P{ -Cprt}', "");
Expect(0, 67583, '\P{^ -Cprt}', "");
Error('\p{  Is-Cprt:=}');
Error('\P{  Is-Cprt:=}');
Expect(1, 67589, '\p{iscprt}', "");
Expect(0, 67589, '\p{^iscprt}', "");
Expect(0, 67589, '\P{iscprt}', "");
Expect(1, 67589, '\P{^iscprt}', "");
Expect(0, 67583, '\p{iscprt}', "");
Expect(1, 67583, '\p{^iscprt}', "");
Expect(1, 67583, '\P{iscprt}', "");
Expect(0, 67583, '\P{^iscprt}', "");
Expect(1, 67589, '\p{_-IS CPRT}', "");
Expect(0, 67589, '\p{^_-IS CPRT}', "");
Expect(0, 67589, '\P{_-IS CPRT}', "");
Expect(1, 67589, '\P{^_-IS CPRT}', "");
Expect(0, 67583, '\p{_-IS CPRT}', "");
Expect(1, 67583, '\p{^_-IS CPRT}', "");
Expect(1, 67583, '\P{_-IS CPRT}', "");
Expect(0, 67583, '\P{^_-IS CPRT}', "");
Error('\p{:=__Byzantine-MUSICAL_symbols}');
Error('\P{:=__Byzantine-MUSICAL_symbols}');
Expect(1, 119039, '\p{byzantinemusicalsymbols}', "");
Expect(0, 119039, '\p{^byzantinemusicalsymbols}', "");
Expect(0, 119039, '\P{byzantinemusicalsymbols}', "");
Expect(1, 119039, '\P{^byzantinemusicalsymbols}', "");
Expect(0, 118783, '\p{byzantinemusicalsymbols}', "");
Expect(1, 118783, '\p{^byzantinemusicalsymbols}', "");
Expect(1, 118783, '\P{byzantinemusicalsymbols}', "");
Expect(0, 118783, '\P{^byzantinemusicalsymbols}', "");
Expect(1, 119039, '\p{_Byzantine	MUSICAL Symbols}', "");
Expect(0, 119039, '\p{^_Byzantine	MUSICAL Symbols}', "");
Expect(0, 119039, '\P{_Byzantine	MUSICAL Symbols}', "");
Expect(1, 119039, '\P{^_Byzantine	MUSICAL Symbols}', "");
Expect(0, 118783, '\p{_Byzantine	MUSICAL Symbols}', "");
Expect(1, 118783, '\p{^_Byzantine	MUSICAL Symbols}', "");
Expect(1, 118783, '\P{_Byzantine	MUSICAL Symbols}', "");
Expect(0, 118783, '\P{^_Byzantine	MUSICAL Symbols}', "");
Error('\p{/a/-IsBYZANTINE	MUSICAL-symbols}');
Error('\P{/a/-IsBYZANTINE	MUSICAL-symbols}');
Expect(1, 119039, '\p{isbyzantinemusicalsymbols}', "");
Expect(0, 119039, '\p{^isbyzantinemusicalsymbols}', "");
Expect(0, 119039, '\P{isbyzantinemusicalsymbols}', "");
Expect(1, 119039, '\P{^isbyzantinemusicalsymbols}', "");
Expect(0, 118783, '\p{isbyzantinemusicalsymbols}', "");
Expect(1, 118783, '\p{^isbyzantinemusicalsymbols}', "");
Expect(1, 118783, '\P{isbyzantinemusicalsymbols}', "");
Expect(0, 118783, '\P{^isbyzantinemusicalsymbols}', "");
Expect(1, 119039, '\p{__is BYZANTINE-musical Symbols}', "");
Expect(0, 119039, '\p{^__is BYZANTINE-musical Symbols}', "");
Expect(0, 119039, '\P{__is BYZANTINE-musical Symbols}', "");
Expect(1, 119039, '\P{^__is BYZANTINE-musical Symbols}', "");
Expect(0, 118783, '\p{__is BYZANTINE-musical Symbols}', "");
Expect(1, 118783, '\p{^__is BYZANTINE-musical Symbols}', "");
Expect(1, 118783, '\P{__is BYZANTINE-musical Symbols}', "");
Expect(0, 118783, '\P{^__is BYZANTINE-musical Symbols}', "");
Error('\p{	/a/IN BYZANTINE MUSICAL Symbols}');
Error('\P{	/a/IN BYZANTINE MUSICAL Symbols}');
Expect(1, 119039, '\p{inbyzantinemusicalsymbols}', "");
Expect(0, 119039, '\p{^inbyzantinemusicalsymbols}', "");
Expect(0, 119039, '\P{inbyzantinemusicalsymbols}', "");
Expect(1, 119039, '\P{^inbyzantinemusicalsymbols}', "");
Expect(0, 118783, '\p{inbyzantinemusicalsymbols}', "");
Expect(1, 118783, '\p{^inbyzantinemusicalsymbols}', "");
Expect(1, 118783, '\P{inbyzantinemusicalsymbols}', "");
Expect(0, 118783, '\P{^inbyzantinemusicalsymbols}', "");
Expect(1, 119039, '\p{ in-Byzantine_musical-Symbols}', "");
Expect(0, 119039, '\p{^ in-Byzantine_musical-Symbols}', "");
Expect(0, 119039, '\P{ in-Byzantine_musical-Symbols}', "");
Expect(1, 119039, '\P{^ in-Byzantine_musical-Symbols}', "");
Expect(0, 118783, '\p{ in-Byzantine_musical-Symbols}', "");
Expect(1, 118783, '\p{^ in-Byzantine_musical-Symbols}', "");
Expect(1, 118783, '\P{ in-Byzantine_musical-Symbols}', "");
Expect(0, 118783, '\P{^ in-Byzantine_musical-Symbols}', "");
Error('\p{/a/-posixupper}');
Error('\P{/a/-posixupper}');
Expect(1, 90, '\p{posixupper}', "");
Expect(0, 90, '\p{^posixupper}', "");
Expect(0, 90, '\P{posixupper}', "");
Expect(1, 90, '\P{^posixupper}', "");
Expect(0, 64, '\p{posixupper}', "");
Expect(1, 64, '\p{^posixupper}', "");
Expect(1, 64, '\P{posixupper}', "");
Expect(0, 64, '\P{^posixupper}', "");
Expect(1, 90, '\p{ -posixupper}', "");
Expect(0, 90, '\p{^ -posixupper}', "");
Expect(0, 90, '\P{ -posixupper}', "");
Expect(1, 90, '\P{^ -posixupper}', "");
Expect(0, 64, '\p{ -posixupper}', "");
Expect(1, 64, '\p{^ -posixupper}', "");
Expect(1, 64, '\P{ -posixupper}', "");
Expect(0, 64, '\P{^ -posixupper}', "");
Error('\p{	:=Isposixupper}');
Error('\P{	:=Isposixupper}');
Expect(1, 90, '\p{isposixupper}', "");
Expect(0, 90, '\p{^isposixupper}', "");
Expect(0, 90, '\P{isposixupper}', "");
Expect(1, 90, '\P{^isposixupper}', "");
Expect(0, 64, '\p{isposixupper}', "");
Expect(1, 64, '\p{^isposixupper}', "");
Expect(1, 64, '\P{isposixupper}', "");
Expect(0, 64, '\P{^isposixupper}', "");
Expect(1, 90, '\p{		IS	posixupper}', "");
Expect(0, 90, '\p{^		IS	posixupper}', "");
Expect(0, 90, '\P{		IS	posixupper}', "");
Expect(1, 90, '\P{^		IS	posixupper}', "");
Expect(0, 64, '\p{		IS	posixupper}', "");
Expect(1, 64, '\p{^		IS	posixupper}', "");
Expect(1, 64, '\P{		IS	posixupper}', "");
Expect(0, 64, '\P{^		IS	posixupper}', "");
Error('\p{/a/xposixpunct}');
Error('\P{/a/xposixpunct}');
Expect(1, 47, '\p{xposixpunct}', "");
Expect(0, 47, '\p{^xposixpunct}', "");
Expect(0, 47, '\P{xposixpunct}', "");
Expect(1, 47, '\P{^xposixpunct}', "");
Expect(0, 32, '\p{xposixpunct}', "");
Expect(1, 32, '\p{^xposixpunct}', "");
Expect(1, 32, '\P{xposixpunct}', "");
Expect(0, 32, '\P{^xposixpunct}', "");
Expect(1, 47, '\p{ -XPOSIXPUNCT}', "");
Expect(0, 47, '\p{^ -XPOSIXPUNCT}', "");
Expect(0, 47, '\P{ -XPOSIXPUNCT}', "");
Expect(1, 47, '\P{^ -XPOSIXPUNCT}', "");
Expect(0, 32, '\p{ -XPOSIXPUNCT}', "");
Expect(1, 32, '\p{^ -XPOSIXPUNCT}', "");
Expect(1, 32, '\P{ -XPOSIXPUNCT}', "");
Expect(0, 32, '\P{^ -XPOSIXPUNCT}', "");
Error('\p{/a/ 	isxposixpunct}');
Error('\P{/a/ 	isxposixpunct}');
Expect(1, 47, '\p{isxposixpunct}', "");
Expect(0, 47, '\p{^isxposixpunct}', "");
Expect(0, 47, '\P{isxposixpunct}', "");
Expect(1, 47, '\P{^isxposixpunct}', "");
Expect(0, 32, '\p{isxposixpunct}', "");
Expect(1, 32, '\p{^isxposixpunct}', "");
Expect(1, 32, '\P{isxposixpunct}', "");
Expect(0, 32, '\P{^isxposixpunct}', "");
Expect(1, 47, '\p{ IS XPosixPunct}', "");
Expect(0, 47, '\p{^ IS XPosixPunct}', "");
Expect(0, 47, '\P{ IS XPosixPunct}', "");
Expect(1, 47, '\P{^ IS XPosixPunct}', "");
Expect(0, 32, '\p{ IS XPosixPunct}', "");
Expect(1, 32, '\p{^ IS XPosixPunct}', "");
Expect(1, 32, '\P{ IS XPosixPunct}', "");
Expect(0, 32, '\P{^ IS XPosixPunct}', "");
Error('\p{ _In:=Armenian}');
Error('\P{ _In:=Armenian}');
Expect(1, 1423, '\p{inarmenian}', "");
Expect(0, 1423, '\p{^inarmenian}', "");
Expect(0, 1423, '\P{inarmenian}', "");
Expect(1, 1423, '\P{^inarmenian}', "");
Expect(0, 1327, '\p{inarmenian}', "");
Expect(1, 1327, '\p{^inarmenian}', "");
Expect(1, 1327, '\P{inarmenian}', "");
Expect(0, 1327, '\P{^inarmenian}', "");
Expect(1, 1423, '\p{-_in-armenian}', "");
Expect(0, 1423, '\p{^-_in-armenian}', "");
Expect(0, 1423, '\P{-_in-armenian}', "");
Expect(1, 1423, '\P{^-_in-armenian}', "");
Expect(0, 1327, '\p{-_in-armenian}', "");
Expect(1, 1327, '\p{^-_in-armenian}', "");
Expect(1, 1327, '\P{-_in-armenian}', "");
Expect(0, 1327, '\P{^-_in-armenian}', "");
Error('\p{_:=POSIXALPHA}');
Error('\P{_:=POSIXALPHA}');
Expect(1, 90, '\p{posixalpha}', "");
Expect(0, 90, '\p{^posixalpha}', "");
Expect(0, 90, '\P{posixalpha}', "");
Expect(1, 90, '\P{^posixalpha}', "");
Expect(0, 64, '\p{posixalpha}', "");
Expect(1, 64, '\p{^posixalpha}', "");
Expect(1, 64, '\P{posixalpha}', "");
Expect(0, 64, '\P{^posixalpha}', "");
Expect(1, 90, '\p{	PosixAlpha}', "");
Expect(0, 90, '\p{^	PosixAlpha}', "");
Expect(0, 90, '\P{	PosixAlpha}', "");
Expect(1, 90, '\P{^	PosixAlpha}', "");
Expect(0, 64, '\p{	PosixAlpha}', "");
Expect(1, 64, '\p{^	PosixAlpha}', "");
Expect(1, 64, '\P{	PosixAlpha}', "");
Expect(0, 64, '\P{^	PosixAlpha}', "");
Error('\p{/a/-Is-PosixAlpha}');
Error('\P{/a/-Is-PosixAlpha}');
Expect(1, 90, '\p{isposixalpha}', "");
Expect(0, 90, '\p{^isposixalpha}', "");
Expect(0, 90, '\P{isposixalpha}', "");
Expect(1, 90, '\P{^isposixalpha}', "");
Expect(0, 64, '\p{isposixalpha}', "");
Expect(1, 64, '\p{^isposixalpha}', "");
Expect(1, 64, '\P{isposixalpha}', "");
Expect(0, 64, '\P{^isposixalpha}', "");
Expect(1, 90, '\p{_Is_PosixAlpha}', "");
Expect(0, 90, '\p{^_Is_PosixAlpha}', "");
Expect(0, 90, '\P{_Is_PosixAlpha}', "");
Expect(1, 90, '\P{^_Is_PosixAlpha}', "");
Expect(0, 64, '\p{_Is_PosixAlpha}', "");
Expect(1, 64, '\p{^_Is_PosixAlpha}', "");
Expect(1, 64, '\P{_Is_PosixAlpha}', "");
Expect(0, 64, '\P{^_Is_PosixAlpha}', "");
Error('\p{	_Paragraph/a/Separator}');
Error('\P{	_Paragraph/a/Separator}');
Expect(1, 8233, '\p{paragraphseparator}', "");
Expect(0, 8233, '\p{^paragraphseparator}', "");
Expect(0, 8233, '\P{paragraphseparator}', "");
Expect(1, 8233, '\P{^paragraphseparator}', "");
Expect(0, 8232, '\p{paragraphseparator}', "");
Expect(1, 8232, '\p{^paragraphseparator}', "");
Expect(1, 8232, '\P{paragraphseparator}', "");
Expect(0, 8232, '\P{^paragraphseparator}', "");
Expect(1, 8233, '\p{	-Paragraph-separator}', "");
Expect(0, 8233, '\p{^	-Paragraph-separator}', "");
Expect(0, 8233, '\P{	-Paragraph-separator}', "");
Expect(1, 8233, '\P{^	-Paragraph-separator}', "");
Expect(0, 8232, '\p{	-Paragraph-separator}', "");
Expect(1, 8232, '\p{^	-Paragraph-separator}', "");
Expect(1, 8232, '\P{	-Paragraph-separator}', "");
Expect(0, 8232, '\P{^	-Paragraph-separator}', "");
Error('\p{_:=Isparagraph SEPARATOR}');
Error('\P{_:=Isparagraph SEPARATOR}');
Expect(1, 8233, '\p{isparagraphseparator}', "");
Expect(0, 8233, '\p{^isparagraphseparator}', "");
Expect(0, 8233, '\P{isparagraphseparator}', "");
Expect(1, 8233, '\P{^isparagraphseparator}', "");
Expect(0, 8232, '\p{isparagraphseparator}', "");
Expect(1, 8232, '\p{^isparagraphseparator}', "");
Expect(1, 8232, '\P{isparagraphseparator}', "");
Expect(0, 8232, '\P{^isparagraphseparator}', "");
Expect(1, 8233, '\p{-_Is-Paragraph	Separator}', "");
Expect(0, 8233, '\p{^-_Is-Paragraph	Separator}', "");
Expect(0, 8233, '\P{-_Is-Paragraph	Separator}', "");
Expect(1, 8233, '\P{^-_Is-Paragraph	Separator}', "");
Expect(0, 8232, '\p{-_Is-Paragraph	Separator}', "");
Expect(1, 8232, '\p{^-_Is-Paragraph	Separator}', "");
Expect(1, 8232, '\P{-_Is-Paragraph	Separator}', "");
Expect(0, 8232, '\P{^-_Is-Paragraph	Separator}', "");
Error('\p{:=zp}');
Error('\P{:=zp}');
Expect(1, 8233, '\p{zp}', "");
Expect(0, 8233, '\p{^zp}', "");
Expect(0, 8233, '\P{zp}', "");
Expect(1, 8233, '\P{^zp}', "");
Expect(0, 8232, '\p{zp}', "");
Expect(1, 8232, '\p{^zp}', "");
Expect(1, 8232, '\P{zp}', "");
Expect(0, 8232, '\P{^zp}', "");
Expect(1, 8233, '\p{ _ZP}', "");
Expect(0, 8233, '\p{^ _ZP}', "");
Expect(0, 8233, '\P{ _ZP}', "");
Expect(1, 8233, '\P{^ _ZP}', "");
Expect(0, 8232, '\p{ _ZP}', "");
Expect(1, 8232, '\p{^ _ZP}', "");
Expect(1, 8232, '\P{ _ZP}', "");
Expect(0, 8232, '\P{^ _ZP}', "");
Error('\p{__Is	ZP:=}');
Error('\P{__Is	ZP:=}');
Expect(1, 8233, '\p{iszp}', "");
Expect(0, 8233, '\p{^iszp}', "");
Expect(0, 8233, '\P{iszp}', "");
Expect(1, 8233, '\P{^iszp}', "");
Expect(0, 8232, '\p{iszp}', "");
Expect(1, 8232, '\p{^iszp}', "");
Expect(1, 8232, '\P{iszp}', "");
Expect(0, 8232, '\P{^iszp}', "");
Expect(1, 8233, '\p{_is-Zp}', "");
Expect(0, 8233, '\p{^_is-Zp}', "");
Expect(0, 8233, '\P{_is-Zp}', "");
Expect(1, 8233, '\P{^_is-Zp}', "");
Expect(0, 8232, '\p{_is-Zp}', "");
Expect(1, 8232, '\p{^_is-Zp}', "");
Expect(1, 8232, '\P{_is-Zp}', "");
Expect(0, 8232, '\P{^_is-Zp}', "");
Error('\p{  phags PA:=}');
Error('\P{  phags PA:=}');
Expect(1, 43127, '\p{phagspa}', "");
Expect(0, 43127, '\p{^phagspa}', "");
Expect(0, 43127, '\P{phagspa}', "");
Expect(1, 43127, '\P{^phagspa}', "");
Expect(0, 43071, '\p{phagspa}', "");
Expect(1, 43071, '\p{^phagspa}', "");
Expect(1, 43071, '\P{phagspa}', "");
Expect(0, 43071, '\P{^phagspa}', "");
Expect(1, 43127, '\p{__phags PA}', "");
Expect(0, 43127, '\p{^__phags PA}', "");
Expect(0, 43127, '\P{__phags PA}', "");
Expect(1, 43127, '\P{^__phags PA}', "");
Expect(0, 43071, '\p{__phags PA}', "");
Expect(1, 43071, '\p{^__phags PA}', "");
Expect(1, 43071, '\P{__phags PA}', "");
Expect(0, 43071, '\P{^__phags PA}', "");
Error('\p{	/a/Is-Phags	PA}');
Error('\P{	/a/Is-Phags	PA}');
Expect(1, 43127, '\p{isphagspa}', "");
Expect(0, 43127, '\p{^isphagspa}', "");
Expect(0, 43127, '\P{isphagspa}', "");
Expect(1, 43127, '\P{^isphagspa}', "");
Expect(0, 43071, '\p{isphagspa}', "");
Expect(1, 43071, '\p{^isphagspa}', "");
Expect(1, 43071, '\P{isphagspa}', "");
Expect(0, 43071, '\P{^isphagspa}', "");
Expect(1, 43127, '\p{Is_Phags Pa}', "");
Expect(0, 43127, '\p{^Is_Phags Pa}', "");
Expect(0, 43127, '\P{Is_Phags Pa}', "");
Expect(1, 43127, '\P{^Is_Phags Pa}', "");
Expect(0, 43071, '\p{Is_Phags Pa}', "");
Expect(1, 43071, '\p{^Is_Phags Pa}', "");
Expect(1, 43071, '\P{Is_Phags Pa}', "");
Expect(0, 43071, '\P{^Is_Phags Pa}', "");
Error('\p{:=--Phag}');
Error('\P{:=--Phag}');
Expect(1, 43127, '\p{phag}', "");
Expect(0, 43127, '\p{^phag}', "");
Expect(0, 43127, '\P{phag}', "");
Expect(1, 43127, '\P{^phag}', "");
Expect(0, 43071, '\p{phag}', "");
Expect(1, 43071, '\p{^phag}', "");
Expect(1, 43071, '\P{phag}', "");
Expect(0, 43071, '\P{^phag}', "");
Expect(1, 43127, '\p{_ phag}', "");
Expect(0, 43127, '\p{^_ phag}', "");
Expect(0, 43127, '\P{_ phag}', "");
Expect(1, 43127, '\P{^_ phag}', "");
Expect(0, 43071, '\p{_ phag}', "");
Expect(1, 43071, '\p{^_ phag}', "");
Expect(1, 43071, '\P{_ phag}', "");
Expect(0, 43071, '\P{^_ phag}', "");
Error('\p{ -Is/a/phag}');
Error('\P{ -Is/a/phag}');
Expect(1, 43127, '\p{isphag}', "");
Expect(0, 43127, '\p{^isphag}', "");
Expect(0, 43127, '\P{isphag}', "");
Expect(1, 43127, '\P{^isphag}', "");
Expect(0, 43071, '\p{isphag}', "");
Expect(1, 43071, '\p{^isphag}', "");
Expect(1, 43071, '\P{isphag}', "");
Expect(0, 43071, '\P{^isphag}', "");
Expect(1, 43127, '\p{  Is-PHAG}', "");
Expect(0, 43127, '\p{^  Is-PHAG}', "");
Expect(0, 43127, '\P{  Is-PHAG}', "");
Expect(1, 43127, '\P{^  Is-PHAG}', "");
Expect(0, 43071, '\p{  Is-PHAG}', "");
Expect(1, 43071, '\p{^  Is-PHAG}', "");
Expect(1, 43071, '\P{  Is-PHAG}', "");
Expect(0, 43071, '\P{^  Is-PHAG}', "");
Error('\p{_:=LETTER Number}');
Error('\P{_:=LETTER Number}');
Expect(1, 5872, '\p{letternumber}', "");
Expect(0, 5872, '\p{^letternumber}', "");
Expect(0, 5872, '\P{letternumber}', "");
Expect(1, 5872, '\P{^letternumber}', "");
Expect(0, 5869, '\p{letternumber}', "");
Expect(1, 5869, '\p{^letternumber}', "");
Expect(1, 5869, '\P{letternumber}', "");
Expect(0, 5869, '\P{^letternumber}', "");
Expect(1, 5872, '\p{_LETTER_Number}', "");
Expect(0, 5872, '\p{^_LETTER_Number}', "");
Expect(0, 5872, '\P{_LETTER_Number}', "");
Expect(1, 5872, '\P{^_LETTER_Number}', "");
Expect(0, 5869, '\p{_LETTER_Number}', "");
Expect(1, 5869, '\p{^_LETTER_Number}', "");
Expect(1, 5869, '\P{_LETTER_Number}', "");
Expect(0, 5869, '\P{^_LETTER_Number}', "");
Error('\p{ IS:=Letter	Number}');
Error('\P{ IS:=Letter	Number}');
Expect(1, 5872, '\p{isletternumber}', "");
Expect(0, 5872, '\p{^isletternumber}', "");
Expect(0, 5872, '\P{isletternumber}', "");
Expect(1, 5872, '\P{^isletternumber}', "");
Expect(0, 5869, '\p{isletternumber}', "");
Expect(1, 5869, '\p{^isletternumber}', "");
Expect(1, 5869, '\P{isletternumber}', "");
Expect(0, 5869, '\P{^isletternumber}', "");
Expect(1, 5872, '\p{-	is-Letter	Number}', "");
Expect(0, 5872, '\p{^-	is-Letter	Number}', "");
Expect(0, 5872, '\P{-	is-Letter	Number}', "");
Expect(1, 5872, '\P{^-	is-Letter	Number}', "");
Expect(0, 5869, '\p{-	is-Letter	Number}', "");
Expect(1, 5869, '\p{^-	is-Letter	Number}', "");
Expect(1, 5869, '\P{-	is-Letter	Number}', "");
Expect(0, 5869, '\P{^-	is-Letter	Number}', "");
Error('\p{ _Nl/a/}');
Error('\P{ _Nl/a/}');
Expect(1, 5872, '\p{nl}', "");
Expect(0, 5872, '\p{^nl}', "");
Expect(0, 5872, '\P{nl}', "");
Expect(1, 5872, '\P{^nl}', "");
Expect(0, 5869, '\p{nl}', "");
Expect(1, 5869, '\p{^nl}', "");
Expect(1, 5869, '\P{nl}', "");
Expect(0, 5869, '\P{^nl}', "");
Expect(1, 5872, '\p{-	NL}', "");
Expect(0, 5872, '\p{^-	NL}', "");
Expect(0, 5872, '\P{-	NL}', "");
Expect(1, 5872, '\P{^-	NL}', "");
Expect(0, 5869, '\p{-	NL}', "");
Expect(1, 5869, '\p{^-	NL}', "");
Expect(1, 5869, '\P{-	NL}', "");
Expect(0, 5869, '\P{^-	NL}', "");
Error('\p{-_IS	nl:=}');
Error('\P{-_IS	nl:=}');
Expect(1, 5872, '\p{isnl}', "");
Expect(0, 5872, '\p{^isnl}', "");
Expect(0, 5872, '\P{isnl}', "");
Expect(1, 5872, '\P{^isnl}', "");
Expect(0, 5869, '\p{isnl}', "");
Expect(1, 5869, '\p{^isnl}', "");
Expect(1, 5869, '\P{isnl}', "");
Expect(0, 5869, '\P{^isnl}', "");
Expect(1, 5872, '\p{--IS	Nl}', "");
Expect(0, 5872, '\p{^--IS	Nl}', "");
Expect(0, 5872, '\P{--IS	Nl}', "");
Expect(1, 5872, '\P{^--IS	Nl}', "");
Expect(0, 5869, '\p{--IS	Nl}', "");
Expect(1, 5869, '\p{^--IS	Nl}', "");
Expect(1, 5869, '\P{--IS	Nl}', "");
Expect(0, 5869, '\P{^--IS	Nl}', "");
Error('\p{_ number-Forms:=}');
Error('\P{_ number-Forms:=}');
Expect(1, 8591, '\p{numberforms}', "");
Expect(0, 8591, '\p{^numberforms}', "");
Expect(0, 8591, '\P{numberforms}', "");
Expect(1, 8591, '\P{^numberforms}', "");
Expect(0, 8527, '\p{numberforms}', "");
Expect(1, 8527, '\p{^numberforms}', "");
Expect(1, 8527, '\P{numberforms}', "");
Expect(0, 8527, '\P{^numberforms}', "");
Expect(1, 8591, '\p{_Number_FORMS}', "");
Expect(0, 8591, '\p{^_Number_FORMS}', "");
Expect(0, 8591, '\P{_Number_FORMS}', "");
Expect(1, 8591, '\P{^_Number_FORMS}', "");
Expect(0, 8527, '\p{_Number_FORMS}', "");
Expect(1, 8527, '\p{^_Number_FORMS}', "");
Expect(1, 8527, '\P{_Number_FORMS}', "");
Expect(0, 8527, '\P{^_Number_FORMS}', "");
Error('\p{-/a/ISNUMBER	Forms}');
Error('\P{-/a/ISNUMBER	Forms}');
Expect(1, 8591, '\p{isnumberforms}', "");
Expect(0, 8591, '\p{^isnumberforms}', "");
Expect(0, 8591, '\P{isnumberforms}', "");
Expect(1, 8591, '\P{^isnumberforms}', "");
Expect(0, 8527, '\p{isnumberforms}', "");
Expect(1, 8527, '\p{^isnumberforms}', "");
Expect(1, 8527, '\P{isnumberforms}', "");
Expect(0, 8527, '\P{^isnumberforms}', "");
Expect(1, 8591, '\p{ 	IS-numberFORMS}', "");
Expect(0, 8591, '\p{^ 	IS-numberFORMS}', "");
Expect(0, 8591, '\P{ 	IS-numberFORMS}', "");
Expect(1, 8591, '\P{^ 	IS-numberFORMS}', "");
Expect(0, 8527, '\p{ 	IS-numberFORMS}', "");
Expect(1, 8527, '\p{^ 	IS-numberFORMS}', "");
Expect(1, 8527, '\P{ 	IS-numberFORMS}', "");
Expect(0, 8527, '\P{^ 	IS-numberFORMS}', "");
Error('\p{_:=IN Number	forms}');
Error('\P{_:=IN Number	forms}');
Expect(1, 8591, '\p{innumberforms}', "");
Expect(0, 8591, '\p{^innumberforms}', "");
Expect(0, 8591, '\P{innumberforms}', "");
Expect(1, 8591, '\P{^innumberforms}', "");
Expect(0, 8527, '\p{innumberforms}', "");
Expect(1, 8527, '\p{^innumberforms}', "");
Expect(1, 8527, '\P{innumberforms}', "");
Expect(0, 8527, '\P{^innumberforms}', "");
Expect(1, 8591, '\p{-	IN-Number_forms}', "");
Expect(0, 8591, '\p{^-	IN-Number_forms}', "");
Expect(0, 8591, '\P{-	IN-Number_forms}', "");
Expect(1, 8591, '\P{^-	IN-Number_forms}', "");
Expect(0, 8527, '\p{-	IN-Number_forms}', "");
Expect(1, 8527, '\p{^-	IN-Number_forms}', "");
Expect(1, 8527, '\P{-	IN-Number_forms}', "");
Expect(0, 8527, '\P{^-	IN-Number_forms}', "");
Error('\p{		Alnum:=}');
Error('\P{		Alnum:=}');
Expect(1, 57, '\p{alnum}', "");
Expect(0, 57, '\p{^alnum}', "");
Expect(0, 57, '\P{alnum}', "");
Expect(1, 57, '\P{^alnum}', "");
Expect(0, 47, '\p{alnum}', "");
Expect(1, 47, '\p{^alnum}', "");
Expect(1, 47, '\P{alnum}', "");
Expect(0, 47, '\P{^alnum}', "");
Expect(1, 57, '\p{-	ALNUM}', "");
Expect(0, 57, '\p{^-	ALNUM}', "");
Expect(0, 57, '\P{-	ALNUM}', "");
Expect(1, 57, '\P{^-	ALNUM}', "");
Expect(0, 47, '\p{-	ALNUM}', "");
Expect(1, 47, '\p{^-	ALNUM}', "");
Expect(1, 47, '\P{-	ALNUM}', "");
Expect(0, 47, '\P{^-	ALNUM}', "");
Error('\p{-_xposixalnum:=}');
Error('\P{-_xposixalnum:=}');
Expect(1, 57, '\p{xposixalnum}', "");
Expect(0, 57, '\p{^xposixalnum}', "");
Expect(0, 57, '\P{xposixalnum}', "");
Expect(1, 57, '\P{^xposixalnum}', "");
Expect(0, 47, '\p{xposixalnum}', "");
Expect(1, 47, '\p{^xposixalnum}', "");
Expect(1, 47, '\P{xposixalnum}', "");
Expect(0, 47, '\P{^xposixalnum}', "");
Expect(1, 57, '\p{	xposixalnum}', "");
Expect(0, 57, '\p{^	xposixalnum}', "");
Expect(0, 57, '\P{	xposixalnum}', "");
Expect(1, 57, '\P{^	xposixalnum}', "");
Expect(0, 47, '\p{	xposixalnum}', "");
Expect(1, 47, '\p{^	xposixalnum}', "");
Expect(1, 47, '\P{	xposixalnum}', "");
Expect(0, 47, '\P{^	xposixalnum}', "");
Error('\p{ Is Alnum/a/}');
Error('\P{ Is Alnum/a/}');
Expect(1, 57, '\p{isalnum}', "");
Expect(0, 57, '\p{^isalnum}', "");
Expect(0, 57, '\P{isalnum}', "");
Expect(1, 57, '\P{^isalnum}', "");
Expect(0, 47, '\p{isalnum}', "");
Expect(1, 47, '\p{^isalnum}', "");
Expect(1, 47, '\P{isalnum}', "");
Expect(0, 47, '\P{^isalnum}', "");
Expect(1, 57, '\p{ 	Is	ALNUM}', "");
Expect(0, 57, '\p{^ 	Is	ALNUM}', "");
Expect(0, 57, '\P{ 	Is	ALNUM}', "");
Expect(1, 57, '\P{^ 	Is	ALNUM}', "");
Expect(0, 47, '\p{ 	Is	ALNUM}', "");
Expect(1, 47, '\p{^ 	Is	ALNUM}', "");
Expect(1, 47, '\P{ 	Is	ALNUM}', "");
Expect(0, 47, '\P{^ 	Is	ALNUM}', "");
Error('\p{--Is	XPOSIXALNUM:=}');
Error('\P{--Is	XPOSIXALNUM:=}');
Expect(1, 57, '\p{isxposixalnum}', "");
Expect(0, 57, '\p{^isxposixalnum}', "");
Expect(0, 57, '\P{isxposixalnum}', "");
Expect(1, 57, '\P{^isxposixalnum}', "");
Expect(0, 47, '\p{isxposixalnum}', "");
Expect(1, 47, '\p{^isxposixalnum}', "");
Expect(1, 47, '\P{isxposixalnum}', "");
Expect(0, 47, '\P{^isxposixalnum}', "");
Expect(1, 57, '\p{Is-XPosixAlnum}', "");
Expect(0, 57, '\p{^Is-XPosixAlnum}', "");
Expect(0, 57, '\P{Is-XPosixAlnum}', "");
Expect(1, 57, '\P{^Is-XPosixAlnum}', "");
Expect(0, 47, '\p{Is-XPosixAlnum}', "");
Expect(1, 47, '\p{^Is-XPosixAlnum}', "");
Expect(1, 47, '\P{Is-XPosixAlnum}', "");
Expect(0, 47, '\P{^Is-XPosixAlnum}', "");
Error('\p{_	In	Sundanese:=}');
Error('\P{_	In	Sundanese:=}');
Expect(1, 7103, '\p{insundanese}', "");
Expect(0, 7103, '\p{^insundanese}', "");
Expect(0, 7103, '\P{insundanese}', "");
Expect(1, 7103, '\P{^insundanese}', "");
Expect(0, 7039, '\p{insundanese}', "");
Expect(1, 7039, '\p{^insundanese}', "");
Expect(1, 7039, '\P{insundanese}', "");
Expect(0, 7039, '\P{^insundanese}', "");
Expect(1, 7103, '\p{ INsundanese}', "");
Expect(0, 7103, '\p{^ INsundanese}', "");
Expect(0, 7103, '\P{ INsundanese}', "");
Expect(1, 7103, '\P{^ INsundanese}', "");
Expect(0, 7039, '\p{ INsundanese}', "");
Expect(1, 7039, '\p{^ INsundanese}', "");
Expect(1, 7039, '\P{ INsundanese}', "");
Expect(0, 7039, '\P{^ INsundanese}', "");
Error('\p{	-arabic_PRESENTATION forms/a/B}');
Error('\P{	-arabic_PRESENTATION forms/a/B}');
Expect(1, 65279, '\p{arabicpresentationformsb}', "");
Expect(0, 65279, '\p{^arabicpresentationformsb}', "");
Expect(0, 65279, '\P{arabicpresentationformsb}', "");
Expect(1, 65279, '\P{^arabicpresentationformsb}', "");
Expect(0, 65135, '\p{arabicpresentationformsb}', "");
Expect(1, 65135, '\p{^arabicpresentationformsb}', "");
Expect(1, 65135, '\P{arabicpresentationformsb}', "");
Expect(0, 65135, '\P{^arabicpresentationformsb}', "");
Expect(1, 65279, '\p{ Arabic	presentation_forms b}', "");
Expect(0, 65279, '\p{^ Arabic	presentation_forms b}', "");
Expect(0, 65279, '\P{ Arabic	presentation_forms b}', "");
Expect(1, 65279, '\P{^ Arabic	presentation_forms b}', "");
Expect(0, 65135, '\p{ Arabic	presentation_forms b}', "");
Expect(1, 65135, '\p{^ Arabic	presentation_forms b}', "");
Expect(1, 65135, '\P{ Arabic	presentation_forms b}', "");
Expect(0, 65135, '\P{^ Arabic	presentation_forms b}', "");
Error('\p{_/a/is Arabic	Presentation	formsB}');
Error('\P{_/a/is Arabic	Presentation	formsB}');
Expect(1, 65279, '\p{isarabicpresentationformsb}', "");
Expect(0, 65279, '\p{^isarabicpresentationformsb}', "");
Expect(0, 65279, '\P{isarabicpresentationformsb}', "");
Expect(1, 65279, '\P{^isarabicpresentationformsb}', "");
Expect(0, 65135, '\p{isarabicpresentationformsb}', "");
Expect(1, 65135, '\p{^isarabicpresentationformsb}', "");
Expect(1, 65135, '\P{isarabicpresentationformsb}', "");
Expect(0, 65135, '\P{^isarabicpresentationformsb}', "");
Expect(1, 65279, '\p{IS arabic PRESENTATION	FORMS-B}', "");
Expect(0, 65279, '\p{^IS arabic PRESENTATION	FORMS-B}', "");
Expect(0, 65279, '\P{IS arabic PRESENTATION	FORMS-B}', "");
Expect(1, 65279, '\P{^IS arabic PRESENTATION	FORMS-B}', "");
Expect(0, 65135, '\p{IS arabic PRESENTATION	FORMS-B}', "");
Expect(1, 65135, '\p{^IS arabic PRESENTATION	FORMS-B}', "");
Expect(1, 65135, '\P{IS arabic PRESENTATION	FORMS-B}', "");
Expect(0, 65135, '\P{^IS arabic PRESENTATION	FORMS-B}', "");
Error('\p{- In ARABICPresentation Forms:=B}');
Error('\P{- In ARABICPresentation Forms:=B}');
Expect(1, 65279, '\p{inarabicpresentationformsb}', "");
Expect(0, 65279, '\p{^inarabicpresentationformsb}', "");
Expect(0, 65279, '\P{inarabicpresentationformsb}', "");
Expect(1, 65279, '\P{^inarabicpresentationformsb}', "");
Expect(0, 65135, '\p{inarabicpresentationformsb}', "");
Expect(1, 65135, '\p{^inarabicpresentationformsb}', "");
Expect(1, 65135, '\P{inarabicpresentationformsb}', "");
Expect(0, 65135, '\P{^inarabicpresentationformsb}', "");
Expect(1, 65279, '\p{-_In	ARABIC-presentationforms_b}', "");
Expect(0, 65279, '\p{^-_In	ARABIC-presentationforms_b}', "");
Expect(0, 65279, '\P{-_In	ARABIC-presentationforms_b}', "");
Expect(1, 65279, '\P{^-_In	ARABIC-presentationforms_b}', "");
Expect(0, 65135, '\p{-_In	ARABIC-presentationforms_b}', "");
Expect(1, 65135, '\p{^-_In	ARABIC-presentationforms_b}', "");
Expect(1, 65135, '\P{-_In	ARABIC-presentationforms_b}', "");
Expect(0, 65135, '\P{^-_In	ARABIC-presentationforms_b}', "");
Error('\p{	_rumi-NUMERAL_SYMBOLS:=}');
Error('\P{	_rumi-NUMERAL_SYMBOLS:=}');
Expect(1, 69247, '\p{ruminumeralsymbols}', "");
Expect(0, 69247, '\p{^ruminumeralsymbols}', "");
Expect(0, 69247, '\P{ruminumeralsymbols}', "");
Expect(1, 69247, '\P{^ruminumeralsymbols}', "");
Expect(0, 69215, '\p{ruminumeralsymbols}', "");
Expect(1, 69215, '\p{^ruminumeralsymbols}', "");
Expect(1, 69215, '\P{ruminumeralsymbols}', "");
Expect(0, 69215, '\P{^ruminumeralsymbols}', "");
Expect(1, 69247, '\p{  RUMI	numeral	SYMBOLS}', "");
Expect(0, 69247, '\p{^  RUMI	numeral	SYMBOLS}', "");
Expect(0, 69247, '\P{  RUMI	numeral	SYMBOLS}', "");
Expect(1, 69247, '\P{^  RUMI	numeral	SYMBOLS}', "");
Expect(0, 69215, '\p{  RUMI	numeral	SYMBOLS}', "");
Expect(1, 69215, '\p{^  RUMI	numeral	SYMBOLS}', "");
Expect(1, 69215, '\P{  RUMI	numeral	SYMBOLS}', "");
Expect(0, 69215, '\P{^  RUMI	numeral	SYMBOLS}', "");
Error('\p{		Is	RUMI/a/NUMERAL	Symbols}');
Error('\P{		Is	RUMI/a/NUMERAL	Symbols}');
Expect(1, 69247, '\p{isruminumeralsymbols}', "");
Expect(0, 69247, '\p{^isruminumeralsymbols}', "");
Expect(0, 69247, '\P{isruminumeralsymbols}', "");
Expect(1, 69247, '\P{^isruminumeralsymbols}', "");
Expect(0, 69215, '\p{isruminumeralsymbols}', "");
Expect(1, 69215, '\p{^isruminumeralsymbols}', "");
Expect(1, 69215, '\P{isruminumeralsymbols}', "");
Expect(0, 69215, '\P{^isruminumeralsymbols}', "");
Expect(1, 69247, '\p{ Is-Ruminumeral-Symbols}', "");
Expect(0, 69247, '\p{^ Is-Ruminumeral-Symbols}', "");
Expect(0, 69247, '\P{ Is-Ruminumeral-Symbols}', "");
Expect(1, 69247, '\P{^ Is-Ruminumeral-Symbols}', "");
Expect(0, 69215, '\p{ Is-Ruminumeral-Symbols}', "");
Expect(1, 69215, '\p{^ Is-Ruminumeral-Symbols}', "");
Expect(1, 69215, '\P{ Is-Ruminumeral-Symbols}', "");
Expect(0, 69215, '\P{^ Is-Ruminumeral-Symbols}', "");
Error('\p{ :=IN_Rumi_NUMERALSymbols}');
Error('\P{ :=IN_Rumi_NUMERALSymbols}');
Expect(1, 69247, '\p{inruminumeralsymbols}', "");
Expect(0, 69247, '\p{^inruminumeralsymbols}', "");
Expect(0, 69247, '\P{inruminumeralsymbols}', "");
Expect(1, 69247, '\P{^inruminumeralsymbols}', "");
Expect(0, 69215, '\p{inruminumeralsymbols}', "");
Expect(1, 69215, '\p{^inruminumeralsymbols}', "");
Expect(1, 69215, '\P{inruminumeralsymbols}', "");
Expect(0, 69215, '\P{^inruminumeralsymbols}', "");
Expect(1, 69247, '\p{_In	rumi NumeralSymbols}', "");
Expect(0, 69247, '\p{^_In	rumi NumeralSymbols}', "");
Expect(0, 69247, '\P{_In	rumi NumeralSymbols}', "");
Expect(1, 69247, '\P{^_In	rumi NumeralSymbols}', "");
Expect(0, 69215, '\p{_In	rumi NumeralSymbols}', "");
Expect(1, 69215, '\p{^_In	rumi NumeralSymbols}', "");
Expect(1, 69215, '\P{_In	rumi NumeralSymbols}', "");
Expect(0, 69215, '\P{^_In	rumi NumeralSymbols}', "");
Error('\p{_/a/Common	indic_number-forms}');
Error('\P{_/a/Common	indic_number-forms}');
Expect(1, 43071, '\p{commonindicnumberforms}', "");
Expect(0, 43071, '\p{^commonindicnumberforms}', "");
Expect(0, 43071, '\P{commonindicnumberforms}', "");
Expect(1, 43071, '\P{^commonindicnumberforms}', "");
Expect(0, 43055, '\p{commonindicnumberforms}', "");
Expect(1, 43055, '\p{^commonindicnumberforms}', "");
Expect(1, 43055, '\P{commonindicnumberforms}', "");
Expect(0, 43055, '\P{^commonindicnumberforms}', "");
Expect(1, 43071, '\p{_ COMMON Indic	Number	forms}', "");
Expect(0, 43071, '\p{^_ COMMON Indic	Number	forms}', "");
Expect(0, 43071, '\P{_ COMMON Indic	Number	forms}', "");
Expect(1, 43071, '\P{^_ COMMON Indic	Number	forms}', "");
Expect(0, 43055, '\p{_ COMMON Indic	Number	forms}', "");
Expect(1, 43055, '\p{^_ COMMON Indic	Number	forms}', "");
Expect(1, 43055, '\P{_ COMMON Indic	Number	forms}', "");
Expect(0, 43055, '\P{^_ COMMON Indic	Number	forms}', "");
Error('\p{_	Is/a/common Indic	NumberForms}');
Error('\P{_	Is/a/common Indic	NumberForms}');
Expect(1, 43071, '\p{iscommonindicnumberforms}', "");
Expect(0, 43071, '\p{^iscommonindicnumberforms}', "");
Expect(0, 43071, '\P{iscommonindicnumberforms}', "");
Expect(1, 43071, '\P{^iscommonindicnumberforms}', "");
Expect(0, 43055, '\p{iscommonindicnumberforms}', "");
Expect(1, 43055, '\p{^iscommonindicnumberforms}', "");
Expect(1, 43055, '\P{iscommonindicnumberforms}', "");
Expect(0, 43055, '\P{^iscommonindicnumberforms}', "");
Expect(1, 43071, '\p{- is-COMMON	Indic_number_forms}', "");
Expect(0, 43071, '\p{^- is-COMMON	Indic_number_forms}', "");
Expect(0, 43071, '\P{- is-COMMON	Indic_number_forms}', "");
Expect(1, 43071, '\P{^- is-COMMON	Indic_number_forms}', "");
Expect(0, 43055, '\p{- is-COMMON	Indic_number_forms}', "");
Expect(1, 43055, '\p{^- is-COMMON	Indic_number_forms}', "");
Expect(1, 43055, '\P{- is-COMMON	Indic_number_forms}', "");
Expect(0, 43055, '\P{^- is-COMMON	Indic_number_forms}', "");
Error('\p{ In/a/Common-indicnumber_Forms}');
Error('\P{ In/a/Common-indicnumber_Forms}');
Expect(1, 43071, '\p{incommonindicnumberforms}', "");
Expect(0, 43071, '\p{^incommonindicnumberforms}', "");
Expect(0, 43071, '\P{incommonindicnumberforms}', "");
Expect(1, 43071, '\P{^incommonindicnumberforms}', "");
Expect(0, 43055, '\p{incommonindicnumberforms}', "");
Expect(1, 43055, '\p{^incommonindicnumberforms}', "");
Expect(1, 43055, '\P{incommonindicnumberforms}', "");
Expect(0, 43055, '\P{^incommonindicnumberforms}', "");
Expect(1, 43071, '\p{		In	common INDIC NUMBERForms}', "");
Expect(0, 43071, '\p{^		In	common INDIC NUMBERForms}', "");
Expect(0, 43071, '\P{		In	common INDIC NUMBERForms}', "");
Expect(1, 43071, '\P{^		In	common INDIC NUMBERForms}', "");
Expect(0, 43055, '\p{		In	common INDIC NUMBERForms}', "");
Expect(1, 43055, '\p{^		In	common INDIC NUMBERForms}', "");
Expect(1, 43055, '\P{		In	common INDIC NUMBERForms}', "");
Expect(0, 43055, '\P{^		In	common INDIC NUMBERForms}', "");
Error('\p{:=	-Alpha}');
Error('\P{:=	-Alpha}');
Expect(1, 90, '\p{alpha}', "");
Expect(0, 90, '\p{^alpha}', "");
Expect(0, 90, '\P{alpha}', "");
Expect(1, 90, '\P{^alpha}', "");
Expect(0, 64, '\p{alpha}', "");
Expect(1, 64, '\p{^alpha}', "");
Expect(1, 64, '\P{alpha}', "");
Expect(0, 64, '\P{^alpha}', "");
Expect(1, 90, '\p{  Alpha}', "");
Expect(0, 90, '\p{^  Alpha}', "");
Expect(0, 90, '\P{  Alpha}', "");
Expect(1, 90, '\P{^  Alpha}', "");
Expect(0, 64, '\p{  Alpha}', "");
Expect(1, 64, '\p{^  Alpha}', "");
Expect(1, 64, '\P{  Alpha}', "");
Expect(0, 64, '\P{^  Alpha}', "");
Error('\p{_:=XPOSIXALPHA}');
Error('\P{_:=XPOSIXALPHA}');
Expect(1, 90, '\p{xposixalpha}', "");
Expect(0, 90, '\p{^xposixalpha}', "");
Expect(0, 90, '\P{xposixalpha}', "");
Expect(1, 90, '\P{^xposixalpha}', "");
Expect(0, 64, '\p{xposixalpha}', "");
Expect(1, 64, '\p{^xposixalpha}', "");
Expect(1, 64, '\P{xposixalpha}', "");
Expect(0, 64, '\P{^xposixalpha}', "");
Expect(1, 90, '\p{		XPosixAlpha}', "");
Expect(0, 90, '\p{^		XPosixAlpha}', "");
Expect(0, 90, '\P{		XPosixAlpha}', "");
Expect(1, 90, '\P{^		XPosixAlpha}', "");
Expect(0, 64, '\p{		XPosixAlpha}', "");
Expect(1, 64, '\p{^		XPosixAlpha}', "");
Expect(1, 64, '\P{		XPosixAlpha}', "");
Expect(0, 64, '\P{^		XPosixAlpha}', "");
Error('\p{_Is/a/Alpha}');
Error('\P{_Is/a/Alpha}');
Expect(1, 90, '\p{isalpha}', "");
Expect(0, 90, '\p{^isalpha}', "");
Expect(0, 90, '\P{isalpha}', "");
Expect(1, 90, '\P{^isalpha}', "");
Expect(0, 64, '\p{isalpha}', "");
Expect(1, 64, '\p{^isalpha}', "");
Expect(1, 64, '\P{isalpha}', "");
Expect(0, 64, '\P{^isalpha}', "");
Expect(1, 90, '\p{_ISAlpha}', "");
Expect(0, 90, '\p{^_ISAlpha}', "");
Expect(0, 90, '\P{_ISAlpha}', "");
Expect(1, 90, '\P{^_ISAlpha}', "");
Expect(0, 64, '\p{_ISAlpha}', "");
Expect(1, 64, '\p{^_ISAlpha}', "");
Expect(1, 64, '\P{_ISAlpha}', "");
Expect(0, 64, '\P{^_ISAlpha}', "");
Error('\p{	/a/IsXPOSIXALPHA}');
Error('\P{	/a/IsXPOSIXALPHA}');
Expect(1, 90, '\p{isxposixalpha}', "");
Expect(0, 90, '\p{^isxposixalpha}', "");
Expect(0, 90, '\P{isxposixalpha}', "");
Expect(1, 90, '\P{^isxposixalpha}', "");
Expect(0, 64, '\p{isxposixalpha}', "");
Expect(1, 64, '\p{^isxposixalpha}', "");
Expect(1, 64, '\P{isxposixalpha}', "");
Expect(0, 64, '\P{^isxposixalpha}', "");
Expect(1, 90, '\p{__IS-XPosixAlpha}', "");
Expect(0, 90, '\p{^__IS-XPosixAlpha}', "");
Expect(0, 90, '\P{__IS-XPosixAlpha}', "");
Expect(1, 90, '\P{^__IS-XPosixAlpha}', "");
Expect(0, 64, '\p{__IS-XPosixAlpha}', "");
Expect(1, 64, '\p{^__IS-XPosixAlpha}', "");
Expect(1, 64, '\P{__IS-XPosixAlpha}', "");
Expect(0, 64, '\P{^__IS-XPosixAlpha}', "");
Error('\p{ /a/Alphabetic}');
Error('\P{ /a/Alphabetic}');
Expect(1, 90, '\p{alphabetic}', "");
Expect(0, 90, '\p{^alphabetic}', "");
Expect(0, 90, '\P{alphabetic}', "");
Expect(1, 90, '\P{^alphabetic}', "");
Expect(0, 64, '\p{alphabetic}', "");
Expect(1, 64, '\p{^alphabetic}', "");
Expect(1, 64, '\P{alphabetic}', "");
Expect(0, 64, '\P{^alphabetic}', "");
Expect(1, 90, '\p{ALPHABETIC}', "");
Expect(0, 90, '\p{^ALPHABETIC}', "");
Expect(0, 90, '\P{ALPHABETIC}', "");
Expect(1, 90, '\P{^ALPHABETIC}', "");
Expect(0, 64, '\p{ALPHABETIC}', "");
Expect(1, 64, '\p{^ALPHABETIC}', "");
Expect(1, 64, '\P{ALPHABETIC}', "");
Expect(0, 64, '\P{^ALPHABETIC}', "");
Error('\p{IS:=alphabetic}');
Error('\P{IS:=alphabetic}');
Expect(1, 90, '\p{isalphabetic}', "");
Expect(0, 90, '\p{^isalphabetic}', "");
Expect(0, 90, '\P{isalphabetic}', "");
Expect(1, 90, '\P{^isalphabetic}', "");
Expect(0, 64, '\p{isalphabetic}', "");
Expect(1, 64, '\p{^isalphabetic}', "");
Expect(1, 64, '\P{isalphabetic}', "");
Expect(0, 64, '\P{^isalphabetic}', "");
Expect(1, 90, '\p{	 Is	Alphabetic}', "");
Expect(0, 90, '\p{^	 Is	Alphabetic}', "");
Expect(0, 90, '\P{	 Is	Alphabetic}', "");
Expect(1, 90, '\P{^	 Is	Alphabetic}', "");
Expect(0, 64, '\p{	 Is	Alphabetic}', "");
Expect(1, 64, '\p{^	 Is	Alphabetic}', "");
Expect(1, 64, '\P{	 Is	Alphabetic}', "");
Expect(0, 64, '\P{^	 Is	Alphabetic}', "");
Error('\p{_Playing_cards/a/}');
Error('\P{_Playing_cards/a/}');
Expect(1, 127231, '\p{playingcards}', "");
Expect(0, 127231, '\p{^playingcards}', "");
Expect(0, 127231, '\P{playingcards}', "");
Expect(1, 127231, '\P{^playingcards}', "");
Expect(0, 127135, '\p{playingcards}', "");
Expect(1, 127135, '\p{^playingcards}', "");
Expect(1, 127135, '\P{playingcards}', "");
Expect(0, 127135, '\P{^playingcards}', "");
Expect(1, 127231, '\p{__playing Cards}', "");
Expect(0, 127231, '\p{^__playing Cards}', "");
Expect(0, 127231, '\P{__playing Cards}', "");
Expect(1, 127231, '\P{^__playing Cards}', "");
Expect(0, 127135, '\p{__playing Cards}', "");
Expect(1, 127135, '\p{^__playing Cards}', "");
Expect(1, 127135, '\P{__playing Cards}', "");
Expect(0, 127135, '\P{^__playing Cards}', "");
Error('\p{_	IS	Playing/a/CARDS}');
Error('\P{_	IS	Playing/a/CARDS}');
Expect(1, 127231, '\p{isplayingcards}', "");
Expect(0, 127231, '\p{^isplayingcards}', "");
Expect(0, 127231, '\P{isplayingcards}', "");
Expect(1, 127231, '\P{^isplayingcards}', "");
Expect(0, 127135, '\p{isplayingcards}', "");
Expect(1, 127135, '\p{^isplayingcards}', "");
Expect(1, 127135, '\P{isplayingcards}', "");
Expect(0, 127135, '\P{^isplayingcards}', "");
Expect(1, 127231, '\p{	Is	Playing-Cards}', "");
Expect(0, 127231, '\p{^	Is	Playing-Cards}', "");
Expect(0, 127231, '\P{	Is	Playing-Cards}', "");
Expect(1, 127231, '\P{^	Is	Playing-Cards}', "");
Expect(0, 127135, '\p{	Is	Playing-Cards}', "");
Expect(1, 127135, '\p{^	Is	Playing-Cards}', "");
Expect(1, 127135, '\P{	Is	Playing-Cards}', "");
Expect(0, 127135, '\P{^	Is	Playing-Cards}', "");
Error('\p{	/a/IN_playing-Cards}');
Error('\P{	/a/IN_playing-Cards}');
Expect(1, 127231, '\p{inplayingcards}', "");
Expect(0, 127231, '\p{^inplayingcards}', "");
Expect(0, 127231, '\P{inplayingcards}', "");
Expect(1, 127231, '\P{^inplayingcards}', "");
Expect(0, 127135, '\p{inplayingcards}', "");
Expect(1, 127135, '\p{^inplayingcards}', "");
Expect(1, 127135, '\P{inplayingcards}', "");
Expect(0, 127135, '\P{^inplayingcards}', "");
Expect(1, 127231, '\p{ -IN-playing_Cards}', "");
Expect(0, 127231, '\p{^ -IN-playing_Cards}', "");
Expect(0, 127231, '\P{ -IN-playing_Cards}', "");
Expect(1, 127231, '\P{^ -IN-playing_Cards}', "");
Expect(0, 127135, '\p{ -IN-playing_Cards}', "");
Expect(1, 127135, '\p{^ -IN-playing_Cards}', "");
Expect(1, 127135, '\P{ -IN-playing_Cards}', "");
Expect(0, 127135, '\P{^ -IN-playing_Cards}', "");
Error('\p{_-IN Egyptian Hieroglyphs:=}');
Error('\P{_-IN Egyptian Hieroglyphs:=}');
Expect(1, 78895, '\p{inegyptianhieroglyphs}', "");
Expect(0, 78895, '\p{^inegyptianhieroglyphs}', "");
Expect(0, 78895, '\P{inegyptianhieroglyphs}', "");
Expect(1, 78895, '\P{^inegyptianhieroglyphs}', "");
Expect(0, 77823, '\p{inegyptianhieroglyphs}', "");
Expect(1, 77823, '\p{^inegyptianhieroglyphs}', "");
Expect(1, 77823, '\P{inegyptianhieroglyphs}', "");
Expect(0, 77823, '\P{^inegyptianhieroglyphs}', "");
Expect(1, 78895, '\p{_-in_EGYPTIANHieroglyphs}', "");
Expect(0, 78895, '\p{^_-in_EGYPTIANHieroglyphs}', "");
Expect(0, 78895, '\P{_-in_EGYPTIANHieroglyphs}', "");
Expect(1, 78895, '\P{^_-in_EGYPTIANHieroglyphs}', "");
Expect(0, 77823, '\p{_-in_EGYPTIANHieroglyphs}', "");
Expect(1, 77823, '\p{^_-in_EGYPTIANHieroglyphs}', "");
Expect(1, 77823, '\P{_-in_EGYPTIANHieroglyphs}', "");
Expect(0, 77823, '\P{^_-in_EGYPTIANHieroglyphs}', "");
Error('\p{-	in-MYANMAR/a/}');
Error('\P{-	in-MYANMAR/a/}');
Expect(1, 4255, '\p{inmyanmar}', "");
Expect(0, 4255, '\p{^inmyanmar}', "");
Expect(0, 4255, '\P{inmyanmar}', "");
Expect(1, 4255, '\P{^inmyanmar}', "");
Expect(0, 4095, '\p{inmyanmar}', "");
Expect(1, 4095, '\p{^inmyanmar}', "");
Expect(1, 4095, '\P{inmyanmar}', "");
Expect(0, 4095, '\P{^inmyanmar}', "");
Expect(1, 4255, '\p{ -INMyanmar}', "");
Expect(0, 4255, '\p{^ -INMyanmar}', "");
Expect(0, 4255, '\P{ -INMyanmar}', "");
Expect(1, 4255, '\P{^ -INMyanmar}', "");
Expect(0, 4095, '\p{ -INMyanmar}', "");
Expect(1, 4095, '\p{^ -INMyanmar}', "");
Expect(1, 4095, '\P{ -INMyanmar}', "");
Expect(0, 4095, '\P{^ -INMyanmar}', "");
Error('\p{	 greek-Extended/a/}');
Error('\P{	 greek-Extended/a/}');
Expect(1, 8191, '\p{greekextended}', "");
Expect(0, 8191, '\p{^greekextended}', "");
Expect(0, 8191, '\P{greekextended}', "");
Expect(1, 8191, '\P{^greekextended}', "");
Expect(0, 7935, '\p{greekextended}', "");
Expect(1, 7935, '\p{^greekextended}', "");
Expect(1, 7935, '\P{greekextended}', "");
Expect(0, 7935, '\P{^greekextended}', "");
Expect(1, 8191, '\p{	-GREEK Extended}', "");
Expect(0, 8191, '\p{^	-GREEK Extended}', "");
Expect(0, 8191, '\P{	-GREEK Extended}', "");
Expect(1, 8191, '\P{^	-GREEK Extended}', "");
Expect(0, 7935, '\p{	-GREEK Extended}', "");
Expect(1, 7935, '\p{^	-GREEK Extended}', "");
Expect(1, 7935, '\P{	-GREEK Extended}', "");
Expect(0, 7935, '\P{^	-GREEK Extended}', "");
Error('\p{IS_GREEKEXTENDED/a/}');
Error('\P{IS_GREEKEXTENDED/a/}');
Expect(1, 8191, '\p{isgreekextended}', "");
Expect(0, 8191, '\p{^isgreekextended}', "");
Expect(0, 8191, '\P{isgreekextended}', "");
Expect(1, 8191, '\P{^isgreekextended}', "");
Expect(0, 7935, '\p{isgreekextended}', "");
Expect(1, 7935, '\p{^isgreekextended}', "");
Expect(1, 7935, '\P{isgreekextended}', "");
Expect(0, 7935, '\P{^isgreekextended}', "");
Expect(1, 8191, '\p{-Is Greek_extended}', "");
Expect(0, 8191, '\p{^-Is Greek_extended}', "");
Expect(0, 8191, '\P{-Is Greek_extended}', "");
Expect(1, 8191, '\P{^-Is Greek_extended}', "");
Expect(0, 7935, '\p{-Is Greek_extended}', "");
Expect(1, 7935, '\p{^-Is Greek_extended}', "");
Expect(1, 7935, '\P{-Is Greek_extended}', "");
Expect(0, 7935, '\P{^-Is Greek_extended}', "");
Error('\p{_/a/in-Greek	EXTENDED}');
Error('\P{_/a/in-Greek	EXTENDED}');
Expect(1, 8191, '\p{ingreekextended}', "");
Expect(0, 8191, '\p{^ingreekextended}', "");
Expect(0, 8191, '\P{ingreekextended}', "");
Expect(1, 8191, '\P{^ingreekextended}', "");
Expect(0, 7935, '\p{ingreekextended}', "");
Expect(1, 7935, '\p{^ingreekextended}', "");
Expect(1, 7935, '\P{ingreekextended}', "");
Expect(0, 7935, '\P{^ingreekextended}', "");
Expect(1, 8191, '\p{_in_GreekEXTENDED}', "");
Expect(0, 8191, '\p{^_in_GreekEXTENDED}', "");
Expect(0, 8191, '\P{_in_GreekEXTENDED}', "");
Expect(1, 8191, '\P{^_in_GreekEXTENDED}', "");
Expect(0, 7935, '\p{_in_GreekEXTENDED}', "");
Expect(1, 7935, '\p{^_in_GreekEXTENDED}', "");
Expect(1, 7935, '\P{_in_GreekEXTENDED}', "");
Expect(0, 7935, '\P{^_in_GreekEXTENDED}', "");
Error('\p{	-Radical:=}');
Error('\P{	-Radical:=}');
Expect(1, 11929, '\p{radical}', "");
Expect(0, 11929, '\p{^radical}', "");
Expect(0, 11929, '\P{radical}', "");
Expect(1, 11929, '\P{^radical}', "");
Expect(0, 11903, '\p{radical}', "");
Expect(1, 11903, '\p{^radical}', "");
Expect(1, 11903, '\P{radical}', "");
Expect(0, 11903, '\P{^radical}', "");
Expect(1, 11929, '\p{ Radical}', "");
Expect(0, 11929, '\p{^ Radical}', "");
Expect(0, 11929, '\P{ Radical}', "");
Expect(1, 11929, '\P{^ Radical}', "");
Expect(0, 11903, '\p{ Radical}', "");
Expect(1, 11903, '\p{^ Radical}', "");
Expect(1, 11903, '\P{ Radical}', "");
Expect(0, 11903, '\P{^ Radical}', "");
Error('\p{:=__IS-Radical}');
Error('\P{:=__IS-Radical}');
Expect(1, 11929, '\p{isradical}', "");
Expect(0, 11929, '\p{^isradical}', "");
Expect(0, 11929, '\P{isradical}', "");
Expect(1, 11929, '\P{^isradical}', "");
Expect(0, 11903, '\p{isradical}', "");
Expect(1, 11903, '\p{^isradical}', "");
Expect(1, 11903, '\P{isradical}', "");
Expect(0, 11903, '\P{^isradical}', "");
Expect(1, 11929, '\p{IS_RADICAL}', "");
Expect(0, 11929, '\p{^IS_RADICAL}', "");
Expect(0, 11929, '\P{IS_RADICAL}', "");
Expect(1, 11929, '\P{^IS_RADICAL}', "");
Expect(0, 11903, '\p{IS_RADICAL}', "");
Expect(1, 11903, '\p{^IS_RADICAL}', "");
Expect(1, 11903, '\P{IS_RADICAL}', "");
Expect(0, 11903, '\P{^IS_RADICAL}', "");
Error('\p{/a/Low-Surrogates}');
Error('\P{/a/Low-Surrogates}');
Expect(1, 57343, '\p{lowsurrogates}', "");
Expect(0, 57343, '\p{^lowsurrogates}', "");
Expect(0, 57343, '\P{lowsurrogates}', "");
Expect(1, 57343, '\P{^lowsurrogates}', "");
Expect(0, 1, '\p{lowsurrogates}', "");
Expect(1, 1, '\p{^lowsurrogates}', "");
Expect(1, 1, '\P{lowsurrogates}', "");
Expect(0, 1, '\P{^lowsurrogates}', "");
Expect(1, 57343, '\p{--Low Surrogates}', "");
Expect(0, 57343, '\p{^--Low Surrogates}', "");
Expect(0, 57343, '\P{--Low Surrogates}', "");
Expect(1, 57343, '\P{^--Low Surrogates}', "");
Expect(0, 1, '\p{--Low Surrogates}', "");
Expect(1, 1, '\p{^--Low Surrogates}', "");
Expect(1, 1, '\P{--Low Surrogates}', "");
Expect(0, 1, '\P{^--Low Surrogates}', "");
Error('\p{	/a/IsLOWSurrogates}');
Error('\P{	/a/IsLOWSurrogates}');
Expect(1, 57343, '\p{islowsurrogates}', "");
Expect(0, 57343, '\p{^islowsurrogates}', "");
Expect(0, 57343, '\P{islowsurrogates}', "");
Expect(1, 57343, '\P{^islowsurrogates}', "");
Expect(0, 1, '\p{islowsurrogates}', "");
Expect(1, 1, '\p{^islowsurrogates}', "");
Expect(1, 1, '\P{islowsurrogates}', "");
Expect(0, 1, '\P{^islowsurrogates}', "");
Expect(1, 57343, '\p{__IS LOW	surrogates}', "");
Expect(0, 57343, '\p{^__IS LOW	surrogates}', "");
Expect(0, 57343, '\P{__IS LOW	surrogates}', "");
Expect(1, 57343, '\P{^__IS LOW	surrogates}', "");
Expect(0, 1, '\p{__IS LOW	surrogates}', "");
Expect(1, 1, '\p{^__IS LOW	surrogates}', "");
Expect(1, 1, '\P{__IS LOW	surrogates}', "");
Expect(0, 1, '\P{^__IS LOW	surrogates}', "");
Error('\p{-_IN_low Surrogates:=}');
Error('\P{-_IN_low Surrogates:=}');
Expect(1, 57343, '\p{inlowsurrogates}', "");
Expect(0, 57343, '\p{^inlowsurrogates}', "");
Expect(0, 57343, '\P{inlowsurrogates}', "");
Expect(1, 57343, '\P{^inlowsurrogates}', "");
Expect(0, 1, '\p{inlowsurrogates}', "");
Expect(1, 1, '\p{^inlowsurrogates}', "");
Expect(1, 1, '\P{inlowsurrogates}', "");
Expect(0, 1, '\P{^inlowsurrogates}', "");
Expect(1, 57343, '\p{ _In	LOWsurrogates}', "");
Expect(0, 57343, '\p{^ _In	LOWsurrogates}', "");
Expect(0, 57343, '\P{ _In	LOWsurrogates}', "");
Expect(1, 57343, '\P{^ _In	LOWsurrogates}', "");
Expect(0, 1, '\p{ _In	LOWsurrogates}', "");
Expect(1, 1, '\p{^ _In	LOWsurrogates}', "");
Expect(1, 1, '\P{ _In	LOWsurrogates}', "");
Expect(0, 1, '\P{^ _In	LOWsurrogates}', "");
Error('\p{in Phags_Pa/a/}');
Error('\P{in Phags_Pa/a/}');
Expect(1, 43135, '\p{inphagspa}', "");
Expect(0, 43135, '\p{^inphagspa}', "");
Expect(0, 43135, '\P{inphagspa}', "");
Expect(1, 43135, '\P{^inphagspa}', "");
Expect(0, 43071, '\p{inphagspa}', "");
Expect(1, 43071, '\p{^inphagspa}', "");
Expect(1, 43071, '\P{inphagspa}', "");
Expect(0, 43071, '\P{^inphagspa}', "");
Expect(1, 43135, '\p{		In-Phags pa}', "");
Expect(0, 43135, '\p{^		In-Phags pa}', "");
Expect(0, 43135, '\P{		In-Phags pa}', "");
Expect(1, 43135, '\P{^		In-Phags pa}', "");
Expect(0, 43071, '\p{		In-Phags pa}', "");
Expect(1, 43071, '\p{^		In-Phags pa}', "");
Expect(1, 43071, '\P{		In-Phags pa}', "");
Expect(0, 43071, '\P{^		In-Phags pa}', "");
Error('\p{-_IMPERIAL ARAMAIC:=}');
Error('\P{-_IMPERIAL ARAMAIC:=}');
Expect(1, 67669, '\p{imperialaramaic}', "");
Expect(0, 67669, '\p{^imperialaramaic}', "");
Expect(0, 67669, '\P{imperialaramaic}', "");
Expect(1, 67669, '\P{^imperialaramaic}', "");
Expect(0, 67647, '\p{imperialaramaic}', "");
Expect(1, 67647, '\p{^imperialaramaic}', "");
Expect(1, 67647, '\P{imperialaramaic}', "");
Expect(0, 67647, '\P{^imperialaramaic}', "");
Expect(1, 67669, '\p{ -IMPERIALARAMAIC}', "");
Expect(0, 67669, '\p{^ -IMPERIALARAMAIC}', "");
Expect(0, 67669, '\P{ -IMPERIALARAMAIC}', "");
Expect(1, 67669, '\P{^ -IMPERIALARAMAIC}', "");
Expect(0, 67647, '\p{ -IMPERIALARAMAIC}', "");
Expect(1, 67647, '\p{^ -IMPERIALARAMAIC}', "");
Expect(1, 67647, '\P{ -IMPERIALARAMAIC}', "");
Expect(0, 67647, '\P{^ -IMPERIALARAMAIC}', "");
Error('\p{/a/-	IS_Imperial_Aramaic}');
Error('\P{/a/-	IS_Imperial_Aramaic}');
Expect(1, 67669, '\p{isimperialaramaic}', "");
Expect(0, 67669, '\p{^isimperialaramaic}', "");
Expect(0, 67669, '\P{isimperialaramaic}', "");
Expect(1, 67669, '\P{^isimperialaramaic}', "");
Expect(0, 67647, '\p{isimperialaramaic}', "");
Expect(1, 67647, '\p{^isimperialaramaic}', "");
Expect(1, 67647, '\P{isimperialaramaic}', "");
Expect(0, 67647, '\P{^isimperialaramaic}', "");
Expect(1, 67669, '\p{ 	Is imperial	ARAMAIC}', "");
Expect(0, 67669, '\p{^ 	Is imperial	ARAMAIC}', "");
Expect(0, 67669, '\P{ 	Is imperial	ARAMAIC}', "");
Expect(1, 67669, '\P{^ 	Is imperial	ARAMAIC}', "");
Expect(0, 67647, '\p{ 	Is imperial	ARAMAIC}', "");
Expect(1, 67647, '\p{^ 	Is imperial	ARAMAIC}', "");
Expect(1, 67647, '\P{ 	Is imperial	ARAMAIC}', "");
Expect(0, 67647, '\P{^ 	Is imperial	ARAMAIC}', "");
Error('\p{/a/ARMI}');
Error('\P{/a/ARMI}');
Expect(1, 67669, '\p{armi}', "");
Expect(0, 67669, '\p{^armi}', "");
Expect(0, 67669, '\P{armi}', "");
Expect(1, 67669, '\P{^armi}', "");
Expect(0, 67647, '\p{armi}', "");
Expect(1, 67647, '\p{^armi}', "");
Expect(1, 67647, '\P{armi}', "");
Expect(0, 67647, '\P{^armi}', "");
Expect(1, 67669, '\p{ _ARMI}', "");
Expect(0, 67669, '\p{^ _ARMI}', "");
Expect(0, 67669, '\P{ _ARMI}', "");
Expect(1, 67669, '\P{^ _ARMI}', "");
Expect(0, 67647, '\p{ _ARMI}', "");
Expect(1, 67647, '\p{^ _ARMI}', "");
Expect(1, 67647, '\P{ _ARMI}', "");
Expect(0, 67647, '\P{^ _ARMI}', "");
Error('\p{:=__Is	Armi}');
Error('\P{:=__Is	Armi}');
Expect(1, 67669, '\p{isarmi}', "");
Expect(0, 67669, '\p{^isarmi}', "");
Expect(0, 67669, '\P{isarmi}', "");
Expect(1, 67669, '\P{^isarmi}', "");
Expect(0, 67647, '\p{isarmi}', "");
Expect(1, 67647, '\p{^isarmi}', "");
Expect(1, 67647, '\P{isarmi}', "");
Expect(0, 67647, '\P{^isarmi}', "");
Expect(1, 67669, '\p{		Is_Armi}', "");
Expect(0, 67669, '\p{^		Is_Armi}', "");
Expect(0, 67669, '\P{		Is_Armi}', "");
Expect(1, 67669, '\P{^		Is_Armi}', "");
Expect(0, 67647, '\p{		Is_Armi}', "");
Expect(1, 67647, '\p{^		Is_Armi}', "");
Expect(1, 67647, '\P{		Is_Armi}', "");
Expect(0, 67647, '\P{^		Is_Armi}', "");
Error('\p{ PerlSpace:=}');
Error('\P{ PerlSpace:=}');
Expect(1, 10, '\p{perlspace}', "");
Expect(0, 10, '\p{^perlspace}', "");
Expect(0, 10, '\P{perlspace}', "");
Expect(1, 10, '\P{^perlspace}', "");
Expect(0, 8, '\p{perlspace}', "");
Expect(1, 8, '\p{^perlspace}', "");
Expect(1, 8, '\P{perlspace}', "");
Expect(0, 8, '\P{^perlspace}', "");
Expect(1, 10, '\p{_PerlSpace}', "");
Expect(0, 10, '\p{^_PerlSpace}', "");
Expect(0, 10, '\P{_PerlSpace}', "");
Expect(1, 10, '\P{^_PerlSpace}', "");
Expect(0, 8, '\p{_PerlSpace}', "");
Expect(1, 8, '\p{^_PerlSpace}', "");
Expect(1, 8, '\P{_PerlSpace}', "");
Expect(0, 8, '\P{^_PerlSpace}', "");
Error('\p{ is perlspace/a/}');
Error('\P{ is perlspace/a/}');
Expect(1, 10, '\p{isperlspace}', "");
Expect(0, 10, '\p{^isperlspace}', "");
Expect(0, 10, '\P{isperlspace}', "");
Expect(1, 10, '\P{^isperlspace}', "");
Expect(0, 8, '\p{isperlspace}', "");
Expect(1, 8, '\p{^isperlspace}', "");
Expect(1, 8, '\P{isperlspace}', "");
Expect(0, 8, '\P{^isperlspace}', "");
Expect(1, 10, '\p{ 	IS perlspace}', "");
Expect(0, 10, '\p{^ 	IS perlspace}', "");
Expect(0, 10, '\P{ 	IS perlspace}', "");
Expect(1, 10, '\P{^ 	IS perlspace}', "");
Expect(0, 8, '\p{ 	IS perlspace}', "");
Expect(1, 8, '\p{^ 	IS perlspace}', "");
Expect(1, 8, '\P{ 	IS perlspace}', "");
Expect(0, 8, '\P{^ 	IS perlspace}', "");
Error('\p{-Cntrl/a/}');
Error('\P{-Cntrl/a/}');
Expect(1, 31, '\p{cntrl}', "");
Expect(0, 31, '\p{^cntrl}', "");
Expect(0, 31, '\P{cntrl}', "");
Expect(1, 31, '\P{^cntrl}', "");
Expect(0, 126, '\p{cntrl}', "");
Expect(1, 126, '\p{^cntrl}', "");
Expect(1, 126, '\P{cntrl}', "");
Expect(0, 126, '\P{^cntrl}', "");
Expect(1, 31, '\p{_-CNTRL}', "");
Expect(0, 31, '\p{^_-CNTRL}', "");
Expect(0, 31, '\P{_-CNTRL}', "");
Expect(1, 31, '\P{^_-CNTRL}', "");
Expect(0, 126, '\p{_-CNTRL}', "");
Expect(1, 126, '\p{^_-CNTRL}', "");
Expect(1, 126, '\P{_-CNTRL}', "");
Expect(0, 126, '\P{^_-CNTRL}', "");
Error('\p{/a/_XPOSIXCNTRL}');
Error('\P{/a/_XPOSIXCNTRL}');
Expect(1, 31, '\p{xposixcntrl}', "");
Expect(0, 31, '\p{^xposixcntrl}', "");
Expect(0, 31, '\P{xposixcntrl}', "");
Expect(1, 31, '\P{^xposixcntrl}', "");
Expect(0, 126, '\p{xposixcntrl}', "");
Expect(1, 126, '\p{^xposixcntrl}', "");
Expect(1, 126, '\P{xposixcntrl}', "");
Expect(0, 126, '\P{^xposixcntrl}', "");
Expect(1, 31, '\p{-_XPosixCntrl}', "");
Expect(0, 31, '\p{^-_XPosixCntrl}', "");
Expect(0, 31, '\P{-_XPosixCntrl}', "");
Expect(1, 31, '\P{^-_XPosixCntrl}', "");
Expect(0, 126, '\p{-_XPosixCntrl}', "");
Expect(1, 126, '\p{^-_XPosixCntrl}', "");
Expect(1, 126, '\P{-_XPosixCntrl}', "");
Expect(0, 126, '\P{^-_XPosixCntrl}', "");
Error('\p{_Is	cntrl:=}');
Error('\P{_Is	cntrl:=}');
Expect(1, 31, '\p{iscntrl}', "");
Expect(0, 31, '\p{^iscntrl}', "");
Expect(0, 31, '\P{iscntrl}', "");
Expect(1, 31, '\P{^iscntrl}', "");
Expect(0, 126, '\p{iscntrl}', "");
Expect(1, 126, '\p{^iscntrl}', "");
Expect(1, 126, '\P{iscntrl}', "");
Expect(0, 126, '\P{^iscntrl}', "");
Expect(1, 31, '\p{is CNTRL}', "");
Expect(0, 31, '\p{^is CNTRL}', "");
Expect(0, 31, '\P{is CNTRL}', "");
Expect(1, 31, '\P{^is CNTRL}', "");
Expect(0, 126, '\p{is CNTRL}', "");
Expect(1, 126, '\p{^is CNTRL}', "");
Expect(1, 126, '\P{is CNTRL}', "");
Expect(0, 126, '\P{^is CNTRL}', "");
Error('\p{	Is/a/XPosixCntrl}');
Error('\P{	Is/a/XPosixCntrl}');
Expect(1, 31, '\p{isxposixcntrl}', "");
Expect(0, 31, '\p{^isxposixcntrl}', "");
Expect(0, 31, '\P{isxposixcntrl}', "");
Expect(1, 31, '\P{^isxposixcntrl}', "");
Expect(0, 126, '\p{isxposixcntrl}', "");
Expect(1, 126, '\p{^isxposixcntrl}', "");
Expect(1, 126, '\P{isxposixcntrl}', "");
Expect(0, 126, '\P{^isxposixcntrl}', "");
Expect(1, 31, '\p{-_IsXPosixCntrl}', "");
Expect(0, 31, '\p{^-_IsXPosixCntrl}', "");
Expect(0, 31, '\P{-_IsXPosixCntrl}', "");
Expect(1, 31, '\P{^-_IsXPosixCntrl}', "");
Expect(0, 126, '\p{-_IsXPosixCntrl}', "");
Expect(1, 126, '\p{^-_IsXPosixCntrl}', "");
Expect(1, 126, '\P{-_IsXPosixCntrl}', "");
Expect(0, 126, '\P{^-_IsXPosixCntrl}', "");
Error('\p{ _control/a/}');
Error('\P{ _control/a/}');
Expect(1, 31, '\p{control}', "");
Expect(0, 31, '\p{^control}', "");
Expect(0, 31, '\P{control}', "");
Expect(1, 31, '\P{^control}', "");
Expect(0, 126, '\p{control}', "");
Expect(1, 126, '\p{^control}', "");
Expect(1, 126, '\P{control}', "");
Expect(0, 126, '\P{^control}', "");
Expect(1, 31, '\p{ -Control}', "");
Expect(0, 31, '\p{^ -Control}', "");
Expect(0, 31, '\P{ -Control}', "");
Expect(1, 31, '\P{^ -Control}', "");
Expect(0, 126, '\p{ -Control}', "");
Expect(1, 126, '\p{^ -Control}', "");
Expect(1, 126, '\P{ -Control}', "");
Expect(0, 126, '\P{^ -Control}', "");
Error('\p{_/a/Is	control}');
Error('\P{_/a/Is	control}');
Expect(1, 31, '\p{iscontrol}', "");
Expect(0, 31, '\p{^iscontrol}', "");
Expect(0, 31, '\P{iscontrol}', "");
Expect(1, 31, '\P{^iscontrol}', "");
Expect(0, 126, '\p{iscontrol}', "");
Expect(1, 126, '\p{^iscontrol}', "");
Expect(1, 126, '\P{iscontrol}', "");
Expect(0, 126, '\P{^iscontrol}', "");
Expect(1, 31, '\p{-_Is	Control}', "");
Expect(0, 31, '\p{^-_Is	Control}', "");
Expect(0, 31, '\P{-_Is	Control}', "");
Expect(1, 31, '\P{^-_Is	Control}', "");
Expect(0, 126, '\p{-_Is	Control}', "");
Expect(1, 126, '\p{^-_Is	Control}', "");
Expect(1, 126, '\P{-_Is	Control}', "");
Expect(0, 126, '\P{^-_Is	Control}', "");
Error('\p{/a/Cc}');
Error('\P{/a/Cc}');
Expect(1, 31, '\p{cc}', "");
Expect(0, 31, '\p{^cc}', "");
Expect(0, 31, '\P{cc}', "");
Expect(1, 31, '\P{^cc}', "");
Expect(0, 126, '\p{cc}', "");
Expect(1, 126, '\p{^cc}', "");
Expect(1, 126, '\P{cc}', "");
Expect(0, 126, '\P{^cc}', "");
Expect(1, 31, '\p{_-Cc}', "");
Expect(0, 31, '\p{^_-Cc}', "");
Expect(0, 31, '\P{_-Cc}', "");
Expect(1, 31, '\P{^_-Cc}', "");
Expect(0, 126, '\p{_-Cc}', "");
Expect(1, 126, '\p{^_-Cc}', "");
Expect(1, 126, '\P{_-Cc}', "");
Expect(0, 126, '\P{^_-Cc}', "");
Error('\p{	 Is Cc/a/}');
Error('\P{	 Is Cc/a/}');
Expect(1, 31, '\p{iscc}', "");
Expect(0, 31, '\p{^iscc}', "");
Expect(0, 31, '\P{iscc}', "");
Expect(1, 31, '\P{^iscc}', "");
Expect(0, 126, '\p{iscc}', "");
Expect(1, 126, '\p{^iscc}', "");
Expect(1, 126, '\P{iscc}', "");
Expect(0, 126, '\P{^iscc}', "");
Expect(1, 31, '\p{_IsCC}', "");
Expect(0, 31, '\p{^_IsCC}', "");
Expect(0, 31, '\P{_IsCC}', "");
Expect(1, 31, '\P{^_IsCC}', "");
Expect(0, 126, '\p{_IsCC}', "");
Expect(1, 126, '\p{^_IsCC}', "");
Expect(1, 126, '\P{_IsCC}', "");
Expect(0, 126, '\P{^_IsCC}', "");
Error('\p{		IDSBinary/a/OPERATOR}');
Error('\P{		IDSBinary/a/OPERATOR}');
Expect(1, 12273, '\p{idsbinaryoperator}', "");
Expect(0, 12273, '\p{^idsbinaryoperator}', "");
Expect(0, 12273, '\P{idsbinaryoperator}', "");
Expect(1, 12273, '\P{^idsbinaryoperator}', "");
Expect(0, 12271, '\p{idsbinaryoperator}', "");
Expect(1, 12271, '\p{^idsbinaryoperator}', "");
Expect(1, 12271, '\P{idsbinaryoperator}', "");
Expect(0, 12271, '\P{^idsbinaryoperator}', "");
Expect(1, 12273, '\p{		IDSbinaryOPERATOR}', "");
Expect(0, 12273, '\p{^		IDSbinaryOPERATOR}', "");
Expect(0, 12273, '\P{		IDSbinaryOPERATOR}', "");
Expect(1, 12273, '\P{^		IDSbinaryOPERATOR}', "");
Expect(0, 12271, '\p{		IDSbinaryOPERATOR}', "");
Expect(1, 12271, '\p{^		IDSbinaryOPERATOR}', "");
Expect(1, 12271, '\P{		IDSbinaryOPERATOR}', "");
Expect(0, 12271, '\P{^		IDSbinaryOPERATOR}', "");
Error('\p{	IS	IDSbinary_Operator:=}');
Error('\P{	IS	IDSbinary_Operator:=}');
Expect(1, 12273, '\p{isidsbinaryoperator}', "");
Expect(0, 12273, '\p{^isidsbinaryoperator}', "");
Expect(0, 12273, '\P{isidsbinaryoperator}', "");
Expect(1, 12273, '\P{^isidsbinaryoperator}', "");
Expect(0, 12271, '\p{isidsbinaryoperator}', "");
Expect(1, 12271, '\p{^isidsbinaryoperator}', "");
Expect(1, 12271, '\P{isidsbinaryoperator}', "");
Expect(0, 12271, '\P{^isidsbinaryoperator}', "");
Expect(1, 12273, '\p{Is_ids	Binary	OPERATOR}', "");
Expect(0, 12273, '\p{^Is_ids	Binary	OPERATOR}', "");
Expect(0, 12273, '\P{Is_ids	Binary	OPERATOR}', "");
Expect(1, 12273, '\P{^Is_ids	Binary	OPERATOR}', "");
Expect(0, 12271, '\p{Is_ids	Binary	OPERATOR}', "");
Expect(1, 12271, '\p{^Is_ids	Binary	OPERATOR}', "");
Expect(1, 12271, '\P{Is_ids	Binary	OPERATOR}', "");
Expect(0, 12271, '\P{^Is_ids	Binary	OPERATOR}', "");
Error('\p{/a/	-IDSB}');
Error('\P{/a/	-IDSB}');
Expect(1, 12273, '\p{idsb}', "");
Expect(0, 12273, '\p{^idsb}', "");
Expect(0, 12273, '\P{idsb}', "");
Expect(1, 12273, '\P{^idsb}', "");
Expect(0, 12271, '\p{idsb}', "");
Expect(1, 12271, '\p{^idsb}', "");
Expect(1, 12271, '\P{idsb}', "");
Expect(0, 12271, '\P{^idsb}', "");
Expect(1, 12273, '\p{-idsb}', "");
Expect(0, 12273, '\p{^-idsb}', "");
Expect(0, 12273, '\P{-idsb}', "");
Expect(1, 12273, '\P{^-idsb}', "");
Expect(0, 12271, '\p{-idsb}', "");
Expect(1, 12271, '\p{^-idsb}', "");
Expect(1, 12271, '\P{-idsb}', "");
Expect(0, 12271, '\P{^-idsb}', "");
Error('\p{	:=Is-IDSB}');
Error('\P{	:=Is-IDSB}');
Expect(1, 12273, '\p{isidsb}', "");
Expect(0, 12273, '\p{^isidsb}', "");
Expect(0, 12273, '\P{isidsb}', "");
Expect(1, 12273, '\P{^isidsb}', "");
Expect(0, 12271, '\p{isidsb}', "");
Expect(1, 12271, '\p{^isidsb}', "");
Expect(1, 12271, '\P{isidsb}', "");
Expect(0, 12271, '\P{^isidsb}', "");
Expect(1, 12273, '\p{_Is_IDSB}', "");
Expect(0, 12273, '\p{^_Is_IDSB}', "");
Expect(0, 12273, '\P{_Is_IDSB}', "");
Expect(1, 12273, '\P{^_Is_IDSB}', "");
Expect(0, 12271, '\p{_Is_IDSB}', "");
Expect(1, 12271, '\p{^_Is_IDSB}', "");
Expect(1, 12271, '\P{_Is_IDSB}', "");
Expect(0, 12271, '\P{^_Is_IDSB}', "");
Error('\p{/a/ ChangesWHEN	titlecased}');
Error('\P{/a/ ChangesWHEN	titlecased}');
Expect(1, 122, '\p{changeswhentitlecased}', "");
Expect(0, 122, '\p{^changeswhentitlecased}', "");
Expect(0, 122, '\P{changeswhentitlecased}', "");
Expect(1, 122, '\P{^changeswhentitlecased}', "");
Expect(0, 96, '\p{changeswhentitlecased}', "");
Expect(1, 96, '\p{^changeswhentitlecased}', "");
Expect(1, 96, '\P{changeswhentitlecased}', "");
Expect(0, 96, '\P{^changeswhentitlecased}', "");
Expect(1, 122, '\p{	 changes	whenTITLECASED}', "");
Expect(0, 122, '\p{^	 changes	whenTITLECASED}', "");
Expect(0, 122, '\P{	 changes	whenTITLECASED}', "");
Expect(1, 122, '\P{^	 changes	whenTITLECASED}', "");
Expect(0, 96, '\p{	 changes	whenTITLECASED}', "");
Expect(1, 96, '\p{^	 changes	whenTITLECASED}', "");
Expect(1, 96, '\P{	 changes	whenTITLECASED}', "");
Expect(0, 96, '\P{^	 changes	whenTITLECASED}', "");
Error('\p{ Is_changes_WHEN/a/Titlecased}');
Error('\P{ Is_changes_WHEN/a/Titlecased}');
Expect(1, 122, '\p{ischangeswhentitlecased}', "");
Expect(0, 122, '\p{^ischangeswhentitlecased}', "");
Expect(0, 122, '\P{ischangeswhentitlecased}', "");
Expect(1, 122, '\P{^ischangeswhentitlecased}', "");
Expect(0, 96, '\p{ischangeswhentitlecased}', "");
Expect(1, 96, '\p{^ischangeswhentitlecased}', "");
Expect(1, 96, '\P{ischangeswhentitlecased}', "");
Expect(0, 96, '\P{^ischangeswhentitlecased}', "");
Expect(1, 122, '\p{	_Is-CHANGES WhenTitlecased}', "");
Expect(0, 122, '\p{^	_Is-CHANGES WhenTitlecased}', "");
Expect(0, 122, '\P{	_Is-CHANGES WhenTitlecased}', "");
Expect(1, 122, '\P{^	_Is-CHANGES WhenTitlecased}', "");
Expect(0, 96, '\p{	_Is-CHANGES WhenTitlecased}', "");
Expect(1, 96, '\p{^	_Is-CHANGES WhenTitlecased}', "");
Expect(1, 96, '\P{	_Is-CHANGES WhenTitlecased}', "");
Expect(0, 96, '\P{^	_Is-CHANGES WhenTitlecased}', "");
Error('\p{:=cwt}');
Error('\P{:=cwt}');
Expect(1, 122, '\p{cwt}', "");
Expect(0, 122, '\p{^cwt}', "");
Expect(0, 122, '\P{cwt}', "");
Expect(1, 122, '\P{^cwt}', "");
Expect(0, 96, '\p{cwt}', "");
Expect(1, 96, '\p{^cwt}', "");
Expect(1, 96, '\P{cwt}', "");
Expect(0, 96, '\P{^cwt}', "");
Expect(1, 122, '\p{-_CWT}', "");
Expect(0, 122, '\p{^-_CWT}', "");
Expect(0, 122, '\P{-_CWT}', "");
Expect(1, 122, '\P{^-_CWT}', "");
Expect(0, 96, '\p{-_CWT}', "");
Expect(1, 96, '\p{^-_CWT}', "");
Expect(1, 96, '\P{-_CWT}', "");
Expect(0, 96, '\P{^-_CWT}', "");
Error('\p{-	Is-CWT:=}');
Error('\P{-	Is-CWT:=}');
Expect(1, 122, '\p{iscwt}', "");
Expect(0, 122, '\p{^iscwt}', "");
Expect(0, 122, '\P{iscwt}', "");
Expect(1, 122, '\P{^iscwt}', "");
Expect(0, 96, '\p{iscwt}', "");
Expect(1, 96, '\p{^iscwt}', "");
Expect(1, 96, '\P{iscwt}', "");
Expect(0, 96, '\P{^iscwt}', "");
Expect(1, 122, '\p{- IS_CWT}', "");
Expect(0, 122, '\p{^- IS_CWT}', "");
Expect(0, 122, '\P{- IS_CWT}', "");
Expect(1, 122, '\P{^- IS_CWT}', "");
Expect(0, 96, '\p{- IS_CWT}', "");
Expect(1, 96, '\p{^- IS_CWT}', "");
Expect(1, 96, '\P{- IS_CWT}', "");
Expect(0, 96, '\P{^- IS_CWT}', "");
Error('\p{/a/ _Cyrillic_extended	A}');
Error('\P{/a/ _Cyrillic_extended	A}');
Expect(1, 11775, '\p{cyrillicextendeda}', "");
Expect(0, 11775, '\p{^cyrillicextendeda}', "");
Expect(0, 11775, '\P{cyrillicextendeda}', "");
Expect(1, 11775, '\P{^cyrillicextendeda}', "");
Expect(0, 11743, '\p{cyrillicextendeda}', "");
Expect(1, 11743, '\p{^cyrillicextendeda}', "");
Expect(1, 11743, '\P{cyrillicextendeda}', "");
Expect(0, 11743, '\P{^cyrillicextendeda}', "");
Expect(1, 11775, '\p{	 CYRILLIC_Extended-A}', "");
Expect(0, 11775, '\p{^	 CYRILLIC_Extended-A}', "");
Expect(0, 11775, '\P{	 CYRILLIC_Extended-A}', "");
Expect(1, 11775, '\P{^	 CYRILLIC_Extended-A}', "");
Expect(0, 11743, '\p{	 CYRILLIC_Extended-A}', "");
Expect(1, 11743, '\p{^	 CYRILLIC_Extended-A}', "");
Expect(1, 11743, '\P{	 CYRILLIC_Extended-A}', "");
Expect(0, 11743, '\P{^	 CYRILLIC_Extended-A}', "");
Error('\p{	:=IS Cyrillic-extended-A}');
Error('\P{	:=IS Cyrillic-extended-A}');
Expect(1, 11775, '\p{iscyrillicextendeda}', "");
Expect(0, 11775, '\p{^iscyrillicextendeda}', "");
Expect(0, 11775, '\P{iscyrillicextendeda}', "");
Expect(1, 11775, '\P{^iscyrillicextendeda}', "");
Expect(0, 11743, '\p{iscyrillicextendeda}', "");
Expect(1, 11743, '\p{^iscyrillicextendeda}', "");
Expect(1, 11743, '\P{iscyrillicextendeda}', "");
Expect(0, 11743, '\P{^iscyrillicextendeda}', "");
Expect(1, 11775, '\p{ _Is_cyrillicExtended A}', "");
Expect(0, 11775, '\p{^ _Is_cyrillicExtended A}', "");
Expect(0, 11775, '\P{ _Is_cyrillicExtended A}', "");
Expect(1, 11775, '\P{^ _Is_cyrillicExtended A}', "");
Expect(0, 11743, '\p{ _Is_cyrillicExtended A}', "");
Expect(1, 11743, '\p{^ _Is_cyrillicExtended A}', "");
Expect(1, 11743, '\P{ _Is_cyrillicExtended A}', "");
Expect(0, 11743, '\P{^ _Is_cyrillicExtended A}', "");
Error('\p{:=	IN_CYRILLIC	Extended	a}');
Error('\P{:=	IN_CYRILLIC	Extended	a}');
Expect(1, 11775, '\p{incyrillicextendeda}', "");
Expect(0, 11775, '\p{^incyrillicextendeda}', "");
Expect(0, 11775, '\P{incyrillicextendeda}', "");
Expect(1, 11775, '\P{^incyrillicextendeda}', "");
Expect(0, 11743, '\p{incyrillicextendeda}', "");
Expect(1, 11743, '\p{^incyrillicextendeda}', "");
Expect(1, 11743, '\P{incyrillicextendeda}', "");
Expect(0, 11743, '\P{^incyrillicextendeda}', "");
Expect(1, 11775, '\p{__Incyrillic EXTENDED	A}', "");
Expect(0, 11775, '\p{^__Incyrillic EXTENDED	A}', "");
Expect(0, 11775, '\P{__Incyrillic EXTENDED	A}', "");
Expect(1, 11775, '\P{^__Incyrillic EXTENDED	A}', "");
Expect(0, 11743, '\p{__Incyrillic EXTENDED	A}', "");
Expect(1, 11743, '\p{^__Incyrillic EXTENDED	A}', "");
Expect(1, 11743, '\P{__Incyrillic EXTENDED	A}', "");
Expect(0, 11743, '\P{^__Incyrillic EXTENDED	A}', "");
Error('\p{_PosixLower:=}');
Error('\P{_PosixLower:=}');
Expect(1, 122, '\p{posixlower}', "");
Expect(0, 122, '\p{^posixlower}', "");
Expect(0, 122, '\P{posixlower}', "");
Expect(1, 122, '\P{^posixlower}', "");
Expect(0, 96, '\p{posixlower}', "");
Expect(1, 96, '\p{^posixlower}', "");
Expect(1, 96, '\P{posixlower}', "");
Expect(0, 96, '\P{^posixlower}', "");
Expect(1, 122, '\p{		PosixLower}', "");
Expect(0, 122, '\p{^		PosixLower}', "");
Expect(0, 122, '\P{		PosixLower}', "");
Expect(1, 122, '\P{^		PosixLower}', "");
Expect(0, 96, '\p{		PosixLower}', "");
Expect(1, 96, '\p{^		PosixLower}', "");
Expect(1, 96, '\P{		PosixLower}', "");
Expect(0, 96, '\P{^		PosixLower}', "");
Error('\p{/a/_Is_posixlower}');
Error('\P{/a/_Is_posixlower}');
Expect(1, 122, '\p{isposixlower}', "");
Expect(0, 122, '\p{^isposixlower}', "");
Expect(0, 122, '\P{isposixlower}', "");
Expect(1, 122, '\P{^isposixlower}', "");
Expect(0, 96, '\p{isposixlower}', "");
Expect(1, 96, '\p{^isposixlower}', "");
Expect(1, 96, '\P{isposixlower}', "");
Expect(0, 96, '\P{^isposixlower}', "");
Expect(1, 122, '\p{	ISPosixLower}', "");
Expect(0, 122, '\p{^	ISPosixLower}', "");
Expect(0, 122, '\P{	ISPosixLower}', "");
Expect(1, 122, '\P{^	ISPosixLower}', "");
Expect(0, 96, '\p{	ISPosixLower}', "");
Expect(1, 96, '\p{^	ISPosixLower}', "");
Expect(1, 96, '\P{	ISPosixLower}', "");
Expect(0, 96, '\P{^	ISPosixLower}', "");
Error('\p{/a/_	OTHER-graphemeExtend}');
Error('\P{/a/_	OTHER-graphemeExtend}');
Expect(1, 2494, '\p{othergraphemeextend}', 'deprecated');
Expect(0, 2494, '\p{^othergraphemeextend}', 'deprecated');
Expect(0, 2494, '\P{othergraphemeextend}', 'deprecated');
Expect(1, 2494, '\P{^othergraphemeextend}', 'deprecated');
Expect(0, 2493, '\p{othergraphemeextend}', 'deprecated');
Expect(1, 2493, '\p{^othergraphemeextend}', 'deprecated');
Expect(1, 2493, '\P{othergraphemeextend}', 'deprecated');
Expect(0, 2493, '\P{^othergraphemeextend}', 'deprecated');
Expect(1, 2494, '\p{- other	Grapheme	EXTEND}', 'deprecated');
Expect(0, 2494, '\p{^- other	Grapheme	EXTEND}', 'deprecated');
Expect(0, 2494, '\P{- other	Grapheme	EXTEND}', 'deprecated');
Expect(1, 2494, '\P{^- other	Grapheme	EXTEND}', 'deprecated');
Expect(0, 2493, '\p{- other	Grapheme	EXTEND}', 'deprecated');
Expect(1, 2493, '\p{^- other	Grapheme	EXTEND}', 'deprecated');
Expect(1, 2493, '\P{- other	Grapheme	EXTEND}', 'deprecated');
Expect(0, 2493, '\P{^- other	Grapheme	EXTEND}', 'deprecated');
Error('\p{	IS/a/OTHER	GRAPHEME Extend}');
Error('\P{	IS/a/OTHER	GRAPHEME Extend}');
Expect(1, 2494, '\p{isothergraphemeextend}', 'deprecated');
Expect(0, 2494, '\p{^isothergraphemeextend}', 'deprecated');
Expect(0, 2494, '\P{isothergraphemeextend}', 'deprecated');
Expect(1, 2494, '\P{^isothergraphemeextend}', 'deprecated');
Expect(0, 2493, '\p{isothergraphemeextend}', 'deprecated');
Expect(1, 2493, '\p{^isothergraphemeextend}', 'deprecated');
Expect(1, 2493, '\P{isothergraphemeextend}', 'deprecated');
Expect(0, 2493, '\P{^isothergraphemeextend}', 'deprecated');
Expect(1, 2494, '\p{ -Is-OtherGraphemeextend}', 'deprecated');
Expect(0, 2494, '\p{^ -Is-OtherGraphemeextend}', 'deprecated');
Expect(0, 2494, '\P{ -Is-OtherGraphemeextend}', 'deprecated');
Expect(1, 2494, '\P{^ -Is-OtherGraphemeextend}', 'deprecated');
Expect(0, 2493, '\p{ -Is-OtherGraphemeextend}', 'deprecated');
Expect(1, 2493, '\p{^ -Is-OtherGraphemeextend}', 'deprecated');
Expect(1, 2493, '\P{ -Is-OtherGraphemeextend}', 'deprecated');
Expect(0, 2493, '\P{^ -Is-OtherGraphemeextend}', 'deprecated');
Error('\p{-:=ogrExt}');
Error('\P{-:=ogrExt}');
Expect(1, 2494, '\p{ogrext}', 'deprecated');
Expect(0, 2494, '\p{^ogrext}', 'deprecated');
Expect(0, 2494, '\P{ogrext}', 'deprecated');
Expect(1, 2494, '\P{^ogrext}', 'deprecated');
Expect(0, 2493, '\p{ogrext}', 'deprecated');
Expect(1, 2493, '\p{^ogrext}', 'deprecated');
Expect(1, 2493, '\P{ogrext}', 'deprecated');
Expect(0, 2493, '\P{^ogrext}', 'deprecated');
Expect(1, 2494, '\p{OGR_Ext}', 'deprecated');
Expect(0, 2494, '\p{^OGR_Ext}', 'deprecated');
Expect(0, 2494, '\P{OGR_Ext}', 'deprecated');
Expect(1, 2494, '\P{^OGR_Ext}', 'deprecated');
Expect(0, 2493, '\p{OGR_Ext}', 'deprecated');
Expect(1, 2493, '\p{^OGR_Ext}', 'deprecated');
Expect(1, 2493, '\P{OGR_Ext}', 'deprecated');
Expect(0, 2493, '\P{^OGR_Ext}', 'deprecated');
Error('\p{ Is/a/OGR EXT}');
Error('\P{ Is/a/OGR EXT}');
Expect(1, 2494, '\p{isogrext}', 'deprecated');
Expect(0, 2494, '\p{^isogrext}', 'deprecated');
Expect(0, 2494, '\P{isogrext}', 'deprecated');
Expect(1, 2494, '\P{^isogrext}', 'deprecated');
Expect(0, 2493, '\p{isogrext}', 'deprecated');
Expect(1, 2493, '\p{^isogrext}', 'deprecated');
Expect(1, 2493, '\P{isogrext}', 'deprecated');
Expect(0, 2493, '\P{^isogrext}', 'deprecated');
Expect(1, 2494, '\p{_ is_ogr Ext}', 'deprecated');
Expect(0, 2494, '\p{^_ is_ogr Ext}', 'deprecated');
Expect(0, 2494, '\P{_ is_ogr Ext}', 'deprecated');
Expect(1, 2494, '\P{^_ is_ogr Ext}', 'deprecated');
Expect(0, 2493, '\p{_ is_ogr Ext}', 'deprecated');
Expect(1, 2493, '\p{^_ is_ogr Ext}', 'deprecated');
Expect(1, 2493, '\P{_ is_ogr Ext}', 'deprecated');
Expect(0, 2493, '\P{^_ is_ogr Ext}', 'deprecated');
Error('\p{_OLDpersian/a/}');
Error('\P{_OLDpersian/a/}');
Expect(1, 66499, '\p{oldpersian}', "");
Expect(0, 66499, '\p{^oldpersian}', "");
Expect(0, 66499, '\P{oldpersian}', "");
Expect(1, 66499, '\P{^oldpersian}', "");
Expect(0, 66463, '\p{oldpersian}', "");
Expect(1, 66463, '\p{^oldpersian}', "");
Expect(1, 66463, '\P{oldpersian}', "");
Expect(0, 66463, '\P{^oldpersian}', "");
Expect(1, 66499, '\p{-_old	Persian}', "");
Expect(0, 66499, '\p{^-_old	Persian}', "");
Expect(0, 66499, '\P{-_old	Persian}', "");
Expect(1, 66499, '\P{^-_old	Persian}', "");
Expect(0, 66463, '\p{-_old	Persian}', "");
Expect(1, 66463, '\p{^-_old	Persian}', "");
Expect(1, 66463, '\P{-_old	Persian}', "");
Expect(0, 66463, '\P{^-_old	Persian}', "");
Error('\p{:=Is	Old-Persian}');
Error('\P{:=Is	Old-Persian}');
Expect(1, 66499, '\p{isoldpersian}', "");
Expect(0, 66499, '\p{^isoldpersian}', "");
Expect(0, 66499, '\P{isoldpersian}', "");
Expect(1, 66499, '\P{^isoldpersian}', "");
Expect(0, 66463, '\p{isoldpersian}', "");
Expect(1, 66463, '\p{^isoldpersian}', "");
Expect(1, 66463, '\P{isoldpersian}', "");
Expect(0, 66463, '\P{^isoldpersian}', "");
Expect(1, 66499, '\p{	-IS old Persian}', "");
Expect(0, 66499, '\p{^	-IS old Persian}', "");
Expect(0, 66499, '\P{	-IS old Persian}', "");
Expect(1, 66499, '\P{^	-IS old Persian}', "");
Expect(0, 66463, '\p{	-IS old Persian}', "");
Expect(1, 66463, '\p{^	-IS old Persian}', "");
Expect(1, 66463, '\P{	-IS old Persian}', "");
Expect(0, 66463, '\P{^	-IS old Persian}', "");
Error('\p{ :=Xpeo}');
Error('\P{ :=Xpeo}');
Expect(1, 66499, '\p{xpeo}', "");
Expect(0, 66499, '\p{^xpeo}', "");
Expect(0, 66499, '\P{xpeo}', "");
Expect(1, 66499, '\P{^xpeo}', "");
Expect(0, 66463, '\p{xpeo}', "");
Expect(1, 66463, '\p{^xpeo}', "");
Expect(1, 66463, '\P{xpeo}', "");
Expect(0, 66463, '\P{^xpeo}', "");
Expect(1, 66499, '\p{	-Xpeo}', "");
Expect(0, 66499, '\p{^	-Xpeo}', "");
Expect(0, 66499, '\P{	-Xpeo}', "");
Expect(1, 66499, '\P{^	-Xpeo}', "");
Expect(0, 66463, '\p{	-Xpeo}', "");
Expect(1, 66463, '\p{^	-Xpeo}', "");
Expect(1, 66463, '\P{	-Xpeo}', "");
Expect(0, 66463, '\P{^	-Xpeo}', "");
Error('\p{-Is XPEO:=}');
Error('\P{-Is XPEO:=}');
Expect(1, 66499, '\p{isxpeo}', "");
Expect(0, 66499, '\p{^isxpeo}', "");
Expect(0, 66499, '\P{isxpeo}', "");
Expect(1, 66499, '\P{^isxpeo}', "");
Expect(0, 66463, '\p{isxpeo}', "");
Expect(1, 66463, '\p{^isxpeo}', "");
Expect(1, 66463, '\P{isxpeo}', "");
Expect(0, 66463, '\P{^isxpeo}', "");
Expect(1, 66499, '\p{-_IS-Xpeo}', "");
Expect(0, 66499, '\p{^-_IS-Xpeo}', "");
Expect(0, 66499, '\P{-_IS-Xpeo}', "");
Expect(1, 66499, '\P{^-_IS-Xpeo}', "");
Expect(0, 66463, '\p{-_IS-Xpeo}', "");
Expect(1, 66463, '\p{^-_IS-Xpeo}', "");
Expect(1, 66463, '\P{-_IS-Xpeo}', "");
Expect(0, 66463, '\P{^-_IS-Xpeo}', "");
Error('\p{ /a/new-Tai Lue}');
Error('\P{ /a/new-Tai Lue}');
Expect(1, 6571, '\p{newtailue}', "");
Expect(0, 6571, '\p{^newtailue}', "");
Expect(0, 6571, '\P{newtailue}', "");
Expect(1, 6571, '\P{^newtailue}', "");
Expect(0, 6527, '\p{newtailue}', "");
Expect(1, 6527, '\p{^newtailue}', "");
Expect(1, 6527, '\P{newtailue}', "");
Expect(0, 6527, '\P{^newtailue}', "");
Expect(1, 6571, '\p{ 	NewTai_LUE}', "");
Expect(0, 6571, '\p{^ 	NewTai_LUE}', "");
Expect(0, 6571, '\P{ 	NewTai_LUE}', "");
Expect(1, 6571, '\P{^ 	NewTai_LUE}', "");
Expect(0, 6527, '\p{ 	NewTai_LUE}', "");
Expect(1, 6527, '\p{^ 	NewTai_LUE}', "");
Expect(1, 6527, '\P{ 	NewTai_LUE}', "");
Expect(0, 6527, '\P{^ 	NewTai_LUE}', "");
Error('\p{_-IS NEW-Tai/a/Lue}');
Error('\P{_-IS NEW-Tai/a/Lue}');
Expect(1, 6571, '\p{isnewtailue}', "");
Expect(0, 6571, '\p{^isnewtailue}', "");
Expect(0, 6571, '\P{isnewtailue}', "");
Expect(1, 6571, '\P{^isnewtailue}', "");
Expect(0, 6527, '\p{isnewtailue}', "");
Expect(1, 6527, '\p{^isnewtailue}', "");
Expect(1, 6527, '\P{isnewtailue}', "");
Expect(0, 6527, '\P{^isnewtailue}', "");
Expect(1, 6571, '\p{- is-New_Tai_LUE}', "");
Expect(0, 6571, '\p{^- is-New_Tai_LUE}', "");
Expect(0, 6571, '\P{- is-New_Tai_LUE}', "");
Expect(1, 6571, '\P{^- is-New_Tai_LUE}', "");
Expect(0, 6527, '\p{- is-New_Tai_LUE}', "");
Expect(1, 6527, '\p{^- is-New_Tai_LUE}', "");
Expect(1, 6527, '\P{- is-New_Tai_LUE}', "");
Expect(0, 6527, '\P{^- is-New_Tai_LUE}', "");
Error('\p{-talu:=}');
Error('\P{-talu:=}');
Expect(1, 6571, '\p{talu}', "");
Expect(0, 6571, '\p{^talu}', "");
Expect(0, 6571, '\P{talu}', "");
Expect(1, 6571, '\P{^talu}', "");
Expect(0, 6527, '\p{talu}', "");
Expect(1, 6527, '\p{^talu}', "");
Expect(1, 6527, '\P{talu}', "");
Expect(0, 6527, '\P{^talu}', "");
Expect(1, 6571, '\p{	_Talu}', "");
Expect(0, 6571, '\p{^	_Talu}', "");
Expect(0, 6571, '\P{	_Talu}', "");
Expect(1, 6571, '\P{^	_Talu}', "");
Expect(0, 6527, '\p{	_Talu}', "");
Expect(1, 6527, '\p{^	_Talu}', "");
Expect(1, 6527, '\P{	_Talu}', "");
Expect(0, 6527, '\P{^	_Talu}', "");
Error('\p{:=	 IsTalu}');
Error('\P{:=	 IsTalu}');
Expect(1, 6571, '\p{istalu}', "");
Expect(0, 6571, '\p{^istalu}', "");
Expect(0, 6571, '\P{istalu}', "");
Expect(1, 6571, '\P{^istalu}', "");
Expect(0, 6527, '\p{istalu}', "");
Expect(1, 6527, '\p{^istalu}', "");
Expect(1, 6527, '\P{istalu}', "");
Expect(0, 6527, '\P{^istalu}', "");
Expect(1, 6571, '\p{ Is TALU}', "");
Expect(0, 6571, '\p{^ Is TALU}', "");
Expect(0, 6571, '\P{ Is TALU}', "");
Expect(1, 6571, '\P{^ Is TALU}', "");
Expect(0, 6527, '\p{ Is TALU}', "");
Expect(1, 6527, '\p{^ Is TALU}', "");
Expect(1, 6527, '\P{ Is TALU}', "");
Expect(0, 6527, '\P{^ Is TALU}', "");
Error('\p{ /a/Unassigned}');
Error('\P{ /a/Unassigned}');
Expect(1, 889, '\p{unassigned}', "");
Expect(0, 889, '\p{^unassigned}', "");
Expect(0, 889, '\P{unassigned}', "");
Expect(1, 889, '\P{^unassigned}', "");
Expect(0, 887, '\p{unassigned}', "");
Expect(1, 887, '\p{^unassigned}', "");
Expect(1, 887, '\P{unassigned}', "");
Expect(0, 887, '\P{^unassigned}', "");
Expect(1, 889, '\p{--unassigned}', "");
Expect(0, 889, '\p{^--unassigned}', "");
Expect(0, 889, '\P{--unassigned}', "");
Expect(1, 889, '\P{^--unassigned}', "");
Expect(0, 887, '\p{--unassigned}', "");
Expect(1, 887, '\p{^--unassigned}', "");
Expect(1, 887, '\P{--unassigned}', "");
Expect(0, 887, '\P{^--unassigned}', "");
Error('\p{__is/a/Unassigned}');
Error('\P{__is/a/Unassigned}');
Expect(1, 889, '\p{isunassigned}', "");
Expect(0, 889, '\p{^isunassigned}', "");
Expect(0, 889, '\P{isunassigned}', "");
Expect(1, 889, '\P{^isunassigned}', "");
Expect(0, 887, '\p{isunassigned}', "");
Expect(1, 887, '\p{^isunassigned}', "");
Expect(1, 887, '\P{isunassigned}', "");
Expect(0, 887, '\P{^isunassigned}', "");
Expect(1, 889, '\p{_ isUNASSIGNED}', "");
Expect(0, 889, '\p{^_ isUNASSIGNED}', "");
Expect(0, 889, '\P{_ isUNASSIGNED}', "");
Expect(1, 889, '\P{^_ isUNASSIGNED}', "");
Expect(0, 887, '\p{_ isUNASSIGNED}', "");
Expect(1, 887, '\p{^_ isUNASSIGNED}', "");
Expect(1, 887, '\P{_ isUNASSIGNED}', "");
Expect(0, 887, '\P{^_ isUNASSIGNED}', "");
Error('\p{:=_Cn}');
Error('\P{:=_Cn}');
Expect(1, 889, '\p{cn}', "");
Expect(0, 889, '\p{^cn}', "");
Expect(0, 889, '\P{cn}', "");
Expect(1, 889, '\P{^cn}', "");
Expect(0, 887, '\p{cn}', "");
Expect(1, 887, '\p{^cn}', "");
Expect(1, 887, '\P{cn}', "");
Expect(0, 887, '\P{^cn}', "");
Expect(1, 889, '\p{	_Cn}', "");
Expect(0, 889, '\p{^	_Cn}', "");
Expect(0, 889, '\P{	_Cn}', "");
Expect(1, 889, '\P{^	_Cn}', "");
Expect(0, 887, '\p{	_Cn}', "");
Expect(1, 887, '\p{^	_Cn}', "");
Expect(1, 887, '\P{	_Cn}', "");
Expect(0, 887, '\P{^	_Cn}', "");
Error('\p{/a/Is	cn}');
Error('\P{/a/Is	cn}');
Expect(1, 889, '\p{iscn}', "");
Expect(0, 889, '\p{^iscn}', "");
Expect(0, 889, '\P{iscn}', "");
Expect(1, 889, '\P{^iscn}', "");
Expect(0, 887, '\p{iscn}', "");
Expect(1, 887, '\p{^iscn}', "");
Expect(1, 887, '\P{iscn}', "");
Expect(0, 887, '\P{^iscn}', "");
Expect(1, 889, '\p{	 IsCn}', "");
Expect(0, 889, '\p{^	 IsCn}', "");
Expect(0, 889, '\P{	 IsCn}', "");
Expect(1, 889, '\P{^	 IsCn}', "");
Expect(0, 887, '\p{	 IsCn}', "");
Expect(1, 887, '\p{^	 IsCn}', "");
Expect(1, 887, '\P{	 IsCn}', "");
Expect(0, 887, '\P{^	 IsCn}', "");
Error('\p{/a/	lepcha}');
Error('\P{/a/	lepcha}');
Expect(1, 7223, '\p{lepcha}', "");
Expect(0, 7223, '\p{^lepcha}', "");
Expect(0, 7223, '\P{lepcha}', "");
Expect(1, 7223, '\P{^lepcha}', "");
Expect(0, 7167, '\p{lepcha}', "");
Expect(1, 7167, '\p{^lepcha}', "");
Expect(1, 7167, '\P{lepcha}', "");
Expect(0, 7167, '\P{^lepcha}', "");
Expect(1, 7223, '\p{ -Lepcha}', "");
Expect(0, 7223, '\p{^ -Lepcha}', "");
Expect(0, 7223, '\P{ -Lepcha}', "");
Expect(1, 7223, '\P{^ -Lepcha}', "");
Expect(0, 7167, '\p{ -Lepcha}', "");
Expect(1, 7167, '\p{^ -Lepcha}', "");
Expect(1, 7167, '\P{ -Lepcha}', "");
Expect(0, 7167, '\P{^ -Lepcha}', "");
Error('\p{ Is:=Lepcha}');
Error('\P{ Is:=Lepcha}');
Expect(1, 7223, '\p{islepcha}', "");
Expect(0, 7223, '\p{^islepcha}', "");
Expect(0, 7223, '\P{islepcha}', "");
Expect(1, 7223, '\P{^islepcha}', "");
Expect(0, 7167, '\p{islepcha}', "");
Expect(1, 7167, '\p{^islepcha}', "");
Expect(1, 7167, '\P{islepcha}', "");
Expect(0, 7167, '\P{^islepcha}', "");
Expect(1, 7223, '\p{ _Is Lepcha}', "");
Expect(0, 7223, '\p{^ _Is Lepcha}', "");
Expect(0, 7223, '\P{ _Is Lepcha}', "");
Expect(1, 7223, '\P{^ _Is Lepcha}', "");
Expect(0, 7167, '\p{ _Is Lepcha}', "");
Expect(1, 7167, '\p{^ _Is Lepcha}', "");
Expect(1, 7167, '\P{ _Is Lepcha}', "");
Expect(0, 7167, '\P{^ _Is Lepcha}', "");
Error('\p{/a/	_lepc}');
Error('\P{/a/	_lepc}');
Expect(1, 7223, '\p{lepc}', "");
Expect(0, 7223, '\p{^lepc}', "");
Expect(0, 7223, '\P{lepc}', "");
Expect(1, 7223, '\P{^lepc}', "");
Expect(0, 7167, '\p{lepc}', "");
Expect(1, 7167, '\p{^lepc}', "");
Expect(1, 7167, '\P{lepc}', "");
Expect(0, 7167, '\P{^lepc}', "");
Expect(1, 7223, '\p{_-lepc}', "");
Expect(0, 7223, '\p{^_-lepc}', "");
Expect(0, 7223, '\P{_-lepc}', "");
Expect(1, 7223, '\P{^_-lepc}', "");
Expect(0, 7167, '\p{_-lepc}', "");
Expect(1, 7167, '\p{^_-lepc}', "");
Expect(1, 7167, '\P{_-lepc}', "");
Expect(0, 7167, '\P{^_-lepc}', "");
Error('\p{_:=is_Lepc}');
Error('\P{_:=is_Lepc}');
Expect(1, 7223, '\p{islepc}', "");
Expect(0, 7223, '\p{^islepc}', "");
Expect(0, 7223, '\P{islepc}', "");
Expect(1, 7223, '\P{^islepc}', "");
Expect(0, 7167, '\p{islepc}', "");
Expect(1, 7167, '\p{^islepc}', "");
Expect(1, 7167, '\P{islepc}', "");
Expect(0, 7167, '\P{^islepc}', "");
Expect(1, 7223, '\p{_Is_Lepc}', "");
Expect(0, 7223, '\p{^_Is_Lepc}', "");
Expect(0, 7223, '\P{_Is_Lepc}', "");
Expect(1, 7223, '\P{^_Is_Lepc}', "");
Expect(0, 7167, '\p{_Is_Lepc}', "");
Expect(1, 7167, '\p{^_Is_Lepc}', "");
Expect(1, 7167, '\P{_Is_Lepc}', "");
Expect(0, 7167, '\P{^_Is_Lepc}', "");
Error('\p{-	IDEOGRAPHIC/a/DESCRIPTION	Characters}');
Error('\P{-	IDEOGRAPHIC/a/DESCRIPTION	Characters}');
Expect(1, 12287, '\p{ideographicdescriptioncharacters}', "");
Expect(0, 12287, '\p{^ideographicdescriptioncharacters}', "");
Expect(0, 12287, '\P{ideographicdescriptioncharacters}', "");
Expect(1, 12287, '\P{^ideographicdescriptioncharacters}', "");
Expect(0, 12271, '\p{ideographicdescriptioncharacters}', "");
Expect(1, 12271, '\p{^ideographicdescriptioncharacters}', "");
Expect(1, 12271, '\P{ideographicdescriptioncharacters}', "");
Expect(0, 12271, '\P{^ideographicdescriptioncharacters}', "");
Expect(1, 12287, '\p{__Ideographic	description CHARACTERS}', "");
Expect(0, 12287, '\p{^__Ideographic	description CHARACTERS}', "");
Expect(0, 12287, '\P{__Ideographic	description CHARACTERS}', "");
Expect(1, 12287, '\P{^__Ideographic	description CHARACTERS}', "");
Expect(0, 12271, '\p{__Ideographic	description CHARACTERS}', "");
Expect(1, 12271, '\p{^__Ideographic	description CHARACTERS}', "");
Expect(1, 12271, '\P{__Ideographic	description CHARACTERS}', "");
Expect(0, 12271, '\P{^__Ideographic	description CHARACTERS}', "");
Error('\p{		IS/a/Ideographic descriptionCHARACTERS}');
Error('\P{		IS/a/Ideographic descriptionCHARACTERS}');
Expect(1, 12287, '\p{isideographicdescriptioncharacters}', "");
Expect(0, 12287, '\p{^isideographicdescriptioncharacters}', "");
Expect(0, 12287, '\P{isideographicdescriptioncharacters}', "");
Expect(1, 12287, '\P{^isideographicdescriptioncharacters}', "");
Expect(0, 12271, '\p{isideographicdescriptioncharacters}', "");
Expect(1, 12271, '\p{^isideographicdescriptioncharacters}', "");
Expect(1, 12271, '\P{isideographicdescriptioncharacters}', "");
Expect(0, 12271, '\P{^isideographicdescriptioncharacters}', "");
Expect(1, 12287, '\p{	Is_Ideographicdescription characters}', "");
Expect(0, 12287, '\p{^	Is_Ideographicdescription characters}', "");
Expect(0, 12287, '\P{	Is_Ideographicdescription characters}', "");
Expect(1, 12287, '\P{^	Is_Ideographicdescription characters}', "");
Expect(0, 12271, '\p{	Is_Ideographicdescription characters}', "");
Expect(1, 12271, '\p{^	Is_Ideographicdescription characters}', "");
Expect(1, 12271, '\P{	Is_Ideographicdescription characters}', "");
Expect(0, 12271, '\P{^	Is_Ideographicdescription characters}', "");
Error('\p{--InIDEOGRAPHIC description:=characters}');
Error('\P{--InIDEOGRAPHIC description:=characters}');
Expect(1, 12287, '\p{inideographicdescriptioncharacters}', "");
Expect(0, 12287, '\p{^inideographicdescriptioncharacters}', "");
Expect(0, 12287, '\P{inideographicdescriptioncharacters}', "");
Expect(1, 12287, '\P{^inideographicdescriptioncharacters}', "");
Expect(0, 12271, '\p{inideographicdescriptioncharacters}', "");
Expect(1, 12271, '\p{^inideographicdescriptioncharacters}', "");
Expect(1, 12271, '\P{inideographicdescriptioncharacters}', "");
Expect(0, 12271, '\P{^inideographicdescriptioncharacters}', "");
Expect(1, 12287, '\p{ 	IN	Ideographic DESCRIPTIONCHARACTERS}', "");
Expect(0, 12287, '\p{^ 	IN	Ideographic DESCRIPTIONCHARACTERS}', "");
Expect(0, 12287, '\P{ 	IN	Ideographic DESCRIPTIONCHARACTERS}', "");
Expect(1, 12287, '\P{^ 	IN	Ideographic DESCRIPTIONCHARACTERS}', "");
Expect(0, 12271, '\p{ 	IN	Ideographic DESCRIPTIONCHARACTERS}', "");
Expect(1, 12271, '\p{^ 	IN	Ideographic DESCRIPTIONCHARACTERS}', "");
Expect(1, 12271, '\P{ 	IN	Ideographic DESCRIPTIONCHARACTERS}', "");
Expect(0, 12271, '\P{^ 	IN	Ideographic DESCRIPTIONCHARACTERS}', "");
Error('\p{_:=COMBINING	Half Marks}');
Error('\P{_:=COMBINING	Half Marks}');
Expect(1, 65071, '\p{combininghalfmarks}', "");
Expect(0, 65071, '\p{^combininghalfmarks}', "");
Expect(0, 65071, '\P{combininghalfmarks}', "");
Expect(1, 65071, '\P{^combininghalfmarks}', "");
Expect(0, 65055, '\p{combininghalfmarks}', "");
Expect(1, 65055, '\p{^combininghalfmarks}', "");
Expect(1, 65055, '\P{combininghalfmarks}', "");
Expect(0, 65055, '\P{^combininghalfmarks}', "");
Expect(1, 65071, '\p{- COMBINING Half	marks}', "");
Expect(0, 65071, '\p{^- COMBINING Half	marks}', "");
Expect(0, 65071, '\P{- COMBINING Half	marks}', "");
Expect(1, 65071, '\P{^- COMBINING Half	marks}', "");
Expect(0, 65055, '\p{- COMBINING Half	marks}', "");
Expect(1, 65055, '\p{^- COMBINING Half	marks}', "");
Expect(1, 65055, '\P{- COMBINING Half	marks}', "");
Expect(0, 65055, '\P{^- COMBINING Half	marks}', "");
Error('\p{/a/_	is COMBINING	half	marks}');
Error('\P{/a/_	is COMBINING	half	marks}');
Expect(1, 65071, '\p{iscombininghalfmarks}', "");
Expect(0, 65071, '\p{^iscombininghalfmarks}', "");
Expect(0, 65071, '\P{iscombininghalfmarks}', "");
Expect(1, 65071, '\P{^iscombininghalfmarks}', "");
Expect(0, 65055, '\p{iscombininghalfmarks}', "");
Expect(1, 65055, '\p{^iscombininghalfmarks}', "");
Expect(1, 65055, '\P{iscombininghalfmarks}', "");
Expect(0, 65055, '\P{^iscombininghalfmarks}', "");
Expect(1, 65071, '\p{_is COMBINING-half-Marks}', "");
Expect(0, 65071, '\p{^_is COMBINING-half-Marks}', "");
Expect(0, 65071, '\P{_is COMBINING-half-Marks}', "");
Expect(1, 65071, '\P{^_is COMBINING-half-Marks}', "");
Expect(0, 65055, '\p{_is COMBINING-half-Marks}', "");
Expect(1, 65055, '\p{^_is COMBINING-half-Marks}', "");
Expect(1, 65055, '\P{_is COMBINING-half-Marks}', "");
Expect(0, 65055, '\P{^_is COMBINING-half-Marks}', "");
Error('\p{	in-combining:=Half_marks}');
Error('\P{	in-combining:=Half_marks}');
Expect(1, 65071, '\p{incombininghalfmarks}', "");
Expect(0, 65071, '\p{^incombininghalfmarks}', "");
Expect(0, 65071, '\P{incombininghalfmarks}', "");
Expect(1, 65071, '\P{^incombininghalfmarks}', "");
Expect(0, 65055, '\p{incombininghalfmarks}', "");
Expect(1, 65055, '\p{^incombininghalfmarks}', "");
Expect(1, 65055, '\P{incombininghalfmarks}', "");
Expect(0, 65055, '\P{^incombininghalfmarks}', "");
Expect(1, 65071, '\p{_-In-COMBINING-Half	Marks}', "");
Expect(0, 65071, '\p{^_-In-COMBINING-Half	Marks}', "");
Expect(0, 65071, '\P{_-In-COMBINING-Half	Marks}', "");
Expect(1, 65071, '\P{^_-In-COMBINING-Half	Marks}', "");
Expect(0, 65055, '\p{_-In-COMBINING-Half	Marks}', "");
Expect(1, 65055, '\p{^_-In-COMBINING-Half	Marks}', "");
Expect(1, 65055, '\P{_-In-COMBINING-Half	Marks}', "");
Expect(0, 65055, '\P{^_-In-COMBINING-Half	Marks}', "");
Error('\p{-:=Oriya}');
Error('\P{-:=Oriya}');
Expect(1, 2819, '\p{oriya}', "");
Expect(0, 2819, '\p{^oriya}', "");
Expect(0, 2819, '\P{oriya}', "");
Expect(1, 2819, '\P{^oriya}', "");
Expect(0, 2816, '\p{oriya}', "");
Expect(1, 2816, '\p{^oriya}', "");
Expect(1, 2816, '\P{oriya}', "");
Expect(0, 2816, '\P{^oriya}', "");
Expect(1, 2819, '\p{Oriya}', "");
Expect(0, 2819, '\p{^Oriya}', "");
Expect(0, 2819, '\P{Oriya}', "");
Expect(1, 2819, '\P{^Oriya}', "");
Expect(0, 2816, '\p{Oriya}', "");
Expect(1, 2816, '\p{^Oriya}', "");
Expect(1, 2816, '\P{Oriya}', "");
Expect(0, 2816, '\P{^Oriya}', "");
Error('\p{ IS/a/Oriya}');
Error('\P{ IS/a/Oriya}');
Expect(1, 2819, '\p{isoriya}', "");
Expect(0, 2819, '\p{^isoriya}', "");
Expect(0, 2819, '\P{isoriya}', "");
Expect(1, 2819, '\P{^isoriya}', "");
Expect(0, 2816, '\p{isoriya}', "");
Expect(1, 2816, '\p{^isoriya}', "");
Expect(1, 2816, '\P{isoriya}', "");
Expect(0, 2816, '\P{^isoriya}', "");
Expect(1, 2819, '\p{--Is Oriya}', "");
Expect(0, 2819, '\p{^--Is Oriya}', "");
Expect(0, 2819, '\P{--Is Oriya}', "");
Expect(1, 2819, '\P{^--Is Oriya}', "");
Expect(0, 2816, '\p{--Is Oriya}', "");
Expect(1, 2816, '\p{^--Is Oriya}', "");
Expect(1, 2816, '\P{--Is Oriya}', "");
Expect(0, 2816, '\P{^--Is Oriya}', "");
Error('\p{:=_	ORYA}');
Error('\P{:=_	ORYA}');
Expect(1, 2819, '\p{orya}', "");
Expect(0, 2819, '\p{^orya}', "");
Expect(0, 2819, '\P{orya}', "");
Expect(1, 2819, '\P{^orya}', "");
Expect(0, 2816, '\p{orya}', "");
Expect(1, 2816, '\p{^orya}', "");
Expect(1, 2816, '\P{orya}', "");
Expect(0, 2816, '\P{^orya}', "");
Expect(1, 2819, '\p{	Orya}', "");
Expect(0, 2819, '\p{^	Orya}', "");
Expect(0, 2819, '\P{	Orya}', "");
Expect(1, 2819, '\P{^	Orya}', "");
Expect(0, 2816, '\p{	Orya}', "");
Expect(1, 2816, '\p{^	Orya}', "");
Expect(1, 2816, '\P{	Orya}', "");
Expect(0, 2816, '\P{^	Orya}', "");
Error('\p{	:=Is	ORYA}');
Error('\P{	:=Is	ORYA}');
Expect(1, 2819, '\p{isorya}', "");
Expect(0, 2819, '\p{^isorya}', "");
Expect(0, 2819, '\P{isorya}', "");
Expect(1, 2819, '\P{^isorya}', "");
Expect(0, 2816, '\p{isorya}', "");
Expect(1, 2816, '\p{^isorya}', "");
Expect(1, 2816, '\P{isorya}', "");
Expect(0, 2816, '\P{^isorya}', "");
Expect(1, 2819, '\p{__Is ORYA}', "");
Expect(0, 2819, '\p{^__Is ORYA}', "");
Expect(0, 2819, '\P{__Is ORYA}', "");
Expect(1, 2819, '\P{^__Is ORYA}', "");
Expect(0, 2816, '\p{__Is ORYA}', "");
Expect(1, 2816, '\p{^__Is ORYA}', "");
Expect(1, 2816, '\P{__Is ORYA}', "");
Expect(0, 2816, '\P{^__Is ORYA}', "");
Error('\p{/a/- PHONETIC Extensions}');
Error('\P{/a/- PHONETIC Extensions}');
Expect(1, 7551, '\p{phoneticextensions}', "");
Expect(0, 7551, '\p{^phoneticextensions}', "");
Expect(0, 7551, '\P{phoneticextensions}', "");
Expect(1, 7551, '\P{^phoneticextensions}', "");
Expect(0, 7423, '\p{phoneticextensions}', "");
Expect(1, 7423, '\p{^phoneticextensions}', "");
Expect(1, 7423, '\P{phoneticextensions}', "");
Expect(0, 7423, '\P{^phoneticextensions}', "");
Expect(1, 7551, '\p{_-PhoneticExtensions}', "");
Expect(0, 7551, '\p{^_-PhoneticExtensions}', "");
Expect(0, 7551, '\P{_-PhoneticExtensions}', "");
Expect(1, 7551, '\P{^_-PhoneticExtensions}', "");
Expect(0, 7423, '\p{_-PhoneticExtensions}', "");
Expect(1, 7423, '\p{^_-PhoneticExtensions}', "");
Expect(1, 7423, '\P{_-PhoneticExtensions}', "");
Expect(0, 7423, '\P{^_-PhoneticExtensions}', "");
Error('\p{	is:=PHONETIC Extensions}');
Error('\P{	is:=PHONETIC Extensions}');
Expect(1, 7551, '\p{isphoneticextensions}', "");
Expect(0, 7551, '\p{^isphoneticextensions}', "");
Expect(0, 7551, '\P{isphoneticextensions}', "");
Expect(1, 7551, '\P{^isphoneticextensions}', "");
Expect(0, 7423, '\p{isphoneticextensions}', "");
Expect(1, 7423, '\p{^isphoneticextensions}', "");
Expect(1, 7423, '\P{isphoneticextensions}', "");
Expect(0, 7423, '\P{^isphoneticextensions}', "");
Expect(1, 7551, '\p{ Is_PHONETICExtensions}', "");
Expect(0, 7551, '\p{^ Is_PHONETICExtensions}', "");
Expect(0, 7551, '\P{ Is_PHONETICExtensions}', "");
Expect(1, 7551, '\P{^ Is_PHONETICExtensions}', "");
Expect(0, 7423, '\p{ Is_PHONETICExtensions}', "");
Expect(1, 7423, '\p{^ Is_PHONETICExtensions}', "");
Expect(1, 7423, '\P{ Is_PHONETICExtensions}', "");
Expect(0, 7423, '\P{^ Is_PHONETICExtensions}', "");
Error('\p{_:=inPHONETIC	extensions}');
Error('\P{_:=inPHONETIC	extensions}');
Expect(1, 7551, '\p{inphoneticextensions}', "");
Expect(0, 7551, '\p{^inphoneticextensions}', "");
Expect(0, 7551, '\P{inphoneticextensions}', "");
Expect(1, 7551, '\P{^inphoneticextensions}', "");
Expect(0, 7423, '\p{inphoneticextensions}', "");
Expect(1, 7423, '\p{^inphoneticextensions}', "");
Expect(1, 7423, '\P{inphoneticextensions}', "");
Expect(0, 7423, '\P{^inphoneticextensions}', "");
Expect(1, 7551, '\p{	 In-Phonetic-Extensions}', "");
Expect(0, 7551, '\p{^	 In-Phonetic-Extensions}', "");
Expect(0, 7551, '\P{	 In-Phonetic-Extensions}', "");
Expect(1, 7551, '\P{^	 In-Phonetic-Extensions}', "");
Expect(0, 7423, '\p{	 In-Phonetic-Extensions}', "");
Expect(1, 7423, '\p{^	 In-Phonetic-Extensions}', "");
Expect(1, 7423, '\P{	 In-Phonetic-Extensions}', "");
Expect(0, 7423, '\P{^	 In-Phonetic-Extensions}', "");
Error('\p{	:=grapheme_extend}');
Error('\P{	:=grapheme_extend}');
Expect(1, 879, '\p{graphemeextend}', "");
Expect(0, 879, '\p{^graphemeextend}', "");
Expect(0, 879, '\P{graphemeextend}', "");
Expect(1, 879, '\P{^graphemeextend}', "");
Expect(0, 767, '\p{graphemeextend}', "");
Expect(1, 767, '\p{^graphemeextend}', "");
Expect(1, 767, '\P{graphemeextend}', "");
Expect(0, 767, '\P{^graphemeextend}', "");
Expect(1, 879, '\p{_	Grapheme EXTEND}', "");
Expect(0, 879, '\p{^_	Grapheme EXTEND}', "");
Expect(0, 879, '\P{_	Grapheme EXTEND}', "");
Expect(1, 879, '\P{^_	Grapheme EXTEND}', "");
Expect(0, 767, '\p{_	Grapheme EXTEND}', "");
Expect(1, 767, '\p{^_	Grapheme EXTEND}', "");
Expect(1, 767, '\P{_	Grapheme EXTEND}', "");
Expect(0, 767, '\P{^_	Grapheme EXTEND}', "");
Error('\p{:=		Is-graphemeExtend}');
Error('\P{:=		Is-graphemeExtend}');
Expect(1, 879, '\p{isgraphemeextend}', "");
Expect(0, 879, '\p{^isgraphemeextend}', "");
Expect(0, 879, '\P{isgraphemeextend}', "");
Expect(1, 879, '\P{^isgraphemeextend}', "");
Expect(0, 767, '\p{isgraphemeextend}', "");
Expect(1, 767, '\p{^isgraphemeextend}', "");
Expect(1, 767, '\P{isgraphemeextend}', "");
Expect(0, 767, '\P{^isgraphemeextend}', "");
Expect(1, 879, '\p{ -IS-GRAPHEME	Extend}', "");
Expect(0, 879, '\p{^ -IS-GRAPHEME	Extend}', "");
Expect(0, 879, '\P{ -IS-GRAPHEME	Extend}', "");
Expect(1, 879, '\P{^ -IS-GRAPHEME	Extend}', "");
Expect(0, 767, '\p{ -IS-GRAPHEME	Extend}', "");
Expect(1, 767, '\p{^ -IS-GRAPHEME	Extend}', "");
Expect(1, 767, '\P{ -IS-GRAPHEME	Extend}', "");
Expect(0, 767, '\P{^ -IS-GRAPHEME	Extend}', "");
Error('\p{/a/Gr_Ext}');
Error('\P{/a/Gr_Ext}');
Expect(1, 879, '\p{grext}', "");
Expect(0, 879, '\p{^grext}', "");
Expect(0, 879, '\P{grext}', "");
Expect(1, 879, '\P{^grext}', "");
Expect(0, 767, '\p{grext}', "");
Expect(1, 767, '\p{^grext}', "");
Expect(1, 767, '\P{grext}', "");
Expect(0, 767, '\P{^grext}', "");
Expect(1, 879, '\p{ Gr Ext}', "");
Expect(0, 879, '\p{^ Gr Ext}', "");
Expect(0, 879, '\P{ Gr Ext}', "");
Expect(1, 879, '\P{^ Gr Ext}', "");
Expect(0, 767, '\p{ Gr Ext}', "");
Expect(1, 767, '\p{^ Gr Ext}', "");
Expect(1, 767, '\P{ Gr Ext}', "");
Expect(0, 767, '\P{^ Gr Ext}', "");
Error('\p{ Is-gr:=ext}');
Error('\P{ Is-gr:=ext}');
Expect(1, 879, '\p{isgrext}', "");
Expect(0, 879, '\p{^isgrext}', "");
Expect(0, 879, '\P{isgrext}', "");
Expect(1, 879, '\P{^isgrext}', "");
Expect(0, 767, '\p{isgrext}', "");
Expect(1, 767, '\p{^isgrext}', "");
Expect(1, 767, '\P{isgrext}', "");
Expect(0, 767, '\P{^isgrext}', "");
Expect(1, 879, '\p{ IS GRExt}', "");
Expect(0, 879, '\p{^ IS GRExt}', "");
Expect(0, 879, '\P{ IS GRExt}', "");
Expect(1, 879, '\P{^ IS GRExt}', "");
Expect(0, 767, '\p{ IS GRExt}', "");
Expect(1, 767, '\p{^ IS GRExt}', "");
Expect(1, 767, '\P{ IS GRExt}', "");
Expect(0, 767, '\P{^ IS GRExt}', "");
Error('\p{	:=DEFAULT Ignorable_CodePoint}');
Error('\P{	:=DEFAULT Ignorable_CodePoint}');
Expect(1, 173, '\p{defaultignorablecodepoint}', "");
Expect(0, 173, '\p{^defaultignorablecodepoint}', "");
Expect(0, 173, '\P{defaultignorablecodepoint}', "");
Expect(1, 173, '\P{^defaultignorablecodepoint}', "");
Expect(0, 172, '\p{defaultignorablecodepoint}', "");
Expect(1, 172, '\p{^defaultignorablecodepoint}', "");
Expect(1, 172, '\P{defaultignorablecodepoint}', "");
Expect(0, 172, '\P{^defaultignorablecodepoint}', "");
Expect(1, 173, '\p{DEFAULT Ignorable	CODEpoint}', "");
Expect(0, 173, '\p{^DEFAULT Ignorable	CODEpoint}', "");
Expect(0, 173, '\P{DEFAULT Ignorable	CODEpoint}', "");
Expect(1, 173, '\P{^DEFAULT Ignorable	CODEpoint}', "");
Expect(0, 172, '\p{DEFAULT Ignorable	CODEpoint}', "");
Expect(1, 172, '\p{^DEFAULT Ignorable	CODEpoint}', "");
Expect(1, 172, '\P{DEFAULT Ignorable	CODEpoint}', "");
Expect(0, 172, '\P{^DEFAULT Ignorable	CODEpoint}', "");
Error('\p{-:=IS DefaultIgnorable code POINT}');
Error('\P{-:=IS DefaultIgnorable code POINT}');
Expect(1, 173, '\p{isdefaultignorablecodepoint}', "");
Expect(0, 173, '\p{^isdefaultignorablecodepoint}', "");
Expect(0, 173, '\P{isdefaultignorablecodepoint}', "");
Expect(1, 173, '\P{^isdefaultignorablecodepoint}', "");
Expect(0, 172, '\p{isdefaultignorablecodepoint}', "");
Expect(1, 172, '\p{^isdefaultignorablecodepoint}', "");
Expect(1, 172, '\P{isdefaultignorablecodepoint}', "");
Expect(0, 172, '\P{^isdefaultignorablecodepoint}', "");
Expect(1, 173, '\p{- Is Default IGNORABLE Code	POINT}', "");
Expect(0, 173, '\p{^- Is Default IGNORABLE Code	POINT}', "");
Expect(0, 173, '\P{- Is Default IGNORABLE Code	POINT}', "");
Expect(1, 173, '\P{^- Is Default IGNORABLE Code	POINT}', "");
Expect(0, 172, '\p{- Is Default IGNORABLE Code	POINT}', "");
Expect(1, 172, '\p{^- Is Default IGNORABLE Code	POINT}', "");
Expect(1, 172, '\P{- Is Default IGNORABLE Code	POINT}', "");
Expect(0, 172, '\P{^- Is Default IGNORABLE Code	POINT}', "");
Error('\p{_/a/DI}');
Error('\P{_/a/DI}');
Expect(1, 173, '\p{di}', "");
Expect(0, 173, '\p{^di}', "");
Expect(0, 173, '\P{di}', "");
Expect(1, 173, '\P{^di}', "");
Expect(0, 172, '\p{di}', "");
Expect(1, 172, '\p{^di}', "");
Expect(1, 172, '\P{di}', "");
Expect(0, 172, '\P{^di}', "");
Expect(1, 173, '\p{__DI}', "");
Expect(0, 173, '\p{^__DI}', "");
Expect(0, 173, '\P{__DI}', "");
Expect(1, 173, '\P{^__DI}', "");
Expect(0, 172, '\p{__DI}', "");
Expect(1, 172, '\p{^__DI}', "");
Expect(1, 172, '\P{__DI}', "");
Expect(0, 172, '\P{^__DI}', "");
Error('\p{__Isdi:=}');
Error('\P{__Isdi:=}');
Expect(1, 173, '\p{isdi}', "");
Expect(0, 173, '\p{^isdi}', "");
Expect(0, 173, '\P{isdi}', "");
Expect(1, 173, '\P{^isdi}', "");
Expect(0, 172, '\p{isdi}', "");
Expect(1, 172, '\p{^isdi}', "");
Expect(1, 172, '\P{isdi}', "");
Expect(0, 172, '\P{^isdi}', "");
Expect(1, 173, '\p{		Is_DI}', "");
Expect(0, 173, '\p{^		Is_DI}', "");
Expect(0, 173, '\P{		Is_DI}', "");
Expect(1, 173, '\P{^		Is_DI}', "");
Expect(0, 172, '\p{		Is_DI}', "");
Expect(1, 172, '\p{^		Is_DI}', "");
Expect(1, 172, '\P{		Is_DI}', "");
Expect(0, 172, '\P{^		Is_DI}', "");
Error('\p{_-ID:=Start}');
Error('\P{_-ID:=Start}');
Expect(1, 90, '\p{idstart}', "");
Expect(0, 90, '\p{^idstart}', "");
Expect(0, 90, '\P{idstart}', "");
Expect(1, 90, '\P{^idstart}', "");
Expect(0, 64, '\p{idstart}', "");
Expect(1, 64, '\p{^idstart}', "");
Expect(1, 64, '\P{idstart}', "");
Expect(0, 64, '\P{^idstart}', "");
Expect(1, 90, '\p{__ID_start}', "");
Expect(0, 90, '\p{^__ID_start}', "");
Expect(0, 90, '\P{__ID_start}', "");
Expect(1, 90, '\P{^__ID_start}', "");
Expect(0, 64, '\p{__ID_start}', "");
Expect(1, 64, '\p{^__ID_start}', "");
Expect(1, 64, '\P{__ID_start}', "");
Expect(0, 64, '\P{^__ID_start}', "");
Error('\p{-_IS	ID/a/Start}');
Error('\P{-_IS	ID/a/Start}');
Expect(1, 90, '\p{isidstart}', "");
Expect(0, 90, '\p{^isidstart}', "");
Expect(0, 90, '\P{isidstart}', "");
Expect(1, 90, '\P{^isidstart}', "");
Expect(0, 64, '\p{isidstart}', "");
Expect(1, 64, '\p{^isidstart}', "");
Expect(1, 64, '\P{isidstart}', "");
Expect(0, 64, '\P{^isidstart}', "");
Expect(1, 90, '\p{	-IS	ID	Start}', "");
Expect(0, 90, '\p{^	-IS	ID	Start}', "");
Expect(0, 90, '\P{	-IS	ID	Start}', "");
Expect(1, 90, '\P{^	-IS	ID	Start}', "");
Expect(0, 64, '\p{	-IS	ID	Start}', "");
Expect(1, 64, '\p{^	-IS	ID	Start}', "");
Expect(1, 64, '\P{	-IS	ID	Start}', "");
Expect(0, 64, '\P{^	-IS	ID	Start}', "");
Error('\p{/a/  ids}');
Error('\P{/a/  ids}');
Expect(1, 90, '\p{ids}', "");
Expect(0, 90, '\p{^ids}', "");
Expect(0, 90, '\P{ids}', "");
Expect(1, 90, '\P{^ids}', "");
Expect(0, 64, '\p{ids}', "");
Expect(1, 64, '\p{^ids}', "");
Expect(1, 64, '\P{ids}', "");
Expect(0, 64, '\P{^ids}', "");
Expect(1, 90, '\p{	 IDS}', "");
Expect(0, 90, '\p{^	 IDS}', "");
Expect(0, 90, '\P{	 IDS}', "");
Expect(1, 90, '\P{^	 IDS}', "");
Expect(0, 64, '\p{	 IDS}', "");
Expect(1, 64, '\p{^	 IDS}', "");
Expect(1, 64, '\P{	 IDS}', "");
Expect(0, 64, '\P{^	 IDS}', "");
Error('\p{	 Isids/a/}');
Error('\P{	 Isids/a/}');
Expect(1, 90, '\p{isids}', "");
Expect(0, 90, '\p{^isids}', "");
Expect(0, 90, '\P{isids}', "");
Expect(1, 90, '\P{^isids}', "");
Expect(0, 64, '\p{isids}', "");
Expect(1, 64, '\p{^isids}', "");
Expect(1, 64, '\P{isids}', "");
Expect(0, 64, '\P{^isids}', "");
Expect(1, 90, '\p{- is_IDS}', "");
Expect(0, 90, '\p{^- is_IDS}', "");
Expect(0, 90, '\P{- is_IDS}', "");
Expect(1, 90, '\P{^- is_IDS}', "");
Expect(0, 64, '\p{- is_IDS}', "");
Expect(1, 64, '\p{^- is_IDS}', "");
Expect(1, 64, '\P{- is_IDS}', "");
Expect(0, 64, '\P{^- is_IDS}', "");
Error('\p{:=_CYRILLIC_SUPPLEMENT}');
Error('\P{:=_CYRILLIC_SUPPLEMENT}');
Expect(1, 1327, '\p{cyrillicsupplement}', "");
Expect(0, 1327, '\p{^cyrillicsupplement}', "");
Expect(0, 1327, '\P{cyrillicsupplement}', "");
Expect(1, 1327, '\P{^cyrillicsupplement}', "");
Expect(0, 1279, '\p{cyrillicsupplement}', "");
Expect(1, 1279, '\p{^cyrillicsupplement}', "");
Expect(1, 1279, '\P{cyrillicsupplement}', "");
Expect(0, 1279, '\P{^cyrillicsupplement}', "");
Expect(1, 1327, '\p{ 	Cyrillic_Supplement}', "");
Expect(0, 1327, '\p{^ 	Cyrillic_Supplement}', "");
Expect(0, 1327, '\P{ 	Cyrillic_Supplement}', "");
Expect(1, 1327, '\P{^ 	Cyrillic_Supplement}', "");
Expect(0, 1279, '\p{ 	Cyrillic_Supplement}', "");
Expect(1, 1279, '\p{^ 	Cyrillic_Supplement}', "");
Expect(1, 1279, '\P{ 	Cyrillic_Supplement}', "");
Expect(0, 1279, '\P{^ 	Cyrillic_Supplement}', "");
Error('\p{_ is Cyrillic:=SUPPLEMENT}');
Error('\P{_ is Cyrillic:=SUPPLEMENT}');
Expect(1, 1327, '\p{iscyrillicsupplement}', "");
Expect(0, 1327, '\p{^iscyrillicsupplement}', "");
Expect(0, 1327, '\P{iscyrillicsupplement}', "");
Expect(1, 1327, '\P{^iscyrillicsupplement}', "");
Expect(0, 1279, '\p{iscyrillicsupplement}', "");
Expect(1, 1279, '\p{^iscyrillicsupplement}', "");
Expect(1, 1279, '\P{iscyrillicsupplement}', "");
Expect(0, 1279, '\P{^iscyrillicsupplement}', "");
Expect(1, 1327, '\p{ IS	Cyrillic_Supplement}', "");
Expect(0, 1327, '\p{^ IS	Cyrillic_Supplement}', "");
Expect(0, 1327, '\P{ IS	Cyrillic_Supplement}', "");
Expect(1, 1327, '\P{^ IS	Cyrillic_Supplement}', "");
Expect(0, 1279, '\p{ IS	Cyrillic_Supplement}', "");
Expect(1, 1279, '\p{^ IS	Cyrillic_Supplement}', "");
Expect(1, 1279, '\P{ IS	Cyrillic_Supplement}', "");
Expect(0, 1279, '\P{^ IS	Cyrillic_Supplement}', "");
Error('\p{-/a/in CyrillicSupplement}');
Error('\P{-/a/in CyrillicSupplement}');
Expect(1, 1327, '\p{incyrillicsupplement}', "");
Expect(0, 1327, '\p{^incyrillicsupplement}', "");
Expect(0, 1327, '\P{incyrillicsupplement}', "");
Expect(1, 1327, '\P{^incyrillicsupplement}', "");
Expect(0, 1279, '\p{incyrillicsupplement}', "");
Expect(1, 1279, '\p{^incyrillicsupplement}', "");
Expect(1, 1279, '\P{incyrillicsupplement}', "");
Expect(0, 1279, '\P{^incyrillicsupplement}', "");
Expect(1, 1327, '\p{ _IN-cyrillicSUPPLEMENT}', "");
Expect(0, 1327, '\p{^ _IN-cyrillicSUPPLEMENT}', "");
Expect(0, 1327, '\P{ _IN-cyrillicSUPPLEMENT}', "");
Expect(1, 1327, '\P{^ _IN-cyrillicSUPPLEMENT}', "");
Expect(0, 1279, '\p{ _IN-cyrillicSUPPLEMENT}', "");
Expect(1, 1279, '\p{^ _IN-cyrillicSUPPLEMENT}', "");
Expect(1, 1279, '\P{ _IN-cyrillicSUPPLEMENT}', "");
Expect(0, 1279, '\P{^ _IN-cyrillicSUPPLEMENT}', "");
Error('\p{/a/ cyrillic-supplementary}');
Error('\P{/a/ cyrillic-supplementary}');
Expect(1, 1327, '\p{cyrillicsupplementary}', "");
Expect(0, 1327, '\p{^cyrillicsupplementary}', "");
Expect(0, 1327, '\P{cyrillicsupplementary}', "");
Expect(1, 1327, '\P{^cyrillicsupplementary}', "");
Expect(0, 1279, '\p{cyrillicsupplementary}', "");
Expect(1, 1279, '\p{^cyrillicsupplementary}', "");
Expect(1, 1279, '\P{cyrillicsupplementary}', "");
Expect(0, 1279, '\P{^cyrillicsupplementary}', "");
Expect(1, 1327, '\p{--CYRILLIC	Supplementary}', "");
Expect(0, 1327, '\p{^--CYRILLIC	Supplementary}', "");
Expect(0, 1327, '\P{--CYRILLIC	Supplementary}', "");
Expect(1, 1327, '\P{^--CYRILLIC	Supplementary}', "");
Expect(0, 1279, '\p{--CYRILLIC	Supplementary}', "");
Expect(1, 1279, '\p{^--CYRILLIC	Supplementary}', "");
Expect(1, 1279, '\P{--CYRILLIC	Supplementary}', "");
Expect(0, 1279, '\P{^--CYRILLIC	Supplementary}', "");
Error('\p{:=-Is CyrillicSupplementary}');
Error('\P{:=-Is CyrillicSupplementary}');
Expect(1, 1327, '\p{iscyrillicsupplementary}', "");
Expect(0, 1327, '\p{^iscyrillicsupplementary}', "");
Expect(0, 1327, '\P{iscyrillicsupplementary}', "");
Expect(1, 1327, '\P{^iscyrillicsupplementary}', "");
Expect(0, 1279, '\p{iscyrillicsupplementary}', "");
Expect(1, 1279, '\p{^iscyrillicsupplementary}', "");
Expect(1, 1279, '\P{iscyrillicsupplementary}', "");
Expect(0, 1279, '\P{^iscyrillicsupplementary}', "");
Expect(1, 1327, '\p{	 IsCyrillic	supplementary}', "");
Expect(0, 1327, '\p{^	 IsCyrillic	supplementary}', "");
Expect(0, 1327, '\P{	 IsCyrillic	supplementary}', "");
Expect(1, 1327, '\P{^	 IsCyrillic	supplementary}', "");
Expect(0, 1279, '\p{	 IsCyrillic	supplementary}', "");
Expect(1, 1279, '\p{^	 IsCyrillic	supplementary}', "");
Expect(1, 1279, '\P{	 IsCyrillic	supplementary}', "");
Expect(0, 1279, '\P{^	 IsCyrillic	supplementary}', "");
Error('\p{--IN/a/Cyrillic	supplementary}');
Error('\P{--IN/a/Cyrillic	supplementary}');
Expect(1, 1327, '\p{incyrillicsupplementary}', "");
Expect(0, 1327, '\p{^incyrillicsupplementary}', "");
Expect(0, 1327, '\P{incyrillicsupplementary}', "");
Expect(1, 1327, '\P{^incyrillicsupplementary}', "");
Expect(0, 1279, '\p{incyrillicsupplementary}', "");
Expect(1, 1279, '\p{^incyrillicsupplementary}', "");
Expect(1, 1279, '\P{incyrillicsupplementary}', "");
Expect(0, 1279, '\P{^incyrillicsupplementary}', "");
Expect(1, 1327, '\p{__INcyrillicsupplementary}', "");
Expect(0, 1327, '\p{^__INcyrillicsupplementary}', "");
Expect(0, 1327, '\P{__INcyrillicsupplementary}', "");
Expect(1, 1327, '\P{^__INcyrillicsupplementary}', "");
Expect(0, 1279, '\p{__INcyrillicsupplementary}', "");
Expect(1, 1279, '\p{^__INcyrillicsupplementary}', "");
Expect(1, 1279, '\P{__INcyrillicsupplementary}', "");
Expect(0, 1279, '\P{^__INcyrillicsupplementary}', "");
Error('\p{	:=geometric Shapes}');
Error('\P{	:=geometric Shapes}');
Expect(1, 9727, '\p{geometricshapes}', "");
Expect(0, 9727, '\p{^geometricshapes}', "");
Expect(0, 9727, '\P{geometricshapes}', "");
Expect(1, 9727, '\P{^geometricshapes}', "");
Expect(0, 9631, '\p{geometricshapes}', "");
Expect(1, 9631, '\p{^geometricshapes}', "");
Expect(1, 9631, '\P{geometricshapes}', "");
Expect(0, 9631, '\P{^geometricshapes}', "");
Expect(1, 9727, '\p{_ Geometric_Shapes}', "");
Expect(0, 9727, '\p{^_ Geometric_Shapes}', "");
Expect(0, 9727, '\P{_ Geometric_Shapes}', "");
Expect(1, 9727, '\P{^_ Geometric_Shapes}', "");
Expect(0, 9631, '\p{_ Geometric_Shapes}', "");
Expect(1, 9631, '\p{^_ Geometric_Shapes}', "");
Expect(1, 9631, '\P{_ Geometric_Shapes}', "");
Expect(0, 9631, '\P{^_ Geometric_Shapes}', "");
Error('\p{/a/	_Is_GEOMETRIC shapes}');
Error('\P{/a/	_Is_GEOMETRIC shapes}');
Expect(1, 9727, '\p{isgeometricshapes}', "");
Expect(0, 9727, '\p{^isgeometricshapes}', "");
Expect(0, 9727, '\P{isgeometricshapes}', "");
Expect(1, 9727, '\P{^isgeometricshapes}', "");
Expect(0, 9631, '\p{isgeometricshapes}', "");
Expect(1, 9631, '\p{^isgeometricshapes}', "");
Expect(1, 9631, '\P{isgeometricshapes}', "");
Expect(0, 9631, '\P{^isgeometricshapes}', "");
Expect(1, 9727, '\p{-	is_GEOMETRICshapes}', "");
Expect(0, 9727, '\p{^-	is_GEOMETRICshapes}', "");
Expect(0, 9727, '\P{-	is_GEOMETRICshapes}', "");
Expect(1, 9727, '\P{^-	is_GEOMETRICshapes}', "");
Expect(0, 9631, '\p{-	is_GEOMETRICshapes}', "");
Expect(1, 9631, '\p{^-	is_GEOMETRICshapes}', "");
Expect(1, 9631, '\P{-	is_GEOMETRICshapes}', "");
Expect(0, 9631, '\P{^-	is_GEOMETRICshapes}', "");
Error('\p{_IN:=geometric-Shapes}');
Error('\P{_IN:=geometric-Shapes}');
Expect(1, 9727, '\p{ingeometricshapes}', "");
Expect(0, 9727, '\p{^ingeometricshapes}', "");
Expect(0, 9727, '\P{ingeometricshapes}', "");
Expect(1, 9727, '\P{^ingeometricshapes}', "");
Expect(0, 9631, '\p{ingeometricshapes}', "");
Expect(1, 9631, '\p{^ingeometricshapes}', "");
Expect(1, 9631, '\P{ingeometricshapes}', "");
Expect(0, 9631, '\P{^ingeometricshapes}', "");
Expect(1, 9727, '\p{	IN_Geometric-SHAPES}', "");
Expect(0, 9727, '\p{^	IN_Geometric-SHAPES}', "");
Expect(0, 9727, '\P{	IN_Geometric-SHAPES}', "");
Expect(1, 9727, '\P{^	IN_Geometric-SHAPES}', "");
Expect(0, 9631, '\p{	IN_Geometric-SHAPES}', "");
Expect(1, 9631, '\p{^	IN_Geometric-SHAPES}', "");
Expect(1, 9631, '\P{	IN_Geometric-SHAPES}', "");
Expect(0, 9631, '\P{^	IN_Geometric-SHAPES}', "");
Error('\p{/a/_-Latin-EXTENDED-D}');
Error('\P{/a/_-Latin-EXTENDED-D}');
Expect(1, 43007, '\p{latinextendedd}', "");
Expect(0, 43007, '\p{^latinextendedd}', "");
Expect(0, 43007, '\P{latinextendedd}', "");
Expect(1, 43007, '\P{^latinextendedd}', "");
Expect(0, 42783, '\p{latinextendedd}', "");
Expect(1, 42783, '\p{^latinextendedd}', "");
Expect(1, 42783, '\P{latinextendedd}', "");
Expect(0, 42783, '\P{^latinextendedd}', "");
Expect(1, 43007, '\p{	latin_Extended	D}', "");
Expect(0, 43007, '\p{^	latin_Extended	D}', "");
Expect(0, 43007, '\P{	latin_Extended	D}', "");
Expect(1, 43007, '\P{^	latin_Extended	D}', "");
Expect(0, 42783, '\p{	latin_Extended	D}', "");
Expect(1, 42783, '\p{^	latin_Extended	D}', "");
Expect(1, 42783, '\P{	latin_Extended	D}', "");
Expect(0, 42783, '\P{^	latin_Extended	D}', "");
Error('\p{		is/a/Latin-EXTENDED d}');
Error('\P{		is/a/Latin-EXTENDED d}');
Expect(1, 43007, '\p{islatinextendedd}', "");
Expect(0, 43007, '\p{^islatinextendedd}', "");
Expect(0, 43007, '\P{islatinextendedd}', "");
Expect(1, 43007, '\P{^islatinextendedd}', "");
Expect(0, 42783, '\p{islatinextendedd}', "");
Expect(1, 42783, '\p{^islatinextendedd}', "");
Expect(1, 42783, '\P{islatinextendedd}', "");
Expect(0, 42783, '\P{^islatinextendedd}', "");
Expect(1, 43007, '\p{		Is latin-extended D}', "");
Expect(0, 43007, '\p{^		Is latin-extended D}', "");
Expect(0, 43007, '\P{		Is latin-extended D}', "");
Expect(1, 43007, '\P{^		Is latin-extended D}', "");
Expect(0, 42783, '\p{		Is latin-extended D}', "");
Expect(1, 42783, '\p{^		Is latin-extended D}', "");
Expect(1, 42783, '\P{		Is latin-extended D}', "");
Expect(0, 42783, '\P{^		Is latin-extended D}', "");
Error('\p{/a/In	LatinExtended-D}');
Error('\P{/a/In	LatinExtended-D}');
Expect(1, 43007, '\p{inlatinextendedd}', "");
Expect(0, 43007, '\p{^inlatinextendedd}', "");
Expect(0, 43007, '\P{inlatinextendedd}', "");
Expect(1, 43007, '\P{^inlatinextendedd}', "");
Expect(0, 42783, '\p{inlatinextendedd}', "");
Expect(1, 42783, '\p{^inlatinextendedd}', "");
Expect(1, 42783, '\P{inlatinextendedd}', "");
Expect(0, 42783, '\P{^inlatinextendedd}', "");
Expect(1, 43007, '\p{	InLatin Extended-d}', "");
Expect(0, 43007, '\p{^	InLatin Extended-d}', "");
Expect(0, 43007, '\P{	InLatin Extended-d}', "");
Expect(1, 43007, '\P{^	InLatin Extended-d}', "");
Expect(0, 42783, '\p{	InLatin Extended-d}', "");
Expect(1, 42783, '\p{^	InLatin Extended-d}', "");
Expect(1, 42783, '\P{	InLatin Extended-d}', "");
Expect(0, 42783, '\P{^	InLatin Extended-d}', "");
Error('\p{/a/	buginese}');
Error('\P{/a/	buginese}');
Expect(1, 6683, '\p{buginese}', "");
Expect(0, 6683, '\p{^buginese}', "");
Expect(0, 6683, '\P{buginese}', "");
Expect(1, 6683, '\P{^buginese}', "");
Expect(0, 6655, '\p{buginese}', "");
Expect(1, 6655, '\p{^buginese}', "");
Expect(1, 6655, '\P{buginese}', "");
Expect(0, 6655, '\P{^buginese}', "");
Expect(1, 6683, '\p{	 BUGINESE}', "");
Expect(0, 6683, '\p{^	 BUGINESE}', "");
Expect(0, 6683, '\P{	 BUGINESE}', "");
Expect(1, 6683, '\P{^	 BUGINESE}', "");
Expect(0, 6655, '\p{	 BUGINESE}', "");
Expect(1, 6655, '\p{^	 BUGINESE}', "");
Expect(1, 6655, '\P{	 BUGINESE}', "");
Expect(0, 6655, '\P{^	 BUGINESE}', "");
Error('\p{/a/_	Is Buginese}');
Error('\P{/a/_	Is Buginese}');
Expect(1, 6683, '\p{isbuginese}', "");
Expect(0, 6683, '\p{^isbuginese}', "");
Expect(0, 6683, '\P{isbuginese}', "");
Expect(1, 6683, '\P{^isbuginese}', "");
Expect(0, 6655, '\p{isbuginese}', "");
Expect(1, 6655, '\p{^isbuginese}', "");
Expect(1, 6655, '\P{isbuginese}', "");
Expect(0, 6655, '\P{^isbuginese}', "");
Expect(1, 6683, '\p{ 	is	Buginese}', "");
Expect(0, 6683, '\p{^ 	is	Buginese}', "");
Expect(0, 6683, '\P{ 	is	Buginese}', "");
Expect(1, 6683, '\P{^ 	is	Buginese}', "");
Expect(0, 6655, '\p{ 	is	Buginese}', "");
Expect(1, 6655, '\p{^ 	is	Buginese}', "");
Expect(1, 6655, '\P{ 	is	Buginese}', "");
Expect(0, 6655, '\P{^ 	is	Buginese}', "");
Error('\p{:=--Bugi}');
Error('\P{:=--Bugi}');
Expect(1, 6683, '\p{bugi}', "");
Expect(0, 6683, '\p{^bugi}', "");
Expect(0, 6683, '\P{bugi}', "");
Expect(1, 6683, '\P{^bugi}', "");
Expect(0, 6655, '\p{bugi}', "");
Expect(1, 6655, '\p{^bugi}', "");
Expect(1, 6655, '\P{bugi}', "");
Expect(0, 6655, '\P{^bugi}', "");
Expect(1, 6683, '\p{-	Bugi}', "");
Expect(0, 6683, '\p{^-	Bugi}', "");
Expect(0, 6683, '\P{-	Bugi}', "");
Expect(1, 6683, '\P{^-	Bugi}', "");
Expect(0, 6655, '\p{-	Bugi}', "");
Expect(1, 6655, '\p{^-	Bugi}', "");
Expect(1, 6655, '\P{-	Bugi}', "");
Expect(0, 6655, '\P{^-	Bugi}', "");
Error('\p{:=		Is Bugi}');
Error('\P{:=		Is Bugi}');
Expect(1, 6683, '\p{isbugi}', "");
Expect(0, 6683, '\p{^isbugi}', "");
Expect(0, 6683, '\P{isbugi}', "");
Expect(1, 6683, '\P{^isbugi}', "");
Expect(0, 6655, '\p{isbugi}', "");
Expect(1, 6655, '\p{^isbugi}', "");
Expect(1, 6655, '\P{isbugi}', "");
Expect(0, 6655, '\P{^isbugi}', "");
Expect(1, 6683, '\p{- Is_Bugi}', "");
Expect(0, 6683, '\p{^- Is_Bugi}', "");
Expect(0, 6683, '\P{- Is_Bugi}', "");
Expect(1, 6683, '\P{^- Is_Bugi}', "");
Expect(0, 6655, '\p{- Is_Bugi}', "");
Expect(1, 6655, '\p{^- Is_Bugi}', "");
Expect(1, 6655, '\P{- Is_Bugi}', "");
Expect(0, 6655, '\P{^- Is_Bugi}', "");
Error('\p{	:=IN_Malayalam}');
Error('\P{	:=IN_Malayalam}');
Expect(1, 3455, '\p{inmalayalam}', "");
Expect(0, 3455, '\p{^inmalayalam}', "");
Expect(0, 3455, '\P{inmalayalam}', "");
Expect(1, 3455, '\P{^inmalayalam}', "");
Expect(0, 3327, '\p{inmalayalam}', "");
Expect(1, 3327, '\p{^inmalayalam}', "");
Expect(1, 3327, '\P{inmalayalam}', "");
Expect(0, 3327, '\P{^inmalayalam}', "");
Expect(1, 3455, '\p{ IN_MALAYALAM}', "");
Expect(0, 3455, '\p{^ IN_MALAYALAM}', "");
Expect(0, 3455, '\P{ IN_MALAYALAM}', "");
Expect(1, 3455, '\P{^ IN_MALAYALAM}', "");
Expect(0, 3327, '\p{ IN_MALAYALAM}', "");
Expect(1, 3327, '\p{^ IN_MALAYALAM}', "");
Expect(1, 3327, '\P{ IN_MALAYALAM}', "");
Expect(0, 3327, '\P{^ IN_MALAYALAM}', "");
Error('\p{/a/	InscriptionalPAHLAVI}');
Error('\P{/a/	InscriptionalPAHLAVI}');
Expect(1, 68466, '\p{inscriptionalpahlavi}', "");
Expect(0, 68466, '\p{^inscriptionalpahlavi}', "");
Expect(0, 68466, '\P{inscriptionalpahlavi}', "");
Expect(1, 68466, '\P{^inscriptionalpahlavi}', "");
Expect(0, 68447, '\p{inscriptionalpahlavi}', "");
Expect(1, 68447, '\p{^inscriptionalpahlavi}', "");
Expect(1, 68447, '\P{inscriptionalpahlavi}', "");
Expect(0, 68447, '\P{^inscriptionalpahlavi}', "");
Expect(1, 68466, '\p{ inscriptionalPahlavi}', "");
Expect(0, 68466, '\p{^ inscriptionalPahlavi}', "");
Expect(0, 68466, '\P{ inscriptionalPahlavi}', "");
Expect(1, 68466, '\P{^ inscriptionalPahlavi}', "");
Expect(0, 68447, '\p{ inscriptionalPahlavi}', "");
Expect(1, 68447, '\p{^ inscriptionalPahlavi}', "");
Expect(1, 68447, '\P{ inscriptionalPahlavi}', "");
Expect(0, 68447, '\P{^ inscriptionalPahlavi}', "");
Error('\p{is/a/Inscriptional_pahlavi}');
Error('\P{is/a/Inscriptional_pahlavi}');
Expect(1, 68466, '\p{isinscriptionalpahlavi}', "");
Expect(0, 68466, '\p{^isinscriptionalpahlavi}', "");
Expect(0, 68466, '\P{isinscriptionalpahlavi}', "");
Expect(1, 68466, '\P{^isinscriptionalpahlavi}', "");
Expect(0, 68447, '\p{isinscriptionalpahlavi}', "");
Expect(1, 68447, '\p{^isinscriptionalpahlavi}', "");
Expect(1, 68447, '\P{isinscriptionalpahlavi}', "");
Expect(0, 68447, '\P{^isinscriptionalpahlavi}', "");
Expect(1, 68466, '\p{  IS Inscriptional pahlavi}', "");
Expect(0, 68466, '\p{^  IS Inscriptional pahlavi}', "");
Expect(0, 68466, '\P{  IS Inscriptional pahlavi}', "");
Expect(1, 68466, '\P{^  IS Inscriptional pahlavi}', "");
Expect(0, 68447, '\p{  IS Inscriptional pahlavi}', "");
Expect(1, 68447, '\p{^  IS Inscriptional pahlavi}', "");
Expect(1, 68447, '\P{  IS Inscriptional pahlavi}', "");
Expect(0, 68447, '\P{^  IS Inscriptional pahlavi}', "");
Error('\p{		phli:=}');
Error('\P{		phli:=}');
Expect(1, 68466, '\p{phli}', "");
Expect(0, 68466, '\p{^phli}', "");
Expect(0, 68466, '\P{phli}', "");
Expect(1, 68466, '\P{^phli}', "");
Expect(0, 68447, '\p{phli}', "");
Expect(1, 68447, '\p{^phli}', "");
Expect(1, 68447, '\P{phli}', "");
Expect(0, 68447, '\P{^phli}', "");
Expect(1, 68466, '\p{__Phli}', "");
Expect(0, 68466, '\p{^__Phli}', "");
Expect(0, 68466, '\P{__Phli}', "");
Expect(1, 68466, '\P{^__Phli}', "");
Expect(0, 68447, '\p{__Phli}', "");
Expect(1, 68447, '\p{^__Phli}', "");
Expect(1, 68447, '\P{__Phli}', "");
Expect(0, 68447, '\P{^__Phli}', "");
Error('\p{/a/_isPhli}');
Error('\P{/a/_isPhli}');
Expect(1, 68466, '\p{isphli}', "");
Expect(0, 68466, '\p{^isphli}', "");
Expect(0, 68466, '\P{isphli}', "");
Expect(1, 68466, '\P{^isphli}', "");
Expect(0, 68447, '\p{isphli}', "");
Expect(1, 68447, '\p{^isphli}', "");
Expect(1, 68447, '\P{isphli}', "");
Expect(0, 68447, '\P{^isphli}', "");
Expect(1, 68466, '\p{		IS-PHLI}', "");
Expect(0, 68466, '\p{^		IS-PHLI}', "");
Expect(0, 68466, '\P{		IS-PHLI}', "");
Expect(1, 68466, '\P{^		IS-PHLI}', "");
Expect(0, 68447, '\p{		IS-PHLI}', "");
Expect(1, 68447, '\p{^		IS-PHLI}', "");
Expect(1, 68447, '\P{		IS-PHLI}', "");
Expect(0, 68447, '\P{^		IS-PHLI}', "");
Error('\p{:=	-Cham}');
Error('\P{:=	-Cham}');
Expect(1, 43574, '\p{cham}', "");
Expect(0, 43574, '\p{^cham}', "");
Expect(0, 43574, '\P{cham}', "");
Expect(1, 43574, '\P{^cham}', "");
Expect(0, 43519, '\p{cham}', "");
Expect(1, 43519, '\p{^cham}', "");
Expect(1, 43519, '\P{cham}', "");
Expect(0, 43519, '\P{^cham}', "");
Expect(1, 43574, '\p{ Cham}', "");
Expect(0, 43574, '\p{^ Cham}', "");
Expect(0, 43574, '\P{ Cham}', "");
Expect(1, 43574, '\P{^ Cham}', "");
Expect(0, 43519, '\p{ Cham}', "");
Expect(1, 43519, '\p{^ Cham}', "");
Expect(1, 43519, '\P{ Cham}', "");
Expect(0, 43519, '\P{^ Cham}', "");
Error('\p{Is:=Cham}');
Error('\P{Is:=Cham}');
Expect(1, 43574, '\p{ischam}', "");
Expect(0, 43574, '\p{^ischam}', "");
Expect(0, 43574, '\P{ischam}', "");
Expect(1, 43574, '\P{^ischam}', "");
Expect(0, 43519, '\p{ischam}', "");
Expect(1, 43519, '\p{^ischam}', "");
Expect(1, 43519, '\P{ischam}', "");
Expect(0, 43519, '\P{^ischam}', "");
Expect(1, 43574, '\p{	 Is	CHAM}', "");
Expect(0, 43574, '\p{^	 Is	CHAM}', "");
Expect(0, 43574, '\P{	 Is	CHAM}', "");
Expect(1, 43574, '\P{^	 Is	CHAM}', "");
Expect(0, 43519, '\p{	 Is	CHAM}', "");
Expect(1, 43519, '\p{^	 Is	CHAM}', "");
Expect(1, 43519, '\P{	 Is	CHAM}', "");
Expect(0, 43519, '\P{^	 Is	CHAM}', "");
Error('\p{BRAILLE:=}');
Error('\P{BRAILLE:=}');
Expect(1, 10495, '\p{braille}', "");
Expect(0, 10495, '\p{^braille}', "");
Expect(0, 10495, '\P{braille}', "");
Expect(1, 10495, '\P{^braille}', "");
Expect(0, 10239, '\p{braille}', "");
Expect(1, 10239, '\p{^braille}', "");
Expect(1, 10239, '\P{braille}', "");
Expect(0, 10239, '\P{^braille}', "");
Expect(1, 10495, '\p{- braille}', "");
Expect(0, 10495, '\p{^- braille}', "");
Expect(0, 10495, '\P{- braille}', "");
Expect(1, 10495, '\P{^- braille}', "");
Expect(0, 10239, '\p{- braille}', "");
Expect(1, 10239, '\p{^- braille}', "");
Expect(1, 10239, '\P{- braille}', "");
Expect(0, 10239, '\P{^- braille}', "");
Error('\p{-/a/is BRAILLE}');
Error('\P{-/a/is BRAILLE}');
Expect(1, 10495, '\p{isbraille}', "");
Expect(0, 10495, '\p{^isbraille}', "");
Expect(0, 10495, '\P{isbraille}', "");
Expect(1, 10495, '\P{^isbraille}', "");
Expect(0, 10239, '\p{isbraille}', "");
Expect(1, 10239, '\p{^isbraille}', "");
Expect(1, 10239, '\P{isbraille}', "");
Expect(0, 10239, '\P{^isbraille}', "");
Expect(1, 10495, '\p{Is BRAILLE}', "");
Expect(0, 10495, '\p{^Is BRAILLE}', "");
Expect(0, 10495, '\P{Is BRAILLE}', "");
Expect(1, 10495, '\P{^Is BRAILLE}', "");
Expect(0, 10239, '\p{Is BRAILLE}', "");
Expect(1, 10239, '\p{^Is BRAILLE}', "");
Expect(1, 10239, '\P{Is BRAILLE}', "");
Expect(0, 10239, '\P{^Is BRAILLE}', "");
Error('\p{_-brai:=}');
Error('\P{_-brai:=}');
Expect(1, 10495, '\p{brai}', "");
Expect(0, 10495, '\p{^brai}', "");
Expect(0, 10495, '\P{brai}', "");
Expect(1, 10495, '\P{^brai}', "");
Expect(0, 10239, '\p{brai}', "");
Expect(1, 10239, '\p{^brai}', "");
Expect(1, 10239, '\P{brai}', "");
Expect(0, 10239, '\P{^brai}', "");
Expect(1, 10495, '\p{		BRAI}', "");
Expect(0, 10495, '\p{^		BRAI}', "");
Expect(0, 10495, '\P{		BRAI}', "");
Expect(1, 10495, '\P{^		BRAI}', "");
Expect(0, 10239, '\p{		BRAI}', "");
Expect(1, 10239, '\p{^		BRAI}', "");
Expect(1, 10239, '\P{		BRAI}', "");
Expect(0, 10239, '\P{^		BRAI}', "");
Error('\p{_-IS Brai:=}');
Error('\P{_-IS Brai:=}');
Expect(1, 10495, '\p{isbrai}', "");
Expect(0, 10495, '\p{^isbrai}', "");
Expect(0, 10495, '\P{isbrai}', "");
Expect(1, 10495, '\P{^isbrai}', "");
Expect(0, 10239, '\p{isbrai}', "");
Expect(1, 10239, '\p{^isbrai}', "");
Expect(1, 10239, '\P{isbrai}', "");
Expect(0, 10239, '\P{^isbrai}', "");
Expect(1, 10495, '\p{-	Is	Brai}', "");
Expect(0, 10495, '\p{^-	Is	Brai}', "");
Expect(0, 10495, '\P{-	Is	Brai}', "");
Expect(1, 10495, '\P{^-	Is	Brai}', "");
Expect(0, 10239, '\p{-	Is	Brai}', "");
Expect(1, 10239, '\p{^-	Is	Brai}', "");
Expect(1, 10239, '\P{-	Is	Brai}', "");
Expect(0, 10239, '\P{^-	Is	Brai}', "");
Error('\p{__in	old_Persian/a/}');
Error('\P{__in	old_Persian/a/}');
Expect(1, 66527, '\p{inoldpersian}', "");
Expect(0, 66527, '\p{^inoldpersian}', "");
Expect(0, 66527, '\P{inoldpersian}', "");
Expect(1, 66527, '\P{^inoldpersian}', "");
Expect(0, 66463, '\p{inoldpersian}', "");
Expect(1, 66463, '\p{^inoldpersian}', "");
Expect(1, 66463, '\P{inoldpersian}', "");
Expect(0, 66463, '\P{^inoldpersian}', "");
Expect(1, 66527, '\p{	in-oldPersian}', "");
Expect(0, 66527, '\p{^	in-oldPersian}', "");
Expect(0, 66527, '\P{	in-oldPersian}', "");
Expect(1, 66527, '\P{^	in-oldPersian}', "");
Expect(0, 66463, '\p{	in-oldPersian}', "");
Expect(1, 66463, '\p{^	in-oldPersian}', "");
Expect(1, 66463, '\P{	in-oldPersian}', "");
Expect(0, 66463, '\P{^	in-oldPersian}', "");
Error('\p{_:=Box Drawing}');
Error('\P{_:=Box Drawing}');
Expect(1, 9599, '\p{boxdrawing}', "");
Expect(0, 9599, '\p{^boxdrawing}', "");
Expect(0, 9599, '\P{boxdrawing}', "");
Expect(1, 9599, '\P{^boxdrawing}', "");
Expect(0, 9471, '\p{boxdrawing}', "");
Expect(1, 9471, '\p{^boxdrawing}', "");
Expect(1, 9471, '\P{boxdrawing}', "");
Expect(0, 9471, '\P{^boxdrawing}', "");
Expect(1, 9599, '\p{__BoxDrawing}', "");
Expect(0, 9599, '\p{^__BoxDrawing}', "");
Expect(0, 9599, '\P{__BoxDrawing}', "");
Expect(1, 9599, '\P{^__BoxDrawing}', "");
Expect(0, 9471, '\p{__BoxDrawing}', "");
Expect(1, 9471, '\p{^__BoxDrawing}', "");
Expect(1, 9471, '\P{__BoxDrawing}', "");
Expect(0, 9471, '\P{^__BoxDrawing}', "");
Error('\p{		Is	BOX-Drawing:=}');
Error('\P{		Is	BOX-Drawing:=}');
Expect(1, 9599, '\p{isboxdrawing}', "");
Expect(0, 9599, '\p{^isboxdrawing}', "");
Expect(0, 9599, '\P{isboxdrawing}', "");
Expect(1, 9599, '\P{^isboxdrawing}', "");
Expect(0, 9471, '\p{isboxdrawing}', "");
Expect(1, 9471, '\p{^isboxdrawing}', "");
Expect(1, 9471, '\P{isboxdrawing}', "");
Expect(0, 9471, '\P{^isboxdrawing}', "");
Expect(1, 9599, '\p{ISBOX-drawing}', "");
Expect(0, 9599, '\p{^ISBOX-drawing}', "");
Expect(0, 9599, '\P{ISBOX-drawing}', "");
Expect(1, 9599, '\P{^ISBOX-drawing}', "");
Expect(0, 9471, '\p{ISBOX-drawing}', "");
Expect(1, 9471, '\p{^ISBOX-drawing}', "");
Expect(1, 9471, '\P{ISBOX-drawing}', "");
Expect(0, 9471, '\P{^ISBOX-drawing}', "");
Error('\p{_/a/In Box_DRAWING}');
Error('\P{_/a/In Box_DRAWING}');
Expect(1, 9599, '\p{inboxdrawing}', "");
Expect(0, 9599, '\p{^inboxdrawing}', "");
Expect(0, 9599, '\P{inboxdrawing}', "");
Expect(1, 9599, '\P{^inboxdrawing}', "");
Expect(0, 9471, '\p{inboxdrawing}', "");
Expect(1, 9471, '\p{^inboxdrawing}', "");
Expect(1, 9471, '\P{inboxdrawing}', "");
Expect(0, 9471, '\P{^inboxdrawing}', "");
Expect(1, 9599, '\p{-IN	Box Drawing}', "");
Expect(0, 9599, '\p{^-IN	Box Drawing}', "");
Expect(0, 9599, '\P{-IN	Box Drawing}', "");
Expect(1, 9599, '\P{^-IN	Box Drawing}', "");
Expect(0, 9471, '\p{-IN	Box Drawing}', "");
Expect(1, 9471, '\p{^-IN	Box Drawing}', "");
Expect(1, 9471, '\P{-IN	Box Drawing}', "");
Expect(0, 9471, '\P{^-IN	Box Drawing}', "");
Error('\p{_:=Linear_B}');
Error('\P{_:=Linear_B}');
Expect(1, 65547, '\p{linearb}', "");
Expect(0, 65547, '\p{^linearb}', "");
Expect(0, 65547, '\P{linearb}', "");
Expect(1, 65547, '\P{^linearb}', "");
Expect(0, 1, '\p{linearb}', "");
Expect(1, 1, '\p{^linearb}', "");
Expect(1, 1, '\P{linearb}', "");
Expect(0, 1, '\P{^linearb}', "");
Expect(1, 65547, '\p{_-LINEAR	B}', "");
Expect(0, 65547, '\p{^_-LINEAR	B}', "");
Expect(0, 65547, '\P{_-LINEAR	B}', "");
Expect(1, 65547, '\P{^_-LINEAR	B}', "");
Expect(0, 1, '\p{_-LINEAR	B}', "");
Expect(1, 1, '\p{^_-LINEAR	B}', "");
Expect(1, 1, '\P{_-LINEAR	B}', "");
Expect(0, 1, '\P{^_-LINEAR	B}', "");
Error('\p{:= -Is_linear_B}');
Error('\P{:= -Is_linear_B}');
Expect(1, 65547, '\p{islinearb}', "");
Expect(0, 65547, '\p{^islinearb}', "");
Expect(0, 65547, '\P{islinearb}', "");
Expect(1, 65547, '\P{^islinearb}', "");
Expect(0, 1, '\p{islinearb}', "");
Expect(1, 1, '\p{^islinearb}', "");
Expect(1, 1, '\P{islinearb}', "");
Expect(0, 1, '\P{^islinearb}', "");
Expect(1, 65547, '\p{_ IS-linear B}', "");
Expect(0, 65547, '\p{^_ IS-linear B}', "");
Expect(0, 65547, '\P{_ IS-linear B}', "");
Expect(1, 65547, '\P{^_ IS-linear B}', "");
Expect(0, 1, '\p{_ IS-linear B}', "");
Expect(1, 1, '\p{^_ IS-linear B}', "");
Expect(1, 1, '\P{_ IS-linear B}', "");
Expect(0, 1, '\P{^_ IS-linear B}', "");
Error('\p{:=- Linb}');
Error('\P{:=- Linb}');
Expect(1, 65547, '\p{linb}', "");
Expect(0, 65547, '\p{^linb}', "");
Expect(0, 65547, '\P{linb}', "");
Expect(1, 65547, '\P{^linb}', "");
Expect(0, 1, '\p{linb}', "");
Expect(1, 1, '\p{^linb}', "");
Expect(1, 1, '\P{linb}', "");
Expect(0, 1, '\P{^linb}', "");
Expect(1, 65547, '\p{  LINB}', "");
Expect(0, 65547, '\p{^  LINB}', "");
Expect(0, 65547, '\P{  LINB}', "");
Expect(1, 65547, '\P{^  LINB}', "");
Expect(0, 1, '\p{  LINB}', "");
Expect(1, 1, '\p{^  LINB}', "");
Expect(1, 1, '\P{  LINB}', "");
Expect(0, 1, '\P{^  LINB}', "");
Error('\p{/a/-isLINB}');
Error('\P{/a/-isLINB}');
Expect(1, 65547, '\p{islinb}', "");
Expect(0, 65547, '\p{^islinb}', "");
Expect(0, 65547, '\P{islinb}', "");
Expect(1, 65547, '\P{^islinb}', "");
Expect(0, 1, '\p{islinb}', "");
Expect(1, 1, '\p{^islinb}', "");
Expect(1, 1, '\P{islinb}', "");
Expect(0, 1, '\P{^islinb}', "");
Expect(1, 65547, '\p{ is_Linb}', "");
Expect(0, 65547, '\p{^ is_Linb}', "");
Expect(0, 65547, '\P{ is_Linb}', "");
Expect(1, 65547, '\P{^ is_Linb}', "");
Expect(0, 1, '\p{ is_Linb}', "");
Expect(1, 1, '\p{^ is_Linb}', "");
Expect(1, 1, '\P{ is_Linb}', "");
Expect(0, 1, '\P{^ is_Linb}', "");
Error('\p{ -tifinagh:=}');
Error('\P{ -tifinagh:=}');
Expect(1, 11621, '\p{tifinagh}', "");
Expect(0, 11621, '\p{^tifinagh}', "");
Expect(0, 11621, '\P{tifinagh}', "");
Expect(1, 11621, '\P{^tifinagh}', "");
Expect(0, 11567, '\p{tifinagh}', "");
Expect(1, 11567, '\p{^tifinagh}', "");
Expect(1, 11567, '\P{tifinagh}', "");
Expect(0, 11567, '\P{^tifinagh}', "");
Expect(1, 11621, '\p{ _Tifinagh}', "");
Expect(0, 11621, '\p{^ _Tifinagh}', "");
Expect(0, 11621, '\P{ _Tifinagh}', "");
Expect(1, 11621, '\P{^ _Tifinagh}', "");
Expect(0, 11567, '\p{ _Tifinagh}', "");
Expect(1, 11567, '\p{^ _Tifinagh}', "");
Expect(1, 11567, '\P{ _Tifinagh}', "");
Expect(0, 11567, '\P{^ _Tifinagh}', "");
Error('\p{ IsTifinagh/a/}');
Error('\P{ IsTifinagh/a/}');
Expect(1, 11621, '\p{istifinagh}', "");
Expect(0, 11621, '\p{^istifinagh}', "");
Expect(0, 11621, '\P{istifinagh}', "");
Expect(1, 11621, '\P{^istifinagh}', "");
Expect(0, 11567, '\p{istifinagh}', "");
Expect(1, 11567, '\p{^istifinagh}', "");
Expect(1, 11567, '\P{istifinagh}', "");
Expect(0, 11567, '\P{^istifinagh}', "");
Expect(1, 11621, '\p{	-is	TIFINAGH}', "");
Expect(0, 11621, '\p{^	-is	TIFINAGH}', "");
Expect(0, 11621, '\P{	-is	TIFINAGH}', "");
Expect(1, 11621, '\P{^	-is	TIFINAGH}', "");
Expect(0, 11567, '\p{	-is	TIFINAGH}', "");
Expect(1, 11567, '\p{^	-is	TIFINAGH}', "");
Expect(1, 11567, '\P{	-is	TIFINAGH}', "");
Expect(0, 11567, '\P{^	-is	TIFINAGH}', "");
Error('\p{:=_-TFNG}');
Error('\P{:=_-TFNG}');
Expect(1, 11621, '\p{tfng}', "");
Expect(0, 11621, '\p{^tfng}', "");
Expect(0, 11621, '\P{tfng}', "");
Expect(1, 11621, '\P{^tfng}', "");
Expect(0, 11567, '\p{tfng}', "");
Expect(1, 11567, '\p{^tfng}', "");
Expect(1, 11567, '\P{tfng}', "");
Expect(0, 11567, '\P{^tfng}', "");
Expect(1, 11621, '\p{ -Tfng}', "");
Expect(0, 11621, '\p{^ -Tfng}', "");
Expect(0, 11621, '\P{ -Tfng}', "");
Expect(1, 11621, '\P{^ -Tfng}', "");
Expect(0, 11567, '\p{ -Tfng}', "");
Expect(1, 11567, '\p{^ -Tfng}', "");
Expect(1, 11567, '\P{ -Tfng}', "");
Expect(0, 11567, '\P{^ -Tfng}', "");
Error('\p{	:=Is_TFNG}');
Error('\P{	:=Is_TFNG}');
Expect(1, 11621, '\p{istfng}', "");
Expect(0, 11621, '\p{^istfng}', "");
Expect(0, 11621, '\P{istfng}', "");
Expect(1, 11621, '\P{^istfng}', "");
Expect(0, 11567, '\p{istfng}', "");
Expect(1, 11567, '\p{^istfng}', "");
Expect(1, 11567, '\P{istfng}', "");
Expect(0, 11567, '\P{^istfng}', "");
Expect(1, 11621, '\p{-IS Tfng}', "");
Expect(0, 11621, '\p{^-IS Tfng}', "");
Expect(0, 11621, '\P{-IS Tfng}', "");
Expect(1, 11621, '\P{^-IS Tfng}', "");
Expect(0, 11567, '\p{-IS Tfng}', "");
Expect(1, 11567, '\p{^-IS Tfng}', "");
Expect(1, 11567, '\P{-IS Tfng}', "");
Expect(0, 11567, '\P{^-IS Tfng}', "");
Error('\p{_	syloti:=NAGRI}');
Error('\P{_	syloti:=NAGRI}');
Expect(1, 43051, '\p{sylotinagri}', "");
Expect(0, 43051, '\p{^sylotinagri}', "");
Expect(0, 43051, '\P{sylotinagri}', "");
Expect(1, 43051, '\P{^sylotinagri}', "");
Expect(0, 43007, '\p{sylotinagri}', "");
Expect(1, 43007, '\p{^sylotinagri}', "");
Expect(1, 43007, '\P{sylotinagri}', "");
Expect(0, 43007, '\P{^sylotinagri}', "");
Expect(1, 43051, '\p{ 	Syloti Nagri}', "");
Expect(0, 43051, '\p{^ 	Syloti Nagri}', "");
Expect(0, 43051, '\P{ 	Syloti Nagri}', "");
Expect(1, 43051, '\P{^ 	Syloti Nagri}', "");
Expect(0, 43007, '\p{ 	Syloti Nagri}', "");
Expect(1, 43007, '\p{^ 	Syloti Nagri}', "");
Expect(1, 43007, '\P{ 	Syloti Nagri}', "");
Expect(0, 43007, '\P{^ 	Syloti Nagri}', "");
Error('\p{:=-	Is-sylotiNagri}');
Error('\P{:=-	Is-sylotiNagri}');
Expect(1, 43051, '\p{issylotinagri}', "");
Expect(0, 43051, '\p{^issylotinagri}', "");
Expect(0, 43051, '\P{issylotinagri}', "");
Expect(1, 43051, '\P{^issylotinagri}', "");
Expect(0, 43007, '\p{issylotinagri}', "");
Expect(1, 43007, '\p{^issylotinagri}', "");
Expect(1, 43007, '\P{issylotinagri}', "");
Expect(0, 43007, '\P{^issylotinagri}', "");
Expect(1, 43051, '\p{ 	Is-SYLOTInagri}', "");
Expect(0, 43051, '\p{^ 	Is-SYLOTInagri}', "");
Expect(0, 43051, '\P{ 	Is-SYLOTInagri}', "");
Expect(1, 43051, '\P{^ 	Is-SYLOTInagri}', "");
Expect(0, 43007, '\p{ 	Is-SYLOTInagri}', "");
Expect(1, 43007, '\p{^ 	Is-SYLOTInagri}', "");
Expect(1, 43007, '\P{ 	Is-SYLOTInagri}', "");
Expect(0, 43007, '\P{^ 	Is-SYLOTInagri}', "");
Error('\p{:=_SYLO}');
Error('\P{:=_SYLO}');
Expect(1, 43051, '\p{sylo}', "");
Expect(0, 43051, '\p{^sylo}', "");
Expect(0, 43051, '\P{sylo}', "");
Expect(1, 43051, '\P{^sylo}', "");
Expect(0, 43007, '\p{sylo}', "");
Expect(1, 43007, '\p{^sylo}', "");
Expect(1, 43007, '\P{sylo}', "");
Expect(0, 43007, '\P{^sylo}', "");
Expect(1, 43051, '\p{Sylo}', "");
Expect(0, 43051, '\p{^Sylo}', "");
Expect(0, 43051, '\P{Sylo}', "");
Expect(1, 43051, '\P{^Sylo}', "");
Expect(0, 43007, '\p{Sylo}', "");
Expect(1, 43007, '\p{^Sylo}', "");
Expect(1, 43007, '\P{Sylo}', "");
Expect(0, 43007, '\P{^Sylo}', "");
Error('\p{	IS:=SYLO}');
Error('\P{	IS:=SYLO}');
Expect(1, 43051, '\p{issylo}', "");
Expect(0, 43051, '\p{^issylo}', "");
Expect(0, 43051, '\P{issylo}', "");
Expect(1, 43051, '\P{^issylo}', "");
Expect(0, 43007, '\p{issylo}', "");
Expect(1, 43007, '\p{^issylo}', "");
Expect(1, 43007, '\P{issylo}', "");
Expect(0, 43007, '\P{^issylo}', "");
Expect(1, 43051, '\p{_ is-SYLO}', "");
Expect(0, 43051, '\p{^_ is-SYLO}', "");
Expect(0, 43051, '\P{_ is-SYLO}', "");
Expect(1, 43051, '\P{^_ is-SYLO}', "");
Expect(0, 43007, '\p{_ is-SYLO}', "");
Expect(1, 43007, '\p{^_ is-SYLO}', "");
Expect(1, 43007, '\P{_ is-SYLO}', "");
Expect(0, 43007, '\P{^_ is-SYLO}', "");
Error('\p{ _In:=BATAK}');
Error('\P{ _In:=BATAK}');
Expect(1, 7167, '\p{inbatak}', "");
Expect(0, 7167, '\p{^inbatak}', "");
Expect(0, 7167, '\P{inbatak}', "");
Expect(1, 7167, '\P{^inbatak}', "");
Expect(0, 7103, '\p{inbatak}', "");
Expect(1, 7103, '\p{^inbatak}', "");
Expect(1, 7103, '\P{inbatak}', "");
Expect(0, 7103, '\P{^inbatak}', "");
Expect(1, 7167, '\p{_ in_Batak}', "");
Expect(0, 7167, '\p{^_ in_Batak}', "");
Expect(0, 7167, '\P{_ in_Batak}', "");
Expect(1, 7167, '\P{^_ in_Batak}', "");
Expect(0, 7103, '\p{_ in_Batak}', "");
Expect(1, 7103, '\p{^_ in_Batak}', "");
Expect(1, 7103, '\P{_ in_Batak}', "");
Expect(0, 7103, '\P{^_ in_Batak}', "");
Error('\p{--BALINESE:=}');
Error('\P{--BALINESE:=}');
Expect(1, 6987, '\p{balinese}', "");
Expect(0, 6987, '\p{^balinese}', "");
Expect(0, 6987, '\P{balinese}', "");
Expect(1, 6987, '\P{^balinese}', "");
Expect(0, 6911, '\p{balinese}', "");
Expect(1, 6911, '\p{^balinese}', "");
Expect(1, 6911, '\P{balinese}', "");
Expect(0, 6911, '\P{^balinese}', "");
Expect(1, 6987, '\p{-Balinese}', "");
Expect(0, 6987, '\p{^-Balinese}', "");
Expect(0, 6987, '\P{-Balinese}', "");
Expect(1, 6987, '\P{^-Balinese}', "");
Expect(0, 6911, '\p{-Balinese}', "");
Expect(1, 6911, '\p{^-Balinese}', "");
Expect(1, 6911, '\P{-Balinese}', "");
Expect(0, 6911, '\P{^-Balinese}', "");
Error('\p{:=-Is_balinese}');
Error('\P{:=-Is_balinese}');
Expect(1, 6987, '\p{isbalinese}', "");
Expect(0, 6987, '\p{^isbalinese}', "");
Expect(0, 6987, '\P{isbalinese}', "");
Expect(1, 6987, '\P{^isbalinese}', "");
Expect(0, 6911, '\p{isbalinese}', "");
Expect(1, 6911, '\p{^isbalinese}', "");
Expect(1, 6911, '\P{isbalinese}', "");
Expect(0, 6911, '\P{^isbalinese}', "");
Expect(1, 6987, '\p{  IS	balinese}', "");
Expect(0, 6987, '\p{^  IS	balinese}', "");
Expect(0, 6987, '\P{  IS	balinese}', "");
Expect(1, 6987, '\P{^  IS	balinese}', "");
Expect(0, 6911, '\p{  IS	balinese}', "");
Expect(1, 6911, '\p{^  IS	balinese}', "");
Expect(1, 6911, '\P{  IS	balinese}', "");
Expect(0, 6911, '\P{^  IS	balinese}', "");
Error('\p{--bali/a/}');
Error('\P{--bali/a/}');
Expect(1, 6987, '\p{bali}', "");
Expect(0, 6987, '\p{^bali}', "");
Expect(0, 6987, '\P{bali}', "");
Expect(1, 6987, '\P{^bali}', "");
Expect(0, 6911, '\p{bali}', "");
Expect(1, 6911, '\p{^bali}', "");
Expect(1, 6911, '\P{bali}', "");
Expect(0, 6911, '\P{^bali}', "");
Expect(1, 6987, '\p{__bali}', "");
Expect(0, 6987, '\p{^__bali}', "");
Expect(0, 6987, '\P{__bali}', "");
Expect(1, 6987, '\P{^__bali}', "");
Expect(0, 6911, '\p{__bali}', "");
Expect(1, 6911, '\p{^__bali}', "");
Expect(1, 6911, '\P{__bali}', "");
Expect(0, 6911, '\P{^__bali}', "");
Error('\p{ -IS	Bali/a/}');
Error('\P{ -IS	Bali/a/}');
Expect(1, 6987, '\p{isbali}', "");
Expect(0, 6987, '\p{^isbali}', "");
Expect(0, 6987, '\P{isbali}', "");
Expect(1, 6987, '\P{^isbali}', "");
Expect(0, 6911, '\p{isbali}', "");
Expect(1, 6911, '\p{^isbali}', "");
Expect(1, 6911, '\P{isbali}', "");
Expect(0, 6911, '\P{^isbali}', "");
Expect(1, 6987, '\p{	 is Bali}', "");
Expect(0, 6987, '\p{^	 is Bali}', "");
Expect(0, 6987, '\P{	 is Bali}', "");
Expect(1, 6987, '\P{^	 is Bali}', "");
Expect(0, 6911, '\p{	 is Bali}', "");
Expect(1, 6911, '\p{^	 is Bali}', "");
Expect(1, 6911, '\P{	 is Bali}', "");
Expect(0, 6911, '\P{^	 is Bali}', "");
Error('\p{_ MISCELLANEOUS_symbols:=And-Arrows}');
Error('\P{_ MISCELLANEOUS_symbols:=And-Arrows}');
Expect(1, 11263, '\p{miscellaneoussymbolsandarrows}', "");
Expect(0, 11263, '\p{^miscellaneoussymbolsandarrows}', "");
Expect(0, 11263, '\P{miscellaneoussymbolsandarrows}', "");
Expect(1, 11263, '\P{^miscellaneoussymbolsandarrows}', "");
Expect(0, 11007, '\p{miscellaneoussymbolsandarrows}', "");
Expect(1, 11007, '\p{^miscellaneoussymbolsandarrows}', "");
Expect(1, 11007, '\P{miscellaneoussymbolsandarrows}', "");
Expect(0, 11007, '\P{^miscellaneoussymbolsandarrows}', "");
Expect(1, 11263, '\p{ -MISCELLANEOUS_Symbols-And	Arrows}', "");
Expect(0, 11263, '\p{^ -MISCELLANEOUS_Symbols-And	Arrows}', "");
Expect(0, 11263, '\P{ -MISCELLANEOUS_Symbols-And	Arrows}', "");
Expect(1, 11263, '\P{^ -MISCELLANEOUS_Symbols-And	Arrows}', "");
Expect(0, 11007, '\p{ -MISCELLANEOUS_Symbols-And	Arrows}', "");
Expect(1, 11007, '\p{^ -MISCELLANEOUS_Symbols-And	Arrows}', "");
Expect(1, 11007, '\P{ -MISCELLANEOUS_Symbols-And	Arrows}', "");
Expect(0, 11007, '\P{^ -MISCELLANEOUS_Symbols-And	Arrows}', "");
Error('\p{_:=ISMISCELLANEOUS SymbolsAndArrows}');
Error('\P{_:=ISMISCELLANEOUS SymbolsAndArrows}');
Expect(1, 11263, '\p{ismiscellaneoussymbolsandarrows}', "");
Expect(0, 11263, '\p{^ismiscellaneoussymbolsandarrows}', "");
Expect(0, 11263, '\P{ismiscellaneoussymbolsandarrows}', "");
Expect(1, 11263, '\P{^ismiscellaneoussymbolsandarrows}', "");
Expect(0, 11007, '\p{ismiscellaneoussymbolsandarrows}', "");
Expect(1, 11007, '\p{^ismiscellaneoussymbolsandarrows}', "");
Expect(1, 11007, '\P{ismiscellaneoussymbolsandarrows}', "");
Expect(0, 11007, '\P{^ismiscellaneoussymbolsandarrows}', "");
Expect(1, 11263, '\p{_	isMISCELLANEOUS	symbols	AND Arrows}', "");
Expect(0, 11263, '\p{^_	isMISCELLANEOUS	symbols	AND Arrows}', "");
Expect(0, 11263, '\P{_	isMISCELLANEOUS	symbols	AND Arrows}', "");
Expect(1, 11263, '\P{^_	isMISCELLANEOUS	symbols	AND Arrows}', "");
Expect(0, 11007, '\p{_	isMISCELLANEOUS	symbols	AND Arrows}', "");
Expect(1, 11007, '\p{^_	isMISCELLANEOUS	symbols	AND Arrows}', "");
Expect(1, 11007, '\P{_	isMISCELLANEOUS	symbols	AND Arrows}', "");
Expect(0, 11007, '\P{^_	isMISCELLANEOUS	symbols	AND Arrows}', "");
Error('\p{ :=In_MISCELLANEOUS	Symbols	AND	Arrows}');
Error('\P{ :=In_MISCELLANEOUS	Symbols	AND	Arrows}');
Expect(1, 11263, '\p{inmiscellaneoussymbolsandarrows}', "");
Expect(0, 11263, '\p{^inmiscellaneoussymbolsandarrows}', "");
Expect(0, 11263, '\P{inmiscellaneoussymbolsandarrows}', "");
Expect(1, 11263, '\P{^inmiscellaneoussymbolsandarrows}', "");
Expect(0, 11007, '\p{inmiscellaneoussymbolsandarrows}', "");
Expect(1, 11007, '\p{^inmiscellaneoussymbolsandarrows}', "");
Expect(1, 11007, '\P{inmiscellaneoussymbolsandarrows}', "");
Expect(0, 11007, '\P{^inmiscellaneoussymbolsandarrows}', "");
Expect(1, 11263, '\p{  in_MiscellaneoussymbolsAndarrows}', "");
Expect(0, 11263, '\p{^  in_MiscellaneoussymbolsAndarrows}', "");
Expect(0, 11263, '\P{  in_MiscellaneoussymbolsAndarrows}', "");
Expect(1, 11263, '\P{^  in_MiscellaneoussymbolsAndarrows}', "");
Expect(0, 11007, '\p{  in_MiscellaneoussymbolsAndarrows}', "");
Expect(1, 11007, '\p{^  in_MiscellaneoussymbolsAndarrows}', "");
Expect(1, 11007, '\P{  in_MiscellaneoussymbolsAndarrows}', "");
Expect(0, 11007, '\P{^  in_MiscellaneoussymbolsAndarrows}', "");
Error('\p{ /a/Print}');
Error('\P{ /a/Print}');
Expect(1, 126, '\p{print}', "");
Expect(0, 126, '\p{^print}', "");
Expect(0, 126, '\P{print}', "");
Expect(1, 126, '\P{^print}', "");
Expect(0, 31, '\p{print}', "");
Expect(1, 31, '\p{^print}', "");
Expect(1, 31, '\P{print}', "");
Expect(0, 31, '\P{^print}', "");
Expect(1, 126, '\p{	Print}', "");
Expect(0, 126, '\p{^	Print}', "");
Expect(0, 126, '\P{	Print}', "");
Expect(1, 126, '\P{^	Print}', "");
Expect(0, 31, '\p{	Print}', "");
Expect(1, 31, '\p{^	Print}', "");
Expect(1, 31, '\P{	Print}', "");
Expect(0, 31, '\P{^	Print}', "");
Error('\p{/a/  XPosixPrint}');
Error('\P{/a/  XPosixPrint}');
Expect(1, 126, '\p{xposixprint}', "");
Expect(0, 126, '\p{^xposixprint}', "");
Expect(0, 126, '\P{xposixprint}', "");
Expect(1, 126, '\P{^xposixprint}', "");
Expect(0, 31, '\p{xposixprint}', "");
Expect(1, 31, '\p{^xposixprint}', "");
Expect(1, 31, '\P{xposixprint}', "");
Expect(0, 31, '\P{^xposixprint}', "");
Expect(1, 126, '\p{_-XPosixPrint}', "");
Expect(0, 126, '\p{^_-XPosixPrint}', "");
Expect(0, 126, '\P{_-XPosixPrint}', "");
Expect(1, 126, '\P{^_-XPosixPrint}', "");
Expect(0, 31, '\p{_-XPosixPrint}', "");
Expect(1, 31, '\p{^_-XPosixPrint}', "");
Expect(1, 31, '\P{_-XPosixPrint}', "");
Expect(0, 31, '\P{^_-XPosixPrint}', "");
Error('\p{ -Is/a/Print}');
Error('\P{ -Is/a/Print}');
Expect(1, 126, '\p{isprint}', "");
Expect(0, 126, '\p{^isprint}', "");
Expect(0, 126, '\P{isprint}', "");
Expect(1, 126, '\P{^isprint}', "");
Expect(0, 31, '\p{isprint}', "");
Expect(1, 31, '\p{^isprint}', "");
Expect(1, 31, '\P{isprint}', "");
Expect(0, 31, '\P{^isprint}', "");
Expect(1, 126, '\p{_Is_print}', "");
Expect(0, 126, '\p{^_Is_print}', "");
Expect(0, 126, '\P{_Is_print}', "");
Expect(1, 126, '\P{^_Is_print}', "");
Expect(0, 31, '\p{_Is_print}', "");
Expect(1, 31, '\p{^_Is_print}', "");
Expect(1, 31, '\P{_Is_print}', "");
Expect(0, 31, '\P{^_Is_print}', "");
Error('\p{ -is/a/XPOSIXPRINT}');
Error('\P{ -is/a/XPOSIXPRINT}');
Expect(1, 126, '\p{isxposixprint}', "");
Expect(0, 126, '\p{^isxposixprint}', "");
Expect(0, 126, '\P{isxposixprint}', "");
Expect(1, 126, '\P{^isxposixprint}', "");
Expect(0, 31, '\p{isxposixprint}', "");
Expect(1, 31, '\p{^isxposixprint}', "");
Expect(1, 31, '\P{isxposixprint}', "");
Expect(0, 31, '\P{^isxposixprint}', "");
Expect(1, 126, '\p{		Is XPosixPrint}', "");
Expect(0, 126, '\p{^		Is XPosixPrint}', "");
Expect(0, 126, '\P{		Is XPosixPrint}', "");
Expect(1, 126, '\P{^		Is XPosixPrint}', "");
Expect(0, 31, '\p{		Is XPosixPrint}', "");
Expect(1, 31, '\p{^		Is XPosixPrint}', "");
Expect(1, 31, '\P{		Is XPosixPrint}', "");
Expect(0, 31, '\P{^		Is XPosixPrint}', "");
Error('\p{ _IDS:=TRINARY Operator}');
Error('\P{ _IDS:=TRINARY Operator}');
Expect(1, 12275, '\p{idstrinaryoperator}', "");
Expect(0, 12275, '\p{^idstrinaryoperator}', "");
Expect(0, 12275, '\P{idstrinaryoperator}', "");
Expect(1, 12275, '\P{^idstrinaryoperator}', "");
Expect(0, 12273, '\p{idstrinaryoperator}', "");
Expect(1, 12273, '\p{^idstrinaryoperator}', "");
Expect(1, 12273, '\P{idstrinaryoperator}', "");
Expect(0, 12273, '\P{^idstrinaryoperator}', "");
Expect(1, 12275, '\p{ IDS-Trinary-Operator}', "");
Expect(0, 12275, '\p{^ IDS-Trinary-Operator}', "");
Expect(0, 12275, '\P{ IDS-Trinary-Operator}', "");
Expect(1, 12275, '\P{^ IDS-Trinary-Operator}', "");
Expect(0, 12273, '\p{ IDS-Trinary-Operator}', "");
Expect(1, 12273, '\p{^ IDS-Trinary-Operator}', "");
Expect(1, 12273, '\P{ IDS-Trinary-Operator}', "");
Expect(0, 12273, '\P{^ IDS-Trinary-Operator}', "");
Error('\p{-:=IS	IDS	Trinary Operator}');
Error('\P{-:=IS	IDS	Trinary Operator}');
Expect(1, 12275, '\p{isidstrinaryoperator}', "");
Expect(0, 12275, '\p{^isidstrinaryoperator}', "");
Expect(0, 12275, '\P{isidstrinaryoperator}', "");
Expect(1, 12275, '\P{^isidstrinaryoperator}', "");
Expect(0, 12273, '\p{isidstrinaryoperator}', "");
Expect(1, 12273, '\p{^isidstrinaryoperator}', "");
Expect(1, 12273, '\P{isidstrinaryoperator}', "");
Expect(0, 12273, '\P{^isidstrinaryoperator}', "");
Expect(1, 12275, '\p{-is_IDS	Trinary_Operator}', "");
Expect(0, 12275, '\p{^-is_IDS	Trinary_Operator}', "");
Expect(0, 12275, '\P{-is_IDS	Trinary_Operator}', "");
Expect(1, 12275, '\P{^-is_IDS	Trinary_Operator}', "");
Expect(0, 12273, '\p{-is_IDS	Trinary_Operator}', "");
Expect(1, 12273, '\p{^-is_IDS	Trinary_Operator}', "");
Expect(1, 12273, '\P{-is_IDS	Trinary_Operator}', "");
Expect(0, 12273, '\P{^-is_IDS	Trinary_Operator}', "");
Error('\p{ :=IDST}');
Error('\P{ :=IDST}');
Expect(1, 12275, '\p{idst}', "");
Expect(0, 12275, '\p{^idst}', "");
Expect(0, 12275, '\P{idst}', "");
Expect(1, 12275, '\P{^idst}', "");
Expect(0, 12273, '\p{idst}', "");
Expect(1, 12273, '\p{^idst}', "");
Expect(1, 12273, '\P{idst}', "");
Expect(0, 12273, '\P{^idst}', "");
Expect(1, 12275, '\p{ IDST}', "");
Expect(0, 12275, '\p{^ IDST}', "");
Expect(0, 12275, '\P{ IDST}', "");
Expect(1, 12275, '\P{^ IDST}', "");
Expect(0, 12273, '\p{ IDST}', "");
Expect(1, 12273, '\p{^ IDST}', "");
Expect(1, 12273, '\P{ IDST}', "");
Expect(0, 12273, '\P{^ IDST}', "");
Error('\p{		IS-IDST:=}');
Error('\P{		IS-IDST:=}');
Expect(1, 12275, '\p{isidst}', "");
Expect(0, 12275, '\p{^isidst}', "");
Expect(0, 12275, '\P{isidst}', "");
Expect(1, 12275, '\P{^isidst}', "");
Expect(0, 12273, '\p{isidst}', "");
Expect(1, 12273, '\p{^isidst}', "");
Expect(1, 12273, '\P{isidst}', "");
Expect(0, 12273, '\P{^isidst}', "");
Expect(1, 12275, '\p{ 	IsIDST}', "");
Expect(0, 12275, '\p{^ 	IsIDST}', "");
Expect(0, 12275, '\P{ 	IsIDST}', "");
Expect(1, 12275, '\P{^ 	IsIDST}', "");
Expect(0, 12273, '\p{ 	IsIDST}', "");
Expect(1, 12273, '\p{^ 	IsIDST}', "");
Expect(1, 12273, '\P{ 	IsIDST}', "");
Expect(0, 12273, '\P{^ 	IsIDST}', "");
Error('\p{/a/--CJK	RADICALS	Supplement}');
Error('\P{/a/--CJK	RADICALS	Supplement}');
Expect(1, 12031, '\p{cjkradicalssupplement}', "");
Expect(0, 12031, '\p{^cjkradicalssupplement}', "");
Expect(0, 12031, '\P{cjkradicalssupplement}', "");
Expect(1, 12031, '\P{^cjkradicalssupplement}', "");
Expect(0, 11903, '\p{cjkradicalssupplement}', "");
Expect(1, 11903, '\p{^cjkradicalssupplement}', "");
Expect(1, 11903, '\P{cjkradicalssupplement}', "");
Expect(0, 11903, '\P{^cjkradicalssupplement}', "");
Expect(1, 12031, '\p{ 	CJK	radicals-Supplement}', "");
Expect(0, 12031, '\p{^ 	CJK	radicals-Supplement}', "");
Expect(0, 12031, '\P{ 	CJK	radicals-Supplement}', "");
Expect(1, 12031, '\P{^ 	CJK	radicals-Supplement}', "");
Expect(0, 11903, '\p{ 	CJK	radicals-Supplement}', "");
Expect(1, 11903, '\p{^ 	CJK	radicals-Supplement}', "");
Expect(1, 11903, '\P{ 	CJK	radicals-Supplement}', "");
Expect(0, 11903, '\P{^ 	CJK	radicals-Supplement}', "");
Error('\p{		IsCJK RADICALS	Supplement/a/}');
Error('\P{		IsCJK RADICALS	Supplement/a/}');
Expect(1, 12031, '\p{iscjkradicalssupplement}', "");
Expect(0, 12031, '\p{^iscjkradicalssupplement}', "");
Expect(0, 12031, '\P{iscjkradicalssupplement}', "");
Expect(1, 12031, '\P{^iscjkradicalssupplement}', "");
Expect(0, 11903, '\p{iscjkradicalssupplement}', "");
Expect(1, 11903, '\p{^iscjkradicalssupplement}', "");
Expect(1, 11903, '\P{iscjkradicalssupplement}', "");
Expect(0, 11903, '\P{^iscjkradicalssupplement}', "");
Expect(1, 12031, '\p{	is_CJK	radicals	Supplement}', "");
Expect(0, 12031, '\p{^	is_CJK	radicals	Supplement}', "");
Expect(0, 12031, '\P{	is_CJK	radicals	Supplement}', "");
Expect(1, 12031, '\P{^	is_CJK	radicals	Supplement}', "");
Expect(0, 11903, '\p{	is_CJK	radicals	Supplement}', "");
Expect(1, 11903, '\p{^	is_CJK	radicals	Supplement}', "");
Expect(1, 11903, '\P{	is_CJK	radicals	Supplement}', "");
Expect(0, 11903, '\P{^	is_CJK	radicals	Supplement}', "");
Error('\p{/a/_in-CJK	RadicalsSupplement}');
Error('\P{/a/_in-CJK	RadicalsSupplement}');
Expect(1, 12031, '\p{incjkradicalssupplement}', "");
Expect(0, 12031, '\p{^incjkradicalssupplement}', "");
Expect(0, 12031, '\P{incjkradicalssupplement}', "");
Expect(1, 12031, '\P{^incjkradicalssupplement}', "");
Expect(0, 11903, '\p{incjkradicalssupplement}', "");
Expect(1, 11903, '\p{^incjkradicalssupplement}', "");
Expect(1, 11903, '\P{incjkradicalssupplement}', "");
Expect(0, 11903, '\P{^incjkradicalssupplement}', "");
Expect(1, 12031, '\p{-_In CJK-Radicals_Supplement}', "");
Expect(0, 12031, '\p{^-_In CJK-Radicals_Supplement}', "");
Expect(0, 12031, '\P{-_In CJK-Radicals_Supplement}', "");
Expect(1, 12031, '\P{^-_In CJK-Radicals_Supplement}', "");
Expect(0, 11903, '\p{-_In CJK-Radicals_Supplement}', "");
Expect(1, 11903, '\p{^-_In CJK-Radicals_Supplement}', "");
Expect(1, 11903, '\P{-_In CJK-Radicals_Supplement}', "");
Expect(0, 11903, '\P{^-_In CJK-Radicals_Supplement}', "");
Error('\p{:=  In-Vai}');
Error('\P{:=  In-Vai}');
Expect(1, 42559, '\p{invai}', "");
Expect(0, 42559, '\p{^invai}', "");
Expect(0, 42559, '\P{invai}', "");
Expect(1, 42559, '\P{^invai}', "");
Expect(0, 42239, '\p{invai}', "");
Expect(1, 42239, '\p{^invai}', "");
Expect(1, 42239, '\P{invai}', "");
Expect(0, 42239, '\P{^invai}', "");
Expect(1, 42559, '\p{ 	INvai}', "");
Expect(0, 42559, '\p{^ 	INvai}', "");
Expect(0, 42559, '\P{ 	INvai}', "");
Expect(1, 42559, '\P{^ 	INvai}', "");
Expect(0, 42239, '\p{ 	INvai}', "");
Expect(1, 42239, '\p{^ 	INvai}', "");
Expect(1, 42239, '\P{ 	INvai}', "");
Expect(0, 42239, '\P{^ 	INvai}', "");
Error('\p{		THAANA:=}');
Error('\P{		THAANA:=}');
Expect(1, 1969, '\p{thaana}', "");
Expect(0, 1969, '\p{^thaana}', "");
Expect(0, 1969, '\P{thaana}', "");
Expect(1, 1969, '\P{^thaana}', "");
Expect(0, 1919, '\p{thaana}', "");
Expect(1, 1919, '\p{^thaana}', "");
Expect(1, 1919, '\P{thaana}', "");
Expect(0, 1919, '\P{^thaana}', "");
Expect(1, 1969, '\p{	Thaana}', "");
Expect(0, 1969, '\p{^	Thaana}', "");
Expect(0, 1969, '\P{	Thaana}', "");
Expect(1, 1969, '\P{^	Thaana}', "");
Expect(0, 1919, '\p{	Thaana}', "");
Expect(1, 1919, '\p{^	Thaana}', "");
Expect(1, 1919, '\P{	Thaana}', "");
Expect(0, 1919, '\P{^	Thaana}', "");
Error('\p{  Is/a/THAANA}');
Error('\P{  Is/a/THAANA}');
Expect(1, 1969, '\p{isthaana}', "");
Expect(0, 1969, '\p{^isthaana}', "");
Expect(0, 1969, '\P{isthaana}', "");
Expect(1, 1969, '\P{^isthaana}', "");
Expect(0, 1919, '\p{isthaana}', "");
Expect(1, 1919, '\p{^isthaana}', "");
Expect(1, 1919, '\P{isthaana}', "");
Expect(0, 1919, '\P{^isthaana}', "");
Expect(1, 1969, '\p{ _Is_Thaana}', "");
Expect(0, 1969, '\p{^ _Is_Thaana}', "");
Expect(0, 1969, '\P{ _Is_Thaana}', "");
Expect(1, 1969, '\P{^ _Is_Thaana}', "");
Expect(0, 1919, '\p{ _Is_Thaana}', "");
Expect(1, 1919, '\p{^ _Is_Thaana}', "");
Expect(1, 1919, '\P{ _Is_Thaana}', "");
Expect(0, 1919, '\P{^ _Is_Thaana}', "");
Error('\p{	Thaa:=}');
Error('\P{	Thaa:=}');
Expect(1, 1969, '\p{thaa}', "");
Expect(0, 1969, '\p{^thaa}', "");
Expect(0, 1969, '\P{thaa}', "");
Expect(1, 1969, '\P{^thaa}', "");
Expect(0, 1919, '\p{thaa}', "");
Expect(1, 1919, '\p{^thaa}', "");
Expect(1, 1919, '\P{thaa}', "");
Expect(0, 1919, '\P{^thaa}', "");
Expect(1, 1969, '\p{-thaa}', "");
Expect(0, 1969, '\p{^-thaa}', "");
Expect(0, 1969, '\P{-thaa}', "");
Expect(1, 1969, '\P{^-thaa}', "");
Expect(0, 1919, '\p{-thaa}', "");
Expect(1, 1919, '\p{^-thaa}', "");
Expect(1, 1919, '\P{-thaa}', "");
Expect(0, 1919, '\P{^-thaa}', "");
Error('\p{-/a/IS_thaa}');
Error('\P{-/a/IS_thaa}');
Expect(1, 1969, '\p{isthaa}', "");
Expect(0, 1969, '\p{^isthaa}', "");
Expect(0, 1969, '\P{isthaa}', "");
Expect(1, 1969, '\P{^isthaa}', "");
Expect(0, 1919, '\p{isthaa}', "");
Expect(1, 1919, '\p{^isthaa}', "");
Expect(1, 1919, '\P{isthaa}', "");
Expect(0, 1919, '\P{^isthaa}', "");
Expect(1, 1969, '\p{ 	Is	Thaa}', "");
Expect(0, 1969, '\p{^ 	Is	Thaa}', "");
Expect(0, 1969, '\P{ 	Is	Thaa}', "");
Expect(1, 1969, '\P{^ 	Is	Thaa}', "");
Expect(0, 1919, '\p{ 	Is	Thaa}', "");
Expect(1, 1919, '\p{^ 	Is	Thaa}', "");
Expect(1, 1919, '\P{ 	Is	Thaa}', "");
Expect(0, 1919, '\P{^ 	Is	Thaa}', "");
Error('\p{ -other-ID	start:=}');
Error('\P{ -other-ID	start:=}');
Expect(1, 8472, '\p{otheridstart}', 'deprecated');
Expect(0, 8472, '\p{^otheridstart}', 'deprecated');
Expect(0, 8472, '\P{otheridstart}', 'deprecated');
Expect(1, 8472, '\P{^otheridstart}', 'deprecated');
Expect(0, 8471, '\p{otheridstart}', 'deprecated');
Expect(1, 8471, '\p{^otheridstart}', 'deprecated');
Expect(1, 8471, '\P{otheridstart}', 'deprecated');
Expect(0, 8471, '\P{^otheridstart}', 'deprecated');
Expect(1, 8472, '\p{		Other	ID-start}', 'deprecated');
Expect(0, 8472, '\p{^		Other	ID-start}', 'deprecated');
Expect(0, 8472, '\P{		Other	ID-start}', 'deprecated');
Expect(1, 8472, '\P{^		Other	ID-start}', 'deprecated');
Expect(0, 8471, '\p{		Other	ID-start}', 'deprecated');
Expect(1, 8471, '\p{^		Other	ID-start}', 'deprecated');
Expect(1, 8471, '\P{		Other	ID-start}', 'deprecated');
Expect(0, 8471, '\P{^		Other	ID-start}', 'deprecated');
Error('\p{	-Is	Otherid-Start:=}');
Error('\P{	-Is	Otherid-Start:=}');
Expect(1, 8472, '\p{isotheridstart}', 'deprecated');
Expect(0, 8472, '\p{^isotheridstart}', 'deprecated');
Expect(0, 8472, '\P{isotheridstart}', 'deprecated');
Expect(1, 8472, '\P{^isotheridstart}', 'deprecated');
Expect(0, 8471, '\p{isotheridstart}', 'deprecated');
Expect(1, 8471, '\p{^isotheridstart}', 'deprecated');
Expect(1, 8471, '\P{isotheridstart}', 'deprecated');
Expect(0, 8471, '\P{^isotheridstart}', 'deprecated');
Expect(1, 8472, '\p{ Is other	ID start}', 'deprecated');
Expect(0, 8472, '\p{^ Is other	ID start}', 'deprecated');
Expect(0, 8472, '\P{ Is other	ID start}', 'deprecated');
Expect(1, 8472, '\P{^ Is other	ID start}', 'deprecated');
Expect(0, 8471, '\p{ Is other	ID start}', 'deprecated');
Expect(1, 8471, '\p{^ Is other	ID start}', 'deprecated');
Expect(1, 8471, '\P{ Is other	ID start}', 'deprecated');
Expect(0, 8471, '\P{^ Is other	ID start}', 'deprecated');
Error('\p{ -OIDS:=}');
Error('\P{ -OIDS:=}');
Expect(1, 8472, '\p{oids}', 'deprecated');
Expect(0, 8472, '\p{^oids}', 'deprecated');
Expect(0, 8472, '\P{oids}', 'deprecated');
Expect(1, 8472, '\P{^oids}', 'deprecated');
Expect(0, 8471, '\p{oids}', 'deprecated');
Expect(1, 8471, '\p{^oids}', 'deprecated');
Expect(1, 8471, '\P{oids}', 'deprecated');
Expect(0, 8471, '\P{^oids}', 'deprecated');
Expect(1, 8472, '\p{_	OIDS}', 'deprecated');
Expect(0, 8472, '\p{^_	OIDS}', 'deprecated');
Expect(0, 8472, '\P{_	OIDS}', 'deprecated');
Expect(1, 8472, '\P{^_	OIDS}', 'deprecated');
Expect(0, 8471, '\p{_	OIDS}', 'deprecated');
Expect(1, 8471, '\p{^_	OIDS}', 'deprecated');
Expect(1, 8471, '\P{_	OIDS}', 'deprecated');
Expect(0, 8471, '\P{^_	OIDS}', 'deprecated');
Error('\p{_:=Is	OIDS}');
Error('\P{_:=Is	OIDS}');
Expect(1, 8472, '\p{isoids}', 'deprecated');
Expect(0, 8472, '\p{^isoids}', 'deprecated');
Expect(0, 8472, '\P{isoids}', 'deprecated');
Expect(1, 8472, '\P{^isoids}', 'deprecated');
Expect(0, 8471, '\p{isoids}', 'deprecated');
Expect(1, 8471, '\p{^isoids}', 'deprecated');
Expect(1, 8471, '\P{isoids}', 'deprecated');
Expect(0, 8471, '\P{^isoids}', 'deprecated');
Expect(1, 8472, '\p{_is-OIDS}', 'deprecated');
Expect(0, 8472, '\p{^_is-OIDS}', 'deprecated');
Expect(0, 8472, '\P{_is-OIDS}', 'deprecated');
Expect(1, 8472, '\P{^_is-OIDS}', 'deprecated');
Expect(0, 8471, '\p{_is-OIDS}', 'deprecated');
Expect(1, 8471, '\p{^_is-OIDS}', 'deprecated');
Expect(1, 8471, '\P{_is-OIDS}', 'deprecated');
Expect(0, 8471, '\P{^_is-OIDS}', 'deprecated');
Error('\p{/a/	_Graph}');
Error('\P{/a/	_Graph}');
Expect(1, 126, '\p{graph}', "");
Expect(0, 126, '\p{^graph}', "");
Expect(0, 126, '\P{graph}', "");
Expect(1, 126, '\P{^graph}', "");
Expect(0, 32, '\p{graph}', "");
Expect(1, 32, '\p{^graph}', "");
Expect(1, 32, '\P{graph}', "");
Expect(0, 32, '\P{^graph}', "");
Expect(1, 126, '\p{-Graph}', "");
Expect(0, 126, '\p{^-Graph}', "");
Expect(0, 126, '\P{-Graph}', "");
Expect(1, 126, '\P{^-Graph}', "");
Expect(0, 32, '\p{-Graph}', "");
Expect(1, 32, '\p{^-Graph}', "");
Expect(1, 32, '\P{-Graph}', "");
Expect(0, 32, '\P{^-Graph}', "");
Error('\p{/a/ XPosixGraph}');
Error('\P{/a/ XPosixGraph}');
Expect(1, 126, '\p{xposixgraph}', "");
Expect(0, 126, '\p{^xposixgraph}', "");
Expect(0, 126, '\P{xposixgraph}', "");
Expect(1, 126, '\P{^xposixgraph}', "");
Expect(0, 32, '\p{xposixgraph}', "");
Expect(1, 32, '\p{^xposixgraph}', "");
Expect(1, 32, '\P{xposixgraph}', "");
Expect(0, 32, '\P{^xposixgraph}', "");
Expect(1, 126, '\p{ XPosixGraph}', "");
Expect(0, 126, '\p{^ XPosixGraph}', "");
Expect(0, 126, '\P{ XPosixGraph}', "");
Expect(1, 126, '\P{^ XPosixGraph}', "");
Expect(0, 32, '\p{ XPosixGraph}', "");
Expect(1, 32, '\p{^ XPosixGraph}', "");
Expect(1, 32, '\P{ XPosixGraph}', "");
Expect(0, 32, '\P{^ XPosixGraph}', "");
Error('\p{/a/	IS-Graph}');
Error('\P{/a/	IS-Graph}');
Expect(1, 126, '\p{isgraph}', "");
Expect(0, 126, '\p{^isgraph}', "");
Expect(0, 126, '\P{isgraph}', "");
Expect(1, 126, '\P{^isgraph}', "");
Expect(0, 32, '\p{isgraph}', "");
Expect(1, 32, '\p{^isgraph}', "");
Expect(1, 32, '\P{isgraph}', "");
Expect(0, 32, '\P{^isgraph}', "");
Expect(1, 126, '\p{_IS	Graph}', "");
Expect(0, 126, '\p{^_IS	Graph}', "");
Expect(0, 126, '\P{_IS	Graph}', "");
Expect(1, 126, '\P{^_IS	Graph}', "");
Expect(0, 32, '\p{_IS	Graph}', "");
Expect(1, 32, '\p{^_IS	Graph}', "");
Expect(1, 32, '\P{_IS	Graph}', "");
Expect(0, 32, '\P{^_IS	Graph}', "");
Error('\p{- Is-XPosixGraph/a/}');
Error('\P{- Is-XPosixGraph/a/}');
Expect(1, 126, '\p{isxposixgraph}', "");
Expect(0, 126, '\p{^isxposixgraph}', "");
Expect(0, 126, '\P{isxposixgraph}', "");
Expect(1, 126, '\P{^isxposixgraph}', "");
Expect(0, 32, '\p{isxposixgraph}', "");
Expect(1, 32, '\p{^isxposixgraph}', "");
Expect(1, 32, '\P{isxposixgraph}', "");
Expect(0, 32, '\P{^isxposixgraph}', "");
Expect(1, 126, '\p{ ISxposixgraph}', "");
Expect(0, 126, '\p{^ ISxposixgraph}', "");
Expect(0, 126, '\P{ ISxposixgraph}', "");
Expect(1, 126, '\P{^ ISxposixgraph}', "");
Expect(0, 32, '\p{ ISxposixgraph}', "");
Expect(1, 32, '\p{^ ISxposixgraph}', "");
Expect(1, 32, '\P{ ISxposixgraph}', "");
Expect(0, 32, '\P{^ ISxposixgraph}', "");
Error('\p{_	Specials/a/}');
Error('\P{_	Specials/a/}');
Expect(1, 65520, '\p{specials}', "");
Expect(0, 65520, '\p{^specials}', "");
Expect(0, 65520, '\P{specials}', "");
Expect(1, 65520, '\P{^specials}', "");
Expect(0, 65519, '\p{specials}', "");
Expect(1, 65519, '\p{^specials}', "");
Expect(1, 65519, '\P{specials}', "");
Expect(0, 65519, '\P{^specials}', "");
Expect(1, 65520, '\p{ _specials}', "");
Expect(0, 65520, '\p{^ _specials}', "");
Expect(0, 65520, '\P{ _specials}', "");
Expect(1, 65520, '\P{^ _specials}', "");
Expect(0, 65519, '\p{ _specials}', "");
Expect(1, 65519, '\p{^ _specials}', "");
Expect(1, 65519, '\P{ _specials}', "");
Expect(0, 65519, '\P{^ _specials}', "");
Error('\p{/a/IS-specials}');
Error('\P{/a/IS-specials}');
Expect(1, 65520, '\p{isspecials}', "");
Expect(0, 65520, '\p{^isspecials}', "");
Expect(0, 65520, '\P{isspecials}', "");
Expect(1, 65520, '\P{^isspecials}', "");
Expect(0, 65519, '\p{isspecials}', "");
Expect(1, 65519, '\p{^isspecials}', "");
Expect(1, 65519, '\P{isspecials}', "");
Expect(0, 65519, '\P{^isspecials}', "");
Expect(1, 65520, '\p{Is-SPECIALS}', "");
Expect(0, 65520, '\p{^Is-SPECIALS}', "");
Expect(0, 65520, '\P{Is-SPECIALS}', "");
Expect(1, 65520, '\P{^Is-SPECIALS}', "");
Expect(0, 65519, '\p{Is-SPECIALS}', "");
Expect(1, 65519, '\p{^Is-SPECIALS}', "");
Expect(1, 65519, '\P{Is-SPECIALS}', "");
Expect(0, 65519, '\P{^Is-SPECIALS}', "");
Error('\p{ in:=Specials}');
Error('\P{ in:=Specials}');
Expect(1, 65520, '\p{inspecials}', "");
Expect(0, 65520, '\p{^inspecials}', "");
Expect(0, 65520, '\P{inspecials}', "");
Expect(1, 65520, '\P{^inspecials}', "");
Expect(0, 65519, '\p{inspecials}', "");
Expect(1, 65519, '\p{^inspecials}', "");
Expect(1, 65519, '\P{inspecials}', "");
Expect(0, 65519, '\P{^inspecials}', "");
Expect(1, 65520, '\p{_-IN_SPECIALS}', "");
Expect(0, 65520, '\p{^_-IN_SPECIALS}', "");
Expect(0, 65520, '\P{_-IN_SPECIALS}', "");
Expect(1, 65520, '\P{^_-IN_SPECIALS}', "");
Expect(0, 65519, '\p{_-IN_SPECIALS}', "");
Expect(1, 65519, '\p{^_-IN_SPECIALS}', "");
Expect(1, 65519, '\P{_-IN_SPECIALS}', "");
Expect(0, 65519, '\P{^_-IN_SPECIALS}', "");
Error('\p{  mathematical_OPERATORS:=}');
Error('\P{  mathematical_OPERATORS:=}');
Expect(1, 8959, '\p{mathematicaloperators}', "");
Expect(0, 8959, '\p{^mathematicaloperators}', "");
Expect(0, 8959, '\P{mathematicaloperators}', "");
Expect(1, 8959, '\P{^mathematicaloperators}', "");
Expect(0, 8703, '\p{mathematicaloperators}', "");
Expect(1, 8703, '\p{^mathematicaloperators}', "");
Expect(1, 8703, '\P{mathematicaloperators}', "");
Expect(0, 8703, '\P{^mathematicaloperators}', "");
Expect(1, 8959, '\p{ Mathematical_Operators}', "");
Expect(0, 8959, '\p{^ Mathematical_Operators}', "");
Expect(0, 8959, '\P{ Mathematical_Operators}', "");
Expect(1, 8959, '\P{^ Mathematical_Operators}', "");
Expect(0, 8703, '\p{ Mathematical_Operators}', "");
Expect(1, 8703, '\p{^ Mathematical_Operators}', "");
Expect(1, 8703, '\P{ Mathematical_Operators}', "");
Expect(0, 8703, '\P{^ Mathematical_Operators}', "");
Error('\p{	/a/IsMATHEMATICALOperators}');
Error('\P{	/a/IsMATHEMATICALOperators}');
Expect(1, 8959, '\p{ismathematicaloperators}', "");
Expect(0, 8959, '\p{^ismathematicaloperators}', "");
Expect(0, 8959, '\P{ismathematicaloperators}', "");
Expect(1, 8959, '\P{^ismathematicaloperators}', "");
Expect(0, 8703, '\p{ismathematicaloperators}', "");
Expect(1, 8703, '\p{^ismathematicaloperators}', "");
Expect(1, 8703, '\P{ismathematicaloperators}', "");
Expect(0, 8703, '\P{^ismathematicaloperators}', "");
Expect(1, 8959, '\p{	-Is	mathematical_Operators}', "");
Expect(0, 8959, '\p{^	-Is	mathematical_Operators}', "");
Expect(0, 8959, '\P{	-Is	mathematical_Operators}', "");
Expect(1, 8959, '\P{^	-Is	mathematical_Operators}', "");
Expect(0, 8703, '\p{	-Is	mathematical_Operators}', "");
Expect(1, 8703, '\p{^	-Is	mathematical_Operators}', "");
Expect(1, 8703, '\P{	-Is	mathematical_Operators}', "");
Expect(0, 8703, '\P{^	-Is	mathematical_Operators}', "");
Error('\p{	/a/In Mathematicaloperators}');
Error('\P{	/a/In Mathematicaloperators}');
Expect(1, 8959, '\p{inmathematicaloperators}', "");
Expect(0, 8959, '\p{^inmathematicaloperators}', "");
Expect(0, 8959, '\P{inmathematicaloperators}', "");
Expect(1, 8959, '\P{^inmathematicaloperators}', "");
Expect(0, 8703, '\p{inmathematicaloperators}', "");
Expect(1, 8703, '\p{^inmathematicaloperators}', "");
Expect(1, 8703, '\P{inmathematicaloperators}', "");
Expect(0, 8703, '\P{^inmathematicaloperators}', "");
Expect(1, 8959, '\p{--inMathematical	OPERATORS}', "");
Expect(0, 8959, '\p{^--inMathematical	OPERATORS}', "");
Expect(0, 8959, '\P{--inMathematical	OPERATORS}', "");
Expect(1, 8959, '\P{^--inMathematical	OPERATORS}', "");
Expect(0, 8703, '\p{--inMathematical	OPERATORS}', "");
Expect(1, 8703, '\p{^--inMathematical	OPERATORS}', "");
Expect(1, 8703, '\P{--inMathematical	OPERATORS}', "");
Expect(0, 8703, '\P{^--inMathematical	OPERATORS}', "");
Error('\p{/a/ _BIDI_MIRRORED}');
Error('\P{/a/ _BIDI_MIRRORED}');
Expect(1, 41, '\p{bidimirrored}', "");
Expect(0, 41, '\p{^bidimirrored}', "");
Expect(0, 41, '\P{bidimirrored}', "");
Expect(1, 41, '\P{^bidimirrored}', "");
Expect(0, 39, '\p{bidimirrored}', "");
Expect(1, 39, '\p{^bidimirrored}', "");
Expect(1, 39, '\P{bidimirrored}', "");
Expect(0, 39, '\P{^bidimirrored}', "");
Expect(1, 41, '\p{ -Bidimirrored}', "");
Expect(0, 41, '\p{^ -Bidimirrored}', "");
Expect(0, 41, '\P{ -Bidimirrored}', "");
Expect(1, 41, '\P{^ -Bidimirrored}', "");
Expect(0, 39, '\p{ -Bidimirrored}', "");
Expect(1, 39, '\p{^ -Bidimirrored}', "");
Expect(1, 39, '\P{ -Bidimirrored}', "");
Expect(0, 39, '\P{^ -Bidimirrored}', "");
Error('\p{_is/a/Bidi Mirrored}');
Error('\P{_is/a/Bidi Mirrored}');
Expect(1, 41, '\p{isbidimirrored}', "");
Expect(0, 41, '\p{^isbidimirrored}', "");
Expect(0, 41, '\P{isbidimirrored}', "");
Expect(1, 41, '\P{^isbidimirrored}', "");
Expect(0, 39, '\p{isbidimirrored}', "");
Expect(1, 39, '\p{^isbidimirrored}', "");
Expect(1, 39, '\P{isbidimirrored}', "");
Expect(0, 39, '\P{^isbidimirrored}', "");
Expect(1, 41, '\p{-	Is-Bidi-Mirrored}', "");
Expect(0, 41, '\p{^-	Is-Bidi-Mirrored}', "");
Expect(0, 41, '\P{-	Is-Bidi-Mirrored}', "");
Expect(1, 41, '\P{^-	Is-Bidi-Mirrored}', "");
Expect(0, 39, '\p{-	Is-Bidi-Mirrored}', "");
Expect(1, 39, '\p{^-	Is-Bidi-Mirrored}', "");
Expect(1, 39, '\P{-	Is-Bidi-Mirrored}', "");
Expect(0, 39, '\P{^-	Is-Bidi-Mirrored}', "");
Error('\p{	:=Bidi_M}');
Error('\P{	:=Bidi_M}');
Expect(1, 41, '\p{bidim}', "");
Expect(0, 41, '\p{^bidim}', "");
Expect(0, 41, '\P{bidim}', "");
Expect(1, 41, '\P{^bidim}', "");
Expect(0, 39, '\p{bidim}', "");
Expect(1, 39, '\p{^bidim}', "");
Expect(1, 39, '\P{bidim}', "");
Expect(0, 39, '\P{^bidim}', "");
Expect(1, 41, '\p{	BidiM}', "");
Expect(0, 41, '\p{^	BidiM}', "");
Expect(0, 41, '\P{	BidiM}', "");
Expect(1, 41, '\P{^	BidiM}', "");
Expect(0, 39, '\p{	BidiM}', "");
Expect(1, 39, '\p{^	BidiM}', "");
Expect(1, 39, '\P{	BidiM}', "");
Expect(0, 39, '\P{^	BidiM}', "");
Error('\p{/a/IS_bidi-M}');
Error('\P{/a/IS_bidi-M}');
Expect(1, 41, '\p{isbidim}', "");
Expect(0, 41, '\p{^isbidim}', "");
Expect(0, 41, '\P{isbidim}', "");
Expect(1, 41, '\P{^isbidim}', "");
Expect(0, 39, '\p{isbidim}', "");
Expect(1, 39, '\p{^isbidim}', "");
Expect(1, 39, '\P{isbidim}', "");
Expect(0, 39, '\P{^isbidim}', "");
Expect(1, 41, '\p{	Is	bidiM}', "");
Expect(0, 41, '\p{^	Is	bidiM}', "");
Expect(0, 41, '\P{	Is	bidiM}', "");
Expect(1, 41, '\P{^	Is	bidiM}', "");
Expect(0, 39, '\p{	Is	bidiM}', "");
Expect(1, 39, '\p{^	Is	bidiM}', "");
Expect(1, 39, '\P{	Is	bidiM}', "");
Expect(0, 39, '\P{^	Is	bidiM}', "");
Error('\p{Katakana_Or_Hiragana}');
Error('\P{Katakana_Or_Hiragana}');
Error('\p{Is_Katakana_Or_Hiragana}');
Error('\P{Is_Katakana_Or_Hiragana}');
Error('\p{Hrkt}');
Error('\P{Hrkt}');
Error('\p{Is_Hrkt}');
Error('\P{Is_Hrkt}');
Error('\p{/a/OTHER	Symbol}');
Error('\P{/a/OTHER	Symbol}');
Expect(1, 167, '\p{othersymbol}', "");
Expect(0, 167, '\p{^othersymbol}', "");
Expect(0, 167, '\P{othersymbol}', "");
Expect(1, 167, '\P{^othersymbol}', "");
Expect(0, 165, '\p{othersymbol}', "");
Expect(1, 165, '\p{^othersymbol}', "");
Expect(1, 165, '\P{othersymbol}', "");
Expect(0, 165, '\P{^othersymbol}', "");
Expect(1, 167, '\p{	-OTHER_SYMBOL}', "");
Expect(0, 167, '\p{^	-OTHER_SYMBOL}', "");
Expect(0, 167, '\P{	-OTHER_SYMBOL}', "");
Expect(1, 167, '\P{^	-OTHER_SYMBOL}', "");
Expect(0, 165, '\p{	-OTHER_SYMBOL}', "");
Expect(1, 165, '\p{^	-OTHER_SYMBOL}', "");
Expect(1, 165, '\P{	-OTHER_SYMBOL}', "");
Expect(0, 165, '\P{^	-OTHER_SYMBOL}', "");
Error('\p{_:=Is	other	SYMBOL}');
Error('\P{_:=Is	other	SYMBOL}');
Expect(1, 167, '\p{isothersymbol}', "");
Expect(0, 167, '\p{^isothersymbol}', "");
Expect(0, 167, '\P{isothersymbol}', "");
Expect(1, 167, '\P{^isothersymbol}', "");
Expect(0, 165, '\p{isothersymbol}', "");
Expect(1, 165, '\p{^isothersymbol}', "");
Expect(1, 165, '\P{isothersymbol}', "");
Expect(0, 165, '\P{^isothersymbol}', "");
Expect(1, 167, '\p{IsOTHERSymbol}', "");
Expect(0, 167, '\p{^IsOTHERSymbol}', "");
Expect(0, 167, '\P{IsOTHERSymbol}', "");
Expect(1, 167, '\P{^IsOTHERSymbol}', "");
Expect(0, 165, '\p{IsOTHERSymbol}', "");
Expect(1, 165, '\p{^IsOTHERSymbol}', "");
Expect(1, 165, '\P{IsOTHERSymbol}', "");
Expect(0, 165, '\P{^IsOTHERSymbol}', "");
Error('\p{  SO/a/}');
Error('\P{  SO/a/}');
Expect(1, 167, '\p{so}', "");
Expect(0, 167, '\p{^so}', "");
Expect(0, 167, '\P{so}', "");
Expect(1, 167, '\P{^so}', "");
Expect(0, 165, '\p{so}', "");
Expect(1, 165, '\p{^so}', "");
Expect(1, 165, '\P{so}', "");
Expect(0, 165, '\P{^so}', "");
Expect(1, 167, '\p{--So}', "");
Expect(0, 167, '\p{^--So}', "");
Expect(0, 167, '\P{--So}', "");
Expect(1, 167, '\P{^--So}', "");
Expect(0, 165, '\p{--So}', "");
Expect(1, 165, '\p{^--So}', "");
Expect(1, 165, '\P{--So}', "");
Expect(0, 165, '\P{^--So}', "");
Error('\p{-/a/is	So}');
Error('\P{-/a/is	So}');
Expect(1, 167, '\p{isso}', "");
Expect(0, 167, '\p{^isso}', "");
Expect(0, 167, '\P{isso}', "");
Expect(1, 167, '\P{^isso}', "");
Expect(0, 165, '\p{isso}', "");
Expect(1, 165, '\p{^isso}', "");
Expect(1, 165, '\P{isso}', "");
Expect(0, 165, '\P{^isso}', "");
Expect(1, 167, '\p{Is_So}', "");
Expect(0, 167, '\p{^Is_So}', "");
Expect(0, 167, '\P{Is_So}', "");
Expect(1, 167, '\P{^Is_So}', "");
Expect(0, 165, '\p{Is_So}', "");
Expect(1, 165, '\p{^Is_So}', "");
Expect(1, 165, '\P{Is_So}', "");
Expect(0, 165, '\P{^Is_So}', "");
Error('\p{ /a/any}');
Error('\P{ /a/any}');
Expect(1, 1, '\p{any}', "");
Expect(0, 1, '\p{^any}', "");
Expect(0, 1, '\P{any}', "");
Expect(1, 1, '\P{^any}', "");
Expect(1, 1, '\p{--Any}', "");
Expect(0, 1, '\p{^--Any}', "");
Expect(0, 1, '\P{--Any}', "");
Expect(1, 1, '\P{^--Any}', "");
Error('\p{/a/-_ALL}');
Error('\P{/a/-_ALL}');
Expect(1, 1, '\p{all}', "");
Expect(0, 1, '\p{^all}', "");
Expect(0, 1, '\P{all}', "");
Expect(1, 1, '\P{^all}', "");
Expect(1, 1, '\p{_-all}', "");
Expect(0, 1, '\p{^_-all}', "");
Expect(0, 1, '\P{_-all}', "");
Expect(1, 1, '\P{^_-all}', "");
Error('\p{ :=isany}');
Error('\P{ :=isany}');
Expect(1, 1, '\p{isany}', "");
Expect(0, 1, '\p{^isany}', "");
Expect(0, 1, '\P{isany}', "");
Expect(1, 1, '\P{^isany}', "");
Expect(1, 1, '\p{_-Is_ANY}', "");
Expect(0, 1, '\p{^_-Is_ANY}', "");
Expect(0, 1, '\P{_-Is_ANY}', "");
Expect(1, 1, '\P{^_-Is_ANY}', "");
Error('\p{_/a/is	all}');
Error('\P{_/a/is	all}');
Expect(1, 1, '\p{isall}', "");
Expect(0, 1, '\p{^isall}', "");
Expect(0, 1, '\P{isall}', "");
Expect(1, 1, '\P{^isall}', "");
Expect(1, 1, '\p{_ is	ALL}', "");
Expect(0, 1, '\p{^_ is	ALL}', "");
Expect(0, 1, '\P{_ is	ALL}', "");
Expect(1, 1, '\P{^_ is	ALL}', "");
Error('\p{_-Other-LETTER/a/}');
Error('\P{_-Other-LETTER/a/}');
Expect(1, 443, '\p{otherletter}', "");
Expect(0, 443, '\p{^otherletter}', "");
Expect(0, 443, '\P{otherletter}', "");
Expect(1, 443, '\P{^otherletter}', "");
Expect(0, 442, '\p{otherletter}', "");
Expect(1, 442, '\p{^otherletter}', "");
Expect(1, 442, '\P{otherletter}', "");
Expect(0, 442, '\P{^otherletter}', "");
Expect(1, 443, '\p{_ Other_letter}', "");
Expect(0, 443, '\p{^_ Other_letter}', "");
Expect(0, 443, '\P{_ Other_letter}', "");
Expect(1, 443, '\P{^_ Other_letter}', "");
Expect(0, 442, '\p{_ Other_letter}', "");
Expect(1, 442, '\p{^_ Other_letter}', "");
Expect(1, 442, '\P{_ Other_letter}', "");
Expect(0, 442, '\P{^_ Other_letter}', "");
Error('\p{_ Is/a/OTHER	LETTER}');
Error('\P{_ Is/a/OTHER	LETTER}');
Expect(1, 443, '\p{isotherletter}', "");
Expect(0, 443, '\p{^isotherletter}', "");
Expect(0, 443, '\P{isotherletter}', "");
Expect(1, 443, '\P{^isotherletter}', "");
Expect(0, 442, '\p{isotherletter}', "");
Expect(1, 442, '\p{^isotherletter}', "");
Expect(1, 442, '\P{isotherletter}', "");
Expect(0, 442, '\P{^isotherletter}', "");
Expect(1, 443, '\p{ isOther	LETTER}', "");
Expect(0, 443, '\p{^ isOther	LETTER}', "");
Expect(0, 443, '\P{ isOther	LETTER}', "");
Expect(1, 443, '\P{^ isOther	LETTER}', "");
Expect(0, 442, '\p{ isOther	LETTER}', "");
Expect(1, 442, '\p{^ isOther	LETTER}', "");
Expect(1, 442, '\P{ isOther	LETTER}', "");
Expect(0, 442, '\P{^ isOther	LETTER}', "");
Error('\p{-_Lo:=}');
Error('\P{-_Lo:=}');
Expect(1, 443, '\p{lo}', "");
Expect(0, 443, '\p{^lo}', "");
Expect(0, 443, '\P{lo}', "");
Expect(1, 443, '\P{^lo}', "");
Expect(0, 442, '\p{lo}', "");
Expect(1, 442, '\p{^lo}', "");
Expect(1, 442, '\P{lo}', "");
Expect(0, 442, '\P{^lo}', "");
Expect(1, 443, '\p{	-lo}', "");
Expect(0, 443, '\p{^	-lo}', "");
Expect(0, 443, '\P{	-lo}', "");
Expect(1, 443, '\P{^	-lo}', "");
Expect(0, 442, '\p{	-lo}', "");
Expect(1, 442, '\p{^	-lo}', "");
Expect(1, 442, '\P{	-lo}', "");
Expect(0, 442, '\P{^	-lo}', "");
Error('\p{_:=Is	Lo}');
Error('\P{_:=Is	Lo}');
Expect(1, 443, '\p{islo}', "");
Expect(0, 443, '\p{^islo}', "");
Expect(0, 443, '\P{islo}', "");
Expect(1, 443, '\P{^islo}', "");
Expect(0, 442, '\p{islo}', "");
Expect(1, 442, '\p{^islo}', "");
Expect(1, 442, '\P{islo}', "");
Expect(0, 442, '\P{^islo}', "");
Expect(1, 443, '\p{-is_LO}', "");
Expect(0, 443, '\p{^-is_LO}', "");
Expect(0, 443, '\P{-is_LO}', "");
Expect(1, 443, '\P{^-is_LO}', "");
Expect(0, 442, '\p{-is_LO}', "");
Expect(1, 442, '\p{^-is_LO}', "");
Expect(1, 442, '\P{-is_LO}', "");
Expect(0, 442, '\P{^-is_LO}', "");
Error('\p{_-OTHER:=DEFAULT-IGNORABLE	code_POINT}');
Error('\P{_-OTHER:=DEFAULT-IGNORABLE	code_POINT}');
Expect(1, 847, '\p{otherdefaultignorablecodepoint}', 'deprecated');
Expect(0, 847, '\p{^otherdefaultignorablecodepoint}', 'deprecated');
Expect(0, 847, '\P{otherdefaultignorablecodepoint}', 'deprecated');
Expect(1, 847, '\P{^otherdefaultignorablecodepoint}', 'deprecated');
Expect(0, 846, '\p{otherdefaultignorablecodepoint}', 'deprecated');
Expect(1, 846, '\p{^otherdefaultignorablecodepoint}', 'deprecated');
Expect(1, 846, '\P{otherdefaultignorablecodepoint}', 'deprecated');
Expect(0, 846, '\P{^otherdefaultignorablecodepoint}', 'deprecated');
Expect(1, 847, '\p{_-Other Default	Ignorable	codepoint}', 'deprecated');
Expect(0, 847, '\p{^_-Other Default	Ignorable	codepoint}', 'deprecated');
Expect(0, 847, '\P{_-Other Default	Ignorable	codepoint}', 'deprecated');
Expect(1, 847, '\P{^_-Other Default	Ignorable	codepoint}', 'deprecated');
Expect(0, 846, '\p{_-Other Default	Ignorable	codepoint}', 'deprecated');
Expect(1, 846, '\p{^_-Other Default	Ignorable	codepoint}', 'deprecated');
Expect(1, 846, '\P{_-Other Default	Ignorable	codepoint}', 'deprecated');
Expect(0, 846, '\P{^_-Other Default	Ignorable	codepoint}', 'deprecated');
Error('\p{-:=IS Other_Default_Ignorable_CODE	POINT}');
Error('\P{-:=IS Other_Default_Ignorable_CODE	POINT}');
Expect(1, 847, '\p{isotherdefaultignorablecodepoint}', 'deprecated');
Expect(0, 847, '\p{^isotherdefaultignorablecodepoint}', 'deprecated');
Expect(0, 847, '\P{isotherdefaultignorablecodepoint}', 'deprecated');
Expect(1, 847, '\P{^isotherdefaultignorablecodepoint}', 'deprecated');
Expect(0, 846, '\p{isotherdefaultignorablecodepoint}', 'deprecated');
Expect(1, 846, '\p{^isotherdefaultignorablecodepoint}', 'deprecated');
Expect(1, 846, '\P{isotherdefaultignorablecodepoint}', 'deprecated');
Expect(0, 846, '\P{^isotherdefaultignorablecodepoint}', 'deprecated');
Expect(1, 847, '\p{ IsOTHER DEFAULT Ignorable	CODE_POINT}', 'deprecated');
Expect(0, 847, '\p{^ IsOTHER DEFAULT Ignorable	CODE_POINT}', 'deprecated');
Expect(0, 847, '\P{ IsOTHER DEFAULT Ignorable	CODE_POINT}', 'deprecated');
Expect(1, 847, '\P{^ IsOTHER DEFAULT Ignorable	CODE_POINT}', 'deprecated');
Expect(0, 846, '\p{ IsOTHER DEFAULT Ignorable	CODE_POINT}', 'deprecated');
Expect(1, 846, '\p{^ IsOTHER DEFAULT Ignorable	CODE_POINT}', 'deprecated');
Expect(1, 846, '\P{ IsOTHER DEFAULT Ignorable	CODE_POINT}', 'deprecated');
Expect(0, 846, '\P{^ IsOTHER DEFAULT Ignorable	CODE_POINT}', 'deprecated');
Error('\p{/a/_ODI}');
Error('\P{/a/_ODI}');
Expect(1, 847, '\p{odi}', 'deprecated');
Expect(0, 847, '\p{^odi}', 'deprecated');
Expect(0, 847, '\P{odi}', 'deprecated');
Expect(1, 847, '\P{^odi}', 'deprecated');
Expect(0, 846, '\p{odi}', 'deprecated');
Expect(1, 846, '\p{^odi}', 'deprecated');
Expect(1, 846, '\P{odi}', 'deprecated');
Expect(0, 846, '\P{^odi}', 'deprecated');
Expect(1, 847, '\p{ ODI}', 'deprecated');
Expect(0, 847, '\p{^ ODI}', 'deprecated');
Expect(0, 847, '\P{ ODI}', 'deprecated');
Expect(1, 847, '\P{^ ODI}', 'deprecated');
Expect(0, 846, '\p{ ODI}', 'deprecated');
Expect(1, 846, '\p{^ ODI}', 'deprecated');
Expect(1, 846, '\P{ ODI}', 'deprecated');
Expect(0, 846, '\P{^ ODI}', 'deprecated');
Error('\p{_:=Is-ODI}');
Error('\P{_:=Is-ODI}');
Expect(1, 847, '\p{isodi}', 'deprecated');
Expect(0, 847, '\p{^isodi}', 'deprecated');
Expect(0, 847, '\P{isodi}', 'deprecated');
Expect(1, 847, '\P{^isodi}', 'deprecated');
Expect(0, 846, '\p{isodi}', 'deprecated');
Expect(1, 846, '\p{^isodi}', 'deprecated');
Expect(1, 846, '\P{isodi}', 'deprecated');
Expect(0, 846, '\P{^isodi}', 'deprecated');
Expect(1, 847, '\p{ -Is ODI}', 'deprecated');
Expect(0, 847, '\p{^ -Is ODI}', 'deprecated');
Expect(0, 847, '\P{ -Is ODI}', 'deprecated');
Expect(1, 847, '\P{^ -Is ODI}', 'deprecated');
Expect(0, 846, '\p{ -Is ODI}', 'deprecated');
Expect(1, 846, '\p{^ -Is ODI}', 'deprecated');
Expect(1, 846, '\P{ -Is ODI}', 'deprecated');
Expect(0, 846, '\P{^ -Is ODI}', 'deprecated');
Error('\p{:=  Sundanese}');
Error('\P{:=  Sundanese}');
Expect(1, 7082, '\p{sundanese}', "");
Expect(0, 7082, '\p{^sundanese}', "");
Expect(0, 7082, '\P{sundanese}', "");
Expect(1, 7082, '\P{^sundanese}', "");
Expect(0, 7039, '\p{sundanese}', "");
Expect(1, 7039, '\p{^sundanese}', "");
Expect(1, 7039, '\P{sundanese}', "");
Expect(0, 7039, '\P{^sundanese}', "");
Expect(1, 7082, '\p{	 SUNDANESE}', "");
Expect(0, 7082, '\p{^	 SUNDANESE}', "");
Expect(0, 7082, '\P{	 SUNDANESE}', "");
Expect(1, 7082, '\P{^	 SUNDANESE}', "");
Expect(0, 7039, '\p{	 SUNDANESE}', "");
Expect(1, 7039, '\p{^	 SUNDANESE}', "");
Expect(1, 7039, '\P{	 SUNDANESE}', "");
Expect(0, 7039, '\P{^	 SUNDANESE}', "");
Error('\p{	 is/a/Sundanese}');
Error('\P{	 is/a/Sundanese}');
Expect(1, 7082, '\p{issundanese}', "");
Expect(0, 7082, '\p{^issundanese}', "");
Expect(0, 7082, '\P{issundanese}', "");
Expect(1, 7082, '\P{^issundanese}', "");
Expect(0, 7039, '\p{issundanese}', "");
Expect(1, 7039, '\p{^issundanese}', "");
Expect(1, 7039, '\P{issundanese}', "");
Expect(0, 7039, '\P{^issundanese}', "");
Expect(1, 7082, '\p{Is-Sundanese}', "");
Expect(0, 7082, '\p{^Is-Sundanese}', "");
Expect(0, 7082, '\P{Is-Sundanese}', "");
Expect(1, 7082, '\P{^Is-Sundanese}', "");
Expect(0, 7039, '\p{Is-Sundanese}', "");
Expect(1, 7039, '\p{^Is-Sundanese}', "");
Expect(1, 7039, '\P{Is-Sundanese}', "");
Expect(0, 7039, '\P{^Is-Sundanese}', "");
Error('\p{	 sund/a/}');
Error('\P{	 sund/a/}');
Expect(1, 7082, '\p{sund}', "");
Expect(0, 7082, '\p{^sund}', "");
Expect(0, 7082, '\P{sund}', "");
Expect(1, 7082, '\P{^sund}', "");
Expect(0, 7039, '\p{sund}', "");
Expect(1, 7039, '\p{^sund}', "");
Expect(1, 7039, '\P{sund}', "");
Expect(0, 7039, '\P{^sund}', "");
Expect(1, 7082, '\p{--sund}', "");
Expect(0, 7082, '\p{^--sund}', "");
Expect(0, 7082, '\P{--sund}', "");
Expect(1, 7082, '\P{^--sund}', "");
Expect(0, 7039, '\p{--sund}', "");
Expect(1, 7039, '\p{^--sund}', "");
Expect(1, 7039, '\P{--sund}', "");
Expect(0, 7039, '\P{^--sund}', "");
Error('\p{ISSund/a/}');
Error('\P{ISSund/a/}');
Expect(1, 7082, '\p{issund}', "");
Expect(0, 7082, '\p{^issund}', "");
Expect(0, 7082, '\P{issund}', "");
Expect(1, 7082, '\P{^issund}', "");
Expect(0, 7039, '\p{issund}', "");
Expect(1, 7039, '\p{^issund}', "");
Expect(1, 7039, '\P{issund}', "");
Expect(0, 7039, '\P{^issund}', "");
Expect(1, 7082, '\p{  IS	Sund}', "");
Expect(0, 7082, '\p{^  IS	Sund}', "");
Expect(0, 7082, '\P{  IS	Sund}', "");
Expect(1, 7082, '\P{^  IS	Sund}', "");
Expect(0, 7039, '\p{  IS	Sund}', "");
Expect(1, 7039, '\p{^  IS	Sund}', "");
Expect(1, 7039, '\P{  IS	Sund}', "");
Expect(0, 7039, '\P{^  IS	Sund}', "");
Error('\p{  carian/a/}');
Error('\P{  carian/a/}');
Expect(1, 66256, '\p{carian}', "");
Expect(0, 66256, '\p{^carian}', "");
Expect(0, 66256, '\P{carian}', "");
Expect(1, 66256, '\P{^carian}', "");
Expect(0, 66207, '\p{carian}', "");
Expect(1, 66207, '\p{^carian}', "");
Expect(1, 66207, '\P{carian}', "");
Expect(0, 66207, '\P{^carian}', "");
Expect(1, 66256, '\p{_Carian}', "");
Expect(0, 66256, '\p{^_Carian}', "");
Expect(0, 66256, '\P{_Carian}', "");
Expect(1, 66256, '\P{^_Carian}', "");
Expect(0, 66207, '\p{_Carian}', "");
Expect(1, 66207, '\p{^_Carian}', "");
Expect(1, 66207, '\P{_Carian}', "");
Expect(0, 66207, '\P{^_Carian}', "");
Error('\p{/a/	_IS-carian}');
Error('\P{/a/	_IS-carian}');
Expect(1, 66256, '\p{iscarian}', "");
Expect(0, 66256, '\p{^iscarian}', "");
Expect(0, 66256, '\P{iscarian}', "");
Expect(1, 66256, '\P{^iscarian}', "");
Expect(0, 66207, '\p{iscarian}', "");
Expect(1, 66207, '\p{^iscarian}', "");
Expect(1, 66207, '\P{iscarian}', "");
Expect(0, 66207, '\P{^iscarian}', "");
Expect(1, 66256, '\p{	-ISCARIAN}', "");
Expect(0, 66256, '\p{^	-ISCARIAN}', "");
Expect(0, 66256, '\P{	-ISCARIAN}', "");
Expect(1, 66256, '\P{^	-ISCARIAN}', "");
Expect(0, 66207, '\p{	-ISCARIAN}', "");
Expect(1, 66207, '\p{^	-ISCARIAN}', "");
Expect(1, 66207, '\P{	-ISCARIAN}', "");
Expect(0, 66207, '\P{^	-ISCARIAN}', "");
Error('\p{--cari/a/}');
Error('\P{--cari/a/}');
Expect(1, 66256, '\p{cari}', "");
Expect(0, 66256, '\p{^cari}', "");
Expect(0, 66256, '\P{cari}', "");
Expect(1, 66256, '\P{^cari}', "");
Expect(0, 66207, '\p{cari}', "");
Expect(1, 66207, '\p{^cari}', "");
Expect(1, 66207, '\P{cari}', "");
Expect(0, 66207, '\P{^cari}', "");
Expect(1, 66256, '\p{	CARI}', "");
Expect(0, 66256, '\p{^	CARI}', "");
Expect(0, 66256, '\P{	CARI}', "");
Expect(1, 66256, '\P{^	CARI}', "");
Expect(0, 66207, '\p{	CARI}', "");
Expect(1, 66207, '\p{^	CARI}', "");
Expect(1, 66207, '\P{	CARI}', "");
Expect(0, 66207, '\P{^	CARI}', "");
Error('\p{_ is Cari:=}');
Error('\P{_ is Cari:=}');
Expect(1, 66256, '\p{iscari}', "");
Expect(0, 66256, '\p{^iscari}', "");
Expect(0, 66256, '\P{iscari}', "");
Expect(1, 66256, '\P{^iscari}', "");
Expect(0, 66207, '\p{iscari}', "");
Expect(1, 66207, '\p{^iscari}', "");
Expect(1, 66207, '\P{iscari}', "");
Expect(0, 66207, '\P{^iscari}', "");
Expect(1, 66256, '\p{	is cari}', "");
Expect(0, 66256, '\p{^	is cari}', "");
Expect(0, 66256, '\P{	is cari}', "");
Expect(1, 66256, '\P{^	is cari}', "");
Expect(0, 66207, '\p{	is cari}', "");
Expect(1, 66207, '\p{^	is cari}', "");
Expect(1, 66207, '\P{	is cari}', "");
Expect(0, 66207, '\P{^	is cari}', "");
Error('\p{:=_ OLD_Italic}');
Error('\P{:=_ OLD_Italic}');
Expect(1, 66334, '\p{olditalic}', "");
Expect(0, 66334, '\p{^olditalic}', "");
Expect(0, 66334, '\P{olditalic}', "");
Expect(1, 66334, '\P{^olditalic}', "");
Expect(0, 66303, '\p{olditalic}', "");
Expect(1, 66303, '\p{^olditalic}', "");
Expect(1, 66303, '\P{olditalic}', "");
Expect(0, 66303, '\P{^olditalic}', "");
Expect(1, 66334, '\p{__Old	Italic}', "");
Expect(0, 66334, '\p{^__Old	Italic}', "");
Expect(0, 66334, '\P{__Old	Italic}', "");
Expect(1, 66334, '\P{^__Old	Italic}', "");
Expect(0, 66303, '\p{__Old	Italic}', "");
Expect(1, 66303, '\p{^__Old	Italic}', "");
Expect(1, 66303, '\P{__Old	Italic}', "");
Expect(0, 66303, '\P{^__Old	Italic}', "");
Error('\p{-Is Old/a/ITALIC}');
Error('\P{-Is Old/a/ITALIC}');
Expect(1, 66334, '\p{isolditalic}', "");
Expect(0, 66334, '\p{^isolditalic}', "");
Expect(0, 66334, '\P{isolditalic}', "");
Expect(1, 66334, '\P{^isolditalic}', "");
Expect(0, 66303, '\p{isolditalic}', "");
Expect(1, 66303, '\p{^isolditalic}', "");
Expect(1, 66303, '\P{isolditalic}', "");
Expect(0, 66303, '\P{^isolditalic}', "");
Expect(1, 66334, '\p{		IsOld Italic}', "");
Expect(0, 66334, '\p{^		IsOld Italic}', "");
Expect(0, 66334, '\P{		IsOld Italic}', "");
Expect(1, 66334, '\P{^		IsOld Italic}', "");
Expect(0, 66303, '\p{		IsOld Italic}', "");
Expect(1, 66303, '\p{^		IsOld Italic}', "");
Expect(1, 66303, '\P{		IsOld Italic}', "");
Expect(0, 66303, '\P{^		IsOld Italic}', "");
Error('\p{ /a/Ital}');
Error('\P{ /a/Ital}');
Expect(1, 66334, '\p{ital}', "");
Expect(0, 66334, '\p{^ital}', "");
Expect(0, 66334, '\P{ital}', "");
Expect(1, 66334, '\P{^ital}', "");
Expect(0, 66303, '\p{ital}', "");
Expect(1, 66303, '\p{^ital}', "");
Expect(1, 66303, '\P{ital}', "");
Expect(0, 66303, '\P{^ital}', "");
Expect(1, 66334, '\p{	ITAL}', "");
Expect(0, 66334, '\p{^	ITAL}', "");
Expect(0, 66334, '\P{	ITAL}', "");
Expect(1, 66334, '\P{^	ITAL}', "");
Expect(0, 66303, '\p{	ITAL}', "");
Expect(1, 66303, '\p{^	ITAL}', "");
Expect(1, 66303, '\P{	ITAL}', "");
Expect(0, 66303, '\P{^	ITAL}', "");
Error('\p{_ is	ITAL:=}');
Error('\P{_ is	ITAL:=}');
Expect(1, 66334, '\p{isital}', "");
Expect(0, 66334, '\p{^isital}', "");
Expect(0, 66334, '\P{isital}', "");
Expect(1, 66334, '\P{^isital}', "");
Expect(0, 66303, '\p{isital}', "");
Expect(1, 66303, '\p{^isital}', "");
Expect(1, 66303, '\P{isital}', "");
Expect(0, 66303, '\P{^isital}', "");
Expect(1, 66334, '\p{		is_Ital}', "");
Expect(0, 66334, '\p{^		is_Ital}', "");
Expect(0, 66334, '\P{		is_Ital}', "");
Expect(1, 66334, '\P{^		is_Ital}', "");
Expect(0, 66303, '\p{		is_Ital}', "");
Expect(1, 66303, '\p{^		is_Ital}', "");
Expect(1, 66303, '\P{		is_Ital}', "");
Expect(0, 66303, '\P{^		is_Ital}', "");
Error('\p{:=_	XDigit}');
Error('\P{:=_	XDigit}');
Expect(1, 57, '\p{xdigit}', "");
Expect(0, 57, '\p{^xdigit}', "");
Expect(0, 57, '\P{xdigit}', "");
Expect(1, 57, '\P{^xdigit}', "");
Expect(0, 47, '\p{xdigit}', "");
Expect(1, 47, '\p{^xdigit}', "");
Expect(1, 47, '\P{xdigit}', "");
Expect(0, 47, '\P{^xdigit}', "");
Expect(1, 57, '\p{	XDIGIT}', "");
Expect(0, 57, '\p{^	XDIGIT}', "");
Expect(0, 57, '\P{	XDIGIT}', "");
Expect(1, 57, '\P{^	XDIGIT}', "");
Expect(0, 47, '\p{	XDIGIT}', "");
Expect(1, 47, '\p{^	XDIGIT}', "");
Expect(1, 47, '\P{	XDIGIT}', "");
Expect(0, 47, '\P{^	XDIGIT}', "");
Error('\p{ xposixxdigit/a/}');
Error('\P{ xposixxdigit/a/}');
Expect(1, 57, '\p{xposixxdigit}', "");
Expect(0, 57, '\p{^xposixxdigit}', "");
Expect(0, 57, '\P{xposixxdigit}', "");
Expect(1, 57, '\P{^xposixxdigit}', "");
Expect(0, 47, '\p{xposixxdigit}', "");
Expect(1, 47, '\p{^xposixxdigit}', "");
Expect(1, 47, '\P{xposixxdigit}', "");
Expect(0, 47, '\P{^xposixxdigit}', "");
Expect(1, 57, '\p{-_XPosixXDigit}', "");
Expect(0, 57, '\p{^-_XPosixXDigit}', "");
Expect(0, 57, '\P{-_XPosixXDigit}', "");
Expect(1, 57, '\P{^-_XPosixXDigit}', "");
Expect(0, 47, '\p{-_XPosixXDigit}', "");
Expect(1, 47, '\p{^-_XPosixXDigit}', "");
Expect(1, 47, '\P{-_XPosixXDigit}', "");
Expect(0, 47, '\P{^-_XPosixXDigit}', "");
Error('\p{_ Is	xdigit/a/}');
Error('\P{_ Is	xdigit/a/}');
Expect(1, 57, '\p{isxdigit}', "");
Expect(0, 57, '\p{^isxdigit}', "");
Expect(0, 57, '\P{isxdigit}', "");
Expect(1, 57, '\P{^isxdigit}', "");
Expect(0, 47, '\p{isxdigit}', "");
Expect(1, 47, '\p{^isxdigit}', "");
Expect(1, 47, '\P{isxdigit}', "");
Expect(0, 47, '\P{^isxdigit}', "");
Expect(1, 57, '\p{-is	xdigit}', "");
Expect(0, 57, '\p{^-is	xdigit}', "");
Expect(0, 57, '\P{-is	xdigit}', "");
Expect(1, 57, '\P{^-is	xdigit}', "");
Expect(0, 47, '\p{-is	xdigit}', "");
Expect(1, 47, '\p{^-is	xdigit}', "");
Expect(1, 47, '\P{-is	xdigit}', "");
Expect(0, 47, '\P{^-is	xdigit}', "");
Error('\p{_IS	XPOSIXXDIGIT:=}');
Error('\P{_IS	XPOSIXXDIGIT:=}');
Expect(1, 57, '\p{isxposixxdigit}', "");
Expect(0, 57, '\p{^isxposixxdigit}', "");
Expect(0, 57, '\P{isxposixxdigit}', "");
Expect(1, 57, '\P{^isxposixxdigit}', "");
Expect(0, 47, '\p{isxposixxdigit}', "");
Expect(1, 47, '\p{^isxposixxdigit}', "");
Expect(1, 47, '\P{isxposixxdigit}', "");
Expect(0, 47, '\P{^isxposixxdigit}', "");
Expect(1, 57, '\p{_ Is_xposixxdigit}', "");
Expect(0, 57, '\p{^_ Is_xposixxdigit}', "");
Expect(0, 57, '\P{_ Is_xposixxdigit}', "");
Expect(1, 57, '\P{^_ Is_xposixxdigit}', "");
Expect(0, 47, '\p{_ Is_xposixxdigit}', "");
Expect(1, 47, '\p{^_ Is_xposixxdigit}', "");
Expect(1, 47, '\P{_ Is_xposixxdigit}', "");
Expect(0, 47, '\P{^_ Is_xposixxdigit}', "");
Error('\p{ -HEX/a/Digit}');
Error('\P{ -HEX/a/Digit}');
Expect(1, 57, '\p{hexdigit}', "");
Expect(0, 57, '\p{^hexdigit}', "");
Expect(0, 57, '\P{hexdigit}', "");
Expect(1, 57, '\P{^hexdigit}', "");
Expect(0, 47, '\p{hexdigit}', "");
Expect(1, 47, '\p{^hexdigit}', "");
Expect(1, 47, '\P{hexdigit}', "");
Expect(0, 47, '\P{^hexdigit}', "");
Expect(1, 57, '\p{	_hex Digit}', "");
Expect(0, 57, '\p{^	_hex Digit}', "");
Expect(0, 57, '\P{	_hex Digit}', "");
Expect(1, 57, '\P{^	_hex Digit}', "");
Expect(0, 47, '\p{	_hex Digit}', "");
Expect(1, 47, '\p{^	_hex Digit}', "");
Expect(1, 47, '\P{	_hex Digit}', "");
Expect(0, 47, '\P{^	_hex Digit}', "");
Error('\p{	 IS/a/Hex-Digit}');
Error('\P{	 IS/a/Hex-Digit}');
Expect(1, 57, '\p{ishexdigit}', "");
Expect(0, 57, '\p{^ishexdigit}', "");
Expect(0, 57, '\P{ishexdigit}', "");
Expect(1, 57, '\P{^ishexdigit}', "");
Expect(0, 47, '\p{ishexdigit}', "");
Expect(1, 47, '\p{^ishexdigit}', "");
Expect(1, 47, '\P{ishexdigit}', "");
Expect(0, 47, '\P{^ishexdigit}', "");
Expect(1, 57, '\p{-is	hex	Digit}', "");
Expect(0, 57, '\p{^-is	hex	Digit}', "");
Expect(0, 57, '\P{-is	hex	Digit}', "");
Expect(1, 57, '\P{^-is	hex	Digit}', "");
Expect(0, 47, '\p{-is	hex	Digit}', "");
Expect(1, 47, '\p{^-is	hex	Digit}', "");
Expect(1, 47, '\P{-is	hex	Digit}', "");
Expect(0, 47, '\P{^-is	hex	Digit}', "");
Error('\p{_:=Hex}');
Error('\P{_:=Hex}');
Expect(1, 57, '\p{hex}', "");
Expect(0, 57, '\p{^hex}', "");
Expect(0, 57, '\P{hex}', "");
Expect(1, 57, '\P{^hex}', "");
Expect(0, 47, '\p{hex}', "");
Expect(1, 47, '\p{^hex}', "");
Expect(1, 47, '\P{hex}', "");
Expect(0, 47, '\P{^hex}', "");
Expect(1, 57, '\p{--Hex}', "");
Expect(0, 57, '\p{^--Hex}', "");
Expect(0, 57, '\P{--Hex}', "");
Expect(1, 57, '\P{^--Hex}', "");
Expect(0, 47, '\p{--Hex}', "");
Expect(1, 47, '\p{^--Hex}', "");
Expect(1, 47, '\P{--Hex}', "");
Expect(0, 47, '\P{^--Hex}', "");
Error('\p{/a/_ is_Hex}');
Error('\P{/a/_ is_Hex}');
Expect(1, 57, '\p{ishex}', "");
Expect(0, 57, '\p{^ishex}', "");
Expect(0, 57, '\P{ishex}', "");
Expect(1, 57, '\P{^ishex}', "");
Expect(0, 47, '\p{ishex}', "");
Expect(1, 47, '\p{^ishex}', "");
Expect(1, 47, '\P{ishex}', "");
Expect(0, 47, '\P{^ishex}', "");
Expect(1, 57, '\p{-Is-Hex}', "");
Expect(0, 57, '\p{^-Is-Hex}', "");
Expect(0, 57, '\P{-Is-Hex}', "");
Expect(1, 57, '\P{^-Is-Hex}', "");
Expect(0, 47, '\p{-Is-Hex}', "");
Expect(1, 47, '\p{^-Is-Hex}', "");
Expect(1, 47, '\P{-Is-Hex}', "");
Expect(0, 47, '\P{^-Is-Hex}', "");
Error('\p{_:=Titlecase	Letter}');
Error('\P{_:=Titlecase	Letter}');
Expect(1, 453, '\p{titlecaseletter}', "");
Expect(0, 453, '\p{^titlecaseletter}', "");
Expect(0, 453, '\P{titlecaseletter}', "");
Expect(1, 453, '\P{^titlecaseletter}', "");
Expect(0, 452, '\p{titlecaseletter}', "");
Expect(1, 452, '\p{^titlecaseletter}', "");
Expect(1, 452, '\P{titlecaseletter}', "");
Expect(0, 452, '\P{^titlecaseletter}', "");
Expect(1, 453, '\p{  titlecaseLetter}', "");
Expect(0, 453, '\p{^  titlecaseLetter}', "");
Expect(0, 453, '\P{  titlecaseLetter}', "");
Expect(1, 453, '\P{^  titlecaseLetter}', "");
Expect(0, 452, '\p{  titlecaseLetter}', "");
Expect(1, 452, '\p{^  titlecaseLetter}', "");
Expect(1, 452, '\P{  titlecaseLetter}', "");
Expect(0, 452, '\P{^  titlecaseLetter}', "");
Error('\p{_:=IsTITLECASE-LETTER}');
Error('\P{_:=IsTITLECASE-LETTER}');
Expect(1, 453, '\p{istitlecaseletter}', "");
Expect(0, 453, '\p{^istitlecaseletter}', "");
Expect(0, 453, '\P{istitlecaseletter}', "");
Expect(1, 453, '\P{^istitlecaseletter}', "");
Expect(0, 452, '\p{istitlecaseletter}', "");
Expect(1, 452, '\p{^istitlecaseletter}', "");
Expect(1, 452, '\P{istitlecaseletter}', "");
Expect(0, 452, '\P{^istitlecaseletter}', "");
Expect(1, 453, '\p{_	IS_Titlecase_Letter}', "");
Expect(0, 453, '\p{^_	IS_Titlecase_Letter}', "");
Expect(0, 453, '\P{_	IS_Titlecase_Letter}', "");
Expect(1, 453, '\P{^_	IS_Titlecase_Letter}', "");
Expect(0, 452, '\p{_	IS_Titlecase_Letter}', "");
Expect(1, 452, '\p{^_	IS_Titlecase_Letter}', "");
Expect(1, 452, '\P{_	IS_Titlecase_Letter}', "");
Expect(0, 452, '\P{^_	IS_Titlecase_Letter}', "");
Error('\p{ /a/Lt}');
Error('\P{ /a/Lt}');
Expect(1, 453, '\p{lt}', "");
Expect(0, 453, '\p{^lt}', "");
Expect(0, 453, '\P{lt}', "");
Expect(1, 453, '\P{^lt}', "");
Expect(0, 452, '\p{lt}', "");
Expect(1, 452, '\p{^lt}', "");
Expect(1, 452, '\P{lt}', "");
Expect(0, 452, '\P{^lt}', "");
Expect(1, 453, '\p{-_lt}', "");
Expect(0, 453, '\p{^-_lt}', "");
Expect(0, 453, '\P{-_lt}', "");
Expect(1, 453, '\P{^-_lt}', "");
Expect(0, 452, '\p{-_lt}', "");
Expect(1, 452, '\p{^-_lt}', "");
Expect(1, 452, '\P{-_lt}', "");
Expect(0, 452, '\P{^-_lt}', "");
Error('\p{ _is lt:=}');
Error('\P{ _is lt:=}');
Expect(1, 453, '\p{islt}', "");
Expect(0, 453, '\p{^islt}', "");
Expect(0, 453, '\P{islt}', "");
Expect(1, 453, '\P{^islt}', "");
Expect(0, 452, '\p{islt}', "");
Expect(1, 452, '\p{^islt}', "");
Expect(1, 452, '\P{islt}', "");
Expect(0, 452, '\P{^islt}', "");
Expect(1, 453, '\p{_ Is Lt}', "");
Expect(0, 453, '\p{^_ Is Lt}', "");
Expect(0, 453, '\P{_ Is Lt}', "");
Expect(1, 453, '\P{^_ Is Lt}', "");
Expect(0, 452, '\p{_ Is Lt}', "");
Expect(1, 452, '\p{^_ Is Lt}', "");
Expect(1, 452, '\P{_ Is Lt}', "");
Expect(0, 452, '\P{^_ Is Lt}', "");
Error('\p{/a/ Spacing	Modifier	LETTERS}');
Error('\P{/a/ Spacing	Modifier	LETTERS}');
Expect(1, 767, '\p{spacingmodifierletters}', "");
Expect(0, 767, '\p{^spacingmodifierletters}', "");
Expect(0, 767, '\P{spacingmodifierletters}', "");
Expect(1, 767, '\P{^spacingmodifierletters}', "");
Expect(0, 687, '\p{spacingmodifierletters}', "");
Expect(1, 687, '\p{^spacingmodifierletters}', "");
Expect(1, 687, '\P{spacingmodifierletters}', "");
Expect(0, 687, '\P{^spacingmodifierletters}', "");
Expect(1, 767, '\p{	Spacing-Modifier_LETTERS}', "");
Expect(0, 767, '\p{^	Spacing-Modifier_LETTERS}', "");
Expect(0, 767, '\P{	Spacing-Modifier_LETTERS}', "");
Expect(1, 767, '\P{^	Spacing-Modifier_LETTERS}', "");
Expect(0, 687, '\p{	Spacing-Modifier_LETTERS}', "");
Expect(1, 687, '\p{^	Spacing-Modifier_LETTERS}', "");
Expect(1, 687, '\P{	Spacing-Modifier_LETTERS}', "");
Expect(0, 687, '\P{^	Spacing-Modifier_LETTERS}', "");
Error('\p{	Is/a/spacing MODIFIERLetters}');
Error('\P{	Is/a/spacing MODIFIERLetters}');
Expect(1, 767, '\p{isspacingmodifierletters}', "");
Expect(0, 767, '\p{^isspacingmodifierletters}', "");
Expect(0, 767, '\P{isspacingmodifierletters}', "");
Expect(1, 767, '\P{^isspacingmodifierletters}', "");
Expect(0, 687, '\p{isspacingmodifierletters}', "");
Expect(1, 687, '\p{^isspacingmodifierletters}', "");
Expect(1, 687, '\P{isspacingmodifierletters}', "");
Expect(0, 687, '\P{^isspacingmodifierletters}', "");
Expect(1, 767, '\p{ _IS_spacing_MODIFIERLETTERS}', "");
Expect(0, 767, '\p{^ _IS_spacing_MODIFIERLETTERS}', "");
Expect(0, 767, '\P{ _IS_spacing_MODIFIERLETTERS}', "");
Expect(1, 767, '\P{^ _IS_spacing_MODIFIERLETTERS}', "");
Expect(0, 687, '\p{ _IS_spacing_MODIFIERLETTERS}', "");
Expect(1, 687, '\p{^ _IS_spacing_MODIFIERLETTERS}', "");
Expect(1, 687, '\P{ _IS_spacing_MODIFIERLETTERS}', "");
Expect(0, 687, '\P{^ _IS_spacing_MODIFIERLETTERS}', "");
Error('\p{ In/a/Spacing-modifierLetters}');
Error('\P{ In/a/Spacing-modifierLetters}');
Expect(1, 767, '\p{inspacingmodifierletters}', "");
Expect(0, 767, '\p{^inspacingmodifierletters}', "");
Expect(0, 767, '\P{inspacingmodifierletters}', "");
Expect(1, 767, '\P{^inspacingmodifierletters}', "");
Expect(0, 687, '\p{inspacingmodifierletters}', "");
Expect(1, 687, '\p{^inspacingmodifierletters}', "");
Expect(1, 687, '\P{inspacingmodifierletters}', "");
Expect(0, 687, '\P{^inspacingmodifierletters}', "");
Expect(1, 767, '\p{-	In Spacing_modifier-Letters}', "");
Expect(0, 767, '\p{^-	In Spacing_modifier-Letters}', "");
Expect(0, 767, '\P{-	In Spacing_modifier-Letters}', "");
Expect(1, 767, '\P{^-	In Spacing_modifier-Letters}', "");
Expect(0, 687, '\p{-	In Spacing_modifier-Letters}', "");
Expect(1, 687, '\p{^-	In Spacing_modifier-Letters}', "");
Expect(1, 687, '\P{-	In Spacing_modifier-Letters}', "");
Expect(0, 687, '\P{^-	In Spacing_modifier-Letters}', "");
Error('\p{Grapheme_Link}');
Error('\P{Grapheme_Link}');
Error('\p{Is_Grapheme_Link}');
Error('\P{Is_Grapheme_Link}');
Error('\p{Gr_Link}');
Error('\P{Gr_Link}');
Error('\p{Is_Gr_Link}');
Error('\P{Is_Gr_Link}');
Error('\p{	Other/a/Lowercase}');
Error('\P{	Other/a/Lowercase}');
Expect(1, 696, '\p{otherlowercase}', 'deprecated');
Expect(0, 696, '\p{^otherlowercase}', 'deprecated');
Expect(0, 696, '\P{otherlowercase}', 'deprecated');
Expect(1, 696, '\P{^otherlowercase}', 'deprecated');
Expect(0, 687, '\p{otherlowercase}', 'deprecated');
Expect(1, 687, '\p{^otherlowercase}', 'deprecated');
Expect(1, 687, '\P{otherlowercase}', 'deprecated');
Expect(0, 687, '\P{^otherlowercase}', 'deprecated');
Expect(1, 696, '\p{_Other	Lowercase}', 'deprecated');
Expect(0, 696, '\p{^_Other	Lowercase}', 'deprecated');
Expect(0, 696, '\P{_Other	Lowercase}', 'deprecated');
Expect(1, 696, '\P{^_Other	Lowercase}', 'deprecated');
Expect(0, 687, '\p{_Other	Lowercase}', 'deprecated');
Expect(1, 687, '\p{^_Other	Lowercase}', 'deprecated');
Expect(1, 687, '\P{_Other	Lowercase}', 'deprecated');
Expect(0, 687, '\P{^_Other	Lowercase}', 'deprecated');
Error('\p{-	is	OTHER	LOWERCASE/a/}');
Error('\P{-	is	OTHER	LOWERCASE/a/}');
Expect(1, 696, '\p{isotherlowercase}', 'deprecated');
Expect(0, 696, '\p{^isotherlowercase}', 'deprecated');
Expect(0, 696, '\P{isotherlowercase}', 'deprecated');
Expect(1, 696, '\P{^isotherlowercase}', 'deprecated');
Expect(0, 687, '\p{isotherlowercase}', 'deprecated');
Expect(1, 687, '\p{^isotherlowercase}', 'deprecated');
Expect(1, 687, '\P{isotherlowercase}', 'deprecated');
Expect(0, 687, '\P{^isotherlowercase}', 'deprecated');
Expect(1, 696, '\p{-	is	Other_lowercase}', 'deprecated');
Expect(0, 696, '\p{^-	is	Other_lowercase}', 'deprecated');
Expect(0, 696, '\P{-	is	Other_lowercase}', 'deprecated');
Expect(1, 696, '\P{^-	is	Other_lowercase}', 'deprecated');
Expect(0, 687, '\p{-	is	Other_lowercase}', 'deprecated');
Expect(1, 687, '\p{^-	is	Other_lowercase}', 'deprecated');
Expect(1, 687, '\P{-	is	Other_lowercase}', 'deprecated');
Expect(0, 687, '\P{^-	is	Other_lowercase}', 'deprecated');
Error('\p{	 OLOWER:=}');
Error('\P{	 OLOWER:=}');
Expect(1, 696, '\p{olower}', 'deprecated');
Expect(0, 696, '\p{^olower}', 'deprecated');
Expect(0, 696, '\P{olower}', 'deprecated');
Expect(1, 696, '\P{^olower}', 'deprecated');
Expect(0, 687, '\p{olower}', 'deprecated');
Expect(1, 687, '\p{^olower}', 'deprecated');
Expect(1, 687, '\P{olower}', 'deprecated');
Expect(0, 687, '\P{^olower}', 'deprecated');
Expect(1, 696, '\p{--OLower}', 'deprecated');
Expect(0, 696, '\p{^--OLower}', 'deprecated');
Expect(0, 696, '\P{--OLower}', 'deprecated');
Expect(1, 696, '\P{^--OLower}', 'deprecated');
Expect(0, 687, '\p{--OLower}', 'deprecated');
Expect(1, 687, '\p{^--OLower}', 'deprecated');
Expect(1, 687, '\P{--OLower}', 'deprecated');
Expect(0, 687, '\P{^--OLower}', 'deprecated');
Error('\p{ /a/Is_OLOWER}');
Error('\P{ /a/Is_OLOWER}');
Expect(1, 696, '\p{isolower}', 'deprecated');
Expect(0, 696, '\p{^isolower}', 'deprecated');
Expect(0, 696, '\P{isolower}', 'deprecated');
Expect(1, 696, '\P{^isolower}', 'deprecated');
Expect(0, 687, '\p{isolower}', 'deprecated');
Expect(1, 687, '\p{^isolower}', 'deprecated');
Expect(1, 687, '\P{isolower}', 'deprecated');
Expect(0, 687, '\P{^isolower}', 'deprecated');
Expect(1, 696, '\p{	is-olower}', 'deprecated');
Expect(0, 696, '\p{^	is-olower}', 'deprecated');
Expect(0, 696, '\P{	is-olower}', 'deprecated');
Expect(1, 696, '\P{^	is-olower}', 'deprecated');
Expect(0, 687, '\p{	is-olower}', 'deprecated');
Expect(1, 687, '\p{^	is-olower}', 'deprecated');
Expect(1, 687, '\P{	is-olower}', 'deprecated');
Expect(0, 687, '\P{^	is-olower}', 'deprecated');
Error('\p{ /a/ARABIC}');
Error('\P{ /a/ARABIC}');
Expect(1, 1539, '\p{arabic}', "");
Expect(0, 1539, '\p{^arabic}', "");
Expect(0, 1539, '\P{arabic}', "");
Expect(1, 1539, '\P{^arabic}', "");
Expect(0, 1535, '\p{arabic}', "");
Expect(1, 1535, '\p{^arabic}', "");
Expect(1, 1535, '\P{arabic}', "");
Expect(0, 1535, '\P{^arabic}', "");
Expect(1, 1539, '\p{-arabic}', "");
Expect(0, 1539, '\p{^-arabic}', "");
Expect(0, 1539, '\P{-arabic}', "");
Expect(1, 1539, '\P{^-arabic}', "");
Expect(0, 1535, '\p{-arabic}', "");
Expect(1, 1535, '\p{^-arabic}', "");
Expect(1, 1535, '\P{-arabic}', "");
Expect(0, 1535, '\P{^-arabic}', "");
Error('\p{/a/_Is Arabic}');
Error('\P{/a/_Is Arabic}');
Expect(1, 1539, '\p{isarabic}', "");
Expect(0, 1539, '\p{^isarabic}', "");
Expect(0, 1539, '\P{isarabic}', "");
Expect(1, 1539, '\P{^isarabic}', "");
Expect(0, 1535, '\p{isarabic}', "");
Expect(1, 1535, '\p{^isarabic}', "");
Expect(1, 1535, '\P{isarabic}', "");
Expect(0, 1535, '\P{^isarabic}', "");
Expect(1, 1539, '\p{_-Is-Arabic}', "");
Expect(0, 1539, '\p{^_-Is-Arabic}', "");
Expect(0, 1539, '\P{_-Is-Arabic}', "");
Expect(1, 1539, '\P{^_-Is-Arabic}', "");
Expect(0, 1535, '\p{_-Is-Arabic}', "");
Expect(1, 1535, '\p{^_-Is-Arabic}', "");
Expect(1, 1535, '\P{_-Is-Arabic}', "");
Expect(0, 1535, '\P{^_-Is-Arabic}', "");
Error('\p{ -Arab:=}');
Error('\P{ -Arab:=}');
Expect(1, 1539, '\p{arab}', "");
Expect(0, 1539, '\p{^arab}', "");
Expect(0, 1539, '\P{arab}', "");
Expect(1, 1539, '\P{^arab}', "");
Expect(0, 1535, '\p{arab}', "");
Expect(1, 1535, '\p{^arab}', "");
Expect(1, 1535, '\P{arab}', "");
Expect(0, 1535, '\P{^arab}', "");
Expect(1, 1539, '\p{__Arab}', "");
Expect(0, 1539, '\p{^__Arab}', "");
Expect(0, 1539, '\P{__Arab}', "");
Expect(1, 1539, '\P{^__Arab}', "");
Expect(0, 1535, '\p{__Arab}', "");
Expect(1, 1535, '\p{^__Arab}', "");
Expect(1, 1535, '\P{__Arab}', "");
Expect(0, 1535, '\P{^__Arab}', "");
Error('\p{_is Arab:=}');
Error('\P{_is Arab:=}');
Expect(1, 1539, '\p{isarab}', "");
Expect(0, 1539, '\p{^isarab}', "");
Expect(0, 1539, '\P{isarab}', "");
Expect(1, 1539, '\P{^isarab}', "");
Expect(0, 1535, '\p{isarab}', "");
Expect(1, 1535, '\p{^isarab}', "");
Expect(1, 1535, '\P{isarab}', "");
Expect(0, 1535, '\P{^isarab}', "");
Expect(1, 1539, '\p{-Is_arab}', "");
Expect(0, 1539, '\p{^-Is_arab}', "");
Expect(0, 1539, '\P{-Is_arab}', "");
Expect(1, 1539, '\P{^-Is_arab}', "");
Expect(0, 1535, '\p{-Is_arab}', "");
Expect(1, 1535, '\p{^-Is_arab}', "");
Expect(1, 1535, '\P{-Is_arab}', "");
Expect(0, 1535, '\P{^-Is_arab}', "");
Error('\p{/a/DESERET}');
Error('\P{/a/DESERET}');
Expect(1, 66639, '\p{deseret}', "");
Expect(0, 66639, '\p{^deseret}', "");
Expect(0, 66639, '\P{deseret}', "");
Expect(1, 66639, '\P{^deseret}', "");
Expect(0, 66559, '\p{deseret}', "");
Expect(1, 66559, '\p{^deseret}', "");
Expect(1, 66559, '\P{deseret}', "");
Expect(0, 66559, '\P{^deseret}', "");
Expect(1, 66639, '\p{	 Deseret}', "");
Expect(0, 66639, '\p{^	 Deseret}', "");
Expect(0, 66639, '\P{	 Deseret}', "");
Expect(1, 66639, '\P{^	 Deseret}', "");
Expect(0, 66559, '\p{	 Deseret}', "");
Expect(1, 66559, '\p{^	 Deseret}', "");
Expect(1, 66559, '\P{	 Deseret}', "");
Expect(0, 66559, '\P{^	 Deseret}', "");
Error('\p{_ Is/a/Deseret}');
Error('\P{_ Is/a/Deseret}');
Expect(1, 66639, '\p{isdeseret}', "");
Expect(0, 66639, '\p{^isdeseret}', "");
Expect(0, 66639, '\P{isdeseret}', "");
Expect(1, 66639, '\P{^isdeseret}', "");
Expect(0, 66559, '\p{isdeseret}', "");
Expect(1, 66559, '\p{^isdeseret}', "");
Expect(1, 66559, '\P{isdeseret}', "");
Expect(0, 66559, '\P{^isdeseret}', "");
Expect(1, 66639, '\p{	_Is DESERET}', "");
Expect(0, 66639, '\p{^	_Is DESERET}', "");
Expect(0, 66639, '\P{	_Is DESERET}', "");
Expect(1, 66639, '\P{^	_Is DESERET}', "");
Expect(0, 66559, '\p{	_Is DESERET}', "");
Expect(1, 66559, '\p{^	_Is DESERET}', "");
Expect(1, 66559, '\P{	_Is DESERET}', "");
Expect(0, 66559, '\P{^	_Is DESERET}', "");
Error('\p{/a/- dsrt}');
Error('\P{/a/- dsrt}');
Expect(1, 66639, '\p{dsrt}', "");
Expect(0, 66639, '\p{^dsrt}', "");
Expect(0, 66639, '\P{dsrt}', "");
Expect(1, 66639, '\P{^dsrt}', "");
Expect(0, 66559, '\p{dsrt}', "");
Expect(1, 66559, '\p{^dsrt}', "");
Expect(1, 66559, '\P{dsrt}', "");
Expect(0, 66559, '\P{^dsrt}', "");
Expect(1, 66639, '\p{  dsrt}', "");
Expect(0, 66639, '\p{^  dsrt}', "");
Expect(0, 66639, '\P{  dsrt}', "");
Expect(1, 66639, '\P{^  dsrt}', "");
Expect(0, 66559, '\p{  dsrt}', "");
Expect(1, 66559, '\p{^  dsrt}', "");
Expect(1, 66559, '\P{  dsrt}', "");
Expect(0, 66559, '\P{^  dsrt}', "");
Error('\p{-/a/is	Dsrt}');
Error('\P{-/a/is	Dsrt}');
Expect(1, 66639, '\p{isdsrt}', "");
Expect(0, 66639, '\p{^isdsrt}', "");
Expect(0, 66639, '\P{isdsrt}', "");
Expect(1, 66639, '\P{^isdsrt}', "");
Expect(0, 66559, '\p{isdsrt}', "");
Expect(1, 66559, '\p{^isdsrt}', "");
Expect(1, 66559, '\P{isdsrt}', "");
Expect(0, 66559, '\P{^isdsrt}', "");
Expect(1, 66639, '\p{_IS_Dsrt}', "");
Expect(0, 66639, '\p{^_IS_Dsrt}', "");
Expect(0, 66639, '\P{_IS_Dsrt}', "");
Expect(1, 66639, '\P{^_IS_Dsrt}', "");
Expect(0, 66559, '\p{_IS_Dsrt}', "");
Expect(1, 66559, '\p{^_IS_Dsrt}', "");
Expect(1, 66559, '\P{_IS_Dsrt}', "");
Expect(0, 66559, '\P{^_IS_Dsrt}', "");
Error('\p{-Cased/a/letter}');
Error('\P{-Cased/a/letter}');
Expect(1, 90, '\p{casedletter}', "");
Expect(0, 90, '\p{^casedletter}', "");
Expect(0, 90, '\P{casedletter}', "");
Expect(1, 90, '\P{^casedletter}', "");
Expect(0, 64, '\p{casedletter}', "");
Expect(1, 64, '\p{^casedletter}', "");
Expect(1, 64, '\P{casedletter}', "");
Expect(0, 64, '\P{^casedletter}', "");
Expect(1, 90, '\p{ 	Cased-Letter}', "");
Expect(0, 90, '\p{^ 	Cased-Letter}', "");
Expect(0, 90, '\P{ 	Cased-Letter}', "");
Expect(1, 90, '\P{^ 	Cased-Letter}', "");
Expect(0, 64, '\p{ 	Cased-Letter}', "");
Expect(1, 64, '\p{^ 	Cased-Letter}', "");
Expect(1, 64, '\P{ 	Cased-Letter}', "");
Expect(0, 64, '\P{^ 	Cased-Letter}', "");
Error('\p{ -Is Cased_Letter:=}');
Error('\P{ -Is Cased_Letter:=}');
Expect(1, 90, '\p{iscasedletter}', "");
Expect(0, 90, '\p{^iscasedletter}', "");
Expect(0, 90, '\P{iscasedletter}', "");
Expect(1, 90, '\P{^iscasedletter}', "");
Expect(0, 64, '\p{iscasedletter}', "");
Expect(1, 64, '\p{^iscasedletter}', "");
Expect(1, 64, '\P{iscasedletter}', "");
Expect(0, 64, '\P{^iscasedletter}', "");
Expect(1, 90, '\p{ _IS_Cased-letter}', "");
Expect(0, 90, '\p{^ _IS_Cased-letter}', "");
Expect(0, 90, '\P{ _IS_Cased-letter}', "");
Expect(1, 90, '\P{^ _IS_Cased-letter}', "");
Expect(0, 64, '\p{ _IS_Cased-letter}', "");
Expect(1, 64, '\p{^ _IS_Cased-letter}', "");
Expect(1, 64, '\P{ _IS_Cased-letter}', "");
Expect(0, 64, '\P{^ _IS_Cased-letter}', "");
Error('\p{/a/LC}');
Error('\P{/a/LC}');
Expect(1, 90, '\p{lc}', "");
Expect(0, 90, '\p{^lc}', "");
Expect(0, 90, '\P{lc}', "");
Expect(1, 90, '\P{^lc}', "");
Expect(0, 64, '\p{lc}', "");
Expect(1, 64, '\p{^lc}', "");
Expect(1, 64, '\P{lc}', "");
Expect(0, 64, '\P{^lc}', "");
Expect(1, 90, '\p{_LC}', "");
Expect(0, 90, '\p{^_LC}', "");
Expect(0, 90, '\P{_LC}', "");
Expect(1, 90, '\P{^_LC}', "");
Expect(0, 64, '\p{_LC}', "");
Expect(1, 64, '\p{^_LC}', "");
Expect(1, 64, '\P{_LC}', "");
Expect(0, 64, '\P{^_LC}', "");
Error('\p{_ is:=LC}');
Error('\P{_ is:=LC}');
Expect(1, 90, '\p{islc}', "");
Expect(0, 90, '\p{^islc}', "");
Expect(0, 90, '\P{islc}', "");
Expect(1, 90, '\P{^islc}', "");
Expect(0, 64, '\p{islc}', "");
Expect(1, 64, '\p{^islc}', "");
Expect(1, 64, '\P{islc}', "");
Expect(0, 64, '\P{^islc}', "");
Expect(1, 90, '\p{_Is_LC}', "");
Expect(0, 90, '\p{^_Is_LC}', "");
Expect(0, 90, '\P{_Is_LC}', "");
Expect(1, 90, '\P{^_Is_LC}', "");
Expect(0, 64, '\p{_Is_LC}', "");
Expect(1, 64, '\p{^_Is_LC}', "");
Expect(1, 64, '\P{_Is_LC}', "");
Expect(0, 64, '\P{^_Is_LC}', "");
Error('\p{/a/ -L}');
Error('\P{/a/ -L}');
Expect(1, 90, '\p{l_}', "");
Expect(0, 90, '\p{^l_}', "");
Expect(0, 90, '\P{l_}', "");
Expect(1, 90, '\P{^l_}', "");
Expect(0, 64, '\p{l_}', "");
Expect(1, 64, '\p{^l_}', "");
Expect(1, 64, '\P{l_}', "");
Expect(0, 64, '\P{^l_}', "");
Expect(1, 90, '\p{  L}', "");
Expect(0, 90, '\p{^  L}', "");
Expect(0, 90, '\P{  L}', "");
Expect(1, 90, '\P{^  L}', "");
Expect(0, 64, '\p{  L}', "");
Expect(1, 64, '\p{^  L}', "");
Expect(1, 64, '\P{  L}', "");
Expect(0, 64, '\P{^  L}', "");
Error('\p{_Is-L/a/}');
Error('\P{_Is-L/a/}');
Expect(1, 90, '\p{isl_}', "");
Expect(0, 90, '\p{^isl_}', "");
Expect(0, 90, '\P{isl_}', "");
Expect(1, 90, '\P{^isl_}', "");
Expect(0, 64, '\p{isl_}', "");
Expect(1, 64, '\p{^isl_}', "");
Expect(1, 64, '\P{isl_}', "");
Expect(0, 64, '\P{^isl_}', "");
Expect(1, 90, '\p{		IS_l}', "");
Expect(0, 90, '\p{^		IS_l}', "");
Expect(0, 90, '\P{		IS_l}', "");
Expect(1, 90, '\P{^		IS_l}', "");
Expect(0, 64, '\p{		IS_l}', "");
Expect(1, 64, '\p{^		IS_l}', "");
Expect(1, 64, '\P{		IS_l}', "");
Expect(0, 64, '\P{^		IS_l}', "");
Error('\p{	 L&/a/}');
Error('\P{	 L&/a/}');
Expect(1, 90, '\p{l&}', "");
Expect(0, 90, '\p{^l&}', "");
Expect(0, 90, '\P{l&}', "");
Expect(1, 90, '\P{^l&}', "");
Expect(0, 64, '\p{l&}', "");
Expect(1, 64, '\p{^l&}', "");
Expect(1, 64, '\P{l&}', "");
Expect(0, 64, '\P{^l&}', "");
Expect(1, 90, '\p{_	L&}', "");
Expect(0, 90, '\p{^_	L&}', "");
Expect(0, 90, '\P{_	L&}', "");
Expect(1, 90, '\P{^_	L&}', "");
Expect(0, 64, '\p{_	L&}', "");
Expect(1, 64, '\p{^_	L&}', "");
Expect(1, 64, '\P{_	L&}', "");
Expect(0, 64, '\P{^_	L&}', "");
Error('\p{ _Is:=L&}');
Error('\P{ _Is:=L&}');
Expect(1, 90, '\p{isl&}', "");
Expect(0, 90, '\p{^isl&}', "");
Expect(0, 90, '\P{isl&}', "");
Expect(1, 90, '\P{^isl&}', "");
Expect(0, 64, '\p{isl&}', "");
Expect(1, 64, '\p{^isl&}', "");
Expect(1, 64, '\P{isl&}', "");
Expect(0, 64, '\P{^isl&}', "");
Expect(1, 90, '\p{ -Is_L&}', "");
Expect(0, 90, '\p{^ -Is_L&}', "");
Expect(0, 90, '\P{ -Is_L&}', "");
Expect(1, 90, '\P{^ -Is_L&}', "");
Expect(0, 64, '\p{ -Is_L&}', "");
Expect(1, 64, '\p{^ -Is_L&}', "");
Expect(1, 64, '\P{ -Is_L&}', "");
Expect(0, 64, '\P{^ -Is_L&}', "");
Error('\p{/a/ _Symbol}');
Error('\P{/a/ _Symbol}');
Expect(1, 36, '\p{symbol}', "");
Expect(0, 36, '\p{^symbol}', "");
Expect(0, 36, '\P{symbol}', "");
Expect(1, 36, '\P{^symbol}', "");
Expect(0, 35, '\p{symbol}', "");
Expect(1, 35, '\p{^symbol}', "");
Expect(1, 35, '\P{symbol}', "");
Expect(0, 35, '\P{^symbol}', "");
Expect(1, 36, '\p{-	SYMBOL}', "");
Expect(0, 36, '\p{^-	SYMBOL}', "");
Expect(0, 36, '\P{-	SYMBOL}', "");
Expect(1, 36, '\P{^-	SYMBOL}', "");
Expect(0, 35, '\p{-	SYMBOL}', "");
Expect(1, 35, '\p{^-	SYMBOL}', "");
Expect(1, 35, '\P{-	SYMBOL}', "");
Expect(0, 35, '\P{^-	SYMBOL}', "");
Error('\p{/a/-Is symbol}');
Error('\P{/a/-Is symbol}');
Expect(1, 36, '\p{issymbol}', "");
Expect(0, 36, '\p{^issymbol}', "");
Expect(0, 36, '\P{issymbol}', "");
Expect(1, 36, '\P{^issymbol}', "");
Expect(0, 35, '\p{issymbol}', "");
Expect(1, 35, '\p{^issymbol}', "");
Expect(1, 35, '\P{issymbol}', "");
Expect(0, 35, '\P{^issymbol}', "");
Expect(1, 36, '\p{	IsSYMBOL}', "");
Expect(0, 36, '\p{^	IsSYMBOL}', "");
Expect(0, 36, '\P{	IsSYMBOL}', "");
Expect(1, 36, '\P{^	IsSYMBOL}', "");
Expect(0, 35, '\p{	IsSYMBOL}', "");
Expect(1, 35, '\p{^	IsSYMBOL}', "");
Expect(1, 35, '\P{	IsSYMBOL}', "");
Expect(0, 35, '\P{^	IsSYMBOL}', "");
Error('\p{:=_s}');
Error('\P{:=_s}');
Expect(1, 36, '\p{s}', "");
Expect(0, 36, '\p{^s}', "");
Expect(0, 36, '\P{s}', "");
Expect(1, 36, '\P{^s}', "");
Expect(0, 35, '\p{s}', "");
Expect(1, 35, '\p{^s}', "");
Expect(1, 35, '\P{s}', "");
Expect(0, 35, '\P{^s}', "");
Expect(1, 36, '\p{	-S}', "");
Expect(0, 36, '\p{^	-S}', "");
Expect(0, 36, '\P{	-S}', "");
Expect(1, 36, '\P{^	-S}', "");
Expect(0, 35, '\p{	-S}', "");
Expect(1, 35, '\p{^	-S}', "");
Expect(1, 35, '\P{	-S}', "");
Expect(0, 35, '\P{^	-S}', "");
Error('\p{:=_ IsS}');
Error('\P{:=_ IsS}');
Expect(1, 36, '\p{iss}', "");
Expect(0, 36, '\p{^iss}', "");
Expect(0, 36, '\P{iss}', "");
Expect(1, 36, '\P{^iss}', "");
Expect(0, 35, '\p{iss}', "");
Expect(1, 35, '\p{^iss}', "");
Expect(1, 35, '\P{iss}', "");
Expect(0, 35, '\P{^iss}', "");
Expect(1, 36, '\p{ IS_s}', "");
Expect(0, 36, '\p{^ IS_s}', "");
Expect(0, 36, '\P{ IS_s}', "");
Expect(1, 36, '\P{^ IS_s}', "");
Expect(0, 35, '\p{ IS_s}', "");
Expect(1, 35, '\p{^ IS_s}', "");
Expect(1, 35, '\P{ IS_s}', "");
Expect(0, 35, '\P{^ IS_s}', "");
Error('\p{ /a/YIJINGHexagram_Symbols}');
Error('\P{ /a/YIJINGHexagram_Symbols}');
Expect(1, 19967, '\p{yijinghexagramsymbols}', "");
Expect(0, 19967, '\p{^yijinghexagramsymbols}', "");
Expect(0, 19967, '\P{yijinghexagramsymbols}', "");
Expect(1, 19967, '\P{^yijinghexagramsymbols}', "");
Expect(0, 19903, '\p{yijinghexagramsymbols}', "");
Expect(1, 19903, '\p{^yijinghexagramsymbols}', "");
Expect(1, 19903, '\P{yijinghexagramsymbols}', "");
Expect(0, 19903, '\P{^yijinghexagramsymbols}', "");
Expect(1, 19967, '\p{--yijing_Hexagram	Symbols}', "");
Expect(0, 19967, '\p{^--yijing_Hexagram	Symbols}', "");
Expect(0, 19967, '\P{--yijing_Hexagram	Symbols}', "");
Expect(1, 19967, '\P{^--yijing_Hexagram	Symbols}', "");
Expect(0, 19903, '\p{--yijing_Hexagram	Symbols}', "");
Expect(1, 19903, '\p{^--yijing_Hexagram	Symbols}', "");
Expect(1, 19903, '\P{--yijing_Hexagram	Symbols}', "");
Expect(0, 19903, '\P{^--yijing_Hexagram	Symbols}', "");
Error('\p{-is_Yijing/a/Hexagram symbols}');
Error('\P{-is_Yijing/a/Hexagram symbols}');
Expect(1, 19967, '\p{isyijinghexagramsymbols}', "");
Expect(0, 19967, '\p{^isyijinghexagramsymbols}', "");
Expect(0, 19967, '\P{isyijinghexagramsymbols}', "");
Expect(1, 19967, '\P{^isyijinghexagramsymbols}', "");
Expect(0, 19903, '\p{isyijinghexagramsymbols}', "");
Expect(1, 19903, '\p{^isyijinghexagramsymbols}', "");
Expect(1, 19903, '\P{isyijinghexagramsymbols}', "");
Expect(0, 19903, '\P{^isyijinghexagramsymbols}', "");
Expect(1, 19967, '\p{	_ISYijing-hexagram-SYMBOLS}', "");
Expect(0, 19967, '\p{^	_ISYijing-hexagram-SYMBOLS}', "");
Expect(0, 19967, '\P{	_ISYijing-hexagram-SYMBOLS}', "");
Expect(1, 19967, '\P{^	_ISYijing-hexagram-SYMBOLS}', "");
Expect(0, 19903, '\p{	_ISYijing-hexagram-SYMBOLS}', "");
Expect(1, 19903, '\p{^	_ISYijing-hexagram-SYMBOLS}', "");
Expect(1, 19903, '\P{	_ISYijing-hexagram-SYMBOLS}', "");
Expect(0, 19903, '\P{^	_ISYijing-hexagram-SYMBOLS}', "");
Error('\p{ :=In	yijing-Hexagram-symbols}');
Error('\P{ :=In	yijing-Hexagram-symbols}');
Expect(1, 19967, '\p{inyijinghexagramsymbols}', "");
Expect(0, 19967, '\p{^inyijinghexagramsymbols}', "");
Expect(0, 19967, '\P{inyijinghexagramsymbols}', "");
Expect(1, 19967, '\P{^inyijinghexagramsymbols}', "");
Expect(0, 19903, '\p{inyijinghexagramsymbols}', "");
Expect(1, 19903, '\p{^inyijinghexagramsymbols}', "");
Expect(1, 19903, '\P{inyijinghexagramsymbols}', "");
Expect(0, 19903, '\P{^inyijinghexagramsymbols}', "");
Expect(1, 19967, '\p{INYIJING-Hexagram Symbols}', "");
Expect(0, 19967, '\p{^INYIJING-Hexagram Symbols}', "");
Expect(0, 19967, '\P{INYIJING-Hexagram Symbols}', "");
Expect(1, 19967, '\P{^INYIJING-Hexagram Symbols}', "");
Expect(0, 19903, '\p{INYIJING-Hexagram Symbols}', "");
Expect(1, 19903, '\p{^INYIJING-Hexagram Symbols}', "");
Expect(1, 19903, '\P{INYIJING-Hexagram Symbols}', "");
Expect(0, 19903, '\P{^INYIJING-Hexagram Symbols}', "");
Error('\p{/a/__PosixSpace}');
Error('\P{/a/__PosixSpace}');
Expect(1, 13, '\p{posixspace}', "");
Expect(0, 13, '\p{^posixspace}', "");
Expect(0, 13, '\P{posixspace}', "");
Expect(1, 13, '\P{^posixspace}', "");
Expect(0, 8, '\p{posixspace}', "");
Expect(1, 8, '\p{^posixspace}', "");
Expect(1, 8, '\P{posixspace}', "");
Expect(0, 8, '\P{^posixspace}', "");
Expect(1, 13, '\p{__posixspace}', "");
Expect(0, 13, '\p{^__posixspace}', "");
Expect(0, 13, '\P{__posixspace}', "");
Expect(1, 13, '\P{^__posixspace}', "");
Expect(0, 8, '\p{__posixspace}', "");
Expect(1, 8, '\p{^__posixspace}', "");
Expect(1, 8, '\P{__posixspace}', "");
Expect(0, 8, '\P{^__posixspace}', "");
Error('\p{__IS-POSIXSPACE/a/}');
Error('\P{__IS-POSIXSPACE/a/}');
Expect(1, 13, '\p{isposixspace}', "");
Expect(0, 13, '\p{^isposixspace}', "");
Expect(0, 13, '\P{isposixspace}', "");
Expect(1, 13, '\P{^isposixspace}', "");
Expect(0, 8, '\p{isposixspace}', "");
Expect(1, 8, '\p{^isposixspace}', "");
Expect(1, 8, '\P{isposixspace}', "");
Expect(0, 8, '\P{^isposixspace}', "");
Expect(1, 13, '\p{_ISPOSIXSPACE}', "");
Expect(0, 13, '\p{^_ISPOSIXSPACE}', "");
Expect(0, 13, '\P{_ISPOSIXSPACE}', "");
Expect(1, 13, '\P{^_ISPOSIXSPACE}', "");
Expect(0, 8, '\p{_ISPOSIXSPACE}', "");
Expect(1, 8, '\p{^_ISPOSIXSPACE}', "");
Expect(1, 8, '\P{_ISPOSIXSPACE}', "");
Expect(0, 8, '\P{^_ISPOSIXSPACE}', "");
Error('\p{:=-	kana-Supplement}');
Error('\P{:=-	kana-Supplement}');
Expect(1, 110847, '\p{kanasupplement}', "");
Expect(0, 110847, '\p{^kanasupplement}', "");
Expect(0, 110847, '\P{kanasupplement}', "");
Expect(1, 110847, '\P{^kanasupplement}', "");
Expect(0, 110591, '\p{kanasupplement}', "");
Expect(1, 110591, '\p{^kanasupplement}', "");
Expect(1, 110591, '\P{kanasupplement}', "");
Expect(0, 110591, '\P{^kanasupplement}', "");
Expect(1, 110847, '\p{-_Kana	SUPPLEMENT}', "");
Expect(0, 110847, '\p{^-_Kana	SUPPLEMENT}', "");
Expect(0, 110847, '\P{-_Kana	SUPPLEMENT}', "");
Expect(1, 110847, '\P{^-_Kana	SUPPLEMENT}', "");
Expect(0, 110591, '\p{-_Kana	SUPPLEMENT}', "");
Expect(1, 110591, '\p{^-_Kana	SUPPLEMENT}', "");
Expect(1, 110591, '\P{-_Kana	SUPPLEMENT}', "");
Expect(0, 110591, '\P{^-_Kana	SUPPLEMENT}', "");
Error('\p{	/a/IS-kana_Supplement}');
Error('\P{	/a/IS-kana_Supplement}');
Expect(1, 110847, '\p{iskanasupplement}', "");
Expect(0, 110847, '\p{^iskanasupplement}', "");
Expect(0, 110847, '\P{iskanasupplement}', "");
Expect(1, 110847, '\P{^iskanasupplement}', "");
Expect(0, 110591, '\p{iskanasupplement}', "");
Expect(1, 110591, '\p{^iskanasupplement}', "");
Expect(1, 110591, '\P{iskanasupplement}', "");
Expect(0, 110591, '\P{^iskanasupplement}', "");
Expect(1, 110847, '\p{		is_kana	SUPPLEMENT}', "");
Expect(0, 110847, '\p{^		is_kana	SUPPLEMENT}', "");
Expect(0, 110847, '\P{		is_kana	SUPPLEMENT}', "");
Expect(1, 110847, '\P{^		is_kana	SUPPLEMENT}', "");
Expect(0, 110591, '\p{		is_kana	SUPPLEMENT}', "");
Expect(1, 110591, '\p{^		is_kana	SUPPLEMENT}', "");
Expect(1, 110591, '\P{		is_kana	SUPPLEMENT}', "");
Expect(0, 110591, '\P{^		is_kana	SUPPLEMENT}', "");
Error('\p{ _In-Kana/a/Supplement}');
Error('\P{ _In-Kana/a/Supplement}');
Expect(1, 110847, '\p{inkanasupplement}', "");
Expect(0, 110847, '\p{^inkanasupplement}', "");
Expect(0, 110847, '\P{inkanasupplement}', "");
Expect(1, 110847, '\P{^inkanasupplement}', "");
Expect(0, 110591, '\p{inkanasupplement}', "");
Expect(1, 110591, '\p{^inkanasupplement}', "");
Expect(1, 110591, '\P{inkanasupplement}', "");
Expect(0, 110591, '\P{^inkanasupplement}', "");
Expect(1, 110847, '\p{	inkana-supplement}', "");
Expect(0, 110847, '\p{^	inkana-supplement}', "");
Expect(0, 110847, '\P{	inkana-supplement}', "");
Expect(1, 110847, '\P{^	inkana-supplement}', "");
Expect(0, 110591, '\p{	inkana-supplement}', "");
Expect(1, 110591, '\p{^	inkana-supplement}', "");
Expect(1, 110591, '\P{	inkana-supplement}', "");
Expect(0, 110591, '\P{^	inkana-supplement}', "");
Error('\p{	CurrencySymbols:=}');
Error('\P{	CurrencySymbols:=}');
Expect(1, 8399, '\p{currencysymbols}', "");
Expect(0, 8399, '\p{^currencysymbols}', "");
Expect(0, 8399, '\P{currencysymbols}', "");
Expect(1, 8399, '\P{^currencysymbols}', "");
Expect(0, 8351, '\p{currencysymbols}', "");
Expect(1, 8351, '\p{^currencysymbols}', "");
Expect(1, 8351, '\P{currencysymbols}', "");
Expect(0, 8351, '\P{^currencysymbols}', "");
Expect(1, 8399, '\p{--Currency-symbols}', "");
Expect(0, 8399, '\p{^--Currency-symbols}', "");
Expect(0, 8399, '\P{--Currency-symbols}', "");
Expect(1, 8399, '\P{^--Currency-symbols}', "");
Expect(0, 8351, '\p{--Currency-symbols}', "");
Expect(1, 8351, '\p{^--Currency-symbols}', "");
Expect(1, 8351, '\P{--Currency-symbols}', "");
Expect(0, 8351, '\P{^--Currency-symbols}', "");
Error('\p{:= 	is currency-Symbols}');
Error('\P{:= 	is currency-Symbols}');
Expect(1, 8399, '\p{iscurrencysymbols}', "");
Expect(0, 8399, '\p{^iscurrencysymbols}', "");
Expect(0, 8399, '\P{iscurrencysymbols}', "");
Expect(1, 8399, '\P{^iscurrencysymbols}', "");
Expect(0, 8351, '\p{iscurrencysymbols}', "");
Expect(1, 8351, '\p{^iscurrencysymbols}', "");
Expect(1, 8351, '\P{iscurrencysymbols}', "");
Expect(0, 8351, '\P{^iscurrencysymbols}', "");
Expect(1, 8399, '\p{	Is	CURRENCY_symbols}', "");
Expect(0, 8399, '\p{^	Is	CURRENCY_symbols}', "");
Expect(0, 8399, '\P{	Is	CURRENCY_symbols}', "");
Expect(1, 8399, '\P{^	Is	CURRENCY_symbols}', "");
Expect(0, 8351, '\p{	Is	CURRENCY_symbols}', "");
Expect(1, 8351, '\p{^	Is	CURRENCY_symbols}', "");
Expect(1, 8351, '\P{	Is	CURRENCY_symbols}', "");
Expect(0, 8351, '\P{^	Is	CURRENCY_symbols}', "");
Error('\p{-	In/a/Currency Symbols}');
Error('\P{-	In/a/Currency Symbols}');
Expect(1, 8399, '\p{incurrencysymbols}', "");
Expect(0, 8399, '\p{^incurrencysymbols}', "");
Expect(0, 8399, '\P{incurrencysymbols}', "");
Expect(1, 8399, '\P{^incurrencysymbols}', "");
Expect(0, 8351, '\p{incurrencysymbols}', "");
Expect(1, 8351, '\p{^incurrencysymbols}', "");
Expect(1, 8351, '\P{incurrencysymbols}', "");
Expect(0, 8351, '\P{^incurrencysymbols}', "");
Expect(1, 8399, '\p{-INcurrencysymbols}', "");
Expect(0, 8399, '\p{^-INcurrencysymbols}', "");
Expect(0, 8399, '\P{-INcurrencysymbols}', "");
Expect(1, 8399, '\P{^-INcurrencysymbols}', "");
Expect(0, 8351, '\p{-INcurrencysymbols}', "");
Expect(1, 8351, '\p{^-INcurrencysymbols}', "");
Expect(1, 8351, '\P{-INcurrencysymbols}', "");
Expect(0, 8351, '\P{^-INcurrencysymbols}', "");
Error('\p{-/a/Currency	SYMBOL}');
Error('\P{-/a/Currency	SYMBOL}');
Expect(1, 36, '\p{currencysymbol}', "");
Expect(0, 36, '\p{^currencysymbol}', "");
Expect(0, 36, '\P{currencysymbol}', "");
Expect(1, 36, '\P{^currencysymbol}', "");
Expect(0, 35, '\p{currencysymbol}', "");
Expect(1, 35, '\p{^currencysymbol}', "");
Expect(1, 35, '\P{currencysymbol}', "");
Expect(0, 35, '\P{^currencysymbol}', "");
Expect(1, 36, '\p{-	CURRENCYSYMBOL}', "");
Expect(0, 36, '\p{^-	CURRENCYSYMBOL}', "");
Expect(0, 36, '\P{-	CURRENCYSYMBOL}', "");
Expect(1, 36, '\P{^-	CURRENCYSYMBOL}', "");
Expect(0, 35, '\p{-	CURRENCYSYMBOL}', "");
Expect(1, 35, '\p{^-	CURRENCYSYMBOL}', "");
Expect(1, 35, '\P{-	CURRENCYSYMBOL}', "");
Expect(0, 35, '\P{^-	CURRENCYSYMBOL}', "");
Error('\p{/a/		IS-Currency	symbol}');
Error('\P{/a/		IS-Currency	symbol}');
Expect(1, 36, '\p{iscurrencysymbol}', "");
Expect(0, 36, '\p{^iscurrencysymbol}', "");
Expect(0, 36, '\P{iscurrencysymbol}', "");
Expect(1, 36, '\P{^iscurrencysymbol}', "");
Expect(0, 35, '\p{iscurrencysymbol}', "");
Expect(1, 35, '\p{^iscurrencysymbol}', "");
Expect(1, 35, '\P{iscurrencysymbol}', "");
Expect(0, 35, '\P{^iscurrencysymbol}', "");
Expect(1, 36, '\p{__Is_currency	symbol}', "");
Expect(0, 36, '\p{^__Is_currency	symbol}', "");
Expect(0, 36, '\P{__Is_currency	symbol}', "");
Expect(1, 36, '\P{^__Is_currency	symbol}', "");
Expect(0, 35, '\p{__Is_currency	symbol}', "");
Expect(1, 35, '\p{^__Is_currency	symbol}', "");
Expect(1, 35, '\P{__Is_currency	symbol}', "");
Expect(0, 35, '\P{^__Is_currency	symbol}', "");
Error('\p{-Sc/a/}');
Error('\P{-Sc/a/}');
Expect(1, 36, '\p{sc}', "");
Expect(0, 36, '\p{^sc}', "");
Expect(0, 36, '\P{sc}', "");
Expect(1, 36, '\P{^sc}', "");
Expect(0, 35, '\p{sc}', "");
Expect(1, 35, '\p{^sc}', "");
Expect(1, 35, '\P{sc}', "");
Expect(0, 35, '\P{^sc}', "");
Expect(1, 36, '\p{_	SC}', "");
Expect(0, 36, '\p{^_	SC}', "");
Expect(0, 36, '\P{_	SC}', "");
Expect(1, 36, '\P{^_	SC}', "");
Expect(0, 35, '\p{_	SC}', "");
Expect(1, 35, '\p{^_	SC}', "");
Expect(1, 35, '\P{_	SC}', "");
Expect(0, 35, '\P{^_	SC}', "");
Error('\p{ is/a/Sc}');
Error('\P{ is/a/Sc}');
Expect(1, 36, '\p{issc}', "");
Expect(0, 36, '\p{^issc}', "");
Expect(0, 36, '\P{issc}', "");
Expect(1, 36, '\P{^issc}', "");
Expect(0, 35, '\p{issc}', "");
Expect(1, 35, '\p{^issc}', "");
Expect(1, 35, '\P{issc}', "");
Expect(0, 35, '\P{^issc}', "");
Expect(1, 36, '\p{		Is SC}', "");
Expect(0, 36, '\p{^		Is SC}', "");
Expect(0, 36, '\P{		Is SC}', "");
Expect(1, 36, '\P{^		Is SC}', "");
Expect(0, 35, '\p{		Is SC}', "");
Expect(1, 35, '\p{^		Is SC}', "");
Expect(1, 35, '\P{		Is SC}', "");
Expect(0, 35, '\P{^		Is SC}', "");
Error('\p{ 	High_Surrogates:=}');
Error('\P{ 	High_Surrogates:=}');
Expect(1, 56191, '\p{highsurrogates}', "");
Expect(0, 56191, '\p{^highsurrogates}', "");
Expect(0, 56191, '\P{highsurrogates}', "");
Expect(1, 56191, '\P{^highsurrogates}', "");
Expect(0, 55295, '\p{highsurrogates}', "");
Expect(1, 55295, '\p{^highsurrogates}', "");
Expect(1, 55295, '\P{highsurrogates}', "");
Expect(0, 55295, '\P{^highsurrogates}', "");
Expect(1, 56191, '\p{-	HIGHsurrogates}', "");
Expect(0, 56191, '\p{^-	HIGHsurrogates}', "");
Expect(0, 56191, '\P{-	HIGHsurrogates}', "");
Expect(1, 56191, '\P{^-	HIGHsurrogates}', "");
Expect(0, 55295, '\p{-	HIGHsurrogates}', "");
Expect(1, 55295, '\p{^-	HIGHsurrogates}', "");
Expect(1, 55295, '\P{-	HIGHsurrogates}', "");
Expect(0, 55295, '\P{^-	HIGHsurrogates}', "");
Error('\p{__is	high:=surrogates}');
Error('\P{__is	high:=surrogates}');
Expect(1, 56191, '\p{ishighsurrogates}', "");
Expect(0, 56191, '\p{^ishighsurrogates}', "");
Expect(0, 56191, '\P{ishighsurrogates}', "");
Expect(1, 56191, '\P{^ishighsurrogates}', "");
Expect(0, 55295, '\p{ishighsurrogates}', "");
Expect(1, 55295, '\p{^ishighsurrogates}', "");
Expect(1, 55295, '\P{ishighsurrogates}', "");
Expect(0, 55295, '\P{^ishighsurrogates}', "");
Expect(1, 56191, '\p{__IsHIGH Surrogates}', "");
Expect(0, 56191, '\p{^__IsHIGH Surrogates}', "");
Expect(0, 56191, '\P{__IsHIGH Surrogates}', "");
Expect(1, 56191, '\P{^__IsHIGH Surrogates}', "");
Expect(0, 55295, '\p{__IsHIGH Surrogates}', "");
Expect(1, 55295, '\p{^__IsHIGH Surrogates}', "");
Expect(1, 55295, '\P{__IsHIGH Surrogates}', "");
Expect(0, 55295, '\P{^__IsHIGH Surrogates}', "");
Error('\p{	:=IN High	surrogates}');
Error('\P{	:=IN High	surrogates}');
Expect(1, 56191, '\p{inhighsurrogates}', "");
Expect(0, 56191, '\p{^inhighsurrogates}', "");
Expect(0, 56191, '\P{inhighsurrogates}', "");
Expect(1, 56191, '\P{^inhighsurrogates}', "");
Expect(0, 55295, '\p{inhighsurrogates}', "");
Expect(1, 55295, '\p{^inhighsurrogates}', "");
Expect(1, 55295, '\P{inhighsurrogates}', "");
Expect(0, 55295, '\P{^inhighsurrogates}', "");
Expect(1, 56191, '\p{ -In	Highsurrogates}', "");
Expect(0, 56191, '\p{^ -In	Highsurrogates}', "");
Expect(0, 56191, '\P{ -In	Highsurrogates}', "");
Expect(1, 56191, '\P{^ -In	Highsurrogates}', "");
Expect(0, 55295, '\p{ -In	Highsurrogates}', "");
Expect(1, 55295, '\p{^ -In	Highsurrogates}', "");
Expect(1, 55295, '\P{ -In	Highsurrogates}', "");
Expect(0, 55295, '\P{^ -In	Highsurrogates}', "");
Error('\p{	In_deseret:=}');
Error('\P{	In_deseret:=}');
Expect(1, 66639, '\p{indeseret}', "");
Expect(0, 66639, '\p{^indeseret}', "");
Expect(0, 66639, '\P{indeseret}', "");
Expect(1, 66639, '\P{^indeseret}', "");
Expect(0, 66559, '\p{indeseret}', "");
Expect(1, 66559, '\p{^indeseret}', "");
Expect(1, 66559, '\P{indeseret}', "");
Expect(0, 66559, '\P{^indeseret}', "");
Expect(1, 66639, '\p{-In	DESERET}', "");
Expect(0, 66639, '\p{^-In	DESERET}', "");
Expect(0, 66639, '\P{-In	DESERET}', "");
Expect(1, 66639, '\P{^-In	DESERET}', "");
Expect(0, 66559, '\p{-In	DESERET}', "");
Expect(1, 66559, '\p{^-In	DESERET}', "");
Expect(1, 66559, '\P{-In	DESERET}', "");
Expect(0, 66559, '\P{^-In	DESERET}', "");
Error('\p{-other-alphabetic/a/}');
Error('\P{-other-alphabetic/a/}');
Expect(1, 837, '\p{otheralphabetic}', 'deprecated');
Expect(0, 837, '\p{^otheralphabetic}', 'deprecated');
Expect(0, 837, '\P{otheralphabetic}', 'deprecated');
Expect(1, 837, '\P{^otheralphabetic}', 'deprecated');
Expect(0, 836, '\p{otheralphabetic}', 'deprecated');
Expect(1, 836, '\p{^otheralphabetic}', 'deprecated');
Expect(1, 836, '\P{otheralphabetic}', 'deprecated');
Expect(0, 836, '\P{^otheralphabetic}', 'deprecated');
Expect(1, 837, '\p{ -other Alphabetic}', 'deprecated');
Expect(0, 837, '\p{^ -other Alphabetic}', 'deprecated');
Expect(0, 837, '\P{ -other Alphabetic}', 'deprecated');
Expect(1, 837, '\P{^ -other Alphabetic}', 'deprecated');
Expect(0, 836, '\p{ -other Alphabetic}', 'deprecated');
Expect(1, 836, '\p{^ -other Alphabetic}', 'deprecated');
Expect(1, 836, '\P{ -other Alphabetic}', 'deprecated');
Expect(0, 836, '\P{^ -other Alphabetic}', 'deprecated');
Error('\p{Is:=Other-alphabetic}');
Error('\P{Is:=Other-alphabetic}');
Expect(1, 837, '\p{isotheralphabetic}', 'deprecated');
Expect(0, 837, '\p{^isotheralphabetic}', 'deprecated');
Expect(0, 837, '\P{isotheralphabetic}', 'deprecated');
Expect(1, 837, '\P{^isotheralphabetic}', 'deprecated');
Expect(0, 836, '\p{isotheralphabetic}', 'deprecated');
Expect(1, 836, '\p{^isotheralphabetic}', 'deprecated');
Expect(1, 836, '\P{isotheralphabetic}', 'deprecated');
Expect(0, 836, '\P{^isotheralphabetic}', 'deprecated');
Expect(1, 837, '\p{_-is	Other	ALPHABETIC}', 'deprecated');
Expect(0, 837, '\p{^_-is	Other	ALPHABETIC}', 'deprecated');
Expect(0, 837, '\P{_-is	Other	ALPHABETIC}', 'deprecated');
Expect(1, 837, '\P{^_-is	Other	ALPHABETIC}', 'deprecated');
Expect(0, 836, '\p{_-is	Other	ALPHABETIC}', 'deprecated');
Expect(1, 836, '\p{^_-is	Other	ALPHABETIC}', 'deprecated');
Expect(1, 836, '\P{_-is	Other	ALPHABETIC}', 'deprecated');
Expect(0, 836, '\P{^_-is	Other	ALPHABETIC}', 'deprecated');
Error('\p{-/a/OAlpha}');
Error('\P{-/a/OAlpha}');
Expect(1, 837, '\p{oalpha}', 'deprecated');
Expect(0, 837, '\p{^oalpha}', 'deprecated');
Expect(0, 837, '\P{oalpha}', 'deprecated');
Expect(1, 837, '\P{^oalpha}', 'deprecated');
Expect(0, 836, '\p{oalpha}', 'deprecated');
Expect(1, 836, '\p{^oalpha}', 'deprecated');
Expect(1, 836, '\P{oalpha}', 'deprecated');
Expect(0, 836, '\P{^oalpha}', 'deprecated');
Expect(1, 837, '\p{	-OAlpha}', 'deprecated');
Expect(0, 837, '\p{^	-OAlpha}', 'deprecated');
Expect(0, 837, '\P{	-OAlpha}', 'deprecated');
Expect(1, 837, '\P{^	-OAlpha}', 'deprecated');
Expect(0, 836, '\p{	-OAlpha}', 'deprecated');
Expect(1, 836, '\p{^	-OAlpha}', 'deprecated');
Expect(1, 836, '\P{	-OAlpha}', 'deprecated');
Expect(0, 836, '\P{^	-OAlpha}', 'deprecated');
Error('\p{ Is:=OALPHA}');
Error('\P{ Is:=OALPHA}');
Expect(1, 837, '\p{isoalpha}', 'deprecated');
Expect(0, 837, '\p{^isoalpha}', 'deprecated');
Expect(0, 837, '\P{isoalpha}', 'deprecated');
Expect(1, 837, '\P{^isoalpha}', 'deprecated');
Expect(0, 836, '\p{isoalpha}', 'deprecated');
Expect(1, 836, '\p{^isoalpha}', 'deprecated');
Expect(1, 836, '\P{isoalpha}', 'deprecated');
Expect(0, 836, '\P{^isoalpha}', 'deprecated');
Expect(1, 837, '\p{ Is-OAlpha}', 'deprecated');
Expect(0, 837, '\p{^ Is-OAlpha}', 'deprecated');
Expect(0, 837, '\P{ Is-OAlpha}', 'deprecated');
Expect(1, 837, '\P{^ Is-OAlpha}', 'deprecated');
Expect(0, 836, '\p{ Is-OAlpha}', 'deprecated');
Expect(1, 836, '\p{^ Is-OAlpha}', 'deprecated');
Expect(1, 836, '\P{ Is-OAlpha}', 'deprecated');
Expect(0, 836, '\P{^ Is-OAlpha}', 'deprecated');
Error('\p{_Supplementary-private_USE/a/AreaA}');
Error('\P{_Supplementary-private_USE/a/AreaA}');
Expect(1, 983040, '\p{supplementaryprivateuseareaa}', "");
Expect(0, 983040, '\p{^supplementaryprivateuseareaa}', "");
Expect(0, 983040, '\P{supplementaryprivateuseareaa}', "");
Expect(1, 983040, '\P{^supplementaryprivateuseareaa}', "");
Expect(0, 1, '\p{supplementaryprivateuseareaa}', "");
Expect(1, 1, '\p{^supplementaryprivateuseareaa}', "");
Expect(1, 1, '\P{supplementaryprivateuseareaa}', "");
Expect(0, 1, '\P{^supplementaryprivateuseareaa}', "");
Expect(1, 983040, '\p{ 	SUPPLEMENTARY	privateuseArea-A}', "");
Expect(0, 983040, '\p{^ 	SUPPLEMENTARY	privateuseArea-A}', "");
Expect(0, 983040, '\P{ 	SUPPLEMENTARY	privateuseArea-A}', "");
Expect(1, 983040, '\P{^ 	SUPPLEMENTARY	privateuseArea-A}', "");
Expect(0, 1, '\p{ 	SUPPLEMENTARY	privateuseArea-A}', "");
Expect(1, 1, '\p{^ 	SUPPLEMENTARY	privateuseArea-A}', "");
Expect(1, 1, '\P{ 	SUPPLEMENTARY	privateuseArea-A}', "");
Expect(0, 1, '\P{^ 	SUPPLEMENTARY	privateuseArea-A}', "");
Error('\p{	IS SUPPLEMENTARY	Private	Usearea_A/a/}');
Error('\P{	IS SUPPLEMENTARY	Private	Usearea_A/a/}');
Expect(1, 983040, '\p{issupplementaryprivateuseareaa}', "");
Expect(0, 983040, '\p{^issupplementaryprivateuseareaa}', "");
Expect(0, 983040, '\P{issupplementaryprivateuseareaa}', "");
Expect(1, 983040, '\P{^issupplementaryprivateuseareaa}', "");
Expect(0, 1, '\p{issupplementaryprivateuseareaa}', "");
Expect(1, 1, '\p{^issupplementaryprivateuseareaa}', "");
Expect(1, 1, '\P{issupplementaryprivateuseareaa}', "");
Expect(0, 1, '\P{^issupplementaryprivateuseareaa}', "");
Expect(1, 983040, '\p{- Is_SUPPLEMENTARY	Private_use	AREA-A}', "");
Expect(0, 983040, '\p{^- Is_SUPPLEMENTARY	Private_use	AREA-A}', "");
Expect(0, 983040, '\P{- Is_SUPPLEMENTARY	Private_use	AREA-A}', "");
Expect(1, 983040, '\P{^- Is_SUPPLEMENTARY	Private_use	AREA-A}', "");
Expect(0, 1, '\p{- Is_SUPPLEMENTARY	Private_use	AREA-A}', "");
Expect(1, 1, '\p{^- Is_SUPPLEMENTARY	Private_use	AREA-A}', "");
Expect(1, 1, '\P{- Is_SUPPLEMENTARY	Private_use	AREA-A}', "");
Expect(0, 1, '\P{^- Is_SUPPLEMENTARY	Private_use	AREA-A}', "");
Error('\p{-/a/InSupplementary PRIVATE Use_Area	a}');
Error('\P{-/a/InSupplementary PRIVATE Use_Area	a}');
Expect(1, 983040, '\p{insupplementaryprivateuseareaa}', "");
Expect(0, 983040, '\p{^insupplementaryprivateuseareaa}', "");
Expect(0, 983040, '\P{insupplementaryprivateuseareaa}', "");
Expect(1, 983040, '\P{^insupplementaryprivateuseareaa}', "");
Expect(0, 1, '\p{insupplementaryprivateuseareaa}', "");
Expect(1, 1, '\p{^insupplementaryprivateuseareaa}', "");
Expect(1, 1, '\P{insupplementaryprivateuseareaa}', "");
Expect(0, 1, '\P{^insupplementaryprivateuseareaa}', "");
Expect(1, 983040, '\p{-_In_supplementary_Private_USE_AreaA}', "");
Expect(0, 983040, '\p{^-_In_supplementary_Private_USE_AreaA}', "");
Expect(0, 983040, '\P{-_In_supplementary_Private_USE_AreaA}', "");
Expect(1, 983040, '\P{^-_In_supplementary_Private_USE_AreaA}', "");
Expect(0, 1, '\p{-_In_supplementary_Private_USE_AreaA}', "");
Expect(1, 1, '\p{^-_In_supplementary_Private_USE_AreaA}', "");
Expect(1, 1, '\P{-_In_supplementary_Private_USE_AreaA}', "");
Expect(0, 1, '\P{^-_In_supplementary_Private_USE_AreaA}', "");
Error('\p{_ Saurashtra/a/}');
Error('\P{_ Saurashtra/a/}');
Expect(1, 43204, '\p{saurashtra}', "");
Expect(0, 43204, '\p{^saurashtra}', "");
Expect(0, 43204, '\P{saurashtra}', "");
Expect(1, 43204, '\P{^saurashtra}', "");
Expect(0, 43135, '\p{saurashtra}', "");
Expect(1, 43135, '\p{^saurashtra}', "");
Expect(1, 43135, '\P{saurashtra}', "");
Expect(0, 43135, '\P{^saurashtra}', "");
Expect(1, 43204, '\p{__Saurashtra}', "");
Expect(0, 43204, '\p{^__Saurashtra}', "");
Expect(0, 43204, '\P{__Saurashtra}', "");
Expect(1, 43204, '\P{^__Saurashtra}', "");
Expect(0, 43135, '\p{__Saurashtra}', "");
Expect(1, 43135, '\p{^__Saurashtra}', "");
Expect(1, 43135, '\P{__Saurashtra}', "");
Expect(0, 43135, '\P{^__Saurashtra}', "");
Error('\p{:=- is Saurashtra}');
Error('\P{:=- is Saurashtra}');
Expect(1, 43204, '\p{issaurashtra}', "");
Expect(0, 43204, '\p{^issaurashtra}', "");
Expect(0, 43204, '\P{issaurashtra}', "");
Expect(1, 43204, '\P{^issaurashtra}', "");
Expect(0, 43135, '\p{issaurashtra}', "");
Expect(1, 43135, '\p{^issaurashtra}', "");
Expect(1, 43135, '\P{issaurashtra}', "");
Expect(0, 43135, '\P{^issaurashtra}', "");
Expect(1, 43204, '\p{_is SAURASHTRA}', "");
Expect(0, 43204, '\p{^_is SAURASHTRA}', "");
Expect(0, 43204, '\P{_is SAURASHTRA}', "");
Expect(1, 43204, '\P{^_is SAURASHTRA}', "");
Expect(0, 43135, '\p{_is SAURASHTRA}', "");
Expect(1, 43135, '\p{^_is SAURASHTRA}', "");
Expect(1, 43135, '\P{_is SAURASHTRA}', "");
Expect(0, 43135, '\P{^_is SAURASHTRA}', "");
Error('\p{/a/	_Saur}');
Error('\P{/a/	_Saur}');
Expect(1, 43204, '\p{saur}', "");
Expect(0, 43204, '\p{^saur}', "");
Expect(0, 43204, '\P{saur}', "");
Expect(1, 43204, '\P{^saur}', "");
Expect(0, 43135, '\p{saur}', "");
Expect(1, 43135, '\p{^saur}', "");
Expect(1, 43135, '\P{saur}', "");
Expect(0, 43135, '\P{^saur}', "");
Expect(1, 43204, '\p{ _SAUR}', "");
Expect(0, 43204, '\p{^ _SAUR}', "");
Expect(0, 43204, '\P{ _SAUR}', "");
Expect(1, 43204, '\P{^ _SAUR}', "");
Expect(0, 43135, '\p{ _SAUR}', "");
Expect(1, 43135, '\p{^ _SAUR}', "");
Expect(1, 43135, '\P{ _SAUR}', "");
Expect(0, 43135, '\P{^ _SAUR}', "");
Error('\p{_/a/Is Saur}');
Error('\P{_/a/Is Saur}');
Expect(1, 43204, '\p{issaur}', "");
Expect(0, 43204, '\p{^issaur}', "");
Expect(0, 43204, '\P{issaur}', "");
Expect(1, 43204, '\P{^issaur}', "");
Expect(0, 43135, '\p{issaur}', "");
Expect(1, 43135, '\p{^issaur}', "");
Expect(1, 43135, '\P{issaur}', "");
Expect(0, 43135, '\P{^issaur}', "");
Expect(1, 43204, '\p{_-Is_saur}', "");
Expect(0, 43204, '\p{^_-Is_saur}', "");
Expect(0, 43204, '\P{_-Is_saur}', "");
Expect(1, 43204, '\P{^_-Is_saur}', "");
Expect(0, 43135, '\p{_-Is_saur}', "");
Expect(1, 43135, '\p{^_-Is_saur}', "");
Expect(1, 43135, '\P{_-Is_saur}', "");
Expect(0, 43135, '\P{^_-Is_saur}', "");
Error('\p{	-/a/X-EXTEND}');
Error('\P{	-/a/X-EXTEND}');
Expect(1, 879, '\p{_X_Extend}', "");
Expect(0, 879, '\p{^_X_Extend}', "");
Expect(0, 879, '\P{_X_Extend}', "");
Expect(1, 879, '\P{^_X_Extend}', "");
Expect(0, 767, '\p{_X_Extend}', "");
Expect(1, 767, '\p{^_X_Extend}', "");
Expect(1, 767, '\P{_X_Extend}', "");
Expect(0, 767, '\P{^_X_Extend}', "");
Error('\p{	tagbanwa:=}');
Error('\P{	tagbanwa:=}');
Expect(1, 5996, '\p{tagbanwa}', "");
Expect(0, 5996, '\p{^tagbanwa}', "");
Expect(0, 5996, '\P{tagbanwa}', "");
Expect(1, 5996, '\P{^tagbanwa}', "");
Expect(0, 5983, '\p{tagbanwa}', "");
Expect(1, 5983, '\p{^tagbanwa}', "");
Expect(1, 5983, '\P{tagbanwa}', "");
Expect(0, 5983, '\P{^tagbanwa}', "");
Expect(1, 5996, '\p{-	tagbanwa}', "");
Expect(0, 5996, '\p{^-	tagbanwa}', "");
Expect(0, 5996, '\P{-	tagbanwa}', "");
Expect(1, 5996, '\P{^-	tagbanwa}', "");
Expect(0, 5983, '\p{-	tagbanwa}', "");
Expect(1, 5983, '\p{^-	tagbanwa}', "");
Expect(1, 5983, '\P{-	tagbanwa}', "");
Expect(0, 5983, '\P{^-	tagbanwa}', "");
Error('\p{ Is/a/Tagbanwa}');
Error('\P{ Is/a/Tagbanwa}');
Expect(1, 5996, '\p{istagbanwa}', "");
Expect(0, 5996, '\p{^istagbanwa}', "");
Expect(0, 5996, '\P{istagbanwa}', "");
Expect(1, 5996, '\P{^istagbanwa}', "");
Expect(0, 5983, '\p{istagbanwa}', "");
Expect(1, 5983, '\p{^istagbanwa}', "");
Expect(1, 5983, '\P{istagbanwa}', "");
Expect(0, 5983, '\P{^istagbanwa}', "");
Expect(1, 5996, '\p{_Is	Tagbanwa}', "");
Expect(0, 5996, '\p{^_Is	Tagbanwa}', "");
Expect(0, 5996, '\P{_Is	Tagbanwa}', "");
Expect(1, 5996, '\P{^_Is	Tagbanwa}', "");
Expect(0, 5983, '\p{_Is	Tagbanwa}', "");
Expect(1, 5983, '\p{^_Is	Tagbanwa}', "");
Expect(1, 5983, '\P{_Is	Tagbanwa}', "");
Expect(0, 5983, '\P{^_Is	Tagbanwa}', "");
Error('\p{:=__Tagb}');
Error('\P{:=__Tagb}');
Expect(1, 5996, '\p{tagb}', "");
Expect(0, 5996, '\p{^tagb}', "");
Expect(0, 5996, '\P{tagb}', "");
Expect(1, 5996, '\P{^tagb}', "");
Expect(0, 5983, '\p{tagb}', "");
Expect(1, 5983, '\p{^tagb}', "");
Expect(1, 5983, '\P{tagb}', "");
Expect(0, 5983, '\P{^tagb}', "");
Expect(1, 5996, '\p{		Tagb}', "");
Expect(0, 5996, '\p{^		Tagb}', "");
Expect(0, 5996, '\P{		Tagb}', "");
Expect(1, 5996, '\P{^		Tagb}', "");
Expect(0, 5983, '\p{		Tagb}', "");
Expect(1, 5983, '\p{^		Tagb}', "");
Expect(1, 5983, '\P{		Tagb}', "");
Expect(0, 5983, '\P{^		Tagb}', "");
Error('\p{/a/	 IS	TAGB}');
Error('\P{/a/	 IS	TAGB}');
Expect(1, 5996, '\p{istagb}', "");
Expect(0, 5996, '\p{^istagb}', "");
Expect(0, 5996, '\P{istagb}', "");
Expect(1, 5996, '\P{^istagb}', "");
Expect(0, 5983, '\p{istagb}', "");
Expect(1, 5983, '\p{^istagb}', "");
Expect(1, 5983, '\P{istagb}', "");
Expect(0, 5983, '\P{^istagb}', "");
Expect(1, 5996, '\p{	_IS TAGB}', "");
Expect(0, 5996, '\p{^	_IS TAGB}', "");
Expect(0, 5996, '\P{	_IS TAGB}', "");
Expect(1, 5996, '\P{^	_IS TAGB}', "");
Expect(0, 5983, '\p{	_IS TAGB}', "");
Expect(1, 5983, '\p{^	_IS TAGB}', "");
Expect(1, 5983, '\P{	_IS TAGB}', "");
Expect(0, 5983, '\P{^	_IS TAGB}', "");
Error('\p{-/a/Khmer	Symbols}');
Error('\P{-/a/Khmer	Symbols}');
Expect(1, 6655, '\p{khmersymbols}', "");
Expect(0, 6655, '\p{^khmersymbols}', "");
Expect(0, 6655, '\P{khmersymbols}', "");
Expect(1, 6655, '\P{^khmersymbols}', "");
Expect(0, 6623, '\p{khmersymbols}', "");
Expect(1, 6623, '\p{^khmersymbols}', "");
Expect(1, 6623, '\P{khmersymbols}', "");
Expect(0, 6623, '\P{^khmersymbols}', "");
Expect(1, 6655, '\p{-	khmer_symbols}', "");
Expect(0, 6655, '\p{^-	khmer_symbols}', "");
Expect(0, 6655, '\P{-	khmer_symbols}', "");
Expect(1, 6655, '\P{^-	khmer_symbols}', "");
Expect(0, 6623, '\p{-	khmer_symbols}', "");
Expect(1, 6623, '\p{^-	khmer_symbols}', "");
Expect(1, 6623, '\P{-	khmer_symbols}', "");
Expect(0, 6623, '\P{^-	khmer_symbols}', "");
Error('\p{ :=Is-KHMER-Symbols}');
Error('\P{ :=Is-KHMER-Symbols}');
Expect(1, 6655, '\p{iskhmersymbols}', "");
Expect(0, 6655, '\p{^iskhmersymbols}', "");
Expect(0, 6655, '\P{iskhmersymbols}', "");
Expect(1, 6655, '\P{^iskhmersymbols}', "");
Expect(0, 6623, '\p{iskhmersymbols}', "");
Expect(1, 6623, '\p{^iskhmersymbols}', "");
Expect(1, 6623, '\P{iskhmersymbols}', "");
Expect(0, 6623, '\P{^iskhmersymbols}', "");
Expect(1, 6655, '\p{_	is_Khmersymbols}', "");
Expect(0, 6655, '\p{^_	is_Khmersymbols}', "");
Expect(0, 6655, '\P{_	is_Khmersymbols}', "");
Expect(1, 6655, '\P{^_	is_Khmersymbols}', "");
Expect(0, 6623, '\p{_	is_Khmersymbols}', "");
Expect(1, 6623, '\p{^_	is_Khmersymbols}', "");
Expect(1, 6623, '\P{_	is_Khmersymbols}', "");
Expect(0, 6623, '\P{^_	is_Khmersymbols}', "");
Error('\p{-_InKhmer:=Symbols}');
Error('\P{-_InKhmer:=Symbols}');
Expect(1, 6655, '\p{inkhmersymbols}', "");
Expect(0, 6655, '\p{^inkhmersymbols}', "");
Expect(0, 6655, '\P{inkhmersymbols}', "");
Expect(1, 6655, '\P{^inkhmersymbols}', "");
Expect(0, 6623, '\p{inkhmersymbols}', "");
Expect(1, 6623, '\p{^inkhmersymbols}', "");
Expect(1, 6623, '\P{inkhmersymbols}', "");
Expect(0, 6623, '\P{^inkhmersymbols}', "");
Expect(1, 6655, '\p{	_in-Khmer	Symbols}', "");
Expect(0, 6655, '\p{^	_in-Khmer	Symbols}', "");
Expect(0, 6655, '\P{	_in-Khmer	Symbols}', "");
Expect(1, 6655, '\P{^	_in-Khmer	Symbols}', "");
Expect(0, 6623, '\p{	_in-Khmer	Symbols}', "");
Expect(1, 6623, '\p{^	_in-Khmer	Symbols}', "");
Expect(1, 6623, '\P{	_in-Khmer	Symbols}', "");
Expect(0, 6623, '\P{^	_in-Khmer	Symbols}', "");
Error('\p{ math:=}');
Error('\P{ math:=}');
Expect(1, 43, '\p{math}', "");
Expect(0, 43, '\p{^math}', "");
Expect(0, 43, '\P{math}', "");
Expect(1, 43, '\P{^math}', "");
Expect(0, 42, '\p{math}', "");
Expect(1, 42, '\p{^math}', "");
Expect(1, 42, '\P{math}', "");
Expect(0, 42, '\P{^math}', "");
Expect(1, 43, '\p{	_Math}', "");
Expect(0, 43, '\p{^	_Math}', "");
Expect(0, 43, '\P{	_Math}', "");
Expect(1, 43, '\P{^	_Math}', "");
Expect(0, 42, '\p{	_Math}', "");
Expect(1, 42, '\p{^	_Math}', "");
Expect(1, 42, '\P{	_Math}', "");
Expect(0, 42, '\P{^	_Math}', "");
Error('\p{_/a/Is_math}');
Error('\P{_/a/Is_math}');
Expect(1, 43, '\p{ismath}', "");
Expect(0, 43, '\p{^ismath}', "");
Expect(0, 43, '\P{ismath}', "");
Expect(1, 43, '\P{^ismath}', "");
Expect(0, 42, '\p{ismath}', "");
Expect(1, 42, '\p{^ismath}', "");
Expect(1, 42, '\P{ismath}', "");
Expect(0, 42, '\P{^ismath}', "");
Expect(1, 43, '\p{_is MATH}', "");
Expect(0, 43, '\p{^_is MATH}', "");
Expect(0, 43, '\P{_is MATH}', "");
Expect(1, 43, '\P{^_is MATH}', "");
Expect(0, 42, '\p{_is MATH}', "");
Expect(1, 42, '\p{^_is MATH}', "");
Expect(1, 42, '\P{_is MATH}', "");
Expect(0, 42, '\P{^_is MATH}', "");
Error('\p{/a/_BUHID}');
Error('\P{/a/_BUHID}');
Expect(1, 5971, '\p{buhid}', "");
Expect(0, 5971, '\p{^buhid}', "");
Expect(0, 5971, '\P{buhid}', "");
Expect(1, 5971, '\P{^buhid}', "");
Expect(0, 5951, '\p{buhid}', "");
Expect(1, 5951, '\p{^buhid}', "");
Expect(1, 5951, '\P{buhid}', "");
Expect(0, 5951, '\P{^buhid}', "");
Expect(1, 5971, '\p{__BUHID}', "");
Expect(0, 5971, '\p{^__BUHID}', "");
Expect(0, 5971, '\P{__BUHID}', "");
Expect(1, 5971, '\P{^__BUHID}', "");
Expect(0, 5951, '\p{__BUHID}', "");
Expect(1, 5951, '\p{^__BUHID}', "");
Expect(1, 5951, '\P{__BUHID}', "");
Expect(0, 5951, '\P{^__BUHID}', "");
Error('\p{_/a/IsBuhid}');
Error('\P{_/a/IsBuhid}');
Expect(1, 5971, '\p{isbuhid}', "");
Expect(0, 5971, '\p{^isbuhid}', "");
Expect(0, 5971, '\P{isbuhid}', "");
Expect(1, 5971, '\P{^isbuhid}', "");
Expect(0, 5951, '\p{isbuhid}', "");
Expect(1, 5951, '\p{^isbuhid}', "");
Expect(1, 5951, '\P{isbuhid}', "");
Expect(0, 5951, '\P{^isbuhid}', "");
Expect(1, 5971, '\p{__IS buhid}', "");
Expect(0, 5971, '\p{^__IS buhid}', "");
Expect(0, 5971, '\P{__IS buhid}', "");
Expect(1, 5971, '\P{^__IS buhid}', "");
Expect(0, 5951, '\p{__IS buhid}', "");
Expect(1, 5951, '\p{^__IS buhid}', "");
Expect(1, 5951, '\P{__IS buhid}', "");
Expect(0, 5951, '\P{^__IS buhid}', "");
Error('\p{	/a/Buhd}');
Error('\P{	/a/Buhd}');
Expect(1, 5971, '\p{buhd}', "");
Expect(0, 5971, '\p{^buhd}', "");
Expect(0, 5971, '\P{buhd}', "");
Expect(1, 5971, '\P{^buhd}', "");
Expect(0, 5951, '\p{buhd}', "");
Expect(1, 5951, '\p{^buhd}', "");
Expect(1, 5951, '\P{buhd}', "");
Expect(0, 5951, '\P{^buhd}', "");
Expect(1, 5971, '\p{ -Buhd}', "");
Expect(0, 5971, '\p{^ -Buhd}', "");
Expect(0, 5971, '\P{ -Buhd}', "");
Expect(1, 5971, '\P{^ -Buhd}', "");
Expect(0, 5951, '\p{ -Buhd}', "");
Expect(1, 5951, '\p{^ -Buhd}', "");
Expect(1, 5951, '\P{ -Buhd}', "");
Expect(0, 5951, '\P{^ -Buhd}', "");
Error('\p{:=_-IsBUHD}');
Error('\P{:=_-IsBUHD}');
Expect(1, 5971, '\p{isbuhd}', "");
Expect(0, 5971, '\p{^isbuhd}', "");
Expect(0, 5971, '\P{isbuhd}', "");
Expect(1, 5971, '\P{^isbuhd}', "");
Expect(0, 5951, '\p{isbuhd}', "");
Expect(1, 5951, '\p{^isbuhd}', "");
Expect(1, 5951, '\P{isbuhd}', "");
Expect(0, 5951, '\P{^isbuhd}', "");
Expect(1, 5971, '\p{		IS	BUHD}', "");
Expect(0, 5971, '\p{^		IS	BUHD}', "");
Expect(0, 5971, '\P{		IS	BUHD}', "");
Expect(1, 5971, '\P{^		IS	BUHD}', "");
Expect(0, 5951, '\p{		IS	BUHD}', "");
Expect(1, 5951, '\p{^		IS	BUHD}', "");
Expect(1, 5951, '\P{		IS	BUHD}', "");
Expect(0, 5951, '\P{^		IS	BUHD}', "");
Error('\p{-	Greek:=And Coptic}');
Error('\P{-	Greek:=And Coptic}');
Expect(1, 1023, '\p{greekandcoptic}', "");
Expect(0, 1023, '\p{^greekandcoptic}', "");
Expect(0, 1023, '\P{greekandcoptic}', "");
Expect(1, 1023, '\P{^greekandcoptic}', "");
Expect(0, 879, '\p{greekandcoptic}', "");
Expect(1, 879, '\p{^greekandcoptic}', "");
Expect(1, 879, '\P{greekandcoptic}', "");
Expect(0, 879, '\P{^greekandcoptic}', "");
Expect(1, 1023, '\p{--greek_AND COPTIC}', "");
Expect(0, 1023, '\p{^--greek_AND COPTIC}', "");
Expect(0, 1023, '\P{--greek_AND COPTIC}', "");
Expect(1, 1023, '\P{^--greek_AND COPTIC}', "");
Expect(0, 879, '\p{--greek_AND COPTIC}', "");
Expect(1, 879, '\p{^--greek_AND COPTIC}', "");
Expect(1, 879, '\P{--greek_AND COPTIC}', "");
Expect(0, 879, '\P{^--greek_AND COPTIC}', "");
Error('\p{:= IS Greek_And_coptic}');
Error('\P{:= IS Greek_And_coptic}');
Expect(1, 1023, '\p{isgreekandcoptic}', "");
Expect(0, 1023, '\p{^isgreekandcoptic}', "");
Expect(0, 1023, '\P{isgreekandcoptic}', "");
Expect(1, 1023, '\P{^isgreekandcoptic}', "");
Expect(0, 879, '\p{isgreekandcoptic}', "");
Expect(1, 879, '\p{^isgreekandcoptic}', "");
Expect(1, 879, '\P{isgreekandcoptic}', "");
Expect(0, 879, '\P{^isgreekandcoptic}', "");
Expect(1, 1023, '\p{ -IS	GREEK	and Coptic}', "");
Expect(0, 1023, '\p{^ -IS	GREEK	and Coptic}', "");
Expect(0, 1023, '\P{ -IS	GREEK	and Coptic}', "");
Expect(1, 1023, '\P{^ -IS	GREEK	and Coptic}', "");
Expect(0, 879, '\p{ -IS	GREEK	and Coptic}', "");
Expect(1, 879, '\p{^ -IS	GREEK	and Coptic}', "");
Expect(1, 879, '\P{ -IS	GREEK	and Coptic}', "");
Expect(0, 879, '\P{^ -IS	GREEK	and Coptic}', "");
Error('\p{:= -In_Greek-AndCoptic}');
Error('\P{:= -In_Greek-AndCoptic}');
Expect(1, 1023, '\p{ingreekandcoptic}', "");
Expect(0, 1023, '\p{^ingreekandcoptic}', "");
Expect(0, 1023, '\P{ingreekandcoptic}', "");
Expect(1, 1023, '\P{^ingreekandcoptic}', "");
Expect(0, 879, '\p{ingreekandcoptic}', "");
Expect(1, 879, '\p{^ingreekandcoptic}', "");
Expect(1, 879, '\P{ingreekandcoptic}', "");
Expect(0, 879, '\P{^ingreekandcoptic}', "");
Expect(1, 1023, '\p{ In-GREEK-AndCoptic}', "");
Expect(0, 1023, '\p{^ In-GREEK-AndCoptic}', "");
Expect(0, 1023, '\P{ In-GREEK-AndCoptic}', "");
Expect(1, 1023, '\P{^ In-GREEK-AndCoptic}', "");
Expect(0, 879, '\p{ In-GREEK-AndCoptic}', "");
Expect(1, 879, '\p{^ In-GREEK-AndCoptic}', "");
Expect(1, 879, '\P{ In-GREEK-AndCoptic}', "");
Expect(0, 879, '\P{^ In-GREEK-AndCoptic}', "");
Error('\p{ :=InGreek}');
Error('\P{ :=InGreek}');
Expect(1, 1023, '\p{ingreek}', "");
Expect(0, 1023, '\p{^ingreek}', "");
Expect(0, 1023, '\P{ingreek}', "");
Expect(1, 1023, '\P{^ingreek}', "");
Expect(0, 879, '\p{ingreek}', "");
Expect(1, 879, '\p{^ingreek}', "");
Expect(1, 879, '\P{ingreek}', "");
Expect(0, 879, '\P{^ingreek}', "");
Expect(1, 1023, '\p{_IN Greek}', "");
Expect(0, 1023, '\p{^_IN Greek}', "");
Expect(0, 1023, '\P{_IN Greek}', "");
Expect(1, 1023, '\P{^_IN Greek}', "");
Expect(0, 879, '\p{_IN Greek}', "");
Expect(1, 879, '\p{^_IN Greek}', "");
Expect(1, 879, '\P{_IN Greek}', "");
Expect(0, 879, '\P{^_IN Greek}', "");
Error('\p{:=	-white Space}');
Error('\P{:=	-white Space}');
Expect(1, 13, '\p{whitespace}', "");
Expect(0, 13, '\p{^whitespace}', "");
Expect(0, 13, '\P{whitespace}', "");
Expect(1, 13, '\P{^whitespace}', "");
Expect(0, 8, '\p{whitespace}', "");
Expect(1, 8, '\p{^whitespace}', "");
Expect(1, 8, '\P{whitespace}', "");
Expect(0, 8, '\P{^whitespace}', "");
Expect(1, 13, '\p{- White-Space}', "");
Expect(0, 13, '\p{^- White-Space}', "");
Expect(0, 13, '\P{- White-Space}', "");
Expect(1, 13, '\P{^- White-Space}', "");
Expect(0, 8, '\p{- White-Space}', "");
Expect(1, 8, '\p{^- White-Space}', "");
Expect(1, 8, '\P{- White-Space}', "");
Expect(0, 8, '\P{^- White-Space}', "");
Error('\p{	-IS_White:=SPACE}');
Error('\P{	-IS_White:=SPACE}');
Expect(1, 13, '\p{iswhitespace}', "");
Expect(0, 13, '\p{^iswhitespace}', "");
Expect(0, 13, '\P{iswhitespace}', "");
Expect(1, 13, '\P{^iswhitespace}', "");
Expect(0, 8, '\p{iswhitespace}', "");
Expect(1, 8, '\p{^iswhitespace}', "");
Expect(1, 8, '\P{iswhitespace}', "");
Expect(0, 8, '\P{^iswhitespace}', "");
Expect(1, 13, '\p{-Is-WHITESpace}', "");
Expect(0, 13, '\p{^-Is-WHITESpace}', "");
Expect(0, 13, '\P{-Is-WHITESpace}', "");
Expect(1, 13, '\P{^-Is-WHITESpace}', "");
Expect(0, 8, '\p{-Is-WHITESpace}', "");
Expect(1, 8, '\p{^-Is-WHITESpace}', "");
Expect(1, 8, '\P{-Is-WHITESpace}', "");
Expect(0, 8, '\P{^-Is-WHITESpace}', "");
Error('\p{_WSpace/a/}');
Error('\P{_WSpace/a/}');
Expect(1, 13, '\p{wspace}', "");
Expect(0, 13, '\p{^wspace}', "");
Expect(0, 13, '\P{wspace}', "");
Expect(1, 13, '\P{^wspace}', "");
Expect(0, 8, '\p{wspace}', "");
Expect(1, 8, '\p{^wspace}', "");
Expect(1, 8, '\P{wspace}', "");
Expect(0, 8, '\P{^wspace}', "");
Expect(1, 13, '\p{ wspace}', "");
Expect(0, 13, '\p{^ wspace}', "");
Expect(0, 13, '\P{ wspace}', "");
Expect(1, 13, '\P{^ wspace}', "");
Expect(0, 8, '\p{ wspace}', "");
Expect(1, 8, '\p{^ wspace}', "");
Expect(1, 8, '\P{ wspace}', "");
Expect(0, 8, '\P{^ wspace}', "");
Error('\p{/a/_ Is wspace}');
Error('\P{/a/_ Is wspace}');
Expect(1, 13, '\p{iswspace}', "");
Expect(0, 13, '\p{^iswspace}', "");
Expect(0, 13, '\P{iswspace}', "");
Expect(1, 13, '\P{^iswspace}', "");
Expect(0, 8, '\p{iswspace}', "");
Expect(1, 8, '\p{^iswspace}', "");
Expect(1, 8, '\P{iswspace}', "");
Expect(0, 8, '\P{^iswspace}', "");
Expect(1, 13, '\p{ -is WSpace}', "");
Expect(0, 13, '\p{^ -is WSpace}', "");
Expect(0, 13, '\P{ -is WSpace}', "");
Expect(1, 13, '\P{^ -is WSpace}', "");
Expect(0, 8, '\p{ -is WSpace}', "");
Expect(1, 8, '\p{^ -is WSpace}', "");
Expect(1, 8, '\P{ -is WSpace}', "");
Expect(0, 8, '\P{^ -is WSpace}', "");
Error('\p{ _supplementary	Privateuse:=area_B}');
Error('\P{ _supplementary	Privateuse:=area_B}');
Expect(1, 1048576, '\p{supplementaryprivateuseareab}', "");
Expect(0, 1048576, '\p{^supplementaryprivateuseareab}', "");
Expect(0, 1048576, '\P{supplementaryprivateuseareab}', "");
Expect(1, 1048576, '\P{^supplementaryprivateuseareab}', "");
Expect(0, 1, '\p{supplementaryprivateuseareab}', "");
Expect(1, 1, '\p{^supplementaryprivateuseareab}', "");
Expect(1, 1, '\P{supplementaryprivateuseareab}', "");
Expect(0, 1, '\P{^supplementaryprivateuseareab}', "");
Expect(1, 1048576, '\p{-SUPPLEMENTARYPRIVATE USE-Area B}', "");
Expect(0, 1048576, '\p{^-SUPPLEMENTARYPRIVATE USE-Area B}', "");
Expect(0, 1048576, '\P{-SUPPLEMENTARYPRIVATE USE-Area B}', "");
Expect(1, 1048576, '\P{^-SUPPLEMENTARYPRIVATE USE-Area B}', "");
Expect(0, 1, '\p{-SUPPLEMENTARYPRIVATE USE-Area B}', "");
Expect(1, 1, '\p{^-SUPPLEMENTARYPRIVATE USE-Area B}', "");
Expect(1, 1, '\P{-SUPPLEMENTARYPRIVATE USE-Area B}', "");
Expect(0, 1, '\P{^-SUPPLEMENTARYPRIVATE USE-Area B}', "");
Error('\p{:=-is SUPPLEMENTARY	private-Use-Area_B}');
Error('\P{:=-is SUPPLEMENTARY	private-Use-Area_B}');
Expect(1, 1048576, '\p{issupplementaryprivateuseareab}', "");
Expect(0, 1048576, '\p{^issupplementaryprivateuseareab}', "");
Expect(0, 1048576, '\P{issupplementaryprivateuseareab}', "");
Expect(1, 1048576, '\P{^issupplementaryprivateuseareab}', "");
Expect(0, 1, '\p{issupplementaryprivateuseareab}', "");
Expect(1, 1, '\p{^issupplementaryprivateuseareab}', "");
Expect(1, 1, '\P{issupplementaryprivateuseareab}', "");
Expect(0, 1, '\P{^issupplementaryprivateuseareab}', "");
Expect(1, 1048576, '\p{-IS Supplementary_Private use-Area	B}', "");
Expect(0, 1048576, '\p{^-IS Supplementary_Private use-Area	B}', "");
Expect(0, 1048576, '\P{-IS Supplementary_Private use-Area	B}', "");
Expect(1, 1048576, '\P{^-IS Supplementary_Private use-Area	B}', "");
Expect(0, 1, '\p{-IS Supplementary_Private use-Area	B}', "");
Expect(1, 1, '\p{^-IS Supplementary_Private use-Area	B}', "");
Expect(1, 1, '\P{-IS Supplementary_Private use-Area	B}', "");
Expect(0, 1, '\P{^-IS Supplementary_Private use-Area	B}', "");
Error('\p{:=InSUPPLEMENTARYPRIVATE-USE AREA-b}');
Error('\P{:=InSUPPLEMENTARYPRIVATE-USE AREA-b}');
Expect(1, 1048576, '\p{insupplementaryprivateuseareab}', "");
Expect(0, 1048576, '\p{^insupplementaryprivateuseareab}', "");
Expect(0, 1048576, '\P{insupplementaryprivateuseareab}', "");
Expect(1, 1048576, '\P{^insupplementaryprivateuseareab}', "");
Expect(0, 1, '\p{insupplementaryprivateuseareab}', "");
Expect(1, 1, '\p{^insupplementaryprivateuseareab}', "");
Expect(1, 1, '\P{insupplementaryprivateuseareab}', "");
Expect(0, 1, '\P{^insupplementaryprivateuseareab}', "");
Expect(1, 1048576, '\p{-_Insupplementary-PrivateUSE	Area B}', "");
Expect(0, 1048576, '\p{^-_Insupplementary-PrivateUSE	Area B}', "");
Expect(0, 1048576, '\P{-_Insupplementary-PrivateUSE	Area B}', "");
Expect(1, 1048576, '\P{^-_Insupplementary-PrivateUSE	Area B}', "");
Expect(0, 1, '\p{-_Insupplementary-PrivateUSE	Area B}', "");
Expect(1, 1, '\p{^-_Insupplementary-PrivateUSE	Area B}', "");
Expect(1, 1, '\P{-_Insupplementary-PrivateUSE	Area B}', "");
Expect(0, 1, '\P{^-_Insupplementary-PrivateUSE	Area B}', "");
Error('\p{		In/a/cuneiform}');
Error('\P{		In/a/cuneiform}');
Expect(1, 74751, '\p{incuneiform}', "");
Expect(0, 74751, '\p{^incuneiform}', "");
Expect(0, 74751, '\P{incuneiform}', "");
Expect(1, 74751, '\P{^incuneiform}', "");
Expect(0, 73727, '\p{incuneiform}', "");
Expect(1, 73727, '\p{^incuneiform}', "");
Expect(1, 73727, '\P{incuneiform}', "");
Expect(0, 73727, '\P{^incuneiform}', "");
Expect(1, 74751, '\p{__IN Cuneiform}', "");
Expect(0, 74751, '\p{^__IN Cuneiform}', "");
Expect(0, 74751, '\P{__IN Cuneiform}', "");
Expect(1, 74751, '\P{^__IN Cuneiform}', "");
Expect(0, 73727, '\p{__IN Cuneiform}', "");
Expect(1, 73727, '\p{^__IN Cuneiform}', "");
Expect(1, 73727, '\P{__IN Cuneiform}', "");
Expect(0, 73727, '\P{^__IN Cuneiform}', "");
Error('\p{-_CJK SymbolsAndpunctuation:=}');
Error('\P{-_CJK SymbolsAndpunctuation:=}');
Expect(1, 12351, '\p{cjksymbolsandpunctuation}', "");
Expect(0, 12351, '\p{^cjksymbolsandpunctuation}', "");
Expect(0, 12351, '\P{cjksymbolsandpunctuation}', "");
Expect(1, 12351, '\P{^cjksymbolsandpunctuation}', "");
Expect(0, 12287, '\p{cjksymbolsandpunctuation}', "");
Expect(1, 12287, '\p{^cjksymbolsandpunctuation}', "");
Expect(1, 12287, '\P{cjksymbolsandpunctuation}', "");
Expect(0, 12287, '\P{^cjksymbolsandpunctuation}', "");
Expect(1, 12351, '\p{-_CJK Symbols And PUNCTUATION}', "");
Expect(0, 12351, '\p{^-_CJK Symbols And PUNCTUATION}', "");
Expect(0, 12351, '\P{-_CJK Symbols And PUNCTUATION}', "");
Expect(1, 12351, '\P{^-_CJK Symbols And PUNCTUATION}', "");
Expect(0, 12287, '\p{-_CJK Symbols And PUNCTUATION}', "");
Expect(1, 12287, '\p{^-_CJK Symbols And PUNCTUATION}', "");
Expect(1, 12287, '\P{-_CJK Symbols And PUNCTUATION}', "");
Expect(0, 12287, '\P{^-_CJK Symbols And PUNCTUATION}', "");
Error('\p{/a/Is_CJKSymbolsandPunctuation}');
Error('\P{/a/Is_CJKSymbolsandPunctuation}');
Expect(1, 12351, '\p{iscjksymbolsandpunctuation}', "");
Expect(0, 12351, '\p{^iscjksymbolsandpunctuation}', "");
Expect(0, 12351, '\P{iscjksymbolsandpunctuation}', "");
Expect(1, 12351, '\P{^iscjksymbolsandpunctuation}', "");
Expect(0, 12287, '\p{iscjksymbolsandpunctuation}', "");
Expect(1, 12287, '\p{^iscjksymbolsandpunctuation}', "");
Expect(1, 12287, '\P{iscjksymbolsandpunctuation}', "");
Expect(0, 12287, '\P{^iscjksymbolsandpunctuation}', "");
Expect(1, 12351, '\p{IS_CJK SYMBOLS	And_Punctuation}', "");
Expect(0, 12351, '\p{^IS_CJK SYMBOLS	And_Punctuation}', "");
Expect(0, 12351, '\P{IS_CJK SYMBOLS	And_Punctuation}', "");
Expect(1, 12351, '\P{^IS_CJK SYMBOLS	And_Punctuation}', "");
Expect(0, 12287, '\p{IS_CJK SYMBOLS	And_Punctuation}', "");
Expect(1, 12287, '\p{^IS_CJK SYMBOLS	And_Punctuation}', "");
Expect(1, 12287, '\P{IS_CJK SYMBOLS	And_Punctuation}', "");
Expect(0, 12287, '\P{^IS_CJK SYMBOLS	And_Punctuation}', "");
Error('\p{Incjk:=symbols-AndPUNCTUATION}');
Error('\P{Incjk:=symbols-AndPUNCTUATION}');
Expect(1, 12351, '\p{incjksymbolsandpunctuation}', "");
Expect(0, 12351, '\p{^incjksymbolsandpunctuation}', "");
Expect(0, 12351, '\P{incjksymbolsandpunctuation}', "");
Expect(1, 12351, '\P{^incjksymbolsandpunctuation}', "");
Expect(0, 12287, '\p{incjksymbolsandpunctuation}', "");
Expect(1, 12287, '\p{^incjksymbolsandpunctuation}', "");
Expect(1, 12287, '\P{incjksymbolsandpunctuation}', "");
Expect(0, 12287, '\P{^incjksymbolsandpunctuation}', "");
Expect(1, 12351, '\p{-_in	CJK	symbols And_Punctuation}', "");
Expect(0, 12351, '\p{^-_in	CJK	symbols And_Punctuation}', "");
Expect(0, 12351, '\P{-_in	CJK	symbols And_Punctuation}', "");
Expect(1, 12351, '\P{^-_in	CJK	symbols And_Punctuation}', "");
Expect(0, 12287, '\p{-_in	CJK	symbols And_Punctuation}', "");
Expect(1, 12287, '\p{^-_in	CJK	symbols And_Punctuation}', "");
Expect(1, 12287, '\P{-_in	CJK	symbols And_Punctuation}', "");
Expect(0, 12287, '\P{^-_in	CJK	symbols And_Punctuation}', "");
Error('\p{-_Surrogate:=}');
Error('\P{-_Surrogate:=}');
Expect(1, 57343, '\p{surrogate}', "");
Expect(0, 57343, '\p{^surrogate}', "");
Expect(0, 57343, '\P{surrogate}', "");
Expect(1, 57343, '\P{^surrogate}', "");
Expect(0, 55295, '\p{surrogate}', "");
Expect(1, 55295, '\p{^surrogate}', "");
Expect(1, 55295, '\P{surrogate}', "");
Expect(0, 55295, '\P{^surrogate}', "");
Expect(1, 57343, '\p{		surrogate}', "");
Expect(0, 57343, '\p{^		surrogate}', "");
Expect(0, 57343, '\P{		surrogate}', "");
Expect(1, 57343, '\P{^		surrogate}', "");
Expect(0, 55295, '\p{		surrogate}', "");
Expect(1, 55295, '\p{^		surrogate}', "");
Expect(1, 55295, '\P{		surrogate}', "");
Expect(0, 55295, '\P{^		surrogate}', "");
Error('\p{		is/a/Surrogate}');
Error('\P{		is/a/Surrogate}');
Expect(1, 57343, '\p{issurrogate}', "");
Expect(0, 57343, '\p{^issurrogate}', "");
Expect(0, 57343, '\P{issurrogate}', "");
Expect(1, 57343, '\P{^issurrogate}', "");
Expect(0, 55295, '\p{issurrogate}', "");
Expect(1, 55295, '\p{^issurrogate}', "");
Expect(1, 55295, '\P{issurrogate}', "");
Expect(0, 55295, '\P{^issurrogate}', "");
Expect(1, 57343, '\p{_	Is Surrogate}', "");
Expect(0, 57343, '\p{^_	Is Surrogate}', "");
Expect(0, 57343, '\P{_	Is Surrogate}', "");
Expect(1, 57343, '\P{^_	Is Surrogate}', "");
Expect(0, 55295, '\p{_	Is Surrogate}', "");
Expect(1, 55295, '\p{^_	Is Surrogate}', "");
Expect(1, 55295, '\P{_	Is Surrogate}', "");
Expect(0, 55295, '\P{^_	Is Surrogate}', "");
Error('\p{	 Cs/a/}');
Error('\P{	 Cs/a/}');
Expect(1, 57343, '\p{cs}', "");
Expect(0, 57343, '\p{^cs}', "");
Expect(0, 57343, '\P{cs}', "");
Expect(1, 57343, '\P{^cs}', "");
Expect(0, 55295, '\p{cs}', "");
Expect(1, 55295, '\p{^cs}', "");
Expect(1, 55295, '\P{cs}', "");
Expect(0, 55295, '\P{^cs}', "");
Expect(1, 57343, '\p{_	Cs}', "");
Expect(0, 57343, '\p{^_	Cs}', "");
Expect(0, 57343, '\P{_	Cs}', "");
Expect(1, 57343, '\P{^_	Cs}', "");
Expect(0, 55295, '\p{_	Cs}', "");
Expect(1, 55295, '\p{^_	Cs}', "");
Expect(1, 55295, '\P{_	Cs}', "");
Expect(0, 55295, '\P{^_	Cs}', "");
Error('\p{	/a/Is cs}');
Error('\P{	/a/Is cs}');
Expect(1, 57343, '\p{iscs}', "");
Expect(0, 57343, '\p{^iscs}', "");
Expect(0, 57343, '\P{iscs}', "");
Expect(1, 57343, '\P{^iscs}', "");
Expect(0, 55295, '\p{iscs}', "");
Expect(1, 55295, '\p{^iscs}', "");
Expect(1, 55295, '\P{iscs}', "");
Expect(0, 55295, '\P{^iscs}', "");
Expect(1, 57343, '\p{--Is_cs}', "");
Expect(0, 57343, '\p{^--Is_cs}', "");
Expect(0, 57343, '\P{--Is_cs}', "");
Expect(1, 57343, '\P{^--Is_cs}', "");
Expect(0, 55295, '\p{--Is_cs}', "");
Expect(1, 55295, '\p{^--Is_cs}', "");
Expect(1, 55295, '\P{--Is_cs}', "");
Expect(0, 55295, '\P{^--Is_cs}', "");
Error('\p{	:=In_Coptic}');
Error('\P{	:=In_Coptic}');
Expect(1, 11519, '\p{incoptic}', "");
Expect(0, 11519, '\p{^incoptic}', "");
Expect(0, 11519, '\P{incoptic}', "");
Expect(1, 11519, '\P{^incoptic}', "");
Expect(0, 11391, '\p{incoptic}', "");
Expect(1, 11391, '\p{^incoptic}', "");
Expect(1, 11391, '\P{incoptic}', "");
Expect(0, 11391, '\P{^incoptic}', "");
Expect(1, 11519, '\p{ IN Coptic}', "");
Expect(0, 11519, '\p{^ IN Coptic}', "");
Expect(0, 11519, '\P{ IN Coptic}', "");
Expect(1, 11519, '\P{^ IN Coptic}', "");
Expect(0, 11391, '\p{ IN Coptic}', "");
Expect(1, 11391, '\p{^ IN Coptic}', "");
Expect(1, 11391, '\P{ IN Coptic}', "");
Expect(0, 11391, '\P{^ IN Coptic}', "");
Error('\p{-:=KHMER}');
Error('\P{-:=KHMER}');
Expect(1, 6109, '\p{khmer}', "");
Expect(0, 6109, '\p{^khmer}', "");
Expect(0, 6109, '\P{khmer}', "");
Expect(1, 6109, '\P{^khmer}', "");
Expect(0, 6015, '\p{khmer}', "");
Expect(1, 6015, '\p{^khmer}', "");
Expect(1, 6015, '\P{khmer}', "");
Expect(0, 6015, '\P{^khmer}', "");
Expect(1, 6109, '\p{_Khmer}', "");
Expect(0, 6109, '\p{^_Khmer}', "");
Expect(0, 6109, '\P{_Khmer}', "");
Expect(1, 6109, '\P{^_Khmer}', "");
Expect(0, 6015, '\p{_Khmer}', "");
Expect(1, 6015, '\p{^_Khmer}', "");
Expect(1, 6015, '\P{_Khmer}', "");
Expect(0, 6015, '\P{^_Khmer}', "");
Error('\p{ Iskhmer/a/}');
Error('\P{ Iskhmer/a/}');
Expect(1, 6109, '\p{iskhmer}', "");
Expect(0, 6109, '\p{^iskhmer}', "");
Expect(0, 6109, '\P{iskhmer}', "");
Expect(1, 6109, '\P{^iskhmer}', "");
Expect(0, 6015, '\p{iskhmer}', "");
Expect(1, 6015, '\p{^iskhmer}', "");
Expect(1, 6015, '\P{iskhmer}', "");
Expect(0, 6015, '\P{^iskhmer}', "");
Expect(1, 6109, '\p{Is-KHMER}', "");
Expect(0, 6109, '\p{^Is-KHMER}', "");
Expect(0, 6109, '\P{Is-KHMER}', "");
Expect(1, 6109, '\P{^Is-KHMER}', "");
Expect(0, 6015, '\p{Is-KHMER}', "");
Expect(1, 6015, '\p{^Is-KHMER}', "");
Expect(1, 6015, '\P{Is-KHMER}', "");
Expect(0, 6015, '\P{^Is-KHMER}', "");
Error('\p{ /a/khmr}');
Error('\P{ /a/khmr}');
Expect(1, 6109, '\p{khmr}', "");
Expect(0, 6109, '\p{^khmr}', "");
Expect(0, 6109, '\P{khmr}', "");
Expect(1, 6109, '\P{^khmr}', "");
Expect(0, 6015, '\p{khmr}', "");
Expect(1, 6015, '\p{^khmr}', "");
Expect(1, 6015, '\P{khmr}', "");
Expect(0, 6015, '\P{^khmr}', "");
Expect(1, 6109, '\p{KHMR}', "");
Expect(0, 6109, '\p{^KHMR}', "");
Expect(0, 6109, '\P{KHMR}', "");
Expect(1, 6109, '\P{^KHMR}', "");
Expect(0, 6015, '\p{KHMR}', "");
Expect(1, 6015, '\p{^KHMR}', "");
Expect(1, 6015, '\P{KHMR}', "");
Expect(0, 6015, '\P{^KHMR}', "");
Error('\p{	:=Is-KHMR}');
Error('\P{	:=Is-KHMR}');
Expect(1, 6109, '\p{iskhmr}', "");
Expect(0, 6109, '\p{^iskhmr}', "");
Expect(0, 6109, '\P{iskhmr}', "");
Expect(1, 6109, '\P{^iskhmr}', "");
Expect(0, 6015, '\p{iskhmr}', "");
Expect(1, 6015, '\p{^iskhmr}', "");
Expect(1, 6015, '\P{iskhmr}', "");
Expect(0, 6015, '\P{^iskhmr}', "");
Expect(1, 6109, '\p{- IS	Khmr}', "");
Expect(0, 6109, '\p{^- IS	Khmr}', "");
Expect(0, 6109, '\P{- IS	Khmr}', "");
Expect(1, 6109, '\P{^- IS	Khmr}', "");
Expect(0, 6015, '\p{- IS	Khmr}', "");
Expect(1, 6015, '\p{^- IS	Khmr}', "");
Expect(1, 6015, '\P{- IS	Khmr}', "");
Expect(0, 6015, '\P{^- IS	Khmr}', "");
Error('\p{-/a/in_NKo}');
Error('\P{-/a/in_NKo}');
Expect(1, 2047, '\p{innko}', "");
Expect(0, 2047, '\p{^innko}', "");
Expect(0, 2047, '\P{innko}', "");
Expect(1, 2047, '\P{^innko}', "");
Expect(0, 1983, '\p{innko}', "");
Expect(1, 1983, '\p{^innko}', "");
Expect(1, 1983, '\P{innko}', "");
Expect(0, 1983, '\P{^innko}', "");
Expect(1, 2047, '\p{ 	InNKo}', "");
Expect(0, 2047, '\p{^ 	InNKo}', "");
Expect(0, 2047, '\P{ 	InNKo}', "");
Expect(1, 2047, '\P{^ 	InNKo}', "");
Expect(0, 1983, '\p{ 	InNKo}', "");
Expect(1, 1983, '\p{^ 	InNKo}', "");
Expect(1, 1983, '\P{ 	InNKo}', "");
Expect(0, 1983, '\P{^ 	InNKo}', "");
Error('\p{_:=linear_b	syllabary}');
Error('\P{_:=linear_b	syllabary}');
Expect(1, 65663, '\p{linearbsyllabary}', "");
Expect(0, 65663, '\p{^linearbsyllabary}', "");
Expect(0, 65663, '\P{linearbsyllabary}', "");
Expect(1, 65663, '\P{^linearbsyllabary}', "");
Expect(0, 1, '\p{linearbsyllabary}', "");
Expect(1, 1, '\p{^linearbsyllabary}', "");
Expect(1, 1, '\P{linearbsyllabary}', "");
Expect(0, 1, '\P{^linearbsyllabary}', "");
Expect(1, 65663, '\p{ linear	b-syllabary}', "");
Expect(0, 65663, '\p{^ linear	b-syllabary}', "");
Expect(0, 65663, '\P{ linear	b-syllabary}', "");
Expect(1, 65663, '\P{^ linear	b-syllabary}', "");
Expect(0, 1, '\p{ linear	b-syllabary}', "");
Expect(1, 1, '\p{^ linear	b-syllabary}', "");
Expect(1, 1, '\P{ linear	b-syllabary}', "");
Expect(0, 1, '\P{^ linear	b-syllabary}', "");
Error('\p{:=_	IS_LINEAR-B_Syllabary}');
Error('\P{:=_	IS_LINEAR-B_Syllabary}');
Expect(1, 65663, '\p{islinearbsyllabary}', "");
Expect(0, 65663, '\p{^islinearbsyllabary}', "");
Expect(0, 65663, '\P{islinearbsyllabary}', "");
Expect(1, 65663, '\P{^islinearbsyllabary}', "");
Expect(0, 1, '\p{islinearbsyllabary}', "");
Expect(1, 1, '\p{^islinearbsyllabary}', "");
Expect(1, 1, '\P{islinearbsyllabary}', "");
Expect(0, 1, '\P{^islinearbsyllabary}', "");
Expect(1, 65663, '\p{		Is	Linear-BSyllabary}', "");
Expect(0, 65663, '\p{^		Is	Linear-BSyllabary}', "");
Expect(0, 65663, '\P{		Is	Linear-BSyllabary}', "");
Expect(1, 65663, '\P{^		Is	Linear-BSyllabary}', "");
Expect(0, 1, '\p{		Is	Linear-BSyllabary}', "");
Expect(1, 1, '\p{^		Is	Linear-BSyllabary}', "");
Expect(1, 1, '\P{		Is	Linear-BSyllabary}', "");
Expect(0, 1, '\P{^		Is	Linear-BSyllabary}', "");
Error('\p{__In/a/linear_BSyllabary}');
Error('\P{__In/a/linear_BSyllabary}');
Expect(1, 65663, '\p{inlinearbsyllabary}', "");
Expect(0, 65663, '\p{^inlinearbsyllabary}', "");
Expect(0, 65663, '\P{inlinearbsyllabary}', "");
Expect(1, 65663, '\P{^inlinearbsyllabary}', "");
Expect(0, 1, '\p{inlinearbsyllabary}', "");
Expect(1, 1, '\p{^inlinearbsyllabary}', "");
Expect(1, 1, '\P{inlinearbsyllabary}', "");
Expect(0, 1, '\P{^inlinearbsyllabary}', "");
Expect(1, 65663, '\p{_ InLinear b_SYLLABARY}', "");
Expect(0, 65663, '\p{^_ InLinear b_SYLLABARY}', "");
Expect(0, 65663, '\P{_ InLinear b_SYLLABARY}', "");
Expect(1, 65663, '\P{^_ InLinear b_SYLLABARY}', "");
Expect(0, 1, '\p{_ InLinear b_SYLLABARY}', "");
Expect(1, 1, '\p{^_ InLinear b_SYLLABARY}', "");
Expect(1, 1, '\P{_ InLinear b_SYLLABARY}', "");
Expect(0, 1, '\P{^_ InLinear b_SYLLABARY}', "");
Error('\p{-_HANGUL-JAMO Extended_B/a/}');
Error('\P{-_HANGUL-JAMO Extended_B/a/}');
Expect(1, 55295, '\p{hanguljamoextendedb}', "");
Expect(0, 55295, '\p{^hanguljamoextendedb}', "");
Expect(0, 55295, '\P{hanguljamoextendedb}', "");
Expect(1, 55295, '\P{^hanguljamoextendedb}', "");
Expect(0, 55215, '\p{hanguljamoextendedb}', "");
Expect(1, 55215, '\p{^hanguljamoextendedb}', "");
Expect(1, 55215, '\P{hanguljamoextendedb}', "");
Expect(0, 55215, '\P{^hanguljamoextendedb}', "");
Expect(1, 55295, '\p{	Hangul Jamo Extended-B}', "");
Expect(0, 55295, '\p{^	Hangul Jamo Extended-B}', "");
Expect(0, 55295, '\P{	Hangul Jamo Extended-B}', "");
Expect(1, 55295, '\P{^	Hangul Jamo Extended-B}', "");
Expect(0, 55215, '\p{	Hangul Jamo Extended-B}', "");
Expect(1, 55215, '\p{^	Hangul Jamo Extended-B}', "");
Expect(1, 55215, '\P{	Hangul Jamo Extended-B}', "");
Expect(0, 55215, '\P{^	Hangul Jamo Extended-B}', "");
Error('\p{-_Is:=Hanguljamo Extended-B}');
Error('\P{-_Is:=Hanguljamo Extended-B}');
Expect(1, 55295, '\p{ishanguljamoextendedb}', "");
Expect(0, 55295, '\p{^ishanguljamoextendedb}', "");
Expect(0, 55295, '\P{ishanguljamoextendedb}', "");
Expect(1, 55295, '\P{^ishanguljamoextendedb}', "");
Expect(0, 55215, '\p{ishanguljamoextendedb}', "");
Expect(1, 55215, '\p{^ishanguljamoextendedb}', "");
Expect(1, 55215, '\P{ishanguljamoextendedb}', "");
Expect(0, 55215, '\P{^ishanguljamoextendedb}', "");
Expect(1, 55295, '\p{	isHangul-Jamo extended B}', "");
Expect(0, 55295, '\p{^	isHangul-Jamo extended B}', "");
Expect(0, 55295, '\P{	isHangul-Jamo extended B}', "");
Expect(1, 55295, '\P{^	isHangul-Jamo extended B}', "");
Expect(0, 55215, '\p{	isHangul-Jamo extended B}', "");
Expect(1, 55215, '\p{^	isHangul-Jamo extended B}', "");
Expect(1, 55215, '\P{	isHangul-Jamo extended B}', "");
Expect(0, 55215, '\P{^	isHangul-Jamo extended B}', "");
Error('\p{-	InHangul:=JAMO	extended B}');
Error('\P{-	InHangul:=JAMO	extended B}');
Expect(1, 55295, '\p{inhanguljamoextendedb}', "");
Expect(0, 55295, '\p{^inhanguljamoextendedb}', "");
Expect(0, 55295, '\P{inhanguljamoextendedb}', "");
Expect(1, 55295, '\P{^inhanguljamoextendedb}', "");
Expect(0, 55215, '\p{inhanguljamoextendedb}', "");
Expect(1, 55215, '\p{^inhanguljamoextendedb}', "");
Expect(1, 55215, '\P{inhanguljamoextendedb}', "");
Expect(0, 55215, '\P{^inhanguljamoextendedb}', "");
Expect(1, 55295, '\p{ _In hangul	Jamo	extended_B}', "");
Expect(0, 55295, '\p{^ _In hangul	Jamo	extended_B}', "");
Expect(0, 55295, '\P{ _In hangul	Jamo	extended_B}', "");
Expect(1, 55295, '\P{^ _In hangul	Jamo	extended_B}', "");
Expect(0, 55215, '\p{ _In hangul	Jamo	extended_B}', "");
Expect(1, 55215, '\p{^ _In hangul	Jamo	extended_B}', "");
Expect(1, 55215, '\P{ _In hangul	Jamo	extended_B}', "");
Expect(0, 55215, '\P{^ _In hangul	Jamo	extended_B}', "");
Error('\p{:=In	Buginese}');
Error('\P{:=In	Buginese}');
Expect(1, 6687, '\p{inbuginese}', "");
Expect(0, 6687, '\p{^inbuginese}', "");
Expect(0, 6687, '\P{inbuginese}', "");
Expect(1, 6687, '\P{^inbuginese}', "");
Expect(0, 6655, '\p{inbuginese}', "");
Expect(1, 6655, '\p{^inbuginese}', "");
Expect(1, 6655, '\P{inbuginese}', "");
Expect(0, 6655, '\P{^inbuginese}', "");
Expect(1, 6687, '\p{ -InBuginese}', "");
Expect(0, 6687, '\p{^ -InBuginese}', "");
Expect(0, 6687, '\P{ -InBuginese}', "");
Expect(1, 6687, '\P{^ -InBuginese}', "");
Expect(0, 6655, '\p{ -InBuginese}', "");
Expect(1, 6655, '\p{^ -InBuginese}', "");
Expect(1, 6655, '\P{ -InBuginese}', "");
Expect(0, 6655, '\P{^ -InBuginese}', "");
Error('\p{/a/--IN	Tagbanwa}');
Error('\P{/a/--IN	Tagbanwa}');
Expect(1, 6015, '\p{intagbanwa}', "");
Expect(0, 6015, '\p{^intagbanwa}', "");
Expect(0, 6015, '\P{intagbanwa}', "");
Expect(1, 6015, '\P{^intagbanwa}', "");
Expect(0, 5983, '\p{intagbanwa}', "");
Expect(1, 5983, '\p{^intagbanwa}', "");
Expect(1, 5983, '\P{intagbanwa}', "");
Expect(0, 5983, '\P{^intagbanwa}', "");
Expect(1, 6015, '\p{	IN_TAGBANWA}', "");
Expect(0, 6015, '\p{^	IN_TAGBANWA}', "");
Expect(0, 6015, '\P{	IN_TAGBANWA}', "");
Expect(1, 6015, '\P{^	IN_TAGBANWA}', "");
Expect(0, 5983, '\p{	IN_TAGBANWA}', "");
Expect(1, 5983, '\p{^	IN_TAGBANWA}', "");
Expect(1, 5983, '\P{	IN_TAGBANWA}', "");
Expect(0, 5983, '\P{^	IN_TAGBANWA}', "");
Error('\p{ :=XID	Start}');
Error('\P{ :=XID	Start}');
Expect(1, 90, '\p{xidstart}', "");
Expect(0, 90, '\p{^xidstart}', "");
Expect(0, 90, '\P{xidstart}', "");
Expect(1, 90, '\P{^xidstart}', "");
Expect(0, 64, '\p{xidstart}', "");
Expect(1, 64, '\p{^xidstart}', "");
Expect(1, 64, '\P{xidstart}', "");
Expect(0, 64, '\P{^xidstart}', "");
Expect(1, 90, '\p{--XID	start}', "");
Expect(0, 90, '\p{^--XID	start}', "");
Expect(0, 90, '\P{--XID	start}', "");
Expect(1, 90, '\P{^--XID	start}', "");
Expect(0, 64, '\p{--XID	start}', "");
Expect(1, 64, '\p{^--XID	start}', "");
Expect(1, 64, '\P{--XID	start}', "");
Expect(0, 64, '\P{^--XID	start}', "");
Error('\p{-:=Is	XID	START}');
Error('\P{-:=Is	XID	START}');
Expect(1, 90, '\p{isxidstart}', "");
Expect(0, 90, '\p{^isxidstart}', "");
Expect(0, 90, '\P{isxidstart}', "");
Expect(1, 90, '\P{^isxidstart}', "");
Expect(0, 64, '\p{isxidstart}', "");
Expect(1, 64, '\p{^isxidstart}', "");
Expect(1, 64, '\P{isxidstart}', "");
Expect(0, 64, '\P{^isxidstart}', "");
Expect(1, 90, '\p{_-Is-xid-start}', "");
Expect(0, 90, '\p{^_-Is-xid-start}', "");
Expect(0, 90, '\P{_-Is-xid-start}', "");
Expect(1, 90, '\P{^_-Is-xid-start}', "");
Expect(0, 64, '\p{_-Is-xid-start}', "");
Expect(1, 64, '\p{^_-Is-xid-start}', "");
Expect(1, 64, '\P{_-Is-xid-start}', "");
Expect(0, 64, '\P{^_-Is-xid-start}', "");
Error('\p{ 	XIDS/a/}');
Error('\P{ 	XIDS/a/}');
Expect(1, 90, '\p{xids}', "");
Expect(0, 90, '\p{^xids}', "");
Expect(0, 90, '\P{xids}', "");
Expect(1, 90, '\P{^xids}', "");
Expect(0, 64, '\p{xids}', "");
Expect(1, 64, '\p{^xids}', "");
Expect(1, 64, '\P{xids}', "");
Expect(0, 64, '\P{^xids}', "");
Expect(1, 90, '\p{		XIDS}', "");
Expect(0, 90, '\p{^		XIDS}', "");
Expect(0, 90, '\P{		XIDS}', "");
Expect(1, 90, '\P{^		XIDS}', "");
Expect(0, 64, '\p{		XIDS}', "");
Expect(1, 64, '\p{^		XIDS}', "");
Expect(1, 64, '\P{		XIDS}', "");
Expect(0, 64, '\P{^		XIDS}', "");
Error('\p{:= _Is_XIDS}');
Error('\P{:= _Is_XIDS}');
Expect(1, 90, '\p{isxids}', "");
Expect(0, 90, '\p{^isxids}', "");
Expect(0, 90, '\P{isxids}', "");
Expect(1, 90, '\P{^isxids}', "");
Expect(0, 64, '\p{isxids}', "");
Expect(1, 64, '\p{^isxids}', "");
Expect(1, 64, '\P{isxids}', "");
Expect(0, 64, '\P{^isxids}', "");
Expect(1, 90, '\p{	 Is-XIDS}', "");
Expect(0, 90, '\p{^	 Is-XIDS}', "");
Expect(0, 90, '\P{	 Is-XIDS}', "");
Expect(1, 90, '\P{^	 Is-XIDS}', "");
Expect(0, 64, '\p{	 Is-XIDS}', "");
Expect(1, 64, '\p{^	 Is-XIDS}', "");
Expect(1, 64, '\P{	 Is-XIDS}', "");
Expect(0, 64, '\P{^	 Is-XIDS}', "");
Error('\p{_:=Phonetic-Extensions-supplement}');
Error('\P{_:=Phonetic-Extensions-supplement}');
Expect(1, 7615, '\p{phoneticextensionssupplement}', "");
Expect(0, 7615, '\p{^phoneticextensionssupplement}', "");
Expect(0, 7615, '\P{phoneticextensionssupplement}', "");
Expect(1, 7615, '\P{^phoneticextensionssupplement}', "");
Expect(0, 7551, '\p{phoneticextensionssupplement}', "");
Expect(1, 7551, '\p{^phoneticextensionssupplement}', "");
Expect(1, 7551, '\P{phoneticextensionssupplement}', "");
Expect(0, 7551, '\P{^phoneticextensionssupplement}', "");
Expect(1, 7615, '\p{--Phonetic-ExtensionsSupplement}', "");
Expect(0, 7615, '\p{^--Phonetic-ExtensionsSupplement}', "");
Expect(0, 7615, '\P{--Phonetic-ExtensionsSupplement}', "");
Expect(1, 7615, '\P{^--Phonetic-ExtensionsSupplement}', "");
Expect(0, 7551, '\p{--Phonetic-ExtensionsSupplement}', "");
Expect(1, 7551, '\p{^--Phonetic-ExtensionsSupplement}', "");
Expect(1, 7551, '\P{--Phonetic-ExtensionsSupplement}', "");
Expect(0, 7551, '\P{^--Phonetic-ExtensionsSupplement}', "");
Error('\p{/a/_is-Phonetic-Extensions SUPPLEMENT}');
Error('\P{/a/_is-Phonetic-Extensions SUPPLEMENT}');
Expect(1, 7615, '\p{isphoneticextensionssupplement}', "");
Expect(0, 7615, '\p{^isphoneticextensionssupplement}', "");
Expect(0, 7615, '\P{isphoneticextensionssupplement}', "");
Expect(1, 7615, '\P{^isphoneticextensionssupplement}', "");
Expect(0, 7551, '\p{isphoneticextensionssupplement}', "");
Expect(1, 7551, '\p{^isphoneticextensionssupplement}', "");
Expect(1, 7551, '\P{isphoneticextensionssupplement}', "");
Expect(0, 7551, '\P{^isphoneticextensionssupplement}', "");
Expect(1, 7615, '\p{--Is	PHONETICextensions	Supplement}', "");
Expect(0, 7615, '\p{^--Is	PHONETICextensions	Supplement}', "");
Expect(0, 7615, '\P{--Is	PHONETICextensions	Supplement}', "");
Expect(1, 7615, '\P{^--Is	PHONETICextensions	Supplement}', "");
Expect(0, 7551, '\p{--Is	PHONETICextensions	Supplement}', "");
Expect(1, 7551, '\p{^--Is	PHONETICextensions	Supplement}', "");
Expect(1, 7551, '\P{--Is	PHONETICextensions	Supplement}', "");
Expect(0, 7551, '\P{^--Is	PHONETICextensions	Supplement}', "");
Error('\p{-INPhonetic:=extensions	supplement}');
Error('\P{-INPhonetic:=extensions	supplement}');
Expect(1, 7615, '\p{inphoneticextensionssupplement}', "");
Expect(0, 7615, '\p{^inphoneticextensionssupplement}', "");
Expect(0, 7615, '\P{inphoneticextensionssupplement}', "");
Expect(1, 7615, '\P{^inphoneticextensionssupplement}', "");
Expect(0, 7551, '\p{inphoneticextensionssupplement}', "");
Expect(1, 7551, '\p{^inphoneticextensionssupplement}', "");
Expect(1, 7551, '\P{inphoneticextensionssupplement}', "");
Expect(0, 7551, '\P{^inphoneticextensionssupplement}', "");
Expect(1, 7615, '\p{		IN-PHONETIC_extensions Supplement}', "");
Expect(0, 7615, '\p{^		IN-PHONETIC_extensions Supplement}', "");
Expect(0, 7615, '\P{		IN-PHONETIC_extensions Supplement}', "");
Expect(1, 7615, '\P{^		IN-PHONETIC_extensions Supplement}', "");
Expect(0, 7551, '\p{		IN-PHONETIC_extensions Supplement}', "");
Expect(1, 7551, '\p{^		IN-PHONETIC_extensions Supplement}', "");
Expect(1, 7551, '\P{		IN-PHONETIC_extensions Supplement}', "");
Expect(0, 7551, '\P{^		IN-PHONETIC_extensions Supplement}', "");
Error('\p{:=Modifier Tone	LETTERS}');
Error('\P{:=Modifier Tone	LETTERS}');
Expect(1, 42783, '\p{modifiertoneletters}', "");
Expect(0, 42783, '\p{^modifiertoneletters}', "");
Expect(0, 42783, '\P{modifiertoneletters}', "");
Expect(1, 42783, '\P{^modifiertoneletters}', "");
Expect(0, 42751, '\p{modifiertoneletters}', "");
Expect(1, 42751, '\p{^modifiertoneletters}', "");
Expect(1, 42751, '\P{modifiertoneletters}', "");
Expect(0, 42751, '\P{^modifiertoneletters}', "");
Expect(1, 42783, '\p{	-MODIFIER Tone	letters}', "");
Expect(0, 42783, '\p{^	-MODIFIER Tone	letters}', "");
Expect(0, 42783, '\P{	-MODIFIER Tone	letters}', "");
Expect(1, 42783, '\P{^	-MODIFIER Tone	letters}', "");
Expect(0, 42751, '\p{	-MODIFIER Tone	letters}', "");
Expect(1, 42751, '\p{^	-MODIFIER Tone	letters}', "");
Expect(1, 42751, '\P{	-MODIFIER Tone	letters}', "");
Expect(0, 42751, '\P{^	-MODIFIER Tone	letters}', "");
Error('\p{ /a/is	modifier_Tone letters}');
Error('\P{ /a/is	modifier_Tone letters}');
Expect(1, 42783, '\p{ismodifiertoneletters}', "");
Expect(0, 42783, '\p{^ismodifiertoneletters}', "");
Expect(0, 42783, '\P{ismodifiertoneletters}', "");
Expect(1, 42783, '\P{^ismodifiertoneletters}', "");
Expect(0, 42751, '\p{ismodifiertoneletters}', "");
Expect(1, 42751, '\p{^ismodifiertoneletters}', "");
Expect(1, 42751, '\P{ismodifiertoneletters}', "");
Expect(0, 42751, '\P{^ismodifiertoneletters}', "");
Expect(1, 42783, '\p{_Is	Modifier	TONE-LETTERS}', "");
Expect(0, 42783, '\p{^_Is	Modifier	TONE-LETTERS}', "");
Expect(0, 42783, '\P{_Is	Modifier	TONE-LETTERS}', "");
Expect(1, 42783, '\P{^_Is	Modifier	TONE-LETTERS}', "");
Expect(0, 42751, '\p{_Is	Modifier	TONE-LETTERS}', "");
Expect(1, 42751, '\p{^_Is	Modifier	TONE-LETTERS}', "");
Expect(1, 42751, '\P{_Is	Modifier	TONE-LETTERS}', "");
Expect(0, 42751, '\P{^_Is	Modifier	TONE-LETTERS}', "");
Error('\p{-_In:=modifier	tone letters}');
Error('\P{-_In:=modifier	tone letters}');
Expect(1, 42783, '\p{inmodifiertoneletters}', "");
Expect(0, 42783, '\p{^inmodifiertoneletters}', "");
Expect(0, 42783, '\P{inmodifiertoneletters}', "");
Expect(1, 42783, '\P{^inmodifiertoneletters}', "");
Expect(0, 42751, '\p{inmodifiertoneletters}', "");
Expect(1, 42751, '\p{^inmodifiertoneletters}', "");
Expect(1, 42751, '\P{inmodifiertoneletters}', "");
Expect(0, 42751, '\P{^inmodifiertoneletters}', "");
Expect(1, 42783, '\p{  In	ModifierTone Letters}', "");
Expect(0, 42783, '\p{^  In	ModifierTone Letters}', "");
Expect(0, 42783, '\P{  In	ModifierTone Letters}', "");
Expect(1, 42783, '\P{^  In	ModifierTone Letters}', "");
Expect(0, 42751, '\p{  In	ModifierTone Letters}', "");
Expect(1, 42751, '\p{^  In	ModifierTone Letters}', "");
Expect(1, 42751, '\P{  In	ModifierTone Letters}', "");
Expect(0, 42751, '\P{^  In	ModifierTone Letters}', "");
Error('\p{:=	Changes WHEN-Casefolded}');
Error('\P{:=	Changes WHEN-Casefolded}');
Expect(1, 90, '\p{changeswhencasefolded}', "");
Expect(0, 90, '\p{^changeswhencasefolded}', "");
Expect(0, 90, '\P{changeswhencasefolded}', "");
Expect(1, 90, '\P{^changeswhencasefolded}', "");
Expect(0, 64, '\p{changeswhencasefolded}', "");
Expect(1, 64, '\p{^changeswhencasefolded}', "");
Expect(1, 64, '\P{changeswhencasefolded}', "");
Expect(0, 64, '\P{^changeswhencasefolded}', "");
Expect(1, 90, '\p{_Changes_Whencasefolded}', "");
Expect(0, 90, '\p{^_Changes_Whencasefolded}', "");
Expect(0, 90, '\P{_Changes_Whencasefolded}', "");
Expect(1, 90, '\P{^_Changes_Whencasefolded}', "");
Expect(0, 64, '\p{_Changes_Whencasefolded}', "");
Expect(1, 64, '\p{^_Changes_Whencasefolded}', "");
Expect(1, 64, '\P{_Changes_Whencasefolded}', "");
Expect(0, 64, '\P{^_Changes_Whencasefolded}', "");
Error('\p{--Is:=changes	when Casefolded}');
Error('\P{--Is:=changes	when Casefolded}');
Expect(1, 90, '\p{ischangeswhencasefolded}', "");
Expect(0, 90, '\p{^ischangeswhencasefolded}', "");
Expect(0, 90, '\P{ischangeswhencasefolded}', "");
Expect(1, 90, '\P{^ischangeswhencasefolded}', "");
Expect(0, 64, '\p{ischangeswhencasefolded}', "");
Expect(1, 64, '\p{^ischangeswhencasefolded}', "");
Expect(1, 64, '\P{ischangeswhencasefolded}', "");
Expect(0, 64, '\P{^ischangeswhencasefolded}', "");
Expect(1, 90, '\p{	-is_changes_when_Casefolded}', "");
Expect(0, 90, '\p{^	-is_changes_when_Casefolded}', "");
Expect(0, 90, '\P{	-is_changes_when_Casefolded}', "");
Expect(1, 90, '\P{^	-is_changes_when_Casefolded}', "");
Expect(0, 64, '\p{	-is_changes_when_Casefolded}', "");
Expect(1, 64, '\p{^	-is_changes_when_Casefolded}', "");
Expect(1, 64, '\P{	-is_changes_when_Casefolded}', "");
Expect(0, 64, '\P{^	-is_changes_when_Casefolded}', "");
Error('\p{-CWCF/a/}');
Error('\P{-CWCF/a/}');
Expect(1, 90, '\p{cwcf}', "");
Expect(0, 90, '\p{^cwcf}', "");
Expect(0, 90, '\P{cwcf}', "");
Expect(1, 90, '\P{^cwcf}', "");
Expect(0, 64, '\p{cwcf}', "");
Expect(1, 64, '\p{^cwcf}', "");
Expect(1, 64, '\P{cwcf}', "");
Expect(0, 64, '\P{^cwcf}', "");
Expect(1, 90, '\p{-CWCF}', "");
Expect(0, 90, '\p{^-CWCF}', "");
Expect(0, 90, '\P{-CWCF}', "");
Expect(1, 90, '\P{^-CWCF}', "");
Expect(0, 64, '\p{-CWCF}', "");
Expect(1, 64, '\p{^-CWCF}', "");
Expect(1, 64, '\P{-CWCF}', "");
Expect(0, 64, '\P{^-CWCF}', "");
Error('\p{__IS-CWCF/a/}');
Error('\P{__IS-CWCF/a/}');
Expect(1, 90, '\p{iscwcf}', "");
Expect(0, 90, '\p{^iscwcf}', "");
Expect(0, 90, '\P{iscwcf}', "");
Expect(1, 90, '\P{^iscwcf}', "");
Expect(0, 64, '\p{iscwcf}', "");
Expect(1, 64, '\p{^iscwcf}', "");
Expect(1, 64, '\P{iscwcf}', "");
Expect(0, 64, '\P{^iscwcf}', "");
Expect(1, 90, '\p{-_IS-CWCF}', "");
Expect(0, 90, '\p{^-_IS-CWCF}', "");
Expect(0, 90, '\P{-_IS-CWCF}', "");
Expect(1, 90, '\P{^-_IS-CWCF}', "");
Expect(0, 64, '\p{-_IS-CWCF}', "");
Expect(1, 64, '\p{^-_IS-CWCF}', "");
Expect(1, 64, '\P{-_IS-CWCF}', "");
Expect(0, 64, '\P{^-_IS-CWCF}', "");
Error('\p{ _Private Use	Area/a/}');
Error('\P{ _Private Use	Area/a/}');
Expect(1, 63743, '\p{privateusearea}', "");
Expect(0, 63743, '\p{^privateusearea}', "");
Expect(0, 63743, '\P{privateusearea}', "");
Expect(1, 63743, '\P{^privateusearea}', "");
Expect(0, 1, '\p{privateusearea}', "");
Expect(1, 1, '\p{^privateusearea}', "");
Expect(1, 1, '\P{privateusearea}', "");
Expect(0, 1, '\P{^privateusearea}', "");
Expect(1, 63743, '\p{_-private_Use	Area}', "");
Expect(0, 63743, '\p{^_-private_Use	Area}', "");
Expect(0, 63743, '\P{_-private_Use	Area}', "");
Expect(1, 63743, '\P{^_-private_Use	Area}', "");
Expect(0, 1, '\p{_-private_Use	Area}', "");
Expect(1, 1, '\p{^_-private_Use	Area}', "");
Expect(1, 1, '\P{_-private_Use	Area}', "");
Expect(0, 1, '\P{^_-private_Use	Area}', "");
Error('\p{_	Is	Private/a/USE	area}');
Error('\P{_	Is	Private/a/USE	area}');
Expect(1, 63743, '\p{isprivateusearea}', "");
Expect(0, 63743, '\p{^isprivateusearea}', "");
Expect(0, 63743, '\P{isprivateusearea}', "");
Expect(1, 63743, '\P{^isprivateusearea}', "");
Expect(0, 1, '\p{isprivateusearea}', "");
Expect(1, 1, '\p{^isprivateusearea}', "");
Expect(1, 1, '\P{isprivateusearea}', "");
Expect(0, 1, '\P{^isprivateusearea}', "");
Expect(1, 63743, '\p{	Is_Private	use area}', "");
Expect(0, 63743, '\p{^	Is_Private	use area}', "");
Expect(0, 63743, '\P{	Is_Private	use area}', "");
Expect(1, 63743, '\P{^	Is_Private	use area}', "");
Expect(0, 1, '\p{	Is_Private	use area}', "");
Expect(1, 1, '\p{^	Is_Private	use area}', "");
Expect(1, 1, '\P{	Is_Private	use area}', "");
Expect(0, 1, '\P{^	Is_Private	use area}', "");
Error('\p{/a/ _InPRIVATEUse-AREA}');
Error('\P{/a/ _InPRIVATEUse-AREA}');
Expect(1, 63743, '\p{inprivateusearea}', "");
Expect(0, 63743, '\p{^inprivateusearea}', "");
Expect(0, 63743, '\P{inprivateusearea}', "");
Expect(1, 63743, '\P{^inprivateusearea}', "");
Expect(0, 1, '\p{inprivateusearea}', "");
Expect(1, 1, '\p{^inprivateusearea}', "");
Expect(1, 1, '\P{inprivateusearea}', "");
Expect(0, 1, '\P{^inprivateusearea}', "");
Expect(1, 63743, '\p{- in	Privateuse_Area}', "");
Expect(0, 63743, '\p{^- in	Privateuse_Area}', "");
Expect(0, 63743, '\P{- in	Privateuse_Area}', "");
Expect(1, 63743, '\P{^- in	Privateuse_Area}', "");
Expect(0, 1, '\p{- in	Privateuse_Area}', "");
Expect(1, 1, '\p{^- in	Privateuse_Area}', "");
Expect(1, 1, '\P{- in	Privateuse_Area}', "");
Expect(0, 1, '\P{^- in	Privateuse_Area}', "");
Error('\p{--InPrivateUse:=}');
Error('\P{--InPrivateUse:=}');
Expect(1, 63743, '\p{inprivateuse}', "");
Expect(0, 63743, '\p{^inprivateuse}', "");
Expect(0, 63743, '\P{inprivateuse}', "");
Expect(1, 63743, '\P{^inprivateuse}', "");
Expect(0, 1, '\p{inprivateuse}', "");
Expect(1, 1, '\p{^inprivateuse}', "");
Expect(1, 1, '\P{inprivateuse}', "");
Expect(0, 1, '\P{^inprivateuse}', "");
Expect(1, 63743, '\p{-IN-Private	Use}', "");
Expect(0, 63743, '\p{^-IN-Private	Use}', "");
Expect(0, 63743, '\P{-IN-Private	Use}', "");
Expect(1, 63743, '\P{^-IN-Private	Use}', "");
Expect(0, 1, '\p{-IN-Private	Use}', "");
Expect(1, 1, '\p{^-IN-Private	Use}', "");
Expect(1, 1, '\P{-IN-Private	Use}', "");
Expect(0, 1, '\P{^-IN-Private	Use}', "");
Error('\p{ Lycian/a/}');
Error('\P{ Lycian/a/}');
Expect(1, 66204, '\p{lycian}', "");
Expect(0, 66204, '\p{^lycian}', "");
Expect(0, 66204, '\P{lycian}', "");
Expect(1, 66204, '\P{^lycian}', "");
Expect(0, 66175, '\p{lycian}', "");
Expect(1, 66175, '\p{^lycian}', "");
Expect(1, 66175, '\P{lycian}', "");
Expect(0, 66175, '\P{^lycian}', "");
Expect(1, 66204, '\p{	_Lycian}', "");
Expect(0, 66204, '\p{^	_Lycian}', "");
Expect(0, 66204, '\P{	_Lycian}', "");
Expect(1, 66204, '\P{^	_Lycian}', "");
Expect(0, 66175, '\p{	_Lycian}', "");
Expect(1, 66175, '\p{^	_Lycian}', "");
Expect(1, 66175, '\P{	_Lycian}', "");
Expect(0, 66175, '\P{^	_Lycian}', "");
Error('\p{_Is/a/lycian}');
Error('\P{_Is/a/lycian}');
Expect(1, 66204, '\p{islycian}', "");
Expect(0, 66204, '\p{^islycian}', "");
Expect(0, 66204, '\P{islycian}', "");
Expect(1, 66204, '\P{^islycian}', "");
Expect(0, 66175, '\p{islycian}', "");
Expect(1, 66175, '\p{^islycian}', "");
Expect(1, 66175, '\P{islycian}', "");
Expect(0, 66175, '\P{^islycian}', "");
Expect(1, 66204, '\p{-_IS_lycian}', "");
Expect(0, 66204, '\p{^-_IS_lycian}', "");
Expect(0, 66204, '\P{-_IS_lycian}', "");
Expect(1, 66204, '\P{^-_IS_lycian}', "");
Expect(0, 66175, '\p{-_IS_lycian}', "");
Expect(1, 66175, '\p{^-_IS_lycian}', "");
Expect(1, 66175, '\P{-_IS_lycian}', "");
Expect(0, 66175, '\P{^-_IS_lycian}', "");
Error('\p{ /a/LYCI}');
Error('\P{ /a/LYCI}');
Expect(1, 66204, '\p{lyci}', "");
Expect(0, 66204, '\p{^lyci}', "");
Expect(0, 66204, '\P{lyci}', "");
Expect(1, 66204, '\P{^lyci}', "");
Expect(0, 66175, '\p{lyci}', "");
Expect(1, 66175, '\p{^lyci}', "");
Expect(1, 66175, '\P{lyci}', "");
Expect(0, 66175, '\P{^lyci}', "");
Expect(1, 66204, '\p{ LYCI}', "");
Expect(0, 66204, '\p{^ LYCI}', "");
Expect(0, 66204, '\P{ LYCI}', "");
Expect(1, 66204, '\P{^ LYCI}', "");
Expect(0, 66175, '\p{ LYCI}', "");
Expect(1, 66175, '\p{^ LYCI}', "");
Expect(1, 66175, '\P{ LYCI}', "");
Expect(0, 66175, '\P{^ LYCI}', "");
Error('\p{-:=IsLyci}');
Error('\P{-:=IsLyci}');
Expect(1, 66204, '\p{islyci}', "");
Expect(0, 66204, '\p{^islyci}', "");
Expect(0, 66204, '\P{islyci}', "");
Expect(1, 66204, '\P{^islyci}', "");
Expect(0, 66175, '\p{islyci}', "");
Expect(1, 66175, '\p{^islyci}', "");
Expect(1, 66175, '\P{islyci}', "");
Expect(0, 66175, '\P{^islyci}', "");
Expect(1, 66204, '\p{-	ISLYCI}', "");
Expect(0, 66204, '\p{^-	ISLYCI}', "");
Expect(0, 66204, '\P{-	ISLYCI}', "");
Expect(1, 66204, '\P{^-	ISLYCI}', "");
Expect(0, 66175, '\p{-	ISLYCI}', "");
Expect(1, 66175, '\p{^-	ISLYCI}', "");
Expect(1, 66175, '\P{-	ISLYCI}', "");
Expect(0, 66175, '\P{^-	ISLYCI}', "");
Error('\p{/a/ number}');
Error('\P{/a/ number}');
Expect(1, 57, '\p{number}', "");
Expect(0, 57, '\p{^number}', "");
Expect(0, 57, '\P{number}', "");
Expect(1, 57, '\P{^number}', "");
Expect(0, 47, '\p{number}', "");
Expect(1, 47, '\p{^number}', "");
Expect(1, 47, '\P{number}', "");
Expect(0, 47, '\P{^number}', "");
Expect(1, 57, '\p{	number}', "");
Expect(0, 57, '\p{^	number}', "");
Expect(0, 57, '\P{	number}', "");
Expect(1, 57, '\P{^	number}', "");
Expect(0, 47, '\p{	number}', "");
Expect(1, 47, '\p{^	number}', "");
Expect(1, 47, '\P{	number}', "");
Expect(0, 47, '\P{^	number}', "");
Error('\p{	 isNumber/a/}');
Error('\P{	 isNumber/a/}');
Expect(1, 57, '\p{isnumber}', "");
Expect(0, 57, '\p{^isnumber}', "");
Expect(0, 57, '\P{isnumber}', "");
Expect(1, 57, '\P{^isnumber}', "");
Expect(0, 47, '\p{isnumber}', "");
Expect(1, 47, '\p{^isnumber}', "");
Expect(1, 47, '\P{isnumber}', "");
Expect(0, 47, '\P{^isnumber}', "");
Expect(1, 57, '\p{_	Is number}', "");
Expect(0, 57, '\p{^_	Is number}', "");
Expect(0, 57, '\P{_	Is number}', "");
Expect(1, 57, '\P{^_	Is number}', "");
Expect(0, 47, '\p{_	Is number}', "");
Expect(1, 47, '\p{^_	Is number}', "");
Expect(1, 47, '\P{_	Is number}', "");
Expect(0, 47, '\P{^_	Is number}', "");
Error('\p{/a/_-N}');
Error('\P{/a/_-N}');
Expect(1, 57, '\p{n}', "");
Expect(0, 57, '\p{^n}', "");
Expect(0, 57, '\P{n}', "");
Expect(1, 57, '\P{^n}', "");
Expect(0, 47, '\p{n}', "");
Expect(1, 47, '\p{^n}', "");
Expect(1, 47, '\P{n}', "");
Expect(0, 47, '\P{^n}', "");
Expect(1, 57, '\p{ N}', "");
Expect(0, 57, '\p{^ N}', "");
Expect(0, 57, '\P{ N}', "");
Expect(1, 57, '\P{^ N}', "");
Expect(0, 47, '\p{ N}', "");
Expect(1, 47, '\p{^ N}', "");
Expect(1, 47, '\P{ N}', "");
Expect(0, 47, '\P{^ N}', "");
Error('\p{:=_ Is N}');
Error('\P{:=_ Is N}');
Expect(1, 57, '\p{isn}', "");
Expect(0, 57, '\p{^isn}', "");
Expect(0, 57, '\P{isn}', "");
Expect(1, 57, '\P{^isn}', "");
Expect(0, 47, '\p{isn}', "");
Expect(1, 47, '\p{^isn}', "");
Expect(1, 47, '\P{isn}', "");
Expect(0, 47, '\P{^isn}', "");
Expect(1, 57, '\p{is-n}', "");
Expect(0, 57, '\p{^is-n}', "");
Expect(0, 57, '\P{is-n}', "");
Expect(1, 57, '\P{^is-n}', "");
Expect(0, 47, '\p{is-n}', "");
Expect(1, 47, '\p{^is-n}', "");
Expect(1, 47, '\P{is-n}', "");
Expect(0, 47, '\P{^is-n}', "");
Error('\p{/a/_PosixDigit}');
Error('\P{/a/_PosixDigit}');
Expect(1, 57, '\p{posixdigit}', "");
Expect(0, 57, '\p{^posixdigit}', "");
Expect(0, 57, '\P{posixdigit}', "");
Expect(1, 57, '\P{^posixdigit}', "");
Expect(0, 47, '\p{posixdigit}', "");
Expect(1, 47, '\p{^posixdigit}', "");
Expect(1, 47, '\P{posixdigit}', "");
Expect(0, 47, '\P{^posixdigit}', "");
Expect(1, 57, '\p{		PosixDigit}', "");
Expect(0, 57, '\p{^		PosixDigit}', "");
Expect(0, 57, '\P{		PosixDigit}', "");
Expect(1, 57, '\P{^		PosixDigit}', "");
Expect(0, 47, '\p{		PosixDigit}', "");
Expect(1, 47, '\p{^		PosixDigit}', "");
Expect(1, 47, '\P{		PosixDigit}', "");
Expect(0, 47, '\P{^		PosixDigit}', "");
Error('\p{ /a/IS_POSIXDIGIT}');
Error('\P{ /a/IS_POSIXDIGIT}');
Expect(1, 57, '\p{isposixdigit}', "");
Expect(0, 57, '\p{^isposixdigit}', "");
Expect(0, 57, '\P{isposixdigit}', "");
Expect(1, 57, '\P{^isposixdigit}', "");
Expect(0, 47, '\p{isposixdigit}', "");
Expect(1, 47, '\p{^isposixdigit}', "");
Expect(1, 47, '\P{isposixdigit}', "");
Expect(0, 47, '\P{^isposixdigit}', "");
Expect(1, 57, '\p{	_IS_PosixDigit}', "");
Expect(0, 57, '\p{^	_IS_PosixDigit}', "");
Expect(0, 57, '\P{	_IS_PosixDigit}', "");
Expect(1, 57, '\P{^	_IS_PosixDigit}', "");
Expect(0, 47, '\p{	_IS_PosixDigit}', "");
Expect(1, 47, '\p{^	_IS_PosixDigit}', "");
Expect(1, 47, '\P{	_IS_PosixDigit}', "");
Expect(0, 47, '\P{^	_IS_PosixDigit}', "");
Error('\p{ _georgian:=}');
Error('\P{ _georgian:=}');
Expect(1, 4293, '\p{georgian}', "");
Expect(0, 4293, '\p{^georgian}', "");
Expect(0, 4293, '\P{georgian}', "");
Expect(1, 4293, '\P{^georgian}', "");
Expect(0, 4255, '\p{georgian}', "");
Expect(1, 4255, '\p{^georgian}', "");
Expect(1, 4255, '\P{georgian}', "");
Expect(0, 4255, '\P{^georgian}', "");
Expect(1, 4293, '\p{	Georgian}', "");
Expect(0, 4293, '\p{^	Georgian}', "");
Expect(0, 4293, '\P{	Georgian}', "");
Expect(1, 4293, '\P{^	Georgian}', "");
Expect(0, 4255, '\p{	Georgian}', "");
Expect(1, 4255, '\p{^	Georgian}', "");
Expect(1, 4255, '\P{	Georgian}', "");
Expect(0, 4255, '\P{^	Georgian}', "");
Error('\p{:=		IS Georgian}');
Error('\P{:=		IS Georgian}');
Expect(1, 4293, '\p{isgeorgian}', "");
Expect(0, 4293, '\p{^isgeorgian}', "");
Expect(0, 4293, '\P{isgeorgian}', "");
Expect(1, 4293, '\P{^isgeorgian}', "");
Expect(0, 4255, '\p{isgeorgian}', "");
Expect(1, 4255, '\p{^isgeorgian}', "");
Expect(1, 4255, '\P{isgeorgian}', "");
Expect(0, 4255, '\P{^isgeorgian}', "");
Expect(1, 4293, '\p{	-is	georgian}', "");
Expect(0, 4293, '\p{^	-is	georgian}', "");
Expect(0, 4293, '\P{	-is	georgian}', "");
Expect(1, 4293, '\P{^	-is	georgian}', "");
Expect(0, 4255, '\p{	-is	georgian}', "");
Expect(1, 4255, '\p{^	-is	georgian}', "");
Expect(1, 4255, '\P{	-is	georgian}', "");
Expect(0, 4255, '\P{^	-is	georgian}', "");
Error('\p{	geor:=}');
Error('\P{	geor:=}');
Expect(1, 4293, '\p{geor}', "");
Expect(0, 4293, '\p{^geor}', "");
Expect(0, 4293, '\P{geor}', "");
Expect(1, 4293, '\P{^geor}', "");
Expect(0, 4255, '\p{geor}', "");
Expect(1, 4255, '\p{^geor}', "");
Expect(1, 4255, '\P{geor}', "");
Expect(0, 4255, '\P{^geor}', "");
Expect(1, 4293, '\p{  Geor}', "");
Expect(0, 4293, '\p{^  Geor}', "");
Expect(0, 4293, '\P{  Geor}', "");
Expect(1, 4293, '\P{^  Geor}', "");
Expect(0, 4255, '\p{  Geor}', "");
Expect(1, 4255, '\p{^  Geor}', "");
Expect(1, 4255, '\P{  Geor}', "");
Expect(0, 4255, '\P{^  Geor}', "");
Error('\p{_Is Geor:=}');
Error('\P{_Is Geor:=}');
Expect(1, 4293, '\p{isgeor}', "");
Expect(0, 4293, '\p{^isgeor}', "");
Expect(0, 4293, '\P{isgeor}', "");
Expect(1, 4293, '\P{^isgeor}', "");
Expect(0, 4255, '\p{isgeor}', "");
Expect(1, 4255, '\p{^isgeor}', "");
Expect(1, 4255, '\P{isgeor}', "");
Expect(0, 4255, '\P{^isgeor}', "");
Expect(1, 4293, '\p{ ISgeor}', "");
Expect(0, 4293, '\p{^ ISgeor}', "");
Expect(0, 4293, '\P{ ISgeor}', "");
Expect(1, 4293, '\P{^ ISgeor}', "");
Expect(0, 4255, '\p{ ISgeor}', "");
Expect(1, 4255, '\p{^ ISgeor}', "");
Expect(1, 4255, '\P{ ISgeor}', "");
Expect(0, 4255, '\P{^ ISgeor}', "");
Error('\p{:= noBLOCK}');
Error('\P{:= noBLOCK}');
Expect(1, 2303, '\p{noblock}', "");
Expect(0, 2303, '\p{^noblock}', "");
Expect(0, 2303, '\P{noblock}', "");
Expect(1, 2303, '\P{^noblock}', "");
Expect(0, 2143, '\p{noblock}', "");
Expect(1, 2143, '\p{^noblock}', "");
Expect(1, 2143, '\P{noblock}', "");
Expect(0, 2143, '\P{^noblock}', "");
Expect(1, 2303, '\p{-NOblock}', "");
Expect(0, 2303, '\p{^-NOblock}', "");
Expect(0, 2303, '\P{-NOblock}', "");
Expect(1, 2303, '\P{^-NOblock}', "");
Expect(0, 2143, '\p{-NOblock}', "");
Expect(1, 2143, '\p{^-NOblock}', "");
Expect(1, 2143, '\P{-NOblock}', "");
Expect(0, 2143, '\P{^-NOblock}', "");
Error('\p{	/a/Is no	Block}');
Error('\P{	/a/Is no	Block}');
Expect(1, 2303, '\p{isnoblock}', "");
Expect(0, 2303, '\p{^isnoblock}', "");
Expect(0, 2303, '\P{isnoblock}', "");
Expect(1, 2303, '\P{^isnoblock}', "");
Expect(0, 2143, '\p{isnoblock}', "");
Expect(1, 2143, '\p{^isnoblock}', "");
Expect(1, 2143, '\P{isnoblock}', "");
Expect(0, 2143, '\P{^isnoblock}', "");
Expect(1, 2303, '\p{-	is No-block}', "");
Expect(0, 2303, '\p{^-	is No-block}', "");
Expect(0, 2303, '\P{-	is No-block}', "");
Expect(1, 2303, '\P{^-	is No-block}', "");
Expect(0, 2143, '\p{-	is No-block}', "");
Expect(1, 2143, '\p{^-	is No-block}', "");
Expect(1, 2143, '\P{-	is No-block}', "");
Expect(0, 2143, '\P{^-	is No-block}', "");
Error('\p{--IN_No:=BLOCK}');
Error('\P{--IN_No:=BLOCK}');
Expect(1, 2303, '\p{innoblock}', "");
Expect(0, 2303, '\p{^innoblock}', "");
Expect(0, 2303, '\P{innoblock}', "");
Expect(1, 2303, '\P{^innoblock}', "");
Expect(0, 2143, '\p{innoblock}', "");
Expect(1, 2143, '\p{^innoblock}', "");
Expect(1, 2143, '\P{innoblock}', "");
Expect(0, 2143, '\P{^innoblock}', "");
Expect(1, 2303, '\p{	IN_No-Block}', "");
Expect(0, 2303, '\p{^	IN_No-Block}', "");
Expect(0, 2303, '\P{	IN_No-Block}', "");
Expect(1, 2303, '\P{^	IN_No-Block}', "");
Expect(0, 2143, '\p{	IN_No-Block}', "");
Expect(1, 2143, '\p{^	IN_No-Block}', "");
Expect(1, 2143, '\P{	IN_No-Block}', "");
Expect(0, 2143, '\P{^	IN_No-Block}', "");
Error('\p{ /a/assigned}');
Error('\P{ /a/assigned}');
Expect(1, 887, '\p{assigned}', "");
Expect(0, 887, '\p{^assigned}', "");
Expect(0, 887, '\P{assigned}', "");
Expect(1, 887, '\P{^assigned}', "");
Expect(0, 889, '\p{assigned}', "");
Expect(1, 889, '\p{^assigned}', "");
Expect(1, 889, '\P{assigned}', "");
Expect(0, 889, '\P{^assigned}', "");
Expect(1, 887, '\p{_Assigned}', "");
Expect(0, 887, '\p{^_Assigned}', "");
Expect(0, 887, '\P{_Assigned}', "");
Expect(1, 887, '\P{^_Assigned}', "");
Expect(0, 889, '\p{_Assigned}', "");
Expect(1, 889, '\p{^_Assigned}', "");
Expect(1, 889, '\P{_Assigned}', "");
Expect(0, 889, '\P{^_Assigned}', "");
Error('\p{__is_assigned:=}');
Error('\P{__is_assigned:=}');
Expect(1, 887, '\p{isassigned}', "");
Expect(0, 887, '\p{^isassigned}', "");
Expect(0, 887, '\P{isassigned}', "");
Expect(1, 887, '\P{^isassigned}', "");
Expect(0, 889, '\p{isassigned}', "");
Expect(1, 889, '\p{^isassigned}', "");
Expect(1, 889, '\P{isassigned}', "");
Expect(0, 889, '\P{^isassigned}', "");
Expect(1, 887, '\p{_ is_ASSIGNED}', "");
Expect(0, 887, '\p{^_ is_ASSIGNED}', "");
Expect(0, 887, '\P{_ is_ASSIGNED}', "");
Expect(1, 887, '\P{^_ is_ASSIGNED}', "");
Expect(0, 889, '\p{_ is_ASSIGNED}', "");
Expect(1, 889, '\p{^_ is_ASSIGNED}', "");
Expect(1, 889, '\P{_ is_ASSIGNED}', "");
Expect(0, 889, '\P{^_ is_ASSIGNED}', "");
Error('\p{:= -VERTICAL	Forms}');
Error('\P{:= -VERTICAL	Forms}');
Expect(1, 65055, '\p{verticalforms}', "");
Expect(0, 65055, '\p{^verticalforms}', "");
Expect(0, 65055, '\P{verticalforms}', "");
Expect(1, 65055, '\P{^verticalforms}', "");
Expect(0, 65039, '\p{verticalforms}', "");
Expect(1, 65039, '\p{^verticalforms}', "");
Expect(1, 65039, '\P{verticalforms}', "");
Expect(0, 65039, '\P{^verticalforms}', "");
Expect(1, 65055, '\p{-	Vertical	Forms}', "");
Expect(0, 65055, '\p{^-	Vertical	Forms}', "");
Expect(0, 65055, '\P{-	Vertical	Forms}', "");
Expect(1, 65055, '\P{^-	Vertical	Forms}', "");
Expect(0, 65039, '\p{-	Vertical	Forms}', "");
Expect(1, 65039, '\p{^-	Vertical	Forms}', "");
Expect(1, 65039, '\P{-	Vertical	Forms}', "");
Expect(0, 65039, '\P{^-	Vertical	Forms}', "");
Error('\p{_:=IsVertical_FORMS}');
Error('\P{_:=IsVertical_FORMS}');
Expect(1, 65055, '\p{isverticalforms}', "");
Expect(0, 65055, '\p{^isverticalforms}', "");
Expect(0, 65055, '\P{isverticalforms}', "");
Expect(1, 65055, '\P{^isverticalforms}', "");
Expect(0, 65039, '\p{isverticalforms}', "");
Expect(1, 65039, '\p{^isverticalforms}', "");
Expect(1, 65039, '\P{isverticalforms}', "");
Expect(0, 65039, '\P{^isverticalforms}', "");
Expect(1, 65055, '\p{  IS_VERTICAL-FORMS}', "");
Expect(0, 65055, '\p{^  IS_VERTICAL-FORMS}', "");
Expect(0, 65055, '\P{  IS_VERTICAL-FORMS}', "");
Expect(1, 65055, '\P{^  IS_VERTICAL-FORMS}', "");
Expect(0, 65039, '\p{  IS_VERTICAL-FORMS}', "");
Expect(1, 65039, '\p{^  IS_VERTICAL-FORMS}', "");
Expect(1, 65039, '\P{  IS_VERTICAL-FORMS}', "");
Expect(0, 65039, '\P{^  IS_VERTICAL-FORMS}', "");
Error('\p{/a/- IN	VERTICAL Forms}');
Error('\P{/a/- IN	VERTICAL Forms}');
Expect(1, 65055, '\p{inverticalforms}', "");
Expect(0, 65055, '\p{^inverticalforms}', "");
Expect(0, 65055, '\P{inverticalforms}', "");
Expect(1, 65055, '\P{^inverticalforms}', "");
Expect(0, 65039, '\p{inverticalforms}', "");
Expect(1, 65039, '\p{^inverticalforms}', "");
Expect(1, 65039, '\P{inverticalforms}', "");
Expect(0, 65039, '\P{^inverticalforms}', "");
Expect(1, 65055, '\p{-In_Vertical Forms}', "");
Expect(0, 65055, '\p{^-In_Vertical Forms}', "");
Expect(0, 65055, '\P{-In_Vertical Forms}', "");
Expect(1, 65055, '\P{^-In_Vertical Forms}', "");
Expect(0, 65039, '\p{-In_Vertical Forms}', "");
Expect(1, 65039, '\p{^-In_Vertical Forms}', "");
Expect(1, 65039, '\P{-In_Vertical Forms}', "");
Expect(0, 65039, '\P{^-In_Vertical Forms}', "");
Error('\p{__cjk-Compatibility/a/}');
Error('\P{__cjk-Compatibility/a/}');
Expect(1, 13311, '\p{cjkcompatibility}', "");
Expect(0, 13311, '\p{^cjkcompatibility}', "");
Expect(0, 13311, '\P{cjkcompatibility}', "");
Expect(1, 13311, '\P{^cjkcompatibility}', "");
Expect(0, 13055, '\p{cjkcompatibility}', "");
Expect(1, 13055, '\p{^cjkcompatibility}', "");
Expect(1, 13055, '\P{cjkcompatibility}', "");
Expect(0, 13055, '\P{^cjkcompatibility}', "");
Expect(1, 13311, '\p{	_CJK Compatibility}', "");
Expect(0, 13311, '\p{^	_CJK Compatibility}', "");
Expect(0, 13311, '\P{	_CJK Compatibility}', "");
Expect(1, 13311, '\P{^	_CJK Compatibility}', "");
Expect(0, 13055, '\p{	_CJK Compatibility}', "");
Expect(1, 13055, '\p{^	_CJK Compatibility}', "");
Expect(1, 13055, '\P{	_CJK Compatibility}', "");
Expect(0, 13055, '\P{^	_CJK Compatibility}', "");
Error('\p{ Is-CJK/a/compatibility}');
Error('\P{ Is-CJK/a/compatibility}');
Expect(1, 13311, '\p{iscjkcompatibility}', "");
Expect(0, 13311, '\p{^iscjkcompatibility}', "");
Expect(0, 13311, '\P{iscjkcompatibility}', "");
Expect(1, 13311, '\P{^iscjkcompatibility}', "");
Expect(0, 13055, '\p{iscjkcompatibility}', "");
Expect(1, 13055, '\p{^iscjkcompatibility}', "");
Expect(1, 13055, '\P{iscjkcompatibility}', "");
Expect(0, 13055, '\P{^iscjkcompatibility}', "");
Expect(1, 13311, '\p{	Is CJK	Compatibility}', "");
Expect(0, 13311, '\p{^	Is CJK	Compatibility}', "");
Expect(0, 13311, '\P{	Is CJK	Compatibility}', "");
Expect(1, 13311, '\P{^	Is CJK	Compatibility}', "");
Expect(0, 13055, '\p{	Is CJK	Compatibility}', "");
Expect(1, 13055, '\p{^	Is CJK	Compatibility}', "");
Expect(1, 13055, '\P{	Is CJK	Compatibility}', "");
Expect(0, 13055, '\P{^	Is CJK	Compatibility}', "");
Error('\p{_-In:=CJK	compatibility}');
Error('\P{_-In:=CJK	compatibility}');
Expect(1, 13311, '\p{incjkcompatibility}', "");
Expect(0, 13311, '\p{^incjkcompatibility}', "");
Expect(0, 13311, '\P{incjkcompatibility}', "");
Expect(1, 13311, '\P{^incjkcompatibility}', "");
Expect(0, 13055, '\p{incjkcompatibility}', "");
Expect(1, 13055, '\p{^incjkcompatibility}', "");
Expect(1, 13055, '\P{incjkcompatibility}', "");
Expect(0, 13055, '\P{^incjkcompatibility}', "");
Expect(1, 13311, '\p{		IN	cjk	Compatibility}', "");
Expect(0, 13311, '\p{^		IN	cjk	Compatibility}', "");
Expect(0, 13311, '\P{		IN	cjk	Compatibility}', "");
Expect(1, 13311, '\P{^		IN	cjk	Compatibility}', "");
Expect(0, 13055, '\p{		IN	cjk	Compatibility}', "");
Expect(1, 13055, '\p{^		IN	cjk	Compatibility}', "");
Expect(1, 13055, '\P{		IN	cjk	Compatibility}', "");
Expect(0, 13055, '\P{^		IN	cjk	Compatibility}', "");
Error('\p{ cjk	unified_ideographs:=extension-A}');
Error('\P{ cjk	unified_ideographs:=extension-A}');
Expect(1, 19903, '\p{cjkunifiedideographsextensiona}', "");
Expect(0, 19903, '\p{^cjkunifiedideographsextensiona}', "");
Expect(0, 19903, '\P{cjkunifiedideographsextensiona}', "");
Expect(1, 19903, '\P{^cjkunifiedideographsextensiona}', "");
Expect(0, 13311, '\p{cjkunifiedideographsextensiona}', "");
Expect(1, 13311, '\p{^cjkunifiedideographsextensiona}', "");
Expect(1, 13311, '\P{cjkunifiedideographsextensiona}', "");
Expect(0, 13311, '\P{^cjkunifiedideographsextensiona}', "");
Expect(1, 19903, '\p{ _CJK UNIFIED_Ideographs-ExtensionA}', "");
Expect(0, 19903, '\p{^ _CJK UNIFIED_Ideographs-ExtensionA}', "");
Expect(0, 19903, '\P{ _CJK UNIFIED_Ideographs-ExtensionA}', "");
Expect(1, 19903, '\P{^ _CJK UNIFIED_Ideographs-ExtensionA}', "");
Expect(0, 13311, '\p{ _CJK UNIFIED_Ideographs-ExtensionA}', "");
Expect(1, 13311, '\p{^ _CJK UNIFIED_Ideographs-ExtensionA}', "");
Expect(1, 13311, '\P{ _CJK UNIFIED_Ideographs-ExtensionA}', "");
Expect(0, 13311, '\P{^ _CJK UNIFIED_Ideographs-ExtensionA}', "");
Error('\p{ 	IS/a/CJK unifiedIDEOGRAPHS EXTENSION_a}');
Error('\P{ 	IS/a/CJK unifiedIDEOGRAPHS EXTENSION_a}');
Expect(1, 19903, '\p{iscjkunifiedideographsextensiona}', "");
Expect(0, 19903, '\p{^iscjkunifiedideographsextensiona}', "");
Expect(0, 19903, '\P{iscjkunifiedideographsextensiona}', "");
Expect(1, 19903, '\P{^iscjkunifiedideographsextensiona}', "");
Expect(0, 13311, '\p{iscjkunifiedideographsextensiona}', "");
Expect(1, 13311, '\p{^iscjkunifiedideographsextensiona}', "");
Expect(1, 13311, '\P{iscjkunifiedideographsextensiona}', "");
Expect(0, 13311, '\P{^iscjkunifiedideographsextensiona}', "");
Expect(1, 19903, '\p{	IS CJKUnified	IDEOGRAPHS-extension_a}', "");
Expect(0, 19903, '\p{^	IS CJKUnified	IDEOGRAPHS-extension_a}', "");
Expect(0, 19903, '\P{	IS CJKUnified	IDEOGRAPHS-extension_a}', "");
Expect(1, 19903, '\P{^	IS CJKUnified	IDEOGRAPHS-extension_a}', "");
Expect(0, 13311, '\p{	IS CJKUnified	IDEOGRAPHS-extension_a}', "");
Expect(1, 13311, '\p{^	IS CJKUnified	IDEOGRAPHS-extension_a}', "");
Expect(1, 13311, '\P{	IS CJKUnified	IDEOGRAPHS-extension_a}', "");
Expect(0, 13311, '\P{^	IS CJKUnified	IDEOGRAPHS-extension_a}', "");
Error('\p{ /a/in_CJK unified-IDEOGRAPHS Extension-A}');
Error('\P{ /a/in_CJK unified-IDEOGRAPHS Extension-A}');
Expect(1, 19903, '\p{incjkunifiedideographsextensiona}', "");
Expect(0, 19903, '\p{^incjkunifiedideographsextensiona}', "");
Expect(0, 19903, '\P{incjkunifiedideographsextensiona}', "");
Expect(1, 19903, '\P{^incjkunifiedideographsextensiona}', "");
Expect(0, 13311, '\p{incjkunifiedideographsextensiona}', "");
Expect(1, 13311, '\p{^incjkunifiedideographsextensiona}', "");
Expect(1, 13311, '\P{incjkunifiedideographsextensiona}', "");
Expect(0, 13311, '\P{^incjkunifiedideographsextensiona}', "");
Expect(1, 19903, '\p{ _InCJK	UNIFIED ideographs Extension A}', "");
Expect(0, 19903, '\p{^ _InCJK	UNIFIED ideographs Extension A}', "");
Expect(0, 19903, '\P{ _InCJK	UNIFIED ideographs Extension A}', "");
Expect(1, 19903, '\P{^ _InCJK	UNIFIED ideographs Extension A}', "");
Expect(0, 13311, '\p{ _InCJK	UNIFIED ideographs Extension A}', "");
Expect(1, 13311, '\p{^ _InCJK	UNIFIED ideographs Extension A}', "");
Expect(1, 13311, '\P{ _InCJK	UNIFIED ideographs Extension A}', "");
Expect(0, 13311, '\P{^ _InCJK	UNIFIED ideographs Extension A}', "");
Error('\p{:= Kharoshthi}');
Error('\P{:= Kharoshthi}');
Expect(1, 68099, '\p{kharoshthi}', "");
Expect(0, 68099, '\p{^kharoshthi}', "");
Expect(0, 68099, '\P{kharoshthi}', "");
Expect(1, 68099, '\P{^kharoshthi}', "");
Expect(0, 68095, '\p{kharoshthi}', "");
Expect(1, 68095, '\p{^kharoshthi}', "");
Expect(1, 68095, '\P{kharoshthi}', "");
Expect(0, 68095, '\P{^kharoshthi}', "");
Expect(1, 68099, '\p{- kharoshthi}', "");
Expect(0, 68099, '\p{^- kharoshthi}', "");
Expect(0, 68099, '\P{- kharoshthi}', "");
Expect(1, 68099, '\P{^- kharoshthi}', "");
Expect(0, 68095, '\p{- kharoshthi}', "");
Expect(1, 68095, '\p{^- kharoshthi}', "");
Expect(1, 68095, '\P{- kharoshthi}', "");
Expect(0, 68095, '\P{^- kharoshthi}', "");
Error('\p{/a/ 	Iskharoshthi}');
Error('\P{/a/ 	Iskharoshthi}');
Expect(1, 68099, '\p{iskharoshthi}', "");
Expect(0, 68099, '\p{^iskharoshthi}', "");
Expect(0, 68099, '\P{iskharoshthi}', "");
Expect(1, 68099, '\P{^iskharoshthi}', "");
Expect(0, 68095, '\p{iskharoshthi}', "");
Expect(1, 68095, '\p{^iskharoshthi}', "");
Expect(1, 68095, '\P{iskharoshthi}', "");
Expect(0, 68095, '\P{^iskharoshthi}', "");
Expect(1, 68099, '\p{	IsKHAROSHTHI}', "");
Expect(0, 68099, '\p{^	IsKHAROSHTHI}', "");
Expect(0, 68099, '\P{	IsKHAROSHTHI}', "");
Expect(1, 68099, '\P{^	IsKHAROSHTHI}', "");
Expect(0, 68095, '\p{	IsKHAROSHTHI}', "");
Expect(1, 68095, '\p{^	IsKHAROSHTHI}', "");
Expect(1, 68095, '\P{	IsKHAROSHTHI}', "");
Expect(0, 68095, '\P{^	IsKHAROSHTHI}', "");
Error('\p{_/a/Khar}');
Error('\P{_/a/Khar}');
Expect(1, 68099, '\p{khar}', "");
Expect(0, 68099, '\p{^khar}', "");
Expect(0, 68099, '\P{khar}', "");
Expect(1, 68099, '\P{^khar}', "");
Expect(0, 68095, '\p{khar}', "");
Expect(1, 68095, '\p{^khar}', "");
Expect(1, 68095, '\P{khar}', "");
Expect(0, 68095, '\P{^khar}', "");
Expect(1, 68099, '\p{	khar}', "");
Expect(0, 68099, '\p{^	khar}', "");
Expect(0, 68099, '\P{	khar}', "");
Expect(1, 68099, '\P{^	khar}', "");
Expect(0, 68095, '\p{	khar}', "");
Expect(1, 68095, '\p{^	khar}', "");
Expect(1, 68095, '\P{	khar}', "");
Expect(0, 68095, '\P{^	khar}', "");
Error('\p{/a/_ Is_KHAR}');
Error('\P{/a/_ Is_KHAR}');
Expect(1, 68099, '\p{iskhar}', "");
Expect(0, 68099, '\p{^iskhar}', "");
Expect(0, 68099, '\P{iskhar}', "");
Expect(1, 68099, '\P{^iskhar}', "");
Expect(0, 68095, '\p{iskhar}', "");
Expect(1, 68095, '\p{^iskhar}', "");
Expect(1, 68095, '\P{iskhar}', "");
Expect(0, 68095, '\P{^iskhar}', "");
Expect(1, 68099, '\p{	Is_Khar}', "");
Expect(0, 68099, '\p{^	Is_Khar}', "");
Expect(0, 68099, '\P{	Is_Khar}', "");
Expect(1, 68099, '\P{^	Is_Khar}', "");
Expect(0, 68095, '\p{	Is_Khar}', "");
Expect(1, 68095, '\p{^	Is_Khar}', "");
Expect(1, 68095, '\P{	Is_Khar}', "");
Expect(0, 68095, '\P{^	Is_Khar}', "");
Error('\p{	 Math	SYMBOL/a/}');
Error('\P{	 Math	SYMBOL/a/}');
Expect(1, 43, '\p{mathsymbol}', "");
Expect(0, 43, '\p{^mathsymbol}', "");
Expect(0, 43, '\P{mathsymbol}', "");
Expect(1, 43, '\P{^mathsymbol}', "");
Expect(0, 42, '\p{mathsymbol}', "");
Expect(1, 42, '\p{^mathsymbol}', "");
Expect(1, 42, '\P{mathsymbol}', "");
Expect(0, 42, '\P{^mathsymbol}', "");
Expect(1, 43, '\p{  math	Symbol}', "");
Expect(0, 43, '\p{^  math	Symbol}', "");
Expect(0, 43, '\P{  math	Symbol}', "");
Expect(1, 43, '\P{^  math	Symbol}', "");
Expect(0, 42, '\p{  math	Symbol}', "");
Expect(1, 42, '\p{^  math	Symbol}', "");
Expect(1, 42, '\P{  math	Symbol}', "");
Expect(0, 42, '\P{^  math	Symbol}', "");
Error('\p{ /a/Is-math	Symbol}');
Error('\P{ /a/Is-math	Symbol}');
Expect(1, 43, '\p{ismathsymbol}', "");
Expect(0, 43, '\p{^ismathsymbol}', "");
Expect(0, 43, '\P{ismathsymbol}', "");
Expect(1, 43, '\P{^ismathsymbol}', "");
Expect(0, 42, '\p{ismathsymbol}', "");
Expect(1, 42, '\p{^ismathsymbol}', "");
Expect(1, 42, '\P{ismathsymbol}', "");
Expect(0, 42, '\P{^ismathsymbol}', "");
Expect(1, 43, '\p{	isMath Symbol}', "");
Expect(0, 43, '\p{^	isMath Symbol}', "");
Expect(0, 43, '\P{	isMath Symbol}', "");
Expect(1, 43, '\P{^	isMath Symbol}', "");
Expect(0, 42, '\p{	isMath Symbol}', "");
Expect(1, 42, '\p{^	isMath Symbol}', "");
Expect(1, 42, '\P{	isMath Symbol}', "");
Expect(0, 42, '\P{^	isMath Symbol}', "");
Error('\p{/a/-sm}');
Error('\P{/a/-sm}');
Expect(1, 43, '\p{sm}', "");
Expect(0, 43, '\p{^sm}', "");
Expect(0, 43, '\P{sm}', "");
Expect(1, 43, '\P{^sm}', "");
Expect(0, 42, '\p{sm}', "");
Expect(1, 42, '\p{^sm}', "");
Expect(1, 42, '\P{sm}', "");
Expect(0, 42, '\P{^sm}', "");
Expect(1, 43, '\p{-Sm}', "");
Expect(0, 43, '\p{^-Sm}', "");
Expect(0, 43, '\P{-Sm}', "");
Expect(1, 43, '\P{^-Sm}', "");
Expect(0, 42, '\p{-Sm}', "");
Expect(1, 42, '\p{^-Sm}', "");
Expect(1, 42, '\P{-Sm}', "");
Expect(0, 42, '\P{^-Sm}', "");
Error('\p{-is-Sm:=}');
Error('\P{-is-Sm:=}');
Expect(1, 43, '\p{issm}', "");
Expect(0, 43, '\p{^issm}', "");
Expect(0, 43, '\P{issm}', "");
Expect(1, 43, '\P{^issm}', "");
Expect(0, 42, '\p{issm}', "");
Expect(1, 42, '\p{^issm}', "");
Expect(1, 42, '\P{issm}', "");
Expect(0, 42, '\P{^issm}', "");
Expect(1, 43, '\p{_	Is SM}', "");
Expect(0, 43, '\p{^_	Is SM}', "");
Expect(0, 43, '\P{_	Is SM}', "");
Expect(1, 43, '\P{^_	Is SM}', "");
Expect(0, 42, '\p{_	Is SM}', "");
Expect(1, 42, '\p{^_	Is SM}', "");
Expect(1, 42, '\P{_	Is SM}', "");
Expect(0, 42, '\P{^_	Is SM}', "");
Error('\p{	/a/TAGALOG}');
Error('\P{	/a/TAGALOG}');
Expect(1, 5900, '\p{tagalog}', "");
Expect(0, 5900, '\p{^tagalog}', "");
Expect(0, 5900, '\P{tagalog}', "");
Expect(1, 5900, '\P{^tagalog}', "");
Expect(0, 5887, '\p{tagalog}', "");
Expect(1, 5887, '\p{^tagalog}', "");
Expect(1, 5887, '\P{tagalog}', "");
Expect(0, 5887, '\P{^tagalog}', "");
Expect(1, 5900, '\p{-_Tagalog}', "");
Expect(0, 5900, '\p{^-_Tagalog}', "");
Expect(0, 5900, '\P{-_Tagalog}', "");
Expect(1, 5900, '\P{^-_Tagalog}', "");
Expect(0, 5887, '\p{-_Tagalog}', "");
Expect(1, 5887, '\p{^-_Tagalog}', "");
Expect(1, 5887, '\P{-_Tagalog}', "");
Expect(0, 5887, '\P{^-_Tagalog}', "");
Error('\p{ ISTagalog:=}');
Error('\P{ ISTagalog:=}');
Expect(1, 5900, '\p{istagalog}', "");
Expect(0, 5900, '\p{^istagalog}', "");
Expect(0, 5900, '\P{istagalog}', "");
Expect(1, 5900, '\P{^istagalog}', "");
Expect(0, 5887, '\p{istagalog}', "");
Expect(1, 5887, '\p{^istagalog}', "");
Expect(1, 5887, '\P{istagalog}', "");
Expect(0, 5887, '\P{^istagalog}', "");
Expect(1, 5900, '\p{__ISTagalog}', "");
Expect(0, 5900, '\p{^__ISTagalog}', "");
Expect(0, 5900, '\P{__ISTagalog}', "");
Expect(1, 5900, '\P{^__ISTagalog}', "");
Expect(0, 5887, '\p{__ISTagalog}', "");
Expect(1, 5887, '\p{^__ISTagalog}', "");
Expect(1, 5887, '\P{__ISTagalog}', "");
Expect(0, 5887, '\P{^__ISTagalog}', "");
Error('\p{:= TGLG}');
Error('\P{:= TGLG}');
Expect(1, 5900, '\p{tglg}', "");
Expect(0, 5900, '\p{^tglg}', "");
Expect(0, 5900, '\P{tglg}', "");
Expect(1, 5900, '\P{^tglg}', "");
Expect(0, 5887, '\p{tglg}', "");
Expect(1, 5887, '\p{^tglg}', "");
Expect(1, 5887, '\P{tglg}', "");
Expect(0, 5887, '\P{^tglg}', "");
Expect(1, 5900, '\p{_ tglg}', "");
Expect(0, 5900, '\p{^_ tglg}', "");
Expect(0, 5900, '\P{_ tglg}', "");
Expect(1, 5900, '\P{^_ tglg}', "");
Expect(0, 5887, '\p{_ tglg}', "");
Expect(1, 5887, '\p{^_ tglg}', "");
Expect(1, 5887, '\P{_ tglg}', "");
Expect(0, 5887, '\P{^_ tglg}', "");
Error('\p{-is:=tglg}');
Error('\P{-is:=tglg}');
Expect(1, 5900, '\p{istglg}', "");
Expect(0, 5900, '\p{^istglg}', "");
Expect(0, 5900, '\P{istglg}', "");
Expect(1, 5900, '\P{^istglg}', "");
Expect(0, 5887, '\p{istglg}', "");
Expect(1, 5887, '\p{^istglg}', "");
Expect(1, 5887, '\P{istglg}', "");
Expect(0, 5887, '\P{^istglg}', "");
Expect(1, 5900, '\p{_is_Tglg}', "");
Expect(0, 5900, '\p{^_is_Tglg}', "");
Expect(0, 5900, '\P{_is_Tglg}', "");
Expect(1, 5900, '\P{^_is_Tglg}', "");
Expect(0, 5887, '\p{_is_Tglg}', "");
Expect(1, 5887, '\p{^_is_Tglg}', "");
Expect(1, 5887, '\P{_is_Tglg}', "");
Expect(0, 5887, '\P{^_is_Tglg}', "");
Error('\p{:=Syriac}');
Error('\P{:=Syriac}');
Expect(1, 1805, '\p{syriac}', "");
Expect(0, 1805, '\p{^syriac}', "");
Expect(0, 1805, '\P{syriac}', "");
Expect(1, 1805, '\P{^syriac}', "");
Expect(0, 1791, '\p{syriac}', "");
Expect(1, 1791, '\p{^syriac}', "");
Expect(1, 1791, '\P{syriac}', "");
Expect(0, 1791, '\P{^syriac}', "");
Expect(1, 1805, '\p{	 syriac}', "");
Expect(0, 1805, '\p{^	 syriac}', "");
Expect(0, 1805, '\P{	 syriac}', "");
Expect(1, 1805, '\P{^	 syriac}', "");
Expect(0, 1791, '\p{	 syriac}', "");
Expect(1, 1791, '\p{^	 syriac}', "");
Expect(1, 1791, '\P{	 syriac}', "");
Expect(0, 1791, '\P{^	 syriac}', "");
Error('\p{-	Is/a/SYRIAC}');
Error('\P{-	Is/a/SYRIAC}');
Expect(1, 1805, '\p{issyriac}', "");
Expect(0, 1805, '\p{^issyriac}', "");
Expect(0, 1805, '\P{issyriac}', "");
Expect(1, 1805, '\P{^issyriac}', "");
Expect(0, 1791, '\p{issyriac}', "");
Expect(1, 1791, '\p{^issyriac}', "");
Expect(1, 1791, '\P{issyriac}', "");
Expect(0, 1791, '\P{^issyriac}', "");
Expect(1, 1805, '\p{- IS-Syriac}', "");
Expect(0, 1805, '\p{^- IS-Syriac}', "");
Expect(0, 1805, '\P{- IS-Syriac}', "");
Expect(1, 1805, '\P{^- IS-Syriac}', "");
Expect(0, 1791, '\p{- IS-Syriac}', "");
Expect(1, 1791, '\p{^- IS-Syriac}', "");
Expect(1, 1791, '\P{- IS-Syriac}', "");
Expect(0, 1791, '\P{^- IS-Syriac}', "");
Error('\p{/a/syrc}');
Error('\P{/a/syrc}');
Expect(1, 1805, '\p{syrc}', "");
Expect(0, 1805, '\p{^syrc}', "");
Expect(0, 1805, '\P{syrc}', "");
Expect(1, 1805, '\P{^syrc}', "");
Expect(0, 1791, '\p{syrc}', "");
Expect(1, 1791, '\p{^syrc}', "");
Expect(1, 1791, '\P{syrc}', "");
Expect(0, 1791, '\P{^syrc}', "");
Expect(1, 1805, '\p{_Syrc}', "");
Expect(0, 1805, '\p{^_Syrc}', "");
Expect(0, 1805, '\P{_Syrc}', "");
Expect(1, 1805, '\P{^_Syrc}', "");
Expect(0, 1791, '\p{_Syrc}', "");
Expect(1, 1791, '\p{^_Syrc}', "");
Expect(1, 1791, '\P{_Syrc}', "");
Expect(0, 1791, '\P{^_Syrc}', "");
Error('\p{_	Is:=Syrc}');
Error('\P{_	Is:=Syrc}');
Expect(1, 1805, '\p{issyrc}', "");
Expect(0, 1805, '\p{^issyrc}', "");
Expect(0, 1805, '\P{issyrc}', "");
Expect(1, 1805, '\P{^issyrc}', "");
Expect(0, 1791, '\p{issyrc}', "");
Expect(1, 1791, '\p{^issyrc}', "");
Expect(1, 1791, '\P{issyrc}', "");
Expect(0, 1791, '\P{^issyrc}', "");
Expect(1, 1805, '\p{--Is_SYRC}', "");
Expect(0, 1805, '\p{^--Is_SYRC}', "");
Expect(0, 1805, '\P{--Is_SYRC}', "");
Expect(1, 1805, '\P{^--Is_SYRC}', "");
Expect(0, 1791, '\p{--Is_SYRC}', "");
Expect(1, 1791, '\p{^--Is_SYRC}', "");
Expect(1, 1791, '\P{--Is_SYRC}', "");
Expect(0, 1791, '\P{^--Is_SYRC}', "");
Error('\p{-_in/a/PHOENICIAN}');
Error('\P{-_in/a/PHOENICIAN}');
Expect(1, 67871, '\p{inphoenician}', "");
Expect(0, 67871, '\p{^inphoenician}', "");
Expect(0, 67871, '\P{inphoenician}', "");
Expect(1, 67871, '\P{^inphoenician}', "");
Expect(0, 67839, '\p{inphoenician}', "");
Expect(1, 67839, '\p{^inphoenician}', "");
Expect(1, 67839, '\P{inphoenician}', "");
Expect(0, 67839, '\P{^inphoenician}', "");
Expect(1, 67871, '\p{_	in	PHOENICIAN}', "");
Expect(0, 67871, '\p{^_	in	PHOENICIAN}', "");
Expect(0, 67871, '\P{_	in	PHOENICIAN}', "");
Expect(1, 67871, '\P{^_	in	PHOENICIAN}', "");
Expect(0, 67839, '\p{_	in	PHOENICIAN}', "");
Expect(1, 67839, '\p{^_	in	PHOENICIAN}', "");
Expect(1, 67839, '\P{_	in	PHOENICIAN}', "");
Expect(0, 67839, '\P{^_	in	PHOENICIAN}', "");
Error('\p{	halfwidth:=AND FULLWIDTH-Forms}');
Error('\P{	halfwidth:=AND FULLWIDTH-Forms}');
Expect(1, 65519, '\p{halfwidthandfullwidthforms}', "");
Expect(0, 65519, '\p{^halfwidthandfullwidthforms}', "");
Expect(0, 65519, '\P{halfwidthandfullwidthforms}', "");
Expect(1, 65519, '\P{^halfwidthandfullwidthforms}', "");
Expect(0, 65279, '\p{halfwidthandfullwidthforms}', "");
Expect(1, 65279, '\p{^halfwidthandfullwidthforms}', "");
Expect(1, 65279, '\P{halfwidthandfullwidthforms}', "");
Expect(0, 65279, '\P{^halfwidthandfullwidthforms}', "");
Expect(1, 65519, '\p{	-Halfwidth and_FULLWIDTH-Forms}', "");
Expect(0, 65519, '\p{^	-Halfwidth and_FULLWIDTH-Forms}', "");
Expect(0, 65519, '\P{	-Halfwidth and_FULLWIDTH-Forms}', "");
Expect(1, 65519, '\P{^	-Halfwidth and_FULLWIDTH-Forms}', "");
Expect(0, 65279, '\p{	-Halfwidth and_FULLWIDTH-Forms}', "");
Expect(1, 65279, '\p{^	-Halfwidth and_FULLWIDTH-Forms}', "");
Expect(1, 65279, '\P{	-Halfwidth and_FULLWIDTH-Forms}', "");
Expect(0, 65279, '\P{^	-Halfwidth and_FULLWIDTH-Forms}', "");
Error('\p{-Is:=HALFWIDTH	AND_Fullwidth FORMS}');
Error('\P{-Is:=HALFWIDTH	AND_Fullwidth FORMS}');
Expect(1, 65519, '\p{ishalfwidthandfullwidthforms}', "");
Expect(0, 65519, '\p{^ishalfwidthandfullwidthforms}', "");
Expect(0, 65519, '\P{ishalfwidthandfullwidthforms}', "");
Expect(1, 65519, '\P{^ishalfwidthandfullwidthforms}', "");
Expect(0, 65279, '\p{ishalfwidthandfullwidthforms}', "");
Expect(1, 65279, '\p{^ishalfwidthandfullwidthforms}', "");
Expect(1, 65279, '\P{ishalfwidthandfullwidthforms}', "");
Expect(0, 65279, '\P{^ishalfwidthandfullwidthforms}', "");
Expect(1, 65519, '\p{_is	halfwidth_andfullwidth	FORMS}', "");
Expect(0, 65519, '\p{^_is	halfwidth_andfullwidth	FORMS}', "");
Expect(0, 65519, '\P{_is	halfwidth_andfullwidth	FORMS}', "");
Expect(1, 65519, '\P{^_is	halfwidth_andfullwidth	FORMS}', "");
Expect(0, 65279, '\p{_is	halfwidth_andfullwidth	FORMS}', "");
Expect(1, 65279, '\p{^_is	halfwidth_andfullwidth	FORMS}', "");
Expect(1, 65279, '\P{_is	halfwidth_andfullwidth	FORMS}', "");
Expect(0, 65279, '\P{^_is	halfwidth_andfullwidth	FORMS}', "");
Error('\p{	In/a/HALFWIDTH-Andfullwidth FORMS}');
Error('\P{	In/a/HALFWIDTH-Andfullwidth FORMS}');
Expect(1, 65519, '\p{inhalfwidthandfullwidthforms}', "");
Expect(0, 65519, '\p{^inhalfwidthandfullwidthforms}', "");
Expect(0, 65519, '\P{inhalfwidthandfullwidthforms}', "");
Expect(1, 65519, '\P{^inhalfwidthandfullwidthforms}', "");
Expect(0, 65279, '\p{inhalfwidthandfullwidthforms}', "");
Expect(1, 65279, '\p{^inhalfwidthandfullwidthforms}', "");
Expect(1, 65279, '\P{inhalfwidthandfullwidthforms}', "");
Expect(0, 65279, '\P{^inhalfwidthandfullwidthforms}', "");
Expect(1, 65519, '\p{ _InHalfwidth-AND	fullwidth FORMS}', "");
Expect(0, 65519, '\p{^ _InHalfwidth-AND	fullwidth FORMS}', "");
Expect(0, 65519, '\P{ _InHalfwidth-AND	fullwidth FORMS}', "");
Expect(1, 65519, '\P{^ _InHalfwidth-AND	fullwidth FORMS}', "");
Expect(0, 65279, '\p{ _InHalfwidth-AND	fullwidth FORMS}', "");
Expect(1, 65279, '\p{^ _InHalfwidth-AND	fullwidth FORMS}', "");
Expect(1, 65279, '\P{ _InHalfwidth-AND	fullwidth FORMS}', "");
Expect(0, 65279, '\P{^ _InHalfwidth-AND	fullwidth FORMS}', "");
Error('\p{/a/	Ancient	GREEK	NUMBERS}');
Error('\P{/a/	Ancient	GREEK	NUMBERS}');
Expect(1, 65935, '\p{ancientgreeknumbers}', "");
Expect(0, 65935, '\p{^ancientgreeknumbers}', "");
Expect(0, 65935, '\P{ancientgreeknumbers}', "");
Expect(1, 65935, '\P{^ancientgreeknumbers}', "");
Expect(0, 65855, '\p{ancientgreeknumbers}', "");
Expect(1, 65855, '\p{^ancientgreeknumbers}', "");
Expect(1, 65855, '\P{ancientgreeknumbers}', "");
Expect(0, 65855, '\P{^ancientgreeknumbers}', "");
Expect(1, 65935, '\p{	-ANCIENT-GreekNumbers}', "");
Expect(0, 65935, '\p{^	-ANCIENT-GreekNumbers}', "");
Expect(0, 65935, '\P{	-ANCIENT-GreekNumbers}', "");
Expect(1, 65935, '\P{^	-ANCIENT-GreekNumbers}', "");
Expect(0, 65855, '\p{	-ANCIENT-GreekNumbers}', "");
Expect(1, 65855, '\p{^	-ANCIENT-GreekNumbers}', "");
Expect(1, 65855, '\P{	-ANCIENT-GreekNumbers}', "");
Expect(0, 65855, '\P{^	-ANCIENT-GreekNumbers}', "");
Error('\p{_	Is ancient-greek_NUMBERS/a/}');
Error('\P{_	Is ancient-greek_NUMBERS/a/}');
Expect(1, 65935, '\p{isancientgreeknumbers}', "");
Expect(0, 65935, '\p{^isancientgreeknumbers}', "");
Expect(0, 65935, '\P{isancientgreeknumbers}', "");
Expect(1, 65935, '\P{^isancientgreeknumbers}', "");
Expect(0, 65855, '\p{isancientgreeknumbers}', "");
Expect(1, 65855, '\p{^isancientgreeknumbers}', "");
Expect(1, 65855, '\P{isancientgreeknumbers}', "");
Expect(0, 65855, '\P{^isancientgreeknumbers}', "");
Expect(1, 65935, '\p{- isANCIENT-Greeknumbers}', "");
Expect(0, 65935, '\p{^- isANCIENT-Greeknumbers}', "");
Expect(0, 65935, '\P{- isANCIENT-Greeknumbers}', "");
Expect(1, 65935, '\P{^- isANCIENT-Greeknumbers}', "");
Expect(0, 65855, '\p{- isANCIENT-Greeknumbers}', "");
Expect(1, 65855, '\p{^- isANCIENT-Greeknumbers}', "");
Expect(1, 65855, '\P{- isANCIENT-Greeknumbers}', "");
Expect(0, 65855, '\P{^- isANCIENT-Greeknumbers}', "");
Error('\p{_-in:=Ancient	greek-NUMBERS}');
Error('\P{_-in:=Ancient	greek-NUMBERS}');
Expect(1, 65935, '\p{inancientgreeknumbers}', "");
Expect(0, 65935, '\p{^inancientgreeknumbers}', "");
Expect(0, 65935, '\P{inancientgreeknumbers}', "");
Expect(1, 65935, '\P{^inancientgreeknumbers}', "");
Expect(0, 65855, '\p{inancientgreeknumbers}', "");
Expect(1, 65855, '\p{^inancientgreeknumbers}', "");
Expect(1, 65855, '\P{inancientgreeknumbers}', "");
Expect(0, 65855, '\P{^inancientgreeknumbers}', "");
Expect(1, 65935, '\p{		IN ANCIENT	Greek_Numbers}', "");
Expect(0, 65935, '\p{^		IN ANCIENT	Greek_Numbers}', "");
Expect(0, 65935, '\P{		IN ANCIENT	Greek_Numbers}', "");
Expect(1, 65935, '\P{^		IN ANCIENT	Greek_Numbers}', "");
Expect(0, 65855, '\p{		IN ANCIENT	Greek_Numbers}', "");
Expect(1, 65855, '\p{^		IN ANCIENT	Greek_Numbers}', "");
Expect(1, 65855, '\P{		IN ANCIENT	Greek_Numbers}', "");
Expect(0, 65855, '\P{^		IN ANCIENT	Greek_Numbers}', "");
Error('\p{-OPTICALCharacter Recognition/a/}');
Error('\P{-OPTICALCharacter Recognition/a/}');
Expect(1, 9311, '\p{opticalcharacterrecognition}', "");
Expect(0, 9311, '\p{^opticalcharacterrecognition}', "");
Expect(0, 9311, '\P{opticalcharacterrecognition}', "");
Expect(1, 9311, '\P{^opticalcharacterrecognition}', "");
Expect(0, 9279, '\p{opticalcharacterrecognition}', "");
Expect(1, 9279, '\p{^opticalcharacterrecognition}', "");
Expect(1, 9279, '\P{opticalcharacterrecognition}', "");
Expect(0, 9279, '\P{^opticalcharacterrecognition}', "");
Expect(1, 9311, '\p{	optical-Character_Recognition}', "");
Expect(0, 9311, '\p{^	optical-Character_Recognition}', "");
Expect(0, 9311, '\P{	optical-Character_Recognition}', "");
Expect(1, 9311, '\P{^	optical-Character_Recognition}', "");
Expect(0, 9279, '\p{	optical-Character_Recognition}', "");
Expect(1, 9279, '\p{^	optical-Character_Recognition}', "");
Expect(1, 9279, '\P{	optical-Character_Recognition}', "");
Expect(0, 9279, '\P{^	optical-Character_Recognition}', "");
Error('\p{/a/-_ISoptical-character	RECOGNITION}');
Error('\P{/a/-_ISoptical-character	RECOGNITION}');
Expect(1, 9311, '\p{isopticalcharacterrecognition}', "");
Expect(0, 9311, '\p{^isopticalcharacterrecognition}', "");
Expect(0, 9311, '\P{isopticalcharacterrecognition}', "");
Expect(1, 9311, '\P{^isopticalcharacterrecognition}', "");
Expect(0, 9279, '\p{isopticalcharacterrecognition}', "");
Expect(1, 9279, '\p{^isopticalcharacterrecognition}', "");
Expect(1, 9279, '\P{isopticalcharacterrecognition}', "");
Expect(0, 9279, '\P{^isopticalcharacterrecognition}', "");
Expect(1, 9311, '\p{	 IS-OPTICALCharacter_recognition}', "");
Expect(0, 9311, '\p{^	 IS-OPTICALCharacter_recognition}', "");
Expect(0, 9311, '\P{	 IS-OPTICALCharacter_recognition}', "");
Expect(1, 9311, '\P{^	 IS-OPTICALCharacter_recognition}', "");
Expect(0, 9279, '\p{	 IS-OPTICALCharacter_recognition}', "");
Expect(1, 9279, '\p{^	 IS-OPTICALCharacter_recognition}', "");
Expect(1, 9279, '\P{	 IS-OPTICALCharacter_recognition}', "");
Expect(0, 9279, '\P{^	 IS-OPTICALCharacter_recognition}', "");
Error('\p{:=In OpticalCharacterRecognition}');
Error('\P{:=In OpticalCharacterRecognition}');
Expect(1, 9311, '\p{inopticalcharacterrecognition}', "");
Expect(0, 9311, '\p{^inopticalcharacterrecognition}', "");
Expect(0, 9311, '\P{inopticalcharacterrecognition}', "");
Expect(1, 9311, '\P{^inopticalcharacterrecognition}', "");
Expect(0, 9279, '\p{inopticalcharacterrecognition}', "");
Expect(1, 9279, '\p{^inopticalcharacterrecognition}', "");
Expect(1, 9279, '\P{inopticalcharacterrecognition}', "");
Expect(0, 9279, '\P{^inopticalcharacterrecognition}', "");
Expect(1, 9311, '\p{_	IN OPTICAL-character-Recognition}', "");
Expect(0, 9311, '\p{^_	IN OPTICAL-character-Recognition}', "");
Expect(0, 9311, '\P{_	IN OPTICAL-character-Recognition}', "");
Expect(1, 9311, '\P{^_	IN OPTICAL-character-Recognition}', "");
Expect(0, 9279, '\p{_	IN OPTICAL-character-Recognition}', "");
Expect(1, 9279, '\p{^_	IN OPTICAL-character-Recognition}', "");
Expect(1, 9279, '\P{_	IN OPTICAL-character-Recognition}', "");
Expect(0, 9279, '\P{^_	IN OPTICAL-character-Recognition}', "");
Error('\p{:=-_Limbu}');
Error('\P{:=-_Limbu}');
Expect(1, 6428, '\p{limbu}', "");
Expect(0, 6428, '\p{^limbu}', "");
Expect(0, 6428, '\P{limbu}', "");
Expect(1, 6428, '\P{^limbu}', "");
Expect(0, 6399, '\p{limbu}', "");
Expect(1, 6399, '\p{^limbu}', "");
Expect(1, 6399, '\P{limbu}', "");
Expect(0, 6399, '\P{^limbu}', "");
Expect(1, 6428, '\p{ -limbu}', "");
Expect(0, 6428, '\p{^ -limbu}', "");
Expect(0, 6428, '\P{ -limbu}', "");
Expect(1, 6428, '\P{^ -limbu}', "");
Expect(0, 6399, '\p{ -limbu}', "");
Expect(1, 6399, '\p{^ -limbu}', "");
Expect(1, 6399, '\P{ -limbu}', "");
Expect(0, 6399, '\P{^ -limbu}', "");
Error('\p{  IS limbu:=}');
Error('\P{  IS limbu:=}');
Expect(1, 6428, '\p{islimbu}', "");
Expect(0, 6428, '\p{^islimbu}', "");
Expect(0, 6428, '\P{islimbu}', "");
Expect(1, 6428, '\P{^islimbu}', "");
Expect(0, 6399, '\p{islimbu}', "");
Expect(1, 6399, '\p{^islimbu}', "");
Expect(1, 6399, '\P{islimbu}', "");
Expect(0, 6399, '\P{^islimbu}', "");
Expect(1, 6428, '\p{__IS_Limbu}', "");
Expect(0, 6428, '\p{^__IS_Limbu}', "");
Expect(0, 6428, '\P{__IS_Limbu}', "");
Expect(1, 6428, '\P{^__IS_Limbu}', "");
Expect(0, 6399, '\p{__IS_Limbu}', "");
Expect(1, 6399, '\p{^__IS_Limbu}', "");
Expect(1, 6399, '\P{__IS_Limbu}', "");
Expect(0, 6399, '\P{^__IS_Limbu}', "");
Error('\p{_ limb:=}');
Error('\P{_ limb:=}');
Expect(1, 6428, '\p{limb}', "");
Expect(0, 6428, '\p{^limb}', "");
Expect(0, 6428, '\P{limb}', "");
Expect(1, 6428, '\P{^limb}', "");
Expect(0, 6399, '\p{limb}', "");
Expect(1, 6399, '\p{^limb}', "");
Expect(1, 6399, '\P{limb}', "");
Expect(0, 6399, '\P{^limb}', "");
Expect(1, 6428, '\p{LIMB}', "");
Expect(0, 6428, '\p{^LIMB}', "");
Expect(0, 6428, '\P{LIMB}', "");
Expect(1, 6428, '\P{^LIMB}', "");
Expect(0, 6399, '\p{LIMB}', "");
Expect(1, 6399, '\p{^LIMB}', "");
Expect(1, 6399, '\P{LIMB}', "");
Expect(0, 6399, '\P{^LIMB}', "");
Error('\p{-/a/Is-Limb}');
Error('\P{-/a/Is-Limb}');
Expect(1, 6428, '\p{islimb}', "");
Expect(0, 6428, '\p{^islimb}', "");
Expect(0, 6428, '\P{islimb}', "");
Expect(1, 6428, '\P{^islimb}', "");
Expect(0, 6399, '\p{islimb}', "");
Expect(1, 6399, '\p{^islimb}', "");
Expect(1, 6399, '\P{islimb}', "");
Expect(0, 6399, '\P{^islimb}', "");
Expect(1, 6428, '\p{-ISlimb}', "");
Expect(0, 6428, '\p{^-ISlimb}', "");
Expect(0, 6428, '\P{-ISlimb}', "");
Expect(1, 6428, '\P{^-ISlimb}', "");
Expect(0, 6399, '\p{-ISlimb}', "");
Expect(1, 6399, '\p{^-ISlimb}', "");
Expect(1, 6399, '\P{-ISlimb}', "");
Expect(0, 6399, '\P{^-ISlimb}', "");
Error('\p{/a/TerminalPunctuation}');
Error('\P{/a/TerminalPunctuation}');
Expect(1, 33, '\p{terminalpunctuation}', "");
Expect(0, 33, '\p{^terminalpunctuation}', "");
Expect(0, 33, '\P{terminalpunctuation}', "");
Expect(1, 33, '\P{^terminalpunctuation}', "");
Expect(0, 32, '\p{terminalpunctuation}', "");
Expect(1, 32, '\p{^terminalpunctuation}', "");
Expect(1, 32, '\P{terminalpunctuation}', "");
Expect(0, 32, '\P{^terminalpunctuation}', "");
Expect(1, 33, '\p{--Terminal PUNCTUATION}', "");
Expect(0, 33, '\p{^--Terminal PUNCTUATION}', "");
Expect(0, 33, '\P{--Terminal PUNCTUATION}', "");
Expect(1, 33, '\P{^--Terminal PUNCTUATION}', "");
Expect(0, 32, '\p{--Terminal PUNCTUATION}', "");
Expect(1, 32, '\p{^--Terminal PUNCTUATION}', "");
Expect(1, 32, '\P{--Terminal PUNCTUATION}', "");
Expect(0, 32, '\P{^--Terminal PUNCTUATION}', "");
Error('\p{_IS/a/TERMINAL Punctuation}');
Error('\P{_IS/a/TERMINAL Punctuation}');
Expect(1, 33, '\p{isterminalpunctuation}', "");
Expect(0, 33, '\p{^isterminalpunctuation}', "");
Expect(0, 33, '\P{isterminalpunctuation}', "");
Expect(1, 33, '\P{^isterminalpunctuation}', "");
Expect(0, 32, '\p{isterminalpunctuation}', "");
Expect(1, 32, '\p{^isterminalpunctuation}', "");
Expect(1, 32, '\P{isterminalpunctuation}', "");
Expect(0, 32, '\P{^isterminalpunctuation}', "");
Expect(1, 33, '\p{ _Isterminal PUNCTUATION}', "");
Expect(0, 33, '\p{^ _Isterminal PUNCTUATION}', "");
Expect(0, 33, '\P{ _Isterminal PUNCTUATION}', "");
Expect(1, 33, '\P{^ _Isterminal PUNCTUATION}', "");
Expect(0, 32, '\p{ _Isterminal PUNCTUATION}', "");
Expect(1, 32, '\p{^ _Isterminal PUNCTUATION}', "");
Expect(1, 32, '\P{ _Isterminal PUNCTUATION}', "");
Expect(0, 32, '\P{^ _Isterminal PUNCTUATION}', "");
Error('\p{:=__Term}');
Error('\P{:=__Term}');
Expect(1, 33, '\p{term}', "");
Expect(0, 33, '\p{^term}', "");
Expect(0, 33, '\P{term}', "");
Expect(1, 33, '\P{^term}', "");
Expect(0, 32, '\p{term}', "");
Expect(1, 32, '\p{^term}', "");
Expect(1, 32, '\P{term}', "");
Expect(0, 32, '\P{^term}', "");
Expect(1, 33, '\p{	Term}', "");
Expect(0, 33, '\p{^	Term}', "");
Expect(0, 33, '\P{	Term}', "");
Expect(1, 33, '\P{^	Term}', "");
Expect(0, 32, '\p{	Term}', "");
Expect(1, 32, '\p{^	Term}', "");
Expect(1, 32, '\P{	Term}', "");
Expect(0, 32, '\P{^	Term}', "");
Error('\p{_:=Is_TERM}');
Error('\P{_:=Is_TERM}');
Expect(1, 33, '\p{isterm}', "");
Expect(0, 33, '\p{^isterm}', "");
Expect(0, 33, '\P{isterm}', "");
Expect(1, 33, '\P{^isterm}', "");
Expect(0, 32, '\p{isterm}', "");
Expect(1, 32, '\p{^isterm}', "");
Expect(1, 32, '\P{isterm}', "");
Expect(0, 32, '\P{^isterm}', "");
Expect(1, 33, '\p{		is_term}', "");
Expect(0, 33, '\p{^		is_term}', "");
Expect(0, 33, '\P{		is_term}', "");
Expect(1, 33, '\P{^		is_term}', "");
Expect(0, 32, '\p{		is_term}', "");
Expect(1, 32, '\p{^		is_term}', "");
Expect(1, 32, '\P{		is_term}', "");
Expect(0, 32, '\P{^		is_term}', "");
Error('\p{:= Other Uppercase}');
Error('\P{:= Other Uppercase}');
Expect(1, 8559, '\p{otheruppercase}', 'deprecated');
Expect(0, 8559, '\p{^otheruppercase}', 'deprecated');
Expect(0, 8559, '\P{otheruppercase}', 'deprecated');
Expect(1, 8559, '\P{^otheruppercase}', 'deprecated');
Expect(0, 8543, '\p{otheruppercase}', 'deprecated');
Expect(1, 8543, '\p{^otheruppercase}', 'deprecated');
Expect(1, 8543, '\P{otheruppercase}', 'deprecated');
Expect(0, 8543, '\P{^otheruppercase}', 'deprecated');
Expect(1, 8559, '\p{-_other	Uppercase}', 'deprecated');
Expect(0, 8559, '\p{^-_other	Uppercase}', 'deprecated');
Expect(0, 8559, '\P{-_other	Uppercase}', 'deprecated');
Expect(1, 8559, '\P{^-_other	Uppercase}', 'deprecated');
Expect(0, 8543, '\p{-_other	Uppercase}', 'deprecated');
Expect(1, 8543, '\p{^-_other	Uppercase}', 'deprecated');
Expect(1, 8543, '\P{-_other	Uppercase}', 'deprecated');
Expect(0, 8543, '\P{^-_other	Uppercase}', 'deprecated');
Error('\p{ 	IS Other Uppercase/a/}');
Error('\P{ 	IS Other Uppercase/a/}');
Expect(1, 8559, '\p{isotheruppercase}', 'deprecated');
Expect(0, 8559, '\p{^isotheruppercase}', 'deprecated');
Expect(0, 8559, '\P{isotheruppercase}', 'deprecated');
Expect(1, 8559, '\P{^isotheruppercase}', 'deprecated');
Expect(0, 8543, '\p{isotheruppercase}', 'deprecated');
Expect(1, 8543, '\p{^isotheruppercase}', 'deprecated');
Expect(1, 8543, '\P{isotheruppercase}', 'deprecated');
Expect(0, 8543, '\P{^isotheruppercase}', 'deprecated');
Expect(1, 8559, '\p{_-is-Other uppercase}', 'deprecated');
Expect(0, 8559, '\p{^_-is-Other uppercase}', 'deprecated');
Expect(0, 8559, '\P{_-is-Other uppercase}', 'deprecated');
Expect(1, 8559, '\P{^_-is-Other uppercase}', 'deprecated');
Expect(0, 8543, '\p{_-is-Other uppercase}', 'deprecated');
Expect(1, 8543, '\p{^_-is-Other uppercase}', 'deprecated');
Expect(1, 8543, '\P{_-is-Other uppercase}', 'deprecated');
Expect(0, 8543, '\P{^_-is-Other uppercase}', 'deprecated');
Error('\p{/a/ OUpper}');
Error('\P{/a/ OUpper}');
Expect(1, 8559, '\p{oupper}', 'deprecated');
Expect(0, 8559, '\p{^oupper}', 'deprecated');
Expect(0, 8559, '\P{oupper}', 'deprecated');
Expect(1, 8559, '\P{^oupper}', 'deprecated');
Expect(0, 8543, '\p{oupper}', 'deprecated');
Expect(1, 8543, '\p{^oupper}', 'deprecated');
Expect(1, 8543, '\P{oupper}', 'deprecated');
Expect(0, 8543, '\P{^oupper}', 'deprecated');
Expect(1, 8559, '\p{-_OUpper}', 'deprecated');
Expect(0, 8559, '\p{^-_OUpper}', 'deprecated');
Expect(0, 8559, '\P{-_OUpper}', 'deprecated');
Expect(1, 8559, '\P{^-_OUpper}', 'deprecated');
Expect(0, 8543, '\p{-_OUpper}', 'deprecated');
Expect(1, 8543, '\p{^-_OUpper}', 'deprecated');
Expect(1, 8543, '\P{-_OUpper}', 'deprecated');
Expect(0, 8543, '\P{^-_OUpper}', 'deprecated');
Error('\p{-:=is	OUpper}');
Error('\P{-:=is	OUpper}');
Expect(1, 8559, '\p{isoupper}', 'deprecated');
Expect(0, 8559, '\p{^isoupper}', 'deprecated');
Expect(0, 8559, '\P{isoupper}', 'deprecated');
Expect(1, 8559, '\P{^isoupper}', 'deprecated');
Expect(0, 8543, '\p{isoupper}', 'deprecated');
Expect(1, 8543, '\p{^isoupper}', 'deprecated');
Expect(1, 8543, '\P{isoupper}', 'deprecated');
Expect(0, 8543, '\P{^isoupper}', 'deprecated');
Expect(1, 8559, '\p{ Is-OUPPER}', 'deprecated');
Expect(0, 8559, '\p{^ Is-OUPPER}', 'deprecated');
Expect(0, 8559, '\P{ Is-OUPPER}', 'deprecated');
Expect(1, 8559, '\P{^ Is-OUPPER}', 'deprecated');
Expect(0, 8543, '\p{ Is-OUPPER}', 'deprecated');
Expect(1, 8543, '\p{^ Is-OUPPER}', 'deprecated');
Expect(1, 8543, '\P{ Is-OUPPER}', 'deprecated');
Expect(0, 8543, '\P{^ Is-OUPPER}', 'deprecated');
Error('\p{-PosixPunct:=}');
Error('\P{-PosixPunct:=}');
Expect(1, 47, '\p{posixpunct}', "");
Expect(0, 47, '\p{^posixpunct}', "");
Expect(0, 47, '\P{posixpunct}', "");
Expect(1, 47, '\P{^posixpunct}', "");
Expect(0, 32, '\p{posixpunct}', "");
Expect(1, 32, '\p{^posixpunct}', "");
Expect(1, 32, '\P{posixpunct}', "");
Expect(0, 32, '\P{^posixpunct}', "");
Expect(1, 47, '\p{ _posixpunct}', "");
Expect(0, 47, '\p{^ _posixpunct}', "");
Expect(0, 47, '\P{ _posixpunct}', "");
Expect(1, 47, '\P{^ _posixpunct}', "");
Expect(0, 32, '\p{ _posixpunct}', "");
Expect(1, 32, '\p{^ _posixpunct}', "");
Expect(1, 32, '\P{ _posixpunct}', "");
Expect(0, 32, '\P{^ _posixpunct}', "");
Error('\p{_Isposixpunct:=}');
Error('\P{_Isposixpunct:=}');
Expect(1, 47, '\p{isposixpunct}', "");
Expect(0, 47, '\p{^isposixpunct}', "");
Expect(0, 47, '\P{isposixpunct}', "");
Expect(1, 47, '\P{^isposixpunct}', "");
Expect(0, 32, '\p{isposixpunct}', "");
Expect(1, 32, '\p{^isposixpunct}', "");
Expect(1, 32, '\P{isposixpunct}', "");
Expect(0, 32, '\P{^isposixpunct}', "");
Expect(1, 47, '\p{	 IS PosixPunct}', "");
Expect(0, 47, '\p{^	 IS PosixPunct}', "");
Expect(0, 47, '\P{	 IS PosixPunct}', "");
Expect(1, 47, '\P{^	 IS PosixPunct}', "");
Expect(0, 32, '\p{	 IS PosixPunct}', "");
Expect(1, 32, '\p{^	 IS PosixPunct}', "");
Expect(1, 32, '\P{	 IS PosixPunct}', "");
Expect(0, 32, '\P{^	 IS PosixPunct}', "");
Error('\p{:=	 block-elements}');
Error('\P{:=	 block-elements}');
Expect(1, 9631, '\p{blockelements}', "");
Expect(0, 9631, '\p{^blockelements}', "");
Expect(0, 9631, '\P{blockelements}', "");
Expect(1, 9631, '\P{^blockelements}', "");
Expect(0, 9599, '\p{blockelements}', "");
Expect(1, 9599, '\p{^blockelements}', "");
Expect(1, 9599, '\P{blockelements}', "");
Expect(0, 9599, '\P{^blockelements}', "");
Expect(1, 9631, '\p{  Block	Elements}', "");
Expect(0, 9631, '\p{^  Block	Elements}', "");
Expect(0, 9631, '\P{  Block	Elements}', "");
Expect(1, 9631, '\P{^  Block	Elements}', "");
Expect(0, 9599, '\p{  Block	Elements}', "");
Expect(1, 9599, '\p{^  Block	Elements}', "");
Expect(1, 9599, '\P{  Block	Elements}', "");
Expect(0, 9599, '\P{^  Block	Elements}', "");
Error('\p{- IS-BLOCK:=Elements}');
Error('\P{- IS-BLOCK:=Elements}');
Expect(1, 9631, '\p{isblockelements}', "");
Expect(0, 9631, '\p{^isblockelements}', "");
Expect(0, 9631, '\P{isblockelements}', "");
Expect(1, 9631, '\P{^isblockelements}', "");
Expect(0, 9599, '\p{isblockelements}', "");
Expect(1, 9599, '\p{^isblockelements}', "");
Expect(1, 9599, '\P{isblockelements}', "");
Expect(0, 9599, '\P{^isblockelements}', "");
Expect(1, 9631, '\p{		Is block-Elements}', "");
Expect(0, 9631, '\p{^		Is block-Elements}', "");
Expect(0, 9631, '\P{		Is block-Elements}', "");
Expect(1, 9631, '\P{^		Is block-Elements}', "");
Expect(0, 9599, '\p{		Is block-Elements}', "");
Expect(1, 9599, '\p{^		Is block-Elements}', "");
Expect(1, 9599, '\P{		Is block-Elements}', "");
Expect(0, 9599, '\P{^		Is block-Elements}', "");
Error('\p{_-In:=Block-ELEMENTS}');
Error('\P{_-In:=Block-ELEMENTS}');
Expect(1, 9631, '\p{inblockelements}', "");
Expect(0, 9631, '\p{^inblockelements}', "");
Expect(0, 9631, '\P{inblockelements}', "");
Expect(1, 9631, '\P{^inblockelements}', "");
Expect(0, 9599, '\p{inblockelements}', "");
Expect(1, 9599, '\p{^inblockelements}', "");
Expect(1, 9599, '\P{inblockelements}', "");
Expect(0, 9599, '\P{^inblockelements}', "");
Expect(1, 9631, '\p{  In	Blockelements}', "");
Expect(0, 9631, '\p{^  In	Blockelements}', "");
Expect(0, 9631, '\P{  In	Blockelements}', "");
Expect(1, 9631, '\P{^  In	Blockelements}', "");
Expect(0, 9599, '\p{  In	Blockelements}', "");
Expect(1, 9599, '\p{^  In	Blockelements}', "");
Expect(1, 9599, '\P{  In	Blockelements}', "");
Expect(0, 9599, '\P{^  In	Blockelements}', "");
Error('\p{/a/_In	KAITHI}');
Error('\P{/a/_In	KAITHI}');
Expect(1, 69839, '\p{inkaithi}', "");
Expect(0, 69839, '\p{^inkaithi}', "");
Expect(0, 69839, '\P{inkaithi}', "");
Expect(1, 69839, '\P{^inkaithi}', "");
Expect(0, 69759, '\p{inkaithi}', "");
Expect(1, 69759, '\p{^inkaithi}', "");
Expect(1, 69759, '\P{inkaithi}', "");
Expect(0, 69759, '\P{^inkaithi}', "");
Expect(1, 69839, '\p{-	inKAITHI}', "");
Expect(0, 69839, '\p{^-	inKAITHI}', "");
Expect(0, 69839, '\P{-	inKAITHI}', "");
Expect(1, 69839, '\P{^-	inKAITHI}', "");
Expect(0, 69759, '\p{-	inKAITHI}', "");
Expect(1, 69759, '\p{^-	inKAITHI}', "");
Expect(1, 69759, '\P{-	inKAITHI}', "");
Expect(0, 69759, '\P{^-	inKAITHI}', "");
Error('\p{/a/	HAN}');
Error('\P{/a/	HAN}');
Expect(1, 11929, '\p{han}', "");
Expect(0, 11929, '\p{^han}', "");
Expect(0, 11929, '\P{han}', "");
Expect(1, 11929, '\P{^han}', "");
Expect(0, 11903, '\p{han}', "");
Expect(1, 11903, '\p{^han}', "");
Expect(1, 11903, '\P{han}', "");
Expect(0, 11903, '\P{^han}', "");
Expect(1, 11929, '\p{--han}', "");
Expect(0, 11929, '\p{^--han}', "");
Expect(0, 11929, '\P{--han}', "");
Expect(1, 11929, '\P{^--han}', "");
Expect(0, 11903, '\p{--han}', "");
Expect(1, 11903, '\p{^--han}', "");
Expect(1, 11903, '\P{--han}', "");
Expect(0, 11903, '\P{^--han}', "");
Error('\p{/a/-Is	han}');
Error('\P{/a/-Is	han}');
Expect(1, 11929, '\p{ishan}', "");
Expect(0, 11929, '\p{^ishan}', "");
Expect(0, 11929, '\P{ishan}', "");
Expect(1, 11929, '\P{^ishan}', "");
Expect(0, 11903, '\p{ishan}', "");
Expect(1, 11903, '\p{^ishan}', "");
Expect(1, 11903, '\P{ishan}', "");
Expect(0, 11903, '\P{^ishan}', "");
Expect(1, 11929, '\p{		IsHAN}', "");
Expect(0, 11929, '\p{^		IsHAN}', "");
Expect(0, 11929, '\P{		IsHAN}', "");
Expect(1, 11929, '\P{^		IsHAN}', "");
Expect(0, 11903, '\p{		IsHAN}', "");
Expect(1, 11903, '\p{^		IsHAN}', "");
Expect(1, 11903, '\P{		IsHAN}', "");
Expect(0, 11903, '\P{^		IsHAN}', "");
Error('\p{_-hani/a/}');
Error('\P{_-hani/a/}');
Expect(1, 11929, '\p{hani}', "");
Expect(0, 11929, '\p{^hani}', "");
Expect(0, 11929, '\P{hani}', "");
Expect(1, 11929, '\P{^hani}', "");
Expect(0, 11903, '\p{hani}', "");
Expect(1, 11903, '\p{^hani}', "");
Expect(1, 11903, '\P{hani}', "");
Expect(0, 11903, '\P{^hani}', "");
Expect(1, 11929, '\p{_Hani}', "");
Expect(0, 11929, '\p{^_Hani}', "");
Expect(0, 11929, '\P{_Hani}', "");
Expect(1, 11929, '\P{^_Hani}', "");
Expect(0, 11903, '\p{_Hani}', "");
Expect(1, 11903, '\p{^_Hani}', "");
Expect(1, 11903, '\P{_Hani}', "");
Expect(0, 11903, '\P{^_Hani}', "");
Error('\p{_	Is-Hani:=}');
Error('\P{_	Is-Hani:=}');
Expect(1, 11929, '\p{ishani}', "");
Expect(0, 11929, '\p{^ishani}', "");
Expect(0, 11929, '\P{ishani}', "");
Expect(1, 11929, '\P{^ishani}', "");
Expect(0, 11903, '\p{ishani}', "");
Expect(1, 11903, '\p{^ishani}', "");
Expect(1, 11903, '\P{ishani}', "");
Expect(0, 11903, '\P{^ishani}', "");
Expect(1, 11929, '\p{		is-HANI}', "");
Expect(0, 11929, '\p{^		is-HANI}', "");
Expect(0, 11929, '\P{		is-HANI}', "");
Expect(1, 11929, '\P{^		is-HANI}', "");
Expect(0, 11903, '\p{		is-HANI}', "");
Expect(1, 11903, '\p{^		is-HANI}', "");
Expect(1, 11903, '\P{		is-HANI}', "");
Expect(0, 11903, '\P{^		is-HANI}', "");
Error('\p{  hanunoo:=}');
Error('\P{  hanunoo:=}');
Expect(1, 5940, '\p{hanunoo}', "");
Expect(0, 5940, '\p{^hanunoo}', "");
Expect(0, 5940, '\P{hanunoo}', "");
Expect(1, 5940, '\P{^hanunoo}', "");
Expect(0, 5919, '\p{hanunoo}', "");
Expect(1, 5919, '\p{^hanunoo}', "");
Expect(1, 5919, '\P{hanunoo}', "");
Expect(0, 5919, '\P{^hanunoo}', "");
Expect(1, 5940, '\p{_ hanunoo}', "");
Expect(0, 5940, '\p{^_ hanunoo}', "");
Expect(0, 5940, '\P{_ hanunoo}', "");
Expect(1, 5940, '\P{^_ hanunoo}', "");
Expect(0, 5919, '\p{_ hanunoo}', "");
Expect(1, 5919, '\p{^_ hanunoo}', "");
Expect(1, 5919, '\P{_ hanunoo}', "");
Expect(0, 5919, '\P{^_ hanunoo}', "");
Error('\p{_:=IsHanunoo}');
Error('\P{_:=IsHanunoo}');
Expect(1, 5940, '\p{ishanunoo}', "");
Expect(0, 5940, '\p{^ishanunoo}', "");
Expect(0, 5940, '\P{ishanunoo}', "");
Expect(1, 5940, '\P{^ishanunoo}', "");
Expect(0, 5919, '\p{ishanunoo}', "");
Expect(1, 5919, '\p{^ishanunoo}', "");
Expect(1, 5919, '\P{ishanunoo}', "");
Expect(0, 5919, '\P{^ishanunoo}', "");
Expect(1, 5940, '\p{		isHANUNOO}', "");
Expect(0, 5940, '\p{^		isHANUNOO}', "");
Expect(0, 5940, '\P{		isHANUNOO}', "");
Expect(1, 5940, '\P{^		isHANUNOO}', "");
Expect(0, 5919, '\p{		isHANUNOO}', "");
Expect(1, 5919, '\p{^		isHANUNOO}', "");
Expect(1, 5919, '\P{		isHANUNOO}', "");
Expect(0, 5919, '\P{^		isHANUNOO}', "");
Error('\p{:=	Hano}');
Error('\P{:=	Hano}');
Expect(1, 5940, '\p{hano}', "");
Expect(0, 5940, '\p{^hano}', "");
Expect(0, 5940, '\P{hano}', "");
Expect(1, 5940, '\P{^hano}', "");
Expect(0, 5919, '\p{hano}', "");
Expect(1, 5919, '\p{^hano}', "");
Expect(1, 5919, '\P{hano}', "");
Expect(0, 5919, '\P{^hano}', "");
Expect(1, 5940, '\p{	HANO}', "");
Expect(0, 5940, '\p{^	HANO}', "");
Expect(0, 5940, '\P{	HANO}', "");
Expect(1, 5940, '\P{^	HANO}', "");
Expect(0, 5919, '\p{	HANO}', "");
Expect(1, 5919, '\p{^	HANO}', "");
Expect(1, 5919, '\P{	HANO}', "");
Expect(0, 5919, '\P{^	HANO}', "");
Error('\p{/a/is_hano}');
Error('\P{/a/is_hano}');
Expect(1, 5940, '\p{ishano}', "");
Expect(0, 5940, '\p{^ishano}', "");
Expect(0, 5940, '\P{ishano}', "");
Expect(1, 5940, '\P{^ishano}', "");
Expect(0, 5919, '\p{ishano}', "");
Expect(1, 5919, '\p{^ishano}', "");
Expect(1, 5919, '\P{ishano}', "");
Expect(0, 5919, '\P{^ishano}', "");
Expect(1, 5940, '\p{_ IS-hano}', "");
Expect(0, 5940, '\p{^_ IS-hano}', "");
Expect(0, 5940, '\P{_ IS-hano}', "");
Expect(1, 5940, '\P{^_ IS-hano}', "");
Expect(0, 5919, '\p{_ IS-hano}', "");
Expect(1, 5919, '\p{^_ IS-hano}', "");
Expect(1, 5919, '\P{_ IS-hano}', "");
Expect(0, 5919, '\P{^_ IS-hano}', "");
Error('\p{	IN Meetei:=MAYEK}');
Error('\P{	IN Meetei:=MAYEK}');
Expect(1, 44031, '\p{inmeeteimayek}', "");
Expect(0, 44031, '\p{^inmeeteimayek}', "");
Expect(0, 44031, '\P{inmeeteimayek}', "");
Expect(1, 44031, '\P{^inmeeteimayek}', "");
Expect(0, 43967, '\p{inmeeteimayek}', "");
Expect(1, 43967, '\p{^inmeeteimayek}', "");
Expect(1, 43967, '\P{inmeeteimayek}', "");
Expect(0, 43967, '\P{^inmeeteimayek}', "");
Expect(1, 44031, '\p{-	In-Meetei	MAYEK}', "");
Expect(0, 44031, '\p{^-	In-Meetei	MAYEK}', "");
Expect(0, 44031, '\P{-	In-Meetei	MAYEK}', "");
Expect(1, 44031, '\P{^-	In-Meetei	MAYEK}', "");
Expect(0, 43967, '\p{-	In-Meetei	MAYEK}', "");
Expect(1, 43967, '\p{^-	In-Meetei	MAYEK}', "");
Expect(1, 43967, '\P{-	In-Meetei	MAYEK}', "");
Expect(0, 43967, '\P{^-	In-Meetei	MAYEK}', "");
Error('\p{	-vertspace:=}');
Error('\P{	-vertspace:=}');
Expect(1, 13, '\p{vertspace}', "");
Expect(0, 13, '\p{^vertspace}', "");
Expect(0, 13, '\P{vertspace}', "");
Expect(1, 13, '\P{^vertspace}', "");
Expect(0, 9, '\p{vertspace}', "");
Expect(1, 9, '\p{^vertspace}', "");
Expect(1, 9, '\P{vertspace}', "");
Expect(0, 9, '\P{^vertspace}', "");
Expect(1, 13, '\p{-_VERTSPACE}', "");
Expect(0, 13, '\p{^-_VERTSPACE}', "");
Expect(0, 13, '\P{-_VERTSPACE}', "");
Expect(1, 13, '\P{^-_VERTSPACE}', "");
Expect(0, 9, '\p{-_VERTSPACE}', "");
Expect(1, 9, '\p{^-_VERTSPACE}', "");
Expect(1, 9, '\P{-_VERTSPACE}', "");
Expect(0, 9, '\P{^-_VERTSPACE}', "");
Error('\p{:=-Is	VertSpace}');
Error('\P{:=-Is	VertSpace}');
Expect(1, 13, '\p{isvertspace}', "");
Expect(0, 13, '\p{^isvertspace}', "");
Expect(0, 13, '\P{isvertspace}', "");
Expect(1, 13, '\P{^isvertspace}', "");
Expect(0, 9, '\p{isvertspace}', "");
Expect(1, 9, '\p{^isvertspace}', "");
Expect(1, 9, '\P{isvertspace}', "");
Expect(0, 9, '\P{^isvertspace}', "");
Expect(1, 13, '\p{ IsVertSpace}', "");
Expect(0, 13, '\p{^ IsVertSpace}', "");
Expect(0, 13, '\P{ IsVertSpace}', "");
Expect(1, 13, '\P{^ IsVertSpace}', "");
Expect(0, 9, '\p{ IsVertSpace}', "");
Expect(1, 9, '\p{^ IsVertSpace}', "");
Expect(1, 9, '\P{ IsVertSpace}', "");
Expect(0, 9, '\P{^ IsVertSpace}', "");
Error('\p{/a/_ letterlike	Symbols}');
Error('\P{/a/_ letterlike	Symbols}');
Expect(1, 8527, '\p{letterlikesymbols}', "");
Expect(0, 8527, '\p{^letterlikesymbols}', "");
Expect(0, 8527, '\P{letterlikesymbols}', "");
Expect(1, 8527, '\P{^letterlikesymbols}', "");
Expect(0, 8447, '\p{letterlikesymbols}', "");
Expect(1, 8447, '\p{^letterlikesymbols}', "");
Expect(1, 8447, '\P{letterlikesymbols}', "");
Expect(0, 8447, '\P{^letterlikesymbols}', "");
Expect(1, 8527, '\p{_-letterlike-symbols}', "");
Expect(0, 8527, '\p{^_-letterlike-symbols}', "");
Expect(0, 8527, '\P{_-letterlike-symbols}', "");
Expect(1, 8527, '\P{^_-letterlike-symbols}', "");
Expect(0, 8447, '\p{_-letterlike-symbols}', "");
Expect(1, 8447, '\p{^_-letterlike-symbols}', "");
Expect(1, 8447, '\P{_-letterlike-symbols}', "");
Expect(0, 8447, '\P{^_-letterlike-symbols}', "");
Error('\p{	IS/a/Letterlike_SYMBOLS}');
Error('\P{	IS/a/Letterlike_SYMBOLS}');
Expect(1, 8527, '\p{isletterlikesymbols}', "");
Expect(0, 8527, '\p{^isletterlikesymbols}', "");
Expect(0, 8527, '\P{isletterlikesymbols}', "");
Expect(1, 8527, '\P{^isletterlikesymbols}', "");
Expect(0, 8447, '\p{isletterlikesymbols}', "");
Expect(1, 8447, '\p{^isletterlikesymbols}', "");
Expect(1, 8447, '\P{isletterlikesymbols}', "");
Expect(0, 8447, '\P{^isletterlikesymbols}', "");
Expect(1, 8527, '\p{	_Isletterlike-Symbols}', "");
Expect(0, 8527, '\p{^	_Isletterlike-Symbols}', "");
Expect(0, 8527, '\P{	_Isletterlike-Symbols}', "");
Expect(1, 8527, '\P{^	_Isletterlike-Symbols}', "");
Expect(0, 8447, '\p{	_Isletterlike-Symbols}', "");
Expect(1, 8447, '\p{^	_Isletterlike-Symbols}', "");
Expect(1, 8447, '\P{	_Isletterlike-Symbols}', "");
Expect(0, 8447, '\P{^	_Isletterlike-Symbols}', "");
Error('\p{/a/ In	LetterlikeSYMBOLS}');
Error('\P{/a/ In	LetterlikeSYMBOLS}');
Expect(1, 8527, '\p{inletterlikesymbols}', "");
Expect(0, 8527, '\p{^inletterlikesymbols}', "");
Expect(0, 8527, '\P{inletterlikesymbols}', "");
Expect(1, 8527, '\P{^inletterlikesymbols}', "");
Expect(0, 8447, '\p{inletterlikesymbols}', "");
Expect(1, 8447, '\p{^inletterlikesymbols}', "");
Expect(1, 8447, '\P{inletterlikesymbols}', "");
Expect(0, 8447, '\P{^inletterlikesymbols}', "");
Expect(1, 8527, '\p{_-INLetterlike SYMBOLS}', "");
Expect(0, 8527, '\p{^_-INLetterlike SYMBOLS}', "");
Expect(0, 8527, '\P{_-INLetterlike SYMBOLS}', "");
Expect(1, 8527, '\P{^_-INLetterlike SYMBOLS}', "");
Expect(0, 8447, '\p{_-INLetterlike SYMBOLS}', "");
Expect(1, 8447, '\p{^_-INLetterlike SYMBOLS}', "");
Expect(1, 8447, '\P{_-INLetterlike SYMBOLS}', "");
Expect(0, 8447, '\P{^_-INLetterlike SYMBOLS}', "");
Error('\p{	/a/IN mongolian}');
Error('\P{	/a/IN mongolian}');
Expect(1, 6319, '\p{inmongolian}', "");
Expect(0, 6319, '\p{^inmongolian}', "");
Expect(0, 6319, '\P{inmongolian}', "");
Expect(1, 6319, '\P{^inmongolian}', "");
Expect(0, 6143, '\p{inmongolian}', "");
Expect(1, 6143, '\p{^inmongolian}', "");
Expect(1, 6143, '\P{inmongolian}', "");
Expect(0, 6143, '\P{^inmongolian}', "");
Expect(1, 6319, '\p{		INMONGOLIAN}', "");
Expect(0, 6319, '\p{^		INMONGOLIAN}', "");
Expect(0, 6319, '\P{		INMONGOLIAN}', "");
Expect(1, 6319, '\P{^		INMONGOLIAN}', "");
Expect(0, 6143, '\p{		INMONGOLIAN}', "");
Expect(1, 6143, '\p{^		INMONGOLIAN}', "");
Expect(1, 6143, '\P{		INMONGOLIAN}', "");
Expect(0, 6143, '\P{^		INMONGOLIAN}', "");
Error('\p{/a/--IDEOGRAPHIC}');
Error('\P{/a/--IDEOGRAPHIC}');
Expect(1, 12295, '\p{ideographic}', "");
Expect(0, 12295, '\p{^ideographic}', "");
Expect(0, 12295, '\P{ideographic}', "");
Expect(1, 12295, '\P{^ideographic}', "");
Expect(0, 12293, '\p{ideographic}', "");
Expect(1, 12293, '\p{^ideographic}', "");
Expect(1, 12293, '\P{ideographic}', "");
Expect(0, 12293, '\P{^ideographic}', "");
Expect(1, 12295, '\p{__Ideographic}', "");
Expect(0, 12295, '\p{^__Ideographic}', "");
Expect(0, 12295, '\P{__Ideographic}', "");
Expect(1, 12295, '\P{^__Ideographic}', "");
Expect(0, 12293, '\p{__Ideographic}', "");
Expect(1, 12293, '\p{^__Ideographic}', "");
Expect(1, 12293, '\P{__Ideographic}', "");
Expect(0, 12293, '\P{^__Ideographic}', "");
Error('\p{_	isIdeographic:=}');
Error('\P{_	isIdeographic:=}');
Expect(1, 12295, '\p{isideographic}', "");
Expect(0, 12295, '\p{^isideographic}', "");
Expect(0, 12295, '\P{isideographic}', "");
Expect(1, 12295, '\P{^isideographic}', "");
Expect(0, 12293, '\p{isideographic}', "");
Expect(1, 12293, '\p{^isideographic}', "");
Expect(1, 12293, '\P{isideographic}', "");
Expect(0, 12293, '\P{^isideographic}', "");
Expect(1, 12295, '\p{_is-Ideographic}', "");
Expect(0, 12295, '\p{^_is-Ideographic}', "");
Expect(0, 12295, '\P{_is-Ideographic}', "");
Expect(1, 12295, '\P{^_is-Ideographic}', "");
Expect(0, 12293, '\p{_is-Ideographic}', "");
Expect(1, 12293, '\p{^_is-Ideographic}', "");
Expect(1, 12293, '\P{_is-Ideographic}', "");
Expect(0, 12293, '\P{^_is-Ideographic}', "");
Error('\p{:=Ideo}');
Error('\P{:=Ideo}');
Expect(1, 12295, '\p{ideo}', "");
Expect(0, 12295, '\p{^ideo}', "");
Expect(0, 12295, '\P{ideo}', "");
Expect(1, 12295, '\P{^ideo}', "");
Expect(0, 12293, '\p{ideo}', "");
Expect(1, 12293, '\p{^ideo}', "");
Expect(1, 12293, '\P{ideo}', "");
Expect(0, 12293, '\P{^ideo}', "");
Expect(1, 12295, '\p{	-Ideo}', "");
Expect(0, 12295, '\p{^	-Ideo}', "");
Expect(0, 12295, '\P{	-Ideo}', "");
Expect(1, 12295, '\P{^	-Ideo}', "");
Expect(0, 12293, '\p{	-Ideo}', "");
Expect(1, 12293, '\p{^	-Ideo}', "");
Expect(1, 12293, '\P{	-Ideo}', "");
Expect(0, 12293, '\P{^	-Ideo}', "");
Error('\p{_is/a/Ideo}');
Error('\P{_is/a/Ideo}');
Expect(1, 12295, '\p{isideo}', "");
Expect(0, 12295, '\p{^isideo}', "");
Expect(0, 12295, '\P{isideo}', "");
Expect(1, 12295, '\P{^isideo}', "");
Expect(0, 12293, '\p{isideo}', "");
Expect(1, 12293, '\p{^isideo}', "");
Expect(1, 12293, '\P{isideo}', "");
Expect(0, 12293, '\P{^isideo}', "");
Expect(1, 12295, '\p{- IS-Ideo}', "");
Expect(0, 12295, '\p{^- IS-Ideo}', "");
Expect(0, 12295, '\P{- IS-Ideo}', "");
Expect(1, 12295, '\P{^- IS-Ideo}', "");
Expect(0, 12293, '\p{- IS-Ideo}', "");
Expect(1, 12293, '\p{^- IS-Ideo}', "");
Expect(1, 12293, '\P{- IS-Ideo}', "");
Expect(0, 12293, '\P{^- IS-Ideo}', "");
Error('\p{/a/Variation Selectors	supplement}');
Error('\P{/a/Variation Selectors	supplement}');
Expect(1, 917999, '\p{variationselectorssupplement}', "");
Expect(0, 917999, '\p{^variationselectorssupplement}', "");
Expect(0, 917999, '\P{variationselectorssupplement}', "");
Expect(1, 917999, '\P{^variationselectorssupplement}', "");
Expect(0, 917759, '\p{variationselectorssupplement}', "");
Expect(1, 917759, '\p{^variationselectorssupplement}', "");
Expect(1, 917759, '\P{variationselectorssupplement}', "");
Expect(0, 917759, '\P{^variationselectorssupplement}', "");
Expect(1, 917999, '\p{_VariationSelectors-Supplement}', "");
Expect(0, 917999, '\p{^_VariationSelectors-Supplement}', "");
Expect(0, 917999, '\P{_VariationSelectors-Supplement}', "");
Expect(1, 917999, '\P{^_VariationSelectors-Supplement}', "");
Expect(0, 917759, '\p{_VariationSelectors-Supplement}', "");
Expect(1, 917759, '\p{^_VariationSelectors-Supplement}', "");
Expect(1, 917759, '\P{_VariationSelectors-Supplement}', "");
Expect(0, 917759, '\P{^_VariationSelectors-Supplement}', "");
Error('\p{- is/a/VariationselectorsSupplement}');
Error('\P{- is/a/VariationselectorsSupplement}');
Expect(1, 917999, '\p{isvariationselectorssupplement}', "");
Expect(0, 917999, '\p{^isvariationselectorssupplement}', "");
Expect(0, 917999, '\P{isvariationselectorssupplement}', "");
Expect(1, 917999, '\P{^isvariationselectorssupplement}', "");
Expect(0, 917759, '\p{isvariationselectorssupplement}', "");
Expect(1, 917759, '\p{^isvariationselectorssupplement}', "");
Expect(1, 917759, '\P{isvariationselectorssupplement}', "");
Expect(0, 917759, '\P{^isvariationselectorssupplement}', "");
Expect(1, 917999, '\p{	IS VARIATION-Selectorssupplement}', "");
Expect(0, 917999, '\p{^	IS VARIATION-Selectorssupplement}', "");
Expect(0, 917999, '\P{	IS VARIATION-Selectorssupplement}', "");
Expect(1, 917999, '\P{^	IS VARIATION-Selectorssupplement}', "");
Expect(0, 917759, '\p{	IS VARIATION-Selectorssupplement}', "");
Expect(1, 917759, '\p{^	IS VARIATION-Selectorssupplement}', "");
Expect(1, 917759, '\P{	IS VARIATION-Selectorssupplement}', "");
Expect(0, 917759, '\P{^	IS VARIATION-Selectorssupplement}', "");
Error('\p{IN:=VARIATIONselectorsSUPPLEMENT}');
Error('\P{IN:=VARIATIONselectorsSUPPLEMENT}');
Expect(1, 917999, '\p{invariationselectorssupplement}', "");
Expect(0, 917999, '\p{^invariationselectorssupplement}', "");
Expect(0, 917999, '\P{invariationselectorssupplement}', "");
Expect(1, 917999, '\P{^invariationselectorssupplement}', "");
Expect(0, 917759, '\p{invariationselectorssupplement}', "");
Expect(1, 917759, '\p{^invariationselectorssupplement}', "");
Expect(1, 917759, '\P{invariationselectorssupplement}', "");
Expect(0, 917759, '\P{^invariationselectorssupplement}', "");
Expect(1, 917999, '\p{  in	VARIATIONselectors	Supplement}', "");
Expect(0, 917999, '\p{^  in	VARIATIONselectors	Supplement}', "");
Expect(0, 917999, '\P{  in	VARIATIONselectors	Supplement}', "");
Expect(1, 917999, '\P{^  in	VARIATIONselectors	Supplement}', "");
Expect(0, 917759, '\p{  in	VARIATIONselectors	Supplement}', "");
Expect(1, 917759, '\p{^  in	VARIATIONselectors	Supplement}', "");
Expect(1, 917759, '\P{  in	VARIATIONselectors	Supplement}', "");
Expect(0, 917759, '\P{^  in	VARIATIONselectors	Supplement}', "");
Error('\p{-:=inTHAANA}');
Error('\P{-:=inTHAANA}');
Expect(1, 1983, '\p{inthaana}', "");
Expect(0, 1983, '\p{^inthaana}', "");
Expect(0, 1983, '\P{inthaana}', "");
Expect(1, 1983, '\P{^inthaana}', "");
Expect(0, 1919, '\p{inthaana}', "");
Expect(1, 1919, '\p{^inthaana}', "");
Expect(1, 1919, '\P{inthaana}', "");
Expect(0, 1919, '\P{^inthaana}', "");
Expect(1, 1983, '\p{ In THAANA}', "");
Expect(0, 1983, '\p{^ In THAANA}', "");
Expect(0, 1983, '\P{ In THAANA}', "");
Expect(1, 1983, '\P{^ In THAANA}', "");
Expect(0, 1919, '\p{ In THAANA}', "");
Expect(1, 1919, '\p{^ In THAANA}', "");
Expect(1, 1919, '\P{ In THAANA}', "");
Expect(0, 1919, '\P{^ In THAANA}', "");
Error('\p{ -supplementalARROWS	A/a/}');
Error('\P{ -supplementalARROWS	A/a/}');
Expect(1, 10239, '\p{supplementalarrowsa}', "");
Expect(0, 10239, '\p{^supplementalarrowsa}', "");
Expect(0, 10239, '\P{supplementalarrowsa}', "");
Expect(1, 10239, '\P{^supplementalarrowsa}', "");
Expect(0, 10223, '\p{supplementalarrowsa}', "");
Expect(1, 10223, '\p{^supplementalarrowsa}', "");
Expect(1, 10223, '\P{supplementalarrowsa}', "");
Expect(0, 10223, '\P{^supplementalarrowsa}', "");
Expect(1, 10239, '\p{	supplemental ARROWS_a}', "");
Expect(0, 10239, '\p{^	supplemental ARROWS_a}', "");
Expect(0, 10239, '\P{	supplemental ARROWS_a}', "");
Expect(1, 10239, '\P{^	supplemental ARROWS_a}', "");
Expect(0, 10223, '\p{	supplemental ARROWS_a}', "");
Expect(1, 10223, '\p{^	supplemental ARROWS_a}', "");
Expect(1, 10223, '\P{	supplemental ARROWS_a}', "");
Expect(0, 10223, '\P{^	supplemental ARROWS_a}', "");
Error('\p{-:=is_SUPPLEMENTALArrows A}');
Error('\P{-:=is_SUPPLEMENTALArrows A}');
Expect(1, 10239, '\p{issupplementalarrowsa}', "");
Expect(0, 10239, '\p{^issupplementalarrowsa}', "");
Expect(0, 10239, '\P{issupplementalarrowsa}', "");
Expect(1, 10239, '\P{^issupplementalarrowsa}', "");
Expect(0, 10223, '\p{issupplementalarrowsa}', "");
Expect(1, 10223, '\p{^issupplementalarrowsa}', "");
Expect(1, 10223, '\P{issupplementalarrowsa}', "");
Expect(0, 10223, '\P{^issupplementalarrowsa}', "");
Expect(1, 10239, '\p{	-ISSupplemental	Arrows A}', "");
Expect(0, 10239, '\p{^	-ISSupplemental	Arrows A}', "");
Expect(0, 10239, '\P{	-ISSupplemental	Arrows A}', "");
Expect(1, 10239, '\P{^	-ISSupplemental	Arrows A}', "");
Expect(0, 10223, '\p{	-ISSupplemental	Arrows A}', "");
Expect(1, 10223, '\p{^	-ISSupplemental	Arrows A}', "");
Expect(1, 10223, '\P{	-ISSupplemental	Arrows A}', "");
Expect(0, 10223, '\P{^	-ISSupplemental	Arrows A}', "");
Error('\p{_/a/In SUPPLEMENTAL_ARROWS A}');
Error('\P{_/a/In SUPPLEMENTAL_ARROWS A}');
Expect(1, 10239, '\p{insupplementalarrowsa}', "");
Expect(0, 10239, '\p{^insupplementalarrowsa}', "");
Expect(0, 10239, '\P{insupplementalarrowsa}', "");
Expect(1, 10239, '\P{^insupplementalarrowsa}', "");
Expect(0, 10223, '\p{insupplementalarrowsa}', "");
Expect(1, 10223, '\p{^insupplementalarrowsa}', "");
Expect(1, 10223, '\P{insupplementalarrowsa}', "");
Expect(0, 10223, '\P{^insupplementalarrowsa}', "");
Expect(1, 10239, '\p{-_In	supplemental-arrowsA}', "");
Expect(0, 10239, '\p{^-_In	supplemental-arrowsA}', "");
Expect(0, 10239, '\P{-_In	supplemental-arrowsA}', "");
Expect(1, 10239, '\P{^-_In	supplemental-arrowsA}', "");
Expect(0, 10223, '\p{-_In	supplemental-arrowsA}', "");
Expect(1, 10223, '\p{^-_In	supplemental-arrowsA}', "");
Expect(1, 10223, '\P{-_In	supplemental-arrowsA}', "");
Expect(0, 10223, '\P{^-_In	supplemental-arrowsA}', "");
Error('\p{__Changes-when/a/uppercased}');
Error('\P{__Changes-when/a/uppercased}');
Expect(1, 122, '\p{changeswhenuppercased}', "");
Expect(0, 122, '\p{^changeswhenuppercased}', "");
Expect(0, 122, '\P{changeswhenuppercased}', "");
Expect(1, 122, '\P{^changeswhenuppercased}', "");
Expect(0, 96, '\p{changeswhenuppercased}', "");
Expect(1, 96, '\p{^changeswhenuppercased}', "");
Expect(1, 96, '\P{changeswhenuppercased}', "");
Expect(0, 96, '\P{^changeswhenuppercased}', "");
Expect(1, 122, '\p{	_Changes	when	UPPERCASED}', "");
Expect(0, 122, '\p{^	_Changes	when	UPPERCASED}', "");
Expect(0, 122, '\P{	_Changes	when	UPPERCASED}', "");
Expect(1, 122, '\P{^	_Changes	when	UPPERCASED}', "");
Expect(0, 96, '\p{	_Changes	when	UPPERCASED}', "");
Expect(1, 96, '\p{^	_Changes	when	UPPERCASED}', "");
Expect(1, 96, '\P{	_Changes	when	UPPERCASED}', "");
Expect(0, 96, '\P{^	_Changes	when	UPPERCASED}', "");
Error('\p{-	is:=CHANGESWhen	uppercased}');
Error('\P{-	is:=CHANGESWhen	uppercased}');
Expect(1, 122, '\p{ischangeswhenuppercased}', "");
Expect(0, 122, '\p{^ischangeswhenuppercased}', "");
Expect(0, 122, '\P{ischangeswhenuppercased}', "");
Expect(1, 122, '\P{^ischangeswhenuppercased}', "");
Expect(0, 96, '\p{ischangeswhenuppercased}', "");
Expect(1, 96, '\p{^ischangeswhenuppercased}', "");
Expect(1, 96, '\P{ischangeswhenuppercased}', "");
Expect(0, 96, '\P{^ischangeswhenuppercased}', "");
Expect(1, 122, '\p{ Is	CHANGES-WhenUppercased}', "");
Expect(0, 122, '\p{^ Is	CHANGES-WhenUppercased}', "");
Expect(0, 122, '\P{ Is	CHANGES-WhenUppercased}', "");
Expect(1, 122, '\P{^ Is	CHANGES-WhenUppercased}', "");
Expect(0, 96, '\p{ Is	CHANGES-WhenUppercased}', "");
Expect(1, 96, '\p{^ Is	CHANGES-WhenUppercased}', "");
Expect(1, 96, '\P{ Is	CHANGES-WhenUppercased}', "");
Expect(0, 96, '\P{^ Is	CHANGES-WhenUppercased}', "");
Error('\p{/a/CWU}');
Error('\P{/a/CWU}');
Expect(1, 122, '\p{cwu}', "");
Expect(0, 122, '\p{^cwu}', "");
Expect(0, 122, '\P{cwu}', "");
Expect(1, 122, '\P{^cwu}', "");
Expect(0, 96, '\p{cwu}', "");
Expect(1, 96, '\p{^cwu}', "");
Expect(1, 96, '\P{cwu}', "");
Expect(0, 96, '\P{^cwu}', "");
Expect(1, 122, '\p{ 	CWU}', "");
Expect(0, 122, '\p{^ 	CWU}', "");
Expect(0, 122, '\P{ 	CWU}', "");
Expect(1, 122, '\P{^ 	CWU}', "");
Expect(0, 96, '\p{ 	CWU}', "");
Expect(1, 96, '\p{^ 	CWU}', "");
Expect(1, 96, '\P{ 	CWU}', "");
Expect(0, 96, '\P{^ 	CWU}', "");
Error('\p{isCWU:=}');
Error('\P{isCWU:=}');
Expect(1, 122, '\p{iscwu}', "");
Expect(0, 122, '\p{^iscwu}', "");
Expect(0, 122, '\P{iscwu}', "");
Expect(1, 122, '\P{^iscwu}', "");
Expect(0, 96, '\p{iscwu}', "");
Expect(1, 96, '\p{^iscwu}', "");
Expect(1, 96, '\P{iscwu}', "");
Expect(0, 96, '\P{^iscwu}', "");
Expect(1, 122, '\p{_	Is-cwu}', "");
Expect(0, 122, '\p{^_	Is-cwu}', "");
Expect(0, 122, '\P{_	Is-cwu}', "");
Expect(1, 122, '\P{^_	Is-cwu}', "");
Expect(0, 96, '\p{_	Is-cwu}', "");
Expect(1, 96, '\p{^_	Is-cwu}', "");
Expect(1, 96, '\P{_	Is-cwu}', "");
Expect(0, 96, '\P{^_	Is-cwu}', "");
Error('\p{--In	SYRIAC:=}');
Error('\P{--In	SYRIAC:=}');
Expect(1, 1871, '\p{insyriac}', "");
Expect(0, 1871, '\p{^insyriac}', "");
Expect(0, 1871, '\P{insyriac}', "");
Expect(1, 1871, '\P{^insyriac}', "");
Expect(0, 1791, '\p{insyriac}', "");
Expect(1, 1791, '\p{^insyriac}', "");
Expect(1, 1791, '\P{insyriac}', "");
Expect(0, 1791, '\P{^insyriac}', "");
Expect(1, 1871, '\p{-In Syriac}', "");
Expect(0, 1871, '\p{^-In Syriac}', "");
Expect(0, 1871, '\P{-In Syriac}', "");
Expect(1, 1871, '\P{^-In Syriac}', "");
Expect(0, 1791, '\p{-In Syriac}', "");
Expect(1, 1791, '\p{^-In Syriac}', "");
Expect(1, 1791, '\P{-In Syriac}', "");
Expect(0, 1791, '\P{^-In Syriac}', "");
Error('\p{ _ETHIOPIC_Extended:=}');
Error('\P{ _ETHIOPIC_Extended:=}');
Expect(1, 11743, '\p{ethiopicextended}', "");
Expect(0, 11743, '\p{^ethiopicextended}', "");
Expect(0, 11743, '\P{ethiopicextended}', "");
Expect(1, 11743, '\P{^ethiopicextended}', "");
Expect(0, 11647, '\p{ethiopicextended}', "");
Expect(1, 11647, '\p{^ethiopicextended}', "");
Expect(1, 11647, '\P{ethiopicextended}', "");
Expect(0, 11647, '\P{^ethiopicextended}', "");
Expect(1, 11743, '\p{__Ethiopic_EXTENDED}', "");
Expect(0, 11743, '\p{^__Ethiopic_EXTENDED}', "");
Expect(0, 11743, '\P{__Ethiopic_EXTENDED}', "");
Expect(1, 11743, '\P{^__Ethiopic_EXTENDED}', "");
Expect(0, 11647, '\p{__Ethiopic_EXTENDED}', "");
Expect(1, 11647, '\p{^__Ethiopic_EXTENDED}', "");
Expect(1, 11647, '\P{__Ethiopic_EXTENDED}', "");
Expect(0, 11647, '\P{^__Ethiopic_EXTENDED}', "");
Error('\p{-/a/Is Ethiopic Extended}');
Error('\P{-/a/Is Ethiopic Extended}');
Expect(1, 11743, '\p{isethiopicextended}', "");
Expect(0, 11743, '\p{^isethiopicextended}', "");
Expect(0, 11743, '\P{isethiopicextended}', "");
Expect(1, 11743, '\P{^isethiopicextended}', "");
Expect(0, 11647, '\p{isethiopicextended}', "");
Expect(1, 11647, '\p{^isethiopicextended}', "");
Expect(1, 11647, '\P{isethiopicextended}', "");
Expect(0, 11647, '\P{^isethiopicextended}', "");
Expect(1, 11743, '\p{- Is	ETHIOPICExtended}', "");
Expect(0, 11743, '\p{^- Is	ETHIOPICExtended}', "");
Expect(0, 11743, '\P{- Is	ETHIOPICExtended}', "");
Expect(1, 11743, '\P{^- Is	ETHIOPICExtended}', "");
Expect(0, 11647, '\p{- Is	ETHIOPICExtended}', "");
Expect(1, 11647, '\p{^- Is	ETHIOPICExtended}', "");
Expect(1, 11647, '\P{- Is	ETHIOPICExtended}', "");
Expect(0, 11647, '\P{^- Is	ETHIOPICExtended}', "");
Error('\p{/a/__in Ethiopic	EXTENDED}');
Error('\P{/a/__in Ethiopic	EXTENDED}');
Expect(1, 11743, '\p{inethiopicextended}', "");
Expect(0, 11743, '\p{^inethiopicextended}', "");
Expect(0, 11743, '\P{inethiopicextended}', "");
Expect(1, 11743, '\P{^inethiopicextended}', "");
Expect(0, 11647, '\p{inethiopicextended}', "");
Expect(1, 11647, '\p{^inethiopicextended}', "");
Expect(1, 11647, '\P{inethiopicextended}', "");
Expect(0, 11647, '\P{^inethiopicextended}', "");
Expect(1, 11743, '\p{	_IN	ethiopic extended}', "");
Expect(0, 11743, '\p{^	_IN	ethiopic extended}', "");
Expect(0, 11743, '\P{	_IN	ethiopic extended}', "");
Expect(1, 11743, '\P{^	_IN	ethiopic extended}', "");
Expect(0, 11647, '\p{	_IN	ethiopic extended}', "");
Expect(1, 11647, '\p{^	_IN	ethiopic extended}', "");
Expect(1, 11647, '\P{	_IN	ethiopic extended}', "");
Expect(0, 11647, '\P{^	_IN	ethiopic extended}', "");
Error('\p{ -phoenician:=}');
Error('\P{ -phoenician:=}');
Expect(1, 67867, '\p{phoenician}', "");
Expect(0, 67867, '\p{^phoenician}', "");
Expect(0, 67867, '\P{phoenician}', "");
Expect(1, 67867, '\P{^phoenician}', "");
Expect(0, 67839, '\p{phoenician}', "");
Expect(1, 67839, '\p{^phoenician}', "");
Expect(1, 67839, '\P{phoenician}', "");
Expect(0, 67839, '\P{^phoenician}', "");
Expect(1, 67867, '\p{	_Phoenician}', "");
Expect(0, 67867, '\p{^	_Phoenician}', "");
Expect(0, 67867, '\P{	_Phoenician}', "");
Expect(1, 67867, '\P{^	_Phoenician}', "");
Expect(0, 67839, '\p{	_Phoenician}', "");
Expect(1, 67839, '\p{^	_Phoenician}', "");
Expect(1, 67839, '\P{	_Phoenician}', "");
Expect(0, 67839, '\P{^	_Phoenician}', "");
Error('\p{-/a/Is-Phoenician}');
Error('\P{-/a/Is-Phoenician}');
Expect(1, 67867, '\p{isphoenician}', "");
Expect(0, 67867, '\p{^isphoenician}', "");
Expect(0, 67867, '\P{isphoenician}', "");
Expect(1, 67867, '\P{^isphoenician}', "");
Expect(0, 67839, '\p{isphoenician}', "");
Expect(1, 67839, '\p{^isphoenician}', "");
Expect(1, 67839, '\P{isphoenician}', "");
Expect(0, 67839, '\P{^isphoenician}', "");
Expect(1, 67867, '\p{- IS-Phoenician}', "");
Expect(0, 67867, '\p{^- IS-Phoenician}', "");
Expect(0, 67867, '\P{- IS-Phoenician}', "");
Expect(1, 67867, '\P{^- IS-Phoenician}', "");
Expect(0, 67839, '\p{- IS-Phoenician}', "");
Expect(1, 67839, '\p{^- IS-Phoenician}', "");
Expect(1, 67839, '\P{- IS-Phoenician}', "");
Expect(0, 67839, '\P{^- IS-Phoenician}', "");
Error('\p{:=_Phnx}');
Error('\P{:=_Phnx}');
Expect(1, 67867, '\p{phnx}', "");
Expect(0, 67867, '\p{^phnx}', "");
Expect(0, 67867, '\P{phnx}', "");
Expect(1, 67867, '\P{^phnx}', "");
Expect(0, 67839, '\p{phnx}', "");
Expect(1, 67839, '\p{^phnx}', "");
Expect(1, 67839, '\P{phnx}', "");
Expect(0, 67839, '\P{^phnx}', "");
Expect(1, 67867, '\p{-Phnx}', "");
Expect(0, 67867, '\p{^-Phnx}', "");
Expect(0, 67867, '\P{-Phnx}', "");
Expect(1, 67867, '\P{^-Phnx}', "");
Expect(0, 67839, '\p{-Phnx}', "");
Expect(1, 67839, '\p{^-Phnx}', "");
Expect(1, 67839, '\P{-Phnx}', "");
Expect(0, 67839, '\P{^-Phnx}', "");
Error('\p{/a/-	IsPhnx}');
Error('\P{/a/-	IsPhnx}');
Expect(1, 67867, '\p{isphnx}', "");
Expect(0, 67867, '\p{^isphnx}', "");
Expect(0, 67867, '\P{isphnx}', "");
Expect(1, 67867, '\P{^isphnx}', "");
Expect(0, 67839, '\p{isphnx}', "");
Expect(1, 67839, '\p{^isphnx}', "");
Expect(1, 67839, '\P{isphnx}', "");
Expect(0, 67839, '\P{^isphnx}', "");
Expect(1, 67867, '\p{ -IsPHNX}', "");
Expect(0, 67867, '\p{^ -IsPHNX}', "");
Expect(0, 67867, '\P{ -IsPHNX}', "");
Expect(1, 67867, '\P{^ -IsPHNX}', "");
Expect(0, 67839, '\p{ -IsPHNX}', "");
Expect(1, 67839, '\p{^ -IsPHNX}', "");
Expect(1, 67839, '\P{ -IsPHNX}', "");
Expect(0, 67839, '\P{^ -IsPHNX}', "");
Error('\p{:=_	Myanmar	extended-A}');
Error('\P{:=_	Myanmar	extended-A}');
Expect(1, 43647, '\p{myanmarextendeda}', "");
Expect(0, 43647, '\p{^myanmarextendeda}', "");
Expect(0, 43647, '\P{myanmarextendeda}', "");
Expect(1, 43647, '\P{^myanmarextendeda}', "");
Expect(0, 43615, '\p{myanmarextendeda}', "");
Expect(1, 43615, '\p{^myanmarextendeda}', "");
Expect(1, 43615, '\P{myanmarextendeda}', "");
Expect(0, 43615, '\P{^myanmarextendeda}', "");
Expect(1, 43647, '\p{	 Myanmar	extended_A}', "");
Expect(0, 43647, '\p{^	 Myanmar	extended_A}', "");
Expect(0, 43647, '\P{	 Myanmar	extended_A}', "");
Expect(1, 43647, '\P{^	 Myanmar	extended_A}', "");
Expect(0, 43615, '\p{	 Myanmar	extended_A}', "");
Expect(1, 43615, '\p{^	 Myanmar	extended_A}', "");
Expect(1, 43615, '\P{	 Myanmar	extended_A}', "");
Expect(0, 43615, '\P{^	 Myanmar	extended_A}', "");
Error('\p{-IS/a/MYANMAREXTENDED-A}');
Error('\P{-IS/a/MYANMAREXTENDED-A}');
Expect(1, 43647, '\p{ismyanmarextendeda}', "");
Expect(0, 43647, '\p{^ismyanmarextendeda}', "");
Expect(0, 43647, '\P{ismyanmarextendeda}', "");
Expect(1, 43647, '\P{^ismyanmarextendeda}', "");
Expect(0, 43615, '\p{ismyanmarextendeda}', "");
Expect(1, 43615, '\p{^ismyanmarextendeda}', "");
Expect(1, 43615, '\P{ismyanmarextendeda}', "");
Expect(0, 43615, '\P{^ismyanmarextendeda}', "");
Expect(1, 43647, '\p{	ISMyanmar	Extended A}', "");
Expect(0, 43647, '\p{^	ISMyanmar	Extended A}', "");
Expect(0, 43647, '\P{	ISMyanmar	Extended A}', "");
Expect(1, 43647, '\P{^	ISMyanmar	Extended A}', "");
Expect(0, 43615, '\p{	ISMyanmar	Extended A}', "");
Expect(1, 43615, '\p{^	ISMyanmar	Extended A}', "");
Expect(1, 43615, '\P{	ISMyanmar	Extended A}', "");
Expect(0, 43615, '\P{^	ISMyanmar	Extended A}', "");
Error('\p{ 	In-MYANMARextended/a/A}');
Error('\P{ 	In-MYANMARextended/a/A}');
Expect(1, 43647, '\p{inmyanmarextendeda}', "");
Expect(0, 43647, '\p{^inmyanmarextendeda}', "");
Expect(0, 43647, '\P{inmyanmarextendeda}', "");
Expect(1, 43647, '\P{^inmyanmarextendeda}', "");
Expect(0, 43615, '\p{inmyanmarextendeda}', "");
Expect(1, 43615, '\p{^inmyanmarextendeda}', "");
Expect(1, 43615, '\P{inmyanmarextendeda}', "");
Expect(0, 43615, '\P{^inmyanmarextendeda}', "");
Expect(1, 43647, '\p{	 In-Myanmar	ExtendedA}', "");
Expect(0, 43647, '\p{^	 In-Myanmar	ExtendedA}', "");
Expect(0, 43647, '\P{	 In-Myanmar	ExtendedA}', "");
Expect(1, 43647, '\P{^	 In-Myanmar	ExtendedA}', "");
Expect(0, 43615, '\p{	 In-Myanmar	ExtendedA}', "");
Expect(1, 43615, '\p{^	 In-Myanmar	ExtendedA}', "");
Expect(1, 43615, '\P{	 In-Myanmar	ExtendedA}', "");
Expect(0, 43615, '\P{^	 In-Myanmar	ExtendedA}', "");
Error('\p{_:=Runic}');
Error('\P{_:=Runic}');
Expect(1, 5866, '\p{runic}', "");
Expect(0, 5866, '\p{^runic}', "");
Expect(0, 5866, '\P{runic}', "");
Expect(1, 5866, '\P{^runic}', "");
Expect(0, 5791, '\p{runic}', "");
Expect(1, 5791, '\p{^runic}', "");
Expect(1, 5791, '\P{runic}', "");
Expect(0, 5791, '\P{^runic}', "");
Expect(1, 5866, '\p{-_runic}', "");
Expect(0, 5866, '\p{^-_runic}', "");
Expect(0, 5866, '\P{-_runic}', "");
Expect(1, 5866, '\P{^-_runic}', "");
Expect(0, 5791, '\p{-_runic}', "");
Expect(1, 5791, '\p{^-_runic}', "");
Expect(1, 5791, '\P{-_runic}', "");
Expect(0, 5791, '\P{^-_runic}', "");
Error('\p{_IS	Runic/a/}');
Error('\P{_IS	Runic/a/}');
Expect(1, 5866, '\p{isrunic}', "");
Expect(0, 5866, '\p{^isrunic}', "");
Expect(0, 5866, '\P{isrunic}', "");
Expect(1, 5866, '\P{^isrunic}', "");
Expect(0, 5791, '\p{isrunic}', "");
Expect(1, 5791, '\p{^isrunic}', "");
Expect(1, 5791, '\P{isrunic}', "");
Expect(0, 5791, '\P{^isrunic}', "");
Expect(1, 5866, '\p{	_isrunic}', "");
Expect(0, 5866, '\p{^	_isrunic}', "");
Expect(0, 5866, '\P{	_isrunic}', "");
Expect(1, 5866, '\P{^	_isrunic}', "");
Expect(0, 5791, '\p{	_isrunic}', "");
Expect(1, 5791, '\p{^	_isrunic}', "");
Expect(1, 5791, '\P{	_isrunic}', "");
Expect(0, 5791, '\P{^	_isrunic}', "");
Error('\p{-_runr:=}');
Error('\P{-_runr:=}');
Expect(1, 5866, '\p{runr}', "");
Expect(0, 5866, '\p{^runr}', "");
Expect(0, 5866, '\P{runr}', "");
Expect(1, 5866, '\P{^runr}', "");
Expect(0, 5791, '\p{runr}', "");
Expect(1, 5791, '\p{^runr}', "");
Expect(1, 5791, '\P{runr}', "");
Expect(0, 5791, '\P{^runr}', "");
Expect(1, 5866, '\p{ _Runr}', "");
Expect(0, 5866, '\p{^ _Runr}', "");
Expect(0, 5866, '\P{ _Runr}', "");
Expect(1, 5866, '\P{^ _Runr}', "");
Expect(0, 5791, '\p{ _Runr}', "");
Expect(1, 5791, '\p{^ _Runr}', "");
Expect(1, 5791, '\P{ _Runr}', "");
Expect(0, 5791, '\P{^ _Runr}', "");
Error('\p{-_Is	Runr/a/}');
Error('\P{-_Is	Runr/a/}');
Expect(1, 5866, '\p{isrunr}', "");
Expect(0, 5866, '\p{^isrunr}', "");
Expect(0, 5866, '\P{isrunr}', "");
Expect(1, 5866, '\P{^isrunr}', "");
Expect(0, 5791, '\p{isrunr}', "");
Expect(1, 5791, '\p{^isrunr}', "");
Expect(1, 5791, '\P{isrunr}', "");
Expect(0, 5791, '\P{^isrunr}', "");
Expect(1, 5866, '\p{-	is_runr}', "");
Expect(0, 5866, '\p{^-	is_runr}', "");
Expect(0, 5866, '\P{-	is_runr}', "");
Expect(1, 5866, '\P{^-	is_runr}', "");
Expect(0, 5791, '\p{-	is_runr}', "");
Expect(1, 5791, '\p{^-	is_runr}', "");
Expect(1, 5791, '\P{-	is_runr}', "");
Expect(0, 5791, '\P{^-	is_runr}', "");
Error('\p{_HIGH PRIVATE Use/a/surrogates}');
Error('\P{_HIGH PRIVATE Use/a/surrogates}');
Expect(1, 56319, '\p{highprivateusesurrogates}', "");
Expect(0, 56319, '\p{^highprivateusesurrogates}', "");
Expect(0, 56319, '\P{highprivateusesurrogates}', "");
Expect(1, 56319, '\P{^highprivateusesurrogates}', "");
Expect(0, 1, '\p{highprivateusesurrogates}', "");
Expect(1, 1, '\p{^highprivateusesurrogates}', "");
Expect(1, 1, '\P{highprivateusesurrogates}', "");
Expect(0, 1, '\P{^highprivateusesurrogates}', "");
Expect(1, 56319, '\p{HIGHPRIVATE	USE	SURROGATES}', "");
Expect(0, 56319, '\p{^HIGHPRIVATE	USE	SURROGATES}', "");
Expect(0, 56319, '\P{HIGHPRIVATE	USE	SURROGATES}', "");
Expect(1, 56319, '\P{^HIGHPRIVATE	USE	SURROGATES}', "");
Expect(0, 1, '\p{HIGHPRIVATE	USE	SURROGATES}', "");
Expect(1, 1, '\p{^HIGHPRIVATE	USE	SURROGATES}', "");
Expect(1, 1, '\P{HIGHPRIVATE	USE	SURROGATES}', "");
Expect(0, 1, '\P{^HIGHPRIVATE	USE	SURROGATES}', "");
Error('\p{	IS high-private:=Use-surrogates}');
Error('\P{	IS high-private:=Use-surrogates}');
Expect(1, 56319, '\p{ishighprivateusesurrogates}', "");
Expect(0, 56319, '\p{^ishighprivateusesurrogates}', "");
Expect(0, 56319, '\P{ishighprivateusesurrogates}', "");
Expect(1, 56319, '\P{^ishighprivateusesurrogates}', "");
Expect(0, 1, '\p{ishighprivateusesurrogates}', "");
Expect(1, 1, '\p{^ishighprivateusesurrogates}', "");
Expect(1, 1, '\P{ishighprivateusesurrogates}', "");
Expect(0, 1, '\P{^ishighprivateusesurrogates}', "");
Expect(1, 56319, '\p{_ IS	High_Private_useSURROGATES}', "");
Expect(0, 56319, '\p{^_ IS	High_Private_useSURROGATES}', "");
Expect(0, 56319, '\P{_ IS	High_Private_useSURROGATES}', "");
Expect(1, 56319, '\P{^_ IS	High_Private_useSURROGATES}', "");
Expect(0, 1, '\p{_ IS	High_Private_useSURROGATES}', "");
Expect(1, 1, '\p{^_ IS	High_Private_useSURROGATES}', "");
Expect(1, 1, '\P{_ IS	High_Private_useSURROGATES}', "");
Expect(0, 1, '\P{^_ IS	High_Private_useSURROGATES}', "");
Error('\p{/a/inHighPrivate	USEsurrogates}');
Error('\P{/a/inHighPrivate	USEsurrogates}');
Expect(1, 56319, '\p{inhighprivateusesurrogates}', "");
Expect(0, 56319, '\p{^inhighprivateusesurrogates}', "");
Expect(0, 56319, '\P{inhighprivateusesurrogates}', "");
Expect(1, 56319, '\P{^inhighprivateusesurrogates}', "");
Expect(0, 1, '\p{inhighprivateusesurrogates}', "");
Expect(1, 1, '\p{^inhighprivateusesurrogates}', "");
Expect(1, 1, '\P{inhighprivateusesurrogates}', "");
Expect(0, 1, '\P{^inhighprivateusesurrogates}', "");
Expect(1, 56319, '\p{__in	HIGH Private-useSurrogates}', "");
Expect(0, 56319, '\p{^__in	HIGH Private-useSurrogates}', "");
Expect(0, 56319, '\P{__in	HIGH Private-useSurrogates}', "");
Expect(1, 56319, '\P{^__in	HIGH Private-useSurrogates}', "");
Expect(0, 1, '\p{__in	HIGH Private-useSurrogates}', "");
Expect(1, 1, '\p{^__in	HIGH Private-useSurrogates}', "");
Expect(1, 1, '\P{__in	HIGH Private-useSurrogates}', "");
Expect(0, 1, '\P{^__in	HIGH Private-useSurrogates}', "");
Error('\p{:=_Kayah-Li}');
Error('\P{:=_Kayah-Li}');
Expect(1, 43311, '\p{kayahli}', "");
Expect(0, 43311, '\p{^kayahli}', "");
Expect(0, 43311, '\P{kayahli}', "");
Expect(1, 43311, '\P{^kayahli}', "");
Expect(0, 43263, '\p{kayahli}', "");
Expect(1, 43263, '\p{^kayahli}', "");
Expect(1, 43263, '\P{kayahli}', "");
Expect(0, 43263, '\P{^kayahli}', "");
Expect(1, 43311, '\p{KAYAH_Li}', "");
Expect(0, 43311, '\p{^KAYAH_Li}', "");
Expect(0, 43311, '\P{KAYAH_Li}', "");
Expect(1, 43311, '\P{^KAYAH_Li}', "");
Expect(0, 43263, '\p{KAYAH_Li}', "");
Expect(1, 43263, '\p{^KAYAH_Li}', "");
Expect(1, 43263, '\P{KAYAH_Li}', "");
Expect(0, 43263, '\P{^KAYAH_Li}', "");
Error('\p{_ Is/a/Kayah_li}');
Error('\P{_ Is/a/Kayah_li}');
Expect(1, 43311, '\p{iskayahli}', "");
Expect(0, 43311, '\p{^iskayahli}', "");
Expect(0, 43311, '\P{iskayahli}', "");
Expect(1, 43311, '\P{^iskayahli}', "");
Expect(0, 43263, '\p{iskayahli}', "");
Expect(1, 43263, '\p{^iskayahli}', "");
Expect(1, 43263, '\P{iskayahli}', "");
Expect(0, 43263, '\P{^iskayahli}', "");
Expect(1, 43311, '\p{	 is kayah_Li}', "");
Expect(0, 43311, '\p{^	 is kayah_Li}', "");
Expect(0, 43311, '\P{	 is kayah_Li}', "");
Expect(1, 43311, '\P{^	 is kayah_Li}', "");
Expect(0, 43263, '\p{	 is kayah_Li}', "");
Expect(1, 43263, '\p{^	 is kayah_Li}', "");
Expect(1, 43263, '\P{	 is kayah_Li}', "");
Expect(0, 43263, '\P{^	 is kayah_Li}', "");
Error('\p{	_Kali/a/}');
Error('\P{	_Kali/a/}');
Expect(1, 43311, '\p{kali}', "");
Expect(0, 43311, '\p{^kali}', "");
Expect(0, 43311, '\P{kali}', "");
Expect(1, 43311, '\P{^kali}', "");
Expect(0, 43263, '\p{kali}', "");
Expect(1, 43263, '\p{^kali}', "");
Expect(1, 43263, '\P{kali}', "");
Expect(0, 43263, '\P{^kali}', "");
Expect(1, 43311, '\p{_kali}', "");
Expect(0, 43311, '\p{^_kali}', "");
Expect(0, 43311, '\P{_kali}', "");
Expect(1, 43311, '\P{^_kali}', "");
Expect(0, 43263, '\p{_kali}', "");
Expect(1, 43263, '\p{^_kali}', "");
Expect(1, 43263, '\P{_kali}', "");
Expect(0, 43263, '\P{^_kali}', "");
Error('\p{ /a/is	Kali}');
Error('\P{ /a/is	Kali}');
Expect(1, 43311, '\p{iskali}', "");
Expect(0, 43311, '\p{^iskali}', "");
Expect(0, 43311, '\P{iskali}', "");
Expect(1, 43311, '\P{^iskali}', "");
Expect(0, 43263, '\p{iskali}', "");
Expect(1, 43263, '\p{^iskali}', "");
Expect(1, 43263, '\P{iskali}', "");
Expect(0, 43263, '\P{^iskali}', "");
Expect(1, 43311, '\p{-	is	kali}', "");
Expect(0, 43311, '\p{^-	is	kali}', "");
Expect(0, 43311, '\P{-	is	kali}', "");
Expect(1, 43311, '\P{^-	is	kali}', "");
Expect(0, 43263, '\p{-	is	kali}', "");
Expect(1, 43263, '\p{^-	is	kali}', "");
Expect(1, 43263, '\P{-	is	kali}', "");
Expect(0, 43263, '\P{^-	is	kali}', "");
Error('\p{-/a/PosixGraph}');
Error('\P{-/a/PosixGraph}');
Expect(1, 126, '\p{posixgraph}', "");
Expect(0, 126, '\p{^posixgraph}', "");
Expect(0, 126, '\P{posixgraph}', "");
Expect(1, 126, '\P{^posixgraph}', "");
Expect(0, 32, '\p{posixgraph}', "");
Expect(1, 32, '\p{^posixgraph}', "");
Expect(1, 32, '\P{posixgraph}', "");
Expect(0, 32, '\P{^posixgraph}', "");
Expect(1, 126, '\p{ PosixGraph}', "");
Expect(0, 126, '\p{^ PosixGraph}', "");
Expect(0, 126, '\P{ PosixGraph}', "");
Expect(1, 126, '\P{^ PosixGraph}', "");
Expect(0, 32, '\p{ PosixGraph}', "");
Expect(1, 32, '\p{^ PosixGraph}', "");
Expect(1, 32, '\P{ PosixGraph}', "");
Expect(0, 32, '\P{^ PosixGraph}', "");
Error('\p{_is-POSIXGRAPH/a/}');
Error('\P{_is-POSIXGRAPH/a/}');
Expect(1, 126, '\p{isposixgraph}', "");
Expect(0, 126, '\p{^isposixgraph}', "");
Expect(0, 126, '\P{isposixgraph}', "");
Expect(1, 126, '\P{^isposixgraph}', "");
Expect(0, 32, '\p{isposixgraph}', "");
Expect(1, 32, '\p{^isposixgraph}', "");
Expect(1, 32, '\P{isposixgraph}', "");
Expect(0, 32, '\P{^isposixgraph}', "");
Expect(1, 126, '\p{ Is-POSIXGRAPH}', "");
Expect(0, 126, '\p{^ Is-POSIXGRAPH}', "");
Expect(0, 126, '\P{ Is-POSIXGRAPH}', "");
Expect(1, 126, '\P{^ Is-POSIXGRAPH}', "");
Expect(0, 32, '\p{ Is-POSIXGRAPH}', "");
Expect(1, 32, '\p{^ Is-POSIXGRAPH}', "");
Expect(1, 32, '\P{ Is-POSIXGRAPH}', "");
Expect(0, 32, '\P{^ Is-POSIXGRAPH}', "");
Error('\p{	 In	old Turkic/a/}');
Error('\P{	 In	old Turkic/a/}');
Expect(1, 68687, '\p{inoldturkic}', "");
Expect(0, 68687, '\p{^inoldturkic}', "");
Expect(0, 68687, '\P{inoldturkic}', "");
Expect(1, 68687, '\P{^inoldturkic}', "");
Expect(0, 68607, '\p{inoldturkic}', "");
Expect(1, 68607, '\p{^inoldturkic}', "");
Expect(1, 68607, '\P{inoldturkic}', "");
Expect(0, 68607, '\P{^inoldturkic}', "");
Expect(1, 68687, '\p{_ in Old_TURKIC}', "");
Expect(0, 68687, '\p{^_ in Old_TURKIC}', "");
Expect(0, 68687, '\P{_ in Old_TURKIC}', "");
Expect(1, 68687, '\P{^_ in Old_TURKIC}', "");
Expect(0, 68607, '\p{_ in Old_TURKIC}', "");
Expect(1, 68607, '\p{^_ in Old_TURKIC}', "");
Expect(1, 68607, '\P{_ in Old_TURKIC}', "");
Expect(0, 68607, '\P{^_ in Old_TURKIC}', "");
Error('\p{_GRAPHEME:=Base}');
Error('\P{_GRAPHEME:=Base}');
Expect(1, 126, '\p{graphemebase}', "");
Expect(0, 126, '\p{^graphemebase}', "");
Expect(0, 126, '\P{graphemebase}', "");
Expect(1, 126, '\P{^graphemebase}', "");
Expect(0, 31, '\p{graphemebase}', "");
Expect(1, 31, '\p{^graphemebase}', "");
Expect(1, 31, '\P{graphemebase}', "");
Expect(0, 31, '\P{^graphemebase}', "");
Expect(1, 126, '\p{_Grapheme	Base}', "");
Expect(0, 126, '\p{^_Grapheme	Base}', "");
Expect(0, 126, '\P{_Grapheme	Base}', "");
Expect(1, 126, '\P{^_Grapheme	Base}', "");
Expect(0, 31, '\p{_Grapheme	Base}', "");
Expect(1, 31, '\p{^_Grapheme	Base}', "");
Expect(1, 31, '\P{_Grapheme	Base}', "");
Expect(0, 31, '\P{^_Grapheme	Base}', "");
Error('\p{__is-Grapheme/a/BASE}');
Error('\P{__is-Grapheme/a/BASE}');
Expect(1, 126, '\p{isgraphemebase}', "");
Expect(0, 126, '\p{^isgraphemebase}', "");
Expect(0, 126, '\P{isgraphemebase}', "");
Expect(1, 126, '\P{^isgraphemebase}', "");
Expect(0, 31, '\p{isgraphemebase}', "");
Expect(1, 31, '\p{^isgraphemebase}', "");
Expect(1, 31, '\P{isgraphemebase}', "");
Expect(0, 31, '\P{^isgraphemebase}', "");
Expect(1, 126, '\p{_ is Grapheme BASE}', "");
Expect(0, 126, '\p{^_ is Grapheme BASE}', "");
Expect(0, 126, '\P{_ is Grapheme BASE}', "");
Expect(1, 126, '\P{^_ is Grapheme BASE}', "");
Expect(0, 31, '\p{_ is Grapheme BASE}', "");
Expect(1, 31, '\p{^_ is Grapheme BASE}', "");
Expect(1, 31, '\P{_ is Grapheme BASE}', "");
Expect(0, 31, '\P{^_ is Grapheme BASE}', "");
Error('\p{	Gr-base/a/}');
Error('\P{	Gr-base/a/}');
Expect(1, 126, '\p{grbase}', "");
Expect(0, 126, '\p{^grbase}', "");
Expect(0, 126, '\P{grbase}', "");
Expect(1, 126, '\P{^grbase}', "");
Expect(0, 31, '\p{grbase}', "");
Expect(1, 31, '\p{^grbase}', "");
Expect(1, 31, '\P{grbase}', "");
Expect(0, 31, '\P{^grbase}', "");
Expect(1, 126, '\p{-_GrBase}', "");
Expect(0, 126, '\p{^-_GrBase}', "");
Expect(0, 126, '\P{-_GrBase}', "");
Expect(1, 126, '\P{^-_GrBase}', "");
Expect(0, 31, '\p{-_GrBase}', "");
Expect(1, 31, '\p{^-_GrBase}', "");
Expect(1, 31, '\P{-_GrBase}', "");
Expect(0, 31, '\P{^-_GrBase}', "");
Error('\p{:=-Is_gr-base}');
Error('\P{:=-Is_gr-base}');
Expect(1, 126, '\p{isgrbase}', "");
Expect(0, 126, '\p{^isgrbase}', "");
Expect(0, 126, '\P{isgrbase}', "");
Expect(1, 126, '\P{^isgrbase}', "");
Expect(0, 31, '\p{isgrbase}', "");
Expect(1, 31, '\p{^isgrbase}', "");
Expect(1, 31, '\P{isgrbase}', "");
Expect(0, 31, '\P{^isgrbase}', "");
Expect(1, 126, '\p{__Is Gr	Base}', "");
Expect(0, 126, '\p{^__Is Gr	Base}', "");
Expect(0, 126, '\P{__Is Gr	Base}', "");
Expect(1, 126, '\P{^__Is Gr	Base}', "");
Expect(0, 31, '\p{__Is Gr	Base}', "");
Expect(1, 31, '\p{^__Is Gr	Base}', "");
Expect(1, 31, '\P{__Is Gr	Base}', "");
Expect(0, 31, '\P{^__Is Gr	Base}', "");
Error('\p{:=-_Inugaritic}');
Error('\P{:=-_Inugaritic}');
Expect(1, 66463, '\p{inugaritic}', "");
Expect(0, 66463, '\p{^inugaritic}', "");
Expect(0, 66463, '\P{inugaritic}', "");
Expect(1, 66463, '\P{^inugaritic}', "");
Expect(0, 66431, '\p{inugaritic}', "");
Expect(1, 66431, '\p{^inugaritic}', "");
Expect(1, 66431, '\P{inugaritic}', "");
Expect(0, 66431, '\P{^inugaritic}', "");
Expect(1, 66463, '\p{	IN-ugaritic}', "");
Expect(0, 66463, '\p{^	IN-ugaritic}', "");
Expect(0, 66463, '\P{	IN-ugaritic}', "");
Expect(1, 66463, '\P{^	IN-ugaritic}', "");
Expect(0, 66431, '\p{	IN-ugaritic}', "");
Expect(1, 66431, '\p{^	IN-ugaritic}', "");
Expect(1, 66431, '\P{	IN-ugaritic}', "");
Expect(0, 66431, '\P{^	IN-ugaritic}', "");
Error('\p{	Devanagari/a/}');
Error('\P{	Devanagari/a/}');
Expect(1, 2384, '\p{devanagari}', "");
Expect(0, 2384, '\p{^devanagari}', "");
Expect(0, 2384, '\P{devanagari}', "");
Expect(1, 2384, '\P{^devanagari}', "");
Expect(0, 2303, '\p{devanagari}', "");
Expect(1, 2303, '\p{^devanagari}', "");
Expect(1, 2303, '\P{devanagari}', "");
Expect(0, 2303, '\P{^devanagari}', "");
Expect(1, 2384, '\p{- Devanagari}', "");
Expect(0, 2384, '\p{^- Devanagari}', "");
Expect(0, 2384, '\P{- Devanagari}', "");
Expect(1, 2384, '\P{^- Devanagari}', "");
Expect(0, 2303, '\p{- Devanagari}', "");
Expect(1, 2303, '\p{^- Devanagari}', "");
Expect(1, 2303, '\P{- Devanagari}', "");
Expect(0, 2303, '\P{^- Devanagari}', "");
Error('\p{	is-Devanagari:=}');
Error('\P{	is-Devanagari:=}');
Expect(1, 2384, '\p{isdevanagari}', "");
Expect(0, 2384, '\p{^isdevanagari}', "");
Expect(0, 2384, '\P{isdevanagari}', "");
Expect(1, 2384, '\P{^isdevanagari}', "");
Expect(0, 2303, '\p{isdevanagari}', "");
Expect(1, 2303, '\p{^isdevanagari}', "");
Expect(1, 2303, '\P{isdevanagari}', "");
Expect(0, 2303, '\P{^isdevanagari}', "");
Expect(1, 2384, '\p{	 Is devanagari}', "");
Expect(0, 2384, '\p{^	 Is devanagari}', "");
Expect(0, 2384, '\P{	 Is devanagari}', "");
Expect(1, 2384, '\P{^	 Is devanagari}', "");
Expect(0, 2303, '\p{	 Is devanagari}', "");
Expect(1, 2303, '\p{^	 Is devanagari}', "");
Expect(1, 2303, '\P{	 Is devanagari}', "");
Expect(0, 2303, '\P{^	 Is devanagari}', "");
Error('\p{/a/__Deva}');
Error('\P{/a/__Deva}');
Expect(1, 2384, '\p{deva}', "");
Expect(0, 2384, '\p{^deva}', "");
Expect(0, 2384, '\P{deva}', "");
Expect(1, 2384, '\P{^deva}', "");
Expect(0, 2303, '\p{deva}', "");
Expect(1, 2303, '\p{^deva}', "");
Expect(1, 2303, '\P{deva}', "");
Expect(0, 2303, '\P{^deva}', "");
Expect(1, 2384, '\p{-Deva}', "");
Expect(0, 2384, '\p{^-Deva}', "");
Expect(0, 2384, '\P{-Deva}', "");
Expect(1, 2384, '\P{^-Deva}', "");
Expect(0, 2303, '\p{-Deva}', "");
Expect(1, 2303, '\p{^-Deva}', "");
Expect(1, 2303, '\P{-Deva}', "");
Expect(0, 2303, '\P{^-Deva}', "");
Error('\p{_Is:=deva}');
Error('\P{_Is:=deva}');
Expect(1, 2384, '\p{isdeva}', "");
Expect(0, 2384, '\p{^isdeva}', "");
Expect(0, 2384, '\P{isdeva}', "");
Expect(1, 2384, '\P{^isdeva}', "");
Expect(0, 2303, '\p{isdeva}', "");
Expect(1, 2303, '\p{^isdeva}', "");
Expect(1, 2303, '\P{isdeva}', "");
Expect(0, 2303, '\P{^isdeva}', "");
Expect(1, 2384, '\p{	Is	DEVA}', "");
Expect(0, 2384, '\p{^	Is	DEVA}', "");
Expect(0, 2384, '\P{	Is	DEVA}', "");
Expect(1, 2384, '\P{^	Is	DEVA}', "");
Expect(0, 2303, '\p{	Is	DEVA}', "");
Expect(1, 2303, '\p{^	Is	DEVA}', "");
Expect(1, 2303, '\P{	Is	DEVA}', "");
Expect(0, 2303, '\P{^	Is	DEVA}', "");
Error('\p{:=-Brahmi}');
Error('\P{:=-Brahmi}');
Expect(1, 69709, '\p{brahmi}', "");
Expect(0, 69709, '\p{^brahmi}', "");
Expect(0, 69709, '\P{brahmi}', "");
Expect(1, 69709, '\P{^brahmi}', "");
Expect(0, 69631, '\p{brahmi}', "");
Expect(1, 69631, '\p{^brahmi}', "");
Expect(1, 69631, '\P{brahmi}', "");
Expect(0, 69631, '\P{^brahmi}', "");
Expect(1, 69709, '\p{ -BRAHMI}', "");
Expect(0, 69709, '\p{^ -BRAHMI}', "");
Expect(0, 69709, '\P{ -BRAHMI}', "");
Expect(1, 69709, '\P{^ -BRAHMI}', "");
Expect(0, 69631, '\p{ -BRAHMI}', "");
Expect(1, 69631, '\p{^ -BRAHMI}', "");
Expect(1, 69631, '\P{ -BRAHMI}', "");
Expect(0, 69631, '\P{^ -BRAHMI}', "");
Error('\p{_	is:=Brahmi}');
Error('\P{_	is:=Brahmi}');
Expect(1, 69709, '\p{isbrahmi}', "");
Expect(0, 69709, '\p{^isbrahmi}', "");
Expect(0, 69709, '\P{isbrahmi}', "");
Expect(1, 69709, '\P{^isbrahmi}', "");
Expect(0, 69631, '\p{isbrahmi}', "");
Expect(1, 69631, '\p{^isbrahmi}', "");
Expect(1, 69631, '\P{isbrahmi}', "");
Expect(0, 69631, '\P{^isbrahmi}', "");
Expect(1, 69709, '\p{_	Is-Brahmi}', "");
Expect(0, 69709, '\p{^_	Is-Brahmi}', "");
Expect(0, 69709, '\P{_	Is-Brahmi}', "");
Expect(1, 69709, '\P{^_	Is-Brahmi}', "");
Expect(0, 69631, '\p{_	Is-Brahmi}', "");
Expect(1, 69631, '\p{^_	Is-Brahmi}', "");
Expect(1, 69631, '\P{_	Is-Brahmi}', "");
Expect(0, 69631, '\P{^_	Is-Brahmi}', "");
Error('\p{ /a/brah}');
Error('\P{ /a/brah}');
Expect(1, 69709, '\p{brah}', "");
Expect(0, 69709, '\p{^brah}', "");
Expect(0, 69709, '\P{brah}', "");
Expect(1, 69709, '\P{^brah}', "");
Expect(0, 69631, '\p{brah}', "");
Expect(1, 69631, '\p{^brah}', "");
Expect(1, 69631, '\P{brah}', "");
Expect(0, 69631, '\P{^brah}', "");
Expect(1, 69709, '\p{	Brah}', "");
Expect(0, 69709, '\p{^	Brah}', "");
Expect(0, 69709, '\P{	Brah}', "");
Expect(1, 69709, '\P{^	Brah}', "");
Expect(0, 69631, '\p{	Brah}', "");
Expect(1, 69631, '\p{^	Brah}', "");
Expect(1, 69631, '\P{	Brah}', "");
Expect(0, 69631, '\P{^	Brah}', "");
Error('\p{:=-IS_Brah}');
Error('\P{:=-IS_Brah}');
Expect(1, 69709, '\p{isbrah}', "");
Expect(0, 69709, '\p{^isbrah}', "");
Expect(0, 69709, '\P{isbrah}', "");
Expect(1, 69709, '\P{^isbrah}', "");
Expect(0, 69631, '\p{isbrah}', "");
Expect(1, 69631, '\p{^isbrah}', "");
Expect(1, 69631, '\P{isbrah}', "");
Expect(0, 69631, '\P{^isbrah}', "");
Expect(1, 69709, '\p{__IS_Brah}', "");
Expect(0, 69709, '\p{^__IS_Brah}', "");
Expect(0, 69709, '\P{__IS_Brah}', "");
Expect(1, 69709, '\P{^__IS_Brah}', "");
Expect(0, 69631, '\p{__IS_Brah}', "");
Expect(1, 69631, '\p{^__IS_Brah}', "");
Expect(1, 69631, '\P{__IS_Brah}', "");
Expect(0, 69631, '\P{^__IS_Brah}', "");
Error('\p{ /a/final PUNCTUATION}');
Error('\P{ /a/final PUNCTUATION}');
Expect(1, 187, '\p{finalpunctuation}', "");
Expect(0, 187, '\p{^finalpunctuation}', "");
Expect(0, 187, '\P{finalpunctuation}', "");
Expect(1, 187, '\P{^finalpunctuation}', "");
Expect(0, 186, '\p{finalpunctuation}', "");
Expect(1, 186, '\p{^finalpunctuation}', "");
Expect(1, 186, '\P{finalpunctuation}', "");
Expect(0, 186, '\P{^finalpunctuation}', "");
Expect(1, 187, '\p{_-finalPunctuation}', "");
Expect(0, 187, '\p{^_-finalPunctuation}', "");
Expect(0, 187, '\P{_-finalPunctuation}', "");
Expect(1, 187, '\P{^_-finalPunctuation}', "");
Expect(0, 186, '\p{_-finalPunctuation}', "");
Expect(1, 186, '\p{^_-finalPunctuation}', "");
Expect(1, 186, '\P{_-finalPunctuation}', "");
Expect(0, 186, '\P{^_-finalPunctuation}', "");
Error('\p{ _Is:=FINAL_Punctuation}');
Error('\P{ _Is:=FINAL_Punctuation}');
Expect(1, 187, '\p{isfinalpunctuation}', "");
Expect(0, 187, '\p{^isfinalpunctuation}', "");
Expect(0, 187, '\P{isfinalpunctuation}', "");
Expect(1, 187, '\P{^isfinalpunctuation}', "");
Expect(0, 186, '\p{isfinalpunctuation}', "");
Expect(1, 186, '\p{^isfinalpunctuation}', "");
Expect(1, 186, '\P{isfinalpunctuation}', "");
Expect(0, 186, '\P{^isfinalpunctuation}', "");
Expect(1, 187, '\p{	_IS_FINALPunctuation}', "");
Expect(0, 187, '\p{^	_IS_FINALPunctuation}', "");
Expect(0, 187, '\P{	_IS_FINALPunctuation}', "");
Expect(1, 187, '\P{^	_IS_FINALPunctuation}', "");
Expect(0, 186, '\p{	_IS_FINALPunctuation}', "");
Expect(1, 186, '\p{^	_IS_FINALPunctuation}', "");
Expect(1, 186, '\P{	_IS_FINALPunctuation}', "");
Expect(0, 186, '\P{^	_IS_FINALPunctuation}', "");
Error('\p{/a/_pf}');
Error('\P{/a/_pf}');
Expect(1, 187, '\p{pf}', "");
Expect(0, 187, '\p{^pf}', "");
Expect(0, 187, '\P{pf}', "");
Expect(1, 187, '\P{^pf}', "");
Expect(0, 186, '\p{pf}', "");
Expect(1, 186, '\p{^pf}', "");
Expect(1, 186, '\P{pf}', "");
Expect(0, 186, '\P{^pf}', "");
Expect(1, 187, '\p{-_Pf}', "");
Expect(0, 187, '\p{^-_Pf}', "");
Expect(0, 187, '\P{-_Pf}', "");
Expect(1, 187, '\P{^-_Pf}', "");
Expect(0, 186, '\p{-_Pf}', "");
Expect(1, 186, '\p{^-_Pf}', "");
Expect(1, 186, '\P{-_Pf}', "");
Expect(0, 186, '\P{^-_Pf}', "");
Error('\p{--Is:=Pf}');
Error('\P{--Is:=Pf}');
Expect(1, 187, '\p{ispf}', "");
Expect(0, 187, '\p{^ispf}', "");
Expect(0, 187, '\P{ispf}', "");
Expect(1, 187, '\P{^ispf}', "");
Expect(0, 186, '\p{ispf}', "");
Expect(1, 186, '\p{^ispf}', "");
Expect(1, 186, '\P{ispf}', "");
Expect(0, 186, '\P{^ispf}', "");
Expect(1, 187, '\p{ Is	Pf}', "");
Expect(0, 187, '\p{^ Is	Pf}', "");
Expect(0, 187, '\P{ Is	Pf}', "");
Expect(1, 187, '\P{^ Is	Pf}', "");
Expect(0, 186, '\p{ Is	Pf}', "");
Expect(1, 186, '\p{^ Is	Pf}', "");
Expect(1, 186, '\P{ Is	Pf}', "");
Expect(0, 186, '\P{^ Is	Pf}', "");
Error('\p{/a/Modifier	LETTER}');
Error('\P{/a/Modifier	LETTER}');
Expect(1, 705, '\p{modifierletter}', "");
Expect(0, 705, '\p{^modifierletter}', "");
Expect(0, 705, '\P{modifierletter}', "");
Expect(1, 705, '\P{^modifierletter}', "");
Expect(0, 687, '\p{modifierletter}', "");
Expect(1, 687, '\p{^modifierletter}', "");
Expect(1, 687, '\P{modifierletter}', "");
Expect(0, 687, '\P{^modifierletter}', "");
Expect(1, 705, '\p{ 	modifier Letter}', "");
Expect(0, 705, '\p{^ 	modifier Letter}', "");
Expect(0, 705, '\P{ 	modifier Letter}', "");
Expect(1, 705, '\P{^ 	modifier Letter}', "");
Expect(0, 687, '\p{ 	modifier Letter}', "");
Expect(1, 687, '\p{^ 	modifier Letter}', "");
Expect(1, 687, '\P{ 	modifier Letter}', "");
Expect(0, 687, '\P{^ 	modifier Letter}', "");
Error('\p{_ IS:=MODIFIER LETTER}');
Error('\P{_ IS:=MODIFIER LETTER}');
Expect(1, 705, '\p{ismodifierletter}', "");
Expect(0, 705, '\p{^ismodifierletter}', "");
Expect(0, 705, '\P{ismodifierletter}', "");
Expect(1, 705, '\P{^ismodifierletter}', "");
Expect(0, 687, '\p{ismodifierletter}', "");
Expect(1, 687, '\p{^ismodifierletter}', "");
Expect(1, 687, '\P{ismodifierletter}', "");
Expect(0, 687, '\P{^ismodifierletter}', "");
Expect(1, 705, '\p{-	IS ModifierLetter}', "");
Expect(0, 705, '\p{^-	IS ModifierLetter}', "");
Expect(0, 705, '\P{-	IS ModifierLetter}', "");
Expect(1, 705, '\P{^-	IS ModifierLetter}', "");
Expect(0, 687, '\p{-	IS ModifierLetter}', "");
Expect(1, 687, '\p{^-	IS ModifierLetter}', "");
Expect(1, 687, '\P{-	IS ModifierLetter}', "");
Expect(0, 687, '\P{^-	IS ModifierLetter}', "");
Error('\p{/a/-_Lm}');
Error('\P{/a/-_Lm}');
Expect(1, 705, '\p{lm}', "");
Expect(0, 705, '\p{^lm}', "");
Expect(0, 705, '\P{lm}', "");
Expect(1, 705, '\P{^lm}', "");
Expect(0, 687, '\p{lm}', "");
Expect(1, 687, '\p{^lm}', "");
Expect(1, 687, '\P{lm}', "");
Expect(0, 687, '\P{^lm}', "");
Expect(1, 705, '\p{	_Lm}', "");
Expect(0, 705, '\p{^	_Lm}', "");
Expect(0, 705, '\P{	_Lm}', "");
Expect(1, 705, '\P{^	_Lm}', "");
Expect(0, 687, '\p{	_Lm}', "");
Expect(1, 687, '\p{^	_Lm}', "");
Expect(1, 687, '\P{	_Lm}', "");
Expect(0, 687, '\P{^	_Lm}', "");
Error('\p{ 	Is:=Lm}');
Error('\P{ 	Is:=Lm}');
Expect(1, 705, '\p{islm}', "");
Expect(0, 705, '\p{^islm}', "");
Expect(0, 705, '\P{islm}', "");
Expect(1, 705, '\P{^islm}', "");
Expect(0, 687, '\p{islm}', "");
Expect(1, 687, '\p{^islm}', "");
Expect(1, 687, '\P{islm}', "");
Expect(0, 687, '\P{^islm}', "");
Expect(1, 705, '\p{--isLm}', "");
Expect(0, 705, '\p{^--isLm}', "");
Expect(0, 705, '\P{--isLm}', "");
Expect(1, 705, '\P{^--isLm}', "");
Expect(0, 687, '\p{--isLm}', "");
Expect(1, 687, '\p{^--isLm}', "");
Expect(1, 687, '\P{--isLm}', "");
Expect(0, 687, '\P{^--isLm}', "");
Error('\p{_/a/Kanbun}');
Error('\P{_/a/Kanbun}');
Expect(1, 12703, '\p{kanbun}', "");
Expect(0, 12703, '\p{^kanbun}', "");
Expect(0, 12703, '\P{kanbun}', "");
Expect(1, 12703, '\P{^kanbun}', "");
Expect(0, 12687, '\p{kanbun}', "");
Expect(1, 12687, '\p{^kanbun}', "");
Expect(1, 12687, '\P{kanbun}', "");
Expect(0, 12687, '\P{^kanbun}', "");
Expect(1, 12703, '\p{--kanbun}', "");
Expect(0, 12703, '\p{^--kanbun}', "");
Expect(0, 12703, '\P{--kanbun}', "");
Expect(1, 12703, '\P{^--kanbun}', "");
Expect(0, 12687, '\p{--kanbun}', "");
Expect(1, 12687, '\p{^--kanbun}', "");
Expect(1, 12687, '\P{--kanbun}', "");
Expect(0, 12687, '\P{^--kanbun}', "");
Error('\p{/a/_ IS-Kanbun}');
Error('\P{/a/_ IS-Kanbun}');
Expect(1, 12703, '\p{iskanbun}', "");
Expect(0, 12703, '\p{^iskanbun}', "");
Expect(0, 12703, '\P{iskanbun}', "");
Expect(1, 12703, '\P{^iskanbun}', "");
Expect(0, 12687, '\p{iskanbun}', "");
Expect(1, 12687, '\p{^iskanbun}', "");
Expect(1, 12687, '\P{iskanbun}', "");
Expect(0, 12687, '\P{^iskanbun}', "");
Expect(1, 12703, '\p{_IS Kanbun}', "");
Expect(0, 12703, '\p{^_IS Kanbun}', "");
Expect(0, 12703, '\P{_IS Kanbun}', "");
Expect(1, 12703, '\P{^_IS Kanbun}', "");
Expect(0, 12687, '\p{_IS Kanbun}', "");
Expect(1, 12687, '\p{^_IS Kanbun}', "");
Expect(1, 12687, '\P{_IS Kanbun}', "");
Expect(0, 12687, '\P{^_IS Kanbun}', "");
Error('\p{ In/a/KANBUN}');
Error('\P{ In/a/KANBUN}');
Expect(1, 12703, '\p{inkanbun}', "");
Expect(0, 12703, '\p{^inkanbun}', "");
Expect(0, 12703, '\P{inkanbun}', "");
Expect(1, 12703, '\P{^inkanbun}', "");
Expect(0, 12687, '\p{inkanbun}', "");
Expect(1, 12687, '\p{^inkanbun}', "");
Expect(1, 12687, '\P{inkanbun}', "");
Expect(0, 12687, '\P{^inkanbun}', "");
Expect(1, 12703, '\p{-in KANBUN}', "");
Expect(0, 12703, '\p{^-in KANBUN}', "");
Expect(0, 12703, '\P{-in KANBUN}', "");
Expect(1, 12703, '\P{^-in KANBUN}', "");
Expect(0, 12687, '\p{-in KANBUN}', "");
Expect(1, 12687, '\p{^-in KANBUN}', "");
Expect(1, 12687, '\P{-in KANBUN}', "");
Expect(0, 12687, '\P{^-in KANBUN}', "");
Error('\p{ /a/MISCELLANEOUS MATHEMATICAL	Symbols-A}');
Error('\P{ /a/MISCELLANEOUS MATHEMATICAL	Symbols-A}');
Expect(1, 10223, '\p{miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10223, '\p{^miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10223, '\P{miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10223, '\P{^miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10175, '\p{miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10175, '\p{^miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10175, '\P{miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10175, '\P{^miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10223, '\p{	 MISCELLANEOUS_MATHEMATICAL	SYMBOLS A}', "");
Expect(0, 10223, '\p{^	 MISCELLANEOUS_MATHEMATICAL	SYMBOLS A}', "");
Expect(0, 10223, '\P{	 MISCELLANEOUS_MATHEMATICAL	SYMBOLS A}', "");
Expect(1, 10223, '\P{^	 MISCELLANEOUS_MATHEMATICAL	SYMBOLS A}', "");
Expect(0, 10175, '\p{	 MISCELLANEOUS_MATHEMATICAL	SYMBOLS A}', "");
Expect(1, 10175, '\p{^	 MISCELLANEOUS_MATHEMATICAL	SYMBOLS A}', "");
Expect(1, 10175, '\P{	 MISCELLANEOUS_MATHEMATICAL	SYMBOLS A}', "");
Expect(0, 10175, '\P{^	 MISCELLANEOUS_MATHEMATICAL	SYMBOLS A}', "");
Error('\p{_is/a/miscellaneous	MATHEMATICAL symbols a}');
Error('\P{_is/a/miscellaneous	MATHEMATICAL symbols a}');
Expect(1, 10223, '\p{ismiscellaneousmathematicalsymbolsa}', "");
Expect(0, 10223, '\p{^ismiscellaneousmathematicalsymbolsa}', "");
Expect(0, 10223, '\P{ismiscellaneousmathematicalsymbolsa}', "");
Expect(1, 10223, '\P{^ismiscellaneousmathematicalsymbolsa}', "");
Expect(0, 10175, '\p{ismiscellaneousmathematicalsymbolsa}', "");
Expect(1, 10175, '\p{^ismiscellaneousmathematicalsymbolsa}', "");
Expect(1, 10175, '\P{ismiscellaneousmathematicalsymbolsa}', "");
Expect(0, 10175, '\P{^ismiscellaneousmathematicalsymbolsa}', "");
Expect(1, 10223, '\p{  Is Miscellaneous_Mathematical symbols	A}', "");
Expect(0, 10223, '\p{^  Is Miscellaneous_Mathematical symbols	A}', "");
Expect(0, 10223, '\P{  Is Miscellaneous_Mathematical symbols	A}', "");
Expect(1, 10223, '\P{^  Is Miscellaneous_Mathematical symbols	A}', "");
Expect(0, 10175, '\p{  Is Miscellaneous_Mathematical symbols	A}', "");
Expect(1, 10175, '\p{^  Is Miscellaneous_Mathematical symbols	A}', "");
Expect(1, 10175, '\P{  Is Miscellaneous_Mathematical symbols	A}', "");
Expect(0, 10175, '\P{^  Is Miscellaneous_Mathematical symbols	A}', "");
Error('\p{/a/	in_Miscellaneous Mathematical	SYMBOLS	A}');
Error('\P{/a/	in_Miscellaneous Mathematical	SYMBOLS	A}');
Expect(1, 10223, '\p{inmiscellaneousmathematicalsymbolsa}', "");
Expect(0, 10223, '\p{^inmiscellaneousmathematicalsymbolsa}', "");
Expect(0, 10223, '\P{inmiscellaneousmathematicalsymbolsa}', "");
Expect(1, 10223, '\P{^inmiscellaneousmathematicalsymbolsa}', "");
Expect(0, 10175, '\p{inmiscellaneousmathematicalsymbolsa}', "");
Expect(1, 10175, '\p{^inmiscellaneousmathematicalsymbolsa}', "");
Expect(1, 10175, '\P{inmiscellaneousmathematicalsymbolsa}', "");
Expect(0, 10175, '\P{^inmiscellaneousmathematicalsymbolsa}', "");
Expect(1, 10223, '\p{In_Miscellaneous	Mathematical-symbols-A}', "");
Expect(0, 10223, '\p{^In_Miscellaneous	Mathematical-symbols-A}', "");
Expect(0, 10223, '\P{In_Miscellaneous	Mathematical-symbols-A}', "");
Expect(1, 10223, '\P{^In_Miscellaneous	Mathematical-symbols-A}', "");
Expect(0, 10175, '\p{In_Miscellaneous	Mathematical-symbols-A}', "");
Expect(1, 10175, '\p{^In_Miscellaneous	Mathematical-symbols-A}', "");
Expect(1, 10175, '\P{In_Miscellaneous	Mathematical-symbols-A}', "");
Expect(0, 10175, '\P{^In_Miscellaneous	Mathematical-symbols-A}', "");
Error('\p{ -in/a/devanagari}');
Error('\P{ -in/a/devanagari}');
Expect(1, 2431, '\p{indevanagari}', "");
Expect(0, 2431, '\p{^indevanagari}', "");
Expect(0, 2431, '\P{indevanagari}', "");
Expect(1, 2431, '\P{^indevanagari}', "");
Expect(0, 2303, '\p{indevanagari}', "");
Expect(1, 2303, '\p{^indevanagari}', "");
Expect(1, 2303, '\P{indevanagari}', "");
Expect(0, 2303, '\P{^indevanagari}', "");
Expect(1, 2431, '\p{- INDevanagari}', "");
Expect(0, 2431, '\p{^- INDevanagari}', "");
Expect(0, 2431, '\P{- INDevanagari}', "");
Expect(1, 2431, '\P{^- INDevanagari}', "");
Expect(0, 2303, '\p{- INDevanagari}', "");
Expect(1, 2303, '\p{^- INDevanagari}', "");
Expect(1, 2303, '\P{- INDevanagari}', "");
Expect(0, 2303, '\P{^- INDevanagari}', "");
Error('\p{_-TIBETAN/a/}');
Error('\P{_-TIBETAN/a/}');
Expect(1, 3911, '\p{tibetan}', "");
Expect(0, 3911, '\p{^tibetan}', "");
Expect(0, 3911, '\P{tibetan}', "");
Expect(1, 3911, '\P{^tibetan}', "");
Expect(0, 3839, '\p{tibetan}', "");
Expect(1, 3839, '\p{^tibetan}', "");
Expect(1, 3839, '\P{tibetan}', "");
Expect(0, 3839, '\P{^tibetan}', "");
Expect(1, 3911, '\p{- tibetan}', "");
Expect(0, 3911, '\p{^- tibetan}', "");
Expect(0, 3911, '\P{- tibetan}', "");
Expect(1, 3911, '\P{^- tibetan}', "");
Expect(0, 3839, '\p{- tibetan}', "");
Expect(1, 3839, '\p{^- tibetan}', "");
Expect(1, 3839, '\P{- tibetan}', "");
Expect(0, 3839, '\P{^- tibetan}', "");
Error('\p{/a/		Is-tibetan}');
Error('\P{/a/		Is-tibetan}');
Expect(1, 3911, '\p{istibetan}', "");
Expect(0, 3911, '\p{^istibetan}', "");
Expect(0, 3911, '\P{istibetan}', "");
Expect(1, 3911, '\P{^istibetan}', "");
Expect(0, 3839, '\p{istibetan}', "");
Expect(1, 3839, '\p{^istibetan}', "");
Expect(1, 3839, '\P{istibetan}', "");
Expect(0, 3839, '\P{^istibetan}', "");
Expect(1, 3911, '\p{_	Is-TIBETAN}', "");
Expect(0, 3911, '\p{^_	Is-TIBETAN}', "");
Expect(0, 3911, '\P{_	Is-TIBETAN}', "");
Expect(1, 3911, '\P{^_	Is-TIBETAN}', "");
Expect(0, 3839, '\p{_	Is-TIBETAN}', "");
Expect(1, 3839, '\p{^_	Is-TIBETAN}', "");
Expect(1, 3839, '\P{_	Is-TIBETAN}', "");
Expect(0, 3839, '\P{^_	Is-TIBETAN}', "");
Error('\p{:=- TIBT}');
Error('\P{:=- TIBT}');
Expect(1, 3911, '\p{tibt}', "");
Expect(0, 3911, '\p{^tibt}', "");
Expect(0, 3911, '\P{tibt}', "");
Expect(1, 3911, '\P{^tibt}', "");
Expect(0, 3839, '\p{tibt}', "");
Expect(1, 3839, '\p{^tibt}', "");
Expect(1, 3839, '\P{tibt}', "");
Expect(0, 3839, '\P{^tibt}', "");
Expect(1, 3911, '\p{	TIBT}', "");
Expect(0, 3911, '\p{^	TIBT}', "");
Expect(0, 3911, '\P{	TIBT}', "");
Expect(1, 3911, '\P{^	TIBT}', "");
Expect(0, 3839, '\p{	TIBT}', "");
Expect(1, 3839, '\p{^	TIBT}', "");
Expect(1, 3839, '\P{	TIBT}', "");
Expect(0, 3839, '\P{^	TIBT}', "");
Error('\p{_is:=TIBT}');
Error('\P{_is:=TIBT}');
Expect(1, 3911, '\p{istibt}', "");
Expect(0, 3911, '\p{^istibt}', "");
Expect(0, 3911, '\P{istibt}', "");
Expect(1, 3911, '\P{^istibt}', "");
Expect(0, 3839, '\p{istibt}', "");
Expect(1, 3839, '\p{^istibt}', "");
Expect(1, 3839, '\P{istibt}', "");
Expect(0, 3839, '\P{^istibt}', "");
Expect(1, 3911, '\p{- is_TIBT}', "");
Expect(0, 3911, '\p{^- is_TIBT}', "");
Expect(0, 3911, '\P{- is_TIBT}', "");
Expect(1, 3911, '\P{^- is_TIBT}', "");
Expect(0, 3839, '\p{- is_TIBT}', "");
Expect(1, 3839, '\p{^- is_TIBT}', "");
Expect(1, 3839, '\P{- is_TIBT}', "");
Expect(0, 3839, '\P{^- is_TIBT}', "");
Error('\p{/a/	_javanese}');
Error('\P{/a/	_javanese}');
Expect(1, 43469, '\p{javanese}', "");
Expect(0, 43469, '\p{^javanese}', "");
Expect(0, 43469, '\P{javanese}', "");
Expect(1, 43469, '\P{^javanese}', "");
Expect(0, 43391, '\p{javanese}', "");
Expect(1, 43391, '\p{^javanese}', "");
Expect(1, 43391, '\P{javanese}', "");
Expect(0, 43391, '\P{^javanese}', "");
Expect(1, 43469, '\p{	JAVANESE}', "");
Expect(0, 43469, '\p{^	JAVANESE}', "");
Expect(0, 43469, '\P{	JAVANESE}', "");
Expect(1, 43469, '\P{^	JAVANESE}', "");
Expect(0, 43391, '\p{	JAVANESE}', "");
Expect(1, 43391, '\p{^	JAVANESE}', "");
Expect(1, 43391, '\P{	JAVANESE}', "");
Expect(0, 43391, '\P{^	JAVANESE}', "");
Error('\p{ -is:=Javanese}');
Error('\P{ -is:=Javanese}');
Expect(1, 43469, '\p{isjavanese}', "");
Expect(0, 43469, '\p{^isjavanese}', "");
Expect(0, 43469, '\P{isjavanese}', "");
Expect(1, 43469, '\P{^isjavanese}', "");
Expect(0, 43391, '\p{isjavanese}', "");
Expect(1, 43391, '\p{^isjavanese}', "");
Expect(1, 43391, '\P{isjavanese}', "");
Expect(0, 43391, '\P{^isjavanese}', "");
Expect(1, 43469, '\p{__is-JAVANESE}', "");
Expect(0, 43469, '\p{^__is-JAVANESE}', "");
Expect(0, 43469, '\P{__is-JAVANESE}', "");
Expect(1, 43469, '\P{^__is-JAVANESE}', "");
Expect(0, 43391, '\p{__is-JAVANESE}', "");
Expect(1, 43391, '\p{^__is-JAVANESE}', "");
Expect(1, 43391, '\P{__is-JAVANESE}', "");
Expect(0, 43391, '\P{^__is-JAVANESE}', "");
Error('\p{/a/		Java}');
Error('\P{/a/		Java}');
Expect(1, 43469, '\p{java}', "");
Expect(0, 43469, '\p{^java}', "");
Expect(0, 43469, '\P{java}', "");
Expect(1, 43469, '\P{^java}', "");
Expect(0, 43391, '\p{java}', "");
Expect(1, 43391, '\p{^java}', "");
Expect(1, 43391, '\P{java}', "");
Expect(0, 43391, '\P{^java}', "");
Expect(1, 43469, '\p{_JAVA}', "");
Expect(0, 43469, '\p{^_JAVA}', "");
Expect(0, 43469, '\P{_JAVA}', "");
Expect(1, 43469, '\P{^_JAVA}', "");
Expect(0, 43391, '\p{_JAVA}', "");
Expect(1, 43391, '\p{^_JAVA}', "");
Expect(1, 43391, '\P{_JAVA}', "");
Expect(0, 43391, '\P{^_JAVA}', "");
Error('\p{/a/_	IS_Java}');
Error('\P{/a/_	IS_Java}');
Expect(1, 43469, '\p{isjava}', "");
Expect(0, 43469, '\p{^isjava}', "");
Expect(0, 43469, '\P{isjava}', "");
Expect(1, 43469, '\P{^isjava}', "");
Expect(0, 43391, '\p{isjava}', "");
Expect(1, 43391, '\p{^isjava}', "");
Expect(1, 43391, '\P{isjava}', "");
Expect(0, 43391, '\P{^isjava}', "");
Expect(1, 43469, '\p{	-Is JAVA}', "");
Expect(0, 43469, '\p{^	-Is JAVA}', "");
Expect(0, 43469, '\P{	-Is JAVA}', "");
Expect(1, 43469, '\P{^	-Is JAVA}', "");
Expect(0, 43391, '\p{	-Is JAVA}', "");
Expect(1, 43391, '\p{^	-Is JAVA}', "");
Expect(1, 43391, '\P{	-Is JAVA}', "");
Expect(0, 43391, '\P{^	-Is JAVA}', "");
Error('\p{-Telugu/a/}');
Error('\P{-Telugu/a/}');
Expect(1, 3075, '\p{telugu}', "");
Expect(0, 3075, '\p{^telugu}', "");
Expect(0, 3075, '\P{telugu}', "");
Expect(1, 3075, '\P{^telugu}', "");
Expect(0, 3072, '\p{telugu}', "");
Expect(1, 3072, '\p{^telugu}', "");
Expect(1, 3072, '\P{telugu}', "");
Expect(0, 3072, '\P{^telugu}', "");
Expect(1, 3075, '\p{	Telugu}', "");
Expect(0, 3075, '\p{^	Telugu}', "");
Expect(0, 3075, '\P{	Telugu}', "");
Expect(1, 3075, '\P{^	Telugu}', "");
Expect(0, 3072, '\p{	Telugu}', "");
Expect(1, 3072, '\p{^	Telugu}', "");
Expect(1, 3072, '\P{	Telugu}', "");
Expect(0, 3072, '\P{^	Telugu}', "");
Error('\p{_IS-telugu/a/}');
Error('\P{_IS-telugu/a/}');
Expect(1, 3075, '\p{istelugu}', "");
Expect(0, 3075, '\p{^istelugu}', "");
Expect(0, 3075, '\P{istelugu}', "");
Expect(1, 3075, '\P{^istelugu}', "");
Expect(0, 3072, '\p{istelugu}', "");
Expect(1, 3072, '\p{^istelugu}', "");
Expect(1, 3072, '\P{istelugu}', "");
Expect(0, 3072, '\P{^istelugu}', "");
Expect(1, 3075, '\p{ 	IS	Telugu}', "");
Expect(0, 3075, '\p{^ 	IS	Telugu}', "");
Expect(0, 3075, '\P{ 	IS	Telugu}', "");
Expect(1, 3075, '\P{^ 	IS	Telugu}', "");
Expect(0, 3072, '\p{ 	IS	Telugu}', "");
Expect(1, 3072, '\p{^ 	IS	Telugu}', "");
Expect(1, 3072, '\P{ 	IS	Telugu}', "");
Expect(0, 3072, '\P{^ 	IS	Telugu}', "");
Error('\p{/a/ TELU}');
Error('\P{/a/ TELU}');
Expect(1, 3075, '\p{telu}', "");
Expect(0, 3075, '\p{^telu}', "");
Expect(0, 3075, '\P{telu}', "");
Expect(1, 3075, '\P{^telu}', "");
Expect(0, 3072, '\p{telu}', "");
Expect(1, 3072, '\p{^telu}', "");
Expect(1, 3072, '\P{telu}', "");
Expect(0, 3072, '\P{^telu}', "");
Expect(1, 3075, '\p{	_Telu}', "");
Expect(0, 3075, '\p{^	_Telu}', "");
Expect(0, 3075, '\P{	_Telu}', "");
Expect(1, 3075, '\P{^	_Telu}', "");
Expect(0, 3072, '\p{	_Telu}', "");
Expect(1, 3072, '\p{^	_Telu}', "");
Expect(1, 3072, '\P{	_Telu}', "");
Expect(0, 3072, '\P{^	_Telu}', "");
Error('\p{_:=IS	telu}');
Error('\P{_:=IS	telu}');
Expect(1, 3075, '\p{istelu}', "");
Expect(0, 3075, '\p{^istelu}', "");
Expect(0, 3075, '\P{istelu}', "");
Expect(1, 3075, '\P{^istelu}', "");
Expect(0, 3072, '\p{istelu}', "");
Expect(1, 3072, '\p{^istelu}', "");
Expect(1, 3072, '\P{istelu}', "");
Expect(0, 3072, '\P{^istelu}', "");
Expect(1, 3075, '\p{-is telu}', "");
Expect(0, 3075, '\p{^-is telu}', "");
Expect(0, 3075, '\P{-is telu}', "");
Expect(1, 3075, '\P{^-is telu}', "");
Expect(0, 3072, '\p{-is telu}', "");
Expect(1, 3072, '\p{^-is telu}', "");
Expect(1, 3072, '\P{-is telu}', "");
Expect(0, 3072, '\P{^-is telu}', "");
Error('\p{	_Yi-Radicals/a/}');
Error('\P{	_Yi-Radicals/a/}');
Expect(1, 42191, '\p{yiradicals}', "");
Expect(0, 42191, '\p{^yiradicals}', "");
Expect(0, 42191, '\P{yiradicals}', "");
Expect(1, 42191, '\P{^yiradicals}', "");
Expect(0, 42127, '\p{yiradicals}', "");
Expect(1, 42127, '\p{^yiradicals}', "");
Expect(1, 42127, '\P{yiradicals}', "");
Expect(0, 42127, '\P{^yiradicals}', "");
Expect(1, 42191, '\p{ 	YI_RADICALS}', "");
Expect(0, 42191, '\p{^ 	YI_RADICALS}', "");
Expect(0, 42191, '\P{ 	YI_RADICALS}', "");
Expect(1, 42191, '\P{^ 	YI_RADICALS}', "");
Expect(0, 42127, '\p{ 	YI_RADICALS}', "");
Expect(1, 42127, '\p{^ 	YI_RADICALS}', "");
Expect(1, 42127, '\P{ 	YI_RADICALS}', "");
Expect(0, 42127, '\P{^ 	YI_RADICALS}', "");
Error('\p{  IS-Yiradicals:=}');
Error('\P{  IS-Yiradicals:=}');
Expect(1, 42191, '\p{isyiradicals}', "");
Expect(0, 42191, '\p{^isyiradicals}', "");
Expect(0, 42191, '\P{isyiradicals}', "");
Expect(1, 42191, '\P{^isyiradicals}', "");
Expect(0, 42127, '\p{isyiradicals}', "");
Expect(1, 42127, '\p{^isyiradicals}', "");
Expect(1, 42127, '\P{isyiradicals}', "");
Expect(0, 42127, '\P{^isyiradicals}', "");
Expect(1, 42191, '\p{-	Is_YI	radicals}', "");
Expect(0, 42191, '\p{^-	Is_YI	radicals}', "");
Expect(0, 42191, '\P{-	Is_YI	radicals}', "");
Expect(1, 42191, '\P{^-	Is_YI	radicals}', "");
Expect(0, 42127, '\p{-	Is_YI	radicals}', "");
Expect(1, 42127, '\p{^-	Is_YI	radicals}', "");
Expect(1, 42127, '\P{-	Is_YI	radicals}', "");
Expect(0, 42127, '\P{^-	Is_YI	radicals}', "");
Error('\p{ :=InYi Radicals}');
Error('\P{ :=InYi Radicals}');
Expect(1, 42191, '\p{inyiradicals}', "");
Expect(0, 42191, '\p{^inyiradicals}', "");
Expect(0, 42191, '\P{inyiradicals}', "");
Expect(1, 42191, '\P{^inyiradicals}', "");
Expect(0, 42127, '\p{inyiradicals}', "");
Expect(1, 42127, '\p{^inyiradicals}', "");
Expect(1, 42127, '\P{inyiradicals}', "");
Expect(0, 42127, '\P{^inyiradicals}', "");
Expect(1, 42191, '\p{in	YI	RADICALS}', "");
Expect(0, 42191, '\p{^in	YI	RADICALS}', "");
Expect(0, 42191, '\P{in	YI	RADICALS}', "");
Expect(1, 42191, '\P{^in	YI	RADICALS}', "");
Expect(0, 42127, '\p{in	YI	RADICALS}', "");
Expect(1, 42127, '\p{^in	YI	RADICALS}', "");
Expect(1, 42127, '\P{in	YI	RADICALS}', "");
Expect(0, 42127, '\P{^in	YI	RADICALS}', "");
Error('\p{:=In Shavian}');
Error('\P{:=In Shavian}');
Expect(1, 66687, '\p{inshavian}', "");
Expect(0, 66687, '\p{^inshavian}', "");
Expect(0, 66687, '\P{inshavian}', "");
Expect(1, 66687, '\P{^inshavian}', "");
Expect(0, 66639, '\p{inshavian}', "");
Expect(1, 66639, '\p{^inshavian}', "");
Expect(1, 66639, '\P{inshavian}', "");
Expect(0, 66639, '\P{^inshavian}', "");
Expect(1, 66687, '\p{ in	Shavian}', "");
Expect(0, 66687, '\p{^ in	Shavian}', "");
Expect(0, 66687, '\P{ in	Shavian}', "");
Expect(1, 66687, '\P{^ in	Shavian}', "");
Expect(0, 66639, '\p{ in	Shavian}', "");
Expect(1, 66639, '\p{^ in	Shavian}', "");
Expect(1, 66639, '\P{ in	Shavian}', "");
Expect(0, 66639, '\P{^ in	Shavian}', "");
Error('\p{:=_Ancient-symbols}');
Error('\P{:=_Ancient-symbols}');
Expect(1, 65999, '\p{ancientsymbols}', "");
Expect(0, 65999, '\p{^ancientsymbols}', "");
Expect(0, 65999, '\P{ancientsymbols}', "");
Expect(1, 65999, '\P{^ancientsymbols}', "");
Expect(0, 65935, '\p{ancientsymbols}', "");
Expect(1, 65935, '\p{^ancientsymbols}', "");
Expect(1, 65935, '\P{ancientsymbols}', "");
Expect(0, 65935, '\P{^ancientsymbols}', "");
Expect(1, 65999, '\p{-Ancient_symbols}', "");
Expect(0, 65999, '\p{^-Ancient_symbols}', "");
Expect(0, 65999, '\P{-Ancient_symbols}', "");
Expect(1, 65999, '\P{^-Ancient_symbols}', "");
Expect(0, 65935, '\p{-Ancient_symbols}', "");
Expect(1, 65935, '\p{^-Ancient_symbols}', "");
Expect(1, 65935, '\P{-Ancient_symbols}', "");
Expect(0, 65935, '\P{^-Ancient_symbols}', "");
Error('\p{_IS:=ANCIENTSymbols}');
Error('\P{_IS:=ANCIENTSymbols}');
Expect(1, 65999, '\p{isancientsymbols}', "");
Expect(0, 65999, '\p{^isancientsymbols}', "");
Expect(0, 65999, '\P{isancientsymbols}', "");
Expect(1, 65999, '\P{^isancientsymbols}', "");
Expect(0, 65935, '\p{isancientsymbols}', "");
Expect(1, 65935, '\p{^isancientsymbols}', "");
Expect(1, 65935, '\P{isancientsymbols}', "");
Expect(0, 65935, '\P{^isancientsymbols}', "");
Expect(1, 65999, '\p{  Is-Ancient symbols}', "");
Expect(0, 65999, '\p{^  Is-Ancient symbols}', "");
Expect(0, 65999, '\P{  Is-Ancient symbols}', "");
Expect(1, 65999, '\P{^  Is-Ancient symbols}', "");
Expect(0, 65935, '\p{  Is-Ancient symbols}', "");
Expect(1, 65935, '\p{^  Is-Ancient symbols}', "");
Expect(1, 65935, '\P{  Is-Ancient symbols}', "");
Expect(0, 65935, '\P{^  Is-Ancient symbols}', "");
Error('\p{_IN/a/ANCIENT_Symbols}');
Error('\P{_IN/a/ANCIENT_Symbols}');
Expect(1, 65999, '\p{inancientsymbols}', "");
Expect(0, 65999, '\p{^inancientsymbols}', "");
Expect(0, 65999, '\P{inancientsymbols}', "");
Expect(1, 65999, '\P{^inancientsymbols}', "");
Expect(0, 65935, '\p{inancientsymbols}', "");
Expect(1, 65935, '\p{^inancientsymbols}', "");
Expect(1, 65935, '\P{inancientsymbols}', "");
Expect(0, 65935, '\P{^inancientsymbols}', "");
Expect(1, 65999, '\p{- In	Ancient Symbols}', "");
Expect(0, 65999, '\p{^- In	Ancient Symbols}', "");
Expect(0, 65999, '\P{- In	Ancient Symbols}', "");
Expect(1, 65999, '\P{^- In	Ancient Symbols}', "");
Expect(0, 65935, '\p{- In	Ancient Symbols}', "");
Expect(1, 65935, '\p{^- In	Ancient Symbols}', "");
Expect(1, 65935, '\P{- In	Ancient Symbols}', "");
Expect(0, 65935, '\P{^- In	Ancient Symbols}', "");
Error('\p{ :=Quotation MARK}');
Error('\P{ :=Quotation MARK}');
Expect(1, 34, '\p{quotationmark}', "");
Expect(0, 34, '\p{^quotationmark}', "");
Expect(0, 34, '\P{quotationmark}', "");
Expect(1, 34, '\P{^quotationmark}', "");
Expect(0, 33, '\p{quotationmark}', "");
Expect(1, 33, '\p{^quotationmark}', "");
Expect(1, 33, '\P{quotationmark}', "");
Expect(0, 33, '\P{^quotationmark}', "");
Expect(1, 34, '\p{quotation_MARK}', "");
Expect(0, 34, '\p{^quotation_MARK}', "");
Expect(0, 34, '\P{quotation_MARK}', "");
Expect(1, 34, '\P{^quotation_MARK}', "");
Expect(0, 33, '\p{quotation_MARK}', "");
Expect(1, 33, '\p{^quotation_MARK}', "");
Expect(1, 33, '\P{quotation_MARK}', "");
Expect(0, 33, '\P{^quotation_MARK}', "");
Error('\p{/a/_-ISQUOTATION	Mark}');
Error('\P{/a/_-ISQUOTATION	Mark}');
Expect(1, 34, '\p{isquotationmark}', "");
Expect(0, 34, '\p{^isquotationmark}', "");
Expect(0, 34, '\P{isquotationmark}', "");
Expect(1, 34, '\P{^isquotationmark}', "");
Expect(0, 33, '\p{isquotationmark}', "");
Expect(1, 33, '\p{^isquotationmark}', "");
Expect(1, 33, '\P{isquotationmark}', "");
Expect(0, 33, '\P{^isquotationmark}', "");
Expect(1, 34, '\p{_Is_quotation mark}', "");
Expect(0, 34, '\p{^_Is_quotation mark}', "");
Expect(0, 34, '\P{_Is_quotation mark}', "");
Expect(1, 34, '\P{^_Is_quotation mark}', "");
Expect(0, 33, '\p{_Is_quotation mark}', "");
Expect(1, 33, '\p{^_Is_quotation mark}', "");
Expect(1, 33, '\P{_Is_quotation mark}', "");
Expect(0, 33, '\P{^_Is_quotation mark}', "");
Error('\p{	qmark/a/}');
Error('\P{	qmark/a/}');
Expect(1, 34, '\p{qmark}', "");
Expect(0, 34, '\p{^qmark}', "");
Expect(0, 34, '\P{qmark}', "");
Expect(1, 34, '\P{^qmark}', "");
Expect(0, 33, '\p{qmark}', "");
Expect(1, 33, '\p{^qmark}', "");
Expect(1, 33, '\P{qmark}', "");
Expect(0, 33, '\P{^qmark}', "");
Expect(1, 34, '\p{	QMark}', "");
Expect(0, 34, '\p{^	QMark}', "");
Expect(0, 34, '\P{	QMark}', "");
Expect(1, 34, '\P{^	QMark}', "");
Expect(0, 33, '\p{	QMark}', "");
Expect(1, 33, '\p{^	QMark}', "");
Expect(1, 33, '\P{	QMark}', "");
Expect(0, 33, '\P{^	QMark}', "");
Error('\p{/a/_IS_QMARK}');
Error('\P{/a/_IS_QMARK}');
Expect(1, 34, '\p{isqmark}', "");
Expect(0, 34, '\p{^isqmark}', "");
Expect(0, 34, '\P{isqmark}', "");
Expect(1, 34, '\P{^isqmark}', "");
Expect(0, 33, '\p{isqmark}', "");
Expect(1, 33, '\p{^isqmark}', "");
Expect(1, 33, '\P{isqmark}', "");
Expect(0, 33, '\P{^isqmark}', "");
Expect(1, 34, '\p{_-is_QMark}', "");
Expect(0, 34, '\p{^_-is_QMark}', "");
Expect(0, 34, '\P{_-is_QMark}', "");
Expect(1, 34, '\P{^_-is_QMark}', "");
Expect(0, 33, '\p{_-is_QMark}', "");
Expect(1, 33, '\p{^_-is_QMark}', "");
Expect(1, 33, '\P{_-is_QMark}', "");
Expect(0, 33, '\P{^_-is_QMark}', "");
Error('\p{_-IN:=tibetan}');
Error('\P{_-IN:=tibetan}');
Expect(1, 4095, '\p{intibetan}', "");
Expect(0, 4095, '\p{^intibetan}', "");
Expect(0, 4095, '\P{intibetan}', "");
Expect(1, 4095, '\P{^intibetan}', "");
Expect(0, 3839, '\p{intibetan}', "");
Expect(1, 3839, '\p{^intibetan}', "");
Expect(1, 3839, '\P{intibetan}', "");
Expect(0, 3839, '\P{^intibetan}', "");
Expect(1, 4095, '\p{		InTibetan}', "");
Expect(0, 4095, '\p{^		InTibetan}', "");
Expect(0, 4095, '\P{		InTibetan}', "");
Expect(1, 4095, '\P{^		InTibetan}', "");
Expect(0, 3839, '\p{		InTibetan}', "");
Expect(1, 3839, '\p{^		InTibetan}', "");
Expect(1, 3839, '\P{		InTibetan}', "");
Expect(0, 3839, '\P{^		InTibetan}', "");
Error('\p{	/a/Supplemental Mathematical Operators}');
Error('\P{	/a/Supplemental Mathematical Operators}');
Expect(1, 11007, '\p{supplementalmathematicaloperators}', "");
Expect(0, 11007, '\p{^supplementalmathematicaloperators}', "");
Expect(0, 11007, '\P{supplementalmathematicaloperators}', "");
Expect(1, 11007, '\P{^supplementalmathematicaloperators}', "");
Expect(0, 10751, '\p{supplementalmathematicaloperators}', "");
Expect(1, 10751, '\p{^supplementalmathematicaloperators}', "");
Expect(1, 10751, '\P{supplementalmathematicaloperators}', "");
Expect(0, 10751, '\P{^supplementalmathematicaloperators}', "");
Expect(1, 11007, '\p{	Supplemental	Mathematical_Operators}', "");
Expect(0, 11007, '\p{^	Supplemental	Mathematical_Operators}', "");
Expect(0, 11007, '\P{	Supplemental	Mathematical_Operators}', "");
Expect(1, 11007, '\P{^	Supplemental	Mathematical_Operators}', "");
Expect(0, 10751, '\p{	Supplemental	Mathematical_Operators}', "");
Expect(1, 10751, '\p{^	Supplemental	Mathematical_Operators}', "");
Expect(1, 10751, '\P{	Supplemental	Mathematical_Operators}', "");
Expect(0, 10751, '\P{^	Supplemental	Mathematical_Operators}', "");
Error('\p{ _Is_SUPPLEMENTAL/a/MATHEMATICAL-OPERATORS}');
Error('\P{ _Is_SUPPLEMENTAL/a/MATHEMATICAL-OPERATORS}');
Expect(1, 11007, '\p{issupplementalmathematicaloperators}', "");
Expect(0, 11007, '\p{^issupplementalmathematicaloperators}', "");
Expect(0, 11007, '\P{issupplementalmathematicaloperators}', "");
Expect(1, 11007, '\P{^issupplementalmathematicaloperators}', "");
Expect(0, 10751, '\p{issupplementalmathematicaloperators}', "");
Expect(1, 10751, '\p{^issupplementalmathematicaloperators}', "");
Expect(1, 10751, '\P{issupplementalmathematicaloperators}', "");
Expect(0, 10751, '\P{^issupplementalmathematicaloperators}', "");
Expect(1, 11007, '\p{--IS	supplemental-MATHEMATICAL-Operators}', "");
Expect(0, 11007, '\p{^--IS	supplemental-MATHEMATICAL-Operators}', "");
Expect(0, 11007, '\P{--IS	supplemental-MATHEMATICAL-Operators}', "");
Expect(1, 11007, '\P{^--IS	supplemental-MATHEMATICAL-Operators}', "");
Expect(0, 10751, '\p{--IS	supplemental-MATHEMATICAL-Operators}', "");
Expect(1, 10751, '\p{^--IS	supplemental-MATHEMATICAL-Operators}', "");
Expect(1, 10751, '\P{--IS	supplemental-MATHEMATICAL-Operators}', "");
Expect(0, 10751, '\P{^--IS	supplemental-MATHEMATICAL-Operators}', "");
Error('\p{	inSupplementalMATHEMATICAL Operators:=}');
Error('\P{	inSupplementalMATHEMATICAL Operators:=}');
Expect(1, 11007, '\p{insupplementalmathematicaloperators}', "");
Expect(0, 11007, '\p{^insupplementalmathematicaloperators}', "");
Expect(0, 11007, '\P{insupplementalmathematicaloperators}', "");
Expect(1, 11007, '\P{^insupplementalmathematicaloperators}', "");
Expect(0, 10751, '\p{insupplementalmathematicaloperators}', "");
Expect(1, 10751, '\p{^insupplementalmathematicaloperators}', "");
Expect(1, 10751, '\P{insupplementalmathematicaloperators}', "");
Expect(0, 10751, '\P{^insupplementalmathematicaloperators}', "");
Expect(1, 11007, '\p{ in-Supplemental_mathematical Operators}', "");
Expect(0, 11007, '\p{^ in-Supplemental_mathematical Operators}', "");
Expect(0, 11007, '\P{ in-Supplemental_mathematical Operators}', "");
Expect(1, 11007, '\P{^ in-Supplemental_mathematical Operators}', "");
Expect(0, 10751, '\p{ in-Supplemental_mathematical Operators}', "");
Expect(1, 10751, '\p{^ in-Supplemental_mathematical Operators}', "");
Expect(1, 10751, '\P{ in-Supplemental_mathematical Operators}', "");
Expect(0, 10751, '\P{^ in-Supplemental_mathematical Operators}', "");
Error('\p{ /a/in_Carian}');
Error('\P{ /a/in_Carian}');
Expect(1, 66271, '\p{incarian}', "");
Expect(0, 66271, '\p{^incarian}', "");
Expect(0, 66271, '\P{incarian}', "");
Expect(1, 66271, '\P{^incarian}', "");
Expect(0, 66207, '\p{incarian}', "");
Expect(1, 66207, '\p{^incarian}', "");
Expect(1, 66207, '\P{incarian}', "");
Expect(0, 66207, '\P{^incarian}', "");
Expect(1, 66271, '\p{__In_CARIAN}', "");
Expect(0, 66271, '\p{^__In_CARIAN}', "");
Expect(0, 66271, '\P{__In_CARIAN}', "");
Expect(1, 66271, '\P{^__In_CARIAN}', "");
Expect(0, 66207, '\p{__In_CARIAN}', "");
Expect(1, 66207, '\p{^__In_CARIAN}', "");
Expect(1, 66207, '\P{__In_CARIAN}', "");
Expect(0, 66207, '\P{^__In_CARIAN}', "");
Error('\p{/a/- INarabic}');
Error('\P{/a/- INarabic}');
Expect(1, 1791, '\p{inarabic}', "");
Expect(0, 1791, '\p{^inarabic}', "");
Expect(0, 1791, '\P{inarabic}', "");
Expect(1, 1791, '\P{^inarabic}', "");
Expect(0, 1535, '\p{inarabic}', "");
Expect(1, 1535, '\p{^inarabic}', "");
Expect(1, 1535, '\P{inarabic}', "");
Expect(0, 1535, '\P{^inarabic}', "");
Expect(1, 1791, '\p{  InARABIC}', "");
Expect(0, 1791, '\p{^  InARABIC}', "");
Expect(0, 1791, '\P{  InARABIC}', "");
Expect(1, 1791, '\P{^  InARABIC}', "");
Expect(0, 1535, '\p{  InARABIC}', "");
Expect(1, 1535, '\p{^  InARABIC}', "");
Expect(1, 1535, '\P{  InARABIC}', "");
Expect(0, 1535, '\P{^  InARABIC}', "");
Error('\p{__posixcntrl:=}');
Error('\P{__posixcntrl:=}');
Expect(1, 31, '\p{posixcntrl}', "");
Expect(0, 31, '\p{^posixcntrl}', "");
Expect(0, 31, '\P{posixcntrl}', "");
Expect(1, 31, '\P{^posixcntrl}', "");
Expect(0, 126, '\p{posixcntrl}', "");
Expect(1, 126, '\p{^posixcntrl}', "");
Expect(1, 126, '\P{posixcntrl}', "");
Expect(0, 126, '\P{^posixcntrl}', "");
Expect(1, 31, '\p{-_PosixCntrl}', "");
Expect(0, 31, '\p{^-_PosixCntrl}', "");
Expect(0, 31, '\P{-_PosixCntrl}', "");
Expect(1, 31, '\P{^-_PosixCntrl}', "");
Expect(0, 126, '\p{-_PosixCntrl}', "");
Expect(1, 126, '\p{^-_PosixCntrl}', "");
Expect(1, 126, '\P{-_PosixCntrl}', "");
Expect(0, 126, '\P{^-_PosixCntrl}', "");
Error('\p{:=_ is_PosixCntrl}');
Error('\P{:=_ is_PosixCntrl}');
Expect(1, 31, '\p{isposixcntrl}', "");
Expect(0, 31, '\p{^isposixcntrl}', "");
Expect(0, 31, '\P{isposixcntrl}', "");
Expect(1, 31, '\P{^isposixcntrl}', "");
Expect(0, 126, '\p{isposixcntrl}', "");
Expect(1, 126, '\p{^isposixcntrl}', "");
Expect(1, 126, '\P{isposixcntrl}', "");
Expect(0, 126, '\P{^isposixcntrl}', "");
Expect(1, 31, '\p{ -isPosixCntrl}', "");
Expect(0, 31, '\p{^ -isPosixCntrl}', "");
Expect(0, 31, '\P{ -isPosixCntrl}', "");
Expect(1, 31, '\P{^ -isPosixCntrl}', "");
Expect(0, 126, '\p{ -isPosixCntrl}', "");
Expect(1, 126, '\p{^ -isPosixCntrl}', "");
Expect(1, 126, '\P{ -isPosixCntrl}', "");
Expect(0, 126, '\P{^ -isPosixCntrl}', "");
Error('\p{ _in/a/Gothic}');
Error('\P{ _in/a/Gothic}');
Expect(1, 66383, '\p{ingothic}', "");
Expect(0, 66383, '\p{^ingothic}', "");
Expect(0, 66383, '\P{ingothic}', "");
Expect(1, 66383, '\P{^ingothic}', "");
Expect(0, 66351, '\p{ingothic}', "");
Expect(1, 66351, '\p{^ingothic}', "");
Expect(1, 66351, '\P{ingothic}', "");
Expect(0, 66351, '\P{^ingothic}', "");
Expect(1, 66383, '\p{- IN gothic}', "");
Expect(0, 66383, '\p{^- IN gothic}', "");
Expect(0, 66383, '\P{- IN gothic}', "");
Expect(1, 66383, '\P{^- IN gothic}', "");
Expect(0, 66351, '\p{- IN gothic}', "");
Expect(1, 66351, '\p{^- IN gothic}', "");
Expect(1, 66351, '\P{- IN gothic}', "");
Expect(0, 66351, '\P{^- IN gothic}', "");
Error('\p{/a/ _Mark}');
Error('\P{/a/ _Mark}');
Expect(1, 879, '\p{mark}', "");
Expect(0, 879, '\p{^mark}', "");
Expect(0, 879, '\P{mark}', "");
Expect(1, 879, '\P{^mark}', "");
Expect(0, 767, '\p{mark}', "");
Expect(1, 767, '\p{^mark}', "");
Expect(1, 767, '\P{mark}', "");
Expect(0, 767, '\P{^mark}', "");
Expect(1, 879, '\p{	Mark}', "");
Expect(0, 879, '\p{^	Mark}', "");
Expect(0, 879, '\P{	Mark}', "");
Expect(1, 879, '\P{^	Mark}', "");
Expect(0, 767, '\p{	Mark}', "");
Expect(1, 767, '\p{^	Mark}', "");
Expect(1, 767, '\P{	Mark}', "");
Expect(0, 767, '\P{^	Mark}', "");
Error('\p{ ISmark:=}');
Error('\P{ ISmark:=}');
Expect(1, 879, '\p{ismark}', "");
Expect(0, 879, '\p{^ismark}', "");
Expect(0, 879, '\P{ismark}', "");
Expect(1, 879, '\P{^ismark}', "");
Expect(0, 767, '\p{ismark}', "");
Expect(1, 767, '\p{^ismark}', "");
Expect(1, 767, '\P{ismark}', "");
Expect(0, 767, '\P{^ismark}', "");
Expect(1, 879, '\p{	 Is	Mark}', "");
Expect(0, 879, '\p{^	 Is	Mark}', "");
Expect(0, 879, '\P{	 Is	Mark}', "");
Expect(1, 879, '\P{^	 Is	Mark}', "");
Expect(0, 767, '\p{	 Is	Mark}', "");
Expect(1, 767, '\p{^	 Is	Mark}', "");
Expect(1, 767, '\P{	 Is	Mark}', "");
Expect(0, 767, '\P{^	 Is	Mark}', "");
Error('\p{_	M/a/}');
Error('\P{_	M/a/}');
Expect(1, 879, '\p{m}', "");
Expect(0, 879, '\p{^m}', "");
Expect(0, 879, '\P{m}', "");
Expect(1, 879, '\P{^m}', "");
Expect(0, 767, '\p{m}', "");
Expect(1, 767, '\p{^m}', "");
Expect(1, 767, '\P{m}', "");
Expect(0, 767, '\P{^m}', "");
Expect(1, 879, '\p{ M}', "");
Expect(0, 879, '\p{^ M}', "");
Expect(0, 879, '\P{ M}', "");
Expect(1, 879, '\P{^ M}', "");
Expect(0, 767, '\p{ M}', "");
Expect(1, 767, '\p{^ M}', "");
Expect(1, 767, '\P{ M}', "");
Expect(0, 767, '\P{^ M}', "");
Error('\p{_	IS:=M}');
Error('\P{_	IS:=M}');
Expect(1, 879, '\p{ism}', "");
Expect(0, 879, '\p{^ism}', "");
Expect(0, 879, '\P{ism}', "");
Expect(1, 879, '\P{^ism}', "");
Expect(0, 767, '\p{ism}', "");
Expect(1, 767, '\p{^ism}', "");
Expect(1, 767, '\P{ism}', "");
Expect(0, 767, '\P{^ism}', "");
Expect(1, 879, '\p{ Is_M}', "");
Expect(0, 879, '\p{^ Is_M}', "");
Expect(0, 879, '\P{ Is_M}', "");
Expect(1, 879, '\P{^ Is_M}', "");
Expect(0, 767, '\p{ Is_M}', "");
Expect(1, 767, '\p{^ Is_M}', "");
Expect(1, 767, '\P{ Is_M}', "");
Expect(0, 767, '\P{^ Is_M}', "");
Error('\p{ 	HANGUL/a/Syllables}');
Error('\P{ 	HANGUL/a/Syllables}');
Expect(1, 55215, '\p{hangulsyllables}', "");
Expect(0, 55215, '\p{^hangulsyllables}', "");
Expect(0, 55215, '\P{hangulsyllables}', "");
Expect(1, 55215, '\P{^hangulsyllables}', "");
Expect(0, 44031, '\p{hangulsyllables}', "");
Expect(1, 44031, '\p{^hangulsyllables}', "");
Expect(1, 44031, '\P{hangulsyllables}', "");
Expect(0, 44031, '\P{^hangulsyllables}', "");
Expect(1, 55215, '\p{-Hangul-SYLLABLES}', "");
Expect(0, 55215, '\p{^-Hangul-SYLLABLES}', "");
Expect(0, 55215, '\P{-Hangul-SYLLABLES}', "");
Expect(1, 55215, '\P{^-Hangul-SYLLABLES}', "");
Expect(0, 44031, '\p{-Hangul-SYLLABLES}', "");
Expect(1, 44031, '\p{^-Hangul-SYLLABLES}', "");
Expect(1, 44031, '\P{-Hangul-SYLLABLES}', "");
Expect(0, 44031, '\P{^-Hangul-SYLLABLES}', "");
Error('\p{__Is Hangul/a/SYLLABLES}');
Error('\P{__Is Hangul/a/SYLLABLES}');
Expect(1, 55215, '\p{ishangulsyllables}', "");
Expect(0, 55215, '\p{^ishangulsyllables}', "");
Expect(0, 55215, '\P{ishangulsyllables}', "");
Expect(1, 55215, '\P{^ishangulsyllables}', "");
Expect(0, 44031, '\p{ishangulsyllables}', "");
Expect(1, 44031, '\p{^ishangulsyllables}', "");
Expect(1, 44031, '\P{ishangulsyllables}', "");
Expect(0, 44031, '\P{^ishangulsyllables}', "");
Expect(1, 55215, '\p{Is-Hangulsyllables}', "");
Expect(0, 55215, '\p{^Is-Hangulsyllables}', "");
Expect(0, 55215, '\P{Is-Hangulsyllables}', "");
Expect(1, 55215, '\P{^Is-Hangulsyllables}', "");
Expect(0, 44031, '\p{Is-Hangulsyllables}', "");
Expect(1, 44031, '\p{^Is-Hangulsyllables}', "");
Expect(1, 44031, '\P{Is-Hangulsyllables}', "");
Expect(0, 44031, '\P{^Is-Hangulsyllables}', "");
Error('\p{-IN hangul/a/Syllables}');
Error('\P{-IN hangul/a/Syllables}');
Expect(1, 55215, '\p{inhangulsyllables}', "");
Expect(0, 55215, '\p{^inhangulsyllables}', "");
Expect(0, 55215, '\P{inhangulsyllables}', "");
Expect(1, 55215, '\P{^inhangulsyllables}', "");
Expect(0, 44031, '\p{inhangulsyllables}', "");
Expect(1, 44031, '\p{^inhangulsyllables}', "");
Expect(1, 44031, '\P{inhangulsyllables}', "");
Expect(0, 44031, '\P{^inhangulsyllables}', "");
Expect(1, 55215, '\p{_IN	hangulSyllables}', "");
Expect(0, 55215, '\p{^_IN	hangulSyllables}', "");
Expect(0, 55215, '\P{_IN	hangulSyllables}', "");
Expect(1, 55215, '\P{^_IN	hangulSyllables}', "");
Expect(0, 44031, '\p{_IN	hangulSyllables}', "");
Expect(1, 44031, '\p{^_IN	hangulSyllables}', "");
Expect(1, 44031, '\P{_IN	hangulSyllables}', "");
Expect(0, 44031, '\P{^_IN	hangulSyllables}', "");
Error('\p{ In-Telugu/a/}');
Error('\P{ In-Telugu/a/}');
Expect(1, 3199, '\p{intelugu}', "");
Expect(0, 3199, '\p{^intelugu}', "");
Expect(0, 3199, '\P{intelugu}', "");
Expect(1, 3199, '\P{^intelugu}', "");
Expect(0, 3071, '\p{intelugu}', "");
Expect(1, 3071, '\p{^intelugu}', "");
Expect(1, 3071, '\P{intelugu}', "");
Expect(0, 3071, '\P{^intelugu}', "");
Expect(1, 3199, '\p{-	In_TELUGU}', "");
Expect(0, 3199, '\p{^-	In_TELUGU}', "");
Expect(0, 3199, '\P{-	In_TELUGU}', "");
Expect(1, 3199, '\P{^-	In_TELUGU}', "");
Expect(0, 3071, '\p{-	In_TELUGU}', "");
Expect(1, 3071, '\p{^-	In_TELUGU}', "");
Expect(1, 3071, '\P{-	In_TELUGU}', "");
Expect(0, 3071, '\P{^-	In_TELUGU}', "");
Error('\p{-:=CJKUNIFIED	IDEOGRAPHS_extension-B}');
Error('\P{-:=CJKUNIFIED	IDEOGRAPHS_extension-B}');
Expect(1, 173791, '\p{cjkunifiedideographsextensionb}', "");
Expect(0, 173791, '\p{^cjkunifiedideographsextensionb}', "");
Expect(0, 173791, '\P{cjkunifiedideographsextensionb}', "");
Expect(1, 173791, '\P{^cjkunifiedideographsextensionb}', "");
Expect(0, 1, '\p{cjkunifiedideographsextensionb}', "");
Expect(1, 1, '\p{^cjkunifiedideographsextensionb}', "");
Expect(1, 1, '\P{cjkunifiedideographsextensionb}', "");
Expect(0, 1, '\P{^cjkunifiedideographsextensionb}', "");
Expect(1, 173791, '\p{_-CJK-Unified	Ideographs extensionB}', "");
Expect(0, 173791, '\p{^_-CJK-Unified	Ideographs extensionB}', "");
Expect(0, 173791, '\P{_-CJK-Unified	Ideographs extensionB}', "");
Expect(1, 173791, '\P{^_-CJK-Unified	Ideographs extensionB}', "");
Expect(0, 1, '\p{_-CJK-Unified	Ideographs extensionB}', "");
Expect(1, 1, '\p{^_-CJK-Unified	Ideographs extensionB}', "");
Expect(1, 1, '\P{_-CJK-Unified	Ideographs extensionB}', "");
Expect(0, 1, '\P{^_-CJK-Unified	Ideographs extensionB}', "");
Error('\p{	/a/IS-CJK	Unified_IDEOGRAPHS_Extension B}');
Error('\P{	/a/IS-CJK	Unified_IDEOGRAPHS_Extension B}');
Expect(1, 173791, '\p{iscjkunifiedideographsextensionb}', "");
Expect(0, 173791, '\p{^iscjkunifiedideographsextensionb}', "");
Expect(0, 173791, '\P{iscjkunifiedideographsextensionb}', "");
Expect(1, 173791, '\P{^iscjkunifiedideographsextensionb}', "");
Expect(0, 1, '\p{iscjkunifiedideographsextensionb}', "");
Expect(1, 1, '\p{^iscjkunifiedideographsextensionb}', "");
Expect(1, 1, '\P{iscjkunifiedideographsextensionb}', "");
Expect(0, 1, '\P{^iscjkunifiedideographsextensionb}', "");
Expect(1, 173791, '\p{ is_CJKunified-Ideographs Extension-B}', "");
Expect(0, 173791, '\p{^ is_CJKunified-Ideographs Extension-B}', "");
Expect(0, 173791, '\P{ is_CJKunified-Ideographs Extension-B}', "");
Expect(1, 173791, '\P{^ is_CJKunified-Ideographs Extension-B}', "");
Expect(0, 1, '\p{ is_CJKunified-Ideographs Extension-B}', "");
Expect(1, 1, '\p{^ is_CJKunified-Ideographs Extension-B}', "");
Expect(1, 1, '\P{ is_CJKunified-Ideographs Extension-B}', "");
Expect(0, 1, '\P{^ is_CJKunified-Ideographs Extension-B}', "");
Error('\p{ In cjk Unified	Ideographs	Extension-b/a/}');
Error('\P{ In cjk Unified	Ideographs	Extension-b/a/}');
Expect(1, 173791, '\p{incjkunifiedideographsextensionb}', "");
Expect(0, 173791, '\p{^incjkunifiedideographsextensionb}', "");
Expect(0, 173791, '\P{incjkunifiedideographsextensionb}', "");
Expect(1, 173791, '\P{^incjkunifiedideographsextensionb}', "");
Expect(0, 1, '\p{incjkunifiedideographsextensionb}', "");
Expect(1, 1, '\p{^incjkunifiedideographsextensionb}', "");
Expect(1, 1, '\P{incjkunifiedideographsextensionb}', "");
Expect(0, 1, '\P{^incjkunifiedideographsextensionb}', "");
Expect(1, 173791, '\p{ In_CJKUnified-ideographs Extension B}', "");
Expect(0, 173791, '\p{^ In_CJKUnified-ideographs Extension B}', "");
Expect(0, 173791, '\P{ In_CJKUnified-ideographs Extension B}', "");
Expect(1, 173791, '\P{^ In_CJKUnified-ideographs Extension B}', "");
Expect(0, 1, '\p{ In_CJKUnified-ideographs Extension B}', "");
Expect(1, 1, '\p{^ In_CJKUnified-ideographs Extension B}', "");
Expect(1, 1, '\P{ In_CJKUnified-ideographs Extension B}', "");
Expect(0, 1, '\P{^ In_CJKUnified-ideographs Extension B}', "");
Error('\p{__In:=tai-viet}');
Error('\P{__In:=tai-viet}');
Expect(1, 43743, '\p{intaiviet}', "");
Expect(0, 43743, '\p{^intaiviet}', "");
Expect(0, 43743, '\P{intaiviet}', "");
Expect(1, 43743, '\P{^intaiviet}', "");
Expect(0, 43647, '\p{intaiviet}', "");
Expect(1, 43647, '\p{^intaiviet}', "");
Expect(1, 43647, '\P{intaiviet}', "");
Expect(0, 43647, '\P{^intaiviet}', "");
Expect(1, 43743, '\p{ _IN-Tai_viet}', "");
Expect(0, 43743, '\p{^ _IN-Tai_viet}', "");
Expect(0, 43743, '\P{ _IN-Tai_viet}', "");
Expect(1, 43743, '\P{^ _IN-Tai_viet}', "");
Expect(0, 43647, '\p{ _IN-Tai_viet}', "");
Expect(1, 43647, '\p{^ _IN-Tai_viet}', "");
Expect(1, 43647, '\P{ _IN-Tai_viet}', "");
Expect(0, 43647, '\P{^ _IN-Tai_viet}', "");
Error('\p{:=	-in SYLOTI-nagri}');
Error('\P{:=	-in SYLOTI-nagri}');
Expect(1, 43055, '\p{insylotinagri}', "");
Expect(0, 43055, '\p{^insylotinagri}', "");
Expect(0, 43055, '\P{insylotinagri}', "");
Expect(1, 43055, '\P{^insylotinagri}', "");
Expect(0, 43007, '\p{insylotinagri}', "");
Expect(1, 43007, '\p{^insylotinagri}', "");
Expect(1, 43007, '\P{insylotinagri}', "");
Expect(0, 43007, '\P{^insylotinagri}', "");
Expect(1, 43055, '\p{_In	SYLOTI	Nagri}', "");
Expect(0, 43055, '\p{^_In	SYLOTI	Nagri}', "");
Expect(0, 43055, '\P{_In	SYLOTI	Nagri}', "");
Expect(1, 43055, '\P{^_In	SYLOTI	Nagri}', "");
Expect(0, 43007, '\p{_In	SYLOTI	Nagri}', "");
Expect(1, 43007, '\p{^_In	SYLOTI	Nagri}', "");
Expect(1, 43007, '\P{_In	SYLOTI	Nagri}', "");
Expect(0, 43007, '\P{^_In	SYLOTI	Nagri}', "");
Error('\p{	Cuneiform:=Numbers_And punctuation}');
Error('\P{	Cuneiform:=Numbers_And punctuation}');
Expect(1, 74879, '\p{cuneiformnumbersandpunctuation}', "");
Expect(0, 74879, '\p{^cuneiformnumbersandpunctuation}', "");
Expect(0, 74879, '\P{cuneiformnumbersandpunctuation}', "");
Expect(1, 74879, '\P{^cuneiformnumbersandpunctuation}', "");
Expect(0, 74751, '\p{cuneiformnumbersandpunctuation}', "");
Expect(1, 74751, '\p{^cuneiformnumbersandpunctuation}', "");
Expect(1, 74751, '\P{cuneiformnumbersandpunctuation}', "");
Expect(0, 74751, '\P{^cuneiformnumbersandpunctuation}', "");
Expect(1, 74879, '\p{ CUNEIFORM numbers_And	Punctuation}', "");
Expect(0, 74879, '\p{^ CUNEIFORM numbers_And	Punctuation}', "");
Expect(0, 74879, '\P{ CUNEIFORM numbers_And	Punctuation}', "");
Expect(1, 74879, '\P{^ CUNEIFORM numbers_And	Punctuation}', "");
Expect(0, 74751, '\p{ CUNEIFORM numbers_And	Punctuation}', "");
Expect(1, 74751, '\p{^ CUNEIFORM numbers_And	Punctuation}', "");
Expect(1, 74751, '\P{ CUNEIFORM numbers_And	Punctuation}', "");
Expect(0, 74751, '\P{^ CUNEIFORM numbers_And	Punctuation}', "");
Error('\p{-/a/Is Cuneiform	Numbers	And_punctuation}');
Error('\P{-/a/Is Cuneiform	Numbers	And_punctuation}');
Expect(1, 74879, '\p{iscuneiformnumbersandpunctuation}', "");
Expect(0, 74879, '\p{^iscuneiformnumbersandpunctuation}', "");
Expect(0, 74879, '\P{iscuneiformnumbersandpunctuation}', "");
Expect(1, 74879, '\P{^iscuneiformnumbersandpunctuation}', "");
Expect(0, 74751, '\p{iscuneiformnumbersandpunctuation}', "");
Expect(1, 74751, '\p{^iscuneiformnumbersandpunctuation}', "");
Expect(1, 74751, '\P{iscuneiformnumbersandpunctuation}', "");
Expect(0, 74751, '\P{^iscuneiformnumbersandpunctuation}', "");
Expect(1, 74879, '\p{-ISCUNEIFORM_numbers AndPunctuation}', "");
Expect(0, 74879, '\p{^-ISCUNEIFORM_numbers AndPunctuation}', "");
Expect(0, 74879, '\P{-ISCUNEIFORM_numbers AndPunctuation}', "");
Expect(1, 74879, '\P{^-ISCUNEIFORM_numbers AndPunctuation}', "");
Expect(0, 74751, '\p{-ISCUNEIFORM_numbers AndPunctuation}', "");
Expect(1, 74751, '\p{^-ISCUNEIFORM_numbers AndPunctuation}', "");
Expect(1, 74751, '\P{-ISCUNEIFORM_numbers AndPunctuation}', "");
Expect(0, 74751, '\P{^-ISCUNEIFORM_numbers AndPunctuation}', "");
Error('\p{-In/a/CUNEIFORM-NUMBERS-Andpunctuation}');
Error('\P{-In/a/CUNEIFORM-NUMBERS-Andpunctuation}');
Expect(1, 74879, '\p{incuneiformnumbersandpunctuation}', "");
Expect(0, 74879, '\p{^incuneiformnumbersandpunctuation}', "");
Expect(0, 74879, '\P{incuneiformnumbersandpunctuation}', "");
Expect(1, 74879, '\P{^incuneiformnumbersandpunctuation}', "");
Expect(0, 74751, '\p{incuneiformnumbersandpunctuation}', "");
Expect(1, 74751, '\p{^incuneiformnumbersandpunctuation}', "");
Expect(1, 74751, '\P{incuneiformnumbersandpunctuation}', "");
Expect(0, 74751, '\P{^incuneiformnumbersandpunctuation}', "");
Expect(1, 74879, '\p{	In_Cuneiform	numbers	And_Punctuation}', "");
Expect(0, 74879, '\p{^	In_Cuneiform	numbers	And_Punctuation}', "");
Expect(0, 74879, '\P{	In_Cuneiform	numbers	And_Punctuation}', "");
Expect(1, 74879, '\P{^	In_Cuneiform	numbers	And_Punctuation}', "");
Expect(0, 74751, '\p{	In_Cuneiform	numbers	And_Punctuation}', "");
Expect(1, 74751, '\p{^	In_Cuneiform	numbers	And_Punctuation}', "");
Expect(1, 74751, '\P{	In_Cuneiform	numbers	And_Punctuation}', "");
Expect(0, 74751, '\P{^	In_Cuneiform	numbers	And_Punctuation}', "");
Error('\p{/a/Kaithi}');
Error('\P{/a/Kaithi}');
Expect(1, 69825, '\p{kaithi}', "");
Expect(0, 69825, '\p{^kaithi}', "");
Expect(0, 69825, '\P{kaithi}', "");
Expect(1, 69825, '\P{^kaithi}', "");
Expect(0, 69759, '\p{kaithi}', "");
Expect(1, 69759, '\p{^kaithi}', "");
Expect(1, 69759, '\P{kaithi}', "");
Expect(0, 69759, '\P{^kaithi}', "");
Expect(1, 69825, '\p{--KAITHI}', "");
Expect(0, 69825, '\p{^--KAITHI}', "");
Expect(0, 69825, '\P{--KAITHI}', "");
Expect(1, 69825, '\P{^--KAITHI}', "");
Expect(0, 69759, '\p{--KAITHI}', "");
Expect(1, 69759, '\p{^--KAITHI}', "");
Expect(1, 69759, '\P{--KAITHI}', "");
Expect(0, 69759, '\P{^--KAITHI}', "");
Error('\p{ _IS-kaithi/a/}');
Error('\P{ _IS-kaithi/a/}');
Expect(1, 69825, '\p{iskaithi}', "");
Expect(0, 69825, '\p{^iskaithi}', "");
Expect(0, 69825, '\P{iskaithi}', "");
Expect(1, 69825, '\P{^iskaithi}', "");
Expect(0, 69759, '\p{iskaithi}', "");
Expect(1, 69759, '\p{^iskaithi}', "");
Expect(1, 69759, '\P{iskaithi}', "");
Expect(0, 69759, '\P{^iskaithi}', "");
Expect(1, 69825, '\p{ Iskaithi}', "");
Expect(0, 69825, '\p{^ Iskaithi}', "");
Expect(0, 69825, '\P{ Iskaithi}', "");
Expect(1, 69825, '\P{^ Iskaithi}', "");
Expect(0, 69759, '\p{ Iskaithi}', "");
Expect(1, 69759, '\p{^ Iskaithi}', "");
Expect(1, 69759, '\P{ Iskaithi}', "");
Expect(0, 69759, '\P{^ Iskaithi}', "");
Error('\p{	/a/Kthi}');
Error('\P{	/a/Kthi}');
Expect(1, 69825, '\p{kthi}', "");
Expect(0, 69825, '\p{^kthi}', "");
Expect(0, 69825, '\P{kthi}', "");
Expect(1, 69825, '\P{^kthi}', "");
Expect(0, 69759, '\p{kthi}', "");
Expect(1, 69759, '\p{^kthi}', "");
Expect(1, 69759, '\P{kthi}', "");
Expect(0, 69759, '\P{^kthi}', "");
Expect(1, 69825, '\p{-Kthi}', "");
Expect(0, 69825, '\p{^-Kthi}', "");
Expect(0, 69825, '\P{-Kthi}', "");
Expect(1, 69825, '\P{^-Kthi}', "");
Expect(0, 69759, '\p{-Kthi}', "");
Expect(1, 69759, '\p{^-Kthi}', "");
Expect(1, 69759, '\P{-Kthi}', "");
Expect(0, 69759, '\P{^-Kthi}', "");
Error('\p{ is_Kthi/a/}');
Error('\P{ is_Kthi/a/}');
Expect(1, 69825, '\p{iskthi}', "");
Expect(0, 69825, '\p{^iskthi}', "");
Expect(0, 69825, '\P{iskthi}', "");
Expect(1, 69825, '\P{^iskthi}', "");
Expect(0, 69759, '\p{iskthi}', "");
Expect(1, 69759, '\p{^iskthi}', "");
Expect(1, 69759, '\P{iskthi}', "");
Expect(0, 69759, '\P{^iskthi}', "");
Expect(1, 69825, '\p{	isKthi}', "");
Expect(0, 69825, '\p{^	isKthi}', "");
Expect(0, 69825, '\P{	isKthi}', "");
Expect(1, 69825, '\P{^	isKthi}', "");
Expect(0, 69759, '\p{	isKthi}', "");
Expect(1, 69759, '\p{^	isKthi}', "");
Expect(1, 69759, '\P{	isKthi}', "");
Expect(0, 69759, '\P{^	isKthi}', "");
Error('\p{ :=InOLDItalic}');
Error('\P{ :=InOLDItalic}');
Expect(1, 66351, '\p{inolditalic}', "");
Expect(0, 66351, '\p{^inolditalic}', "");
Expect(0, 66351, '\P{inolditalic}', "");
Expect(1, 66351, '\P{^inolditalic}', "");
Expect(0, 66303, '\p{inolditalic}', "");
Expect(1, 66303, '\p{^inolditalic}', "");
Expect(1, 66303, '\P{inolditalic}', "");
Expect(0, 66303, '\P{^inolditalic}', "");
Expect(1, 66351, '\p{ -inOldItalic}', "");
Expect(0, 66351, '\p{^ -inOldItalic}', "");
Expect(0, 66351, '\P{ -inOldItalic}', "");
Expect(1, 66351, '\P{^ -inOldItalic}', "");
Expect(0, 66303, '\p{ -inOldItalic}', "");
Expect(1, 66303, '\p{^ -inOldItalic}', "");
Expect(1, 66303, '\P{ -inOldItalic}', "");
Expect(0, 66303, '\P{^ -inOldItalic}', "");
Error('\p{	 in	Avestan/a/}');
Error('\P{	 in	Avestan/a/}');
Expect(1, 68415, '\p{inavestan}', "");
Expect(0, 68415, '\p{^inavestan}', "");
Expect(0, 68415, '\P{inavestan}', "");
Expect(1, 68415, '\P{^inavestan}', "");
Expect(0, 68351, '\p{inavestan}', "");
Expect(1, 68351, '\p{^inavestan}', "");
Expect(1, 68351, '\P{inavestan}', "");
Expect(0, 68351, '\P{^inavestan}', "");
Expect(1, 68415, '\p{-_In-Avestan}', "");
Expect(0, 68415, '\p{^-_In-Avestan}', "");
Expect(0, 68415, '\P{-_In-Avestan}', "");
Expect(1, 68415, '\P{^-_In-Avestan}', "");
Expect(0, 68351, '\p{-_In-Avestan}', "");
Expect(1, 68351, '\p{^-_In-Avestan}', "");
Expect(1, 68351, '\P{-_In-Avestan}', "");
Expect(0, 68351, '\P{^-_In-Avestan}', "");
Error('\p{/a/MISCELLANEOUS	Symbols}');
Error('\P{/a/MISCELLANEOUS	Symbols}');
Expect(1, 9983, '\p{miscellaneoussymbols}', "");
Expect(0, 9983, '\p{^miscellaneoussymbols}', "");
Expect(0, 9983, '\P{miscellaneoussymbols}', "");
Expect(1, 9983, '\P{^miscellaneoussymbols}', "");
Expect(0, 9727, '\p{miscellaneoussymbols}', "");
Expect(1, 9727, '\p{^miscellaneoussymbols}', "");
Expect(1, 9727, '\P{miscellaneoussymbols}', "");
Expect(0, 9727, '\P{^miscellaneoussymbols}', "");
Expect(1, 9983, '\p{Miscellaneous-SYMBOLS}', "");
Expect(0, 9983, '\p{^Miscellaneous-SYMBOLS}', "");
Expect(0, 9983, '\P{Miscellaneous-SYMBOLS}', "");
Expect(1, 9983, '\P{^Miscellaneous-SYMBOLS}', "");
Expect(0, 9727, '\p{Miscellaneous-SYMBOLS}', "");
Expect(1, 9727, '\p{^Miscellaneous-SYMBOLS}', "");
Expect(1, 9727, '\P{Miscellaneous-SYMBOLS}', "");
Expect(0, 9727, '\P{^Miscellaneous-SYMBOLS}', "");
Error('\p{/a/ 	IsMiscellaneous	SYMBOLS}');
Error('\P{/a/ 	IsMiscellaneous	SYMBOLS}');
Expect(1, 9983, '\p{ismiscellaneoussymbols}', "");
Expect(0, 9983, '\p{^ismiscellaneoussymbols}', "");
Expect(0, 9983, '\P{ismiscellaneoussymbols}', "");
Expect(1, 9983, '\P{^ismiscellaneoussymbols}', "");
Expect(0, 9727, '\p{ismiscellaneoussymbols}', "");
Expect(1, 9727, '\p{^ismiscellaneoussymbols}', "");
Expect(1, 9727, '\P{ismiscellaneoussymbols}', "");
Expect(0, 9727, '\P{^ismiscellaneoussymbols}', "");
Expect(1, 9983, '\p{_IS	miscellaneous SYMBOLS}', "");
Expect(0, 9983, '\p{^_IS	miscellaneous SYMBOLS}', "");
Expect(0, 9983, '\P{_IS	miscellaneous SYMBOLS}', "");
Expect(1, 9983, '\P{^_IS	miscellaneous SYMBOLS}', "");
Expect(0, 9727, '\p{_IS	miscellaneous SYMBOLS}', "");
Expect(1, 9727, '\p{^_IS	miscellaneous SYMBOLS}', "");
Expect(1, 9727, '\P{_IS	miscellaneous SYMBOLS}', "");
Expect(0, 9727, '\P{^_IS	miscellaneous SYMBOLS}', "");
Error('\p{/a/In	MISCELLANEOUS_symbols}');
Error('\P{/a/In	MISCELLANEOUS_symbols}');
Expect(1, 9983, '\p{inmiscellaneoussymbols}', "");
Expect(0, 9983, '\p{^inmiscellaneoussymbols}', "");
Expect(0, 9983, '\P{inmiscellaneoussymbols}', "");
Expect(1, 9983, '\P{^inmiscellaneoussymbols}', "");
Expect(0, 9727, '\p{inmiscellaneoussymbols}', "");
Expect(1, 9727, '\p{^inmiscellaneoussymbols}', "");
Expect(1, 9727, '\P{inmiscellaneoussymbols}', "");
Expect(0, 9727, '\P{^inmiscellaneoussymbols}', "");
Expect(1, 9983, '\p{ IN-MISCELLANEOUSSymbols}', "");
Expect(0, 9983, '\p{^ IN-MISCELLANEOUSSymbols}', "");
Expect(0, 9983, '\P{ IN-MISCELLANEOUSSymbols}', "");
Expect(1, 9983, '\P{^ IN-MISCELLANEOUSSymbols}', "");
Expect(0, 9727, '\p{ IN-MISCELLANEOUSSymbols}', "");
Expect(1, 9727, '\p{^ IN-MISCELLANEOUSSymbols}', "");
Expect(1, 9727, '\P{ IN-MISCELLANEOUSSymbols}', "");
Expect(0, 9727, '\P{^ IN-MISCELLANEOUSSymbols}', "");
Error('\p{ _In_javanese:=}');
Error('\P{ _In_javanese:=}');
Expect(1, 43487, '\p{injavanese}', "");
Expect(0, 43487, '\p{^injavanese}', "");
Expect(0, 43487, '\P{injavanese}', "");
Expect(1, 43487, '\P{^injavanese}', "");
Expect(0, 43391, '\p{injavanese}', "");
Expect(1, 43391, '\p{^injavanese}', "");
Expect(1, 43391, '\P{injavanese}', "");
Expect(0, 43391, '\P{^injavanese}', "");
Expect(1, 43487, '\p{	-In	Javanese}', "");
Expect(0, 43487, '\p{^	-In	Javanese}', "");
Expect(0, 43487, '\P{	-In	Javanese}', "");
Expect(1, 43487, '\P{^	-In	Javanese}', "");
Expect(0, 43391, '\p{	-In	Javanese}', "");
Expect(1, 43391, '\p{^	-In	Javanese}', "");
Expect(1, 43391, '\P{	-In	Javanese}', "");
Expect(0, 43391, '\P{^	-In	Javanese}', "");
Error('\p{/a/-PosixAlnum}');
Error('\P{/a/-PosixAlnum}');
Expect(1, 57, '\p{posixalnum}', "");
Expect(0, 57, '\p{^posixalnum}', "");
Expect(0, 57, '\P{posixalnum}', "");
Expect(1, 57, '\P{^posixalnum}', "");
Expect(0, 47, '\p{posixalnum}', "");
Expect(1, 47, '\p{^posixalnum}', "");
Expect(1, 47, '\P{posixalnum}', "");
Expect(0, 47, '\P{^posixalnum}', "");
Expect(1, 57, '\p{__posixalnum}', "");
Expect(0, 57, '\p{^__posixalnum}', "");
Expect(0, 57, '\P{__posixalnum}', "");
Expect(1, 57, '\P{^__posixalnum}', "");
Expect(0, 47, '\p{__posixalnum}', "");
Expect(1, 47, '\p{^__posixalnum}', "");
Expect(1, 47, '\P{__posixalnum}', "");
Expect(0, 47, '\P{^__posixalnum}', "");
Error('\p{	IS PosixAlnum:=}');
Error('\P{	IS PosixAlnum:=}');
Expect(1, 57, '\p{isposixalnum}', "");
Expect(0, 57, '\p{^isposixalnum}', "");
Expect(0, 57, '\P{isposixalnum}', "");
Expect(1, 57, '\P{^isposixalnum}', "");
Expect(0, 47, '\p{isposixalnum}', "");
Expect(1, 47, '\p{^isposixalnum}', "");
Expect(1, 47, '\P{isposixalnum}', "");
Expect(0, 47, '\P{^isposixalnum}', "");
Expect(1, 57, '\p{- IS_PosixAlnum}', "");
Expect(0, 57, '\p{^- IS_PosixAlnum}', "");
Expect(0, 57, '\P{- IS_PosixAlnum}', "");
Expect(1, 57, '\P{^- IS_PosixAlnum}', "");
Expect(0, 47, '\p{- IS_PosixAlnum}', "");
Expect(1, 47, '\p{^- IS_PosixAlnum}', "");
Expect(1, 47, '\P{- IS_PosixAlnum}', "");
Expect(0, 47, '\P{^- IS_PosixAlnum}', "");
Error('\p{ -ARABIC-SUPPLEMENT:=}');
Error('\P{ -ARABIC-SUPPLEMENT:=}');
Expect(1, 1919, '\p{arabicsupplement}', "");
Expect(0, 1919, '\p{^arabicsupplement}', "");
Expect(0, 1919, '\P{arabicsupplement}', "");
Expect(1, 1919, '\P{^arabicsupplement}', "");
Expect(0, 1871, '\p{arabicsupplement}', "");
Expect(1, 1871, '\p{^arabicsupplement}', "");
Expect(1, 1871, '\P{arabicsupplement}', "");
Expect(0, 1871, '\P{^arabicsupplement}', "");
Expect(1, 1919, '\p{	 arabic	supplement}', "");
Expect(0, 1919, '\p{^	 arabic	supplement}', "");
Expect(0, 1919, '\P{	 arabic	supplement}', "");
Expect(1, 1919, '\P{^	 arabic	supplement}', "");
Expect(0, 1871, '\p{	 arabic	supplement}', "");
Expect(1, 1871, '\p{^	 arabic	supplement}', "");
Expect(1, 1871, '\P{	 arabic	supplement}', "");
Expect(0, 1871, '\P{^	 arabic	supplement}', "");
Error('\p{-:=Is arabic	supplement}');
Error('\P{-:=Is arabic	supplement}');
Expect(1, 1919, '\p{isarabicsupplement}', "");
Expect(0, 1919, '\p{^isarabicsupplement}', "");
Expect(0, 1919, '\P{isarabicsupplement}', "");
Expect(1, 1919, '\P{^isarabicsupplement}', "");
Expect(0, 1871, '\p{isarabicsupplement}', "");
Expect(1, 1871, '\p{^isarabicsupplement}', "");
Expect(1, 1871, '\P{isarabicsupplement}', "");
Expect(0, 1871, '\P{^isarabicsupplement}', "");
Expect(1, 1919, '\p{ -is ARABIC_SUPPLEMENT}', "");
Expect(0, 1919, '\p{^ -is ARABIC_SUPPLEMENT}', "");
Expect(0, 1919, '\P{ -is ARABIC_SUPPLEMENT}', "");
Expect(1, 1919, '\P{^ -is ARABIC_SUPPLEMENT}', "");
Expect(0, 1871, '\p{ -is ARABIC_SUPPLEMENT}', "");
Expect(1, 1871, '\p{^ -is ARABIC_SUPPLEMENT}', "");
Expect(1, 1871, '\P{ -is ARABIC_SUPPLEMENT}', "");
Expect(0, 1871, '\P{^ -is ARABIC_SUPPLEMENT}', "");
Error('\p{ _inARABIC-Supplement:=}');
Error('\P{ _inARABIC-Supplement:=}');
Expect(1, 1919, '\p{inarabicsupplement}', "");
Expect(0, 1919, '\p{^inarabicsupplement}', "");
Expect(0, 1919, '\P{inarabicsupplement}', "");
Expect(1, 1919, '\P{^inarabicsupplement}', "");
Expect(0, 1871, '\p{inarabicsupplement}', "");
Expect(1, 1871, '\p{^inarabicsupplement}', "");
Expect(1, 1871, '\P{inarabicsupplement}', "");
Expect(0, 1871, '\P{^inarabicsupplement}', "");
Expect(1, 1919, '\p{_	In arabic SUPPLEMENT}', "");
Expect(0, 1919, '\p{^_	In arabic SUPPLEMENT}', "");
Expect(0, 1919, '\P{_	In arabic SUPPLEMENT}', "");
Expect(1, 1919, '\P{^_	In arabic SUPPLEMENT}', "");
Expect(0, 1871, '\p{_	In arabic SUPPLEMENT}', "");
Expect(1, 1871, '\p{^_	In arabic SUPPLEMENT}', "");
Expect(1, 1871, '\P{_	In arabic SUPPLEMENT}', "");
Expect(0, 1871, '\P{^_	In arabic SUPPLEMENT}', "");
Error('\p{	CJK-compatibility/a/Ideographs-supplement}');
Error('\P{	CJK-compatibility/a/Ideographs-supplement}');
Expect(1, 195103, '\p{cjkcompatibilityideographssupplement}', "");
Expect(0, 195103, '\p{^cjkcompatibilityideographssupplement}', "");
Expect(0, 195103, '\P{cjkcompatibilityideographssupplement}', "");
Expect(1, 195103, '\P{^cjkcompatibilityideographssupplement}', "");
Expect(0, 194559, '\p{cjkcompatibilityideographssupplement}', "");
Expect(1, 194559, '\p{^cjkcompatibilityideographssupplement}', "");
Expect(1, 194559, '\P{cjkcompatibilityideographssupplement}', "");
Expect(0, 194559, '\P{^cjkcompatibilityideographssupplement}', "");
Expect(1, 195103, '\p{	_CJK-COMPATIBILITYideographs_Supplement}', "");
Expect(0, 195103, '\p{^	_CJK-COMPATIBILITYideographs_Supplement}', "");
Expect(0, 195103, '\P{	_CJK-COMPATIBILITYideographs_Supplement}', "");
Expect(1, 195103, '\P{^	_CJK-COMPATIBILITYideographs_Supplement}', "");
Expect(0, 194559, '\p{	_CJK-COMPATIBILITYideographs_Supplement}', "");
Expect(1, 194559, '\p{^	_CJK-COMPATIBILITYideographs_Supplement}', "");
Expect(1, 194559, '\P{	_CJK-COMPATIBILITYideographs_Supplement}', "");
Expect(0, 194559, '\P{^	_CJK-COMPATIBILITYideographs_Supplement}', "");
Error('\p{	Is-CJKCOMPATIBILITY/a/IDEOGRAPHSSUPPLEMENT}');
Error('\P{	Is-CJKCOMPATIBILITY/a/IDEOGRAPHSSUPPLEMENT}');
Expect(1, 195103, '\p{iscjkcompatibilityideographssupplement}', "");
Expect(0, 195103, '\p{^iscjkcompatibilityideographssupplement}', "");
Expect(0, 195103, '\P{iscjkcompatibilityideographssupplement}', "");
Expect(1, 195103, '\P{^iscjkcompatibilityideographssupplement}', "");
Expect(0, 194559, '\p{iscjkcompatibilityideographssupplement}', "");
Expect(1, 194559, '\p{^iscjkcompatibilityideographssupplement}', "");
Expect(1, 194559, '\P{iscjkcompatibilityideographssupplement}', "");
Expect(0, 194559, '\P{^iscjkcompatibilityideographssupplement}', "");
Expect(1, 195103, '\p{	isCJK Compatibility ideographsSupplement}', "");
Expect(0, 195103, '\p{^	isCJK Compatibility ideographsSupplement}', "");
Expect(0, 195103, '\P{	isCJK Compatibility ideographsSupplement}', "");
Expect(1, 195103, '\P{^	isCJK Compatibility ideographsSupplement}', "");
Expect(0, 194559, '\p{	isCJK Compatibility ideographsSupplement}', "");
Expect(1, 194559, '\p{^	isCJK Compatibility ideographsSupplement}', "");
Expect(1, 194559, '\P{	isCJK Compatibility ideographsSupplement}', "");
Expect(0, 194559, '\P{^	isCJK Compatibility ideographsSupplement}', "");
Error('\p{/a/In CJKCompatibility	IDEOGRAPHSsupplement}');
Error('\P{/a/In CJKCompatibility	IDEOGRAPHSsupplement}');
Expect(1, 195103, '\p{incjkcompatibilityideographssupplement}', "");
Expect(0, 195103, '\p{^incjkcompatibilityideographssupplement}', "");
Expect(0, 195103, '\P{incjkcompatibilityideographssupplement}', "");
Expect(1, 195103, '\P{^incjkcompatibilityideographssupplement}', "");
Expect(0, 194559, '\p{incjkcompatibilityideographssupplement}', "");
Expect(1, 194559, '\p{^incjkcompatibilityideographssupplement}', "");
Expect(1, 194559, '\P{incjkcompatibilityideographssupplement}', "");
Expect(0, 194559, '\P{^incjkcompatibilityideographssupplement}', "");
Expect(1, 195103, '\p{In_CJK compatibility-ideographs-Supplement}', "");
Expect(0, 195103, '\p{^In_CJK compatibility-ideographs-Supplement}', "");
Expect(0, 195103, '\P{In_CJK compatibility-ideographs-Supplement}', "");
Expect(1, 195103, '\P{^In_CJK compatibility-ideographs-Supplement}', "");
Expect(0, 194559, '\p{In_CJK compatibility-ideographs-Supplement}', "");
Expect(1, 194559, '\p{^In_CJK compatibility-ideographs-Supplement}', "");
Expect(1, 194559, '\P{In_CJK compatibility-ideographs-Supplement}', "");
Expect(0, 194559, '\P{^In_CJK compatibility-ideographs-Supplement}', "");
Error('\p{ _In:=Gurmukhi}');
Error('\P{ _In:=Gurmukhi}');
Expect(1, 2687, '\p{ingurmukhi}', "");
Expect(0, 2687, '\p{^ingurmukhi}', "");
Expect(0, 2687, '\P{ingurmukhi}', "");
Expect(1, 2687, '\P{^ingurmukhi}', "");
Expect(0, 2559, '\p{ingurmukhi}', "");
Expect(1, 2559, '\p{^ingurmukhi}', "");
Expect(1, 2559, '\P{ingurmukhi}', "");
Expect(0, 2559, '\P{^ingurmukhi}', "");
Expect(1, 2687, '\p{	In-Gurmukhi}', "");
Expect(0, 2687, '\p{^	In-Gurmukhi}', "");
Expect(0, 2687, '\P{	In-Gurmukhi}', "");
Expect(1, 2687, '\P{^	In-Gurmukhi}', "");
Expect(0, 2559, '\p{	In-Gurmukhi}', "");
Expect(1, 2559, '\p{^	In-Gurmukhi}', "");
Expect(1, 2559, '\P{	In-Gurmukhi}', "");
Expect(0, 2559, '\P{^	In-Gurmukhi}', "");
Error('\p{/a/	Phaistos-DISC}');
Error('\P{/a/	Phaistos-DISC}');
Expect(1, 66047, '\p{phaistosdisc}', "");
Expect(0, 66047, '\p{^phaistosdisc}', "");
Expect(0, 66047, '\P{phaistosdisc}', "");
Expect(1, 66047, '\P{^phaistosdisc}', "");
Expect(0, 65999, '\p{phaistosdisc}', "");
Expect(1, 65999, '\p{^phaistosdisc}', "");
Expect(1, 65999, '\P{phaistosdisc}', "");
Expect(0, 65999, '\P{^phaistosdisc}', "");
Expect(1, 66047, '\p{  Phaistos Disc}', "");
Expect(0, 66047, '\p{^  Phaistos Disc}', "");
Expect(0, 66047, '\P{  Phaistos Disc}', "");
Expect(1, 66047, '\P{^  Phaistos Disc}', "");
Expect(0, 65999, '\p{  Phaistos Disc}', "");
Expect(1, 65999, '\p{^  Phaistos Disc}', "");
Expect(1, 65999, '\P{  Phaistos Disc}', "");
Expect(0, 65999, '\P{^  Phaistos Disc}', "");
Error('\p{:=  is Phaistos Disc}');
Error('\P{:=  is Phaistos Disc}');
Expect(1, 66047, '\p{isphaistosdisc}', "");
Expect(0, 66047, '\p{^isphaistosdisc}', "");
Expect(0, 66047, '\P{isphaistosdisc}', "");
Expect(1, 66047, '\P{^isphaistosdisc}', "");
Expect(0, 65999, '\p{isphaistosdisc}', "");
Expect(1, 65999, '\p{^isphaistosdisc}', "");
Expect(1, 65999, '\P{isphaistosdisc}', "");
Expect(0, 65999, '\P{^isphaistosdisc}', "");
Expect(1, 66047, '\p{__IS	Phaistos Disc}', "");
Expect(0, 66047, '\p{^__IS	Phaistos Disc}', "");
Expect(0, 66047, '\P{__IS	Phaistos Disc}', "");
Expect(1, 66047, '\P{^__IS	Phaistos Disc}', "");
Expect(0, 65999, '\p{__IS	Phaistos Disc}', "");
Expect(1, 65999, '\p{^__IS	Phaistos Disc}', "");
Expect(1, 65999, '\P{__IS	Phaistos Disc}', "");
Expect(0, 65999, '\P{^__IS	Phaistos Disc}', "");
Error('\p{ in/a/Phaistos-Disc}');
Error('\P{ in/a/Phaistos-Disc}');
Expect(1, 66047, '\p{inphaistosdisc}', "");
Expect(0, 66047, '\p{^inphaistosdisc}', "");
Expect(0, 66047, '\P{inphaistosdisc}', "");
Expect(1, 66047, '\P{^inphaistosdisc}', "");
Expect(0, 65999, '\p{inphaistosdisc}', "");
Expect(1, 65999, '\p{^inphaistosdisc}', "");
Expect(1, 65999, '\P{inphaistosdisc}', "");
Expect(0, 65999, '\P{^inphaistosdisc}', "");
Expect(1, 66047, '\p{__inPhaistos-DISC}', "");
Expect(0, 66047, '\p{^__inPhaistos-DISC}', "");
Expect(0, 66047, '\P{__inPhaistos-DISC}', "");
Expect(1, 66047, '\P{^__inPhaistos-DISC}', "");
Expect(0, 65999, '\p{__inPhaistos-DISC}', "");
Expect(1, 65999, '\p{^__inPhaistos-DISC}', "");
Expect(1, 65999, '\P{__inPhaistos-DISC}', "");
Expect(0, 65999, '\P{^__inPhaistos-DISC}', "");
Error('\p{	:=_combabove}');
Error('\P{	:=_combabove}');
Expect(1, 788, '\p{_CombAbove}', "");
Expect(0, 788, '\p{^_CombAbove}', "");
Expect(0, 788, '\P{_CombAbove}', "");
Expect(1, 788, '\P{^_CombAbove}', "");
Expect(0, 767, '\p{_CombAbove}', "");
Expect(1, 767, '\p{^_CombAbove}', "");
Expect(1, 767, '\P{_CombAbove}', "");
Expect(0, 767, '\P{^_CombAbove}', "");
Error('\p{ -Other:=ID	CONTINUE}');
Error('\P{ -Other:=ID	CONTINUE}');
Expect(1, 183, '\p{otheridcontinue}', 'deprecated');
Expect(0, 183, '\p{^otheridcontinue}', 'deprecated');
Expect(0, 183, '\P{otheridcontinue}', 'deprecated');
Expect(1, 183, '\P{^otheridcontinue}', 'deprecated');
Expect(0, 182, '\p{otheridcontinue}', 'deprecated');
Expect(1, 182, '\p{^otheridcontinue}', 'deprecated');
Expect(1, 182, '\P{otheridcontinue}', 'deprecated');
Expect(0, 182, '\P{^otheridcontinue}', 'deprecated');
Expect(1, 183, '\p{Other	ID_Continue}', 'deprecated');
Expect(0, 183, '\p{^Other	ID_Continue}', 'deprecated');
Expect(0, 183, '\P{Other	ID_Continue}', 'deprecated');
Expect(1, 183, '\P{^Other	ID_Continue}', 'deprecated');
Expect(0, 182, '\p{Other	ID_Continue}', 'deprecated');
Expect(1, 182, '\p{^Other	ID_Continue}', 'deprecated');
Expect(1, 182, '\P{Other	ID_Continue}', 'deprecated');
Expect(0, 182, '\P{^Other	ID_Continue}', 'deprecated');
Error('\p{	Is	Other-ID/a/CONTINUE}');
Error('\P{	Is	Other-ID/a/CONTINUE}');
Expect(1, 183, '\p{isotheridcontinue}', 'deprecated');
Expect(0, 183, '\p{^isotheridcontinue}', 'deprecated');
Expect(0, 183, '\P{isotheridcontinue}', 'deprecated');
Expect(1, 183, '\P{^isotheridcontinue}', 'deprecated');
Expect(0, 182, '\p{isotheridcontinue}', 'deprecated');
Expect(1, 182, '\p{^isotheridcontinue}', 'deprecated');
Expect(1, 182, '\P{isotheridcontinue}', 'deprecated');
Expect(0, 182, '\P{^isotheridcontinue}', 'deprecated');
Expect(1, 183, '\p{_	Is-Other-ID CONTINUE}', 'deprecated');
Expect(0, 183, '\p{^_	Is-Other-ID CONTINUE}', 'deprecated');
Expect(0, 183, '\P{_	Is-Other-ID CONTINUE}', 'deprecated');
Expect(1, 183, '\P{^_	Is-Other-ID CONTINUE}', 'deprecated');
Expect(0, 182, '\p{_	Is-Other-ID CONTINUE}', 'deprecated');
Expect(1, 182, '\p{^_	Is-Other-ID CONTINUE}', 'deprecated');
Expect(1, 182, '\P{_	Is-Other-ID CONTINUE}', 'deprecated');
Expect(0, 182, '\P{^_	Is-Other-ID CONTINUE}', 'deprecated');
Error('\p{	:=OIDC}');
Error('\P{	:=OIDC}');
Expect(1, 183, '\p{oidc}', 'deprecated');
Expect(0, 183, '\p{^oidc}', 'deprecated');
Expect(0, 183, '\P{oidc}', 'deprecated');
Expect(1, 183, '\P{^oidc}', 'deprecated');
Expect(0, 182, '\p{oidc}', 'deprecated');
Expect(1, 182, '\p{^oidc}', 'deprecated');
Expect(1, 182, '\P{oidc}', 'deprecated');
Expect(0, 182, '\P{^oidc}', 'deprecated');
Expect(1, 183, '\p{ _OIDC}', 'deprecated');
Expect(0, 183, '\p{^ _OIDC}', 'deprecated');
Expect(0, 183, '\P{ _OIDC}', 'deprecated');
Expect(1, 183, '\P{^ _OIDC}', 'deprecated');
Expect(0, 182, '\p{ _OIDC}', 'deprecated');
Expect(1, 182, '\p{^ _OIDC}', 'deprecated');
Expect(1, 182, '\P{ _OIDC}', 'deprecated');
Expect(0, 182, '\P{^ _OIDC}', 'deprecated');
Error('\p{_IS:=OIDC}');
Error('\P{_IS:=OIDC}');
Expect(1, 183, '\p{isoidc}', 'deprecated');
Expect(0, 183, '\p{^isoidc}', 'deprecated');
Expect(0, 183, '\P{isoidc}', 'deprecated');
Expect(1, 183, '\P{^isoidc}', 'deprecated');
Expect(0, 182, '\p{isoidc}', 'deprecated');
Expect(1, 182, '\p{^isoidc}', 'deprecated');
Expect(1, 182, '\P{isoidc}', 'deprecated');
Expect(0, 182, '\P{^isoidc}', 'deprecated');
Expect(1, 183, '\p{		IS OIDC}', 'deprecated');
Expect(0, 183, '\p{^		IS OIDC}', 'deprecated');
Expect(0, 183, '\P{		IS OIDC}', 'deprecated');
Expect(1, 183, '\P{^		IS OIDC}', 'deprecated');
Expect(0, 182, '\p{		IS OIDC}', 'deprecated');
Expect(1, 182, '\p{^		IS OIDC}', 'deprecated');
Expect(1, 182, '\P{		IS OIDC}', 'deprecated');
Expect(0, 182, '\P{^		IS OIDC}', 'deprecated');
Error('\p{ :=Bamum}');
Error('\P{ :=Bamum}');
Expect(1, 42743, '\p{bamum}', "");
Expect(0, 42743, '\p{^bamum}', "");
Expect(0, 42743, '\P{bamum}', "");
Expect(1, 42743, '\P{^bamum}', "");
Expect(0, 42655, '\p{bamum}', "");
Expect(1, 42655, '\p{^bamum}', "");
Expect(1, 42655, '\P{bamum}', "");
Expect(0, 42655, '\P{^bamum}', "");
Expect(1, 42743, '\p{_ Bamum}', "");
Expect(0, 42743, '\p{^_ Bamum}', "");
Expect(0, 42743, '\P{_ Bamum}', "");
Expect(1, 42743, '\P{^_ Bamum}', "");
Expect(0, 42655, '\p{_ Bamum}', "");
Expect(1, 42655, '\p{^_ Bamum}', "");
Expect(1, 42655, '\P{_ Bamum}', "");
Expect(0, 42655, '\P{^_ Bamum}', "");
Error('\p{-/a/Is bamum}');
Error('\P{-/a/Is bamum}');
Expect(1, 42743, '\p{isbamum}', "");
Expect(0, 42743, '\p{^isbamum}', "");
Expect(0, 42743, '\P{isbamum}', "");
Expect(1, 42743, '\P{^isbamum}', "");
Expect(0, 42655, '\p{isbamum}', "");
Expect(1, 42655, '\p{^isbamum}', "");
Expect(1, 42655, '\P{isbamum}', "");
Expect(0, 42655, '\P{^isbamum}', "");
Expect(1, 42743, '\p{-_Is_Bamum}', "");
Expect(0, 42743, '\p{^-_Is_Bamum}', "");
Expect(0, 42743, '\P{-_Is_Bamum}', "");
Expect(1, 42743, '\P{^-_Is_Bamum}', "");
Expect(0, 42655, '\p{-_Is_Bamum}', "");
Expect(1, 42655, '\p{^-_Is_Bamum}', "");
Expect(1, 42655, '\P{-_Is_Bamum}', "");
Expect(0, 42655, '\P{^-_Is_Bamum}', "");
Error('\p{ :=BAMU}');
Error('\P{ :=BAMU}');
Expect(1, 42743, '\p{bamu}', "");
Expect(0, 42743, '\p{^bamu}', "");
Expect(0, 42743, '\P{bamu}', "");
Expect(1, 42743, '\P{^bamu}', "");
Expect(0, 42655, '\p{bamu}', "");
Expect(1, 42655, '\p{^bamu}', "");
Expect(1, 42655, '\P{bamu}', "");
Expect(0, 42655, '\P{^bamu}', "");
Expect(1, 42743, '\p{	Bamu}', "");
Expect(0, 42743, '\p{^	Bamu}', "");
Expect(0, 42743, '\P{	Bamu}', "");
Expect(1, 42743, '\P{^	Bamu}', "");
Expect(0, 42655, '\p{	Bamu}', "");
Expect(1, 42655, '\p{^	Bamu}', "");
Expect(1, 42655, '\P{	Bamu}', "");
Expect(0, 42655, '\P{^	Bamu}', "");
Error('\p{_/a/IS_bamu}');
Error('\P{_/a/IS_bamu}');
Expect(1, 42743, '\p{isbamu}', "");
Expect(0, 42743, '\p{^isbamu}', "");
Expect(0, 42743, '\P{isbamu}', "");
Expect(1, 42743, '\P{^isbamu}', "");
Expect(0, 42655, '\p{isbamu}', "");
Expect(1, 42655, '\p{^isbamu}', "");
Expect(1, 42655, '\P{isbamu}', "");
Expect(0, 42655, '\P{^isbamu}', "");
Expect(1, 42743, '\p{-ISbamu}', "");
Expect(0, 42743, '\p{^-ISbamu}', "");
Expect(0, 42743, '\P{-ISbamu}', "");
Expect(1, 42743, '\P{^-ISbamu}', "");
Expect(0, 42655, '\p{-ISbamu}', "");
Expect(1, 42655, '\p{^-ISbamu}', "");
Expect(1, 42655, '\P{-ISbamu}', "");
Expect(0, 42655, '\P{^-ISbamu}', "");
Error('\p{:=_ in	Bengali}');
Error('\P{:=_ in	Bengali}');
Expect(1, 2559, '\p{inbengali}', "");
Expect(0, 2559, '\p{^inbengali}', "");
Expect(0, 2559, '\P{inbengali}', "");
Expect(1, 2559, '\P{^inbengali}', "");
Expect(0, 2431, '\p{inbengali}', "");
Expect(1, 2431, '\p{^inbengali}', "");
Expect(1, 2431, '\P{inbengali}', "");
Expect(0, 2431, '\P{^inbengali}', "");
Expect(1, 2559, '\p{ InBengali}', "");
Expect(0, 2559, '\p{^ InBengali}', "");
Expect(0, 2559, '\P{ InBengali}', "");
Expect(1, 2559, '\P{^ InBengali}', "");
Expect(0, 2431, '\p{ InBengali}', "");
Expect(1, 2431, '\p{^ InBengali}', "");
Expect(1, 2431, '\P{ InBengali}', "");
Expect(0, 2431, '\P{^ InBengali}', "");
Error('\p{-:=Cuneiform}');
Error('\P{-:=Cuneiform}');
Expect(1, 74606, '\p{cuneiform}', "");
Expect(0, 74606, '\p{^cuneiform}', "");
Expect(0, 74606, '\P{cuneiform}', "");
Expect(1, 74606, '\P{^cuneiform}', "");
Expect(0, 73727, '\p{cuneiform}', "");
Expect(1, 73727, '\p{^cuneiform}', "");
Expect(1, 73727, '\P{cuneiform}', "");
Expect(0, 73727, '\P{^cuneiform}', "");
Expect(1, 74606, '\p{	cuneiform}', "");
Expect(0, 74606, '\p{^	cuneiform}', "");
Expect(0, 74606, '\P{	cuneiform}', "");
Expect(1, 74606, '\P{^	cuneiform}', "");
Expect(0, 73727, '\p{	cuneiform}', "");
Expect(1, 73727, '\p{^	cuneiform}', "");
Expect(1, 73727, '\P{	cuneiform}', "");
Expect(0, 73727, '\P{^	cuneiform}', "");
Error('\p{-:=Is	Cuneiform}');
Error('\P{-:=Is	Cuneiform}');
Expect(1, 74606, '\p{iscuneiform}', "");
Expect(0, 74606, '\p{^iscuneiform}', "");
Expect(0, 74606, '\P{iscuneiform}', "");
Expect(1, 74606, '\P{^iscuneiform}', "");
Expect(0, 73727, '\p{iscuneiform}', "");
Expect(1, 73727, '\p{^iscuneiform}', "");
Expect(1, 73727, '\P{iscuneiform}', "");
Expect(0, 73727, '\P{^iscuneiform}', "");
Expect(1, 74606, '\p{--Is Cuneiform}', "");
Expect(0, 74606, '\p{^--Is Cuneiform}', "");
Expect(0, 74606, '\P{--Is Cuneiform}', "");
Expect(1, 74606, '\P{^--Is Cuneiform}', "");
Expect(0, 73727, '\p{--Is Cuneiform}', "");
Expect(1, 73727, '\p{^--Is Cuneiform}', "");
Expect(1, 73727, '\P{--Is Cuneiform}', "");
Expect(0, 73727, '\P{^--Is Cuneiform}', "");
Error('\p{-/a/Xsux}');
Error('\P{-/a/Xsux}');
Expect(1, 74606, '\p{xsux}', "");
Expect(0, 74606, '\p{^xsux}', "");
Expect(0, 74606, '\P{xsux}', "");
Expect(1, 74606, '\P{^xsux}', "");
Expect(0, 73727, '\p{xsux}', "");
Expect(1, 73727, '\p{^xsux}', "");
Expect(1, 73727, '\P{xsux}', "");
Expect(0, 73727, '\P{^xsux}', "");
Expect(1, 74606, '\p{-	XSUX}', "");
Expect(0, 74606, '\p{^-	XSUX}', "");
Expect(0, 74606, '\P{-	XSUX}', "");
Expect(1, 74606, '\P{^-	XSUX}', "");
Expect(0, 73727, '\p{-	XSUX}', "");
Expect(1, 73727, '\p{^-	XSUX}', "");
Expect(1, 73727, '\P{-	XSUX}', "");
Expect(0, 73727, '\P{^-	XSUX}', "");
Error('\p{_ IS:=Xsux}');
Error('\P{_ IS:=Xsux}');
Expect(1, 74606, '\p{isxsux}', "");
Expect(0, 74606, '\p{^isxsux}', "");
Expect(0, 74606, '\P{isxsux}', "");
Expect(1, 74606, '\P{^isxsux}', "");
Expect(0, 73727, '\p{isxsux}', "");
Expect(1, 73727, '\p{^isxsux}', "");
Expect(1, 73727, '\P{isxsux}', "");
Expect(0, 73727, '\P{^isxsux}', "");
Expect(1, 74606, '\p{-	is_XSUX}', "");
Expect(0, 74606, '\p{^-	is_XSUX}', "");
Expect(0, 74606, '\P{-	is_XSUX}', "");
Expect(1, 74606, '\P{^-	is_XSUX}', "");
Expect(0, 73727, '\p{-	is_XSUX}', "");
Expect(1, 73727, '\p{^-	is_XSUX}', "");
Expect(1, 73727, '\P{-	is_XSUX}', "");
Expect(0, 73727, '\P{^-	is_XSUX}', "");
Error('\p{/a/ HANGUL Jamo	ExtendedA}');
Error('\P{/a/ HANGUL Jamo	ExtendedA}');
Expect(1, 43391, '\p{hanguljamoextendeda}', "");
Expect(0, 43391, '\p{^hanguljamoextendeda}', "");
Expect(0, 43391, '\P{hanguljamoextendeda}', "");
Expect(1, 43391, '\P{^hanguljamoextendeda}', "");
Expect(0, 43359, '\p{hanguljamoextendeda}', "");
Expect(1, 43359, '\p{^hanguljamoextendeda}', "");
Expect(1, 43359, '\P{hanguljamoextendeda}', "");
Expect(0, 43359, '\P{^hanguljamoextendeda}', "");
Expect(1, 43391, '\p{-Hangul JamoExtended_A}', "");
Expect(0, 43391, '\p{^-Hangul JamoExtended_A}', "");
Expect(0, 43391, '\P{-Hangul JamoExtended_A}', "");
Expect(1, 43391, '\P{^-Hangul JamoExtended_A}', "");
Expect(0, 43359, '\p{-Hangul JamoExtended_A}', "");
Expect(1, 43359, '\p{^-Hangul JamoExtended_A}', "");
Expect(1, 43359, '\P{-Hangul JamoExtended_A}', "");
Expect(0, 43359, '\P{^-Hangul JamoExtended_A}', "");
Error('\p{_-IS_HangulJAMO EXTENDED A/a/}');
Error('\P{_-IS_HangulJAMO EXTENDED A/a/}');
Expect(1, 43391, '\p{ishanguljamoextendeda}', "");
Expect(0, 43391, '\p{^ishanguljamoextendeda}', "");
Expect(0, 43391, '\P{ishanguljamoextendeda}', "");
Expect(1, 43391, '\P{^ishanguljamoextendeda}', "");
Expect(0, 43359, '\p{ishanguljamoextendeda}', "");
Expect(1, 43359, '\p{^ishanguljamoextendeda}', "");
Expect(1, 43359, '\P{ishanguljamoextendeda}', "");
Expect(0, 43359, '\P{^ishanguljamoextendeda}', "");
Expect(1, 43391, '\p{_ Is_hangul-JamoEXTENDED_A}', "");
Expect(0, 43391, '\p{^_ Is_hangul-JamoEXTENDED_A}', "");
Expect(0, 43391, '\P{_ Is_hangul-JamoEXTENDED_A}', "");
Expect(1, 43391, '\P{^_ Is_hangul-JamoEXTENDED_A}', "");
Expect(0, 43359, '\p{_ Is_hangul-JamoEXTENDED_A}', "");
Expect(1, 43359, '\p{^_ Is_hangul-JamoEXTENDED_A}', "");
Expect(1, 43359, '\P{_ Is_hangul-JamoEXTENDED_A}', "");
Expect(0, 43359, '\P{^_ Is_hangul-JamoEXTENDED_A}', "");
Error('\p{_In/a/Hangul	Jamo EXTENDED A}');
Error('\P{_In/a/Hangul	Jamo EXTENDED A}');
Expect(1, 43391, '\p{inhanguljamoextendeda}', "");
Expect(0, 43391, '\p{^inhanguljamoextendeda}', "");
Expect(0, 43391, '\P{inhanguljamoextendeda}', "");
Expect(1, 43391, '\P{^inhanguljamoextendeda}', "");
Expect(0, 43359, '\p{inhanguljamoextendeda}', "");
Expect(1, 43359, '\p{^inhanguljamoextendeda}', "");
Expect(1, 43359, '\P{inhanguljamoextendeda}', "");
Expect(0, 43359, '\P{^inhanguljamoextendeda}', "");
Expect(1, 43391, '\p{ in HANGUL	JAMO	extended-A}', "");
Expect(0, 43391, '\p{^ in HANGUL	JAMO	extended-A}', "");
Expect(0, 43391, '\P{ in HANGUL	JAMO	extended-A}', "");
Expect(1, 43391, '\P{^ in HANGUL	JAMO	extended-A}', "");
Expect(0, 43359, '\p{ in HANGUL	JAMO	extended-A}', "");
Expect(1, 43359, '\p{^ in HANGUL	JAMO	extended-A}', "");
Expect(1, 43359, '\P{ in HANGUL	JAMO	extended-A}', "");
Expect(0, 43359, '\P{^ in HANGUL	JAMO	extended-A}', "");
Error('\p{/a/-Cased}');
Error('\P{/a/-Cased}');
Expect(1, 90, '\p{cased}', "");
Expect(0, 90, '\p{^cased}', "");
Expect(0, 90, '\P{cased}', "");
Expect(1, 90, '\P{^cased}', "");
Expect(0, 64, '\p{cased}', "");
Expect(1, 64, '\p{^cased}', "");
Expect(1, 64, '\P{cased}', "");
Expect(0, 64, '\P{^cased}', "");
Expect(1, 90, '\p{--Cased}', "");
Expect(0, 90, '\p{^--Cased}', "");
Expect(0, 90, '\P{--Cased}', "");
Expect(1, 90, '\P{^--Cased}', "");
Expect(0, 64, '\p{--Cased}', "");
Expect(1, 64, '\p{^--Cased}', "");
Expect(1, 64, '\P{--Cased}', "");
Expect(0, 64, '\P{^--Cased}', "");
Error('\p{ _Is/a/cased}');
Error('\P{ _Is/a/cased}');
Expect(1, 90, '\p{iscased}', "");
Expect(0, 90, '\p{^iscased}', "");
Expect(0, 90, '\P{iscased}', "");
Expect(1, 90, '\P{^iscased}', "");
Expect(0, 64, '\p{iscased}', "");
Expect(1, 64, '\p{^iscased}', "");
Expect(1, 64, '\P{iscased}', "");
Expect(0, 64, '\P{^iscased}', "");
Expect(1, 90, '\p{	_is_Cased}', "");
Expect(0, 90, '\p{^	_is_Cased}', "");
Expect(0, 90, '\P{	_is_Cased}', "");
Expect(1, 90, '\P{^	_is_Cased}', "");
Expect(0, 64, '\p{	_is_Cased}', "");
Expect(1, 64, '\p{^	_is_Cased}', "");
Expect(1, 64, '\P{	_is_Cased}', "");
Expect(0, 64, '\P{^	_is_Cased}', "");
Error('\p{:=-InKatakana}');
Error('\P{:=-InKatakana}');
Expect(1, 12543, '\p{inkatakana}', "");
Expect(0, 12543, '\p{^inkatakana}', "");
Expect(0, 12543, '\P{inkatakana}', "");
Expect(1, 12543, '\P{^inkatakana}', "");
Expect(0, 12447, '\p{inkatakana}', "");
Expect(1, 12447, '\p{^inkatakana}', "");
Expect(1, 12447, '\P{inkatakana}', "");
Expect(0, 12447, '\P{^inkatakana}', "");
Expect(1, 12543, '\p{ -In	katakana}', "");
Expect(0, 12543, '\p{^ -In	katakana}', "");
Expect(0, 12543, '\P{ -In	katakana}', "");
Expect(1, 12543, '\P{^ -In	katakana}', "");
Expect(0, 12447, '\p{ -In	katakana}', "");
Expect(1, 12447, '\p{^ -In	katakana}', "");
Expect(1, 12447, '\P{ -In	katakana}', "");
Expect(0, 12447, '\P{^ -In	katakana}', "");
Error('\p{	:=Arabic_PRESENTATION	FORMSA}');
Error('\P{	:=Arabic_PRESENTATION	FORMSA}');
Expect(1, 65023, '\p{arabicpresentationformsa}', "");
Expect(0, 65023, '\p{^arabicpresentationformsa}', "");
Expect(0, 65023, '\P{arabicpresentationformsa}', "");
Expect(1, 65023, '\P{^arabicpresentationformsa}', "");
Expect(0, 64335, '\p{arabicpresentationformsa}', "");
Expect(1, 64335, '\p{^arabicpresentationformsa}', "");
Expect(1, 64335, '\P{arabicpresentationformsa}', "");
Expect(0, 64335, '\P{^arabicpresentationformsa}', "");
Expect(1, 65023, '\p{	-Arabic	PRESENTATION	FORMS_A}', "");
Expect(0, 65023, '\p{^	-Arabic	PRESENTATION	FORMS_A}', "");
Expect(0, 65023, '\P{	-Arabic	PRESENTATION	FORMS_A}', "");
Expect(1, 65023, '\P{^	-Arabic	PRESENTATION	FORMS_A}', "");
Expect(0, 64335, '\p{	-Arabic	PRESENTATION	FORMS_A}', "");
Expect(1, 64335, '\p{^	-Arabic	PRESENTATION	FORMS_A}', "");
Expect(1, 64335, '\P{	-Arabic	PRESENTATION	FORMS_A}', "");
Expect(0, 64335, '\P{^	-Arabic	PRESENTATION	FORMS_A}', "");
Error('\p{	:=ISarabic	Presentation	forms_A}');
Error('\P{	:=ISarabic	Presentation	forms_A}');
Expect(1, 65023, '\p{isarabicpresentationformsa}', "");
Expect(0, 65023, '\p{^isarabicpresentationformsa}', "");
Expect(0, 65023, '\P{isarabicpresentationformsa}', "");
Expect(1, 65023, '\P{^isarabicpresentationformsa}', "");
Expect(0, 64335, '\p{isarabicpresentationformsa}', "");
Expect(1, 64335, '\p{^isarabicpresentationformsa}', "");
Expect(1, 64335, '\P{isarabicpresentationformsa}', "");
Expect(0, 64335, '\P{^isarabicpresentationformsa}', "");
Expect(1, 65023, '\p{ -Is	Arabic-presentation_FORMS_A}', "");
Expect(0, 65023, '\p{^ -Is	Arabic-presentation_FORMS_A}', "");
Expect(0, 65023, '\P{ -Is	Arabic-presentation_FORMS_A}', "");
Expect(1, 65023, '\P{^ -Is	Arabic-presentation_FORMS_A}', "");
Expect(0, 64335, '\p{ -Is	Arabic-presentation_FORMS_A}', "");
Expect(1, 64335, '\p{^ -Is	Arabic-presentation_FORMS_A}', "");
Expect(1, 64335, '\P{ -Is	Arabic-presentation_FORMS_A}', "");
Expect(0, 64335, '\P{^ -Is	Arabic-presentation_FORMS_A}', "");
Error('\p{	In	ARABIC/a/presentation-forms_a}');
Error('\P{	In	ARABIC/a/presentation-forms_a}');
Expect(1, 65023, '\p{inarabicpresentationformsa}', "");
Expect(0, 65023, '\p{^inarabicpresentationformsa}', "");
Expect(0, 65023, '\P{inarabicpresentationformsa}', "");
Expect(1, 65023, '\P{^inarabicpresentationformsa}', "");
Expect(0, 64335, '\p{inarabicpresentationformsa}', "");
Expect(1, 64335, '\p{^inarabicpresentationformsa}', "");
Expect(1, 64335, '\P{inarabicpresentationformsa}', "");
Expect(0, 64335, '\P{^inarabicpresentationformsa}', "");
Expect(1, 65023, '\p{InARABIC-Presentation	forms A}', "");
Expect(0, 65023, '\p{^InARABIC-Presentation	forms A}', "");
Expect(0, 65023, '\P{InARABIC-Presentation	forms A}', "");
Expect(1, 65023, '\P{^InARABIC-Presentation	forms A}', "");
Expect(0, 64335, '\p{InARABIC-Presentation	forms A}', "");
Expect(1, 64335, '\p{^InARABIC-Presentation	forms A}', "");
Expect(1, 64335, '\P{InARABIC-Presentation	forms A}', "");
Expect(0, 64335, '\P{^InARABIC-Presentation	forms A}', "");
Error('\p{ _IN/a/TaiTham}');
Error('\P{ _IN/a/TaiTham}');
Expect(1, 6831, '\p{intaitham}', "");
Expect(0, 6831, '\p{^intaitham}', "");
Expect(0, 6831, '\P{intaitham}', "");
Expect(1, 6831, '\P{^intaitham}', "");
Expect(0, 6687, '\p{intaitham}', "");
Expect(1, 6687, '\p{^intaitham}', "");
Expect(1, 6687, '\P{intaitham}', "");
Expect(0, 6687, '\P{^intaitham}', "");
Expect(1, 6831, '\p{ In	Tai Tham}', "");
Expect(0, 6831, '\p{^ In	Tai Tham}', "");
Expect(0, 6831, '\P{ In	Tai Tham}', "");
Expect(1, 6831, '\P{^ In	Tai Tham}', "");
Expect(0, 6687, '\p{ In	Tai Tham}', "");
Expect(1, 6687, '\p{^ In	Tai Tham}', "");
Expect(1, 6687, '\P{ In	Tai Tham}', "");
Expect(0, 6687, '\P{^ In	Tai Tham}', "");
Error('\p{ /a/InTagalog}');
Error('\P{ /a/InTagalog}');
Expect(1, 5919, '\p{intagalog}', "");
Expect(0, 5919, '\p{^intagalog}', "");
Expect(0, 5919, '\P{intagalog}', "");
Expect(1, 5919, '\P{^intagalog}', "");
Expect(0, 5887, '\p{intagalog}', "");
Expect(1, 5887, '\p{^intagalog}', "");
Expect(1, 5887, '\P{intagalog}', "");
Expect(0, 5887, '\P{^intagalog}', "");
Expect(1, 5919, '\p{--in_Tagalog}', "");
Expect(0, 5919, '\p{^--in_Tagalog}', "");
Expect(0, 5919, '\P{--in_Tagalog}', "");
Expect(1, 5919, '\P{^--in_Tagalog}', "");
Expect(0, 5887, '\p{--in_Tagalog}', "");
Expect(1, 5887, '\p{^--in_Tagalog}', "");
Expect(1, 5887, '\P{--in_Tagalog}', "");
Expect(0, 5887, '\P{^--in_Tagalog}', "");
Error('\p{:=_TAI	Xuan Jing	Symbols}');
Error('\P{:=_TAI	Xuan Jing	Symbols}');
Expect(1, 119647, '\p{taixuanjingsymbols}', "");
Expect(0, 119647, '\p{^taixuanjingsymbols}', "");
Expect(0, 119647, '\P{taixuanjingsymbols}', "");
Expect(1, 119647, '\P{^taixuanjingsymbols}', "");
Expect(0, 119551, '\p{taixuanjingsymbols}', "");
Expect(1, 119551, '\p{^taixuanjingsymbols}', "");
Expect(1, 119551, '\P{taixuanjingsymbols}', "");
Expect(0, 119551, '\P{^taixuanjingsymbols}', "");
Expect(1, 119647, '\p{	TAI-XUAN	jing-Symbols}', "");
Expect(0, 119647, '\p{^	TAI-XUAN	jing-Symbols}', "");
Expect(0, 119647, '\P{	TAI-XUAN	jing-Symbols}', "");
Expect(1, 119647, '\P{^	TAI-XUAN	jing-Symbols}', "");
Expect(0, 119551, '\p{	TAI-XUAN	jing-Symbols}', "");
Expect(1, 119551, '\p{^	TAI-XUAN	jing-Symbols}', "");
Expect(1, 119551, '\P{	TAI-XUAN	jing-Symbols}', "");
Expect(0, 119551, '\P{^	TAI-XUAN	jing-Symbols}', "");
Error('\p{ :=Is	Tai	Xuan Jing	SYMBOLS}');
Error('\P{ :=Is	Tai	Xuan Jing	SYMBOLS}');
Expect(1, 119647, '\p{istaixuanjingsymbols}', "");
Expect(0, 119647, '\p{^istaixuanjingsymbols}', "");
Expect(0, 119647, '\P{istaixuanjingsymbols}', "");
Expect(1, 119647, '\P{^istaixuanjingsymbols}', "");
Expect(0, 119551, '\p{istaixuanjingsymbols}', "");
Expect(1, 119551, '\p{^istaixuanjingsymbols}', "");
Expect(1, 119551, '\P{istaixuanjingsymbols}', "");
Expect(0, 119551, '\P{^istaixuanjingsymbols}', "");
Expect(1, 119647, '\p{_IS tai-XUANjing	SYMBOLS}', "");
Expect(0, 119647, '\p{^_IS tai-XUANjing	SYMBOLS}', "");
Expect(0, 119647, '\P{_IS tai-XUANjing	SYMBOLS}', "");
Expect(1, 119647, '\P{^_IS tai-XUANjing	SYMBOLS}', "");
Expect(0, 119551, '\p{_IS tai-XUANjing	SYMBOLS}', "");
Expect(1, 119551, '\p{^_IS tai-XUANjing	SYMBOLS}', "");
Expect(1, 119551, '\P{_IS tai-XUANjing	SYMBOLS}', "");
Expect(0, 119551, '\P{^_IS tai-XUANjing	SYMBOLS}', "");
Error('\p{		in:=TAIXUAN Jing	symbols}');
Error('\P{		in:=TAIXUAN Jing	symbols}');
Expect(1, 119647, '\p{intaixuanjingsymbols}', "");
Expect(0, 119647, '\p{^intaixuanjingsymbols}', "");
Expect(0, 119647, '\P{intaixuanjingsymbols}', "");
Expect(1, 119647, '\P{^intaixuanjingsymbols}', "");
Expect(0, 119551, '\p{intaixuanjingsymbols}', "");
Expect(1, 119551, '\p{^intaixuanjingsymbols}', "");
Expect(1, 119551, '\P{intaixuanjingsymbols}', "");
Expect(0, 119551, '\P{^intaixuanjingsymbols}', "");
Expect(1, 119647, '\p{ -IN Tai	Xuan jing	symbols}', "");
Expect(0, 119647, '\p{^ -IN Tai	Xuan jing	symbols}', "");
Expect(0, 119647, '\P{ -IN Tai	Xuan jing	symbols}', "");
Expect(1, 119647, '\P{^ -IN Tai	Xuan jing	symbols}', "");
Expect(0, 119551, '\p{ -IN Tai	Xuan jing	symbols}', "");
Expect(1, 119551, '\p{^ -IN Tai	Xuan jing	symbols}', "");
Expect(1, 119551, '\P{ -IN Tai	Xuan jing	symbols}', "");
Expect(0, 119551, '\P{^ -IN Tai	Xuan jing	symbols}', "");
Error('\p{/a/_-In_Lepcha}');
Error('\P{/a/_-In_Lepcha}');
Expect(1, 7247, '\p{inlepcha}', "");
Expect(0, 7247, '\p{^inlepcha}', "");
Expect(0, 7247, '\P{inlepcha}', "");
Expect(1, 7247, '\P{^inlepcha}', "");
Expect(0, 7167, '\p{inlepcha}', "");
Expect(1, 7167, '\p{^inlepcha}', "");
Expect(1, 7167, '\P{inlepcha}', "");
Expect(0, 7167, '\P{^inlepcha}', "");
Expect(1, 7247, '\p{-	In-LEPCHA}', "");
Expect(0, 7247, '\p{^-	In-LEPCHA}', "");
Expect(0, 7247, '\P{-	In-LEPCHA}', "");
Expect(1, 7247, '\P{^-	In-LEPCHA}', "");
Expect(0, 7167, '\p{-	In-LEPCHA}', "");
Expect(1, 7167, '\p{^-	In-LEPCHA}', "");
Expect(1, 7167, '\P{-	In-LEPCHA}', "");
Expect(0, 7167, '\P{^-	In-LEPCHA}', "");
Error('\p{_In:=cham}');
Error('\P{_In:=cham}');
Expect(1, 43615, '\p{incham}', "");
Expect(0, 43615, '\p{^incham}', "");
Expect(0, 43615, '\P{incham}', "");
Expect(1, 43615, '\P{^incham}', "");
Expect(0, 43519, '\p{incham}', "");
Expect(1, 43519, '\p{^incham}', "");
Expect(1, 43519, '\P{incham}', "");
Expect(0, 43519, '\P{^incham}', "");
Expect(1, 43615, '\p{	_IN-Cham}', "");
Expect(0, 43615, '\p{^	_IN-Cham}', "");
Expect(0, 43615, '\P{	_IN-Cham}', "");
Expect(1, 43615, '\P{^	_IN-Cham}', "");
Expect(0, 43519, '\p{	_IN-Cham}', "");
Expect(1, 43519, '\p{^	_IN-Cham}', "");
Expect(1, 43519, '\P{	_IN-Cham}', "");
Expect(0, 43519, '\P{^	_IN-Cham}', "");
Error('\p{_in:=Bopomofo}');
Error('\P{_in:=Bopomofo}');
Expect(1, 12591, '\p{inbopomofo}', "");
Expect(0, 12591, '\p{^inbopomofo}', "");
Expect(0, 12591, '\P{inbopomofo}', "");
Expect(1, 12591, '\P{^inbopomofo}', "");
Expect(0, 12543, '\p{inbopomofo}', "");
Expect(1, 12543, '\p{^inbopomofo}', "");
Expect(1, 12543, '\P{inbopomofo}', "");
Expect(0, 12543, '\P{^inbopomofo}', "");
Expect(1, 12591, '\p{ In-BOPOMOFO}', "");
Expect(0, 12591, '\p{^ In-BOPOMOFO}', "");
Expect(0, 12591, '\P{ In-BOPOMOFO}', "");
Expect(1, 12591, '\P{^ In-BOPOMOFO}', "");
Expect(0, 12543, '\p{ In-BOPOMOFO}', "");
Expect(1, 12543, '\p{^ In-BOPOMOFO}', "");
Expect(1, 12543, '\P{ In-BOPOMOFO}', "");
Expect(0, 12543, '\P{^ In-BOPOMOFO}', "");
Error('\p{_-CJK:=compatibility IDEOGRAPHS}');
Error('\P{_-CJK:=compatibility IDEOGRAPHS}');
Expect(1, 64255, '\p{cjkcompatibilityideographs}', "");
Expect(0, 64255, '\p{^cjkcompatibilityideographs}', "");
Expect(0, 64255, '\P{cjkcompatibilityideographs}', "");
Expect(1, 64255, '\P{^cjkcompatibilityideographs}', "");
Expect(0, 63743, '\p{cjkcompatibilityideographs}', "");
Expect(1, 63743, '\p{^cjkcompatibilityideographs}', "");
Expect(1, 63743, '\P{cjkcompatibilityideographs}', "");
Expect(0, 63743, '\P{^cjkcompatibilityideographs}', "");
Expect(1, 64255, '\p{-cjk	compatibility_ideographs}', "");
Expect(0, 64255, '\p{^-cjk	compatibility_ideographs}', "");
Expect(0, 64255, '\P{-cjk	compatibility_ideographs}', "");
Expect(1, 64255, '\P{^-cjk	compatibility_ideographs}', "");
Expect(0, 63743, '\p{-cjk	compatibility_ideographs}', "");
Expect(1, 63743, '\p{^-cjk	compatibility_ideographs}', "");
Expect(1, 63743, '\P{-cjk	compatibility_ideographs}', "");
Expect(0, 63743, '\P{^-cjk	compatibility_ideographs}', "");
Error('\p{	 is CJK/a/Compatibility-IDEOGRAPHS}');
Error('\P{	 is CJK/a/Compatibility-IDEOGRAPHS}');
Expect(1, 64255, '\p{iscjkcompatibilityideographs}', "");
Expect(0, 64255, '\p{^iscjkcompatibilityideographs}', "");
Expect(0, 64255, '\P{iscjkcompatibilityideographs}', "");
Expect(1, 64255, '\P{^iscjkcompatibilityideographs}', "");
Expect(0, 63743, '\p{iscjkcompatibilityideographs}', "");
Expect(1, 63743, '\p{^iscjkcompatibilityideographs}', "");
Expect(1, 63743, '\P{iscjkcompatibilityideographs}', "");
Expect(0, 63743, '\P{^iscjkcompatibilityideographs}', "");
Expect(1, 64255, '\p{_Is_CJK-Compatibility_Ideographs}', "");
Expect(0, 64255, '\p{^_Is_CJK-Compatibility_Ideographs}', "");
Expect(0, 64255, '\P{_Is_CJK-Compatibility_Ideographs}', "");
Expect(1, 64255, '\P{^_Is_CJK-Compatibility_Ideographs}', "");
Expect(0, 63743, '\p{_Is_CJK-Compatibility_Ideographs}', "");
Expect(1, 63743, '\p{^_Is_CJK-Compatibility_Ideographs}', "");
Expect(1, 63743, '\P{_Is_CJK-Compatibility_Ideographs}', "");
Expect(0, 63743, '\P{^_Is_CJK-Compatibility_Ideographs}', "");
Error('\p{-:=In	CJK-Compatibility	Ideographs}');
Error('\P{-:=In	CJK-Compatibility	Ideographs}');
Expect(1, 64255, '\p{incjkcompatibilityideographs}', "");
Expect(0, 64255, '\p{^incjkcompatibilityideographs}', "");
Expect(0, 64255, '\P{incjkcompatibilityideographs}', "");
Expect(1, 64255, '\P{^incjkcompatibilityideographs}', "");
Expect(0, 63743, '\p{incjkcompatibilityideographs}', "");
Expect(1, 63743, '\p{^incjkcompatibilityideographs}', "");
Expect(1, 63743, '\P{incjkcompatibilityideographs}', "");
Expect(0, 63743, '\P{^incjkcompatibilityideographs}', "");
Expect(1, 64255, '\p{--inCJKcompatibilityIDEOGRAPHS}', "");
Expect(0, 64255, '\p{^--inCJKcompatibilityIDEOGRAPHS}', "");
Expect(0, 64255, '\P{--inCJKcompatibilityIDEOGRAPHS}', "");
Expect(1, 64255, '\P{^--inCJKcompatibilityIDEOGRAPHS}', "");
Expect(0, 63743, '\p{--inCJKcompatibilityIDEOGRAPHS}', "");
Expect(1, 63743, '\p{^--inCJKcompatibilityIDEOGRAPHS}', "");
Expect(1, 63743, '\P{--inCJKcompatibilityIDEOGRAPHS}', "");
Expect(0, 63743, '\P{^--inCJKcompatibilityIDEOGRAPHS}', "");
Error('\p{:=	 Arrows}');
Error('\P{:=	 Arrows}');
Expect(1, 8703, '\p{arrows}', "");
Expect(0, 8703, '\p{^arrows}', "");
Expect(0, 8703, '\P{arrows}', "");
Expect(1, 8703, '\P{^arrows}', "");
Expect(0, 8591, '\p{arrows}', "");
Expect(1, 8591, '\p{^arrows}', "");
Expect(1, 8591, '\P{arrows}', "");
Expect(0, 8591, '\P{^arrows}', "");
Expect(1, 8703, '\p{	Arrows}', "");
Expect(0, 8703, '\p{^	Arrows}', "");
Expect(0, 8703, '\P{	Arrows}', "");
Expect(1, 8703, '\P{^	Arrows}', "");
Expect(0, 8591, '\p{	Arrows}', "");
Expect(1, 8591, '\p{^	Arrows}', "");
Expect(1, 8591, '\P{	Arrows}', "");
Expect(0, 8591, '\P{^	Arrows}', "");
Error('\p{ Is Arrows/a/}');
Error('\P{ Is Arrows/a/}');
Expect(1, 8703, '\p{isarrows}', "");
Expect(0, 8703, '\p{^isarrows}', "");
Expect(0, 8703, '\P{isarrows}', "");
Expect(1, 8703, '\P{^isarrows}', "");
Expect(0, 8591, '\p{isarrows}', "");
Expect(1, 8591, '\p{^isarrows}', "");
Expect(1, 8591, '\P{isarrows}', "");
Expect(0, 8591, '\P{^isarrows}', "");
Expect(1, 8703, '\p{	IsArrows}', "");
Expect(0, 8703, '\p{^	IsArrows}', "");
Expect(0, 8703, '\P{	IsArrows}', "");
Expect(1, 8703, '\P{^	IsArrows}', "");
Expect(0, 8591, '\p{	IsArrows}', "");
Expect(1, 8591, '\p{^	IsArrows}', "");
Expect(1, 8591, '\P{	IsArrows}', "");
Expect(0, 8591, '\P{^	IsArrows}', "");
Error('\p{  in/a/Arrows}');
Error('\P{  in/a/Arrows}');
Expect(1, 8703, '\p{inarrows}', "");
Expect(0, 8703, '\p{^inarrows}', "");
Expect(0, 8703, '\P{inarrows}', "");
Expect(1, 8703, '\P{^inarrows}', "");
Expect(0, 8591, '\p{inarrows}', "");
Expect(1, 8591, '\p{^inarrows}', "");
Expect(1, 8591, '\P{inarrows}', "");
Expect(0, 8591, '\P{^inarrows}', "");
Expect(1, 8703, '\p{ -in_Arrows}', "");
Expect(0, 8703, '\p{^ -in_Arrows}', "");
Expect(0, 8703, '\P{ -in_Arrows}', "");
Expect(1, 8703, '\P{^ -in_Arrows}', "");
Expect(0, 8591, '\p{ -in_Arrows}', "");
Expect(1, 8591, '\p{^ -in_Arrows}', "");
Expect(1, 8591, '\P{ -in_Arrows}', "");
Expect(0, 8591, '\P{^ -in_Arrows}', "");
Error('\p{- inLao/a/}');
Error('\P{- inLao/a/}');
Expect(1, 3839, '\p{inlao}', "");
Expect(0, 3839, '\p{^inlao}', "");
Expect(0, 3839, '\P{inlao}', "");
Expect(1, 3839, '\P{^inlao}', "");
Expect(0, 3711, '\p{inlao}', "");
Expect(1, 3711, '\p{^inlao}', "");
Expect(1, 3711, '\P{inlao}', "");
Expect(0, 3711, '\P{^inlao}', "");
Expect(1, 3839, '\p{	IN_Lao}', "");
Expect(0, 3839, '\p{^	IN_Lao}', "");
Expect(0, 3839, '\P{	IN_Lao}', "");
Expect(1, 3839, '\P{^	IN_Lao}', "");
Expect(0, 3711, '\p{	IN_Lao}', "");
Expect(1, 3711, '\p{^	IN_Lao}', "");
Expect(1, 3711, '\P{	IN_Lao}', "");
Expect(0, 3711, '\P{^	IN_Lao}', "");
Error('\p{-_CONNECTORPUNCTUATION:=}');
Error('\P{-_CONNECTORPUNCTUATION:=}');
Expect(1, 95, '\p{connectorpunctuation}', "");
Expect(0, 95, '\p{^connectorpunctuation}', "");
Expect(0, 95, '\P{connectorpunctuation}', "");
Expect(1, 95, '\P{^connectorpunctuation}', "");
Expect(0, 94, '\p{connectorpunctuation}', "");
Expect(1, 94, '\p{^connectorpunctuation}', "");
Expect(1, 94, '\P{connectorpunctuation}', "");
Expect(0, 94, '\P{^connectorpunctuation}', "");
Expect(1, 95, '\p{--Connector-punctuation}', "");
Expect(0, 95, '\p{^--Connector-punctuation}', "");
Expect(0, 95, '\P{--Connector-punctuation}', "");
Expect(1, 95, '\P{^--Connector-punctuation}', "");
Expect(0, 94, '\p{--Connector-punctuation}', "");
Expect(1, 94, '\p{^--Connector-punctuation}', "");
Expect(1, 94, '\P{--Connector-punctuation}', "");
Expect(0, 94, '\P{^--Connector-punctuation}', "");
Error('\p{/a/		is CONNECTOR	PUNCTUATION}');
Error('\P{/a/		is CONNECTOR	PUNCTUATION}');
Expect(1, 95, '\p{isconnectorpunctuation}', "");
Expect(0, 95, '\p{^isconnectorpunctuation}', "");
Expect(0, 95, '\P{isconnectorpunctuation}', "");
Expect(1, 95, '\P{^isconnectorpunctuation}', "");
Expect(0, 94, '\p{isconnectorpunctuation}', "");
Expect(1, 94, '\p{^isconnectorpunctuation}', "");
Expect(1, 94, '\P{isconnectorpunctuation}', "");
Expect(0, 94, '\P{^isconnectorpunctuation}', "");
Expect(1, 95, '\p{__Is Connector-Punctuation}', "");
Expect(0, 95, '\p{^__Is Connector-Punctuation}', "");
Expect(0, 95, '\P{__Is Connector-Punctuation}', "");
Expect(1, 95, '\P{^__Is Connector-Punctuation}', "");
Expect(0, 94, '\p{__Is Connector-Punctuation}', "");
Expect(1, 94, '\p{^__Is Connector-Punctuation}', "");
Expect(1, 94, '\P{__Is Connector-Punctuation}', "");
Expect(0, 94, '\P{^__Is Connector-Punctuation}', "");
Error('\p{ /a/pc}');
Error('\P{ /a/pc}');
Expect(1, 95, '\p{pc}', "");
Expect(0, 95, '\p{^pc}', "");
Expect(0, 95, '\P{pc}', "");
Expect(1, 95, '\P{^pc}', "");
Expect(0, 94, '\p{pc}', "");
Expect(1, 94, '\p{^pc}', "");
Expect(1, 94, '\P{pc}', "");
Expect(0, 94, '\P{^pc}', "");
Expect(1, 95, '\p{	 pc}', "");
Expect(0, 95, '\p{^	 pc}', "");
Expect(0, 95, '\P{	 pc}', "");
Expect(1, 95, '\P{^	 pc}', "");
Expect(0, 94, '\p{	 pc}', "");
Expect(1, 94, '\p{^	 pc}', "");
Expect(1, 94, '\P{	 pc}', "");
Expect(0, 94, '\P{^	 pc}', "");
Error('\p{ /a/IS	PC}');
Error('\P{ /a/IS	PC}');
Expect(1, 95, '\p{ispc}', "");
Expect(0, 95, '\p{^ispc}', "");
Expect(0, 95, '\P{ispc}', "");
Expect(1, 95, '\P{^ispc}', "");
Expect(0, 94, '\p{ispc}', "");
Expect(1, 94, '\p{^ispc}', "");
Expect(1, 94, '\P{ispc}', "");
Expect(0, 94, '\P{^ispc}', "");
Expect(1, 95, '\p{_-ISpc}', "");
Expect(0, 95, '\p{^_-ISpc}', "");
Expect(0, 95, '\P{_-ISpc}', "");
Expect(1, 95, '\P{^_-ISpc}', "");
Expect(0, 94, '\p{_-ISpc}', "");
Expect(1, 94, '\p{^_-ISpc}', "");
Expect(1, 94, '\P{_-ISpc}', "");
Expect(0, 94, '\P{^_-ISpc}', "");
Error('\p{_	In Inscriptional pahlavi:=}');
Error('\P{_	In Inscriptional pahlavi:=}');
Expect(1, 68479, '\p{ininscriptionalpahlavi}', "");
Expect(0, 68479, '\p{^ininscriptionalpahlavi}', "");
Expect(0, 68479, '\P{ininscriptionalpahlavi}', "");
Expect(1, 68479, '\P{^ininscriptionalpahlavi}', "");
Expect(0, 68447, '\p{ininscriptionalpahlavi}', "");
Expect(1, 68447, '\p{^ininscriptionalpahlavi}', "");
Expect(1, 68447, '\P{ininscriptionalpahlavi}', "");
Expect(0, 68447, '\P{^ininscriptionalpahlavi}', "");
Expect(1, 68479, '\p{- in-Inscriptional	pahlavi}', "");
Expect(0, 68479, '\p{^- in-Inscriptional	pahlavi}', "");
Expect(0, 68479, '\P{- in-Inscriptional	pahlavi}', "");
Expect(1, 68479, '\P{^- in-Inscriptional	pahlavi}', "");
Expect(0, 68447, '\p{- in-Inscriptional	pahlavi}', "");
Expect(1, 68447, '\p{^- in-Inscriptional	pahlavi}', "");
Expect(1, 68447, '\P{- in-Inscriptional	pahlavi}', "");
Expect(0, 68447, '\P{^- in-Inscriptional	pahlavi}', "");
Error('\p{VARIATION_SELECTORS:=}');
Error('\P{VARIATION_SELECTORS:=}');
Expect(1, 65039, '\p{variationselectors}', "");
Expect(0, 65039, '\p{^variationselectors}', "");
Expect(0, 65039, '\P{variationselectors}', "");
Expect(1, 65039, '\P{^variationselectors}', "");
Expect(0, 65023, '\p{variationselectors}', "");
Expect(1, 65023, '\p{^variationselectors}', "");
Expect(1, 65023, '\P{variationselectors}', "");
Expect(0, 65023, '\P{^variationselectors}', "");
Expect(1, 65039, '\p{-_VARIATION	Selectors}', "");
Expect(0, 65039, '\p{^-_VARIATION	Selectors}', "");
Expect(0, 65039, '\P{-_VARIATION	Selectors}', "");
Expect(1, 65039, '\P{^-_VARIATION	Selectors}', "");
Expect(0, 65023, '\p{-_VARIATION	Selectors}', "");
Expect(1, 65023, '\p{^-_VARIATION	Selectors}', "");
Expect(1, 65023, '\P{-_VARIATION	Selectors}', "");
Expect(0, 65023, '\P{^-_VARIATION	Selectors}', "");
Error('\p{ _is/a/Variation_Selectors}');
Error('\P{ _is/a/Variation_Selectors}');
Expect(1, 65039, '\p{isvariationselectors}', "");
Expect(0, 65039, '\p{^isvariationselectors}', "");
Expect(0, 65039, '\P{isvariationselectors}', "");
Expect(1, 65039, '\P{^isvariationselectors}', "");
Expect(0, 65023, '\p{isvariationselectors}', "");
Expect(1, 65023, '\p{^isvariationselectors}', "");
Expect(1, 65023, '\P{isvariationselectors}', "");
Expect(0, 65023, '\P{^isvariationselectors}', "");
Expect(1, 65039, '\p{-	is	VARIATION	Selectors}', "");
Expect(0, 65039, '\p{^-	is	VARIATION	Selectors}', "");
Expect(0, 65039, '\P{-	is	VARIATION	Selectors}', "");
Expect(1, 65039, '\P{^-	is	VARIATION	Selectors}', "");
Expect(0, 65023, '\p{-	is	VARIATION	Selectors}', "");
Expect(1, 65023, '\p{^-	is	VARIATION	Selectors}', "");
Expect(1, 65023, '\P{-	is	VARIATION	Selectors}', "");
Expect(0, 65023, '\P{^-	is	VARIATION	Selectors}', "");
Error('\p{-:=IN_VARIATIONSelectors}');
Error('\P{-:=IN_VARIATIONSelectors}');
Expect(1, 65039, '\p{invariationselectors}', "");
Expect(0, 65039, '\p{^invariationselectors}', "");
Expect(0, 65039, '\P{invariationselectors}', "");
Expect(1, 65039, '\P{^invariationselectors}', "");
Expect(0, 65023, '\p{invariationselectors}', "");
Expect(1, 65023, '\p{^invariationselectors}', "");
Expect(1, 65023, '\P{invariationselectors}', "");
Expect(0, 65023, '\P{^invariationselectors}', "");
Expect(1, 65039, '\p{-in VARIATION	SELECTORS}', "");
Expect(0, 65039, '\p{^-in VARIATION	SELECTORS}', "");
Expect(0, 65039, '\P{-in VARIATION	SELECTORS}', "");
Expect(1, 65039, '\P{^-in VARIATION	SELECTORS}', "");
Expect(0, 65023, '\p{-in VARIATION	SELECTORS}', "");
Expect(1, 65023, '\p{^-in VARIATION	SELECTORS}', "");
Expect(1, 65023, '\P{-in VARIATION	SELECTORS}', "");
Expect(0, 65023, '\P{^-in VARIATION	SELECTORS}', "");
Error('\p{	__X:=LV lvt	V}');
Error('\P{	__X:=LV lvt	V}');
Expect(1, 4519, '\p{_X_LV_lvt_V}', "");
Expect(0, 4519, '\p{^_X_LV_lvt_V}', "");
Expect(0, 4519, '\P{_X_LV_lvt_V}', "");
Expect(1, 4519, '\P{^_X_LV_lvt_V}', "");
Expect(0, 4447, '\p{_X_LV_lvt_V}', "");
Expect(1, 4447, '\p{^_X_LV_lvt_V}', "");
Expect(1, 4447, '\P{_X_LV_lvt_V}', "");
Expect(0, 4447, '\P{^_X_LV_lvt_V}', "");
Error('\p{_:=private-USE}');
Error('\P{_:=private-USE}');
Expect(1, 63743, '\p{privateuse}', "");
Expect(0, 63743, '\p{^privateuse}', "");
Expect(0, 63743, '\P{privateuse}', "");
Expect(1, 63743, '\P{^privateuse}', "");
Expect(0, 1, '\p{privateuse}', "");
Expect(1, 1, '\p{^privateuse}', "");
Expect(1, 1, '\P{privateuse}', "");
Expect(0, 1, '\P{^privateuse}', "");
Expect(1, 63743, '\p{_-Private	USE}', "");
Expect(0, 63743, '\p{^_-Private	USE}', "");
Expect(0, 63743, '\P{_-Private	USE}', "");
Expect(1, 63743, '\P{^_-Private	USE}', "");
Expect(0, 1, '\p{_-Private	USE}', "");
Expect(1, 1, '\p{^_-Private	USE}', "");
Expect(1, 1, '\P{_-Private	USE}', "");
Expect(0, 1, '\P{^_-Private	USE}', "");
Error('\p{_:=Is Private_use}');
Error('\P{_:=Is Private_use}');
Expect(1, 63743, '\p{isprivateuse}', "");
Expect(0, 63743, '\p{^isprivateuse}', "");
Expect(0, 63743, '\P{isprivateuse}', "");
Expect(1, 63743, '\P{^isprivateuse}', "");
Expect(0, 1, '\p{isprivateuse}', "");
Expect(1, 1, '\p{^isprivateuse}', "");
Expect(1, 1, '\P{isprivateuse}', "");
Expect(0, 1, '\P{^isprivateuse}', "");
Expect(1, 63743, '\p{-Is_Private_USE}', "");
Expect(0, 63743, '\p{^-Is_Private_USE}', "");
Expect(0, 63743, '\P{-Is_Private_USE}', "");
Expect(1, 63743, '\P{^-Is_Private_USE}', "");
Expect(0, 1, '\p{-Is_Private_USE}', "");
Expect(1, 1, '\p{^-Is_Private_USE}', "");
Expect(1, 1, '\P{-Is_Private_USE}', "");
Expect(0, 1, '\P{^-Is_Private_USE}', "");
Error('\p{:=	-co}');
Error('\P{:=	-co}');
Expect(1, 63743, '\p{co}', "");
Expect(0, 63743, '\p{^co}', "");
Expect(0, 63743, '\P{co}', "");
Expect(1, 63743, '\P{^co}', "");
Expect(0, 1, '\p{co}', "");
Expect(1, 1, '\p{^co}', "");
Expect(1, 1, '\P{co}', "");
Expect(0, 1, '\P{^co}', "");
Expect(1, 63743, '\p{	Co}', "");
Expect(0, 63743, '\p{^	Co}', "");
Expect(0, 63743, '\P{	Co}', "");
Expect(1, 63743, '\P{^	Co}', "");
Expect(0, 1, '\p{	Co}', "");
Expect(1, 1, '\p{^	Co}', "");
Expect(1, 1, '\P{	Co}', "");
Expect(0, 1, '\P{^	Co}', "");
Error('\p{_:=Is-Co}');
Error('\P{_:=Is-Co}');
Expect(1, 63743, '\p{isco}', "");
Expect(0, 63743, '\p{^isco}', "");
Expect(0, 63743, '\P{isco}', "");
Expect(1, 63743, '\P{^isco}', "");
Expect(0, 1, '\p{isco}', "");
Expect(1, 1, '\p{^isco}', "");
Expect(1, 1, '\P{isco}', "");
Expect(0, 1, '\P{^isco}', "");
Expect(1, 63743, '\p{ IS-co}', "");
Expect(0, 63743, '\p{^ IS-co}', "");
Expect(0, 63743, '\P{ IS-co}', "");
Expect(1, 63743, '\P{^ IS-co}', "");
Expect(0, 1, '\p{ IS-co}', "");
Expect(1, 1, '\p{^ IS-co}', "");
Expect(1, 1, '\P{ IS-co}', "");
Expect(0, 1, '\P{^ IS-co}', "");
Error('\p{	:=in_lisu}');
Error('\P{	:=in_lisu}');
Expect(1, 42239, '\p{inlisu}', "");
Expect(0, 42239, '\p{^inlisu}', "");
Expect(0, 42239, '\P{inlisu}', "");
Expect(1, 42239, '\P{^inlisu}', "");
Expect(0, 42191, '\p{inlisu}', "");
Expect(1, 42191, '\p{^inlisu}', "");
Expect(1, 42191, '\P{inlisu}', "");
Expect(0, 42191, '\P{^inlisu}', "");
Expect(1, 42239, '\p{ _In lisu}', "");
Expect(0, 42239, '\p{^ _In lisu}', "");
Expect(0, 42239, '\P{ _In lisu}', "");
Expect(1, 42239, '\P{^ _In lisu}', "");
Expect(0, 42191, '\p{ _In lisu}', "");
Expect(1, 42191, '\p{^ _In lisu}', "");
Expect(1, 42191, '\P{ _In lisu}', "");
Expect(0, 42191, '\P{^ _In lisu}', "");
Error('\p{:=		Dashpunctuation}');
Error('\P{:=		Dashpunctuation}');
Expect(1, 45, '\p{dashpunctuation}', "");
Expect(0, 45, '\p{^dashpunctuation}', "");
Expect(0, 45, '\P{dashpunctuation}', "");
Expect(1, 45, '\P{^dashpunctuation}', "");
Expect(0, 44, '\p{dashpunctuation}', "");
Expect(1, 44, '\p{^dashpunctuation}', "");
Expect(1, 44, '\P{dashpunctuation}', "");
Expect(0, 44, '\P{^dashpunctuation}', "");
Expect(1, 45, '\p{ _dash-Punctuation}', "");
Expect(0, 45, '\p{^ _dash-Punctuation}', "");
Expect(0, 45, '\P{ _dash-Punctuation}', "");
Expect(1, 45, '\P{^ _dash-Punctuation}', "");
Expect(0, 44, '\p{ _dash-Punctuation}', "");
Expect(1, 44, '\p{^ _dash-Punctuation}', "");
Expect(1, 44, '\P{ _dash-Punctuation}', "");
Expect(0, 44, '\P{^ _dash-Punctuation}', "");
Error('\p{ _IsDashPunctuation:=}');
Error('\P{ _IsDashPunctuation:=}');
Expect(1, 45, '\p{isdashpunctuation}', "");
Expect(0, 45, '\p{^isdashpunctuation}', "");
Expect(0, 45, '\P{isdashpunctuation}', "");
Expect(1, 45, '\P{^isdashpunctuation}', "");
Expect(0, 44, '\p{isdashpunctuation}', "");
Expect(1, 44, '\p{^isdashpunctuation}', "");
Expect(1, 44, '\P{isdashpunctuation}', "");
Expect(0, 44, '\P{^isdashpunctuation}', "");
Expect(1, 45, '\p{ _Is Dash_Punctuation}', "");
Expect(0, 45, '\p{^ _Is Dash_Punctuation}', "");
Expect(0, 45, '\P{ _Is Dash_Punctuation}', "");
Expect(1, 45, '\P{^ _Is Dash_Punctuation}', "");
Expect(0, 44, '\p{ _Is Dash_Punctuation}', "");
Expect(1, 44, '\p{^ _Is Dash_Punctuation}', "");
Expect(1, 44, '\P{ _Is Dash_Punctuation}', "");
Expect(0, 44, '\P{^ _Is Dash_Punctuation}', "");
Error('\p{-	Pd:=}');
Error('\P{-	Pd:=}');
Expect(1, 45, '\p{pd}', "");
Expect(0, 45, '\p{^pd}', "");
Expect(0, 45, '\P{pd}', "");
Expect(1, 45, '\P{^pd}', "");
Expect(0, 44, '\p{pd}', "");
Expect(1, 44, '\p{^pd}', "");
Expect(1, 44, '\P{pd}', "");
Expect(0, 44, '\P{^pd}', "");
Expect(1, 45, '\p{	 PD}', "");
Expect(0, 45, '\p{^	 PD}', "");
Expect(0, 45, '\P{	 PD}', "");
Expect(1, 45, '\P{^	 PD}', "");
Expect(0, 44, '\p{	 PD}', "");
Expect(1, 44, '\p{^	 PD}', "");
Expect(1, 44, '\P{	 PD}', "");
Expect(0, 44, '\P{^	 PD}', "");
Error('\p{  is:=Pd}');
Error('\P{  is:=Pd}');
Expect(1, 45, '\p{ispd}', "");
Expect(0, 45, '\p{^ispd}', "");
Expect(0, 45, '\P{ispd}', "");
Expect(1, 45, '\P{^ispd}', "");
Expect(0, 44, '\p{ispd}', "");
Expect(1, 44, '\p{^ispd}', "");
Expect(1, 44, '\P{ispd}', "");
Expect(0, 44, '\P{^ispd}', "");
Expect(1, 45, '\p{ _IS	Pd}', "");
Expect(0, 45, '\p{^ _IS	Pd}', "");
Expect(0, 45, '\P{ _IS	Pd}', "");
Expect(1, 45, '\P{^ _IS	Pd}', "");
Expect(0, 44, '\p{ _IS	Pd}', "");
Expect(1, 44, '\p{^ _IS	Pd}', "");
Expect(1, 44, '\P{ _IS	Pd}', "");
Expect(0, 44, '\P{^ _IS	Pd}', "");
Error('\p{	-BOPOMOFO:=Extended}');
Error('\P{	-BOPOMOFO:=Extended}');
Expect(1, 12735, '\p{bopomofoextended}', "");
Expect(0, 12735, '\p{^bopomofoextended}', "");
Expect(0, 12735, '\P{bopomofoextended}', "");
Expect(1, 12735, '\P{^bopomofoextended}', "");
Expect(0, 12703, '\p{bopomofoextended}', "");
Expect(1, 12703, '\p{^bopomofoextended}', "");
Expect(1, 12703, '\P{bopomofoextended}', "");
Expect(0, 12703, '\P{^bopomofoextended}', "");
Expect(1, 12735, '\p{ _BOPOMOFO_extended}', "");
Expect(0, 12735, '\p{^ _BOPOMOFO_extended}', "");
Expect(0, 12735, '\P{ _BOPOMOFO_extended}', "");
Expect(1, 12735, '\P{^ _BOPOMOFO_extended}', "");
Expect(0, 12703, '\p{ _BOPOMOFO_extended}', "");
Expect(1, 12703, '\p{^ _BOPOMOFO_extended}', "");
Expect(1, 12703, '\P{ _BOPOMOFO_extended}', "");
Expect(0, 12703, '\P{^ _BOPOMOFO_extended}', "");
Error('\p{-:=Is_BOPOMOFO extended}');
Error('\P{-:=Is_BOPOMOFO extended}');
Expect(1, 12735, '\p{isbopomofoextended}', "");
Expect(0, 12735, '\p{^isbopomofoextended}', "");
Expect(0, 12735, '\P{isbopomofoextended}', "");
Expect(1, 12735, '\P{^isbopomofoextended}', "");
Expect(0, 12703, '\p{isbopomofoextended}', "");
Expect(1, 12703, '\p{^isbopomofoextended}', "");
Expect(1, 12703, '\P{isbopomofoextended}', "");
Expect(0, 12703, '\P{^isbopomofoextended}', "");
Expect(1, 12735, '\p{_Is_BopomofoEXTENDED}', "");
Expect(0, 12735, '\p{^_Is_BopomofoEXTENDED}', "");
Expect(0, 12735, '\P{_Is_BopomofoEXTENDED}', "");
Expect(1, 12735, '\P{^_Is_BopomofoEXTENDED}', "");
Expect(0, 12703, '\p{_Is_BopomofoEXTENDED}', "");
Expect(1, 12703, '\p{^_Is_BopomofoEXTENDED}', "");
Expect(1, 12703, '\P{_Is_BopomofoEXTENDED}', "");
Expect(0, 12703, '\P{^_Is_BopomofoEXTENDED}', "");
Error('\p{:= _In_bopomofoextended}');
Error('\P{:= _In_bopomofoextended}');
Expect(1, 12735, '\p{inbopomofoextended}', "");
Expect(0, 12735, '\p{^inbopomofoextended}', "");
Expect(0, 12735, '\P{inbopomofoextended}', "");
Expect(1, 12735, '\P{^inbopomofoextended}', "");
Expect(0, 12703, '\p{inbopomofoextended}', "");
Expect(1, 12703, '\p{^inbopomofoextended}', "");
Expect(1, 12703, '\P{inbopomofoextended}', "");
Expect(0, 12703, '\P{^inbopomofoextended}', "");
Expect(1, 12735, '\p{ -in-BOPOMOFO_Extended}', "");
Expect(0, 12735, '\p{^ -in-BOPOMOFO_Extended}', "");
Expect(0, 12735, '\P{ -in-BOPOMOFO_Extended}', "");
Expect(1, 12735, '\P{^ -in-BOPOMOFO_Extended}', "");
Expect(0, 12703, '\p{ -in-BOPOMOFO_Extended}', "");
Expect(1, 12703, '\p{^ -in-BOPOMOFO_Extended}', "");
Expect(1, 12703, '\P{ -in-BOPOMOFO_Extended}', "");
Expect(0, 12703, '\P{^ -in-BOPOMOFO_Extended}', "");
Error('\p{_ IN:=khmer}');
Error('\P{_ IN:=khmer}');
Expect(1, 6143, '\p{inkhmer}', "");
Expect(0, 6143, '\p{^inkhmer}', "");
Expect(0, 6143, '\P{inkhmer}', "");
Expect(1, 6143, '\P{^inkhmer}', "");
Expect(0, 6015, '\p{inkhmer}', "");
Expect(1, 6015, '\p{^inkhmer}', "");
Expect(1, 6015, '\P{inkhmer}', "");
Expect(0, 6015, '\P{^inkhmer}', "");
Expect(1, 6143, '\p{-_InKhmer}', "");
Expect(0, 6143, '\p{^-_InKhmer}', "");
Expect(0, 6143, '\P{-_InKhmer}', "");
Expect(1, 6143, '\P{^-_InKhmer}', "");
Expect(0, 6015, '\p{-_InKhmer}', "");
Expect(1, 6015, '\p{^-_InKhmer}', "");
Expect(1, 6015, '\P{-_InKhmer}', "");
Expect(0, 6015, '\P{^-_InKhmer}', "");
Error('\p{_ In_samaritan/a/}');
Error('\P{_ In_samaritan/a/}');
Expect(1, 2111, '\p{insamaritan}', "");
Expect(0, 2111, '\p{^insamaritan}', "");
Expect(0, 2111, '\P{insamaritan}', "");
Expect(1, 2111, '\P{^insamaritan}', "");
Expect(0, 2047, '\p{insamaritan}', "");
Expect(1, 2047, '\p{^insamaritan}', "");
Expect(1, 2047, '\P{insamaritan}', "");
Expect(0, 2047, '\P{^insamaritan}', "");
Expect(1, 2111, '\p{ 	In SAMARITAN}', "");
Expect(0, 2111, '\p{^ 	In SAMARITAN}', "");
Expect(0, 2111, '\P{ 	In SAMARITAN}', "");
Expect(1, 2111, '\P{^ 	In SAMARITAN}', "");
Expect(0, 2047, '\p{ 	In SAMARITAN}', "");
Expect(1, 2047, '\p{^ 	In SAMARITAN}', "");
Expect(1, 2047, '\P{ 	In SAMARITAN}', "");
Expect(0, 2047, '\P{^ 	In SAMARITAN}', "");
Error('\p{ GeneralPUNCTUATION:=}');
Error('\P{ GeneralPUNCTUATION:=}');
Expect(1, 8303, '\p{generalpunctuation}', "");
Expect(0, 8303, '\p{^generalpunctuation}', "");
Expect(0, 8303, '\P{generalpunctuation}', "");
Expect(1, 8303, '\P{^generalpunctuation}', "");
Expect(0, 8191, '\p{generalpunctuation}', "");
Expect(1, 8191, '\p{^generalpunctuation}', "");
Expect(1, 8191, '\P{generalpunctuation}', "");
Expect(0, 8191, '\P{^generalpunctuation}', "");
Expect(1, 8303, '\p{_GENERAL_Punctuation}', "");
Expect(0, 8303, '\p{^_GENERAL_Punctuation}', "");
Expect(0, 8303, '\P{_GENERAL_Punctuation}', "");
Expect(1, 8303, '\P{^_GENERAL_Punctuation}', "");
Expect(0, 8191, '\p{_GENERAL_Punctuation}', "");
Expect(1, 8191, '\p{^_GENERAL_Punctuation}', "");
Expect(1, 8191, '\P{_GENERAL_Punctuation}', "");
Expect(0, 8191, '\P{^_GENERAL_Punctuation}', "");
Error('\p{/a/ IS	General	PUNCTUATION}');
Error('\P{/a/ IS	General	PUNCTUATION}');
Expect(1, 8303, '\p{isgeneralpunctuation}', "");
Expect(0, 8303, '\p{^isgeneralpunctuation}', "");
Expect(0, 8303, '\P{isgeneralpunctuation}', "");
Expect(1, 8303, '\P{^isgeneralpunctuation}', "");
Expect(0, 8191, '\p{isgeneralpunctuation}', "");
Expect(1, 8191, '\p{^isgeneralpunctuation}', "");
Expect(1, 8191, '\P{isgeneralpunctuation}', "");
Expect(0, 8191, '\P{^isgeneralpunctuation}', "");
Expect(1, 8303, '\p{  Is	GeneralPUNCTUATION}', "");
Expect(0, 8303, '\p{^  Is	GeneralPUNCTUATION}', "");
Expect(0, 8303, '\P{  Is	GeneralPUNCTUATION}', "");
Expect(1, 8303, '\P{^  Is	GeneralPUNCTUATION}', "");
Expect(0, 8191, '\p{  Is	GeneralPUNCTUATION}', "");
Expect(1, 8191, '\p{^  Is	GeneralPUNCTUATION}', "");
Expect(1, 8191, '\P{  Is	GeneralPUNCTUATION}', "");
Expect(0, 8191, '\P{^  Is	GeneralPUNCTUATION}', "");
Error('\p{-	inGeneral PUNCTUATION:=}');
Error('\P{-	inGeneral PUNCTUATION:=}');
Expect(1, 8303, '\p{ingeneralpunctuation}', "");
Expect(0, 8303, '\p{^ingeneralpunctuation}', "");
Expect(0, 8303, '\P{ingeneralpunctuation}', "");
Expect(1, 8303, '\P{^ingeneralpunctuation}', "");
Expect(0, 8191, '\p{ingeneralpunctuation}', "");
Expect(1, 8191, '\p{^ingeneralpunctuation}', "");
Expect(1, 8191, '\P{ingeneralpunctuation}', "");
Expect(0, 8191, '\P{^ingeneralpunctuation}', "");
Expect(1, 8303, '\p{ 	INGENERAL	punctuation}', "");
Expect(0, 8303, '\p{^ 	INGENERAL	punctuation}', "");
Expect(0, 8303, '\P{ 	INGENERAL	punctuation}', "");
Expect(1, 8303, '\P{^ 	INGENERAL	punctuation}', "");
Expect(0, 8191, '\p{ 	INGENERAL	punctuation}', "");
Expect(1, 8191, '\p{^ 	INGENERAL	punctuation}', "");
Expect(1, 8191, '\P{ 	INGENERAL	punctuation}', "");
Expect(0, 8191, '\P{^ 	INGENERAL	punctuation}', "");
Error('\p{ In:=Georgian}');
Error('\P{ In:=Georgian}');
Expect(1, 4351, '\p{ingeorgian}', "");
Expect(0, 4351, '\p{^ingeorgian}', "");
Expect(0, 4351, '\P{ingeorgian}', "");
Expect(1, 4351, '\P{^ingeorgian}', "");
Expect(0, 4255, '\p{ingeorgian}', "");
Expect(1, 4255, '\p{^ingeorgian}', "");
Expect(1, 4255, '\P{ingeorgian}', "");
Expect(0, 4255, '\P{^ingeorgian}', "");
Expect(1, 4351, '\p{ -in	GEORGIAN}', "");
Expect(0, 4351, '\p{^ -in	GEORGIAN}', "");
Expect(0, 4351, '\P{ -in	GEORGIAN}', "");
Expect(1, 4351, '\P{^ -in	GEORGIAN}', "");
Expect(0, 4255, '\p{ -in	GEORGIAN}', "");
Expect(1, 4255, '\p{^ -in	GEORGIAN}', "");
Expect(1, 4255, '\P{ -in	GEORGIAN}', "");
Expect(0, 4255, '\P{^ -in	GEORGIAN}', "");
Error('\p{:= 	In Limbu}');
Error('\P{:= 	In Limbu}');
Expect(1, 6479, '\p{inlimbu}', "");
Expect(0, 6479, '\p{^inlimbu}', "");
Expect(0, 6479, '\P{inlimbu}', "");
Expect(1, 6479, '\P{^inlimbu}', "");
Expect(0, 6399, '\p{inlimbu}', "");
Expect(1, 6399, '\p{^inlimbu}', "");
Expect(1, 6399, '\P{inlimbu}', "");
Expect(0, 6399, '\P{^inlimbu}', "");
Expect(1, 6479, '\p{	-In	Limbu}', "");
Expect(0, 6479, '\p{^	-In	Limbu}', "");
Expect(0, 6479, '\P{	-In	Limbu}', "");
Expect(1, 6479, '\P{^	-In	Limbu}', "");
Expect(0, 6399, '\p{	-In	Limbu}', "");
Expect(1, 6399, '\p{^	-In	Limbu}', "");
Expect(1, 6399, '\P{	-In	Limbu}', "");
Expect(0, 6399, '\P{^	-In	Limbu}', "");
Error('\p{:=in-lydian}');
Error('\P{:=in-lydian}');
Expect(1, 67903, '\p{inlydian}', "");
Expect(0, 67903, '\p{^inlydian}', "");
Expect(0, 67903, '\P{inlydian}', "");
Expect(1, 67903, '\P{^inlydian}', "");
Expect(0, 67871, '\p{inlydian}', "");
Expect(1, 67871, '\p{^inlydian}', "");
Expect(1, 67871, '\P{inlydian}', "");
Expect(0, 67871, '\P{^inlydian}', "");
Expect(1, 67903, '\p{--IN-Lydian}', "");
Expect(0, 67903, '\p{^--IN-Lydian}', "");
Expect(0, 67903, '\P{--IN-Lydian}', "");
Expect(1, 67903, '\P{^--IN-Lydian}', "");
Expect(0, 67871, '\p{--IN-Lydian}', "");
Expect(1, 67871, '\p{^--IN-Lydian}', "");
Expect(1, 67871, '\P{--IN-Lydian}', "");
Expect(0, 67871, '\P{^--IN-Lydian}', "");
Error('\p{:=-	In-OLD_south-Arabian}');
Error('\P{:=-	In-OLD_south-Arabian}');
Expect(1, 68223, '\p{inoldsoutharabian}', "");
Expect(0, 68223, '\p{^inoldsoutharabian}', "");
Expect(0, 68223, '\P{inoldsoutharabian}', "");
Expect(1, 68223, '\P{^inoldsoutharabian}', "");
Expect(0, 68191, '\p{inoldsoutharabian}', "");
Expect(1, 68191, '\p{^inoldsoutharabian}', "");
Expect(1, 68191, '\P{inoldsoutharabian}', "");
Expect(0, 68191, '\P{^inoldsoutharabian}', "");
Expect(1, 68223, '\p{ InOLD	SouthARABIAN}', "");
Expect(0, 68223, '\p{^ InOLD	SouthARABIAN}', "");
Expect(0, 68223, '\P{ InOLD	SouthARABIAN}', "");
Expect(1, 68223, '\P{^ InOLD	SouthARABIAN}', "");
Expect(0, 68191, '\p{ InOLD	SouthARABIAN}', "");
Expect(1, 68191, '\p{^ InOLD	SouthARABIAN}', "");
Expect(1, 68191, '\P{ InOLD	SouthARABIAN}', "");
Expect(0, 68191, '\P{^ InOLD	SouthARABIAN}', "");
Error('\p{_:=InKharoshthi}');
Error('\P{_:=InKharoshthi}');
Expect(1, 68191, '\p{inkharoshthi}', "");
Expect(0, 68191, '\p{^inkharoshthi}', "");
Expect(0, 68191, '\P{inkharoshthi}', "");
Expect(1, 68191, '\P{^inkharoshthi}', "");
Expect(0, 68095, '\p{inkharoshthi}', "");
Expect(1, 68095, '\p{^inkharoshthi}', "");
Expect(1, 68095, '\P{inkharoshthi}', "");
Expect(0, 68095, '\P{^inkharoshthi}', "");
Expect(1, 68191, '\p{ 	In Kharoshthi}', "");
Expect(0, 68191, '\p{^ 	In Kharoshthi}', "");
Expect(0, 68191, '\P{ 	In Kharoshthi}', "");
Expect(1, 68191, '\P{^ 	In Kharoshthi}', "");
Expect(0, 68095, '\p{ 	In Kharoshthi}', "");
Expect(1, 68095, '\p{^ 	In Kharoshthi}', "");
Expect(1, 68095, '\P{ 	In Kharoshthi}', "");
Expect(0, 68095, '\P{^ 	In Kharoshthi}', "");
Error('\p{/a/In	bamum}');
Error('\P{/a/In	bamum}');
Expect(1, 42751, '\p{inbamum}', "");
Expect(0, 42751, '\p{^inbamum}', "");
Expect(0, 42751, '\P{inbamum}', "");
Expect(1, 42751, '\P{^inbamum}', "");
Expect(0, 42655, '\p{inbamum}', "");
Expect(1, 42655, '\p{^inbamum}', "");
Expect(1, 42655, '\P{inbamum}', "");
Expect(0, 42655, '\P{^inbamum}', "");
Expect(1, 42751, '\p{__InBAMUM}', "");
Expect(0, 42751, '\p{^__InBAMUM}', "");
Expect(0, 42751, '\P{__InBAMUM}', "");
Expect(1, 42751, '\P{^__InBAMUM}', "");
Expect(0, 42655, '\p{__InBAMUM}', "");
Expect(1, 42655, '\p{^__InBAMUM}', "");
Expect(1, 42655, '\P{__InBAMUM}', "");
Expect(0, 42655, '\P{^__InBAMUM}', "");
Error('\p{--CHANGES-when:=Casemapped}');
Error('\P{--CHANGES-when:=Casemapped}');
Expect(1, 90, '\p{changeswhencasemapped}', "");
Expect(0, 90, '\p{^changeswhencasemapped}', "");
Expect(0, 90, '\P{changeswhencasemapped}', "");
Expect(1, 90, '\P{^changeswhencasemapped}', "");
Expect(0, 64, '\p{changeswhencasemapped}', "");
Expect(1, 64, '\p{^changeswhencasemapped}', "");
Expect(1, 64, '\P{changeswhencasemapped}', "");
Expect(0, 64, '\P{^changeswhencasemapped}', "");
Expect(1, 90, '\p{-CHANGES when_Casemapped}', "");
Expect(0, 90, '\p{^-CHANGES when_Casemapped}', "");
Expect(0, 90, '\P{-CHANGES when_Casemapped}', "");
Expect(1, 90, '\P{^-CHANGES when_Casemapped}', "");
Expect(0, 64, '\p{-CHANGES when_Casemapped}', "");
Expect(1, 64, '\p{^-CHANGES when_Casemapped}', "");
Expect(1, 64, '\P{-CHANGES when_Casemapped}', "");
Expect(0, 64, '\P{^-CHANGES when_Casemapped}', "");
Error('\p{	 Is:=ChangesWhen_CASEMAPPED}');
Error('\P{	 Is:=ChangesWhen_CASEMAPPED}');
Expect(1, 90, '\p{ischangeswhencasemapped}', "");
Expect(0, 90, '\p{^ischangeswhencasemapped}', "");
Expect(0, 90, '\P{ischangeswhencasemapped}', "");
Expect(1, 90, '\P{^ischangeswhencasemapped}', "");
Expect(0, 64, '\p{ischangeswhencasemapped}', "");
Expect(1, 64, '\p{^ischangeswhencasemapped}', "");
Expect(1, 64, '\P{ischangeswhencasemapped}', "");
Expect(0, 64, '\P{^ischangeswhencasemapped}', "");
Expect(1, 90, '\p{	_is CHANGES_when	Casemapped}', "");
Expect(0, 90, '\p{^	_is CHANGES_when	Casemapped}', "");
Expect(0, 90, '\P{	_is CHANGES_when	Casemapped}', "");
Expect(1, 90, '\P{^	_is CHANGES_when	Casemapped}', "");
Expect(0, 64, '\p{	_is CHANGES_when	Casemapped}', "");
Expect(1, 64, '\p{^	_is CHANGES_when	Casemapped}', "");
Expect(1, 64, '\P{	_is CHANGES_when	Casemapped}', "");
Expect(0, 64, '\P{^	_is CHANGES_when	Casemapped}', "");
Error('\p{_-CWCM/a/}');
Error('\P{_-CWCM/a/}');
Expect(1, 90, '\p{cwcm}', "");
Expect(0, 90, '\p{^cwcm}', "");
Expect(0, 90, '\P{cwcm}', "");
Expect(1, 90, '\P{^cwcm}', "");
Expect(0, 64, '\p{cwcm}', "");
Expect(1, 64, '\p{^cwcm}', "");
Expect(1, 64, '\P{cwcm}', "");
Expect(0, 64, '\P{^cwcm}', "");
Expect(1, 90, '\p{- CWCM}', "");
Expect(0, 90, '\p{^- CWCM}', "");
Expect(0, 90, '\P{- CWCM}', "");
Expect(1, 90, '\P{^- CWCM}', "");
Expect(0, 64, '\p{- CWCM}', "");
Expect(1, 64, '\p{^- CWCM}', "");
Expect(1, 64, '\P{- CWCM}', "");
Expect(0, 64, '\P{^- CWCM}', "");
Error('\p{-is:=CWCM}');
Error('\P{-is:=CWCM}');
Expect(1, 90, '\p{iscwcm}', "");
Expect(0, 90, '\p{^iscwcm}', "");
Expect(0, 90, '\P{iscwcm}', "");
Expect(1, 90, '\P{^iscwcm}', "");
Expect(0, 64, '\p{iscwcm}', "");
Expect(1, 64, '\p{^iscwcm}', "");
Expect(1, 64, '\P{iscwcm}', "");
Expect(0, 64, '\P{^iscwcm}', "");
Expect(1, 90, '\p{ -IS-CWCM}', "");
Expect(0, 90, '\p{^ -IS-CWCM}', "");
Expect(0, 90, '\P{ -IS-CWCM}', "");
Expect(1, 90, '\P{^ -IS-CWCM}', "");
Expect(0, 64, '\p{ -IS-CWCM}', "");
Expect(1, 64, '\p{^ -IS-CWCM}', "");
Expect(1, 64, '\P{ -IS-CWCM}', "");
Expect(0, 64, '\P{^ -IS-CWCM}', "");
Error('\p{_	dash:=}');
Error('\P{_	dash:=}');
Expect(1, 45, '\p{dash}', "");
Expect(0, 45, '\p{^dash}', "");
Expect(0, 45, '\P{dash}', "");
Expect(1, 45, '\P{^dash}', "");
Expect(0, 44, '\p{dash}', "");
Expect(1, 44, '\p{^dash}', "");
Expect(1, 44, '\P{dash}', "");
Expect(0, 44, '\P{^dash}', "");
Expect(1, 45, '\p{ -Dash}', "");
Expect(0, 45, '\p{^ -Dash}', "");
Expect(0, 45, '\P{ -Dash}', "");
Expect(1, 45, '\P{^ -Dash}', "");
Expect(0, 44, '\p{ -Dash}', "");
Expect(1, 44, '\p{^ -Dash}', "");
Expect(1, 44, '\P{ -Dash}', "");
Expect(0, 44, '\P{^ -Dash}', "");
Error('\p{_/a/Is_dash}');
Error('\P{_/a/Is_dash}');
Expect(1, 45, '\p{isdash}', "");
Expect(0, 45, '\p{^isdash}', "");
Expect(0, 45, '\P{isdash}', "");
Expect(1, 45, '\P{^isdash}', "");
Expect(0, 44, '\p{isdash}', "");
Expect(1, 44, '\p{^isdash}', "");
Expect(1, 44, '\P{isdash}', "");
Expect(0, 44, '\P{^isdash}', "");
Expect(1, 45, '\p{	IS	Dash}', "");
Expect(0, 45, '\p{^	IS	Dash}', "");
Expect(0, 45, '\P{	IS	Dash}', "");
Expect(1, 45, '\P{^	IS	Dash}', "");
Expect(0, 44, '\p{	IS	Dash}', "");
Expect(1, 44, '\p{^	IS	Dash}', "");
Expect(1, 44, '\P{	IS	Dash}', "");
Expect(0, 44, '\P{^	IS	Dash}', "");
Error('\p{  COUNTING/a/ROD-numerals}');
Error('\P{  COUNTING/a/ROD-numerals}');
Expect(1, 119679, '\p{countingrodnumerals}', "");
Expect(0, 119679, '\p{^countingrodnumerals}', "");
Expect(0, 119679, '\P{countingrodnumerals}', "");
Expect(1, 119679, '\P{^countingrodnumerals}', "");
Expect(0, 119647, '\p{countingrodnumerals}', "");
Expect(1, 119647, '\p{^countingrodnumerals}', "");
Expect(1, 119647, '\P{countingrodnumerals}', "");
Expect(0, 119647, '\P{^countingrodnumerals}', "");
Expect(1, 119679, '\p{__countingRod-numerals}', "");
Expect(0, 119679, '\p{^__countingRod-numerals}', "");
Expect(0, 119679, '\P{__countingRod-numerals}', "");
Expect(1, 119679, '\P{^__countingRod-numerals}', "");
Expect(0, 119647, '\p{__countingRod-numerals}', "");
Expect(1, 119647, '\p{^__countingRod-numerals}', "");
Expect(1, 119647, '\P{__countingRod-numerals}', "");
Expect(0, 119647, '\P{^__countingRod-numerals}', "");
Error('\p{	/a/IS	Counting-ROD	Numerals}');
Error('\P{	/a/IS	Counting-ROD	Numerals}');
Expect(1, 119679, '\p{iscountingrodnumerals}', "");
Expect(0, 119679, '\p{^iscountingrodnumerals}', "");
Expect(0, 119679, '\P{iscountingrodnumerals}', "");
Expect(1, 119679, '\P{^iscountingrodnumerals}', "");
Expect(0, 119647, '\p{iscountingrodnumerals}', "");
Expect(1, 119647, '\p{^iscountingrodnumerals}', "");
Expect(1, 119647, '\P{iscountingrodnumerals}', "");
Expect(0, 119647, '\P{^iscountingrodnumerals}', "");
Expect(1, 119679, '\p{-is_Counting	Rod Numerals}', "");
Expect(0, 119679, '\p{^-is_Counting	Rod Numerals}', "");
Expect(0, 119679, '\P{-is_Counting	Rod Numerals}', "");
Expect(1, 119679, '\P{^-is_Counting	Rod Numerals}', "");
Expect(0, 119647, '\p{-is_Counting	Rod Numerals}', "");
Expect(1, 119647, '\p{^-is_Counting	Rod Numerals}', "");
Expect(1, 119647, '\P{-is_Counting	Rod Numerals}', "");
Expect(0, 119647, '\P{^-is_Counting	Rod Numerals}', "");
Error('\p{  in-Counting/a/Rod-Numerals}');
Error('\P{  in-Counting/a/Rod-Numerals}');
Expect(1, 119679, '\p{incountingrodnumerals}', "");
Expect(0, 119679, '\p{^incountingrodnumerals}', "");
Expect(0, 119679, '\P{incountingrodnumerals}', "");
Expect(1, 119679, '\P{^incountingrodnumerals}', "");
Expect(0, 119647, '\p{incountingrodnumerals}', "");
Expect(1, 119647, '\p{^incountingrodnumerals}', "");
Expect(1, 119647, '\P{incountingrodnumerals}', "");
Expect(0, 119647, '\P{^incountingrodnumerals}', "");
Expect(1, 119679, '\p{_-inCounting	RODNumerals}', "");
Expect(0, 119679, '\p{^_-inCounting	RODNumerals}', "");
Expect(0, 119679, '\P{_-inCounting	RODNumerals}', "");
Expect(1, 119679, '\P{^_-inCounting	RODNumerals}', "");
Expect(0, 119647, '\p{_-inCounting	RODNumerals}', "");
Expect(1, 119647, '\p{^_-inCounting	RODNumerals}', "");
Expect(1, 119647, '\P{_-inCounting	RODNumerals}', "");
Expect(0, 119647, '\P{^_-inCounting	RODNumerals}', "");
Error('\p{	-ENCLOSED:=alphanumeric	SUPPLEMENT}');
Error('\P{	-ENCLOSED:=alphanumeric	SUPPLEMENT}');
Expect(1, 127487, '\p{enclosedalphanumericsupplement}', "");
Expect(0, 127487, '\p{^enclosedalphanumericsupplement}', "");
Expect(0, 127487, '\P{enclosedalphanumericsupplement}', "");
Expect(1, 127487, '\P{^enclosedalphanumericsupplement}', "");
Expect(0, 127231, '\p{enclosedalphanumericsupplement}', "");
Expect(1, 127231, '\p{^enclosedalphanumericsupplement}', "");
Expect(1, 127231, '\P{enclosedalphanumericsupplement}', "");
Expect(0, 127231, '\P{^enclosedalphanumericsupplement}', "");
Expect(1, 127487, '\p{_Enclosedalphanumeric Supplement}', "");
Expect(0, 127487, '\p{^_Enclosedalphanumeric Supplement}', "");
Expect(0, 127487, '\P{_Enclosedalphanumeric Supplement}', "");
Expect(1, 127487, '\P{^_Enclosedalphanumeric Supplement}', "");
Expect(0, 127231, '\p{_Enclosedalphanumeric Supplement}', "");
Expect(1, 127231, '\p{^_Enclosedalphanumeric Supplement}', "");
Expect(1, 127231, '\P{_Enclosedalphanumeric Supplement}', "");
Expect(0, 127231, '\P{^_Enclosedalphanumeric Supplement}', "");
Error('\p{:=is-Enclosed alphanumeric_Supplement}');
Error('\P{:=is-Enclosed alphanumeric_Supplement}');
Expect(1, 127487, '\p{isenclosedalphanumericsupplement}', "");
Expect(0, 127487, '\p{^isenclosedalphanumericsupplement}', "");
Expect(0, 127487, '\P{isenclosedalphanumericsupplement}', "");
Expect(1, 127487, '\P{^isenclosedalphanumericsupplement}', "");
Expect(0, 127231, '\p{isenclosedalphanumericsupplement}', "");
Expect(1, 127231, '\p{^isenclosedalphanumericsupplement}', "");
Expect(1, 127231, '\P{isenclosedalphanumericsupplement}', "");
Expect(0, 127231, '\P{^isenclosedalphanumericsupplement}', "");
Expect(1, 127487, '\p{- IS_ENCLOSEDalphanumeric-Supplement}', "");
Expect(0, 127487, '\p{^- IS_ENCLOSEDalphanumeric-Supplement}', "");
Expect(0, 127487, '\P{- IS_ENCLOSEDalphanumeric-Supplement}', "");
Expect(1, 127487, '\P{^- IS_ENCLOSEDalphanumeric-Supplement}', "");
Expect(0, 127231, '\p{- IS_ENCLOSEDalphanumeric-Supplement}', "");
Expect(1, 127231, '\p{^- IS_ENCLOSEDalphanumeric-Supplement}', "");
Expect(1, 127231, '\P{- IS_ENCLOSEDalphanumeric-Supplement}', "");
Expect(0, 127231, '\P{^- IS_ENCLOSEDalphanumeric-Supplement}', "");
Error('\p{_ In	enclosed/a/alphanumeric-Supplement}');
Error('\P{_ In	enclosed/a/alphanumeric-Supplement}');
Expect(1, 127487, '\p{inenclosedalphanumericsupplement}', "");
Expect(0, 127487, '\p{^inenclosedalphanumericsupplement}', "");
Expect(0, 127487, '\P{inenclosedalphanumericsupplement}', "");
Expect(1, 127487, '\P{^inenclosedalphanumericsupplement}', "");
Expect(0, 127231, '\p{inenclosedalphanumericsupplement}', "");
Expect(1, 127231, '\p{^inenclosedalphanumericsupplement}', "");
Expect(1, 127231, '\P{inenclosedalphanumericsupplement}', "");
Expect(0, 127231, '\P{^inenclosedalphanumericsupplement}', "");
Expect(1, 127487, '\p{	 InEnclosed_ALPHANUMERIC-Supplement}', "");
Expect(0, 127487, '\p{^	 InEnclosed_ALPHANUMERIC-Supplement}', "");
Expect(0, 127487, '\P{	 InEnclosed_ALPHANUMERIC-Supplement}', "");
Expect(1, 127487, '\P{^	 InEnclosed_ALPHANUMERIC-Supplement}', "");
Expect(0, 127231, '\p{	 InEnclosed_ALPHANUMERIC-Supplement}', "");
Expect(1, 127231, '\p{^	 InEnclosed_ALPHANUMERIC-Supplement}', "");
Expect(1, 127231, '\P{	 InEnclosed_ALPHANUMERIC-Supplement}', "");
Expect(0, 127231, '\P{^	 InEnclosed_ALPHANUMERIC-Supplement}', "");
Error('\p{ In Tamil:=}');
Error('\P{ In Tamil:=}');
Expect(1, 3071, '\p{intamil}', "");
Expect(0, 3071, '\p{^intamil}', "");
Expect(0, 3071, '\P{intamil}', "");
Expect(1, 3071, '\P{^intamil}', "");
Expect(0, 2943, '\p{intamil}', "");
Expect(1, 2943, '\p{^intamil}', "");
Expect(1, 2943, '\P{intamil}', "");
Expect(0, 2943, '\P{^intamil}', "");
Expect(1, 3071, '\p{-In	TAMIL}', "");
Expect(0, 3071, '\p{^-In	TAMIL}', "");
Expect(0, 3071, '\P{-In	TAMIL}', "");
Expect(1, 3071, '\P{^-In	TAMIL}', "");
Expect(0, 2943, '\p{-In	TAMIL}', "");
Expect(1, 2943, '\p{^-In	TAMIL}', "");
Expect(1, 2943, '\P{-In	TAMIL}', "");
Expect(0, 2943, '\P{^-In	TAMIL}', "");
Error('\p{_:=InETHIOPIC}');
Error('\P{_:=InETHIOPIC}');
Expect(1, 4991, '\p{inethiopic}', "");
Expect(0, 4991, '\p{^inethiopic}', "");
Expect(0, 4991, '\P{inethiopic}', "");
Expect(1, 4991, '\P{^inethiopic}', "");
Expect(0, 4607, '\p{inethiopic}', "");
Expect(1, 4607, '\p{^inethiopic}', "");
Expect(1, 4607, '\P{inethiopic}', "");
Expect(0, 4607, '\P{^inethiopic}', "");
Expect(1, 4991, '\p{_-In-ethiopic}', "");
Expect(0, 4991, '\p{^_-In-ethiopic}', "");
Expect(0, 4991, '\P{_-In-ethiopic}', "");
Expect(1, 4991, '\P{^_-In-ethiopic}', "");
Expect(0, 4607, '\p{_-In-ethiopic}', "");
Expect(1, 4607, '\p{^_-In-ethiopic}', "");
Expect(1, 4607, '\P{_-In-ethiopic}', "");
Expect(0, 4607, '\P{^_-In-ethiopic}', "");
Error('\p{-Intai:=Le}');
Error('\P{-Intai:=Le}');
Expect(1, 6527, '\p{intaile}', "");
Expect(0, 6527, '\p{^intaile}', "");
Expect(0, 6527, '\P{intaile}', "");
Expect(1, 6527, '\P{^intaile}', "");
Expect(0, 6479, '\p{intaile}', "");
Expect(1, 6479, '\p{^intaile}', "");
Expect(1, 6479, '\P{intaile}', "");
Expect(0, 6479, '\P{^intaile}', "");
Expect(1, 6527, '\p{ In	TAI	le}', "");
Expect(0, 6527, '\p{^ In	TAI	le}', "");
Expect(0, 6527, '\P{ In	TAI	le}', "");
Expect(1, 6527, '\P{^ In	TAI	le}', "");
Expect(0, 6479, '\p{ In	TAI	le}', "");
Expect(1, 6479, '\p{^ In	TAI	le}', "");
Expect(1, 6479, '\P{ In	TAI	le}', "");
Expect(0, 6479, '\P{^ In	TAI	le}', "");
Error('\p{ KANGXIRadicals:=}');
Error('\P{ KANGXIRadicals:=}');
Expect(1, 12255, '\p{kangxiradicals}', "");
Expect(0, 12255, '\p{^kangxiradicals}', "");
Expect(0, 12255, '\P{kangxiradicals}', "");
Expect(1, 12255, '\P{^kangxiradicals}', "");
Expect(0, 12031, '\p{kangxiradicals}', "");
Expect(1, 12031, '\p{^kangxiradicals}', "");
Expect(1, 12031, '\P{kangxiradicals}', "");
Expect(0, 12031, '\P{^kangxiradicals}', "");
Expect(1, 12255, '\p{-	KANGXI_Radicals}', "");
Expect(0, 12255, '\p{^-	KANGXI_Radicals}', "");
Expect(0, 12255, '\P{-	KANGXI_Radicals}', "");
Expect(1, 12255, '\P{^-	KANGXI_Radicals}', "");
Expect(0, 12031, '\p{-	KANGXI_Radicals}', "");
Expect(1, 12031, '\p{^-	KANGXI_Radicals}', "");
Expect(1, 12031, '\P{-	KANGXI_Radicals}', "");
Expect(0, 12031, '\P{^-	KANGXI_Radicals}', "");
Error('\p{	-IS/a/KANGXI-RADICALS}');
Error('\P{	-IS/a/KANGXI-RADICALS}');
Expect(1, 12255, '\p{iskangxiradicals}', "");
Expect(0, 12255, '\p{^iskangxiradicals}', "");
Expect(0, 12255, '\P{iskangxiradicals}', "");
Expect(1, 12255, '\P{^iskangxiradicals}', "");
Expect(0, 12031, '\p{iskangxiradicals}', "");
Expect(1, 12031, '\p{^iskangxiradicals}', "");
Expect(1, 12031, '\P{iskangxiradicals}', "");
Expect(0, 12031, '\P{^iskangxiradicals}', "");
Expect(1, 12255, '\p{_Is-Kangxi_radicals}', "");
Expect(0, 12255, '\p{^_Is-Kangxi_radicals}', "");
Expect(0, 12255, '\P{_Is-Kangxi_radicals}', "");
Expect(1, 12255, '\P{^_Is-Kangxi_radicals}', "");
Expect(0, 12031, '\p{_Is-Kangxi_radicals}', "");
Expect(1, 12031, '\p{^_Is-Kangxi_radicals}', "");
Expect(1, 12031, '\P{_Is-Kangxi_radicals}', "");
Expect(0, 12031, '\P{^_Is-Kangxi_radicals}', "");
Error('\p{/a/__In_Kangxi_radicals}');
Error('\P{/a/__In_Kangxi_radicals}');
Expect(1, 12255, '\p{inkangxiradicals}', "");
Expect(0, 12255, '\p{^inkangxiradicals}', "");
Expect(0, 12255, '\P{inkangxiradicals}', "");
Expect(1, 12255, '\P{^inkangxiradicals}', "");
Expect(0, 12031, '\p{inkangxiradicals}', "");
Expect(1, 12031, '\p{^inkangxiradicals}', "");
Expect(1, 12031, '\P{inkangxiradicals}', "");
Expect(0, 12031, '\P{^inkangxiradicals}', "");
Expect(1, 12255, '\p{	_in-Kangxi_RADICALS}', "");
Expect(0, 12255, '\p{^	_in-Kangxi_RADICALS}', "");
Expect(0, 12255, '\P{	_in-Kangxi_RADICALS}', "");
Expect(1, 12255, '\P{^	_in-Kangxi_RADICALS}', "");
Expect(0, 12031, '\p{	_in-Kangxi_RADICALS}', "");
Expect(1, 12031, '\p{^	_in-Kangxi_RADICALS}', "");
Expect(1, 12031, '\P{	_in-Kangxi_RADICALS}', "");
Expect(0, 12031, '\P{^	_in-Kangxi_RADICALS}', "");
Error('\p{IN/a/Hebrew}');
Error('\P{IN/a/Hebrew}');
Expect(1, 1535, '\p{inhebrew}', "");
Expect(0, 1535, '\p{^inhebrew}', "");
Expect(0, 1535, '\P{inhebrew}', "");
Expect(1, 1535, '\P{^inhebrew}', "");
Expect(0, 1423, '\p{inhebrew}', "");
Expect(1, 1423, '\p{^inhebrew}', "");
Expect(1, 1423, '\P{inhebrew}', "");
Expect(0, 1423, '\P{^inhebrew}', "");
Expect(1, 1535, '\p{  In	hebrew}', "");
Expect(0, 1535, '\p{^  In	hebrew}', "");
Expect(0, 1535, '\P{  In	hebrew}', "");
Expect(1, 1535, '\P{^  In	hebrew}', "");
Expect(0, 1423, '\p{  In	hebrew}', "");
Expect(1, 1423, '\p{^  In	hebrew}', "");
Expect(1, 1423, '\P{  In	hebrew}', "");
Expect(0, 1423, '\P{^  In	hebrew}', "");
Error('\p{:=_	IN_inscriptional-PARTHIAN}');
Error('\P{:=_	IN_inscriptional-PARTHIAN}');
Expect(1, 68447, '\p{ininscriptionalparthian}', "");
Expect(0, 68447, '\p{^ininscriptionalparthian}', "");
Expect(0, 68447, '\P{ininscriptionalparthian}', "");
Expect(1, 68447, '\P{^ininscriptionalparthian}', "");
Expect(0, 68415, '\p{ininscriptionalparthian}', "");
Expect(1, 68415, '\p{^ininscriptionalparthian}', "");
Expect(1, 68415, '\P{ininscriptionalparthian}', "");
Expect(0, 68415, '\P{^ininscriptionalparthian}', "");
Expect(1, 68447, '\p{__inInscriptional_parthian}', "");
Expect(0, 68447, '\p{^__inInscriptional_parthian}', "");
Expect(0, 68447, '\P{__inInscriptional_parthian}', "");
Expect(1, 68447, '\P{^__inInscriptional_parthian}', "");
Expect(0, 68415, '\p{__inInscriptional_parthian}', "");
Expect(1, 68415, '\p{^__inInscriptional_parthian}', "");
Expect(1, 68415, '\P{__inInscriptional_parthian}', "");
Expect(0, 68415, '\P{^__inInscriptional_parthian}', "");
Error('\p{-/a/in	new TAI Lue}');
Error('\P{-/a/in	new TAI Lue}');
Expect(1, 6623, '\p{innewtailue}', "");
Expect(0, 6623, '\p{^innewtailue}', "");
Expect(0, 6623, '\P{innewtailue}', "");
Expect(1, 6623, '\P{^innewtailue}', "");
Expect(0, 6527, '\p{innewtailue}', "");
Expect(1, 6527, '\p{^innewtailue}', "");
Expect(1, 6527, '\P{innewtailue}', "");
Expect(0, 6527, '\P{^innewtailue}', "");
Expect(1, 6623, '\p{ _In-NewTAILue}', "");
Expect(0, 6623, '\p{^ _In-NewTAILue}', "");
Expect(0, 6623, '\P{ _In-NewTAILue}', "");
Expect(1, 6623, '\P{^ _In-NewTAILue}', "");
Expect(0, 6527, '\p{ _In-NewTAILue}', "");
Expect(1, 6527, '\p{^ _In-NewTAILue}', "");
Expect(1, 6527, '\P{ _In-NewTAILue}', "");
Expect(0, 6527, '\P{^ _In-NewTAILue}', "");
Error('\p{_	INImperial:=aramaic}');
Error('\P{_	INImperial:=aramaic}');
Expect(1, 67679, '\p{inimperialaramaic}', "");
Expect(0, 67679, '\p{^inimperialaramaic}', "");
Expect(0, 67679, '\P{inimperialaramaic}', "");
Expect(1, 67679, '\P{^inimperialaramaic}', "");
Expect(0, 67647, '\p{inimperialaramaic}', "");
Expect(1, 67647, '\p{^inimperialaramaic}', "");
Expect(1, 67647, '\P{inimperialaramaic}', "");
Expect(0, 67647, '\P{^inimperialaramaic}', "");
Expect(1, 67679, '\p{  IN	Imperial-aramaic}', "");
Expect(0, 67679, '\p{^  IN	Imperial-aramaic}', "");
Expect(0, 67679, '\P{  IN	Imperial-aramaic}', "");
Expect(1, 67679, '\P{^  IN	Imperial-aramaic}', "");
Expect(0, 67647, '\p{  IN	Imperial-aramaic}', "");
Expect(1, 67647, '\p{^  IN	Imperial-aramaic}', "");
Expect(1, 67647, '\P{  IN	Imperial-aramaic}', "");
Expect(0, 67647, '\P{^  IN	Imperial-aramaic}', "");
Error('\p{:= CJKCompatibilityFORMS}');
Error('\P{:= CJKCompatibilityFORMS}');
Expect(1, 65103, '\p{cjkcompatibilityforms}', "");
Expect(0, 65103, '\p{^cjkcompatibilityforms}', "");
Expect(0, 65103, '\P{cjkcompatibilityforms}', "");
Expect(1, 65103, '\P{^cjkcompatibilityforms}', "");
Expect(0, 65071, '\p{cjkcompatibilityforms}', "");
Expect(1, 65071, '\p{^cjkcompatibilityforms}', "");
Expect(1, 65071, '\P{cjkcompatibilityforms}', "");
Expect(0, 65071, '\P{^cjkcompatibilityforms}', "");
Expect(1, 65103, '\p{- cjk	COMPATIBILITY forms}', "");
Expect(0, 65103, '\p{^- cjk	COMPATIBILITY forms}', "");
Expect(0, 65103, '\P{- cjk	COMPATIBILITY forms}', "");
Expect(1, 65103, '\P{^- cjk	COMPATIBILITY forms}', "");
Expect(0, 65071, '\p{- cjk	COMPATIBILITY forms}', "");
Expect(1, 65071, '\p{^- cjk	COMPATIBILITY forms}', "");
Expect(1, 65071, '\P{- cjk	COMPATIBILITY forms}', "");
Expect(0, 65071, '\P{^- cjk	COMPATIBILITY forms}', "");
Error('\p{_/a/isCJKCompatibility	Forms}');
Error('\P{_/a/isCJKCompatibility	Forms}');
Expect(1, 65103, '\p{iscjkcompatibilityforms}', "");
Expect(0, 65103, '\p{^iscjkcompatibilityforms}', "");
Expect(0, 65103, '\P{iscjkcompatibilityforms}', "");
Expect(1, 65103, '\P{^iscjkcompatibilityforms}', "");
Expect(0, 65071, '\p{iscjkcompatibilityforms}', "");
Expect(1, 65071, '\p{^iscjkcompatibilityforms}', "");
Expect(1, 65071, '\P{iscjkcompatibilityforms}', "");
Expect(0, 65071, '\P{^iscjkcompatibilityforms}', "");
Expect(1, 65103, '\p{- is CJKCompatibility-Forms}', "");
Expect(0, 65103, '\p{^- is CJKCompatibility-Forms}', "");
Expect(0, 65103, '\P{- is CJKCompatibility-Forms}', "");
Expect(1, 65103, '\P{^- is CJKCompatibility-Forms}', "");
Expect(0, 65071, '\p{- is CJKCompatibility-Forms}', "");
Expect(1, 65071, '\p{^- is CJKCompatibility-Forms}', "");
Expect(1, 65071, '\P{- is CJKCompatibility-Forms}', "");
Expect(0, 65071, '\P{^- is CJKCompatibility-Forms}', "");
Error('\p{-_IN-cjk:=compatibility FORMS}');
Error('\P{-_IN-cjk:=compatibility FORMS}');
Expect(1, 65103, '\p{incjkcompatibilityforms}', "");
Expect(0, 65103, '\p{^incjkcompatibilityforms}', "");
Expect(0, 65103, '\P{incjkcompatibilityforms}', "");
Expect(1, 65103, '\P{^incjkcompatibilityforms}', "");
Expect(0, 65071, '\p{incjkcompatibilityforms}', "");
Expect(1, 65071, '\p{^incjkcompatibilityforms}', "");
Expect(1, 65071, '\P{incjkcompatibilityforms}', "");
Expect(0, 65071, '\P{^incjkcompatibilityforms}', "");
Expect(1, 65103, '\p{	In-CJK Compatibility Forms}', "");
Expect(0, 65103, '\p{^	In-CJK Compatibility Forms}', "");
Expect(0, 65103, '\P{	In-CJK Compatibility Forms}', "");
Expect(1, 65103, '\P{^	In-CJK Compatibility Forms}', "");
Expect(0, 65071, '\p{	In-CJK Compatibility Forms}', "");
Expect(1, 65071, '\p{^	In-CJK Compatibility Forms}', "");
Expect(1, 65071, '\P{	In-CJK Compatibility Forms}', "");
Expect(0, 65071, '\P{^	In-CJK Compatibility Forms}', "");
Error('\p{/a/In_SAURASHTRA}');
Error('\P{/a/In_SAURASHTRA}');
Expect(1, 43231, '\p{insaurashtra}', "");
Expect(0, 43231, '\p{^insaurashtra}', "");
Expect(0, 43231, '\P{insaurashtra}', "");
Expect(1, 43231, '\P{^insaurashtra}', "");
Expect(0, 43135, '\p{insaurashtra}', "");
Expect(1, 43135, '\p{^insaurashtra}', "");
Expect(1, 43135, '\P{insaurashtra}', "");
Expect(0, 43135, '\P{^insaurashtra}', "");
Expect(1, 43231, '\p{-In_saurashtra}', "");
Expect(0, 43231, '\p{^-In_saurashtra}', "");
Expect(0, 43231, '\P{-In_saurashtra}', "");
Expect(1, 43231, '\P{^-In_saurashtra}', "");
Expect(0, 43135, '\p{-In_saurashtra}', "");
Expect(1, 43135, '\p{^-In_saurashtra}', "");
Expect(1, 43135, '\P{-In_saurashtra}', "");
Expect(0, 43135, '\P{^-In_saurashtra}', "");
Error('\p{/a/ -IN gujarati}');
Error('\P{/a/ -IN gujarati}');
Expect(1, 2815, '\p{ingujarati}', "");
Expect(0, 2815, '\p{^ingujarati}', "");
Expect(0, 2815, '\P{ingujarati}', "");
Expect(1, 2815, '\P{^ingujarati}', "");
Expect(0, 2687, '\p{ingujarati}', "");
Expect(1, 2687, '\p{^ingujarati}', "");
Expect(1, 2687, '\P{ingujarati}', "");
Expect(0, 2687, '\P{^ingujarati}', "");
Expect(1, 2815, '\p{--inGujarati}', "");
Expect(0, 2815, '\p{^--inGujarati}', "");
Expect(0, 2815, '\P{--inGujarati}', "");
Expect(1, 2815, '\P{^--inGujarati}', "");
Expect(0, 2687, '\p{--inGujarati}', "");
Expect(1, 2687, '\p{^--inGujarati}', "");
Expect(1, 2687, '\P{--inGujarati}', "");
Expect(0, 2687, '\P{^--inGujarati}', "");
Error('\p{	/a/In	Osmanya}');
Error('\P{	/a/In	Osmanya}');
Expect(1, 66735, '\p{inosmanya}', "");
Expect(0, 66735, '\p{^inosmanya}', "");
Expect(0, 66735, '\P{inosmanya}', "");
Expect(1, 66735, '\P{^inosmanya}', "");
Expect(0, 66687, '\p{inosmanya}', "");
Expect(1, 66687, '\p{^inosmanya}', "");
Expect(1, 66687, '\P{inosmanya}', "");
Expect(0, 66687, '\P{^inosmanya}', "");
Expect(1, 66735, '\p{_	In_OSMANYA}', "");
Expect(0, 66735, '\p{^_	In_OSMANYA}', "");
Expect(0, 66735, '\P{_	In_OSMANYA}', "");
Expect(1, 66735, '\P{^_	In_OSMANYA}', "");
Expect(0, 66687, '\p{_	In_OSMANYA}', "");
Expect(1, 66687, '\p{^_	In_OSMANYA}', "");
Expect(1, 66687, '\P{_	In_OSMANYA}', "");
Expect(0, 66687, '\P{^_	In_OSMANYA}', "");
Error('\p{/a/_	inTifinagh}');
Error('\P{/a/_	inTifinagh}');
Expect(1, 11647, '\p{intifinagh}', "");
Expect(0, 11647, '\p{^intifinagh}', "");
Expect(0, 11647, '\P{intifinagh}', "");
Expect(1, 11647, '\P{^intifinagh}', "");
Expect(0, 11567, '\p{intifinagh}', "");
Expect(1, 11567, '\p{^intifinagh}', "");
Expect(1, 11567, '\P{intifinagh}', "");
Expect(0, 11567, '\P{^intifinagh}', "");
Expect(1, 11647, '\p{_	In tifinagh}', "");
Expect(0, 11647, '\p{^_	In tifinagh}', "");
Expect(0, 11647, '\P{_	In tifinagh}', "");
Expect(1, 11647, '\P{^_	In tifinagh}', "");
Expect(0, 11567, '\p{_	In tifinagh}', "");
Expect(1, 11567, '\p{^_	In tifinagh}', "");
Expect(1, 11567, '\P{_	In tifinagh}', "");
Expect(0, 11567, '\P{^_	In tifinagh}', "");
Error('\p{	PosixPrint:=}');
Error('\P{	PosixPrint:=}');
Expect(1, 126, '\p{posixprint}', "");
Expect(0, 126, '\p{^posixprint}', "");
Expect(0, 126, '\P{posixprint}', "");
Expect(1, 126, '\P{^posixprint}', "");
Expect(0, 31, '\p{posixprint}', "");
Expect(1, 31, '\p{^posixprint}', "");
Expect(1, 31, '\P{posixprint}', "");
Expect(0, 31, '\P{^posixprint}', "");
Expect(1, 126, '\p{		PosixPrint}', "");
Expect(0, 126, '\p{^		PosixPrint}', "");
Expect(0, 126, '\P{		PosixPrint}', "");
Expect(1, 126, '\P{^		PosixPrint}', "");
Expect(0, 31, '\p{		PosixPrint}', "");
Expect(1, 31, '\p{^		PosixPrint}', "");
Expect(1, 31, '\P{		PosixPrint}', "");
Expect(0, 31, '\P{^		PosixPrint}', "");
Error('\p{ _is	PosixPrint:=}');
Error('\P{ _is	PosixPrint:=}');
Expect(1, 126, '\p{isposixprint}', "");
Expect(0, 126, '\p{^isposixprint}', "");
Expect(0, 126, '\P{isposixprint}', "");
Expect(1, 126, '\P{^isposixprint}', "");
Expect(0, 31, '\p{isposixprint}', "");
Expect(1, 31, '\p{^isposixprint}', "");
Expect(1, 31, '\P{isposixprint}', "");
Expect(0, 31, '\P{^isposixprint}', "");
Expect(1, 126, '\p{-Is PosixPrint}', "");
Expect(0, 126, '\p{^-Is PosixPrint}', "");
Expect(0, 126, '\P{-Is PosixPrint}', "");
Expect(1, 126, '\P{^-Is PosixPrint}', "");
Expect(0, 31, '\p{-Is PosixPrint}', "");
Expect(1, 31, '\p{^-Is PosixPrint}', "");
Expect(1, 31, '\P{-Is PosixPrint}', "");
Expect(0, 31, '\P{^-Is PosixPrint}', "");
Error('\p{__IN Hanunoo/a/}');
Error('\P{__IN Hanunoo/a/}');
Expect(1, 5951, '\p{inhanunoo}', "");
Expect(0, 5951, '\p{^inhanunoo}', "");
Expect(0, 5951, '\P{inhanunoo}', "");
Expect(1, 5951, '\P{^inhanunoo}', "");
Expect(0, 5919, '\p{inhanunoo}', "");
Expect(1, 5919, '\p{^inhanunoo}', "");
Expect(1, 5919, '\P{inhanunoo}', "");
Expect(0, 5919, '\P{^inhanunoo}', "");
Expect(1, 5951, '\p{-in	HANUNOO}', "");
Expect(0, 5951, '\p{^-in	HANUNOO}', "");
Expect(0, 5951, '\P{-in	HANUNOO}', "");
Expect(1, 5951, '\P{^-in	HANUNOO}', "");
Expect(0, 5919, '\p{-in	HANUNOO}', "");
Expect(1, 5919, '\p{^-in	HANUNOO}', "");
Expect(1, 5919, '\P{-in	HANUNOO}', "");
Expect(0, 5919, '\P{^-in	HANUNOO}', "");
Error('\p{-In CYRILLIC/a/}');
Error('\P{-In CYRILLIC/a/}');
Expect(1, 1279, '\p{incyrillic}', "");
Expect(0, 1279, '\p{^incyrillic}', "");
Expect(0, 1279, '\P{incyrillic}', "");
Expect(1, 1279, '\P{^incyrillic}', "");
Expect(0, 1023, '\p{incyrillic}', "");
Expect(1, 1023, '\p{^incyrillic}', "");
Expect(1, 1023, '\P{incyrillic}', "");
Expect(0, 1023, '\P{^incyrillic}', "");
Expect(1, 1279, '\p{In-cyrillic}', "");
Expect(0, 1279, '\p{^In-cyrillic}', "");
Expect(0, 1279, '\P{In-cyrillic}', "");
Expect(1, 1279, '\P{^In-cyrillic}', "");
Expect(0, 1023, '\p{In-cyrillic}', "");
Expect(1, 1023, '\p{^In-cyrillic}', "");
Expect(1, 1023, '\P{In-cyrillic}', "");
Expect(0, 1023, '\P{^In-cyrillic}', "");
Error('\p{-_in	buhid:=}');
Error('\P{-_in	buhid:=}');
Expect(1, 5983, '\p{inbuhid}', "");
Expect(0, 5983, '\p{^inbuhid}', "");
Expect(0, 5983, '\P{inbuhid}', "");
Expect(1, 5983, '\P{^inbuhid}', "");
Expect(0, 5951, '\p{inbuhid}', "");
Expect(1, 5951, '\p{^inbuhid}', "");
Expect(1, 5951, '\P{inbuhid}', "");
Expect(0, 5951, '\P{^inbuhid}', "");
Expect(1, 5983, '\p{ in-Buhid}', "");
Expect(0, 5983, '\p{^ in-Buhid}', "");
Expect(0, 5983, '\P{ in-Buhid}', "");
Expect(1, 5983, '\P{^ in-Buhid}', "");
Expect(0, 5951, '\p{ in-Buhid}', "");
Expect(1, 5951, '\p{^ in-Buhid}', "");
Expect(1, 5951, '\P{ in-Buhid}', "");
Expect(0, 5951, '\P{^ in-Buhid}', "");
Error('\p{	In-RUNIC/a/}');
Error('\P{	In-RUNIC/a/}');
Expect(1, 5887, '\p{inrunic}', "");
Expect(0, 5887, '\p{^inrunic}', "");
Expect(0, 5887, '\P{inrunic}', "");
Expect(1, 5887, '\P{^inrunic}', "");
Expect(0, 5791, '\p{inrunic}', "");
Expect(1, 5791, '\p{^inrunic}', "");
Expect(1, 5791, '\P{inrunic}', "");
Expect(0, 5791, '\P{^inrunic}', "");
Expect(1, 5887, '\p{_-inRUNIC}', "");
Expect(0, 5887, '\p{^_-inRUNIC}', "");
Expect(0, 5887, '\P{_-inRUNIC}', "");
Expect(1, 5887, '\P{^_-inRUNIC}', "");
Expect(0, 5791, '\p{_-inRUNIC}', "");
Expect(1, 5791, '\p{^_-inRUNIC}', "");
Expect(1, 5791, '\P{_-inRUNIC}', "");
Expect(0, 5791, '\P{^_-inRUNIC}', "");
Error('\p{IDS_Binary_Operator: YES:=}');
Error('\P{IDS_Binary_Operator: YES:=}');
Expect(1, 12273, '\p{IDS_Binary_Operator:	yes}', "");
Expect(0, 12273, '\p{^IDS_Binary_Operator:	yes}', "");
Expect(0, 12273, '\P{IDS_Binary_Operator:	yes}', "");
Expect(1, 12273, '\P{^IDS_Binary_Operator:	yes}', "");
Expect(0, 12271, '\p{IDS_Binary_Operator:	yes}', "");
Expect(1, 12271, '\p{^IDS_Binary_Operator:	yes}', "");
Expect(1, 12271, '\P{IDS_Binary_Operator:	yes}', "");
Expect(0, 12271, '\P{^IDS_Binary_Operator:	yes}', "");
Expect(1, 12273, '\p{IDS_Binary_Operator=-_YES}', "");
Expect(0, 12273, '\p{^IDS_Binary_Operator=-_YES}', "");
Expect(0, 12273, '\P{IDS_Binary_Operator=-_YES}', "");
Expect(1, 12273, '\P{^IDS_Binary_Operator=-_YES}', "");
Expect(0, 12271, '\p{IDS_Binary_Operator=-_YES}', "");
Expect(1, 12271, '\p{^IDS_Binary_Operator=-_YES}', "");
Expect(1, 12271, '\P{IDS_Binary_Operator=-_YES}', "");
Expect(0, 12271, '\P{^IDS_Binary_Operator=-_YES}', "");
Error('\p{IDSB=/a/--Y}');
Error('\P{IDSB=/a/--Y}');
Expect(1, 12273, '\p{IDSB=y}', "");
Expect(0, 12273, '\p{^IDSB=y}', "");
Expect(0, 12273, '\P{IDSB=y}', "");
Expect(1, 12273, '\P{^IDSB=y}', "");
Expect(0, 12271, '\p{IDSB=y}', "");
Expect(1, 12271, '\p{^IDSB=y}', "");
Expect(1, 12271, '\P{IDSB=y}', "");
Expect(0, 12271, '\P{^IDSB=y}', "");
Expect(1, 12273, '\p{IDSB: 	-Y}', "");
Expect(0, 12273, '\p{^IDSB: 	-Y}', "");
Expect(0, 12273, '\P{IDSB: 	-Y}', "");
Expect(1, 12273, '\P{^IDSB: 	-Y}', "");
Expect(0, 12271, '\p{IDSB: 	-Y}', "");
Expect(1, 12271, '\p{^IDSB: 	-Y}', "");
Expect(1, 12271, '\P{IDSB: 	-Y}', "");
Expect(0, 12271, '\P{^IDSB: 	-Y}', "");
Error('\p{Is_IDS_Binary_Operator=-/a/T}');
Error('\P{Is_IDS_Binary_Operator=-/a/T}');
Expect(1, 12273, '\p{Is_IDS_Binary_Operator=t}', "");
Expect(0, 12273, '\p{^Is_IDS_Binary_Operator=t}', "");
Expect(0, 12273, '\P{Is_IDS_Binary_Operator=t}', "");
Expect(1, 12273, '\P{^Is_IDS_Binary_Operator=t}', "");
Expect(0, 12271, '\p{Is_IDS_Binary_Operator=t}', "");
Expect(1, 12271, '\p{^Is_IDS_Binary_Operator=t}', "");
Expect(1, 12271, '\P{Is_IDS_Binary_Operator=t}', "");
Expect(0, 12271, '\P{^Is_IDS_Binary_Operator=t}', "");
Expect(1, 12273, '\p{Is_IDS_Binary_Operator=  t}', "");
Expect(0, 12273, '\p{^Is_IDS_Binary_Operator=  t}', "");
Expect(0, 12273, '\P{Is_IDS_Binary_Operator=  t}', "");
Expect(1, 12273, '\P{^Is_IDS_Binary_Operator=  t}', "");
Expect(0, 12271, '\p{Is_IDS_Binary_Operator=  t}', "");
Expect(1, 12271, '\p{^Is_IDS_Binary_Operator=  t}', "");
Expect(1, 12271, '\P{Is_IDS_Binary_Operator=  t}', "");
Expect(0, 12271, '\P{^Is_IDS_Binary_Operator=  t}', "");
Error('\p{Is_IDSB=	:=True}');
Error('\P{Is_IDSB=	:=True}');
Expect(1, 12273, '\p{Is_IDSB=true}', "");
Expect(0, 12273, '\p{^Is_IDSB=true}', "");
Expect(0, 12273, '\P{Is_IDSB=true}', "");
Expect(1, 12273, '\P{^Is_IDSB=true}', "");
Expect(0, 12271, '\p{Is_IDSB=true}', "");
Expect(1, 12271, '\p{^Is_IDSB=true}', "");
Expect(1, 12271, '\P{Is_IDSB=true}', "");
Expect(0, 12271, '\P{^Is_IDSB=true}', "");
Expect(1, 12273, '\p{Is_IDSB= 	true}', "");
Expect(0, 12273, '\p{^Is_IDSB= 	true}', "");
Expect(0, 12273, '\P{Is_IDSB= 	true}', "");
Expect(1, 12273, '\P{^Is_IDSB= 	true}', "");
Expect(0, 12271, '\p{Is_IDSB= 	true}', "");
Expect(1, 12271, '\p{^Is_IDSB= 	true}', "");
Expect(1, 12271, '\P{Is_IDSB= 	true}', "");
Expect(0, 12271, '\P{^Is_IDSB= 	true}', "");
Error('\p{IDS_Binary_Operator=	No:=}');
Error('\P{IDS_Binary_Operator=	No:=}');
Expect(1, 12271, '\p{IDS_Binary_Operator=no}', "");
Expect(0, 12271, '\p{^IDS_Binary_Operator=no}', "");
Expect(0, 12271, '\P{IDS_Binary_Operator=no}', "");
Expect(1, 12271, '\P{^IDS_Binary_Operator=no}', "");
Expect(0, 12273, '\p{IDS_Binary_Operator=no}', "");
Expect(1, 12273, '\p{^IDS_Binary_Operator=no}', "");
Expect(1, 12273, '\P{IDS_Binary_Operator=no}', "");
Expect(0, 12273, '\P{^IDS_Binary_Operator=no}', "");
Expect(1, 12271, '\p{IDS_Binary_Operator=--NO}', "");
Expect(0, 12271, '\p{^IDS_Binary_Operator=--NO}', "");
Expect(0, 12271, '\P{IDS_Binary_Operator=--NO}', "");
Expect(1, 12271, '\P{^IDS_Binary_Operator=--NO}', "");
Expect(0, 12273, '\p{IDS_Binary_Operator=--NO}', "");
Expect(1, 12273, '\p{^IDS_Binary_Operator=--NO}', "");
Expect(1, 12273, '\P{IDS_Binary_Operator=--NO}', "");
Expect(0, 12273, '\P{^IDS_Binary_Operator=--NO}', "");
Error('\p{IDSB: _-N:=}');
Error('\P{IDSB: _-N:=}');
Expect(1, 12271, '\p{IDSB=n}', "");
Expect(0, 12271, '\p{^IDSB=n}', "");
Expect(0, 12271, '\P{IDSB=n}', "");
Expect(1, 12271, '\P{^IDSB=n}', "");
Expect(0, 12273, '\p{IDSB=n}', "");
Expect(1, 12273, '\p{^IDSB=n}', "");
Expect(1, 12273, '\P{IDSB=n}', "");
Expect(0, 12273, '\P{^IDSB=n}', "");
Expect(1, 12271, '\p{IDSB=_ N}', "");
Expect(0, 12271, '\p{^IDSB=_ N}', "");
Expect(0, 12271, '\P{IDSB=_ N}', "");
Expect(1, 12271, '\P{^IDSB=_ N}', "");
Expect(0, 12273, '\p{IDSB=_ N}', "");
Expect(1, 12273, '\p{^IDSB=_ N}', "");
Expect(1, 12273, '\P{IDSB=_ N}', "");
Expect(0, 12273, '\P{^IDSB=_ N}', "");
Error('\p{Is_IDS_Binary_Operator=:=_-F}');
Error('\P{Is_IDS_Binary_Operator=:=_-F}');
Expect(1, 12271, '\p{Is_IDS_Binary_Operator=f}', "");
Expect(0, 12271, '\p{^Is_IDS_Binary_Operator=f}', "");
Expect(0, 12271, '\P{Is_IDS_Binary_Operator=f}', "");
Expect(1, 12271, '\P{^Is_IDS_Binary_Operator=f}', "");
Expect(0, 12273, '\p{Is_IDS_Binary_Operator=f}', "");
Expect(1, 12273, '\p{^Is_IDS_Binary_Operator=f}', "");
Expect(1, 12273, '\P{Is_IDS_Binary_Operator=f}', "");
Expect(0, 12273, '\P{^Is_IDS_Binary_Operator=f}', "");
Expect(1, 12271, '\p{Is_IDS_Binary_Operator=--f}', "");
Expect(0, 12271, '\p{^Is_IDS_Binary_Operator=--f}', "");
Expect(0, 12271, '\P{Is_IDS_Binary_Operator=--f}', "");
Expect(1, 12271, '\P{^Is_IDS_Binary_Operator=--f}', "");
Expect(0, 12273, '\p{Is_IDS_Binary_Operator=--f}', "");
Expect(1, 12273, '\p{^Is_IDS_Binary_Operator=--f}', "");
Expect(1, 12273, '\P{Is_IDS_Binary_Operator=--f}', "");
Expect(0, 12273, '\P{^Is_IDS_Binary_Operator=--f}', "");
Error('\p{Is_IDSB=_	False:=}');
Error('\P{Is_IDSB=_	False:=}');
Expect(1, 12271, '\p{Is_IDSB:false}', "");
Expect(0, 12271, '\p{^Is_IDSB:false}', "");
Expect(0, 12271, '\P{Is_IDSB:false}', "");
Expect(1, 12271, '\P{^Is_IDSB:false}', "");
Expect(0, 12273, '\p{Is_IDSB:false}', "");
Expect(1, 12273, '\p{^Is_IDSB:false}', "");
Expect(1, 12273, '\P{Is_IDSB:false}', "");
Expect(0, 12273, '\P{^Is_IDSB:false}', "");
Expect(1, 12271, '\p{Is_IDSB=_FALSE}', "");
Expect(0, 12271, '\p{^Is_IDSB=_FALSE}', "");
Expect(0, 12271, '\P{Is_IDSB=_FALSE}', "");
Expect(1, 12271, '\P{^Is_IDSB=_FALSE}', "");
Expect(0, 12273, '\p{Is_IDSB=_FALSE}', "");
Expect(1, 12273, '\p{^Is_IDSB=_FALSE}', "");
Expect(1, 12273, '\P{Is_IDSB=_FALSE}', "");
Expect(0, 12273, '\P{^Is_IDSB=_FALSE}', "");
Error('\p{General_Category=/a/_ Symbol}');
Error('\P{General_Category=/a/_ Symbol}');
Expect(1, 36, '\p{General_Category:   symbol}', "");
Expect(0, 36, '\p{^General_Category:   symbol}', "");
Expect(0, 36, '\P{General_Category:   symbol}', "");
Expect(1, 36, '\P{^General_Category:   symbol}', "");
Expect(0, 35, '\p{General_Category:   symbol}', "");
Expect(1, 35, '\p{^General_Category:   symbol}', "");
Expect(1, 35, '\P{General_Category:   symbol}', "");
Expect(0, 35, '\P{^General_Category:   symbol}', "");
Expect(1, 36, '\p{General_Category=__Symbol}', "");
Expect(0, 36, '\p{^General_Category=__Symbol}', "");
Expect(0, 36, '\P{General_Category=__Symbol}', "");
Expect(1, 36, '\P{^General_Category=__Symbol}', "");
Expect(0, 35, '\p{General_Category=__Symbol}', "");
Expect(1, 35, '\p{^General_Category=__Symbol}', "");
Expect(1, 35, '\P{General_Category=__Symbol}', "");
Expect(0, 35, '\P{^General_Category=__Symbol}', "");
Error('\p{Gc=/a/-s}');
Error('\P{Gc=/a/-s}');
Expect(1, 36, '\p{Gc=s}', "");
Expect(0, 36, '\p{^Gc=s}', "");
Expect(0, 36, '\P{Gc=s}', "");
Expect(1, 36, '\P{^Gc=s}', "");
Expect(0, 35, '\p{Gc=s}', "");
Expect(1, 35, '\p{^Gc=s}', "");
Expect(1, 35, '\P{Gc=s}', "");
Expect(0, 35, '\P{^Gc=s}', "");
Expect(1, 36, '\p{Gc=		S}', "");
Expect(0, 36, '\p{^Gc=		S}', "");
Expect(0, 36, '\P{Gc=		S}', "");
Expect(1, 36, '\P{^Gc=		S}', "");
Expect(0, 35, '\p{Gc=		S}', "");
Expect(1, 35, '\p{^Gc=		S}', "");
Expect(1, 35, '\P{Gc=		S}', "");
Expect(0, 35, '\P{^Gc=		S}', "");
Error('\p{Category=/a/--SYMBOL}');
Error('\P{Category=/a/--SYMBOL}');
Expect(1, 36, '\p{Category=symbol}', "");
Expect(0, 36, '\p{^Category=symbol}', "");
Expect(0, 36, '\P{Category=symbol}', "");
Expect(1, 36, '\P{^Category=symbol}', "");
Expect(0, 35, '\p{Category=symbol}', "");
Expect(1, 35, '\p{^Category=symbol}', "");
Expect(1, 35, '\P{Category=symbol}', "");
Expect(0, 35, '\P{^Category=symbol}', "");
Expect(1, 36, '\p{Category= _Symbol}', "");
Expect(0, 36, '\p{^Category= _Symbol}', "");
Expect(0, 36, '\P{Category= _Symbol}', "");
Expect(1, 36, '\P{^Category= _Symbol}', "");
Expect(0, 35, '\p{Category= _Symbol}', "");
Expect(1, 35, '\p{^Category= _Symbol}', "");
Expect(1, 35, '\P{Category= _Symbol}', "");
Expect(0, 35, '\P{^Category= _Symbol}', "");
Error('\p{Is_General_Category:	/a/-s}');
Error('\P{Is_General_Category:	/a/-s}');
Expect(1, 36, '\p{Is_General_Category=s}', "");
Expect(0, 36, '\p{^Is_General_Category=s}', "");
Expect(0, 36, '\P{Is_General_Category=s}', "");
Expect(1, 36, '\P{^Is_General_Category=s}', "");
Expect(0, 35, '\p{Is_General_Category=s}', "");
Expect(1, 35, '\p{^Is_General_Category=s}', "");
Expect(1, 35, '\P{Is_General_Category=s}', "");
Expect(0, 35, '\P{^Is_General_Category=s}', "");
Expect(1, 36, '\p{Is_General_Category=_	s}', "");
Expect(0, 36, '\p{^Is_General_Category=_	s}', "");
Expect(0, 36, '\P{Is_General_Category=_	s}', "");
Expect(1, 36, '\P{^Is_General_Category=_	s}', "");
Expect(0, 35, '\p{Is_General_Category=_	s}', "");
Expect(1, 35, '\p{^Is_General_Category=_	s}', "");
Expect(1, 35, '\P{Is_General_Category=_	s}', "");
Expect(0, 35, '\P{^Is_General_Category=_	s}', "");
Error('\p{Is_Gc: :=symbol}');
Error('\P{Is_Gc: :=symbol}');
Expect(1, 36, '\p{Is_Gc=symbol}', "");
Expect(0, 36, '\p{^Is_Gc=symbol}', "");
Expect(0, 36, '\P{Is_Gc=symbol}', "");
Expect(1, 36, '\P{^Is_Gc=symbol}', "");
Expect(0, 35, '\p{Is_Gc=symbol}', "");
Expect(1, 35, '\p{^Is_Gc=symbol}', "");
Expect(1, 35, '\P{Is_Gc=symbol}', "");
Expect(0, 35, '\P{^Is_Gc=symbol}', "");
Expect(1, 36, '\p{Is_Gc=-	Symbol}', "");
Expect(0, 36, '\p{^Is_Gc=-	Symbol}', "");
Expect(0, 36, '\P{Is_Gc=-	Symbol}', "");
Expect(1, 36, '\P{^Is_Gc=-	Symbol}', "");
Expect(0, 35, '\p{Is_Gc=-	Symbol}', "");
Expect(1, 35, '\p{^Is_Gc=-	Symbol}', "");
Expect(1, 35, '\P{Is_Gc=-	Symbol}', "");
Expect(0, 35, '\P{^Is_Gc=-	Symbol}', "");
Error('\p{Is_Category=	:=S}');
Error('\P{Is_Category=	:=S}');
Expect(1, 36, '\p{Is_Category=s}', "");
Expect(0, 36, '\p{^Is_Category=s}', "");
Expect(0, 36, '\P{Is_Category=s}', "");
Expect(1, 36, '\P{^Is_Category=s}', "");
Expect(0, 35, '\p{Is_Category=s}', "");
Expect(1, 35, '\p{^Is_Category=s}', "");
Expect(1, 35, '\P{Is_Category=s}', "");
Expect(0, 35, '\P{^Is_Category=s}', "");
Expect(1, 36, '\p{Is_Category=	S}', "");
Expect(0, 36, '\p{^Is_Category=	S}', "");
Expect(0, 36, '\P{Is_Category=	S}', "");
Expect(1, 36, '\P{^Is_Category=	S}', "");
Expect(0, 35, '\p{Is_Category=	S}', "");
Expect(1, 35, '\p{^Is_Category=	S}', "");
Expect(1, 35, '\P{Is_Category=	S}', "");
Expect(0, 35, '\P{^Is_Category=	S}', "");
Error('\p{General_Category:	 /a/spacing-Mark}');
Error('\P{General_Category:	 /a/spacing-Mark}');
Expect(1, 2307, '\p{General_Category=spacingmark}', "");
Expect(0, 2307, '\p{^General_Category=spacingmark}', "");
Expect(0, 2307, '\P{General_Category=spacingmark}', "");
Expect(1, 2307, '\P{^General_Category=spacingmark}', "");
Expect(0, 2306, '\p{General_Category=spacingmark}', "");
Expect(1, 2306, '\p{^General_Category=spacingmark}', "");
Expect(1, 2306, '\P{General_Category=spacingmark}', "");
Expect(0, 2306, '\P{^General_Category=spacingmark}', "");
Expect(1, 2307, '\p{General_Category= spacing	Mark}', "");
Expect(0, 2307, '\p{^General_Category= spacing	Mark}', "");
Expect(0, 2307, '\P{General_Category= spacing	Mark}', "");
Expect(1, 2307, '\P{^General_Category= spacing	Mark}', "");
Expect(0, 2306, '\p{General_Category= spacing	Mark}', "");
Expect(1, 2306, '\p{^General_Category= spacing	Mark}', "");
Expect(1, 2306, '\P{General_Category= spacing	Mark}', "");
Expect(0, 2306, '\P{^General_Category= spacing	Mark}', "");
Error('\p{Gc= MC/a/}');
Error('\P{Gc= MC/a/}');
Expect(1, 2307, '\p{Gc=mc}', "");
Expect(0, 2307, '\p{^Gc=mc}', "");
Expect(0, 2307, '\P{Gc=mc}', "");
Expect(1, 2307, '\P{^Gc=mc}', "");
Expect(0, 2306, '\p{Gc=mc}', "");
Expect(1, 2306, '\p{^Gc=mc}', "");
Expect(1, 2306, '\P{Gc=mc}', "");
Expect(0, 2306, '\P{^Gc=mc}', "");
Expect(1, 2307, '\p{Gc=Mc}', "");
Expect(0, 2307, '\p{^Gc=Mc}', "");
Expect(0, 2307, '\P{Gc=Mc}', "");
Expect(1, 2307, '\P{^Gc=Mc}', "");
Expect(0, 2306, '\p{Gc=Mc}', "");
Expect(1, 2306, '\p{^Gc=Mc}', "");
Expect(1, 2306, '\P{Gc=Mc}', "");
Expect(0, 2306, '\P{^Gc=Mc}', "");
Error('\p{Category=_	spacing:=Mark}');
Error('\P{Category=_	spacing:=Mark}');
Expect(1, 2307, '\p{Category=spacingmark}', "");
Expect(0, 2307, '\p{^Category=spacingmark}', "");
Expect(0, 2307, '\P{Category=spacingmark}', "");
Expect(1, 2307, '\P{^Category=spacingmark}', "");
Expect(0, 2306, '\p{Category=spacingmark}', "");
Expect(1, 2306, '\p{^Category=spacingmark}', "");
Expect(1, 2306, '\P{Category=spacingmark}', "");
Expect(0, 2306, '\P{^Category=spacingmark}', "");
Expect(1, 2307, '\p{Category=_Spacing_Mark}', "");
Expect(0, 2307, '\p{^Category=_Spacing_Mark}', "");
Expect(0, 2307, '\P{Category=_Spacing_Mark}', "");
Expect(1, 2307, '\P{^Category=_Spacing_Mark}', "");
Expect(0, 2306, '\p{Category=_Spacing_Mark}', "");
Expect(1, 2306, '\p{^Category=_Spacing_Mark}', "");
Expect(1, 2306, '\P{Category=_Spacing_Mark}', "");
Expect(0, 2306, '\P{^Category=_Spacing_Mark}', "");
Error('\p{Is_General_Category:	:=-_MC}');
Error('\P{Is_General_Category:	:=-_MC}');
Expect(1, 2307, '\p{Is_General_Category=mc}', "");
Expect(0, 2307, '\p{^Is_General_Category=mc}', "");
Expect(0, 2307, '\P{Is_General_Category=mc}', "");
Expect(1, 2307, '\P{^Is_General_Category=mc}', "");
Expect(0, 2306, '\p{Is_General_Category=mc}', "");
Expect(1, 2306, '\p{^Is_General_Category=mc}', "");
Expect(1, 2306, '\P{Is_General_Category=mc}', "");
Expect(0, 2306, '\P{^Is_General_Category=mc}', "");
Expect(1, 2307, '\p{Is_General_Category=	 Mc}', "");
Expect(0, 2307, '\p{^Is_General_Category=	 Mc}', "");
Expect(0, 2307, '\P{Is_General_Category=	 Mc}', "");
Expect(1, 2307, '\P{^Is_General_Category=	 Mc}', "");
Expect(0, 2306, '\p{Is_General_Category=	 Mc}', "");
Expect(1, 2306, '\p{^Is_General_Category=	 Mc}', "");
Expect(1, 2306, '\P{Is_General_Category=	 Mc}', "");
Expect(0, 2306, '\P{^Is_General_Category=	 Mc}', "");
Error('\p{Is_Gc:_SPACING Mark/a/}');
Error('\P{Is_Gc:_SPACING Mark/a/}');
Expect(1, 2307, '\p{Is_Gc=spacingmark}', "");
Expect(0, 2307, '\p{^Is_Gc=spacingmark}', "");
Expect(0, 2307, '\P{Is_Gc=spacingmark}', "");
Expect(1, 2307, '\P{^Is_Gc=spacingmark}', "");
Expect(0, 2306, '\p{Is_Gc=spacingmark}', "");
Expect(1, 2306, '\p{^Is_Gc=spacingmark}', "");
Expect(1, 2306, '\P{Is_Gc=spacingmark}', "");
Expect(0, 2306, '\P{^Is_Gc=spacingmark}', "");
Expect(1, 2307, '\p{Is_Gc=	-Spacing	MARK}', "");
Expect(0, 2307, '\p{^Is_Gc=	-Spacing	MARK}', "");
Expect(0, 2307, '\P{Is_Gc=	-Spacing	MARK}', "");
Expect(1, 2307, '\P{^Is_Gc=	-Spacing	MARK}', "");
Expect(0, 2306, '\p{Is_Gc=	-Spacing	MARK}', "");
Expect(1, 2306, '\p{^Is_Gc=	-Spacing	MARK}', "");
Expect(1, 2306, '\P{Is_Gc=	-Spacing	MARK}', "");
Expect(0, 2306, '\P{^Is_Gc=	-Spacing	MARK}', "");
Error('\p{Is_Category=_:=mc}');
Error('\P{Is_Category=_:=mc}');
Expect(1, 2307, '\p{Is_Category=mc}', "");
Expect(0, 2307, '\p{^Is_Category=mc}', "");
Expect(0, 2307, '\P{Is_Category=mc}', "");
Expect(1, 2307, '\P{^Is_Category=mc}', "");
Expect(0, 2306, '\p{Is_Category=mc}', "");
Expect(1, 2306, '\p{^Is_Category=mc}', "");
Expect(1, 2306, '\P{Is_Category=mc}', "");
Expect(0, 2306, '\P{^Is_Category=mc}', "");
Expect(1, 2307, '\p{Is_Category:   --MC}', "");
Expect(0, 2307, '\p{^Is_Category:   --MC}', "");
Expect(0, 2307, '\P{Is_Category:   --MC}', "");
Expect(1, 2307, '\P{^Is_Category:   --MC}', "");
Expect(0, 2306, '\p{Is_Category:   --MC}', "");
Expect(1, 2306, '\p{^Is_Category:   --MC}', "");
Expect(1, 2306, '\P{Is_Category:   --MC}', "");
Expect(0, 2306, '\P{^Is_Category:   --MC}', "");
Error('\p{General_Category= 	cased-Letter:=}');
Error('\P{General_Category= 	cased-Letter:=}');
Expect(1, 90, '\p{General_Category=casedletter}', "");
Expect(0, 90, '\p{^General_Category=casedletter}', "");
Expect(0, 90, '\P{General_Category=casedletter}', "");
Expect(1, 90, '\P{^General_Category=casedletter}', "");
Expect(0, 64, '\p{General_Category=casedletter}', "");
Expect(1, 64, '\p{^General_Category=casedletter}', "");
Expect(1, 64, '\P{General_Category=casedletter}', "");
Expect(0, 64, '\P{^General_Category=casedletter}', "");
Expect(1, 90, '\p{General_Category=_ Cased-Letter}', "");
Expect(0, 90, '\p{^General_Category=_ Cased-Letter}', "");
Expect(0, 90, '\P{General_Category=_ Cased-Letter}', "");
Expect(1, 90, '\P{^General_Category=_ Cased-Letter}', "");
Expect(0, 64, '\p{General_Category=_ Cased-Letter}', "");
Expect(1, 64, '\p{^General_Category=_ Cased-Letter}', "");
Expect(1, 64, '\P{General_Category=_ Cased-Letter}', "");
Expect(0, 64, '\P{^General_Category=_ Cased-Letter}', "");
Error('\p{Gc=:= 	LC}');
Error('\P{Gc=:= 	LC}');
Expect(1, 90, '\p{Gc=lc}', "");
Expect(0, 90, '\p{^Gc=lc}', "");
Expect(0, 90, '\P{Gc=lc}', "");
Expect(1, 90, '\P{^Gc=lc}', "");
Expect(0, 64, '\p{Gc=lc}', "");
Expect(1, 64, '\p{^Gc=lc}', "");
Expect(1, 64, '\P{Gc=lc}', "");
Expect(0, 64, '\P{^Gc=lc}', "");
Expect(1, 90, '\p{Gc=	-LC}', "");
Expect(0, 90, '\p{^Gc=	-LC}', "");
Expect(0, 90, '\P{Gc=	-LC}', "");
Expect(1, 90, '\P{^Gc=	-LC}', "");
Expect(0, 64, '\p{Gc=	-LC}', "");
Expect(1, 64, '\p{^Gc=	-LC}', "");
Expect(1, 64, '\P{Gc=	-LC}', "");
Expect(0, 64, '\P{^Gc=	-LC}', "");
Error('\p{Category=_:=L}');
Error('\P{Category=_:=L}');
Expect(1, 90, '\p{Category=l_}', "");
Expect(0, 90, '\p{^Category=l_}', "");
Expect(0, 90, '\P{Category=l_}', "");
Expect(1, 90, '\P{^Category=l_}', "");
Expect(0, 64, '\p{Category=l_}', "");
Expect(1, 64, '\p{^Category=l_}', "");
Expect(1, 64, '\P{Category=l_}', "");
Expect(0, 64, '\P{^Category=l_}', "");
Expect(1, 90, '\p{Category=	_l}', "");
Expect(0, 90, '\p{^Category=	_l}', "");
Expect(0, 90, '\P{Category=	_l}', "");
Expect(1, 90, '\P{^Category=	_l}', "");
Expect(0, 64, '\p{Category=	_l}', "");
Expect(1, 64, '\p{^Category=	_l}', "");
Expect(1, 64, '\P{Category=	_l}', "");
Expect(0, 64, '\P{^Category=	_l}', "");
Error('\p{Is_General_Category=:=  l&}');
Error('\P{Is_General_Category=:=  l&}');
Expect(1, 90, '\p{Is_General_Category=l&}', "");
Expect(0, 90, '\p{^Is_General_Category=l&}', "");
Expect(0, 90, '\P{Is_General_Category=l&}', "");
Expect(1, 90, '\P{^Is_General_Category=l&}', "");
Expect(0, 64, '\p{Is_General_Category=l&}', "");
Expect(1, 64, '\p{^Is_General_Category=l&}', "");
Expect(1, 64, '\P{Is_General_Category=l&}', "");
Expect(0, 64, '\P{^Is_General_Category=l&}', "");
Expect(1, 90, '\p{Is_General_Category=  L&}', "");
Expect(0, 90, '\p{^Is_General_Category=  L&}', "");
Expect(0, 90, '\P{Is_General_Category=  L&}', "");
Expect(1, 90, '\P{^Is_General_Category=  L&}', "");
Expect(0, 64, '\p{Is_General_Category=  L&}', "");
Expect(1, 64, '\p{^Is_General_Category=  L&}', "");
Expect(1, 64, '\P{Is_General_Category=  L&}', "");
Expect(0, 64, '\P{^Is_General_Category=  L&}', "");
Error('\p{Is_Gc: :=_-cased-Letter}');
Error('\P{Is_Gc: :=_-cased-Letter}');
Expect(1, 90, '\p{Is_Gc=casedletter}', "");
Expect(0, 90, '\p{^Is_Gc=casedletter}', "");
Expect(0, 90, '\P{Is_Gc=casedletter}', "");
Expect(1, 90, '\P{^Is_Gc=casedletter}', "");
Expect(0, 64, '\p{Is_Gc=casedletter}', "");
Expect(1, 64, '\p{^Is_Gc=casedletter}', "");
Expect(1, 64, '\P{Is_Gc=casedletter}', "");
Expect(0, 64, '\P{^Is_Gc=casedletter}', "");
Expect(1, 90, '\p{Is_Gc= CASED LETTER}', "");
Expect(0, 90, '\p{^Is_Gc= CASED LETTER}', "");
Expect(0, 90, '\P{Is_Gc= CASED LETTER}', "");
Expect(1, 90, '\P{^Is_Gc= CASED LETTER}', "");
Expect(0, 64, '\p{Is_Gc= CASED LETTER}', "");
Expect(1, 64, '\p{^Is_Gc= CASED LETTER}', "");
Expect(1, 64, '\P{Is_Gc= CASED LETTER}', "");
Expect(0, 64, '\P{^Is_Gc= CASED LETTER}', "");
Error('\p{Is_Category=  LC:=}');
Error('\P{Is_Category=  LC:=}');
Expect(1, 90, '\p{Is_Category=lc}', "");
Expect(0, 90, '\p{^Is_Category=lc}', "");
Expect(0, 90, '\P{Is_Category=lc}', "");
Expect(1, 90, '\P{^Is_Category=lc}', "");
Expect(0, 64, '\p{Is_Category=lc}', "");
Expect(1, 64, '\p{^Is_Category=lc}', "");
Expect(1, 64, '\P{Is_Category=lc}', "");
Expect(0, 64, '\P{^Is_Category=lc}', "");
Expect(1, 90, '\p{Is_Category: _	lc}', "");
Expect(0, 90, '\p{^Is_Category: _	lc}', "");
Expect(0, 90, '\P{Is_Category: _	lc}', "");
Expect(1, 90, '\P{^Is_Category: _	lc}', "");
Expect(0, 64, '\p{Is_Category: _	lc}', "");
Expect(1, 64, '\p{^Is_Category: _	lc}', "");
Expect(1, 64, '\P{Is_Category: _	lc}', "");
Expect(0, 64, '\P{^Is_Category: _	lc}', "");
Error('\p{General_Category:-CONNECTOR/a/PUNCTUATION}');
Error('\P{General_Category:-CONNECTOR/a/PUNCTUATION}');
Expect(1, 95, '\p{General_Category=connectorpunctuation}', "");
Expect(0, 95, '\p{^General_Category=connectorpunctuation}', "");
Expect(0, 95, '\P{General_Category=connectorpunctuation}', "");
Expect(1, 95, '\P{^General_Category=connectorpunctuation}', "");
Expect(0, 94, '\p{General_Category=connectorpunctuation}', "");
Expect(1, 94, '\p{^General_Category=connectorpunctuation}', "");
Expect(1, 94, '\P{General_Category=connectorpunctuation}', "");
Expect(0, 94, '\P{^General_Category=connectorpunctuation}', "");
Expect(1, 95, '\p{General_Category= Connectorpunctuation}', "");
Expect(0, 95, '\p{^General_Category= Connectorpunctuation}', "");
Expect(0, 95, '\P{General_Category= Connectorpunctuation}', "");
Expect(1, 95, '\P{^General_Category= Connectorpunctuation}', "");
Expect(0, 94, '\p{General_Category= Connectorpunctuation}', "");
Expect(1, 94, '\p{^General_Category= Connectorpunctuation}', "");
Expect(1, 94, '\P{General_Category= Connectorpunctuation}', "");
Expect(0, 94, '\P{^General_Category= Connectorpunctuation}', "");
Error('\p{Gc:	/a/-Pc}');
Error('\P{Gc:	/a/-Pc}');
Expect(1, 95, '\p{Gc=pc}', "");
Expect(0, 95, '\p{^Gc=pc}', "");
Expect(0, 95, '\P{Gc=pc}', "");
Expect(1, 95, '\P{^Gc=pc}', "");
Expect(0, 94, '\p{Gc=pc}', "");
Expect(1, 94, '\p{^Gc=pc}', "");
Expect(1, 94, '\P{Gc=pc}', "");
Expect(0, 94, '\P{^Gc=pc}', "");
Expect(1, 95, '\p{Gc= PC}', "");
Expect(0, 95, '\p{^Gc= PC}', "");
Expect(0, 95, '\P{Gc= PC}', "");
Expect(1, 95, '\P{^Gc= PC}', "");
Expect(0, 94, '\p{Gc= PC}', "");
Expect(1, 94, '\p{^Gc= PC}', "");
Expect(1, 94, '\P{Gc= PC}', "");
Expect(0, 94, '\P{^Gc= PC}', "");
Error('\p{Category=:=CONNECTORPunctuation}');
Error('\P{Category=:=CONNECTORPunctuation}');
Expect(1, 95, '\p{Category=connectorpunctuation}', "");
Expect(0, 95, '\p{^Category=connectorpunctuation}', "");
Expect(0, 95, '\P{Category=connectorpunctuation}', "");
Expect(1, 95, '\P{^Category=connectorpunctuation}', "");
Expect(0, 94, '\p{Category=connectorpunctuation}', "");
Expect(1, 94, '\p{^Category=connectorpunctuation}', "");
Expect(1, 94, '\P{Category=connectorpunctuation}', "");
Expect(0, 94, '\P{^Category=connectorpunctuation}', "");
Expect(1, 95, '\p{Category=Connector-Punctuation}', "");
Expect(0, 95, '\p{^Category=Connector-Punctuation}', "");
Expect(0, 95, '\P{Category=Connector-Punctuation}', "");
Expect(1, 95, '\P{^Category=Connector-Punctuation}', "");
Expect(0, 94, '\p{Category=Connector-Punctuation}', "");
Expect(1, 94, '\p{^Category=Connector-Punctuation}', "");
Expect(1, 94, '\P{Category=Connector-Punctuation}', "");
Expect(0, 94, '\P{^Category=Connector-Punctuation}', "");
Error('\p{Is_General_Category=/a/-Pc}');
Error('\P{Is_General_Category=/a/-Pc}');
Expect(1, 95, '\p{Is_General_Category=pc}', "");
Expect(0, 95, '\p{^Is_General_Category=pc}', "");
Expect(0, 95, '\P{Is_General_Category=pc}', "");
Expect(1, 95, '\P{^Is_General_Category=pc}', "");
Expect(0, 94, '\p{Is_General_Category=pc}', "");
Expect(1, 94, '\p{^Is_General_Category=pc}', "");
Expect(1, 94, '\P{Is_General_Category=pc}', "");
Expect(0, 94, '\P{^Is_General_Category=pc}', "");
Expect(1, 95, '\p{Is_General_Category:	  pc}', "");
Expect(0, 95, '\p{^Is_General_Category:	  pc}', "");
Expect(0, 95, '\P{Is_General_Category:	  pc}', "");
Expect(1, 95, '\P{^Is_General_Category:	  pc}', "");
Expect(0, 94, '\p{Is_General_Category:	  pc}', "");
Expect(1, 94, '\p{^Is_General_Category:	  pc}', "");
Expect(1, 94, '\P{Is_General_Category:	  pc}', "");
Expect(0, 94, '\P{^Is_General_Category:	  pc}', "");
Error('\p{Is_Gc=:=	CONNECTOR_punctuation}');
Error('\P{Is_Gc=:=	CONNECTOR_punctuation}');
Expect(1, 95, '\p{Is_Gc=connectorpunctuation}', "");
Expect(0, 95, '\p{^Is_Gc=connectorpunctuation}', "");
Expect(0, 95, '\P{Is_Gc=connectorpunctuation}', "");
Expect(1, 95, '\P{^Is_Gc=connectorpunctuation}', "");
Expect(0, 94, '\p{Is_Gc=connectorpunctuation}', "");
Expect(1, 94, '\p{^Is_Gc=connectorpunctuation}', "");
Expect(1, 94, '\P{Is_Gc=connectorpunctuation}', "");
Expect(0, 94, '\P{^Is_Gc=connectorpunctuation}', "");
Expect(1, 95, '\p{Is_Gc= 	connector-punctuation}', "");
Expect(0, 95, '\p{^Is_Gc= 	connector-punctuation}', "");
Expect(0, 95, '\P{Is_Gc= 	connector-punctuation}', "");
Expect(1, 95, '\P{^Is_Gc= 	connector-punctuation}', "");
Expect(0, 94, '\p{Is_Gc= 	connector-punctuation}', "");
Expect(1, 94, '\p{^Is_Gc= 	connector-punctuation}', "");
Expect(1, 94, '\P{Is_Gc= 	connector-punctuation}', "");
Expect(0, 94, '\P{^Is_Gc= 	connector-punctuation}', "");
Error('\p{Is_Category=	:=PC}');
Error('\P{Is_Category=	:=PC}');
Expect(1, 95, '\p{Is_Category=pc}', "");
Expect(0, 95, '\p{^Is_Category=pc}', "");
Expect(0, 95, '\P{Is_Category=pc}', "");
Expect(1, 95, '\P{^Is_Category=pc}', "");
Expect(0, 94, '\p{Is_Category=pc}', "");
Expect(1, 94, '\p{^Is_Category=pc}', "");
Expect(1, 94, '\P{Is_Category=pc}', "");
Expect(0, 94, '\P{^Is_Category=pc}', "");
Expect(1, 95, '\p{Is_Category=	_Pc}', "");
Expect(0, 95, '\p{^Is_Category=	_Pc}', "");
Expect(0, 95, '\P{Is_Category=	_Pc}', "");
Expect(1, 95, '\P{^Is_Category=	_Pc}', "");
Expect(0, 94, '\p{Is_Category=	_Pc}', "");
Expect(1, 94, '\p{^Is_Category=	_Pc}', "");
Expect(1, 94, '\P{Is_Category=	_Pc}', "");
Expect(0, 94, '\P{^Is_Category=	_Pc}', "");
Error('\p{General_Category=	/a/Surrogate}');
Error('\P{General_Category=	/a/Surrogate}');
Expect(1, 57343, '\p{General_Category=surrogate}', "");
Expect(0, 57343, '\p{^General_Category=surrogate}', "");
Expect(0, 57343, '\P{General_Category=surrogate}', "");
Expect(1, 57343, '\P{^General_Category=surrogate}', "");
Expect(0, 55295, '\p{General_Category=surrogate}', "");
Expect(1, 55295, '\p{^General_Category=surrogate}', "");
Expect(1, 55295, '\P{General_Category=surrogate}', "");
Expect(0, 55295, '\P{^General_Category=surrogate}', "");
Expect(1, 57343, '\p{General_Category= Surrogate}', "");
Expect(0, 57343, '\p{^General_Category= Surrogate}', "");
Expect(0, 57343, '\P{General_Category= Surrogate}', "");
Expect(1, 57343, '\P{^General_Category= Surrogate}', "");
Expect(0, 55295, '\p{General_Category= Surrogate}', "");
Expect(1, 55295, '\p{^General_Category= Surrogate}', "");
Expect(1, 55295, '\P{General_Category= Surrogate}', "");
Expect(0, 55295, '\P{^General_Category= Surrogate}', "");
Error('\p{Gc:	  Cs:=}');
Error('\P{Gc:	  Cs:=}');
Expect(1, 57343, '\p{Gc=cs}', "");
Expect(0, 57343, '\p{^Gc=cs}', "");
Expect(0, 57343, '\P{Gc=cs}', "");
Expect(1, 57343, '\P{^Gc=cs}', "");
Expect(0, 55295, '\p{Gc=cs}', "");
Expect(1, 55295, '\p{^Gc=cs}', "");
Expect(1, 55295, '\P{Gc=cs}', "");
Expect(0, 55295, '\P{^Gc=cs}', "");
Expect(1, 57343, '\p{Gc= _cs}', "");
Expect(0, 57343, '\p{^Gc= _cs}', "");
Expect(0, 57343, '\P{Gc= _cs}', "");
Expect(1, 57343, '\P{^Gc= _cs}', "");
Expect(0, 55295, '\p{Gc= _cs}', "");
Expect(1, 55295, '\p{^Gc= _cs}', "");
Expect(1, 55295, '\P{Gc= _cs}', "");
Expect(0, 55295, '\P{^Gc= _cs}', "");
Error('\p{Category= /a/Surrogate}');
Error('\P{Category= /a/Surrogate}');
Expect(1, 57343, '\p{Category=surrogate}', "");
Expect(0, 57343, '\p{^Category=surrogate}', "");
Expect(0, 57343, '\P{Category=surrogate}', "");
Expect(1, 57343, '\P{^Category=surrogate}', "");
Expect(0, 55295, '\p{Category=surrogate}', "");
Expect(1, 55295, '\p{^Category=surrogate}', "");
Expect(1, 55295, '\P{Category=surrogate}', "");
Expect(0, 55295, '\P{^Category=surrogate}', "");
Expect(1, 57343, '\p{Category=  Surrogate}', "");
Expect(0, 57343, '\p{^Category=  Surrogate}', "");
Expect(0, 57343, '\P{Category=  Surrogate}', "");
Expect(1, 57343, '\P{^Category=  Surrogate}', "");
Expect(0, 55295, '\p{Category=  Surrogate}', "");
Expect(1, 55295, '\p{^Category=  Surrogate}', "");
Expect(1, 55295, '\P{Category=  Surrogate}', "");
Expect(0, 55295, '\P{^Category=  Surrogate}', "");
Error('\p{Is_General_Category=:=	-Cs}');
Error('\P{Is_General_Category=:=	-Cs}');
Expect(1, 57343, '\p{Is_General_Category=cs}', "");
Expect(0, 57343, '\p{^Is_General_Category=cs}', "");
Expect(0, 57343, '\P{Is_General_Category=cs}', "");
Expect(1, 57343, '\P{^Is_General_Category=cs}', "");
Expect(0, 55295, '\p{Is_General_Category=cs}', "");
Expect(1, 55295, '\p{^Is_General_Category=cs}', "");
Expect(1, 55295, '\P{Is_General_Category=cs}', "");
Expect(0, 55295, '\P{^Is_General_Category=cs}', "");
Expect(1, 57343, '\p{Is_General_Category=-cs}', "");
Expect(0, 57343, '\p{^Is_General_Category=-cs}', "");
Expect(0, 57343, '\P{Is_General_Category=-cs}', "");
Expect(1, 57343, '\P{^Is_General_Category=-cs}', "");
Expect(0, 55295, '\p{Is_General_Category=-cs}', "");
Expect(1, 55295, '\p{^Is_General_Category=-cs}', "");
Expect(1, 55295, '\P{Is_General_Category=-cs}', "");
Expect(0, 55295, '\P{^Is_General_Category=-cs}', "");
Error('\p{Is_Gc:	:=_	Surrogate}');
Error('\P{Is_Gc:	:=_	Surrogate}');
Expect(1, 57343, '\p{Is_Gc=surrogate}', "");
Expect(0, 57343, '\p{^Is_Gc=surrogate}', "");
Expect(0, 57343, '\P{Is_Gc=surrogate}', "");
Expect(1, 57343, '\P{^Is_Gc=surrogate}', "");
Expect(0, 55295, '\p{Is_Gc=surrogate}', "");
Expect(1, 55295, '\p{^Is_Gc=surrogate}', "");
Expect(1, 55295, '\P{Is_Gc=surrogate}', "");
Expect(0, 55295, '\P{^Is_Gc=surrogate}', "");
Expect(1, 57343, '\p{Is_Gc=-	Surrogate}', "");
Expect(0, 57343, '\p{^Is_Gc=-	Surrogate}', "");
Expect(0, 57343, '\P{Is_Gc=-	Surrogate}', "");
Expect(1, 57343, '\P{^Is_Gc=-	Surrogate}', "");
Expect(0, 55295, '\p{Is_Gc=-	Surrogate}', "");
Expect(1, 55295, '\p{^Is_Gc=-	Surrogate}', "");
Expect(1, 55295, '\P{Is_Gc=-	Surrogate}', "");
Expect(0, 55295, '\P{^Is_Gc=-	Surrogate}', "");
Error('\p{Is_Category:	cs:=}');
Error('\P{Is_Category:	cs:=}');
Expect(1, 57343, '\p{Is_Category=cs}', "");
Expect(0, 57343, '\p{^Is_Category=cs}', "");
Expect(0, 57343, '\P{Is_Category=cs}', "");
Expect(1, 57343, '\P{^Is_Category=cs}', "");
Expect(0, 55295, '\p{Is_Category=cs}', "");
Expect(1, 55295, '\p{^Is_Category=cs}', "");
Expect(1, 55295, '\P{Is_Category=cs}', "");
Expect(0, 55295, '\P{^Is_Category=cs}', "");
Expect(1, 57343, '\p{Is_Category=-_Cs}', "");
Expect(0, 57343, '\p{^Is_Category=-_Cs}', "");
Expect(0, 57343, '\P{Is_Category=-_Cs}', "");
Expect(1, 57343, '\P{^Is_Category=-_Cs}', "");
Expect(0, 55295, '\p{Is_Category=-_Cs}', "");
Expect(1, 55295, '\p{^Is_Category=-_Cs}', "");
Expect(1, 55295, '\P{Is_Category=-_Cs}', "");
Expect(0, 55295, '\P{^Is_Category=-_Cs}', "");
Error('\p{General_Category:			Private:=Use}');
Error('\P{General_Category:			Private:=Use}');
Expect(1, 63743, '\p{General_Category=privateuse}', "");
Expect(0, 63743, '\p{^General_Category=privateuse}', "");
Expect(0, 63743, '\P{General_Category=privateuse}', "");
Expect(1, 63743, '\P{^General_Category=privateuse}', "");
Expect(0, 1, '\p{General_Category=privateuse}', "");
Expect(1, 1, '\p{^General_Category=privateuse}', "");
Expect(1, 1, '\P{General_Category=privateuse}', "");
Expect(0, 1, '\P{^General_Category=privateuse}', "");
Expect(1, 63743, '\p{General_Category=-	Private_Use}', "");
Expect(0, 63743, '\p{^General_Category=-	Private_Use}', "");
Expect(0, 63743, '\P{General_Category=-	Private_Use}', "");
Expect(1, 63743, '\P{^General_Category=-	Private_Use}', "");
Expect(0, 1, '\p{General_Category=-	Private_Use}', "");
Expect(1, 1, '\p{^General_Category=-	Private_Use}', "");
Expect(1, 1, '\P{General_Category=-	Private_Use}', "");
Expect(0, 1, '\P{^General_Category=-	Private_Use}', "");
Error('\p{Gc=/a/Co}');
Error('\P{Gc=/a/Co}');
Expect(1, 63743, '\p{Gc=co}', "");
Expect(0, 63743, '\p{^Gc=co}', "");
Expect(0, 63743, '\P{Gc=co}', "");
Expect(1, 63743, '\P{^Gc=co}', "");
Expect(0, 1, '\p{Gc=co}', "");
Expect(1, 1, '\p{^Gc=co}', "");
Expect(1, 1, '\P{Gc=co}', "");
Expect(0, 1, '\P{^Gc=co}', "");
Expect(1, 63743, '\p{Gc=-CO}', "");
Expect(0, 63743, '\p{^Gc=-CO}', "");
Expect(0, 63743, '\P{Gc=-CO}', "");
Expect(1, 63743, '\P{^Gc=-CO}', "");
Expect(0, 1, '\p{Gc=-CO}', "");
Expect(1, 1, '\p{^Gc=-CO}', "");
Expect(1, 1, '\P{Gc=-CO}', "");
Expect(0, 1, '\P{^Gc=-CO}', "");
Error('\p{Category=/a/  PrivateUse}');
Error('\P{Category=/a/  PrivateUse}');
Expect(1, 63743, '\p{Category=privateuse}', "");
Expect(0, 63743, '\p{^Category=privateuse}', "");
Expect(0, 63743, '\P{Category=privateuse}', "");
Expect(1, 63743, '\P{^Category=privateuse}', "");
Expect(0, 1, '\p{Category=privateuse}', "");
Expect(1, 1, '\p{^Category=privateuse}', "");
Expect(1, 1, '\P{Category=privateuse}', "");
Expect(0, 1, '\P{^Category=privateuse}', "");
Expect(1, 63743, '\p{Category=- private-use}', "");
Expect(0, 63743, '\p{^Category=- private-use}', "");
Expect(0, 63743, '\P{Category=- private-use}', "");
Expect(1, 63743, '\P{^Category=- private-use}', "");
Expect(0, 1, '\p{Category=- private-use}', "");
Expect(1, 1, '\p{^Category=- private-use}', "");
Expect(1, 1, '\P{Category=- private-use}', "");
Expect(0, 1, '\P{^Category=- private-use}', "");
Error('\p{Is_General_Category=:=Co}');
Error('\P{Is_General_Category=:=Co}');
Expect(1, 63743, '\p{Is_General_Category=co}', "");
Expect(0, 63743, '\p{^Is_General_Category=co}', "");
Expect(0, 63743, '\P{Is_General_Category=co}', "");
Expect(1, 63743, '\P{^Is_General_Category=co}', "");
Expect(0, 1, '\p{Is_General_Category=co}', "");
Expect(1, 1, '\p{^Is_General_Category=co}', "");
Expect(1, 1, '\P{Is_General_Category=co}', "");
Expect(0, 1, '\P{^Is_General_Category=co}', "");
Expect(1, 63743, '\p{Is_General_Category=	-Co}', "");
Expect(0, 63743, '\p{^Is_General_Category=	-Co}', "");
Expect(0, 63743, '\P{Is_General_Category=	-Co}', "");
Expect(1, 63743, '\P{^Is_General_Category=	-Co}', "");
Expect(0, 1, '\p{Is_General_Category=	-Co}', "");
Expect(1, 1, '\p{^Is_General_Category=	-Co}', "");
Expect(1, 1, '\P{Is_General_Category=	-Co}', "");
Expect(0, 1, '\P{^Is_General_Category=	-Co}', "");
Error('\p{Is_Gc= /a/PrivateUse}');
Error('\P{Is_Gc= /a/PrivateUse}');
Expect(1, 63743, '\p{Is_Gc=privateuse}', "");
Expect(0, 63743, '\p{^Is_Gc=privateuse}', "");
Expect(0, 63743, '\P{Is_Gc=privateuse}', "");
Expect(1, 63743, '\P{^Is_Gc=privateuse}', "");
Expect(0, 1, '\p{Is_Gc=privateuse}', "");
Expect(1, 1, '\p{^Is_Gc=privateuse}', "");
Expect(1, 1, '\P{Is_Gc=privateuse}', "");
Expect(0, 1, '\P{^Is_Gc=privateuse}', "");
Expect(1, 63743, '\p{Is_Gc=	Private_Use}', "");
Expect(0, 63743, '\p{^Is_Gc=	Private_Use}', "");
Expect(0, 63743, '\P{Is_Gc=	Private_Use}', "");
Expect(1, 63743, '\P{^Is_Gc=	Private_Use}', "");
Expect(0, 1, '\p{Is_Gc=	Private_Use}', "");
Expect(1, 1, '\p{^Is_Gc=	Private_Use}', "");
Expect(1, 1, '\P{Is_Gc=	Private_Use}', "");
Expect(0, 1, '\P{^Is_Gc=	Private_Use}', "");
Error('\p{Is_Category=-/a/Co}');
Error('\P{Is_Category=-/a/Co}');
Expect(1, 63743, '\p{Is_Category=co}', "");
Expect(0, 63743, '\p{^Is_Category=co}', "");
Expect(0, 63743, '\P{Is_Category=co}', "");
Expect(1, 63743, '\P{^Is_Category=co}', "");
Expect(0, 1, '\p{Is_Category=co}', "");
Expect(1, 1, '\p{^Is_Category=co}', "");
Expect(1, 1, '\P{Is_Category=co}', "");
Expect(0, 1, '\P{^Is_Category=co}', "");
Expect(1, 63743, '\p{Is_Category:--Co}', "");
Expect(0, 63743, '\p{^Is_Category:--Co}', "");
Expect(0, 63743, '\P{Is_Category:--Co}', "");
Expect(1, 63743, '\P{^Is_Category:--Co}', "");
Expect(0, 1, '\p{Is_Category:--Co}', "");
Expect(1, 1, '\p{^Is_Category:--Co}', "");
Expect(1, 1, '\P{Is_Category:--Co}', "");
Expect(0, 1, '\P{^Is_Category:--Co}', "");
Error('\p{General_Category=_-LOWERCASE_Letter:=}');
Error('\P{General_Category=_-LOWERCASE_Letter:=}');
Expect(1, 122, '\p{General_Category=lowercaseletter}', "");
Expect(0, 122, '\p{^General_Category=lowercaseletter}', "");
Expect(0, 122, '\P{General_Category=lowercaseletter}', "");
Expect(1, 122, '\P{^General_Category=lowercaseletter}', "");
Expect(0, 96, '\p{General_Category=lowercaseletter}', "");
Expect(1, 96, '\p{^General_Category=lowercaseletter}', "");
Expect(1, 96, '\P{General_Category=lowercaseletter}', "");
Expect(0, 96, '\P{^General_Category=lowercaseletter}', "");
Expect(1, 122, '\p{General_Category=		Lowercase_LETTER}', "");
Expect(0, 122, '\p{^General_Category=		Lowercase_LETTER}', "");
Expect(0, 122, '\P{General_Category=		Lowercase_LETTER}', "");
Expect(1, 122, '\P{^General_Category=		Lowercase_LETTER}', "");
Expect(0, 96, '\p{General_Category=		Lowercase_LETTER}', "");
Expect(1, 96, '\p{^General_Category=		Lowercase_LETTER}', "");
Expect(1, 96, '\P{General_Category=		Lowercase_LETTER}', "");
Expect(0, 96, '\P{^General_Category=		Lowercase_LETTER}', "");
Error('\p{Gc=:=_	Ll}');
Error('\P{Gc=:=_	Ll}');
Expect(1, 122, '\p{Gc=ll}', "");
Expect(0, 122, '\p{^Gc=ll}', "");
Expect(0, 122, '\P{Gc=ll}', "");
Expect(1, 122, '\P{^Gc=ll}', "");
Expect(0, 96, '\p{Gc=ll}', "");
Expect(1, 96, '\p{^Gc=ll}', "");
Expect(1, 96, '\P{Gc=ll}', "");
Expect(0, 96, '\P{^Gc=ll}', "");
Expect(1, 122, '\p{Gc= _ll}', "");
Expect(0, 122, '\p{^Gc= _ll}', "");
Expect(0, 122, '\P{Gc= _ll}', "");
Expect(1, 122, '\P{^Gc= _ll}', "");
Expect(0, 96, '\p{Gc= _ll}', "");
Expect(1, 96, '\p{^Gc= _ll}', "");
Expect(1, 96, '\P{Gc= _ll}', "");
Expect(0, 96, '\P{^Gc= _ll}', "");
Error('\p{Category=  Lowercase/a/Letter}');
Error('\P{Category=  Lowercase/a/Letter}');
Expect(1, 122, '\p{Category=lowercaseletter}', "");
Expect(0, 122, '\p{^Category=lowercaseletter}', "");
Expect(0, 122, '\P{Category=lowercaseletter}', "");
Expect(1, 122, '\P{^Category=lowercaseletter}', "");
Expect(0, 96, '\p{Category=lowercaseletter}', "");
Expect(1, 96, '\p{^Category=lowercaseletter}', "");
Expect(1, 96, '\P{Category=lowercaseletter}', "");
Expect(0, 96, '\P{^Category=lowercaseletter}', "");
Expect(1, 122, '\p{Category=	-LOWERCASELETTER}', "");
Expect(0, 122, '\p{^Category=	-LOWERCASELETTER}', "");
Expect(0, 122, '\P{Category=	-LOWERCASELETTER}', "");
Expect(1, 122, '\P{^Category=	-LOWERCASELETTER}', "");
Expect(0, 96, '\p{Category=	-LOWERCASELETTER}', "");
Expect(1, 96, '\p{^Category=	-LOWERCASELETTER}', "");
Expect(1, 96, '\P{Category=	-LOWERCASELETTER}', "");
Expect(0, 96, '\P{^Category=	-LOWERCASELETTER}', "");
Error('\p{Is_General_Category=_/a/Ll}');
Error('\P{Is_General_Category=_/a/Ll}');
Expect(1, 122, '\p{Is_General_Category:   ll}', "");
Expect(0, 122, '\p{^Is_General_Category:   ll}', "");
Expect(0, 122, '\P{Is_General_Category:   ll}', "");
Expect(1, 122, '\P{^Is_General_Category:   ll}', "");
Expect(0, 96, '\p{Is_General_Category:   ll}', "");
Expect(1, 96, '\p{^Is_General_Category:   ll}', "");
Expect(1, 96, '\P{Is_General_Category:   ll}', "");
Expect(0, 96, '\P{^Is_General_Category:   ll}', "");
Expect(1, 122, '\p{Is_General_Category=__LL}', "");
Expect(0, 122, '\p{^Is_General_Category=__LL}', "");
Expect(0, 122, '\P{Is_General_Category=__LL}', "");
Expect(1, 122, '\P{^Is_General_Category=__LL}', "");
Expect(0, 96, '\p{Is_General_Category=__LL}', "");
Expect(1, 96, '\p{^Is_General_Category=__LL}', "");
Expect(1, 96, '\P{Is_General_Category=__LL}', "");
Expect(0, 96, '\P{^Is_General_Category=__LL}', "");
Error('\p{Is_Gc=/a/	-LOWERCASE	LETTER}');
Error('\P{Is_Gc=/a/	-LOWERCASE	LETTER}');
Expect(1, 122, '\p{Is_Gc=lowercaseletter}', "");
Expect(0, 122, '\p{^Is_Gc=lowercaseletter}', "");
Expect(0, 122, '\P{Is_Gc=lowercaseletter}', "");
Expect(1, 122, '\P{^Is_Gc=lowercaseletter}', "");
Expect(0, 96, '\p{Is_Gc=lowercaseletter}', "");
Expect(1, 96, '\p{^Is_Gc=lowercaseletter}', "");
Expect(1, 96, '\P{Is_Gc=lowercaseletter}', "");
Expect(0, 96, '\P{^Is_Gc=lowercaseletter}', "");
Expect(1, 122, '\p{Is_Gc=_Lowercase_Letter}', "");
Expect(0, 122, '\p{^Is_Gc=_Lowercase_Letter}', "");
Expect(0, 122, '\P{Is_Gc=_Lowercase_Letter}', "");
Expect(1, 122, '\P{^Is_Gc=_Lowercase_Letter}', "");
Expect(0, 96, '\p{Is_Gc=_Lowercase_Letter}', "");
Expect(1, 96, '\p{^Is_Gc=_Lowercase_Letter}', "");
Expect(1, 96, '\P{Is_Gc=_Lowercase_Letter}', "");
Expect(0, 96, '\P{^Is_Gc=_Lowercase_Letter}', "");
Error('\p{Is_Category= :=Ll}');
Error('\P{Is_Category= :=Ll}');
Expect(1, 122, '\p{Is_Category=ll}', "");
Expect(0, 122, '\p{^Is_Category=ll}', "");
Expect(0, 122, '\P{Is_Category=ll}', "");
Expect(1, 122, '\P{^Is_Category=ll}', "");
Expect(0, 96, '\p{Is_Category=ll}', "");
Expect(1, 96, '\p{^Is_Category=ll}', "");
Expect(1, 96, '\P{Is_Category=ll}', "");
Expect(0, 96, '\P{^Is_Category=ll}', "");
Expect(1, 122, '\p{Is_Category= -Ll}', "");
Expect(0, 122, '\p{^Is_Category= -Ll}', "");
Expect(0, 122, '\P{Is_Category= -Ll}', "");
Expect(1, 122, '\P{^Is_Category= -Ll}', "");
Expect(0, 96, '\p{Is_Category= -Ll}', "");
Expect(1, 96, '\p{^Is_Category= -Ll}', "");
Expect(1, 96, '\P{Is_Category= -Ll}', "");
Expect(0, 96, '\P{^Is_Category= -Ll}', "");
Error('\p{General_Category=	/a/Close_Punctuation}');
Error('\P{General_Category=	/a/Close_Punctuation}');
Expect(1, 41, '\p{General_Category=closepunctuation}', "");
Expect(0, 41, '\p{^General_Category=closepunctuation}', "");
Expect(0, 41, '\P{General_Category=closepunctuation}', "");
Expect(1, 41, '\P{^General_Category=closepunctuation}', "");
Expect(0, 40, '\p{General_Category=closepunctuation}', "");
Expect(1, 40, '\p{^General_Category=closepunctuation}', "");
Expect(1, 40, '\P{General_Category=closepunctuation}', "");
Expect(0, 40, '\P{^General_Category=closepunctuation}', "");
Expect(1, 41, '\p{General_Category=	Close_Punctuation}', "");
Expect(0, 41, '\p{^General_Category=	Close_Punctuation}', "");
Expect(0, 41, '\P{General_Category=	Close_Punctuation}', "");
Expect(1, 41, '\P{^General_Category=	Close_Punctuation}', "");
Expect(0, 40, '\p{General_Category=	Close_Punctuation}', "");
Expect(1, 40, '\p{^General_Category=	Close_Punctuation}', "");
Expect(1, 40, '\P{General_Category=	Close_Punctuation}', "");
Expect(0, 40, '\P{^General_Category=	Close_Punctuation}', "");
Error('\p{Gc=	/a/Pe}');
Error('\P{Gc=	/a/Pe}');
Expect(1, 41, '\p{Gc=pe}', "");
Expect(0, 41, '\p{^Gc=pe}', "");
Expect(0, 41, '\P{Gc=pe}', "");
Expect(1, 41, '\P{^Gc=pe}', "");
Expect(0, 40, '\p{Gc=pe}', "");
Expect(1, 40, '\p{^Gc=pe}', "");
Expect(1, 40, '\P{Gc=pe}', "");
Expect(0, 40, '\P{^Gc=pe}', "");
Expect(1, 41, '\p{Gc:  Pe}', "");
Expect(0, 41, '\p{^Gc:  Pe}', "");
Expect(0, 41, '\P{Gc:  Pe}', "");
Expect(1, 41, '\P{^Gc:  Pe}', "");
Expect(0, 40, '\p{Gc:  Pe}', "");
Expect(1, 40, '\p{^Gc:  Pe}', "");
Expect(1, 40, '\P{Gc:  Pe}', "");
Expect(0, 40, '\P{^Gc:  Pe}', "");
Error('\p{Category=		CLOSE/a/PUNCTUATION}');
Error('\P{Category=		CLOSE/a/PUNCTUATION}');
Expect(1, 41, '\p{Category=closepunctuation}', "");
Expect(0, 41, '\p{^Category=closepunctuation}', "");
Expect(0, 41, '\P{Category=closepunctuation}', "");
Expect(1, 41, '\P{^Category=closepunctuation}', "");
Expect(0, 40, '\p{Category=closepunctuation}', "");
Expect(1, 40, '\p{^Category=closepunctuation}', "");
Expect(1, 40, '\P{Category=closepunctuation}', "");
Expect(0, 40, '\P{^Category=closepunctuation}', "");
Expect(1, 41, '\p{Category= Close	Punctuation}', "");
Expect(0, 41, '\p{^Category= Close	Punctuation}', "");
Expect(0, 41, '\P{Category= Close	Punctuation}', "");
Expect(1, 41, '\P{^Category= Close	Punctuation}', "");
Expect(0, 40, '\p{Category= Close	Punctuation}', "");
Expect(1, 40, '\p{^Category= Close	Punctuation}', "");
Expect(1, 40, '\P{Category= Close	Punctuation}', "");
Expect(0, 40, '\P{^Category= Close	Punctuation}', "");
Error('\p{Is_General_Category=:=-_Pe}');
Error('\P{Is_General_Category=:=-_Pe}');
Expect(1, 41, '\p{Is_General_Category=pe}', "");
Expect(0, 41, '\p{^Is_General_Category=pe}', "");
Expect(0, 41, '\P{Is_General_Category=pe}', "");
Expect(1, 41, '\P{^Is_General_Category=pe}', "");
Expect(0, 40, '\p{Is_General_Category=pe}', "");
Expect(1, 40, '\p{^Is_General_Category=pe}', "");
Expect(1, 40, '\P{Is_General_Category=pe}', "");
Expect(0, 40, '\P{^Is_General_Category=pe}', "");
Expect(1, 41, '\p{Is_General_Category=--Pe}', "");
Expect(0, 41, '\p{^Is_General_Category=--Pe}', "");
Expect(0, 41, '\P{Is_General_Category=--Pe}', "");
Expect(1, 41, '\P{^Is_General_Category=--Pe}', "");
Expect(0, 40, '\p{Is_General_Category=--Pe}', "");
Expect(1, 40, '\p{^Is_General_Category=--Pe}', "");
Expect(1, 40, '\P{Is_General_Category=--Pe}', "");
Expect(0, 40, '\P{^Is_General_Category=--Pe}', "");
Error('\p{Is_Gc= -CLOSE-Punctuation:=}');
Error('\P{Is_Gc= -CLOSE-Punctuation:=}');
Expect(1, 41, '\p{Is_Gc=closepunctuation}', "");
Expect(0, 41, '\p{^Is_Gc=closepunctuation}', "");
Expect(0, 41, '\P{Is_Gc=closepunctuation}', "");
Expect(1, 41, '\P{^Is_Gc=closepunctuation}', "");
Expect(0, 40, '\p{Is_Gc=closepunctuation}', "");
Expect(1, 40, '\p{^Is_Gc=closepunctuation}', "");
Expect(1, 40, '\P{Is_Gc=closepunctuation}', "");
Expect(0, 40, '\P{^Is_Gc=closepunctuation}', "");
Error('\p{Is_Category=/a/  Pe}');
Error('\P{Is_Category=/a/  Pe}');
Expect(1, 41, '\p{Is_Category=pe}', "");
Expect(0, 41, '\p{^Is_Category=pe}', "");
Expect(0, 41, '\P{Is_Category=pe}', "");
Expect(1, 41, '\P{^Is_Category=pe}', "");
Expect(0, 40, '\p{Is_Category=pe}', "");
Expect(1, 40, '\p{^Is_Category=pe}', "");
Expect(1, 40, '\P{Is_Category=pe}', "");
Expect(0, 40, '\P{^Is_Category=pe}', "");
Expect(1, 41, '\p{Is_Category=	-PE}', "");
Expect(0, 41, '\p{^Is_Category=	-PE}', "");
Expect(0, 41, '\P{Is_Category=	-PE}', "");
Expect(1, 41, '\P{^Is_Category=	-PE}', "");
Expect(0, 40, '\p{Is_Category=	-PE}', "");
Expect(1, 40, '\p{^Is_Category=	-PE}', "");
Expect(1, 40, '\P{Is_Category=	-PE}', "");
Expect(0, 40, '\P{^Is_Category=	-PE}', "");
Error('\p{General_Category=:=-_letter}');
Error('\P{General_Category=:=-_letter}');
Expect(1, 90, '\p{General_Category=letter}', "");
Expect(0, 90, '\p{^General_Category=letter}', "");
Expect(0, 90, '\P{General_Category=letter}', "");
Expect(1, 90, '\P{^General_Category=letter}', "");
Expect(0, 64, '\p{General_Category=letter}', "");
Expect(1, 64, '\p{^General_Category=letter}', "");
Expect(1, 64, '\P{General_Category=letter}', "");
Expect(0, 64, '\P{^General_Category=letter}', "");
Expect(1, 90, '\p{General_Category:   	-letter}', "");
Expect(0, 90, '\p{^General_Category:   	-letter}', "");
Expect(0, 90, '\P{General_Category:   	-letter}', "");
Expect(1, 90, '\P{^General_Category:   	-letter}', "");
Expect(0, 64, '\p{General_Category:   	-letter}', "");
Expect(1, 64, '\p{^General_Category:   	-letter}', "");
Expect(1, 64, '\P{General_Category:   	-letter}', "");
Expect(0, 64, '\P{^General_Category:   	-letter}', "");
Error('\p{Gc=	/a/L}');
Error('\P{Gc=	/a/L}');
Expect(1, 90, '\p{Gc=l}', "");
Expect(0, 90, '\p{^Gc=l}', "");
Expect(0, 90, '\P{Gc=l}', "");
Expect(1, 90, '\P{^Gc=l}', "");
Expect(0, 64, '\p{Gc=l}', "");
Expect(1, 64, '\p{^Gc=l}', "");
Expect(1, 64, '\P{Gc=l}', "");
Expect(0, 64, '\P{^Gc=l}', "");
Expect(1, 90, '\p{Gc=_-L}', "");
Expect(0, 90, '\p{^Gc=_-L}', "");
Expect(0, 90, '\P{Gc=_-L}', "");
Expect(1, 90, '\P{^Gc=_-L}', "");
Expect(0, 64, '\p{Gc=_-L}', "");
Expect(1, 64, '\p{^Gc=_-L}', "");
Expect(1, 64, '\P{Gc=_-L}', "");
Expect(0, 64, '\P{^Gc=_-L}', "");
Error('\p{Category=/a/-_letter}');
Error('\P{Category=/a/-_letter}');
Expect(1, 90, '\p{Category=letter}', "");
Expect(0, 90, '\p{^Category=letter}', "");
Expect(0, 90, '\P{Category=letter}', "");
Expect(1, 90, '\P{^Category=letter}', "");
Expect(0, 64, '\p{Category=letter}', "");
Expect(1, 64, '\p{^Category=letter}', "");
Expect(1, 64, '\P{Category=letter}', "");
Expect(0, 64, '\P{^Category=letter}', "");
Expect(1, 90, '\p{Category= 	Letter}', "");
Expect(0, 90, '\p{^Category= 	Letter}', "");
Expect(0, 90, '\P{Category= 	Letter}', "");
Expect(1, 90, '\P{^Category= 	Letter}', "");
Expect(0, 64, '\p{Category= 	Letter}', "");
Expect(1, 64, '\p{^Category= 	Letter}', "");
Expect(1, 64, '\P{Category= 	Letter}', "");
Expect(0, 64, '\P{^Category= 	Letter}', "");
Error('\p{Is_General_Category=/a/- L}');
Error('\P{Is_General_Category=/a/- L}');
Expect(1, 90, '\p{Is_General_Category=l}', "");
Expect(0, 90, '\p{^Is_General_Category=l}', "");
Expect(0, 90, '\P{Is_General_Category=l}', "");
Expect(1, 90, '\P{^Is_General_Category=l}', "");
Expect(0, 64, '\p{Is_General_Category=l}', "");
Expect(1, 64, '\p{^Is_General_Category=l}', "");
Expect(1, 64, '\P{Is_General_Category=l}', "");
Expect(0, 64, '\P{^Is_General_Category=l}', "");
Expect(1, 90, '\p{Is_General_Category=L}', "");
Expect(0, 90, '\p{^Is_General_Category=L}', "");
Expect(0, 90, '\P{Is_General_Category=L}', "");
Expect(1, 90, '\P{^Is_General_Category=L}', "");
Expect(0, 64, '\p{Is_General_Category=L}', "");
Expect(1, 64, '\p{^Is_General_Category=L}', "");
Expect(1, 64, '\P{Is_General_Category=L}', "");
Expect(0, 64, '\P{^Is_General_Category=L}', "");
Error('\p{Is_Gc=	:=Letter}');
Error('\P{Is_Gc=	:=Letter}');
Expect(1, 90, '\p{Is_Gc=letter}', "");
Expect(0, 90, '\p{^Is_Gc=letter}', "");
Expect(0, 90, '\P{Is_Gc=letter}', "");
Expect(1, 90, '\P{^Is_Gc=letter}', "");
Expect(0, 64, '\p{Is_Gc=letter}', "");
Expect(1, 64, '\p{^Is_Gc=letter}', "");
Expect(1, 64, '\P{Is_Gc=letter}', "");
Expect(0, 64, '\P{^Is_Gc=letter}', "");
Expect(1, 90, '\p{Is_Gc: _-LETTER}', "");
Expect(0, 90, '\p{^Is_Gc: _-LETTER}', "");
Expect(0, 90, '\P{Is_Gc: _-LETTER}', "");
Expect(1, 90, '\P{^Is_Gc: _-LETTER}', "");
Expect(0, 64, '\p{Is_Gc: _-LETTER}', "");
Expect(1, 64, '\p{^Is_Gc: _-LETTER}', "");
Expect(1, 64, '\P{Is_Gc: _-LETTER}', "");
Expect(0, 64, '\P{^Is_Gc: _-LETTER}', "");
Error('\p{Is_Category=--L/a/}');
Error('\P{Is_Category=--L/a/}');
Expect(1, 90, '\p{Is_Category=l}', "");
Expect(0, 90, '\p{^Is_Category=l}', "");
Expect(0, 90, '\P{Is_Category=l}', "");
Expect(1, 90, '\P{^Is_Category=l}', "");
Expect(0, 64, '\p{Is_Category=l}', "");
Expect(1, 64, '\p{^Is_Category=l}', "");
Expect(1, 64, '\P{Is_Category=l}', "");
Expect(0, 64, '\P{^Is_Category=l}', "");
Expect(1, 90, '\p{Is_Category=	l}', "");
Expect(0, 90, '\p{^Is_Category=	l}', "");
Expect(0, 90, '\P{Is_Category=	l}', "");
Expect(1, 90, '\P{^Is_Category=	l}', "");
Expect(0, 64, '\p{Is_Category=	l}', "");
Expect(1, 64, '\p{^Is_Category=	l}', "");
Expect(1, 64, '\P{Is_Category=	l}', "");
Expect(0, 64, '\P{^Is_Category=	l}', "");
Error('\p{General_Category= 	Modifier:=Symbol}');
Error('\P{General_Category= 	Modifier:=Symbol}');
Expect(1, 94, '\p{General_Category=modifiersymbol}', "");
Expect(0, 94, '\p{^General_Category=modifiersymbol}', "");
Expect(0, 94, '\P{General_Category=modifiersymbol}', "");
Expect(1, 94, '\P{^General_Category=modifiersymbol}', "");
Expect(0, 93, '\p{General_Category=modifiersymbol}', "");
Expect(1, 93, '\p{^General_Category=modifiersymbol}', "");
Expect(1, 93, '\P{General_Category=modifiersymbol}', "");
Expect(0, 93, '\P{^General_Category=modifiersymbol}', "");
Expect(1, 94, '\p{General_Category= Modifier_Symbol}', "");
Expect(0, 94, '\p{^General_Category= Modifier_Symbol}', "");
Expect(0, 94, '\P{General_Category= Modifier_Symbol}', "");
Expect(1, 94, '\P{^General_Category= Modifier_Symbol}', "");
Expect(0, 93, '\p{General_Category= Modifier_Symbol}', "");
Expect(1, 93, '\p{^General_Category= Modifier_Symbol}', "");
Expect(1, 93, '\P{General_Category= Modifier_Symbol}', "");
Expect(0, 93, '\P{^General_Category= Modifier_Symbol}', "");
Error('\p{Gc=  SK:=}');
Error('\P{Gc=  SK:=}');
Expect(1, 94, '\p{Gc=sk}', "");
Expect(0, 94, '\p{^Gc=sk}', "");
Expect(0, 94, '\P{Gc=sk}', "");
Expect(1, 94, '\P{^Gc=sk}', "");
Expect(0, 93, '\p{Gc=sk}', "");
Expect(1, 93, '\p{^Gc=sk}', "");
Expect(1, 93, '\P{Gc=sk}', "");
Expect(0, 93, '\P{^Gc=sk}', "");
Expect(1, 94, '\p{Gc= 	SK}', "");
Expect(0, 94, '\p{^Gc= 	SK}', "");
Expect(0, 94, '\P{Gc= 	SK}', "");
Expect(1, 94, '\P{^Gc= 	SK}', "");
Expect(0, 93, '\p{Gc= 	SK}', "");
Expect(1, 93, '\p{^Gc= 	SK}', "");
Expect(1, 93, '\P{Gc= 	SK}', "");
Expect(0, 93, '\P{^Gc= 	SK}', "");
Error('\p{Category= _Modifier:=SYMBOL}');
Error('\P{Category= _Modifier:=SYMBOL}');
Expect(1, 94, '\p{Category=modifiersymbol}', "");
Expect(0, 94, '\p{^Category=modifiersymbol}', "");
Expect(0, 94, '\P{Category=modifiersymbol}', "");
Expect(1, 94, '\P{^Category=modifiersymbol}', "");
Expect(0, 93, '\p{Category=modifiersymbol}', "");
Expect(1, 93, '\p{^Category=modifiersymbol}', "");
Expect(1, 93, '\P{Category=modifiersymbol}', "");
Expect(0, 93, '\P{^Category=modifiersymbol}', "");
Expect(1, 94, '\p{Category:   	MODIFIER-symbol}', "");
Expect(0, 94, '\p{^Category:   	MODIFIER-symbol}', "");
Expect(0, 94, '\P{Category:   	MODIFIER-symbol}', "");
Expect(1, 94, '\P{^Category:   	MODIFIER-symbol}', "");
Expect(0, 93, '\p{Category:   	MODIFIER-symbol}', "");
Expect(1, 93, '\p{^Category:   	MODIFIER-symbol}', "");
Expect(1, 93, '\P{Category:   	MODIFIER-symbol}', "");
Expect(0, 93, '\P{^Category:   	MODIFIER-symbol}', "");
Error('\p{Is_General_Category=:=	 Sk}');
Error('\P{Is_General_Category=:=	 Sk}');
Expect(1, 94, '\p{Is_General_Category: sk}', "");
Expect(0, 94, '\p{^Is_General_Category: sk}', "");
Expect(0, 94, '\P{Is_General_Category: sk}', "");
Expect(1, 94, '\P{^Is_General_Category: sk}', "");
Expect(0, 93, '\p{Is_General_Category: sk}', "");
Expect(1, 93, '\p{^Is_General_Category: sk}', "");
Expect(1, 93, '\P{Is_General_Category: sk}', "");
Expect(0, 93, '\P{^Is_General_Category: sk}', "");
Expect(1, 94, '\p{Is_General_Category=_	sk}', "");
Expect(0, 94, '\p{^Is_General_Category=_	sk}', "");
Expect(0, 94, '\P{Is_General_Category=_	sk}', "");
Expect(1, 94, '\P{^Is_General_Category=_	sk}', "");
Expect(0, 93, '\p{Is_General_Category=_	sk}', "");
Expect(1, 93, '\p{^Is_General_Category=_	sk}', "");
Expect(1, 93, '\P{Is_General_Category=_	sk}', "");
Expect(0, 93, '\P{^Is_General_Category=_	sk}', "");
Error('\p{Is_Gc=_ modifier_Symbol/a/}');
Error('\P{Is_Gc=_ modifier_Symbol/a/}');
Expect(1, 94, '\p{Is_Gc=modifiersymbol}', "");
Expect(0, 94, '\p{^Is_Gc=modifiersymbol}', "");
Expect(0, 94, '\P{Is_Gc=modifiersymbol}', "");
Expect(1, 94, '\P{^Is_Gc=modifiersymbol}', "");
Expect(0, 93, '\p{Is_Gc=modifiersymbol}', "");
Expect(1, 93, '\p{^Is_Gc=modifiersymbol}', "");
Expect(1, 93, '\P{Is_Gc=modifiersymbol}', "");
Expect(0, 93, '\P{^Is_Gc=modifiersymbol}', "");
Expect(1, 94, '\p{Is_Gc=	-Modifier_symbol}', "");
Expect(0, 94, '\p{^Is_Gc=	-Modifier_symbol}', "");
Expect(0, 94, '\P{Is_Gc=	-Modifier_symbol}', "");
Expect(1, 94, '\P{^Is_Gc=	-Modifier_symbol}', "");
Expect(0, 93, '\p{Is_Gc=	-Modifier_symbol}', "");
Expect(1, 93, '\p{^Is_Gc=	-Modifier_symbol}', "");
Expect(1, 93, '\P{Is_Gc=	-Modifier_symbol}', "");
Expect(0, 93, '\P{^Is_Gc=	-Modifier_symbol}', "");
Error('\p{Is_Category=:=	SK}');
Error('\P{Is_Category=:=	SK}');
Expect(1, 94, '\p{Is_Category=sk}', "");
Expect(0, 94, '\p{^Is_Category=sk}', "");
Expect(0, 94, '\P{Is_Category=sk}', "");
Expect(1, 94, '\P{^Is_Category=sk}', "");
Expect(0, 93, '\p{Is_Category=sk}', "");
Expect(1, 93, '\p{^Is_Category=sk}', "");
Expect(1, 93, '\P{Is_Category=sk}', "");
Expect(0, 93, '\P{^Is_Category=sk}', "");
Expect(1, 94, '\p{Is_Category=-	SK}', "");
Expect(0, 94, '\p{^Is_Category=-	SK}', "");
Expect(0, 94, '\P{Is_Category=-	SK}', "");
Expect(1, 94, '\P{^Is_Category=-	SK}', "");
Expect(0, 93, '\p{Is_Category=-	SK}', "");
Expect(1, 93, '\p{^Is_Category=-	SK}', "");
Expect(1, 93, '\P{Is_Category=-	SK}', "");
Expect(0, 93, '\P{^Is_Category=-	SK}', "");
Error('\p{General_Category=/a/_Control}');
Error('\P{General_Category=/a/_Control}');
Expect(1, 31, '\p{General_Category=control}', "");
Expect(0, 31, '\p{^General_Category=control}', "");
Expect(0, 31, '\P{General_Category=control}', "");
Expect(1, 31, '\P{^General_Category=control}', "");
Expect(0, 126, '\p{General_Category=control}', "");
Expect(1, 126, '\p{^General_Category=control}', "");
Expect(1, 126, '\P{General_Category=control}', "");
Expect(0, 126, '\P{^General_Category=control}', "");
Expect(1, 31, '\p{General_Category=	 Control}', "");
Expect(0, 31, '\p{^General_Category=	 Control}', "");
Expect(0, 31, '\P{General_Category=	 Control}', "");
Expect(1, 31, '\P{^General_Category=	 Control}', "");
Expect(0, 126, '\p{General_Category=	 Control}', "");
Expect(1, 126, '\p{^General_Category=	 Control}', "");
Expect(1, 126, '\P{General_Category=	 Control}', "");
Expect(0, 126, '\P{^General_Category=	 Control}', "");
Error('\p{Gc=	:=CC}');
Error('\P{Gc=	:=CC}');
Expect(1, 31, '\p{Gc=cc}', "");
Expect(0, 31, '\p{^Gc=cc}', "");
Expect(0, 31, '\P{Gc=cc}', "");
Expect(1, 31, '\P{^Gc=cc}', "");
Expect(0, 126, '\p{Gc=cc}', "");
Expect(1, 126, '\p{^Gc=cc}', "");
Expect(1, 126, '\P{Gc=cc}', "");
Expect(0, 126, '\P{^Gc=cc}', "");
Expect(1, 31, '\p{Gc=-	CC}', "");
Expect(0, 31, '\p{^Gc=-	CC}', "");
Expect(0, 31, '\P{Gc=-	CC}', "");
Expect(1, 31, '\P{^Gc=-	CC}', "");
Expect(0, 126, '\p{Gc=-	CC}', "");
Expect(1, 126, '\p{^Gc=-	CC}', "");
Expect(1, 126, '\P{Gc=-	CC}', "");
Expect(0, 126, '\P{^Gc=-	CC}', "");
Error('\p{Category=_:=cntrl}');
Error('\P{Category=_:=cntrl}');
Expect(1, 31, '\p{Category=cntrl}', "");
Expect(0, 31, '\p{^Category=cntrl}', "");
Expect(0, 31, '\P{Category=cntrl}', "");
Expect(1, 31, '\P{^Category=cntrl}', "");
Expect(0, 126, '\p{Category=cntrl}', "");
Expect(1, 126, '\p{^Category=cntrl}', "");
Expect(1, 126, '\P{Category=cntrl}', "");
Expect(0, 126, '\P{^Category=cntrl}', "");
Expect(1, 31, '\p{Category=CNTRL}', "");
Expect(0, 31, '\p{^Category=CNTRL}', "");
Expect(0, 31, '\P{Category=CNTRL}', "");
Expect(1, 31, '\P{^Category=CNTRL}', "");
Expect(0, 126, '\p{Category=CNTRL}', "");
Expect(1, 126, '\p{^Category=CNTRL}', "");
Expect(1, 126, '\P{Category=CNTRL}', "");
Expect(0, 126, '\P{^Category=CNTRL}', "");
Error('\p{Is_General_Category:__control:=}');
Error('\P{Is_General_Category:__control:=}');
Expect(1, 31, '\p{Is_General_Category:   control}', "");
Expect(0, 31, '\p{^Is_General_Category:   control}', "");
Expect(0, 31, '\P{Is_General_Category:   control}', "");
Expect(1, 31, '\P{^Is_General_Category:   control}', "");
Expect(0, 126, '\p{Is_General_Category:   control}', "");
Expect(1, 126, '\p{^Is_General_Category:   control}', "");
Expect(1, 126, '\P{Is_General_Category:   control}', "");
Expect(0, 126, '\P{^Is_General_Category:   control}', "");
Expect(1, 31, '\p{Is_General_Category=-	control}', "");
Expect(0, 31, '\p{^Is_General_Category=-	control}', "");
Expect(0, 31, '\P{Is_General_Category=-	control}', "");
Expect(1, 31, '\P{^Is_General_Category=-	control}', "");
Expect(0, 126, '\p{Is_General_Category=-	control}', "");
Expect(1, 126, '\p{^Is_General_Category=-	control}', "");
Expect(1, 126, '\P{Is_General_Category=-	control}', "");
Expect(0, 126, '\P{^Is_General_Category=-	control}', "");
Error('\p{Is_Gc:   /a/	_Cc}');
Error('\P{Is_Gc:   /a/	_Cc}');
Expect(1, 31, '\p{Is_Gc=cc}', "");
Expect(0, 31, '\p{^Is_Gc=cc}', "");
Expect(0, 31, '\P{Is_Gc=cc}', "");
Expect(1, 31, '\P{^Is_Gc=cc}', "");
Expect(0, 126, '\p{Is_Gc=cc}', "");
Expect(1, 126, '\p{^Is_Gc=cc}', "");
Expect(1, 126, '\P{Is_Gc=cc}', "");
Expect(0, 126, '\P{^Is_Gc=cc}', "");
Expect(1, 31, '\p{Is_Gc: - Cc}', "");
Expect(0, 31, '\p{^Is_Gc: - Cc}', "");
Expect(0, 31, '\P{Is_Gc: - Cc}', "");
Expect(1, 31, '\P{^Is_Gc: - Cc}', "");
Expect(0, 126, '\p{Is_Gc: - Cc}', "");
Expect(1, 126, '\p{^Is_Gc: - Cc}', "");
Expect(1, 126, '\P{Is_Gc: - Cc}', "");
Expect(0, 126, '\P{^Is_Gc: - Cc}', "");
Error('\p{Is_Category=/a/_-CNTRL}');
Error('\P{Is_Category=/a/_-CNTRL}');
Expect(1, 31, '\p{Is_Category=cntrl}', "");
Expect(0, 31, '\p{^Is_Category=cntrl}', "");
Expect(0, 31, '\P{Is_Category=cntrl}', "");
Expect(1, 31, '\P{^Is_Category=cntrl}', "");
Expect(0, 126, '\p{Is_Category=cntrl}', "");
Expect(1, 126, '\p{^Is_Category=cntrl}', "");
Expect(1, 126, '\P{Is_Category=cntrl}', "");
Expect(0, 126, '\P{^Is_Category=cntrl}', "");
Expect(1, 31, '\p{Is_Category=_-cntrl}', "");
Expect(0, 31, '\p{^Is_Category=_-cntrl}', "");
Expect(0, 31, '\P{Is_Category=_-cntrl}', "");
Expect(1, 31, '\P{^Is_Category=_-cntrl}', "");
Expect(0, 126, '\p{Is_Category=_-cntrl}', "");
Expect(1, 126, '\p{^Is_Category=_-cntrl}', "");
Expect(1, 126, '\P{Is_Category=_-cntrl}', "");
Expect(0, 126, '\P{^Is_Category=_-cntrl}', "");
Error('\p{General_Category=	_Line:=separator}');
Error('\P{General_Category=	_Line:=separator}');
Expect(1, 8232, '\p{General_Category=lineseparator}', "");
Expect(0, 8232, '\p{^General_Category=lineseparator}', "");
Expect(0, 8232, '\P{General_Category=lineseparator}', "");
Expect(1, 8232, '\P{^General_Category=lineseparator}', "");
Expect(0, 8231, '\p{General_Category=lineseparator}', "");
Expect(1, 8231, '\p{^General_Category=lineseparator}', "");
Expect(1, 8231, '\P{General_Category=lineseparator}', "");
Expect(0, 8231, '\P{^General_Category=lineseparator}', "");
Expect(1, 8232, '\p{General_Category= line	Separator}', "");
Expect(0, 8232, '\p{^General_Category= line	Separator}', "");
Expect(0, 8232, '\P{General_Category= line	Separator}', "");
Expect(1, 8232, '\P{^General_Category= line	Separator}', "");
Expect(0, 8231, '\p{General_Category= line	Separator}', "");
Expect(1, 8231, '\p{^General_Category= line	Separator}', "");
Expect(1, 8231, '\P{General_Category= line	Separator}', "");
Expect(0, 8231, '\P{^General_Category= line	Separator}', "");
Error('\p{Gc=-/a/zl}');
Error('\P{Gc=-/a/zl}');
Expect(1, 8232, '\p{Gc=zl}', "");
Expect(0, 8232, '\p{^Gc=zl}', "");
Expect(0, 8232, '\P{Gc=zl}', "");
Expect(1, 8232, '\P{^Gc=zl}', "");
Expect(0, 8231, '\p{Gc=zl}', "");
Expect(1, 8231, '\p{^Gc=zl}', "");
Expect(1, 8231, '\P{Gc=zl}', "");
Expect(0, 8231, '\P{^Gc=zl}', "");
Expect(1, 8232, '\p{Gc= 	zl}', "");
Expect(0, 8232, '\p{^Gc= 	zl}', "");
Expect(0, 8232, '\P{Gc= 	zl}', "");
Expect(1, 8232, '\P{^Gc= 	zl}', "");
Expect(0, 8231, '\p{Gc= 	zl}', "");
Expect(1, 8231, '\p{^Gc= 	zl}', "");
Expect(1, 8231, '\P{Gc= 	zl}', "");
Expect(0, 8231, '\P{^Gc= 	zl}', "");
Error('\p{Category:	_/a/LINE separator}');
Error('\P{Category:	_/a/LINE separator}');
Expect(1, 8232, '\p{Category: lineseparator}', "");
Expect(0, 8232, '\p{^Category: lineseparator}', "");
Expect(0, 8232, '\P{Category: lineseparator}', "");
Expect(1, 8232, '\P{^Category: lineseparator}', "");
Expect(0, 8231, '\p{Category: lineseparator}', "");
Expect(1, 8231, '\p{^Category: lineseparator}', "");
Expect(1, 8231, '\P{Category: lineseparator}', "");
Expect(0, 8231, '\P{^Category: lineseparator}', "");
Expect(1, 8232, '\p{Category=	line SEPARATOR}', "");
Expect(0, 8232, '\p{^Category=	line SEPARATOR}', "");
Expect(0, 8232, '\P{Category=	line SEPARATOR}', "");
Expect(1, 8232, '\P{^Category=	line SEPARATOR}', "");
Expect(0, 8231, '\p{Category=	line SEPARATOR}', "");
Expect(1, 8231, '\p{^Category=	line SEPARATOR}', "");
Expect(1, 8231, '\P{Category=	line SEPARATOR}', "");
Expect(0, 8231, '\P{^Category=	line SEPARATOR}', "");
Error('\p{Is_General_Category:   	_Zl/a/}');
Error('\P{Is_General_Category:   	_Zl/a/}');
Expect(1, 8232, '\p{Is_General_Category=zl}', "");
Expect(0, 8232, '\p{^Is_General_Category=zl}', "");
Expect(0, 8232, '\P{Is_General_Category=zl}', "");
Expect(1, 8232, '\P{^Is_General_Category=zl}', "");
Expect(0, 8231, '\p{Is_General_Category=zl}', "");
Expect(1, 8231, '\p{^Is_General_Category=zl}', "");
Expect(1, 8231, '\P{Is_General_Category=zl}', "");
Expect(0, 8231, '\P{^Is_General_Category=zl}', "");
Expect(1, 8232, '\p{Is_General_Category=--ZL}', "");
Expect(0, 8232, '\p{^Is_General_Category=--ZL}', "");
Expect(0, 8232, '\P{Is_General_Category=--ZL}', "");
Expect(1, 8232, '\P{^Is_General_Category=--ZL}', "");
Expect(0, 8231, '\p{Is_General_Category=--ZL}', "");
Expect(1, 8231, '\p{^Is_General_Category=--ZL}', "");
Expect(1, 8231, '\P{Is_General_Category=--ZL}', "");
Expect(0, 8231, '\P{^Is_General_Category=--ZL}', "");
Error('\p{Is_Gc= 	Line:=SEPARATOR}');
Error('\P{Is_Gc= 	Line:=SEPARATOR}');
Expect(1, 8232, '\p{Is_Gc=lineseparator}', "");
Expect(0, 8232, '\p{^Is_Gc=lineseparator}', "");
Expect(0, 8232, '\P{Is_Gc=lineseparator}', "");
Expect(1, 8232, '\P{^Is_Gc=lineseparator}', "");
Expect(0, 8231, '\p{Is_Gc=lineseparator}', "");
Expect(1, 8231, '\p{^Is_Gc=lineseparator}', "");
Expect(1, 8231, '\P{Is_Gc=lineseparator}', "");
Expect(0, 8231, '\P{^Is_Gc=lineseparator}', "");
Expect(1, 8232, '\p{Is_Gc=-Line-separator}', "");
Expect(0, 8232, '\p{^Is_Gc=-Line-separator}', "");
Expect(0, 8232, '\P{Is_Gc=-Line-separator}', "");
Expect(1, 8232, '\P{^Is_Gc=-Line-separator}', "");
Expect(0, 8231, '\p{Is_Gc=-Line-separator}', "");
Expect(1, 8231, '\p{^Is_Gc=-Line-separator}', "");
Expect(1, 8231, '\P{Is_Gc=-Line-separator}', "");
Expect(0, 8231, '\P{^Is_Gc=-Line-separator}', "");
Error('\p{Is_Category:   /a/	ZL}');
Error('\P{Is_Category:   /a/	ZL}');
Expect(1, 8232, '\p{Is_Category:	zl}', "");
Expect(0, 8232, '\p{^Is_Category:	zl}', "");
Expect(0, 8232, '\P{Is_Category:	zl}', "");
Expect(1, 8232, '\P{^Is_Category:	zl}', "");
Expect(0, 8231, '\p{Is_Category:	zl}', "");
Expect(1, 8231, '\p{^Is_Category:	zl}', "");
Expect(1, 8231, '\P{Is_Category:	zl}', "");
Expect(0, 8231, '\P{^Is_Category:	zl}', "");
Expect(1, 8232, '\p{Is_Category: -_zl}', "");
Expect(0, 8232, '\p{^Is_Category: -_zl}', "");
Expect(0, 8232, '\P{Is_Category: -_zl}', "");
Expect(1, 8232, '\P{^Is_Category: -_zl}', "");
Expect(0, 8231, '\p{Is_Category: -_zl}', "");
Expect(1, 8231, '\p{^Is_Category: -_zl}', "");
Expect(1, 8231, '\P{Is_Category: -_zl}', "");
Expect(0, 8231, '\P{^Is_Category: -_zl}', "");
Error('\p{General_Category=-	Open:=Punctuation}');
Error('\P{General_Category=-	Open:=Punctuation}');
Expect(1, 40, '\p{General_Category=openpunctuation}', "");
Expect(0, 40, '\p{^General_Category=openpunctuation}', "");
Expect(0, 40, '\P{General_Category=openpunctuation}', "");
Expect(1, 40, '\P{^General_Category=openpunctuation}', "");
Expect(0, 39, '\p{General_Category=openpunctuation}', "");
Expect(1, 39, '\p{^General_Category=openpunctuation}', "");
Expect(1, 39, '\P{General_Category=openpunctuation}', "");
Expect(0, 39, '\P{^General_Category=openpunctuation}', "");
Expect(1, 40, '\p{General_Category=	 Open_punctuation}', "");
Expect(0, 40, '\p{^General_Category=	 Open_punctuation}', "");
Expect(0, 40, '\P{General_Category=	 Open_punctuation}', "");
Expect(1, 40, '\P{^General_Category=	 Open_punctuation}', "");
Expect(0, 39, '\p{General_Category=	 Open_punctuation}', "");
Expect(1, 39, '\p{^General_Category=	 Open_punctuation}', "");
Expect(1, 39, '\P{General_Category=	 Open_punctuation}', "");
Expect(0, 39, '\P{^General_Category=	 Open_punctuation}', "");
Error('\p{Gc= :=ps}');
Error('\P{Gc= :=ps}');
Expect(1, 40, '\p{Gc=ps}', "");
Expect(0, 40, '\p{^Gc=ps}', "");
Expect(0, 40, '\P{Gc=ps}', "");
Expect(1, 40, '\P{^Gc=ps}', "");
Expect(0, 39, '\p{Gc=ps}', "");
Expect(1, 39, '\p{^Gc=ps}', "");
Expect(1, 39, '\P{Gc=ps}', "");
Expect(0, 39, '\P{^Gc=ps}', "");
Expect(1, 40, '\p{Gc: -	Ps}', "");
Expect(0, 40, '\p{^Gc: -	Ps}', "");
Expect(0, 40, '\P{Gc: -	Ps}', "");
Expect(1, 40, '\P{^Gc: -	Ps}', "");
Expect(0, 39, '\p{Gc: -	Ps}', "");
Expect(1, 39, '\p{^Gc: -	Ps}', "");
Expect(1, 39, '\P{Gc: -	Ps}', "");
Expect(0, 39, '\P{^Gc: -	Ps}', "");
Error('\p{Category=- open:=Punctuation}');
Error('\P{Category=- open:=Punctuation}');
Expect(1, 40, '\p{Category=openpunctuation}', "");
Expect(0, 40, '\p{^Category=openpunctuation}', "");
Expect(0, 40, '\P{Category=openpunctuation}', "");
Expect(1, 40, '\P{^Category=openpunctuation}', "");
Expect(0, 39, '\p{Category=openpunctuation}', "");
Expect(1, 39, '\p{^Category=openpunctuation}', "");
Expect(1, 39, '\P{Category=openpunctuation}', "");
Expect(0, 39, '\P{^Category=openpunctuation}', "");
Expect(1, 40, '\p{Category=  Open	Punctuation}', "");
Expect(0, 40, '\p{^Category=  Open	Punctuation}', "");
Expect(0, 40, '\P{Category=  Open	Punctuation}', "");
Expect(1, 40, '\P{^Category=  Open	Punctuation}', "");
Expect(0, 39, '\p{Category=  Open	Punctuation}', "");
Expect(1, 39, '\p{^Category=  Open	Punctuation}', "");
Expect(1, 39, '\P{Category=  Open	Punctuation}', "");
Expect(0, 39, '\P{^Category=  Open	Punctuation}', "");
Error('\p{Is_General_Category:   :=_	PS}');
Error('\P{Is_General_Category:   :=_	PS}');
Expect(1, 40, '\p{Is_General_Category=ps}', "");
Expect(0, 40, '\p{^Is_General_Category=ps}', "");
Expect(0, 40, '\P{Is_General_Category=ps}', "");
Expect(1, 40, '\P{^Is_General_Category=ps}', "");
Expect(0, 39, '\p{Is_General_Category=ps}', "");
Expect(1, 39, '\p{^Is_General_Category=ps}', "");
Expect(1, 39, '\P{Is_General_Category=ps}', "");
Expect(0, 39, '\P{^Is_General_Category=ps}', "");
Expect(1, 40, '\p{Is_General_Category= 	Ps}', "");
Expect(0, 40, '\p{^Is_General_Category= 	Ps}', "");
Expect(0, 40, '\P{Is_General_Category= 	Ps}', "");
Expect(1, 40, '\P{^Is_General_Category= 	Ps}', "");
Expect(0, 39, '\p{Is_General_Category= 	Ps}', "");
Expect(1, 39, '\p{^Is_General_Category= 	Ps}', "");
Expect(1, 39, '\P{Is_General_Category= 	Ps}', "");
Expect(0, 39, '\P{^Is_General_Category= 	Ps}', "");
Error('\p{Is_Gc=/a/open_Punctuation}');
Error('\P{Is_Gc=/a/open_Punctuation}');
Expect(1, 40, '\p{Is_Gc=openpunctuation}', "");
Expect(0, 40, '\p{^Is_Gc=openpunctuation}', "");
Expect(0, 40, '\P{Is_Gc=openpunctuation}', "");
Expect(1, 40, '\P{^Is_Gc=openpunctuation}', "");
Expect(0, 39, '\p{Is_Gc=openpunctuation}', "");
Expect(1, 39, '\p{^Is_Gc=openpunctuation}', "");
Expect(1, 39, '\P{Is_Gc=openpunctuation}', "");
Expect(0, 39, '\P{^Is_Gc=openpunctuation}', "");
Expect(1, 40, '\p{Is_Gc=-openPunctuation}', "");
Expect(0, 40, '\p{^Is_Gc=-openPunctuation}', "");
Expect(0, 40, '\P{Is_Gc=-openPunctuation}', "");
Expect(1, 40, '\P{^Is_Gc=-openPunctuation}', "");
Expect(0, 39, '\p{Is_Gc=-openPunctuation}', "");
Expect(1, 39, '\p{^Is_Gc=-openPunctuation}', "");
Expect(1, 39, '\P{Is_Gc=-openPunctuation}', "");
Expect(0, 39, '\P{^Is_Gc=-openPunctuation}', "");
Error('\p{Is_Category=/a/ 	ps}');
Error('\P{Is_Category=/a/ 	ps}');
Expect(1, 40, '\p{Is_Category:	ps}', "");
Expect(0, 40, '\p{^Is_Category:	ps}', "");
Expect(0, 40, '\P{Is_Category:	ps}', "");
Expect(1, 40, '\P{^Is_Category:	ps}', "");
Expect(0, 39, '\p{Is_Category:	ps}', "");
Expect(1, 39, '\p{^Is_Category:	ps}', "");
Expect(1, 39, '\P{Is_Category:	ps}', "");
Expect(0, 39, '\P{^Is_Category:	ps}', "");
Expect(1, 40, '\p{Is_Category= Ps}', "");
Expect(0, 40, '\p{^Is_Category= Ps}', "");
Expect(0, 40, '\P{Is_Category= Ps}', "");
Expect(1, 40, '\P{^Is_Category= Ps}', "");
Expect(0, 39, '\p{Is_Category= Ps}', "");
Expect(1, 39, '\p{^Is_Category= Ps}', "");
Expect(1, 39, '\P{Is_Category= Ps}', "");
Expect(0, 39, '\P{^Is_Category= Ps}', "");
Error('\p{General_Category=-:=MATH	Symbol}');
Error('\P{General_Category=-:=MATH	Symbol}');
Expect(1, 43, '\p{General_Category=mathsymbol}', "");
Expect(0, 43, '\p{^General_Category=mathsymbol}', "");
Expect(0, 43, '\P{General_Category=mathsymbol}', "");
Expect(1, 43, '\P{^General_Category=mathsymbol}', "");
Expect(0, 42, '\p{General_Category=mathsymbol}', "");
Expect(1, 42, '\p{^General_Category=mathsymbol}', "");
Expect(1, 42, '\P{General_Category=mathsymbol}', "");
Expect(0, 42, '\P{^General_Category=mathsymbol}', "");
Expect(1, 43, '\p{General_Category= _Math_Symbol}', "");
Expect(0, 43, '\p{^General_Category= _Math_Symbol}', "");
Expect(0, 43, '\P{General_Category= _Math_Symbol}', "");
Expect(1, 43, '\P{^General_Category= _Math_Symbol}', "");
Expect(0, 42, '\p{General_Category= _Math_Symbol}', "");
Expect(1, 42, '\p{^General_Category= _Math_Symbol}', "");
Expect(1, 42, '\P{General_Category= _Math_Symbol}', "");
Expect(0, 42, '\P{^General_Category= _Math_Symbol}', "");
Error('\p{Gc=:=--Sm}');
Error('\P{Gc=:=--Sm}');
Expect(1, 43, '\p{Gc=sm}', "");
Expect(0, 43, '\p{^Gc=sm}', "");
Expect(0, 43, '\P{Gc=sm}', "");
Expect(1, 43, '\P{^Gc=sm}', "");
Expect(0, 42, '\p{Gc=sm}', "");
Expect(1, 42, '\p{^Gc=sm}', "");
Expect(1, 42, '\P{Gc=sm}', "");
Expect(0, 42, '\P{^Gc=sm}', "");
Expect(1, 43, '\p{Gc:   sm}', "");
Expect(0, 43, '\p{^Gc:   sm}', "");
Expect(0, 43, '\P{Gc:   sm}', "");
Expect(1, 43, '\P{^Gc:   sm}', "");
Expect(0, 42, '\p{Gc:   sm}', "");
Expect(1, 42, '\p{^Gc:   sm}', "");
Expect(1, 42, '\P{Gc:   sm}', "");
Expect(0, 42, '\P{^Gc:   sm}', "");
Error('\p{Category= _Math_symbol:=}');
Error('\P{Category= _Math_symbol:=}');
Expect(1, 43, '\p{Category:   mathsymbol}', "");
Expect(0, 43, '\p{^Category:   mathsymbol}', "");
Expect(0, 43, '\P{Category:   mathsymbol}', "");
Expect(1, 43, '\P{^Category:   mathsymbol}', "");
Expect(0, 42, '\p{Category:   mathsymbol}', "");
Expect(1, 42, '\p{^Category:   mathsymbol}', "");
Expect(1, 42, '\P{Category:   mathsymbol}', "");
Expect(0, 42, '\P{^Category:   mathsymbol}', "");
Expect(1, 43, '\p{Category:	_-Math-Symbol}', "");
Expect(0, 43, '\p{^Category:	_-Math-Symbol}', "");
Expect(0, 43, '\P{Category:	_-Math-Symbol}', "");
Expect(1, 43, '\P{^Category:	_-Math-Symbol}', "");
Expect(0, 42, '\p{Category:	_-Math-Symbol}', "");
Expect(1, 42, '\p{^Category:	_-Math-Symbol}', "");
Expect(1, 42, '\P{Category:	_-Math-Symbol}', "");
Expect(0, 42, '\P{^Category:	_-Math-Symbol}', "");
Error('\p{Is_General_Category=/a/Sm}');
Error('\P{Is_General_Category=/a/Sm}');
Expect(1, 43, '\p{Is_General_Category:sm}', "");
Expect(0, 43, '\p{^Is_General_Category:sm}', "");
Expect(0, 43, '\P{Is_General_Category:sm}', "");
Expect(1, 43, '\P{^Is_General_Category:sm}', "");
Expect(0, 42, '\p{Is_General_Category:sm}', "");
Expect(1, 42, '\p{^Is_General_Category:sm}', "");
Expect(1, 42, '\P{Is_General_Category:sm}', "");
Expect(0, 42, '\P{^Is_General_Category:sm}', "");
Expect(1, 43, '\p{Is_General_Category=SM}', "");
Expect(0, 43, '\p{^Is_General_Category=SM}', "");
Expect(0, 43, '\P{Is_General_Category=SM}', "");
Expect(1, 43, '\P{^Is_General_Category=SM}', "");
Expect(0, 42, '\p{Is_General_Category=SM}', "");
Expect(1, 42, '\p{^Is_General_Category=SM}', "");
Expect(1, 42, '\P{Is_General_Category=SM}', "");
Expect(0, 42, '\P{^Is_General_Category=SM}', "");
Error('\p{Is_Gc=_:=math	Symbol}');
Error('\P{Is_Gc=_:=math	Symbol}');
Expect(1, 43, '\p{Is_Gc=mathsymbol}', "");
Expect(0, 43, '\p{^Is_Gc=mathsymbol}', "");
Expect(0, 43, '\P{Is_Gc=mathsymbol}', "");
Expect(1, 43, '\P{^Is_Gc=mathsymbol}', "");
Expect(0, 42, '\p{Is_Gc=mathsymbol}', "");
Expect(1, 42, '\p{^Is_Gc=mathsymbol}', "");
Expect(1, 42, '\P{Is_Gc=mathsymbol}', "");
Expect(0, 42, '\P{^Is_Gc=mathsymbol}', "");
Expect(1, 43, '\p{Is_Gc=	Math_Symbol}', "");
Expect(0, 43, '\p{^Is_Gc=	Math_Symbol}', "");
Expect(0, 43, '\P{Is_Gc=	Math_Symbol}', "");
Expect(1, 43, '\P{^Is_Gc=	Math_Symbol}', "");
Expect(0, 42, '\p{Is_Gc=	Math_Symbol}', "");
Expect(1, 42, '\p{^Is_Gc=	Math_Symbol}', "");
Expect(1, 42, '\P{Is_Gc=	Math_Symbol}', "");
Expect(0, 42, '\P{^Is_Gc=	Math_Symbol}', "");
Error('\p{Is_Category=	Sm:=}');
Error('\P{Is_Category=	Sm:=}');
Expect(1, 43, '\p{Is_Category=sm}', "");
Expect(0, 43, '\p{^Is_Category=sm}', "");
Expect(0, 43, '\P{Is_Category=sm}', "");
Expect(1, 43, '\P{^Is_Category=sm}', "");
Expect(0, 42, '\p{Is_Category=sm}', "");
Expect(1, 42, '\p{^Is_Category=sm}', "");
Expect(1, 42, '\P{Is_Category=sm}', "");
Expect(0, 42, '\P{^Is_Category=sm}', "");
Expect(1, 43, '\p{Is_Category=__sm}', "");
Expect(0, 43, '\p{^Is_Category=__sm}', "");
Expect(0, 43, '\P{Is_Category=__sm}', "");
Expect(1, 43, '\P{^Is_Category=__sm}', "");
Expect(0, 42, '\p{Is_Category=__sm}', "");
Expect(1, 42, '\p{^Is_Category=__sm}', "");
Expect(1, 42, '\P{Is_Category=__sm}', "");
Expect(0, 42, '\P{^Is_Category=__sm}', "");
Error('\p{General_Category=_Other letter:=}');
Error('\P{General_Category=_Other letter:=}');
Expect(1, 443, '\p{General_Category:otherletter}', "");
Expect(0, 443, '\p{^General_Category:otherletter}', "");
Expect(0, 443, '\P{General_Category:otherletter}', "");
Expect(1, 443, '\P{^General_Category:otherletter}', "");
Expect(0, 442, '\p{General_Category:otherletter}', "");
Expect(1, 442, '\p{^General_Category:otherletter}', "");
Expect(1, 442, '\P{General_Category:otherletter}', "");
Expect(0, 442, '\P{^General_Category:otherletter}', "");
Expect(1, 443, '\p{General_Category= Other	Letter}', "");
Expect(0, 443, '\p{^General_Category= Other	Letter}', "");
Expect(0, 443, '\P{General_Category= Other	Letter}', "");
Expect(1, 443, '\P{^General_Category= Other	Letter}', "");
Expect(0, 442, '\p{General_Category= Other	Letter}', "");
Expect(1, 442, '\p{^General_Category= Other	Letter}', "");
Expect(1, 442, '\P{General_Category= Other	Letter}', "");
Expect(0, 442, '\P{^General_Category= Other	Letter}', "");
Error('\p{Gc=/a/	-lo}');
Error('\P{Gc=/a/	-lo}');
Expect(1, 443, '\p{Gc:lo}', "");
Expect(0, 443, '\p{^Gc:lo}', "");
Expect(0, 443, '\P{Gc:lo}', "");
Expect(1, 443, '\P{^Gc:lo}', "");
Expect(0, 442, '\p{Gc:lo}', "");
Expect(1, 442, '\p{^Gc:lo}', "");
Expect(1, 442, '\P{Gc:lo}', "");
Expect(0, 442, '\P{^Gc:lo}', "");
Expect(1, 443, '\p{Gc=-lo}', "");
Expect(0, 443, '\p{^Gc=-lo}', "");
Expect(0, 443, '\P{Gc=-lo}', "");
Expect(1, 443, '\P{^Gc=-lo}', "");
Expect(0, 442, '\p{Gc=-lo}', "");
Expect(1, 442, '\p{^Gc=-lo}', "");
Expect(1, 442, '\P{Gc=-lo}', "");
Expect(0, 442, '\P{^Gc=-lo}', "");
Error('\p{Category=-_other	Letter:=}');
Error('\P{Category=-_other	Letter:=}');
Expect(1, 443, '\p{Category=otherletter}', "");
Expect(0, 443, '\p{^Category=otherletter}', "");
Expect(0, 443, '\P{Category=otherletter}', "");
Expect(1, 443, '\P{^Category=otherletter}', "");
Expect(0, 442, '\p{Category=otherletter}', "");
Expect(1, 442, '\p{^Category=otherletter}', "");
Expect(1, 442, '\P{Category=otherletter}', "");
Expect(0, 442, '\P{^Category=otherletter}', "");
Expect(1, 443, '\p{Category=	Other Letter}', "");
Expect(0, 443, '\p{^Category=	Other Letter}', "");
Expect(0, 443, '\P{Category=	Other Letter}', "");
Expect(1, 443, '\P{^Category=	Other Letter}', "");
Expect(0, 442, '\p{Category=	Other Letter}', "");
Expect(1, 442, '\p{^Category=	Other Letter}', "");
Expect(1, 442, '\P{Category=	Other Letter}', "");
Expect(0, 442, '\P{^Category=	Other Letter}', "");
Error('\p{Is_General_Category= _Lo:=}');
Error('\P{Is_General_Category= _Lo:=}');
Expect(1, 443, '\p{Is_General_Category=lo}', "");
Expect(0, 443, '\p{^Is_General_Category=lo}', "");
Expect(0, 443, '\P{Is_General_Category=lo}', "");
Expect(1, 443, '\P{^Is_General_Category=lo}', "");
Expect(0, 442, '\p{Is_General_Category=lo}', "");
Expect(1, 442, '\p{^Is_General_Category=lo}', "");
Expect(1, 442, '\P{Is_General_Category=lo}', "");
Expect(0, 442, '\P{^Is_General_Category=lo}', "");
Expect(1, 443, '\p{Is_General_Category=__LO}', "");
Expect(0, 443, '\p{^Is_General_Category=__LO}', "");
Expect(0, 443, '\P{Is_General_Category=__LO}', "");
Expect(1, 443, '\P{^Is_General_Category=__LO}', "");
Expect(0, 442, '\p{Is_General_Category=__LO}', "");
Expect(1, 442, '\p{^Is_General_Category=__LO}', "");
Expect(1, 442, '\P{Is_General_Category=__LO}', "");
Expect(0, 442, '\P{^Is_General_Category=__LO}', "");
Error('\p{Is_Gc=_OTHER LETTER/a/}');
Error('\P{Is_Gc=_OTHER LETTER/a/}');
Expect(1, 443, '\p{Is_Gc=otherletter}', "");
Expect(0, 443, '\p{^Is_Gc=otherletter}', "");
Expect(0, 443, '\P{Is_Gc=otherletter}', "");
Expect(1, 443, '\P{^Is_Gc=otherletter}', "");
Expect(0, 442, '\p{Is_Gc=otherletter}', "");
Expect(1, 442, '\p{^Is_Gc=otherletter}', "");
Expect(1, 442, '\P{Is_Gc=otherletter}', "");
Expect(0, 442, '\P{^Is_Gc=otherletter}', "");
Expect(1, 443, '\p{Is_Gc= -Other	Letter}', "");
Expect(0, 443, '\p{^Is_Gc= -Other	Letter}', "");
Expect(0, 443, '\P{Is_Gc= -Other	Letter}', "");
Expect(1, 443, '\P{^Is_Gc= -Other	Letter}', "");
Expect(0, 442, '\p{Is_Gc= -Other	Letter}', "");
Expect(1, 442, '\p{^Is_Gc= -Other	Letter}', "");
Expect(1, 442, '\P{Is_Gc= -Other	Letter}', "");
Expect(0, 442, '\P{^Is_Gc= -Other	Letter}', "");
Error('\p{Is_Category=-	Lo:=}');
Error('\P{Is_Category=-	Lo:=}');
Expect(1, 443, '\p{Is_Category:lo}', "");
Expect(0, 443, '\p{^Is_Category:lo}', "");
Expect(0, 443, '\P{Is_Category:lo}', "");
Expect(1, 443, '\P{^Is_Category:lo}', "");
Expect(0, 442, '\p{Is_Category:lo}', "");
Expect(1, 442, '\p{^Is_Category:lo}', "");
Expect(1, 442, '\P{Is_Category:lo}', "");
Expect(0, 442, '\P{^Is_Category:lo}', "");
Expect(1, 443, '\p{Is_Category:  -lo}', "");
Expect(0, 443, '\p{^Is_Category:  -lo}', "");
Expect(0, 443, '\P{Is_Category:  -lo}', "");
Expect(1, 443, '\P{^Is_Category:  -lo}', "");
Expect(0, 442, '\p{Is_Category:  -lo}', "");
Expect(1, 442, '\p{^Is_Category:  -lo}', "");
Expect(1, 442, '\P{Is_Category:  -lo}', "");
Expect(0, 442, '\P{^Is_Category:  -lo}', "");
Error('\p{General_Category=:= _separator}');
Error('\P{General_Category=:= _separator}');
Expect(1, 32, '\p{General_Category=separator}', "");
Expect(0, 32, '\p{^General_Category=separator}', "");
Expect(0, 32, '\P{General_Category=separator}', "");
Expect(1, 32, '\P{^General_Category=separator}', "");
Expect(0, 31, '\p{General_Category=separator}', "");
Expect(1, 31, '\p{^General_Category=separator}', "");
Expect(1, 31, '\P{General_Category=separator}', "");
Expect(0, 31, '\P{^General_Category=separator}', "");
Expect(1, 32, '\p{General_Category=--Separator}', "");
Expect(0, 32, '\p{^General_Category=--Separator}', "");
Expect(0, 32, '\P{General_Category=--Separator}', "");
Expect(1, 32, '\P{^General_Category=--Separator}', "");
Expect(0, 31, '\p{General_Category=--Separator}', "");
Expect(1, 31, '\p{^General_Category=--Separator}', "");
Expect(1, 31, '\P{General_Category=--Separator}', "");
Expect(0, 31, '\P{^General_Category=--Separator}', "");
Error('\p{Gc=/a/Z}');
Error('\P{Gc=/a/Z}');
Expect(1, 32, '\p{Gc=z}', "");
Expect(0, 32, '\p{^Gc=z}', "");
Expect(0, 32, '\P{Gc=z}', "");
Expect(1, 32, '\P{^Gc=z}', "");
Expect(0, 31, '\p{Gc=z}', "");
Expect(1, 31, '\p{^Gc=z}', "");
Expect(1, 31, '\P{Gc=z}', "");
Expect(0, 31, '\P{^Gc=z}', "");
Expect(1, 32, '\p{Gc=	z}', "");
Expect(0, 32, '\p{^Gc=	z}', "");
Expect(0, 32, '\P{Gc=	z}', "");
Expect(1, 32, '\P{^Gc=	z}', "");
Expect(0, 31, '\p{Gc=	z}', "");
Expect(1, 31, '\p{^Gc=	z}', "");
Expect(1, 31, '\P{Gc=	z}', "");
Expect(0, 31, '\P{^Gc=	z}', "");
Error('\p{Category=-Separator:=}');
Error('\P{Category=-Separator:=}');
Expect(1, 32, '\p{Category=separator}', "");
Expect(0, 32, '\p{^Category=separator}', "");
Expect(0, 32, '\P{Category=separator}', "");
Expect(1, 32, '\P{^Category=separator}', "");
Expect(0, 31, '\p{Category=separator}', "");
Expect(1, 31, '\p{^Category=separator}', "");
Expect(1, 31, '\P{Category=separator}', "");
Expect(0, 31, '\P{^Category=separator}', "");
Expect(1, 32, '\p{Category=	-Separator}', "");
Expect(0, 32, '\p{^Category=	-Separator}', "");
Expect(0, 32, '\P{Category=	-Separator}', "");
Expect(1, 32, '\P{^Category=	-Separator}', "");
Expect(0, 31, '\p{Category=	-Separator}', "");
Expect(1, 31, '\p{^Category=	-Separator}', "");
Expect(1, 31, '\P{Category=	-Separator}', "");
Expect(0, 31, '\P{^Category=	-Separator}', "");
Error('\p{Is_General_Category=/a/Z}');
Error('\P{Is_General_Category=/a/Z}');
Expect(1, 32, '\p{Is_General_Category=z}', "");
Expect(0, 32, '\p{^Is_General_Category=z}', "");
Expect(0, 32, '\P{Is_General_Category=z}', "");
Expect(1, 32, '\P{^Is_General_Category=z}', "");
Expect(0, 31, '\p{Is_General_Category=z}', "");
Expect(1, 31, '\p{^Is_General_Category=z}', "");
Expect(1, 31, '\P{Is_General_Category=z}', "");
Expect(0, 31, '\P{^Is_General_Category=z}', "");
Expect(1, 32, '\p{Is_General_Category= 	Z}', "");
Expect(0, 32, '\p{^Is_General_Category= 	Z}', "");
Expect(0, 32, '\P{Is_General_Category= 	Z}', "");
Expect(1, 32, '\P{^Is_General_Category= 	Z}', "");
Expect(0, 31, '\p{Is_General_Category= 	Z}', "");
Expect(1, 31, '\p{^Is_General_Category= 	Z}', "");
Expect(1, 31, '\P{Is_General_Category= 	Z}', "");
Expect(0, 31, '\P{^Is_General_Category= 	Z}', "");
Error('\p{Is_Gc=/a/ Separator}');
Error('\P{Is_Gc=/a/ Separator}');
Expect(1, 32, '\p{Is_Gc=separator}', "");
Expect(0, 32, '\p{^Is_Gc=separator}', "");
Expect(0, 32, '\P{Is_Gc=separator}', "");
Expect(1, 32, '\P{^Is_Gc=separator}', "");
Expect(0, 31, '\p{Is_Gc=separator}', "");
Expect(1, 31, '\p{^Is_Gc=separator}', "");
Expect(1, 31, '\P{Is_Gc=separator}', "");
Expect(0, 31, '\P{^Is_Gc=separator}', "");
Expect(1, 32, '\p{Is_Gc=		separator}', "");
Expect(0, 32, '\p{^Is_Gc=		separator}', "");
Expect(0, 32, '\P{Is_Gc=		separator}', "");
Expect(1, 32, '\P{^Is_Gc=		separator}', "");
Expect(0, 31, '\p{Is_Gc=		separator}', "");
Expect(1, 31, '\p{^Is_Gc=		separator}', "");
Expect(1, 31, '\P{Is_Gc=		separator}', "");
Expect(0, 31, '\P{^Is_Gc=		separator}', "");
Error('\p{Is_Category=		z/a/}');
Error('\P{Is_Category=		z/a/}');
Expect(1, 32, '\p{Is_Category=z}', "");
Expect(0, 32, '\p{^Is_Category=z}', "");
Expect(0, 32, '\P{Is_Category=z}', "");
Expect(1, 32, '\P{^Is_Category=z}', "");
Expect(0, 31, '\p{Is_Category=z}', "");
Expect(1, 31, '\p{^Is_Category=z}', "");
Expect(1, 31, '\P{Is_Category=z}', "");
Expect(0, 31, '\P{^Is_Category=z}', "");
Expect(1, 32, '\p{Is_Category=__Z}', "");
Expect(0, 32, '\p{^Is_Category=__Z}', "");
Expect(0, 32, '\P{Is_Category=__Z}', "");
Expect(1, 32, '\P{^Is_Category=__Z}', "");
Expect(0, 31, '\p{Is_Category=__Z}', "");
Expect(1, 31, '\p{^Is_Category=__Z}', "");
Expect(1, 31, '\P{Is_Category=__Z}', "");
Expect(0, 31, '\P{^Is_Category=__Z}', "");
Error('\p{General_Category=/a/ _otherpunctuation}');
Error('\P{General_Category=/a/ _otherpunctuation}');
Expect(1, 35, '\p{General_Category=otherpunctuation}', "");
Expect(0, 35, '\p{^General_Category=otherpunctuation}', "");
Expect(0, 35, '\P{General_Category=otherpunctuation}', "");
Expect(1, 35, '\P{^General_Category=otherpunctuation}', "");
Expect(0, 32, '\p{General_Category=otherpunctuation}', "");
Expect(1, 32, '\p{^General_Category=otherpunctuation}', "");
Expect(1, 32, '\P{General_Category=otherpunctuation}', "");
Expect(0, 32, '\P{^General_Category=otherpunctuation}', "");
Expect(1, 35, '\p{General_Category=_other	Punctuation}', "");
Expect(0, 35, '\p{^General_Category=_other	Punctuation}', "");
Expect(0, 35, '\P{General_Category=_other	Punctuation}', "");
Expect(1, 35, '\P{^General_Category=_other	Punctuation}', "");
Expect(0, 32, '\p{General_Category=_other	Punctuation}', "");
Expect(1, 32, '\p{^General_Category=_other	Punctuation}', "");
Expect(1, 32, '\P{General_Category=_other	Punctuation}', "");
Expect(0, 32, '\P{^General_Category=_other	Punctuation}', "");
Error('\p{Gc=_-Po/a/}');
Error('\P{Gc=_-Po/a/}');
Expect(1, 35, '\p{Gc=po}', "");
Expect(0, 35, '\p{^Gc=po}', "");
Expect(0, 35, '\P{Gc=po}', "");
Expect(1, 35, '\P{^Gc=po}', "");
Expect(0, 32, '\p{Gc=po}', "");
Expect(1, 32, '\p{^Gc=po}', "");
Expect(1, 32, '\P{Gc=po}', "");
Expect(0, 32, '\P{^Gc=po}', "");
Expect(1, 35, '\p{Gc:   		PO}', "");
Expect(0, 35, '\p{^Gc:   		PO}', "");
Expect(0, 35, '\P{Gc:   		PO}', "");
Expect(1, 35, '\P{^Gc:   		PO}', "");
Expect(0, 32, '\p{Gc:   		PO}', "");
Expect(1, 32, '\p{^Gc:   		PO}', "");
Expect(1, 32, '\P{Gc:   		PO}', "");
Expect(0, 32, '\P{^Gc:   		PO}', "");
Error('\p{Category=:=_Other_punctuation}');
Error('\P{Category=:=_Other_punctuation}');
Expect(1, 35, '\p{Category=otherpunctuation}', "");
Expect(0, 35, '\p{^Category=otherpunctuation}', "");
Expect(0, 35, '\P{Category=otherpunctuation}', "");
Expect(1, 35, '\P{^Category=otherpunctuation}', "");
Expect(0, 32, '\p{Category=otherpunctuation}', "");
Expect(1, 32, '\p{^Category=otherpunctuation}', "");
Expect(1, 32, '\P{Category=otherpunctuation}', "");
Expect(0, 32, '\P{^Category=otherpunctuation}', "");
Expect(1, 35, '\p{Category= Other punctuation}', "");
Expect(0, 35, '\p{^Category= Other punctuation}', "");
Expect(0, 35, '\P{Category= Other punctuation}', "");
Expect(1, 35, '\P{^Category= Other punctuation}', "");
Expect(0, 32, '\p{Category= Other punctuation}', "");
Expect(1, 32, '\p{^Category= Other punctuation}', "");
Expect(1, 32, '\P{Category= Other punctuation}', "");
Expect(0, 32, '\P{^Category= Other punctuation}', "");
Error('\p{Is_General_Category=_/a/po}');
Error('\P{Is_General_Category=_/a/po}');
Expect(1, 35, '\p{Is_General_Category=po}', "");
Expect(0, 35, '\p{^Is_General_Category=po}', "");
Expect(0, 35, '\P{Is_General_Category=po}', "");
Expect(1, 35, '\P{^Is_General_Category=po}', "");
Expect(0, 32, '\p{Is_General_Category=po}', "");
Expect(1, 32, '\p{^Is_General_Category=po}', "");
Expect(1, 32, '\P{Is_General_Category=po}', "");
Expect(0, 32, '\P{^Is_General_Category=po}', "");
Expect(1, 35, '\p{Is_General_Category=- PO}', "");
Expect(0, 35, '\p{^Is_General_Category=- PO}', "");
Expect(0, 35, '\P{Is_General_Category=- PO}', "");
Expect(1, 35, '\P{^Is_General_Category=- PO}', "");
Expect(0, 32, '\p{Is_General_Category=- PO}', "");
Expect(1, 32, '\p{^Is_General_Category=- PO}', "");
Expect(1, 32, '\P{Is_General_Category=- PO}', "");
Expect(0, 32, '\P{^Is_General_Category=- PO}', "");
Error('\p{Is_Gc=:=Other_Punctuation}');
Error('\P{Is_Gc=:=Other_Punctuation}');
Expect(1, 35, '\p{Is_Gc=otherpunctuation}', "");
Expect(0, 35, '\p{^Is_Gc=otherpunctuation}', "");
Expect(0, 35, '\P{Is_Gc=otherpunctuation}', "");
Expect(1, 35, '\P{^Is_Gc=otherpunctuation}', "");
Expect(0, 32, '\p{Is_Gc=otherpunctuation}', "");
Expect(1, 32, '\p{^Is_Gc=otherpunctuation}', "");
Expect(1, 32, '\P{Is_Gc=otherpunctuation}', "");
Expect(0, 32, '\P{^Is_Gc=otherpunctuation}', "");
Expect(1, 35, '\p{Is_Gc=	Other	Punctuation}', "");
Expect(0, 35, '\p{^Is_Gc=	Other	Punctuation}', "");
Expect(0, 35, '\P{Is_Gc=	Other	Punctuation}', "");
Expect(1, 35, '\P{^Is_Gc=	Other	Punctuation}', "");
Expect(0, 32, '\p{Is_Gc=	Other	Punctuation}', "");
Expect(1, 32, '\p{^Is_Gc=	Other	Punctuation}', "");
Expect(1, 32, '\P{Is_Gc=	Other	Punctuation}', "");
Expect(0, 32, '\P{^Is_Gc=	Other	Punctuation}', "");
Error('\p{Is_Category=	:=Po}');
Error('\P{Is_Category=	:=Po}');
Expect(1, 35, '\p{Is_Category=po}', "");
Expect(0, 35, '\p{^Is_Category=po}', "");
Expect(0, 35, '\P{Is_Category=po}', "");
Expect(1, 35, '\P{^Is_Category=po}', "");
Expect(0, 32, '\p{Is_Category=po}', "");
Expect(1, 32, '\p{^Is_Category=po}', "");
Expect(1, 32, '\P{Is_Category=po}', "");
Expect(0, 32, '\P{^Is_Category=po}', "");
Expect(1, 35, '\p{Is_Category=-po}', "");
Expect(0, 35, '\p{^Is_Category=-po}', "");
Expect(0, 35, '\P{Is_Category=-po}', "");
Expect(1, 35, '\P{^Is_Category=-po}', "");
Expect(0, 32, '\p{Is_Category=-po}', "");
Expect(1, 32, '\p{^Is_Category=-po}', "");
Expect(1, 32, '\P{Is_Category=-po}', "");
Expect(0, 32, '\P{^Is_Category=-po}', "");
Error('\p{General_Category=	:=Space_Separator}');
Error('\P{General_Category=	:=Space_Separator}');
Expect(1, 32, '\p{General_Category=spaceseparator}', "");
Expect(0, 32, '\p{^General_Category=spaceseparator}', "");
Expect(0, 32, '\P{General_Category=spaceseparator}', "");
Expect(1, 32, '\P{^General_Category=spaceseparator}', "");
Expect(0, 31, '\p{General_Category=spaceseparator}', "");
Expect(1, 31, '\p{^General_Category=spaceseparator}', "");
Expect(1, 31, '\P{General_Category=spaceseparator}', "");
Expect(0, 31, '\P{^General_Category=spaceseparator}', "");
Expect(1, 32, '\p{General_Category=  SpaceSeparator}', "");
Expect(0, 32, '\p{^General_Category=  SpaceSeparator}', "");
Expect(0, 32, '\P{General_Category=  SpaceSeparator}', "");
Expect(1, 32, '\P{^General_Category=  SpaceSeparator}', "");
Expect(0, 31, '\p{General_Category=  SpaceSeparator}', "");
Expect(1, 31, '\p{^General_Category=  SpaceSeparator}', "");
Expect(1, 31, '\P{General_Category=  SpaceSeparator}', "");
Expect(0, 31, '\P{^General_Category=  SpaceSeparator}', "");
Error('\p{Gc=:= -Zs}');
Error('\P{Gc=:= -Zs}');
Expect(1, 32, '\p{Gc=zs}', "");
Expect(0, 32, '\p{^Gc=zs}', "");
Expect(0, 32, '\P{Gc=zs}', "");
Expect(1, 32, '\P{^Gc=zs}', "");
Expect(0, 31, '\p{Gc=zs}', "");
Expect(1, 31, '\p{^Gc=zs}', "");
Expect(1, 31, '\P{Gc=zs}', "");
Expect(0, 31, '\P{^Gc=zs}', "");
Expect(1, 32, '\p{Gc=-	Zs}', "");
Expect(0, 32, '\p{^Gc=-	Zs}', "");
Expect(0, 32, '\P{Gc=-	Zs}', "");
Expect(1, 32, '\P{^Gc=-	Zs}', "");
Expect(0, 31, '\p{Gc=-	Zs}', "");
Expect(1, 31, '\p{^Gc=-	Zs}', "");
Expect(1, 31, '\P{Gc=-	Zs}', "");
Expect(0, 31, '\P{^Gc=-	Zs}', "");
Error('\p{Category=_ space/a/separator}');
Error('\P{Category=_ space/a/separator}');
Expect(1, 32, '\p{Category=spaceseparator}', "");
Expect(0, 32, '\p{^Category=spaceseparator}', "");
Expect(0, 32, '\P{Category=spaceseparator}', "");
Expect(1, 32, '\P{^Category=spaceseparator}', "");
Expect(0, 31, '\p{Category=spaceseparator}', "");
Expect(1, 31, '\p{^Category=spaceseparator}', "");
Expect(1, 31, '\P{Category=spaceseparator}', "");
Expect(0, 31, '\P{^Category=spaceseparator}', "");
Expect(1, 32, '\p{Category=  SpaceSEPARATOR}', "");
Expect(0, 32, '\p{^Category=  SpaceSEPARATOR}', "");
Expect(0, 32, '\P{Category=  SpaceSEPARATOR}', "");
Expect(1, 32, '\P{^Category=  SpaceSEPARATOR}', "");
Expect(0, 31, '\p{Category=  SpaceSEPARATOR}', "");
Expect(1, 31, '\p{^Category=  SpaceSEPARATOR}', "");
Expect(1, 31, '\P{Category=  SpaceSEPARATOR}', "");
Expect(0, 31, '\P{^Category=  SpaceSEPARATOR}', "");
Error('\p{Is_General_Category=--zs:=}');
Error('\P{Is_General_Category=--zs:=}');
Expect(1, 32, '\p{Is_General_Category=zs}', "");
Expect(0, 32, '\p{^Is_General_Category=zs}', "");
Expect(0, 32, '\P{Is_General_Category=zs}', "");
Expect(1, 32, '\P{^Is_General_Category=zs}', "");
Expect(0, 31, '\p{Is_General_Category=zs}', "");
Expect(1, 31, '\p{^Is_General_Category=zs}', "");
Expect(1, 31, '\P{Is_General_Category=zs}', "");
Expect(0, 31, '\P{^Is_General_Category=zs}', "");
Expect(1, 32, '\p{Is_General_Category=		zs}', "");
Expect(0, 32, '\p{^Is_General_Category=		zs}', "");
Expect(0, 32, '\P{Is_General_Category=		zs}', "");
Expect(1, 32, '\P{^Is_General_Category=		zs}', "");
Expect(0, 31, '\p{Is_General_Category=		zs}', "");
Expect(1, 31, '\p{^Is_General_Category=		zs}', "");
Expect(1, 31, '\P{Is_General_Category=		zs}', "");
Expect(0, 31, '\P{^Is_General_Category=		zs}', "");
Error('\p{Is_Gc=-Space SEPARATOR:=}');
Error('\P{Is_Gc=-Space SEPARATOR:=}');
Expect(1, 32, '\p{Is_Gc: spaceseparator}', "");
Expect(0, 32, '\p{^Is_Gc: spaceseparator}', "");
Expect(0, 32, '\P{Is_Gc: spaceseparator}', "");
Expect(1, 32, '\P{^Is_Gc: spaceseparator}', "");
Expect(0, 31, '\p{Is_Gc: spaceseparator}', "");
Expect(1, 31, '\p{^Is_Gc: spaceseparator}', "");
Expect(1, 31, '\P{Is_Gc: spaceseparator}', "");
Expect(0, 31, '\P{^Is_Gc: spaceseparator}', "");
Expect(1, 32, '\p{Is_Gc= 	space_separator}', "");
Expect(0, 32, '\p{^Is_Gc= 	space_separator}', "");
Expect(0, 32, '\P{Is_Gc= 	space_separator}', "");
Expect(1, 32, '\P{^Is_Gc= 	space_separator}', "");
Expect(0, 31, '\p{Is_Gc= 	space_separator}', "");
Expect(1, 31, '\p{^Is_Gc= 	space_separator}', "");
Expect(1, 31, '\P{Is_Gc= 	space_separator}', "");
Expect(0, 31, '\P{^Is_Gc= 	space_separator}', "");
Error('\p{Is_Category=	/a/ZS}');
Error('\P{Is_Category=	/a/ZS}');
Expect(1, 32, '\p{Is_Category=zs}', "");
Expect(0, 32, '\p{^Is_Category=zs}', "");
Expect(0, 32, '\P{Is_Category=zs}', "");
Expect(1, 32, '\P{^Is_Category=zs}', "");
Expect(0, 31, '\p{Is_Category=zs}', "");
Expect(1, 31, '\p{^Is_Category=zs}', "");
Expect(1, 31, '\P{Is_Category=zs}', "");
Expect(0, 31, '\P{^Is_Category=zs}', "");
Expect(1, 32, '\p{Is_Category=_ ZS}', "");
Expect(0, 32, '\p{^Is_Category=_ ZS}', "");
Expect(0, 32, '\P{Is_Category=_ ZS}', "");
Expect(1, 32, '\P{^Is_Category=_ ZS}', "");
Expect(0, 31, '\p{Is_Category=_ ZS}', "");
Expect(1, 31, '\p{^Is_Category=_ ZS}', "");
Expect(1, 31, '\P{Is_Category=_ ZS}', "");
Expect(0, 31, '\P{^Is_Category=_ ZS}', "");
Error('\p{General_Category: 	/a/OTHER Number}');
Error('\P{General_Category: 	/a/OTHER Number}');
Expect(1, 179, '\p{General_Category:othernumber}', "");
Expect(0, 179, '\p{^General_Category:othernumber}', "");
Expect(0, 179, '\P{General_Category:othernumber}', "");
Expect(1, 179, '\P{^General_Category:othernumber}', "");
Expect(0, 177, '\p{General_Category:othernumber}', "");
Expect(1, 177, '\p{^General_Category:othernumber}', "");
Expect(1, 177, '\P{General_Category:othernumber}', "");
Expect(0, 177, '\P{^General_Category:othernumber}', "");
Expect(1, 179, '\p{General_Category=-Other Number}', "");
Expect(0, 179, '\p{^General_Category=-Other Number}', "");
Expect(0, 179, '\P{General_Category=-Other Number}', "");
Expect(1, 179, '\P{^General_Category=-Other Number}', "");
Expect(0, 177, '\p{General_Category=-Other Number}', "");
Expect(1, 177, '\p{^General_Category=-Other Number}', "");
Expect(1, 177, '\P{General_Category=-Other Number}', "");
Expect(0, 177, '\P{^General_Category=-Other Number}', "");
Error('\p{Gc:   _:=No}');
Error('\P{Gc:   _:=No}');
Expect(1, 179, '\p{Gc:	no}', "");
Expect(0, 179, '\p{^Gc:	no}', "");
Expect(0, 179, '\P{Gc:	no}', "");
Expect(1, 179, '\P{^Gc:	no}', "");
Expect(0, 177, '\p{Gc:	no}', "");
Expect(1, 177, '\p{^Gc:	no}', "");
Expect(1, 177, '\P{Gc:	no}', "");
Expect(0, 177, '\P{^Gc:	no}', "");
Expect(1, 179, '\p{Gc=-No}', "");
Expect(0, 179, '\p{^Gc=-No}', "");
Expect(0, 179, '\P{Gc=-No}', "");
Expect(1, 179, '\P{^Gc=-No}', "");
Expect(0, 177, '\p{Gc=-No}', "");
Expect(1, 177, '\p{^Gc=-No}', "");
Expect(1, 177, '\P{Gc=-No}', "");
Expect(0, 177, '\P{^Gc=-No}', "");
Error('\p{Category= 	other/a/NUMBER}');
Error('\P{Category= 	other/a/NUMBER}');
Expect(1, 179, '\p{Category=othernumber}', "");
Expect(0, 179, '\p{^Category=othernumber}', "");
Expect(0, 179, '\P{Category=othernumber}', "");
Expect(1, 179, '\P{^Category=othernumber}', "");
Expect(0, 177, '\p{Category=othernumber}', "");
Expect(1, 177, '\p{^Category=othernumber}', "");
Expect(1, 177, '\P{Category=othernumber}', "");
Expect(0, 177, '\P{^Category=othernumber}', "");
Expect(1, 179, '\p{Category=	OTHERnumber}', "");
Expect(0, 179, '\p{^Category=	OTHERnumber}', "");
Expect(0, 179, '\P{Category=	OTHERnumber}', "");
Expect(1, 179, '\P{^Category=	OTHERnumber}', "");
Expect(0, 177, '\p{Category=	OTHERnumber}', "");
Expect(1, 177, '\p{^Category=	OTHERnumber}', "");
Expect(1, 177, '\P{Category=	OTHERnumber}', "");
Expect(0, 177, '\P{^Category=	OTHERnumber}', "");
Error('\p{Is_General_Category=	No:=}');
Error('\P{Is_General_Category=	No:=}');
Expect(1, 179, '\p{Is_General_Category=no}', "");
Expect(0, 179, '\p{^Is_General_Category=no}', "");
Expect(0, 179, '\P{Is_General_Category=no}', "");
Expect(1, 179, '\P{^Is_General_Category=no}', "");
Expect(0, 177, '\p{Is_General_Category=no}', "");
Expect(1, 177, '\p{^Is_General_Category=no}', "");
Expect(1, 177, '\P{Is_General_Category=no}', "");
Expect(0, 177, '\P{^Is_General_Category=no}', "");
Expect(1, 179, '\p{Is_General_Category=_ no}', "");
Expect(0, 179, '\p{^Is_General_Category=_ no}', "");
Expect(0, 179, '\P{Is_General_Category=_ no}', "");
Expect(1, 179, '\P{^Is_General_Category=_ no}', "");
Expect(0, 177, '\p{Is_General_Category=_ no}', "");
Expect(1, 177, '\p{^Is_General_Category=_ no}', "");
Expect(1, 177, '\P{Is_General_Category=_ no}', "");
Expect(0, 177, '\P{^Is_General_Category=_ no}', "");
Error('\p{Is_Gc=  OTHER/a/Number}');
Error('\P{Is_Gc=  OTHER/a/Number}');
Expect(1, 179, '\p{Is_Gc: othernumber}', "");
Expect(0, 179, '\p{^Is_Gc: othernumber}', "");
Expect(0, 179, '\P{Is_Gc: othernumber}', "");
Expect(1, 179, '\P{^Is_Gc: othernumber}', "");
Expect(0, 177, '\p{Is_Gc: othernumber}', "");
Expect(1, 177, '\p{^Is_Gc: othernumber}', "");
Expect(1, 177, '\P{Is_Gc: othernumber}', "");
Expect(0, 177, '\P{^Is_Gc: othernumber}', "");
Expect(1, 179, '\p{Is_Gc=_-OtherNumber}', "");
Expect(0, 179, '\p{^Is_Gc=_-OtherNumber}', "");
Expect(0, 179, '\P{Is_Gc=_-OtherNumber}', "");
Expect(1, 179, '\P{^Is_Gc=_-OtherNumber}', "");
Expect(0, 177, '\p{Is_Gc=_-OtherNumber}', "");
Expect(1, 177, '\p{^Is_Gc=_-OtherNumber}', "");
Expect(1, 177, '\P{Is_Gc=_-OtherNumber}', "");
Expect(0, 177, '\P{^Is_Gc=_-OtherNumber}', "");
Error('\p{Is_Category= No:=}');
Error('\P{Is_Category= No:=}');
Expect(1, 179, '\p{Is_Category=no}', "");
Expect(0, 179, '\p{^Is_Category=no}', "");
Expect(0, 179, '\P{Is_Category=no}', "");
Expect(1, 179, '\P{^Is_Category=no}', "");
Expect(0, 177, '\p{Is_Category=no}', "");
Expect(1, 177, '\p{^Is_Category=no}', "");
Expect(1, 177, '\P{Is_Category=no}', "");
Expect(0, 177, '\P{^Is_Category=no}', "");
Expect(1, 179, '\p{Is_Category:    NO}', "");
Expect(0, 179, '\p{^Is_Category:    NO}', "");
Expect(0, 179, '\P{Is_Category:    NO}', "");
Expect(1, 179, '\P{^Is_Category:    NO}', "");
Expect(0, 177, '\p{Is_Category:    NO}', "");
Expect(1, 177, '\p{^Is_Category:    NO}', "");
Expect(1, 177, '\P{Is_Category:    NO}', "");
Expect(0, 177, '\P{^Is_Category:    NO}', "");
Error('\p{General_Category=	:=MARK}');
Error('\P{General_Category=	:=MARK}');
Expect(1, 879, '\p{General_Category=mark}', "");
Expect(0, 879, '\p{^General_Category=mark}', "");
Expect(0, 879, '\P{General_Category=mark}', "");
Expect(1, 879, '\P{^General_Category=mark}', "");
Expect(0, 767, '\p{General_Category=mark}', "");
Expect(1, 767, '\p{^General_Category=mark}', "");
Expect(1, 767, '\P{General_Category=mark}', "");
Expect(0, 767, '\P{^General_Category=mark}', "");
Expect(1, 879, '\p{General_Category= -Mark}', "");
Expect(0, 879, '\p{^General_Category= -Mark}', "");
Expect(0, 879, '\P{General_Category= -Mark}', "");
Expect(1, 879, '\P{^General_Category= -Mark}', "");
Expect(0, 767, '\p{General_Category= -Mark}', "");
Expect(1, 767, '\p{^General_Category= -Mark}', "");
Expect(1, 767, '\P{General_Category= -Mark}', "");
Expect(0, 767, '\P{^General_Category= -Mark}', "");
Error('\p{Gc=	-m/a/}');
Error('\P{Gc=	-m/a/}');
Expect(1, 879, '\p{Gc=m}', "");
Expect(0, 879, '\p{^Gc=m}', "");
Expect(0, 879, '\P{Gc=m}', "");
Expect(1, 879, '\P{^Gc=m}', "");
Expect(0, 767, '\p{Gc=m}', "");
Expect(1, 767, '\p{^Gc=m}', "");
Expect(1, 767, '\P{Gc=m}', "");
Expect(0, 767, '\P{^Gc=m}', "");
Expect(1, 879, '\p{Gc=_ M}', "");
Expect(0, 879, '\p{^Gc=_ M}', "");
Expect(0, 879, '\P{Gc=_ M}', "");
Expect(1, 879, '\P{^Gc=_ M}', "");
Expect(0, 767, '\p{Gc=_ M}', "");
Expect(1, 767, '\p{^Gc=_ M}', "");
Expect(1, 767, '\P{Gc=_ M}', "");
Expect(0, 767, '\P{^Gc=_ M}', "");
Error('\p{Category=_ Mark:=}');
Error('\P{Category=_ Mark:=}');
Expect(1, 879, '\p{Category=mark}', "");
Expect(0, 879, '\p{^Category=mark}', "");
Expect(0, 879, '\P{Category=mark}', "");
Expect(1, 879, '\P{^Category=mark}', "");
Expect(0, 767, '\p{Category=mark}', "");
Expect(1, 767, '\p{^Category=mark}', "");
Expect(1, 767, '\P{Category=mark}', "");
Expect(0, 767, '\P{^Category=mark}', "");
Expect(1, 879, '\p{Category= mark}', "");
Expect(0, 879, '\p{^Category= mark}', "");
Expect(0, 879, '\P{Category= mark}', "");
Expect(1, 879, '\P{^Category= mark}', "");
Expect(0, 767, '\p{Category= mark}', "");
Expect(1, 767, '\p{^Category= mark}', "");
Expect(1, 767, '\P{Category= mark}', "");
Expect(0, 767, '\P{^Category= mark}', "");
Error('\p{Is_General_Category=m:=}');
Error('\P{Is_General_Category=m:=}');
Expect(1, 879, '\p{Is_General_Category=m}', "");
Expect(0, 879, '\p{^Is_General_Category=m}', "");
Expect(0, 879, '\P{Is_General_Category=m}', "");
Expect(1, 879, '\P{^Is_General_Category=m}', "");
Expect(0, 767, '\p{Is_General_Category=m}', "");
Expect(1, 767, '\p{^Is_General_Category=m}', "");
Expect(1, 767, '\P{Is_General_Category=m}', "");
Expect(0, 767, '\P{^Is_General_Category=m}', "");
Expect(1, 879, '\p{Is_General_Category= 	M}', "");
Expect(0, 879, '\p{^Is_General_Category= 	M}', "");
Expect(0, 879, '\P{Is_General_Category= 	M}', "");
Expect(1, 879, '\P{^Is_General_Category= 	M}', "");
Expect(0, 767, '\p{Is_General_Category= 	M}', "");
Expect(1, 767, '\p{^Is_General_Category= 	M}', "");
Expect(1, 767, '\P{Is_General_Category= 	M}', "");
Expect(0, 767, '\P{^Is_General_Category= 	M}', "");
Error('\p{Is_Gc=:=-	mark}');
Error('\P{Is_Gc=:=-	mark}');
Expect(1, 879, '\p{Is_Gc=mark}', "");
Expect(0, 879, '\p{^Is_Gc=mark}', "");
Expect(0, 879, '\P{Is_Gc=mark}', "");
Expect(1, 879, '\P{^Is_Gc=mark}', "");
Expect(0, 767, '\p{Is_Gc=mark}', "");
Expect(1, 767, '\p{^Is_Gc=mark}', "");
Expect(1, 767, '\P{Is_Gc=mark}', "");
Expect(0, 767, '\P{^Is_Gc=mark}', "");
Expect(1, 879, '\p{Is_Gc=_mark}', "");
Expect(0, 879, '\p{^Is_Gc=_mark}', "");
Expect(0, 879, '\P{Is_Gc=_mark}', "");
Expect(1, 879, '\P{^Is_Gc=_mark}', "");
Expect(0, 767, '\p{Is_Gc=_mark}', "");
Expect(1, 767, '\p{^Is_Gc=_mark}', "");
Expect(1, 767, '\P{Is_Gc=_mark}', "");
Expect(0, 767, '\P{^Is_Gc=_mark}', "");
Error('\p{Is_Category=/a/m}');
Error('\P{Is_Category=/a/m}');
Expect(1, 879, '\p{Is_Category=m}', "");
Expect(0, 879, '\p{^Is_Category=m}', "");
Expect(0, 879, '\P{Is_Category=m}', "");
Expect(1, 879, '\P{^Is_Category=m}', "");
Expect(0, 767, '\p{Is_Category=m}', "");
Expect(1, 767, '\p{^Is_Category=m}', "");
Expect(1, 767, '\P{Is_Category=m}', "");
Expect(0, 767, '\P{^Is_Category=m}', "");
Expect(1, 879, '\p{Is_Category=_M}', "");
Expect(0, 879, '\p{^Is_Category=_M}', "");
Expect(0, 879, '\P{Is_Category=_M}', "");
Expect(1, 879, '\P{^Is_Category=_M}', "");
Expect(0, 767, '\p{Is_Category=_M}', "");
Expect(1, 767, '\p{^Is_Category=_M}', "");
Expect(1, 767, '\P{Is_Category=_M}', "");
Expect(0, 767, '\P{^Is_Category=_M}', "");
Error('\p{General_Category=:=_OTHER}');
Error('\P{General_Category=:=_OTHER}');
Expect(1, 31, '\p{General_Category=other}', "");
Expect(0, 31, '\p{^General_Category=other}', "");
Expect(0, 31, '\P{General_Category=other}', "");
Expect(1, 31, '\P{^General_Category=other}', "");
Expect(0, 126, '\p{General_Category=other}', "");
Expect(1, 126, '\p{^General_Category=other}', "");
Expect(1, 126, '\P{General_Category=other}', "");
Expect(0, 126, '\P{^General_Category=other}', "");
Expect(1, 31, '\p{General_Category=-	other}', "");
Expect(0, 31, '\p{^General_Category=-	other}', "");
Expect(0, 31, '\P{General_Category=-	other}', "");
Expect(1, 31, '\P{^General_Category=-	other}', "");
Expect(0, 126, '\p{General_Category=-	other}', "");
Expect(1, 126, '\p{^General_Category=-	other}', "");
Expect(1, 126, '\P{General_Category=-	other}', "");
Expect(0, 126, '\P{^General_Category=-	other}', "");
Error('\p{Gc:	-/a/c}');
Error('\P{Gc:	-/a/c}');
Expect(1, 31, '\p{Gc=c}', "");
Expect(0, 31, '\p{^Gc=c}', "");
Expect(0, 31, '\P{Gc=c}', "");
Expect(1, 31, '\P{^Gc=c}', "");
Expect(0, 126, '\p{Gc=c}', "");
Expect(1, 126, '\p{^Gc=c}', "");
Expect(1, 126, '\P{Gc=c}', "");
Expect(0, 126, '\P{^Gc=c}', "");
Expect(1, 31, '\p{Gc=		c}', "");
Expect(0, 31, '\p{^Gc=		c}', "");
Expect(0, 31, '\P{Gc=		c}', "");
Expect(1, 31, '\P{^Gc=		c}', "");
Expect(0, 126, '\p{Gc=		c}', "");
Expect(1, 126, '\p{^Gc=		c}', "");
Expect(1, 126, '\P{Gc=		c}', "");
Expect(0, 126, '\P{^Gc=		c}', "");
Error('\p{Category=	-Other:=}');
Error('\P{Category=	-Other:=}');
Expect(1, 31, '\p{Category=other}', "");
Expect(0, 31, '\p{^Category=other}', "");
Expect(0, 31, '\P{Category=other}', "");
Expect(1, 31, '\P{^Category=other}', "");
Expect(0, 126, '\p{Category=other}', "");
Expect(1, 126, '\p{^Category=other}', "");
Expect(1, 126, '\P{Category=other}', "");
Expect(0, 126, '\P{^Category=other}', "");
Expect(1, 31, '\p{Category=_ Other}', "");
Expect(0, 31, '\p{^Category=_ Other}', "");
Expect(0, 31, '\P{Category=_ Other}', "");
Expect(1, 31, '\P{^Category=_ Other}', "");
Expect(0, 126, '\p{Category=_ Other}', "");
Expect(1, 126, '\p{^Category=_ Other}', "");
Expect(1, 126, '\P{Category=_ Other}', "");
Expect(0, 126, '\P{^Category=_ Other}', "");
Error('\p{Is_General_Category=/a/-_C}');
Error('\P{Is_General_Category=/a/-_C}');
Expect(1, 31, '\p{Is_General_Category=c}', "");
Expect(0, 31, '\p{^Is_General_Category=c}', "");
Expect(0, 31, '\P{Is_General_Category=c}', "");
Expect(1, 31, '\P{^Is_General_Category=c}', "");
Expect(0, 126, '\p{Is_General_Category=c}', "");
Expect(1, 126, '\p{^Is_General_Category=c}', "");
Expect(1, 126, '\P{Is_General_Category=c}', "");
Expect(0, 126, '\P{^Is_General_Category=c}', "");
Expect(1, 31, '\p{Is_General_Category=-	c}', "");
Expect(0, 31, '\p{^Is_General_Category=-	c}', "");
Expect(0, 31, '\P{Is_General_Category=-	c}', "");
Expect(1, 31, '\P{^Is_General_Category=-	c}', "");
Expect(0, 126, '\p{Is_General_Category=-	c}', "");
Expect(1, 126, '\p{^Is_General_Category=-	c}', "");
Expect(1, 126, '\P{Is_General_Category=-	c}', "");
Expect(0, 126, '\P{^Is_General_Category=-	c}', "");
Error('\p{Is_Gc=  OTHER/a/}');
Error('\P{Is_Gc=  OTHER/a/}');
Expect(1, 31, '\p{Is_Gc=other}', "");
Expect(0, 31, '\p{^Is_Gc=other}', "");
Expect(0, 31, '\P{Is_Gc=other}', "");
Expect(1, 31, '\P{^Is_Gc=other}', "");
Expect(0, 126, '\p{Is_Gc=other}', "");
Expect(1, 126, '\p{^Is_Gc=other}', "");
Expect(1, 126, '\P{Is_Gc=other}', "");
Expect(0, 126, '\P{^Is_Gc=other}', "");
Expect(1, 31, '\p{Is_Gc:   	 Other}', "");
Expect(0, 31, '\p{^Is_Gc:   	 Other}', "");
Expect(0, 31, '\P{Is_Gc:   	 Other}', "");
Expect(1, 31, '\P{^Is_Gc:   	 Other}', "");
Expect(0, 126, '\p{Is_Gc:   	 Other}', "");
Expect(1, 126, '\p{^Is_Gc:   	 Other}', "");
Expect(1, 126, '\P{Is_Gc:   	 Other}', "");
Expect(0, 126, '\P{^Is_Gc:   	 Other}', "");
Error('\p{Is_Category=:=_-c}');
Error('\P{Is_Category=:=_-c}');
Expect(1, 31, '\p{Is_Category=c}', "");
Expect(0, 31, '\p{^Is_Category=c}', "");
Expect(0, 31, '\P{Is_Category=c}', "");
Expect(1, 31, '\P{^Is_Category=c}', "");
Expect(0, 126, '\p{Is_Category=c}', "");
Expect(1, 126, '\p{^Is_Category=c}', "");
Expect(1, 126, '\P{Is_Category=c}', "");
Expect(0, 126, '\P{^Is_Category=c}', "");
Expect(1, 31, '\p{Is_Category= C}', "");
Expect(0, 31, '\p{^Is_Category= C}', "");
Expect(0, 31, '\P{Is_Category= C}', "");
Expect(1, 31, '\P{^Is_Category= C}', "");
Expect(0, 126, '\p{Is_Category= C}', "");
Expect(1, 126, '\p{^Is_Category= C}', "");
Expect(1, 126, '\P{Is_Category= C}', "");
Expect(0, 126, '\P{^Is_Category= C}', "");
Error('\p{General_Category=- enclosingmark:=}');
Error('\P{General_Category=- enclosingmark:=}');
Expect(1, 1161, '\p{General_Category=enclosingmark}', "");
Expect(0, 1161, '\p{^General_Category=enclosingmark}', "");
Expect(0, 1161, '\P{General_Category=enclosingmark}', "");
Expect(1, 1161, '\P{^General_Category=enclosingmark}', "");
Expect(0, 1159, '\p{General_Category=enclosingmark}', "");
Expect(1, 1159, '\p{^General_Category=enclosingmark}', "");
Expect(1, 1159, '\P{General_Category=enclosingmark}', "");
Expect(0, 1159, '\P{^General_Category=enclosingmark}', "");
Expect(1, 1161, '\p{General_Category=		ENCLOSING	Mark}', "");
Expect(0, 1161, '\p{^General_Category=		ENCLOSING	Mark}', "");
Expect(0, 1161, '\P{General_Category=		ENCLOSING	Mark}', "");
Expect(1, 1161, '\P{^General_Category=		ENCLOSING	Mark}', "");
Expect(0, 1159, '\p{General_Category=		ENCLOSING	Mark}', "");
Expect(1, 1159, '\p{^General_Category=		ENCLOSING	Mark}', "");
Expect(1, 1159, '\P{General_Category=		ENCLOSING	Mark}', "");
Expect(0, 1159, '\P{^General_Category=		ENCLOSING	Mark}', "");
Error('\p{Gc=-/a/me}');
Error('\P{Gc=-/a/me}');
Expect(1, 1161, '\p{Gc=me}', "");
Expect(0, 1161, '\p{^Gc=me}', "");
Expect(0, 1161, '\P{Gc=me}', "");
Expect(1, 1161, '\P{^Gc=me}', "");
Expect(0, 1159, '\p{Gc=me}', "");
Expect(1, 1159, '\p{^Gc=me}', "");
Expect(1, 1159, '\P{Gc=me}', "");
Expect(0, 1159, '\P{^Gc=me}', "");
Expect(1, 1161, '\p{Gc=_	ME}', "");
Expect(0, 1161, '\p{^Gc=_	ME}', "");
Expect(0, 1161, '\P{Gc=_	ME}', "");
Expect(1, 1161, '\P{^Gc=_	ME}', "");
Expect(0, 1159, '\p{Gc=_	ME}', "");
Expect(1, 1159, '\p{^Gc=_	ME}', "");
Expect(1, 1159, '\P{Gc=_	ME}', "");
Expect(0, 1159, '\P{^Gc=_	ME}', "");
Error('\p{Category=_:=ENCLOSING-Mark}');
Error('\P{Category=_:=ENCLOSING-Mark}');
Expect(1, 1161, '\p{Category=enclosingmark}', "");
Expect(0, 1161, '\p{^Category=enclosingmark}', "");
Expect(0, 1161, '\P{Category=enclosingmark}', "");
Expect(1, 1161, '\P{^Category=enclosingmark}', "");
Expect(0, 1159, '\p{Category=enclosingmark}', "");
Expect(1, 1159, '\p{^Category=enclosingmark}', "");
Expect(1, 1159, '\P{Category=enclosingmark}', "");
Expect(0, 1159, '\P{^Category=enclosingmark}', "");
Expect(1, 1161, '\p{Category=	_ENCLOSING	Mark}', "");
Expect(0, 1161, '\p{^Category=	_ENCLOSING	Mark}', "");
Expect(0, 1161, '\P{Category=	_ENCLOSING	Mark}', "");
Expect(1, 1161, '\P{^Category=	_ENCLOSING	Mark}', "");
Expect(0, 1159, '\p{Category=	_ENCLOSING	Mark}', "");
Expect(1, 1159, '\p{^Category=	_ENCLOSING	Mark}', "");
Expect(1, 1159, '\P{Category=	_ENCLOSING	Mark}', "");
Expect(0, 1159, '\P{^Category=	_ENCLOSING	Mark}', "");
Error('\p{Is_General_Category:	:=_ Me}');
Error('\P{Is_General_Category:	:=_ Me}');
Expect(1, 1161, '\p{Is_General_Category=me}', "");
Expect(0, 1161, '\p{^Is_General_Category=me}', "");
Expect(0, 1161, '\P{Is_General_Category=me}', "");
Expect(1, 1161, '\P{^Is_General_Category=me}', "");
Expect(0, 1159, '\p{Is_General_Category=me}', "");
Expect(1, 1159, '\p{^Is_General_Category=me}', "");
Expect(1, 1159, '\P{Is_General_Category=me}', "");
Expect(0, 1159, '\P{^Is_General_Category=me}', "");
Expect(1, 1161, '\p{Is_General_Category=_ME}', "");
Expect(0, 1161, '\p{^Is_General_Category=_ME}', "");
Expect(0, 1161, '\P{Is_General_Category=_ME}', "");
Expect(1, 1161, '\P{^Is_General_Category=_ME}', "");
Expect(0, 1159, '\p{Is_General_Category=_ME}', "");
Expect(1, 1159, '\p{^Is_General_Category=_ME}', "");
Expect(1, 1159, '\P{Is_General_Category=_ME}', "");
Expect(0, 1159, '\P{^Is_General_Category=_ME}', "");
Error('\p{Is_Gc=:=	 Enclosing-Mark}');
Error('\P{Is_Gc=:=	 Enclosing-Mark}');
Expect(1, 1161, '\p{Is_Gc: enclosingmark}', "");
Expect(0, 1161, '\p{^Is_Gc: enclosingmark}', "");
Expect(0, 1161, '\P{Is_Gc: enclosingmark}', "");
Expect(1, 1161, '\P{^Is_Gc: enclosingmark}', "");
Expect(0, 1159, '\p{Is_Gc: enclosingmark}', "");
Expect(1, 1159, '\p{^Is_Gc: enclosingmark}', "");
Expect(1, 1159, '\P{Is_Gc: enclosingmark}', "");
Expect(0, 1159, '\P{^Is_Gc: enclosingmark}', "");
Expect(1, 1161, '\p{Is_Gc=_enclosingMark}', "");
Expect(0, 1161, '\p{^Is_Gc=_enclosingMark}', "");
Expect(0, 1161, '\P{Is_Gc=_enclosingMark}', "");
Expect(1, 1161, '\P{^Is_Gc=_enclosingMark}', "");
Expect(0, 1159, '\p{Is_Gc=_enclosingMark}', "");
Expect(1, 1159, '\p{^Is_Gc=_enclosingMark}', "");
Expect(1, 1159, '\P{Is_Gc=_enclosingMark}', "");
Expect(0, 1159, '\P{^Is_Gc=_enclosingMark}', "");
Error('\p{Is_Category=_-me:=}');
Error('\P{Is_Category=_-me:=}');
Expect(1, 1161, '\p{Is_Category=me}', "");
Expect(0, 1161, '\p{^Is_Category=me}', "");
Expect(0, 1161, '\P{Is_Category=me}', "");
Expect(1, 1161, '\P{^Is_Category=me}', "");
Expect(0, 1159, '\p{Is_Category=me}', "");
Expect(1, 1159, '\p{^Is_Category=me}', "");
Expect(1, 1159, '\P{Is_Category=me}', "");
Expect(0, 1159, '\P{^Is_Category=me}', "");
Expect(1, 1161, '\p{Is_Category=	 ME}', "");
Expect(0, 1161, '\p{^Is_Category=	 ME}', "");
Expect(0, 1161, '\P{Is_Category=	 ME}', "");
Expect(1, 1161, '\P{^Is_Category=	 ME}', "");
Expect(0, 1159, '\p{Is_Category=	 ME}', "");
Expect(1, 1159, '\p{^Is_Category=	 ME}', "");
Expect(1, 1159, '\P{Is_Category=	 ME}', "");
Expect(0, 1159, '\P{^Is_Category=	 ME}', "");
Error('\p{General_Category=	 Titlecase-Letter/a/}');
Error('\P{General_Category=	 Titlecase-Letter/a/}');
Expect(1, 453, '\p{General_Category=titlecaseletter}', "");
Expect(0, 453, '\p{^General_Category=titlecaseletter}', "");
Expect(0, 453, '\P{General_Category=titlecaseletter}', "");
Expect(1, 453, '\P{^General_Category=titlecaseletter}', "");
Expect(0, 452, '\p{General_Category=titlecaseletter}', "");
Expect(1, 452, '\p{^General_Category=titlecaseletter}', "");
Expect(1, 452, '\P{General_Category=titlecaseletter}', "");
Expect(0, 452, '\P{^General_Category=titlecaseletter}', "");
Expect(1, 453, '\p{General_Category=	_TITLECASE_LETTER}', "");
Expect(0, 453, '\p{^General_Category=	_TITLECASE_LETTER}', "");
Expect(0, 453, '\P{General_Category=	_TITLECASE_LETTER}', "");
Expect(1, 453, '\P{^General_Category=	_TITLECASE_LETTER}', "");
Expect(0, 452, '\p{General_Category=	_TITLECASE_LETTER}', "");
Expect(1, 452, '\p{^General_Category=	_TITLECASE_LETTER}', "");
Expect(1, 452, '\P{General_Category=	_TITLECASE_LETTER}', "");
Expect(0, 452, '\P{^General_Category=	_TITLECASE_LETTER}', "");
Error('\p{Gc=:=Lt}');
Error('\P{Gc=:=Lt}');
Expect(1, 453, '\p{Gc:   lt}', "");
Expect(0, 453, '\p{^Gc:   lt}', "");
Expect(0, 453, '\P{Gc:   lt}', "");
Expect(1, 453, '\P{^Gc:   lt}', "");
Expect(0, 452, '\p{Gc:   lt}', "");
Expect(1, 452, '\p{^Gc:   lt}', "");
Expect(1, 452, '\P{Gc:   lt}', "");
Expect(0, 452, '\P{^Gc:   lt}', "");
Expect(1, 453, '\p{Gc= LT}', "");
Expect(0, 453, '\p{^Gc= LT}', "");
Expect(0, 453, '\P{Gc= LT}', "");
Expect(1, 453, '\P{^Gc= LT}', "");
Expect(0, 452, '\p{Gc= LT}', "");
Expect(1, 452, '\p{^Gc= LT}', "");
Expect(1, 452, '\P{Gc= LT}', "");
Expect(0, 452, '\P{^Gc= LT}', "");
Error('\p{Category=	titlecase LETTER/a/}');
Error('\P{Category=	titlecase LETTER/a/}');
Expect(1, 453, '\p{Category=titlecaseletter}', "");
Expect(0, 453, '\p{^Category=titlecaseletter}', "");
Expect(0, 453, '\P{Category=titlecaseletter}', "");
Expect(1, 453, '\P{^Category=titlecaseletter}', "");
Expect(0, 452, '\p{Category=titlecaseletter}', "");
Expect(1, 452, '\p{^Category=titlecaseletter}', "");
Expect(1, 452, '\P{Category=titlecaseletter}', "");
Expect(0, 452, '\P{^Category=titlecaseletter}', "");
Expect(1, 453, '\p{Category=titlecase	Letter}', "");
Expect(0, 453, '\p{^Category=titlecase	Letter}', "");
Expect(0, 453, '\P{Category=titlecase	Letter}', "");
Expect(1, 453, '\P{^Category=titlecase	Letter}', "");
Expect(0, 452, '\p{Category=titlecase	Letter}', "");
Expect(1, 452, '\p{^Category=titlecase	Letter}', "");
Expect(1, 452, '\P{Category=titlecase	Letter}', "");
Expect(0, 452, '\P{^Category=titlecase	Letter}', "");
Error('\p{Is_General_Category=/a/-	lt}');
Error('\P{Is_General_Category=/a/-	lt}');
Expect(1, 453, '\p{Is_General_Category=lt}', "");
Expect(0, 453, '\p{^Is_General_Category=lt}', "");
Expect(0, 453, '\P{Is_General_Category=lt}', "");
Expect(1, 453, '\P{^Is_General_Category=lt}', "");
Expect(0, 452, '\p{Is_General_Category=lt}', "");
Expect(1, 452, '\p{^Is_General_Category=lt}', "");
Expect(1, 452, '\P{Is_General_Category=lt}', "");
Expect(0, 452, '\P{^Is_General_Category=lt}', "");
Expect(1, 453, '\p{Is_General_Category= LT}', "");
Expect(0, 453, '\p{^Is_General_Category= LT}', "");
Expect(0, 453, '\P{Is_General_Category= LT}', "");
Expect(1, 453, '\P{^Is_General_Category= LT}', "");
Expect(0, 452, '\p{Is_General_Category= LT}', "");
Expect(1, 452, '\p{^Is_General_Category= LT}', "");
Expect(1, 452, '\P{Is_General_Category= LT}', "");
Expect(0, 452, '\P{^Is_General_Category= LT}', "");
Error('\p{Is_Gc: := 	Titlecase-Letter}');
Error('\P{Is_Gc: := 	Titlecase-Letter}');
Expect(1, 453, '\p{Is_Gc:	titlecaseletter}', "");
Expect(0, 453, '\p{^Is_Gc:	titlecaseletter}', "");
Expect(0, 453, '\P{Is_Gc:	titlecaseletter}', "");
Expect(1, 453, '\P{^Is_Gc:	titlecaseletter}', "");
Expect(0, 452, '\p{Is_Gc:	titlecaseletter}', "");
Expect(1, 452, '\p{^Is_Gc:	titlecaseletter}', "");
Expect(1, 452, '\P{Is_Gc:	titlecaseletter}', "");
Expect(0, 452, '\P{^Is_Gc:	titlecaseletter}', "");
Expect(1, 453, '\p{Is_Gc:	__TitlecaseLETTER}', "");
Expect(0, 453, '\p{^Is_Gc:	__TitlecaseLETTER}', "");
Expect(0, 453, '\P{Is_Gc:	__TitlecaseLETTER}', "");
Expect(1, 453, '\P{^Is_Gc:	__TitlecaseLETTER}', "");
Expect(0, 452, '\p{Is_Gc:	__TitlecaseLETTER}', "");
Expect(1, 452, '\p{^Is_Gc:	__TitlecaseLETTER}', "");
Expect(1, 452, '\P{Is_Gc:	__TitlecaseLETTER}', "");
Expect(0, 452, '\P{^Is_Gc:	__TitlecaseLETTER}', "");
Error('\p{Is_Category=-Lt:=}');
Error('\P{Is_Category=-Lt:=}');
Expect(1, 453, '\p{Is_Category=lt}', "");
Expect(0, 453, '\p{^Is_Category=lt}', "");
Expect(0, 453, '\P{Is_Category=lt}', "");
Expect(1, 453, '\P{^Is_Category=lt}', "");
Expect(0, 452, '\p{Is_Category=lt}', "");
Expect(1, 452, '\p{^Is_Category=lt}', "");
Expect(1, 452, '\P{Is_Category=lt}', "");
Expect(0, 452, '\P{^Is_Category=lt}', "");
Expect(1, 453, '\p{Is_Category=_ Lt}', "");
Expect(0, 453, '\p{^Is_Category=_ Lt}', "");
Expect(0, 453, '\P{Is_Category=_ Lt}', "");
Expect(1, 453, '\P{^Is_Category=_ Lt}', "");
Expect(0, 452, '\p{Is_Category=_ Lt}', "");
Expect(1, 452, '\p{^Is_Category=_ Lt}', "");
Expect(1, 452, '\P{Is_Category=_ Lt}', "");
Expect(0, 452, '\P{^Is_Category=_ Lt}', "");
Error('\p{General_Category=:=_Punctuation}');
Error('\P{General_Category=:=_Punctuation}');
Expect(1, 35, '\p{General_Category=punctuation}', "");
Expect(0, 35, '\p{^General_Category=punctuation}', "");
Expect(0, 35, '\P{General_Category=punctuation}', "");
Expect(1, 35, '\P{^General_Category=punctuation}', "");
Expect(0, 32, '\p{General_Category=punctuation}', "");
Expect(1, 32, '\p{^General_Category=punctuation}', "");
Expect(1, 32, '\P{General_Category=punctuation}', "");
Expect(0, 32, '\P{^General_Category=punctuation}', "");
Expect(1, 35, '\p{General_Category:-Punctuation}', "");
Expect(0, 35, '\p{^General_Category:-Punctuation}', "");
Expect(0, 35, '\P{General_Category:-Punctuation}', "");
Expect(1, 35, '\P{^General_Category:-Punctuation}', "");
Expect(0, 32, '\p{General_Category:-Punctuation}', "");
Expect(1, 32, '\p{^General_Category:-Punctuation}', "");
Expect(1, 32, '\P{General_Category:-Punctuation}', "");
Expect(0, 32, '\P{^General_Category:-Punctuation}', "");
Error('\p{Gc=/a/P}');
Error('\P{Gc=/a/P}');
Expect(1, 35, '\p{Gc=p}', "");
Expect(0, 35, '\p{^Gc=p}', "");
Expect(0, 35, '\P{Gc=p}', "");
Expect(1, 35, '\P{^Gc=p}', "");
Expect(0, 32, '\p{Gc=p}', "");
Expect(1, 32, '\p{^Gc=p}', "");
Expect(1, 32, '\P{Gc=p}', "");
Expect(0, 32, '\P{^Gc=p}', "");
Expect(1, 35, '\p{Gc= 	P}', "");
Expect(0, 35, '\p{^Gc= 	P}', "");
Expect(0, 35, '\P{Gc= 	P}', "");
Expect(1, 35, '\P{^Gc= 	P}', "");
Expect(0, 32, '\p{Gc= 	P}', "");
Expect(1, 32, '\p{^Gc= 	P}', "");
Expect(1, 32, '\P{Gc= 	P}', "");
Expect(0, 32, '\P{^Gc= 	P}', "");
Error('\p{Category=-Punct:=}');
Error('\P{Category=-Punct:=}');
Expect(1, 35, '\p{Category=punct}', "");
Expect(0, 35, '\p{^Category=punct}', "");
Expect(0, 35, '\P{Category=punct}', "");
Expect(1, 35, '\P{^Category=punct}', "");
Expect(0, 32, '\p{Category=punct}', "");
Expect(1, 32, '\p{^Category=punct}', "");
Expect(1, 32, '\P{Category=punct}', "");
Expect(0, 32, '\P{^Category=punct}', "");
Expect(1, 35, '\p{Category=_Punct}', "");
Expect(0, 35, '\p{^Category=_Punct}', "");
Expect(0, 35, '\P{Category=_Punct}', "");
Expect(1, 35, '\P{^Category=_Punct}', "");
Expect(0, 32, '\p{Category=_Punct}', "");
Expect(1, 32, '\p{^Category=_Punct}', "");
Expect(1, 32, '\P{Category=_Punct}', "");
Expect(0, 32, '\P{^Category=_Punct}', "");
Error('\p{Is_General_Category=-/a/Punctuation}');
Error('\P{Is_General_Category=-/a/Punctuation}');
Expect(1, 35, '\p{Is_General_Category=punctuation}', "");
Expect(0, 35, '\p{^Is_General_Category=punctuation}', "");
Expect(0, 35, '\P{Is_General_Category=punctuation}', "");
Expect(1, 35, '\P{^Is_General_Category=punctuation}', "");
Expect(0, 32, '\p{Is_General_Category=punctuation}', "");
Expect(1, 32, '\p{^Is_General_Category=punctuation}', "");
Expect(1, 32, '\P{Is_General_Category=punctuation}', "");
Expect(0, 32, '\P{^Is_General_Category=punctuation}', "");
Expect(1, 35, '\p{Is_General_Category=-	Punctuation}', "");
Expect(0, 35, '\p{^Is_General_Category=-	Punctuation}', "");
Expect(0, 35, '\P{Is_General_Category=-	Punctuation}', "");
Expect(1, 35, '\P{^Is_General_Category=-	Punctuation}', "");
Expect(0, 32, '\p{Is_General_Category=-	Punctuation}', "");
Expect(1, 32, '\p{^Is_General_Category=-	Punctuation}', "");
Expect(1, 32, '\P{Is_General_Category=-	Punctuation}', "");
Expect(0, 32, '\P{^Is_General_Category=-	Punctuation}', "");
Error('\p{Is_Gc=_P/a/}');
Error('\P{Is_Gc=_P/a/}');
Expect(1, 35, '\p{Is_Gc=p}', "");
Expect(0, 35, '\p{^Is_Gc=p}', "");
Expect(0, 35, '\P{Is_Gc=p}', "");
Expect(1, 35, '\P{^Is_Gc=p}', "");
Expect(0, 32, '\p{Is_Gc=p}', "");
Expect(1, 32, '\p{^Is_Gc=p}', "");
Expect(1, 32, '\P{Is_Gc=p}', "");
Expect(0, 32, '\P{^Is_Gc=p}', "");
Expect(1, 35, '\p{Is_Gc=--P}', "");
Expect(0, 35, '\p{^Is_Gc=--P}', "");
Expect(0, 35, '\P{Is_Gc=--P}', "");
Expect(1, 35, '\P{^Is_Gc=--P}', "");
Expect(0, 32, '\p{Is_Gc=--P}', "");
Expect(1, 32, '\p{^Is_Gc=--P}', "");
Expect(1, 32, '\P{Is_Gc=--P}', "");
Expect(0, 32, '\P{^Is_Gc=--P}', "");
Error('\p{Is_Category=	punct/a/}');
Error('\P{Is_Category=	punct/a/}');
Expect(1, 35, '\p{Is_Category=punct}', "");
Expect(0, 35, '\p{^Is_Category=punct}', "");
Expect(0, 35, '\P{Is_Category=punct}', "");
Expect(1, 35, '\P{^Is_Category=punct}', "");
Expect(0, 32, '\p{Is_Category=punct}', "");
Expect(1, 32, '\p{^Is_Category=punct}', "");
Expect(1, 32, '\P{Is_Category=punct}', "");
Expect(0, 32, '\P{^Is_Category=punct}', "");
Expect(1, 35, '\p{Is_Category=_ punct}', "");
Expect(0, 35, '\p{^Is_Category=_ punct}', "");
Expect(0, 35, '\P{Is_Category=_ punct}', "");
Expect(1, 35, '\P{^Is_Category=_ punct}', "");
Expect(0, 32, '\p{Is_Category=_ punct}', "");
Expect(1, 32, '\p{^Is_Category=_ punct}', "");
Expect(1, 32, '\P{Is_Category=_ punct}', "");
Expect(0, 32, '\P{^Is_Category=_ punct}', "");
Error('\p{General_Category=  UPPERCASE/a/LETTER}');
Error('\P{General_Category=  UPPERCASE/a/LETTER}');
Expect(1, 90, '\p{General_Category=uppercaseletter}', "");
Expect(0, 90, '\p{^General_Category=uppercaseletter}', "");
Expect(0, 90, '\P{General_Category=uppercaseletter}', "");
Expect(1, 90, '\P{^General_Category=uppercaseletter}', "");
Expect(0, 64, '\p{General_Category=uppercaseletter}', "");
Expect(1, 64, '\p{^General_Category=uppercaseletter}', "");
Expect(1, 64, '\P{General_Category=uppercaseletter}', "");
Expect(0, 64, '\P{^General_Category=uppercaseletter}', "");
Expect(1, 90, '\p{General_Category=	-uppercase-Letter}', "");
Expect(0, 90, '\p{^General_Category=	-uppercase-Letter}', "");
Expect(0, 90, '\P{General_Category=	-uppercase-Letter}', "");
Expect(1, 90, '\P{^General_Category=	-uppercase-Letter}', "");
Expect(0, 64, '\p{General_Category=	-uppercase-Letter}', "");
Expect(1, 64, '\p{^General_Category=	-uppercase-Letter}', "");
Expect(1, 64, '\P{General_Category=	-uppercase-Letter}', "");
Expect(0, 64, '\P{^General_Category=	-uppercase-Letter}', "");
Error('\p{Gc=/a/-	LU}');
Error('\P{Gc=/a/-	LU}');
Expect(1, 90, '\p{Gc=lu}', "");
Expect(0, 90, '\p{^Gc=lu}', "");
Expect(0, 90, '\P{Gc=lu}', "");
Expect(1, 90, '\P{^Gc=lu}', "");
Expect(0, 64, '\p{Gc=lu}', "");
Expect(1, 64, '\p{^Gc=lu}', "");
Expect(1, 64, '\P{Gc=lu}', "");
Expect(0, 64, '\P{^Gc=lu}', "");
Expect(1, 90, '\p{Gc=--LU}', "");
Expect(0, 90, '\p{^Gc=--LU}', "");
Expect(0, 90, '\P{Gc=--LU}', "");
Expect(1, 90, '\P{^Gc=--LU}', "");
Expect(0, 64, '\p{Gc=--LU}', "");
Expect(1, 64, '\p{^Gc=--LU}', "");
Expect(1, 64, '\P{Gc=--LU}', "");
Expect(0, 64, '\P{^Gc=--LU}', "");
Error('\p{Category=:=		UPPERCASE-LETTER}');
Error('\P{Category=:=		UPPERCASE-LETTER}');
Expect(1, 90, '\p{Category=uppercaseletter}', "");
Expect(0, 90, '\p{^Category=uppercaseletter}', "");
Expect(0, 90, '\P{Category=uppercaseletter}', "");
Expect(1, 90, '\P{^Category=uppercaseletter}', "");
Expect(0, 64, '\p{Category=uppercaseletter}', "");
Expect(1, 64, '\p{^Category=uppercaseletter}', "");
Expect(1, 64, '\P{Category=uppercaseletter}', "");
Expect(0, 64, '\P{^Category=uppercaseletter}', "");
Expect(1, 90, '\p{Category= -uppercase Letter}', "");
Expect(0, 90, '\p{^Category= -uppercase Letter}', "");
Expect(0, 90, '\P{Category= -uppercase Letter}', "");
Expect(1, 90, '\P{^Category= -uppercase Letter}', "");
Expect(0, 64, '\p{Category= -uppercase Letter}', "");
Expect(1, 64, '\p{^Category= -uppercase Letter}', "");
Expect(1, 64, '\P{Category= -uppercase Letter}', "");
Expect(0, 64, '\P{^Category= -uppercase Letter}', "");
Error('\p{Is_General_Category= lu:=}');
Error('\P{Is_General_Category= lu:=}');
Expect(1, 90, '\p{Is_General_Category=lu}', "");
Expect(0, 90, '\p{^Is_General_Category=lu}', "");
Expect(0, 90, '\P{Is_General_Category=lu}', "");
Expect(1, 90, '\P{^Is_General_Category=lu}', "");
Expect(0, 64, '\p{Is_General_Category=lu}', "");
Expect(1, 64, '\p{^Is_General_Category=lu}', "");
Expect(1, 64, '\P{Is_General_Category=lu}', "");
Expect(0, 64, '\P{^Is_General_Category=lu}', "");
Expect(1, 90, '\p{Is_General_Category= _Lu}', "");
Expect(0, 90, '\p{^Is_General_Category= _Lu}', "");
Expect(0, 90, '\P{Is_General_Category= _Lu}', "");
Expect(1, 90, '\P{^Is_General_Category= _Lu}', "");
Expect(0, 64, '\p{Is_General_Category= _Lu}', "");
Expect(1, 64, '\p{^Is_General_Category= _Lu}', "");
Expect(1, 64, '\P{Is_General_Category= _Lu}', "");
Expect(0, 64, '\P{^Is_General_Category= _Lu}', "");
Error('\p{Is_Gc=_ uppercase	letter/a/}');
Error('\P{Is_Gc=_ uppercase	letter/a/}');
Expect(1, 90, '\p{Is_Gc=uppercaseletter}', "");
Expect(0, 90, '\p{^Is_Gc=uppercaseletter}', "");
Expect(0, 90, '\P{Is_Gc=uppercaseletter}', "");
Expect(1, 90, '\P{^Is_Gc=uppercaseletter}', "");
Expect(0, 64, '\p{Is_Gc=uppercaseletter}', "");
Expect(1, 64, '\p{^Is_Gc=uppercaseletter}', "");
Expect(1, 64, '\P{Is_Gc=uppercaseletter}', "");
Expect(0, 64, '\P{^Is_Gc=uppercaseletter}', "");
Expect(1, 90, '\p{Is_Gc=	-UPPERCASELETTER}', "");
Expect(0, 90, '\p{^Is_Gc=	-UPPERCASELETTER}', "");
Expect(0, 90, '\P{Is_Gc=	-UPPERCASELETTER}', "");
Expect(1, 90, '\P{^Is_Gc=	-UPPERCASELETTER}', "");
Expect(0, 64, '\p{Is_Gc=	-UPPERCASELETTER}', "");
Expect(1, 64, '\p{^Is_Gc=	-UPPERCASELETTER}', "");
Expect(1, 64, '\P{Is_Gc=	-UPPERCASELETTER}', "");
Expect(0, 64, '\P{^Is_Gc=	-UPPERCASELETTER}', "");
Error('\p{Is_Category=-:=Lu}');
Error('\P{Is_Category=-:=Lu}');
Expect(1, 90, '\p{Is_Category=lu}', "");
Expect(0, 90, '\p{^Is_Category=lu}', "");
Expect(0, 90, '\P{Is_Category=lu}', "");
Expect(1, 90, '\P{^Is_Category=lu}', "");
Expect(0, 64, '\p{Is_Category=lu}', "");
Expect(1, 64, '\p{^Is_Category=lu}', "");
Expect(1, 64, '\P{Is_Category=lu}', "");
Expect(0, 64, '\P{^Is_Category=lu}', "");
Expect(1, 90, '\p{Is_Category=	-lu}', "");
Expect(0, 90, '\p{^Is_Category=	-lu}', "");
Expect(0, 90, '\P{Is_Category=	-lu}', "");
Expect(1, 90, '\P{^Is_Category=	-lu}', "");
Expect(0, 64, '\p{Is_Category=	-lu}', "");
Expect(1, 64, '\p{^Is_Category=	-lu}', "");
Expect(1, 64, '\P{Is_Category=	-lu}', "");
Expect(0, 64, '\P{^Is_Category=	-lu}', "");
Error('\p{General_Category=__Number/a/}');
Error('\P{General_Category=__Number/a/}');
Expect(1, 57, '\p{General_Category=number}', "");
Expect(0, 57, '\p{^General_Category=number}', "");
Expect(0, 57, '\P{General_Category=number}', "");
Expect(1, 57, '\P{^General_Category=number}', "");
Expect(0, 47, '\p{General_Category=number}', "");
Expect(1, 47, '\p{^General_Category=number}', "");
Expect(1, 47, '\P{General_Category=number}', "");
Expect(0, 47, '\P{^General_Category=number}', "");
Expect(1, 57, '\p{General_Category= 	Number}', "");
Expect(0, 57, '\p{^General_Category= 	Number}', "");
Expect(0, 57, '\P{General_Category= 	Number}', "");
Expect(1, 57, '\P{^General_Category= 	Number}', "");
Expect(0, 47, '\p{General_Category= 	Number}', "");
Expect(1, 47, '\p{^General_Category= 	Number}', "");
Expect(1, 47, '\P{General_Category= 	Number}', "");
Expect(0, 47, '\P{^General_Category= 	Number}', "");
Error('\p{Gc=	/a/N}');
Error('\P{Gc=	/a/N}');
Expect(1, 57, '\p{Gc=n}', "");
Expect(0, 57, '\p{^Gc=n}', "");
Expect(0, 57, '\P{Gc=n}', "");
Expect(1, 57, '\P{^Gc=n}', "");
Expect(0, 47, '\p{Gc=n}', "");
Expect(1, 47, '\p{^Gc=n}', "");
Expect(1, 47, '\P{Gc=n}', "");
Expect(0, 47, '\P{^Gc=n}', "");
Expect(1, 57, '\p{Gc=  N}', "");
Expect(0, 57, '\p{^Gc=  N}', "");
Expect(0, 57, '\P{Gc=  N}', "");
Expect(1, 57, '\P{^Gc=  N}', "");
Expect(0, 47, '\p{Gc=  N}', "");
Expect(1, 47, '\p{^Gc=  N}', "");
Expect(1, 47, '\P{Gc=  N}', "");
Expect(0, 47, '\P{^Gc=  N}', "");
Error('\p{Category=:=_	NUMBER}');
Error('\P{Category=:=_	NUMBER}');
Expect(1, 57, '\p{Category=number}', "");
Expect(0, 57, '\p{^Category=number}', "");
Expect(0, 57, '\P{Category=number}', "");
Expect(1, 57, '\P{^Category=number}', "");
Expect(0, 47, '\p{Category=number}', "");
Expect(1, 47, '\p{^Category=number}', "");
Expect(1, 47, '\P{Category=number}', "");
Expect(0, 47, '\P{^Category=number}', "");
Expect(1, 57, '\p{Category=-_NUMBER}', "");
Expect(0, 57, '\p{^Category=-_NUMBER}', "");
Expect(0, 57, '\P{Category=-_NUMBER}', "");
Expect(1, 57, '\P{^Category=-_NUMBER}', "");
Expect(0, 47, '\p{Category=-_NUMBER}', "");
Expect(1, 47, '\p{^Category=-_NUMBER}', "");
Expect(1, 47, '\P{Category=-_NUMBER}', "");
Expect(0, 47, '\P{^Category=-_NUMBER}', "");
Error('\p{Is_General_Category=- n/a/}');
Error('\P{Is_General_Category=- n/a/}');
Expect(1, 57, '\p{Is_General_Category:	n}', "");
Expect(0, 57, '\p{^Is_General_Category:	n}', "");
Expect(0, 57, '\P{Is_General_Category:	n}', "");
Expect(1, 57, '\P{^Is_General_Category:	n}', "");
Expect(0, 47, '\p{Is_General_Category:	n}', "");
Expect(1, 47, '\p{^Is_General_Category:	n}', "");
Expect(1, 47, '\P{Is_General_Category:	n}', "");
Expect(0, 47, '\P{^Is_General_Category:	n}', "");
Expect(1, 57, '\p{Is_General_Category= _N}', "");
Expect(0, 57, '\p{^Is_General_Category= _N}', "");
Expect(0, 57, '\P{Is_General_Category= _N}', "");
Expect(1, 57, '\P{^Is_General_Category= _N}', "");
Expect(0, 47, '\p{Is_General_Category= _N}', "");
Expect(1, 47, '\p{^Is_General_Category= _N}', "");
Expect(1, 47, '\P{Is_General_Category= _N}', "");
Expect(0, 47, '\P{^Is_General_Category= _N}', "");
Error('\p{Is_Gc=	/a/number}');
Error('\P{Is_Gc=	/a/number}');
Expect(1, 57, '\p{Is_Gc=number}', "");
Expect(0, 57, '\p{^Is_Gc=number}', "");
Expect(0, 57, '\P{Is_Gc=number}', "");
Expect(1, 57, '\P{^Is_Gc=number}', "");
Expect(0, 47, '\p{Is_Gc=number}', "");
Expect(1, 47, '\p{^Is_Gc=number}', "");
Expect(1, 47, '\P{Is_Gc=number}', "");
Expect(0, 47, '\P{^Is_Gc=number}', "");
Expect(1, 57, '\p{Is_Gc=_-number}', "");
Expect(0, 57, '\p{^Is_Gc=_-number}', "");
Expect(0, 57, '\P{Is_Gc=_-number}', "");
Expect(1, 57, '\P{^Is_Gc=_-number}', "");
Expect(0, 47, '\p{Is_Gc=_-number}', "");
Expect(1, 47, '\p{^Is_Gc=_-number}', "");
Expect(1, 47, '\P{Is_Gc=_-number}', "");
Expect(0, 47, '\P{^Is_Gc=_-number}', "");
Error('\p{Is_Category=	/a/N}');
Error('\P{Is_Category=	/a/N}');
Expect(1, 57, '\p{Is_Category=n}', "");
Expect(0, 57, '\p{^Is_Category=n}', "");
Expect(0, 57, '\P{Is_Category=n}', "");
Expect(1, 57, '\P{^Is_Category=n}', "");
Expect(0, 47, '\p{Is_Category=n}', "");
Expect(1, 47, '\p{^Is_Category=n}', "");
Expect(1, 47, '\P{Is_Category=n}', "");
Expect(0, 47, '\P{^Is_Category=n}', "");
Expect(1, 57, '\p{Is_Category=-_N}', "");
Expect(0, 57, '\p{^Is_Category=-_N}', "");
Expect(0, 57, '\P{Is_Category=-_N}', "");
Expect(1, 57, '\P{^Is_Category=-_N}', "");
Expect(0, 47, '\p{Is_Category=-_N}', "");
Expect(1, 47, '\p{^Is_Category=-_N}', "");
Expect(1, 47, '\P{Is_Category=-_N}', "");
Expect(0, 47, '\P{^Is_Category=-_N}', "");
Error('\p{General_Category=/a/_ FinalPunctuation}');
Error('\P{General_Category=/a/_ FinalPunctuation}');
Expect(1, 187, '\p{General_Category=finalpunctuation}', "");
Expect(0, 187, '\p{^General_Category=finalpunctuation}', "");
Expect(0, 187, '\P{General_Category=finalpunctuation}', "");
Expect(1, 187, '\P{^General_Category=finalpunctuation}', "");
Expect(0, 186, '\p{General_Category=finalpunctuation}', "");
Expect(1, 186, '\p{^General_Category=finalpunctuation}', "");
Expect(1, 186, '\P{General_Category=finalpunctuation}', "");
Expect(0, 186, '\P{^General_Category=finalpunctuation}', "");
Expect(1, 187, '\p{General_Category=	 FINAL_Punctuation}', "");
Expect(0, 187, '\p{^General_Category=	 FINAL_Punctuation}', "");
Expect(0, 187, '\P{General_Category=	 FINAL_Punctuation}', "");
Expect(1, 187, '\P{^General_Category=	 FINAL_Punctuation}', "");
Expect(0, 186, '\p{General_Category=	 FINAL_Punctuation}', "");
Expect(1, 186, '\p{^General_Category=	 FINAL_Punctuation}', "");
Expect(1, 186, '\P{General_Category=	 FINAL_Punctuation}', "");
Expect(0, 186, '\P{^General_Category=	 FINAL_Punctuation}', "");
Error('\p{Gc=:=	pf}');
Error('\P{Gc=:=	pf}');
Expect(1, 187, '\p{Gc:   pf}', "");
Expect(0, 187, '\p{^Gc:   pf}', "");
Expect(0, 187, '\P{Gc:   pf}', "");
Expect(1, 187, '\P{^Gc:   pf}', "");
Expect(0, 186, '\p{Gc:   pf}', "");
Expect(1, 186, '\p{^Gc:   pf}', "");
Expect(1, 186, '\P{Gc:   pf}', "");
Expect(0, 186, '\P{^Gc:   pf}', "");
Expect(1, 187, '\p{Gc= 	pf}', "");
Expect(0, 187, '\p{^Gc= 	pf}', "");
Expect(0, 187, '\P{Gc= 	pf}', "");
Expect(1, 187, '\P{^Gc= 	pf}', "");
Expect(0, 186, '\p{Gc= 	pf}', "");
Expect(1, 186, '\p{^Gc= 	pf}', "");
Expect(1, 186, '\P{Gc= 	pf}', "");
Expect(0, 186, '\P{^Gc= 	pf}', "");
Error('\p{Category=	/a/FINAL Punctuation}');
Error('\P{Category=	/a/FINAL Punctuation}');
Expect(1, 187, '\p{Category=finalpunctuation}', "");
Expect(0, 187, '\p{^Category=finalpunctuation}', "");
Expect(0, 187, '\P{Category=finalpunctuation}', "");
Expect(1, 187, '\P{^Category=finalpunctuation}', "");
Expect(0, 186, '\p{Category=finalpunctuation}', "");
Expect(1, 186, '\p{^Category=finalpunctuation}', "");
Expect(1, 186, '\P{Category=finalpunctuation}', "");
Expect(0, 186, '\P{^Category=finalpunctuation}', "");
Expect(1, 187, '\p{Category=- final punctuation}', "");
Expect(0, 187, '\p{^Category=- final punctuation}', "");
Expect(0, 187, '\P{Category=- final punctuation}', "");
Expect(1, 187, '\P{^Category=- final punctuation}', "");
Expect(0, 186, '\p{Category=- final punctuation}', "");
Expect(1, 186, '\p{^Category=- final punctuation}', "");
Expect(1, 186, '\P{Category=- final punctuation}', "");
Expect(0, 186, '\P{^Category=- final punctuation}', "");
Error('\p{Is_General_Category= _pf:=}');
Error('\P{Is_General_Category= _pf:=}');
Expect(1, 187, '\p{Is_General_Category=pf}', "");
Expect(0, 187, '\p{^Is_General_Category=pf}', "");
Expect(0, 187, '\P{Is_General_Category=pf}', "");
Expect(1, 187, '\P{^Is_General_Category=pf}', "");
Expect(0, 186, '\p{Is_General_Category=pf}', "");
Expect(1, 186, '\p{^Is_General_Category=pf}', "");
Expect(1, 186, '\P{Is_General_Category=pf}', "");
Expect(0, 186, '\P{^Is_General_Category=pf}', "");
Expect(1, 187, '\p{Is_General_Category=_ PF}', "");
Expect(0, 187, '\p{^Is_General_Category=_ PF}', "");
Expect(0, 187, '\P{Is_General_Category=_ PF}', "");
Expect(1, 187, '\P{^Is_General_Category=_ PF}', "");
Expect(0, 186, '\p{Is_General_Category=_ PF}', "");
Expect(1, 186, '\p{^Is_General_Category=_ PF}', "");
Expect(1, 186, '\P{Is_General_Category=_ PF}', "");
Expect(0, 186, '\P{^Is_General_Category=_ PF}', "");
Error('\p{Is_Gc= 	final punctuation/a/}');
Error('\P{Is_Gc= 	final punctuation/a/}');
Expect(1, 187, '\p{Is_Gc=finalpunctuation}', "");
Expect(0, 187, '\p{^Is_Gc=finalpunctuation}', "");
Expect(0, 187, '\P{Is_Gc=finalpunctuation}', "");
Expect(1, 187, '\P{^Is_Gc=finalpunctuation}', "");
Expect(0, 186, '\p{Is_Gc=finalpunctuation}', "");
Expect(1, 186, '\p{^Is_Gc=finalpunctuation}', "");
Expect(1, 186, '\P{Is_Gc=finalpunctuation}', "");
Expect(0, 186, '\P{^Is_Gc=finalpunctuation}', "");
Expect(1, 187, '\p{Is_Gc=- Final-Punctuation}', "");
Expect(0, 187, '\p{^Is_Gc=- Final-Punctuation}', "");
Expect(0, 187, '\P{Is_Gc=- Final-Punctuation}', "");
Expect(1, 187, '\P{^Is_Gc=- Final-Punctuation}', "");
Expect(0, 186, '\p{Is_Gc=- Final-Punctuation}', "");
Expect(1, 186, '\p{^Is_Gc=- Final-Punctuation}', "");
Expect(1, 186, '\P{Is_Gc=- Final-Punctuation}', "");
Expect(0, 186, '\P{^Is_Gc=- Final-Punctuation}', "");
Error('\p{Is_Category=:=-Pf}');
Error('\P{Is_Category=:=-Pf}');
Expect(1, 187, '\p{Is_Category: pf}', "");
Expect(0, 187, '\p{^Is_Category: pf}', "");
Expect(0, 187, '\P{Is_Category: pf}', "");
Expect(1, 187, '\P{^Is_Category: pf}', "");
Expect(0, 186, '\p{Is_Category: pf}', "");
Expect(1, 186, '\p{^Is_Category: pf}', "");
Expect(1, 186, '\P{Is_Category: pf}', "");
Expect(0, 186, '\P{^Is_Category: pf}', "");
Expect(1, 187, '\p{Is_Category=  Pf}', "");
Expect(0, 187, '\p{^Is_Category=  Pf}', "");
Expect(0, 187, '\P{Is_Category=  Pf}', "");
Expect(1, 187, '\P{^Is_Category=  Pf}', "");
Expect(0, 186, '\p{Is_Category=  Pf}', "");
Expect(1, 186, '\p{^Is_Category=  Pf}', "");
Expect(1, 186, '\P{Is_Category=  Pf}', "");
Expect(0, 186, '\P{^Is_Category=  Pf}', "");
Error('\p{General_Category:/a/--UNASSIGNED}');
Error('\P{General_Category:/a/--UNASSIGNED}');
Expect(1, 889, '\p{General_Category=unassigned}', "");
Expect(0, 889, '\p{^General_Category=unassigned}', "");
Expect(0, 889, '\P{General_Category=unassigned}', "");
Expect(1, 889, '\P{^General_Category=unassigned}', "");
Expect(0, 887, '\p{General_Category=unassigned}', "");
Expect(1, 887, '\p{^General_Category=unassigned}', "");
Expect(1, 887, '\P{General_Category=unassigned}', "");
Expect(0, 887, '\P{^General_Category=unassigned}', "");
Expect(1, 889, '\p{General_Category=_ Unassigned}', "");
Expect(0, 889, '\p{^General_Category=_ Unassigned}', "");
Expect(0, 889, '\P{General_Category=_ Unassigned}', "");
Expect(1, 889, '\P{^General_Category=_ Unassigned}', "");
Expect(0, 887, '\p{General_Category=_ Unassigned}', "");
Expect(1, 887, '\p{^General_Category=_ Unassigned}', "");
Expect(1, 887, '\P{General_Category=_ Unassigned}', "");
Expect(0, 887, '\P{^General_Category=_ Unassigned}', "");
Error('\p{Gc=--cn:=}');
Error('\P{Gc=--cn:=}');
Expect(1, 889, '\p{Gc=cn}', "");
Expect(0, 889, '\p{^Gc=cn}', "");
Expect(0, 889, '\P{Gc=cn}', "");
Expect(1, 889, '\P{^Gc=cn}', "");
Expect(0, 887, '\p{Gc=cn}', "");
Expect(1, 887, '\p{^Gc=cn}', "");
Expect(1, 887, '\P{Gc=cn}', "");
Expect(0, 887, '\P{^Gc=cn}', "");
Expect(1, 889, '\p{Gc= -cn}', "");
Expect(0, 889, '\p{^Gc= -cn}', "");
Expect(0, 889, '\P{Gc= -cn}', "");
Expect(1, 889, '\P{^Gc= -cn}', "");
Expect(0, 887, '\p{Gc= -cn}', "");
Expect(1, 887, '\p{^Gc= -cn}', "");
Expect(1, 887, '\P{Gc= -cn}', "");
Expect(0, 887, '\P{^Gc= -cn}', "");
Error('\p{Category=	Unassigned/a/}');
Error('\P{Category=	Unassigned/a/}');
Expect(1, 889, '\p{Category=unassigned}', "");
Expect(0, 889, '\p{^Category=unassigned}', "");
Expect(0, 889, '\P{Category=unassigned}', "");
Expect(1, 889, '\P{^Category=unassigned}', "");
Expect(0, 887, '\p{Category=unassigned}', "");
Expect(1, 887, '\p{^Category=unassigned}', "");
Expect(1, 887, '\P{Category=unassigned}', "");
Expect(0, 887, '\P{^Category=unassigned}', "");
Expect(1, 889, '\p{Category=-_Unassigned}', "");
Expect(0, 889, '\p{^Category=-_Unassigned}', "");
Expect(0, 889, '\P{Category=-_Unassigned}', "");
Expect(1, 889, '\P{^Category=-_Unassigned}', "");
Expect(0, 887, '\p{Category=-_Unassigned}', "");
Expect(1, 887, '\p{^Category=-_Unassigned}', "");
Expect(1, 887, '\P{Category=-_Unassigned}', "");
Expect(0, 887, '\P{^Category=-_Unassigned}', "");
Error('\p{Is_General_Category=:=_	CN}');
Error('\P{Is_General_Category=:=_	CN}');
Expect(1, 889, '\p{Is_General_Category=cn}', "");
Expect(0, 889, '\p{^Is_General_Category=cn}', "");
Expect(0, 889, '\P{Is_General_Category=cn}', "");
Expect(1, 889, '\P{^Is_General_Category=cn}', "");
Expect(0, 887, '\p{Is_General_Category=cn}', "");
Expect(1, 887, '\p{^Is_General_Category=cn}', "");
Expect(1, 887, '\P{Is_General_Category=cn}', "");
Expect(0, 887, '\P{^Is_General_Category=cn}', "");
Expect(1, 889, '\p{Is_General_Category=	CN}', "");
Expect(0, 889, '\p{^Is_General_Category=	CN}', "");
Expect(0, 889, '\P{Is_General_Category=	CN}', "");
Expect(1, 889, '\P{^Is_General_Category=	CN}', "");
Expect(0, 887, '\p{Is_General_Category=	CN}', "");
Expect(1, 887, '\p{^Is_General_Category=	CN}', "");
Expect(1, 887, '\P{Is_General_Category=	CN}', "");
Expect(0, 887, '\P{^Is_General_Category=	CN}', "");
Error('\p{Is_Gc=	:=Unassigned}');
Error('\P{Is_Gc=	:=Unassigned}');
Expect(1, 889, '\p{Is_Gc=unassigned}', "");
Expect(0, 889, '\p{^Is_Gc=unassigned}', "");
Expect(0, 889, '\P{Is_Gc=unassigned}', "");
Expect(1, 889, '\P{^Is_Gc=unassigned}', "");
Expect(0, 887, '\p{Is_Gc=unassigned}', "");
Expect(1, 887, '\p{^Is_Gc=unassigned}', "");
Expect(1, 887, '\P{Is_Gc=unassigned}', "");
Expect(0, 887, '\P{^Is_Gc=unassigned}', "");
Expect(1, 889, '\p{Is_Gc:	_unassigned}', "");
Expect(0, 889, '\p{^Is_Gc:	_unassigned}', "");
Expect(0, 889, '\P{Is_Gc:	_unassigned}', "");
Expect(1, 889, '\P{^Is_Gc:	_unassigned}', "");
Expect(0, 887, '\p{Is_Gc:	_unassigned}', "");
Expect(1, 887, '\p{^Is_Gc:	_unassigned}', "");
Expect(1, 887, '\P{Is_Gc:	_unassigned}', "");
Expect(0, 887, '\P{^Is_Gc:	_unassigned}', "");
Error('\p{Is_Category=	 Cn:=}');
Error('\P{Is_Category=	 Cn:=}');
Expect(1, 889, '\p{Is_Category=cn}', "");
Expect(0, 889, '\p{^Is_Category=cn}', "");
Expect(0, 889, '\P{Is_Category=cn}', "");
Expect(1, 889, '\P{^Is_Category=cn}', "");
Expect(0, 887, '\p{Is_Category=cn}', "");
Expect(1, 887, '\p{^Is_Category=cn}', "");
Expect(1, 887, '\P{Is_Category=cn}', "");
Expect(0, 887, '\P{^Is_Category=cn}', "");
Expect(1, 889, '\p{Is_Category=_Cn}', "");
Expect(0, 889, '\p{^Is_Category=_Cn}', "");
Expect(0, 889, '\P{Is_Category=_Cn}', "");
Expect(1, 889, '\P{^Is_Category=_Cn}', "");
Expect(0, 887, '\p{Is_Category=_Cn}', "");
Expect(1, 887, '\p{^Is_Category=_Cn}', "");
Expect(1, 887, '\P{Is_Category=_Cn}', "");
Expect(0, 887, '\P{^Is_Category=_Cn}', "");
Error('\p{General_Category=--Decimal/a/number}');
Error('\P{General_Category=--Decimal/a/number}');
Expect(1, 57, '\p{General_Category=decimalnumber}', "");
Expect(0, 57, '\p{^General_Category=decimalnumber}', "");
Expect(0, 57, '\P{General_Category=decimalnumber}', "");
Expect(1, 57, '\P{^General_Category=decimalnumber}', "");
Expect(0, 47, '\p{General_Category=decimalnumber}', "");
Expect(1, 47, '\p{^General_Category=decimalnumber}', "");
Expect(1, 47, '\P{General_Category=decimalnumber}', "");
Expect(0, 47, '\P{^General_Category=decimalnumber}', "");
Expect(1, 57, '\p{General_Category= decimal NUMBER}', "");
Expect(0, 57, '\p{^General_Category= decimal NUMBER}', "");
Expect(0, 57, '\P{General_Category= decimal NUMBER}', "");
Expect(1, 57, '\P{^General_Category= decimal NUMBER}', "");
Expect(0, 47, '\p{General_Category= decimal NUMBER}', "");
Expect(1, 47, '\p{^General_Category= decimal NUMBER}', "");
Expect(1, 47, '\P{General_Category= decimal NUMBER}', "");
Expect(0, 47, '\P{^General_Category= decimal NUMBER}', "");
Error('\p{Gc=/a/	ND}');
Error('\P{Gc=/a/	ND}');
Expect(1, 57, '\p{Gc=nd}', "");
Expect(0, 57, '\p{^Gc=nd}', "");
Expect(0, 57, '\P{Gc=nd}', "");
Expect(1, 57, '\P{^Gc=nd}', "");
Expect(0, 47, '\p{Gc=nd}', "");
Expect(1, 47, '\p{^Gc=nd}', "");
Expect(1, 47, '\P{Gc=nd}', "");
Expect(0, 47, '\P{^Gc=nd}', "");
Expect(1, 57, '\p{Gc=-_ND}', "");
Expect(0, 57, '\p{^Gc=-_ND}', "");
Expect(0, 57, '\P{Gc=-_ND}', "");
Expect(1, 57, '\P{^Gc=-_ND}', "");
Expect(0, 47, '\p{Gc=-_ND}', "");
Expect(1, 47, '\p{^Gc=-_ND}', "");
Expect(1, 47, '\P{Gc=-_ND}', "");
Expect(0, 47, '\P{^Gc=-_ND}', "");
Error('\p{Category=/a/ DIGIT}');
Error('\P{Category=/a/ DIGIT}');
Expect(1, 57, '\p{Category=digit}', "");
Expect(0, 57, '\p{^Category=digit}', "");
Expect(0, 57, '\P{Category=digit}', "");
Expect(1, 57, '\P{^Category=digit}', "");
Expect(0, 47, '\p{Category=digit}', "");
Expect(1, 47, '\p{^Category=digit}', "");
Expect(1, 47, '\P{Category=digit}', "");
Expect(0, 47, '\P{^Category=digit}', "");
Expect(1, 57, '\p{Category=	digit}', "");
Expect(0, 57, '\p{^Category=	digit}', "");
Expect(0, 57, '\P{Category=	digit}', "");
Expect(1, 57, '\P{^Category=	digit}', "");
Expect(0, 47, '\p{Category=	digit}', "");
Expect(1, 47, '\p{^Category=	digit}', "");
Expect(1, 47, '\P{Category=	digit}', "");
Expect(0, 47, '\P{^Category=	digit}', "");
Error('\p{Is_General_Category=:=	 Decimal-Number}');
Error('\P{Is_General_Category=:=	 Decimal-Number}');
Expect(1, 57, '\p{Is_General_Category:	decimalnumber}', "");
Expect(0, 57, '\p{^Is_General_Category:	decimalnumber}', "");
Expect(0, 57, '\P{Is_General_Category:	decimalnumber}', "");
Expect(1, 57, '\P{^Is_General_Category:	decimalnumber}', "");
Expect(0, 47, '\p{Is_General_Category:	decimalnumber}', "");
Expect(1, 47, '\p{^Is_General_Category:	decimalnumber}', "");
Expect(1, 47, '\P{Is_General_Category:	decimalnumber}', "");
Expect(0, 47, '\P{^Is_General_Category:	decimalnumber}', "");
Expect(1, 57, '\p{Is_General_Category= _decimal_NUMBER}', "");
Expect(0, 57, '\p{^Is_General_Category= _decimal_NUMBER}', "");
Expect(0, 57, '\P{Is_General_Category= _decimal_NUMBER}', "");
Expect(1, 57, '\P{^Is_General_Category= _decimal_NUMBER}', "");
Expect(0, 47, '\p{Is_General_Category= _decimal_NUMBER}', "");
Expect(1, 47, '\p{^Is_General_Category= _decimal_NUMBER}', "");
Expect(1, 47, '\P{Is_General_Category= _decimal_NUMBER}', "");
Expect(0, 47, '\P{^Is_General_Category= _decimal_NUMBER}', "");
Error('\p{Is_Gc=:=ND}');
Error('\P{Is_Gc=:=ND}');
Expect(1, 57, '\p{Is_Gc=nd}', "");
Expect(0, 57, '\p{^Is_Gc=nd}', "");
Expect(0, 57, '\P{Is_Gc=nd}', "");
Expect(1, 57, '\P{^Is_Gc=nd}', "");
Expect(0, 47, '\p{Is_Gc=nd}', "");
Expect(1, 47, '\p{^Is_Gc=nd}', "");
Expect(1, 47, '\P{Is_Gc=nd}', "");
Expect(0, 47, '\P{^Is_Gc=nd}', "");
Expect(1, 57, '\p{Is_Gc=_	Nd}', "");
Expect(0, 57, '\p{^Is_Gc=_	Nd}', "");
Expect(0, 57, '\P{Is_Gc=_	Nd}', "");
Expect(1, 57, '\P{^Is_Gc=_	Nd}', "");
Expect(0, 47, '\p{Is_Gc=_	Nd}', "");
Expect(1, 47, '\p{^Is_Gc=_	Nd}', "");
Expect(1, 47, '\P{Is_Gc=_	Nd}', "");
Expect(0, 47, '\P{^Is_Gc=_	Nd}', "");
Error('\p{Is_Category: /a/ 	Digit}');
Error('\P{Is_Category: /a/ 	Digit}');
Expect(1, 57, '\p{Is_Category=digit}', "");
Expect(0, 57, '\p{^Is_Category=digit}', "");
Expect(0, 57, '\P{Is_Category=digit}', "");
Expect(1, 57, '\P{^Is_Category=digit}', "");
Expect(0, 47, '\p{Is_Category=digit}', "");
Expect(1, 47, '\p{^Is_Category=digit}', "");
Expect(1, 47, '\P{Is_Category=digit}', "");
Expect(0, 47, '\P{^Is_Category=digit}', "");
Expect(1, 57, '\p{Is_Category= 	Digit}', "");
Expect(0, 57, '\p{^Is_Category= 	Digit}', "");
Expect(0, 57, '\P{Is_Category= 	Digit}', "");
Expect(1, 57, '\P{^Is_Category= 	Digit}', "");
Expect(0, 47, '\p{Is_Category= 	Digit}', "");
Expect(1, 47, '\p{^Is_Category= 	Digit}', "");
Expect(1, 47, '\P{Is_Category= 	Digit}', "");
Expect(0, 47, '\P{^Is_Category= 	Digit}', "");
Error('\p{General_Category= :=Paragraph-Separator}');
Error('\P{General_Category= :=Paragraph-Separator}');
Expect(1, 8233, '\p{General_Category=paragraphseparator}', "");
Expect(0, 8233, '\p{^General_Category=paragraphseparator}', "");
Expect(0, 8233, '\P{General_Category=paragraphseparator}', "");
Expect(1, 8233, '\P{^General_Category=paragraphseparator}', "");
Expect(0, 8232, '\p{General_Category=paragraphseparator}', "");
Expect(1, 8232, '\p{^General_Category=paragraphseparator}', "");
Expect(1, 8232, '\P{General_Category=paragraphseparator}', "");
Expect(0, 8232, '\P{^General_Category=paragraphseparator}', "");
Expect(1, 8233, '\p{General_Category= paragraphSeparator}', "");
Expect(0, 8233, '\p{^General_Category= paragraphSeparator}', "");
Expect(0, 8233, '\P{General_Category= paragraphSeparator}', "");
Expect(1, 8233, '\P{^General_Category= paragraphSeparator}', "");
Expect(0, 8232, '\p{General_Category= paragraphSeparator}', "");
Expect(1, 8232, '\p{^General_Category= paragraphSeparator}', "");
Expect(1, 8232, '\P{General_Category= paragraphSeparator}', "");
Expect(0, 8232, '\P{^General_Category= paragraphSeparator}', "");
Error('\p{Gc=/a/__Zp}');
Error('\P{Gc=/a/__Zp}');
Expect(1, 8233, '\p{Gc=zp}', "");
Expect(0, 8233, '\p{^Gc=zp}', "");
Expect(0, 8233, '\P{Gc=zp}', "");
Expect(1, 8233, '\P{^Gc=zp}', "");
Expect(0, 8232, '\p{Gc=zp}', "");
Expect(1, 8232, '\p{^Gc=zp}', "");
Expect(1, 8232, '\P{Gc=zp}', "");
Expect(0, 8232, '\P{^Gc=zp}', "");
Expect(1, 8233, '\p{Gc=	-ZP}', "");
Expect(0, 8233, '\p{^Gc=	-ZP}', "");
Expect(0, 8233, '\P{Gc=	-ZP}', "");
Expect(1, 8233, '\P{^Gc=	-ZP}', "");
Expect(0, 8232, '\p{Gc=	-ZP}', "");
Expect(1, 8232, '\p{^Gc=	-ZP}', "");
Expect(1, 8232, '\P{Gc=	-ZP}', "");
Expect(0, 8232, '\P{^Gc=	-ZP}', "");
Error('\p{Category=/a/ Paragraph_Separator}');
Error('\P{Category=/a/ Paragraph_Separator}');
Expect(1, 8233, '\p{Category=paragraphseparator}', "");
Expect(0, 8233, '\p{^Category=paragraphseparator}', "");
Expect(0, 8233, '\P{Category=paragraphseparator}', "");
Expect(1, 8233, '\P{^Category=paragraphseparator}', "");
Expect(0, 8232, '\p{Category=paragraphseparator}', "");
Expect(1, 8232, '\p{^Category=paragraphseparator}', "");
Expect(1, 8232, '\P{Category=paragraphseparator}', "");
Expect(0, 8232, '\P{^Category=paragraphseparator}', "");
Expect(1, 8233, '\p{Category=	Paragraph_Separator}', "");
Expect(0, 8233, '\p{^Category=	Paragraph_Separator}', "");
Expect(0, 8233, '\P{Category=	Paragraph_Separator}', "");
Expect(1, 8233, '\P{^Category=	Paragraph_Separator}', "");
Expect(0, 8232, '\p{Category=	Paragraph_Separator}', "");
Expect(1, 8232, '\p{^Category=	Paragraph_Separator}', "");
Expect(1, 8232, '\P{Category=	Paragraph_Separator}', "");
Expect(0, 8232, '\P{^Category=	Paragraph_Separator}', "");
Error('\p{Is_General_Category=_	zp:=}');
Error('\P{Is_General_Category=_	zp:=}');
Expect(1, 8233, '\p{Is_General_Category:   zp}', "");
Expect(0, 8233, '\p{^Is_General_Category:   zp}', "");
Expect(0, 8233, '\P{Is_General_Category:   zp}', "");
Expect(1, 8233, '\P{^Is_General_Category:   zp}', "");
Expect(0, 8232, '\p{Is_General_Category:   zp}', "");
Expect(1, 8232, '\p{^Is_General_Category:   zp}', "");
Expect(1, 8232, '\P{Is_General_Category:   zp}', "");
Expect(0, 8232, '\P{^Is_General_Category:   zp}', "");
Expect(1, 8233, '\p{Is_General_Category=-Zp}', "");
Expect(0, 8233, '\p{^Is_General_Category=-Zp}', "");
Expect(0, 8233, '\P{Is_General_Category=-Zp}', "");
Expect(1, 8233, '\P{^Is_General_Category=-Zp}', "");
Expect(0, 8232, '\p{Is_General_Category=-Zp}', "");
Expect(1, 8232, '\p{^Is_General_Category=-Zp}', "");
Expect(1, 8232, '\P{Is_General_Category=-Zp}', "");
Expect(0, 8232, '\P{^Is_General_Category=-Zp}', "");
Error('\p{Is_Gc=_/a/Paragraph_separator}');
Error('\P{Is_Gc=_/a/Paragraph_separator}');
Expect(1, 8233, '\p{Is_Gc=paragraphseparator}', "");
Expect(0, 8233, '\p{^Is_Gc=paragraphseparator}', "");
Expect(0, 8233, '\P{Is_Gc=paragraphseparator}', "");
Expect(1, 8233, '\P{^Is_Gc=paragraphseparator}', "");
Expect(0, 8232, '\p{Is_Gc=paragraphseparator}', "");
Expect(1, 8232, '\p{^Is_Gc=paragraphseparator}', "");
Expect(1, 8232, '\P{Is_Gc=paragraphseparator}', "");
Expect(0, 8232, '\P{^Is_Gc=paragraphseparator}', "");
Expect(1, 8233, '\p{Is_Gc=_	ParagraphSEPARATOR}', "");
Expect(0, 8233, '\p{^Is_Gc=_	ParagraphSEPARATOR}', "");
Expect(0, 8233, '\P{Is_Gc=_	ParagraphSEPARATOR}', "");
Expect(1, 8233, '\P{^Is_Gc=_	ParagraphSEPARATOR}', "");
Expect(0, 8232, '\p{Is_Gc=_	ParagraphSEPARATOR}', "");
Expect(1, 8232, '\p{^Is_Gc=_	ParagraphSEPARATOR}', "");
Expect(1, 8232, '\P{Is_Gc=_	ParagraphSEPARATOR}', "");
Expect(0, 8232, '\P{^Is_Gc=_	ParagraphSEPARATOR}', "");
Error('\p{Is_Category=	 zp/a/}');
Error('\P{Is_Category=	 zp/a/}');
Expect(1, 8233, '\p{Is_Category=zp}', "");
Expect(0, 8233, '\p{^Is_Category=zp}', "");
Expect(0, 8233, '\P{Is_Category=zp}', "");
Expect(1, 8233, '\P{^Is_Category=zp}', "");
Expect(0, 8232, '\p{Is_Category=zp}', "");
Expect(1, 8232, '\p{^Is_Category=zp}', "");
Expect(1, 8232, '\P{Is_Category=zp}', "");
Expect(0, 8232, '\P{^Is_Category=zp}', "");
Expect(1, 8233, '\p{Is_Category=_ Zp}', "");
Expect(0, 8233, '\p{^Is_Category=_ Zp}', "");
Expect(0, 8233, '\P{Is_Category=_ Zp}', "");
Expect(1, 8233, '\P{^Is_Category=_ Zp}', "");
Expect(0, 8232, '\p{Is_Category=_ Zp}', "");
Expect(1, 8232, '\p{^Is_Category=_ Zp}', "");
Expect(1, 8232, '\P{Is_Category=_ Zp}', "");
Expect(0, 8232, '\P{^Is_Category=_ Zp}', "");
Error('\p{General_Category=	 Modifier_Letter/a/}');
Error('\P{General_Category=	 Modifier_Letter/a/}');
Expect(1, 705, '\p{General_Category=modifierletter}', "");
Expect(0, 705, '\p{^General_Category=modifierletter}', "");
Expect(0, 705, '\P{General_Category=modifierletter}', "");
Expect(1, 705, '\P{^General_Category=modifierletter}', "");
Expect(0, 687, '\p{General_Category=modifierletter}', "");
Expect(1, 687, '\p{^General_Category=modifierletter}', "");
Expect(1, 687, '\P{General_Category=modifierletter}', "");
Expect(0, 687, '\P{^General_Category=modifierletter}', "");
Expect(1, 705, '\p{General_Category= modifierLETTER}', "");
Expect(0, 705, '\p{^General_Category= modifierLETTER}', "");
Expect(0, 705, '\P{General_Category= modifierLETTER}', "");
Expect(1, 705, '\P{^General_Category= modifierLETTER}', "");
Expect(0, 687, '\p{General_Category= modifierLETTER}', "");
Expect(1, 687, '\p{^General_Category= modifierLETTER}', "");
Expect(1, 687, '\P{General_Category= modifierLETTER}', "");
Expect(0, 687, '\P{^General_Category= modifierLETTER}', "");
Error('\p{Gc=	Lm:=}');
Error('\P{Gc=	Lm:=}');
Expect(1, 705, '\p{Gc:	lm}', "");
Expect(0, 705, '\p{^Gc:	lm}', "");
Expect(0, 705, '\P{Gc:	lm}', "");
Expect(1, 705, '\P{^Gc:	lm}', "");
Expect(0, 687, '\p{Gc:	lm}', "");
Expect(1, 687, '\p{^Gc:	lm}', "");
Expect(1, 687, '\P{Gc:	lm}', "");
Expect(0, 687, '\P{^Gc:	lm}', "");
Expect(1, 705, '\p{Gc=	 Lm}', "");
Expect(0, 705, '\p{^Gc=	 Lm}', "");
Expect(0, 705, '\P{Gc=	 Lm}', "");
Expect(1, 705, '\P{^Gc=	 Lm}', "");
Expect(0, 687, '\p{Gc=	 Lm}', "");
Expect(1, 687, '\p{^Gc=	 Lm}', "");
Expect(1, 687, '\P{Gc=	 Lm}', "");
Expect(0, 687, '\P{^Gc=	 Lm}', "");
Error('\p{Category=-:=MODIFIER LETTER}');
Error('\P{Category=-:=MODIFIER LETTER}');
Expect(1, 705, '\p{Category=modifierletter}', "");
Expect(0, 705, '\p{^Category=modifierletter}', "");
Expect(0, 705, '\P{Category=modifierletter}', "");
Expect(1, 705, '\P{^Category=modifierletter}', "");
Expect(0, 687, '\p{Category=modifierletter}', "");
Expect(1, 687, '\p{^Category=modifierletter}', "");
Expect(1, 687, '\P{Category=modifierletter}', "");
Expect(0, 687, '\P{^Category=modifierletter}', "");
Expect(1, 705, '\p{Category=_MODIFIER_Letter}', "");
Expect(0, 705, '\p{^Category=_MODIFIER_Letter}', "");
Expect(0, 705, '\P{Category=_MODIFIER_Letter}', "");
Expect(1, 705, '\P{^Category=_MODIFIER_Letter}', "");
Expect(0, 687, '\p{Category=_MODIFIER_Letter}', "");
Expect(1, 687, '\p{^Category=_MODIFIER_Letter}', "");
Expect(1, 687, '\P{Category=_MODIFIER_Letter}', "");
Expect(0, 687, '\P{^Category=_MODIFIER_Letter}', "");
Error('\p{Is_General_Category=/a/LM}');
Error('\P{Is_General_Category=/a/LM}');
Expect(1, 705, '\p{Is_General_Category=lm}', "");
Expect(0, 705, '\p{^Is_General_Category=lm}', "");
Expect(0, 705, '\P{Is_General_Category=lm}', "");
Expect(1, 705, '\P{^Is_General_Category=lm}', "");
Expect(0, 687, '\p{Is_General_Category=lm}', "");
Expect(1, 687, '\p{^Is_General_Category=lm}', "");
Expect(1, 687, '\P{Is_General_Category=lm}', "");
Expect(0, 687, '\P{^Is_General_Category=lm}', "");
Expect(1, 705, '\p{Is_General_Category=-lm}', "");
Expect(0, 705, '\p{^Is_General_Category=-lm}', "");
Expect(0, 705, '\P{Is_General_Category=-lm}', "");
Expect(1, 705, '\P{^Is_General_Category=-lm}', "");
Expect(0, 687, '\p{Is_General_Category=-lm}', "");
Expect(1, 687, '\p{^Is_General_Category=-lm}', "");
Expect(1, 687, '\P{Is_General_Category=-lm}', "");
Expect(0, 687, '\P{^Is_General_Category=-lm}', "");
Error('\p{Is_Gc=  modifier:=Letter}');
Error('\P{Is_Gc=  modifier:=Letter}');
Expect(1, 705, '\p{Is_Gc=modifierletter}', "");
Expect(0, 705, '\p{^Is_Gc=modifierletter}', "");
Expect(0, 705, '\P{Is_Gc=modifierletter}', "");
Expect(1, 705, '\P{^Is_Gc=modifierletter}', "");
Expect(0, 687, '\p{Is_Gc=modifierletter}', "");
Expect(1, 687, '\p{^Is_Gc=modifierletter}', "");
Expect(1, 687, '\P{Is_Gc=modifierletter}', "");
Expect(0, 687, '\P{^Is_Gc=modifierletter}', "");
Expect(1, 705, '\p{Is_Gc=	_Modifier-Letter}', "");
Expect(0, 705, '\p{^Is_Gc=	_Modifier-Letter}', "");
Expect(0, 705, '\P{Is_Gc=	_Modifier-Letter}', "");
Expect(1, 705, '\P{^Is_Gc=	_Modifier-Letter}', "");
Expect(0, 687, '\p{Is_Gc=	_Modifier-Letter}', "");
Expect(1, 687, '\p{^Is_Gc=	_Modifier-Letter}', "");
Expect(1, 687, '\P{Is_Gc=	_Modifier-Letter}', "");
Expect(0, 687, '\P{^Is_Gc=	_Modifier-Letter}', "");
Error('\p{Is_Category=_/a/LM}');
Error('\P{Is_Category=_/a/LM}');
Expect(1, 705, '\p{Is_Category=lm}', "");
Expect(0, 705, '\p{^Is_Category=lm}', "");
Expect(0, 705, '\P{Is_Category=lm}', "");
Expect(1, 705, '\P{^Is_Category=lm}', "");
Expect(0, 687, '\p{Is_Category=lm}', "");
Expect(1, 687, '\p{^Is_Category=lm}', "");
Expect(1, 687, '\P{Is_Category=lm}', "");
Expect(0, 687, '\P{^Is_Category=lm}', "");
Expect(1, 705, '\p{Is_Category: -_lm}', "");
Expect(0, 705, '\p{^Is_Category: -_lm}', "");
Expect(0, 705, '\P{Is_Category: -_lm}', "");
Expect(1, 705, '\P{^Is_Category: -_lm}', "");
Expect(0, 687, '\p{Is_Category: -_lm}', "");
Expect(1, 687, '\p{^Is_Category: -_lm}', "");
Expect(1, 687, '\P{Is_Category: -_lm}', "");
Expect(0, 687, '\P{^Is_Category: -_lm}', "");
Error('\p{General_Category=/a/		other-symbol}');
Error('\P{General_Category=/a/		other-symbol}');
Expect(1, 167, '\p{General_Category=othersymbol}', "");
Expect(0, 167, '\p{^General_Category=othersymbol}', "");
Expect(0, 167, '\P{General_Category=othersymbol}', "");
Expect(1, 167, '\P{^General_Category=othersymbol}', "");
Expect(0, 165, '\p{General_Category=othersymbol}', "");
Expect(1, 165, '\p{^General_Category=othersymbol}', "");
Expect(1, 165, '\P{General_Category=othersymbol}', "");
Expect(0, 165, '\P{^General_Category=othersymbol}', "");
Expect(1, 167, '\p{General_Category: _other	symbol}', "");
Expect(0, 167, '\p{^General_Category: _other	symbol}', "");
Expect(0, 167, '\P{General_Category: _other	symbol}', "");
Expect(1, 167, '\P{^General_Category: _other	symbol}', "");
Expect(0, 165, '\p{General_Category: _other	symbol}', "");
Expect(1, 165, '\p{^General_Category: _other	symbol}', "");
Expect(1, 165, '\P{General_Category: _other	symbol}', "");
Expect(0, 165, '\P{^General_Category: _other	symbol}', "");
Error('\p{Gc=/a/	 SO}');
Error('\P{Gc=/a/	 SO}');
Expect(1, 167, '\p{Gc=so}', "");
Expect(0, 167, '\p{^Gc=so}', "");
Expect(0, 167, '\P{Gc=so}', "");
Expect(1, 167, '\P{^Gc=so}', "");
Expect(0, 165, '\p{Gc=so}', "");
Expect(1, 165, '\p{^Gc=so}', "");
Expect(1, 165, '\P{Gc=so}', "");
Expect(0, 165, '\P{^Gc=so}', "");
Expect(1, 167, '\p{Gc=- So}', "");
Expect(0, 167, '\p{^Gc=- So}', "");
Expect(0, 167, '\P{Gc=- So}', "");
Expect(1, 167, '\P{^Gc=- So}', "");
Expect(0, 165, '\p{Gc=- So}', "");
Expect(1, 165, '\p{^Gc=- So}', "");
Expect(1, 165, '\P{Gc=- So}', "");
Expect(0, 165, '\P{^Gc=- So}', "");
Error('\p{Category=/a/		OTHER Symbol}');
Error('\P{Category=/a/		OTHER Symbol}');
Expect(1, 167, '\p{Category=othersymbol}', "");
Expect(0, 167, '\p{^Category=othersymbol}', "");
Expect(0, 167, '\P{Category=othersymbol}', "");
Expect(1, 167, '\P{^Category=othersymbol}', "");
Expect(0, 165, '\p{Category=othersymbol}', "");
Expect(1, 165, '\p{^Category=othersymbol}', "");
Expect(1, 165, '\P{Category=othersymbol}', "");
Expect(0, 165, '\P{^Category=othersymbol}', "");
Expect(1, 167, '\p{Category=_	other Symbol}', "");
Expect(0, 167, '\p{^Category=_	other Symbol}', "");
Expect(0, 167, '\P{Category=_	other Symbol}', "");
Expect(1, 167, '\P{^Category=_	other Symbol}', "");
Expect(0, 165, '\p{Category=_	other Symbol}', "");
Expect(1, 165, '\p{^Category=_	other Symbol}', "");
Expect(1, 165, '\P{Category=_	other Symbol}', "");
Expect(0, 165, '\P{^Category=_	other Symbol}', "");
Error('\p{Is_General_Category=-/a/So}');
Error('\P{Is_General_Category=-/a/So}');
Expect(1, 167, '\p{Is_General_Category=so}', "");
Expect(0, 167, '\p{^Is_General_Category=so}', "");
Expect(0, 167, '\P{Is_General_Category=so}', "");
Expect(1, 167, '\P{^Is_General_Category=so}', "");
Expect(0, 165, '\p{Is_General_Category=so}', "");
Expect(1, 165, '\p{^Is_General_Category=so}', "");
Expect(1, 165, '\P{Is_General_Category=so}', "");
Expect(0, 165, '\P{^Is_General_Category=so}', "");
Expect(1, 167, '\p{Is_General_Category=	-SO}', "");
Expect(0, 167, '\p{^Is_General_Category=	-SO}', "");
Expect(0, 167, '\P{Is_General_Category=	-SO}', "");
Expect(1, 167, '\P{^Is_General_Category=	-SO}', "");
Expect(0, 165, '\p{Is_General_Category=	-SO}', "");
Expect(1, 165, '\p{^Is_General_Category=	-SO}', "");
Expect(1, 165, '\P{Is_General_Category=	-SO}', "");
Expect(0, 165, '\P{^Is_General_Category=	-SO}', "");
Error('\p{Is_Gc=/a/	 OtherSymbol}');
Error('\P{Is_Gc=/a/	 OtherSymbol}');
Expect(1, 167, '\p{Is_Gc=othersymbol}', "");
Expect(0, 167, '\p{^Is_Gc=othersymbol}', "");
Expect(0, 167, '\P{Is_Gc=othersymbol}', "");
Expect(1, 167, '\P{^Is_Gc=othersymbol}', "");
Expect(0, 165, '\p{Is_Gc=othersymbol}', "");
Expect(1, 165, '\p{^Is_Gc=othersymbol}', "");
Expect(1, 165, '\P{Is_Gc=othersymbol}', "");
Expect(0, 165, '\P{^Is_Gc=othersymbol}', "");
Expect(1, 167, '\p{Is_Gc=  Other-Symbol}', "");
Expect(0, 167, '\p{^Is_Gc=  Other-Symbol}', "");
Expect(0, 167, '\P{Is_Gc=  Other-Symbol}', "");
Expect(1, 167, '\P{^Is_Gc=  Other-Symbol}', "");
Expect(0, 165, '\p{Is_Gc=  Other-Symbol}', "");
Expect(1, 165, '\p{^Is_Gc=  Other-Symbol}', "");
Expect(1, 165, '\P{Is_Gc=  Other-Symbol}', "");
Expect(0, 165, '\P{^Is_Gc=  Other-Symbol}', "");
Error('\p{Is_Category=_ So:=}');
Error('\P{Is_Category=_ So:=}');
Expect(1, 167, '\p{Is_Category:   so}', "");
Expect(0, 167, '\p{^Is_Category:   so}', "");
Expect(0, 167, '\P{Is_Category:   so}', "");
Expect(1, 167, '\P{^Is_Category:   so}', "");
Expect(0, 165, '\p{Is_Category:   so}', "");
Expect(1, 165, '\p{^Is_Category:   so}', "");
Expect(1, 165, '\P{Is_Category:   so}', "");
Expect(0, 165, '\P{^Is_Category:   so}', "");
Expect(1, 167, '\p{Is_Category= -SO}', "");
Expect(0, 167, '\p{^Is_Category= -SO}', "");
Expect(0, 167, '\P{Is_Category= -SO}', "");
Expect(1, 167, '\P{^Is_Category= -SO}', "");
Expect(0, 165, '\p{Is_Category= -SO}', "");
Expect(1, 165, '\p{^Is_Category= -SO}', "");
Expect(1, 165, '\P{Is_Category= -SO}', "");
Expect(0, 165, '\P{^Is_Category= -SO}', "");
Error('\p{General_Category=/a/- Nonspacingmark}');
Error('\P{General_Category=/a/- Nonspacingmark}');
Expect(1, 879, '\p{General_Category=nonspacingmark}', "");
Expect(0, 879, '\p{^General_Category=nonspacingmark}', "");
Expect(0, 879, '\P{General_Category=nonspacingmark}', "");
Expect(1, 879, '\P{^General_Category=nonspacingmark}', "");
Expect(0, 767, '\p{General_Category=nonspacingmark}', "");
Expect(1, 767, '\p{^General_Category=nonspacingmark}', "");
Expect(1, 767, '\P{General_Category=nonspacingmark}', "");
Expect(0, 767, '\P{^General_Category=nonspacingmark}', "");
Expect(1, 879, '\p{General_Category=-	NonspacingMark}', "");
Expect(0, 879, '\p{^General_Category=-	NonspacingMark}', "");
Expect(0, 879, '\P{General_Category=-	NonspacingMark}', "");
Expect(1, 879, '\P{^General_Category=-	NonspacingMark}', "");
Expect(0, 767, '\p{General_Category=-	NonspacingMark}', "");
Expect(1, 767, '\p{^General_Category=-	NonspacingMark}', "");
Expect(1, 767, '\P{General_Category=-	NonspacingMark}', "");
Expect(0, 767, '\P{^General_Category=-	NonspacingMark}', "");
Error('\p{Gc=_ MN:=}');
Error('\P{Gc=_ MN:=}');
Expect(1, 879, '\p{Gc=mn}', "");
Expect(0, 879, '\p{^Gc=mn}', "");
Expect(0, 879, '\P{Gc=mn}', "");
Expect(1, 879, '\P{^Gc=mn}', "");
Expect(0, 767, '\p{Gc=mn}', "");
Expect(1, 767, '\p{^Gc=mn}', "");
Expect(1, 767, '\P{Gc=mn}', "");
Expect(0, 767, '\P{^Gc=mn}', "");
Expect(1, 879, '\p{Gc=	MN}', "");
Expect(0, 879, '\p{^Gc=	MN}', "");
Expect(0, 879, '\P{Gc=	MN}', "");
Expect(1, 879, '\P{^Gc=	MN}', "");
Expect(0, 767, '\p{Gc=	MN}', "");
Expect(1, 767, '\p{^Gc=	MN}', "");
Expect(1, 767, '\P{Gc=	MN}', "");
Expect(0, 767, '\P{^Gc=	MN}', "");
Error('\p{Category:   := 	Nonspacing-Mark}');
Error('\P{Category:   := 	Nonspacing-Mark}');
Expect(1, 879, '\p{Category=nonspacingmark}', "");
Expect(0, 879, '\p{^Category=nonspacingmark}', "");
Expect(0, 879, '\P{Category=nonspacingmark}', "");
Expect(1, 879, '\P{^Category=nonspacingmark}', "");
Expect(0, 767, '\p{Category=nonspacingmark}', "");
Expect(1, 767, '\p{^Category=nonspacingmark}', "");
Expect(1, 767, '\P{Category=nonspacingmark}', "");
Expect(0, 767, '\P{^Category=nonspacingmark}', "");
Expect(1, 879, '\p{Category=		nonspacing mark}', "");
Expect(0, 879, '\p{^Category=		nonspacing mark}', "");
Expect(0, 879, '\P{Category=		nonspacing mark}', "");
Expect(1, 879, '\P{^Category=		nonspacing mark}', "");
Expect(0, 767, '\p{Category=		nonspacing mark}', "");
Expect(1, 767, '\p{^Category=		nonspacing mark}', "");
Expect(1, 767, '\P{Category=		nonspacing mark}', "");
Expect(0, 767, '\P{^Category=		nonspacing mark}', "");
Error('\p{Is_General_Category:-MN:=}');
Error('\P{Is_General_Category:-MN:=}');
Expect(1, 879, '\p{Is_General_Category=mn}', "");
Expect(0, 879, '\p{^Is_General_Category=mn}', "");
Expect(0, 879, '\P{Is_General_Category=mn}', "");
Expect(1, 879, '\P{^Is_General_Category=mn}', "");
Expect(0, 767, '\p{Is_General_Category=mn}', "");
Expect(1, 767, '\p{^Is_General_Category=mn}', "");
Expect(1, 767, '\P{Is_General_Category=mn}', "");
Expect(0, 767, '\P{^Is_General_Category=mn}', "");
Expect(1, 879, '\p{Is_General_Category=	 MN}', "");
Expect(0, 879, '\p{^Is_General_Category=	 MN}', "");
Expect(0, 879, '\P{Is_General_Category=	 MN}', "");
Expect(1, 879, '\P{^Is_General_Category=	 MN}', "");
Expect(0, 767, '\p{Is_General_Category=	 MN}', "");
Expect(1, 767, '\p{^Is_General_Category=	 MN}', "");
Expect(1, 767, '\P{Is_General_Category=	 MN}', "");
Expect(0, 767, '\P{^Is_General_Category=	 MN}', "");
Error('\p{Is_Gc= :=nonspacing mark}');
Error('\P{Is_Gc= :=nonspacing mark}');
Expect(1, 879, '\p{Is_Gc=nonspacingmark}', "");
Expect(0, 879, '\p{^Is_Gc=nonspacingmark}', "");
Expect(0, 879, '\P{Is_Gc=nonspacingmark}', "");
Expect(1, 879, '\P{^Is_Gc=nonspacingmark}', "");
Expect(0, 767, '\p{Is_Gc=nonspacingmark}', "");
Expect(1, 767, '\p{^Is_Gc=nonspacingmark}', "");
Expect(1, 767, '\P{Is_Gc=nonspacingmark}', "");
Expect(0, 767, '\P{^Is_Gc=nonspacingmark}', "");
Expect(1, 879, '\p{Is_Gc= nonspacing-mark}', "");
Expect(0, 879, '\p{^Is_Gc= nonspacing-mark}', "");
Expect(0, 879, '\P{Is_Gc= nonspacing-mark}', "");
Expect(1, 879, '\P{^Is_Gc= nonspacing-mark}', "");
Expect(0, 767, '\p{Is_Gc= nonspacing-mark}', "");
Expect(1, 767, '\p{^Is_Gc= nonspacing-mark}', "");
Expect(1, 767, '\P{Is_Gc= nonspacing-mark}', "");
Expect(0, 767, '\P{^Is_Gc= nonspacing-mark}', "");
Error('\p{Is_Category= 	Mn:=}');
Error('\P{Is_Category= 	Mn:=}');
Expect(1, 879, '\p{Is_Category=mn}', "");
Expect(0, 879, '\p{^Is_Category=mn}', "");
Expect(0, 879, '\P{Is_Category=mn}', "");
Expect(1, 879, '\P{^Is_Category=mn}', "");
Expect(0, 767, '\p{Is_Category=mn}', "");
Expect(1, 767, '\p{^Is_Category=mn}', "");
Expect(1, 767, '\P{Is_Category=mn}', "");
Expect(0, 767, '\P{^Is_Category=mn}', "");
Expect(1, 879, '\p{Is_Category=	MN}', "");
Expect(0, 879, '\p{^Is_Category=	MN}', "");
Expect(0, 879, '\P{Is_Category=	MN}', "");
Expect(1, 879, '\P{^Is_Category=	MN}', "");
Expect(0, 767, '\p{Is_Category=	MN}', "");
Expect(1, 767, '\p{^Is_Category=	MN}', "");
Expect(1, 767, '\P{Is_Category=	MN}', "");
Expect(0, 767, '\P{^Is_Category=	MN}', "");
Error('\p{General_Category=Dash	Punctuation/a/}');
Error('\P{General_Category=Dash	Punctuation/a/}');
Expect(1, 45, '\p{General_Category: dashpunctuation}', "");
Expect(0, 45, '\p{^General_Category: dashpunctuation}', "");
Expect(0, 45, '\P{General_Category: dashpunctuation}', "");
Expect(1, 45, '\P{^General_Category: dashpunctuation}', "");
Expect(0, 44, '\p{General_Category: dashpunctuation}', "");
Expect(1, 44, '\p{^General_Category: dashpunctuation}', "");
Expect(1, 44, '\P{General_Category: dashpunctuation}', "");
Expect(0, 44, '\P{^General_Category: dashpunctuation}', "");
Expect(1, 45, '\p{General_Category= Dash PUNCTUATION}', "");
Expect(0, 45, '\p{^General_Category= Dash PUNCTUATION}', "");
Expect(0, 45, '\P{General_Category= Dash PUNCTUATION}', "");
Expect(1, 45, '\P{^General_Category= Dash PUNCTUATION}', "");
Expect(0, 44, '\p{General_Category= Dash PUNCTUATION}', "");
Expect(1, 44, '\p{^General_Category= Dash PUNCTUATION}', "");
Expect(1, 44, '\P{General_Category= Dash PUNCTUATION}', "");
Expect(0, 44, '\P{^General_Category= Dash PUNCTUATION}', "");
Error('\p{Gc=:=  Pd}');
Error('\P{Gc=:=  Pd}');
Expect(1, 45, '\p{Gc=pd}', "");
Expect(0, 45, '\p{^Gc=pd}', "");
Expect(0, 45, '\P{Gc=pd}', "");
Expect(1, 45, '\P{^Gc=pd}', "");
Expect(0, 44, '\p{Gc=pd}', "");
Expect(1, 44, '\p{^Gc=pd}', "");
Expect(1, 44, '\P{Gc=pd}', "");
Expect(0, 44, '\P{^Gc=pd}', "");
Expect(1, 45, '\p{Gc=  Pd}', "");
Expect(0, 45, '\p{^Gc=  Pd}', "");
Expect(0, 45, '\P{Gc=  Pd}', "");
Expect(1, 45, '\P{^Gc=  Pd}', "");
Expect(0, 44, '\p{Gc=  Pd}', "");
Expect(1, 44, '\p{^Gc=  Pd}', "");
Expect(1, 44, '\P{Gc=  Pd}', "");
Expect(0, 44, '\P{^Gc=  Pd}', "");
Error('\p{Category=		Dashpunctuation:=}');
Error('\P{Category=		Dashpunctuation:=}');
Expect(1, 45, '\p{Category=dashpunctuation}', "");
Expect(0, 45, '\p{^Category=dashpunctuation}', "");
Expect(0, 45, '\P{Category=dashpunctuation}', "");
Expect(1, 45, '\P{^Category=dashpunctuation}', "");
Expect(0, 44, '\p{Category=dashpunctuation}', "");
Expect(1, 44, '\p{^Category=dashpunctuation}', "");
Expect(1, 44, '\P{Category=dashpunctuation}', "");
Expect(0, 44, '\P{^Category=dashpunctuation}', "");
Expect(1, 45, '\p{Category=DASH Punctuation}', "");
Expect(0, 45, '\p{^Category=DASH Punctuation}', "");
Expect(0, 45, '\P{Category=DASH Punctuation}', "");
Expect(1, 45, '\P{^Category=DASH Punctuation}', "");
Expect(0, 44, '\p{Category=DASH Punctuation}', "");
Expect(1, 44, '\p{^Category=DASH Punctuation}', "");
Expect(1, 44, '\P{Category=DASH Punctuation}', "");
Expect(0, 44, '\P{^Category=DASH Punctuation}', "");
Error('\p{Is_General_Category=:= -Pd}');
Error('\P{Is_General_Category=:= -Pd}');
Expect(1, 45, '\p{Is_General_Category:	pd}', "");
Expect(0, 45, '\p{^Is_General_Category:	pd}', "");
Expect(0, 45, '\P{Is_General_Category:	pd}', "");
Expect(1, 45, '\P{^Is_General_Category:	pd}', "");
Expect(0, 44, '\p{Is_General_Category:	pd}', "");
Expect(1, 44, '\p{^Is_General_Category:	pd}', "");
Expect(1, 44, '\P{Is_General_Category:	pd}', "");
Expect(0, 44, '\P{^Is_General_Category:	pd}', "");
Expect(1, 45, '\p{Is_General_Category= 	Pd}', "");
Expect(0, 45, '\p{^Is_General_Category= 	Pd}', "");
Expect(0, 45, '\P{Is_General_Category= 	Pd}', "");
Expect(1, 45, '\P{^Is_General_Category= 	Pd}', "");
Expect(0, 44, '\p{Is_General_Category= 	Pd}', "");
Expect(1, 44, '\p{^Is_General_Category= 	Pd}', "");
Expect(1, 44, '\P{Is_General_Category= 	Pd}', "");
Expect(0, 44, '\P{^Is_General_Category= 	Pd}', "");
Error('\p{Is_Gc=_:=DASHpunctuation}');
Error('\P{Is_Gc=_:=DASHpunctuation}');
Expect(1, 45, '\p{Is_Gc:	dashpunctuation}', "");
Expect(0, 45, '\p{^Is_Gc:	dashpunctuation}', "");
Expect(0, 45, '\P{Is_Gc:	dashpunctuation}', "");
Expect(1, 45, '\P{^Is_Gc:	dashpunctuation}', "");
Expect(0, 44, '\p{Is_Gc:	dashpunctuation}', "");
Expect(1, 44, '\p{^Is_Gc:	dashpunctuation}', "");
Expect(1, 44, '\P{Is_Gc:	dashpunctuation}', "");
Expect(0, 44, '\P{^Is_Gc:	dashpunctuation}', "");
Expect(1, 45, '\p{Is_Gc=_ DASH	PUNCTUATION}', "");
Expect(0, 45, '\p{^Is_Gc=_ DASH	PUNCTUATION}', "");
Expect(0, 45, '\P{Is_Gc=_ DASH	PUNCTUATION}', "");
Expect(1, 45, '\P{^Is_Gc=_ DASH	PUNCTUATION}', "");
Expect(0, 44, '\p{Is_Gc=_ DASH	PUNCTUATION}', "");
Expect(1, 44, '\p{^Is_Gc=_ DASH	PUNCTUATION}', "");
Expect(1, 44, '\P{Is_Gc=_ DASH	PUNCTUATION}', "");
Expect(0, 44, '\P{^Is_Gc=_ DASH	PUNCTUATION}', "");
Error('\p{Is_Category=/a/ 	Pd}');
Error('\P{Is_Category=/a/ 	Pd}');
Expect(1, 45, '\p{Is_Category: pd}', "");
Expect(0, 45, '\p{^Is_Category: pd}', "");
Expect(0, 45, '\P{Is_Category: pd}', "");
Expect(1, 45, '\P{^Is_Category: pd}', "");
Expect(0, 44, '\p{Is_Category: pd}', "");
Expect(1, 44, '\p{^Is_Category: pd}', "");
Expect(1, 44, '\P{Is_Category: pd}', "");
Expect(0, 44, '\P{^Is_Category: pd}', "");
Expect(1, 45, '\p{Is_Category=		Pd}', "");
Expect(0, 45, '\p{^Is_Category=		Pd}', "");
Expect(0, 45, '\P{Is_Category=		Pd}', "");
Expect(1, 45, '\P{^Is_Category=		Pd}', "");
Expect(0, 44, '\p{Is_Category=		Pd}', "");
Expect(1, 44, '\p{^Is_Category=		Pd}', "");
Expect(1, 44, '\P{Is_Category=		Pd}', "");
Expect(0, 44, '\P{^Is_Category=		Pd}', "");
Error('\p{General_Category=	 Letter/a/Number}');
Error('\P{General_Category=	 Letter/a/Number}');
Expect(1, 5872, '\p{General_Category: letternumber}', "");
Expect(0, 5872, '\p{^General_Category: letternumber}', "");
Expect(0, 5872, '\P{General_Category: letternumber}', "");
Expect(1, 5872, '\P{^General_Category: letternumber}', "");
Expect(0, 5869, '\p{General_Category: letternumber}', "");
Expect(1, 5869, '\p{^General_Category: letternumber}', "");
Expect(1, 5869, '\P{General_Category: letternumber}', "");
Expect(0, 5869, '\P{^General_Category: letternumber}', "");
Expect(1, 5872, '\p{General_Category=- LETTER_Number}', "");
Expect(0, 5872, '\p{^General_Category=- LETTER_Number}', "");
Expect(0, 5872, '\P{General_Category=- LETTER_Number}', "");
Expect(1, 5872, '\P{^General_Category=- LETTER_Number}', "");
Expect(0, 5869, '\p{General_Category=- LETTER_Number}', "");
Expect(1, 5869, '\p{^General_Category=- LETTER_Number}', "");
Expect(1, 5869, '\P{General_Category=- LETTER_Number}', "");
Expect(0, 5869, '\P{^General_Category=- LETTER_Number}', "");
Error('\p{Gc= :=nl}');
Error('\P{Gc= :=nl}');
Expect(1, 5872, '\p{Gc=nl}', "");
Expect(0, 5872, '\p{^Gc=nl}', "");
Expect(0, 5872, '\P{Gc=nl}', "");
Expect(1, 5872, '\P{^Gc=nl}', "");
Expect(0, 5869, '\p{Gc=nl}', "");
Expect(1, 5869, '\p{^Gc=nl}', "");
Expect(1, 5869, '\P{Gc=nl}', "");
Expect(0, 5869, '\P{^Gc=nl}', "");
Expect(1, 5872, '\p{Gc:		_Nl}', "");
Expect(0, 5872, '\p{^Gc:		_Nl}', "");
Expect(0, 5872, '\P{Gc:		_Nl}', "");
Expect(1, 5872, '\P{^Gc:		_Nl}', "");
Expect(0, 5869, '\p{Gc:		_Nl}', "");
Expect(1, 5869, '\p{^Gc:		_Nl}', "");
Expect(1, 5869, '\P{Gc:		_Nl}', "");
Expect(0, 5869, '\P{^Gc:		_Nl}', "");
Error('\p{Category=	_Letter	Number:=}');
Error('\P{Category=	_Letter	Number:=}');
Expect(1, 5872, '\p{Category=letternumber}', "");
Expect(0, 5872, '\p{^Category=letternumber}', "");
Expect(0, 5872, '\P{Category=letternumber}', "");
Expect(1, 5872, '\P{^Category=letternumber}', "");
Expect(0, 5869, '\p{Category=letternumber}', "");
Expect(1, 5869, '\p{^Category=letternumber}', "");
Expect(1, 5869, '\P{Category=letternumber}', "");
Expect(0, 5869, '\P{^Category=letternumber}', "");
Expect(1, 5872, '\p{Category=-letternumber}', "");
Expect(0, 5872, '\p{^Category=-letternumber}', "");
Expect(0, 5872, '\P{Category=-letternumber}', "");
Expect(1, 5872, '\P{^Category=-letternumber}', "");
Expect(0, 5869, '\p{Category=-letternumber}', "");
Expect(1, 5869, '\p{^Category=-letternumber}', "");
Expect(1, 5869, '\P{Category=-letternumber}', "");
Expect(0, 5869, '\P{^Category=-letternumber}', "");
Error('\p{Is_General_Category=:=	-Nl}');
Error('\P{Is_General_Category=:=	-Nl}');
Expect(1, 5872, '\p{Is_General_Category=nl}', "");
Expect(0, 5872, '\p{^Is_General_Category=nl}', "");
Expect(0, 5872, '\P{Is_General_Category=nl}', "");
Expect(1, 5872, '\P{^Is_General_Category=nl}', "");
Expect(0, 5869, '\p{Is_General_Category=nl}', "");
Expect(1, 5869, '\p{^Is_General_Category=nl}', "");
Expect(1, 5869, '\P{Is_General_Category=nl}', "");
Expect(0, 5869, '\P{^Is_General_Category=nl}', "");
Expect(1, 5872, '\p{Is_General_Category=-nl}', "");
Expect(0, 5872, '\p{^Is_General_Category=-nl}', "");
Expect(0, 5872, '\P{Is_General_Category=-nl}', "");
Expect(1, 5872, '\P{^Is_General_Category=-nl}', "");
Expect(0, 5869, '\p{Is_General_Category=-nl}', "");
Expect(1, 5869, '\p{^Is_General_Category=-nl}', "");
Expect(1, 5869, '\P{Is_General_Category=-nl}', "");
Expect(0, 5869, '\P{^Is_General_Category=-nl}', "");
Error('\p{Is_Gc=	:=Letter	Number}');
Error('\P{Is_Gc=	:=Letter	Number}');
Expect(1, 5872, '\p{Is_Gc=letternumber}', "");
Expect(0, 5872, '\p{^Is_Gc=letternumber}', "");
Expect(0, 5872, '\P{Is_Gc=letternumber}', "");
Expect(1, 5872, '\P{^Is_Gc=letternumber}', "");
Expect(0, 5869, '\p{Is_Gc=letternumber}', "");
Expect(1, 5869, '\p{^Is_Gc=letternumber}', "");
Expect(1, 5869, '\P{Is_Gc=letternumber}', "");
Expect(0, 5869, '\P{^Is_Gc=letternumber}', "");
Expect(1, 5872, '\p{Is_Gc=  Letter	number}', "");
Expect(0, 5872, '\p{^Is_Gc=  Letter	number}', "");
Expect(0, 5872, '\P{Is_Gc=  Letter	number}', "");
Expect(1, 5872, '\P{^Is_Gc=  Letter	number}', "");
Expect(0, 5869, '\p{Is_Gc=  Letter	number}', "");
Expect(1, 5869, '\p{^Is_Gc=  Letter	number}', "");
Expect(1, 5869, '\P{Is_Gc=  Letter	number}', "");
Expect(0, 5869, '\P{^Is_Gc=  Letter	number}', "");
Error('\p{Is_Category=:=		Nl}');
Error('\P{Is_Category=:=		Nl}');
Expect(1, 5872, '\p{Is_Category=nl}', "");
Expect(0, 5872, '\p{^Is_Category=nl}', "");
Expect(0, 5872, '\P{Is_Category=nl}', "");
Expect(1, 5872, '\P{^Is_Category=nl}', "");
Expect(0, 5869, '\p{Is_Category=nl}', "");
Expect(1, 5869, '\p{^Is_Category=nl}', "");
Expect(1, 5869, '\P{Is_Category=nl}', "");
Expect(0, 5869, '\P{^Is_Category=nl}', "");
Expect(1, 5872, '\p{Is_Category=	-nl}', "");
Expect(0, 5872, '\p{^Is_Category=	-nl}', "");
Expect(0, 5872, '\P{Is_Category=	-nl}', "");
Expect(1, 5872, '\P{^Is_Category=	-nl}', "");
Expect(0, 5869, '\p{Is_Category=	-nl}', "");
Expect(1, 5869, '\p{^Is_Category=	-nl}', "");
Expect(1, 5869, '\P{Is_Category=	-nl}', "");
Expect(0, 5869, '\P{^Is_Category=	-nl}', "");
Error('\p{General_Category=:=	Initial PUNCTUATION}');
Error('\P{General_Category=:=	Initial PUNCTUATION}');
Expect(1, 171, '\p{General_Category=initialpunctuation}', "");
Expect(0, 171, '\p{^General_Category=initialpunctuation}', "");
Expect(0, 171, '\P{General_Category=initialpunctuation}', "");
Expect(1, 171, '\P{^General_Category=initialpunctuation}', "");
Expect(0, 170, '\p{General_Category=initialpunctuation}', "");
Expect(1, 170, '\p{^General_Category=initialpunctuation}', "");
Expect(1, 170, '\P{General_Category=initialpunctuation}', "");
Expect(0, 170, '\P{^General_Category=initialpunctuation}', "");
Expect(1, 171, '\p{General_Category=_InitialPUNCTUATION}', "");
Expect(0, 171, '\p{^General_Category=_InitialPUNCTUATION}', "");
Expect(0, 171, '\P{General_Category=_InitialPUNCTUATION}', "");
Expect(1, 171, '\P{^General_Category=_InitialPUNCTUATION}', "");
Expect(0, 170, '\p{General_Category=_InitialPUNCTUATION}', "");
Expect(1, 170, '\p{^General_Category=_InitialPUNCTUATION}', "");
Expect(1, 170, '\P{General_Category=_InitialPUNCTUATION}', "");
Expect(0, 170, '\P{^General_Category=_InitialPUNCTUATION}', "");
Error('\p{Gc=:=_	Pi}');
Error('\P{Gc=:=_	Pi}');
Expect(1, 171, '\p{Gc=pi}', "");
Expect(0, 171, '\p{^Gc=pi}', "");
Expect(0, 171, '\P{Gc=pi}', "");
Expect(1, 171, '\P{^Gc=pi}', "");
Expect(0, 170, '\p{Gc=pi}', "");
Expect(1, 170, '\p{^Gc=pi}', "");
Expect(1, 170, '\P{Gc=pi}', "");
Expect(0, 170, '\P{^Gc=pi}', "");
Expect(1, 171, '\p{Gc=_ Pi}', "");
Expect(0, 171, '\p{^Gc=_ Pi}', "");
Expect(0, 171, '\P{Gc=_ Pi}', "");
Expect(1, 171, '\P{^Gc=_ Pi}', "");
Expect(0, 170, '\p{Gc=_ Pi}', "");
Expect(1, 170, '\p{^Gc=_ Pi}', "");
Expect(1, 170, '\P{Gc=_ Pi}', "");
Expect(0, 170, '\P{^Gc=_ Pi}', "");
Error('\p{Category=_ Initial_punctuation/a/}');
Error('\P{Category=_ Initial_punctuation/a/}');
Expect(1, 171, '\p{Category=initialpunctuation}', "");
Expect(0, 171, '\p{^Category=initialpunctuation}', "");
Expect(0, 171, '\P{Category=initialpunctuation}', "");
Expect(1, 171, '\P{^Category=initialpunctuation}', "");
Expect(0, 170, '\p{Category=initialpunctuation}', "");
Expect(1, 170, '\p{^Category=initialpunctuation}', "");
Expect(1, 170, '\P{Category=initialpunctuation}', "");
Expect(0, 170, '\P{^Category=initialpunctuation}', "");
Expect(1, 171, '\p{Category=		Initial_punctuation}', "");
Expect(0, 171, '\p{^Category=		Initial_punctuation}', "");
Expect(0, 171, '\P{Category=		Initial_punctuation}', "");
Expect(1, 171, '\P{^Category=		Initial_punctuation}', "");
Expect(0, 170, '\p{Category=		Initial_punctuation}', "");
Expect(1, 170, '\p{^Category=		Initial_punctuation}', "");
Expect(1, 170, '\P{Category=		Initial_punctuation}', "");
Expect(0, 170, '\P{^Category=		Initial_punctuation}', "");
Error('\p{Is_General_Category=:=--Pi}');
Error('\P{Is_General_Category=:=--Pi}');
Expect(1, 171, '\p{Is_General_Category=pi}', "");
Expect(0, 171, '\p{^Is_General_Category=pi}', "");
Expect(0, 171, '\P{Is_General_Category=pi}', "");
Expect(1, 171, '\P{^Is_General_Category=pi}', "");
Expect(0, 170, '\p{Is_General_Category=pi}', "");
Expect(1, 170, '\p{^Is_General_Category=pi}', "");
Expect(1, 170, '\P{Is_General_Category=pi}', "");
Expect(0, 170, '\P{^Is_General_Category=pi}', "");
Expect(1, 171, '\p{Is_General_Category= _pi}', "");
Expect(0, 171, '\p{^Is_General_Category= _pi}', "");
Expect(0, 171, '\P{Is_General_Category= _pi}', "");
Expect(1, 171, '\P{^Is_General_Category= _pi}', "");
Expect(0, 170, '\p{Is_General_Category= _pi}', "");
Expect(1, 170, '\p{^Is_General_Category= _pi}', "");
Expect(1, 170, '\P{Is_General_Category= _pi}', "");
Expect(0, 170, '\P{^Is_General_Category= _pi}', "");
Error('\p{Is_Gc=	INITIAL/a/PUNCTUATION}');
Error('\P{Is_Gc=	INITIAL/a/PUNCTUATION}');
Expect(1, 171, '\p{Is_Gc=initialpunctuation}', "");
Expect(0, 171, '\p{^Is_Gc=initialpunctuation}', "");
Expect(0, 171, '\P{Is_Gc=initialpunctuation}', "");
Expect(1, 171, '\P{^Is_Gc=initialpunctuation}', "");
Expect(0, 170, '\p{Is_Gc=initialpunctuation}', "");
Expect(1, 170, '\p{^Is_Gc=initialpunctuation}', "");
Expect(1, 170, '\P{Is_Gc=initialpunctuation}', "");
Expect(0, 170, '\P{^Is_Gc=initialpunctuation}', "");
Expect(1, 171, '\p{Is_Gc=_-INITIAL Punctuation}', "");
Expect(0, 171, '\p{^Is_Gc=_-INITIAL Punctuation}', "");
Expect(0, 171, '\P{Is_Gc=_-INITIAL Punctuation}', "");
Expect(1, 171, '\P{^Is_Gc=_-INITIAL Punctuation}', "");
Expect(0, 170, '\p{Is_Gc=_-INITIAL Punctuation}', "");
Expect(1, 170, '\p{^Is_Gc=_-INITIAL Punctuation}', "");
Expect(1, 170, '\P{Is_Gc=_-INITIAL Punctuation}', "");
Expect(0, 170, '\P{^Is_Gc=_-INITIAL Punctuation}', "");
Error('\p{Is_Category=/a/	_pi}');
Error('\P{Is_Category=/a/	_pi}');
Expect(1, 171, '\p{Is_Category: pi}', "");
Expect(0, 171, '\p{^Is_Category: pi}', "");
Expect(0, 171, '\P{Is_Category: pi}', "");
Expect(1, 171, '\P{^Is_Category: pi}', "");
Expect(0, 170, '\p{Is_Category: pi}', "");
Expect(1, 170, '\p{^Is_Category: pi}', "");
Expect(1, 170, '\P{Is_Category: pi}', "");
Expect(0, 170, '\P{^Is_Category: pi}', "");
Expect(1, 171, '\p{Is_Category=	_Pi}', "");
Expect(0, 171, '\p{^Is_Category=	_Pi}', "");
Expect(0, 171, '\P{Is_Category=	_Pi}', "");
Expect(1, 171, '\P{^Is_Category=	_Pi}', "");
Expect(0, 170, '\p{Is_Category=	_Pi}', "");
Expect(1, 170, '\p{^Is_Category=	_Pi}', "");
Expect(1, 170, '\P{Is_Category=	_Pi}', "");
Expect(0, 170, '\P{^Is_Category=	_Pi}', "");
Error('\p{General_Category=-/a/Currency-Symbol}');
Error('\P{General_Category=-/a/Currency-Symbol}');
Expect(1, 36, '\p{General_Category=currencysymbol}', "");
Expect(0, 36, '\p{^General_Category=currencysymbol}', "");
Expect(0, 36, '\P{General_Category=currencysymbol}', "");
Expect(1, 36, '\P{^General_Category=currencysymbol}', "");
Expect(0, 35, '\p{General_Category=currencysymbol}', "");
Expect(1, 35, '\p{^General_Category=currencysymbol}', "");
Expect(1, 35, '\P{General_Category=currencysymbol}', "");
Expect(0, 35, '\P{^General_Category=currencysymbol}', "");
Expect(1, 36, '\p{General_Category=  Currency symbol}', "");
Expect(0, 36, '\p{^General_Category=  Currency symbol}', "");
Expect(0, 36, '\P{General_Category=  Currency symbol}', "");
Expect(1, 36, '\P{^General_Category=  Currency symbol}', "");
Expect(0, 35, '\p{General_Category=  Currency symbol}', "");
Expect(1, 35, '\p{^General_Category=  Currency symbol}', "");
Expect(1, 35, '\P{General_Category=  Currency symbol}', "");
Expect(0, 35, '\P{^General_Category=  Currency symbol}', "");
Error('\p{Gc=/a/  Sc}');
Error('\P{Gc=/a/  Sc}');
Expect(1, 36, '\p{Gc=sc}', "");
Expect(0, 36, '\p{^Gc=sc}', "");
Expect(0, 36, '\P{Gc=sc}', "");
Expect(1, 36, '\P{^Gc=sc}', "");
Expect(0, 35, '\p{Gc=sc}', "");
Expect(1, 35, '\p{^Gc=sc}', "");
Expect(1, 35, '\P{Gc=sc}', "");
Expect(0, 35, '\P{^Gc=sc}', "");
Expect(1, 36, '\p{Gc=- sc}', "");
Expect(0, 36, '\p{^Gc=- sc}', "");
Expect(0, 36, '\P{Gc=- sc}', "");
Expect(1, 36, '\P{^Gc=- sc}', "");
Expect(0, 35, '\p{Gc=- sc}', "");
Expect(1, 35, '\p{^Gc=- sc}', "");
Expect(1, 35, '\P{Gc=- sc}', "");
Expect(0, 35, '\P{^Gc=- sc}', "");
Error('\p{Category=Currency	SYMBOL:=}');
Error('\P{Category=Currency	SYMBOL:=}');
Expect(1, 36, '\p{Category=currencysymbol}', "");
Expect(0, 36, '\p{^Category=currencysymbol}', "");
Expect(0, 36, '\P{Category=currencysymbol}', "");
Expect(1, 36, '\P{^Category=currencysymbol}', "");
Expect(0, 35, '\p{Category=currencysymbol}', "");
Expect(1, 35, '\p{^Category=currencysymbol}', "");
Expect(1, 35, '\P{Category=currencysymbol}', "");
Expect(0, 35, '\P{^Category=currencysymbol}', "");
Expect(1, 36, '\p{Category=CurrencySymbol}', "");
Expect(0, 36, '\p{^Category=CurrencySymbol}', "");
Expect(0, 36, '\P{Category=CurrencySymbol}', "");
Expect(1, 36, '\P{^Category=CurrencySymbol}', "");
Expect(0, 35, '\p{Category=CurrencySymbol}', "");
Expect(1, 35, '\p{^Category=CurrencySymbol}', "");
Expect(1, 35, '\P{Category=CurrencySymbol}', "");
Expect(0, 35, '\P{^Category=CurrencySymbol}', "");
Error('\p{Is_General_Category=--sc:=}');
Error('\P{Is_General_Category=--sc:=}');
Expect(1, 36, '\p{Is_General_Category=sc}', "");
Expect(0, 36, '\p{^Is_General_Category=sc}', "");
Expect(0, 36, '\P{Is_General_Category=sc}', "");
Expect(1, 36, '\P{^Is_General_Category=sc}', "");
Expect(0, 35, '\p{Is_General_Category=sc}', "");
Expect(1, 35, '\p{^Is_General_Category=sc}', "");
Expect(1, 35, '\P{Is_General_Category=sc}', "");
Expect(0, 35, '\P{^Is_General_Category=sc}', "");
Expect(1, 36, '\p{Is_General_Category=-SC}', "");
Expect(0, 36, '\p{^Is_General_Category=-SC}', "");
Expect(0, 36, '\P{Is_General_Category=-SC}', "");
Expect(1, 36, '\P{^Is_General_Category=-SC}', "");
Expect(0, 35, '\p{Is_General_Category=-SC}', "");
Expect(1, 35, '\p{^Is_General_Category=-SC}', "");
Expect(1, 35, '\P{Is_General_Category=-SC}', "");
Expect(0, 35, '\P{^Is_General_Category=-SC}', "");
Error('\p{Is_Gc:	Currency-Symbol:=}');
Error('\P{Is_Gc:	Currency-Symbol:=}');
Expect(1, 36, '\p{Is_Gc: currencysymbol}', "");
Expect(0, 36, '\p{^Is_Gc: currencysymbol}', "");
Expect(0, 36, '\P{Is_Gc: currencysymbol}', "");
Expect(1, 36, '\P{^Is_Gc: currencysymbol}', "");
Expect(0, 35, '\p{Is_Gc: currencysymbol}', "");
Expect(1, 35, '\p{^Is_Gc: currencysymbol}', "");
Expect(1, 35, '\P{Is_Gc: currencysymbol}', "");
Expect(0, 35, '\P{^Is_Gc: currencysymbol}', "");
Expect(1, 36, '\p{Is_Gc= currency_SYMBOL}', "");
Expect(0, 36, '\p{^Is_Gc= currency_SYMBOL}', "");
Expect(0, 36, '\P{Is_Gc= currency_SYMBOL}', "");
Expect(1, 36, '\P{^Is_Gc= currency_SYMBOL}', "");
Expect(0, 35, '\p{Is_Gc= currency_SYMBOL}', "");
Expect(1, 35, '\p{^Is_Gc= currency_SYMBOL}', "");
Expect(1, 35, '\P{Is_Gc= currency_SYMBOL}', "");
Expect(0, 35, '\P{^Is_Gc= currency_SYMBOL}', "");
Error('\p{Is_Category: /a/Sc}');
Error('\P{Is_Category: /a/Sc}');
Expect(1, 36, '\p{Is_Category=sc}', "");
Expect(0, 36, '\p{^Is_Category=sc}', "");
Expect(0, 36, '\P{Is_Category=sc}', "");
Expect(1, 36, '\P{^Is_Category=sc}', "");
Expect(0, 35, '\p{Is_Category=sc}', "");
Expect(1, 35, '\p{^Is_Category=sc}', "");
Expect(1, 35, '\P{Is_Category=sc}', "");
Expect(0, 35, '\P{^Is_Category=sc}', "");
Expect(1, 36, '\p{Is_Category= Sc}', "");
Expect(0, 36, '\p{^Is_Category= Sc}', "");
Expect(0, 36, '\P{Is_Category= Sc}', "");
Expect(1, 36, '\P{^Is_Category= Sc}', "");
Expect(0, 35, '\p{Is_Category= Sc}', "");
Expect(1, 35, '\p{^Is_Category= Sc}', "");
Expect(1, 35, '\P{Is_Category= Sc}', "");
Expect(0, 35, '\P{^Is_Category= Sc}', "");
Error('\p{General_Category=:=_Format}');
Error('\P{General_Category=:=_Format}');
Expect(1, 173, '\p{General_Category=format}', "");
Expect(0, 173, '\p{^General_Category=format}', "");
Expect(0, 173, '\P{General_Category=format}', "");
Expect(1, 173, '\P{^General_Category=format}', "");
Expect(0, 172, '\p{General_Category=format}', "");
Expect(1, 172, '\p{^General_Category=format}', "");
Expect(1, 172, '\P{General_Category=format}', "");
Expect(0, 172, '\P{^General_Category=format}', "");
Expect(1, 173, '\p{General_Category=_	Format}', "");
Expect(0, 173, '\p{^General_Category=_	Format}', "");
Expect(0, 173, '\P{General_Category=_	Format}', "");
Expect(1, 173, '\P{^General_Category=_	Format}', "");
Expect(0, 172, '\p{General_Category=_	Format}', "");
Expect(1, 172, '\p{^General_Category=_	Format}', "");
Expect(1, 172, '\P{General_Category=_	Format}', "");
Expect(0, 172, '\P{^General_Category=_	Format}', "");
Error('\p{Gc:   /a/_cf}');
Error('\P{Gc:   /a/_cf}');
Expect(1, 173, '\p{Gc=cf}', "");
Expect(0, 173, '\p{^Gc=cf}', "");
Expect(0, 173, '\P{Gc=cf}', "");
Expect(1, 173, '\P{^Gc=cf}', "");
Expect(0, 172, '\p{Gc=cf}', "");
Expect(1, 172, '\p{^Gc=cf}', "");
Expect(1, 172, '\P{Gc=cf}', "");
Expect(0, 172, '\P{^Gc=cf}', "");
Expect(1, 173, '\p{Gc=__cf}', "");
Expect(0, 173, '\p{^Gc=__cf}', "");
Expect(0, 173, '\P{Gc=__cf}', "");
Expect(1, 173, '\P{^Gc=__cf}', "");
Expect(0, 172, '\p{Gc=__cf}', "");
Expect(1, 172, '\p{^Gc=__cf}', "");
Expect(1, 172, '\P{Gc=__cf}', "");
Expect(0, 172, '\P{^Gc=__cf}', "");
Error('\p{Category=_Format/a/}');
Error('\P{Category=_Format/a/}');
Expect(1, 173, '\p{Category=format}', "");
Expect(0, 173, '\p{^Category=format}', "");
Expect(0, 173, '\P{Category=format}', "");
Expect(1, 173, '\P{^Category=format}', "");
Expect(0, 172, '\p{Category=format}', "");
Expect(1, 172, '\p{^Category=format}', "");
Expect(1, 172, '\P{Category=format}', "");
Expect(0, 172, '\P{^Category=format}', "");
Expect(1, 173, '\p{Category=_ Format}', "");
Expect(0, 173, '\p{^Category=_ Format}', "");
Expect(0, 173, '\P{Category=_ Format}', "");
Expect(1, 173, '\P{^Category=_ Format}', "");
Expect(0, 172, '\p{Category=_ Format}', "");
Expect(1, 172, '\p{^Category=_ Format}', "");
Expect(1, 172, '\P{Category=_ Format}', "");
Expect(0, 172, '\P{^Category=_ Format}', "");
Error('\p{Is_General_Category=/a/	CF}');
Error('\P{Is_General_Category=/a/	CF}');
Expect(1, 173, '\p{Is_General_Category=cf}', "");
Expect(0, 173, '\p{^Is_General_Category=cf}', "");
Expect(0, 173, '\P{Is_General_Category=cf}', "");
Expect(1, 173, '\P{^Is_General_Category=cf}', "");
Expect(0, 172, '\p{Is_General_Category=cf}', "");
Expect(1, 172, '\p{^Is_General_Category=cf}', "");
Expect(1, 172, '\P{Is_General_Category=cf}', "");
Expect(0, 172, '\P{^Is_General_Category=cf}', "");
Expect(1, 173, '\p{Is_General_Category:   - CF}', "");
Expect(0, 173, '\p{^Is_General_Category:   - CF}', "");
Expect(0, 173, '\P{Is_General_Category:   - CF}', "");
Expect(1, 173, '\P{^Is_General_Category:   - CF}', "");
Expect(0, 172, '\p{Is_General_Category:   - CF}', "");
Expect(1, 172, '\p{^Is_General_Category:   - CF}', "");
Expect(1, 172, '\P{Is_General_Category:   - CF}', "");
Expect(0, 172, '\P{^Is_General_Category:   - CF}', "");
Error('\p{Is_Gc=/a/	format}');
Error('\P{Is_Gc=/a/	format}');
Expect(1, 173, '\p{Is_Gc=format}', "");
Expect(0, 173, '\p{^Is_Gc=format}', "");
Expect(0, 173, '\P{Is_Gc=format}', "");
Expect(1, 173, '\P{^Is_Gc=format}', "");
Expect(0, 172, '\p{Is_Gc=format}', "");
Expect(1, 172, '\p{^Is_Gc=format}', "");
Expect(1, 172, '\P{Is_Gc=format}', "");
Expect(0, 172, '\P{^Is_Gc=format}', "");
Expect(1, 173, '\p{Is_Gc=-Format}', "");
Expect(0, 173, '\p{^Is_Gc=-Format}', "");
Expect(0, 173, '\P{Is_Gc=-Format}', "");
Expect(1, 173, '\P{^Is_Gc=-Format}', "");
Expect(0, 172, '\p{Is_Gc=-Format}', "");
Expect(1, 172, '\p{^Is_Gc=-Format}', "");
Expect(1, 172, '\P{Is_Gc=-Format}', "");
Expect(0, 172, '\P{^Is_Gc=-Format}', "");
Error('\p{Is_Category=:=-Cf}');
Error('\P{Is_Category=:=-Cf}');
Expect(1, 173, '\p{Is_Category=cf}', "");
Expect(0, 173, '\p{^Is_Category=cf}', "");
Expect(0, 173, '\P{Is_Category=cf}', "");
Expect(1, 173, '\P{^Is_Category=cf}', "");
Expect(0, 172, '\p{Is_Category=cf}', "");
Expect(1, 172, '\p{^Is_Category=cf}', "");
Expect(1, 172, '\P{Is_Category=cf}', "");
Expect(0, 172, '\P{^Is_Category=cf}', "");
Expect(1, 173, '\p{Is_Category=	CF}', "");
Expect(0, 173, '\p{^Is_Category=	CF}', "");
Expect(0, 173, '\P{Is_Category=	CF}', "");
Expect(1, 173, '\P{^Is_Category=	CF}', "");
Expect(0, 172, '\p{Is_Category=	CF}', "");
Expect(1, 172, '\p{^Is_Category=	CF}', "");
Expect(1, 172, '\P{Is_Category=	CF}', "");
Expect(0, 172, '\P{^Is_Category=	CF}', "");
Error('\p{Default_Ignorable_Code_Point=	yes:=}');
Error('\P{Default_Ignorable_Code_Point=	yes:=}');
Expect(1, 173, '\p{Default_Ignorable_Code_Point=yes}', "");
Expect(0, 173, '\p{^Default_Ignorable_Code_Point=yes}', "");
Expect(0, 173, '\P{Default_Ignorable_Code_Point=yes}', "");
Expect(1, 173, '\P{^Default_Ignorable_Code_Point=yes}', "");
Expect(0, 172, '\p{Default_Ignorable_Code_Point=yes}', "");
Expect(1, 172, '\p{^Default_Ignorable_Code_Point=yes}', "");
Expect(1, 172, '\P{Default_Ignorable_Code_Point=yes}', "");
Expect(0, 172, '\P{^Default_Ignorable_Code_Point=yes}', "");
Expect(1, 173, '\p{Default_Ignorable_Code_Point=_-Yes}', "");
Expect(0, 173, '\p{^Default_Ignorable_Code_Point=_-Yes}', "");
Expect(0, 173, '\P{Default_Ignorable_Code_Point=_-Yes}', "");
Expect(1, 173, '\P{^Default_Ignorable_Code_Point=_-Yes}', "");
Expect(0, 172, '\p{Default_Ignorable_Code_Point=_-Yes}', "");
Expect(1, 172, '\p{^Default_Ignorable_Code_Point=_-Yes}', "");
Expect(1, 172, '\P{Default_Ignorable_Code_Point=_-Yes}', "");
Expect(0, 172, '\P{^Default_Ignorable_Code_Point=_-Yes}', "");
Error('\p{DI: /a/Y}');
Error('\P{DI: /a/Y}');
Expect(1, 173, '\p{DI=y}', "");
Expect(0, 173, '\p{^DI=y}', "");
Expect(0, 173, '\P{DI=y}', "");
Expect(1, 173, '\P{^DI=y}', "");
Expect(0, 172, '\p{DI=y}', "");
Expect(1, 172, '\p{^DI=y}', "");
Expect(1, 172, '\P{DI=y}', "");
Expect(0, 172, '\P{^DI=y}', "");
Expect(1, 173, '\p{DI=	_Y}', "");
Expect(0, 173, '\p{^DI=	_Y}', "");
Expect(0, 173, '\P{DI=	_Y}', "");
Expect(1, 173, '\P{^DI=	_Y}', "");
Expect(0, 172, '\p{DI=	_Y}', "");
Expect(1, 172, '\p{^DI=	_Y}', "");
Expect(1, 172, '\P{DI=	_Y}', "");
Expect(0, 172, '\P{^DI=	_Y}', "");
Error('\p{Is_Default_Ignorable_Code_Point=-T/a/}');
Error('\P{Is_Default_Ignorable_Code_Point=-T/a/}');
Expect(1, 173, '\p{Is_Default_Ignorable_Code_Point=t}', "");
Expect(0, 173, '\p{^Is_Default_Ignorable_Code_Point=t}', "");
Expect(0, 173, '\P{Is_Default_Ignorable_Code_Point=t}', "");
Expect(1, 173, '\P{^Is_Default_Ignorable_Code_Point=t}', "");
Expect(0, 172, '\p{Is_Default_Ignorable_Code_Point=t}', "");
Expect(1, 172, '\p{^Is_Default_Ignorable_Code_Point=t}', "");
Expect(1, 172, '\P{Is_Default_Ignorable_Code_Point=t}', "");
Expect(0, 172, '\P{^Is_Default_Ignorable_Code_Point=t}', "");
Expect(1, 173, '\p{Is_Default_Ignorable_Code_Point=	-T}', "");
Expect(0, 173, '\p{^Is_Default_Ignorable_Code_Point=	-T}', "");
Expect(0, 173, '\P{Is_Default_Ignorable_Code_Point=	-T}', "");
Expect(1, 173, '\P{^Is_Default_Ignorable_Code_Point=	-T}', "");
Expect(0, 172, '\p{Is_Default_Ignorable_Code_Point=	-T}', "");
Expect(1, 172, '\p{^Is_Default_Ignorable_Code_Point=	-T}', "");
Expect(1, 172, '\P{Is_Default_Ignorable_Code_Point=	-T}', "");
Expect(0, 172, '\P{^Is_Default_Ignorable_Code_Point=	-T}', "");
Error('\p{Is_DI:	_:=TRUE}');
Error('\P{Is_DI:	_:=TRUE}');
Expect(1, 173, '\p{Is_DI=true}', "");
Expect(0, 173, '\p{^Is_DI=true}', "");
Expect(0, 173, '\P{Is_DI=true}', "");
Expect(1, 173, '\P{^Is_DI=true}', "");
Expect(0, 172, '\p{Is_DI=true}', "");
Expect(1, 172, '\p{^Is_DI=true}', "");
Expect(1, 172, '\P{Is_DI=true}', "");
Expect(0, 172, '\P{^Is_DI=true}', "");
Expect(1, 173, '\p{Is_DI=	-TRUE}', "");
Expect(0, 173, '\p{^Is_DI=	-TRUE}', "");
Expect(0, 173, '\P{Is_DI=	-TRUE}', "");
Expect(1, 173, '\P{^Is_DI=	-TRUE}', "");
Expect(0, 172, '\p{Is_DI=	-TRUE}', "");
Expect(1, 172, '\p{^Is_DI=	-TRUE}', "");
Expect(1, 172, '\P{Is_DI=	-TRUE}', "");
Expect(0, 172, '\P{^Is_DI=	-TRUE}', "");
Error('\p{Default_Ignorable_Code_Point= /a/NO}');
Error('\P{Default_Ignorable_Code_Point= /a/NO}');
Expect(1, 172, '\p{Default_Ignorable_Code_Point=no}', "");
Expect(0, 172, '\p{^Default_Ignorable_Code_Point=no}', "");
Expect(0, 172, '\P{Default_Ignorable_Code_Point=no}', "");
Expect(1, 172, '\P{^Default_Ignorable_Code_Point=no}', "");
Expect(0, 173, '\p{Default_Ignorable_Code_Point=no}', "");
Expect(1, 173, '\p{^Default_Ignorable_Code_Point=no}', "");
Expect(1, 173, '\P{Default_Ignorable_Code_Point=no}', "");
Expect(0, 173, '\P{^Default_Ignorable_Code_Point=no}', "");
Expect(1, 172, '\p{Default_Ignorable_Code_Point:	 No}', "");
Expect(0, 172, '\p{^Default_Ignorable_Code_Point:	 No}', "");
Expect(0, 172, '\P{Default_Ignorable_Code_Point:	 No}', "");
Expect(1, 172, '\P{^Default_Ignorable_Code_Point:	 No}', "");
Expect(0, 173, '\p{Default_Ignorable_Code_Point:	 No}', "");
Expect(1, 173, '\p{^Default_Ignorable_Code_Point:	 No}', "");
Expect(1, 173, '\P{Default_Ignorable_Code_Point:	 No}', "");
Expect(0, 173, '\P{^Default_Ignorable_Code_Point:	 No}', "");
Error('\p{DI= N/a/}');
Error('\P{DI= N/a/}');
Expect(1, 172, '\p{DI=n}', "");
Expect(0, 172, '\p{^DI=n}', "");
Expect(0, 172, '\P{DI=n}', "");
Expect(1, 172, '\P{^DI=n}', "");
Expect(0, 173, '\p{DI=n}', "");
Expect(1, 173, '\p{^DI=n}', "");
Expect(1, 173, '\P{DI=n}', "");
Expect(0, 173, '\P{^DI=n}', "");
Expect(1, 172, '\p{DI=N}', "");
Expect(0, 172, '\p{^DI=N}', "");
Expect(0, 172, '\P{DI=N}', "");
Expect(1, 172, '\P{^DI=N}', "");
Expect(0, 173, '\p{DI=N}', "");
Expect(1, 173, '\p{^DI=N}', "");
Expect(1, 173, '\P{DI=N}', "");
Expect(0, 173, '\P{^DI=N}', "");
Error('\p{Is_Default_Ignorable_Code_Point=	:=F}');
Error('\P{Is_Default_Ignorable_Code_Point=	:=F}');
Expect(1, 172, '\p{Is_Default_Ignorable_Code_Point:   f}', "");
Expect(0, 172, '\p{^Is_Default_Ignorable_Code_Point:   f}', "");
Expect(0, 172, '\P{Is_Default_Ignorable_Code_Point:   f}', "");
Expect(1, 172, '\P{^Is_Default_Ignorable_Code_Point:   f}', "");
Expect(0, 173, '\p{Is_Default_Ignorable_Code_Point:   f}', "");
Expect(1, 173, '\p{^Is_Default_Ignorable_Code_Point:   f}', "");
Expect(1, 173, '\P{Is_Default_Ignorable_Code_Point:   f}', "");
Expect(0, 173, '\P{^Is_Default_Ignorable_Code_Point:   f}', "");
Expect(1, 172, '\p{Is_Default_Ignorable_Code_Point=_	f}', "");
Expect(0, 172, '\p{^Is_Default_Ignorable_Code_Point=_	f}', "");
Expect(0, 172, '\P{Is_Default_Ignorable_Code_Point=_	f}', "");
Expect(1, 172, '\P{^Is_Default_Ignorable_Code_Point=_	f}', "");
Expect(0, 173, '\p{Is_Default_Ignorable_Code_Point=_	f}', "");
Expect(1, 173, '\p{^Is_Default_Ignorable_Code_Point=_	f}', "");
Expect(1, 173, '\P{Is_Default_Ignorable_Code_Point=_	f}', "");
Expect(0, 173, '\P{^Is_Default_Ignorable_Code_Point=_	f}', "");
Error('\p{Is_DI=	:=False}');
Error('\P{Is_DI=	:=False}');
Expect(1, 172, '\p{Is_DI=false}', "");
Expect(0, 172, '\p{^Is_DI=false}', "");
Expect(0, 172, '\P{Is_DI=false}', "");
Expect(1, 172, '\P{^Is_DI=false}', "");
Expect(0, 173, '\p{Is_DI=false}', "");
Expect(1, 173, '\p{^Is_DI=false}', "");
Expect(1, 173, '\P{Is_DI=false}', "");
Expect(0, 173, '\P{^Is_DI=false}', "");
Expect(1, 172, '\p{Is_DI=-	False}', "");
Expect(0, 172, '\p{^Is_DI=-	False}', "");
Expect(0, 172, '\P{Is_DI=-	False}', "");
Expect(1, 172, '\P{^Is_DI=-	False}', "");
Expect(0, 173, '\p{Is_DI=-	False}', "");
Expect(1, 173, '\p{^Is_DI=-	False}', "");
Expect(1, 173, '\P{Is_DI=-	False}', "");
Expect(0, 173, '\P{^Is_DI=-	False}', "");
Error('\p{Terminal_Punctuation= Yes:=}');
Error('\P{Terminal_Punctuation= Yes:=}');
Expect(1, 33, '\p{Terminal_Punctuation=yes}', "");
Expect(0, 33, '\p{^Terminal_Punctuation=yes}', "");
Expect(0, 33, '\P{Terminal_Punctuation=yes}', "");
Expect(1, 33, '\P{^Terminal_Punctuation=yes}', "");
Expect(0, 32, '\p{Terminal_Punctuation=yes}', "");
Expect(1, 32, '\p{^Terminal_Punctuation=yes}', "");
Expect(1, 32, '\P{Terminal_Punctuation=yes}', "");
Expect(0, 32, '\P{^Terminal_Punctuation=yes}', "");
Expect(1, 33, '\p{Terminal_Punctuation= -Yes}', "");
Expect(0, 33, '\p{^Terminal_Punctuation= -Yes}', "");
Expect(0, 33, '\P{Terminal_Punctuation= -Yes}', "");
Expect(1, 33, '\P{^Terminal_Punctuation= -Yes}', "");
Expect(0, 32, '\p{Terminal_Punctuation= -Yes}', "");
Expect(1, 32, '\p{^Terminal_Punctuation= -Yes}', "");
Expect(1, 32, '\P{Terminal_Punctuation= -Yes}', "");
Expect(0, 32, '\P{^Terminal_Punctuation= -Yes}', "");
Error('\p{Term= Y/a/}');
Error('\P{Term= Y/a/}');
Expect(1, 33, '\p{Term=y}', "");
Expect(0, 33, '\p{^Term=y}', "");
Expect(0, 33, '\P{Term=y}', "");
Expect(1, 33, '\P{^Term=y}', "");
Expect(0, 32, '\p{Term=y}', "");
Expect(1, 32, '\p{^Term=y}', "");
Expect(1, 32, '\P{Term=y}', "");
Expect(0, 32, '\P{^Term=y}', "");
Expect(1, 33, '\p{Term=_ y}', "");
Expect(0, 33, '\p{^Term=_ y}', "");
Expect(0, 33, '\P{Term=_ y}', "");
Expect(1, 33, '\P{^Term=_ y}', "");
Expect(0, 32, '\p{Term=_ y}', "");
Expect(1, 32, '\p{^Term=_ y}', "");
Expect(1, 32, '\P{Term=_ y}', "");
Expect(0, 32, '\P{^Term=_ y}', "");
Error('\p{Is_Terminal_Punctuation:	:=-_T}');
Error('\P{Is_Terminal_Punctuation:	:=-_T}');
Expect(1, 33, '\p{Is_Terminal_Punctuation=t}', "");
Expect(0, 33, '\p{^Is_Terminal_Punctuation=t}', "");
Expect(0, 33, '\P{Is_Terminal_Punctuation=t}', "");
Expect(1, 33, '\P{^Is_Terminal_Punctuation=t}', "");
Expect(0, 32, '\p{Is_Terminal_Punctuation=t}', "");
Expect(1, 32, '\p{^Is_Terminal_Punctuation=t}', "");
Expect(1, 32, '\P{Is_Terminal_Punctuation=t}', "");
Expect(0, 32, '\P{^Is_Terminal_Punctuation=t}', "");
Expect(1, 33, '\p{Is_Terminal_Punctuation=-	T}', "");
Expect(0, 33, '\p{^Is_Terminal_Punctuation=-	T}', "");
Expect(0, 33, '\P{Is_Terminal_Punctuation=-	T}', "");
Expect(1, 33, '\P{^Is_Terminal_Punctuation=-	T}', "");
Expect(0, 32, '\p{Is_Terminal_Punctuation=-	T}', "");
Expect(1, 32, '\p{^Is_Terminal_Punctuation=-	T}', "");
Expect(1, 32, '\P{Is_Terminal_Punctuation=-	T}', "");
Expect(0, 32, '\P{^Is_Terminal_Punctuation=-	T}', "");
Error('\p{Is_Term=:=  true}');
Error('\P{Is_Term=:=  true}');
Expect(1, 33, '\p{Is_Term=true}', "");
Expect(0, 33, '\p{^Is_Term=true}', "");
Expect(0, 33, '\P{Is_Term=true}', "");
Expect(1, 33, '\P{^Is_Term=true}', "");
Expect(0, 32, '\p{Is_Term=true}', "");
Expect(1, 32, '\p{^Is_Term=true}', "");
Expect(1, 32, '\P{Is_Term=true}', "");
Expect(0, 32, '\P{^Is_Term=true}', "");
Expect(1, 33, '\p{Is_Term=	True}', "");
Expect(0, 33, '\p{^Is_Term=	True}', "");
Expect(0, 33, '\P{Is_Term=	True}', "");
Expect(1, 33, '\P{^Is_Term=	True}', "");
Expect(0, 32, '\p{Is_Term=	True}', "");
Expect(1, 32, '\p{^Is_Term=	True}', "");
Expect(1, 32, '\P{Is_Term=	True}', "");
Expect(0, 32, '\P{^Is_Term=	True}', "");
Error('\p{Terminal_Punctuation:    /a/no}');
Error('\P{Terminal_Punctuation:    /a/no}');
Expect(1, 32, '\p{Terminal_Punctuation=no}', "");
Expect(0, 32, '\p{^Terminal_Punctuation=no}', "");
Expect(0, 32, '\P{Terminal_Punctuation=no}', "");
Expect(1, 32, '\P{^Terminal_Punctuation=no}', "");
Expect(0, 33, '\p{Terminal_Punctuation=no}', "");
Expect(1, 33, '\p{^Terminal_Punctuation=no}', "");
Expect(1, 33, '\P{Terminal_Punctuation=no}', "");
Expect(0, 33, '\P{^Terminal_Punctuation=no}', "");
Expect(1, 32, '\p{Terminal_Punctuation= 	No}', "");
Expect(0, 32, '\p{^Terminal_Punctuation= 	No}', "");
Expect(0, 32, '\P{Terminal_Punctuation= 	No}', "");
Expect(1, 32, '\P{^Terminal_Punctuation= 	No}', "");
Expect(0, 33, '\p{Terminal_Punctuation= 	No}', "");
Expect(1, 33, '\p{^Terminal_Punctuation= 	No}', "");
Expect(1, 33, '\P{Terminal_Punctuation= 	No}', "");
Expect(0, 33, '\P{^Terminal_Punctuation= 	No}', "");
Error('\p{Term=	/a/N}');
Error('\P{Term=	/a/N}');
Expect(1, 32, '\p{Term=n}', "");
Expect(0, 32, '\p{^Term=n}', "");
Expect(0, 32, '\P{Term=n}', "");
Expect(1, 32, '\P{^Term=n}', "");
Expect(0, 33, '\p{Term=n}', "");
Expect(1, 33, '\p{^Term=n}', "");
Expect(1, 33, '\P{Term=n}', "");
Expect(0, 33, '\P{^Term=n}', "");
Expect(1, 32, '\p{Term:	 N}', "");
Expect(0, 32, '\p{^Term:	 N}', "");
Expect(0, 32, '\P{Term:	 N}', "");
Expect(1, 32, '\P{^Term:	 N}', "");
Expect(0, 33, '\p{Term:	 N}', "");
Expect(1, 33, '\p{^Term:	 N}', "");
Expect(1, 33, '\P{Term:	 N}', "");
Expect(0, 33, '\P{^Term:	 N}', "");
Error('\p{Is_Terminal_Punctuation=:=F}');
Error('\P{Is_Terminal_Punctuation=:=F}');
Expect(1, 32, '\p{Is_Terminal_Punctuation=f}', "");
Expect(0, 32, '\p{^Is_Terminal_Punctuation=f}', "");
Expect(0, 32, '\P{Is_Terminal_Punctuation=f}', "");
Expect(1, 32, '\P{^Is_Terminal_Punctuation=f}', "");
Expect(0, 33, '\p{Is_Terminal_Punctuation=f}', "");
Expect(1, 33, '\p{^Is_Terminal_Punctuation=f}', "");
Expect(1, 33, '\P{Is_Terminal_Punctuation=f}', "");
Expect(0, 33, '\P{^Is_Terminal_Punctuation=f}', "");
Expect(1, 32, '\p{Is_Terminal_Punctuation=	-f}', "");
Expect(0, 32, '\p{^Is_Terminal_Punctuation=	-f}', "");
Expect(0, 32, '\P{Is_Terminal_Punctuation=	-f}', "");
Expect(1, 32, '\P{^Is_Terminal_Punctuation=	-f}', "");
Expect(0, 33, '\p{Is_Terminal_Punctuation=	-f}', "");
Expect(1, 33, '\p{^Is_Terminal_Punctuation=	-f}', "");
Expect(1, 33, '\P{Is_Terminal_Punctuation=	-f}', "");
Expect(0, 33, '\P{^Is_Terminal_Punctuation=	-f}', "");
Error('\p{Is_Term:	/a/	false}');
Error('\P{Is_Term:	/a/	false}');
Expect(1, 32, '\p{Is_Term=false}', "");
Expect(0, 32, '\p{^Is_Term=false}', "");
Expect(0, 32, '\P{Is_Term=false}', "");
Expect(1, 32, '\P{^Is_Term=false}', "");
Expect(0, 33, '\p{Is_Term=false}', "");
Expect(1, 33, '\p{^Is_Term=false}', "");
Expect(1, 33, '\P{Is_Term=false}', "");
Expect(0, 33, '\P{^Is_Term=false}', "");
Expect(1, 32, '\p{Is_Term=  False}', "");
Expect(0, 32, '\p{^Is_Term=  False}', "");
Expect(0, 32, '\P{Is_Term=  False}', "");
Expect(1, 32, '\P{^Is_Term=  False}', "");
Expect(0, 33, '\p{Is_Term=  False}', "");
Expect(1, 33, '\p{^Is_Term=  False}', "");
Expect(1, 33, '\P{Is_Term=  False}', "");
Expect(0, 33, '\P{^Is_Term=  False}', "");
Test_X('÷ 0020 ÷ 0020 ÷');
Test_X('÷ 0020 × 0308 ÷ 0020 ÷');
Test_X('÷ 0020 ÷ 000D ÷');
Test_X('÷ 0020 × 0308 ÷ 000D ÷');
Test_X('÷ 0020 ÷ 000A ÷');
Test_X('÷ 0020 × 0308 ÷ 000A ÷');
Test_X('÷ 0020 ÷ 0001 ÷');
Test_X('÷ 0020 × 0308 ÷ 0001 ÷');
Test_X('÷ 0020 × 0300 ÷');
Test_X('÷ 0020 × 0308 × 0300 ÷');
Test_X('÷ 0020 ÷ 0E40 ÷');
Test_X('÷ 0020 × 0308 ÷ 0E40 ÷');
Test_X('÷ 0020 × 0903 ÷');
Test_X('÷ 0020 × 0308 × 0903 ÷');
Test_X('÷ 0020 ÷ 1100 ÷');
Test_X('÷ 0020 × 0308 ÷ 1100 ÷');
Test_X('÷ 0020 ÷ 1160 ÷');
Test_X('÷ 0020 × 0308 ÷ 1160 ÷');
Test_X('÷ 0020 ÷ 11A8 ÷');
Test_X('÷ 0020 × 0308 ÷ 11A8 ÷');
Test_X('÷ 0020 ÷ AC00 ÷');
Test_X('÷ 0020 × 0308 ÷ AC00 ÷');
Test_X('÷ 0020 ÷ AC01 ÷');
Test_X('÷ 0020 × 0308 ÷ AC01 ÷');
Test_X('÷ 000D ÷ 0020 ÷');
Test_X('÷ 000D ÷ 0308 ÷ 0020 ÷');
Test_X('÷ 000D ÷ 000D ÷');
Test_X('÷ 000D ÷ 0308 ÷ 000D ÷');
Test_X('÷ 000D × 000A ÷');
Test_X('÷ 000D ÷ 0308 ÷ 000A ÷');
Test_X('÷ 000D ÷ 0001 ÷');
Test_X('÷ 000D ÷ 0308 ÷ 0001 ÷');
Test_X('÷ 000D ÷ 0300 ÷');
Test_X('÷ 000D ÷ 0308 × 0300 ÷');
Test_X('÷ 000D ÷ 0E40 ÷');
Test_X('÷ 000D ÷ 0308 ÷ 0E40 ÷');
Test_X('÷ 000D ÷ 0903 ÷');
Test_X('÷ 000D ÷ 0308 × 0903 ÷');
Test_X('÷ 000D ÷ 1100 ÷');
Test_X('÷ 000D ÷ 0308 ÷ 1100 ÷');
Test_X('÷ 000D ÷ 1160 ÷');
Test_X('÷ 000D ÷ 0308 ÷ 1160 ÷');
Test_X('÷ 000D ÷ 11A8 ÷');
Test_X('÷ 000D ÷ 0308 ÷ 11A8 ÷');
Test_X('÷ 000D ÷ AC00 ÷');
Test_X('÷ 000D ÷ 0308 ÷ AC00 ÷');
Test_X('÷ 000D ÷ AC01 ÷');
Test_X('÷ 000D ÷ 0308 ÷ AC01 ÷');
Test_X('÷ 000A ÷ 0020 ÷');
Test_X('÷ 000A ÷ 0308 ÷ 0020 ÷');
Test_X('÷ 000A ÷ 000D ÷');
Test_X('÷ 000A ÷ 0308 ÷ 000D ÷');
Test_X('÷ 000A ÷ 000A ÷');
Test_X('÷ 000A ÷ 0308 ÷ 000A ÷');
Test_X('÷ 000A ÷ 0001 ÷');
Test_X('÷ 000A ÷ 0308 ÷ 0001 ÷');
Test_X('÷ 000A ÷ 0300 ÷');
Test_X('÷ 000A ÷ 0308 × 0300 ÷');
Test_X('÷ 000A ÷ 0E40 ÷');
Test_X('÷ 000A ÷ 0308 ÷ 0E40 ÷');
Test_X('÷ 000A ÷ 0903 ÷');
Test_X('÷ 000A ÷ 0308 × 0903 ÷');
Test_X('÷ 000A ÷ 1100 ÷');
Test_X('÷ 000A ÷ 0308 ÷ 1100 ÷');
Test_X('÷ 000A ÷ 1160 ÷');
Test_X('÷ 000A ÷ 0308 ÷ 1160 ÷');
Test_X('÷ 000A ÷ 11A8 ÷');
Test_X('÷ 000A ÷ 0308 ÷ 11A8 ÷');
Test_X('÷ 000A ÷ AC00 ÷');
Test_X('÷ 000A ÷ 0308 ÷ AC00 ÷');
Test_X('÷ 000A ÷ AC01 ÷');
Test_X('÷ 000A ÷ 0308 ÷ AC01 ÷');
Test_X('÷ 0001 ÷ 0020 ÷');
Test_X('÷ 0001 ÷ 0308 ÷ 0020 ÷');
Test_X('÷ 0001 ÷ 000D ÷');
Test_X('÷ 0001 ÷ 0308 ÷ 000D ÷');
Test_X('÷ 0001 ÷ 000A ÷');
Test_X('÷ 0001 ÷ 0308 ÷ 000A ÷');
Test_X('÷ 0001 ÷ 0001 ÷');
Test_X('÷ 0001 ÷ 0308 ÷ 0001 ÷');
Test_X('÷ 0001 ÷ 0300 ÷');
Test_X('÷ 0001 ÷ 0308 × 0300 ÷');
Test_X('÷ 0001 ÷ 0E40 ÷');
Test_X('÷ 0001 ÷ 0308 ÷ 0E40 ÷');
Test_X('÷ 0001 ÷ 0903 ÷');
Test_X('÷ 0001 ÷ 0308 × 0903 ÷');
Test_X('÷ 0001 ÷ 1100 ÷');
Test_X('÷ 0001 ÷ 0308 ÷ 1100 ÷');
Test_X('÷ 0001 ÷ 1160 ÷');
Test_X('÷ 0001 ÷ 0308 ÷ 1160 ÷');
Test_X('÷ 0001 ÷ 11A8 ÷');
Test_X('÷ 0001 ÷ 0308 ÷ 11A8 ÷');
Test_X('÷ 0001 ÷ AC00 ÷');
Test_X('÷ 0001 ÷ 0308 ÷ AC00 ÷');
Test_X('÷ 0001 ÷ AC01 ÷');
Test_X('÷ 0001 ÷ 0308 ÷ AC01 ÷');
Test_X('÷ 0300 ÷ 0020 ÷');
Test_X('÷ 0300 × 0308 ÷ 0020 ÷');
Test_X('÷ 0300 ÷ 000D ÷');
Test_X('÷ 0300 × 0308 ÷ 000D ÷');
Test_X('÷ 0300 ÷ 000A ÷');
Test_X('÷ 0300 × 0308 ÷ 000A ÷');
Test_X('÷ 0300 ÷ 0001 ÷');
Test_X('÷ 0300 × 0308 ÷ 0001 ÷');
Test_X('÷ 0300 × 0300 ÷');
Test_X('÷ 0300 × 0308 × 0300 ÷');
Test_X('÷ 0300 ÷ 0E40 ÷');
Test_X('÷ 0300 × 0308 ÷ 0E40 ÷');
Test_X('÷ 0300 × 0903 ÷');
Test_X('÷ 0300 × 0308 × 0903 ÷');
Test_X('÷ 0300 ÷ 1100 ÷');
Test_X('÷ 0300 × 0308 ÷ 1100 ÷');
Test_X('÷ 0300 ÷ 1160 ÷');
Test_X('÷ 0300 × 0308 ÷ 1160 ÷');
Test_X('÷ 0300 ÷ 11A8 ÷');
Test_X('÷ 0300 × 0308 ÷ 11A8 ÷');
Test_X('÷ 0300 ÷ AC00 ÷');
Test_X('÷ 0300 × 0308 ÷ AC00 ÷');
Test_X('÷ 0300 ÷ AC01 ÷');
Test_X('÷ 0300 × 0308 ÷ AC01 ÷');
Test_X('÷ 0E40 × 0020 ÷');
Test_X('÷ 0E40 × 0308 ÷ 0020 ÷');
Test_X('÷ 0E40 ÷ 000D ÷');
Test_X('÷ 0E40 × 0308 ÷ 000D ÷');
Test_X('÷ 0E40 ÷ 000A ÷');
Test_X('÷ 0E40 × 0308 ÷ 000A ÷');
Test_X('÷ 0E40 ÷ 0001 ÷');
Test_X('÷ 0E40 × 0308 ÷ 0001 ÷');
Test_X('÷ 0E40 × 0300 ÷');
Test_X('÷ 0E40 × 0308 × 0300 ÷');
Test_X('÷ 0E40 × 0E40 ÷');
Test_X('÷ 0E40 × 0308 ÷ 0E40 ÷');
Test_X('÷ 0E40 × 0903 ÷');
Test_X('÷ 0E40 × 0308 × 0903 ÷');
Test_X('÷ 0E40 × 1100 ÷');
Test_X('÷ 0E40 × 0308 ÷ 1100 ÷');
Test_X('÷ 0E40 × 1160 ÷');
Test_X('÷ 0E40 × 0308 ÷ 1160 ÷');
Test_X('÷ 0E40 × 11A8 ÷');
Test_X('÷ 0E40 × 0308 ÷ 11A8 ÷');
Test_X('÷ 0E40 × AC00 ÷');
Test_X('÷ 0E40 × 0308 ÷ AC00 ÷');
Test_X('÷ 0E40 × AC01 ÷');
Test_X('÷ 0E40 × 0308 ÷ AC01 ÷');
Test_X('÷ 0903 ÷ 0020 ÷');
Test_X('÷ 0903 × 0308 ÷ 0020 ÷');
Test_X('÷ 0903 ÷ 000D ÷');
Test_X('÷ 0903 × 0308 ÷ 000D ÷');
Test_X('÷ 0903 ÷ 000A ÷');
Test_X('÷ 0903 × 0308 ÷ 000A ÷');
Test_X('÷ 0903 ÷ 0001 ÷');
Test_X('÷ 0903 × 0308 ÷ 0001 ÷');
Test_X('÷ 0903 × 0300 ÷');
Test_X('÷ 0903 × 0308 × 0300 ÷');
Test_X('÷ 0903 ÷ 0E40 ÷');
Test_X('÷ 0903 × 0308 ÷ 0E40 ÷');
Test_X('÷ 0903 × 0903 ÷');
Test_X('÷ 0903 × 0308 × 0903 ÷');
Test_X('÷ 0903 ÷ 1100 ÷');
Test_X('÷ 0903 × 0308 ÷ 1100 ÷');
Test_X('÷ 0903 ÷ 1160 ÷');
Test_X('÷ 0903 × 0308 ÷ 1160 ÷');
Test_X('÷ 0903 ÷ 11A8 ÷');
Test_X('÷ 0903 × 0308 ÷ 11A8 ÷');
Test_X('÷ 0903 ÷ AC00 ÷');
Test_X('÷ 0903 × 0308 ÷ AC00 ÷');
Test_X('÷ 0903 ÷ AC01 ÷');
Test_X('÷ 0903 × 0308 ÷ AC01 ÷');
Test_X('÷ 1100 ÷ 0020 ÷');
Test_X('÷ 1100 × 0308 ÷ 0020 ÷');
Test_X('÷ 1100 ÷ 000D ÷');
Test_X('÷ 1100 × 0308 ÷ 000D ÷');
Test_X('÷ 1100 ÷ 000A ÷');
Test_X('÷ 1100 × 0308 ÷ 000A ÷');
Test_X('÷ 1100 ÷ 0001 ÷');
Test_X('÷ 1100 × 0308 ÷ 0001 ÷');
Test_X('÷ 1100 × 0300 ÷');
Test_X('÷ 1100 × 0308 × 0300 ÷');
Test_X('÷ 1100 ÷ 0E40 ÷');
Test_X('÷ 1100 × 0308 ÷ 0E40 ÷');
Test_X('÷ 1100 × 0903 ÷');
Test_X('÷ 1100 × 0308 × 0903 ÷');
Test_X('÷ 1100 × 1100 ÷');
Test_X('÷ 1100 × 0308 ÷ 1100 ÷');
Test_X('÷ 1100 × 1160 ÷');
Test_X('÷ 1100 × 0308 ÷ 1160 ÷');
Test_X('÷ 1100 ÷ 11A8 ÷');
Test_X('÷ 1100 × 0308 ÷ 11A8 ÷');
Test_X('÷ 1100 × AC00 ÷');
Test_X('÷ 1100 × 0308 ÷ AC00 ÷');
Test_X('÷ 1100 × AC01 ÷');
Test_X('÷ 1100 × 0308 ÷ AC01 ÷');
Test_X('÷ 1160 ÷ 0020 ÷');
Test_X('÷ 1160 × 0308 ÷ 0020 ÷');
Test_X('÷ 1160 ÷ 000D ÷');
Test_X('÷ 1160 × 0308 ÷ 000D ÷');
Test_X('÷ 1160 ÷ 000A ÷');
Test_X('÷ 1160 × 0308 ÷ 000A ÷');
Test_X('÷ 1160 ÷ 0001 ÷');
Test_X('÷ 1160 × 0308 ÷ 0001 ÷');
Test_X('÷ 1160 × 0300 ÷');
Test_X('÷ 1160 × 0308 × 0300 ÷');
Test_X('÷ 1160 ÷ 0E40 ÷');
Test_X('÷ 1160 × 0308 ÷ 0E40 ÷');
Test_X('÷ 1160 × 0903 ÷');
Test_X('÷ 1160 × 0308 × 0903 ÷');
Test_X('÷ 1160 ÷ 1100 ÷');
Test_X('÷ 1160 × 0308 ÷ 1100 ÷');
Test_X('÷ 1160 × 1160 ÷');
Test_X('÷ 1160 × 0308 ÷ 1160 ÷');
Test_X('÷ 1160 × 11A8 ÷');
Test_X('÷ 1160 × 0308 ÷ 11A8 ÷');
Test_X('÷ 1160 ÷ AC00 ÷');
Test_X('÷ 1160 × 0308 ÷ AC00 ÷');
Test_X('÷ 1160 ÷ AC01 ÷');
Test_X('÷ 1160 × 0308 ÷ AC01 ÷');
Test_X('÷ 11A8 ÷ 0020 ÷');
Test_X('÷ 11A8 × 0308 ÷ 0020 ÷');
Test_X('÷ 11A8 ÷ 000D ÷');
Test_X('÷ 11A8 × 0308 ÷ 000D ÷');
Test_X('÷ 11A8 ÷ 000A ÷');
Test_X('÷ 11A8 × 0308 ÷ 000A ÷');
Test_X('÷ 11A8 ÷ 0001 ÷');
Test_X('÷ 11A8 × 0308 ÷ 0001 ÷');
Test_X('÷ 11A8 × 0300 ÷');
Test_X('÷ 11A8 × 0308 × 0300 ÷');
Test_X('÷ 11A8 ÷ 0E40 ÷');
Test_X('÷ 11A8 × 0308 ÷ 0E40 ÷');
Test_X('÷ 11A8 × 0903 ÷');
Test_X('÷ 11A8 × 0308 × 0903 ÷');
Test_X('÷ 11A8 ÷ 1100 ÷');
Test_X('÷ 11A8 × 0308 ÷ 1100 ÷');
Test_X('÷ 11A8 ÷ 1160 ÷');
Test_X('÷ 11A8 × 0308 ÷ 1160 ÷');
Test_X('÷ 11A8 × 11A8 ÷');
Test_X('÷ 11A8 × 0308 ÷ 11A8 ÷');
Test_X('÷ 11A8 ÷ AC00 ÷');
Test_X('÷ 11A8 × 0308 ÷ AC00 ÷');
Test_X('÷ 11A8 ÷ AC01 ÷');
Test_X('÷ 11A8 × 0308 ÷ AC01 ÷');
Test_X('÷ AC00 ÷ 0020 ÷');
Test_X('÷ AC00 × 0308 ÷ 0020 ÷');
Test_X('÷ AC00 ÷ 000D ÷');
Test_X('÷ AC00 × 0308 ÷ 000D ÷');
Test_X('÷ AC00 ÷ 000A ÷');
Test_X('÷ AC00 × 0308 ÷ 000A ÷');
Test_X('÷ AC00 ÷ 0001 ÷');
Test_X('÷ AC00 × 0308 ÷ 0001 ÷');
Test_X('÷ AC00 × 0300 ÷');
Test_X('÷ AC00 × 0308 × 0300 ÷');
Test_X('÷ AC00 ÷ 0E40 ÷');
Test_X('÷ AC00 × 0308 ÷ 0E40 ÷');
Test_X('÷ AC00 × 0903 ÷');
Test_X('÷ AC00 × 0308 × 0903 ÷');
Test_X('÷ AC00 ÷ 1100 ÷');
Test_X('÷ AC00 × 0308 ÷ 1100 ÷');
Test_X('÷ AC00 × 1160 ÷');
Test_X('÷ AC00 × 0308 ÷ 1160 ÷');
Test_X('÷ AC00 × 11A8 ÷');
Test_X('÷ AC00 × 0308 ÷ 11A8 ÷');
Test_X('÷ AC00 ÷ AC00 ÷');
Test_X('÷ AC00 × 0308 ÷ AC00 ÷');
Test_X('÷ AC00 ÷ AC01 ÷');
Test_X('÷ AC00 × 0308 ÷ AC01 ÷');
Test_X('÷ AC01 ÷ 0020 ÷');
Test_X('÷ AC01 × 0308 ÷ 0020 ÷');
Test_X('÷ AC01 ÷ 000D ÷');
Test_X('÷ AC01 × 0308 ÷ 000D ÷');
Test_X('÷ AC01 ÷ 000A ÷');
Test_X('÷ AC01 × 0308 ÷ 000A ÷');
Test_X('÷ AC01 ÷ 0001 ÷');
Test_X('÷ AC01 × 0308 ÷ 0001 ÷');
Test_X('÷ AC01 × 0300 ÷');
Test_X('÷ AC01 × 0308 × 0300 ÷');
Test_X('÷ AC01 ÷ 0E40 ÷');
Test_X('÷ AC01 × 0308 ÷ 0E40 ÷');
Test_X('÷ AC01 × 0903 ÷');
Test_X('÷ AC01 × 0308 × 0903 ÷');
Test_X('÷ AC01 ÷ 1100 ÷');
Test_X('÷ AC01 × 0308 ÷ 1100 ÷');
Test_X('÷ AC01 ÷ 1160 ÷');
Test_X('÷ AC01 × 0308 ÷ 1160 ÷');
Test_X('÷ AC01 × 11A8 ÷');
Test_X('÷ AC01 × 0308 ÷ 11A8 ÷');
Test_X('÷ AC01 ÷ AC00 ÷');
Test_X('÷ AC01 × 0308 ÷ AC00 ÷');
Test_X('÷ AC01 ÷ AC01 ÷');
Test_X('÷ AC01 × 0308 ÷ AC01 ÷');
Finished();
